# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_run_v2_binary_authorization import GoogleCloudRunV2BinaryAuthorization
from openapi_server.models.google_cloud_run_v2_condition import GoogleCloudRunV2Condition
from openapi_server.models.google_cloud_run_v2_execution_reference import GoogleCloudRunV2ExecutionReference
from openapi_server.models.google_cloud_run_v2_execution_template import GoogleCloudRunV2ExecutionTemplate
from openapi_server import util


class GoogleCloudRunV2Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, binary_authorization: GoogleCloudRunV2BinaryAuthorization=None, client: str=None, client_version: str=None, conditions: List[GoogleCloudRunV2Condition]=None, create_time: str=None, creator: str=None, delete_time: str=None, etag: str=None, execution_count: int=None, expire_time: str=None, generation: str=None, labels: Dict[str, str]=None, last_modifier: str=None, latest_created_execution: GoogleCloudRunV2ExecutionReference=None, launch_stage: str=None, name: str=None, observed_generation: str=None, reconciling: bool=None, satisfies_pzs: bool=None, template: GoogleCloudRunV2ExecutionTemplate=None, terminal_condition: GoogleCloudRunV2Condition=None, uid: str=None, update_time: str=None):
        """GoogleCloudRunV2Job - a model defined in OpenAPI

        :param annotations: The annotations of this GoogleCloudRunV2Job.
        :param binary_authorization: The binary_authorization of this GoogleCloudRunV2Job.
        :param client: The client of this GoogleCloudRunV2Job.
        :param client_version: The client_version of this GoogleCloudRunV2Job.
        :param conditions: The conditions of this GoogleCloudRunV2Job.
        :param create_time: The create_time of this GoogleCloudRunV2Job.
        :param creator: The creator of this GoogleCloudRunV2Job.
        :param delete_time: The delete_time of this GoogleCloudRunV2Job.
        :param etag: The etag of this GoogleCloudRunV2Job.
        :param execution_count: The execution_count of this GoogleCloudRunV2Job.
        :param expire_time: The expire_time of this GoogleCloudRunV2Job.
        :param generation: The generation of this GoogleCloudRunV2Job.
        :param labels: The labels of this GoogleCloudRunV2Job.
        :param last_modifier: The last_modifier of this GoogleCloudRunV2Job.
        :param latest_created_execution: The latest_created_execution of this GoogleCloudRunV2Job.
        :param launch_stage: The launch_stage of this GoogleCloudRunV2Job.
        :param name: The name of this GoogleCloudRunV2Job.
        :param observed_generation: The observed_generation of this GoogleCloudRunV2Job.
        :param reconciling: The reconciling of this GoogleCloudRunV2Job.
        :param satisfies_pzs: The satisfies_pzs of this GoogleCloudRunV2Job.
        :param template: The template of this GoogleCloudRunV2Job.
        :param terminal_condition: The terminal_condition of this GoogleCloudRunV2Job.
        :param uid: The uid of this GoogleCloudRunV2Job.
        :param update_time: The update_time of this GoogleCloudRunV2Job.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'binary_authorization': GoogleCloudRunV2BinaryAuthorization,
            'client': str,
            'client_version': str,
            'conditions': List[GoogleCloudRunV2Condition],
            'create_time': str,
            'creator': str,
            'delete_time': str,
            'etag': str,
            'execution_count': int,
            'expire_time': str,
            'generation': str,
            'labels': Dict[str, str],
            'last_modifier': str,
            'latest_created_execution': GoogleCloudRunV2ExecutionReference,
            'launch_stage': str,
            'name': str,
            'observed_generation': str,
            'reconciling': bool,
            'satisfies_pzs': bool,
            'template': GoogleCloudRunV2ExecutionTemplate,
            'terminal_condition': GoogleCloudRunV2Condition,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'binary_authorization': 'binaryAuthorization',
            'client': 'client',
            'client_version': 'clientVersion',
            'conditions': 'conditions',
            'create_time': 'createTime',
            'creator': 'creator',
            'delete_time': 'deleteTime',
            'etag': 'etag',
            'execution_count': 'executionCount',
            'expire_time': 'expireTime',
            'generation': 'generation',
            'labels': 'labels',
            'last_modifier': 'lastModifier',
            'latest_created_execution': 'latestCreatedExecution',
            'launch_stage': 'launchStage',
            'name': 'name',
            'observed_generation': 'observedGeneration',
            'reconciling': 'reconciling',
            'satisfies_pzs': 'satisfiesPzs',
            'template': 'template',
            'terminal_condition': 'terminalCondition',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._annotations = annotations
        self._binary_authorization = binary_authorization
        self._client = client
        self._client_version = client_version
        self._conditions = conditions
        self._create_time = create_time
        self._creator = creator
        self._delete_time = delete_time
        self._etag = etag
        self._execution_count = execution_count
        self._expire_time = expire_time
        self._generation = generation
        self._labels = labels
        self._last_modifier = last_modifier
        self._latest_created_execution = latest_created_execution
        self._launch_stage = launch_stage
        self._name = name
        self._observed_generation = observed_generation
        self._reconciling = reconciling
        self._satisfies_pzs = satisfies_pzs
        self._template = template
        self._terminal_condition = terminal_condition
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRunV2Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRunV2Job of this GoogleCloudRunV2Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this GoogleCloudRunV2Job.

        Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected on new resources. All system annotations in v1 now have a corresponding field in v2 Job. This field follows Kubernetes annotations' namespacing, limits, and rules.

        :return: The annotations of this GoogleCloudRunV2Job.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this GoogleCloudRunV2Job.

        Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected on new resources. All system annotations in v1 now have a corresponding field in v2 Job. This field follows Kubernetes annotations' namespacing, limits, and rules.

        :param annotations: The annotations of this GoogleCloudRunV2Job.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def binary_authorization(self):
        """Gets the binary_authorization of this GoogleCloudRunV2Job.


        :return: The binary_authorization of this GoogleCloudRunV2Job.
        :rtype: GoogleCloudRunV2BinaryAuthorization
        """
        return self._binary_authorization

    @binary_authorization.setter
    def binary_authorization(self, binary_authorization):
        """Sets the binary_authorization of this GoogleCloudRunV2Job.


        :param binary_authorization: The binary_authorization of this GoogleCloudRunV2Job.
        :type binary_authorization: GoogleCloudRunV2BinaryAuthorization
        """

        self._binary_authorization = binary_authorization

    @property
    def client(self):
        """Gets the client of this GoogleCloudRunV2Job.

        Arbitrary identifier for the API client.

        :return: The client of this GoogleCloudRunV2Job.
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this GoogleCloudRunV2Job.

        Arbitrary identifier for the API client.

        :param client: The client of this GoogleCloudRunV2Job.
        :type client: str
        """

        self._client = client

    @property
    def client_version(self):
        """Gets the client_version of this GoogleCloudRunV2Job.

        Arbitrary version identifier for the API client.

        :return: The client_version of this GoogleCloudRunV2Job.
        :rtype: str
        """
        return self._client_version

    @client_version.setter
    def client_version(self, client_version):
        """Sets the client_version of this GoogleCloudRunV2Job.

        Arbitrary version identifier for the API client.

        :param client_version: The client_version of this GoogleCloudRunV2Job.
        :type client_version: str
        """

        self._client_version = client_version

    @property
    def conditions(self):
        """Gets the conditions of this GoogleCloudRunV2Job.

        Output only. The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Job does not reach its desired state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.

        :return: The conditions of this GoogleCloudRunV2Job.
        :rtype: List[GoogleCloudRunV2Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this GoogleCloudRunV2Job.

        Output only. The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the Job does not reach its desired state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.

        :param conditions: The conditions of this GoogleCloudRunV2Job.
        :type conditions: List[GoogleCloudRunV2Condition]
        """

        self._conditions = conditions

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudRunV2Job.

        Output only. The creation time.

        :return: The create_time of this GoogleCloudRunV2Job.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudRunV2Job.

        Output only. The creation time.

        :param create_time: The create_time of this GoogleCloudRunV2Job.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def creator(self):
        """Gets the creator of this GoogleCloudRunV2Job.

        Output only. Email address of the authenticated creator.

        :return: The creator of this GoogleCloudRunV2Job.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this GoogleCloudRunV2Job.

        Output only. Email address of the authenticated creator.

        :param creator: The creator of this GoogleCloudRunV2Job.
        :type creator: str
        """

        self._creator = creator

    @property
    def delete_time(self):
        """Gets the delete_time of this GoogleCloudRunV2Job.

        Output only. The deletion time.

        :return: The delete_time of this GoogleCloudRunV2Job.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this GoogleCloudRunV2Job.

        Output only. The deletion time.

        :param delete_time: The delete_time of this GoogleCloudRunV2Job.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def etag(self):
        """Gets the etag of this GoogleCloudRunV2Job.

        Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.

        :return: The etag of this GoogleCloudRunV2Job.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GoogleCloudRunV2Job.

        Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.

        :param etag: The etag of this GoogleCloudRunV2Job.
        :type etag: str
        """

        self._etag = etag

    @property
    def execution_count(self):
        """Gets the execution_count of this GoogleCloudRunV2Job.

        Output only. Number of executions created for this job.

        :return: The execution_count of this GoogleCloudRunV2Job.
        :rtype: int
        """
        return self._execution_count

    @execution_count.setter
    def execution_count(self, execution_count):
        """Sets the execution_count of this GoogleCloudRunV2Job.

        Output only. Number of executions created for this job.

        :param execution_count: The execution_count of this GoogleCloudRunV2Job.
        :type execution_count: int
        """

        self._execution_count = execution_count

    @property
    def expire_time(self):
        """Gets the expire_time of this GoogleCloudRunV2Job.

        Output only. For a deleted resource, the time after which it will be permamently deleted.

        :return: The expire_time of this GoogleCloudRunV2Job.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this GoogleCloudRunV2Job.

        Output only. For a deleted resource, the time after which it will be permamently deleted.

        :param expire_time: The expire_time of this GoogleCloudRunV2Job.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def generation(self):
        """Gets the generation of this GoogleCloudRunV2Job.

        Output only. A number that monotonically increases every time the user modifies the desired state.

        :return: The generation of this GoogleCloudRunV2Job.
        :rtype: str
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this GoogleCloudRunV2Job.

        Output only. A number that monotonically increases every time the user modifies the desired state.

        :param generation: The generation of this GoogleCloudRunV2Job.
        :type generation: str
        """

        self._generation = generation

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudRunV2Job.

        Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system labels in v1 now have a corresponding field in v2 Job.

        :return: The labels of this GoogleCloudRunV2Job.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudRunV2Job.

        Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system labels in v1 now have a corresponding field in v2 Job.

        :param labels: The labels of this GoogleCloudRunV2Job.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def last_modifier(self):
        """Gets the last_modifier of this GoogleCloudRunV2Job.

        Output only. Email address of the last authenticated modifier.

        :return: The last_modifier of this GoogleCloudRunV2Job.
        :rtype: str
        """
        return self._last_modifier

    @last_modifier.setter
    def last_modifier(self, last_modifier):
        """Sets the last_modifier of this GoogleCloudRunV2Job.

        Output only. Email address of the last authenticated modifier.

        :param last_modifier: The last_modifier of this GoogleCloudRunV2Job.
        :type last_modifier: str
        """

        self._last_modifier = last_modifier

    @property
    def latest_created_execution(self):
        """Gets the latest_created_execution of this GoogleCloudRunV2Job.


        :return: The latest_created_execution of this GoogleCloudRunV2Job.
        :rtype: GoogleCloudRunV2ExecutionReference
        """
        return self._latest_created_execution

    @latest_created_execution.setter
    def latest_created_execution(self, latest_created_execution):
        """Sets the latest_created_execution of this GoogleCloudRunV2Job.


        :param latest_created_execution: The latest_created_execution of this GoogleCloudRunV2Job.
        :type latest_created_execution: GoogleCloudRunV2ExecutionReference
        """

        self._latest_created_execution = latest_created_execution

    @property
    def launch_stage(self):
        """Gets the launch_stage of this GoogleCloudRunV2Job.

        The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features. For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.

        :return: The launch_stage of this GoogleCloudRunV2Job.
        :rtype: str
        """
        return self._launch_stage

    @launch_stage.setter
    def launch_stage(self, launch_stage):
        """Sets the launch_stage of this GoogleCloudRunV2Job.

        The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features. For example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output.

        :param launch_stage: The launch_stage of this GoogleCloudRunV2Job.
        :type launch_stage: str
        """
        allowed_values = ["LAUNCH_STAGE_UNSPECIFIED", "UNIMPLEMENTED", "PRELAUNCH", "EARLY_ACCESS", "ALPHA", "BETA", "GA", "DEPRECATED"]  # noqa: E501
        if launch_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `launch_stage` ({0}), must be one of {1}"
                .format(launch_stage, allowed_values)
            )

        self._launch_stage = launch_stage

    @property
    def name(self):
        """Gets the name of this GoogleCloudRunV2Job.

        The fully qualified name of this Job. Format: projects/{project}/locations/{location}/jobs/{job}

        :return: The name of this GoogleCloudRunV2Job.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudRunV2Job.

        The fully qualified name of this Job. Format: projects/{project}/locations/{location}/jobs/{job}

        :param name: The name of this GoogleCloudRunV2Job.
        :type name: str
        """

        self._name = name

    @property
    def observed_generation(self):
        """Gets the observed_generation of this GoogleCloudRunV2Job.

        Output only. The generation of this Job. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.

        :return: The observed_generation of this GoogleCloudRunV2Job.
        :rtype: str
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation):
        """Sets the observed_generation of this GoogleCloudRunV2Job.

        Output only. The generation of this Job. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.

        :param observed_generation: The observed_generation of this GoogleCloudRunV2Job.
        :type observed_generation: str
        """

        self._observed_generation = observed_generation

    @property
    def reconciling(self):
        """Gets the reconciling of this GoogleCloudRunV2Job.

        Output only. Returns true if the Job is currently being acted upon by the system to bring it into the desired state. When a new Job is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Job to the desired state. This process is called reconciliation. While reconciliation is in process, `observed_generation` and `latest_succeeded_execution`, will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the state matches the Job, or there was an error, and reconciliation failed. This state can be found in `terminal_condition.state`. If reconciliation succeeded, the following fields will match: `observed_generation` and `generation`, `latest_succeeded_execution` and `latest_created_execution`. If reconciliation failed, `observed_generation` and `latest_succeeded_execution` will have the state of the last succeeded execution or empty for newly created Job. Additional information on the failure can be found in `terminal_condition` and `conditions`.

        :return: The reconciling of this GoogleCloudRunV2Job.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this GoogleCloudRunV2Job.

        Output only. Returns true if the Job is currently being acted upon by the system to bring it into the desired state. When a new Job is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Job to the desired state. This process is called reconciliation. While reconciliation is in process, `observed_generation` and `latest_succeeded_execution`, will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the state matches the Job, or there was an error, and reconciliation failed. This state can be found in `terminal_condition.state`. If reconciliation succeeded, the following fields will match: `observed_generation` and `generation`, `latest_succeeded_execution` and `latest_created_execution`. If reconciliation failed, `observed_generation` and `latest_succeeded_execution` will have the state of the last succeeded execution or empty for newly created Job. Additional information on the failure can be found in `terminal_condition` and `conditions`.

        :param reconciling: The reconciling of this GoogleCloudRunV2Job.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def satisfies_pzs(self):
        """Gets the satisfies_pzs of this GoogleCloudRunV2Job.

        Output only. Reserved for future use.

        :return: The satisfies_pzs of this GoogleCloudRunV2Job.
        :rtype: bool
        """
        return self._satisfies_pzs

    @satisfies_pzs.setter
    def satisfies_pzs(self, satisfies_pzs):
        """Sets the satisfies_pzs of this GoogleCloudRunV2Job.

        Output only. Reserved for future use.

        :param satisfies_pzs: The satisfies_pzs of this GoogleCloudRunV2Job.
        :type satisfies_pzs: bool
        """

        self._satisfies_pzs = satisfies_pzs

    @property
    def template(self):
        """Gets the template of this GoogleCloudRunV2Job.


        :return: The template of this GoogleCloudRunV2Job.
        :rtype: GoogleCloudRunV2ExecutionTemplate
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this GoogleCloudRunV2Job.


        :param template: The template of this GoogleCloudRunV2Job.
        :type template: GoogleCloudRunV2ExecutionTemplate
        """

        self._template = template

    @property
    def terminal_condition(self):
        """Gets the terminal_condition of this GoogleCloudRunV2Job.


        :return: The terminal_condition of this GoogleCloudRunV2Job.
        :rtype: GoogleCloudRunV2Condition
        """
        return self._terminal_condition

    @terminal_condition.setter
    def terminal_condition(self, terminal_condition):
        """Sets the terminal_condition of this GoogleCloudRunV2Job.


        :param terminal_condition: The terminal_condition of this GoogleCloudRunV2Job.
        :type terminal_condition: GoogleCloudRunV2Condition
        """

        self._terminal_condition = terminal_condition

    @property
    def uid(self):
        """Gets the uid of this GoogleCloudRunV2Job.

        Output only. Server assigned unique identifier for the Execution. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.

        :return: The uid of this GoogleCloudRunV2Job.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this GoogleCloudRunV2Job.

        Output only. Server assigned unique identifier for the Execution. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.

        :param uid: The uid of this GoogleCloudRunV2Job.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudRunV2Job.

        Output only. The last-modified time.

        :return: The update_time of this GoogleCloudRunV2Job.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudRunV2Job.

        Output only. The last-modified time.

        :param update_time: The update_time of this GoogleCloudRunV2Job.
        :type update_time: str
        """

        self._update_time = update_time
