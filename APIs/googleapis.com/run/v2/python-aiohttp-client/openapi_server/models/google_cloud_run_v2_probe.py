# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_run_v2_grpc_action import GoogleCloudRunV2GRPCAction
from openapi_server.models.google_cloud_run_v2_http_get_action import GoogleCloudRunV2HTTPGetAction
from openapi_server.models.google_cloud_run_v2_tcp_socket_action import GoogleCloudRunV2TCPSocketAction
from openapi_server import util


class GoogleCloudRunV2Probe(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failure_threshold: int=None, grpc: GoogleCloudRunV2GRPCAction=None, http_get: GoogleCloudRunV2HTTPGetAction=None, initial_delay_seconds: int=None, period_seconds: int=None, tcp_socket: GoogleCloudRunV2TCPSocketAction=None, timeout_seconds: int=None):
        """GoogleCloudRunV2Probe - a model defined in OpenAPI

        :param failure_threshold: The failure_threshold of this GoogleCloudRunV2Probe.
        :param grpc: The grpc of this GoogleCloudRunV2Probe.
        :param http_get: The http_get of this GoogleCloudRunV2Probe.
        :param initial_delay_seconds: The initial_delay_seconds of this GoogleCloudRunV2Probe.
        :param period_seconds: The period_seconds of this GoogleCloudRunV2Probe.
        :param tcp_socket: The tcp_socket of this GoogleCloudRunV2Probe.
        :param timeout_seconds: The timeout_seconds of this GoogleCloudRunV2Probe.
        """
        self.openapi_types = {
            'failure_threshold': int,
            'grpc': GoogleCloudRunV2GRPCAction,
            'http_get': GoogleCloudRunV2HTTPGetAction,
            'initial_delay_seconds': int,
            'period_seconds': int,
            'tcp_socket': GoogleCloudRunV2TCPSocketAction,
            'timeout_seconds': int
        }

        self.attribute_map = {
            'failure_threshold': 'failureThreshold',
            'grpc': 'grpc',
            'http_get': 'httpGet',
            'initial_delay_seconds': 'initialDelaySeconds',
            'period_seconds': 'periodSeconds',
            'tcp_socket': 'tcpSocket',
            'timeout_seconds': 'timeoutSeconds'
        }

        self._failure_threshold = failure_threshold
        self._grpc = grpc
        self._http_get = http_get
        self._initial_delay_seconds = initial_delay_seconds
        self._period_seconds = period_seconds
        self._tcp_socket = tcp_socket
        self._timeout_seconds = timeout_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRunV2Probe':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRunV2Probe of this GoogleCloudRunV2Probe.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failure_threshold(self):
        """Gets the failure_threshold of this GoogleCloudRunV2Probe.

        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.

        :return: The failure_threshold of this GoogleCloudRunV2Probe.
        :rtype: int
        """
        return self._failure_threshold

    @failure_threshold.setter
    def failure_threshold(self, failure_threshold):
        """Sets the failure_threshold of this GoogleCloudRunV2Probe.

        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.

        :param failure_threshold: The failure_threshold of this GoogleCloudRunV2Probe.
        :type failure_threshold: int
        """

        self._failure_threshold = failure_threshold

    @property
    def grpc(self):
        """Gets the grpc of this GoogleCloudRunV2Probe.


        :return: The grpc of this GoogleCloudRunV2Probe.
        :rtype: GoogleCloudRunV2GRPCAction
        """
        return self._grpc

    @grpc.setter
    def grpc(self, grpc):
        """Sets the grpc of this GoogleCloudRunV2Probe.


        :param grpc: The grpc of this GoogleCloudRunV2Probe.
        :type grpc: GoogleCloudRunV2GRPCAction
        """

        self._grpc = grpc

    @property
    def http_get(self):
        """Gets the http_get of this GoogleCloudRunV2Probe.


        :return: The http_get of this GoogleCloudRunV2Probe.
        :rtype: GoogleCloudRunV2HTTPGetAction
        """
        return self._http_get

    @http_get.setter
    def http_get(self, http_get):
        """Sets the http_get of this GoogleCloudRunV2Probe.


        :param http_get: The http_get of this GoogleCloudRunV2Probe.
        :type http_get: GoogleCloudRunV2HTTPGetAction
        """

        self._http_get = http_get

    @property
    def initial_delay_seconds(self):
        """Gets the initial_delay_seconds of this GoogleCloudRunV2Probe.

        Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240.

        :return: The initial_delay_seconds of this GoogleCloudRunV2Probe.
        :rtype: int
        """
        return self._initial_delay_seconds

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, initial_delay_seconds):
        """Sets the initial_delay_seconds of this GoogleCloudRunV2Probe.

        Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240.

        :param initial_delay_seconds: The initial_delay_seconds of this GoogleCloudRunV2Probe.
        :type initial_delay_seconds: int
        """

        self._initial_delay_seconds = initial_delay_seconds

    @property
    def period_seconds(self):
        """Gets the period_seconds of this GoogleCloudRunV2Probe.

        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.

        :return: The period_seconds of this GoogleCloudRunV2Probe.
        :rtype: int
        """
        return self._period_seconds

    @period_seconds.setter
    def period_seconds(self, period_seconds):
        """Sets the period_seconds of this GoogleCloudRunV2Probe.

        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.

        :param period_seconds: The period_seconds of this GoogleCloudRunV2Probe.
        :type period_seconds: int
        """

        self._period_seconds = period_seconds

    @property
    def tcp_socket(self):
        """Gets the tcp_socket of this GoogleCloudRunV2Probe.


        :return: The tcp_socket of this GoogleCloudRunV2Probe.
        :rtype: GoogleCloudRunV2TCPSocketAction
        """
        return self._tcp_socket

    @tcp_socket.setter
    def tcp_socket(self, tcp_socket):
        """Sets the tcp_socket of this GoogleCloudRunV2Probe.


        :param tcp_socket: The tcp_socket of this GoogleCloudRunV2Probe.
        :type tcp_socket: GoogleCloudRunV2TCPSocketAction
        """

        self._tcp_socket = tcp_socket

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this GoogleCloudRunV2Probe.

        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds.

        :return: The timeout_seconds of this GoogleCloudRunV2Probe.
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this GoogleCloudRunV2Probe.

        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds.

        :param timeout_seconds: The timeout_seconds of this GoogleCloudRunV2Probe.
        :type timeout_seconds: int
        """

        self._timeout_seconds = timeout_seconds
