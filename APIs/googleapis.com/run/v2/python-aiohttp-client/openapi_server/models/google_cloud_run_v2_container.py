# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_run_v2_container_port import GoogleCloudRunV2ContainerPort
from openapi_server.models.google_cloud_run_v2_env_var import GoogleCloudRunV2EnvVar
from openapi_server.models.google_cloud_run_v2_probe import GoogleCloudRunV2Probe
from openapi_server.models.google_cloud_run_v2_resource_requirements import GoogleCloudRunV2ResourceRequirements
from openapi_server.models.google_cloud_run_v2_volume_mount import GoogleCloudRunV2VolumeMount
from openapi_server import util


class GoogleCloudRunV2Container(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args: List[str]=None, command: List[str]=None, depends_on: List[str]=None, env: List[GoogleCloudRunV2EnvVar]=None, image: str=None, liveness_probe: GoogleCloudRunV2Probe=None, name: str=None, ports: List[GoogleCloudRunV2ContainerPort]=None, resources: GoogleCloudRunV2ResourceRequirements=None, startup_probe: GoogleCloudRunV2Probe=None, volume_mounts: List[GoogleCloudRunV2VolumeMount]=None, working_dir: str=None):
        """GoogleCloudRunV2Container - a model defined in OpenAPI

        :param args: The args of this GoogleCloudRunV2Container.
        :param command: The command of this GoogleCloudRunV2Container.
        :param depends_on: The depends_on of this GoogleCloudRunV2Container.
        :param env: The env of this GoogleCloudRunV2Container.
        :param image: The image of this GoogleCloudRunV2Container.
        :param liveness_probe: The liveness_probe of this GoogleCloudRunV2Container.
        :param name: The name of this GoogleCloudRunV2Container.
        :param ports: The ports of this GoogleCloudRunV2Container.
        :param resources: The resources of this GoogleCloudRunV2Container.
        :param startup_probe: The startup_probe of this GoogleCloudRunV2Container.
        :param volume_mounts: The volume_mounts of this GoogleCloudRunV2Container.
        :param working_dir: The working_dir of this GoogleCloudRunV2Container.
        """
        self.openapi_types = {
            'args': List[str],
            'command': List[str],
            'depends_on': List[str],
            'env': List[GoogleCloudRunV2EnvVar],
            'image': str,
            'liveness_probe': GoogleCloudRunV2Probe,
            'name': str,
            'ports': List[GoogleCloudRunV2ContainerPort],
            'resources': GoogleCloudRunV2ResourceRequirements,
            'startup_probe': GoogleCloudRunV2Probe,
            'volume_mounts': List[GoogleCloudRunV2VolumeMount],
            'working_dir': str
        }

        self.attribute_map = {
            'args': 'args',
            'command': 'command',
            'depends_on': 'dependsOn',
            'env': 'env',
            'image': 'image',
            'liveness_probe': 'livenessProbe',
            'name': 'name',
            'ports': 'ports',
            'resources': 'resources',
            'startup_probe': 'startupProbe',
            'volume_mounts': 'volumeMounts',
            'working_dir': 'workingDir'
        }

        self._args = args
        self._command = command
        self._depends_on = depends_on
        self._env = env
        self._image = image
        self._liveness_probe = liveness_probe
        self._name = name
        self._ports = ports
        self._resources = resources
        self._startup_probe = startup_probe
        self._volume_mounts = volume_mounts
        self._working_dir = working_dir

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRunV2Container':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRunV2Container of this GoogleCloudRunV2Container.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args(self):
        """Gets the args of this GoogleCloudRunV2Container.

        Arguments to the entrypoint. The docker image's CMD is used if this is not provided.

        :return: The args of this GoogleCloudRunV2Container.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this GoogleCloudRunV2Container.

        Arguments to the entrypoint. The docker image's CMD is used if this is not provided.

        :param args: The args of this GoogleCloudRunV2Container.
        :type args: List[str]
        """

        self._args = args

    @property
    def command(self):
        """Gets the command of this GoogleCloudRunV2Container.

        Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided.

        :return: The command of this GoogleCloudRunV2Container.
        :rtype: List[str]
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this GoogleCloudRunV2Container.

        Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided.

        :param command: The command of this GoogleCloudRunV2Container.
        :type command: List[str]
        """

        self._command = command

    @property
    def depends_on(self):
        """Gets the depends_on of this GoogleCloudRunV2Container.

        Names of the containers that must start before this container.

        :return: The depends_on of this GoogleCloudRunV2Container.
        :rtype: List[str]
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this GoogleCloudRunV2Container.

        Names of the containers that must start before this container.

        :param depends_on: The depends_on of this GoogleCloudRunV2Container.
        :type depends_on: List[str]
        """

        self._depends_on = depends_on

    @property
    def env(self):
        """Gets the env of this GoogleCloudRunV2Container.

        List of environment variables to set in the container.

        :return: The env of this GoogleCloudRunV2Container.
        :rtype: List[GoogleCloudRunV2EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this GoogleCloudRunV2Container.

        List of environment variables to set in the container.

        :param env: The env of this GoogleCloudRunV2Container.
        :type env: List[GoogleCloudRunV2EnvVar]
        """

        self._env = env

    @property
    def image(self):
        """Gets the image of this GoogleCloudRunV2Container.

        Required. Name of the container image in Dockerhub, Google Artifact Registry, or Google Container Registry. If the host is not provided, Dockerhub is assumed.

        :return: The image of this GoogleCloudRunV2Container.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this GoogleCloudRunV2Container.

        Required. Name of the container image in Dockerhub, Google Artifact Registry, or Google Container Registry. If the host is not provided, Dockerhub is assumed.

        :param image: The image of this GoogleCloudRunV2Container.
        :type image: str
        """

        self._image = image

    @property
    def liveness_probe(self):
        """Gets the liveness_probe of this GoogleCloudRunV2Container.


        :return: The liveness_probe of this GoogleCloudRunV2Container.
        :rtype: GoogleCloudRunV2Probe
        """
        return self._liveness_probe

    @liveness_probe.setter
    def liveness_probe(self, liveness_probe):
        """Sets the liveness_probe of this GoogleCloudRunV2Container.


        :param liveness_probe: The liveness_probe of this GoogleCloudRunV2Container.
        :type liveness_probe: GoogleCloudRunV2Probe
        """

        self._liveness_probe = liveness_probe

    @property
    def name(self):
        """Gets the name of this GoogleCloudRunV2Container.

        Name of the container specified as a DNS_LABEL (RFC 1123).

        :return: The name of this GoogleCloudRunV2Container.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudRunV2Container.

        Name of the container specified as a DNS_LABEL (RFC 1123).

        :param name: The name of this GoogleCloudRunV2Container.
        :type name: str
        """

        self._name = name

    @property
    def ports(self):
        """Gets the ports of this GoogleCloudRunV2Container.

        List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.

        :return: The ports of this GoogleCloudRunV2Container.
        :rtype: List[GoogleCloudRunV2ContainerPort]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this GoogleCloudRunV2Container.

        List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.

        :param ports: The ports of this GoogleCloudRunV2Container.
        :type ports: List[GoogleCloudRunV2ContainerPort]
        """

        self._ports = ports

    @property
    def resources(self):
        """Gets the resources of this GoogleCloudRunV2Container.


        :return: The resources of this GoogleCloudRunV2Container.
        :rtype: GoogleCloudRunV2ResourceRequirements
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this GoogleCloudRunV2Container.


        :param resources: The resources of this GoogleCloudRunV2Container.
        :type resources: GoogleCloudRunV2ResourceRequirements
        """

        self._resources = resources

    @property
    def startup_probe(self):
        """Gets the startup_probe of this GoogleCloudRunV2Container.


        :return: The startup_probe of this GoogleCloudRunV2Container.
        :rtype: GoogleCloudRunV2Probe
        """
        return self._startup_probe

    @startup_probe.setter
    def startup_probe(self, startup_probe):
        """Sets the startup_probe of this GoogleCloudRunV2Container.


        :param startup_probe: The startup_probe of this GoogleCloudRunV2Container.
        :type startup_probe: GoogleCloudRunV2Probe
        """

        self._startup_probe = startup_probe

    @property
    def volume_mounts(self):
        """Gets the volume_mounts of this GoogleCloudRunV2Container.

        Volume to mount into the container's filesystem.

        :return: The volume_mounts of this GoogleCloudRunV2Container.
        :rtype: List[GoogleCloudRunV2VolumeMount]
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts):
        """Sets the volume_mounts of this GoogleCloudRunV2Container.

        Volume to mount into the container's filesystem.

        :param volume_mounts: The volume_mounts of this GoogleCloudRunV2Container.
        :type volume_mounts: List[GoogleCloudRunV2VolumeMount]
        """

        self._volume_mounts = volume_mounts

    @property
    def working_dir(self):
        """Gets the working_dir of this GoogleCloudRunV2Container.

        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.

        :return: The working_dir of this GoogleCloudRunV2Container.
        :rtype: str
        """
        return self._working_dir

    @working_dir.setter
    def working_dir(self, working_dir):
        """Sets the working_dir of this GoogleCloudRunV2Container.

        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.

        :param working_dir: The working_dir of this GoogleCloudRunV2Container.
        :type working_dir: str
        """

        self._working_dir = working_dir
