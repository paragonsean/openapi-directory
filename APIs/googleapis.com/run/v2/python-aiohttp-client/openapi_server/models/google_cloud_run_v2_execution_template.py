# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_run_v2_task_template import GoogleCloudRunV2TaskTemplate
from openapi_server import util


class GoogleCloudRunV2ExecutionTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, labels: Dict[str, str]=None, parallelism: int=None, task_count: int=None, template: GoogleCloudRunV2TaskTemplate=None):
        """GoogleCloudRunV2ExecutionTemplate - a model defined in OpenAPI

        :param annotations: The annotations of this GoogleCloudRunV2ExecutionTemplate.
        :param labels: The labels of this GoogleCloudRunV2ExecutionTemplate.
        :param parallelism: The parallelism of this GoogleCloudRunV2ExecutionTemplate.
        :param task_count: The task_count of this GoogleCloudRunV2ExecutionTemplate.
        :param template: The template of this GoogleCloudRunV2ExecutionTemplate.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'labels': Dict[str, str],
            'parallelism': int,
            'task_count': int,
            'template': GoogleCloudRunV2TaskTemplate
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'labels': 'labels',
            'parallelism': 'parallelism',
            'task_count': 'taskCount',
            'template': 'template'
        }

        self._annotations = annotations
        self._labels = labels
        self._parallelism = parallelism
        self._task_count = task_count
        self._template = template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRunV2ExecutionTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRunV2ExecutionTemplate of this GoogleCloudRunV2ExecutionTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this GoogleCloudRunV2ExecutionTemplate.

        Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system annotations in v1 now have a corresponding field in v2 ExecutionTemplate. This field follows Kubernetes annotations' namespacing, limits, and rules.

        :return: The annotations of this GoogleCloudRunV2ExecutionTemplate.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this GoogleCloudRunV2ExecutionTemplate.

        Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run API v2 does not support annotations with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system annotations in v1 now have a corresponding field in v2 ExecutionTemplate. This field follows Kubernetes annotations' namespacing, limits, and rules.

        :param annotations: The annotations of this GoogleCloudRunV2ExecutionTemplate.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudRunV2ExecutionTemplate.

        Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system labels in v1 now have a corresponding field in v2 ExecutionTemplate.

        :return: The labels of this GoogleCloudRunV2ExecutionTemplate.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudRunV2ExecutionTemplate.

        Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with `run.googleapis.com`, `cloud.googleapis.com`, `serving.knative.dev`, or `autoscaling.knative.dev` namespaces, and they will be rejected. All system labels in v1 now have a corresponding field in v2 ExecutionTemplate.

        :param labels: The labels of this GoogleCloudRunV2ExecutionTemplate.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def parallelism(self):
        """Gets the parallelism of this GoogleCloudRunV2ExecutionTemplate.

        Specifies the maximum desired number of tasks the execution should run at given time. Must be <= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.

        :return: The parallelism of this GoogleCloudRunV2ExecutionTemplate.
        :rtype: int
        """
        return self._parallelism

    @parallelism.setter
    def parallelism(self, parallelism):
        """Sets the parallelism of this GoogleCloudRunV2ExecutionTemplate.

        Specifies the maximum desired number of tasks the execution should run at given time. Must be <= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.

        :param parallelism: The parallelism of this GoogleCloudRunV2ExecutionTemplate.
        :type parallelism: int
        """

        self._parallelism = parallelism

    @property
    def task_count(self):
        """Gets the task_count of this GoogleCloudRunV2ExecutionTemplate.

        Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. Defaults to 1.

        :return: The task_count of this GoogleCloudRunV2ExecutionTemplate.
        :rtype: int
        """
        return self._task_count

    @task_count.setter
    def task_count(self, task_count):
        """Sets the task_count of this GoogleCloudRunV2ExecutionTemplate.

        Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. Defaults to 1.

        :param task_count: The task_count of this GoogleCloudRunV2ExecutionTemplate.
        :type task_count: int
        """

        self._task_count = task_count

    @property
    def template(self):
        """Gets the template of this GoogleCloudRunV2ExecutionTemplate.


        :return: The template of this GoogleCloudRunV2ExecutionTemplate.
        :rtype: GoogleCloudRunV2TaskTemplate
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this GoogleCloudRunV2ExecutionTemplate.


        :param template: The template of this GoogleCloudRunV2ExecutionTemplate.
        :type template: GoogleCloudRunV2TaskTemplate
        """

        self._template = template
