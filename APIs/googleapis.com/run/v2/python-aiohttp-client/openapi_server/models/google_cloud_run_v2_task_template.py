# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_run_v2_container import GoogleCloudRunV2Container
from openapi_server.models.google_cloud_run_v2_volume import GoogleCloudRunV2Volume
from openapi_server.models.google_cloud_run_v2_vpc_access import GoogleCloudRunV2VpcAccess
from openapi_server import util


class GoogleCloudRunV2TaskTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, containers: List[GoogleCloudRunV2Container]=None, encryption_key: str=None, execution_environment: str=None, max_retries: int=None, service_account: str=None, timeout: str=None, volumes: List[GoogleCloudRunV2Volume]=None, vpc_access: GoogleCloudRunV2VpcAccess=None):
        """GoogleCloudRunV2TaskTemplate - a model defined in OpenAPI

        :param containers: The containers of this GoogleCloudRunV2TaskTemplate.
        :param encryption_key: The encryption_key of this GoogleCloudRunV2TaskTemplate.
        :param execution_environment: The execution_environment of this GoogleCloudRunV2TaskTemplate.
        :param max_retries: The max_retries of this GoogleCloudRunV2TaskTemplate.
        :param service_account: The service_account of this GoogleCloudRunV2TaskTemplate.
        :param timeout: The timeout of this GoogleCloudRunV2TaskTemplate.
        :param volumes: The volumes of this GoogleCloudRunV2TaskTemplate.
        :param vpc_access: The vpc_access of this GoogleCloudRunV2TaskTemplate.
        """
        self.openapi_types = {
            'containers': List[GoogleCloudRunV2Container],
            'encryption_key': str,
            'execution_environment': str,
            'max_retries': int,
            'service_account': str,
            'timeout': str,
            'volumes': List[GoogleCloudRunV2Volume],
            'vpc_access': GoogleCloudRunV2VpcAccess
        }

        self.attribute_map = {
            'containers': 'containers',
            'encryption_key': 'encryptionKey',
            'execution_environment': 'executionEnvironment',
            'max_retries': 'maxRetries',
            'service_account': 'serviceAccount',
            'timeout': 'timeout',
            'volumes': 'volumes',
            'vpc_access': 'vpcAccess'
        }

        self._containers = containers
        self._encryption_key = encryption_key
        self._execution_environment = execution_environment
        self._max_retries = max_retries
        self._service_account = service_account
        self._timeout = timeout
        self._volumes = volumes
        self._vpc_access = vpc_access

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRunV2TaskTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRunV2TaskTemplate of this GoogleCloudRunV2TaskTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def containers(self):
        """Gets the containers of this GoogleCloudRunV2TaskTemplate.

        Holds the single container that defines the unit of execution for this task.

        :return: The containers of this GoogleCloudRunV2TaskTemplate.
        :rtype: List[GoogleCloudRunV2Container]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this GoogleCloudRunV2TaskTemplate.

        Holds the single container that defines the unit of execution for this task.

        :param containers: The containers of this GoogleCloudRunV2TaskTemplate.
        :type containers: List[GoogleCloudRunV2Container]
        """

        self._containers = containers

    @property
    def encryption_key(self):
        """Gets the encryption_key of this GoogleCloudRunV2TaskTemplate.

        A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek

        :return: The encryption_key of this GoogleCloudRunV2TaskTemplate.
        :rtype: str
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this GoogleCloudRunV2TaskTemplate.

        A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek

        :param encryption_key: The encryption_key of this GoogleCloudRunV2TaskTemplate.
        :type encryption_key: str
        """

        self._encryption_key = encryption_key

    @property
    def execution_environment(self):
        """Gets the execution_environment of this GoogleCloudRunV2TaskTemplate.

        The execution environment being used to host this Task.

        :return: The execution_environment of this GoogleCloudRunV2TaskTemplate.
        :rtype: str
        """
        return self._execution_environment

    @execution_environment.setter
    def execution_environment(self, execution_environment):
        """Sets the execution_environment of this GoogleCloudRunV2TaskTemplate.

        The execution environment being used to host this Task.

        :param execution_environment: The execution_environment of this GoogleCloudRunV2TaskTemplate.
        :type execution_environment: str
        """
        allowed_values = ["EXECUTION_ENVIRONMENT_UNSPECIFIED", "EXECUTION_ENVIRONMENT_GEN1", "EXECUTION_ENVIRONMENT_GEN2"]  # noqa: E501
        if execution_environment not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_environment` ({0}), must be one of {1}"
                .format(execution_environment, allowed_values)
            )

        self._execution_environment = execution_environment

    @property
    def max_retries(self):
        """Gets the max_retries of this GoogleCloudRunV2TaskTemplate.

        Number of retries allowed per Task, before marking this Task failed. Defaults to 3.

        :return: The max_retries of this GoogleCloudRunV2TaskTemplate.
        :rtype: int
        """
        return self._max_retries

    @max_retries.setter
    def max_retries(self, max_retries):
        """Sets the max_retries of this GoogleCloudRunV2TaskTemplate.

        Number of retries allowed per Task, before marking this Task failed. Defaults to 3.

        :param max_retries: The max_retries of this GoogleCloudRunV2TaskTemplate.
        :type max_retries: int
        """

        self._max_retries = max_retries

    @property
    def service_account(self):
        """Gets the service_account of this GoogleCloudRunV2TaskTemplate.

        Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.

        :return: The service_account of this GoogleCloudRunV2TaskTemplate.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this GoogleCloudRunV2TaskTemplate.

        Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.

        :param service_account: The service_account of this GoogleCloudRunV2TaskTemplate.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def timeout(self):
        """Gets the timeout of this GoogleCloudRunV2TaskTemplate.

        Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout. Defaults to 600 seconds.

        :return: The timeout of this GoogleCloudRunV2TaskTemplate.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this GoogleCloudRunV2TaskTemplate.

        Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout. Defaults to 600 seconds.

        :param timeout: The timeout of this GoogleCloudRunV2TaskTemplate.
        :type timeout: str
        """

        self._timeout = timeout

    @property
    def volumes(self):
        """Gets the volumes of this GoogleCloudRunV2TaskTemplate.

        A list of Volumes to make available to containers.

        :return: The volumes of this GoogleCloudRunV2TaskTemplate.
        :rtype: List[GoogleCloudRunV2Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this GoogleCloudRunV2TaskTemplate.

        A list of Volumes to make available to containers.

        :param volumes: The volumes of this GoogleCloudRunV2TaskTemplate.
        :type volumes: List[GoogleCloudRunV2Volume]
        """

        self._volumes = volumes

    @property
    def vpc_access(self):
        """Gets the vpc_access of this GoogleCloudRunV2TaskTemplate.


        :return: The vpc_access of this GoogleCloudRunV2TaskTemplate.
        :rtype: GoogleCloudRunV2VpcAccess
        """
        return self._vpc_access

    @vpc_access.setter
    def vpc_access(self, vpc_access):
        """Sets the vpc_access of this GoogleCloudRunV2TaskTemplate.


        :param vpc_access: The vpc_access of this GoogleCloudRunV2TaskTemplate.
        :type vpc_access: GoogleCloudRunV2VpcAccess
        """

        self._vpc_access = vpc_access
