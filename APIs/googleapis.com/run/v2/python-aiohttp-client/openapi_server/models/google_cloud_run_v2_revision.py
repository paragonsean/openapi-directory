# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_run_v2_condition import GoogleCloudRunV2Condition
from openapi_server.models.google_cloud_run_v2_container import GoogleCloudRunV2Container
from openapi_server.models.google_cloud_run_v2_revision_scaling import GoogleCloudRunV2RevisionScaling
from openapi_server.models.google_cloud_run_v2_revision_scaling_status import GoogleCloudRunV2RevisionScalingStatus
from openapi_server.models.google_cloud_run_v2_volume import GoogleCloudRunV2Volume
from openapi_server.models.google_cloud_run_v2_vpc_access import GoogleCloudRunV2VpcAccess
from openapi_server import util


class GoogleCloudRunV2Revision(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, conditions: List[GoogleCloudRunV2Condition]=None, containers: List[GoogleCloudRunV2Container]=None, create_time: str=None, delete_time: str=None, encryption_key: str=None, encryption_key_revocation_action: str=None, encryption_key_shutdown_duration: str=None, etag: str=None, execution_environment: str=None, expire_time: str=None, generation: str=None, labels: Dict[str, str]=None, launch_stage: str=None, log_uri: str=None, max_instance_request_concurrency: int=None, name: str=None, observed_generation: str=None, reconciling: bool=None, satisfies_pzs: bool=None, scaling: GoogleCloudRunV2RevisionScaling=None, scaling_status: GoogleCloudRunV2RevisionScalingStatus=None, service: str=None, service_account: str=None, session_affinity: bool=None, timeout: str=None, uid: str=None, update_time: str=None, volumes: List[GoogleCloudRunV2Volume]=None, vpc_access: GoogleCloudRunV2VpcAccess=None):
        """GoogleCloudRunV2Revision - a model defined in OpenAPI

        :param annotations: The annotations of this GoogleCloudRunV2Revision.
        :param conditions: The conditions of this GoogleCloudRunV2Revision.
        :param containers: The containers of this GoogleCloudRunV2Revision.
        :param create_time: The create_time of this GoogleCloudRunV2Revision.
        :param delete_time: The delete_time of this GoogleCloudRunV2Revision.
        :param encryption_key: The encryption_key of this GoogleCloudRunV2Revision.
        :param encryption_key_revocation_action: The encryption_key_revocation_action of this GoogleCloudRunV2Revision.
        :param encryption_key_shutdown_duration: The encryption_key_shutdown_duration of this GoogleCloudRunV2Revision.
        :param etag: The etag of this GoogleCloudRunV2Revision.
        :param execution_environment: The execution_environment of this GoogleCloudRunV2Revision.
        :param expire_time: The expire_time of this GoogleCloudRunV2Revision.
        :param generation: The generation of this GoogleCloudRunV2Revision.
        :param labels: The labels of this GoogleCloudRunV2Revision.
        :param launch_stage: The launch_stage of this GoogleCloudRunV2Revision.
        :param log_uri: The log_uri of this GoogleCloudRunV2Revision.
        :param max_instance_request_concurrency: The max_instance_request_concurrency of this GoogleCloudRunV2Revision.
        :param name: The name of this GoogleCloudRunV2Revision.
        :param observed_generation: The observed_generation of this GoogleCloudRunV2Revision.
        :param reconciling: The reconciling of this GoogleCloudRunV2Revision.
        :param satisfies_pzs: The satisfies_pzs of this GoogleCloudRunV2Revision.
        :param scaling: The scaling of this GoogleCloudRunV2Revision.
        :param scaling_status: The scaling_status of this GoogleCloudRunV2Revision.
        :param service: The service of this GoogleCloudRunV2Revision.
        :param service_account: The service_account of this GoogleCloudRunV2Revision.
        :param session_affinity: The session_affinity of this GoogleCloudRunV2Revision.
        :param timeout: The timeout of this GoogleCloudRunV2Revision.
        :param uid: The uid of this GoogleCloudRunV2Revision.
        :param update_time: The update_time of this GoogleCloudRunV2Revision.
        :param volumes: The volumes of this GoogleCloudRunV2Revision.
        :param vpc_access: The vpc_access of this GoogleCloudRunV2Revision.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'conditions': List[GoogleCloudRunV2Condition],
            'containers': List[GoogleCloudRunV2Container],
            'create_time': str,
            'delete_time': str,
            'encryption_key': str,
            'encryption_key_revocation_action': str,
            'encryption_key_shutdown_duration': str,
            'etag': str,
            'execution_environment': str,
            'expire_time': str,
            'generation': str,
            'labels': Dict[str, str],
            'launch_stage': str,
            'log_uri': str,
            'max_instance_request_concurrency': int,
            'name': str,
            'observed_generation': str,
            'reconciling': bool,
            'satisfies_pzs': bool,
            'scaling': GoogleCloudRunV2RevisionScaling,
            'scaling_status': GoogleCloudRunV2RevisionScalingStatus,
            'service': str,
            'service_account': str,
            'session_affinity': bool,
            'timeout': str,
            'uid': str,
            'update_time': str,
            'volumes': List[GoogleCloudRunV2Volume],
            'vpc_access': GoogleCloudRunV2VpcAccess
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'conditions': 'conditions',
            'containers': 'containers',
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'encryption_key': 'encryptionKey',
            'encryption_key_revocation_action': 'encryptionKeyRevocationAction',
            'encryption_key_shutdown_duration': 'encryptionKeyShutdownDuration',
            'etag': 'etag',
            'execution_environment': 'executionEnvironment',
            'expire_time': 'expireTime',
            'generation': 'generation',
            'labels': 'labels',
            'launch_stage': 'launchStage',
            'log_uri': 'logUri',
            'max_instance_request_concurrency': 'maxInstanceRequestConcurrency',
            'name': 'name',
            'observed_generation': 'observedGeneration',
            'reconciling': 'reconciling',
            'satisfies_pzs': 'satisfiesPzs',
            'scaling': 'scaling',
            'scaling_status': 'scalingStatus',
            'service': 'service',
            'service_account': 'serviceAccount',
            'session_affinity': 'sessionAffinity',
            'timeout': 'timeout',
            'uid': 'uid',
            'update_time': 'updateTime',
            'volumes': 'volumes',
            'vpc_access': 'vpcAccess'
        }

        self._annotations = annotations
        self._conditions = conditions
        self._containers = containers
        self._create_time = create_time
        self._delete_time = delete_time
        self._encryption_key = encryption_key
        self._encryption_key_revocation_action = encryption_key_revocation_action
        self._encryption_key_shutdown_duration = encryption_key_shutdown_duration
        self._etag = etag
        self._execution_environment = execution_environment
        self._expire_time = expire_time
        self._generation = generation
        self._labels = labels
        self._launch_stage = launch_stage
        self._log_uri = log_uri
        self._max_instance_request_concurrency = max_instance_request_concurrency
        self._name = name
        self._observed_generation = observed_generation
        self._reconciling = reconciling
        self._satisfies_pzs = satisfies_pzs
        self._scaling = scaling
        self._scaling_status = scaling_status
        self._service = service
        self._service_account = service_account
        self._session_affinity = session_affinity
        self._timeout = timeout
        self._uid = uid
        self._update_time = update_time
        self._volumes = volumes
        self._vpc_access = vpc_access

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRunV2Revision':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRunV2Revision of this GoogleCloudRunV2Revision.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this GoogleCloudRunV2Revision.

        Output only. Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.

        :return: The annotations of this GoogleCloudRunV2Revision.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this GoogleCloudRunV2Revision.

        Output only. Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.

        :param annotations: The annotations of this GoogleCloudRunV2Revision.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def conditions(self):
        """Gets the conditions of this GoogleCloudRunV2Revision.

        Output only. The Condition of this Revision, containing its readiness status, and detailed error information in case it did not reach a serving state.

        :return: The conditions of this GoogleCloudRunV2Revision.
        :rtype: List[GoogleCloudRunV2Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this GoogleCloudRunV2Revision.

        Output only. The Condition of this Revision, containing its readiness status, and detailed error information in case it did not reach a serving state.

        :param conditions: The conditions of this GoogleCloudRunV2Revision.
        :type conditions: List[GoogleCloudRunV2Condition]
        """

        self._conditions = conditions

    @property
    def containers(self):
        """Gets the containers of this GoogleCloudRunV2Revision.

        Holds the single container that defines the unit of execution for this Revision.

        :return: The containers of this GoogleCloudRunV2Revision.
        :rtype: List[GoogleCloudRunV2Container]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this GoogleCloudRunV2Revision.

        Holds the single container that defines the unit of execution for this Revision.

        :param containers: The containers of this GoogleCloudRunV2Revision.
        :type containers: List[GoogleCloudRunV2Container]
        """

        self._containers = containers

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudRunV2Revision.

        Output only. The creation time.

        :return: The create_time of this GoogleCloudRunV2Revision.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudRunV2Revision.

        Output only. The creation time.

        :param create_time: The create_time of this GoogleCloudRunV2Revision.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this GoogleCloudRunV2Revision.

        Output only. For a deleted resource, the deletion time. It is only populated as a response to a Delete request.

        :return: The delete_time of this GoogleCloudRunV2Revision.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this GoogleCloudRunV2Revision.

        Output only. For a deleted resource, the deletion time. It is only populated as a response to a Delete request.

        :param delete_time: The delete_time of this GoogleCloudRunV2Revision.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def encryption_key(self):
        """Gets the encryption_key of this GoogleCloudRunV2Revision.

        A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek

        :return: The encryption_key of this GoogleCloudRunV2Revision.
        :rtype: str
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this GoogleCloudRunV2Revision.

        A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek

        :param encryption_key: The encryption_key of this GoogleCloudRunV2Revision.
        :type encryption_key: str
        """

        self._encryption_key = encryption_key

    @property
    def encryption_key_revocation_action(self):
        """Gets the encryption_key_revocation_action of this GoogleCloudRunV2Revision.

        The action to take if the encryption key is revoked.

        :return: The encryption_key_revocation_action of this GoogleCloudRunV2Revision.
        :rtype: str
        """
        return self._encryption_key_revocation_action

    @encryption_key_revocation_action.setter
    def encryption_key_revocation_action(self, encryption_key_revocation_action):
        """Sets the encryption_key_revocation_action of this GoogleCloudRunV2Revision.

        The action to take if the encryption key is revoked.

        :param encryption_key_revocation_action: The encryption_key_revocation_action of this GoogleCloudRunV2Revision.
        :type encryption_key_revocation_action: str
        """
        allowed_values = ["ENCRYPTION_KEY_REVOCATION_ACTION_UNSPECIFIED", "PREVENT_NEW", "SHUTDOWN"]  # noqa: E501
        if encryption_key_revocation_action not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_key_revocation_action` ({0}), must be one of {1}"
                .format(encryption_key_revocation_action, allowed_values)
            )

        self._encryption_key_revocation_action = encryption_key_revocation_action

    @property
    def encryption_key_shutdown_duration(self):
        """Gets the encryption_key_shutdown_duration of this GoogleCloudRunV2Revision.

        If encryption_key_revocation_action is SHUTDOWN, the duration before shutting down all instances. The minimum increment is 1 hour.

        :return: The encryption_key_shutdown_duration of this GoogleCloudRunV2Revision.
        :rtype: str
        """
        return self._encryption_key_shutdown_duration

    @encryption_key_shutdown_duration.setter
    def encryption_key_shutdown_duration(self, encryption_key_shutdown_duration):
        """Sets the encryption_key_shutdown_duration of this GoogleCloudRunV2Revision.

        If encryption_key_revocation_action is SHUTDOWN, the duration before shutting down all instances. The minimum increment is 1 hour.

        :param encryption_key_shutdown_duration: The encryption_key_shutdown_duration of this GoogleCloudRunV2Revision.
        :type encryption_key_shutdown_duration: str
        """

        self._encryption_key_shutdown_duration = encryption_key_shutdown_duration

    @property
    def etag(self):
        """Gets the etag of this GoogleCloudRunV2Revision.

        Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.

        :return: The etag of this GoogleCloudRunV2Revision.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GoogleCloudRunV2Revision.

        Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.

        :param etag: The etag of this GoogleCloudRunV2Revision.
        :type etag: str
        """

        self._etag = etag

    @property
    def execution_environment(self):
        """Gets the execution_environment of this GoogleCloudRunV2Revision.

        The execution environment being used to host this Revision.

        :return: The execution_environment of this GoogleCloudRunV2Revision.
        :rtype: str
        """
        return self._execution_environment

    @execution_environment.setter
    def execution_environment(self, execution_environment):
        """Sets the execution_environment of this GoogleCloudRunV2Revision.

        The execution environment being used to host this Revision.

        :param execution_environment: The execution_environment of this GoogleCloudRunV2Revision.
        :type execution_environment: str
        """
        allowed_values = ["EXECUTION_ENVIRONMENT_UNSPECIFIED", "EXECUTION_ENVIRONMENT_GEN1", "EXECUTION_ENVIRONMENT_GEN2"]  # noqa: E501
        if execution_environment not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_environment` ({0}), must be one of {1}"
                .format(execution_environment, allowed_values)
            )

        self._execution_environment = execution_environment

    @property
    def expire_time(self):
        """Gets the expire_time of this GoogleCloudRunV2Revision.

        Output only. For a deleted resource, the time after which it will be permamently deleted. It is only populated as a response to a Delete request.

        :return: The expire_time of this GoogleCloudRunV2Revision.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this GoogleCloudRunV2Revision.

        Output only. For a deleted resource, the time after which it will be permamently deleted. It is only populated as a response to a Delete request.

        :param expire_time: The expire_time of this GoogleCloudRunV2Revision.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def generation(self):
        """Gets the generation of this GoogleCloudRunV2Revision.

        Output only. A number that monotonically increases every time the user modifies the desired state.

        :return: The generation of this GoogleCloudRunV2Revision.
        :rtype: str
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this GoogleCloudRunV2Revision.

        Output only. A number that monotonically increases every time the user modifies the desired state.

        :param generation: The generation of this GoogleCloudRunV2Revision.
        :type generation: str
        """

        self._generation = generation

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudRunV2Revision.

        Output only. Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.

        :return: The labels of this GoogleCloudRunV2Revision.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudRunV2Revision.

        Output only. Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.

        :param labels: The labels of this GoogleCloudRunV2Revision.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def launch_stage(self):
        """Gets the launch_stage of this GoogleCloudRunV2Revision.

        The least stable launch stage needed to create this resource, as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. Note that this value might not be what was used as input. For example, if ALPHA was provided as input in the parent resource, but only BETA and GA-level features are were, this field will be BETA.

        :return: The launch_stage of this GoogleCloudRunV2Revision.
        :rtype: str
        """
        return self._launch_stage

    @launch_stage.setter
    def launch_stage(self, launch_stage):
        """Sets the launch_stage of this GoogleCloudRunV2Revision.

        The least stable launch stage needed to create this resource, as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. Note that this value might not be what was used as input. For example, if ALPHA was provided as input in the parent resource, but only BETA and GA-level features are were, this field will be BETA.

        :param launch_stage: The launch_stage of this GoogleCloudRunV2Revision.
        :type launch_stage: str
        """
        allowed_values = ["LAUNCH_STAGE_UNSPECIFIED", "UNIMPLEMENTED", "PRELAUNCH", "EARLY_ACCESS", "ALPHA", "BETA", "GA", "DEPRECATED"]  # noqa: E501
        if launch_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `launch_stage` ({0}), must be one of {1}"
                .format(launch_stage, allowed_values)
            )

        self._launch_stage = launch_stage

    @property
    def log_uri(self):
        """Gets the log_uri of this GoogleCloudRunV2Revision.

        Output only. The Google Console URI to obtain logs for the Revision.

        :return: The log_uri of this GoogleCloudRunV2Revision.
        :rtype: str
        """
        return self._log_uri

    @log_uri.setter
    def log_uri(self, log_uri):
        """Sets the log_uri of this GoogleCloudRunV2Revision.

        Output only. The Google Console URI to obtain logs for the Revision.

        :param log_uri: The log_uri of this GoogleCloudRunV2Revision.
        :type log_uri: str
        """

        self._log_uri = log_uri

    @property
    def max_instance_request_concurrency(self):
        """Gets the max_instance_request_concurrency of this GoogleCloudRunV2Revision.

        Sets the maximum number of requests that each serving instance can receive.

        :return: The max_instance_request_concurrency of this GoogleCloudRunV2Revision.
        :rtype: int
        """
        return self._max_instance_request_concurrency

    @max_instance_request_concurrency.setter
    def max_instance_request_concurrency(self, max_instance_request_concurrency):
        """Sets the max_instance_request_concurrency of this GoogleCloudRunV2Revision.

        Sets the maximum number of requests that each serving instance can receive.

        :param max_instance_request_concurrency: The max_instance_request_concurrency of this GoogleCloudRunV2Revision.
        :type max_instance_request_concurrency: int
        """

        self._max_instance_request_concurrency = max_instance_request_concurrency

    @property
    def name(self):
        """Gets the name of this GoogleCloudRunV2Revision.

        Output only. The unique name of this Revision.

        :return: The name of this GoogleCloudRunV2Revision.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudRunV2Revision.

        Output only. The unique name of this Revision.

        :param name: The name of this GoogleCloudRunV2Revision.
        :type name: str
        """

        self._name = name

    @property
    def observed_generation(self):
        """Gets the observed_generation of this GoogleCloudRunV2Revision.

        Output only. The generation of this Revision currently serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.

        :return: The observed_generation of this GoogleCloudRunV2Revision.
        :rtype: str
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation):
        """Sets the observed_generation of this GoogleCloudRunV2Revision.

        Output only. The generation of this Revision currently serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.

        :param observed_generation: The observed_generation of this GoogleCloudRunV2Revision.
        :type observed_generation: str
        """

        self._observed_generation = observed_generation

    @property
    def reconciling(self):
        """Gets the reconciling of this GoogleCloudRunV2Revision.

        Output only. Indicates whether the resource's reconciliation is still in progress. See comments in `Service.reconciling` for additional information on reconciliation process in Cloud Run.

        :return: The reconciling of this GoogleCloudRunV2Revision.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this GoogleCloudRunV2Revision.

        Output only. Indicates whether the resource's reconciliation is still in progress. See comments in `Service.reconciling` for additional information on reconciliation process in Cloud Run.

        :param reconciling: The reconciling of this GoogleCloudRunV2Revision.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def satisfies_pzs(self):
        """Gets the satisfies_pzs of this GoogleCloudRunV2Revision.

        Output only. Reserved for future use.

        :return: The satisfies_pzs of this GoogleCloudRunV2Revision.
        :rtype: bool
        """
        return self._satisfies_pzs

    @satisfies_pzs.setter
    def satisfies_pzs(self, satisfies_pzs):
        """Sets the satisfies_pzs of this GoogleCloudRunV2Revision.

        Output only. Reserved for future use.

        :param satisfies_pzs: The satisfies_pzs of this GoogleCloudRunV2Revision.
        :type satisfies_pzs: bool
        """

        self._satisfies_pzs = satisfies_pzs

    @property
    def scaling(self):
        """Gets the scaling of this GoogleCloudRunV2Revision.


        :return: The scaling of this GoogleCloudRunV2Revision.
        :rtype: GoogleCloudRunV2RevisionScaling
        """
        return self._scaling

    @scaling.setter
    def scaling(self, scaling):
        """Sets the scaling of this GoogleCloudRunV2Revision.


        :param scaling: The scaling of this GoogleCloudRunV2Revision.
        :type scaling: GoogleCloudRunV2RevisionScaling
        """

        self._scaling = scaling

    @property
    def scaling_status(self):
        """Gets the scaling_status of this GoogleCloudRunV2Revision.


        :return: The scaling_status of this GoogleCloudRunV2Revision.
        :rtype: GoogleCloudRunV2RevisionScalingStatus
        """
        return self._scaling_status

    @scaling_status.setter
    def scaling_status(self, scaling_status):
        """Sets the scaling_status of this GoogleCloudRunV2Revision.


        :param scaling_status: The scaling_status of this GoogleCloudRunV2Revision.
        :type scaling_status: GoogleCloudRunV2RevisionScalingStatus
        """

        self._scaling_status = scaling_status

    @property
    def service(self):
        """Gets the service of this GoogleCloudRunV2Revision.

        Output only. The name of the parent service.

        :return: The service of this GoogleCloudRunV2Revision.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this GoogleCloudRunV2Revision.

        Output only. The name of the parent service.

        :param service: The service of this GoogleCloudRunV2Revision.
        :type service: str
        """

        self._service = service

    @property
    def service_account(self):
        """Gets the service_account of this GoogleCloudRunV2Revision.

        Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has.

        :return: The service_account of this GoogleCloudRunV2Revision.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this GoogleCloudRunV2Revision.

        Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has.

        :param service_account: The service_account of this GoogleCloudRunV2Revision.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def session_affinity(self):
        """Gets the session_affinity of this GoogleCloudRunV2Revision.

        Enable session affinity.

        :return: The session_affinity of this GoogleCloudRunV2Revision.
        :rtype: bool
        """
        return self._session_affinity

    @session_affinity.setter
    def session_affinity(self, session_affinity):
        """Sets the session_affinity of this GoogleCloudRunV2Revision.

        Enable session affinity.

        :param session_affinity: The session_affinity of this GoogleCloudRunV2Revision.
        :type session_affinity: bool
        """

        self._session_affinity = session_affinity

    @property
    def timeout(self):
        """Gets the timeout of this GoogleCloudRunV2Revision.

        Max allowed time for an instance to respond to a request.

        :return: The timeout of this GoogleCloudRunV2Revision.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this GoogleCloudRunV2Revision.

        Max allowed time for an instance to respond to a request.

        :param timeout: The timeout of this GoogleCloudRunV2Revision.
        :type timeout: str
        """

        self._timeout = timeout

    @property
    def uid(self):
        """Gets the uid of this GoogleCloudRunV2Revision.

        Output only. Server assigned unique identifier for the Revision. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.

        :return: The uid of this GoogleCloudRunV2Revision.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this GoogleCloudRunV2Revision.

        Output only. Server assigned unique identifier for the Revision. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.

        :param uid: The uid of this GoogleCloudRunV2Revision.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudRunV2Revision.

        Output only. The last-modified time.

        :return: The update_time of this GoogleCloudRunV2Revision.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudRunV2Revision.

        Output only. The last-modified time.

        :param update_time: The update_time of this GoogleCloudRunV2Revision.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def volumes(self):
        """Gets the volumes of this GoogleCloudRunV2Revision.

        A list of Volumes to make available to containers.

        :return: The volumes of this GoogleCloudRunV2Revision.
        :rtype: List[GoogleCloudRunV2Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this GoogleCloudRunV2Revision.

        A list of Volumes to make available to containers.

        :param volumes: The volumes of this GoogleCloudRunV2Revision.
        :type volumes: List[GoogleCloudRunV2Volume]
        """

        self._volumes = volumes

    @property
    def vpc_access(self):
        """Gets the vpc_access of this GoogleCloudRunV2Revision.


        :return: The vpc_access of this GoogleCloudRunV2Revision.
        :rtype: GoogleCloudRunV2VpcAccess
        """
        return self._vpc_access

    @vpc_access.setter
    def vpc_access(self, vpc_access):
        """Sets the vpc_access of this GoogleCloudRunV2Revision.


        :param vpc_access: The vpc_access of this GoogleCloudRunV2Revision.
        :type vpc_access: GoogleCloudRunV2VpcAccess
        """

        self._vpc_access = vpc_access
