/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfficial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfficial::OAIOfficial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfficial::OAIOfficial() {
    this->initializeModel();
}

OAIOfficial::~OAIOfficial() {}

void OAIOfficial::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;

    m_phones_isSet = false;
    m_phones_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;
}

void OAIOfficial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfficial::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("party")]);
    m_party_isSet = !json[QString("party")].isNull() && m_party_isValid;

    m_phones_isValid = ::OpenAPI::fromJsonValue(m_phones, json[QString("phones")]);
    m_phones_isSet = !json[QString("phones")].isNull() && m_phones_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("photoUrl")]);
    m_photo_url_isSet = !json[QString("photoUrl")].isNull() && m_photo_url_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;
}

QString OAIOfficial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfficial::asJsonObject() const {
    QJsonObject obj;
    if (m_address.size() > 0) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_channels.size() > 0) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_emails.size() > 0) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_party_isSet) {
        obj.insert(QString("party"), ::OpenAPI::toJsonValue(m_party));
    }
    if (m_phones.size() > 0) {
        obj.insert(QString("phones"), ::OpenAPI::toJsonValue(m_phones));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("photoUrl"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    if (m_urls.size() > 0) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    return obj;
}

QList<OAISimpleAddressType> OAIOfficial::getAddress() const {
    return m_address;
}
void OAIOfficial::setAddress(const QList<OAISimpleAddressType> &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIOfficial::is_address_Set() const{
    return m_address_isSet;
}

bool OAIOfficial::is_address_Valid() const{
    return m_address_isValid;
}

QList<OAIChannel> OAIOfficial::getChannels() const {
    return m_channels;
}
void OAIOfficial::setChannels(const QList<OAIChannel> &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIOfficial::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIOfficial::is_channels_Valid() const{
    return m_channels_isValid;
}

QList<QString> OAIOfficial::getEmails() const {
    return m_emails;
}
void OAIOfficial::setEmails(const QList<QString> &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAIOfficial::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAIOfficial::is_emails_Valid() const{
    return m_emails_isValid;
}

QString OAIOfficial::getName() const {
    return m_name;
}
void OAIOfficial::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOfficial::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOfficial::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOfficial::getParty() const {
    return m_party;
}
void OAIOfficial::setParty(const QString &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAIOfficial::is_party_Set() const{
    return m_party_isSet;
}

bool OAIOfficial::is_party_Valid() const{
    return m_party_isValid;
}

QList<QString> OAIOfficial::getPhones() const {
    return m_phones;
}
void OAIOfficial::setPhones(const QList<QString> &phones) {
    m_phones = phones;
    m_phones_isSet = true;
}

bool OAIOfficial::is_phones_Set() const{
    return m_phones_isSet;
}

bool OAIOfficial::is_phones_Valid() const{
    return m_phones_isValid;
}

QString OAIOfficial::getPhotoUrl() const {
    return m_photo_url;
}
void OAIOfficial::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAIOfficial::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAIOfficial::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

QList<QString> OAIOfficial::getUrls() const {
    return m_urls;
}
void OAIOfficial::setUrls(const QList<QString> &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIOfficial::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIOfficial::is_urls_Valid() const{
    return m_urls_isValid;
}

bool OAIOfficial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phones.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfficial::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
