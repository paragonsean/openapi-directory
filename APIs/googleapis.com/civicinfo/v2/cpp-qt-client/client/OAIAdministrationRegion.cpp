/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdministrationRegion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdministrationRegion::OAIAdministrationRegion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdministrationRegion::OAIAdministrationRegion() {
    this->initializeModel();
}

OAIAdministrationRegion::~OAIAdministrationRegion() {}

void OAIAdministrationRegion::initializeModel() {

    m_election_administration_body_isSet = false;
    m_election_administration_body_isValid = false;

    m_local_jurisdiction_isSet = false;
    m_local_jurisdiction_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAIAdministrationRegion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdministrationRegion::fromJsonObject(QJsonObject json) {

    m_election_administration_body_isValid = ::OpenAPI::fromJsonValue(m_election_administration_body, json[QString("electionAdministrationBody")]);
    m_election_administration_body_isSet = !json[QString("electionAdministrationBody")].isNull() && m_election_administration_body_isValid;

    m_local_jurisdiction_isValid = ::OpenAPI::fromJsonValue(m_local_jurisdiction, json[QString("local_jurisdiction")]);
    m_local_jurisdiction_isSet = !json[QString("local_jurisdiction")].isNull() && m_local_jurisdiction_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAIAdministrationRegion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdministrationRegion::asJsonObject() const {
    QJsonObject obj;
    if (m_election_administration_body.isSet()) {
        obj.insert(QString("electionAdministrationBody"), ::OpenAPI::toJsonValue(m_election_administration_body));
    }
    if (m_local_jurisdiction.isSet()) {
        obj.insert(QString("local_jurisdiction"), ::OpenAPI::toJsonValue(m_local_jurisdiction));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

OAIAdministrativeBody OAIAdministrationRegion::getElectionAdministrationBody() const {
    return m_election_administration_body;
}
void OAIAdministrationRegion::setElectionAdministrationBody(const OAIAdministrativeBody &election_administration_body) {
    m_election_administration_body = election_administration_body;
    m_election_administration_body_isSet = true;
}

bool OAIAdministrationRegion::is_election_administration_body_Set() const{
    return m_election_administration_body_isSet;
}

bool OAIAdministrationRegion::is_election_administration_body_Valid() const{
    return m_election_administration_body_isValid;
}

OAIAdministrationRegion OAIAdministrationRegion::getLocalJurisdiction() const {
    return m_local_jurisdiction;
}
void OAIAdministrationRegion::setLocalJurisdiction(const OAIAdministrationRegion &local_jurisdiction) {
    m_local_jurisdiction = local_jurisdiction;
    m_local_jurisdiction_isSet = true;
}

bool OAIAdministrationRegion::is_local_jurisdiction_Set() const{
    return m_local_jurisdiction_isSet;
}

bool OAIAdministrationRegion::is_local_jurisdiction_Valid() const{
    return m_local_jurisdiction_isValid;
}

QString OAIAdministrationRegion::getName() const {
    return m_name;
}
void OAIAdministrationRegion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdministrationRegion::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdministrationRegion::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAISource> OAIAdministrationRegion::getSources() const {
    return m_sources;
}
void OAIAdministrationRegion::setSources(const QList<OAISource> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIAdministrationRegion::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIAdministrationRegion::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAIAdministrationRegion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_election_administration_body.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_jurisdiction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdministrationRegion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
