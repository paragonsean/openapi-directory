/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOffice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOffice::OAIOffice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOffice::OAIOffice() {
    this->initializeModel();
}

OAIOffice::~OAIOffice() {}

void OAIOffice::initializeModel() {

    m_division_id_isSet = false;
    m_division_id_isValid = false;

    m_levels_isSet = false;
    m_levels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_official_indices_isSet = false;
    m_official_indices_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAIOffice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOffice::fromJsonObject(QJsonObject json) {

    m_division_id_isValid = ::OpenAPI::fromJsonValue(m_division_id, json[QString("divisionId")]);
    m_division_id_isSet = !json[QString("divisionId")].isNull() && m_division_id_isValid;

    m_levels_isValid = ::OpenAPI::fromJsonValue(m_levels, json[QString("levels")]);
    m_levels_isSet = !json[QString("levels")].isNull() && m_levels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_official_indices_isValid = ::OpenAPI::fromJsonValue(m_official_indices, json[QString("officialIndices")]);
    m_official_indices_isSet = !json[QString("officialIndices")].isNull() && m_official_indices_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAIOffice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOffice::asJsonObject() const {
    QJsonObject obj;
    if (m_division_id_isSet) {
        obj.insert(QString("divisionId"), ::OpenAPI::toJsonValue(m_division_id));
    }
    if (m_levels.size() > 0) {
        obj.insert(QString("levels"), ::OpenAPI::toJsonValue(m_levels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_official_indices.size() > 0) {
        obj.insert(QString("officialIndices"), ::OpenAPI::toJsonValue(m_official_indices));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

QString OAIOffice::getDivisionId() const {
    return m_division_id;
}
void OAIOffice::setDivisionId(const QString &division_id) {
    m_division_id = division_id;
    m_division_id_isSet = true;
}

bool OAIOffice::is_division_id_Set() const{
    return m_division_id_isSet;
}

bool OAIOffice::is_division_id_Valid() const{
    return m_division_id_isValid;
}

QList<QString> OAIOffice::getLevels() const {
    return m_levels;
}
void OAIOffice::setLevels(const QList<QString> &levels) {
    m_levels = levels;
    m_levels_isSet = true;
}

bool OAIOffice::is_levels_Set() const{
    return m_levels_isSet;
}

bool OAIOffice::is_levels_Valid() const{
    return m_levels_isValid;
}

QString OAIOffice::getName() const {
    return m_name;
}
void OAIOffice::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOffice::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOffice::is_name_Valid() const{
    return m_name_isValid;
}

QList<qint32> OAIOffice::getOfficialIndices() const {
    return m_official_indices;
}
void OAIOffice::setOfficialIndices(const QList<qint32> &official_indices) {
    m_official_indices = official_indices;
    m_official_indices_isSet = true;
}

bool OAIOffice::is_official_indices_Set() const{
    return m_official_indices_isSet;
}

bool OAIOffice::is_official_indices_Valid() const{
    return m_official_indices_isValid;
}

QList<QString> OAIOffice::getRoles() const {
    return m_roles;
}
void OAIOffice::setRoles(const QList<QString> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIOffice::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIOffice::is_roles_Valid() const{
    return m_roles_isValid;
}

QList<OAISource> OAIOffice::getSources() const {
    return m_sources;
}
void OAIOffice::setSources(const QList<OAISource> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIOffice::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIOffice::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAIOffice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_division_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_levels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_official_indices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOffice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
