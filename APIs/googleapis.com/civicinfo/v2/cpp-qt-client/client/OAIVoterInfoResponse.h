/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVoterInfoResponse.h
 *
 * The result of a voter info lookup query.
 */

#ifndef OAIVoterInfoResponse_H
#define OAIVoterInfoResponse_H

#include <QJsonObject>

#include "OAIAdministrationRegion.h"
#include "OAIContest.h"
#include "OAIElection.h"
#include "OAIPollingLocation.h"
#include "OAIPrecinct.h"
#include "OAISimpleAddressType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIContest;
class OAIPollingLocation;
class OAIElection;
class OAISimpleAddressType;
class OAIPrecinct;
class OAIAdministrationRegion;

class OAIVoterInfoResponse : public OAIObject {
public:
    OAIVoterInfoResponse();
    OAIVoterInfoResponse(QString json);
    ~OAIVoterInfoResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIContest> getContests() const;
    void setContests(const QList<OAIContest> &contests);
    bool is_contests_Set() const;
    bool is_contests_Valid() const;

    QList<OAIPollingLocation> getDropOffLocations() const;
    void setDropOffLocations(const QList<OAIPollingLocation> &drop_off_locations);
    bool is_drop_off_locations_Set() const;
    bool is_drop_off_locations_Valid() const;

    QList<OAIPollingLocation> getEarlyVoteSites() const;
    void setEarlyVoteSites(const QList<OAIPollingLocation> &early_vote_sites);
    bool is_early_vote_sites_Set() const;
    bool is_early_vote_sites_Valid() const;

    OAIElection getElection() const;
    void setElection(const OAIElection &election);
    bool is_election_Set() const;
    bool is_election_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    bool isMailOnly() const;
    void setMailOnly(const bool &mail_only);
    bool is_mail_only_Set() const;
    bool is_mail_only_Valid() const;

    OAISimpleAddressType getNormalizedInput() const;
    void setNormalizedInput(const OAISimpleAddressType &normalized_input);
    bool is_normalized_input_Set() const;
    bool is_normalized_input_Valid() const;

    QList<OAIElection> getOtherElections() const;
    void setOtherElections(const QList<OAIElection> &other_elections);
    bool is_other_elections_Set() const;
    bool is_other_elections_Valid() const;

    QList<OAIPollingLocation> getPollingLocations() const;
    void setPollingLocations(const QList<OAIPollingLocation> &polling_locations);
    bool is_polling_locations_Set() const;
    bool is_polling_locations_Valid() const;

    QString getPrecinctId() const;
    void setPrecinctId(const QString &precinct_id);
    bool is_precinct_id_Set() const;
    bool is_precinct_id_Valid() const;

    QList<OAIPrecinct> getPrecincts() const;
    void setPrecincts(const QList<OAIPrecinct> &precincts);
    bool is_precincts_Set() const;
    bool is_precincts_Valid() const;

    QList<OAIAdministrationRegion> getState() const;
    void setState(const QList<OAIAdministrationRegion> &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIContest> m_contests;
    bool m_contests_isSet;
    bool m_contests_isValid;

    QList<OAIPollingLocation> m_drop_off_locations;
    bool m_drop_off_locations_isSet;
    bool m_drop_off_locations_isValid;

    QList<OAIPollingLocation> m_early_vote_sites;
    bool m_early_vote_sites_isSet;
    bool m_early_vote_sites_isValid;

    OAIElection m_election;
    bool m_election_isSet;
    bool m_election_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    bool m_mail_only;
    bool m_mail_only_isSet;
    bool m_mail_only_isValid;

    OAISimpleAddressType m_normalized_input;
    bool m_normalized_input_isSet;
    bool m_normalized_input_isValid;

    QList<OAIElection> m_other_elections;
    bool m_other_elections_isSet;
    bool m_other_elections_isValid;

    QList<OAIPollingLocation> m_polling_locations;
    bool m_polling_locations_isSet;
    bool m_polling_locations_isValid;

    QString m_precinct_id;
    bool m_precinct_id_isSet;
    bool m_precinct_id_isValid;

    QList<OAIPrecinct> m_precincts;
    bool m_precincts_isSet;
    bool m_precincts_isValid;

    QList<OAIAdministrationRegion> m_state;
    bool m_state_isSet;
    bool m_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVoterInfoResponse)

#endif // OAIVoterInfoResponse_H
