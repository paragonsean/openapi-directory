/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContest::OAIContest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContest::OAIContest() {
    this->initializeModel();
}

OAIContest::~OAIContest() {}

void OAIContest::initializeModel() {

    m_ballot_placement_isSet = false;
    m_ballot_placement_isValid = false;

    m_ballot_title_isSet = false;
    m_ballot_title_isValid = false;

    m_candidates_isSet = false;
    m_candidates_isValid = false;

    m_district_isSet = false;
    m_district_isValid = false;

    m_electorate_specifications_isSet = false;
    m_electorate_specifications_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_number_elected_isSet = false;
    m_number_elected_isValid = false;

    m_number_voting_for_isSet = false;
    m_number_voting_for_isValid = false;

    m_office_isSet = false;
    m_office_isValid = false;

    m_primary_parties_isSet = false;
    m_primary_parties_isValid = false;

    m_referendum_ballot_responses_isSet = false;
    m_referendum_ballot_responses_isValid = false;

    m_referendum_brief_isSet = false;
    m_referendum_brief_isValid = false;

    m_referendum_con_statement_isSet = false;
    m_referendum_con_statement_isValid = false;

    m_referendum_effect_of_abstain_isSet = false;
    m_referendum_effect_of_abstain_isValid = false;

    m_referendum_passage_threshold_isSet = false;
    m_referendum_passage_threshold_isValid = false;

    m_referendum_pro_statement_isSet = false;
    m_referendum_pro_statement_isValid = false;

    m_referendum_subtitle_isSet = false;
    m_referendum_subtitle_isValid = false;

    m_referendum_text_isSet = false;
    m_referendum_text_isValid = false;

    m_referendum_title_isSet = false;
    m_referendum_title_isValid = false;

    m_referendum_url_isSet = false;
    m_referendum_url_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_special_isSet = false;
    m_special_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIContest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContest::fromJsonObject(QJsonObject json) {

    m_ballot_placement_isValid = ::OpenAPI::fromJsonValue(m_ballot_placement, json[QString("ballotPlacement")]);
    m_ballot_placement_isSet = !json[QString("ballotPlacement")].isNull() && m_ballot_placement_isValid;

    m_ballot_title_isValid = ::OpenAPI::fromJsonValue(m_ballot_title, json[QString("ballotTitle")]);
    m_ballot_title_isSet = !json[QString("ballotTitle")].isNull() && m_ballot_title_isValid;

    m_candidates_isValid = ::OpenAPI::fromJsonValue(m_candidates, json[QString("candidates")]);
    m_candidates_isSet = !json[QString("candidates")].isNull() && m_candidates_isValid;

    m_district_isValid = ::OpenAPI::fromJsonValue(m_district, json[QString("district")]);
    m_district_isSet = !json[QString("district")].isNull() && m_district_isValid;

    m_electorate_specifications_isValid = ::OpenAPI::fromJsonValue(m_electorate_specifications, json[QString("electorateSpecifications")]);
    m_electorate_specifications_isSet = !json[QString("electorateSpecifications")].isNull() && m_electorate_specifications_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_number_elected_isValid = ::OpenAPI::fromJsonValue(m_number_elected, json[QString("numberElected")]);
    m_number_elected_isSet = !json[QString("numberElected")].isNull() && m_number_elected_isValid;

    m_number_voting_for_isValid = ::OpenAPI::fromJsonValue(m_number_voting_for, json[QString("numberVotingFor")]);
    m_number_voting_for_isSet = !json[QString("numberVotingFor")].isNull() && m_number_voting_for_isValid;

    m_office_isValid = ::OpenAPI::fromJsonValue(m_office, json[QString("office")]);
    m_office_isSet = !json[QString("office")].isNull() && m_office_isValid;

    m_primary_parties_isValid = ::OpenAPI::fromJsonValue(m_primary_parties, json[QString("primaryParties")]);
    m_primary_parties_isSet = !json[QString("primaryParties")].isNull() && m_primary_parties_isValid;

    m_referendum_ballot_responses_isValid = ::OpenAPI::fromJsonValue(m_referendum_ballot_responses, json[QString("referendumBallotResponses")]);
    m_referendum_ballot_responses_isSet = !json[QString("referendumBallotResponses")].isNull() && m_referendum_ballot_responses_isValid;

    m_referendum_brief_isValid = ::OpenAPI::fromJsonValue(m_referendum_brief, json[QString("referendumBrief")]);
    m_referendum_brief_isSet = !json[QString("referendumBrief")].isNull() && m_referendum_brief_isValid;

    m_referendum_con_statement_isValid = ::OpenAPI::fromJsonValue(m_referendum_con_statement, json[QString("referendumConStatement")]);
    m_referendum_con_statement_isSet = !json[QString("referendumConStatement")].isNull() && m_referendum_con_statement_isValid;

    m_referendum_effect_of_abstain_isValid = ::OpenAPI::fromJsonValue(m_referendum_effect_of_abstain, json[QString("referendumEffectOfAbstain")]);
    m_referendum_effect_of_abstain_isSet = !json[QString("referendumEffectOfAbstain")].isNull() && m_referendum_effect_of_abstain_isValid;

    m_referendum_passage_threshold_isValid = ::OpenAPI::fromJsonValue(m_referendum_passage_threshold, json[QString("referendumPassageThreshold")]);
    m_referendum_passage_threshold_isSet = !json[QString("referendumPassageThreshold")].isNull() && m_referendum_passage_threshold_isValid;

    m_referendum_pro_statement_isValid = ::OpenAPI::fromJsonValue(m_referendum_pro_statement, json[QString("referendumProStatement")]);
    m_referendum_pro_statement_isSet = !json[QString("referendumProStatement")].isNull() && m_referendum_pro_statement_isValid;

    m_referendum_subtitle_isValid = ::OpenAPI::fromJsonValue(m_referendum_subtitle, json[QString("referendumSubtitle")]);
    m_referendum_subtitle_isSet = !json[QString("referendumSubtitle")].isNull() && m_referendum_subtitle_isValid;

    m_referendum_text_isValid = ::OpenAPI::fromJsonValue(m_referendum_text, json[QString("referendumText")]);
    m_referendum_text_isSet = !json[QString("referendumText")].isNull() && m_referendum_text_isValid;

    m_referendum_title_isValid = ::OpenAPI::fromJsonValue(m_referendum_title, json[QString("referendumTitle")]);
    m_referendum_title_isSet = !json[QString("referendumTitle")].isNull() && m_referendum_title_isValid;

    m_referendum_url_isValid = ::OpenAPI::fromJsonValue(m_referendum_url, json[QString("referendumUrl")]);
    m_referendum_url_isSet = !json[QString("referendumUrl")].isNull() && m_referendum_url_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_special_isValid = ::OpenAPI::fromJsonValue(m_special, json[QString("special")]);
    m_special_isSet = !json[QString("special")].isNull() && m_special_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIContest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContest::asJsonObject() const {
    QJsonObject obj;
    if (m_ballot_placement_isSet) {
        obj.insert(QString("ballotPlacement"), ::OpenAPI::toJsonValue(m_ballot_placement));
    }
    if (m_ballot_title_isSet) {
        obj.insert(QString("ballotTitle"), ::OpenAPI::toJsonValue(m_ballot_title));
    }
    if (m_candidates.size() > 0) {
        obj.insert(QString("candidates"), ::OpenAPI::toJsonValue(m_candidates));
    }
    if (m_district.isSet()) {
        obj.insert(QString("district"), ::OpenAPI::toJsonValue(m_district));
    }
    if (m_electorate_specifications_isSet) {
        obj.insert(QString("electorateSpecifications"), ::OpenAPI::toJsonValue(m_electorate_specifications));
    }
    if (m_level.size() > 0) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_number_elected_isSet) {
        obj.insert(QString("numberElected"), ::OpenAPI::toJsonValue(m_number_elected));
    }
    if (m_number_voting_for_isSet) {
        obj.insert(QString("numberVotingFor"), ::OpenAPI::toJsonValue(m_number_voting_for));
    }
    if (m_office_isSet) {
        obj.insert(QString("office"), ::OpenAPI::toJsonValue(m_office));
    }
    if (m_primary_parties.size() > 0) {
        obj.insert(QString("primaryParties"), ::OpenAPI::toJsonValue(m_primary_parties));
    }
    if (m_referendum_ballot_responses.size() > 0) {
        obj.insert(QString("referendumBallotResponses"), ::OpenAPI::toJsonValue(m_referendum_ballot_responses));
    }
    if (m_referendum_brief_isSet) {
        obj.insert(QString("referendumBrief"), ::OpenAPI::toJsonValue(m_referendum_brief));
    }
    if (m_referendum_con_statement_isSet) {
        obj.insert(QString("referendumConStatement"), ::OpenAPI::toJsonValue(m_referendum_con_statement));
    }
    if (m_referendum_effect_of_abstain_isSet) {
        obj.insert(QString("referendumEffectOfAbstain"), ::OpenAPI::toJsonValue(m_referendum_effect_of_abstain));
    }
    if (m_referendum_passage_threshold_isSet) {
        obj.insert(QString("referendumPassageThreshold"), ::OpenAPI::toJsonValue(m_referendum_passage_threshold));
    }
    if (m_referendum_pro_statement_isSet) {
        obj.insert(QString("referendumProStatement"), ::OpenAPI::toJsonValue(m_referendum_pro_statement));
    }
    if (m_referendum_subtitle_isSet) {
        obj.insert(QString("referendumSubtitle"), ::OpenAPI::toJsonValue(m_referendum_subtitle));
    }
    if (m_referendum_text_isSet) {
        obj.insert(QString("referendumText"), ::OpenAPI::toJsonValue(m_referendum_text));
    }
    if (m_referendum_title_isSet) {
        obj.insert(QString("referendumTitle"), ::OpenAPI::toJsonValue(m_referendum_title));
    }
    if (m_referendum_url_isSet) {
        obj.insert(QString("referendumUrl"), ::OpenAPI::toJsonValue(m_referendum_url));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_special_isSet) {
        obj.insert(QString("special"), ::OpenAPI::toJsonValue(m_special));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIContest::getBallotPlacement() const {
    return m_ballot_placement;
}
void OAIContest::setBallotPlacement(const QString &ballot_placement) {
    m_ballot_placement = ballot_placement;
    m_ballot_placement_isSet = true;
}

bool OAIContest::is_ballot_placement_Set() const{
    return m_ballot_placement_isSet;
}

bool OAIContest::is_ballot_placement_Valid() const{
    return m_ballot_placement_isValid;
}

QString OAIContest::getBallotTitle() const {
    return m_ballot_title;
}
void OAIContest::setBallotTitle(const QString &ballot_title) {
    m_ballot_title = ballot_title;
    m_ballot_title_isSet = true;
}

bool OAIContest::is_ballot_title_Set() const{
    return m_ballot_title_isSet;
}

bool OAIContest::is_ballot_title_Valid() const{
    return m_ballot_title_isValid;
}

QList<OAICandidate> OAIContest::getCandidates() const {
    return m_candidates;
}
void OAIContest::setCandidates(const QList<OAICandidate> &candidates) {
    m_candidates = candidates;
    m_candidates_isSet = true;
}

bool OAIContest::is_candidates_Set() const{
    return m_candidates_isSet;
}

bool OAIContest::is_candidates_Valid() const{
    return m_candidates_isValid;
}

OAIElectoralDistrict OAIContest::getDistrict() const {
    return m_district;
}
void OAIContest::setDistrict(const OAIElectoralDistrict &district) {
    m_district = district;
    m_district_isSet = true;
}

bool OAIContest::is_district_Set() const{
    return m_district_isSet;
}

bool OAIContest::is_district_Valid() const{
    return m_district_isValid;
}

QString OAIContest::getElectorateSpecifications() const {
    return m_electorate_specifications;
}
void OAIContest::setElectorateSpecifications(const QString &electorate_specifications) {
    m_electorate_specifications = electorate_specifications;
    m_electorate_specifications_isSet = true;
}

bool OAIContest::is_electorate_specifications_Set() const{
    return m_electorate_specifications_isSet;
}

bool OAIContest::is_electorate_specifications_Valid() const{
    return m_electorate_specifications_isValid;
}

QList<QString> OAIContest::getLevel() const {
    return m_level;
}
void OAIContest::setLevel(const QList<QString> &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIContest::is_level_Set() const{
    return m_level_isSet;
}

bool OAIContest::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIContest::getNumberElected() const {
    return m_number_elected;
}
void OAIContest::setNumberElected(const QString &number_elected) {
    m_number_elected = number_elected;
    m_number_elected_isSet = true;
}

bool OAIContest::is_number_elected_Set() const{
    return m_number_elected_isSet;
}

bool OAIContest::is_number_elected_Valid() const{
    return m_number_elected_isValid;
}

QString OAIContest::getNumberVotingFor() const {
    return m_number_voting_for;
}
void OAIContest::setNumberVotingFor(const QString &number_voting_for) {
    m_number_voting_for = number_voting_for;
    m_number_voting_for_isSet = true;
}

bool OAIContest::is_number_voting_for_Set() const{
    return m_number_voting_for_isSet;
}

bool OAIContest::is_number_voting_for_Valid() const{
    return m_number_voting_for_isValid;
}

QString OAIContest::getOffice() const {
    return m_office;
}
void OAIContest::setOffice(const QString &office) {
    m_office = office;
    m_office_isSet = true;
}

bool OAIContest::is_office_Set() const{
    return m_office_isSet;
}

bool OAIContest::is_office_Valid() const{
    return m_office_isValid;
}

QList<QString> OAIContest::getPrimaryParties() const {
    return m_primary_parties;
}
void OAIContest::setPrimaryParties(const QList<QString> &primary_parties) {
    m_primary_parties = primary_parties;
    m_primary_parties_isSet = true;
}

bool OAIContest::is_primary_parties_Set() const{
    return m_primary_parties_isSet;
}

bool OAIContest::is_primary_parties_Valid() const{
    return m_primary_parties_isValid;
}

QList<QString> OAIContest::getReferendumBallotResponses() const {
    return m_referendum_ballot_responses;
}
void OAIContest::setReferendumBallotResponses(const QList<QString> &referendum_ballot_responses) {
    m_referendum_ballot_responses = referendum_ballot_responses;
    m_referendum_ballot_responses_isSet = true;
}

bool OAIContest::is_referendum_ballot_responses_Set() const{
    return m_referendum_ballot_responses_isSet;
}

bool OAIContest::is_referendum_ballot_responses_Valid() const{
    return m_referendum_ballot_responses_isValid;
}

QString OAIContest::getReferendumBrief() const {
    return m_referendum_brief;
}
void OAIContest::setReferendumBrief(const QString &referendum_brief) {
    m_referendum_brief = referendum_brief;
    m_referendum_brief_isSet = true;
}

bool OAIContest::is_referendum_brief_Set() const{
    return m_referendum_brief_isSet;
}

bool OAIContest::is_referendum_brief_Valid() const{
    return m_referendum_brief_isValid;
}

QString OAIContest::getReferendumConStatement() const {
    return m_referendum_con_statement;
}
void OAIContest::setReferendumConStatement(const QString &referendum_con_statement) {
    m_referendum_con_statement = referendum_con_statement;
    m_referendum_con_statement_isSet = true;
}

bool OAIContest::is_referendum_con_statement_Set() const{
    return m_referendum_con_statement_isSet;
}

bool OAIContest::is_referendum_con_statement_Valid() const{
    return m_referendum_con_statement_isValid;
}

QString OAIContest::getReferendumEffectOfAbstain() const {
    return m_referendum_effect_of_abstain;
}
void OAIContest::setReferendumEffectOfAbstain(const QString &referendum_effect_of_abstain) {
    m_referendum_effect_of_abstain = referendum_effect_of_abstain;
    m_referendum_effect_of_abstain_isSet = true;
}

bool OAIContest::is_referendum_effect_of_abstain_Set() const{
    return m_referendum_effect_of_abstain_isSet;
}

bool OAIContest::is_referendum_effect_of_abstain_Valid() const{
    return m_referendum_effect_of_abstain_isValid;
}

QString OAIContest::getReferendumPassageThreshold() const {
    return m_referendum_passage_threshold;
}
void OAIContest::setReferendumPassageThreshold(const QString &referendum_passage_threshold) {
    m_referendum_passage_threshold = referendum_passage_threshold;
    m_referendum_passage_threshold_isSet = true;
}

bool OAIContest::is_referendum_passage_threshold_Set() const{
    return m_referendum_passage_threshold_isSet;
}

bool OAIContest::is_referendum_passage_threshold_Valid() const{
    return m_referendum_passage_threshold_isValid;
}

QString OAIContest::getReferendumProStatement() const {
    return m_referendum_pro_statement;
}
void OAIContest::setReferendumProStatement(const QString &referendum_pro_statement) {
    m_referendum_pro_statement = referendum_pro_statement;
    m_referendum_pro_statement_isSet = true;
}

bool OAIContest::is_referendum_pro_statement_Set() const{
    return m_referendum_pro_statement_isSet;
}

bool OAIContest::is_referendum_pro_statement_Valid() const{
    return m_referendum_pro_statement_isValid;
}

QString OAIContest::getReferendumSubtitle() const {
    return m_referendum_subtitle;
}
void OAIContest::setReferendumSubtitle(const QString &referendum_subtitle) {
    m_referendum_subtitle = referendum_subtitle;
    m_referendum_subtitle_isSet = true;
}

bool OAIContest::is_referendum_subtitle_Set() const{
    return m_referendum_subtitle_isSet;
}

bool OAIContest::is_referendum_subtitle_Valid() const{
    return m_referendum_subtitle_isValid;
}

QString OAIContest::getReferendumText() const {
    return m_referendum_text;
}
void OAIContest::setReferendumText(const QString &referendum_text) {
    m_referendum_text = referendum_text;
    m_referendum_text_isSet = true;
}

bool OAIContest::is_referendum_text_Set() const{
    return m_referendum_text_isSet;
}

bool OAIContest::is_referendum_text_Valid() const{
    return m_referendum_text_isValid;
}

QString OAIContest::getReferendumTitle() const {
    return m_referendum_title;
}
void OAIContest::setReferendumTitle(const QString &referendum_title) {
    m_referendum_title = referendum_title;
    m_referendum_title_isSet = true;
}

bool OAIContest::is_referendum_title_Set() const{
    return m_referendum_title_isSet;
}

bool OAIContest::is_referendum_title_Valid() const{
    return m_referendum_title_isValid;
}

QString OAIContest::getReferendumUrl() const {
    return m_referendum_url;
}
void OAIContest::setReferendumUrl(const QString &referendum_url) {
    m_referendum_url = referendum_url;
    m_referendum_url_isSet = true;
}

bool OAIContest::is_referendum_url_Set() const{
    return m_referendum_url_isSet;
}

bool OAIContest::is_referendum_url_Valid() const{
    return m_referendum_url_isValid;
}

QList<QString> OAIContest::getRoles() const {
    return m_roles;
}
void OAIContest::setRoles(const QList<QString> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIContest::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIContest::is_roles_Valid() const{
    return m_roles_isValid;
}

QList<OAISource> OAIContest::getSources() const {
    return m_sources;
}
void OAIContest::setSources(const QList<OAISource> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIContest::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIContest::is_sources_Valid() const{
    return m_sources_isValid;
}

QString OAIContest::getSpecial() const {
    return m_special;
}
void OAIContest::setSpecial(const QString &special) {
    m_special = special;
    m_special_isSet = true;
}

bool OAIContest::is_special_Set() const{
    return m_special_isSet;
}

bool OAIContest::is_special_Valid() const{
    return m_special_isValid;
}

QString OAIContest::getType() const {
    return m_type;
}
void OAIContest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIContest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIContest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIContest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ballot_placement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ballot_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_district.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_electorate_specifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_elected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_voting_for_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_parties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_referendum_ballot_responses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_referendum_brief_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referendum_con_statement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referendum_effect_of_abstain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referendum_passage_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referendum_pro_statement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referendum_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referendum_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referendum_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referendum_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
