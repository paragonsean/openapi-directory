/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPrecinct.h
 *
 * 
 */

#ifndef OAIPrecinct_H
#define OAIPrecinct_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPrecinct : public OAIObject {
public:
    OAIPrecinct();
    OAIPrecinct(QString json);
    ~OAIPrecinct() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAdministrationRegionId() const;
    void setAdministrationRegionId(const QString &administration_region_id);
    bool is_administration_region_id_Set() const;
    bool is_administration_region_id_Valid() const;

    QList<QString> getContestId() const;
    void setContestId(const QList<QString> &contest_id);
    bool is_contest_id_Set() const;
    bool is_contest_id_Valid() const;

    QString getDatasetId() const;
    void setDatasetId(const QString &dataset_id);
    bool is_dataset_id_Set() const;
    bool is_dataset_id_Valid() const;

    QList<QString> getEarlyVoteSiteId() const;
    void setEarlyVoteSiteId(const QList<QString> &early_vote_site_id);
    bool is_early_vote_site_id_Set() const;
    bool is_early_vote_site_id_Valid() const;

    QList<QString> getElectoralDistrictId() const;
    void setElectoralDistrictId(const QList<QString> &electoral_district_id);
    bool is_electoral_district_id_Set() const;
    bool is_electoral_district_id_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isMailOnly() const;
    void setMailOnly(const bool &mail_only);
    bool is_mail_only_Set() const;
    bool is_mail_only_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNumber() const;
    void setNumber(const QString &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    QList<QString> getOcdId() const;
    void setOcdId(const QList<QString> &ocd_id);
    bool is_ocd_id_Set() const;
    bool is_ocd_id_Valid() const;

    QList<QString> getPollingLocationId() const;
    void setPollingLocationId(const QList<QString> &polling_location_id);
    bool is_polling_location_id_Set() const;
    bool is_polling_location_id_Valid() const;

    QList<QString> getSpatialBoundaryId() const;
    void setSpatialBoundaryId(const QList<QString> &spatial_boundary_id);
    bool is_spatial_boundary_id_Set() const;
    bool is_spatial_boundary_id_Valid() const;

    QString getSplitName() const;
    void setSplitName(const QString &split_name);
    bool is_split_name_Set() const;
    bool is_split_name_Valid() const;

    QString getWard() const;
    void setWard(const QString &ward);
    bool is_ward_Set() const;
    bool is_ward_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_administration_region_id;
    bool m_administration_region_id_isSet;
    bool m_administration_region_id_isValid;

    QList<QString> m_contest_id;
    bool m_contest_id_isSet;
    bool m_contest_id_isValid;

    QString m_dataset_id;
    bool m_dataset_id_isSet;
    bool m_dataset_id_isValid;

    QList<QString> m_early_vote_site_id;
    bool m_early_vote_site_id_isSet;
    bool m_early_vote_site_id_isValid;

    QList<QString> m_electoral_district_id;
    bool m_electoral_district_id_isSet;
    bool m_electoral_district_id_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_mail_only;
    bool m_mail_only_isSet;
    bool m_mail_only_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    QList<QString> m_ocd_id;
    bool m_ocd_id_isSet;
    bool m_ocd_id_isValid;

    QList<QString> m_polling_location_id;
    bool m_polling_location_id_isSet;
    bool m_polling_location_id_isValid;

    QList<QString> m_spatial_boundary_id;
    bool m_spatial_boundary_id_isSet;
    bool m_spatial_boundary_id_isValid;

    QString m_split_name;
    bool m_split_name_isSet;
    bool m_split_name_isValid;

    QString m_ward;
    bool m_ward_isSet;
    bool m_ward_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPrecinct)

#endif // OAIPrecinct_H
