/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepresentativeInfoData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepresentativeInfoData::OAIRepresentativeInfoData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepresentativeInfoData::OAIRepresentativeInfoData() {
    this->initializeModel();
}

OAIRepresentativeInfoData::~OAIRepresentativeInfoData() {}

void OAIRepresentativeInfoData::initializeModel() {

    m_divisions_isSet = false;
    m_divisions_isValid = false;

    m_offices_isSet = false;
    m_offices_isValid = false;

    m_officials_isSet = false;
    m_officials_isValid = false;
}

void OAIRepresentativeInfoData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepresentativeInfoData::fromJsonObject(QJsonObject json) {

    m_divisions_isValid = ::OpenAPI::fromJsonValue(m_divisions, json[QString("divisions")]);
    m_divisions_isSet = !json[QString("divisions")].isNull() && m_divisions_isValid;

    m_offices_isValid = ::OpenAPI::fromJsonValue(m_offices, json[QString("offices")]);
    m_offices_isSet = !json[QString("offices")].isNull() && m_offices_isValid;

    m_officials_isValid = ::OpenAPI::fromJsonValue(m_officials, json[QString("officials")]);
    m_officials_isSet = !json[QString("officials")].isNull() && m_officials_isValid;
}

QString OAIRepresentativeInfoData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepresentativeInfoData::asJsonObject() const {
    QJsonObject obj;
    if (m_divisions.size() > 0) {
        obj.insert(QString("divisions"), ::OpenAPI::toJsonValue(m_divisions));
    }
    if (m_offices.size() > 0) {
        obj.insert(QString("offices"), ::OpenAPI::toJsonValue(m_offices));
    }
    if (m_officials.size() > 0) {
        obj.insert(QString("officials"), ::OpenAPI::toJsonValue(m_officials));
    }
    return obj;
}

QMap<QString, OAIGeographicDivision> OAIRepresentativeInfoData::getDivisions() const {
    return m_divisions;
}
void OAIRepresentativeInfoData::setDivisions(const QMap<QString, OAIGeographicDivision> &divisions) {
    m_divisions = divisions;
    m_divisions_isSet = true;
}

bool OAIRepresentativeInfoData::is_divisions_Set() const{
    return m_divisions_isSet;
}

bool OAIRepresentativeInfoData::is_divisions_Valid() const{
    return m_divisions_isValid;
}

QList<OAIOffice> OAIRepresentativeInfoData::getOffices() const {
    return m_offices;
}
void OAIRepresentativeInfoData::setOffices(const QList<OAIOffice> &offices) {
    m_offices = offices;
    m_offices_isSet = true;
}

bool OAIRepresentativeInfoData::is_offices_Set() const{
    return m_offices_isSet;
}

bool OAIRepresentativeInfoData::is_offices_Valid() const{
    return m_offices_isValid;
}

QList<OAIOfficial> OAIRepresentativeInfoData::getOfficials() const {
    return m_officials;
}
void OAIRepresentativeInfoData::setOfficials(const QList<OAIOfficial> &officials) {
    m_officials = officials;
    m_officials_isSet = true;
}

bool OAIRepresentativeInfoData::is_officials_Set() const{
    return m_officials_isSet;
}

bool OAIRepresentativeInfoData::is_officials_Valid() const{
    return m_officials_isValid;
}

bool OAIRepresentativeInfoData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_divisions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_offices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_officials.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepresentativeInfoData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
