/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICandidate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICandidate::OAICandidate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICandidate::OAICandidate() {
    this->initializeModel();
}

OAICandidate::~OAICandidate() {}

void OAICandidate::initializeModel() {

    m_candidate_url_isSet = false;
    m_candidate_url_isValid = false;

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_order_on_ballot_isSet = false;
    m_order_on_ballot_isValid = false;

    m_party_isSet = false;
    m_party_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;
}

void OAICandidate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICandidate::fromJsonObject(QJsonObject json) {

    m_candidate_url_isValid = ::OpenAPI::fromJsonValue(m_candidate_url, json[QString("candidateUrl")]);
    m_candidate_url_isSet = !json[QString("candidateUrl")].isNull() && m_candidate_url_isValid;

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_order_on_ballot_isValid = ::OpenAPI::fromJsonValue(m_order_on_ballot, json[QString("orderOnBallot")]);
    m_order_on_ballot_isSet = !json[QString("orderOnBallot")].isNull() && m_order_on_ballot_isValid;

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("party")]);
    m_party_isSet = !json[QString("party")].isNull() && m_party_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("photoUrl")]);
    m_photo_url_isSet = !json[QString("photoUrl")].isNull() && m_photo_url_isValid;
}

QString OAICandidate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICandidate::asJsonObject() const {
    QJsonObject obj;
    if (m_candidate_url_isSet) {
        obj.insert(QString("candidateUrl"), ::OpenAPI::toJsonValue(m_candidate_url));
    }
    if (m_channels.size() > 0) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_order_on_ballot_isSet) {
        obj.insert(QString("orderOnBallot"), ::OpenAPI::toJsonValue(m_order_on_ballot));
    }
    if (m_party_isSet) {
        obj.insert(QString("party"), ::OpenAPI::toJsonValue(m_party));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("photoUrl"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    return obj;
}

QString OAICandidate::getCandidateUrl() const {
    return m_candidate_url;
}
void OAICandidate::setCandidateUrl(const QString &candidate_url) {
    m_candidate_url = candidate_url;
    m_candidate_url_isSet = true;
}

bool OAICandidate::is_candidate_url_Set() const{
    return m_candidate_url_isSet;
}

bool OAICandidate::is_candidate_url_Valid() const{
    return m_candidate_url_isValid;
}

QList<OAIChannel> OAICandidate::getChannels() const {
    return m_channels;
}
void OAICandidate::setChannels(const QList<OAIChannel> &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAICandidate::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAICandidate::is_channels_Valid() const{
    return m_channels_isValid;
}

QString OAICandidate::getEmail() const {
    return m_email;
}
void OAICandidate::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICandidate::is_email_Set() const{
    return m_email_isSet;
}

bool OAICandidate::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICandidate::getName() const {
    return m_name;
}
void OAICandidate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICandidate::is_name_Set() const{
    return m_name_isSet;
}

bool OAICandidate::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICandidate::getOrderOnBallot() const {
    return m_order_on_ballot;
}
void OAICandidate::setOrderOnBallot(const QString &order_on_ballot) {
    m_order_on_ballot = order_on_ballot;
    m_order_on_ballot_isSet = true;
}

bool OAICandidate::is_order_on_ballot_Set() const{
    return m_order_on_ballot_isSet;
}

bool OAICandidate::is_order_on_ballot_Valid() const{
    return m_order_on_ballot_isValid;
}

QString OAICandidate::getParty() const {
    return m_party;
}
void OAICandidate::setParty(const QString &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAICandidate::is_party_Set() const{
    return m_party_isSet;
}

bool OAICandidate::is_party_Valid() const{
    return m_party_isValid;
}

QString OAICandidate::getPhone() const {
    return m_phone;
}
void OAICandidate::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAICandidate::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAICandidate::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAICandidate::getPhotoUrl() const {
    return m_photo_url;
}
void OAICandidate::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAICandidate::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAICandidate::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

bool OAICandidate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_candidate_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_on_ballot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_party_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICandidate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
