/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAdministrativeBody.h
 *
 * Information about an election administrative body (e.g. County Board of Elections).
 */

#ifndef OAIAdministrativeBody_H
#define OAIAdministrativeBody_H

#include <QJsonObject>

#include "OAIElectionOfficial.h"
#include "OAISimpleAddressType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISimpleAddressType;
class OAIElectionOfficial;

class OAIAdministrativeBody : public OAIObject {
public:
    OAIAdministrativeBody();
    OAIAdministrativeBody(QString json);
    ~OAIAdministrativeBody() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAbsenteeVotingInfoUrl() const;
    void setAbsenteeVotingInfoUrl(const QString &absentee_voting_info_url);
    bool is_absentee_voting_info_url_Set() const;
    bool is_absentee_voting_info_url_Valid() const;

    QString getBallotInfoUrl() const;
    void setBallotInfoUrl(const QString &ballot_info_url);
    bool is_ballot_info_url_Set() const;
    bool is_ballot_info_url_Valid() const;

    OAISimpleAddressType getCorrespondenceAddress() const;
    void setCorrespondenceAddress(const OAISimpleAddressType &correspondence_address);
    bool is_correspondence_address_Set() const;
    bool is_correspondence_address_Valid() const;

    QString getElectionInfoUrl() const;
    void setElectionInfoUrl(const QString &election_info_url);
    bool is_election_info_url_Set() const;
    bool is_election_info_url_Valid() const;

    QString getElectionNoticeText() const;
    void setElectionNoticeText(const QString &election_notice_text);
    bool is_election_notice_text_Set() const;
    bool is_election_notice_text_Valid() const;

    QString getElectionNoticeUrl() const;
    void setElectionNoticeUrl(const QString &election_notice_url);
    bool is_election_notice_url_Set() const;
    bool is_election_notice_url_Valid() const;

    QList<OAIElectionOfficial> getElectionOfficials() const;
    void setElectionOfficials(const QList<OAIElectionOfficial> &election_officials);
    bool is_election_officials_Set() const;
    bool is_election_officials_Valid() const;

    QString getElectionRegistrationConfirmationUrl() const;
    void setElectionRegistrationConfirmationUrl(const QString &election_registration_confirmation_url);
    bool is_election_registration_confirmation_url_Set() const;
    bool is_election_registration_confirmation_url_Valid() const;

    QString getElectionRegistrationUrl() const;
    void setElectionRegistrationUrl(const QString &election_registration_url);
    bool is_election_registration_url_Set() const;
    bool is_election_registration_url_Valid() const;

    QString getElectionRulesUrl() const;
    void setElectionRulesUrl(const QString &election_rules_url);
    bool is_election_rules_url_Set() const;
    bool is_election_rules_url_Valid() const;

    QString getHoursOfOperation() const;
    void setHoursOfOperation(const QString &hours_of_operation);
    bool is_hours_of_operation_Set() const;
    bool is_hours_of_operation_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAISimpleAddressType getPhysicalAddress() const;
    void setPhysicalAddress(const OAISimpleAddressType &physical_address);
    bool is_physical_address_Set() const;
    bool is_physical_address_Valid() const;

    QList<QString> getVoterServices() const;
    void setVoterServices(const QList<QString> &voter_services);
    bool is_voter_services_Set() const;
    bool is_voter_services_Valid() const;

    QString getVotingLocationFinderUrl() const;
    void setVotingLocationFinderUrl(const QString &voting_location_finder_url);
    bool is_voting_location_finder_url_Set() const;
    bool is_voting_location_finder_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_absentee_voting_info_url;
    bool m_absentee_voting_info_url_isSet;
    bool m_absentee_voting_info_url_isValid;

    QString m_ballot_info_url;
    bool m_ballot_info_url_isSet;
    bool m_ballot_info_url_isValid;

    OAISimpleAddressType m_correspondence_address;
    bool m_correspondence_address_isSet;
    bool m_correspondence_address_isValid;

    QString m_election_info_url;
    bool m_election_info_url_isSet;
    bool m_election_info_url_isValid;

    QString m_election_notice_text;
    bool m_election_notice_text_isSet;
    bool m_election_notice_text_isValid;

    QString m_election_notice_url;
    bool m_election_notice_url_isSet;
    bool m_election_notice_url_isValid;

    QList<OAIElectionOfficial> m_election_officials;
    bool m_election_officials_isSet;
    bool m_election_officials_isValid;

    QString m_election_registration_confirmation_url;
    bool m_election_registration_confirmation_url_isSet;
    bool m_election_registration_confirmation_url_isValid;

    QString m_election_registration_url;
    bool m_election_registration_url_isSet;
    bool m_election_registration_url_isValid;

    QString m_election_rules_url;
    bool m_election_rules_url_isSet;
    bool m_election_rules_url_isValid;

    QString m_hours_of_operation;
    bool m_hours_of_operation_isSet;
    bool m_hours_of_operation_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAISimpleAddressType m_physical_address;
    bool m_physical_address_isSet;
    bool m_physical_address_isValid;

    QList<QString> m_voter_services;
    bool m_voter_services_isSet;
    bool m_voter_services_isValid;

    QString m_voting_location_finder_url;
    bool m_voting_location_finder_url_isSet;
    bool m_voting_location_finder_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAdministrativeBody)

#endif // OAIAdministrativeBody_H
