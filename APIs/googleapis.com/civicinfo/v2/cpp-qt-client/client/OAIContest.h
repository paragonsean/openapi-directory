/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContest.h
 *
 * Information about a contest that appears on a voter&#39;s ballot.
 */

#ifndef OAIContest_H
#define OAIContest_H

#include <QJsonObject>

#include "OAICandidate.h"
#include "OAIElectoralDistrict.h"
#include "OAISource.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICandidate;
class OAIElectoralDistrict;
class OAISource;

class OAIContest : public OAIObject {
public:
    OAIContest();
    OAIContest(QString json);
    ~OAIContest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBallotPlacement() const;
    void setBallotPlacement(const QString &ballot_placement);
    bool is_ballot_placement_Set() const;
    bool is_ballot_placement_Valid() const;

    QString getBallotTitle() const;
    void setBallotTitle(const QString &ballot_title);
    bool is_ballot_title_Set() const;
    bool is_ballot_title_Valid() const;

    QList<OAICandidate> getCandidates() const;
    void setCandidates(const QList<OAICandidate> &candidates);
    bool is_candidates_Set() const;
    bool is_candidates_Valid() const;

    OAIElectoralDistrict getDistrict() const;
    void setDistrict(const OAIElectoralDistrict &district);
    bool is_district_Set() const;
    bool is_district_Valid() const;

    QString getElectorateSpecifications() const;
    void setElectorateSpecifications(const QString &electorate_specifications);
    bool is_electorate_specifications_Set() const;
    bool is_electorate_specifications_Valid() const;

    QList<QString> getLevel() const;
    void setLevel(const QList<QString> &level);
    bool is_level_Set() const;
    bool is_level_Valid() const;

    QString getNumberElected() const;
    void setNumberElected(const QString &number_elected);
    bool is_number_elected_Set() const;
    bool is_number_elected_Valid() const;

    QString getNumberVotingFor() const;
    void setNumberVotingFor(const QString &number_voting_for);
    bool is_number_voting_for_Set() const;
    bool is_number_voting_for_Valid() const;

    QString getOffice() const;
    void setOffice(const QString &office);
    bool is_office_Set() const;
    bool is_office_Valid() const;

    QList<QString> getPrimaryParties() const;
    void setPrimaryParties(const QList<QString> &primary_parties);
    bool is_primary_parties_Set() const;
    bool is_primary_parties_Valid() const;

    QList<QString> getReferendumBallotResponses() const;
    void setReferendumBallotResponses(const QList<QString> &referendum_ballot_responses);
    bool is_referendum_ballot_responses_Set() const;
    bool is_referendum_ballot_responses_Valid() const;

    QString getReferendumBrief() const;
    void setReferendumBrief(const QString &referendum_brief);
    bool is_referendum_brief_Set() const;
    bool is_referendum_brief_Valid() const;

    QString getReferendumConStatement() const;
    void setReferendumConStatement(const QString &referendum_con_statement);
    bool is_referendum_con_statement_Set() const;
    bool is_referendum_con_statement_Valid() const;

    QString getReferendumEffectOfAbstain() const;
    void setReferendumEffectOfAbstain(const QString &referendum_effect_of_abstain);
    bool is_referendum_effect_of_abstain_Set() const;
    bool is_referendum_effect_of_abstain_Valid() const;

    QString getReferendumPassageThreshold() const;
    void setReferendumPassageThreshold(const QString &referendum_passage_threshold);
    bool is_referendum_passage_threshold_Set() const;
    bool is_referendum_passage_threshold_Valid() const;

    QString getReferendumProStatement() const;
    void setReferendumProStatement(const QString &referendum_pro_statement);
    bool is_referendum_pro_statement_Set() const;
    bool is_referendum_pro_statement_Valid() const;

    QString getReferendumSubtitle() const;
    void setReferendumSubtitle(const QString &referendum_subtitle);
    bool is_referendum_subtitle_Set() const;
    bool is_referendum_subtitle_Valid() const;

    QString getReferendumText() const;
    void setReferendumText(const QString &referendum_text);
    bool is_referendum_text_Set() const;
    bool is_referendum_text_Valid() const;

    QString getReferendumTitle() const;
    void setReferendumTitle(const QString &referendum_title);
    bool is_referendum_title_Set() const;
    bool is_referendum_title_Valid() const;

    QString getReferendumUrl() const;
    void setReferendumUrl(const QString &referendum_url);
    bool is_referendum_url_Set() const;
    bool is_referendum_url_Valid() const;

    QList<QString> getRoles() const;
    void setRoles(const QList<QString> &roles);
    bool is_roles_Set() const;
    bool is_roles_Valid() const;

    QList<OAISource> getSources() const;
    void setSources(const QList<OAISource> &sources);
    bool is_sources_Set() const;
    bool is_sources_Valid() const;

    QString getSpecial() const;
    void setSpecial(const QString &special);
    bool is_special_Set() const;
    bool is_special_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_ballot_placement;
    bool m_ballot_placement_isSet;
    bool m_ballot_placement_isValid;

    QString m_ballot_title;
    bool m_ballot_title_isSet;
    bool m_ballot_title_isValid;

    QList<OAICandidate> m_candidates;
    bool m_candidates_isSet;
    bool m_candidates_isValid;

    OAIElectoralDistrict m_district;
    bool m_district_isSet;
    bool m_district_isValid;

    QString m_electorate_specifications;
    bool m_electorate_specifications_isSet;
    bool m_electorate_specifications_isValid;

    QList<QString> m_level;
    bool m_level_isSet;
    bool m_level_isValid;

    QString m_number_elected;
    bool m_number_elected_isSet;
    bool m_number_elected_isValid;

    QString m_number_voting_for;
    bool m_number_voting_for_isSet;
    bool m_number_voting_for_isValid;

    QString m_office;
    bool m_office_isSet;
    bool m_office_isValid;

    QList<QString> m_primary_parties;
    bool m_primary_parties_isSet;
    bool m_primary_parties_isValid;

    QList<QString> m_referendum_ballot_responses;
    bool m_referendum_ballot_responses_isSet;
    bool m_referendum_ballot_responses_isValid;

    QString m_referendum_brief;
    bool m_referendum_brief_isSet;
    bool m_referendum_brief_isValid;

    QString m_referendum_con_statement;
    bool m_referendum_con_statement_isSet;
    bool m_referendum_con_statement_isValid;

    QString m_referendum_effect_of_abstain;
    bool m_referendum_effect_of_abstain_isSet;
    bool m_referendum_effect_of_abstain_isValid;

    QString m_referendum_passage_threshold;
    bool m_referendum_passage_threshold_isSet;
    bool m_referendum_passage_threshold_isValid;

    QString m_referendum_pro_statement;
    bool m_referendum_pro_statement_isSet;
    bool m_referendum_pro_statement_isValid;

    QString m_referendum_subtitle;
    bool m_referendum_subtitle_isSet;
    bool m_referendum_subtitle_isValid;

    QString m_referendum_text;
    bool m_referendum_text_isSet;
    bool m_referendum_text_isValid;

    QString m_referendum_title;
    bool m_referendum_title_isSet;
    bool m_referendum_title_isValid;

    QString m_referendum_url;
    bool m_referendum_url_isSet;
    bool m_referendum_url_isValid;

    QList<QString> m_roles;
    bool m_roles_isSet;
    bool m_roles_isValid;

    QList<OAISource> m_sources;
    bool m_sources_isSet;
    bool m_sources_isValid;

    QString m_special;
    bool m_special_isSet;
    bool m_special_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContest)

#endif // OAIContest_H
