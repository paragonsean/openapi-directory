/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrecinct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrecinct::OAIPrecinct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrecinct::OAIPrecinct() {
    this->initializeModel();
}

OAIPrecinct::~OAIPrecinct() {}

void OAIPrecinct::initializeModel() {

    m_administration_region_id_isSet = false;
    m_administration_region_id_isValid = false;

    m_contest_id_isSet = false;
    m_contest_id_isValid = false;

    m_dataset_id_isSet = false;
    m_dataset_id_isValid = false;

    m_early_vote_site_id_isSet = false;
    m_early_vote_site_id_isValid = false;

    m_electoral_district_id_isSet = false;
    m_electoral_district_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mail_only_isSet = false;
    m_mail_only_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_ocd_id_isSet = false;
    m_ocd_id_isValid = false;

    m_polling_location_id_isSet = false;
    m_polling_location_id_isValid = false;

    m_spatial_boundary_id_isSet = false;
    m_spatial_boundary_id_isValid = false;

    m_split_name_isSet = false;
    m_split_name_isValid = false;

    m_ward_isSet = false;
    m_ward_isValid = false;
}

void OAIPrecinct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrecinct::fromJsonObject(QJsonObject json) {

    m_administration_region_id_isValid = ::OpenAPI::fromJsonValue(m_administration_region_id, json[QString("administrationRegionId")]);
    m_administration_region_id_isSet = !json[QString("administrationRegionId")].isNull() && m_administration_region_id_isValid;

    m_contest_id_isValid = ::OpenAPI::fromJsonValue(m_contest_id, json[QString("contestId")]);
    m_contest_id_isSet = !json[QString("contestId")].isNull() && m_contest_id_isValid;

    m_dataset_id_isValid = ::OpenAPI::fromJsonValue(m_dataset_id, json[QString("datasetId")]);
    m_dataset_id_isSet = !json[QString("datasetId")].isNull() && m_dataset_id_isValid;

    m_early_vote_site_id_isValid = ::OpenAPI::fromJsonValue(m_early_vote_site_id, json[QString("earlyVoteSiteId")]);
    m_early_vote_site_id_isSet = !json[QString("earlyVoteSiteId")].isNull() && m_early_vote_site_id_isValid;

    m_electoral_district_id_isValid = ::OpenAPI::fromJsonValue(m_electoral_district_id, json[QString("electoralDistrictId")]);
    m_electoral_district_id_isSet = !json[QString("electoralDistrictId")].isNull() && m_electoral_district_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mail_only_isValid = ::OpenAPI::fromJsonValue(m_mail_only, json[QString("mailOnly")]);
    m_mail_only_isSet = !json[QString("mailOnly")].isNull() && m_mail_only_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_ocd_id_isValid = ::OpenAPI::fromJsonValue(m_ocd_id, json[QString("ocdId")]);
    m_ocd_id_isSet = !json[QString("ocdId")].isNull() && m_ocd_id_isValid;

    m_polling_location_id_isValid = ::OpenAPI::fromJsonValue(m_polling_location_id, json[QString("pollingLocationId")]);
    m_polling_location_id_isSet = !json[QString("pollingLocationId")].isNull() && m_polling_location_id_isValid;

    m_spatial_boundary_id_isValid = ::OpenAPI::fromJsonValue(m_spatial_boundary_id, json[QString("spatialBoundaryId")]);
    m_spatial_boundary_id_isSet = !json[QString("spatialBoundaryId")].isNull() && m_spatial_boundary_id_isValid;

    m_split_name_isValid = ::OpenAPI::fromJsonValue(m_split_name, json[QString("splitName")]);
    m_split_name_isSet = !json[QString("splitName")].isNull() && m_split_name_isValid;

    m_ward_isValid = ::OpenAPI::fromJsonValue(m_ward, json[QString("ward")]);
    m_ward_isSet = !json[QString("ward")].isNull() && m_ward_isValid;
}

QString OAIPrecinct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrecinct::asJsonObject() const {
    QJsonObject obj;
    if (m_administration_region_id_isSet) {
        obj.insert(QString("administrationRegionId"), ::OpenAPI::toJsonValue(m_administration_region_id));
    }
    if (m_contest_id.size() > 0) {
        obj.insert(QString("contestId"), ::OpenAPI::toJsonValue(m_contest_id));
    }
    if (m_dataset_id_isSet) {
        obj.insert(QString("datasetId"), ::OpenAPI::toJsonValue(m_dataset_id));
    }
    if (m_early_vote_site_id.size() > 0) {
        obj.insert(QString("earlyVoteSiteId"), ::OpenAPI::toJsonValue(m_early_vote_site_id));
    }
    if (m_electoral_district_id.size() > 0) {
        obj.insert(QString("electoralDistrictId"), ::OpenAPI::toJsonValue(m_electoral_district_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mail_only_isSet) {
        obj.insert(QString("mailOnly"), ::OpenAPI::toJsonValue(m_mail_only));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_ocd_id.size() > 0) {
        obj.insert(QString("ocdId"), ::OpenAPI::toJsonValue(m_ocd_id));
    }
    if (m_polling_location_id.size() > 0) {
        obj.insert(QString("pollingLocationId"), ::OpenAPI::toJsonValue(m_polling_location_id));
    }
    if (m_spatial_boundary_id.size() > 0) {
        obj.insert(QString("spatialBoundaryId"), ::OpenAPI::toJsonValue(m_spatial_boundary_id));
    }
    if (m_split_name_isSet) {
        obj.insert(QString("splitName"), ::OpenAPI::toJsonValue(m_split_name));
    }
    if (m_ward_isSet) {
        obj.insert(QString("ward"), ::OpenAPI::toJsonValue(m_ward));
    }
    return obj;
}

QString OAIPrecinct::getAdministrationRegionId() const {
    return m_administration_region_id;
}
void OAIPrecinct::setAdministrationRegionId(const QString &administration_region_id) {
    m_administration_region_id = administration_region_id;
    m_administration_region_id_isSet = true;
}

bool OAIPrecinct::is_administration_region_id_Set() const{
    return m_administration_region_id_isSet;
}

bool OAIPrecinct::is_administration_region_id_Valid() const{
    return m_administration_region_id_isValid;
}

QList<QString> OAIPrecinct::getContestId() const {
    return m_contest_id;
}
void OAIPrecinct::setContestId(const QList<QString> &contest_id) {
    m_contest_id = contest_id;
    m_contest_id_isSet = true;
}

bool OAIPrecinct::is_contest_id_Set() const{
    return m_contest_id_isSet;
}

bool OAIPrecinct::is_contest_id_Valid() const{
    return m_contest_id_isValid;
}

QString OAIPrecinct::getDatasetId() const {
    return m_dataset_id;
}
void OAIPrecinct::setDatasetId(const QString &dataset_id) {
    m_dataset_id = dataset_id;
    m_dataset_id_isSet = true;
}

bool OAIPrecinct::is_dataset_id_Set() const{
    return m_dataset_id_isSet;
}

bool OAIPrecinct::is_dataset_id_Valid() const{
    return m_dataset_id_isValid;
}

QList<QString> OAIPrecinct::getEarlyVoteSiteId() const {
    return m_early_vote_site_id;
}
void OAIPrecinct::setEarlyVoteSiteId(const QList<QString> &early_vote_site_id) {
    m_early_vote_site_id = early_vote_site_id;
    m_early_vote_site_id_isSet = true;
}

bool OAIPrecinct::is_early_vote_site_id_Set() const{
    return m_early_vote_site_id_isSet;
}

bool OAIPrecinct::is_early_vote_site_id_Valid() const{
    return m_early_vote_site_id_isValid;
}

QList<QString> OAIPrecinct::getElectoralDistrictId() const {
    return m_electoral_district_id;
}
void OAIPrecinct::setElectoralDistrictId(const QList<QString> &electoral_district_id) {
    m_electoral_district_id = electoral_district_id;
    m_electoral_district_id_isSet = true;
}

bool OAIPrecinct::is_electoral_district_id_Set() const{
    return m_electoral_district_id_isSet;
}

bool OAIPrecinct::is_electoral_district_id_Valid() const{
    return m_electoral_district_id_isValid;
}

QString OAIPrecinct::getId() const {
    return m_id;
}
void OAIPrecinct::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPrecinct::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPrecinct::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPrecinct::isMailOnly() const {
    return m_mail_only;
}
void OAIPrecinct::setMailOnly(const bool &mail_only) {
    m_mail_only = mail_only;
    m_mail_only_isSet = true;
}

bool OAIPrecinct::is_mail_only_Set() const{
    return m_mail_only_isSet;
}

bool OAIPrecinct::is_mail_only_Valid() const{
    return m_mail_only_isValid;
}

QString OAIPrecinct::getName() const {
    return m_name;
}
void OAIPrecinct::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPrecinct::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPrecinct::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPrecinct::getNumber() const {
    return m_number;
}
void OAIPrecinct::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPrecinct::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPrecinct::is_number_Valid() const{
    return m_number_isValid;
}

QList<QString> OAIPrecinct::getOcdId() const {
    return m_ocd_id;
}
void OAIPrecinct::setOcdId(const QList<QString> &ocd_id) {
    m_ocd_id = ocd_id;
    m_ocd_id_isSet = true;
}

bool OAIPrecinct::is_ocd_id_Set() const{
    return m_ocd_id_isSet;
}

bool OAIPrecinct::is_ocd_id_Valid() const{
    return m_ocd_id_isValid;
}

QList<QString> OAIPrecinct::getPollingLocationId() const {
    return m_polling_location_id;
}
void OAIPrecinct::setPollingLocationId(const QList<QString> &polling_location_id) {
    m_polling_location_id = polling_location_id;
    m_polling_location_id_isSet = true;
}

bool OAIPrecinct::is_polling_location_id_Set() const{
    return m_polling_location_id_isSet;
}

bool OAIPrecinct::is_polling_location_id_Valid() const{
    return m_polling_location_id_isValid;
}

QList<QString> OAIPrecinct::getSpatialBoundaryId() const {
    return m_spatial_boundary_id;
}
void OAIPrecinct::setSpatialBoundaryId(const QList<QString> &spatial_boundary_id) {
    m_spatial_boundary_id = spatial_boundary_id;
    m_spatial_boundary_id_isSet = true;
}

bool OAIPrecinct::is_spatial_boundary_id_Set() const{
    return m_spatial_boundary_id_isSet;
}

bool OAIPrecinct::is_spatial_boundary_id_Valid() const{
    return m_spatial_boundary_id_isValid;
}

QString OAIPrecinct::getSplitName() const {
    return m_split_name;
}
void OAIPrecinct::setSplitName(const QString &split_name) {
    m_split_name = split_name;
    m_split_name_isSet = true;
}

bool OAIPrecinct::is_split_name_Set() const{
    return m_split_name_isSet;
}

bool OAIPrecinct::is_split_name_Valid() const{
    return m_split_name_isValid;
}

QString OAIPrecinct::getWard() const {
    return m_ward;
}
void OAIPrecinct::setWard(const QString &ward) {
    m_ward = ward;
    m_ward_isSet = true;
}

bool OAIPrecinct::is_ward_Set() const{
    return m_ward_isSet;
}

bool OAIPrecinct::is_ward_Valid() const{
    return m_ward_isValid;
}

bool OAIPrecinct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_administration_region_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contest_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_early_vote_site_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_electoral_district_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mail_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ocd_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_polling_location_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_spatial_boundary_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ward_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrecinct::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
