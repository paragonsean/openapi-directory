/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeographicDivision.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeographicDivision::OAIGeographicDivision(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeographicDivision::OAIGeographicDivision() {
    this->initializeModel();
}

OAIGeographicDivision::~OAIGeographicDivision() {}

void OAIGeographicDivision::initializeModel() {

    m_also_known_as_isSet = false;
    m_also_known_as_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_office_indices_isSet = false;
    m_office_indices_isValid = false;
}

void OAIGeographicDivision::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeographicDivision::fromJsonObject(QJsonObject json) {

    m_also_known_as_isValid = ::OpenAPI::fromJsonValue(m_also_known_as, json[QString("alsoKnownAs")]);
    m_also_known_as_isSet = !json[QString("alsoKnownAs")].isNull() && m_also_known_as_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_office_indices_isValid = ::OpenAPI::fromJsonValue(m_office_indices, json[QString("officeIndices")]);
    m_office_indices_isSet = !json[QString("officeIndices")].isNull() && m_office_indices_isValid;
}

QString OAIGeographicDivision::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeographicDivision::asJsonObject() const {
    QJsonObject obj;
    if (m_also_known_as.size() > 0) {
        obj.insert(QString("alsoKnownAs"), ::OpenAPI::toJsonValue(m_also_known_as));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_office_indices.size() > 0) {
        obj.insert(QString("officeIndices"), ::OpenAPI::toJsonValue(m_office_indices));
    }
    return obj;
}

QList<QString> OAIGeographicDivision::getAlsoKnownAs() const {
    return m_also_known_as;
}
void OAIGeographicDivision::setAlsoKnownAs(const QList<QString> &also_known_as) {
    m_also_known_as = also_known_as;
    m_also_known_as_isSet = true;
}

bool OAIGeographicDivision::is_also_known_as_Set() const{
    return m_also_known_as_isSet;
}

bool OAIGeographicDivision::is_also_known_as_Valid() const{
    return m_also_known_as_isValid;
}

QString OAIGeographicDivision::getName() const {
    return m_name;
}
void OAIGeographicDivision::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGeographicDivision::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGeographicDivision::is_name_Valid() const{
    return m_name_isValid;
}

QList<qint32> OAIGeographicDivision::getOfficeIndices() const {
    return m_office_indices;
}
void OAIGeographicDivision::setOfficeIndices(const QList<qint32> &office_indices) {
    m_office_indices = office_indices;
    m_office_indices_isSet = true;
}

bool OAIGeographicDivision::is_office_indices_Set() const{
    return m_office_indices_isSet;
}

bool OAIGeographicDivision::is_office_indices_Valid() const{
    return m_office_indices_isValid;
}

bool OAIGeographicDivision::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_also_known_as.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_indices.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeographicDivision::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
