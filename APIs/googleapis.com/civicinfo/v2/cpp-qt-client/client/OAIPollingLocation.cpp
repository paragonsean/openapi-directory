/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPollingLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPollingLocation::OAIPollingLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPollingLocation::OAIPollingLocation() {
    this->initializeModel();
}

OAIPollingLocation::~OAIPollingLocation() {}

void OAIPollingLocation::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_polling_hours_isSet = false;
    m_polling_hours_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_voter_services_isSet = false;
    m_voter_services_isValid = false;
}

void OAIPollingLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPollingLocation::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_polling_hours_isValid = ::OpenAPI::fromJsonValue(m_polling_hours, json[QString("pollingHours")]);
    m_polling_hours_isSet = !json[QString("pollingHours")].isNull() && m_polling_hours_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_voter_services_isValid = ::OpenAPI::fromJsonValue(m_voter_services, json[QString("voterServices")]);
    m_voter_services_isSet = !json[QString("voterServices")].isNull() && m_voter_services_isValid;
}

QString OAIPollingLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPollingLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_polling_hours_isSet) {
        obj.insert(QString("pollingHours"), ::OpenAPI::toJsonValue(m_polling_hours));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_voter_services_isSet) {
        obj.insert(QString("voterServices"), ::OpenAPI::toJsonValue(m_voter_services));
    }
    return obj;
}

OAISimpleAddressType OAIPollingLocation::getAddress() const {
    return m_address;
}
void OAIPollingLocation::setAddress(const OAISimpleAddressType &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIPollingLocation::is_address_Set() const{
    return m_address_isSet;
}

bool OAIPollingLocation::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIPollingLocation::getEndDate() const {
    return m_end_date;
}
void OAIPollingLocation::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIPollingLocation::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIPollingLocation::is_end_date_Valid() const{
    return m_end_date_isValid;
}

double OAIPollingLocation::getLatitude() const {
    return m_latitude;
}
void OAIPollingLocation::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIPollingLocation::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIPollingLocation::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIPollingLocation::getLongitude() const {
    return m_longitude;
}
void OAIPollingLocation::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIPollingLocation::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIPollingLocation::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIPollingLocation::getName() const {
    return m_name;
}
void OAIPollingLocation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPollingLocation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPollingLocation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPollingLocation::getNotes() const {
    return m_notes;
}
void OAIPollingLocation::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIPollingLocation::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIPollingLocation::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIPollingLocation::getPollingHours() const {
    return m_polling_hours;
}
void OAIPollingLocation::setPollingHours(const QString &polling_hours) {
    m_polling_hours = polling_hours;
    m_polling_hours_isSet = true;
}

bool OAIPollingLocation::is_polling_hours_Set() const{
    return m_polling_hours_isSet;
}

bool OAIPollingLocation::is_polling_hours_Valid() const{
    return m_polling_hours_isValid;
}

QList<OAISource> OAIPollingLocation::getSources() const {
    return m_sources;
}
void OAIPollingLocation::setSources(const QList<OAISource> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIPollingLocation::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIPollingLocation::is_sources_Valid() const{
    return m_sources_isValid;
}

QString OAIPollingLocation::getStartDate() const {
    return m_start_date;
}
void OAIPollingLocation::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIPollingLocation::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIPollingLocation::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIPollingLocation::getVoterServices() const {
    return m_voter_services;
}
void OAIPollingLocation::setVoterServices(const QString &voter_services) {
    m_voter_services = voter_services;
    m_voter_services_isSet = true;
}

bool OAIPollingLocation::is_voter_services_Set() const{
    return m_voter_services_isSet;
}

bool OAIPollingLocation::is_voter_services_Valid() const{
    return m_voter_services_isValid;
}

bool OAIPollingLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_polling_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voter_services_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPollingLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
