/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRepresentativeInfoResponse.h
 *
 * The result of a representative info lookup query.
 */

#ifndef OAIRepresentativeInfoResponse_H
#define OAIRepresentativeInfoResponse_H

#include <QJsonObject>

#include "OAIGeographicDivision.h"
#include "OAIOffice.h"
#include "OAIOfficial.h"
#include "OAISimpleAddressType.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGeographicDivision;
class OAISimpleAddressType;
class OAIOffice;
class OAIOfficial;

class OAIRepresentativeInfoResponse : public OAIObject {
public:
    OAIRepresentativeInfoResponse();
    OAIRepresentativeInfoResponse(QString json);
    ~OAIRepresentativeInfoResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, OAIGeographicDivision> getDivisions() const;
    void setDivisions(const QMap<QString, OAIGeographicDivision> &divisions);
    bool is_divisions_Set() const;
    bool is_divisions_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    OAISimpleAddressType getNormalizedInput() const;
    void setNormalizedInput(const OAISimpleAddressType &normalized_input);
    bool is_normalized_input_Set() const;
    bool is_normalized_input_Valid() const;

    QList<OAIOffice> getOffices() const;
    void setOffices(const QList<OAIOffice> &offices);
    bool is_offices_Set() const;
    bool is_offices_Valid() const;

    QList<OAIOfficial> getOfficials() const;
    void setOfficials(const QList<OAIOfficial> &officials);
    bool is_officials_Set() const;
    bool is_officials_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, OAIGeographicDivision> m_divisions;
    bool m_divisions_isSet;
    bool m_divisions_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    OAISimpleAddressType m_normalized_input;
    bool m_normalized_input_isSet;
    bool m_normalized_input_isValid;

    QList<OAIOffice> m_offices;
    bool m_offices_isSet;
    bool m_offices_isValid;

    QList<OAIOfficial> m_officials;
    bool m_officials_isSet;
    bool m_officials_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRepresentativeInfoResponse)

#endif // OAIRepresentativeInfoResponse_H
