/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVoterInfoResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVoterInfoResponse::OAIVoterInfoResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVoterInfoResponse::OAIVoterInfoResponse() {
    this->initializeModel();
}

OAIVoterInfoResponse::~OAIVoterInfoResponse() {}

void OAIVoterInfoResponse::initializeModel() {

    m_contests_isSet = false;
    m_contests_isValid = false;

    m_drop_off_locations_isSet = false;
    m_drop_off_locations_isValid = false;

    m_early_vote_sites_isSet = false;
    m_early_vote_sites_isValid = false;

    m_election_isSet = false;
    m_election_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_mail_only_isSet = false;
    m_mail_only_isValid = false;

    m_normalized_input_isSet = false;
    m_normalized_input_isValid = false;

    m_other_elections_isSet = false;
    m_other_elections_isValid = false;

    m_polling_locations_isSet = false;
    m_polling_locations_isValid = false;

    m_precinct_id_isSet = false;
    m_precinct_id_isValid = false;

    m_precincts_isSet = false;
    m_precincts_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIVoterInfoResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVoterInfoResponse::fromJsonObject(QJsonObject json) {

    m_contests_isValid = ::OpenAPI::fromJsonValue(m_contests, json[QString("contests")]);
    m_contests_isSet = !json[QString("contests")].isNull() && m_contests_isValid;

    m_drop_off_locations_isValid = ::OpenAPI::fromJsonValue(m_drop_off_locations, json[QString("dropOffLocations")]);
    m_drop_off_locations_isSet = !json[QString("dropOffLocations")].isNull() && m_drop_off_locations_isValid;

    m_early_vote_sites_isValid = ::OpenAPI::fromJsonValue(m_early_vote_sites, json[QString("earlyVoteSites")]);
    m_early_vote_sites_isSet = !json[QString("earlyVoteSites")].isNull() && m_early_vote_sites_isValid;

    m_election_isValid = ::OpenAPI::fromJsonValue(m_election, json[QString("election")]);
    m_election_isSet = !json[QString("election")].isNull() && m_election_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_mail_only_isValid = ::OpenAPI::fromJsonValue(m_mail_only, json[QString("mailOnly")]);
    m_mail_only_isSet = !json[QString("mailOnly")].isNull() && m_mail_only_isValid;

    m_normalized_input_isValid = ::OpenAPI::fromJsonValue(m_normalized_input, json[QString("normalizedInput")]);
    m_normalized_input_isSet = !json[QString("normalizedInput")].isNull() && m_normalized_input_isValid;

    m_other_elections_isValid = ::OpenAPI::fromJsonValue(m_other_elections, json[QString("otherElections")]);
    m_other_elections_isSet = !json[QString("otherElections")].isNull() && m_other_elections_isValid;

    m_polling_locations_isValid = ::OpenAPI::fromJsonValue(m_polling_locations, json[QString("pollingLocations")]);
    m_polling_locations_isSet = !json[QString("pollingLocations")].isNull() && m_polling_locations_isValid;

    m_precinct_id_isValid = ::OpenAPI::fromJsonValue(m_precinct_id, json[QString("precinctId")]);
    m_precinct_id_isSet = !json[QString("precinctId")].isNull() && m_precinct_id_isValid;

    m_precincts_isValid = ::OpenAPI::fromJsonValue(m_precincts, json[QString("precincts")]);
    m_precincts_isSet = !json[QString("precincts")].isNull() && m_precincts_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIVoterInfoResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVoterInfoResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_contests.size() > 0) {
        obj.insert(QString("contests"), ::OpenAPI::toJsonValue(m_contests));
    }
    if (m_drop_off_locations.size() > 0) {
        obj.insert(QString("dropOffLocations"), ::OpenAPI::toJsonValue(m_drop_off_locations));
    }
    if (m_early_vote_sites.size() > 0) {
        obj.insert(QString("earlyVoteSites"), ::OpenAPI::toJsonValue(m_early_vote_sites));
    }
    if (m_election.isSet()) {
        obj.insert(QString("election"), ::OpenAPI::toJsonValue(m_election));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_mail_only_isSet) {
        obj.insert(QString("mailOnly"), ::OpenAPI::toJsonValue(m_mail_only));
    }
    if (m_normalized_input.isSet()) {
        obj.insert(QString("normalizedInput"), ::OpenAPI::toJsonValue(m_normalized_input));
    }
    if (m_other_elections.size() > 0) {
        obj.insert(QString("otherElections"), ::OpenAPI::toJsonValue(m_other_elections));
    }
    if (m_polling_locations.size() > 0) {
        obj.insert(QString("pollingLocations"), ::OpenAPI::toJsonValue(m_polling_locations));
    }
    if (m_precinct_id_isSet) {
        obj.insert(QString("precinctId"), ::OpenAPI::toJsonValue(m_precinct_id));
    }
    if (m_precincts.size() > 0) {
        obj.insert(QString("precincts"), ::OpenAPI::toJsonValue(m_precincts));
    }
    if (m_state.size() > 0) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QList<OAIContest> OAIVoterInfoResponse::getContests() const {
    return m_contests;
}
void OAIVoterInfoResponse::setContests(const QList<OAIContest> &contests) {
    m_contests = contests;
    m_contests_isSet = true;
}

bool OAIVoterInfoResponse::is_contests_Set() const{
    return m_contests_isSet;
}

bool OAIVoterInfoResponse::is_contests_Valid() const{
    return m_contests_isValid;
}

QList<OAIPollingLocation> OAIVoterInfoResponse::getDropOffLocations() const {
    return m_drop_off_locations;
}
void OAIVoterInfoResponse::setDropOffLocations(const QList<OAIPollingLocation> &drop_off_locations) {
    m_drop_off_locations = drop_off_locations;
    m_drop_off_locations_isSet = true;
}

bool OAIVoterInfoResponse::is_drop_off_locations_Set() const{
    return m_drop_off_locations_isSet;
}

bool OAIVoterInfoResponse::is_drop_off_locations_Valid() const{
    return m_drop_off_locations_isValid;
}

QList<OAIPollingLocation> OAIVoterInfoResponse::getEarlyVoteSites() const {
    return m_early_vote_sites;
}
void OAIVoterInfoResponse::setEarlyVoteSites(const QList<OAIPollingLocation> &early_vote_sites) {
    m_early_vote_sites = early_vote_sites;
    m_early_vote_sites_isSet = true;
}

bool OAIVoterInfoResponse::is_early_vote_sites_Set() const{
    return m_early_vote_sites_isSet;
}

bool OAIVoterInfoResponse::is_early_vote_sites_Valid() const{
    return m_early_vote_sites_isValid;
}

OAIElection OAIVoterInfoResponse::getElection() const {
    return m_election;
}
void OAIVoterInfoResponse::setElection(const OAIElection &election) {
    m_election = election;
    m_election_isSet = true;
}

bool OAIVoterInfoResponse::is_election_Set() const{
    return m_election_isSet;
}

bool OAIVoterInfoResponse::is_election_Valid() const{
    return m_election_isValid;
}

QString OAIVoterInfoResponse::getKind() const {
    return m_kind;
}
void OAIVoterInfoResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIVoterInfoResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIVoterInfoResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIVoterInfoResponse::isMailOnly() const {
    return m_mail_only;
}
void OAIVoterInfoResponse::setMailOnly(const bool &mail_only) {
    m_mail_only = mail_only;
    m_mail_only_isSet = true;
}

bool OAIVoterInfoResponse::is_mail_only_Set() const{
    return m_mail_only_isSet;
}

bool OAIVoterInfoResponse::is_mail_only_Valid() const{
    return m_mail_only_isValid;
}

OAISimpleAddressType OAIVoterInfoResponse::getNormalizedInput() const {
    return m_normalized_input;
}
void OAIVoterInfoResponse::setNormalizedInput(const OAISimpleAddressType &normalized_input) {
    m_normalized_input = normalized_input;
    m_normalized_input_isSet = true;
}

bool OAIVoterInfoResponse::is_normalized_input_Set() const{
    return m_normalized_input_isSet;
}

bool OAIVoterInfoResponse::is_normalized_input_Valid() const{
    return m_normalized_input_isValid;
}

QList<OAIElection> OAIVoterInfoResponse::getOtherElections() const {
    return m_other_elections;
}
void OAIVoterInfoResponse::setOtherElections(const QList<OAIElection> &other_elections) {
    m_other_elections = other_elections;
    m_other_elections_isSet = true;
}

bool OAIVoterInfoResponse::is_other_elections_Set() const{
    return m_other_elections_isSet;
}

bool OAIVoterInfoResponse::is_other_elections_Valid() const{
    return m_other_elections_isValid;
}

QList<OAIPollingLocation> OAIVoterInfoResponse::getPollingLocations() const {
    return m_polling_locations;
}
void OAIVoterInfoResponse::setPollingLocations(const QList<OAIPollingLocation> &polling_locations) {
    m_polling_locations = polling_locations;
    m_polling_locations_isSet = true;
}

bool OAIVoterInfoResponse::is_polling_locations_Set() const{
    return m_polling_locations_isSet;
}

bool OAIVoterInfoResponse::is_polling_locations_Valid() const{
    return m_polling_locations_isValid;
}

QString OAIVoterInfoResponse::getPrecinctId() const {
    return m_precinct_id;
}
void OAIVoterInfoResponse::setPrecinctId(const QString &precinct_id) {
    m_precinct_id = precinct_id;
    m_precinct_id_isSet = true;
}

bool OAIVoterInfoResponse::is_precinct_id_Set() const{
    return m_precinct_id_isSet;
}

bool OAIVoterInfoResponse::is_precinct_id_Valid() const{
    return m_precinct_id_isValid;
}

QList<OAIPrecinct> OAIVoterInfoResponse::getPrecincts() const {
    return m_precincts;
}
void OAIVoterInfoResponse::setPrecincts(const QList<OAIPrecinct> &precincts) {
    m_precincts = precincts;
    m_precincts_isSet = true;
}

bool OAIVoterInfoResponse::is_precincts_Set() const{
    return m_precincts_isSet;
}

bool OAIVoterInfoResponse::is_precincts_Valid() const{
    return m_precincts_isValid;
}

QList<OAIAdministrationRegion> OAIVoterInfoResponse::getState() const {
    return m_state;
}
void OAIVoterInfoResponse::setState(const QList<OAIAdministrationRegion> &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIVoterInfoResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIVoterInfoResponse::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIVoterInfoResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_drop_off_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_early_vote_sites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_election.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mail_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_normalized_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_elections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_polling_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_precinct_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precincts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVoterInfoResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
