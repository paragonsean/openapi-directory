/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdministrativeBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdministrativeBody::OAIAdministrativeBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdministrativeBody::OAIAdministrativeBody() {
    this->initializeModel();
}

OAIAdministrativeBody::~OAIAdministrativeBody() {}

void OAIAdministrativeBody::initializeModel() {

    m_absentee_voting_info_url_isSet = false;
    m_absentee_voting_info_url_isValid = false;

    m_ballot_info_url_isSet = false;
    m_ballot_info_url_isValid = false;

    m_correspondence_address_isSet = false;
    m_correspondence_address_isValid = false;

    m_election_info_url_isSet = false;
    m_election_info_url_isValid = false;

    m_election_notice_text_isSet = false;
    m_election_notice_text_isValid = false;

    m_election_notice_url_isSet = false;
    m_election_notice_url_isValid = false;

    m_election_officials_isSet = false;
    m_election_officials_isValid = false;

    m_election_registration_confirmation_url_isSet = false;
    m_election_registration_confirmation_url_isValid = false;

    m_election_registration_url_isSet = false;
    m_election_registration_url_isValid = false;

    m_election_rules_url_isSet = false;
    m_election_rules_url_isValid = false;

    m_hours_of_operation_isSet = false;
    m_hours_of_operation_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_physical_address_isSet = false;
    m_physical_address_isValid = false;

    m_voter_services_isSet = false;
    m_voter_services_isValid = false;

    m_voting_location_finder_url_isSet = false;
    m_voting_location_finder_url_isValid = false;
}

void OAIAdministrativeBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdministrativeBody::fromJsonObject(QJsonObject json) {

    m_absentee_voting_info_url_isValid = ::OpenAPI::fromJsonValue(m_absentee_voting_info_url, json[QString("absenteeVotingInfoUrl")]);
    m_absentee_voting_info_url_isSet = !json[QString("absenteeVotingInfoUrl")].isNull() && m_absentee_voting_info_url_isValid;

    m_ballot_info_url_isValid = ::OpenAPI::fromJsonValue(m_ballot_info_url, json[QString("ballotInfoUrl")]);
    m_ballot_info_url_isSet = !json[QString("ballotInfoUrl")].isNull() && m_ballot_info_url_isValid;

    m_correspondence_address_isValid = ::OpenAPI::fromJsonValue(m_correspondence_address, json[QString("correspondenceAddress")]);
    m_correspondence_address_isSet = !json[QString("correspondenceAddress")].isNull() && m_correspondence_address_isValid;

    m_election_info_url_isValid = ::OpenAPI::fromJsonValue(m_election_info_url, json[QString("electionInfoUrl")]);
    m_election_info_url_isSet = !json[QString("electionInfoUrl")].isNull() && m_election_info_url_isValid;

    m_election_notice_text_isValid = ::OpenAPI::fromJsonValue(m_election_notice_text, json[QString("electionNoticeText")]);
    m_election_notice_text_isSet = !json[QString("electionNoticeText")].isNull() && m_election_notice_text_isValid;

    m_election_notice_url_isValid = ::OpenAPI::fromJsonValue(m_election_notice_url, json[QString("electionNoticeUrl")]);
    m_election_notice_url_isSet = !json[QString("electionNoticeUrl")].isNull() && m_election_notice_url_isValid;

    m_election_officials_isValid = ::OpenAPI::fromJsonValue(m_election_officials, json[QString("electionOfficials")]);
    m_election_officials_isSet = !json[QString("electionOfficials")].isNull() && m_election_officials_isValid;

    m_election_registration_confirmation_url_isValid = ::OpenAPI::fromJsonValue(m_election_registration_confirmation_url, json[QString("electionRegistrationConfirmationUrl")]);
    m_election_registration_confirmation_url_isSet = !json[QString("electionRegistrationConfirmationUrl")].isNull() && m_election_registration_confirmation_url_isValid;

    m_election_registration_url_isValid = ::OpenAPI::fromJsonValue(m_election_registration_url, json[QString("electionRegistrationUrl")]);
    m_election_registration_url_isSet = !json[QString("electionRegistrationUrl")].isNull() && m_election_registration_url_isValid;

    m_election_rules_url_isValid = ::OpenAPI::fromJsonValue(m_election_rules_url, json[QString("electionRulesUrl")]);
    m_election_rules_url_isSet = !json[QString("electionRulesUrl")].isNull() && m_election_rules_url_isValid;

    m_hours_of_operation_isValid = ::OpenAPI::fromJsonValue(m_hours_of_operation, json[QString("hoursOfOperation")]);
    m_hours_of_operation_isSet = !json[QString("hoursOfOperation")].isNull() && m_hours_of_operation_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_physical_address_isValid = ::OpenAPI::fromJsonValue(m_physical_address, json[QString("physicalAddress")]);
    m_physical_address_isSet = !json[QString("physicalAddress")].isNull() && m_physical_address_isValid;

    m_voter_services_isValid = ::OpenAPI::fromJsonValue(m_voter_services, json[QString("voter_services")]);
    m_voter_services_isSet = !json[QString("voter_services")].isNull() && m_voter_services_isValid;

    m_voting_location_finder_url_isValid = ::OpenAPI::fromJsonValue(m_voting_location_finder_url, json[QString("votingLocationFinderUrl")]);
    m_voting_location_finder_url_isSet = !json[QString("votingLocationFinderUrl")].isNull() && m_voting_location_finder_url_isValid;
}

QString OAIAdministrativeBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdministrativeBody::asJsonObject() const {
    QJsonObject obj;
    if (m_absentee_voting_info_url_isSet) {
        obj.insert(QString("absenteeVotingInfoUrl"), ::OpenAPI::toJsonValue(m_absentee_voting_info_url));
    }
    if (m_ballot_info_url_isSet) {
        obj.insert(QString("ballotInfoUrl"), ::OpenAPI::toJsonValue(m_ballot_info_url));
    }
    if (m_correspondence_address.isSet()) {
        obj.insert(QString("correspondenceAddress"), ::OpenAPI::toJsonValue(m_correspondence_address));
    }
    if (m_election_info_url_isSet) {
        obj.insert(QString("electionInfoUrl"), ::OpenAPI::toJsonValue(m_election_info_url));
    }
    if (m_election_notice_text_isSet) {
        obj.insert(QString("electionNoticeText"), ::OpenAPI::toJsonValue(m_election_notice_text));
    }
    if (m_election_notice_url_isSet) {
        obj.insert(QString("electionNoticeUrl"), ::OpenAPI::toJsonValue(m_election_notice_url));
    }
    if (m_election_officials.size() > 0) {
        obj.insert(QString("electionOfficials"), ::OpenAPI::toJsonValue(m_election_officials));
    }
    if (m_election_registration_confirmation_url_isSet) {
        obj.insert(QString("electionRegistrationConfirmationUrl"), ::OpenAPI::toJsonValue(m_election_registration_confirmation_url));
    }
    if (m_election_registration_url_isSet) {
        obj.insert(QString("electionRegistrationUrl"), ::OpenAPI::toJsonValue(m_election_registration_url));
    }
    if (m_election_rules_url_isSet) {
        obj.insert(QString("electionRulesUrl"), ::OpenAPI::toJsonValue(m_election_rules_url));
    }
    if (m_hours_of_operation_isSet) {
        obj.insert(QString("hoursOfOperation"), ::OpenAPI::toJsonValue(m_hours_of_operation));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_physical_address.isSet()) {
        obj.insert(QString("physicalAddress"), ::OpenAPI::toJsonValue(m_physical_address));
    }
    if (m_voter_services.size() > 0) {
        obj.insert(QString("voter_services"), ::OpenAPI::toJsonValue(m_voter_services));
    }
    if (m_voting_location_finder_url_isSet) {
        obj.insert(QString("votingLocationFinderUrl"), ::OpenAPI::toJsonValue(m_voting_location_finder_url));
    }
    return obj;
}

QString OAIAdministrativeBody::getAbsenteeVotingInfoUrl() const {
    return m_absentee_voting_info_url;
}
void OAIAdministrativeBody::setAbsenteeVotingInfoUrl(const QString &absentee_voting_info_url) {
    m_absentee_voting_info_url = absentee_voting_info_url;
    m_absentee_voting_info_url_isSet = true;
}

bool OAIAdministrativeBody::is_absentee_voting_info_url_Set() const{
    return m_absentee_voting_info_url_isSet;
}

bool OAIAdministrativeBody::is_absentee_voting_info_url_Valid() const{
    return m_absentee_voting_info_url_isValid;
}

QString OAIAdministrativeBody::getBallotInfoUrl() const {
    return m_ballot_info_url;
}
void OAIAdministrativeBody::setBallotInfoUrl(const QString &ballot_info_url) {
    m_ballot_info_url = ballot_info_url;
    m_ballot_info_url_isSet = true;
}

bool OAIAdministrativeBody::is_ballot_info_url_Set() const{
    return m_ballot_info_url_isSet;
}

bool OAIAdministrativeBody::is_ballot_info_url_Valid() const{
    return m_ballot_info_url_isValid;
}

OAISimpleAddressType OAIAdministrativeBody::getCorrespondenceAddress() const {
    return m_correspondence_address;
}
void OAIAdministrativeBody::setCorrespondenceAddress(const OAISimpleAddressType &correspondence_address) {
    m_correspondence_address = correspondence_address;
    m_correspondence_address_isSet = true;
}

bool OAIAdministrativeBody::is_correspondence_address_Set() const{
    return m_correspondence_address_isSet;
}

bool OAIAdministrativeBody::is_correspondence_address_Valid() const{
    return m_correspondence_address_isValid;
}

QString OAIAdministrativeBody::getElectionInfoUrl() const {
    return m_election_info_url;
}
void OAIAdministrativeBody::setElectionInfoUrl(const QString &election_info_url) {
    m_election_info_url = election_info_url;
    m_election_info_url_isSet = true;
}

bool OAIAdministrativeBody::is_election_info_url_Set() const{
    return m_election_info_url_isSet;
}

bool OAIAdministrativeBody::is_election_info_url_Valid() const{
    return m_election_info_url_isValid;
}

QString OAIAdministrativeBody::getElectionNoticeText() const {
    return m_election_notice_text;
}
void OAIAdministrativeBody::setElectionNoticeText(const QString &election_notice_text) {
    m_election_notice_text = election_notice_text;
    m_election_notice_text_isSet = true;
}

bool OAIAdministrativeBody::is_election_notice_text_Set() const{
    return m_election_notice_text_isSet;
}

bool OAIAdministrativeBody::is_election_notice_text_Valid() const{
    return m_election_notice_text_isValid;
}

QString OAIAdministrativeBody::getElectionNoticeUrl() const {
    return m_election_notice_url;
}
void OAIAdministrativeBody::setElectionNoticeUrl(const QString &election_notice_url) {
    m_election_notice_url = election_notice_url;
    m_election_notice_url_isSet = true;
}

bool OAIAdministrativeBody::is_election_notice_url_Set() const{
    return m_election_notice_url_isSet;
}

bool OAIAdministrativeBody::is_election_notice_url_Valid() const{
    return m_election_notice_url_isValid;
}

QList<OAIElectionOfficial> OAIAdministrativeBody::getElectionOfficials() const {
    return m_election_officials;
}
void OAIAdministrativeBody::setElectionOfficials(const QList<OAIElectionOfficial> &election_officials) {
    m_election_officials = election_officials;
    m_election_officials_isSet = true;
}

bool OAIAdministrativeBody::is_election_officials_Set() const{
    return m_election_officials_isSet;
}

bool OAIAdministrativeBody::is_election_officials_Valid() const{
    return m_election_officials_isValid;
}

QString OAIAdministrativeBody::getElectionRegistrationConfirmationUrl() const {
    return m_election_registration_confirmation_url;
}
void OAIAdministrativeBody::setElectionRegistrationConfirmationUrl(const QString &election_registration_confirmation_url) {
    m_election_registration_confirmation_url = election_registration_confirmation_url;
    m_election_registration_confirmation_url_isSet = true;
}

bool OAIAdministrativeBody::is_election_registration_confirmation_url_Set() const{
    return m_election_registration_confirmation_url_isSet;
}

bool OAIAdministrativeBody::is_election_registration_confirmation_url_Valid() const{
    return m_election_registration_confirmation_url_isValid;
}

QString OAIAdministrativeBody::getElectionRegistrationUrl() const {
    return m_election_registration_url;
}
void OAIAdministrativeBody::setElectionRegistrationUrl(const QString &election_registration_url) {
    m_election_registration_url = election_registration_url;
    m_election_registration_url_isSet = true;
}

bool OAIAdministrativeBody::is_election_registration_url_Set() const{
    return m_election_registration_url_isSet;
}

bool OAIAdministrativeBody::is_election_registration_url_Valid() const{
    return m_election_registration_url_isValid;
}

QString OAIAdministrativeBody::getElectionRulesUrl() const {
    return m_election_rules_url;
}
void OAIAdministrativeBody::setElectionRulesUrl(const QString &election_rules_url) {
    m_election_rules_url = election_rules_url;
    m_election_rules_url_isSet = true;
}

bool OAIAdministrativeBody::is_election_rules_url_Set() const{
    return m_election_rules_url_isSet;
}

bool OAIAdministrativeBody::is_election_rules_url_Valid() const{
    return m_election_rules_url_isValid;
}

QString OAIAdministrativeBody::getHoursOfOperation() const {
    return m_hours_of_operation;
}
void OAIAdministrativeBody::setHoursOfOperation(const QString &hours_of_operation) {
    m_hours_of_operation = hours_of_operation;
    m_hours_of_operation_isSet = true;
}

bool OAIAdministrativeBody::is_hours_of_operation_Set() const{
    return m_hours_of_operation_isSet;
}

bool OAIAdministrativeBody::is_hours_of_operation_Valid() const{
    return m_hours_of_operation_isValid;
}

QString OAIAdministrativeBody::getName() const {
    return m_name;
}
void OAIAdministrativeBody::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdministrativeBody::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdministrativeBody::is_name_Valid() const{
    return m_name_isValid;
}

OAISimpleAddressType OAIAdministrativeBody::getPhysicalAddress() const {
    return m_physical_address;
}
void OAIAdministrativeBody::setPhysicalAddress(const OAISimpleAddressType &physical_address) {
    m_physical_address = physical_address;
    m_physical_address_isSet = true;
}

bool OAIAdministrativeBody::is_physical_address_Set() const{
    return m_physical_address_isSet;
}

bool OAIAdministrativeBody::is_physical_address_Valid() const{
    return m_physical_address_isValid;
}

QList<QString> OAIAdministrativeBody::getVoterServices() const {
    return m_voter_services;
}
void OAIAdministrativeBody::setVoterServices(const QList<QString> &voter_services) {
    m_voter_services = voter_services;
    m_voter_services_isSet = true;
}

bool OAIAdministrativeBody::is_voter_services_Set() const{
    return m_voter_services_isSet;
}

bool OAIAdministrativeBody::is_voter_services_Valid() const{
    return m_voter_services_isValid;
}

QString OAIAdministrativeBody::getVotingLocationFinderUrl() const {
    return m_voting_location_finder_url;
}
void OAIAdministrativeBody::setVotingLocationFinderUrl(const QString &voting_location_finder_url) {
    m_voting_location_finder_url = voting_location_finder_url;
    m_voting_location_finder_url_isSet = true;
}

bool OAIAdministrativeBody::is_voting_location_finder_url_Set() const{
    return m_voting_location_finder_url_isSet;
}

bool OAIAdministrativeBody::is_voting_location_finder_url_Valid() const{
    return m_voting_location_finder_url_isValid;
}

bool OAIAdministrativeBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_absentee_voting_info_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ballot_info_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_correspondence_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_info_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_notice_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_notice_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_officials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_registration_confirmation_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_registration_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_election_rules_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hours_of_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_voter_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_voting_location_finder_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdministrativeBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
