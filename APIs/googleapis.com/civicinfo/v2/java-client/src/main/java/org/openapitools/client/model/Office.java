/*
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Source;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about an Office held by one or more Officials.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:56.745680-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Office {
  public static final String SERIALIZED_NAME_DIVISION_ID = "divisionId";
  @SerializedName(SERIALIZED_NAME_DIVISION_ID)
  private String divisionId;

  /**
   * Gets or Sets levels
   */
  @JsonAdapter(LevelsEnum.Adapter.class)
  public enum LevelsEnum {
    INTERNATIONAL("international"),
    
    COUNTRY("country"),
    
    ADMINISTRATIVE_AREA1("administrativeArea1"),
    
    REGIONAL("regional"),
    
    ADMINISTRATIVE_AREA2("administrativeArea2"),
    
    LOCALITY("locality"),
    
    SUB_LOCALITY1("subLocality1"),
    
    SUB_LOCALITY2("subLocality2"),
    
    SPECIAL("special");

    private String value;

    LevelsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LevelsEnum fromValue(String value) {
      for (LevelsEnum b : LevelsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LevelsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LevelsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LevelsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEVELS = "levels";
  @SerializedName(SERIALIZED_NAME_LEVELS)
  private List<LevelsEnum> levels = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OFFICIAL_INDICES = "officialIndices";
  @SerializedName(SERIALIZED_NAME_OFFICIAL_INDICES)
  private List<Integer> officialIndices = new ArrayList<>();

  /**
   * Gets or Sets roles
   */
  @JsonAdapter(RolesEnum.Adapter.class)
  public enum RolesEnum {
    HEAD_OF_STATE("headOfState"),
    
    HEAD_OF_GOVERNMENT("headOfGovernment"),
    
    DEPUTY_HEAD_OF_GOVERNMENT("deputyHeadOfGovernment"),
    
    GOVERNMENT_OFFICER("governmentOfficer"),
    
    EXECUTIVE_COUNCIL("executiveCouncil"),
    
    LEGISLATOR_UPPER_BODY("legislatorUpperBody"),
    
    LEGISLATOR_LOWER_BODY("legislatorLowerBody"),
    
    HIGHEST_COURT_JUDGE("highestCourtJudge"),
    
    JUDGE("judge"),
    
    SCHOOL_BOARD("schoolBoard"),
    
    SPECIAL_PURPOSE_OFFICER("specialPurposeOfficer"),
    
    OTHER_ROLE("otherRole");

    private String value;

    RolesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RolesEnum fromValue(String value) {
      for (RolesEnum b : RolesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RolesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RolesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RolesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RolesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RolesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<RolesEnum> roles = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<Source> sources = new ArrayList<>();

  public Office() {
  }

  public Office divisionId(String divisionId) {
    this.divisionId = divisionId;
    return this;
  }

  /**
   * The OCD ID of the division with which this office is associated.
   * @return divisionId
   */
  @javax.annotation.Nullable
  public String getDivisionId() {
    return divisionId;
  }

  public void setDivisionId(String divisionId) {
    this.divisionId = divisionId;
  }


  public Office levels(List<LevelsEnum> levels) {
    this.levels = levels;
    return this;
  }

  public Office addLevelsItem(LevelsEnum levelsItem) {
    if (this.levels == null) {
      this.levels = new ArrayList<>();
    }
    this.levels.add(levelsItem);
    return this;
  }

  /**
   * The levels of government of which this office is part. There may be more than one in cases where a jurisdiction effectively acts at two different levels of government; for example, the mayor of the District of Columbia acts at \&quot;locality\&quot; level, but also effectively at both \&quot;administrative-area-2\&quot; and \&quot;administrative-area-1\&quot;.
   * @return levels
   */
  @javax.annotation.Nullable
  public List<LevelsEnum> getLevels() {
    return levels;
  }

  public void setLevels(List<LevelsEnum> levels) {
    this.levels = levels;
  }


  public Office name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The human-readable name of the office.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Office officialIndices(List<Integer> officialIndices) {
    this.officialIndices = officialIndices;
    return this;
  }

  public Office addOfficialIndicesItem(Integer officialIndicesItem) {
    if (this.officialIndices == null) {
      this.officialIndices = new ArrayList<>();
    }
    this.officialIndices.add(officialIndicesItem);
    return this;
  }

  /**
   * List of indices in the officials array of people who presently hold this office.
   * @return officialIndices
   */
  @javax.annotation.Nullable
  public List<Integer> getOfficialIndices() {
    return officialIndices;
  }

  public void setOfficialIndices(List<Integer> officialIndices) {
    this.officialIndices = officialIndices;
  }


  public Office roles(List<RolesEnum> roles) {
    this.roles = roles;
    return this;
  }

  public Office addRolesItem(RolesEnum rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * The roles which this office fulfills. Roles are not meant to be exhaustive, or to exactly specify the entire set of responsibilities of a given office, but are meant to be rough categories that are useful for general selection from or sorting of a list of offices.
   * @return roles
   */
  @javax.annotation.Nullable
  public List<RolesEnum> getRoles() {
    return roles;
  }

  public void setRoles(List<RolesEnum> roles) {
    this.roles = roles;
  }


  public Office sources(List<Source> sources) {
    this.sources = sources;
    return this;
  }

  public Office addSourcesItem(Source sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * A list of sources for this office. If multiple sources are listed, the data has been aggregated from those sources.
   * @return sources
   */
  @javax.annotation.Nullable
  public List<Source> getSources() {
    return sources;
  }

  public void setSources(List<Source> sources) {
    this.sources = sources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Office office = (Office) o;
    return Objects.equals(this.divisionId, office.divisionId) &&
        Objects.equals(this.levels, office.levels) &&
        Objects.equals(this.name, office.name) &&
        Objects.equals(this.officialIndices, office.officialIndices) &&
        Objects.equals(this.roles, office.roles) &&
        Objects.equals(this.sources, office.sources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(divisionId, levels, name, officialIndices, roles, sources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Office {\n");
    sb.append("    divisionId: ").append(toIndentedString(divisionId)).append("\n");
    sb.append("    levels: ").append(toIndentedString(levels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    officialIndices: ").append(toIndentedString(officialIndices)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("divisionId");
    openapiFields.add("levels");
    openapiFields.add("name");
    openapiFields.add("officialIndices");
    openapiFields.add("roles");
    openapiFields.add("sources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Office
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Office.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Office is not found in the empty JSON string", Office.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Office.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Office` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("divisionId") != null && !jsonObj.get("divisionId").isJsonNull()) && !jsonObj.get("divisionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `divisionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("divisionId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("levels") != null && !jsonObj.get("levels").isJsonNull() && !jsonObj.get("levels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `levels` to be an array in the JSON string but got `%s`", jsonObj.get("levels").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("officialIndices") != null && !jsonObj.get("officialIndices").isJsonNull() && !jsonObj.get("officialIndices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `officialIndices` to be an array in the JSON string but got `%s`", jsonObj.get("officialIndices").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull() && !jsonObj.get("roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
      }
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull()) {
        JsonArray jsonArraysources = jsonObj.getAsJsonArray("sources");
        if (jsonArraysources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
          }

          // validate the optional field `sources` (array)
          for (int i = 0; i < jsonArraysources.size(); i++) {
            Source.validateJsonElement(jsonArraysources.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Office.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Office' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Office> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Office.class));

       return (TypeAdapter<T>) new TypeAdapter<Office>() {
           @Override
           public void write(JsonWriter out, Office value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Office read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Office given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Office
   * @throws IOException if the JSON string is invalid with respect to Office
   */
  public static Office fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Office.class);
  }

  /**
   * Convert an instance of Office to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

