/*
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the election that was queried.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:56.745680-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Election {
  public static final String SERIALIZED_NAME_ELECTION_DAY = "electionDay";
  @SerializedName(SERIALIZED_NAME_ELECTION_DAY)
  private String electionDay;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OCD_DIVISION_ID = "ocdDivisionId";
  @SerializedName(SERIALIZED_NAME_OCD_DIVISION_ID)
  private String ocdDivisionId;

  /**
   * Gets or Sets shapeLookupBehavior
   */
  @JsonAdapter(ShapeLookupBehaviorEnum.Adapter.class)
  public enum ShapeLookupBehaviorEnum {
    SHAPE_LOOKUP_DEFAULT("shapeLookupDefault"),
    
    SHAPE_LOOKUP_DISABLED("shapeLookupDisabled"),
    
    SHAPE_LOOKUP_ENABLED("shapeLookupEnabled");

    private String value;

    ShapeLookupBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShapeLookupBehaviorEnum fromValue(String value) {
      for (ShapeLookupBehaviorEnum b : ShapeLookupBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShapeLookupBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShapeLookupBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShapeLookupBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShapeLookupBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShapeLookupBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHAPE_LOOKUP_BEHAVIOR = "shapeLookupBehavior";
  @SerializedName(SERIALIZED_NAME_SHAPE_LOOKUP_BEHAVIOR)
  private ShapeLookupBehaviorEnum shapeLookupBehavior;

  public Election() {
  }

  public Election electionDay(String electionDay) {
    this.electionDay = electionDay;
    return this;
  }

  /**
   * Day of the election in YYYY-MM-DD format.
   * @return electionDay
   */
  @javax.annotation.Nullable
  public String getElectionDay() {
    return electionDay;
  }

  public void setElectionDay(String electionDay) {
    this.electionDay = electionDay;
  }


  public Election id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique ID of this election.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Election name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A displayable name for the election.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Election ocdDivisionId(String ocdDivisionId) {
    this.ocdDivisionId = ocdDivisionId;
    return this;
  }

  /**
   * The political division of the election. Represented as an OCD Division ID. Voters within these political jurisdictions are covered by this election. This is typically a state such as ocd-division/country:us/state:ca or for the midterms or general election the entire US (i.e. ocd-division/country:us).
   * @return ocdDivisionId
   */
  @javax.annotation.Nullable
  public String getOcdDivisionId() {
    return ocdDivisionId;
  }

  public void setOcdDivisionId(String ocdDivisionId) {
    this.ocdDivisionId = ocdDivisionId;
  }


  public Election shapeLookupBehavior(ShapeLookupBehaviorEnum shapeLookupBehavior) {
    this.shapeLookupBehavior = shapeLookupBehavior;
    return this;
  }

  /**
   * Get shapeLookupBehavior
   * @return shapeLookupBehavior
   */
  @javax.annotation.Nullable
  public ShapeLookupBehaviorEnum getShapeLookupBehavior() {
    return shapeLookupBehavior;
  }

  public void setShapeLookupBehavior(ShapeLookupBehaviorEnum shapeLookupBehavior) {
    this.shapeLookupBehavior = shapeLookupBehavior;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Election election = (Election) o;
    return Objects.equals(this.electionDay, election.electionDay) &&
        Objects.equals(this.id, election.id) &&
        Objects.equals(this.name, election.name) &&
        Objects.equals(this.ocdDivisionId, election.ocdDivisionId) &&
        Objects.equals(this.shapeLookupBehavior, election.shapeLookupBehavior);
  }

  @Override
  public int hashCode() {
    return Objects.hash(electionDay, id, name, ocdDivisionId, shapeLookupBehavior);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Election {\n");
    sb.append("    electionDay: ").append(toIndentedString(electionDay)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ocdDivisionId: ").append(toIndentedString(ocdDivisionId)).append("\n");
    sb.append("    shapeLookupBehavior: ").append(toIndentedString(shapeLookupBehavior)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("electionDay");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("ocdDivisionId");
    openapiFields.add("shapeLookupBehavior");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Election
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Election.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Election is not found in the empty JSON string", Election.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Election.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Election` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("electionDay") != null && !jsonObj.get("electionDay").isJsonNull()) && !jsonObj.get("electionDay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electionDay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electionDay").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ocdDivisionId") != null && !jsonObj.get("ocdDivisionId").isJsonNull()) && !jsonObj.get("ocdDivisionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ocdDivisionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ocdDivisionId").toString()));
      }
      if ((jsonObj.get("shapeLookupBehavior") != null && !jsonObj.get("shapeLookupBehavior").isJsonNull()) && !jsonObj.get("shapeLookupBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shapeLookupBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shapeLookupBehavior").toString()));
      }
      // validate the optional field `shapeLookupBehavior`
      if (jsonObj.get("shapeLookupBehavior") != null && !jsonObj.get("shapeLookupBehavior").isJsonNull()) {
        ShapeLookupBehaviorEnum.validateJsonElement(jsonObj.get("shapeLookupBehavior"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Election.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Election' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Election> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Election.class));

       return (TypeAdapter<T>) new TypeAdapter<Election>() {
           @Override
           public void write(JsonWriter out, Election value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Election read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Election given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Election
   * @throws IOException if the JSON string is invalid with respect to Election
   */
  public static Election fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Election.class);
  }

  /**
   * Convert an instance of Election to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

