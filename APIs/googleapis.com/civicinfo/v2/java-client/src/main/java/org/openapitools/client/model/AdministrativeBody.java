/*
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ElectionOfficial;
import org.openapitools.client.model.SimpleAddressType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about an election administrative body (e.g. County Board of Elections).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:56.745680-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdministrativeBody {
  public static final String SERIALIZED_NAME_ABSENTEE_VOTING_INFO_URL = "absenteeVotingInfoUrl";
  @SerializedName(SERIALIZED_NAME_ABSENTEE_VOTING_INFO_URL)
  private String absenteeVotingInfoUrl;

  public static final String SERIALIZED_NAME_BALLOT_INFO_URL = "ballotInfoUrl";
  @SerializedName(SERIALIZED_NAME_BALLOT_INFO_URL)
  private String ballotInfoUrl;

  public static final String SERIALIZED_NAME_CORRESPONDENCE_ADDRESS = "correspondenceAddress";
  @SerializedName(SERIALIZED_NAME_CORRESPONDENCE_ADDRESS)
  private SimpleAddressType correspondenceAddress;

  public static final String SERIALIZED_NAME_ELECTION_INFO_URL = "electionInfoUrl";
  @SerializedName(SERIALIZED_NAME_ELECTION_INFO_URL)
  private String electionInfoUrl;

  public static final String SERIALIZED_NAME_ELECTION_NOTICE_TEXT = "electionNoticeText";
  @SerializedName(SERIALIZED_NAME_ELECTION_NOTICE_TEXT)
  private String electionNoticeText;

  public static final String SERIALIZED_NAME_ELECTION_NOTICE_URL = "electionNoticeUrl";
  @SerializedName(SERIALIZED_NAME_ELECTION_NOTICE_URL)
  private String electionNoticeUrl;

  public static final String SERIALIZED_NAME_ELECTION_OFFICIALS = "electionOfficials";
  @SerializedName(SERIALIZED_NAME_ELECTION_OFFICIALS)
  private List<ElectionOfficial> electionOfficials = new ArrayList<>();

  public static final String SERIALIZED_NAME_ELECTION_REGISTRATION_CONFIRMATION_URL = "electionRegistrationConfirmationUrl";
  @SerializedName(SERIALIZED_NAME_ELECTION_REGISTRATION_CONFIRMATION_URL)
  private String electionRegistrationConfirmationUrl;

  public static final String SERIALIZED_NAME_ELECTION_REGISTRATION_URL = "electionRegistrationUrl";
  @SerializedName(SERIALIZED_NAME_ELECTION_REGISTRATION_URL)
  private String electionRegistrationUrl;

  public static final String SERIALIZED_NAME_ELECTION_RULES_URL = "electionRulesUrl";
  @SerializedName(SERIALIZED_NAME_ELECTION_RULES_URL)
  private String electionRulesUrl;

  public static final String SERIALIZED_NAME_HOURS_OF_OPERATION = "hoursOfOperation";
  @SerializedName(SERIALIZED_NAME_HOURS_OF_OPERATION)
  private String hoursOfOperation;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHYSICAL_ADDRESS = "physicalAddress";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_ADDRESS)
  private SimpleAddressType physicalAddress;

  public static final String SERIALIZED_NAME_VOTER_SERVICES = "voter_services";
  @SerializedName(SERIALIZED_NAME_VOTER_SERVICES)
  private List<String> voterServices = new ArrayList<>();

  public static final String SERIALIZED_NAME_VOTING_LOCATION_FINDER_URL = "votingLocationFinderUrl";
  @SerializedName(SERIALIZED_NAME_VOTING_LOCATION_FINDER_URL)
  private String votingLocationFinderUrl;

  public AdministrativeBody() {
  }

  public AdministrativeBody absenteeVotingInfoUrl(String absenteeVotingInfoUrl) {
    this.absenteeVotingInfoUrl = absenteeVotingInfoUrl;
    return this;
  }

  /**
   * A URL provided by this administrative body for information on absentee voting.
   * @return absenteeVotingInfoUrl
   */
  @javax.annotation.Nullable
  public String getAbsenteeVotingInfoUrl() {
    return absenteeVotingInfoUrl;
  }

  public void setAbsenteeVotingInfoUrl(String absenteeVotingInfoUrl) {
    this.absenteeVotingInfoUrl = absenteeVotingInfoUrl;
  }


  public AdministrativeBody ballotInfoUrl(String ballotInfoUrl) {
    this.ballotInfoUrl = ballotInfoUrl;
    return this;
  }

  /**
   * A URL provided by this administrative body to give contest information to the voter.
   * @return ballotInfoUrl
   */
  @javax.annotation.Nullable
  public String getBallotInfoUrl() {
    return ballotInfoUrl;
  }

  public void setBallotInfoUrl(String ballotInfoUrl) {
    this.ballotInfoUrl = ballotInfoUrl;
  }


  public AdministrativeBody correspondenceAddress(SimpleAddressType correspondenceAddress) {
    this.correspondenceAddress = correspondenceAddress;
    return this;
  }

  /**
   * Get correspondenceAddress
   * @return correspondenceAddress
   */
  @javax.annotation.Nullable
  public SimpleAddressType getCorrespondenceAddress() {
    return correspondenceAddress;
  }

  public void setCorrespondenceAddress(SimpleAddressType correspondenceAddress) {
    this.correspondenceAddress = correspondenceAddress;
  }


  public AdministrativeBody electionInfoUrl(String electionInfoUrl) {
    this.electionInfoUrl = electionInfoUrl;
    return this;
  }

  /**
   * A URL provided by this administrative body for looking up general election information.
   * @return electionInfoUrl
   */
  @javax.annotation.Nullable
  public String getElectionInfoUrl() {
    return electionInfoUrl;
  }

  public void setElectionInfoUrl(String electionInfoUrl) {
    this.electionInfoUrl = electionInfoUrl;
  }


  public AdministrativeBody electionNoticeText(String electionNoticeText) {
    this.electionNoticeText = electionNoticeText;
    return this;
  }

  /**
   * A last minute or emergency notification text provided by this administrative body.
   * @return electionNoticeText
   */
  @javax.annotation.Nullable
  public String getElectionNoticeText() {
    return electionNoticeText;
  }

  public void setElectionNoticeText(String electionNoticeText) {
    this.electionNoticeText = electionNoticeText;
  }


  public AdministrativeBody electionNoticeUrl(String electionNoticeUrl) {
    this.electionNoticeUrl = electionNoticeUrl;
    return this;
  }

  /**
   * A URL provided by this administrative body for additional information related to the last minute or emergency notification.
   * @return electionNoticeUrl
   */
  @javax.annotation.Nullable
  public String getElectionNoticeUrl() {
    return electionNoticeUrl;
  }

  public void setElectionNoticeUrl(String electionNoticeUrl) {
    this.electionNoticeUrl = electionNoticeUrl;
  }


  public AdministrativeBody electionOfficials(List<ElectionOfficial> electionOfficials) {
    this.electionOfficials = electionOfficials;
    return this;
  }

  public AdministrativeBody addElectionOfficialsItem(ElectionOfficial electionOfficialsItem) {
    if (this.electionOfficials == null) {
      this.electionOfficials = new ArrayList<>();
    }
    this.electionOfficials.add(electionOfficialsItem);
    return this;
  }

  /**
   * The election officials for this election administrative body.
   * @return electionOfficials
   */
  @javax.annotation.Nullable
  public List<ElectionOfficial> getElectionOfficials() {
    return electionOfficials;
  }

  public void setElectionOfficials(List<ElectionOfficial> electionOfficials) {
    this.electionOfficials = electionOfficials;
  }


  public AdministrativeBody electionRegistrationConfirmationUrl(String electionRegistrationConfirmationUrl) {
    this.electionRegistrationConfirmationUrl = electionRegistrationConfirmationUrl;
    return this;
  }

  /**
   * A URL provided by this administrative body for confirming that the voter is registered to vote.
   * @return electionRegistrationConfirmationUrl
   */
  @javax.annotation.Nullable
  public String getElectionRegistrationConfirmationUrl() {
    return electionRegistrationConfirmationUrl;
  }

  public void setElectionRegistrationConfirmationUrl(String electionRegistrationConfirmationUrl) {
    this.electionRegistrationConfirmationUrl = electionRegistrationConfirmationUrl;
  }


  public AdministrativeBody electionRegistrationUrl(String electionRegistrationUrl) {
    this.electionRegistrationUrl = electionRegistrationUrl;
    return this;
  }

  /**
   * A URL provided by this administrative body for looking up how to register to vote.
   * @return electionRegistrationUrl
   */
  @javax.annotation.Nullable
  public String getElectionRegistrationUrl() {
    return electionRegistrationUrl;
  }

  public void setElectionRegistrationUrl(String electionRegistrationUrl) {
    this.electionRegistrationUrl = electionRegistrationUrl;
  }


  public AdministrativeBody electionRulesUrl(String electionRulesUrl) {
    this.electionRulesUrl = electionRulesUrl;
    return this;
  }

  /**
   * A URL provided by this administrative body describing election rules to the voter.
   * @return electionRulesUrl
   */
  @javax.annotation.Nullable
  public String getElectionRulesUrl() {
    return electionRulesUrl;
  }

  public void setElectionRulesUrl(String electionRulesUrl) {
    this.electionRulesUrl = electionRulesUrl;
  }


  public AdministrativeBody hoursOfOperation(String hoursOfOperation) {
    this.hoursOfOperation = hoursOfOperation;
    return this;
  }

  /**
   * A description of the hours of operation for this administrative body.
   * @return hoursOfOperation
   */
  @javax.annotation.Nullable
  public String getHoursOfOperation() {
    return hoursOfOperation;
  }

  public void setHoursOfOperation(String hoursOfOperation) {
    this.hoursOfOperation = hoursOfOperation;
  }


  public AdministrativeBody name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of this election administrative body.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AdministrativeBody physicalAddress(SimpleAddressType physicalAddress) {
    this.physicalAddress = physicalAddress;
    return this;
  }

  /**
   * Get physicalAddress
   * @return physicalAddress
   */
  @javax.annotation.Nullable
  public SimpleAddressType getPhysicalAddress() {
    return physicalAddress;
  }

  public void setPhysicalAddress(SimpleAddressType physicalAddress) {
    this.physicalAddress = physicalAddress;
  }


  public AdministrativeBody voterServices(List<String> voterServices) {
    this.voterServices = voterServices;
    return this;
  }

  public AdministrativeBody addVoterServicesItem(String voterServicesItem) {
    if (this.voterServices == null) {
      this.voterServices = new ArrayList<>();
    }
    this.voterServices.add(voterServicesItem);
    return this;
  }

  /**
   * A description of the services this administrative body may provide.
   * @return voterServices
   */
  @javax.annotation.Nullable
  public List<String> getVoterServices() {
    return voterServices;
  }

  public void setVoterServices(List<String> voterServices) {
    this.voterServices = voterServices;
  }


  public AdministrativeBody votingLocationFinderUrl(String votingLocationFinderUrl) {
    this.votingLocationFinderUrl = votingLocationFinderUrl;
    return this;
  }

  /**
   * A URL provided by this administrative body for looking up where to vote.
   * @return votingLocationFinderUrl
   */
  @javax.annotation.Nullable
  public String getVotingLocationFinderUrl() {
    return votingLocationFinderUrl;
  }

  public void setVotingLocationFinderUrl(String votingLocationFinderUrl) {
    this.votingLocationFinderUrl = votingLocationFinderUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdministrativeBody administrativeBody = (AdministrativeBody) o;
    return Objects.equals(this.absenteeVotingInfoUrl, administrativeBody.absenteeVotingInfoUrl) &&
        Objects.equals(this.ballotInfoUrl, administrativeBody.ballotInfoUrl) &&
        Objects.equals(this.correspondenceAddress, administrativeBody.correspondenceAddress) &&
        Objects.equals(this.electionInfoUrl, administrativeBody.electionInfoUrl) &&
        Objects.equals(this.electionNoticeText, administrativeBody.electionNoticeText) &&
        Objects.equals(this.electionNoticeUrl, administrativeBody.electionNoticeUrl) &&
        Objects.equals(this.electionOfficials, administrativeBody.electionOfficials) &&
        Objects.equals(this.electionRegistrationConfirmationUrl, administrativeBody.electionRegistrationConfirmationUrl) &&
        Objects.equals(this.electionRegistrationUrl, administrativeBody.electionRegistrationUrl) &&
        Objects.equals(this.electionRulesUrl, administrativeBody.electionRulesUrl) &&
        Objects.equals(this.hoursOfOperation, administrativeBody.hoursOfOperation) &&
        Objects.equals(this.name, administrativeBody.name) &&
        Objects.equals(this.physicalAddress, administrativeBody.physicalAddress) &&
        Objects.equals(this.voterServices, administrativeBody.voterServices) &&
        Objects.equals(this.votingLocationFinderUrl, administrativeBody.votingLocationFinderUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absenteeVotingInfoUrl, ballotInfoUrl, correspondenceAddress, electionInfoUrl, electionNoticeText, electionNoticeUrl, electionOfficials, electionRegistrationConfirmationUrl, electionRegistrationUrl, electionRulesUrl, hoursOfOperation, name, physicalAddress, voterServices, votingLocationFinderUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdministrativeBody {\n");
    sb.append("    absenteeVotingInfoUrl: ").append(toIndentedString(absenteeVotingInfoUrl)).append("\n");
    sb.append("    ballotInfoUrl: ").append(toIndentedString(ballotInfoUrl)).append("\n");
    sb.append("    correspondenceAddress: ").append(toIndentedString(correspondenceAddress)).append("\n");
    sb.append("    electionInfoUrl: ").append(toIndentedString(electionInfoUrl)).append("\n");
    sb.append("    electionNoticeText: ").append(toIndentedString(electionNoticeText)).append("\n");
    sb.append("    electionNoticeUrl: ").append(toIndentedString(electionNoticeUrl)).append("\n");
    sb.append("    electionOfficials: ").append(toIndentedString(electionOfficials)).append("\n");
    sb.append("    electionRegistrationConfirmationUrl: ").append(toIndentedString(electionRegistrationConfirmationUrl)).append("\n");
    sb.append("    electionRegistrationUrl: ").append(toIndentedString(electionRegistrationUrl)).append("\n");
    sb.append("    electionRulesUrl: ").append(toIndentedString(electionRulesUrl)).append("\n");
    sb.append("    hoursOfOperation: ").append(toIndentedString(hoursOfOperation)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    physicalAddress: ").append(toIndentedString(physicalAddress)).append("\n");
    sb.append("    voterServices: ").append(toIndentedString(voterServices)).append("\n");
    sb.append("    votingLocationFinderUrl: ").append(toIndentedString(votingLocationFinderUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("absenteeVotingInfoUrl");
    openapiFields.add("ballotInfoUrl");
    openapiFields.add("correspondenceAddress");
    openapiFields.add("electionInfoUrl");
    openapiFields.add("electionNoticeText");
    openapiFields.add("electionNoticeUrl");
    openapiFields.add("electionOfficials");
    openapiFields.add("electionRegistrationConfirmationUrl");
    openapiFields.add("electionRegistrationUrl");
    openapiFields.add("electionRulesUrl");
    openapiFields.add("hoursOfOperation");
    openapiFields.add("name");
    openapiFields.add("physicalAddress");
    openapiFields.add("voter_services");
    openapiFields.add("votingLocationFinderUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdministrativeBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdministrativeBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdministrativeBody is not found in the empty JSON string", AdministrativeBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdministrativeBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdministrativeBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("absenteeVotingInfoUrl") != null && !jsonObj.get("absenteeVotingInfoUrl").isJsonNull()) && !jsonObj.get("absenteeVotingInfoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `absenteeVotingInfoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("absenteeVotingInfoUrl").toString()));
      }
      if ((jsonObj.get("ballotInfoUrl") != null && !jsonObj.get("ballotInfoUrl").isJsonNull()) && !jsonObj.get("ballotInfoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ballotInfoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ballotInfoUrl").toString()));
      }
      // validate the optional field `correspondenceAddress`
      if (jsonObj.get("correspondenceAddress") != null && !jsonObj.get("correspondenceAddress").isJsonNull()) {
        SimpleAddressType.validateJsonElement(jsonObj.get("correspondenceAddress"));
      }
      if ((jsonObj.get("electionInfoUrl") != null && !jsonObj.get("electionInfoUrl").isJsonNull()) && !jsonObj.get("electionInfoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electionInfoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electionInfoUrl").toString()));
      }
      if ((jsonObj.get("electionNoticeText") != null && !jsonObj.get("electionNoticeText").isJsonNull()) && !jsonObj.get("electionNoticeText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electionNoticeText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electionNoticeText").toString()));
      }
      if ((jsonObj.get("electionNoticeUrl") != null && !jsonObj.get("electionNoticeUrl").isJsonNull()) && !jsonObj.get("electionNoticeUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electionNoticeUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electionNoticeUrl").toString()));
      }
      if (jsonObj.get("electionOfficials") != null && !jsonObj.get("electionOfficials").isJsonNull()) {
        JsonArray jsonArrayelectionOfficials = jsonObj.getAsJsonArray("electionOfficials");
        if (jsonArrayelectionOfficials != null) {
          // ensure the json data is an array
          if (!jsonObj.get("electionOfficials").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `electionOfficials` to be an array in the JSON string but got `%s`", jsonObj.get("electionOfficials").toString()));
          }

          // validate the optional field `electionOfficials` (array)
          for (int i = 0; i < jsonArrayelectionOfficials.size(); i++) {
            ElectionOfficial.validateJsonElement(jsonArrayelectionOfficials.get(i));
          };
        }
      }
      if ((jsonObj.get("electionRegistrationConfirmationUrl") != null && !jsonObj.get("electionRegistrationConfirmationUrl").isJsonNull()) && !jsonObj.get("electionRegistrationConfirmationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electionRegistrationConfirmationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electionRegistrationConfirmationUrl").toString()));
      }
      if ((jsonObj.get("electionRegistrationUrl") != null && !jsonObj.get("electionRegistrationUrl").isJsonNull()) && !jsonObj.get("electionRegistrationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electionRegistrationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electionRegistrationUrl").toString()));
      }
      if ((jsonObj.get("electionRulesUrl") != null && !jsonObj.get("electionRulesUrl").isJsonNull()) && !jsonObj.get("electionRulesUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electionRulesUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electionRulesUrl").toString()));
      }
      if ((jsonObj.get("hoursOfOperation") != null && !jsonObj.get("hoursOfOperation").isJsonNull()) && !jsonObj.get("hoursOfOperation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hoursOfOperation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hoursOfOperation").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `physicalAddress`
      if (jsonObj.get("physicalAddress") != null && !jsonObj.get("physicalAddress").isJsonNull()) {
        SimpleAddressType.validateJsonElement(jsonObj.get("physicalAddress"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("voter_services") != null && !jsonObj.get("voter_services").isJsonNull() && !jsonObj.get("voter_services").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `voter_services` to be an array in the JSON string but got `%s`", jsonObj.get("voter_services").toString()));
      }
      if ((jsonObj.get("votingLocationFinderUrl") != null && !jsonObj.get("votingLocationFinderUrl").isJsonNull()) && !jsonObj.get("votingLocationFinderUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `votingLocationFinderUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("votingLocationFinderUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdministrativeBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdministrativeBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdministrativeBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdministrativeBody.class));

       return (TypeAdapter<T>) new TypeAdapter<AdministrativeBody>() {
           @Override
           public void write(JsonWriter out, AdministrativeBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdministrativeBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdministrativeBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdministrativeBody
   * @throws IOException if the JSON string is invalid with respect to AdministrativeBody
   */
  public static AdministrativeBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdministrativeBody.class);
  }

  /**
   * Convert an instance of AdministrativeBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

