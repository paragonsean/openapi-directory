/*
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GeographicDivision;
import org.openapitools.client.model.Office;
import org.openapitools.client.model.Official;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RepresentativeInfoData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:56.745680-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RepresentativeInfoData {
  public static final String SERIALIZED_NAME_DIVISIONS = "divisions";
  @SerializedName(SERIALIZED_NAME_DIVISIONS)
  private Map<String, GeographicDivision> divisions = new HashMap<>();

  public static final String SERIALIZED_NAME_OFFICES = "offices";
  @SerializedName(SERIALIZED_NAME_OFFICES)
  private List<Office> offices = new ArrayList<>();

  public static final String SERIALIZED_NAME_OFFICIALS = "officials";
  @SerializedName(SERIALIZED_NAME_OFFICIALS)
  private List<Official> officials = new ArrayList<>();

  public RepresentativeInfoData() {
  }

  public RepresentativeInfoData divisions(Map<String, GeographicDivision> divisions) {
    this.divisions = divisions;
    return this;
  }

  public RepresentativeInfoData putDivisionsItem(String key, GeographicDivision divisionsItem) {
    if (this.divisions == null) {
      this.divisions = new HashMap<>();
    }
    this.divisions.put(key, divisionsItem);
    return this;
  }

  /**
   * A map of political geographic divisions that contain the requested address, keyed by the unique Open Civic Data identifier for this division.
   * @return divisions
   */
  @javax.annotation.Nullable
  public Map<String, GeographicDivision> getDivisions() {
    return divisions;
  }

  public void setDivisions(Map<String, GeographicDivision> divisions) {
    this.divisions = divisions;
  }


  public RepresentativeInfoData offices(List<Office> offices) {
    this.offices = offices;
    return this;
  }

  public RepresentativeInfoData addOfficesItem(Office officesItem) {
    if (this.offices == null) {
      this.offices = new ArrayList<>();
    }
    this.offices.add(officesItem);
    return this;
  }

  /**
   * Elected offices referenced by the divisions listed above. Will only be present if includeOffices was true in the request.
   * @return offices
   */
  @javax.annotation.Nullable
  public List<Office> getOffices() {
    return offices;
  }

  public void setOffices(List<Office> offices) {
    this.offices = offices;
  }


  public RepresentativeInfoData officials(List<Official> officials) {
    this.officials = officials;
    return this;
  }

  public RepresentativeInfoData addOfficialsItem(Official officialsItem) {
    if (this.officials == null) {
      this.officials = new ArrayList<>();
    }
    this.officials.add(officialsItem);
    return this;
  }

  /**
   * Officials holding the offices listed above. Will only be present if includeOffices was true in the request.
   * @return officials
   */
  @javax.annotation.Nullable
  public List<Official> getOfficials() {
    return officials;
  }

  public void setOfficials(List<Official> officials) {
    this.officials = officials;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepresentativeInfoData representativeInfoData = (RepresentativeInfoData) o;
    return Objects.equals(this.divisions, representativeInfoData.divisions) &&
        Objects.equals(this.offices, representativeInfoData.offices) &&
        Objects.equals(this.officials, representativeInfoData.officials);
  }

  @Override
  public int hashCode() {
    return Objects.hash(divisions, offices, officials);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepresentativeInfoData {\n");
    sb.append("    divisions: ").append(toIndentedString(divisions)).append("\n");
    sb.append("    offices: ").append(toIndentedString(offices)).append("\n");
    sb.append("    officials: ").append(toIndentedString(officials)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("divisions");
    openapiFields.add("offices");
    openapiFields.add("officials");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RepresentativeInfoData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepresentativeInfoData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepresentativeInfoData is not found in the empty JSON string", RepresentativeInfoData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RepresentativeInfoData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepresentativeInfoData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("offices") != null && !jsonObj.get("offices").isJsonNull()) {
        JsonArray jsonArrayoffices = jsonObj.getAsJsonArray("offices");
        if (jsonArrayoffices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("offices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `offices` to be an array in the JSON string but got `%s`", jsonObj.get("offices").toString()));
          }

          // validate the optional field `offices` (array)
          for (int i = 0; i < jsonArrayoffices.size(); i++) {
            Office.validateJsonElement(jsonArrayoffices.get(i));
          };
        }
      }
      if (jsonObj.get("officials") != null && !jsonObj.get("officials").isJsonNull()) {
        JsonArray jsonArrayofficials = jsonObj.getAsJsonArray("officials");
        if (jsonArrayofficials != null) {
          // ensure the json data is an array
          if (!jsonObj.get("officials").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `officials` to be an array in the JSON string but got `%s`", jsonObj.get("officials").toString()));
          }

          // validate the optional field `officials` (array)
          for (int i = 0; i < jsonArrayofficials.size(); i++) {
            Official.validateJsonElement(jsonArrayofficials.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepresentativeInfoData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepresentativeInfoData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepresentativeInfoData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepresentativeInfoData.class));

       return (TypeAdapter<T>) new TypeAdapter<RepresentativeInfoData>() {
           @Override
           public void write(JsonWriter out, RepresentativeInfoData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepresentativeInfoData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RepresentativeInfoData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepresentativeInfoData
   * @throws IOException if the JSON string is invalid with respect to RepresentativeInfoData
   */
  public static RepresentativeInfoData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepresentativeInfoData.class);
  }

  /**
   * Convert an instance of RepresentativeInfoData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

