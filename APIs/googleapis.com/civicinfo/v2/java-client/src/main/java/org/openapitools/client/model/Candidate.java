/*
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Channel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a candidate running for elected office.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:56.745680-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Candidate {
  public static final String SERIALIZED_NAME_CANDIDATE_URL = "candidateUrl";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_URL)
  private String candidateUrl;

  public static final String SERIALIZED_NAME_CHANNELS = "channels";
  @SerializedName(SERIALIZED_NAME_CHANNELS)
  private List<Channel> channels = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORDER_ON_BALLOT = "orderOnBallot";
  @SerializedName(SERIALIZED_NAME_ORDER_ON_BALLOT)
  private String orderOnBallot;

  public static final String SERIALIZED_NAME_PARTY = "party";
  @SerializedName(SERIALIZED_NAME_PARTY)
  private String party;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_PHOTO_URL = "photoUrl";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private String photoUrl;

  public Candidate() {
  }

  public Candidate candidateUrl(String candidateUrl) {
    this.candidateUrl = candidateUrl;
    return this;
  }

  /**
   * The URL for the candidate&#39;s campaign web site.
   * @return candidateUrl
   */
  @javax.annotation.Nullable
  public String getCandidateUrl() {
    return candidateUrl;
  }

  public void setCandidateUrl(String candidateUrl) {
    this.candidateUrl = candidateUrl;
  }


  public Candidate channels(List<Channel> channels) {
    this.channels = channels;
    return this;
  }

  public Candidate addChannelsItem(Channel channelsItem) {
    if (this.channels == null) {
      this.channels = new ArrayList<>();
    }
    this.channels.add(channelsItem);
    return this;
  }

  /**
   * A list of known (social) media channels for this candidate.
   * @return channels
   */
  @javax.annotation.Nullable
  public List<Channel> getChannels() {
    return channels;
  }

  public void setChannels(List<Channel> channels) {
    this.channels = channels;
  }


  public Candidate email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address for the candidate&#39;s campaign.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Candidate name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The candidate&#39;s name. If this is a joint ticket it will indicate the name of the candidate at the top of a ticket followed by a / and that name of candidate at the bottom of the ticket. e.g. \&quot;Mitt Romney / Paul Ryan\&quot;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Candidate orderOnBallot(String orderOnBallot) {
    this.orderOnBallot = orderOnBallot;
    return this;
  }

  /**
   * The order the candidate appears on the ballot for this contest.
   * @return orderOnBallot
   */
  @javax.annotation.Nullable
  public String getOrderOnBallot() {
    return orderOnBallot;
  }

  public void setOrderOnBallot(String orderOnBallot) {
    this.orderOnBallot = orderOnBallot;
  }


  public Candidate party(String party) {
    this.party = party;
    return this;
  }

  /**
   * The full name of the party the candidate is a member of.
   * @return party
   */
  @javax.annotation.Nullable
  public String getParty() {
    return party;
  }

  public void setParty(String party) {
    this.party = party;
  }


  public Candidate phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * The voice phone number for the candidate&#39;s campaign office.
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public Candidate photoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * A URL for a photo of the candidate.
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public String getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Candidate candidate = (Candidate) o;
    return Objects.equals(this.candidateUrl, candidate.candidateUrl) &&
        Objects.equals(this.channels, candidate.channels) &&
        Objects.equals(this.email, candidate.email) &&
        Objects.equals(this.name, candidate.name) &&
        Objects.equals(this.orderOnBallot, candidate.orderOnBallot) &&
        Objects.equals(this.party, candidate.party) &&
        Objects.equals(this.phone, candidate.phone) &&
        Objects.equals(this.photoUrl, candidate.photoUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(candidateUrl, channels, email, name, orderOnBallot, party, phone, photoUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Candidate {\n");
    sb.append("    candidateUrl: ").append(toIndentedString(candidateUrl)).append("\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orderOnBallot: ").append(toIndentedString(orderOnBallot)).append("\n");
    sb.append("    party: ").append(toIndentedString(party)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("candidateUrl");
    openapiFields.add("channels");
    openapiFields.add("email");
    openapiFields.add("name");
    openapiFields.add("orderOnBallot");
    openapiFields.add("party");
    openapiFields.add("phone");
    openapiFields.add("photoUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Candidate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Candidate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Candidate is not found in the empty JSON string", Candidate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Candidate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Candidate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("candidateUrl") != null && !jsonObj.get("candidateUrl").isJsonNull()) && !jsonObj.get("candidateUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `candidateUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("candidateUrl").toString()));
      }
      if (jsonObj.get("channels") != null && !jsonObj.get("channels").isJsonNull()) {
        JsonArray jsonArraychannels = jsonObj.getAsJsonArray("channels");
        if (jsonArraychannels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("channels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `channels` to be an array in the JSON string but got `%s`", jsonObj.get("channels").toString()));
          }

          // validate the optional field `channels` (array)
          for (int i = 0; i < jsonArraychannels.size(); i++) {
            Channel.validateJsonElement(jsonArraychannels.get(i));
          };
        }
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("orderOnBallot") != null && !jsonObj.get("orderOnBallot").isJsonNull()) && !jsonObj.get("orderOnBallot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderOnBallot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderOnBallot").toString()));
      }
      if ((jsonObj.get("party") != null && !jsonObj.get("party").isJsonNull()) && !jsonObj.get("party").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("photoUrl") != null && !jsonObj.get("photoUrl").isJsonNull()) && !jsonObj.get("photoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `photoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("photoUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Candidate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Candidate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Candidate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Candidate.class));

       return (TypeAdapter<T>) new TypeAdapter<Candidate>() {
           @Override
           public void write(JsonWriter out, Candidate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Candidate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Candidate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Candidate
   * @throws IOException if the JSON string is invalid with respect to Candidate
   */
  public static Candidate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Candidate.class);
  }

  /**
   * Convert an instance of Candidate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

