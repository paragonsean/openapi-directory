/*
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Precinct
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:56.745680-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Precinct {
  public static final String SERIALIZED_NAME_ADMINISTRATION_REGION_ID = "administrationRegionId";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATION_REGION_ID)
  private String administrationRegionId;

  public static final String SERIALIZED_NAME_CONTEST_ID = "contestId";
  @SerializedName(SERIALIZED_NAME_CONTEST_ID)
  private List<String> contestId = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATASET_ID = "datasetId";
  @SerializedName(SERIALIZED_NAME_DATASET_ID)
  private String datasetId;

  public static final String SERIALIZED_NAME_EARLY_VOTE_SITE_ID = "earlyVoteSiteId";
  @SerializedName(SERIALIZED_NAME_EARLY_VOTE_SITE_ID)
  private List<String> earlyVoteSiteId = new ArrayList<>();

  public static final String SERIALIZED_NAME_ELECTORAL_DISTRICT_ID = "electoralDistrictId";
  @SerializedName(SERIALIZED_NAME_ELECTORAL_DISTRICT_ID)
  private List<String> electoralDistrictId = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MAIL_ONLY = "mailOnly";
  @SerializedName(SERIALIZED_NAME_MAIL_ONLY)
  private Boolean mailOnly;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_OCD_ID = "ocdId";
  @SerializedName(SERIALIZED_NAME_OCD_ID)
  private List<String> ocdId = new ArrayList<>();

  public static final String SERIALIZED_NAME_POLLING_LOCATION_ID = "pollingLocationId";
  @SerializedName(SERIALIZED_NAME_POLLING_LOCATION_ID)
  private List<String> pollingLocationId = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPATIAL_BOUNDARY_ID = "spatialBoundaryId";
  @SerializedName(SERIALIZED_NAME_SPATIAL_BOUNDARY_ID)
  private List<String> spatialBoundaryId = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPLIT_NAME = "splitName";
  @SerializedName(SERIALIZED_NAME_SPLIT_NAME)
  private String splitName;

  public static final String SERIALIZED_NAME_WARD = "ward";
  @SerializedName(SERIALIZED_NAME_WARD)
  private String ward;

  public Precinct() {
  }

  public Precinct administrationRegionId(String administrationRegionId) {
    this.administrationRegionId = administrationRegionId;
    return this;
  }

  /**
   * ID of the AdministrationRegion message for this precinct. Corresponds to LocalityId xml tag.
   * @return administrationRegionId
   */
  @javax.annotation.Nullable
  public String getAdministrationRegionId() {
    return administrationRegionId;
  }

  public void setAdministrationRegionId(String administrationRegionId) {
    this.administrationRegionId = administrationRegionId;
  }


  public Precinct contestId(List<String> contestId) {
    this.contestId = contestId;
    return this;
  }

  public Precinct addContestIdItem(String contestIdItem) {
    if (this.contestId == null) {
      this.contestId = new ArrayList<>();
    }
    this.contestId.add(contestIdItem);
    return this;
  }

  /**
   * ID(s) of the Contest message(s) for this precinct.
   * @return contestId
   */
  @javax.annotation.Nullable
  public List<String> getContestId() {
    return contestId;
  }

  public void setContestId(List<String> contestId) {
    this.contestId = contestId;
  }


  public Precinct datasetId(String datasetId) {
    this.datasetId = datasetId;
    return this;
  }

  /**
   * Required. Dataset ID. What datasets our Precincts come from.
   * @return datasetId
   */
  @javax.annotation.Nullable
  public String getDatasetId() {
    return datasetId;
  }

  public void setDatasetId(String datasetId) {
    this.datasetId = datasetId;
  }


  public Precinct earlyVoteSiteId(List<String> earlyVoteSiteId) {
    this.earlyVoteSiteId = earlyVoteSiteId;
    return this;
  }

  public Precinct addEarlyVoteSiteIdItem(String earlyVoteSiteIdItem) {
    if (this.earlyVoteSiteId == null) {
      this.earlyVoteSiteId = new ArrayList<>();
    }
    this.earlyVoteSiteId.add(earlyVoteSiteIdItem);
    return this;
  }

  /**
   * ID(s) of the PollingLocation message(s) for this precinct.
   * @return earlyVoteSiteId
   */
  @javax.annotation.Nullable
  public List<String> getEarlyVoteSiteId() {
    return earlyVoteSiteId;
  }

  public void setEarlyVoteSiteId(List<String> earlyVoteSiteId) {
    this.earlyVoteSiteId = earlyVoteSiteId;
  }


  public Precinct electoralDistrictId(List<String> electoralDistrictId) {
    this.electoralDistrictId = electoralDistrictId;
    return this;
  }

  public Precinct addElectoralDistrictIdItem(String electoralDistrictIdItem) {
    if (this.electoralDistrictId == null) {
      this.electoralDistrictId = new ArrayList<>();
    }
    this.electoralDistrictId.add(electoralDistrictIdItem);
    return this;
  }

  /**
   * ID(s) of the ElectoralDistrict message(s) for this precinct.
   * @return electoralDistrictId
   */
  @javax.annotation.Nullable
  public List<String> getElectoralDistrictId() {
    return electoralDistrictId;
  }

  public void setElectoralDistrictId(List<String> electoralDistrictId) {
    this.electoralDistrictId = electoralDistrictId;
  }


  public Precinct id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required. A unique identifier for this precinct.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Precinct mailOnly(Boolean mailOnly) {
    this.mailOnly = mailOnly;
    return this;
  }

  /**
   * Specifies if the precinct runs mail-only elections.
   * @return mailOnly
   */
  @javax.annotation.Nullable
  public Boolean getMailOnly() {
    return mailOnly;
  }

  public void setMailOnly(Boolean mailOnly) {
    this.mailOnly = mailOnly;
  }


  public Precinct name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The name of the precinct.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Precinct number(String number) {
    this.number = number;
    return this;
  }

  /**
   * The number of the precinct.
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public Precinct ocdId(List<String> ocdId) {
    this.ocdId = ocdId;
    return this;
  }

  public Precinct addOcdIdItem(String ocdIdItem) {
    if (this.ocdId == null) {
      this.ocdId = new ArrayList<>();
    }
    this.ocdId.add(ocdIdItem);
    return this;
  }

  /**
   * Encouraged. The OCD ID of the precinct
   * @return ocdId
   */
  @javax.annotation.Nullable
  public List<String> getOcdId() {
    return ocdId;
  }

  public void setOcdId(List<String> ocdId) {
    this.ocdId = ocdId;
  }


  public Precinct pollingLocationId(List<String> pollingLocationId) {
    this.pollingLocationId = pollingLocationId;
    return this;
  }

  public Precinct addPollingLocationIdItem(String pollingLocationIdItem) {
    if (this.pollingLocationId == null) {
      this.pollingLocationId = new ArrayList<>();
    }
    this.pollingLocationId.add(pollingLocationIdItem);
    return this;
  }

  /**
   * ID(s) of the PollingLocation message(s) for this precinct.
   * @return pollingLocationId
   */
  @javax.annotation.Nullable
  public List<String> getPollingLocationId() {
    return pollingLocationId;
  }

  public void setPollingLocationId(List<String> pollingLocationId) {
    this.pollingLocationId = pollingLocationId;
  }


  public Precinct spatialBoundaryId(List<String> spatialBoundaryId) {
    this.spatialBoundaryId = spatialBoundaryId;
    return this;
  }

  public Precinct addSpatialBoundaryIdItem(String spatialBoundaryIdItem) {
    if (this.spatialBoundaryId == null) {
      this.spatialBoundaryId = new ArrayList<>();
    }
    this.spatialBoundaryId.add(spatialBoundaryIdItem);
    return this;
  }

  /**
   * ID(s) of the SpatialBoundary message(s) for this precinct. Used to specify a geometrical boundary of the precinct.
   * @return spatialBoundaryId
   */
  @javax.annotation.Nullable
  public List<String> getSpatialBoundaryId() {
    return spatialBoundaryId;
  }

  public void setSpatialBoundaryId(List<String> spatialBoundaryId) {
    this.spatialBoundaryId = spatialBoundaryId;
  }


  public Precinct splitName(String splitName) {
    this.splitName = splitName;
    return this;
  }

  /**
   * If present, this proto corresponds to one portion of split precinct. Other portions of this precinct are guaranteed to have the same &#x60;name&#x60;. If not present, this proto represents a full precicnt.
   * @return splitName
   */
  @javax.annotation.Nullable
  public String getSplitName() {
    return splitName;
  }

  public void setSplitName(String splitName) {
    this.splitName = splitName;
  }


  public Precinct ward(String ward) {
    this.ward = ward;
    return this;
  }

  /**
   * Specifies the ward the precinct is contained within.
   * @return ward
   */
  @javax.annotation.Nullable
  public String getWard() {
    return ward;
  }

  public void setWard(String ward) {
    this.ward = ward;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Precinct precinct = (Precinct) o;
    return Objects.equals(this.administrationRegionId, precinct.administrationRegionId) &&
        Objects.equals(this.contestId, precinct.contestId) &&
        Objects.equals(this.datasetId, precinct.datasetId) &&
        Objects.equals(this.earlyVoteSiteId, precinct.earlyVoteSiteId) &&
        Objects.equals(this.electoralDistrictId, precinct.electoralDistrictId) &&
        Objects.equals(this.id, precinct.id) &&
        Objects.equals(this.mailOnly, precinct.mailOnly) &&
        Objects.equals(this.name, precinct.name) &&
        Objects.equals(this.number, precinct.number) &&
        Objects.equals(this.ocdId, precinct.ocdId) &&
        Objects.equals(this.pollingLocationId, precinct.pollingLocationId) &&
        Objects.equals(this.spatialBoundaryId, precinct.spatialBoundaryId) &&
        Objects.equals(this.splitName, precinct.splitName) &&
        Objects.equals(this.ward, precinct.ward);
  }

  @Override
  public int hashCode() {
    return Objects.hash(administrationRegionId, contestId, datasetId, earlyVoteSiteId, electoralDistrictId, id, mailOnly, name, number, ocdId, pollingLocationId, spatialBoundaryId, splitName, ward);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Precinct {\n");
    sb.append("    administrationRegionId: ").append(toIndentedString(administrationRegionId)).append("\n");
    sb.append("    contestId: ").append(toIndentedString(contestId)).append("\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    earlyVoteSiteId: ").append(toIndentedString(earlyVoteSiteId)).append("\n");
    sb.append("    electoralDistrictId: ").append(toIndentedString(electoralDistrictId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mailOnly: ").append(toIndentedString(mailOnly)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    ocdId: ").append(toIndentedString(ocdId)).append("\n");
    sb.append("    pollingLocationId: ").append(toIndentedString(pollingLocationId)).append("\n");
    sb.append("    spatialBoundaryId: ").append(toIndentedString(spatialBoundaryId)).append("\n");
    sb.append("    splitName: ").append(toIndentedString(splitName)).append("\n");
    sb.append("    ward: ").append(toIndentedString(ward)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("administrationRegionId");
    openapiFields.add("contestId");
    openapiFields.add("datasetId");
    openapiFields.add("earlyVoteSiteId");
    openapiFields.add("electoralDistrictId");
    openapiFields.add("id");
    openapiFields.add("mailOnly");
    openapiFields.add("name");
    openapiFields.add("number");
    openapiFields.add("ocdId");
    openapiFields.add("pollingLocationId");
    openapiFields.add("spatialBoundaryId");
    openapiFields.add("splitName");
    openapiFields.add("ward");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Precinct
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Precinct.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Precinct is not found in the empty JSON string", Precinct.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Precinct.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Precinct` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("administrationRegionId") != null && !jsonObj.get("administrationRegionId").isJsonNull()) && !jsonObj.get("administrationRegionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `administrationRegionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("administrationRegionId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contestId") != null && !jsonObj.get("contestId").isJsonNull() && !jsonObj.get("contestId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contestId` to be an array in the JSON string but got `%s`", jsonObj.get("contestId").toString()));
      }
      if ((jsonObj.get("datasetId") != null && !jsonObj.get("datasetId").isJsonNull()) && !jsonObj.get("datasetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasetId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("earlyVoteSiteId") != null && !jsonObj.get("earlyVoteSiteId").isJsonNull() && !jsonObj.get("earlyVoteSiteId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `earlyVoteSiteId` to be an array in the JSON string but got `%s`", jsonObj.get("earlyVoteSiteId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("electoralDistrictId") != null && !jsonObj.get("electoralDistrictId").isJsonNull() && !jsonObj.get("electoralDistrictId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `electoralDistrictId` to be an array in the JSON string but got `%s`", jsonObj.get("electoralDistrictId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ocdId") != null && !jsonObj.get("ocdId").isJsonNull() && !jsonObj.get("ocdId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ocdId` to be an array in the JSON string but got `%s`", jsonObj.get("ocdId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pollingLocationId") != null && !jsonObj.get("pollingLocationId").isJsonNull() && !jsonObj.get("pollingLocationId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pollingLocationId` to be an array in the JSON string but got `%s`", jsonObj.get("pollingLocationId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("spatialBoundaryId") != null && !jsonObj.get("spatialBoundaryId").isJsonNull() && !jsonObj.get("spatialBoundaryId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `spatialBoundaryId` to be an array in the JSON string but got `%s`", jsonObj.get("spatialBoundaryId").toString()));
      }
      if ((jsonObj.get("splitName") != null && !jsonObj.get("splitName").isJsonNull()) && !jsonObj.get("splitName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `splitName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("splitName").toString()));
      }
      if ((jsonObj.get("ward") != null && !jsonObj.get("ward").isJsonNull()) && !jsonObj.get("ward").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ward` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ward").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Precinct.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Precinct' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Precinct> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Precinct.class));

       return (TypeAdapter<T>) new TypeAdapter<Precinct>() {
           @Override
           public void write(JsonWriter out, Precinct value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Precinct read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Precinct given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Precinct
   * @throws IOException if the JSON string is invalid with respect to Precinct
   */
  public static Precinct fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Precinct.class);
  }

  /**
   * Convert an instance of Precinct to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

