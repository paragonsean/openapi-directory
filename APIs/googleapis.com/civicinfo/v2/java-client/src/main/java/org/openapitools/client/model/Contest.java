/*
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Candidate;
import org.openapitools.client.model.ElectoralDistrict;
import org.openapitools.client.model.Source;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a contest that appears on a voter&#39;s ballot.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:56.745680-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Contest {
  public static final String SERIALIZED_NAME_BALLOT_PLACEMENT = "ballotPlacement";
  @SerializedName(SERIALIZED_NAME_BALLOT_PLACEMENT)
  private String ballotPlacement;

  public static final String SERIALIZED_NAME_BALLOT_TITLE = "ballotTitle";
  @SerializedName(SERIALIZED_NAME_BALLOT_TITLE)
  private String ballotTitle;

  public static final String SERIALIZED_NAME_CANDIDATES = "candidates";
  @SerializedName(SERIALIZED_NAME_CANDIDATES)
  private List<Candidate> candidates = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISTRICT = "district";
  @SerializedName(SERIALIZED_NAME_DISTRICT)
  private ElectoralDistrict district;

  public static final String SERIALIZED_NAME_ELECTORATE_SPECIFICATIONS = "electorateSpecifications";
  @SerializedName(SERIALIZED_NAME_ELECTORATE_SPECIFICATIONS)
  private String electorateSpecifications;

  /**
   * Gets or Sets level
   */
  @JsonAdapter(LevelEnum.Adapter.class)
  public enum LevelEnum {
    INTERNATIONAL("international"),
    
    COUNTRY("country"),
    
    ADMINISTRATIVE_AREA1("administrativeArea1"),
    
    REGIONAL("regional"),
    
    ADMINISTRATIVE_AREA2("administrativeArea2"),
    
    LOCALITY("locality"),
    
    SUB_LOCALITY1("subLocality1"),
    
    SUB_LOCALITY2("subLocality2"),
    
    SPECIAL("special");

    private String value;

    LevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LevelEnum fromValue(String value) {
      for (LevelEnum b : LevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private List<LevelEnum> level = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER_ELECTED = "numberElected";
  @SerializedName(SERIALIZED_NAME_NUMBER_ELECTED)
  private String numberElected;

  public static final String SERIALIZED_NAME_NUMBER_VOTING_FOR = "numberVotingFor";
  @SerializedName(SERIALIZED_NAME_NUMBER_VOTING_FOR)
  private String numberVotingFor;

  public static final String SERIALIZED_NAME_OFFICE = "office";
  @SerializedName(SERIALIZED_NAME_OFFICE)
  private String office;

  public static final String SERIALIZED_NAME_PRIMARY_PARTIES = "primaryParties";
  @SerializedName(SERIALIZED_NAME_PRIMARY_PARTIES)
  private List<String> primaryParties = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFERENDUM_BALLOT_RESPONSES = "referendumBallotResponses";
  @SerializedName(SERIALIZED_NAME_REFERENDUM_BALLOT_RESPONSES)
  private List<String> referendumBallotResponses = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFERENDUM_BRIEF = "referendumBrief";
  @SerializedName(SERIALIZED_NAME_REFERENDUM_BRIEF)
  private String referendumBrief;

  public static final String SERIALIZED_NAME_REFERENDUM_CON_STATEMENT = "referendumConStatement";
  @SerializedName(SERIALIZED_NAME_REFERENDUM_CON_STATEMENT)
  private String referendumConStatement;

  public static final String SERIALIZED_NAME_REFERENDUM_EFFECT_OF_ABSTAIN = "referendumEffectOfAbstain";
  @SerializedName(SERIALIZED_NAME_REFERENDUM_EFFECT_OF_ABSTAIN)
  private String referendumEffectOfAbstain;

  public static final String SERIALIZED_NAME_REFERENDUM_PASSAGE_THRESHOLD = "referendumPassageThreshold";
  @SerializedName(SERIALIZED_NAME_REFERENDUM_PASSAGE_THRESHOLD)
  private String referendumPassageThreshold;

  public static final String SERIALIZED_NAME_REFERENDUM_PRO_STATEMENT = "referendumProStatement";
  @SerializedName(SERIALIZED_NAME_REFERENDUM_PRO_STATEMENT)
  private String referendumProStatement;

  public static final String SERIALIZED_NAME_REFERENDUM_SUBTITLE = "referendumSubtitle";
  @SerializedName(SERIALIZED_NAME_REFERENDUM_SUBTITLE)
  private String referendumSubtitle;

  public static final String SERIALIZED_NAME_REFERENDUM_TEXT = "referendumText";
  @SerializedName(SERIALIZED_NAME_REFERENDUM_TEXT)
  private String referendumText;

  public static final String SERIALIZED_NAME_REFERENDUM_TITLE = "referendumTitle";
  @SerializedName(SERIALIZED_NAME_REFERENDUM_TITLE)
  private String referendumTitle;

  public static final String SERIALIZED_NAME_REFERENDUM_URL = "referendumUrl";
  @SerializedName(SERIALIZED_NAME_REFERENDUM_URL)
  private String referendumUrl;

  /**
   * Gets or Sets roles
   */
  @JsonAdapter(RolesEnum.Adapter.class)
  public enum RolesEnum {
    HEAD_OF_STATE("headOfState"),
    
    HEAD_OF_GOVERNMENT("headOfGovernment"),
    
    DEPUTY_HEAD_OF_GOVERNMENT("deputyHeadOfGovernment"),
    
    GOVERNMENT_OFFICER("governmentOfficer"),
    
    EXECUTIVE_COUNCIL("executiveCouncil"),
    
    LEGISLATOR_UPPER_BODY("legislatorUpperBody"),
    
    LEGISLATOR_LOWER_BODY("legislatorLowerBody"),
    
    HIGHEST_COURT_JUDGE("highestCourtJudge"),
    
    JUDGE("judge"),
    
    SCHOOL_BOARD("schoolBoard"),
    
    SPECIAL_PURPOSE_OFFICER("specialPurposeOfficer"),
    
    OTHER_ROLE("otherRole");

    private String value;

    RolesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RolesEnum fromValue(String value) {
      for (RolesEnum b : RolesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RolesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RolesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RolesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RolesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RolesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<RolesEnum> roles = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<Source> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPECIAL = "special";
  @SerializedName(SERIALIZED_NAME_SPECIAL)
  private String special;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Contest() {
  }

  public Contest ballotPlacement(String ballotPlacement) {
    this.ballotPlacement = ballotPlacement;
    return this;
  }

  /**
   * A number specifying the position of this contest on the voter&#39;s ballot.
   * @return ballotPlacement
   */
  @javax.annotation.Nullable
  public String getBallotPlacement() {
    return ballotPlacement;
  }

  public void setBallotPlacement(String ballotPlacement) {
    this.ballotPlacement = ballotPlacement;
  }


  public Contest ballotTitle(String ballotTitle) {
    this.ballotTitle = ballotTitle;
    return this;
  }

  /**
   * The official title on the ballot for this contest, only where available.
   * @return ballotTitle
   */
  @javax.annotation.Nullable
  public String getBallotTitle() {
    return ballotTitle;
  }

  public void setBallotTitle(String ballotTitle) {
    this.ballotTitle = ballotTitle;
  }


  public Contest candidates(List<Candidate> candidates) {
    this.candidates = candidates;
    return this;
  }

  public Contest addCandidatesItem(Candidate candidatesItem) {
    if (this.candidates == null) {
      this.candidates = new ArrayList<>();
    }
    this.candidates.add(candidatesItem);
    return this;
  }

  /**
   * The candidate choices for this contest.
   * @return candidates
   */
  @javax.annotation.Nullable
  public List<Candidate> getCandidates() {
    return candidates;
  }

  public void setCandidates(List<Candidate> candidates) {
    this.candidates = candidates;
  }


  public Contest district(ElectoralDistrict district) {
    this.district = district;
    return this;
  }

  /**
   * Get district
   * @return district
   */
  @javax.annotation.Nullable
  public ElectoralDistrict getDistrict() {
    return district;
  }

  public void setDistrict(ElectoralDistrict district) {
    this.district = district;
  }


  public Contest electorateSpecifications(String electorateSpecifications) {
    this.electorateSpecifications = electorateSpecifications;
    return this;
  }

  /**
   * A description of any additional eligibility requirements for voting in this contest.
   * @return electorateSpecifications
   */
  @javax.annotation.Nullable
  public String getElectorateSpecifications() {
    return electorateSpecifications;
  }

  public void setElectorateSpecifications(String electorateSpecifications) {
    this.electorateSpecifications = electorateSpecifications;
  }


  public Contest level(List<LevelEnum> level) {
    this.level = level;
    return this;
  }

  public Contest addLevelItem(LevelEnum levelItem) {
    if (this.level == null) {
      this.level = new ArrayList<>();
    }
    this.level.add(levelItem);
    return this;
  }

  /**
   * The levels of government of the office for this contest. There may be more than one in cases where a jurisdiction effectively acts at two different levels of government; for example, the mayor of the District of Columbia acts at \&quot;locality\&quot; level, but also effectively at both \&quot;administrative-area-2\&quot; and \&quot;administrative-area-1\&quot;.
   * @return level
   */
  @javax.annotation.Nullable
  public List<LevelEnum> getLevel() {
    return level;
  }

  public void setLevel(List<LevelEnum> level) {
    this.level = level;
  }


  public Contest numberElected(String numberElected) {
    this.numberElected = numberElected;
    return this;
  }

  /**
   * The number of candidates that will be elected to office in this contest.
   * @return numberElected
   */
  @javax.annotation.Nullable
  public String getNumberElected() {
    return numberElected;
  }

  public void setNumberElected(String numberElected) {
    this.numberElected = numberElected;
  }


  public Contest numberVotingFor(String numberVotingFor) {
    this.numberVotingFor = numberVotingFor;
    return this;
  }

  /**
   * The number of candidates that a voter may vote for in this contest.
   * @return numberVotingFor
   */
  @javax.annotation.Nullable
  public String getNumberVotingFor() {
    return numberVotingFor;
  }

  public void setNumberVotingFor(String numberVotingFor) {
    this.numberVotingFor = numberVotingFor;
  }


  public Contest office(String office) {
    this.office = office;
    return this;
  }

  /**
   * The name of the office for this contest.
   * @return office
   */
  @javax.annotation.Nullable
  public String getOffice() {
    return office;
  }

  public void setOffice(String office) {
    this.office = office;
  }


  public Contest primaryParties(List<String> primaryParties) {
    this.primaryParties = primaryParties;
    return this;
  }

  public Contest addPrimaryPartiesItem(String primaryPartiesItem) {
    if (this.primaryParties == null) {
      this.primaryParties = new ArrayList<>();
    }
    this.primaryParties.add(primaryPartiesItem);
    return this;
  }

  /**
   * If this is a partisan election, the name of the party/parties it is for.
   * @return primaryParties
   */
  @javax.annotation.Nullable
  public List<String> getPrimaryParties() {
    return primaryParties;
  }

  public void setPrimaryParties(List<String> primaryParties) {
    this.primaryParties = primaryParties;
  }


  public Contest referendumBallotResponses(List<String> referendumBallotResponses) {
    this.referendumBallotResponses = referendumBallotResponses;
    return this;
  }

  public Contest addReferendumBallotResponsesItem(String referendumBallotResponsesItem) {
    if (this.referendumBallotResponses == null) {
      this.referendumBallotResponses = new ArrayList<>();
    }
    this.referendumBallotResponses.add(referendumBallotResponsesItem);
    return this;
  }

  /**
   * The set of ballot responses for the referendum. A ballot response represents a line on the ballot. Common examples might include \&quot;yes\&quot; or \&quot;no\&quot; for referenda. This field is only populated for contests of type &#39;Referendum&#39;.
   * @return referendumBallotResponses
   */
  @javax.annotation.Nullable
  public List<String> getReferendumBallotResponses() {
    return referendumBallotResponses;
  }

  public void setReferendumBallotResponses(List<String> referendumBallotResponses) {
    this.referendumBallotResponses = referendumBallotResponses;
  }


  public Contest referendumBrief(String referendumBrief) {
    this.referendumBrief = referendumBrief;
    return this;
  }

  /**
   * Specifies a short summary of the referendum that is typically on the ballot below the title but above the text. This field is only populated for contests of type &#39;Referendum&#39;.
   * @return referendumBrief
   */
  @javax.annotation.Nullable
  public String getReferendumBrief() {
    return referendumBrief;
  }

  public void setReferendumBrief(String referendumBrief) {
    this.referendumBrief = referendumBrief;
  }


  public Contest referendumConStatement(String referendumConStatement) {
    this.referendumConStatement = referendumConStatement;
    return this;
  }

  /**
   * A statement in opposition to the referendum. It does not necessarily appear on the ballot. This field is only populated for contests of type &#39;Referendum&#39;.
   * @return referendumConStatement
   */
  @javax.annotation.Nullable
  public String getReferendumConStatement() {
    return referendumConStatement;
  }

  public void setReferendumConStatement(String referendumConStatement) {
    this.referendumConStatement = referendumConStatement;
  }


  public Contest referendumEffectOfAbstain(String referendumEffectOfAbstain) {
    this.referendumEffectOfAbstain = referendumEffectOfAbstain;
    return this;
  }

  /**
   * Specifies what effect abstaining (not voting) on the proposition will have (i.e. whether abstaining is considered a vote against it). This field is only populated for contests of type &#39;Referendum&#39;.
   * @return referendumEffectOfAbstain
   */
  @javax.annotation.Nullable
  public String getReferendumEffectOfAbstain() {
    return referendumEffectOfAbstain;
  }

  public void setReferendumEffectOfAbstain(String referendumEffectOfAbstain) {
    this.referendumEffectOfAbstain = referendumEffectOfAbstain;
  }


  public Contest referendumPassageThreshold(String referendumPassageThreshold) {
    this.referendumPassageThreshold = referendumPassageThreshold;
    return this;
  }

  /**
   * The threshold of votes that the referendum needs in order to pass, e.g. \&quot;two-thirds\&quot;. This field is only populated for contests of type &#39;Referendum&#39;.
   * @return referendumPassageThreshold
   */
  @javax.annotation.Nullable
  public String getReferendumPassageThreshold() {
    return referendumPassageThreshold;
  }

  public void setReferendumPassageThreshold(String referendumPassageThreshold) {
    this.referendumPassageThreshold = referendumPassageThreshold;
  }


  public Contest referendumProStatement(String referendumProStatement) {
    this.referendumProStatement = referendumProStatement;
    return this;
  }

  /**
   * A statement in favor of the referendum. It does not necessarily appear on the ballot. This field is only populated for contests of type &#39;Referendum&#39;.
   * @return referendumProStatement
   */
  @javax.annotation.Nullable
  public String getReferendumProStatement() {
    return referendumProStatement;
  }

  public void setReferendumProStatement(String referendumProStatement) {
    this.referendumProStatement = referendumProStatement;
  }


  public Contest referendumSubtitle(String referendumSubtitle) {
    this.referendumSubtitle = referendumSubtitle;
    return this;
  }

  /**
   * A brief description of the referendum. This field is only populated for contests of type &#39;Referendum&#39;.
   * @return referendumSubtitle
   */
  @javax.annotation.Nullable
  public String getReferendumSubtitle() {
    return referendumSubtitle;
  }

  public void setReferendumSubtitle(String referendumSubtitle) {
    this.referendumSubtitle = referendumSubtitle;
  }


  public Contest referendumText(String referendumText) {
    this.referendumText = referendumText;
    return this;
  }

  /**
   * The full text of the referendum. This field is only populated for contests of type &#39;Referendum&#39;.
   * @return referendumText
   */
  @javax.annotation.Nullable
  public String getReferendumText() {
    return referendumText;
  }

  public void setReferendumText(String referendumText) {
    this.referendumText = referendumText;
  }


  public Contest referendumTitle(String referendumTitle) {
    this.referendumTitle = referendumTitle;
    return this;
  }

  /**
   * The title of the referendum (e.g. &#39;Proposition 42&#39;). This field is only populated for contests of type &#39;Referendum&#39;.
   * @return referendumTitle
   */
  @javax.annotation.Nullable
  public String getReferendumTitle() {
    return referendumTitle;
  }

  public void setReferendumTitle(String referendumTitle) {
    this.referendumTitle = referendumTitle;
  }


  public Contest referendumUrl(String referendumUrl) {
    this.referendumUrl = referendumUrl;
    return this;
  }

  /**
   * A link to the referendum. This field is only populated for contests of type &#39;Referendum&#39;.
   * @return referendumUrl
   */
  @javax.annotation.Nullable
  public String getReferendumUrl() {
    return referendumUrl;
  }

  public void setReferendumUrl(String referendumUrl) {
    this.referendumUrl = referendumUrl;
  }


  public Contest roles(List<RolesEnum> roles) {
    this.roles = roles;
    return this;
  }

  public Contest addRolesItem(RolesEnum rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * The roles which this office fulfills.
   * @return roles
   */
  @javax.annotation.Nullable
  public List<RolesEnum> getRoles() {
    return roles;
  }

  public void setRoles(List<RolesEnum> roles) {
    this.roles = roles;
  }


  public Contest sources(List<Source> sources) {
    this.sources = sources;
    return this;
  }

  public Contest addSourcesItem(Source sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * A list of sources for this contest. If multiple sources are listed, the data has been aggregated from those sources.
   * @return sources
   */
  @javax.annotation.Nullable
  public List<Source> getSources() {
    return sources;
  }

  public void setSources(List<Source> sources) {
    this.sources = sources;
  }


  public Contest special(String special) {
    this.special = special;
    return this;
  }

  /**
   * \&quot;Yes\&quot; or \&quot;No\&quot; depending on whether this a contest being held outside the normal election cycle.
   * @return special
   */
  @javax.annotation.Nullable
  public String getSpecial() {
    return special;
  }

  public void setSpecial(String special) {
    this.special = special;
  }


  public Contest type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of contest. Usually this will be &#39;General&#39;, &#39;Primary&#39;, or &#39;Run-off&#39; for contests with candidates. For referenda this will be &#39;Referendum&#39;. For Retention contests this will typically be &#39;Retention&#39;.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Contest contest = (Contest) o;
    return Objects.equals(this.ballotPlacement, contest.ballotPlacement) &&
        Objects.equals(this.ballotTitle, contest.ballotTitle) &&
        Objects.equals(this.candidates, contest.candidates) &&
        Objects.equals(this.district, contest.district) &&
        Objects.equals(this.electorateSpecifications, contest.electorateSpecifications) &&
        Objects.equals(this.level, contest.level) &&
        Objects.equals(this.numberElected, contest.numberElected) &&
        Objects.equals(this.numberVotingFor, contest.numberVotingFor) &&
        Objects.equals(this.office, contest.office) &&
        Objects.equals(this.primaryParties, contest.primaryParties) &&
        Objects.equals(this.referendumBallotResponses, contest.referendumBallotResponses) &&
        Objects.equals(this.referendumBrief, contest.referendumBrief) &&
        Objects.equals(this.referendumConStatement, contest.referendumConStatement) &&
        Objects.equals(this.referendumEffectOfAbstain, contest.referendumEffectOfAbstain) &&
        Objects.equals(this.referendumPassageThreshold, contest.referendumPassageThreshold) &&
        Objects.equals(this.referendumProStatement, contest.referendumProStatement) &&
        Objects.equals(this.referendumSubtitle, contest.referendumSubtitle) &&
        Objects.equals(this.referendumText, contest.referendumText) &&
        Objects.equals(this.referendumTitle, contest.referendumTitle) &&
        Objects.equals(this.referendumUrl, contest.referendumUrl) &&
        Objects.equals(this.roles, contest.roles) &&
        Objects.equals(this.sources, contest.sources) &&
        Objects.equals(this.special, contest.special) &&
        Objects.equals(this.type, contest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ballotPlacement, ballotTitle, candidates, district, electorateSpecifications, level, numberElected, numberVotingFor, office, primaryParties, referendumBallotResponses, referendumBrief, referendumConStatement, referendumEffectOfAbstain, referendumPassageThreshold, referendumProStatement, referendumSubtitle, referendumText, referendumTitle, referendumUrl, roles, sources, special, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Contest {\n");
    sb.append("    ballotPlacement: ").append(toIndentedString(ballotPlacement)).append("\n");
    sb.append("    ballotTitle: ").append(toIndentedString(ballotTitle)).append("\n");
    sb.append("    candidates: ").append(toIndentedString(candidates)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    electorateSpecifications: ").append(toIndentedString(electorateSpecifications)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    numberElected: ").append(toIndentedString(numberElected)).append("\n");
    sb.append("    numberVotingFor: ").append(toIndentedString(numberVotingFor)).append("\n");
    sb.append("    office: ").append(toIndentedString(office)).append("\n");
    sb.append("    primaryParties: ").append(toIndentedString(primaryParties)).append("\n");
    sb.append("    referendumBallotResponses: ").append(toIndentedString(referendumBallotResponses)).append("\n");
    sb.append("    referendumBrief: ").append(toIndentedString(referendumBrief)).append("\n");
    sb.append("    referendumConStatement: ").append(toIndentedString(referendumConStatement)).append("\n");
    sb.append("    referendumEffectOfAbstain: ").append(toIndentedString(referendumEffectOfAbstain)).append("\n");
    sb.append("    referendumPassageThreshold: ").append(toIndentedString(referendumPassageThreshold)).append("\n");
    sb.append("    referendumProStatement: ").append(toIndentedString(referendumProStatement)).append("\n");
    sb.append("    referendumSubtitle: ").append(toIndentedString(referendumSubtitle)).append("\n");
    sb.append("    referendumText: ").append(toIndentedString(referendumText)).append("\n");
    sb.append("    referendumTitle: ").append(toIndentedString(referendumTitle)).append("\n");
    sb.append("    referendumUrl: ").append(toIndentedString(referendumUrl)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    special: ").append(toIndentedString(special)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ballotPlacement");
    openapiFields.add("ballotTitle");
    openapiFields.add("candidates");
    openapiFields.add("district");
    openapiFields.add("electorateSpecifications");
    openapiFields.add("level");
    openapiFields.add("numberElected");
    openapiFields.add("numberVotingFor");
    openapiFields.add("office");
    openapiFields.add("primaryParties");
    openapiFields.add("referendumBallotResponses");
    openapiFields.add("referendumBrief");
    openapiFields.add("referendumConStatement");
    openapiFields.add("referendumEffectOfAbstain");
    openapiFields.add("referendumPassageThreshold");
    openapiFields.add("referendumProStatement");
    openapiFields.add("referendumSubtitle");
    openapiFields.add("referendumText");
    openapiFields.add("referendumTitle");
    openapiFields.add("referendumUrl");
    openapiFields.add("roles");
    openapiFields.add("sources");
    openapiFields.add("special");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Contest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Contest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Contest is not found in the empty JSON string", Contest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Contest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Contest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ballotPlacement") != null && !jsonObj.get("ballotPlacement").isJsonNull()) && !jsonObj.get("ballotPlacement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ballotPlacement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ballotPlacement").toString()));
      }
      if ((jsonObj.get("ballotTitle") != null && !jsonObj.get("ballotTitle").isJsonNull()) && !jsonObj.get("ballotTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ballotTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ballotTitle").toString()));
      }
      if (jsonObj.get("candidates") != null && !jsonObj.get("candidates").isJsonNull()) {
        JsonArray jsonArraycandidates = jsonObj.getAsJsonArray("candidates");
        if (jsonArraycandidates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("candidates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `candidates` to be an array in the JSON string but got `%s`", jsonObj.get("candidates").toString()));
          }

          // validate the optional field `candidates` (array)
          for (int i = 0; i < jsonArraycandidates.size(); i++) {
            Candidate.validateJsonElement(jsonArraycandidates.get(i));
          };
        }
      }
      // validate the optional field `district`
      if (jsonObj.get("district") != null && !jsonObj.get("district").isJsonNull()) {
        ElectoralDistrict.validateJsonElement(jsonObj.get("district"));
      }
      if ((jsonObj.get("electorateSpecifications") != null && !jsonObj.get("electorateSpecifications").isJsonNull()) && !jsonObj.get("electorateSpecifications").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electorateSpecifications` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electorateSpecifications").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull() && !jsonObj.get("level").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `level` to be an array in the JSON string but got `%s`", jsonObj.get("level").toString()));
      }
      if ((jsonObj.get("numberElected") != null && !jsonObj.get("numberElected").isJsonNull()) && !jsonObj.get("numberElected").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numberElected` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numberElected").toString()));
      }
      if ((jsonObj.get("numberVotingFor") != null && !jsonObj.get("numberVotingFor").isJsonNull()) && !jsonObj.get("numberVotingFor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numberVotingFor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numberVotingFor").toString()));
      }
      if ((jsonObj.get("office") != null && !jsonObj.get("office").isJsonNull()) && !jsonObj.get("office").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("primaryParties") != null && !jsonObj.get("primaryParties").isJsonNull() && !jsonObj.get("primaryParties").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryParties` to be an array in the JSON string but got `%s`", jsonObj.get("primaryParties").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("referendumBallotResponses") != null && !jsonObj.get("referendumBallotResponses").isJsonNull() && !jsonObj.get("referendumBallotResponses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `referendumBallotResponses` to be an array in the JSON string but got `%s`", jsonObj.get("referendumBallotResponses").toString()));
      }
      if ((jsonObj.get("referendumBrief") != null && !jsonObj.get("referendumBrief").isJsonNull()) && !jsonObj.get("referendumBrief").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referendumBrief` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referendumBrief").toString()));
      }
      if ((jsonObj.get("referendumConStatement") != null && !jsonObj.get("referendumConStatement").isJsonNull()) && !jsonObj.get("referendumConStatement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referendumConStatement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referendumConStatement").toString()));
      }
      if ((jsonObj.get("referendumEffectOfAbstain") != null && !jsonObj.get("referendumEffectOfAbstain").isJsonNull()) && !jsonObj.get("referendumEffectOfAbstain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referendumEffectOfAbstain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referendumEffectOfAbstain").toString()));
      }
      if ((jsonObj.get("referendumPassageThreshold") != null && !jsonObj.get("referendumPassageThreshold").isJsonNull()) && !jsonObj.get("referendumPassageThreshold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referendumPassageThreshold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referendumPassageThreshold").toString()));
      }
      if ((jsonObj.get("referendumProStatement") != null && !jsonObj.get("referendumProStatement").isJsonNull()) && !jsonObj.get("referendumProStatement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referendumProStatement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referendumProStatement").toString()));
      }
      if ((jsonObj.get("referendumSubtitle") != null && !jsonObj.get("referendumSubtitle").isJsonNull()) && !jsonObj.get("referendumSubtitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referendumSubtitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referendumSubtitle").toString()));
      }
      if ((jsonObj.get("referendumText") != null && !jsonObj.get("referendumText").isJsonNull()) && !jsonObj.get("referendumText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referendumText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referendumText").toString()));
      }
      if ((jsonObj.get("referendumTitle") != null && !jsonObj.get("referendumTitle").isJsonNull()) && !jsonObj.get("referendumTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referendumTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referendumTitle").toString()));
      }
      if ((jsonObj.get("referendumUrl") != null && !jsonObj.get("referendumUrl").isJsonNull()) && !jsonObj.get("referendumUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referendumUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referendumUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull() && !jsonObj.get("roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
      }
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull()) {
        JsonArray jsonArraysources = jsonObj.getAsJsonArray("sources");
        if (jsonArraysources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
          }

          // validate the optional field `sources` (array)
          for (int i = 0; i < jsonArraysources.size(); i++) {
            Source.validateJsonElement(jsonArraysources.get(i));
          };
        }
      }
      if ((jsonObj.get("special") != null && !jsonObj.get("special").isJsonNull()) && !jsonObj.get("special").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `special` to be a primitive type in the JSON string but got `%s`", jsonObj.get("special").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Contest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Contest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Contest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Contest.class));

       return (TypeAdapter<T>) new TypeAdapter<Contest>() {
           @Override
           public void write(JsonWriter out, Contest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Contest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Contest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Contest
   * @throws IOException if the JSON string is invalid with respect to Contest
   */
  public static Contest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Contest.class);
  }

  /**
   * Convert an instance of Contest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

