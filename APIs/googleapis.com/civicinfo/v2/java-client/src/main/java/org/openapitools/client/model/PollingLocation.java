/*
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SimpleAddressType;
import org.openapitools.client.model.Source;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A location where a voter can vote. This may be an early vote site, an election day voting location, or a drop off location for a completed ballot.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:56.745680-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PollingLocation {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private SimpleAddressType address;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_POLLING_HOURS = "pollingHours";
  @SerializedName(SERIALIZED_NAME_POLLING_HOURS)
  private String pollingHours;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<Source> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_VOTER_SERVICES = "voterServices";
  @SerializedName(SERIALIZED_NAME_VOTER_SERVICES)
  private String voterServices;

  public PollingLocation() {
  }

  public PollingLocation address(SimpleAddressType address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public SimpleAddressType getAddress() {
    return address;
  }

  public void setAddress(SimpleAddressType address) {
    this.address = address;
  }


  public PollingLocation endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The last date that this early vote site or drop off location may be used. This field is not populated for polling locations.
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public PollingLocation latitude(Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Latitude of the location, in degrees north of the equator. Note this field may not be available for some locations.
   * @return latitude
   */
  @javax.annotation.Nullable
  public Double getLatitude() {
    return latitude;
  }

  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public PollingLocation longitude(Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Longitude of the location, in degrees east of the Prime Meridian. Note this field may not be available for some locations.
   * @return longitude
   */
  @javax.annotation.Nullable
  public Double getLongitude() {
    return longitude;
  }

  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public PollingLocation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the early vote site or drop off location. This field is not populated for polling locations.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PollingLocation notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Notes about this location (e.g. accessibility ramp or entrance to use).
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public PollingLocation pollingHours(String pollingHours) {
    this.pollingHours = pollingHours;
    return this;
  }

  /**
   * A description of when this location is open.
   * @return pollingHours
   */
  @javax.annotation.Nullable
  public String getPollingHours() {
    return pollingHours;
  }

  public void setPollingHours(String pollingHours) {
    this.pollingHours = pollingHours;
  }


  public PollingLocation sources(List<Source> sources) {
    this.sources = sources;
    return this;
  }

  public PollingLocation addSourcesItem(Source sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * A list of sources for this location. If multiple sources are listed the data has been aggregated from those sources.
   * @return sources
   */
  @javax.annotation.Nullable
  public List<Source> getSources() {
    return sources;
  }

  public void setSources(List<Source> sources) {
    this.sources = sources;
  }


  public PollingLocation startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The first date that this early vote site or drop off location may be used. This field is not populated for polling locations.
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public PollingLocation voterServices(String voterServices) {
    this.voterServices = voterServices;
    return this;
  }

  /**
   * The services provided by this early vote site or drop off location. This field is not populated for polling locations.
   * @return voterServices
   */
  @javax.annotation.Nullable
  public String getVoterServices() {
    return voterServices;
  }

  public void setVoterServices(String voterServices) {
    this.voterServices = voterServices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PollingLocation pollingLocation = (PollingLocation) o;
    return Objects.equals(this.address, pollingLocation.address) &&
        Objects.equals(this.endDate, pollingLocation.endDate) &&
        Objects.equals(this.latitude, pollingLocation.latitude) &&
        Objects.equals(this.longitude, pollingLocation.longitude) &&
        Objects.equals(this.name, pollingLocation.name) &&
        Objects.equals(this.notes, pollingLocation.notes) &&
        Objects.equals(this.pollingHours, pollingLocation.pollingHours) &&
        Objects.equals(this.sources, pollingLocation.sources) &&
        Objects.equals(this.startDate, pollingLocation.startDate) &&
        Objects.equals(this.voterServices, pollingLocation.voterServices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, endDate, latitude, longitude, name, notes, pollingHours, sources, startDate, voterServices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PollingLocation {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    pollingHours: ").append(toIndentedString(pollingHours)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    voterServices: ").append(toIndentedString(voterServices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("endDate");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("pollingHours");
    openapiFields.add("sources");
    openapiFields.add("startDate");
    openapiFields.add("voterServices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PollingLocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PollingLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PollingLocation is not found in the empty JSON string", PollingLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PollingLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PollingLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        SimpleAddressType.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("pollingHours") != null && !jsonObj.get("pollingHours").isJsonNull()) && !jsonObj.get("pollingHours").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pollingHours` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pollingHours").toString()));
      }
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull()) {
        JsonArray jsonArraysources = jsonObj.getAsJsonArray("sources");
        if (jsonArraysources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
          }

          // validate the optional field `sources` (array)
          for (int i = 0; i < jsonArraysources.size(); i++) {
            Source.validateJsonElement(jsonArraysources.get(i));
          };
        }
      }
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if ((jsonObj.get("voterServices") != null && !jsonObj.get("voterServices").isJsonNull()) && !jsonObj.get("voterServices").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `voterServices` to be a primitive type in the JSON string but got `%s`", jsonObj.get("voterServices").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PollingLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PollingLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PollingLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PollingLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<PollingLocation>() {
           @Override
           public void write(JsonWriter out, PollingLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PollingLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PollingLocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PollingLocation
   * @throws IOException if the JSON string is invalid with respect to PollingLocation
   */
  public static PollingLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PollingLocation.class);
  }

  /**
   * Convert an instance of PollingLocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

