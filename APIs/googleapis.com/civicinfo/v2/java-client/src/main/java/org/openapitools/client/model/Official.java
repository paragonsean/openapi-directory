/*
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Channel;
import org.openapitools.client.model.SimpleAddressType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a person holding an elected office.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:56.745680-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Official {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private List<SimpleAddressType> address = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANNELS = "channels";
  @SerializedName(SERIALIZED_NAME_CHANNELS)
  private List<Channel> channels = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<String> emails = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARTY = "party";
  @SerializedName(SERIALIZED_NAME_PARTY)
  private String party;

  public static final String SERIALIZED_NAME_PHONES = "phones";
  @SerializedName(SERIALIZED_NAME_PHONES)
  private List<String> phones = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHOTO_URL = "photoUrl";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private String photoUrl;

  public static final String SERIALIZED_NAME_URLS = "urls";
  @SerializedName(SERIALIZED_NAME_URLS)
  private List<String> urls = new ArrayList<>();

  public Official() {
  }

  public Official address(List<SimpleAddressType> address) {
    this.address = address;
    return this;
  }

  public Official addAddressItem(SimpleAddressType addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<>();
    }
    this.address.add(addressItem);
    return this;
  }

  /**
   * Addresses at which to contact the official.
   * @return address
   */
  @javax.annotation.Nullable
  public List<SimpleAddressType> getAddress() {
    return address;
  }

  public void setAddress(List<SimpleAddressType> address) {
    this.address = address;
  }


  public Official channels(List<Channel> channels) {
    this.channels = channels;
    return this;
  }

  public Official addChannelsItem(Channel channelsItem) {
    if (this.channels == null) {
      this.channels = new ArrayList<>();
    }
    this.channels.add(channelsItem);
    return this;
  }

  /**
   * A list of known (social) media channels for this official.
   * @return channels
   */
  @javax.annotation.Nullable
  public List<Channel> getChannels() {
    return channels;
  }

  public void setChannels(List<Channel> channels) {
    this.channels = channels;
  }


  public Official emails(List<String> emails) {
    this.emails = emails;
    return this;
  }

  public Official addEmailsItem(String emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

  /**
   * The direct email addresses for the official.
   * @return emails
   */
  @javax.annotation.Nullable
  public List<String> getEmails() {
    return emails;
  }

  public void setEmails(List<String> emails) {
    this.emails = emails;
  }


  public Official name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The official&#39;s name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Official party(String party) {
    this.party = party;
    return this;
  }

  /**
   * The full name of the party the official belongs to.
   * @return party
   */
  @javax.annotation.Nullable
  public String getParty() {
    return party;
  }

  public void setParty(String party) {
    this.party = party;
  }


  public Official phones(List<String> phones) {
    this.phones = phones;
    return this;
  }

  public Official addPhonesItem(String phonesItem) {
    if (this.phones == null) {
      this.phones = new ArrayList<>();
    }
    this.phones.add(phonesItem);
    return this;
  }

  /**
   * The official&#39;s public contact phone numbers.
   * @return phones
   */
  @javax.annotation.Nullable
  public List<String> getPhones() {
    return phones;
  }

  public void setPhones(List<String> phones) {
    this.phones = phones;
  }


  public Official photoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * A URL for a photo of the official.
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public String getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }


  public Official urls(List<String> urls) {
    this.urls = urls;
    return this;
  }

  public Official addUrlsItem(String urlsItem) {
    if (this.urls == null) {
      this.urls = new ArrayList<>();
    }
    this.urls.add(urlsItem);
    return this;
  }

  /**
   * The official&#39;s public website URLs.
   * @return urls
   */
  @javax.annotation.Nullable
  public List<String> getUrls() {
    return urls;
  }

  public void setUrls(List<String> urls) {
    this.urls = urls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Official official = (Official) o;
    return Objects.equals(this.address, official.address) &&
        Objects.equals(this.channels, official.channels) &&
        Objects.equals(this.emails, official.emails) &&
        Objects.equals(this.name, official.name) &&
        Objects.equals(this.party, official.party) &&
        Objects.equals(this.phones, official.phones) &&
        Objects.equals(this.photoUrl, official.photoUrl) &&
        Objects.equals(this.urls, official.urls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, channels, emails, name, party, phones, photoUrl, urls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Official {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    party: ").append(toIndentedString(party)).append("\n");
    sb.append("    phones: ").append(toIndentedString(phones)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("channels");
    openapiFields.add("emails");
    openapiFields.add("name");
    openapiFields.add("party");
    openapiFields.add("phones");
    openapiFields.add("photoUrl");
    openapiFields.add("urls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Official
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Official.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Official is not found in the empty JSON string", Official.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Official.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Official` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        JsonArray jsonArrayaddress = jsonObj.getAsJsonArray("address");
        if (jsonArrayaddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("address").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `address` to be an array in the JSON string but got `%s`", jsonObj.get("address").toString()));
          }

          // validate the optional field `address` (array)
          for (int i = 0; i < jsonArrayaddress.size(); i++) {
            SimpleAddressType.validateJsonElement(jsonArrayaddress.get(i));
          };
        }
      }
      if (jsonObj.get("channels") != null && !jsonObj.get("channels").isJsonNull()) {
        JsonArray jsonArraychannels = jsonObj.getAsJsonArray("channels");
        if (jsonArraychannels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("channels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `channels` to be an array in the JSON string but got `%s`", jsonObj.get("channels").toString()));
          }

          // validate the optional field `channels` (array)
          for (int i = 0; i < jsonArraychannels.size(); i++) {
            Channel.validateJsonElement(jsonArraychannels.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emails") != null && !jsonObj.get("emails").isJsonNull() && !jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("party") != null && !jsonObj.get("party").isJsonNull()) && !jsonObj.get("party").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `party` to be a primitive type in the JSON string but got `%s`", jsonObj.get("party").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("phones") != null && !jsonObj.get("phones").isJsonNull() && !jsonObj.get("phones").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `phones` to be an array in the JSON string but got `%s`", jsonObj.get("phones").toString()));
      }
      if ((jsonObj.get("photoUrl") != null && !jsonObj.get("photoUrl").isJsonNull()) && !jsonObj.get("photoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `photoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("photoUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("urls") != null && !jsonObj.get("urls").isJsonNull() && !jsonObj.get("urls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `urls` to be an array in the JSON string but got `%s`", jsonObj.get("urls").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Official.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Official' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Official> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Official.class));

       return (TypeAdapter<T>) new TypeAdapter<Official>() {
           @Override
           public void write(JsonWriter out, Official value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Official read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Official given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Official
   * @throws IOException if the JSON string is invalid with respect to Official
   */
  public static Official fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Official.class);
  }

  /**
   * Convert an instance of Official to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

