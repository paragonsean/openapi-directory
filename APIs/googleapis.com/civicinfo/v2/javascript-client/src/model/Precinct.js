/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Precinct model module.
 * @module model/Precinct
 * @version v2
 */
class Precinct {
    /**
     * Constructs a new <code>Precinct</code>.
     * @alias module:model/Precinct
     */
    constructor() { 
        
        Precinct.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Precinct</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Precinct} obj Optional instance to populate.
     * @return {module:model/Precinct} The populated <code>Precinct</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Precinct();

            if (data.hasOwnProperty('administrationRegionId')) {
                obj['administrationRegionId'] = ApiClient.convertToType(data['administrationRegionId'], 'String');
            }
            if (data.hasOwnProperty('contestId')) {
                obj['contestId'] = ApiClient.convertToType(data['contestId'], ['String']);
            }
            if (data.hasOwnProperty('datasetId')) {
                obj['datasetId'] = ApiClient.convertToType(data['datasetId'], 'String');
            }
            if (data.hasOwnProperty('earlyVoteSiteId')) {
                obj['earlyVoteSiteId'] = ApiClient.convertToType(data['earlyVoteSiteId'], ['String']);
            }
            if (data.hasOwnProperty('electoralDistrictId')) {
                obj['electoralDistrictId'] = ApiClient.convertToType(data['electoralDistrictId'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('mailOnly')) {
                obj['mailOnly'] = ApiClient.convertToType(data['mailOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('ocdId')) {
                obj['ocdId'] = ApiClient.convertToType(data['ocdId'], ['String']);
            }
            if (data.hasOwnProperty('pollingLocationId')) {
                obj['pollingLocationId'] = ApiClient.convertToType(data['pollingLocationId'], ['String']);
            }
            if (data.hasOwnProperty('spatialBoundaryId')) {
                obj['spatialBoundaryId'] = ApiClient.convertToType(data['spatialBoundaryId'], ['String']);
            }
            if (data.hasOwnProperty('splitName')) {
                obj['splitName'] = ApiClient.convertToType(data['splitName'], 'String');
            }
            if (data.hasOwnProperty('ward')) {
                obj['ward'] = ApiClient.convertToType(data['ward'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Precinct</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Precinct</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['administrationRegionId'] && !(typeof data['administrationRegionId'] === 'string' || data['administrationRegionId'] instanceof String)) {
            throw new Error("Expected the field `administrationRegionId` to be a primitive type in the JSON string but got " + data['administrationRegionId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['contestId'])) {
            throw new Error("Expected the field `contestId` to be an array in the JSON data but got " + data['contestId']);
        }
        // ensure the json data is a string
        if (data['datasetId'] && !(typeof data['datasetId'] === 'string' || data['datasetId'] instanceof String)) {
            throw new Error("Expected the field `datasetId` to be a primitive type in the JSON string but got " + data['datasetId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['earlyVoteSiteId'])) {
            throw new Error("Expected the field `earlyVoteSiteId` to be an array in the JSON data but got " + data['earlyVoteSiteId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['electoralDistrictId'])) {
            throw new Error("Expected the field `electoralDistrictId` to be an array in the JSON data but got " + data['electoralDistrictId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ocdId'])) {
            throw new Error("Expected the field `ocdId` to be an array in the JSON data but got " + data['ocdId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pollingLocationId'])) {
            throw new Error("Expected the field `pollingLocationId` to be an array in the JSON data but got " + data['pollingLocationId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['spatialBoundaryId'])) {
            throw new Error("Expected the field `spatialBoundaryId` to be an array in the JSON data but got " + data['spatialBoundaryId']);
        }
        // ensure the json data is a string
        if (data['splitName'] && !(typeof data['splitName'] === 'string' || data['splitName'] instanceof String)) {
            throw new Error("Expected the field `splitName` to be a primitive type in the JSON string but got " + data['splitName']);
        }
        // ensure the json data is a string
        if (data['ward'] && !(typeof data['ward'] === 'string' || data['ward'] instanceof String)) {
            throw new Error("Expected the field `ward` to be a primitive type in the JSON string but got " + data['ward']);
        }

        return true;
    }


}



/**
 * ID of the AdministrationRegion message for this precinct. Corresponds to LocalityId xml tag.
 * @member {String} administrationRegionId
 */
Precinct.prototype['administrationRegionId'] = undefined;

/**
 * ID(s) of the Contest message(s) for this precinct.
 * @member {Array.<String>} contestId
 */
Precinct.prototype['contestId'] = undefined;

/**
 * Required. Dataset ID. What datasets our Precincts come from.
 * @member {String} datasetId
 */
Precinct.prototype['datasetId'] = undefined;

/**
 * ID(s) of the PollingLocation message(s) for this precinct.
 * @member {Array.<String>} earlyVoteSiteId
 */
Precinct.prototype['earlyVoteSiteId'] = undefined;

/**
 * ID(s) of the ElectoralDistrict message(s) for this precinct.
 * @member {Array.<String>} electoralDistrictId
 */
Precinct.prototype['electoralDistrictId'] = undefined;

/**
 * Required. A unique identifier for this precinct.
 * @member {String} id
 */
Precinct.prototype['id'] = undefined;

/**
 * Specifies if the precinct runs mail-only elections.
 * @member {Boolean} mailOnly
 */
Precinct.prototype['mailOnly'] = undefined;

/**
 * Required. The name of the precinct.
 * @member {String} name
 */
Precinct.prototype['name'] = undefined;

/**
 * The number of the precinct.
 * @member {String} number
 */
Precinct.prototype['number'] = undefined;

/**
 * Encouraged. The OCD ID of the precinct
 * @member {Array.<String>} ocdId
 */
Precinct.prototype['ocdId'] = undefined;

/**
 * ID(s) of the PollingLocation message(s) for this precinct.
 * @member {Array.<String>} pollingLocationId
 */
Precinct.prototype['pollingLocationId'] = undefined;

/**
 * ID(s) of the SpatialBoundary message(s) for this precinct. Used to specify a geometrical boundary of the precinct.
 * @member {Array.<String>} spatialBoundaryId
 */
Precinct.prototype['spatialBoundaryId'] = undefined;

/**
 * If present, this proto corresponds to one portion of split precinct. Other portions of this precinct are guaranteed to have the same `name`. If not present, this proto represents a full precicnt.
 * @member {String} splitName
 */
Precinct.prototype['splitName'] = undefined;

/**
 * Specifies the ward the precinct is contained within.
 * @member {String} ward
 */
Precinct.prototype['ward'] = undefined;






export default Precinct;

