/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GeographicDivision model module.
 * @module model/GeographicDivision
 * @version v2
 */
class GeographicDivision {
    /**
     * Constructs a new <code>GeographicDivision</code>.
     * Describes a political geography.
     * @alias module:model/GeographicDivision
     */
    constructor() { 
        
        GeographicDivision.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GeographicDivision</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeographicDivision} obj Optional instance to populate.
     * @return {module:model/GeographicDivision} The populated <code>GeographicDivision</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeographicDivision();

            if (data.hasOwnProperty('alsoKnownAs')) {
                obj['alsoKnownAs'] = ApiClient.convertToType(data['alsoKnownAs'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('officeIndices')) {
                obj['officeIndices'] = ApiClient.convertToType(data['officeIndices'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeographicDivision</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeographicDivision</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['alsoKnownAs'])) {
            throw new Error("Expected the field `alsoKnownAs` to be an array in the JSON data but got " + data['alsoKnownAs']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['officeIndices'])) {
            throw new Error("Expected the field `officeIndices` to be an array in the JSON data but got " + data['officeIndices']);
        }

        return true;
    }


}



/**
 * Any other valid OCD IDs that refer to the same division.\\n\\nBecause OCD IDs are meant to be human-readable and at least somewhat predictable, there are occasionally several identifiers for a single division. These identifiers are defined to be equivalent to one another, and one is always indicated as the primary identifier. The primary identifier will be returned in ocd_id above, and any other equivalent valid identifiers will be returned in this list.\\n\\nFor example, if this division's OCD ID is ocd-division/country:us/district:dc, this will contain ocd-division/country:us/state:dc.
 * @member {Array.<String>} alsoKnownAs
 */
GeographicDivision.prototype['alsoKnownAs'] = undefined;

/**
 * The name of the division.
 * @member {String} name
 */
GeographicDivision.prototype['name'] = undefined;

/**
 * List of indices in the offices array, one for each office elected from this division. Will only be present if includeOffices was true (or absent) in the request.
 * @member {Array.<Number>} officeIndices
 */
GeographicDivision.prototype['officeIndices'] = undefined;






export default GeographicDivision;

