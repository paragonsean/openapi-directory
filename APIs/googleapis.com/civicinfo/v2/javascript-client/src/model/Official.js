/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Channel from './Channel';
import SimpleAddressType from './SimpleAddressType';

/**
 * The Official model module.
 * @module model/Official
 * @version v2
 */
class Official {
    /**
     * Constructs a new <code>Official</code>.
     * Information about a person holding an elected office.
     * @alias module:model/Official
     */
    constructor() { 
        
        Official.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Official</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Official} obj Optional instance to populate.
     * @return {module:model/Official} The populated <code>Official</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Official();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], [SimpleAddressType]);
            }
            if (data.hasOwnProperty('channels')) {
                obj['channels'] = ApiClient.convertToType(data['channels'], [Channel]);
            }
            if (data.hasOwnProperty('emails')) {
                obj['emails'] = ApiClient.convertToType(data['emails'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('party')) {
                obj['party'] = ApiClient.convertToType(data['party'], 'String');
            }
            if (data.hasOwnProperty('phones')) {
                obj['phones'] = ApiClient.convertToType(data['phones'], ['String']);
            }
            if (data.hasOwnProperty('photoUrl')) {
                obj['photoUrl'] = ApiClient.convertToType(data['photoUrl'], 'String');
            }
            if (data.hasOwnProperty('urls')) {
                obj['urls'] = ApiClient.convertToType(data['urls'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Official</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Official</code>.
     */
    static validateJSON(data) {
        if (data['address']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['address'])) {
                throw new Error("Expected the field `address` to be an array in the JSON data but got " + data['address']);
            }
            // validate the optional field `address` (array)
            for (const item of data['address']) {
                SimpleAddressType.validateJSON(item);
            };
        }
        if (data['channels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['channels'])) {
                throw new Error("Expected the field `channels` to be an array in the JSON data but got " + data['channels']);
            }
            // validate the optional field `channels` (array)
            for (const item of data['channels']) {
                Channel.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['emails'])) {
            throw new Error("Expected the field `emails` to be an array in the JSON data but got " + data['emails']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['party'] && !(typeof data['party'] === 'string' || data['party'] instanceof String)) {
            throw new Error("Expected the field `party` to be a primitive type in the JSON string but got " + data['party']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['phones'])) {
            throw new Error("Expected the field `phones` to be an array in the JSON data but got " + data['phones']);
        }
        // ensure the json data is a string
        if (data['photoUrl'] && !(typeof data['photoUrl'] === 'string' || data['photoUrl'] instanceof String)) {
            throw new Error("Expected the field `photoUrl` to be a primitive type in the JSON string but got " + data['photoUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['urls'])) {
            throw new Error("Expected the field `urls` to be an array in the JSON data but got " + data['urls']);
        }

        return true;
    }


}



/**
 * Addresses at which to contact the official.
 * @member {Array.<module:model/SimpleAddressType>} address
 */
Official.prototype['address'] = undefined;

/**
 * A list of known (social) media channels for this official.
 * @member {Array.<module:model/Channel>} channels
 */
Official.prototype['channels'] = undefined;

/**
 * The direct email addresses for the official.
 * @member {Array.<String>} emails
 */
Official.prototype['emails'] = undefined;

/**
 * The official's name.
 * @member {String} name
 */
Official.prototype['name'] = undefined;

/**
 * The full name of the party the official belongs to.
 * @member {String} party
 */
Official.prototype['party'] = undefined;

/**
 * The official's public contact phone numbers.
 * @member {Array.<String>} phones
 */
Official.prototype['phones'] = undefined;

/**
 * A URL for a photo of the official.
 * @member {String} photoUrl
 */
Official.prototype['photoUrl'] = undefined;

/**
 * The official's public website URLs.
 * @member {Array.<String>} urls
 */
Official.prototype['urls'] = undefined;






export default Official;

