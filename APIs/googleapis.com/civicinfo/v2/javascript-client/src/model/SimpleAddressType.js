/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SimpleAddressType model module.
 * @module model/SimpleAddressType
 * @version v2
 */
class SimpleAddressType {
    /**
     * Constructs a new <code>SimpleAddressType</code>.
     * A simple representation of an address.
     * @alias module:model/SimpleAddressType
     */
    constructor() { 
        
        SimpleAddressType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SimpleAddressType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimpleAddressType} obj Optional instance to populate.
     * @return {module:model/SimpleAddressType} The populated <code>SimpleAddressType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimpleAddressType();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('line1')) {
                obj['line1'] = ApiClient.convertToType(data['line1'], 'String');
            }
            if (data.hasOwnProperty('line2')) {
                obj['line2'] = ApiClient.convertToType(data['line2'], 'String');
            }
            if (data.hasOwnProperty('line3')) {
                obj['line3'] = ApiClient.convertToType(data['line3'], 'String');
            }
            if (data.hasOwnProperty('locationName')) {
                obj['locationName'] = ApiClient.convertToType(data['locationName'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimpleAddressType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimpleAddressType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['line1'] && !(typeof data['line1'] === 'string' || data['line1'] instanceof String)) {
            throw new Error("Expected the field `line1` to be a primitive type in the JSON string but got " + data['line1']);
        }
        // ensure the json data is a string
        if (data['line2'] && !(typeof data['line2'] === 'string' || data['line2'] instanceof String)) {
            throw new Error("Expected the field `line2` to be a primitive type in the JSON string but got " + data['line2']);
        }
        // ensure the json data is a string
        if (data['line3'] && !(typeof data['line3'] === 'string' || data['line3'] instanceof String)) {
            throw new Error("Expected the field `line3` to be a primitive type in the JSON string but got " + data['line3']);
        }
        // ensure the json data is a string
        if (data['locationName'] && !(typeof data['locationName'] === 'string' || data['locationName'] instanceof String)) {
            throw new Error("Expected the field `locationName` to be a primitive type in the JSON string but got " + data['locationName']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }

        return true;
    }


}



/**
 * The city or town for the address.
 * @member {String} city
 */
SimpleAddressType.prototype['city'] = undefined;

/**
 * The street name and number of this address.
 * @member {String} line1
 */
SimpleAddressType.prototype['line1'] = undefined;

/**
 * The second line the address, if needed.
 * @member {String} line2
 */
SimpleAddressType.prototype['line2'] = undefined;

/**
 * The third line of the address, if needed.
 * @member {String} line3
 */
SimpleAddressType.prototype['line3'] = undefined;

/**
 * The name of the location.
 * @member {String} locationName
 */
SimpleAddressType.prototype['locationName'] = undefined;

/**
 * The US two letter state abbreviation of the address.
 * @member {String} state
 */
SimpleAddressType.prototype['state'] = undefined;

/**
 * The US Postal Zip Code of the address.
 * @member {String} zip
 */
SimpleAddressType.prototype['zip'] = undefined;






export default SimpleAddressType;

