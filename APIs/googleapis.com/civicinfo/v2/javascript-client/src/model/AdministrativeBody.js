/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ElectionOfficial from './ElectionOfficial';
import SimpleAddressType from './SimpleAddressType';

/**
 * The AdministrativeBody model module.
 * @module model/AdministrativeBody
 * @version v2
 */
class AdministrativeBody {
    /**
     * Constructs a new <code>AdministrativeBody</code>.
     * Information about an election administrative body (e.g. County Board of Elections).
     * @alias module:model/AdministrativeBody
     */
    constructor() { 
        
        AdministrativeBody.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdministrativeBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdministrativeBody} obj Optional instance to populate.
     * @return {module:model/AdministrativeBody} The populated <code>AdministrativeBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdministrativeBody();

            if (data.hasOwnProperty('absenteeVotingInfoUrl')) {
                obj['absenteeVotingInfoUrl'] = ApiClient.convertToType(data['absenteeVotingInfoUrl'], 'String');
            }
            if (data.hasOwnProperty('ballotInfoUrl')) {
                obj['ballotInfoUrl'] = ApiClient.convertToType(data['ballotInfoUrl'], 'String');
            }
            if (data.hasOwnProperty('correspondenceAddress')) {
                obj['correspondenceAddress'] = SimpleAddressType.constructFromObject(data['correspondenceAddress']);
            }
            if (data.hasOwnProperty('electionInfoUrl')) {
                obj['electionInfoUrl'] = ApiClient.convertToType(data['electionInfoUrl'], 'String');
            }
            if (data.hasOwnProperty('electionNoticeText')) {
                obj['electionNoticeText'] = ApiClient.convertToType(data['electionNoticeText'], 'String');
            }
            if (data.hasOwnProperty('electionNoticeUrl')) {
                obj['electionNoticeUrl'] = ApiClient.convertToType(data['electionNoticeUrl'], 'String');
            }
            if (data.hasOwnProperty('electionOfficials')) {
                obj['electionOfficials'] = ApiClient.convertToType(data['electionOfficials'], [ElectionOfficial]);
            }
            if (data.hasOwnProperty('electionRegistrationConfirmationUrl')) {
                obj['electionRegistrationConfirmationUrl'] = ApiClient.convertToType(data['electionRegistrationConfirmationUrl'], 'String');
            }
            if (data.hasOwnProperty('electionRegistrationUrl')) {
                obj['electionRegistrationUrl'] = ApiClient.convertToType(data['electionRegistrationUrl'], 'String');
            }
            if (data.hasOwnProperty('electionRulesUrl')) {
                obj['electionRulesUrl'] = ApiClient.convertToType(data['electionRulesUrl'], 'String');
            }
            if (data.hasOwnProperty('hoursOfOperation')) {
                obj['hoursOfOperation'] = ApiClient.convertToType(data['hoursOfOperation'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('physicalAddress')) {
                obj['physicalAddress'] = SimpleAddressType.constructFromObject(data['physicalAddress']);
            }
            if (data.hasOwnProperty('voter_services')) {
                obj['voter_services'] = ApiClient.convertToType(data['voter_services'], ['String']);
            }
            if (data.hasOwnProperty('votingLocationFinderUrl')) {
                obj['votingLocationFinderUrl'] = ApiClient.convertToType(data['votingLocationFinderUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdministrativeBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdministrativeBody</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['absenteeVotingInfoUrl'] && !(typeof data['absenteeVotingInfoUrl'] === 'string' || data['absenteeVotingInfoUrl'] instanceof String)) {
            throw new Error("Expected the field `absenteeVotingInfoUrl` to be a primitive type in the JSON string but got " + data['absenteeVotingInfoUrl']);
        }
        // ensure the json data is a string
        if (data['ballotInfoUrl'] && !(typeof data['ballotInfoUrl'] === 'string' || data['ballotInfoUrl'] instanceof String)) {
            throw new Error("Expected the field `ballotInfoUrl` to be a primitive type in the JSON string but got " + data['ballotInfoUrl']);
        }
        // validate the optional field `correspondenceAddress`
        if (data['correspondenceAddress']) { // data not null
          SimpleAddressType.validateJSON(data['correspondenceAddress']);
        }
        // ensure the json data is a string
        if (data['electionInfoUrl'] && !(typeof data['electionInfoUrl'] === 'string' || data['electionInfoUrl'] instanceof String)) {
            throw new Error("Expected the field `electionInfoUrl` to be a primitive type in the JSON string but got " + data['electionInfoUrl']);
        }
        // ensure the json data is a string
        if (data['electionNoticeText'] && !(typeof data['electionNoticeText'] === 'string' || data['electionNoticeText'] instanceof String)) {
            throw new Error("Expected the field `electionNoticeText` to be a primitive type in the JSON string but got " + data['electionNoticeText']);
        }
        // ensure the json data is a string
        if (data['electionNoticeUrl'] && !(typeof data['electionNoticeUrl'] === 'string' || data['electionNoticeUrl'] instanceof String)) {
            throw new Error("Expected the field `electionNoticeUrl` to be a primitive type in the JSON string but got " + data['electionNoticeUrl']);
        }
        if (data['electionOfficials']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['electionOfficials'])) {
                throw new Error("Expected the field `electionOfficials` to be an array in the JSON data but got " + data['electionOfficials']);
            }
            // validate the optional field `electionOfficials` (array)
            for (const item of data['electionOfficials']) {
                ElectionOfficial.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['electionRegistrationConfirmationUrl'] && !(typeof data['electionRegistrationConfirmationUrl'] === 'string' || data['electionRegistrationConfirmationUrl'] instanceof String)) {
            throw new Error("Expected the field `electionRegistrationConfirmationUrl` to be a primitive type in the JSON string but got " + data['electionRegistrationConfirmationUrl']);
        }
        // ensure the json data is a string
        if (data['electionRegistrationUrl'] && !(typeof data['electionRegistrationUrl'] === 'string' || data['electionRegistrationUrl'] instanceof String)) {
            throw new Error("Expected the field `electionRegistrationUrl` to be a primitive type in the JSON string but got " + data['electionRegistrationUrl']);
        }
        // ensure the json data is a string
        if (data['electionRulesUrl'] && !(typeof data['electionRulesUrl'] === 'string' || data['electionRulesUrl'] instanceof String)) {
            throw new Error("Expected the field `electionRulesUrl` to be a primitive type in the JSON string but got " + data['electionRulesUrl']);
        }
        // ensure the json data is a string
        if (data['hoursOfOperation'] && !(typeof data['hoursOfOperation'] === 'string' || data['hoursOfOperation'] instanceof String)) {
            throw new Error("Expected the field `hoursOfOperation` to be a primitive type in the JSON string but got " + data['hoursOfOperation']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `physicalAddress`
        if (data['physicalAddress']) { // data not null
          SimpleAddressType.validateJSON(data['physicalAddress']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['voter_services'])) {
            throw new Error("Expected the field `voter_services` to be an array in the JSON data but got " + data['voter_services']);
        }
        // ensure the json data is a string
        if (data['votingLocationFinderUrl'] && !(typeof data['votingLocationFinderUrl'] === 'string' || data['votingLocationFinderUrl'] instanceof String)) {
            throw new Error("Expected the field `votingLocationFinderUrl` to be a primitive type in the JSON string but got " + data['votingLocationFinderUrl']);
        }

        return true;
    }


}



/**
 * A URL provided by this administrative body for information on absentee voting.
 * @member {String} absenteeVotingInfoUrl
 */
AdministrativeBody.prototype['absenteeVotingInfoUrl'] = undefined;

/**
 * A URL provided by this administrative body to give contest information to the voter.
 * @member {String} ballotInfoUrl
 */
AdministrativeBody.prototype['ballotInfoUrl'] = undefined;

/**
 * @member {module:model/SimpleAddressType} correspondenceAddress
 */
AdministrativeBody.prototype['correspondenceAddress'] = undefined;

/**
 * A URL provided by this administrative body for looking up general election information.
 * @member {String} electionInfoUrl
 */
AdministrativeBody.prototype['electionInfoUrl'] = undefined;

/**
 * A last minute or emergency notification text provided by this administrative body.
 * @member {String} electionNoticeText
 */
AdministrativeBody.prototype['electionNoticeText'] = undefined;

/**
 * A URL provided by this administrative body for additional information related to the last minute or emergency notification.
 * @member {String} electionNoticeUrl
 */
AdministrativeBody.prototype['electionNoticeUrl'] = undefined;

/**
 * The election officials for this election administrative body.
 * @member {Array.<module:model/ElectionOfficial>} electionOfficials
 */
AdministrativeBody.prototype['electionOfficials'] = undefined;

/**
 * A URL provided by this administrative body for confirming that the voter is registered to vote.
 * @member {String} electionRegistrationConfirmationUrl
 */
AdministrativeBody.prototype['electionRegistrationConfirmationUrl'] = undefined;

/**
 * A URL provided by this administrative body for looking up how to register to vote.
 * @member {String} electionRegistrationUrl
 */
AdministrativeBody.prototype['electionRegistrationUrl'] = undefined;

/**
 * A URL provided by this administrative body describing election rules to the voter.
 * @member {String} electionRulesUrl
 */
AdministrativeBody.prototype['electionRulesUrl'] = undefined;

/**
 * A description of the hours of operation for this administrative body.
 * @member {String} hoursOfOperation
 */
AdministrativeBody.prototype['hoursOfOperation'] = undefined;

/**
 * The name of this election administrative body.
 * @member {String} name
 */
AdministrativeBody.prototype['name'] = undefined;

/**
 * @member {module:model/SimpleAddressType} physicalAddress
 */
AdministrativeBody.prototype['physicalAddress'] = undefined;

/**
 * A description of the services this administrative body may provide.
 * @member {Array.<String>} voter_services
 */
AdministrativeBody.prototype['voter_services'] = undefined;

/**
 * A URL provided by this administrative body for looking up where to vote.
 * @member {String} votingLocationFinderUrl
 */
AdministrativeBody.prototype['votingLocationFinderUrl'] = undefined;






export default AdministrativeBody;

