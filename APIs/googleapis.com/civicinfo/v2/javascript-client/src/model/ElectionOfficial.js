/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ElectionOfficial model module.
 * @module model/ElectionOfficial
 * @version v2
 */
class ElectionOfficial {
    /**
     * Constructs a new <code>ElectionOfficial</code>.
     * Information about individual election officials.
     * @alias module:model/ElectionOfficial
     */
    constructor() { 
        
        ElectionOfficial.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ElectionOfficial</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ElectionOfficial} obj Optional instance to populate.
     * @return {module:model/ElectionOfficial} The populated <code>ElectionOfficial</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ElectionOfficial();

            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('faxNumber')) {
                obj['faxNumber'] = ApiClient.convertToType(data['faxNumber'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('officePhoneNumber')) {
                obj['officePhoneNumber'] = ApiClient.convertToType(data['officePhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ElectionOfficial</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ElectionOfficial</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        // ensure the json data is a string
        if (data['faxNumber'] && !(typeof data['faxNumber'] === 'string' || data['faxNumber'] instanceof String)) {
            throw new Error("Expected the field `faxNumber` to be a primitive type in the JSON string but got " + data['faxNumber']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['officePhoneNumber'] && !(typeof data['officePhoneNumber'] === 'string' || data['officePhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `officePhoneNumber` to be a primitive type in the JSON string but got " + data['officePhoneNumber']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * The email address of the election official.
 * @member {String} emailAddress
 */
ElectionOfficial.prototype['emailAddress'] = undefined;

/**
 * The fax number of the election official.
 * @member {String} faxNumber
 */
ElectionOfficial.prototype['faxNumber'] = undefined;

/**
 * The full name of the election official.
 * @member {String} name
 */
ElectionOfficial.prototype['name'] = undefined;

/**
 * The office phone number of the election official.
 * @member {String} officePhoneNumber
 */
ElectionOfficial.prototype['officePhoneNumber'] = undefined;

/**
 * The title of the election official.
 * @member {String} title
 */
ElectionOfficial.prototype['title'] = undefined;






export default ElectionOfficial;

