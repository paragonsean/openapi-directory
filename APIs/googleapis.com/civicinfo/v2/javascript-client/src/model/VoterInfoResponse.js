/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdministrationRegion from './AdministrationRegion';
import Contest from './Contest';
import Election from './Election';
import PollingLocation from './PollingLocation';
import Precinct from './Precinct';
import SimpleAddressType from './SimpleAddressType';

/**
 * The VoterInfoResponse model module.
 * @module model/VoterInfoResponse
 * @version v2
 */
class VoterInfoResponse {
    /**
     * Constructs a new <code>VoterInfoResponse</code>.
     * The result of a voter info lookup query.
     * @alias module:model/VoterInfoResponse
     */
    constructor() { 
        
        VoterInfoResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'civicinfo#voterInfoResponse';
    }

    /**
     * Constructs a <code>VoterInfoResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VoterInfoResponse} obj Optional instance to populate.
     * @return {module:model/VoterInfoResponse} The populated <code>VoterInfoResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VoterInfoResponse();

            if (data.hasOwnProperty('contests')) {
                obj['contests'] = ApiClient.convertToType(data['contests'], [Contest]);
            }
            if (data.hasOwnProperty('dropOffLocations')) {
                obj['dropOffLocations'] = ApiClient.convertToType(data['dropOffLocations'], [PollingLocation]);
            }
            if (data.hasOwnProperty('earlyVoteSites')) {
                obj['earlyVoteSites'] = ApiClient.convertToType(data['earlyVoteSites'], [PollingLocation]);
            }
            if (data.hasOwnProperty('election')) {
                obj['election'] = Election.constructFromObject(data['election']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('mailOnly')) {
                obj['mailOnly'] = ApiClient.convertToType(data['mailOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('normalizedInput')) {
                obj['normalizedInput'] = SimpleAddressType.constructFromObject(data['normalizedInput']);
            }
            if (data.hasOwnProperty('otherElections')) {
                obj['otherElections'] = ApiClient.convertToType(data['otherElections'], [Election]);
            }
            if (data.hasOwnProperty('pollingLocations')) {
                obj['pollingLocations'] = ApiClient.convertToType(data['pollingLocations'], [PollingLocation]);
            }
            if (data.hasOwnProperty('precinctId')) {
                obj['precinctId'] = ApiClient.convertToType(data['precinctId'], 'String');
            }
            if (data.hasOwnProperty('precincts')) {
                obj['precincts'] = ApiClient.convertToType(data['precincts'], [Precinct]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], [AdministrationRegion]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VoterInfoResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VoterInfoResponse</code>.
     */
    static validateJSON(data) {
        if (data['contests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contests'])) {
                throw new Error("Expected the field `contests` to be an array in the JSON data but got " + data['contests']);
            }
            // validate the optional field `contests` (array)
            for (const item of data['contests']) {
                Contest.validateJSON(item);
            };
        }
        if (data['dropOffLocations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dropOffLocations'])) {
                throw new Error("Expected the field `dropOffLocations` to be an array in the JSON data but got " + data['dropOffLocations']);
            }
            // validate the optional field `dropOffLocations` (array)
            for (const item of data['dropOffLocations']) {
                PollingLocation.validateJSON(item);
            };
        }
        if (data['earlyVoteSites']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['earlyVoteSites'])) {
                throw new Error("Expected the field `earlyVoteSites` to be an array in the JSON data but got " + data['earlyVoteSites']);
            }
            // validate the optional field `earlyVoteSites` (array)
            for (const item of data['earlyVoteSites']) {
                PollingLocation.validateJSON(item);
            };
        }
        // validate the optional field `election`
        if (data['election']) { // data not null
          Election.validateJSON(data['election']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `normalizedInput`
        if (data['normalizedInput']) { // data not null
          SimpleAddressType.validateJSON(data['normalizedInput']);
        }
        if (data['otherElections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['otherElections'])) {
                throw new Error("Expected the field `otherElections` to be an array in the JSON data but got " + data['otherElections']);
            }
            // validate the optional field `otherElections` (array)
            for (const item of data['otherElections']) {
                Election.validateJSON(item);
            };
        }
        if (data['pollingLocations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pollingLocations'])) {
                throw new Error("Expected the field `pollingLocations` to be an array in the JSON data but got " + data['pollingLocations']);
            }
            // validate the optional field `pollingLocations` (array)
            for (const item of data['pollingLocations']) {
                PollingLocation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['precinctId'] && !(typeof data['precinctId'] === 'string' || data['precinctId'] instanceof String)) {
            throw new Error("Expected the field `precinctId` to be a primitive type in the JSON string but got " + data['precinctId']);
        }
        if (data['precincts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['precincts'])) {
                throw new Error("Expected the field `precincts` to be an array in the JSON data but got " + data['precincts']);
            }
            // validate the optional field `precincts` (array)
            for (const item of data['precincts']) {
                Precinct.validateJSON(item);
            };
        }
        if (data['state']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['state'])) {
                throw new Error("Expected the field `state` to be an array in the JSON data but got " + data['state']);
            }
            // validate the optional field `state` (array)
            for (const item of data['state']) {
                AdministrationRegion.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Contests that will appear on the voter's ballot.
 * @member {Array.<module:model/Contest>} contests
 */
VoterInfoResponse.prototype['contests'] = undefined;

/**
 * Locations where a voter is eligible to drop off a completed ballot. The voter must have received and completed a ballot prior to arriving at the location. The location may not have ballots available on the premises. These locations could be open on or before election day as indicated in the pollingHours field.
 * @member {Array.<module:model/PollingLocation>} dropOffLocations
 */
VoterInfoResponse.prototype['dropOffLocations'] = undefined;

/**
 * Locations where the voter is eligible to vote early, prior to election day.
 * @member {Array.<module:model/PollingLocation>} earlyVoteSites
 */
VoterInfoResponse.prototype['earlyVoteSites'] = undefined;

/**
 * @member {module:model/Election} election
 */
VoterInfoResponse.prototype['election'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"civicinfo#voterInfoResponse\".
 * @member {String} kind
 * @default 'civicinfo#voterInfoResponse'
 */
VoterInfoResponse.prototype['kind'] = 'civicinfo#voterInfoResponse';

/**
 * Specifies whether voters in the precinct vote only by mailing their ballots (with the possible option of dropping off their ballots as well).
 * @member {Boolean} mailOnly
 */
VoterInfoResponse.prototype['mailOnly'] = undefined;

/**
 * @member {module:model/SimpleAddressType} normalizedInput
 */
VoterInfoResponse.prototype['normalizedInput'] = undefined;

/**
 * When there are multiple elections for a voter address, the otherElections field is populated in the API response and there are two possibilities: 1. If the earliest election is not the intended election, specify the election ID of the desired election in a second API request using the electionId field. 2. If these elections occur on the same day, the API doesn?t return any polling location, contest, or election official information to ensure that an additional query is made. For user-facing applications, we recommend displaying these elections to the user to disambiguate. A second API request using the electionId field should be made for the election that is relevant to the user.
 * @member {Array.<module:model/Election>} otherElections
 */
VoterInfoResponse.prototype['otherElections'] = undefined;

/**
 * Locations where the voter is eligible to vote on election day.
 * @member {Array.<module:model/PollingLocation>} pollingLocations
 */
VoterInfoResponse.prototype['pollingLocations'] = undefined;

/**
 * @member {String} precinctId
 */
VoterInfoResponse.prototype['precinctId'] = undefined;

/**
 * The precincts that match this voter's address. Will only be returned for project IDs which have been allowlisted as \"partner projects\".
 * @member {Array.<module:model/Precinct>} precincts
 */
VoterInfoResponse.prototype['precincts'] = undefined;

/**
 * Local Election Information for the state that the voter votes in. For the US, there will only be one element in this array.
 * @member {Array.<module:model/AdministrationRegion>} state
 */
VoterInfoResponse.prototype['state'] = undefined;






export default VoterInfoResponse;

