/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Channel from './Channel';

/**
 * The Candidate model module.
 * @module model/Candidate
 * @version v2
 */
class Candidate {
    /**
     * Constructs a new <code>Candidate</code>.
     * Information about a candidate running for elected office.
     * @alias module:model/Candidate
     */
    constructor() { 
        
        Candidate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Candidate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Candidate} obj Optional instance to populate.
     * @return {module:model/Candidate} The populated <code>Candidate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Candidate();

            if (data.hasOwnProperty('candidateUrl')) {
                obj['candidateUrl'] = ApiClient.convertToType(data['candidateUrl'], 'String');
            }
            if (data.hasOwnProperty('channels')) {
                obj['channels'] = ApiClient.convertToType(data['channels'], [Channel]);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('orderOnBallot')) {
                obj['orderOnBallot'] = ApiClient.convertToType(data['orderOnBallot'], 'String');
            }
            if (data.hasOwnProperty('party')) {
                obj['party'] = ApiClient.convertToType(data['party'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('photoUrl')) {
                obj['photoUrl'] = ApiClient.convertToType(data['photoUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Candidate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Candidate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['candidateUrl'] && !(typeof data['candidateUrl'] === 'string' || data['candidateUrl'] instanceof String)) {
            throw new Error("Expected the field `candidateUrl` to be a primitive type in the JSON string but got " + data['candidateUrl']);
        }
        if (data['channels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['channels'])) {
                throw new Error("Expected the field `channels` to be an array in the JSON data but got " + data['channels']);
            }
            // validate the optional field `channels` (array)
            for (const item of data['channels']) {
                Channel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['orderOnBallot'] && !(typeof data['orderOnBallot'] === 'string' || data['orderOnBallot'] instanceof String)) {
            throw new Error("Expected the field `orderOnBallot` to be a primitive type in the JSON string but got " + data['orderOnBallot']);
        }
        // ensure the json data is a string
        if (data['party'] && !(typeof data['party'] === 'string' || data['party'] instanceof String)) {
            throw new Error("Expected the field `party` to be a primitive type in the JSON string but got " + data['party']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['photoUrl'] && !(typeof data['photoUrl'] === 'string' || data['photoUrl'] instanceof String)) {
            throw new Error("Expected the field `photoUrl` to be a primitive type in the JSON string but got " + data['photoUrl']);
        }

        return true;
    }


}



/**
 * The URL for the candidate's campaign web site.
 * @member {String} candidateUrl
 */
Candidate.prototype['candidateUrl'] = undefined;

/**
 * A list of known (social) media channels for this candidate.
 * @member {Array.<module:model/Channel>} channels
 */
Candidate.prototype['channels'] = undefined;

/**
 * The email address for the candidate's campaign.
 * @member {String} email
 */
Candidate.prototype['email'] = undefined;

/**
 * The candidate's name. If this is a joint ticket it will indicate the name of the candidate at the top of a ticket followed by a / and that name of candidate at the bottom of the ticket. e.g. \"Mitt Romney / Paul Ryan\"
 * @member {String} name
 */
Candidate.prototype['name'] = undefined;

/**
 * The order the candidate appears on the ballot for this contest.
 * @member {String} orderOnBallot
 */
Candidate.prototype['orderOnBallot'] = undefined;

/**
 * The full name of the party the candidate is a member of.
 * @member {String} party
 */
Candidate.prototype['party'] = undefined;

/**
 * The voice phone number for the candidate's campaign office.
 * @member {String} phone
 */
Candidate.prototype['phone'] = undefined;

/**
 * A URL for a photo of the candidate.
 * @member {String} photoUrl
 */
Candidate.prototype['photoUrl'] = undefined;






export default Candidate;

