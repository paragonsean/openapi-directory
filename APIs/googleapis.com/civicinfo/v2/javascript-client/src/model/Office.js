/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Source from './Source';

/**
 * The Office model module.
 * @module model/Office
 * @version v2
 */
class Office {
    /**
     * Constructs a new <code>Office</code>.
     * Information about an Office held by one or more Officials.
     * @alias module:model/Office
     */
    constructor() { 
        
        Office.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Office</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Office} obj Optional instance to populate.
     * @return {module:model/Office} The populated <code>Office</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Office();

            if (data.hasOwnProperty('divisionId')) {
                obj['divisionId'] = ApiClient.convertToType(data['divisionId'], 'String');
            }
            if (data.hasOwnProperty('levels')) {
                obj['levels'] = ApiClient.convertToType(data['levels'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('officialIndices')) {
                obj['officialIndices'] = ApiClient.convertToType(data['officialIndices'], ['Number']);
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], ['String']);
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [Source]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Office</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Office</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['divisionId'] && !(typeof data['divisionId'] === 'string' || data['divisionId'] instanceof String)) {
            throw new Error("Expected the field `divisionId` to be a primitive type in the JSON string but got " + data['divisionId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['levels'])) {
            throw new Error("Expected the field `levels` to be an array in the JSON data but got " + data['levels']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['officialIndices'])) {
            throw new Error("Expected the field `officialIndices` to be an array in the JSON data but got " + data['officialIndices']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['roles'])) {
            throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
        }
        if (data['sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sources'])) {
                throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
            }
            // validate the optional field `sources` (array)
            for (const item of data['sources']) {
                Source.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The OCD ID of the division with which this office is associated.
 * @member {String} divisionId
 */
Office.prototype['divisionId'] = undefined;

/**
 * The levels of government of which this office is part. There may be more than one in cases where a jurisdiction effectively acts at two different levels of government; for example, the mayor of the District of Columbia acts at \"locality\" level, but also effectively at both \"administrative-area-2\" and \"administrative-area-1\".
 * @member {Array.<module:model/Office.LevelsEnum>} levels
 */
Office.prototype['levels'] = undefined;

/**
 * The human-readable name of the office.
 * @member {String} name
 */
Office.prototype['name'] = undefined;

/**
 * List of indices in the officials array of people who presently hold this office.
 * @member {Array.<Number>} officialIndices
 */
Office.prototype['officialIndices'] = undefined;

/**
 * The roles which this office fulfills. Roles are not meant to be exhaustive, or to exactly specify the entire set of responsibilities of a given office, but are meant to be rough categories that are useful for general selection from or sorting of a list of offices.
 * @member {Array.<module:model/Office.RolesEnum>} roles
 */
Office.prototype['roles'] = undefined;

/**
 * A list of sources for this office. If multiple sources are listed, the data has been aggregated from those sources.
 * @member {Array.<module:model/Source>} sources
 */
Office.prototype['sources'] = undefined;





/**
 * Allowed values for the <code>levels</code> property.
 * @enum {String}
 * @readonly
 */
Office['LevelsEnum'] = {

    /**
     * value: "international"
     * @const
     */
    "international": "international",

    /**
     * value: "country"
     * @const
     */
    "country": "country",

    /**
     * value: "administrativeArea1"
     * @const
     */
    "administrativeArea1": "administrativeArea1",

    /**
     * value: "regional"
     * @const
     */
    "regional": "regional",

    /**
     * value: "administrativeArea2"
     * @const
     */
    "administrativeArea2": "administrativeArea2",

    /**
     * value: "locality"
     * @const
     */
    "locality": "locality",

    /**
     * value: "subLocality1"
     * @const
     */
    "subLocality1": "subLocality1",

    /**
     * value: "subLocality2"
     * @const
     */
    "subLocality2": "subLocality2",

    /**
     * value: "special"
     * @const
     */
    "special": "special"
};


/**
 * Allowed values for the <code>roles</code> property.
 * @enum {String}
 * @readonly
 */
Office['RolesEnum'] = {

    /**
     * value: "headOfState"
     * @const
     */
    "headOfState": "headOfState",

    /**
     * value: "headOfGovernment"
     * @const
     */
    "headOfGovernment": "headOfGovernment",

    /**
     * value: "deputyHeadOfGovernment"
     * @const
     */
    "deputyHeadOfGovernment": "deputyHeadOfGovernment",

    /**
     * value: "governmentOfficer"
     * @const
     */
    "governmentOfficer": "governmentOfficer",

    /**
     * value: "executiveCouncil"
     * @const
     */
    "executiveCouncil": "executiveCouncil",

    /**
     * value: "legislatorUpperBody"
     * @const
     */
    "legislatorUpperBody": "legislatorUpperBody",

    /**
     * value: "legislatorLowerBody"
     * @const
     */
    "legislatorLowerBody": "legislatorLowerBody",

    /**
     * value: "highestCourtJudge"
     * @const
     */
    "highestCourtJudge": "highestCourtJudge",

    /**
     * value: "judge"
     * @const
     */
    "judge": "judge",

    /**
     * value: "schoolBoard"
     * @const
     */
    "schoolBoard": "schoolBoard",

    /**
     * value: "specialPurposeOfficer"
     * @const
     */
    "specialPurposeOfficer": "specialPurposeOfficer",

    /**
     * value: "otherRole"
     * @const
     */
    "otherRole": "otherRole"
};



export default Office;

