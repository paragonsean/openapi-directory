/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Candidate from './Candidate';
import ElectoralDistrict from './ElectoralDistrict';
import Source from './Source';

/**
 * The Contest model module.
 * @module model/Contest
 * @version v2
 */
class Contest {
    /**
     * Constructs a new <code>Contest</code>.
     * Information about a contest that appears on a voter&#39;s ballot.
     * @alias module:model/Contest
     */
    constructor() { 
        
        Contest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Contest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Contest} obj Optional instance to populate.
     * @return {module:model/Contest} The populated <code>Contest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Contest();

            if (data.hasOwnProperty('ballotPlacement')) {
                obj['ballotPlacement'] = ApiClient.convertToType(data['ballotPlacement'], 'String');
            }
            if (data.hasOwnProperty('ballotTitle')) {
                obj['ballotTitle'] = ApiClient.convertToType(data['ballotTitle'], 'String');
            }
            if (data.hasOwnProperty('candidates')) {
                obj['candidates'] = ApiClient.convertToType(data['candidates'], [Candidate]);
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ElectoralDistrict.constructFromObject(data['district']);
            }
            if (data.hasOwnProperty('electorateSpecifications')) {
                obj['electorateSpecifications'] = ApiClient.convertToType(data['electorateSpecifications'], 'String');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], ['String']);
            }
            if (data.hasOwnProperty('numberElected')) {
                obj['numberElected'] = ApiClient.convertToType(data['numberElected'], 'String');
            }
            if (data.hasOwnProperty('numberVotingFor')) {
                obj['numberVotingFor'] = ApiClient.convertToType(data['numberVotingFor'], 'String');
            }
            if (data.hasOwnProperty('office')) {
                obj['office'] = ApiClient.convertToType(data['office'], 'String');
            }
            if (data.hasOwnProperty('primaryParties')) {
                obj['primaryParties'] = ApiClient.convertToType(data['primaryParties'], ['String']);
            }
            if (data.hasOwnProperty('referendumBallotResponses')) {
                obj['referendumBallotResponses'] = ApiClient.convertToType(data['referendumBallotResponses'], ['String']);
            }
            if (data.hasOwnProperty('referendumBrief')) {
                obj['referendumBrief'] = ApiClient.convertToType(data['referendumBrief'], 'String');
            }
            if (data.hasOwnProperty('referendumConStatement')) {
                obj['referendumConStatement'] = ApiClient.convertToType(data['referendumConStatement'], 'String');
            }
            if (data.hasOwnProperty('referendumEffectOfAbstain')) {
                obj['referendumEffectOfAbstain'] = ApiClient.convertToType(data['referendumEffectOfAbstain'], 'String');
            }
            if (data.hasOwnProperty('referendumPassageThreshold')) {
                obj['referendumPassageThreshold'] = ApiClient.convertToType(data['referendumPassageThreshold'], 'String');
            }
            if (data.hasOwnProperty('referendumProStatement')) {
                obj['referendumProStatement'] = ApiClient.convertToType(data['referendumProStatement'], 'String');
            }
            if (data.hasOwnProperty('referendumSubtitle')) {
                obj['referendumSubtitle'] = ApiClient.convertToType(data['referendumSubtitle'], 'String');
            }
            if (data.hasOwnProperty('referendumText')) {
                obj['referendumText'] = ApiClient.convertToType(data['referendumText'], 'String');
            }
            if (data.hasOwnProperty('referendumTitle')) {
                obj['referendumTitle'] = ApiClient.convertToType(data['referendumTitle'], 'String');
            }
            if (data.hasOwnProperty('referendumUrl')) {
                obj['referendumUrl'] = ApiClient.convertToType(data['referendumUrl'], 'String');
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], ['String']);
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [Source]);
            }
            if (data.hasOwnProperty('special')) {
                obj['special'] = ApiClient.convertToType(data['special'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Contest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Contest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ballotPlacement'] && !(typeof data['ballotPlacement'] === 'string' || data['ballotPlacement'] instanceof String)) {
            throw new Error("Expected the field `ballotPlacement` to be a primitive type in the JSON string but got " + data['ballotPlacement']);
        }
        // ensure the json data is a string
        if (data['ballotTitle'] && !(typeof data['ballotTitle'] === 'string' || data['ballotTitle'] instanceof String)) {
            throw new Error("Expected the field `ballotTitle` to be a primitive type in the JSON string but got " + data['ballotTitle']);
        }
        if (data['candidates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['candidates'])) {
                throw new Error("Expected the field `candidates` to be an array in the JSON data but got " + data['candidates']);
            }
            // validate the optional field `candidates` (array)
            for (const item of data['candidates']) {
                Candidate.validateJSON(item);
            };
        }
        // validate the optional field `district`
        if (data['district']) { // data not null
          ElectoralDistrict.validateJSON(data['district']);
        }
        // ensure the json data is a string
        if (data['electorateSpecifications'] && !(typeof data['electorateSpecifications'] === 'string' || data['electorateSpecifications'] instanceof String)) {
            throw new Error("Expected the field `electorateSpecifications` to be a primitive type in the JSON string but got " + data['electorateSpecifications']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['level'])) {
            throw new Error("Expected the field `level` to be an array in the JSON data but got " + data['level']);
        }
        // ensure the json data is a string
        if (data['numberElected'] && !(typeof data['numberElected'] === 'string' || data['numberElected'] instanceof String)) {
            throw new Error("Expected the field `numberElected` to be a primitive type in the JSON string but got " + data['numberElected']);
        }
        // ensure the json data is a string
        if (data['numberVotingFor'] && !(typeof data['numberVotingFor'] === 'string' || data['numberVotingFor'] instanceof String)) {
            throw new Error("Expected the field `numberVotingFor` to be a primitive type in the JSON string but got " + data['numberVotingFor']);
        }
        // ensure the json data is a string
        if (data['office'] && !(typeof data['office'] === 'string' || data['office'] instanceof String)) {
            throw new Error("Expected the field `office` to be a primitive type in the JSON string but got " + data['office']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['primaryParties'])) {
            throw new Error("Expected the field `primaryParties` to be an array in the JSON data but got " + data['primaryParties']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['referendumBallotResponses'])) {
            throw new Error("Expected the field `referendumBallotResponses` to be an array in the JSON data but got " + data['referendumBallotResponses']);
        }
        // ensure the json data is a string
        if (data['referendumBrief'] && !(typeof data['referendumBrief'] === 'string' || data['referendumBrief'] instanceof String)) {
            throw new Error("Expected the field `referendumBrief` to be a primitive type in the JSON string but got " + data['referendumBrief']);
        }
        // ensure the json data is a string
        if (data['referendumConStatement'] && !(typeof data['referendumConStatement'] === 'string' || data['referendumConStatement'] instanceof String)) {
            throw new Error("Expected the field `referendumConStatement` to be a primitive type in the JSON string but got " + data['referendumConStatement']);
        }
        // ensure the json data is a string
        if (data['referendumEffectOfAbstain'] && !(typeof data['referendumEffectOfAbstain'] === 'string' || data['referendumEffectOfAbstain'] instanceof String)) {
            throw new Error("Expected the field `referendumEffectOfAbstain` to be a primitive type in the JSON string but got " + data['referendumEffectOfAbstain']);
        }
        // ensure the json data is a string
        if (data['referendumPassageThreshold'] && !(typeof data['referendumPassageThreshold'] === 'string' || data['referendumPassageThreshold'] instanceof String)) {
            throw new Error("Expected the field `referendumPassageThreshold` to be a primitive type in the JSON string but got " + data['referendumPassageThreshold']);
        }
        // ensure the json data is a string
        if (data['referendumProStatement'] && !(typeof data['referendumProStatement'] === 'string' || data['referendumProStatement'] instanceof String)) {
            throw new Error("Expected the field `referendumProStatement` to be a primitive type in the JSON string but got " + data['referendumProStatement']);
        }
        // ensure the json data is a string
        if (data['referendumSubtitle'] && !(typeof data['referendumSubtitle'] === 'string' || data['referendumSubtitle'] instanceof String)) {
            throw new Error("Expected the field `referendumSubtitle` to be a primitive type in the JSON string but got " + data['referendumSubtitle']);
        }
        // ensure the json data is a string
        if (data['referendumText'] && !(typeof data['referendumText'] === 'string' || data['referendumText'] instanceof String)) {
            throw new Error("Expected the field `referendumText` to be a primitive type in the JSON string but got " + data['referendumText']);
        }
        // ensure the json data is a string
        if (data['referendumTitle'] && !(typeof data['referendumTitle'] === 'string' || data['referendumTitle'] instanceof String)) {
            throw new Error("Expected the field `referendumTitle` to be a primitive type in the JSON string but got " + data['referendumTitle']);
        }
        // ensure the json data is a string
        if (data['referendumUrl'] && !(typeof data['referendumUrl'] === 'string' || data['referendumUrl'] instanceof String)) {
            throw new Error("Expected the field `referendumUrl` to be a primitive type in the JSON string but got " + data['referendumUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['roles'])) {
            throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
        }
        if (data['sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sources'])) {
                throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
            }
            // validate the optional field `sources` (array)
            for (const item of data['sources']) {
                Source.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['special'] && !(typeof data['special'] === 'string' || data['special'] instanceof String)) {
            throw new Error("Expected the field `special` to be a primitive type in the JSON string but got " + data['special']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * A number specifying the position of this contest on the voter's ballot.
 * @member {String} ballotPlacement
 */
Contest.prototype['ballotPlacement'] = undefined;

/**
 * The official title on the ballot for this contest, only where available.
 * @member {String} ballotTitle
 */
Contest.prototype['ballotTitle'] = undefined;

/**
 * The candidate choices for this contest.
 * @member {Array.<module:model/Candidate>} candidates
 */
Contest.prototype['candidates'] = undefined;

/**
 * @member {module:model/ElectoralDistrict} district
 */
Contest.prototype['district'] = undefined;

/**
 * A description of any additional eligibility requirements for voting in this contest.
 * @member {String} electorateSpecifications
 */
Contest.prototype['electorateSpecifications'] = undefined;

/**
 * The levels of government of the office for this contest. There may be more than one in cases where a jurisdiction effectively acts at two different levels of government; for example, the mayor of the District of Columbia acts at \"locality\" level, but also effectively at both \"administrative-area-2\" and \"administrative-area-1\".
 * @member {Array.<module:model/Contest.LevelEnum>} level
 */
Contest.prototype['level'] = undefined;

/**
 * The number of candidates that will be elected to office in this contest.
 * @member {String} numberElected
 */
Contest.prototype['numberElected'] = undefined;

/**
 * The number of candidates that a voter may vote for in this contest.
 * @member {String} numberVotingFor
 */
Contest.prototype['numberVotingFor'] = undefined;

/**
 * The name of the office for this contest.
 * @member {String} office
 */
Contest.prototype['office'] = undefined;

/**
 * If this is a partisan election, the name of the party/parties it is for.
 * @member {Array.<String>} primaryParties
 */
Contest.prototype['primaryParties'] = undefined;

/**
 * The set of ballot responses for the referendum. A ballot response represents a line on the ballot. Common examples might include \"yes\" or \"no\" for referenda. This field is only populated for contests of type 'Referendum'.
 * @member {Array.<String>} referendumBallotResponses
 */
Contest.prototype['referendumBallotResponses'] = undefined;

/**
 * Specifies a short summary of the referendum that is typically on the ballot below the title but above the text. This field is only populated for contests of type 'Referendum'.
 * @member {String} referendumBrief
 */
Contest.prototype['referendumBrief'] = undefined;

/**
 * A statement in opposition to the referendum. It does not necessarily appear on the ballot. This field is only populated for contests of type 'Referendum'.
 * @member {String} referendumConStatement
 */
Contest.prototype['referendumConStatement'] = undefined;

/**
 * Specifies what effect abstaining (not voting) on the proposition will have (i.e. whether abstaining is considered a vote against it). This field is only populated for contests of type 'Referendum'.
 * @member {String} referendumEffectOfAbstain
 */
Contest.prototype['referendumEffectOfAbstain'] = undefined;

/**
 * The threshold of votes that the referendum needs in order to pass, e.g. \"two-thirds\". This field is only populated for contests of type 'Referendum'.
 * @member {String} referendumPassageThreshold
 */
Contest.prototype['referendumPassageThreshold'] = undefined;

/**
 * A statement in favor of the referendum. It does not necessarily appear on the ballot. This field is only populated for contests of type 'Referendum'.
 * @member {String} referendumProStatement
 */
Contest.prototype['referendumProStatement'] = undefined;

/**
 * A brief description of the referendum. This field is only populated for contests of type 'Referendum'.
 * @member {String} referendumSubtitle
 */
Contest.prototype['referendumSubtitle'] = undefined;

/**
 * The full text of the referendum. This field is only populated for contests of type 'Referendum'.
 * @member {String} referendumText
 */
Contest.prototype['referendumText'] = undefined;

/**
 * The title of the referendum (e.g. 'Proposition 42'). This field is only populated for contests of type 'Referendum'.
 * @member {String} referendumTitle
 */
Contest.prototype['referendumTitle'] = undefined;

/**
 * A link to the referendum. This field is only populated for contests of type 'Referendum'.
 * @member {String} referendumUrl
 */
Contest.prototype['referendumUrl'] = undefined;

/**
 * The roles which this office fulfills.
 * @member {Array.<module:model/Contest.RolesEnum>} roles
 */
Contest.prototype['roles'] = undefined;

/**
 * A list of sources for this contest. If multiple sources are listed, the data has been aggregated from those sources.
 * @member {Array.<module:model/Source>} sources
 */
Contest.prototype['sources'] = undefined;

/**
 * \"Yes\" or \"No\" depending on whether this a contest being held outside the normal election cycle.
 * @member {String} special
 */
Contest.prototype['special'] = undefined;

/**
 * The type of contest. Usually this will be 'General', 'Primary', or 'Run-off' for contests with candidates. For referenda this will be 'Referendum'. For Retention contests this will typically be 'Retention'.
 * @member {String} type
 */
Contest.prototype['type'] = undefined;





/**
 * Allowed values for the <code>level</code> property.
 * @enum {String}
 * @readonly
 */
Contest['LevelEnum'] = {

    /**
     * value: "international"
     * @const
     */
    "international": "international",

    /**
     * value: "country"
     * @const
     */
    "country": "country",

    /**
     * value: "administrativeArea1"
     * @const
     */
    "administrativeArea1": "administrativeArea1",

    /**
     * value: "regional"
     * @const
     */
    "regional": "regional",

    /**
     * value: "administrativeArea2"
     * @const
     */
    "administrativeArea2": "administrativeArea2",

    /**
     * value: "locality"
     * @const
     */
    "locality": "locality",

    /**
     * value: "subLocality1"
     * @const
     */
    "subLocality1": "subLocality1",

    /**
     * value: "subLocality2"
     * @const
     */
    "subLocality2": "subLocality2",

    /**
     * value: "special"
     * @const
     */
    "special": "special"
};


/**
 * Allowed values for the <code>roles</code> property.
 * @enum {String}
 * @readonly
 */
Contest['RolesEnum'] = {

    /**
     * value: "headOfState"
     * @const
     */
    "headOfState": "headOfState",

    /**
     * value: "headOfGovernment"
     * @const
     */
    "headOfGovernment": "headOfGovernment",

    /**
     * value: "deputyHeadOfGovernment"
     * @const
     */
    "deputyHeadOfGovernment": "deputyHeadOfGovernment",

    /**
     * value: "governmentOfficer"
     * @const
     */
    "governmentOfficer": "governmentOfficer",

    /**
     * value: "executiveCouncil"
     * @const
     */
    "executiveCouncil": "executiveCouncil",

    /**
     * value: "legislatorUpperBody"
     * @const
     */
    "legislatorUpperBody": "legislatorUpperBody",

    /**
     * value: "legislatorLowerBody"
     * @const
     */
    "legislatorLowerBody": "legislatorLowerBody",

    /**
     * value: "highestCourtJudge"
     * @const
     */
    "highestCourtJudge": "highestCourtJudge",

    /**
     * value: "judge"
     * @const
     */
    "judge": "judge",

    /**
     * value: "schoolBoard"
     * @const
     */
    "schoolBoard": "schoolBoard",

    /**
     * value: "specialPurposeOfficer"
     * @const
     */
    "specialPurposeOfficer": "specialPurposeOfficer",

    /**
     * value: "otherRole"
     * @const
     */
    "otherRole": "otherRole"
};



export default Contest;

