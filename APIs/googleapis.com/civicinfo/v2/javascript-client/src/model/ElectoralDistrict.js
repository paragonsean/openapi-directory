/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ElectoralDistrict model module.
 * @module model/ElectoralDistrict
 * @version v2
 */
class ElectoralDistrict {
    /**
     * Constructs a new <code>ElectoralDistrict</code>.
     * Describes the geographic scope of a contest.
     * @alias module:model/ElectoralDistrict
     */
    constructor() { 
        
        ElectoralDistrict.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ElectoralDistrict</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ElectoralDistrict} obj Optional instance to populate.
     * @return {module:model/ElectoralDistrict} The populated <code>ElectoralDistrict</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ElectoralDistrict();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ElectoralDistrict</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ElectoralDistrict</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }

        return true;
    }


}



/**
 * An identifier for this district, relative to its scope. For example, the 34th State Senate district would have id \"34\" and a scope of stateUpper.
 * @member {String} id
 */
ElectoralDistrict.prototype['id'] = undefined;

/**
 * The name of the district.
 * @member {String} name
 */
ElectoralDistrict.prototype['name'] = undefined;

/**
 * The geographic scope of this district. If unspecified the district's geography is not known. One of: national, statewide, congressional, stateUpper, stateLower, countywide, judicial, schoolBoard, cityWide, township, countyCouncil, cityCouncil, ward, special
 * @member {module:model/ElectoralDistrict.ScopeEnum} scope
 */
ElectoralDistrict.prototype['scope'] = undefined;





/**
 * Allowed values for the <code>scope</code> property.
 * @enum {String}
 * @readonly
 */
ElectoralDistrict['ScopeEnum'] = {

    /**
     * value: "statewide"
     * @const
     */
    "statewide": "statewide",

    /**
     * value: "congressional"
     * @const
     */
    "congressional": "congressional",

    /**
     * value: "stateUpper"
     * @const
     */
    "stateUpper": "stateUpper",

    /**
     * value: "stateLower"
     * @const
     */
    "stateLower": "stateLower",

    /**
     * value: "countywide"
     * @const
     */
    "countywide": "countywide",

    /**
     * value: "judicial"
     * @const
     */
    "judicial": "judicial",

    /**
     * value: "schoolBoard"
     * @const
     */
    "schoolBoard": "schoolBoard",

    /**
     * value: "citywide"
     * @const
     */
    "citywide": "citywide",

    /**
     * value: "special"
     * @const
     */
    "special": "special",

    /**
     * value: "countyCouncil"
     * @const
     */
    "countyCouncil": "countyCouncil",

    /**
     * value: "township"
     * @const
     */
    "township": "township",

    /**
     * value: "ward"
     * @const
     */
    "ward": "ward",

    /**
     * value: "cityCouncil"
     * @const
     */
    "cityCouncil": "cityCouncil",

    /**
     * value: "national"
     * @const
     */
    "national": "national"
};



export default ElectoralDistrict;

