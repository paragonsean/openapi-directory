/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimpleAddressType from './SimpleAddressType';
import Source from './Source';

/**
 * The PollingLocation model module.
 * @module model/PollingLocation
 * @version v2
 */
class PollingLocation {
    /**
     * Constructs a new <code>PollingLocation</code>.
     * A location where a voter can vote. This may be an early vote site, an election day voting location, or a drop off location for a completed ballot.
     * @alias module:model/PollingLocation
     */
    constructor() { 
        
        PollingLocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PollingLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PollingLocation} obj Optional instance to populate.
     * @return {module:model/PollingLocation} The populated <code>PollingLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PollingLocation();

            if (data.hasOwnProperty('address')) {
                obj['address'] = SimpleAddressType.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('pollingHours')) {
                obj['pollingHours'] = ApiClient.convertToType(data['pollingHours'], 'String');
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [Source]);
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'String');
            }
            if (data.hasOwnProperty('voterServices')) {
                obj['voterServices'] = ApiClient.convertToType(data['voterServices'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PollingLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PollingLocation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          SimpleAddressType.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['endDate'] && !(typeof data['endDate'] === 'string' || data['endDate'] instanceof String)) {
            throw new Error("Expected the field `endDate` to be a primitive type in the JSON string but got " + data['endDate']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['pollingHours'] && !(typeof data['pollingHours'] === 'string' || data['pollingHours'] instanceof String)) {
            throw new Error("Expected the field `pollingHours` to be a primitive type in the JSON string but got " + data['pollingHours']);
        }
        if (data['sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sources'])) {
                throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
            }
            // validate the optional field `sources` (array)
            for (const item of data['sources']) {
                Source.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['startDate'] && !(typeof data['startDate'] === 'string' || data['startDate'] instanceof String)) {
            throw new Error("Expected the field `startDate` to be a primitive type in the JSON string but got " + data['startDate']);
        }
        // ensure the json data is a string
        if (data['voterServices'] && !(typeof data['voterServices'] === 'string' || data['voterServices'] instanceof String)) {
            throw new Error("Expected the field `voterServices` to be a primitive type in the JSON string but got " + data['voterServices']);
        }

        return true;
    }


}



/**
 * @member {module:model/SimpleAddressType} address
 */
PollingLocation.prototype['address'] = undefined;

/**
 * The last date that this early vote site or drop off location may be used. This field is not populated for polling locations.
 * @member {String} endDate
 */
PollingLocation.prototype['endDate'] = undefined;

/**
 * Latitude of the location, in degrees north of the equator. Note this field may not be available for some locations.
 * @member {Number} latitude
 */
PollingLocation.prototype['latitude'] = undefined;

/**
 * Longitude of the location, in degrees east of the Prime Meridian. Note this field may not be available for some locations.
 * @member {Number} longitude
 */
PollingLocation.prototype['longitude'] = undefined;

/**
 * The name of the early vote site or drop off location. This field is not populated for polling locations.
 * @member {String} name
 */
PollingLocation.prototype['name'] = undefined;

/**
 * Notes about this location (e.g. accessibility ramp or entrance to use).
 * @member {String} notes
 */
PollingLocation.prototype['notes'] = undefined;

/**
 * A description of when this location is open.
 * @member {String} pollingHours
 */
PollingLocation.prototype['pollingHours'] = undefined;

/**
 * A list of sources for this location. If multiple sources are listed the data has been aggregated from those sources.
 * @member {Array.<module:model/Source>} sources
 */
PollingLocation.prototype['sources'] = undefined;

/**
 * The first date that this early vote site or drop off location may be used. This field is not populated for polling locations.
 * @member {String} startDate
 */
PollingLocation.prototype['startDate'] = undefined;

/**
 * The services provided by this early vote site or drop off location. This field is not populated for polling locations.
 * @member {String} voterServices
 */
PollingLocation.prototype['voterServices'] = undefined;






export default PollingLocation;

