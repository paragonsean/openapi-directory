/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Election model module.
 * @module model/Election
 * @version v2
 */
class Election {
    /**
     * Constructs a new <code>Election</code>.
     * Information about the election that was queried.
     * @alias module:model/Election
     */
    constructor() { 
        
        Election.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Election</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Election} obj Optional instance to populate.
     * @return {module:model/Election} The populated <code>Election</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Election();

            if (data.hasOwnProperty('electionDay')) {
                obj['electionDay'] = ApiClient.convertToType(data['electionDay'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ocdDivisionId')) {
                obj['ocdDivisionId'] = ApiClient.convertToType(data['ocdDivisionId'], 'String');
            }
            if (data.hasOwnProperty('shapeLookupBehavior')) {
                obj['shapeLookupBehavior'] = ApiClient.convertToType(data['shapeLookupBehavior'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Election</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Election</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['electionDay'] && !(typeof data['electionDay'] === 'string' || data['electionDay'] instanceof String)) {
            throw new Error("Expected the field `electionDay` to be a primitive type in the JSON string but got " + data['electionDay']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ocdDivisionId'] && !(typeof data['ocdDivisionId'] === 'string' || data['ocdDivisionId'] instanceof String)) {
            throw new Error("Expected the field `ocdDivisionId` to be a primitive type in the JSON string but got " + data['ocdDivisionId']);
        }
        // ensure the json data is a string
        if (data['shapeLookupBehavior'] && !(typeof data['shapeLookupBehavior'] === 'string' || data['shapeLookupBehavior'] instanceof String)) {
            throw new Error("Expected the field `shapeLookupBehavior` to be a primitive type in the JSON string but got " + data['shapeLookupBehavior']);
        }

        return true;
    }


}



/**
 * Day of the election in YYYY-MM-DD format.
 * @member {String} electionDay
 */
Election.prototype['electionDay'] = undefined;

/**
 * The unique ID of this election.
 * @member {String} id
 */
Election.prototype['id'] = undefined;

/**
 * A displayable name for the election.
 * @member {String} name
 */
Election.prototype['name'] = undefined;

/**
 * The political division of the election. Represented as an OCD Division ID. Voters within these political jurisdictions are covered by this election. This is typically a state such as ocd-division/country:us/state:ca or for the midterms or general election the entire US (i.e. ocd-division/country:us).
 * @member {String} ocdDivisionId
 */
Election.prototype['ocdDivisionId'] = undefined;

/**
 * @member {module:model/Election.ShapeLookupBehaviorEnum} shapeLookupBehavior
 */
Election.prototype['shapeLookupBehavior'] = undefined;





/**
 * Allowed values for the <code>shapeLookupBehavior</code> property.
 * @enum {String}
 * @readonly
 */
Election['ShapeLookupBehaviorEnum'] = {

    /**
     * value: "shapeLookupDefault"
     * @const
     */
    "shapeLookupDefault": "shapeLookupDefault",

    /**
     * value: "shapeLookupDisabled"
     * @const
     */
    "shapeLookupDisabled": "shapeLookupDisabled",

    /**
     * value: "shapeLookupEnabled"
     * @const
     */
    "shapeLookupEnabled": "shapeLookupEnabled"
};



export default Election;

