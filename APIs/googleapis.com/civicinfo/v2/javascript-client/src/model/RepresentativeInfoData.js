/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GeographicDivision from './GeographicDivision';
import Office from './Office';
import Official from './Official';

/**
 * The RepresentativeInfoData model module.
 * @module model/RepresentativeInfoData
 * @version v2
 */
class RepresentativeInfoData {
    /**
     * Constructs a new <code>RepresentativeInfoData</code>.
     * @alias module:model/RepresentativeInfoData
     */
    constructor() { 
        
        RepresentativeInfoData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RepresentativeInfoData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepresentativeInfoData} obj Optional instance to populate.
     * @return {module:model/RepresentativeInfoData} The populated <code>RepresentativeInfoData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepresentativeInfoData();

            if (data.hasOwnProperty('divisions')) {
                obj['divisions'] = ApiClient.convertToType(data['divisions'], {'String': GeographicDivision});
            }
            if (data.hasOwnProperty('offices')) {
                obj['offices'] = ApiClient.convertToType(data['offices'], [Office]);
            }
            if (data.hasOwnProperty('officials')) {
                obj['officials'] = ApiClient.convertToType(data['officials'], [Official]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepresentativeInfoData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepresentativeInfoData</code>.
     */
    static validateJSON(data) {
        if (data['offices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['offices'])) {
                throw new Error("Expected the field `offices` to be an array in the JSON data but got " + data['offices']);
            }
            // validate the optional field `offices` (array)
            for (const item of data['offices']) {
                Office.validateJSON(item);
            };
        }
        if (data['officials']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['officials'])) {
                throw new Error("Expected the field `officials` to be an array in the JSON data but got " + data['officials']);
            }
            // validate the optional field `officials` (array)
            for (const item of data['officials']) {
                Official.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A map of political geographic divisions that contain the requested address, keyed by the unique Open Civic Data identifier for this division.
 * @member {Object.<String, module:model/GeographicDivision>} divisions
 */
RepresentativeInfoData.prototype['divisions'] = undefined;

/**
 * Elected offices referenced by the divisions listed above. Will only be present if includeOffices was true in the request.
 * @member {Array.<module:model/Office>} offices
 */
RepresentativeInfoData.prototype['offices'] = undefined;

/**
 * Officials holding the offices listed above. Will only be present if includeOffices was true in the request.
 * @member {Array.<module:model/Official>} officials
 */
RepresentativeInfoData.prototype['officials'] = undefined;






export default RepresentativeInfoData;

