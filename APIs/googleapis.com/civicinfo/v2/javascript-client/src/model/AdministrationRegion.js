/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdministrativeBody from './AdministrativeBody';
import Source from './Source';

/**
 * The AdministrationRegion model module.
 * @module model/AdministrationRegion
 * @version v2
 */
class AdministrationRegion {
    /**
     * Constructs a new <code>AdministrationRegion</code>.
     * Describes information about a regional election administrative area.
     * @alias module:model/AdministrationRegion
     */
    constructor() { 
        
        AdministrationRegion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdministrationRegion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdministrationRegion} obj Optional instance to populate.
     * @return {module:model/AdministrationRegion} The populated <code>AdministrationRegion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdministrationRegion();

            if (data.hasOwnProperty('electionAdministrationBody')) {
                obj['electionAdministrationBody'] = AdministrativeBody.constructFromObject(data['electionAdministrationBody']);
            }
            if (data.hasOwnProperty('local_jurisdiction')) {
                obj['local_jurisdiction'] = AdministrationRegion.constructFromObject(data['local_jurisdiction']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [Source]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdministrationRegion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdministrationRegion</code>.
     */
    static validateJSON(data) {
        // validate the optional field `electionAdministrationBody`
        if (data['electionAdministrationBody']) { // data not null
          AdministrativeBody.validateJSON(data['electionAdministrationBody']);
        }
        // validate the optional field `local_jurisdiction`
        if (data['local_jurisdiction']) { // data not null
          AdministrationRegion.validateJSON(data['local_jurisdiction']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sources'])) {
                throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
            }
            // validate the optional field `sources` (array)
            for (const item of data['sources']) {
                Source.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/AdministrativeBody} electionAdministrationBody
 */
AdministrationRegion.prototype['electionAdministrationBody'] = undefined;

/**
 * @member {module:model/AdministrationRegion} local_jurisdiction
 */
AdministrationRegion.prototype['local_jurisdiction'] = undefined;

/**
 * The name of the jurisdiction.
 * @member {String} name
 */
AdministrationRegion.prototype['name'] = undefined;

/**
 * A list of sources for this area. If multiple sources are listed the data has been aggregated from those sources.
 * @member {Array.<module:model/Source>} sources
 */
AdministrationRegion.prototype['sources'] = undefined;






export default AdministrationRegion;

