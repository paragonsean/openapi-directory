/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RepresentativeInfoData from '../model/RepresentativeInfoData';
import RepresentativeInfoResponse from '../model/RepresentativeInfoResponse';

/**
* Representatives service.
* @module api/RepresentativesApi
* @version v2
*/
export default class RepresentativesApi {

    /**
    * Constructs a new RepresentativesApi. 
    * @alias module:api/RepresentativesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the civicinfoRepresentativesRepresentativeInfoByAddress operation.
     * @callback module:api/RepresentativesApi~civicinfoRepresentativesRepresentativeInfoByAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepresentativeInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Looks up political geography and representative information for a single address.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [address] The address to look up. May only be specified if the field ocdId is not given in the URL
     * @param {Boolean} [includeOffices] Whether to return information about offices and officials. If false, only the top-level district information will be returned.
     * @param {Array.<module:model/String>} [levels] A list of office levels to filter by. Only offices that serve at least one of these levels will be returned. Divisions that don't contain a matching office will not be returned.
     * @param {Array.<module:model/String>} [roles] A list of office roles to filter by. Only offices fulfilling one of these roles will be returned. Divisions that don't contain a matching office will not be returned.
     * @param {module:api/RepresentativesApi~civicinfoRepresentativesRepresentativeInfoByAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepresentativeInfoResponse}
     */
    civicinfoRepresentativesRepresentativeInfoByAddress(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'address': opts['address'],
        'includeOffices': opts['includeOffices'],
        'levels': this.apiClient.buildCollectionParam(opts['levels'], 'multi'),
        'roles': this.apiClient.buildCollectionParam(opts['roles'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepresentativeInfoResponse;
      return this.apiClient.callApi(
        '/civicinfo/v2/representatives', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the civicinfoRepresentativesRepresentativeInfoByDivision operation.
     * @callback module:api/RepresentativesApi~civicinfoRepresentativesRepresentativeInfoByDivisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepresentativeInfoData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Looks up representative information for a single geographic division.
     * @param {String} ocdId The Open Civic Data division identifier of the division to look up.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Array.<module:model/String>} [levels] A list of office levels to filter by. Only offices that serve at least one of these levels will be returned. Divisions that don't contain a matching office will not be returned.
     * @param {Boolean} [recursive] If true, information about all divisions contained in the division requested will be included as well. For example, if querying ocd-division/country:us/district:dc, this would also return all DC's wards and ANCs.
     * @param {Array.<module:model/String>} [roles] A list of office roles to filter by. Only offices fulfilling one of these roles will be returned. Divisions that don't contain a matching office will not be returned.
     * @param {module:api/RepresentativesApi~civicinfoRepresentativesRepresentativeInfoByDivisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepresentativeInfoData}
     */
    civicinfoRepresentativesRepresentativeInfoByDivision(ocdId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ocdId' is set
      if (ocdId === undefined || ocdId === null) {
        throw new Error("Missing the required parameter 'ocdId' when calling civicinfoRepresentativesRepresentativeInfoByDivision");
      }

      let pathParams = {
        'ocdId': ocdId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'levels': this.apiClient.buildCollectionParam(opts['levels'], 'multi'),
        'recursive': opts['recursive'],
        'roles': this.apiClient.buildCollectionParam(opts['roles'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepresentativeInfoData;
      return this.apiClient.callApi(
        '/civicinfo/v2/representatives/{ocdId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
