/**
 * Google Civic Information API
 * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GoogleCivicInformationApi);
  }
}(this, function(expect, GoogleCivicInformationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GoogleCivicInformationApi.Contest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Contest', function() {
    it('should create an instance of Contest', function() {
      // uncomment below and update the code to test Contest
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be.a(GoogleCivicInformationApi.Contest);
    });

    it('should have the property ballotPlacement (base name: "ballotPlacement")', function() {
      // uncomment below and update the code to test the property ballotPlacement
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property ballotTitle (base name: "ballotTitle")', function() {
      // uncomment below and update the code to test the property ballotTitle
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property candidates (base name: "candidates")', function() {
      // uncomment below and update the code to test the property candidates
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property district (base name: "district")', function() {
      // uncomment below and update the code to test the property district
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property electorateSpecifications (base name: "electorateSpecifications")', function() {
      // uncomment below and update the code to test the property electorateSpecifications
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property level (base name: "level")', function() {
      // uncomment below and update the code to test the property level
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property numberElected (base name: "numberElected")', function() {
      // uncomment below and update the code to test the property numberElected
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property numberVotingFor (base name: "numberVotingFor")', function() {
      // uncomment below and update the code to test the property numberVotingFor
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property office (base name: "office")', function() {
      // uncomment below and update the code to test the property office
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property primaryParties (base name: "primaryParties")', function() {
      // uncomment below and update the code to test the property primaryParties
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property referendumBallotResponses (base name: "referendumBallotResponses")', function() {
      // uncomment below and update the code to test the property referendumBallotResponses
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property referendumBrief (base name: "referendumBrief")', function() {
      // uncomment below and update the code to test the property referendumBrief
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property referendumConStatement (base name: "referendumConStatement")', function() {
      // uncomment below and update the code to test the property referendumConStatement
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property referendumEffectOfAbstain (base name: "referendumEffectOfAbstain")', function() {
      // uncomment below and update the code to test the property referendumEffectOfAbstain
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property referendumPassageThreshold (base name: "referendumPassageThreshold")', function() {
      // uncomment below and update the code to test the property referendumPassageThreshold
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property referendumProStatement (base name: "referendumProStatement")', function() {
      // uncomment below and update the code to test the property referendumProStatement
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property referendumSubtitle (base name: "referendumSubtitle")', function() {
      // uncomment below and update the code to test the property referendumSubtitle
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property referendumText (base name: "referendumText")', function() {
      // uncomment below and update the code to test the property referendumText
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property referendumTitle (base name: "referendumTitle")', function() {
      // uncomment below and update the code to test the property referendumTitle
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property referendumUrl (base name: "referendumUrl")', function() {
      // uncomment below and update the code to test the property referendumUrl
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property roles (base name: "roles")', function() {
      // uncomment below and update the code to test the property roles
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property sources (base name: "sources")', function() {
      // uncomment below and update the code to test the property sources
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property special (base name: "special")', function() {
      // uncomment below and update the code to test the property special
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new GoogleCivicInformationApi.Contest();
      //expect(instance).to.be();
    });

  });

}));
