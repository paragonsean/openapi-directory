# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.administration_region import AdministrationRegion
from openapi_server.models.contest import Contest
from openapi_server.models.election import Election
from openapi_server.models.polling_location import PollingLocation
from openapi_server.models.precinct import Precinct
from openapi_server.models.simple_address_type import SimpleAddressType
from openapi_server import util


class VoterInfoResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contests: List[Contest]=None, drop_off_locations: List[PollingLocation]=None, early_vote_sites: List[PollingLocation]=None, election: Election=None, kind: str='civicinfo#voterInfoResponse', mail_only: bool=None, normalized_input: SimpleAddressType=None, other_elections: List[Election]=None, polling_locations: List[PollingLocation]=None, precinct_id: str=None, precincts: List[Precinct]=None, state: List[AdministrationRegion]=None):
        """VoterInfoResponse - a model defined in OpenAPI

        :param contests: The contests of this VoterInfoResponse.
        :param drop_off_locations: The drop_off_locations of this VoterInfoResponse.
        :param early_vote_sites: The early_vote_sites of this VoterInfoResponse.
        :param election: The election of this VoterInfoResponse.
        :param kind: The kind of this VoterInfoResponse.
        :param mail_only: The mail_only of this VoterInfoResponse.
        :param normalized_input: The normalized_input of this VoterInfoResponse.
        :param other_elections: The other_elections of this VoterInfoResponse.
        :param polling_locations: The polling_locations of this VoterInfoResponse.
        :param precinct_id: The precinct_id of this VoterInfoResponse.
        :param precincts: The precincts of this VoterInfoResponse.
        :param state: The state of this VoterInfoResponse.
        """
        self.openapi_types = {
            'contests': List[Contest],
            'drop_off_locations': List[PollingLocation],
            'early_vote_sites': List[PollingLocation],
            'election': Election,
            'kind': str,
            'mail_only': bool,
            'normalized_input': SimpleAddressType,
            'other_elections': List[Election],
            'polling_locations': List[PollingLocation],
            'precinct_id': str,
            'precincts': List[Precinct],
            'state': List[AdministrationRegion]
        }

        self.attribute_map = {
            'contests': 'contests',
            'drop_off_locations': 'dropOffLocations',
            'early_vote_sites': 'earlyVoteSites',
            'election': 'election',
            'kind': 'kind',
            'mail_only': 'mailOnly',
            'normalized_input': 'normalizedInput',
            'other_elections': 'otherElections',
            'polling_locations': 'pollingLocations',
            'precinct_id': 'precinctId',
            'precincts': 'precincts',
            'state': 'state'
        }

        self._contests = contests
        self._drop_off_locations = drop_off_locations
        self._early_vote_sites = early_vote_sites
        self._election = election
        self._kind = kind
        self._mail_only = mail_only
        self._normalized_input = normalized_input
        self._other_elections = other_elections
        self._polling_locations = polling_locations
        self._precinct_id = precinct_id
        self._precincts = precincts
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VoterInfoResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VoterInfoResponse of this VoterInfoResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contests(self):
        """Gets the contests of this VoterInfoResponse.

        Contests that will appear on the voter's ballot.

        :return: The contests of this VoterInfoResponse.
        :rtype: List[Contest]
        """
        return self._contests

    @contests.setter
    def contests(self, contests):
        """Sets the contests of this VoterInfoResponse.

        Contests that will appear on the voter's ballot.

        :param contests: The contests of this VoterInfoResponse.
        :type contests: List[Contest]
        """

        self._contests = contests

    @property
    def drop_off_locations(self):
        """Gets the drop_off_locations of this VoterInfoResponse.

        Locations where a voter is eligible to drop off a completed ballot. The voter must have received and completed a ballot prior to arriving at the location. The location may not have ballots available on the premises. These locations could be open on or before election day as indicated in the pollingHours field.

        :return: The drop_off_locations of this VoterInfoResponse.
        :rtype: List[PollingLocation]
        """
        return self._drop_off_locations

    @drop_off_locations.setter
    def drop_off_locations(self, drop_off_locations):
        """Sets the drop_off_locations of this VoterInfoResponse.

        Locations where a voter is eligible to drop off a completed ballot. The voter must have received and completed a ballot prior to arriving at the location. The location may not have ballots available on the premises. These locations could be open on or before election day as indicated in the pollingHours field.

        :param drop_off_locations: The drop_off_locations of this VoterInfoResponse.
        :type drop_off_locations: List[PollingLocation]
        """

        self._drop_off_locations = drop_off_locations

    @property
    def early_vote_sites(self):
        """Gets the early_vote_sites of this VoterInfoResponse.

        Locations where the voter is eligible to vote early, prior to election day.

        :return: The early_vote_sites of this VoterInfoResponse.
        :rtype: List[PollingLocation]
        """
        return self._early_vote_sites

    @early_vote_sites.setter
    def early_vote_sites(self, early_vote_sites):
        """Sets the early_vote_sites of this VoterInfoResponse.

        Locations where the voter is eligible to vote early, prior to election day.

        :param early_vote_sites: The early_vote_sites of this VoterInfoResponse.
        :type early_vote_sites: List[PollingLocation]
        """

        self._early_vote_sites = early_vote_sites

    @property
    def election(self):
        """Gets the election of this VoterInfoResponse.


        :return: The election of this VoterInfoResponse.
        :rtype: Election
        """
        return self._election

    @election.setter
    def election(self, election):
        """Sets the election of this VoterInfoResponse.


        :param election: The election of this VoterInfoResponse.
        :type election: Election
        """

        self._election = election

    @property
    def kind(self):
        """Gets the kind of this VoterInfoResponse.

        Identifies what kind of resource this is. Value: the fixed string \"civicinfo#voterInfoResponse\".

        :return: The kind of this VoterInfoResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this VoterInfoResponse.

        Identifies what kind of resource this is. Value: the fixed string \"civicinfo#voterInfoResponse\".

        :param kind: The kind of this VoterInfoResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def mail_only(self):
        """Gets the mail_only of this VoterInfoResponse.

        Specifies whether voters in the precinct vote only by mailing their ballots (with the possible option of dropping off their ballots as well).

        :return: The mail_only of this VoterInfoResponse.
        :rtype: bool
        """
        return self._mail_only

    @mail_only.setter
    def mail_only(self, mail_only):
        """Sets the mail_only of this VoterInfoResponse.

        Specifies whether voters in the precinct vote only by mailing their ballots (with the possible option of dropping off their ballots as well).

        :param mail_only: The mail_only of this VoterInfoResponse.
        :type mail_only: bool
        """

        self._mail_only = mail_only

    @property
    def normalized_input(self):
        """Gets the normalized_input of this VoterInfoResponse.


        :return: The normalized_input of this VoterInfoResponse.
        :rtype: SimpleAddressType
        """
        return self._normalized_input

    @normalized_input.setter
    def normalized_input(self, normalized_input):
        """Sets the normalized_input of this VoterInfoResponse.


        :param normalized_input: The normalized_input of this VoterInfoResponse.
        :type normalized_input: SimpleAddressType
        """

        self._normalized_input = normalized_input

    @property
    def other_elections(self):
        """Gets the other_elections of this VoterInfoResponse.

        When there are multiple elections for a voter address, the otherElections field is populated in the API response and there are two possibilities: 1. If the earliest election is not the intended election, specify the election ID of the desired election in a second API request using the electionId field. 2. If these elections occur on the same day, the API doesn?t return any polling location, contest, or election official information to ensure that an additional query is made. For user-facing applications, we recommend displaying these elections to the user to disambiguate. A second API request using the electionId field should be made for the election that is relevant to the user.

        :return: The other_elections of this VoterInfoResponse.
        :rtype: List[Election]
        """
        return self._other_elections

    @other_elections.setter
    def other_elections(self, other_elections):
        """Sets the other_elections of this VoterInfoResponse.

        When there are multiple elections for a voter address, the otherElections field is populated in the API response and there are two possibilities: 1. If the earliest election is not the intended election, specify the election ID of the desired election in a second API request using the electionId field. 2. If these elections occur on the same day, the API doesn?t return any polling location, contest, or election official information to ensure that an additional query is made. For user-facing applications, we recommend displaying these elections to the user to disambiguate. A second API request using the electionId field should be made for the election that is relevant to the user.

        :param other_elections: The other_elections of this VoterInfoResponse.
        :type other_elections: List[Election]
        """

        self._other_elections = other_elections

    @property
    def polling_locations(self):
        """Gets the polling_locations of this VoterInfoResponse.

        Locations where the voter is eligible to vote on election day.

        :return: The polling_locations of this VoterInfoResponse.
        :rtype: List[PollingLocation]
        """
        return self._polling_locations

    @polling_locations.setter
    def polling_locations(self, polling_locations):
        """Sets the polling_locations of this VoterInfoResponse.

        Locations where the voter is eligible to vote on election day.

        :param polling_locations: The polling_locations of this VoterInfoResponse.
        :type polling_locations: List[PollingLocation]
        """

        self._polling_locations = polling_locations

    @property
    def precinct_id(self):
        """Gets the precinct_id of this VoterInfoResponse.


        :return: The precinct_id of this VoterInfoResponse.
        :rtype: str
        """
        return self._precinct_id

    @precinct_id.setter
    def precinct_id(self, precinct_id):
        """Sets the precinct_id of this VoterInfoResponse.


        :param precinct_id: The precinct_id of this VoterInfoResponse.
        :type precinct_id: str
        """

        self._precinct_id = precinct_id

    @property
    def precincts(self):
        """Gets the precincts of this VoterInfoResponse.

        The precincts that match this voter's address. Will only be returned for project IDs which have been allowlisted as \"partner projects\".

        :return: The precincts of this VoterInfoResponse.
        :rtype: List[Precinct]
        """
        return self._precincts

    @precincts.setter
    def precincts(self, precincts):
        """Sets the precincts of this VoterInfoResponse.

        The precincts that match this voter's address. Will only be returned for project IDs which have been allowlisted as \"partner projects\".

        :param precincts: The precincts of this VoterInfoResponse.
        :type precincts: List[Precinct]
        """

        self._precincts = precincts

    @property
    def state(self):
        """Gets the state of this VoterInfoResponse.

        Local Election Information for the state that the voter votes in. For the US, there will only be one element in this array.

        :return: The state of this VoterInfoResponse.
        :rtype: List[AdministrationRegion]
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VoterInfoResponse.

        Local Election Information for the state that the voter votes in. For the US, there will only be one element in this array.

        :param state: The state of this VoterInfoResponse.
        :type state: List[AdministrationRegion]
        """

        self._state = state
