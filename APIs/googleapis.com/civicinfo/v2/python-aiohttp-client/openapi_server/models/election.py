# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Election(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, election_day: str=None, id: str=None, name: str=None, ocd_division_id: str=None, shape_lookup_behavior: str=None):
        """Election - a model defined in OpenAPI

        :param election_day: The election_day of this Election.
        :param id: The id of this Election.
        :param name: The name of this Election.
        :param ocd_division_id: The ocd_division_id of this Election.
        :param shape_lookup_behavior: The shape_lookup_behavior of this Election.
        """
        self.openapi_types = {
            'election_day': str,
            'id': str,
            'name': str,
            'ocd_division_id': str,
            'shape_lookup_behavior': str
        }

        self.attribute_map = {
            'election_day': 'electionDay',
            'id': 'id',
            'name': 'name',
            'ocd_division_id': 'ocdDivisionId',
            'shape_lookup_behavior': 'shapeLookupBehavior'
        }

        self._election_day = election_day
        self._id = id
        self._name = name
        self._ocd_division_id = ocd_division_id
        self._shape_lookup_behavior = shape_lookup_behavior

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Election':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Election of this Election.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def election_day(self):
        """Gets the election_day of this Election.

        Day of the election in YYYY-MM-DD format.

        :return: The election_day of this Election.
        :rtype: str
        """
        return self._election_day

    @election_day.setter
    def election_day(self, election_day):
        """Sets the election_day of this Election.

        Day of the election in YYYY-MM-DD format.

        :param election_day: The election_day of this Election.
        :type election_day: str
        """

        self._election_day = election_day

    @property
    def id(self):
        """Gets the id of this Election.

        The unique ID of this election.

        :return: The id of this Election.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Election.

        The unique ID of this election.

        :param id: The id of this Election.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Election.

        A displayable name for the election.

        :return: The name of this Election.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Election.

        A displayable name for the election.

        :param name: The name of this Election.
        :type name: str
        """

        self._name = name

    @property
    def ocd_division_id(self):
        """Gets the ocd_division_id of this Election.

        The political division of the election. Represented as an OCD Division ID. Voters within these political jurisdictions are covered by this election. This is typically a state such as ocd-division/country:us/state:ca or for the midterms or general election the entire US (i.e. ocd-division/country:us).

        :return: The ocd_division_id of this Election.
        :rtype: str
        """
        return self._ocd_division_id

    @ocd_division_id.setter
    def ocd_division_id(self, ocd_division_id):
        """Sets the ocd_division_id of this Election.

        The political division of the election. Represented as an OCD Division ID. Voters within these political jurisdictions are covered by this election. This is typically a state such as ocd-division/country:us/state:ca or for the midterms or general election the entire US (i.e. ocd-division/country:us).

        :param ocd_division_id: The ocd_division_id of this Election.
        :type ocd_division_id: str
        """

        self._ocd_division_id = ocd_division_id

    @property
    def shape_lookup_behavior(self):
        """Gets the shape_lookup_behavior of this Election.


        :return: The shape_lookup_behavior of this Election.
        :rtype: str
        """
        return self._shape_lookup_behavior

    @shape_lookup_behavior.setter
    def shape_lookup_behavior(self, shape_lookup_behavior):
        """Sets the shape_lookup_behavior of this Election.


        :param shape_lookup_behavior: The shape_lookup_behavior of this Election.
        :type shape_lookup_behavior: str
        """
        allowed_values = ["shapeLookupDefault", "shapeLookupDisabled", "shapeLookupEnabled"]  # noqa: E501
        if shape_lookup_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `shape_lookup_behavior` ({0}), must be one of {1}"
                .format(shape_lookup_behavior, allowed_values)
            )

        self._shape_lookup_behavior = shape_lookup_behavior
