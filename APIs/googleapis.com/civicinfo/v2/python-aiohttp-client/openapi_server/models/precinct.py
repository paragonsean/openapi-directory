# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Precinct(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, administration_region_id: str=None, contest_id: List[str]=None, dataset_id: str=None, early_vote_site_id: List[str]=None, electoral_district_id: List[str]=None, id: str=None, mail_only: bool=None, name: str=None, number: str=None, ocd_id: List[str]=None, polling_location_id: List[str]=None, spatial_boundary_id: List[str]=None, split_name: str=None, ward: str=None):
        """Precinct - a model defined in OpenAPI

        :param administration_region_id: The administration_region_id of this Precinct.
        :param contest_id: The contest_id of this Precinct.
        :param dataset_id: The dataset_id of this Precinct.
        :param early_vote_site_id: The early_vote_site_id of this Precinct.
        :param electoral_district_id: The electoral_district_id of this Precinct.
        :param id: The id of this Precinct.
        :param mail_only: The mail_only of this Precinct.
        :param name: The name of this Precinct.
        :param number: The number of this Precinct.
        :param ocd_id: The ocd_id of this Precinct.
        :param polling_location_id: The polling_location_id of this Precinct.
        :param spatial_boundary_id: The spatial_boundary_id of this Precinct.
        :param split_name: The split_name of this Precinct.
        :param ward: The ward of this Precinct.
        """
        self.openapi_types = {
            'administration_region_id': str,
            'contest_id': List[str],
            'dataset_id': str,
            'early_vote_site_id': List[str],
            'electoral_district_id': List[str],
            'id': str,
            'mail_only': bool,
            'name': str,
            'number': str,
            'ocd_id': List[str],
            'polling_location_id': List[str],
            'spatial_boundary_id': List[str],
            'split_name': str,
            'ward': str
        }

        self.attribute_map = {
            'administration_region_id': 'administrationRegionId',
            'contest_id': 'contestId',
            'dataset_id': 'datasetId',
            'early_vote_site_id': 'earlyVoteSiteId',
            'electoral_district_id': 'electoralDistrictId',
            'id': 'id',
            'mail_only': 'mailOnly',
            'name': 'name',
            'number': 'number',
            'ocd_id': 'ocdId',
            'polling_location_id': 'pollingLocationId',
            'spatial_boundary_id': 'spatialBoundaryId',
            'split_name': 'splitName',
            'ward': 'ward'
        }

        self._administration_region_id = administration_region_id
        self._contest_id = contest_id
        self._dataset_id = dataset_id
        self._early_vote_site_id = early_vote_site_id
        self._electoral_district_id = electoral_district_id
        self._id = id
        self._mail_only = mail_only
        self._name = name
        self._number = number
        self._ocd_id = ocd_id
        self._polling_location_id = polling_location_id
        self._spatial_boundary_id = spatial_boundary_id
        self._split_name = split_name
        self._ward = ward

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Precinct':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Precinct of this Precinct.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def administration_region_id(self):
        """Gets the administration_region_id of this Precinct.

        ID of the AdministrationRegion message for this precinct. Corresponds to LocalityId xml tag.

        :return: The administration_region_id of this Precinct.
        :rtype: str
        """
        return self._administration_region_id

    @administration_region_id.setter
    def administration_region_id(self, administration_region_id):
        """Sets the administration_region_id of this Precinct.

        ID of the AdministrationRegion message for this precinct. Corresponds to LocalityId xml tag.

        :param administration_region_id: The administration_region_id of this Precinct.
        :type administration_region_id: str
        """

        self._administration_region_id = administration_region_id

    @property
    def contest_id(self):
        """Gets the contest_id of this Precinct.

        ID(s) of the Contest message(s) for this precinct.

        :return: The contest_id of this Precinct.
        :rtype: List[str]
        """
        return self._contest_id

    @contest_id.setter
    def contest_id(self, contest_id):
        """Sets the contest_id of this Precinct.

        ID(s) of the Contest message(s) for this precinct.

        :param contest_id: The contest_id of this Precinct.
        :type contest_id: List[str]
        """

        self._contest_id = contest_id

    @property
    def dataset_id(self):
        """Gets the dataset_id of this Precinct.

        Required. Dataset ID. What datasets our Precincts come from.

        :return: The dataset_id of this Precinct.
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this Precinct.

        Required. Dataset ID. What datasets our Precincts come from.

        :param dataset_id: The dataset_id of this Precinct.
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def early_vote_site_id(self):
        """Gets the early_vote_site_id of this Precinct.

        ID(s) of the PollingLocation message(s) for this precinct.

        :return: The early_vote_site_id of this Precinct.
        :rtype: List[str]
        """
        return self._early_vote_site_id

    @early_vote_site_id.setter
    def early_vote_site_id(self, early_vote_site_id):
        """Sets the early_vote_site_id of this Precinct.

        ID(s) of the PollingLocation message(s) for this precinct.

        :param early_vote_site_id: The early_vote_site_id of this Precinct.
        :type early_vote_site_id: List[str]
        """

        self._early_vote_site_id = early_vote_site_id

    @property
    def electoral_district_id(self):
        """Gets the electoral_district_id of this Precinct.

        ID(s) of the ElectoralDistrict message(s) for this precinct.

        :return: The electoral_district_id of this Precinct.
        :rtype: List[str]
        """
        return self._electoral_district_id

    @electoral_district_id.setter
    def electoral_district_id(self, electoral_district_id):
        """Sets the electoral_district_id of this Precinct.

        ID(s) of the ElectoralDistrict message(s) for this precinct.

        :param electoral_district_id: The electoral_district_id of this Precinct.
        :type electoral_district_id: List[str]
        """

        self._electoral_district_id = electoral_district_id

    @property
    def id(self):
        """Gets the id of this Precinct.

        Required. A unique identifier for this precinct.

        :return: The id of this Precinct.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Precinct.

        Required. A unique identifier for this precinct.

        :param id: The id of this Precinct.
        :type id: str
        """

        self._id = id

    @property
    def mail_only(self):
        """Gets the mail_only of this Precinct.

        Specifies if the precinct runs mail-only elections.

        :return: The mail_only of this Precinct.
        :rtype: bool
        """
        return self._mail_only

    @mail_only.setter
    def mail_only(self, mail_only):
        """Sets the mail_only of this Precinct.

        Specifies if the precinct runs mail-only elections.

        :param mail_only: The mail_only of this Precinct.
        :type mail_only: bool
        """

        self._mail_only = mail_only

    @property
    def name(self):
        """Gets the name of this Precinct.

        Required. The name of the precinct.

        :return: The name of this Precinct.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Precinct.

        Required. The name of the precinct.

        :param name: The name of this Precinct.
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this Precinct.

        The number of the precinct.

        :return: The number of this Precinct.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Precinct.

        The number of the precinct.

        :param number: The number of this Precinct.
        :type number: str
        """

        self._number = number

    @property
    def ocd_id(self):
        """Gets the ocd_id of this Precinct.

        Encouraged. The OCD ID of the precinct

        :return: The ocd_id of this Precinct.
        :rtype: List[str]
        """
        return self._ocd_id

    @ocd_id.setter
    def ocd_id(self, ocd_id):
        """Sets the ocd_id of this Precinct.

        Encouraged. The OCD ID of the precinct

        :param ocd_id: The ocd_id of this Precinct.
        :type ocd_id: List[str]
        """

        self._ocd_id = ocd_id

    @property
    def polling_location_id(self):
        """Gets the polling_location_id of this Precinct.

        ID(s) of the PollingLocation message(s) for this precinct.

        :return: The polling_location_id of this Precinct.
        :rtype: List[str]
        """
        return self._polling_location_id

    @polling_location_id.setter
    def polling_location_id(self, polling_location_id):
        """Sets the polling_location_id of this Precinct.

        ID(s) of the PollingLocation message(s) for this precinct.

        :param polling_location_id: The polling_location_id of this Precinct.
        :type polling_location_id: List[str]
        """

        self._polling_location_id = polling_location_id

    @property
    def spatial_boundary_id(self):
        """Gets the spatial_boundary_id of this Precinct.

        ID(s) of the SpatialBoundary message(s) for this precinct. Used to specify a geometrical boundary of the precinct.

        :return: The spatial_boundary_id of this Precinct.
        :rtype: List[str]
        """
        return self._spatial_boundary_id

    @spatial_boundary_id.setter
    def spatial_boundary_id(self, spatial_boundary_id):
        """Sets the spatial_boundary_id of this Precinct.

        ID(s) of the SpatialBoundary message(s) for this precinct. Used to specify a geometrical boundary of the precinct.

        :param spatial_boundary_id: The spatial_boundary_id of this Precinct.
        :type spatial_boundary_id: List[str]
        """

        self._spatial_boundary_id = spatial_boundary_id

    @property
    def split_name(self):
        """Gets the split_name of this Precinct.

        If present, this proto corresponds to one portion of split precinct. Other portions of this precinct are guaranteed to have the same `name`. If not present, this proto represents a full precicnt.

        :return: The split_name of this Precinct.
        :rtype: str
        """
        return self._split_name

    @split_name.setter
    def split_name(self, split_name):
        """Sets the split_name of this Precinct.

        If present, this proto corresponds to one portion of split precinct. Other portions of this precinct are guaranteed to have the same `name`. If not present, this proto represents a full precicnt.

        :param split_name: The split_name of this Precinct.
        :type split_name: str
        """

        self._split_name = split_name

    @property
    def ward(self):
        """Gets the ward of this Precinct.

        Specifies the ward the precinct is contained within.

        :return: The ward of this Precinct.
        :rtype: str
        """
        return self._ward

    @ward.setter
    def ward(self, ward):
        """Sets the ward of this Precinct.

        Specifies the ward the precinct is contained within.

        :param ward: The ward of this Precinct.
        :type ward: str
        """

        self._ward = ward
