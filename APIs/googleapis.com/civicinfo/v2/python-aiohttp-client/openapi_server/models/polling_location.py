# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simple_address_type import SimpleAddressType
from openapi_server.models.source import Source
from openapi_server import util


class PollingLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: SimpleAddressType=None, end_date: str=None, latitude: float=None, longitude: float=None, name: str=None, notes: str=None, polling_hours: str=None, sources: List[Source]=None, start_date: str=None, voter_services: str=None):
        """PollingLocation - a model defined in OpenAPI

        :param address: The address of this PollingLocation.
        :param end_date: The end_date of this PollingLocation.
        :param latitude: The latitude of this PollingLocation.
        :param longitude: The longitude of this PollingLocation.
        :param name: The name of this PollingLocation.
        :param notes: The notes of this PollingLocation.
        :param polling_hours: The polling_hours of this PollingLocation.
        :param sources: The sources of this PollingLocation.
        :param start_date: The start_date of this PollingLocation.
        :param voter_services: The voter_services of this PollingLocation.
        """
        self.openapi_types = {
            'address': SimpleAddressType,
            'end_date': str,
            'latitude': float,
            'longitude': float,
            'name': str,
            'notes': str,
            'polling_hours': str,
            'sources': List[Source],
            'start_date': str,
            'voter_services': str
        }

        self.attribute_map = {
            'address': 'address',
            'end_date': 'endDate',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'name': 'name',
            'notes': 'notes',
            'polling_hours': 'pollingHours',
            'sources': 'sources',
            'start_date': 'startDate',
            'voter_services': 'voterServices'
        }

        self._address = address
        self._end_date = end_date
        self._latitude = latitude
        self._longitude = longitude
        self._name = name
        self._notes = notes
        self._polling_hours = polling_hours
        self._sources = sources
        self._start_date = start_date
        self._voter_services = voter_services

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PollingLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PollingLocation of this PollingLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this PollingLocation.


        :return: The address of this PollingLocation.
        :rtype: SimpleAddressType
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PollingLocation.


        :param address: The address of this PollingLocation.
        :type address: SimpleAddressType
        """

        self._address = address

    @property
    def end_date(self):
        """Gets the end_date of this PollingLocation.

        The last date that this early vote site or drop off location may be used. This field is not populated for polling locations.

        :return: The end_date of this PollingLocation.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this PollingLocation.

        The last date that this early vote site or drop off location may be used. This field is not populated for polling locations.

        :param end_date: The end_date of this PollingLocation.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def latitude(self):
        """Gets the latitude of this PollingLocation.

        Latitude of the location, in degrees north of the equator. Note this field may not be available for some locations.

        :return: The latitude of this PollingLocation.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this PollingLocation.

        Latitude of the location, in degrees north of the equator. Note this field may not be available for some locations.

        :param latitude: The latitude of this PollingLocation.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this PollingLocation.

        Longitude of the location, in degrees east of the Prime Meridian. Note this field may not be available for some locations.

        :return: The longitude of this PollingLocation.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this PollingLocation.

        Longitude of the location, in degrees east of the Prime Meridian. Note this field may not be available for some locations.

        :param longitude: The longitude of this PollingLocation.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def name(self):
        """Gets the name of this PollingLocation.

        The name of the early vote site or drop off location. This field is not populated for polling locations.

        :return: The name of this PollingLocation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PollingLocation.

        The name of the early vote site or drop off location. This field is not populated for polling locations.

        :param name: The name of this PollingLocation.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this PollingLocation.

        Notes about this location (e.g. accessibility ramp or entrance to use).

        :return: The notes of this PollingLocation.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PollingLocation.

        Notes about this location (e.g. accessibility ramp or entrance to use).

        :param notes: The notes of this PollingLocation.
        :type notes: str
        """

        self._notes = notes

    @property
    def polling_hours(self):
        """Gets the polling_hours of this PollingLocation.

        A description of when this location is open.

        :return: The polling_hours of this PollingLocation.
        :rtype: str
        """
        return self._polling_hours

    @polling_hours.setter
    def polling_hours(self, polling_hours):
        """Sets the polling_hours of this PollingLocation.

        A description of when this location is open.

        :param polling_hours: The polling_hours of this PollingLocation.
        :type polling_hours: str
        """

        self._polling_hours = polling_hours

    @property
    def sources(self):
        """Gets the sources of this PollingLocation.

        A list of sources for this location. If multiple sources are listed the data has been aggregated from those sources.

        :return: The sources of this PollingLocation.
        :rtype: List[Source]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this PollingLocation.

        A list of sources for this location. If multiple sources are listed the data has been aggregated from those sources.

        :param sources: The sources of this PollingLocation.
        :type sources: List[Source]
        """

        self._sources = sources

    @property
    def start_date(self):
        """Gets the start_date of this PollingLocation.

        The first date that this early vote site or drop off location may be used. This field is not populated for polling locations.

        :return: The start_date of this PollingLocation.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PollingLocation.

        The first date that this early vote site or drop off location may be used. This field is not populated for polling locations.

        :param start_date: The start_date of this PollingLocation.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def voter_services(self):
        """Gets the voter_services of this PollingLocation.

        The services provided by this early vote site or drop off location. This field is not populated for polling locations.

        :return: The voter_services of this PollingLocation.
        :rtype: str
        """
        return self._voter_services

    @voter_services.setter
    def voter_services(self, voter_services):
        """Sets the voter_services of this PollingLocation.

        The services provided by this early vote site or drop off location. This field is not populated for polling locations.

        :param voter_services: The voter_services of this PollingLocation.
        :type voter_services: str
        """

        self._voter_services = voter_services
