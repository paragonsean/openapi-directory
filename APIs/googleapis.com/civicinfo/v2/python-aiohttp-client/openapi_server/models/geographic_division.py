# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GeographicDivision(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, also_known_as: List[str]=None, name: str=None, office_indices: List[int]=None):
        """GeographicDivision - a model defined in OpenAPI

        :param also_known_as: The also_known_as of this GeographicDivision.
        :param name: The name of this GeographicDivision.
        :param office_indices: The office_indices of this GeographicDivision.
        """
        self.openapi_types = {
            'also_known_as': List[str],
            'name': str,
            'office_indices': List[int]
        }

        self.attribute_map = {
            'also_known_as': 'alsoKnownAs',
            'name': 'name',
            'office_indices': 'officeIndices'
        }

        self._also_known_as = also_known_as
        self._name = name
        self._office_indices = office_indices

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeographicDivision':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeographicDivision of this GeographicDivision.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def also_known_as(self):
        """Gets the also_known_as of this GeographicDivision.

        Any other valid OCD IDs that refer to the same division.\\n\\nBecause OCD IDs are meant to be human-readable and at least somewhat predictable, there are occasionally several identifiers for a single division. These identifiers are defined to be equivalent to one another, and one is always indicated as the primary identifier. The primary identifier will be returned in ocd_id above, and any other equivalent valid identifiers will be returned in this list.\\n\\nFor example, if this division's OCD ID is ocd-division/country:us/district:dc, this will contain ocd-division/country:us/state:dc.

        :return: The also_known_as of this GeographicDivision.
        :rtype: List[str]
        """
        return self._also_known_as

    @also_known_as.setter
    def also_known_as(self, also_known_as):
        """Sets the also_known_as of this GeographicDivision.

        Any other valid OCD IDs that refer to the same division.\\n\\nBecause OCD IDs are meant to be human-readable and at least somewhat predictable, there are occasionally several identifiers for a single division. These identifiers are defined to be equivalent to one another, and one is always indicated as the primary identifier. The primary identifier will be returned in ocd_id above, and any other equivalent valid identifiers will be returned in this list.\\n\\nFor example, if this division's OCD ID is ocd-division/country:us/district:dc, this will contain ocd-division/country:us/state:dc.

        :param also_known_as: The also_known_as of this GeographicDivision.
        :type also_known_as: List[str]
        """

        self._also_known_as = also_known_as

    @property
    def name(self):
        """Gets the name of this GeographicDivision.

        The name of the division.

        :return: The name of this GeographicDivision.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GeographicDivision.

        The name of the division.

        :param name: The name of this GeographicDivision.
        :type name: str
        """

        self._name = name

    @property
    def office_indices(self):
        """Gets the office_indices of this GeographicDivision.

        List of indices in the offices array, one for each office elected from this division. Will only be present if includeOffices was true (or absent) in the request.

        :return: The office_indices of this GeographicDivision.
        :rtype: List[int]
        """
        return self._office_indices

    @office_indices.setter
    def office_indices(self, office_indices):
        """Sets the office_indices of this GeographicDivision.

        List of indices in the offices array, one for each office elected from this division. Will only be present if includeOffices was true (or absent) in the request.

        :param office_indices: The office_indices of this GeographicDivision.
        :type office_indices: List[int]
        """

        self._office_indices = office_indices
