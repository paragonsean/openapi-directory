# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.administrative_body import AdministrativeBody
from openapi_server.models.source import Source
from openapi_server import util


class AdministrationRegion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, election_administration_body: AdministrativeBody=None, local_jurisdiction: AdministrationRegion=None, name: str=None, sources: List[Source]=None):
        """AdministrationRegion - a model defined in OpenAPI

        :param election_administration_body: The election_administration_body of this AdministrationRegion.
        :param local_jurisdiction: The local_jurisdiction of this AdministrationRegion.
        :param name: The name of this AdministrationRegion.
        :param sources: The sources of this AdministrationRegion.
        """
        self.openapi_types = {
            'election_administration_body': AdministrativeBody,
            'local_jurisdiction': AdministrationRegion,
            'name': str,
            'sources': List[Source]
        }

        self.attribute_map = {
            'election_administration_body': 'electionAdministrationBody',
            'local_jurisdiction': 'local_jurisdiction',
            'name': 'name',
            'sources': 'sources'
        }

        self._election_administration_body = election_administration_body
        self._local_jurisdiction = local_jurisdiction
        self._name = name
        self._sources = sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdministrationRegion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdministrationRegion of this AdministrationRegion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def election_administration_body(self):
        """Gets the election_administration_body of this AdministrationRegion.


        :return: The election_administration_body of this AdministrationRegion.
        :rtype: AdministrativeBody
        """
        return self._election_administration_body

    @election_administration_body.setter
    def election_administration_body(self, election_administration_body):
        """Sets the election_administration_body of this AdministrationRegion.


        :param election_administration_body: The election_administration_body of this AdministrationRegion.
        :type election_administration_body: AdministrativeBody
        """

        self._election_administration_body = election_administration_body

    @property
    def local_jurisdiction(self):
        """Gets the local_jurisdiction of this AdministrationRegion.


        :return: The local_jurisdiction of this AdministrationRegion.
        :rtype: AdministrationRegion
        """
        return self._local_jurisdiction

    @local_jurisdiction.setter
    def local_jurisdiction(self, local_jurisdiction):
        """Sets the local_jurisdiction of this AdministrationRegion.


        :param local_jurisdiction: The local_jurisdiction of this AdministrationRegion.
        :type local_jurisdiction: AdministrationRegion
        """

        self._local_jurisdiction = local_jurisdiction

    @property
    def name(self):
        """Gets the name of this AdministrationRegion.

        The name of the jurisdiction.

        :return: The name of this AdministrationRegion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdministrationRegion.

        The name of the jurisdiction.

        :param name: The name of this AdministrationRegion.
        :type name: str
        """

        self._name = name

    @property
    def sources(self):
        """Gets the sources of this AdministrationRegion.

        A list of sources for this area. If multiple sources are listed the data has been aggregated from those sources.

        :return: The sources of this AdministrationRegion.
        :rtype: List[Source]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this AdministrationRegion.

        A list of sources for this area. If multiple sources are listed the data has been aggregated from those sources.

        :param sources: The sources of this AdministrationRegion.
        :type sources: List[Source]
        """

        self._sources = sources
