# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geographic_division import GeographicDivision
from openapi_server.models.office import Office
from openapi_server.models.official import Official
from openapi_server.models.simple_address_type import SimpleAddressType
from openapi_server import util


class RepresentativeInfoResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, divisions: Dict[str, GeographicDivision]=None, kind: str='civicinfo#representativeInfoResponse', normalized_input: SimpleAddressType=None, offices: List[Office]=None, officials: List[Official]=None):
        """RepresentativeInfoResponse - a model defined in OpenAPI

        :param divisions: The divisions of this RepresentativeInfoResponse.
        :param kind: The kind of this RepresentativeInfoResponse.
        :param normalized_input: The normalized_input of this RepresentativeInfoResponse.
        :param offices: The offices of this RepresentativeInfoResponse.
        :param officials: The officials of this RepresentativeInfoResponse.
        """
        self.openapi_types = {
            'divisions': Dict[str, GeographicDivision],
            'kind': str,
            'normalized_input': SimpleAddressType,
            'offices': List[Office],
            'officials': List[Official]
        }

        self.attribute_map = {
            'divisions': 'divisions',
            'kind': 'kind',
            'normalized_input': 'normalizedInput',
            'offices': 'offices',
            'officials': 'officials'
        }

        self._divisions = divisions
        self._kind = kind
        self._normalized_input = normalized_input
        self._offices = offices
        self._officials = officials

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepresentativeInfoResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepresentativeInfoResponse of this RepresentativeInfoResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def divisions(self):
        """Gets the divisions of this RepresentativeInfoResponse.

        A map of political geographic divisions that contain the requested address, keyed by the unique Open Civic Data identifier for this division.

        :return: The divisions of this RepresentativeInfoResponse.
        :rtype: Dict[str, GeographicDivision]
        """
        return self._divisions

    @divisions.setter
    def divisions(self, divisions):
        """Sets the divisions of this RepresentativeInfoResponse.

        A map of political geographic divisions that contain the requested address, keyed by the unique Open Civic Data identifier for this division.

        :param divisions: The divisions of this RepresentativeInfoResponse.
        :type divisions: Dict[str, GeographicDivision]
        """

        self._divisions = divisions

    @property
    def kind(self):
        """Gets the kind of this RepresentativeInfoResponse.

        Identifies what kind of resource this is. Value: the fixed string \"civicinfo#representativeInfoResponse\".

        :return: The kind of this RepresentativeInfoResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this RepresentativeInfoResponse.

        Identifies what kind of resource this is. Value: the fixed string \"civicinfo#representativeInfoResponse\".

        :param kind: The kind of this RepresentativeInfoResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def normalized_input(self):
        """Gets the normalized_input of this RepresentativeInfoResponse.


        :return: The normalized_input of this RepresentativeInfoResponse.
        :rtype: SimpleAddressType
        """
        return self._normalized_input

    @normalized_input.setter
    def normalized_input(self, normalized_input):
        """Sets the normalized_input of this RepresentativeInfoResponse.


        :param normalized_input: The normalized_input of this RepresentativeInfoResponse.
        :type normalized_input: SimpleAddressType
        """

        self._normalized_input = normalized_input

    @property
    def offices(self):
        """Gets the offices of this RepresentativeInfoResponse.

        Elected offices referenced by the divisions listed above. Will only be present if includeOffices was true in the request.

        :return: The offices of this RepresentativeInfoResponse.
        :rtype: List[Office]
        """
        return self._offices

    @offices.setter
    def offices(self, offices):
        """Sets the offices of this RepresentativeInfoResponse.

        Elected offices referenced by the divisions listed above. Will only be present if includeOffices was true in the request.

        :param offices: The offices of this RepresentativeInfoResponse.
        :type offices: List[Office]
        """

        self._offices = offices

    @property
    def officials(self):
        """Gets the officials of this RepresentativeInfoResponse.

        Officials holding the offices listed above. Will only be present if includeOffices was true in the request.

        :return: The officials of this RepresentativeInfoResponse.
        :rtype: List[Official]
        """
        return self._officials

    @officials.setter
    def officials(self, officials):
        """Sets the officials of this RepresentativeInfoResponse.

        Officials holding the offices listed above. Will only be present if includeOffices was true in the request.

        :param officials: The officials of this RepresentativeInfoResponse.
        :type officials: List[Official]
        """

        self._officials = officials
