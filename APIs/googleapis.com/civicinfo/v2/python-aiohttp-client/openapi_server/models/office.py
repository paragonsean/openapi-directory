# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source import Source
from openapi_server import util


class Office(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, division_id: str=None, levels: List[str]=None, name: str=None, official_indices: List[int]=None, roles: List[str]=None, sources: List[Source]=None):
        """Office - a model defined in OpenAPI

        :param division_id: The division_id of this Office.
        :param levels: The levels of this Office.
        :param name: The name of this Office.
        :param official_indices: The official_indices of this Office.
        :param roles: The roles of this Office.
        :param sources: The sources of this Office.
        """
        self.openapi_types = {
            'division_id': str,
            'levels': List[str],
            'name': str,
            'official_indices': List[int],
            'roles': List[str],
            'sources': List[Source]
        }

        self.attribute_map = {
            'division_id': 'divisionId',
            'levels': 'levels',
            'name': 'name',
            'official_indices': 'officialIndices',
            'roles': 'roles',
            'sources': 'sources'
        }

        self._division_id = division_id
        self._levels = levels
        self._name = name
        self._official_indices = official_indices
        self._roles = roles
        self._sources = sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Office':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Office of this Office.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def division_id(self):
        """Gets the division_id of this Office.

        The OCD ID of the division with which this office is associated.

        :return: The division_id of this Office.
        :rtype: str
        """
        return self._division_id

    @division_id.setter
    def division_id(self, division_id):
        """Sets the division_id of this Office.

        The OCD ID of the division with which this office is associated.

        :param division_id: The division_id of this Office.
        :type division_id: str
        """

        self._division_id = division_id

    @property
    def levels(self):
        """Gets the levels of this Office.

        The levels of government of which this office is part. There may be more than one in cases where a jurisdiction effectively acts at two different levels of government; for example, the mayor of the District of Columbia acts at \"locality\" level, but also effectively at both \"administrative-area-2\" and \"administrative-area-1\".

        :return: The levels of this Office.
        :rtype: List[str]
        """
        return self._levels

    @levels.setter
    def levels(self, levels):
        """Sets the levels of this Office.

        The levels of government of which this office is part. There may be more than one in cases where a jurisdiction effectively acts at two different levels of government; for example, the mayor of the District of Columbia acts at \"locality\" level, but also effectively at both \"administrative-area-2\" and \"administrative-area-1\".

        :param levels: The levels of this Office.
        :type levels: List[str]
        """
        allowed_values = ["international", "country", "administrativeArea1", "regional", "administrativeArea2", "locality", "subLocality1", "subLocality2", "special"]  # noqa: E501
        if not set(levels).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `levels` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(levels) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._levels = levels

    @property
    def name(self):
        """Gets the name of this Office.

        The human-readable name of the office.

        :return: The name of this Office.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Office.

        The human-readable name of the office.

        :param name: The name of this Office.
        :type name: str
        """

        self._name = name

    @property
    def official_indices(self):
        """Gets the official_indices of this Office.

        List of indices in the officials array of people who presently hold this office.

        :return: The official_indices of this Office.
        :rtype: List[int]
        """
        return self._official_indices

    @official_indices.setter
    def official_indices(self, official_indices):
        """Sets the official_indices of this Office.

        List of indices in the officials array of people who presently hold this office.

        :param official_indices: The official_indices of this Office.
        :type official_indices: List[int]
        """

        self._official_indices = official_indices

    @property
    def roles(self):
        """Gets the roles of this Office.

        The roles which this office fulfills. Roles are not meant to be exhaustive, or to exactly specify the entire set of responsibilities of a given office, but are meant to be rough categories that are useful for general selection from or sorting of a list of offices.

        :return: The roles of this Office.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Office.

        The roles which this office fulfills. Roles are not meant to be exhaustive, or to exactly specify the entire set of responsibilities of a given office, but are meant to be rough categories that are useful for general selection from or sorting of a list of offices.

        :param roles: The roles of this Office.
        :type roles: List[str]
        """
        allowed_values = ["headOfState", "headOfGovernment", "deputyHeadOfGovernment", "governmentOfficer", "executiveCouncil", "legislatorUpperBody", "legislatorLowerBody", "highestCourtJudge", "judge", "schoolBoard", "specialPurposeOfficer", "otherRole"]  # noqa: E501
        if not set(roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(roles) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._roles = roles

    @property
    def sources(self):
        """Gets the sources of this Office.

        A list of sources for this office. If multiple sources are listed, the data has been aggregated from those sources.

        :return: The sources of this Office.
        :rtype: List[Source]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this Office.

        A list of sources for this office. If multiple sources are listed, the data has been aggregated from those sources.

        :param sources: The sources of this Office.
        :type sources: List[Source]
        """

        self._sources = sources
