# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel import Channel
from openapi_server.models.simple_address_type import SimpleAddressType
from openapi_server import util


class Official(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: List[SimpleAddressType]=None, channels: List[Channel]=None, emails: List[str]=None, name: str=None, party: str=None, phones: List[str]=None, photo_url: str=None, urls: List[str]=None):
        """Official - a model defined in OpenAPI

        :param address: The address of this Official.
        :param channels: The channels of this Official.
        :param emails: The emails of this Official.
        :param name: The name of this Official.
        :param party: The party of this Official.
        :param phones: The phones of this Official.
        :param photo_url: The photo_url of this Official.
        :param urls: The urls of this Official.
        """
        self.openapi_types = {
            'address': List[SimpleAddressType],
            'channels': List[Channel],
            'emails': List[str],
            'name': str,
            'party': str,
            'phones': List[str],
            'photo_url': str,
            'urls': List[str]
        }

        self.attribute_map = {
            'address': 'address',
            'channels': 'channels',
            'emails': 'emails',
            'name': 'name',
            'party': 'party',
            'phones': 'phones',
            'photo_url': 'photoUrl',
            'urls': 'urls'
        }

        self._address = address
        self._channels = channels
        self._emails = emails
        self._name = name
        self._party = party
        self._phones = phones
        self._photo_url = photo_url
        self._urls = urls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Official':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Official of this Official.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Official.

        Addresses at which to contact the official.

        :return: The address of this Official.
        :rtype: List[SimpleAddressType]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Official.

        Addresses at which to contact the official.

        :param address: The address of this Official.
        :type address: List[SimpleAddressType]
        """

        self._address = address

    @property
    def channels(self):
        """Gets the channels of this Official.

        A list of known (social) media channels for this official.

        :return: The channels of this Official.
        :rtype: List[Channel]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this Official.

        A list of known (social) media channels for this official.

        :param channels: The channels of this Official.
        :type channels: List[Channel]
        """

        self._channels = channels

    @property
    def emails(self):
        """Gets the emails of this Official.

        The direct email addresses for the official.

        :return: The emails of this Official.
        :rtype: List[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this Official.

        The direct email addresses for the official.

        :param emails: The emails of this Official.
        :type emails: List[str]
        """

        self._emails = emails

    @property
    def name(self):
        """Gets the name of this Official.

        The official's name.

        :return: The name of this Official.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Official.

        The official's name.

        :param name: The name of this Official.
        :type name: str
        """

        self._name = name

    @property
    def party(self):
        """Gets the party of this Official.

        The full name of the party the official belongs to.

        :return: The party of this Official.
        :rtype: str
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this Official.

        The full name of the party the official belongs to.

        :param party: The party of this Official.
        :type party: str
        """

        self._party = party

    @property
    def phones(self):
        """Gets the phones of this Official.

        The official's public contact phone numbers.

        :return: The phones of this Official.
        :rtype: List[str]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this Official.

        The official's public contact phone numbers.

        :param phones: The phones of this Official.
        :type phones: List[str]
        """

        self._phones = phones

    @property
    def photo_url(self):
        """Gets the photo_url of this Official.

        A URL for a photo of the official.

        :return: The photo_url of this Official.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this Official.

        A URL for a photo of the official.

        :param photo_url: The photo_url of this Official.
        :type photo_url: str
        """

        self._photo_url = photo_url

    @property
    def urls(self):
        """Gets the urls of this Official.

        The official's public website URLs.

        :return: The urls of this Official.
        :rtype: List[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this Official.

        The official's public website URLs.

        :param urls: The urls of this Official.
        :type urls: List[str]
        """

        self._urls = urls
