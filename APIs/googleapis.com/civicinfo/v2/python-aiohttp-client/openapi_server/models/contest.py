# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.candidate import Candidate
from openapi_server.models.electoral_district import ElectoralDistrict
from openapi_server.models.source import Source
from openapi_server import util


class Contest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ballot_placement: str=None, ballot_title: str=None, candidates: List[Candidate]=None, district: ElectoralDistrict=None, electorate_specifications: str=None, level: List[str]=None, number_elected: str=None, number_voting_for: str=None, office: str=None, primary_parties: List[str]=None, referendum_ballot_responses: List[str]=None, referendum_brief: str=None, referendum_con_statement: str=None, referendum_effect_of_abstain: str=None, referendum_passage_threshold: str=None, referendum_pro_statement: str=None, referendum_subtitle: str=None, referendum_text: str=None, referendum_title: str=None, referendum_url: str=None, roles: List[str]=None, sources: List[Source]=None, special: str=None, type: str=None):
        """Contest - a model defined in OpenAPI

        :param ballot_placement: The ballot_placement of this Contest.
        :param ballot_title: The ballot_title of this Contest.
        :param candidates: The candidates of this Contest.
        :param district: The district of this Contest.
        :param electorate_specifications: The electorate_specifications of this Contest.
        :param level: The level of this Contest.
        :param number_elected: The number_elected of this Contest.
        :param number_voting_for: The number_voting_for of this Contest.
        :param office: The office of this Contest.
        :param primary_parties: The primary_parties of this Contest.
        :param referendum_ballot_responses: The referendum_ballot_responses of this Contest.
        :param referendum_brief: The referendum_brief of this Contest.
        :param referendum_con_statement: The referendum_con_statement of this Contest.
        :param referendum_effect_of_abstain: The referendum_effect_of_abstain of this Contest.
        :param referendum_passage_threshold: The referendum_passage_threshold of this Contest.
        :param referendum_pro_statement: The referendum_pro_statement of this Contest.
        :param referendum_subtitle: The referendum_subtitle of this Contest.
        :param referendum_text: The referendum_text of this Contest.
        :param referendum_title: The referendum_title of this Contest.
        :param referendum_url: The referendum_url of this Contest.
        :param roles: The roles of this Contest.
        :param sources: The sources of this Contest.
        :param special: The special of this Contest.
        :param type: The type of this Contest.
        """
        self.openapi_types = {
            'ballot_placement': str,
            'ballot_title': str,
            'candidates': List[Candidate],
            'district': ElectoralDistrict,
            'electorate_specifications': str,
            'level': List[str],
            'number_elected': str,
            'number_voting_for': str,
            'office': str,
            'primary_parties': List[str],
            'referendum_ballot_responses': List[str],
            'referendum_brief': str,
            'referendum_con_statement': str,
            'referendum_effect_of_abstain': str,
            'referendum_passage_threshold': str,
            'referendum_pro_statement': str,
            'referendum_subtitle': str,
            'referendum_text': str,
            'referendum_title': str,
            'referendum_url': str,
            'roles': List[str],
            'sources': List[Source],
            'special': str,
            'type': str
        }

        self.attribute_map = {
            'ballot_placement': 'ballotPlacement',
            'ballot_title': 'ballotTitle',
            'candidates': 'candidates',
            'district': 'district',
            'electorate_specifications': 'electorateSpecifications',
            'level': 'level',
            'number_elected': 'numberElected',
            'number_voting_for': 'numberVotingFor',
            'office': 'office',
            'primary_parties': 'primaryParties',
            'referendum_ballot_responses': 'referendumBallotResponses',
            'referendum_brief': 'referendumBrief',
            'referendum_con_statement': 'referendumConStatement',
            'referendum_effect_of_abstain': 'referendumEffectOfAbstain',
            'referendum_passage_threshold': 'referendumPassageThreshold',
            'referendum_pro_statement': 'referendumProStatement',
            'referendum_subtitle': 'referendumSubtitle',
            'referendum_text': 'referendumText',
            'referendum_title': 'referendumTitle',
            'referendum_url': 'referendumUrl',
            'roles': 'roles',
            'sources': 'sources',
            'special': 'special',
            'type': 'type'
        }

        self._ballot_placement = ballot_placement
        self._ballot_title = ballot_title
        self._candidates = candidates
        self._district = district
        self._electorate_specifications = electorate_specifications
        self._level = level
        self._number_elected = number_elected
        self._number_voting_for = number_voting_for
        self._office = office
        self._primary_parties = primary_parties
        self._referendum_ballot_responses = referendum_ballot_responses
        self._referendum_brief = referendum_brief
        self._referendum_con_statement = referendum_con_statement
        self._referendum_effect_of_abstain = referendum_effect_of_abstain
        self._referendum_passage_threshold = referendum_passage_threshold
        self._referendum_pro_statement = referendum_pro_statement
        self._referendum_subtitle = referendum_subtitle
        self._referendum_text = referendum_text
        self._referendum_title = referendum_title
        self._referendum_url = referendum_url
        self._roles = roles
        self._sources = sources
        self._special = special
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contest of this Contest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ballot_placement(self):
        """Gets the ballot_placement of this Contest.

        A number specifying the position of this contest on the voter's ballot.

        :return: The ballot_placement of this Contest.
        :rtype: str
        """
        return self._ballot_placement

    @ballot_placement.setter
    def ballot_placement(self, ballot_placement):
        """Sets the ballot_placement of this Contest.

        A number specifying the position of this contest on the voter's ballot.

        :param ballot_placement: The ballot_placement of this Contest.
        :type ballot_placement: str
        """

        self._ballot_placement = ballot_placement

    @property
    def ballot_title(self):
        """Gets the ballot_title of this Contest.

        The official title on the ballot for this contest, only where available.

        :return: The ballot_title of this Contest.
        :rtype: str
        """
        return self._ballot_title

    @ballot_title.setter
    def ballot_title(self, ballot_title):
        """Sets the ballot_title of this Contest.

        The official title on the ballot for this contest, only where available.

        :param ballot_title: The ballot_title of this Contest.
        :type ballot_title: str
        """

        self._ballot_title = ballot_title

    @property
    def candidates(self):
        """Gets the candidates of this Contest.

        The candidate choices for this contest.

        :return: The candidates of this Contest.
        :rtype: List[Candidate]
        """
        return self._candidates

    @candidates.setter
    def candidates(self, candidates):
        """Sets the candidates of this Contest.

        The candidate choices for this contest.

        :param candidates: The candidates of this Contest.
        :type candidates: List[Candidate]
        """

        self._candidates = candidates

    @property
    def district(self):
        """Gets the district of this Contest.


        :return: The district of this Contest.
        :rtype: ElectoralDistrict
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this Contest.


        :param district: The district of this Contest.
        :type district: ElectoralDistrict
        """

        self._district = district

    @property
    def electorate_specifications(self):
        """Gets the electorate_specifications of this Contest.

        A description of any additional eligibility requirements for voting in this contest.

        :return: The electorate_specifications of this Contest.
        :rtype: str
        """
        return self._electorate_specifications

    @electorate_specifications.setter
    def electorate_specifications(self, electorate_specifications):
        """Sets the electorate_specifications of this Contest.

        A description of any additional eligibility requirements for voting in this contest.

        :param electorate_specifications: The electorate_specifications of this Contest.
        :type electorate_specifications: str
        """

        self._electorate_specifications = electorate_specifications

    @property
    def level(self):
        """Gets the level of this Contest.

        The levels of government of the office for this contest. There may be more than one in cases where a jurisdiction effectively acts at two different levels of government; for example, the mayor of the District of Columbia acts at \"locality\" level, but also effectively at both \"administrative-area-2\" and \"administrative-area-1\".

        :return: The level of this Contest.
        :rtype: List[str]
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Contest.

        The levels of government of the office for this contest. There may be more than one in cases where a jurisdiction effectively acts at two different levels of government; for example, the mayor of the District of Columbia acts at \"locality\" level, but also effectively at both \"administrative-area-2\" and \"administrative-area-1\".

        :param level: The level of this Contest.
        :type level: List[str]
        """
        allowed_values = ["international", "country", "administrativeArea1", "regional", "administrativeArea2", "locality", "subLocality1", "subLocality2", "special"]  # noqa: E501
        if not set(level).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `level` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(level) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._level = level

    @property
    def number_elected(self):
        """Gets the number_elected of this Contest.

        The number of candidates that will be elected to office in this contest.

        :return: The number_elected of this Contest.
        :rtype: str
        """
        return self._number_elected

    @number_elected.setter
    def number_elected(self, number_elected):
        """Sets the number_elected of this Contest.

        The number of candidates that will be elected to office in this contest.

        :param number_elected: The number_elected of this Contest.
        :type number_elected: str
        """

        self._number_elected = number_elected

    @property
    def number_voting_for(self):
        """Gets the number_voting_for of this Contest.

        The number of candidates that a voter may vote for in this contest.

        :return: The number_voting_for of this Contest.
        :rtype: str
        """
        return self._number_voting_for

    @number_voting_for.setter
    def number_voting_for(self, number_voting_for):
        """Sets the number_voting_for of this Contest.

        The number of candidates that a voter may vote for in this contest.

        :param number_voting_for: The number_voting_for of this Contest.
        :type number_voting_for: str
        """

        self._number_voting_for = number_voting_for

    @property
    def office(self):
        """Gets the office of this Contest.

        The name of the office for this contest.

        :return: The office of this Contest.
        :rtype: str
        """
        return self._office

    @office.setter
    def office(self, office):
        """Sets the office of this Contest.

        The name of the office for this contest.

        :param office: The office of this Contest.
        :type office: str
        """

        self._office = office

    @property
    def primary_parties(self):
        """Gets the primary_parties of this Contest.

        If this is a partisan election, the name of the party/parties it is for.

        :return: The primary_parties of this Contest.
        :rtype: List[str]
        """
        return self._primary_parties

    @primary_parties.setter
    def primary_parties(self, primary_parties):
        """Sets the primary_parties of this Contest.

        If this is a partisan election, the name of the party/parties it is for.

        :param primary_parties: The primary_parties of this Contest.
        :type primary_parties: List[str]
        """

        self._primary_parties = primary_parties

    @property
    def referendum_ballot_responses(self):
        """Gets the referendum_ballot_responses of this Contest.

        The set of ballot responses for the referendum. A ballot response represents a line on the ballot. Common examples might include \"yes\" or \"no\" for referenda. This field is only populated for contests of type 'Referendum'.

        :return: The referendum_ballot_responses of this Contest.
        :rtype: List[str]
        """
        return self._referendum_ballot_responses

    @referendum_ballot_responses.setter
    def referendum_ballot_responses(self, referendum_ballot_responses):
        """Sets the referendum_ballot_responses of this Contest.

        The set of ballot responses for the referendum. A ballot response represents a line on the ballot. Common examples might include \"yes\" or \"no\" for referenda. This field is only populated for contests of type 'Referendum'.

        :param referendum_ballot_responses: The referendum_ballot_responses of this Contest.
        :type referendum_ballot_responses: List[str]
        """

        self._referendum_ballot_responses = referendum_ballot_responses

    @property
    def referendum_brief(self):
        """Gets the referendum_brief of this Contest.

        Specifies a short summary of the referendum that is typically on the ballot below the title but above the text. This field is only populated for contests of type 'Referendum'.

        :return: The referendum_brief of this Contest.
        :rtype: str
        """
        return self._referendum_brief

    @referendum_brief.setter
    def referendum_brief(self, referendum_brief):
        """Sets the referendum_brief of this Contest.

        Specifies a short summary of the referendum that is typically on the ballot below the title but above the text. This field is only populated for contests of type 'Referendum'.

        :param referendum_brief: The referendum_brief of this Contest.
        :type referendum_brief: str
        """

        self._referendum_brief = referendum_brief

    @property
    def referendum_con_statement(self):
        """Gets the referendum_con_statement of this Contest.

        A statement in opposition to the referendum. It does not necessarily appear on the ballot. This field is only populated for contests of type 'Referendum'.

        :return: The referendum_con_statement of this Contest.
        :rtype: str
        """
        return self._referendum_con_statement

    @referendum_con_statement.setter
    def referendum_con_statement(self, referendum_con_statement):
        """Sets the referendum_con_statement of this Contest.

        A statement in opposition to the referendum. It does not necessarily appear on the ballot. This field is only populated for contests of type 'Referendum'.

        :param referendum_con_statement: The referendum_con_statement of this Contest.
        :type referendum_con_statement: str
        """

        self._referendum_con_statement = referendum_con_statement

    @property
    def referendum_effect_of_abstain(self):
        """Gets the referendum_effect_of_abstain of this Contest.

        Specifies what effect abstaining (not voting) on the proposition will have (i.e. whether abstaining is considered a vote against it). This field is only populated for contests of type 'Referendum'.

        :return: The referendum_effect_of_abstain of this Contest.
        :rtype: str
        """
        return self._referendum_effect_of_abstain

    @referendum_effect_of_abstain.setter
    def referendum_effect_of_abstain(self, referendum_effect_of_abstain):
        """Sets the referendum_effect_of_abstain of this Contest.

        Specifies what effect abstaining (not voting) on the proposition will have (i.e. whether abstaining is considered a vote against it). This field is only populated for contests of type 'Referendum'.

        :param referendum_effect_of_abstain: The referendum_effect_of_abstain of this Contest.
        :type referendum_effect_of_abstain: str
        """

        self._referendum_effect_of_abstain = referendum_effect_of_abstain

    @property
    def referendum_passage_threshold(self):
        """Gets the referendum_passage_threshold of this Contest.

        The threshold of votes that the referendum needs in order to pass, e.g. \"two-thirds\". This field is only populated for contests of type 'Referendum'.

        :return: The referendum_passage_threshold of this Contest.
        :rtype: str
        """
        return self._referendum_passage_threshold

    @referendum_passage_threshold.setter
    def referendum_passage_threshold(self, referendum_passage_threshold):
        """Sets the referendum_passage_threshold of this Contest.

        The threshold of votes that the referendum needs in order to pass, e.g. \"two-thirds\". This field is only populated for contests of type 'Referendum'.

        :param referendum_passage_threshold: The referendum_passage_threshold of this Contest.
        :type referendum_passage_threshold: str
        """

        self._referendum_passage_threshold = referendum_passage_threshold

    @property
    def referendum_pro_statement(self):
        """Gets the referendum_pro_statement of this Contest.

        A statement in favor of the referendum. It does not necessarily appear on the ballot. This field is only populated for contests of type 'Referendum'.

        :return: The referendum_pro_statement of this Contest.
        :rtype: str
        """
        return self._referendum_pro_statement

    @referendum_pro_statement.setter
    def referendum_pro_statement(self, referendum_pro_statement):
        """Sets the referendum_pro_statement of this Contest.

        A statement in favor of the referendum. It does not necessarily appear on the ballot. This field is only populated for contests of type 'Referendum'.

        :param referendum_pro_statement: The referendum_pro_statement of this Contest.
        :type referendum_pro_statement: str
        """

        self._referendum_pro_statement = referendum_pro_statement

    @property
    def referendum_subtitle(self):
        """Gets the referendum_subtitle of this Contest.

        A brief description of the referendum. This field is only populated for contests of type 'Referendum'.

        :return: The referendum_subtitle of this Contest.
        :rtype: str
        """
        return self._referendum_subtitle

    @referendum_subtitle.setter
    def referendum_subtitle(self, referendum_subtitle):
        """Sets the referendum_subtitle of this Contest.

        A brief description of the referendum. This field is only populated for contests of type 'Referendum'.

        :param referendum_subtitle: The referendum_subtitle of this Contest.
        :type referendum_subtitle: str
        """

        self._referendum_subtitle = referendum_subtitle

    @property
    def referendum_text(self):
        """Gets the referendum_text of this Contest.

        The full text of the referendum. This field is only populated for contests of type 'Referendum'.

        :return: The referendum_text of this Contest.
        :rtype: str
        """
        return self._referendum_text

    @referendum_text.setter
    def referendum_text(self, referendum_text):
        """Sets the referendum_text of this Contest.

        The full text of the referendum. This field is only populated for contests of type 'Referendum'.

        :param referendum_text: The referendum_text of this Contest.
        :type referendum_text: str
        """

        self._referendum_text = referendum_text

    @property
    def referendum_title(self):
        """Gets the referendum_title of this Contest.

        The title of the referendum (e.g. 'Proposition 42'). This field is only populated for contests of type 'Referendum'.

        :return: The referendum_title of this Contest.
        :rtype: str
        """
        return self._referendum_title

    @referendum_title.setter
    def referendum_title(self, referendum_title):
        """Sets the referendum_title of this Contest.

        The title of the referendum (e.g. 'Proposition 42'). This field is only populated for contests of type 'Referendum'.

        :param referendum_title: The referendum_title of this Contest.
        :type referendum_title: str
        """

        self._referendum_title = referendum_title

    @property
    def referendum_url(self):
        """Gets the referendum_url of this Contest.

        A link to the referendum. This field is only populated for contests of type 'Referendum'.

        :return: The referendum_url of this Contest.
        :rtype: str
        """
        return self._referendum_url

    @referendum_url.setter
    def referendum_url(self, referendum_url):
        """Sets the referendum_url of this Contest.

        A link to the referendum. This field is only populated for contests of type 'Referendum'.

        :param referendum_url: The referendum_url of this Contest.
        :type referendum_url: str
        """

        self._referendum_url = referendum_url

    @property
    def roles(self):
        """Gets the roles of this Contest.

        The roles which this office fulfills.

        :return: The roles of this Contest.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Contest.

        The roles which this office fulfills.

        :param roles: The roles of this Contest.
        :type roles: List[str]
        """
        allowed_values = ["headOfState", "headOfGovernment", "deputyHeadOfGovernment", "governmentOfficer", "executiveCouncil", "legislatorUpperBody", "legislatorLowerBody", "highestCourtJudge", "judge", "schoolBoard", "specialPurposeOfficer", "otherRole"]  # noqa: E501
        if not set(roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(roles) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._roles = roles

    @property
    def sources(self):
        """Gets the sources of this Contest.

        A list of sources for this contest. If multiple sources are listed, the data has been aggregated from those sources.

        :return: The sources of this Contest.
        :rtype: List[Source]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this Contest.

        A list of sources for this contest. If multiple sources are listed, the data has been aggregated from those sources.

        :param sources: The sources of this Contest.
        :type sources: List[Source]
        """

        self._sources = sources

    @property
    def special(self):
        """Gets the special of this Contest.

        \"Yes\" or \"No\" depending on whether this a contest being held outside the normal election cycle.

        :return: The special of this Contest.
        :rtype: str
        """
        return self._special

    @special.setter
    def special(self, special):
        """Sets the special of this Contest.

        \"Yes\" or \"No\" depending on whether this a contest being held outside the normal election cycle.

        :param special: The special of this Contest.
        :type special: str
        """

        self._special = special

    @property
    def type(self):
        """Gets the type of this Contest.

        The type of contest. Usually this will be 'General', 'Primary', or 'Run-off' for contests with candidates. For referenda this will be 'Referendum'. For Retention contests this will typically be 'Retention'.

        :return: The type of this Contest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Contest.

        The type of contest. Usually this will be 'General', 'Primary', or 'Run-off' for contests with candidates. For referenda this will be 'Referendum'. For Retention contests this will typically be 'Retention'.

        :param type: The type of this Contest.
        :type type: str
        """

        self._type = type
