# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel import Channel
from openapi_server import util


class Candidate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, candidate_url: str=None, channels: List[Channel]=None, email: str=None, name: str=None, order_on_ballot: str=None, party: str=None, phone: str=None, photo_url: str=None):
        """Candidate - a model defined in OpenAPI

        :param candidate_url: The candidate_url of this Candidate.
        :param channels: The channels of this Candidate.
        :param email: The email of this Candidate.
        :param name: The name of this Candidate.
        :param order_on_ballot: The order_on_ballot of this Candidate.
        :param party: The party of this Candidate.
        :param phone: The phone of this Candidate.
        :param photo_url: The photo_url of this Candidate.
        """
        self.openapi_types = {
            'candidate_url': str,
            'channels': List[Channel],
            'email': str,
            'name': str,
            'order_on_ballot': str,
            'party': str,
            'phone': str,
            'photo_url': str
        }

        self.attribute_map = {
            'candidate_url': 'candidateUrl',
            'channels': 'channels',
            'email': 'email',
            'name': 'name',
            'order_on_ballot': 'orderOnBallot',
            'party': 'party',
            'phone': 'phone',
            'photo_url': 'photoUrl'
        }

        self._candidate_url = candidate_url
        self._channels = channels
        self._email = email
        self._name = name
        self._order_on_ballot = order_on_ballot
        self._party = party
        self._phone = phone
        self._photo_url = photo_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Candidate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Candidate of this Candidate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def candidate_url(self):
        """Gets the candidate_url of this Candidate.

        The URL for the candidate's campaign web site.

        :return: The candidate_url of this Candidate.
        :rtype: str
        """
        return self._candidate_url

    @candidate_url.setter
    def candidate_url(self, candidate_url):
        """Sets the candidate_url of this Candidate.

        The URL for the candidate's campaign web site.

        :param candidate_url: The candidate_url of this Candidate.
        :type candidate_url: str
        """

        self._candidate_url = candidate_url

    @property
    def channels(self):
        """Gets the channels of this Candidate.

        A list of known (social) media channels for this candidate.

        :return: The channels of this Candidate.
        :rtype: List[Channel]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this Candidate.

        A list of known (social) media channels for this candidate.

        :param channels: The channels of this Candidate.
        :type channels: List[Channel]
        """

        self._channels = channels

    @property
    def email(self):
        """Gets the email of this Candidate.

        The email address for the candidate's campaign.

        :return: The email of this Candidate.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Candidate.

        The email address for the candidate's campaign.

        :param email: The email of this Candidate.
        :type email: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this Candidate.

        The candidate's name. If this is a joint ticket it will indicate the name of the candidate at the top of a ticket followed by a / and that name of candidate at the bottom of the ticket. e.g. \"Mitt Romney / Paul Ryan\"

        :return: The name of this Candidate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Candidate.

        The candidate's name. If this is a joint ticket it will indicate the name of the candidate at the top of a ticket followed by a / and that name of candidate at the bottom of the ticket. e.g. \"Mitt Romney / Paul Ryan\"

        :param name: The name of this Candidate.
        :type name: str
        """

        self._name = name

    @property
    def order_on_ballot(self):
        """Gets the order_on_ballot of this Candidate.

        The order the candidate appears on the ballot for this contest.

        :return: The order_on_ballot of this Candidate.
        :rtype: str
        """
        return self._order_on_ballot

    @order_on_ballot.setter
    def order_on_ballot(self, order_on_ballot):
        """Sets the order_on_ballot of this Candidate.

        The order the candidate appears on the ballot for this contest.

        :param order_on_ballot: The order_on_ballot of this Candidate.
        :type order_on_ballot: str
        """

        self._order_on_ballot = order_on_ballot

    @property
    def party(self):
        """Gets the party of this Candidate.

        The full name of the party the candidate is a member of.

        :return: The party of this Candidate.
        :rtype: str
        """
        return self._party

    @party.setter
    def party(self, party):
        """Sets the party of this Candidate.

        The full name of the party the candidate is a member of.

        :param party: The party of this Candidate.
        :type party: str
        """

        self._party = party

    @property
    def phone(self):
        """Gets the phone of this Candidate.

        The voice phone number for the candidate's campaign office.

        :return: The phone of this Candidate.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Candidate.

        The voice phone number for the candidate's campaign office.

        :param phone: The phone of this Candidate.
        :type phone: str
        """

        self._phone = phone

    @property
    def photo_url(self):
        """Gets the photo_url of this Candidate.

        A URL for a photo of the candidate.

        :return: The photo_url of this Candidate.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this Candidate.

        A URL for a photo of the candidate.

        :param photo_url: The photo_url of this Candidate.
        :type photo_url: str
        """

        self._photo_url = photo_url
