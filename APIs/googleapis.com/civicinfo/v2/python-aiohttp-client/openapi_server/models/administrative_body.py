# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.election_official import ElectionOfficial
from openapi_server.models.simple_address_type import SimpleAddressType
from openapi_server import util


class AdministrativeBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, absentee_voting_info_url: str=None, ballot_info_url: str=None, correspondence_address: SimpleAddressType=None, election_info_url: str=None, election_notice_text: str=None, election_notice_url: str=None, election_officials: List[ElectionOfficial]=None, election_registration_confirmation_url: str=None, election_registration_url: str=None, election_rules_url: str=None, hours_of_operation: str=None, name: str=None, physical_address: SimpleAddressType=None, voter_services: List[str]=None, voting_location_finder_url: str=None):
        """AdministrativeBody - a model defined in OpenAPI

        :param absentee_voting_info_url: The absentee_voting_info_url of this AdministrativeBody.
        :param ballot_info_url: The ballot_info_url of this AdministrativeBody.
        :param correspondence_address: The correspondence_address of this AdministrativeBody.
        :param election_info_url: The election_info_url of this AdministrativeBody.
        :param election_notice_text: The election_notice_text of this AdministrativeBody.
        :param election_notice_url: The election_notice_url of this AdministrativeBody.
        :param election_officials: The election_officials of this AdministrativeBody.
        :param election_registration_confirmation_url: The election_registration_confirmation_url of this AdministrativeBody.
        :param election_registration_url: The election_registration_url of this AdministrativeBody.
        :param election_rules_url: The election_rules_url of this AdministrativeBody.
        :param hours_of_operation: The hours_of_operation of this AdministrativeBody.
        :param name: The name of this AdministrativeBody.
        :param physical_address: The physical_address of this AdministrativeBody.
        :param voter_services: The voter_services of this AdministrativeBody.
        :param voting_location_finder_url: The voting_location_finder_url of this AdministrativeBody.
        """
        self.openapi_types = {
            'absentee_voting_info_url': str,
            'ballot_info_url': str,
            'correspondence_address': SimpleAddressType,
            'election_info_url': str,
            'election_notice_text': str,
            'election_notice_url': str,
            'election_officials': List[ElectionOfficial],
            'election_registration_confirmation_url': str,
            'election_registration_url': str,
            'election_rules_url': str,
            'hours_of_operation': str,
            'name': str,
            'physical_address': SimpleAddressType,
            'voter_services': List[str],
            'voting_location_finder_url': str
        }

        self.attribute_map = {
            'absentee_voting_info_url': 'absenteeVotingInfoUrl',
            'ballot_info_url': 'ballotInfoUrl',
            'correspondence_address': 'correspondenceAddress',
            'election_info_url': 'electionInfoUrl',
            'election_notice_text': 'electionNoticeText',
            'election_notice_url': 'electionNoticeUrl',
            'election_officials': 'electionOfficials',
            'election_registration_confirmation_url': 'electionRegistrationConfirmationUrl',
            'election_registration_url': 'electionRegistrationUrl',
            'election_rules_url': 'electionRulesUrl',
            'hours_of_operation': 'hoursOfOperation',
            'name': 'name',
            'physical_address': 'physicalAddress',
            'voter_services': 'voter_services',
            'voting_location_finder_url': 'votingLocationFinderUrl'
        }

        self._absentee_voting_info_url = absentee_voting_info_url
        self._ballot_info_url = ballot_info_url
        self._correspondence_address = correspondence_address
        self._election_info_url = election_info_url
        self._election_notice_text = election_notice_text
        self._election_notice_url = election_notice_url
        self._election_officials = election_officials
        self._election_registration_confirmation_url = election_registration_confirmation_url
        self._election_registration_url = election_registration_url
        self._election_rules_url = election_rules_url
        self._hours_of_operation = hours_of_operation
        self._name = name
        self._physical_address = physical_address
        self._voter_services = voter_services
        self._voting_location_finder_url = voting_location_finder_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdministrativeBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdministrativeBody of this AdministrativeBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def absentee_voting_info_url(self):
        """Gets the absentee_voting_info_url of this AdministrativeBody.

        A URL provided by this administrative body for information on absentee voting.

        :return: The absentee_voting_info_url of this AdministrativeBody.
        :rtype: str
        """
        return self._absentee_voting_info_url

    @absentee_voting_info_url.setter
    def absentee_voting_info_url(self, absentee_voting_info_url):
        """Sets the absentee_voting_info_url of this AdministrativeBody.

        A URL provided by this administrative body for information on absentee voting.

        :param absentee_voting_info_url: The absentee_voting_info_url of this AdministrativeBody.
        :type absentee_voting_info_url: str
        """

        self._absentee_voting_info_url = absentee_voting_info_url

    @property
    def ballot_info_url(self):
        """Gets the ballot_info_url of this AdministrativeBody.

        A URL provided by this administrative body to give contest information to the voter.

        :return: The ballot_info_url of this AdministrativeBody.
        :rtype: str
        """
        return self._ballot_info_url

    @ballot_info_url.setter
    def ballot_info_url(self, ballot_info_url):
        """Sets the ballot_info_url of this AdministrativeBody.

        A URL provided by this administrative body to give contest information to the voter.

        :param ballot_info_url: The ballot_info_url of this AdministrativeBody.
        :type ballot_info_url: str
        """

        self._ballot_info_url = ballot_info_url

    @property
    def correspondence_address(self):
        """Gets the correspondence_address of this AdministrativeBody.


        :return: The correspondence_address of this AdministrativeBody.
        :rtype: SimpleAddressType
        """
        return self._correspondence_address

    @correspondence_address.setter
    def correspondence_address(self, correspondence_address):
        """Sets the correspondence_address of this AdministrativeBody.


        :param correspondence_address: The correspondence_address of this AdministrativeBody.
        :type correspondence_address: SimpleAddressType
        """

        self._correspondence_address = correspondence_address

    @property
    def election_info_url(self):
        """Gets the election_info_url of this AdministrativeBody.

        A URL provided by this administrative body for looking up general election information.

        :return: The election_info_url of this AdministrativeBody.
        :rtype: str
        """
        return self._election_info_url

    @election_info_url.setter
    def election_info_url(self, election_info_url):
        """Sets the election_info_url of this AdministrativeBody.

        A URL provided by this administrative body for looking up general election information.

        :param election_info_url: The election_info_url of this AdministrativeBody.
        :type election_info_url: str
        """

        self._election_info_url = election_info_url

    @property
    def election_notice_text(self):
        """Gets the election_notice_text of this AdministrativeBody.

        A last minute or emergency notification text provided by this administrative body.

        :return: The election_notice_text of this AdministrativeBody.
        :rtype: str
        """
        return self._election_notice_text

    @election_notice_text.setter
    def election_notice_text(self, election_notice_text):
        """Sets the election_notice_text of this AdministrativeBody.

        A last minute or emergency notification text provided by this administrative body.

        :param election_notice_text: The election_notice_text of this AdministrativeBody.
        :type election_notice_text: str
        """

        self._election_notice_text = election_notice_text

    @property
    def election_notice_url(self):
        """Gets the election_notice_url of this AdministrativeBody.

        A URL provided by this administrative body for additional information related to the last minute or emergency notification.

        :return: The election_notice_url of this AdministrativeBody.
        :rtype: str
        """
        return self._election_notice_url

    @election_notice_url.setter
    def election_notice_url(self, election_notice_url):
        """Sets the election_notice_url of this AdministrativeBody.

        A URL provided by this administrative body for additional information related to the last minute or emergency notification.

        :param election_notice_url: The election_notice_url of this AdministrativeBody.
        :type election_notice_url: str
        """

        self._election_notice_url = election_notice_url

    @property
    def election_officials(self):
        """Gets the election_officials of this AdministrativeBody.

        The election officials for this election administrative body.

        :return: The election_officials of this AdministrativeBody.
        :rtype: List[ElectionOfficial]
        """
        return self._election_officials

    @election_officials.setter
    def election_officials(self, election_officials):
        """Sets the election_officials of this AdministrativeBody.

        The election officials for this election administrative body.

        :param election_officials: The election_officials of this AdministrativeBody.
        :type election_officials: List[ElectionOfficial]
        """

        self._election_officials = election_officials

    @property
    def election_registration_confirmation_url(self):
        """Gets the election_registration_confirmation_url of this AdministrativeBody.

        A URL provided by this administrative body for confirming that the voter is registered to vote.

        :return: The election_registration_confirmation_url of this AdministrativeBody.
        :rtype: str
        """
        return self._election_registration_confirmation_url

    @election_registration_confirmation_url.setter
    def election_registration_confirmation_url(self, election_registration_confirmation_url):
        """Sets the election_registration_confirmation_url of this AdministrativeBody.

        A URL provided by this administrative body for confirming that the voter is registered to vote.

        :param election_registration_confirmation_url: The election_registration_confirmation_url of this AdministrativeBody.
        :type election_registration_confirmation_url: str
        """

        self._election_registration_confirmation_url = election_registration_confirmation_url

    @property
    def election_registration_url(self):
        """Gets the election_registration_url of this AdministrativeBody.

        A URL provided by this administrative body for looking up how to register to vote.

        :return: The election_registration_url of this AdministrativeBody.
        :rtype: str
        """
        return self._election_registration_url

    @election_registration_url.setter
    def election_registration_url(self, election_registration_url):
        """Sets the election_registration_url of this AdministrativeBody.

        A URL provided by this administrative body for looking up how to register to vote.

        :param election_registration_url: The election_registration_url of this AdministrativeBody.
        :type election_registration_url: str
        """

        self._election_registration_url = election_registration_url

    @property
    def election_rules_url(self):
        """Gets the election_rules_url of this AdministrativeBody.

        A URL provided by this administrative body describing election rules to the voter.

        :return: The election_rules_url of this AdministrativeBody.
        :rtype: str
        """
        return self._election_rules_url

    @election_rules_url.setter
    def election_rules_url(self, election_rules_url):
        """Sets the election_rules_url of this AdministrativeBody.

        A URL provided by this administrative body describing election rules to the voter.

        :param election_rules_url: The election_rules_url of this AdministrativeBody.
        :type election_rules_url: str
        """

        self._election_rules_url = election_rules_url

    @property
    def hours_of_operation(self):
        """Gets the hours_of_operation of this AdministrativeBody.

        A description of the hours of operation for this administrative body.

        :return: The hours_of_operation of this AdministrativeBody.
        :rtype: str
        """
        return self._hours_of_operation

    @hours_of_operation.setter
    def hours_of_operation(self, hours_of_operation):
        """Sets the hours_of_operation of this AdministrativeBody.

        A description of the hours of operation for this administrative body.

        :param hours_of_operation: The hours_of_operation of this AdministrativeBody.
        :type hours_of_operation: str
        """

        self._hours_of_operation = hours_of_operation

    @property
    def name(self):
        """Gets the name of this AdministrativeBody.

        The name of this election administrative body.

        :return: The name of this AdministrativeBody.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdministrativeBody.

        The name of this election administrative body.

        :param name: The name of this AdministrativeBody.
        :type name: str
        """

        self._name = name

    @property
    def physical_address(self):
        """Gets the physical_address of this AdministrativeBody.


        :return: The physical_address of this AdministrativeBody.
        :rtype: SimpleAddressType
        """
        return self._physical_address

    @physical_address.setter
    def physical_address(self, physical_address):
        """Sets the physical_address of this AdministrativeBody.


        :param physical_address: The physical_address of this AdministrativeBody.
        :type physical_address: SimpleAddressType
        """

        self._physical_address = physical_address

    @property
    def voter_services(self):
        """Gets the voter_services of this AdministrativeBody.

        A description of the services this administrative body may provide.

        :return: The voter_services of this AdministrativeBody.
        :rtype: List[str]
        """
        return self._voter_services

    @voter_services.setter
    def voter_services(self, voter_services):
        """Sets the voter_services of this AdministrativeBody.

        A description of the services this administrative body may provide.

        :param voter_services: The voter_services of this AdministrativeBody.
        :type voter_services: List[str]
        """

        self._voter_services = voter_services

    @property
    def voting_location_finder_url(self):
        """Gets the voting_location_finder_url of this AdministrativeBody.

        A URL provided by this administrative body for looking up where to vote.

        :return: The voting_location_finder_url of this AdministrativeBody.
        :rtype: str
        """
        return self._voting_location_finder_url

    @voting_location_finder_url.setter
    def voting_location_finder_url(self, voting_location_finder_url):
        """Sets the voting_location_finder_url of this AdministrativeBody.

        A URL provided by this administrative body for looking up where to vote.

        :param voting_location_finder_url: The voting_location_finder_url of this AdministrativeBody.
        :type voting_location_finder_url: str
        """

        self._voting_location_finder_url = voting_location_finder_url
