# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ElectoralDistrict(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, scope: str=None):
        """ElectoralDistrict - a model defined in OpenAPI

        :param id: The id of this ElectoralDistrict.
        :param name: The name of this ElectoralDistrict.
        :param scope: The scope of this ElectoralDistrict.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'scope': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'scope': 'scope'
        }

        self._id = id
        self._name = name
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElectoralDistrict':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElectoralDistrict of this ElectoralDistrict.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ElectoralDistrict.

        An identifier for this district, relative to its scope. For example, the 34th State Senate district would have id \"34\" and a scope of stateUpper.

        :return: The id of this ElectoralDistrict.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ElectoralDistrict.

        An identifier for this district, relative to its scope. For example, the 34th State Senate district would have id \"34\" and a scope of stateUpper.

        :param id: The id of this ElectoralDistrict.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ElectoralDistrict.

        The name of the district.

        :return: The name of this ElectoralDistrict.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ElectoralDistrict.

        The name of the district.

        :param name: The name of this ElectoralDistrict.
        :type name: str
        """

        self._name = name

    @property
    def scope(self):
        """Gets the scope of this ElectoralDistrict.

        The geographic scope of this district. If unspecified the district's geography is not known. One of: national, statewide, congressional, stateUpper, stateLower, countywide, judicial, schoolBoard, cityWide, township, countyCouncil, cityCouncil, ward, special

        :return: The scope of this ElectoralDistrict.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ElectoralDistrict.

        The geographic scope of this district. If unspecified the district's geography is not known. One of: national, statewide, congressional, stateUpper, stateLower, countywide, judicial, schoolBoard, cityWide, township, countyCouncil, cityCouncil, ward, special

        :param scope: The scope of this ElectoralDistrict.
        :type scope: str
        """
        allowed_values = ["statewide", "congressional", "stateUpper", "stateLower", "countywide", "judicial", "schoolBoard", "citywide", "special", "countyCouncil", "township", "ward", "cityCouncil", "national"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope
