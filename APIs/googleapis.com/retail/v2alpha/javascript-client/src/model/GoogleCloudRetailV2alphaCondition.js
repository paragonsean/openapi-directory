/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudRetailV2alphaConditionQueryTerm from './GoogleCloudRetailV2alphaConditionQueryTerm';
import GoogleCloudRetailV2alphaConditionTimeRange from './GoogleCloudRetailV2alphaConditionTimeRange';

/**
 * The GoogleCloudRetailV2alphaCondition model module.
 * @module model/GoogleCloudRetailV2alphaCondition
 * @version v2alpha
 */
class GoogleCloudRetailV2alphaCondition {
    /**
     * Constructs a new <code>GoogleCloudRetailV2alphaCondition</code>.
     * Metadata that is used to define a condition that triggers an action. A valid condition must specify at least one of &#39;query_terms&#39; or &#39;products_filter&#39;. If multiple fields are specified, the condition is met if all the fields are satisfied e.g. if a set of query terms and product_filter are set, then only items matching the product_filter for requests with a query matching the query terms wil get boosted.
     * @alias module:model/GoogleCloudRetailV2alphaCondition
     */
    constructor() { 
        
        GoogleCloudRetailV2alphaCondition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudRetailV2alphaCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudRetailV2alphaCondition} obj Optional instance to populate.
     * @return {module:model/GoogleCloudRetailV2alphaCondition} The populated <code>GoogleCloudRetailV2alphaCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudRetailV2alphaCondition();

            if (data.hasOwnProperty('activeTimeRange')) {
                obj['activeTimeRange'] = ApiClient.convertToType(data['activeTimeRange'], [GoogleCloudRetailV2alphaConditionTimeRange]);
            }
            if (data.hasOwnProperty('pageCategories')) {
                obj['pageCategories'] = ApiClient.convertToType(data['pageCategories'], ['String']);
            }
            if (data.hasOwnProperty('queryTerms')) {
                obj['queryTerms'] = ApiClient.convertToType(data['queryTerms'], [GoogleCloudRetailV2alphaConditionQueryTerm]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudRetailV2alphaCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudRetailV2alphaCondition</code>.
     */
    static validateJSON(data) {
        if (data['activeTimeRange']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['activeTimeRange'])) {
                throw new Error("Expected the field `activeTimeRange` to be an array in the JSON data but got " + data['activeTimeRange']);
            }
            // validate the optional field `activeTimeRange` (array)
            for (const item of data['activeTimeRange']) {
                GoogleCloudRetailV2alphaConditionTimeRange.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pageCategories'])) {
            throw new Error("Expected the field `pageCategories` to be an array in the JSON data but got " + data['pageCategories']);
        }
        if (data['queryTerms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['queryTerms'])) {
                throw new Error("Expected the field `queryTerms` to be an array in the JSON data but got " + data['queryTerms']);
            }
            // validate the optional field `queryTerms` (array)
            for (const item of data['queryTerms']) {
                GoogleCloudRetailV2alphaConditionQueryTerm.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Range of time(s) specifying when Condition is active. Condition true if any time range matches.
 * @member {Array.<module:model/GoogleCloudRetailV2alphaConditionTimeRange>} activeTimeRange
 */
GoogleCloudRetailV2alphaCondition.prototype['activeTimeRange'] = undefined;

/**
 * Used to support browse uses cases. A list (up to 10 entries) of categories or departments. The format should be the same as UserEvent.page_categories;
 * @member {Array.<String>} pageCategories
 */
GoogleCloudRetailV2alphaCondition.prototype['pageCategories'] = undefined;

/**
 * A list (up to 10 entries) of terms to match the query on. If not specified, match all queries. If many query terms are specified, the condition is matched if any of the terms is a match (i.e. using the OR operator).
 * @member {Array.<module:model/GoogleCloudRetailV2alphaConditionQueryTerm>} queryTerms
 */
GoogleCloudRetailV2alphaCondition.prototype['queryTerms'] = undefined;






export default GoogleCloudRetailV2alphaCondition;

