/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudRetailV2alphaInterval from './GoogleCloudRetailV2alphaInterval';

/**
 * The GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey model module.
 * @module model/GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey
 * @version v2alpha
 */
class GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey {
    /**
     * Constructs a new <code>GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey</code>.
     * Specifies how a facet is computed.
     * @alias module:model/GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey
     */
    constructor() { 
        
        GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey} obj Optional instance to populate.
     * @return {module:model/GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey} The populated <code>GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey();

            if (data.hasOwnProperty('caseInsensitive')) {
                obj['caseInsensitive'] = ApiClient.convertToType(data['caseInsensitive'], 'Boolean');
            }
            if (data.hasOwnProperty('contains')) {
                obj['contains'] = ApiClient.convertToType(data['contains'], ['String']);
            }
            if (data.hasOwnProperty('intervals')) {
                obj['intervals'] = ApiClient.convertToType(data['intervals'], [GoogleCloudRetailV2alphaInterval]);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('orderBy')) {
                obj['orderBy'] = ApiClient.convertToType(data['orderBy'], 'String');
            }
            if (data.hasOwnProperty('prefixes')) {
                obj['prefixes'] = ApiClient.convertToType(data['prefixes'], ['String']);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('restrictedValues')) {
                obj['restrictedValues'] = ApiClient.convertToType(data['restrictedValues'], ['String']);
            }
            if (data.hasOwnProperty('returnMinMax')) {
                obj['returnMinMax'] = ApiClient.convertToType(data['returnMinMax'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['contains'])) {
            throw new Error("Expected the field `contains` to be an array in the JSON data but got " + data['contains']);
        }
        if (data['intervals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['intervals'])) {
                throw new Error("Expected the field `intervals` to be an array in the JSON data but got " + data['intervals']);
            }
            // validate the optional field `intervals` (array)
            for (const item of data['intervals']) {
                GoogleCloudRetailV2alphaInterval.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['orderBy'] && !(typeof data['orderBy'] === 'string' || data['orderBy'] instanceof String)) {
            throw new Error("Expected the field `orderBy` to be a primitive type in the JSON string but got " + data['orderBy']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['prefixes'])) {
            throw new Error("Expected the field `prefixes` to be an array in the JSON data but got " + data['prefixes']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['restrictedValues'])) {
            throw new Error("Expected the field `restrictedValues` to be an array in the JSON data but got " + data['restrictedValues']);
        }

        return true;
    }


}



/**
 * True to make facet keys case insensitive when getting faceting values with prefixes or contains; false otherwise.
 * @member {Boolean} caseInsensitive
 */
GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.prototype['caseInsensitive'] = undefined;

/**
 * Only get facet values that contains the given strings. For example, suppose \"categories\" has three values \"Women > Shoe\", \"Women > Dress\" and \"Men > Shoe\". If set \"contains\" to \"Shoe\", the \"categories\" facet gives only \"Women > Shoe\" and \"Men > Shoe\". Only supported on textual fields. Maximum is 10.
 * @member {Array.<String>} contains
 */
GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.prototype['contains'] = undefined;

/**
 * Set only if values should be bucketized into intervals. Must be set for facets with numerical values. Must not be set for facet with text values. Maximum number of intervals is 40. For all numerical facet keys that appear in the list of products from the catalog, the percentiles 0, 10, 30, 50, 70, 90, and 100 are computed from their distribution weekly. If the model assigns a high score to a numerical facet key and its intervals are not specified in the search request, these percentiles become the bounds for its intervals and are returned in the response. If the facet key intervals are specified in the request, then the specified intervals are returned instead.
 * @member {Array.<module:model/GoogleCloudRetailV2alphaInterval>} intervals
 */
GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.prototype['intervals'] = undefined;

/**
 * Required. Supported textual and numerical facet keys in Product object, over which the facet values are computed. Facet key is case-sensitive. Allowed facet keys when FacetKey.query is not specified: * textual_field = * \"brands\" * \"categories\" * \"genders\" * \"ageGroups\" * \"availability\" * \"colorFamilies\" * \"colors\" * \"sizes\" * \"materials\" * \"patterns\" * \"conditions\" * \"attributes.key\" * \"pickupInStore\" * \"shipToStore\" * \"sameDayDelivery\" * \"nextDayDelivery\" * \"customFulfillment1\" * \"customFulfillment2\" * \"customFulfillment3\" * \"customFulfillment4\" * \"customFulfillment5\" * \"inventory(place_id,attributes.key)\" * numerical_field = * \"price\" * \"discount\" * \"rating\" * \"ratingCount\" * \"attributes.key\" * \"inventory(place_id,price)\" * \"inventory(place_id,original_price)\" * \"inventory(place_id,attributes.key)\"
 * @member {String} key
 */
GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.prototype['key'] = undefined;

/**
 * The order in which SearchResponse.Facet.values are returned. Allowed values are: * \"count desc\", which means order by SearchResponse.Facet.values.count descending. * \"value desc\", which means order by SearchResponse.Facet.values.value descending. Only applies to textual facets. If not set, textual values are sorted in [natural order](https://en.wikipedia.org/wiki/Natural_sort_order); numerical intervals are sorted in the order given by FacetSpec.FacetKey.intervals; FulfillmentInfo.place_ids are sorted in the order given by FacetSpec.FacetKey.restricted_values.
 * @member {String} orderBy
 */
GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.prototype['orderBy'] = undefined;

/**
 * Only get facet values that start with the given string prefix. For example, suppose \"categories\" has three values \"Women > Shoe\", \"Women > Dress\" and \"Men > Shoe\". If set \"prefixes\" to \"Women\", the \"categories\" facet gives only \"Women > Shoe\" and \"Women > Dress\". Only supported on textual fields. Maximum is 10.
 * @member {Array.<String>} prefixes
 */
GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.prototype['prefixes'] = undefined;

/**
 * The query that is used to compute facet for the given facet key. When provided, it overrides the default behavior of facet computation. The query syntax is the same as a filter expression. See SearchRequest.filter for detail syntax and limitations. Notice that there is no limitation on FacetKey.key when query is specified. In the response, SearchResponse.Facet.values.value is always \"1\" and SearchResponse.Facet.values.count is the number of results that match the query. For example, you can set a customized facet for \"shipToStore\", where FacetKey.key is \"customizedShipToStore\", and FacetKey.query is \"availability: ANY(\\\"IN_STOCK\\\") AND shipToStore: ANY(\\\"123\\\")\". Then the facet counts the products that are both in stock and ship to store \"123\".
 * @member {String} query
 */
GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.prototype['query'] = undefined;

/**
 * Only get facet for the given restricted values. For example, when using \"pickupInStore\" as key and set restricted values to [\"store123\", \"store456\"], only facets for \"store123\" and \"store456\" are returned. Only supported on predefined textual fields, custom textual attributes and fulfillments. Maximum is 20. Must be set for the fulfillment facet keys: * pickupInStore * shipToStore * sameDayDelivery * nextDayDelivery * customFulfillment1 * customFulfillment2 * customFulfillment3 * customFulfillment4 * customFulfillment5
 * @member {Array.<String>} restrictedValues
 */
GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.prototype['restrictedValues'] = undefined;

/**
 * Returns the min and max value for each numerical facet intervals. Ignored for textual facets.
 * @member {Boolean} returnMinMax
 */
GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.prototype['returnMinMax'] = undefined;






export default GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey;

