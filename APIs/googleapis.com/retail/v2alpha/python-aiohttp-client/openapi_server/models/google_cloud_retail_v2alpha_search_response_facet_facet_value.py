# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_retail_v2alpha_interval import GoogleCloudRetailV2alphaInterval
from openapi_server import util


class GoogleCloudRetailV2alphaSearchResponseFacetFacetValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: str=None, interval: GoogleCloudRetailV2alphaInterval=None, max_value: float=None, min_value: float=None, value: str=None):
        """GoogleCloudRetailV2alphaSearchResponseFacetFacetValue - a model defined in OpenAPI

        :param count: The count of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.
        :param interval: The interval of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.
        :param max_value: The max_value of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.
        :param min_value: The min_value of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.
        :param value: The value of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.
        """
        self.openapi_types = {
            'count': str,
            'interval': GoogleCloudRetailV2alphaInterval,
            'max_value': float,
            'min_value': float,
            'value': str
        }

        self.attribute_map = {
            'count': 'count',
            'interval': 'interval',
            'max_value': 'maxValue',
            'min_value': 'minValue',
            'value': 'value'
        }

        self._count = count
        self._interval = interval
        self._max_value = max_value
        self._min_value = min_value
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2alphaSearchResponseFacetFacetValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2alphaSearchResponseFacetFacetValue of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.

        Number of items that have this facet value.

        :return: The count of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.

        Number of items that have this facet value.

        :param count: The count of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.
        :type count: str
        """

        self._count = count

    @property
    def interval(self):
        """Gets the interval of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.


        :return: The interval of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.
        :rtype: GoogleCloudRetailV2alphaInterval
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.


        :param interval: The interval of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.
        :type interval: GoogleCloudRetailV2alphaInterval
        """

        self._interval = interval

    @property
    def max_value(self):
        """Gets the max_value of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.

        The maximum value in the FacetValue.interval. Only supported on numerical facets and returned if SearchRequest.FacetSpec.FacetKey.return_min_max is true.

        :return: The max_value of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.

        The maximum value in the FacetValue.interval. Only supported on numerical facets and returned if SearchRequest.FacetSpec.FacetKey.return_min_max is true.

        :param max_value: The max_value of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.
        :type max_value: float
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.

        The minimum value in the FacetValue.interval. Only supported on numerical facets and returned if SearchRequest.FacetSpec.FacetKey.return_min_max is true.

        :return: The min_value of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.

        The minimum value in the FacetValue.interval. Only supported on numerical facets and returned if SearchRequest.FacetSpec.FacetKey.return_min_max is true.

        :param min_value: The min_value of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.
        :type min_value: float
        """

        self._min_value = min_value

    @property
    def value(self):
        """Gets the value of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.

        Text value of a facet, such as \"Black\" for facet \"colorFamilies\".

        :return: The value of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.

        Text value of a facet, such as \"Black\" for facet \"colorFamilies\".

        :param value: The value of this GoogleCloudRetailV2alphaSearchResponseFacetFacetValue.
        :type value: str
        """

        self._value = value
