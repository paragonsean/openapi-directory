# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, info_log_sample_rate: float=None, logging_level: str=None):
        """GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule - a model defined in OpenAPI

        :param info_log_sample_rate: The info_log_sample_rate of this GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule.
        :param logging_level: The logging_level of this GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule.
        """
        self.openapi_types = {
            'info_log_sample_rate': float,
            'logging_level': str
        }

        self.attribute_map = {
            'info_log_sample_rate': 'infoLogSampleRate',
            'logging_level': 'loggingLevel'
        }

        self._info_log_sample_rate = info_log_sample_rate
        self._logging_level = logging_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule of this GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def info_log_sample_rate(self):
        """Gets the info_log_sample_rate of this GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule.

        The log sample rate for INFO level log entries. You can use this to reduce the number of entries generated for INFO level logs. DO NOT set this field if the logging_level is not LoggingLevel.LOG_ALL. Otherwise, an INVALID_ARGUMENT error is returned. Sample rate for INFO logs defaults to 1 when unset (generate and send all INFO logs to Cloud Logging). Its value must be greater than 0 and less than or equal to 1.

        :return: The info_log_sample_rate of this GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule.
        :rtype: float
        """
        return self._info_log_sample_rate

    @info_log_sample_rate.setter
    def info_log_sample_rate(self, info_log_sample_rate):
        """Sets the info_log_sample_rate of this GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule.

        The log sample rate for INFO level log entries. You can use this to reduce the number of entries generated for INFO level logs. DO NOT set this field if the logging_level is not LoggingLevel.LOG_ALL. Otherwise, an INVALID_ARGUMENT error is returned. Sample rate for INFO logs defaults to 1 when unset (generate and send all INFO logs to Cloud Logging). Its value must be greater than 0 and less than or equal to 1.

        :param info_log_sample_rate: The info_log_sample_rate of this GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule.
        :type info_log_sample_rate: float
        """

        self._info_log_sample_rate = info_log_sample_rate

    @property
    def logging_level(self):
        """Gets the logging_level of this GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule.

        The logging level. By default it is set to `LOG_WARNINGS_AND_ABOVE`.

        :return: The logging_level of this GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule.
        :rtype: str
        """
        return self._logging_level

    @logging_level.setter
    def logging_level(self, logging_level):
        """Sets the logging_level of this GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule.

        The logging level. By default it is set to `LOG_WARNINGS_AND_ABOVE`.

        :param logging_level: The logging_level of this GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule.
        :type logging_level: str
        """
        allowed_values = ["LOGGING_LEVEL_UNSPECIFIED", "LOGGING_DISABLED", "LOG_ERRORS_AND_ABOVE", "LOG_WARNINGS_AND_ABOVE", "LOG_ALL"]  # noqa: E501
        if logging_level not in allowed_values:
            raise ValueError(
                "Invalid value for `logging_level` ({0}), must be one of {1}"
                .format(logging_level, allowed_values)
            )

        self._logging_level = logging_level
