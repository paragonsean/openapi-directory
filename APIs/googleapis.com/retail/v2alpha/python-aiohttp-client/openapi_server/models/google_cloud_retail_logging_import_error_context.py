# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRetailLoggingImportErrorContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_item: str=None, gcs_path: str=None, line_number: str=None, operation_name: str=None, product: str=None, user_event: str=None):
        """GoogleCloudRetailLoggingImportErrorContext - a model defined in OpenAPI

        :param catalog_item: The catalog_item of this GoogleCloudRetailLoggingImportErrorContext.
        :param gcs_path: The gcs_path of this GoogleCloudRetailLoggingImportErrorContext.
        :param line_number: The line_number of this GoogleCloudRetailLoggingImportErrorContext.
        :param operation_name: The operation_name of this GoogleCloudRetailLoggingImportErrorContext.
        :param product: The product of this GoogleCloudRetailLoggingImportErrorContext.
        :param user_event: The user_event of this GoogleCloudRetailLoggingImportErrorContext.
        """
        self.openapi_types = {
            'catalog_item': str,
            'gcs_path': str,
            'line_number': str,
            'operation_name': str,
            'product': str,
            'user_event': str
        }

        self.attribute_map = {
            'catalog_item': 'catalogItem',
            'gcs_path': 'gcsPath',
            'line_number': 'lineNumber',
            'operation_name': 'operationName',
            'product': 'product',
            'user_event': 'userEvent'
        }

        self._catalog_item = catalog_item
        self._gcs_path = gcs_path
        self._line_number = line_number
        self._operation_name = operation_name
        self._product = product
        self._user_event = user_event

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailLoggingImportErrorContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailLoggingImportErrorContext of this GoogleCloudRetailLoggingImportErrorContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_item(self):
        """Gets the catalog_item of this GoogleCloudRetailLoggingImportErrorContext.

        The detailed content which caused the error on importing a catalog item.

        :return: The catalog_item of this GoogleCloudRetailLoggingImportErrorContext.
        :rtype: str
        """
        return self._catalog_item

    @catalog_item.setter
    def catalog_item(self, catalog_item):
        """Sets the catalog_item of this GoogleCloudRetailLoggingImportErrorContext.

        The detailed content which caused the error on importing a catalog item.

        :param catalog_item: The catalog_item of this GoogleCloudRetailLoggingImportErrorContext.
        :type catalog_item: str
        """

        self._catalog_item = catalog_item

    @property
    def gcs_path(self):
        """Gets the gcs_path of this GoogleCloudRetailLoggingImportErrorContext.

        Cloud Storage file path of the import source. Can be set for batch operation error.

        :return: The gcs_path of this GoogleCloudRetailLoggingImportErrorContext.
        :rtype: str
        """
        return self._gcs_path

    @gcs_path.setter
    def gcs_path(self, gcs_path):
        """Sets the gcs_path of this GoogleCloudRetailLoggingImportErrorContext.

        Cloud Storage file path of the import source. Can be set for batch operation error.

        :param gcs_path: The gcs_path of this GoogleCloudRetailLoggingImportErrorContext.
        :type gcs_path: str
        """

        self._gcs_path = gcs_path

    @property
    def line_number(self):
        """Gets the line_number of this GoogleCloudRetailLoggingImportErrorContext.

        Line number of the content in file. Should be empty for permission or batch operation error.

        :return: The line_number of this GoogleCloudRetailLoggingImportErrorContext.
        :rtype: str
        """
        return self._line_number

    @line_number.setter
    def line_number(self, line_number):
        """Sets the line_number of this GoogleCloudRetailLoggingImportErrorContext.

        Line number of the content in file. Should be empty for permission or batch operation error.

        :param line_number: The line_number of this GoogleCloudRetailLoggingImportErrorContext.
        :type line_number: str
        """

        self._line_number = line_number

    @property
    def operation_name(self):
        """Gets the operation_name of this GoogleCloudRetailLoggingImportErrorContext.

        The operation resource name of the LRO.

        :return: The operation_name of this GoogleCloudRetailLoggingImportErrorContext.
        :rtype: str
        """
        return self._operation_name

    @operation_name.setter
    def operation_name(self, operation_name):
        """Sets the operation_name of this GoogleCloudRetailLoggingImportErrorContext.

        The operation resource name of the LRO.

        :param operation_name: The operation_name of this GoogleCloudRetailLoggingImportErrorContext.
        :type operation_name: str
        """

        self._operation_name = operation_name

    @property
    def product(self):
        """Gets the product of this GoogleCloudRetailLoggingImportErrorContext.

        The detailed content which caused the error on importing a product.

        :return: The product of this GoogleCloudRetailLoggingImportErrorContext.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this GoogleCloudRetailLoggingImportErrorContext.

        The detailed content which caused the error on importing a product.

        :param product: The product of this GoogleCloudRetailLoggingImportErrorContext.
        :type product: str
        """

        self._product = product

    @property
    def user_event(self):
        """Gets the user_event of this GoogleCloudRetailLoggingImportErrorContext.

        The detailed content which caused the error on importing a user event.

        :return: The user_event of this GoogleCloudRetailLoggingImportErrorContext.
        :rtype: str
        """
        return self._user_event

    @user_event.setter
    def user_event(self, user_event):
        """Sets the user_event of this GoogleCloudRetailLoggingImportErrorContext.

        The detailed content which caused the error on importing a user event.

        :param user_event: The user_event of this GoogleCloudRetailLoggingImportErrorContext.
        :type user_event: str
        """

        self._user_event = user_event
