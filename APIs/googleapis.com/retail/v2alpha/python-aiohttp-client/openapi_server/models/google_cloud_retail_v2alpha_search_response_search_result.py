# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_retail_v2alpha_product import GoogleCloudRetailV2alphaProduct
from openapi_server import util


class GoogleCloudRetailV2alphaSearchResponseSearchResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, matching_variant_count: int=None, matching_variant_fields: Dict[str, str]=None, personal_labels: List[str]=None, product: GoogleCloudRetailV2alphaProduct=None, variant_rollup_values: Dict[str, object]=None):
        """GoogleCloudRetailV2alphaSearchResponseSearchResult - a model defined in OpenAPI

        :param id: The id of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        :param matching_variant_count: The matching_variant_count of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        :param matching_variant_fields: The matching_variant_fields of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        :param personal_labels: The personal_labels of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        :param product: The product of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        :param variant_rollup_values: The variant_rollup_values of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        """
        self.openapi_types = {
            'id': str,
            'matching_variant_count': int,
            'matching_variant_fields': Dict[str, str],
            'personal_labels': List[str],
            'product': GoogleCloudRetailV2alphaProduct,
            'variant_rollup_values': Dict[str, object]
        }

        self.attribute_map = {
            'id': 'id',
            'matching_variant_count': 'matchingVariantCount',
            'matching_variant_fields': 'matchingVariantFields',
            'personal_labels': 'personalLabels',
            'product': 'product',
            'variant_rollup_values': 'variantRollupValues'
        }

        self._id = id
        self._matching_variant_count = matching_variant_count
        self._matching_variant_fields = matching_variant_fields
        self._personal_labels = personal_labels
        self._product = product
        self._variant_rollup_values = variant_rollup_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2alphaSearchResponseSearchResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2alphaSearchResponseSearchResult of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this GoogleCloudRetailV2alphaSearchResponseSearchResult.

        Product.id of the searched Product.

        :return: The id of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GoogleCloudRetailV2alphaSearchResponseSearchResult.

        Product.id of the searched Product.

        :param id: The id of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        :type id: str
        """

        self._id = id

    @property
    def matching_variant_count(self):
        """Gets the matching_variant_count of this GoogleCloudRetailV2alphaSearchResponseSearchResult.

        The count of matched variant Products.

        :return: The matching_variant_count of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        :rtype: int
        """
        return self._matching_variant_count

    @matching_variant_count.setter
    def matching_variant_count(self, matching_variant_count):
        """Sets the matching_variant_count of this GoogleCloudRetailV2alphaSearchResponseSearchResult.

        The count of matched variant Products.

        :param matching_variant_count: The matching_variant_count of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        :type matching_variant_count: int
        """

        self._matching_variant_count = matching_variant_count

    @property
    def matching_variant_fields(self):
        """Gets the matching_variant_fields of this GoogleCloudRetailV2alphaSearchResponseSearchResult.

        If a variant Product matches the search query, this map indicates which Product fields are matched. The key is the Product.name, the value is a field mask of the matched Product fields. If matched attributes cannot be determined, this map will be empty. For example, a key \"sku1\" with field mask \"products.color_info\" indicates there is a match between \"sku1\" ColorInfo and the query.

        :return: The matching_variant_fields of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        :rtype: Dict[str, str]
        """
        return self._matching_variant_fields

    @matching_variant_fields.setter
    def matching_variant_fields(self, matching_variant_fields):
        """Sets the matching_variant_fields of this GoogleCloudRetailV2alphaSearchResponseSearchResult.

        If a variant Product matches the search query, this map indicates which Product fields are matched. The key is the Product.name, the value is a field mask of the matched Product fields. If matched attributes cannot be determined, this map will be empty. For example, a key \"sku1\" with field mask \"products.color_info\" indicates there is a match between \"sku1\" ColorInfo and the query.

        :param matching_variant_fields: The matching_variant_fields of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        :type matching_variant_fields: Dict[str, str]
        """

        self._matching_variant_fields = matching_variant_fields

    @property
    def personal_labels(self):
        """Gets the personal_labels of this GoogleCloudRetailV2alphaSearchResponseSearchResult.

        Specifies previous events related to this product for this user based on UserEvent with same SearchRequest.visitor_id or UserInfo.user_id. This is set only when SearchRequest.PersonalizationSpec.mode is SearchRequest.PersonalizationSpec.Mode.AUTO. Possible values: * `purchased`: Indicates that this product has been purchased before.

        :return: The personal_labels of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        :rtype: List[str]
        """
        return self._personal_labels

    @personal_labels.setter
    def personal_labels(self, personal_labels):
        """Sets the personal_labels of this GoogleCloudRetailV2alphaSearchResponseSearchResult.

        Specifies previous events related to this product for this user based on UserEvent with same SearchRequest.visitor_id or UserInfo.user_id. This is set only when SearchRequest.PersonalizationSpec.mode is SearchRequest.PersonalizationSpec.Mode.AUTO. Possible values: * `purchased`: Indicates that this product has been purchased before.

        :param personal_labels: The personal_labels of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        :type personal_labels: List[str]
        """

        self._personal_labels = personal_labels

    @property
    def product(self):
        """Gets the product of this GoogleCloudRetailV2alphaSearchResponseSearchResult.


        :return: The product of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        :rtype: GoogleCloudRetailV2alphaProduct
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this GoogleCloudRetailV2alphaSearchResponseSearchResult.


        :param product: The product of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        :type product: GoogleCloudRetailV2alphaProduct
        """

        self._product = product

    @property
    def variant_rollup_values(self):
        """Gets the variant_rollup_values of this GoogleCloudRetailV2alphaSearchResponseSearchResult.

        The rollup matching variant Product attributes. The key is one of the SearchRequest.variant_rollup_keys. The values are the merged and de-duplicated Product attributes. Notice that the rollup values are respect filter. For example, when filtering by \"colorFamilies:ANY(\\\"red\\\")\" and rollup \"colorFamilies\", only \"red\" is returned. For textual and numerical attributes, the rollup values is a list of string or double values with type google.protobuf.ListValue. For example, if there are two variants with colors \"red\" and \"blue\", the rollup values are { key: \"colorFamilies\" value { list_value { values { string_value: \"red\" } values { string_value: \"blue\" } } } } For FulfillmentInfo, the rollup values is a double value with type google.protobuf.Value. For example, `{key: \"pickupInStore.store1\" value { number_value: 10 }}` means a there are 10 variants in this product are available in the store \"store1\".

        :return: The variant_rollup_values of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        :rtype: Dict[str, object]
        """
        return self._variant_rollup_values

    @variant_rollup_values.setter
    def variant_rollup_values(self, variant_rollup_values):
        """Sets the variant_rollup_values of this GoogleCloudRetailV2alphaSearchResponseSearchResult.

        The rollup matching variant Product attributes. The key is one of the SearchRequest.variant_rollup_keys. The values are the merged and de-duplicated Product attributes. Notice that the rollup values are respect filter. For example, when filtering by \"colorFamilies:ANY(\\\"red\\\")\" and rollup \"colorFamilies\", only \"red\" is returned. For textual and numerical attributes, the rollup values is a list of string or double values with type google.protobuf.ListValue. For example, if there are two variants with colors \"red\" and \"blue\", the rollup values are { key: \"colorFamilies\" value { list_value { values { string_value: \"red\" } values { string_value: \"blue\" } } } } For FulfillmentInfo, the rollup values is a double value with type google.protobuf.Value. For example, `{key: \"pickupInStore.store1\" value { number_value: 10 }}` means a there are 10 variants in this product are available in the store \"store1\".

        :param variant_rollup_values: The variant_rollup_values of this GoogleCloudRetailV2alphaSearchResponseSearchResult.
        :type variant_rollup_values: Dict[str, object]
        """

        self._variant_rollup_values = variant_rollup_values
