# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRetailV2alphaListEnrolledSolutionsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enrolled_solutions: List[str]=None):
        """GoogleCloudRetailV2alphaListEnrolledSolutionsResponse - a model defined in OpenAPI

        :param enrolled_solutions: The enrolled_solutions of this GoogleCloudRetailV2alphaListEnrolledSolutionsResponse.
        """
        self.openapi_types = {
            'enrolled_solutions': List[str]
        }

        self.attribute_map = {
            'enrolled_solutions': 'enrolledSolutions'
        }

        self._enrolled_solutions = enrolled_solutions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2alphaListEnrolledSolutionsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2alphaListEnrolledSolutionsResponse of this GoogleCloudRetailV2alphaListEnrolledSolutionsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enrolled_solutions(self):
        """Gets the enrolled_solutions of this GoogleCloudRetailV2alphaListEnrolledSolutionsResponse.

        Retail API solutions that the project has enrolled.

        :return: The enrolled_solutions of this GoogleCloudRetailV2alphaListEnrolledSolutionsResponse.
        :rtype: List[str]
        """
        return self._enrolled_solutions

    @enrolled_solutions.setter
    def enrolled_solutions(self, enrolled_solutions):
        """Sets the enrolled_solutions of this GoogleCloudRetailV2alphaListEnrolledSolutionsResponse.

        Retail API solutions that the project has enrolled.

        :param enrolled_solutions: The enrolled_solutions of this GoogleCloudRetailV2alphaListEnrolledSolutionsResponse.
        :type enrolled_solutions: List[str]
        """
        allowed_values = ["SOLUTION_TYPE_UNSPECIFIED", "SOLUTION_TYPE_RECOMMENDATION", "SOLUTION_TYPE_SEARCH"]  # noqa: E501
        if not set(enrolled_solutions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `enrolled_solutions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(enrolled_solutions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._enrolled_solutions = enrolled_solutions
