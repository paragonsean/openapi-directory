# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRetailV2alphaEnrollSolutionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, solution: str=None):
        """GoogleCloudRetailV2alphaEnrollSolutionRequest - a model defined in OpenAPI

        :param solution: The solution of this GoogleCloudRetailV2alphaEnrollSolutionRequest.
        """
        self.openapi_types = {
            'solution': str
        }

        self.attribute_map = {
            'solution': 'solution'
        }

        self._solution = solution

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2alphaEnrollSolutionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2alphaEnrollSolutionRequest of this GoogleCloudRetailV2alphaEnrollSolutionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def solution(self):
        """Gets the solution of this GoogleCloudRetailV2alphaEnrollSolutionRequest.

        Required. Solution to enroll.

        :return: The solution of this GoogleCloudRetailV2alphaEnrollSolutionRequest.
        :rtype: str
        """
        return self._solution

    @solution.setter
    def solution(self, solution):
        """Sets the solution of this GoogleCloudRetailV2alphaEnrollSolutionRequest.

        Required. Solution to enroll.

        :param solution: The solution of this GoogleCloudRetailV2alphaEnrollSolutionRequest.
        :type solution: str
        """
        allowed_values = ["SOLUTION_TYPE_UNSPECIFIED", "SOLUTION_TYPE_RECOMMENDATION", "SOLUTION_TYPE_SEARCH"]  # noqa: E501
        if solution not in allowed_values:
            raise ValueError(
                "Invalid value for `solution` ({0}), must be one of {1}"
                .format(solution, allowed_values)
            )

        self._solution = solution
