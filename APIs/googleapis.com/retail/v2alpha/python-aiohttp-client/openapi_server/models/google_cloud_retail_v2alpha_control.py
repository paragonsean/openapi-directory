# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_retail_v2alpha_rule import GoogleCloudRetailV2alphaRule
from openapi_server.models.google_cloud_retail_v2alpha_search_request_facet_spec import GoogleCloudRetailV2alphaSearchRequestFacetSpec
from openapi_server import util


class GoogleCloudRetailV2alphaControl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, associated_serving_config_ids: List[str]=None, display_name: str=None, facet_spec: GoogleCloudRetailV2alphaSearchRequestFacetSpec=None, name: str=None, rule: GoogleCloudRetailV2alphaRule=None, search_solution_use_case: List[str]=None, solution_types: List[str]=None):
        """GoogleCloudRetailV2alphaControl - a model defined in OpenAPI

        :param associated_serving_config_ids: The associated_serving_config_ids of this GoogleCloudRetailV2alphaControl.
        :param display_name: The display_name of this GoogleCloudRetailV2alphaControl.
        :param facet_spec: The facet_spec of this GoogleCloudRetailV2alphaControl.
        :param name: The name of this GoogleCloudRetailV2alphaControl.
        :param rule: The rule of this GoogleCloudRetailV2alphaControl.
        :param search_solution_use_case: The search_solution_use_case of this GoogleCloudRetailV2alphaControl.
        :param solution_types: The solution_types of this GoogleCloudRetailV2alphaControl.
        """
        self.openapi_types = {
            'associated_serving_config_ids': List[str],
            'display_name': str,
            'facet_spec': GoogleCloudRetailV2alphaSearchRequestFacetSpec,
            'name': str,
            'rule': GoogleCloudRetailV2alphaRule,
            'search_solution_use_case': List[str],
            'solution_types': List[str]
        }

        self.attribute_map = {
            'associated_serving_config_ids': 'associatedServingConfigIds',
            'display_name': 'displayName',
            'facet_spec': 'facetSpec',
            'name': 'name',
            'rule': 'rule',
            'search_solution_use_case': 'searchSolutionUseCase',
            'solution_types': 'solutionTypes'
        }

        self._associated_serving_config_ids = associated_serving_config_ids
        self._display_name = display_name
        self._facet_spec = facet_spec
        self._name = name
        self._rule = rule
        self._search_solution_use_case = search_solution_use_case
        self._solution_types = solution_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2alphaControl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2alphaControl of this GoogleCloudRetailV2alphaControl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def associated_serving_config_ids(self):
        """Gets the associated_serving_config_ids of this GoogleCloudRetailV2alphaControl.

        Output only. List of serving config ids that are associated with this control in the same Catalog. Note the association is managed via the ServingConfig, this is an output only denormalized view.

        :return: The associated_serving_config_ids of this GoogleCloudRetailV2alphaControl.
        :rtype: List[str]
        """
        return self._associated_serving_config_ids

    @associated_serving_config_ids.setter
    def associated_serving_config_ids(self, associated_serving_config_ids):
        """Sets the associated_serving_config_ids of this GoogleCloudRetailV2alphaControl.

        Output only. List of serving config ids that are associated with this control in the same Catalog. Note the association is managed via the ServingConfig, this is an output only denormalized view.

        :param associated_serving_config_ids: The associated_serving_config_ids of this GoogleCloudRetailV2alphaControl.
        :type associated_serving_config_ids: List[str]
        """

        self._associated_serving_config_ids = associated_serving_config_ids

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudRetailV2alphaControl.

        Required. The human readable control display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is thrown.

        :return: The display_name of this GoogleCloudRetailV2alphaControl.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudRetailV2alphaControl.

        Required. The human readable control display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is thrown.

        :param display_name: The display_name of this GoogleCloudRetailV2alphaControl.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def facet_spec(self):
        """Gets the facet_spec of this GoogleCloudRetailV2alphaControl.


        :return: The facet_spec of this GoogleCloudRetailV2alphaControl.
        :rtype: GoogleCloudRetailV2alphaSearchRequestFacetSpec
        """
        return self._facet_spec

    @facet_spec.setter
    def facet_spec(self, facet_spec):
        """Sets the facet_spec of this GoogleCloudRetailV2alphaControl.


        :param facet_spec: The facet_spec of this GoogleCloudRetailV2alphaControl.
        :type facet_spec: GoogleCloudRetailV2alphaSearchRequestFacetSpec
        """

        self._facet_spec = facet_spec

    @property
    def name(self):
        """Gets the name of this GoogleCloudRetailV2alphaControl.

        Immutable. Fully qualified name `projects/*/locations/global/catalogs/*/controls/*`

        :return: The name of this GoogleCloudRetailV2alphaControl.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudRetailV2alphaControl.

        Immutable. Fully qualified name `projects/*/locations/global/catalogs/*/controls/*`

        :param name: The name of this GoogleCloudRetailV2alphaControl.
        :type name: str
        """

        self._name = name

    @property
    def rule(self):
        """Gets the rule of this GoogleCloudRetailV2alphaControl.


        :return: The rule of this GoogleCloudRetailV2alphaControl.
        :rtype: GoogleCloudRetailV2alphaRule
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this GoogleCloudRetailV2alphaControl.


        :param rule: The rule of this GoogleCloudRetailV2alphaControl.
        :type rule: GoogleCloudRetailV2alphaRule
        """

        self._rule = rule

    @property
    def search_solution_use_case(self):
        """Gets the search_solution_use_case of this GoogleCloudRetailV2alphaControl.

        Specifies the use case for the control. Affects what condition fields can be set. Only settable by search controls. Will default to SEARCH_SOLUTION_USE_CASE_SEARCH if not specified. Currently only allow one search_solution_use_case per control.

        :return: The search_solution_use_case of this GoogleCloudRetailV2alphaControl.
        :rtype: List[str]
        """
        return self._search_solution_use_case

    @search_solution_use_case.setter
    def search_solution_use_case(self, search_solution_use_case):
        """Sets the search_solution_use_case of this GoogleCloudRetailV2alphaControl.

        Specifies the use case for the control. Affects what condition fields can be set. Only settable by search controls. Will default to SEARCH_SOLUTION_USE_CASE_SEARCH if not specified. Currently only allow one search_solution_use_case per control.

        :param search_solution_use_case: The search_solution_use_case of this GoogleCloudRetailV2alphaControl.
        :type search_solution_use_case: List[str]
        """
        allowed_values = ["SEARCH_SOLUTION_USE_CASE_UNSPECIFIED", "SEARCH_SOLUTION_USE_CASE_SEARCH", "SEARCH_SOLUTION_USE_CASE_BROWSE"]  # noqa: E501
        if not set(search_solution_use_case).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `search_solution_use_case` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(search_solution_use_case) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._search_solution_use_case = search_solution_use_case

    @property
    def solution_types(self):
        """Gets the solution_types of this GoogleCloudRetailV2alphaControl.

        Required. Immutable. The solution types that the control is used for. Currently we support setting only one type of solution at creation time. Only `SOLUTION_TYPE_SEARCH` value is supported at the moment. If no solution type is provided at creation time, will default to SOLUTION_TYPE_SEARCH.

        :return: The solution_types of this GoogleCloudRetailV2alphaControl.
        :rtype: List[str]
        """
        return self._solution_types

    @solution_types.setter
    def solution_types(self, solution_types):
        """Sets the solution_types of this GoogleCloudRetailV2alphaControl.

        Required. Immutable. The solution types that the control is used for. Currently we support setting only one type of solution at creation time. Only `SOLUTION_TYPE_SEARCH` value is supported at the moment. If no solution type is provided at creation time, will default to SOLUTION_TYPE_SEARCH.

        :param solution_types: The solution_types of this GoogleCloudRetailV2alphaControl.
        :type solution_types: List[str]
        """
        allowed_values = ["SOLUTION_TYPE_UNSPECIFIED", "SOLUTION_TYPE_RECOMMENDATION", "SOLUTION_TYPE_SEARCH"]  # noqa: E501
        if not set(solution_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `solution_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(solution_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._solution_types = solution_types
