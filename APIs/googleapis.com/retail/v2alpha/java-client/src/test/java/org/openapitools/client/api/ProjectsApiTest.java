/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GoogleApiHttpBody;
import org.openapitools.client.model.GoogleCloudRetailV2alphaAddCatalogAttributeRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaAddControlRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaAddFulfillmentPlacesRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaAddLocalInventoriesRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaAttributesConfig;
import org.openapitools.client.model.GoogleCloudRetailV2alphaBatchRemoveCatalogAttributesRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaBatchRemoveCatalogAttributesResponse;
import org.openapitools.client.model.GoogleCloudRetailV2alphaCompleteQueryResponse;
import org.openapitools.client.model.GoogleCloudRetailV2alphaControl;
import org.openapitools.client.model.GoogleCloudRetailV2alphaEnrollSolutionRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaExportAnalyticsMetricsRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaGetDefaultBranchResponse;
import org.openapitools.client.model.GoogleCloudRetailV2alphaImportCompletionDataRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaImportProductsRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaImportUserEventsRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaListCatalogsResponse;
import org.openapitools.client.model.GoogleCloudRetailV2alphaListControlsResponse;
import org.openapitools.client.model.GoogleCloudRetailV2alphaListEnrolledSolutionsResponse;
import org.openapitools.client.model.GoogleCloudRetailV2alphaListMerchantCenterAccountLinksResponse;
import org.openapitools.client.model.GoogleCloudRetailV2alphaListModelsResponse;
import org.openapitools.client.model.GoogleCloudRetailV2alphaListProductsResponse;
import org.openapitools.client.model.GoogleCloudRetailV2alphaListServingConfigsResponse;
import org.openapitools.client.model.GoogleCloudRetailV2alphaMerchantCenterAccountLink;
import org.openapitools.client.model.GoogleCloudRetailV2alphaModel;
import org.openapitools.client.model.GoogleCloudRetailV2alphaPredictRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaPredictResponse;
import org.openapitools.client.model.GoogleCloudRetailV2alphaProduct;
import org.openapitools.client.model.GoogleCloudRetailV2alphaProject;
import org.openapitools.client.model.GoogleCloudRetailV2alphaPurgeProductsRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaPurgeUserEventsRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaRejoinUserEventsRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaRemoveCatalogAttributeRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaRemoveControlRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaRemoveFulfillmentPlacesRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaRemoveLocalInventoriesRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaReplaceCatalogAttributeRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaSearchRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaSearchResponse;
import org.openapitools.client.model.GoogleCloudRetailV2alphaServingConfig;
import org.openapitools.client.model.GoogleCloudRetailV2alphaSetDefaultBranchRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaSetInventoryRequest;
import org.openapitools.client.model.GoogleCloudRetailV2alphaUserEvent;
import org.openapitools.client.model.GoogleLongrunningListOperationsResponse;
import org.openapitools.client.model.GoogleLongrunningOperation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * The method enrolls a solution of type Retail Search into a project. The Recommendations AI solution type is enrolled by default when your project enables Retail API, so you don&#39;t need to call the enrollSolution method for recommendations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsEnrollSolutionTest() throws ApiException {
        String project = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaEnrollSolutionRequest googleCloudRetailV2alphaEnrollSolutionRequest = null;
        GoogleLongrunningOperation response = api.retailProjectsEnrollSolution(project, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaEnrollSolutionRequest);
        // TODO: test validations
    }

    /**
     * Lists all the retail API solutions the project has enrolled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsListEnrolledSolutionsTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaListEnrolledSolutionsResponse response = api.retailProjectsListEnrolledSolutions(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Adds the specified CatalogAttribute to the AttributesConfig. If the CatalogAttribute to add already exists, an ALREADY_EXISTS error is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsAttributesConfigAddCatalogAttributeTest() throws ApiException {
        String attributesConfig = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaAddCatalogAttributeRequest googleCloudRetailV2alphaAddCatalogAttributeRequest = null;
        GoogleCloudRetailV2alphaAttributesConfig response = api.retailProjectsLocationsCatalogsAttributesConfigAddCatalogAttribute(attributesConfig, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaAddCatalogAttributeRequest);
        // TODO: test validations
    }

    /**
     * Removes all specified CatalogAttributes from the AttributesConfig.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsAttributesConfigBatchRemoveCatalogAttributesTest() throws ApiException {
        String attributesConfig = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaBatchRemoveCatalogAttributesRequest googleCloudRetailV2alphaBatchRemoveCatalogAttributesRequest = null;
        GoogleCloudRetailV2alphaBatchRemoveCatalogAttributesResponse response = api.retailProjectsLocationsCatalogsAttributesConfigBatchRemoveCatalogAttributes(attributesConfig, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaBatchRemoveCatalogAttributesRequest);
        // TODO: test validations
    }

    /**
     * Removes the specified CatalogAttribute from the AttributesConfig. If the CatalogAttribute to remove does not exist, a NOT_FOUND error is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsAttributesConfigRemoveCatalogAttributeTest() throws ApiException {
        String attributesConfig = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaRemoveCatalogAttributeRequest googleCloudRetailV2alphaRemoveCatalogAttributeRequest = null;
        GoogleCloudRetailV2alphaAttributesConfig response = api.retailProjectsLocationsCatalogsAttributesConfigRemoveCatalogAttribute(attributesConfig, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaRemoveCatalogAttributeRequest);
        // TODO: test validations
    }

    /**
     * Replaces the specified CatalogAttribute in the AttributesConfig by updating the catalog attribute with the same CatalogAttribute.key. If the CatalogAttribute to replace does not exist, a NOT_FOUND error is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsAttributesConfigReplaceCatalogAttributeTest() throws ApiException {
        String attributesConfig = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaReplaceCatalogAttributeRequest googleCloudRetailV2alphaReplaceCatalogAttributeRequest = null;
        GoogleCloudRetailV2alphaAttributesConfig response = api.retailProjectsLocationsCatalogsAttributesConfigReplaceCatalogAttribute(attributesConfig, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaReplaceCatalogAttributeRequest);
        // TODO: test validations
    }

    /**
     * We recommend that you use the ProductService.AddLocalInventories method instead of the ProductService.AddFulfillmentPlaces method. ProductService.AddLocalInventories achieves the same results but provides more fine-grained control over ingesting local inventory data. Incrementally adds place IDs to Product.fulfillment_info.place_ids. This process is asynchronous and does not require the Product to exist before updating fulfillment information. If the request is valid, the update will be enqueued and processed downstream. As a consequence, when a response is returned, the added place IDs are not immediately manifested in the Product queried by ProductService.GetProduct or ProductService.ListProducts. The returned Operations will be obsolete after 1 day, and GetOperation API will return NOT_FOUND afterwards. If conflicting updates are issued, the Operations associated with the stale updates will not be marked as done until being obsolete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsBranchesProductsAddFulfillmentPlacesTest() throws ApiException {
        String product = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaAddFulfillmentPlacesRequest googleCloudRetailV2alphaAddFulfillmentPlacesRequest = null;
        GoogleLongrunningOperation response = api.retailProjectsLocationsCatalogsBranchesProductsAddFulfillmentPlaces(product, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaAddFulfillmentPlacesRequest);
        // TODO: test validations
    }

    /**
     * Updates local inventory information for a Product at a list of places, while respecting the last update timestamps of each inventory field. This process is asynchronous and does not require the Product to exist before updating inventory information. If the request is valid, the update will be enqueued and processed downstream. As a consequence, when a response is returned, updates are not immediately manifested in the Product queried by ProductService.GetProduct or ProductService.ListProducts. Local inventory information can only be modified using this method. ProductService.CreateProduct and ProductService.UpdateProduct has no effect on local inventories. The returned Operations will be obsolete after 1 day, and GetOperation API will return NOT_FOUND afterwards. If conflicting updates are issued, the Operations associated with the stale updates will not be marked as done until being obsolete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsBranchesProductsAddLocalInventoriesTest() throws ApiException {
        String product = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaAddLocalInventoriesRequest googleCloudRetailV2alphaAddLocalInventoriesRequest = null;
        GoogleLongrunningOperation response = api.retailProjectsLocationsCatalogsBranchesProductsAddLocalInventories(product, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaAddLocalInventoriesRequest);
        // TODO: test validations
    }

    /**
     * Creates a Product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsBranchesProductsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String productId = null;
        GoogleCloudRetailV2alphaProduct googleCloudRetailV2alphaProduct = null;
        GoogleCloudRetailV2alphaProduct response = api.retailProjectsLocationsCatalogsBranchesProductsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, productId, googleCloudRetailV2alphaProduct);
        // TODO: test validations
    }

    /**
     * Bulk import of multiple Products. Request processing may be synchronous. Non-existing items are created. Note that it is possible for a subset of the Products to be successfully updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsBranchesProductsImportTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaImportProductsRequest googleCloudRetailV2alphaImportProductsRequest = null;
        GoogleLongrunningOperation response = api.retailProjectsLocationsCatalogsBranchesProductsImport(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaImportProductsRequest);
        // TODO: test validations
    }

    /**
     * Gets a list of Products.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsBranchesProductsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        String readMask = null;
        Boolean requireTotalSize = null;
        GoogleCloudRetailV2alphaListProductsResponse response = api.retailProjectsLocationsCatalogsBranchesProductsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken, readMask, requireTotalSize);
        // TODO: test validations
    }

    /**
     * Permanently deletes all selected Products under a branch. This process is asynchronous. If the request is valid, the removal will be enqueued and processed offline. Depending on the number of Products, this operation could take hours to complete. Before the operation completes, some Products may still be returned by ProductService.GetProduct or ProductService.ListProducts. Depending on the number of Products, this operation could take hours to complete. To get a sample of Products that would be deleted, set PurgeProductsRequest.force to false.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsBranchesProductsPurgeTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaPurgeProductsRequest googleCloudRetailV2alphaPurgeProductsRequest = null;
        GoogleLongrunningOperation response = api.retailProjectsLocationsCatalogsBranchesProductsPurge(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaPurgeProductsRequest);
        // TODO: test validations
    }

    /**
     * We recommend that you use the ProductService.RemoveLocalInventories method instead of the ProductService.RemoveFulfillmentPlaces method. ProductService.RemoveLocalInventories achieves the same results but provides more fine-grained control over ingesting local inventory data. Incrementally removes place IDs from a Product.fulfillment_info.place_ids. This process is asynchronous and does not require the Product to exist before updating fulfillment information. If the request is valid, the update will be enqueued and processed downstream. As a consequence, when a response is returned, the removed place IDs are not immediately manifested in the Product queried by ProductService.GetProduct or ProductService.ListProducts. The returned Operations will be obsolete after 1 day, and GetOperation API will return NOT_FOUND afterwards. If conflicting updates are issued, the Operations associated with the stale updates will not be marked as done until being obsolete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsBranchesProductsRemoveFulfillmentPlacesTest() throws ApiException {
        String product = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaRemoveFulfillmentPlacesRequest googleCloudRetailV2alphaRemoveFulfillmentPlacesRequest = null;
        GoogleLongrunningOperation response = api.retailProjectsLocationsCatalogsBranchesProductsRemoveFulfillmentPlaces(product, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaRemoveFulfillmentPlacesRequest);
        // TODO: test validations
    }

    /**
     * Remove local inventory information for a Product at a list of places at a removal timestamp. This process is asynchronous. If the request is valid, the removal will be enqueued and processed downstream. As a consequence, when a response is returned, removals are not immediately manifested in the Product queried by ProductService.GetProduct or ProductService.ListProducts. Local inventory information can only be removed using this method. ProductService.CreateProduct and ProductService.UpdateProduct has no effect on local inventories. The returned Operations will be obsolete after 1 day, and GetOperation API will return NOT_FOUND afterwards. If conflicting updates are issued, the Operations associated with the stale updates will not be marked as done until being obsolete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsBranchesProductsRemoveLocalInventoriesTest() throws ApiException {
        String product = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaRemoveLocalInventoriesRequest googleCloudRetailV2alphaRemoveLocalInventoriesRequest = null;
        GoogleLongrunningOperation response = api.retailProjectsLocationsCatalogsBranchesProductsRemoveLocalInventories(product, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaRemoveLocalInventoriesRequest);
        // TODO: test validations
    }

    /**
     * Updates inventory information for a Product while respecting the last update timestamps of each inventory field. This process is asynchronous and does not require the Product to exist before updating fulfillment information. If the request is valid, the update is enqueued and processed downstream. As a consequence, when a response is returned, updates are not immediately manifested in the Product queried by ProductService.GetProduct or ProductService.ListProducts. When inventory is updated with ProductService.CreateProduct and ProductService.UpdateProduct, the specified inventory field value(s) overwrite any existing value(s) while ignoring the last update time for this field. Furthermore, the last update times for the specified inventory fields are overwritten by the times of the ProductService.CreateProduct or ProductService.UpdateProduct request. If no inventory fields are set in CreateProductRequest.product, then any pre-existing inventory information for this product is used. If no inventory fields are set in SetInventoryRequest.set_mask, then any existing inventory information is preserved. Pre-existing inventory information can only be updated with ProductService.SetInventory, ProductService.AddFulfillmentPlaces, and ProductService.RemoveFulfillmentPlaces. The returned Operations is obsolete after one day, and the GetOperation API returns &#x60;NOT_FOUND&#x60; afterwards. If conflicting updates are issued, the Operations associated with the stale updates are not marked as done until they are obsolete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsBranchesProductsSetInventoryTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaSetInventoryRequest googleCloudRetailV2alphaSetInventoryRequest = null;
        GoogleLongrunningOperation response = api.retailProjectsLocationsCatalogsBranchesProductsSetInventory(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaSetInventoryRequest);
        // TODO: test validations
    }

    /**
     * Completes the specified prefix with keyword suggestions. This feature is only available for users who have Retail Search enabled. Enable Retail Search on Cloud Console before using this feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsCompleteQueryTest() throws ApiException {
        String catalog = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String dataset = null;
        String deviceType = null;
        Boolean enableAttributeSuggestions = null;
        String entity = null;
        List<String> languageCodes = null;
        Integer maxSuggestions = null;
        String query = null;
        String visitorId = null;
        GoogleCloudRetailV2alphaCompleteQueryResponse response = api.retailProjectsLocationsCatalogsCompleteQuery(catalog, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dataset, deviceType, enableAttributeSuggestions, entity, languageCodes, maxSuggestions, query, visitorId);
        // TODO: test validations
    }

    /**
     * Bulk import of processed completion dataset. Request processing is asynchronous. Partial updating is not supported. The operation is successfully finished only after the imported suggestions are indexed successfully and ready for serving. The process takes hours. This feature is only available for users who have Retail Search enabled. Enable Retail Search on Cloud Console before using this feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsCompletionDataImportTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaImportCompletionDataRequest googleCloudRetailV2alphaImportCompletionDataRequest = null;
        GoogleLongrunningOperation response = api.retailProjectsLocationsCatalogsCompletionDataImport(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaImportCompletionDataRequest);
        // TODO: test validations
    }

    /**
     * Creates a Control. If the Control to create already exists, an ALREADY_EXISTS error is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsControlsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String controlId = null;
        GoogleCloudRetailV2alphaControl googleCloudRetailV2alphaControl = null;
        GoogleCloudRetailV2alphaControl response = api.retailProjectsLocationsCatalogsControlsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, controlId, googleCloudRetailV2alphaControl);
        // TODO: test validations
    }

    /**
     * Lists all Controls by their parent Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsControlsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudRetailV2alphaListControlsResponse response = api.retailProjectsLocationsCatalogsControlsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Exports analytics metrics. &#x60;Operation.response&#x60; is of type &#x60;ExportAnalyticsMetricsResponse&#x60;. &#x60;Operation.metadata&#x60; is of type &#x60;ExportMetadata&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsExportAnalyticsMetricsTest() throws ApiException {
        String catalog = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaExportAnalyticsMetricsRequest googleCloudRetailV2alphaExportAnalyticsMetricsRequest = null;
        GoogleLongrunningOperation response = api.retailProjectsLocationsCatalogsExportAnalyticsMetrics(catalog, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaExportAnalyticsMetricsRequest);
        // TODO: test validations
    }

    /**
     * Get which branch is currently default branch set by CatalogService.SetDefaultBranch method under a specified parent catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsGetDefaultBranchTest() throws ApiException {
        String catalog = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaGetDefaultBranchResponse response = api.retailProjectsLocationsCatalogsGetDefaultBranch(catalog, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all the Catalogs associated with the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudRetailV2alphaListCatalogsResponse response = api.retailProjectsLocationsCatalogsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a MerchantCenterAccountLink.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsMerchantCenterAccountLinksCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaMerchantCenterAccountLink googleCloudRetailV2alphaMerchantCenterAccountLink = null;
        GoogleLongrunningOperation response = api.retailProjectsLocationsCatalogsMerchantCenterAccountLinksCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaMerchantCenterAccountLink);
        // TODO: test validations
    }

    /**
     * Lists all MerchantCenterAccountLinks under the specified parent Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsMerchantCenterAccountLinksListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaListMerchantCenterAccountLinksResponse response = api.retailProjectsLocationsCatalogsMerchantCenterAccountLinksList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a new model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsModelsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean dryRun = null;
        GoogleCloudRetailV2alphaModel googleCloudRetailV2alphaModel = null;
        GoogleLongrunningOperation response = api.retailProjectsLocationsCatalogsModelsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dryRun, googleCloudRetailV2alphaModel);
        // TODO: test validations
    }

    /**
     * Lists all the models linked to this event store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsModelsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudRetailV2alphaListModelsResponse response = api.retailProjectsLocationsCatalogsModelsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Pauses the training of an existing model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsModelsPauseTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleCloudRetailV2alphaModel response = api.retailProjectsLocationsCatalogsModelsPause(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Resumes the training of an existing model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsModelsResumeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleCloudRetailV2alphaModel response = api.retailProjectsLocationsCatalogsModelsResume(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Tunes an existing model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsModelsTuneTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleLongrunningOperation response = api.retailProjectsLocationsCatalogsModelsTune(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Enables a Control on the specified ServingConfig. The control is added in the last position of the list of controls it belongs to (e.g. if it&#39;s a facet spec control it will be applied in the last position of servingConfig.facetSpecIds) Returns a ALREADY_EXISTS error if the control has already been applied. Returns a FAILED_PRECONDITION error if the addition could exceed maximum number of control allowed for that type of control.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsServingConfigsAddControlTest() throws ApiException {
        String servingConfig = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaAddControlRequest googleCloudRetailV2alphaAddControlRequest = null;
        GoogleCloudRetailV2alphaServingConfig response = api.retailProjectsLocationsCatalogsServingConfigsAddControl(servingConfig, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaAddControlRequest);
        // TODO: test validations
    }

    /**
     * Creates a ServingConfig. A maximum of 100 ServingConfigs are allowed in a Catalog, otherwise a FAILED_PRECONDITION error is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsServingConfigsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String servingConfigId = null;
        GoogleCloudRetailV2alphaServingConfig googleCloudRetailV2alphaServingConfig = null;
        GoogleCloudRetailV2alphaServingConfig response = api.retailProjectsLocationsCatalogsServingConfigsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, servingConfigId, googleCloudRetailV2alphaServingConfig);
        // TODO: test validations
    }

    /**
     * Deletes a ServingConfig. Returns a NotFound error if the ServingConfig does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsServingConfigsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        Object response = api.retailProjectsLocationsCatalogsServingConfigsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force);
        // TODO: test validations
    }

    /**
     * Lists all ServingConfigs linked to this catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsServingConfigsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudRetailV2alphaListServingConfigsResponse response = api.retailProjectsLocationsCatalogsServingConfigsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a ServingConfig.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsServingConfigsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        GoogleCloudRetailV2alphaServingConfig googleCloudRetailV2alphaServingConfig = null;
        GoogleCloudRetailV2alphaServingConfig response = api.retailProjectsLocationsCatalogsServingConfigsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, googleCloudRetailV2alphaServingConfig);
        // TODO: test validations
    }

    /**
     * Makes a recommendation prediction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsServingConfigsPredictTest() throws ApiException {
        String placement = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaPredictRequest googleCloudRetailV2alphaPredictRequest = null;
        GoogleCloudRetailV2alphaPredictResponse response = api.retailProjectsLocationsCatalogsServingConfigsPredict(placement, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaPredictRequest);
        // TODO: test validations
    }

    /**
     * Disables a Control on the specified ServingConfig. The control is removed from the ServingConfig. Returns a NOT_FOUND error if the Control is not enabled for the ServingConfig.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsServingConfigsRemoveControlTest() throws ApiException {
        String servingConfig = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaRemoveControlRequest googleCloudRetailV2alphaRemoveControlRequest = null;
        GoogleCloudRetailV2alphaServingConfig response = api.retailProjectsLocationsCatalogsServingConfigsRemoveControl(servingConfig, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaRemoveControlRequest);
        // TODO: test validations
    }

    /**
     * Performs a search. This feature is only available for users who have Retail Search enabled. Enable Retail Search on Cloud Console before using this feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsServingConfigsSearchTest() throws ApiException {
        String placement = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaSearchRequest googleCloudRetailV2alphaSearchRequest = null;
        GoogleCloudRetailV2alphaSearchResponse response = api.retailProjectsLocationsCatalogsServingConfigsSearch(placement, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaSearchRequest);
        // TODO: test validations
    }

    /**
     * Set a specified branch id as default branch. API methods such as SearchService.Search, ProductService.GetProduct, ProductService.ListProducts will treat requests using \&quot;default_branch\&quot; to the actual branch id set as default. For example, if &#x60;projects/_*_/locations/_*_/catalogs/_*_/branches/1&#x60; is set as default, setting SearchRequest.branch to &#x60;projects/_*_/locations/_*_/catalogs/_*_/branches/default_branch&#x60; is equivalent to setting SearchRequest.branch to &#x60;projects/_*_/locations/_*_/catalogs/_*_/branches/1&#x60;. Using multiple branches can be useful when developers would like to have a staging branch to test and verify for future usage. When it becomes ready, developers switch on the staging branch using this API while keeping using &#x60;projects/_*_/locations/_*_/catalogs/_*_/branches/default_branch&#x60; as SearchRequest.branch to route the traffic to this staging branch. CAUTION: If you have live predict/search traffic, switching the default branch could potentially cause outages if the ID space of the new branch is very different from the old one. More specifically: * PredictionService will only return product IDs from branch {newBranch}. * SearchService will only return product IDs from branch {newBranch} (if branch is not explicitly set). * UserEventService will only join events with products from branch {newBranch}.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsSetDefaultBranchTest() throws ApiException {
        String catalog = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaSetDefaultBranchRequest googleCloudRetailV2alphaSetDefaultBranchRequest = null;
        Object response = api.retailProjectsLocationsCatalogsSetDefaultBranch(catalog, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaSetDefaultBranchRequest);
        // TODO: test validations
    }

    /**
     * Writes a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a 3rd party domain. This method is used only by the Retail API JavaScript pixel and Google Tag Manager. Users should not call this method directly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsUserEventsCollectTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String ets = null;
        String prebuiltRule = null;
        String rawJson = null;
        String uri = null;
        String userEvent = null;
        GoogleApiHttpBody response = api.retailProjectsLocationsCatalogsUserEventsCollect(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ets, prebuiltRule, rawJson, uri, userEvent);
        // TODO: test validations
    }

    /**
     * Bulk import of User events. Request processing might be synchronous. Events that already exist are skipped. Use this method for backfilling historical user events. &#x60;Operation.response&#x60; is of type &#x60;ImportResponse&#x60;. Note that it is possible for a subset of the items to be successfully inserted. &#x60;Operation.metadata&#x60; is of type &#x60;ImportMetadata&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsUserEventsImportTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaImportUserEventsRequest googleCloudRetailV2alphaImportUserEventsRequest = null;
        GoogleLongrunningOperation response = api.retailProjectsLocationsCatalogsUserEventsImport(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaImportUserEventsRequest);
        // TODO: test validations
    }

    /**
     * Deletes permanently all user events specified by the filter provided. Depending on the number of events specified by the filter, this operation could take hours or days to complete. To test a filter, use the list command first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsUserEventsPurgeTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaPurgeUserEventsRequest googleCloudRetailV2alphaPurgeUserEventsRequest = null;
        GoogleLongrunningOperation response = api.retailProjectsLocationsCatalogsUserEventsPurge(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaPurgeUserEventsRequest);
        // TODO: test validations
    }

    /**
     * Starts a user-event rejoin operation with latest product catalog. Events are not annotated with detailed product information for products that are missing from the catalog when the user event is ingested. These events are stored as unjoined events with limited usage on training and serving. You can use this method to start a join operation on specified events with the latest version of product catalog. You can also use this method to correct events joined with the wrong product catalog. A rejoin operation can take hours or days to complete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsUserEventsRejoinTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRetailV2alphaRejoinUserEventsRequest googleCloudRetailV2alphaRejoinUserEventsRequest = null;
        GoogleLongrunningOperation response = api.retailProjectsLocationsCatalogsUserEventsRejoin(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRetailV2alphaRejoinUserEventsRequest);
        // TODO: test validations
    }

    /**
     * Writes a single user event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsLocationsCatalogsUserEventsWriteTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean writeAsync = null;
        GoogleCloudRetailV2alphaUserEvent googleCloudRetailV2alphaUserEvent = null;
        GoogleCloudRetailV2alphaUserEvent response = api.retailProjectsLocationsCatalogsUserEventsWrite(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, writeAsync, googleCloudRetailV2alphaUserEvent);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsOperationsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleLongrunningOperation response = api.retailProjectsOperationsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleLongrunningListOperationsResponse response = api.retailProjectsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Accepts service terms for this project. By making requests to this API, you agree to the terms of service linked below. https://cloud.google.com/retail/data-use-terms
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retailProjectsRetailProjectAcceptTermsTest() throws ApiException {
        String project = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleCloudRetailV2alphaProject response = api.retailProjectsRetailProjectAcceptTerms(project, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

}
