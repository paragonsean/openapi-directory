/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response for ListEnrolledSolutions method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:27.124881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailV2alphaListEnrolledSolutionsResponse {
  /**
   * Gets or Sets enrolledSolutions
   */
  @JsonAdapter(EnrolledSolutionsEnum.Adapter.class)
  public enum EnrolledSolutionsEnum {
    UNSPECIFIED("SOLUTION_TYPE_UNSPECIFIED"),
    
    RECOMMENDATION("SOLUTION_TYPE_RECOMMENDATION"),
    
    SEARCH("SOLUTION_TYPE_SEARCH");

    private String value;

    EnrolledSolutionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnrolledSolutionsEnum fromValue(String value) {
      for (EnrolledSolutionsEnum b : EnrolledSolutionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnrolledSolutionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnrolledSolutionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnrolledSolutionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnrolledSolutionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnrolledSolutionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENROLLED_SOLUTIONS = "enrolledSolutions";
  @SerializedName(SERIALIZED_NAME_ENROLLED_SOLUTIONS)
  private List<EnrolledSolutionsEnum> enrolledSolutions = new ArrayList<>();

  public GoogleCloudRetailV2alphaListEnrolledSolutionsResponse() {
  }

  public GoogleCloudRetailV2alphaListEnrolledSolutionsResponse enrolledSolutions(List<EnrolledSolutionsEnum> enrolledSolutions) {
    this.enrolledSolutions = enrolledSolutions;
    return this;
  }

  public GoogleCloudRetailV2alphaListEnrolledSolutionsResponse addEnrolledSolutionsItem(EnrolledSolutionsEnum enrolledSolutionsItem) {
    if (this.enrolledSolutions == null) {
      this.enrolledSolutions = new ArrayList<>();
    }
    this.enrolledSolutions.add(enrolledSolutionsItem);
    return this;
  }

  /**
   * Retail API solutions that the project has enrolled.
   * @return enrolledSolutions
   */
  @javax.annotation.Nullable
  public List<EnrolledSolutionsEnum> getEnrolledSolutions() {
    return enrolledSolutions;
  }

  public void setEnrolledSolutions(List<EnrolledSolutionsEnum> enrolledSolutions) {
    this.enrolledSolutions = enrolledSolutions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailV2alphaListEnrolledSolutionsResponse googleCloudRetailV2alphaListEnrolledSolutionsResponse = (GoogleCloudRetailV2alphaListEnrolledSolutionsResponse) o;
    return Objects.equals(this.enrolledSolutions, googleCloudRetailV2alphaListEnrolledSolutionsResponse.enrolledSolutions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enrolledSolutions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailV2alphaListEnrolledSolutionsResponse {\n");
    sb.append("    enrolledSolutions: ").append(toIndentedString(enrolledSolutions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enrolledSolutions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailV2alphaListEnrolledSolutionsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailV2alphaListEnrolledSolutionsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailV2alphaListEnrolledSolutionsResponse is not found in the empty JSON string", GoogleCloudRetailV2alphaListEnrolledSolutionsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailV2alphaListEnrolledSolutionsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailV2alphaListEnrolledSolutionsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("enrolledSolutions") != null && !jsonObj.get("enrolledSolutions").isJsonNull() && !jsonObj.get("enrolledSolutions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrolledSolutions` to be an array in the JSON string but got `%s`", jsonObj.get("enrolledSolutions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailV2alphaListEnrolledSolutionsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailV2alphaListEnrolledSolutionsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailV2alphaListEnrolledSolutionsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailV2alphaListEnrolledSolutionsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailV2alphaListEnrolledSolutionsResponse>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailV2alphaListEnrolledSolutionsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailV2alphaListEnrolledSolutionsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailV2alphaListEnrolledSolutionsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailV2alphaListEnrolledSolutionsResponse
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailV2alphaListEnrolledSolutionsResponse
   */
  public static GoogleCloudRetailV2alphaListEnrolledSolutionsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailV2alphaListEnrolledSolutionsResponse.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailV2alphaListEnrolledSolutionsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

