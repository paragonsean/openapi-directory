/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The error payload that is populated on LRO import APIs, including \&quot;google.cloud.retail.v2.ProductService.ImportProducts\&quot; and \&quot;google.cloud.retail.v2.EventService.ImportUserEvents\&quot;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:27.124881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailLoggingImportErrorContext {
  public static final String SERIALIZED_NAME_CATALOG_ITEM = "catalogItem";
  @SerializedName(SERIALIZED_NAME_CATALOG_ITEM)
  private String catalogItem;

  public static final String SERIALIZED_NAME_GCS_PATH = "gcsPath";
  @SerializedName(SERIALIZED_NAME_GCS_PATH)
  private String gcsPath;

  public static final String SERIALIZED_NAME_LINE_NUMBER = "lineNumber";
  @SerializedName(SERIALIZED_NAME_LINE_NUMBER)
  private String lineNumber;

  public static final String SERIALIZED_NAME_OPERATION_NAME = "operationName";
  @SerializedName(SERIALIZED_NAME_OPERATION_NAME)
  private String operationName;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private String product;

  public static final String SERIALIZED_NAME_USER_EVENT = "userEvent";
  @SerializedName(SERIALIZED_NAME_USER_EVENT)
  private String userEvent;

  public GoogleCloudRetailLoggingImportErrorContext() {
  }

  public GoogleCloudRetailLoggingImportErrorContext catalogItem(String catalogItem) {
    this.catalogItem = catalogItem;
    return this;
  }

  /**
   * The detailed content which caused the error on importing a catalog item.
   * @return catalogItem
   */
  @javax.annotation.Nullable
  public String getCatalogItem() {
    return catalogItem;
  }

  public void setCatalogItem(String catalogItem) {
    this.catalogItem = catalogItem;
  }


  public GoogleCloudRetailLoggingImportErrorContext gcsPath(String gcsPath) {
    this.gcsPath = gcsPath;
    return this;
  }

  /**
   * Cloud Storage file path of the import source. Can be set for batch operation error.
   * @return gcsPath
   */
  @javax.annotation.Nullable
  public String getGcsPath() {
    return gcsPath;
  }

  public void setGcsPath(String gcsPath) {
    this.gcsPath = gcsPath;
  }


  public GoogleCloudRetailLoggingImportErrorContext lineNumber(String lineNumber) {
    this.lineNumber = lineNumber;
    return this;
  }

  /**
   * Line number of the content in file. Should be empty for permission or batch operation error.
   * @return lineNumber
   */
  @javax.annotation.Nullable
  public String getLineNumber() {
    return lineNumber;
  }

  public void setLineNumber(String lineNumber) {
    this.lineNumber = lineNumber;
  }


  public GoogleCloudRetailLoggingImportErrorContext operationName(String operationName) {
    this.operationName = operationName;
    return this;
  }

  /**
   * The operation resource name of the LRO.
   * @return operationName
   */
  @javax.annotation.Nullable
  public String getOperationName() {
    return operationName;
  }

  public void setOperationName(String operationName) {
    this.operationName = operationName;
  }


  public GoogleCloudRetailLoggingImportErrorContext product(String product) {
    this.product = product;
    return this;
  }

  /**
   * The detailed content which caused the error on importing a product.
   * @return product
   */
  @javax.annotation.Nullable
  public String getProduct() {
    return product;
  }

  public void setProduct(String product) {
    this.product = product;
  }


  public GoogleCloudRetailLoggingImportErrorContext userEvent(String userEvent) {
    this.userEvent = userEvent;
    return this;
  }

  /**
   * The detailed content which caused the error on importing a user event.
   * @return userEvent
   */
  @javax.annotation.Nullable
  public String getUserEvent() {
    return userEvent;
  }

  public void setUserEvent(String userEvent) {
    this.userEvent = userEvent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailLoggingImportErrorContext googleCloudRetailLoggingImportErrorContext = (GoogleCloudRetailLoggingImportErrorContext) o;
    return Objects.equals(this.catalogItem, googleCloudRetailLoggingImportErrorContext.catalogItem) &&
        Objects.equals(this.gcsPath, googleCloudRetailLoggingImportErrorContext.gcsPath) &&
        Objects.equals(this.lineNumber, googleCloudRetailLoggingImportErrorContext.lineNumber) &&
        Objects.equals(this.operationName, googleCloudRetailLoggingImportErrorContext.operationName) &&
        Objects.equals(this.product, googleCloudRetailLoggingImportErrorContext.product) &&
        Objects.equals(this.userEvent, googleCloudRetailLoggingImportErrorContext.userEvent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalogItem, gcsPath, lineNumber, operationName, product, userEvent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailLoggingImportErrorContext {\n");
    sb.append("    catalogItem: ").append(toIndentedString(catalogItem)).append("\n");
    sb.append("    gcsPath: ").append(toIndentedString(gcsPath)).append("\n");
    sb.append("    lineNumber: ").append(toIndentedString(lineNumber)).append("\n");
    sb.append("    operationName: ").append(toIndentedString(operationName)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    userEvent: ").append(toIndentedString(userEvent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("catalogItem");
    openapiFields.add("gcsPath");
    openapiFields.add("lineNumber");
    openapiFields.add("operationName");
    openapiFields.add("product");
    openapiFields.add("userEvent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailLoggingImportErrorContext
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailLoggingImportErrorContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailLoggingImportErrorContext is not found in the empty JSON string", GoogleCloudRetailLoggingImportErrorContext.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailLoggingImportErrorContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailLoggingImportErrorContext` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("catalogItem") != null && !jsonObj.get("catalogItem").isJsonNull()) && !jsonObj.get("catalogItem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalogItem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalogItem").toString()));
      }
      if ((jsonObj.get("gcsPath") != null && !jsonObj.get("gcsPath").isJsonNull()) && !jsonObj.get("gcsPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcsPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcsPath").toString()));
      }
      if ((jsonObj.get("lineNumber") != null && !jsonObj.get("lineNumber").isJsonNull()) && !jsonObj.get("lineNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineNumber").toString()));
      }
      if ((jsonObj.get("operationName") != null && !jsonObj.get("operationName").isJsonNull()) && !jsonObj.get("operationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationName").toString()));
      }
      if ((jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) && !jsonObj.get("product").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product").toString()));
      }
      if ((jsonObj.get("userEvent") != null && !jsonObj.get("userEvent").isJsonNull()) && !jsonObj.get("userEvent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userEvent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userEvent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailLoggingImportErrorContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailLoggingImportErrorContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailLoggingImportErrorContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailLoggingImportErrorContext.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailLoggingImportErrorContext>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailLoggingImportErrorContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailLoggingImportErrorContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailLoggingImportErrorContext given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailLoggingImportErrorContext
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailLoggingImportErrorContext
   */
  public static GoogleCloudRetailLoggingImportErrorContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailLoggingImportErrorContext.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailLoggingImportErrorContext to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

