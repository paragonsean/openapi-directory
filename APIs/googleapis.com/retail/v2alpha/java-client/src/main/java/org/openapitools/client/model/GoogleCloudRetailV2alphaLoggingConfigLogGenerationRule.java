/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The logging configurations for services supporting log generation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:27.124881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule {
  public static final String SERIALIZED_NAME_INFO_LOG_SAMPLE_RATE = "infoLogSampleRate";
  @SerializedName(SERIALIZED_NAME_INFO_LOG_SAMPLE_RATE)
  private Float infoLogSampleRate;

  /**
   * The logging level. By default it is set to &#x60;LOG_WARNINGS_AND_ABOVE&#x60;.
   */
  @JsonAdapter(LoggingLevelEnum.Adapter.class)
  public enum LoggingLevelEnum {
    LOGGING_LEVEL_UNSPECIFIED("LOGGING_LEVEL_UNSPECIFIED"),
    
    LOGGING_DISABLED("LOGGING_DISABLED"),
    
    LOG_ERRORS_AND_ABOVE("LOG_ERRORS_AND_ABOVE"),
    
    LOG_WARNINGS_AND_ABOVE("LOG_WARNINGS_AND_ABOVE"),
    
    LOG_ALL("LOG_ALL");

    private String value;

    LoggingLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoggingLevelEnum fromValue(String value) {
      for (LoggingLevelEnum b : LoggingLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LoggingLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoggingLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoggingLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LoggingLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LoggingLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOGGING_LEVEL = "loggingLevel";
  @SerializedName(SERIALIZED_NAME_LOGGING_LEVEL)
  private LoggingLevelEnum loggingLevel;

  public GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule() {
  }

  public GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule infoLogSampleRate(Float infoLogSampleRate) {
    this.infoLogSampleRate = infoLogSampleRate;
    return this;
  }

  /**
   * The log sample rate for INFO level log entries. You can use this to reduce the number of entries generated for INFO level logs. DO NOT set this field if the logging_level is not LoggingLevel.LOG_ALL. Otherwise, an INVALID_ARGUMENT error is returned. Sample rate for INFO logs defaults to 1 when unset (generate and send all INFO logs to Cloud Logging). Its value must be greater than 0 and less than or equal to 1.
   * @return infoLogSampleRate
   */
  @javax.annotation.Nullable
  public Float getInfoLogSampleRate() {
    return infoLogSampleRate;
  }

  public void setInfoLogSampleRate(Float infoLogSampleRate) {
    this.infoLogSampleRate = infoLogSampleRate;
  }


  public GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule loggingLevel(LoggingLevelEnum loggingLevel) {
    this.loggingLevel = loggingLevel;
    return this;
  }

  /**
   * The logging level. By default it is set to &#x60;LOG_WARNINGS_AND_ABOVE&#x60;.
   * @return loggingLevel
   */
  @javax.annotation.Nullable
  public LoggingLevelEnum getLoggingLevel() {
    return loggingLevel;
  }

  public void setLoggingLevel(LoggingLevelEnum loggingLevel) {
    this.loggingLevel = loggingLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule googleCloudRetailV2alphaLoggingConfigLogGenerationRule = (GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule) o;
    return Objects.equals(this.infoLogSampleRate, googleCloudRetailV2alphaLoggingConfigLogGenerationRule.infoLogSampleRate) &&
        Objects.equals(this.loggingLevel, googleCloudRetailV2alphaLoggingConfigLogGenerationRule.loggingLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(infoLogSampleRate, loggingLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule {\n");
    sb.append("    infoLogSampleRate: ").append(toIndentedString(infoLogSampleRate)).append("\n");
    sb.append("    loggingLevel: ").append(toIndentedString(loggingLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("infoLogSampleRate");
    openapiFields.add("loggingLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule is not found in the empty JSON string", GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("loggingLevel") != null && !jsonObj.get("loggingLevel").isJsonNull()) && !jsonObj.get("loggingLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loggingLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loggingLevel").toString()));
      }
      // validate the optional field `loggingLevel`
      if (jsonObj.get("loggingLevel") != null && !jsonObj.get("loggingLevel").isJsonNull()) {
        LoggingLevelEnum.validateJsonElement(jsonObj.get("loggingLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule
   */
  public static GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailV2alphaLoggingConfigLogGenerationRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

