/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRetailV2alphaInterval;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies how a facet is computed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:27.124881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey {
  public static final String SERIALIZED_NAME_CASE_INSENSITIVE = "caseInsensitive";
  @SerializedName(SERIALIZED_NAME_CASE_INSENSITIVE)
  private Boolean caseInsensitive;

  public static final String SERIALIZED_NAME_CONTAINS = "contains";
  @SerializedName(SERIALIZED_NAME_CONTAINS)
  private List<String> contains = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERVALS = "intervals";
  @SerializedName(SERIALIZED_NAME_INTERVALS)
  private List<GoogleCloudRetailV2alphaInterval> intervals = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_ORDER_BY = "orderBy";
  @SerializedName(SERIALIZED_NAME_ORDER_BY)
  private String orderBy;

  public static final String SERIALIZED_NAME_PREFIXES = "prefixes";
  @SerializedName(SERIALIZED_NAME_PREFIXES)
  private List<String> prefixes = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_RESTRICTED_VALUES = "restrictedValues";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_VALUES)
  private List<String> restrictedValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETURN_MIN_MAX = "returnMinMax";
  @SerializedName(SERIALIZED_NAME_RETURN_MIN_MAX)
  private Boolean returnMinMax;

  public GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey() {
  }

  public GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey caseInsensitive(Boolean caseInsensitive) {
    this.caseInsensitive = caseInsensitive;
    return this;
  }

  /**
   * True to make facet keys case insensitive when getting faceting values with prefixes or contains; false otherwise.
   * @return caseInsensitive
   */
  @javax.annotation.Nullable
  public Boolean getCaseInsensitive() {
    return caseInsensitive;
  }

  public void setCaseInsensitive(Boolean caseInsensitive) {
    this.caseInsensitive = caseInsensitive;
  }


  public GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey contains(List<String> contains) {
    this.contains = contains;
    return this;
  }

  public GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey addContainsItem(String containsItem) {
    if (this.contains == null) {
      this.contains = new ArrayList<>();
    }
    this.contains.add(containsItem);
    return this;
  }

  /**
   * Only get facet values that contains the given strings. For example, suppose \&quot;categories\&quot; has three values \&quot;Women &gt; Shoe\&quot;, \&quot;Women &gt; Dress\&quot; and \&quot;Men &gt; Shoe\&quot;. If set \&quot;contains\&quot; to \&quot;Shoe\&quot;, the \&quot;categories\&quot; facet gives only \&quot;Women &gt; Shoe\&quot; and \&quot;Men &gt; Shoe\&quot;. Only supported on textual fields. Maximum is 10.
   * @return contains
   */
  @javax.annotation.Nullable
  public List<String> getContains() {
    return contains;
  }

  public void setContains(List<String> contains) {
    this.contains = contains;
  }


  public GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey intervals(List<GoogleCloudRetailV2alphaInterval> intervals) {
    this.intervals = intervals;
    return this;
  }

  public GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey addIntervalsItem(GoogleCloudRetailV2alphaInterval intervalsItem) {
    if (this.intervals == null) {
      this.intervals = new ArrayList<>();
    }
    this.intervals.add(intervalsItem);
    return this;
  }

  /**
   * Set only if values should be bucketized into intervals. Must be set for facets with numerical values. Must not be set for facet with text values. Maximum number of intervals is 40. For all numerical facet keys that appear in the list of products from the catalog, the percentiles 0, 10, 30, 50, 70, 90, and 100 are computed from their distribution weekly. If the model assigns a high score to a numerical facet key and its intervals are not specified in the search request, these percentiles become the bounds for its intervals and are returned in the response. If the facet key intervals are specified in the request, then the specified intervals are returned instead.
   * @return intervals
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRetailV2alphaInterval> getIntervals() {
    return intervals;
  }

  public void setIntervals(List<GoogleCloudRetailV2alphaInterval> intervals) {
    this.intervals = intervals;
  }


  public GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Required. Supported textual and numerical facet keys in Product object, over which the facet values are computed. Facet key is case-sensitive. Allowed facet keys when FacetKey.query is not specified: * textual_field &#x3D; * \&quot;brands\&quot; * \&quot;categories\&quot; * \&quot;genders\&quot; * \&quot;ageGroups\&quot; * \&quot;availability\&quot; * \&quot;colorFamilies\&quot; * \&quot;colors\&quot; * \&quot;sizes\&quot; * \&quot;materials\&quot; * \&quot;patterns\&quot; * \&quot;conditions\&quot; * \&quot;attributes.key\&quot; * \&quot;pickupInStore\&quot; * \&quot;shipToStore\&quot; * \&quot;sameDayDelivery\&quot; * \&quot;nextDayDelivery\&quot; * \&quot;customFulfillment1\&quot; * \&quot;customFulfillment2\&quot; * \&quot;customFulfillment3\&quot; * \&quot;customFulfillment4\&quot; * \&quot;customFulfillment5\&quot; * \&quot;inventory(place_id,attributes.key)\&quot; * numerical_field &#x3D; * \&quot;price\&quot; * \&quot;discount\&quot; * \&quot;rating\&quot; * \&quot;ratingCount\&quot; * \&quot;attributes.key\&quot; * \&quot;inventory(place_id,price)\&quot; * \&quot;inventory(place_id,original_price)\&quot; * \&quot;inventory(place_id,attributes.key)\&quot;
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey orderBy(String orderBy) {
    this.orderBy = orderBy;
    return this;
  }

  /**
   * The order in which SearchResponse.Facet.values are returned. Allowed values are: * \&quot;count desc\&quot;, which means order by SearchResponse.Facet.values.count descending. * \&quot;value desc\&quot;, which means order by SearchResponse.Facet.values.value descending. Only applies to textual facets. If not set, textual values are sorted in [natural order](https://en.wikipedia.org/wiki/Natural_sort_order); numerical intervals are sorted in the order given by FacetSpec.FacetKey.intervals; FulfillmentInfo.place_ids are sorted in the order given by FacetSpec.FacetKey.restricted_values.
   * @return orderBy
   */
  @javax.annotation.Nullable
  public String getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(String orderBy) {
    this.orderBy = orderBy;
  }


  public GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey prefixes(List<String> prefixes) {
    this.prefixes = prefixes;
    return this;
  }

  public GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey addPrefixesItem(String prefixesItem) {
    if (this.prefixes == null) {
      this.prefixes = new ArrayList<>();
    }
    this.prefixes.add(prefixesItem);
    return this;
  }

  /**
   * Only get facet values that start with the given string prefix. For example, suppose \&quot;categories\&quot; has three values \&quot;Women &gt; Shoe\&quot;, \&quot;Women &gt; Dress\&quot; and \&quot;Men &gt; Shoe\&quot;. If set \&quot;prefixes\&quot; to \&quot;Women\&quot;, the \&quot;categories\&quot; facet gives only \&quot;Women &gt; Shoe\&quot; and \&quot;Women &gt; Dress\&quot;. Only supported on textual fields. Maximum is 10.
   * @return prefixes
   */
  @javax.annotation.Nullable
  public List<String> getPrefixes() {
    return prefixes;
  }

  public void setPrefixes(List<String> prefixes) {
    this.prefixes = prefixes;
  }


  public GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey query(String query) {
    this.query = query;
    return this;
  }

  /**
   * The query that is used to compute facet for the given facet key. When provided, it overrides the default behavior of facet computation. The query syntax is the same as a filter expression. See SearchRequest.filter for detail syntax and limitations. Notice that there is no limitation on FacetKey.key when query is specified. In the response, SearchResponse.Facet.values.value is always \&quot;1\&quot; and SearchResponse.Facet.values.count is the number of results that match the query. For example, you can set a customized facet for \&quot;shipToStore\&quot;, where FacetKey.key is \&quot;customizedShipToStore\&quot;, and FacetKey.query is \&quot;availability: ANY(\\\&quot;IN_STOCK\\\&quot;) AND shipToStore: ANY(\\\&quot;123\\\&quot;)\&quot;. Then the facet counts the products that are both in stock and ship to store \&quot;123\&quot;.
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey restrictedValues(List<String> restrictedValues) {
    this.restrictedValues = restrictedValues;
    return this;
  }

  public GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey addRestrictedValuesItem(String restrictedValuesItem) {
    if (this.restrictedValues == null) {
      this.restrictedValues = new ArrayList<>();
    }
    this.restrictedValues.add(restrictedValuesItem);
    return this;
  }

  /**
   * Only get facet for the given restricted values. For example, when using \&quot;pickupInStore\&quot; as key and set restricted values to [\&quot;store123\&quot;, \&quot;store456\&quot;], only facets for \&quot;store123\&quot; and \&quot;store456\&quot; are returned. Only supported on predefined textual fields, custom textual attributes and fulfillments. Maximum is 20. Must be set for the fulfillment facet keys: * pickupInStore * shipToStore * sameDayDelivery * nextDayDelivery * customFulfillment1 * customFulfillment2 * customFulfillment3 * customFulfillment4 * customFulfillment5
   * @return restrictedValues
   */
  @javax.annotation.Nullable
  public List<String> getRestrictedValues() {
    return restrictedValues;
  }

  public void setRestrictedValues(List<String> restrictedValues) {
    this.restrictedValues = restrictedValues;
  }


  public GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey returnMinMax(Boolean returnMinMax) {
    this.returnMinMax = returnMinMax;
    return this;
  }

  /**
   * Returns the min and max value for each numerical facet intervals. Ignored for textual facets.
   * @return returnMinMax
   */
  @javax.annotation.Nullable
  public Boolean getReturnMinMax() {
    return returnMinMax;
  }

  public void setReturnMinMax(Boolean returnMinMax) {
    this.returnMinMax = returnMinMax;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey googleCloudRetailV2alphaSearchRequestFacetSpecFacetKey = (GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey) o;
    return Objects.equals(this.caseInsensitive, googleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.caseInsensitive) &&
        Objects.equals(this.contains, googleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.contains) &&
        Objects.equals(this.intervals, googleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.intervals) &&
        Objects.equals(this.key, googleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.key) &&
        Objects.equals(this.orderBy, googleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.orderBy) &&
        Objects.equals(this.prefixes, googleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.prefixes) &&
        Objects.equals(this.query, googleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.query) &&
        Objects.equals(this.restrictedValues, googleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.restrictedValues) &&
        Objects.equals(this.returnMinMax, googleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.returnMinMax);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caseInsensitive, contains, intervals, key, orderBy, prefixes, query, restrictedValues, returnMinMax);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey {\n");
    sb.append("    caseInsensitive: ").append(toIndentedString(caseInsensitive)).append("\n");
    sb.append("    contains: ").append(toIndentedString(contains)).append("\n");
    sb.append("    intervals: ").append(toIndentedString(intervals)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    prefixes: ").append(toIndentedString(prefixes)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    restrictedValues: ").append(toIndentedString(restrictedValues)).append("\n");
    sb.append("    returnMinMax: ").append(toIndentedString(returnMinMax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caseInsensitive");
    openapiFields.add("contains");
    openapiFields.add("intervals");
    openapiFields.add("key");
    openapiFields.add("orderBy");
    openapiFields.add("prefixes");
    openapiFields.add("query");
    openapiFields.add("restrictedValues");
    openapiFields.add("returnMinMax");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey is not found in the empty JSON string", GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("contains") != null && !jsonObj.get("contains").isJsonNull() && !jsonObj.get("contains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contains` to be an array in the JSON string but got `%s`", jsonObj.get("contains").toString()));
      }
      if (jsonObj.get("intervals") != null && !jsonObj.get("intervals").isJsonNull()) {
        JsonArray jsonArrayintervals = jsonObj.getAsJsonArray("intervals");
        if (jsonArrayintervals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("intervals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `intervals` to be an array in the JSON string but got `%s`", jsonObj.get("intervals").toString()));
          }

          // validate the optional field `intervals` (array)
          for (int i = 0; i < jsonArrayintervals.size(); i++) {
            GoogleCloudRetailV2alphaInterval.validateJsonElement(jsonArrayintervals.get(i));
          };
        }
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("orderBy") != null && !jsonObj.get("orderBy").isJsonNull()) && !jsonObj.get("orderBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderBy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("prefixes") != null && !jsonObj.get("prefixes").isJsonNull() && !jsonObj.get("prefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefixes` to be an array in the JSON string but got `%s`", jsonObj.get("prefixes").toString()));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("restrictedValues") != null && !jsonObj.get("restrictedValues").isJsonNull() && !jsonObj.get("restrictedValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `restrictedValues` to be an array in the JSON string but got `%s`", jsonObj.get("restrictedValues").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey
   */
  public static GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

