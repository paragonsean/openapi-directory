/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRetailV2alphaSearchRequestDynamicFacetSpec;
import org.openapitools.client.model.GoogleCloudRetailV2alphaSearchRequestPersonalizationSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configures metadata that is used to generate serving time results (e.g. search results or recommendation predictions).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:27.124881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailV2alphaServingConfig {
  public static final String SERIALIZED_NAME_BOOST_CONTROL_IDS = "boostControlIds";
  @SerializedName(SERIALIZED_NAME_BOOST_CONTROL_IDS)
  private List<String> boostControlIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DIVERSITY_LEVEL = "diversityLevel";
  @SerializedName(SERIALIZED_NAME_DIVERSITY_LEVEL)
  private String diversityLevel;

  /**
   * What kind of diversity to use - data driven or rule based. If unset, the server behavior defaults to RULE_BASED_DIVERSITY.
   */
  @JsonAdapter(DiversityTypeEnum.Adapter.class)
  public enum DiversityTypeEnum {
    DIVERSITY_TYPE_UNSPECIFIED("DIVERSITY_TYPE_UNSPECIFIED"),
    
    RULE_BASED_DIVERSITY("RULE_BASED_DIVERSITY"),
    
    DATA_DRIVEN_DIVERSITY("DATA_DRIVEN_DIVERSITY");

    private String value;

    DiversityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DiversityTypeEnum fromValue(String value) {
      for (DiversityTypeEnum b : DiversityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DiversityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DiversityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DiversityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DiversityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DiversityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIVERSITY_TYPE = "diversityType";
  @SerializedName(SERIALIZED_NAME_DIVERSITY_TYPE)
  private DiversityTypeEnum diversityType;

  public static final String SERIALIZED_NAME_DO_NOT_ASSOCIATE_CONTROL_IDS = "doNotAssociateControlIds";
  @SerializedName(SERIALIZED_NAME_DO_NOT_ASSOCIATE_CONTROL_IDS)
  private List<String> doNotAssociateControlIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DYNAMIC_FACET_SPEC = "dynamicFacetSpec";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_FACET_SPEC)
  private GoogleCloudRetailV2alphaSearchRequestDynamicFacetSpec dynamicFacetSpec;

  public static final String SERIALIZED_NAME_ENABLE_CATEGORY_FILTER_LEVEL = "enableCategoryFilterLevel";
  @SerializedName(SERIALIZED_NAME_ENABLE_CATEGORY_FILTER_LEVEL)
  private String enableCategoryFilterLevel;

  public static final String SERIALIZED_NAME_FACET_CONTROL_IDS = "facetControlIds";
  @SerializedName(SERIALIZED_NAME_FACET_CONTROL_IDS)
  private List<String> facetControlIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER_CONTROL_IDS = "filterControlIds";
  @SerializedName(SERIALIZED_NAME_FILTER_CONTROL_IDS)
  private List<String> filterControlIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_IGNORE_CONTROL_IDS = "ignoreControlIds";
  @SerializedName(SERIALIZED_NAME_IGNORE_CONTROL_IDS)
  private List<String> ignoreControlIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODEL_ID = "modelId";
  @SerializedName(SERIALIZED_NAME_MODEL_ID)
  private String modelId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ONEWAY_SYNONYMS_CONTROL_IDS = "onewaySynonymsControlIds";
  @SerializedName(SERIALIZED_NAME_ONEWAY_SYNONYMS_CONTROL_IDS)
  private List<String> onewaySynonymsControlIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERSONALIZATION_SPEC = "personalizationSpec";
  @SerializedName(SERIALIZED_NAME_PERSONALIZATION_SPEC)
  private GoogleCloudRetailV2alphaSearchRequestPersonalizationSpec personalizationSpec;

  public static final String SERIALIZED_NAME_PRICE_RERANKING_LEVEL = "priceRerankingLevel";
  @SerializedName(SERIALIZED_NAME_PRICE_RERANKING_LEVEL)
  private String priceRerankingLevel;

  public static final String SERIALIZED_NAME_REDIRECT_CONTROL_IDS = "redirectControlIds";
  @SerializedName(SERIALIZED_NAME_REDIRECT_CONTROL_IDS)
  private List<String> redirectControlIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPLACEMENT_CONTROL_IDS = "replacementControlIds";
  @SerializedName(SERIALIZED_NAME_REPLACEMENT_CONTROL_IDS)
  private List<String> replacementControlIds = new ArrayList<>();

  /**
   * Gets or Sets solutionTypes
   */
  @JsonAdapter(SolutionTypesEnum.Adapter.class)
  public enum SolutionTypesEnum {
    UNSPECIFIED("SOLUTION_TYPE_UNSPECIFIED"),
    
    RECOMMENDATION("SOLUTION_TYPE_RECOMMENDATION"),
    
    SEARCH("SOLUTION_TYPE_SEARCH");

    private String value;

    SolutionTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SolutionTypesEnum fromValue(String value) {
      for (SolutionTypesEnum b : SolutionTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SolutionTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SolutionTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SolutionTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SolutionTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SolutionTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOLUTION_TYPES = "solutionTypes";
  @SerializedName(SERIALIZED_NAME_SOLUTION_TYPES)
  private List<SolutionTypesEnum> solutionTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TWOWAY_SYNONYMS_CONTROL_IDS = "twowaySynonymsControlIds";
  @SerializedName(SERIALIZED_NAME_TWOWAY_SYNONYMS_CONTROL_IDS)
  private List<String> twowaySynonymsControlIds = new ArrayList<>();

  public GoogleCloudRetailV2alphaServingConfig() {
  }

  public GoogleCloudRetailV2alphaServingConfig boostControlIds(List<String> boostControlIds) {
    this.boostControlIds = boostControlIds;
    return this;
  }

  public GoogleCloudRetailV2alphaServingConfig addBoostControlIdsItem(String boostControlIdsItem) {
    if (this.boostControlIds == null) {
      this.boostControlIds = new ArrayList<>();
    }
    this.boostControlIds.add(boostControlIdsItem);
    return this;
  }

  /**
   * Condition boost specifications. If a product matches multiple conditions in the specifications, boost scores from these specifications are all applied and combined in a non-linear way. Maximum number of specifications is 100. Notice that if both ServingConfig.boost_control_ids and SearchRequest.boost_spec are set, the boost conditions from both places are evaluated. If a search request matches multiple boost conditions, the final boost score is equal to the sum of the boost scores from all matched boost conditions. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
   * @return boostControlIds
   */
  @javax.annotation.Nullable
  public List<String> getBoostControlIds() {
    return boostControlIds;
  }

  public void setBoostControlIds(List<String> boostControlIds) {
    this.boostControlIds = boostControlIds;
  }


  public GoogleCloudRetailV2alphaServingConfig displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The human readable serving config display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudRetailV2alphaServingConfig diversityLevel(String diversityLevel) {
    this.diversityLevel = diversityLevel;
    return this;
  }

  /**
   * How much diversity to use in recommendation model results e.g. &#x60;medium-diversity&#x60; or &#x60;high-diversity&#x60;. Currently supported values: * &#x60;no-diversity&#x60; * &#x60;low-diversity&#x60; * &#x60;medium-diversity&#x60; * &#x60;high-diversity&#x60; * &#x60;auto-diversity&#x60; If not specified, we choose default based on recommendation model type. Default value: &#x60;no-diversity&#x60;. Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.
   * @return diversityLevel
   */
  @javax.annotation.Nullable
  public String getDiversityLevel() {
    return diversityLevel;
  }

  public void setDiversityLevel(String diversityLevel) {
    this.diversityLevel = diversityLevel;
  }


  public GoogleCloudRetailV2alphaServingConfig diversityType(DiversityTypeEnum diversityType) {
    this.diversityType = diversityType;
    return this;
  }

  /**
   * What kind of diversity to use - data driven or rule based. If unset, the server behavior defaults to RULE_BASED_DIVERSITY.
   * @return diversityType
   */
  @javax.annotation.Nullable
  public DiversityTypeEnum getDiversityType() {
    return diversityType;
  }

  public void setDiversityType(DiversityTypeEnum diversityType) {
    this.diversityType = diversityType;
  }


  public GoogleCloudRetailV2alphaServingConfig doNotAssociateControlIds(List<String> doNotAssociateControlIds) {
    this.doNotAssociateControlIds = doNotAssociateControlIds;
    return this;
  }

  public GoogleCloudRetailV2alphaServingConfig addDoNotAssociateControlIdsItem(String doNotAssociateControlIdsItem) {
    if (this.doNotAssociateControlIds == null) {
      this.doNotAssociateControlIds = new ArrayList<>();
    }
    this.doNotAssociateControlIds.add(doNotAssociateControlIdsItem);
    return this;
  }

  /**
   * Condition do not associate specifications. If multiple do not associate conditions match, all matching do not associate controls in the list will execute. - Order does not matter. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
   * @return doNotAssociateControlIds
   */
  @javax.annotation.Nullable
  public List<String> getDoNotAssociateControlIds() {
    return doNotAssociateControlIds;
  }

  public void setDoNotAssociateControlIds(List<String> doNotAssociateControlIds) {
    this.doNotAssociateControlIds = doNotAssociateControlIds;
  }


  public GoogleCloudRetailV2alphaServingConfig dynamicFacetSpec(GoogleCloudRetailV2alphaSearchRequestDynamicFacetSpec dynamicFacetSpec) {
    this.dynamicFacetSpec = dynamicFacetSpec;
    return this;
  }

  /**
   * Get dynamicFacetSpec
   * @return dynamicFacetSpec
   */
  @javax.annotation.Nullable
  public GoogleCloudRetailV2alphaSearchRequestDynamicFacetSpec getDynamicFacetSpec() {
    return dynamicFacetSpec;
  }

  public void setDynamicFacetSpec(GoogleCloudRetailV2alphaSearchRequestDynamicFacetSpec dynamicFacetSpec) {
    this.dynamicFacetSpec = dynamicFacetSpec;
  }


  public GoogleCloudRetailV2alphaServingConfig enableCategoryFilterLevel(String enableCategoryFilterLevel) {
    this.enableCategoryFilterLevel = enableCategoryFilterLevel;
    return this;
  }

  /**
   * Whether to add additional category filters on the &#x60;similar-items&#x60; model. If not specified, we enable it by default. Allowed values are: * &#x60;no-category-match&#x60;: No additional filtering of original results from the model and the customer&#39;s filters. * &#x60;relaxed-category-match&#x60;: Only keep results with categories that match at least one item categories in the PredictRequests&#39;s context item. * If customer also sends filters in the PredictRequest, then the results will satisfy both conditions (user given and category match). Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.
   * @return enableCategoryFilterLevel
   */
  @javax.annotation.Nullable
  public String getEnableCategoryFilterLevel() {
    return enableCategoryFilterLevel;
  }

  public void setEnableCategoryFilterLevel(String enableCategoryFilterLevel) {
    this.enableCategoryFilterLevel = enableCategoryFilterLevel;
  }


  public GoogleCloudRetailV2alphaServingConfig facetControlIds(List<String> facetControlIds) {
    this.facetControlIds = facetControlIds;
    return this;
  }

  public GoogleCloudRetailV2alphaServingConfig addFacetControlIdsItem(String facetControlIdsItem) {
    if (this.facetControlIds == null) {
      this.facetControlIds = new ArrayList<>();
    }
    this.facetControlIds.add(facetControlIdsItem);
    return this;
  }

  /**
   * Facet specifications for faceted search. If empty, no facets are returned. The ids refer to the ids of Control resources with only the Facet control set. These controls are assumed to be in the same Catalog as the ServingConfig. A maximum of 100 values are allowed. Otherwise, an INVALID_ARGUMENT error is returned. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
   * @return facetControlIds
   */
  @javax.annotation.Nullable
  public List<String> getFacetControlIds() {
    return facetControlIds;
  }

  public void setFacetControlIds(List<String> facetControlIds) {
    this.facetControlIds = facetControlIds;
  }


  public GoogleCloudRetailV2alphaServingConfig filterControlIds(List<String> filterControlIds) {
    this.filterControlIds = filterControlIds;
    return this;
  }

  public GoogleCloudRetailV2alphaServingConfig addFilterControlIdsItem(String filterControlIdsItem) {
    if (this.filterControlIds == null) {
      this.filterControlIds = new ArrayList<>();
    }
    this.filterControlIds.add(filterControlIdsItem);
    return this;
  }

  /**
   * Condition filter specifications. If a product matches multiple conditions in the specifications, filters from these specifications are all applied and combined via the AND operator. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
   * @return filterControlIds
   */
  @javax.annotation.Nullable
  public List<String> getFilterControlIds() {
    return filterControlIds;
  }

  public void setFilterControlIds(List<String> filterControlIds) {
    this.filterControlIds = filterControlIds;
  }


  public GoogleCloudRetailV2alphaServingConfig ignoreControlIds(List<String> ignoreControlIds) {
    this.ignoreControlIds = ignoreControlIds;
    return this;
  }

  public GoogleCloudRetailV2alphaServingConfig addIgnoreControlIdsItem(String ignoreControlIdsItem) {
    if (this.ignoreControlIds == null) {
      this.ignoreControlIds = new ArrayList<>();
    }
    this.ignoreControlIds.add(ignoreControlIdsItem);
    return this;
  }

  /**
   * Condition ignore specifications. If multiple ignore conditions match, all matching ignore controls in the list will execute. - Order does not matter. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
   * @return ignoreControlIds
   */
  @javax.annotation.Nullable
  public List<String> getIgnoreControlIds() {
    return ignoreControlIds;
  }

  public void setIgnoreControlIds(List<String> ignoreControlIds) {
    this.ignoreControlIds = ignoreControlIds;
  }


  public GoogleCloudRetailV2alphaServingConfig modelId(String modelId) {
    this.modelId = modelId;
    return this;
  }

  /**
   * The id of the model in the same Catalog to use at serving time. Currently only RecommendationModels are supported: https://cloud.google.com/retail/recommendations-ai/docs/create-models Can be changed but only to a compatible model (e.g. others-you-may-like CTR to others-you-may-like CVR). Required when solution_types is SOLUTION_TYPE_RECOMMENDATION.
   * @return modelId
   */
  @javax.annotation.Nullable
  public String getModelId() {
    return modelId;
  }

  public void setModelId(String modelId) {
    this.modelId = modelId;
  }


  public GoogleCloudRetailV2alphaServingConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. Fully qualified name &#x60;projects/_*_/locations/global/catalogs/_*_/servingConfig/_*&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudRetailV2alphaServingConfig onewaySynonymsControlIds(List<String> onewaySynonymsControlIds) {
    this.onewaySynonymsControlIds = onewaySynonymsControlIds;
    return this;
  }

  public GoogleCloudRetailV2alphaServingConfig addOnewaySynonymsControlIdsItem(String onewaySynonymsControlIdsItem) {
    if (this.onewaySynonymsControlIds == null) {
      this.onewaySynonymsControlIds = new ArrayList<>();
    }
    this.onewaySynonymsControlIds.add(onewaySynonymsControlIdsItem);
    return this;
  }

  /**
   * Condition oneway synonyms specifications. If multiple oneway synonyms conditions match, all matching oneway synonyms controls in the list will execute. Order of controls in the list will not matter. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
   * @return onewaySynonymsControlIds
   */
  @javax.annotation.Nullable
  public List<String> getOnewaySynonymsControlIds() {
    return onewaySynonymsControlIds;
  }

  public void setOnewaySynonymsControlIds(List<String> onewaySynonymsControlIds) {
    this.onewaySynonymsControlIds = onewaySynonymsControlIds;
  }


  public GoogleCloudRetailV2alphaServingConfig personalizationSpec(GoogleCloudRetailV2alphaSearchRequestPersonalizationSpec personalizationSpec) {
    this.personalizationSpec = personalizationSpec;
    return this;
  }

  /**
   * Get personalizationSpec
   * @return personalizationSpec
   */
  @javax.annotation.Nullable
  public GoogleCloudRetailV2alphaSearchRequestPersonalizationSpec getPersonalizationSpec() {
    return personalizationSpec;
  }

  public void setPersonalizationSpec(GoogleCloudRetailV2alphaSearchRequestPersonalizationSpec personalizationSpec) {
    this.personalizationSpec = personalizationSpec;
  }


  public GoogleCloudRetailV2alphaServingConfig priceRerankingLevel(String priceRerankingLevel) {
    this.priceRerankingLevel = priceRerankingLevel;
    return this;
  }

  /**
   * How much price ranking we want in serving results. Price reranking causes product items with a similar recommendation probability to be ordered by price, with the highest-priced items first. This setting could result in a decrease in click-through and conversion rates. Allowed values are: * &#x60;no-price-reranking&#x60; * &#x60;low-price-reranking&#x60; * &#x60;medium-price-reranking&#x60; * &#x60;high-price-reranking&#x60; If not specified, we choose default based on model type. Default value: &#x60;no-price-reranking&#x60;. Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.
   * @return priceRerankingLevel
   */
  @javax.annotation.Nullable
  public String getPriceRerankingLevel() {
    return priceRerankingLevel;
  }

  public void setPriceRerankingLevel(String priceRerankingLevel) {
    this.priceRerankingLevel = priceRerankingLevel;
  }


  public GoogleCloudRetailV2alphaServingConfig redirectControlIds(List<String> redirectControlIds) {
    this.redirectControlIds = redirectControlIds;
    return this;
  }

  public GoogleCloudRetailV2alphaServingConfig addRedirectControlIdsItem(String redirectControlIdsItem) {
    if (this.redirectControlIds == null) {
      this.redirectControlIds = new ArrayList<>();
    }
    this.redirectControlIds.add(redirectControlIdsItem);
    return this;
  }

  /**
   * Condition redirect specifications. Only the first triggered redirect action is applied, even if multiple apply. Maximum number of specifications is 1000. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
   * @return redirectControlIds
   */
  @javax.annotation.Nullable
  public List<String> getRedirectControlIds() {
    return redirectControlIds;
  }

  public void setRedirectControlIds(List<String> redirectControlIds) {
    this.redirectControlIds = redirectControlIds;
  }


  public GoogleCloudRetailV2alphaServingConfig replacementControlIds(List<String> replacementControlIds) {
    this.replacementControlIds = replacementControlIds;
    return this;
  }

  public GoogleCloudRetailV2alphaServingConfig addReplacementControlIdsItem(String replacementControlIdsItem) {
    if (this.replacementControlIds == null) {
      this.replacementControlIds = new ArrayList<>();
    }
    this.replacementControlIds.add(replacementControlIdsItem);
    return this;
  }

  /**
   * Condition replacement specifications. - Applied according to the order in the list. - A previously replaced term can not be re-replaced. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
   * @return replacementControlIds
   */
  @javax.annotation.Nullable
  public List<String> getReplacementControlIds() {
    return replacementControlIds;
  }

  public void setReplacementControlIds(List<String> replacementControlIds) {
    this.replacementControlIds = replacementControlIds;
  }


  public GoogleCloudRetailV2alphaServingConfig solutionTypes(List<SolutionTypesEnum> solutionTypes) {
    this.solutionTypes = solutionTypes;
    return this;
  }

  public GoogleCloudRetailV2alphaServingConfig addSolutionTypesItem(SolutionTypesEnum solutionTypesItem) {
    if (this.solutionTypes == null) {
      this.solutionTypes = new ArrayList<>();
    }
    this.solutionTypes.add(solutionTypesItem);
    return this;
  }

  /**
   * Required. Immutable. Specifies the solution types that a serving config can be associated with. Currently we support setting only one type of solution.
   * @return solutionTypes
   */
  @javax.annotation.Nullable
  public List<SolutionTypesEnum> getSolutionTypes() {
    return solutionTypes;
  }

  public void setSolutionTypes(List<SolutionTypesEnum> solutionTypes) {
    this.solutionTypes = solutionTypes;
  }


  public GoogleCloudRetailV2alphaServingConfig twowaySynonymsControlIds(List<String> twowaySynonymsControlIds) {
    this.twowaySynonymsControlIds = twowaySynonymsControlIds;
    return this;
  }

  public GoogleCloudRetailV2alphaServingConfig addTwowaySynonymsControlIdsItem(String twowaySynonymsControlIdsItem) {
    if (this.twowaySynonymsControlIds == null) {
      this.twowaySynonymsControlIds = new ArrayList<>();
    }
    this.twowaySynonymsControlIds.add(twowaySynonymsControlIdsItem);
    return this;
  }

  /**
   * Condition synonyms specifications. If multiple syonyms conditions match, all matching synonyms control in the list will execute. Order of controls in the list will not matter. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
   * @return twowaySynonymsControlIds
   */
  @javax.annotation.Nullable
  public List<String> getTwowaySynonymsControlIds() {
    return twowaySynonymsControlIds;
  }

  public void setTwowaySynonymsControlIds(List<String> twowaySynonymsControlIds) {
    this.twowaySynonymsControlIds = twowaySynonymsControlIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailV2alphaServingConfig googleCloudRetailV2alphaServingConfig = (GoogleCloudRetailV2alphaServingConfig) o;
    return Objects.equals(this.boostControlIds, googleCloudRetailV2alphaServingConfig.boostControlIds) &&
        Objects.equals(this.displayName, googleCloudRetailV2alphaServingConfig.displayName) &&
        Objects.equals(this.diversityLevel, googleCloudRetailV2alphaServingConfig.diversityLevel) &&
        Objects.equals(this.diversityType, googleCloudRetailV2alphaServingConfig.diversityType) &&
        Objects.equals(this.doNotAssociateControlIds, googleCloudRetailV2alphaServingConfig.doNotAssociateControlIds) &&
        Objects.equals(this.dynamicFacetSpec, googleCloudRetailV2alphaServingConfig.dynamicFacetSpec) &&
        Objects.equals(this.enableCategoryFilterLevel, googleCloudRetailV2alphaServingConfig.enableCategoryFilterLevel) &&
        Objects.equals(this.facetControlIds, googleCloudRetailV2alphaServingConfig.facetControlIds) &&
        Objects.equals(this.filterControlIds, googleCloudRetailV2alphaServingConfig.filterControlIds) &&
        Objects.equals(this.ignoreControlIds, googleCloudRetailV2alphaServingConfig.ignoreControlIds) &&
        Objects.equals(this.modelId, googleCloudRetailV2alphaServingConfig.modelId) &&
        Objects.equals(this.name, googleCloudRetailV2alphaServingConfig.name) &&
        Objects.equals(this.onewaySynonymsControlIds, googleCloudRetailV2alphaServingConfig.onewaySynonymsControlIds) &&
        Objects.equals(this.personalizationSpec, googleCloudRetailV2alphaServingConfig.personalizationSpec) &&
        Objects.equals(this.priceRerankingLevel, googleCloudRetailV2alphaServingConfig.priceRerankingLevel) &&
        Objects.equals(this.redirectControlIds, googleCloudRetailV2alphaServingConfig.redirectControlIds) &&
        Objects.equals(this.replacementControlIds, googleCloudRetailV2alphaServingConfig.replacementControlIds) &&
        Objects.equals(this.solutionTypes, googleCloudRetailV2alphaServingConfig.solutionTypes) &&
        Objects.equals(this.twowaySynonymsControlIds, googleCloudRetailV2alphaServingConfig.twowaySynonymsControlIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boostControlIds, displayName, diversityLevel, diversityType, doNotAssociateControlIds, dynamicFacetSpec, enableCategoryFilterLevel, facetControlIds, filterControlIds, ignoreControlIds, modelId, name, onewaySynonymsControlIds, personalizationSpec, priceRerankingLevel, redirectControlIds, replacementControlIds, solutionTypes, twowaySynonymsControlIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailV2alphaServingConfig {\n");
    sb.append("    boostControlIds: ").append(toIndentedString(boostControlIds)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    diversityLevel: ").append(toIndentedString(diversityLevel)).append("\n");
    sb.append("    diversityType: ").append(toIndentedString(diversityType)).append("\n");
    sb.append("    doNotAssociateControlIds: ").append(toIndentedString(doNotAssociateControlIds)).append("\n");
    sb.append("    dynamicFacetSpec: ").append(toIndentedString(dynamicFacetSpec)).append("\n");
    sb.append("    enableCategoryFilterLevel: ").append(toIndentedString(enableCategoryFilterLevel)).append("\n");
    sb.append("    facetControlIds: ").append(toIndentedString(facetControlIds)).append("\n");
    sb.append("    filterControlIds: ").append(toIndentedString(filterControlIds)).append("\n");
    sb.append("    ignoreControlIds: ").append(toIndentedString(ignoreControlIds)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onewaySynonymsControlIds: ").append(toIndentedString(onewaySynonymsControlIds)).append("\n");
    sb.append("    personalizationSpec: ").append(toIndentedString(personalizationSpec)).append("\n");
    sb.append("    priceRerankingLevel: ").append(toIndentedString(priceRerankingLevel)).append("\n");
    sb.append("    redirectControlIds: ").append(toIndentedString(redirectControlIds)).append("\n");
    sb.append("    replacementControlIds: ").append(toIndentedString(replacementControlIds)).append("\n");
    sb.append("    solutionTypes: ").append(toIndentedString(solutionTypes)).append("\n");
    sb.append("    twowaySynonymsControlIds: ").append(toIndentedString(twowaySynonymsControlIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boostControlIds");
    openapiFields.add("displayName");
    openapiFields.add("diversityLevel");
    openapiFields.add("diversityType");
    openapiFields.add("doNotAssociateControlIds");
    openapiFields.add("dynamicFacetSpec");
    openapiFields.add("enableCategoryFilterLevel");
    openapiFields.add("facetControlIds");
    openapiFields.add("filterControlIds");
    openapiFields.add("ignoreControlIds");
    openapiFields.add("modelId");
    openapiFields.add("name");
    openapiFields.add("onewaySynonymsControlIds");
    openapiFields.add("personalizationSpec");
    openapiFields.add("priceRerankingLevel");
    openapiFields.add("redirectControlIds");
    openapiFields.add("replacementControlIds");
    openapiFields.add("solutionTypes");
    openapiFields.add("twowaySynonymsControlIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailV2alphaServingConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailV2alphaServingConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailV2alphaServingConfig is not found in the empty JSON string", GoogleCloudRetailV2alphaServingConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailV2alphaServingConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailV2alphaServingConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("boostControlIds") != null && !jsonObj.get("boostControlIds").isJsonNull() && !jsonObj.get("boostControlIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `boostControlIds` to be an array in the JSON string but got `%s`", jsonObj.get("boostControlIds").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("diversityLevel") != null && !jsonObj.get("diversityLevel").isJsonNull()) && !jsonObj.get("diversityLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diversityLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diversityLevel").toString()));
      }
      if ((jsonObj.get("diversityType") != null && !jsonObj.get("diversityType").isJsonNull()) && !jsonObj.get("diversityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diversityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diversityType").toString()));
      }
      // validate the optional field `diversityType`
      if (jsonObj.get("diversityType") != null && !jsonObj.get("diversityType").isJsonNull()) {
        DiversityTypeEnum.validateJsonElement(jsonObj.get("diversityType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("doNotAssociateControlIds") != null && !jsonObj.get("doNotAssociateControlIds").isJsonNull() && !jsonObj.get("doNotAssociateControlIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `doNotAssociateControlIds` to be an array in the JSON string but got `%s`", jsonObj.get("doNotAssociateControlIds").toString()));
      }
      // validate the optional field `dynamicFacetSpec`
      if (jsonObj.get("dynamicFacetSpec") != null && !jsonObj.get("dynamicFacetSpec").isJsonNull()) {
        GoogleCloudRetailV2alphaSearchRequestDynamicFacetSpec.validateJsonElement(jsonObj.get("dynamicFacetSpec"));
      }
      if ((jsonObj.get("enableCategoryFilterLevel") != null && !jsonObj.get("enableCategoryFilterLevel").isJsonNull()) && !jsonObj.get("enableCategoryFilterLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enableCategoryFilterLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enableCategoryFilterLevel").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("facetControlIds") != null && !jsonObj.get("facetControlIds").isJsonNull() && !jsonObj.get("facetControlIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `facetControlIds` to be an array in the JSON string but got `%s`", jsonObj.get("facetControlIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("filterControlIds") != null && !jsonObj.get("filterControlIds").isJsonNull() && !jsonObj.get("filterControlIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `filterControlIds` to be an array in the JSON string but got `%s`", jsonObj.get("filterControlIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ignoreControlIds") != null && !jsonObj.get("ignoreControlIds").isJsonNull() && !jsonObj.get("ignoreControlIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ignoreControlIds` to be an array in the JSON string but got `%s`", jsonObj.get("ignoreControlIds").toString()));
      }
      if ((jsonObj.get("modelId") != null && !jsonObj.get("modelId").isJsonNull()) && !jsonObj.get("modelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("onewaySynonymsControlIds") != null && !jsonObj.get("onewaySynonymsControlIds").isJsonNull() && !jsonObj.get("onewaySynonymsControlIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `onewaySynonymsControlIds` to be an array in the JSON string but got `%s`", jsonObj.get("onewaySynonymsControlIds").toString()));
      }
      // validate the optional field `personalizationSpec`
      if (jsonObj.get("personalizationSpec") != null && !jsonObj.get("personalizationSpec").isJsonNull()) {
        GoogleCloudRetailV2alphaSearchRequestPersonalizationSpec.validateJsonElement(jsonObj.get("personalizationSpec"));
      }
      if ((jsonObj.get("priceRerankingLevel") != null && !jsonObj.get("priceRerankingLevel").isJsonNull()) && !jsonObj.get("priceRerankingLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceRerankingLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceRerankingLevel").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redirectControlIds") != null && !jsonObj.get("redirectControlIds").isJsonNull() && !jsonObj.get("redirectControlIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectControlIds` to be an array in the JSON string but got `%s`", jsonObj.get("redirectControlIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("replacementControlIds") != null && !jsonObj.get("replacementControlIds").isJsonNull() && !jsonObj.get("replacementControlIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `replacementControlIds` to be an array in the JSON string but got `%s`", jsonObj.get("replacementControlIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("solutionTypes") != null && !jsonObj.get("solutionTypes").isJsonNull() && !jsonObj.get("solutionTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `solutionTypes` to be an array in the JSON string but got `%s`", jsonObj.get("solutionTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("twowaySynonymsControlIds") != null && !jsonObj.get("twowaySynonymsControlIds").isJsonNull() && !jsonObj.get("twowaySynonymsControlIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `twowaySynonymsControlIds` to be an array in the JSON string but got `%s`", jsonObj.get("twowaySynonymsControlIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailV2alphaServingConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailV2alphaServingConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailV2alphaServingConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailV2alphaServingConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailV2alphaServingConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailV2alphaServingConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailV2alphaServingConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailV2alphaServingConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailV2alphaServingConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailV2alphaServingConfig
   */
  public static GoogleCloudRetailV2alphaServingConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailV2alphaServingConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailV2alphaServingConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

