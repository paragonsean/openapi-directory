/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The BigQuery output destination configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:27.124881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailV2alphaOutputConfigBigQueryDestination {
  public static final String SERIALIZED_NAME_DATASET_ID = "datasetId";
  @SerializedName(SERIALIZED_NAME_DATASET_ID)
  private String datasetId;

  public static final String SERIALIZED_NAME_TABLE_ID_PREFIX = "tableIdPrefix";
  @SerializedName(SERIALIZED_NAME_TABLE_ID_PREFIX)
  private String tableIdPrefix;

  public static final String SERIALIZED_NAME_TABLE_TYPE = "tableType";
  @SerializedName(SERIALIZED_NAME_TABLE_TYPE)
  private String tableType;

  public GoogleCloudRetailV2alphaOutputConfigBigQueryDestination() {
  }

  public GoogleCloudRetailV2alphaOutputConfigBigQueryDestination datasetId(String datasetId) {
    this.datasetId = datasetId;
    return this;
  }

  /**
   * Required. The ID of a BigQuery Dataset.
   * @return datasetId
   */
  @javax.annotation.Nullable
  public String getDatasetId() {
    return datasetId;
  }

  public void setDatasetId(String datasetId) {
    this.datasetId = datasetId;
  }


  public GoogleCloudRetailV2alphaOutputConfigBigQueryDestination tableIdPrefix(String tableIdPrefix) {
    this.tableIdPrefix = tableIdPrefix;
    return this;
  }

  /**
   * Required. The prefix of exported BigQuery tables.
   * @return tableIdPrefix
   */
  @javax.annotation.Nullable
  public String getTableIdPrefix() {
    return tableIdPrefix;
  }

  public void setTableIdPrefix(String tableIdPrefix) {
    this.tableIdPrefix = tableIdPrefix;
  }


  public GoogleCloudRetailV2alphaOutputConfigBigQueryDestination tableType(String tableType) {
    this.tableType = tableType;
    return this;
  }

  /**
   * Required. Describes the table type. The following values are supported: * &#x60;table&#x60;: A BigQuery native table. * &#x60;view&#x60;: A virtual table defined by a SQL query.
   * @return tableType
   */
  @javax.annotation.Nullable
  public String getTableType() {
    return tableType;
  }

  public void setTableType(String tableType) {
    this.tableType = tableType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailV2alphaOutputConfigBigQueryDestination googleCloudRetailV2alphaOutputConfigBigQueryDestination = (GoogleCloudRetailV2alphaOutputConfigBigQueryDestination) o;
    return Objects.equals(this.datasetId, googleCloudRetailV2alphaOutputConfigBigQueryDestination.datasetId) &&
        Objects.equals(this.tableIdPrefix, googleCloudRetailV2alphaOutputConfigBigQueryDestination.tableIdPrefix) &&
        Objects.equals(this.tableType, googleCloudRetailV2alphaOutputConfigBigQueryDestination.tableType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasetId, tableIdPrefix, tableType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailV2alphaOutputConfigBigQueryDestination {\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    tableIdPrefix: ").append(toIndentedString(tableIdPrefix)).append("\n");
    sb.append("    tableType: ").append(toIndentedString(tableType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("datasetId");
    openapiFields.add("tableIdPrefix");
    openapiFields.add("tableType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailV2alphaOutputConfigBigQueryDestination
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailV2alphaOutputConfigBigQueryDestination.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailV2alphaOutputConfigBigQueryDestination is not found in the empty JSON string", GoogleCloudRetailV2alphaOutputConfigBigQueryDestination.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailV2alphaOutputConfigBigQueryDestination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailV2alphaOutputConfigBigQueryDestination` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("datasetId") != null && !jsonObj.get("datasetId").isJsonNull()) && !jsonObj.get("datasetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasetId").toString()));
      }
      if ((jsonObj.get("tableIdPrefix") != null && !jsonObj.get("tableIdPrefix").isJsonNull()) && !jsonObj.get("tableIdPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableIdPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableIdPrefix").toString()));
      }
      if ((jsonObj.get("tableType") != null && !jsonObj.get("tableType").isJsonNull()) && !jsonObj.get("tableType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailV2alphaOutputConfigBigQueryDestination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailV2alphaOutputConfigBigQueryDestination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailV2alphaOutputConfigBigQueryDestination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailV2alphaOutputConfigBigQueryDestination.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailV2alphaOutputConfigBigQueryDestination>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailV2alphaOutputConfigBigQueryDestination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailV2alphaOutputConfigBigQueryDestination read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailV2alphaOutputConfigBigQueryDestination given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailV2alphaOutputConfigBigQueryDestination
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailV2alphaOutputConfigBigQueryDestination
   */
  public static GoogleCloudRetailV2alphaOutputConfigBigQueryDestination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailV2alphaOutputConfigBigQueryDestination.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailV2alphaOutputConfigBigQueryDestination to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

