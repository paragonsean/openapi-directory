/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2alphaCompletionDataInputConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2alphaCompletionDataInputConfig::OAIGoogleCloudRetailV2alphaCompletionDataInputConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2alphaCompletionDataInputConfig::OAIGoogleCloudRetailV2alphaCompletionDataInputConfig() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2alphaCompletionDataInputConfig::~OAIGoogleCloudRetailV2alphaCompletionDataInputConfig() {}

void OAIGoogleCloudRetailV2alphaCompletionDataInputConfig::initializeModel() {

    m_big_query_source_isSet = false;
    m_big_query_source_isValid = false;
}

void OAIGoogleCloudRetailV2alphaCompletionDataInputConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2alphaCompletionDataInputConfig::fromJsonObject(QJsonObject json) {

    m_big_query_source_isValid = ::OpenAPI::fromJsonValue(m_big_query_source, json[QString("bigQuerySource")]);
    m_big_query_source_isSet = !json[QString("bigQuerySource")].isNull() && m_big_query_source_isValid;
}

QString OAIGoogleCloudRetailV2alphaCompletionDataInputConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2alphaCompletionDataInputConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_big_query_source.isSet()) {
        obj.insert(QString("bigQuerySource"), ::OpenAPI::toJsonValue(m_big_query_source));
    }
    return obj;
}

OAIGoogleCloudRetailV2alphaBigQuerySource OAIGoogleCloudRetailV2alphaCompletionDataInputConfig::getBigQuerySource() const {
    return m_big_query_source;
}
void OAIGoogleCloudRetailV2alphaCompletionDataInputConfig::setBigQuerySource(const OAIGoogleCloudRetailV2alphaBigQuerySource &big_query_source) {
    m_big_query_source = big_query_source;
    m_big_query_source_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaCompletionDataInputConfig::is_big_query_source_Set() const{
    return m_big_query_source_isSet;
}

bool OAIGoogleCloudRetailV2alphaCompletionDataInputConfig::is_big_query_source_Valid() const{
    return m_big_query_source_isValid;
}

bool OAIGoogleCloudRetailV2alphaCompletionDataInputConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_big_query_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2alphaCompletionDataInputConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
