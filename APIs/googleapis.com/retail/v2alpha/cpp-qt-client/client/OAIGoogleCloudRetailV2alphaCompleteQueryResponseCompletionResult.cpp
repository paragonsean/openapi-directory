/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::~OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult() {}

void OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_facets_isSet = false;
    m_facets_isValid = false;

    m_suggestion_isSet = false;
    m_suggestion_isValid = false;

    m_total_product_count_isSet = false;
    m_total_product_count_isValid = false;
}

void OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_facets_isValid = ::OpenAPI::fromJsonValue(m_facets, json[QString("facets")]);
    m_facets_isSet = !json[QString("facets")].isNull() && m_facets_isValid;

    m_suggestion_isValid = ::OpenAPI::fromJsonValue(m_suggestion, json[QString("suggestion")]);
    m_suggestion_isSet = !json[QString("suggestion")].isNull() && m_suggestion_isValid;

    m_total_product_count_isValid = ::OpenAPI::fromJsonValue(m_total_product_count, json[QString("totalProductCount")]);
    m_total_product_count_isSet = !json[QString("totalProductCount")].isNull() && m_total_product_count_isValid;
}

QString OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_facets.size() > 0) {
        obj.insert(QString("facets"), ::OpenAPI::toJsonValue(m_facets));
    }
    if (m_suggestion_isSet) {
        obj.insert(QString("suggestion"), ::OpenAPI::toJsonValue(m_suggestion));
    }
    if (m_total_product_count_isSet) {
        obj.insert(QString("totalProductCount"), ::OpenAPI::toJsonValue(m_total_product_count));
    }
    return obj;
}

QMap<QString, OAIGoogleCloudRetailV2alphaCustomAttribute> OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::getAttributes() const {
    return m_attributes;
}
void OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::setAttributes(const QMap<QString, OAIGoogleCloudRetailV2alphaCustomAttribute> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList<OAIGoogleCloudRetailV2alphaSearchResponseFacet> OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::getFacets() const {
    return m_facets;
}
void OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::setFacets(const QList<OAIGoogleCloudRetailV2alphaSearchResponseFacet> &facets) {
    m_facets = facets;
    m_facets_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::is_facets_Set() const{
    return m_facets_isSet;
}

bool OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::is_facets_Valid() const{
    return m_facets_isValid;
}

QString OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::getSuggestion() const {
    return m_suggestion;
}
void OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::setSuggestion(const QString &suggestion) {
    m_suggestion = suggestion;
    m_suggestion_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::is_suggestion_Set() const{
    return m_suggestion_isSet;
}

bool OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::is_suggestion_Valid() const{
    return m_suggestion_isValid;
}

qint32 OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::getTotalProductCount() const {
    return m_total_product_count;
}
void OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::setTotalProductCount(const qint32 &total_product_count) {
    m_total_product_count = total_product_count;
    m_total_product_count_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::is_total_product_count_Set() const{
    return m_total_product_count_isSet;
}

bool OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::is_total_product_count_Valid() const{
    return m_total_product_count_isValid;
}

bool OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_facets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_product_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2alphaCompleteQueryResponseCompletionResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
