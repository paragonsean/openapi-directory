/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2alphaInterval.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2alphaInterval::OAIGoogleCloudRetailV2alphaInterval(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2alphaInterval::OAIGoogleCloudRetailV2alphaInterval() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2alphaInterval::~OAIGoogleCloudRetailV2alphaInterval() {}

void OAIGoogleCloudRetailV2alphaInterval::initializeModel() {

    m_exclusive_maximum_isSet = false;
    m_exclusive_maximum_isValid = false;

    m_exclusive_minimum_isSet = false;
    m_exclusive_minimum_isValid = false;

    m_maximum_isSet = false;
    m_maximum_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;
}

void OAIGoogleCloudRetailV2alphaInterval::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2alphaInterval::fromJsonObject(QJsonObject json) {

    m_exclusive_maximum_isValid = ::OpenAPI::fromJsonValue(m_exclusive_maximum, json[QString("exclusiveMaximum")]);
    m_exclusive_maximum_isSet = !json[QString("exclusiveMaximum")].isNull() && m_exclusive_maximum_isValid;

    m_exclusive_minimum_isValid = ::OpenAPI::fromJsonValue(m_exclusive_minimum, json[QString("exclusiveMinimum")]);
    m_exclusive_minimum_isSet = !json[QString("exclusiveMinimum")].isNull() && m_exclusive_minimum_isValid;

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("maximum")]);
    m_maximum_isSet = !json[QString("maximum")].isNull() && m_maximum_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("minimum")]);
    m_minimum_isSet = !json[QString("minimum")].isNull() && m_minimum_isValid;
}

QString OAIGoogleCloudRetailV2alphaInterval::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2alphaInterval::asJsonObject() const {
    QJsonObject obj;
    if (m_exclusive_maximum_isSet) {
        obj.insert(QString("exclusiveMaximum"), ::OpenAPI::toJsonValue(m_exclusive_maximum));
    }
    if (m_exclusive_minimum_isSet) {
        obj.insert(QString("exclusiveMinimum"), ::OpenAPI::toJsonValue(m_exclusive_minimum));
    }
    if (m_maximum_isSet) {
        obj.insert(QString("maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    if (m_minimum_isSet) {
        obj.insert(QString("minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    return obj;
}

double OAIGoogleCloudRetailV2alphaInterval::getExclusiveMaximum() const {
    return m_exclusive_maximum;
}
void OAIGoogleCloudRetailV2alphaInterval::setExclusiveMaximum(const double &exclusive_maximum) {
    m_exclusive_maximum = exclusive_maximum;
    m_exclusive_maximum_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaInterval::is_exclusive_maximum_Set() const{
    return m_exclusive_maximum_isSet;
}

bool OAIGoogleCloudRetailV2alphaInterval::is_exclusive_maximum_Valid() const{
    return m_exclusive_maximum_isValid;
}

double OAIGoogleCloudRetailV2alphaInterval::getExclusiveMinimum() const {
    return m_exclusive_minimum;
}
void OAIGoogleCloudRetailV2alphaInterval::setExclusiveMinimum(const double &exclusive_minimum) {
    m_exclusive_minimum = exclusive_minimum;
    m_exclusive_minimum_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaInterval::is_exclusive_minimum_Set() const{
    return m_exclusive_minimum_isSet;
}

bool OAIGoogleCloudRetailV2alphaInterval::is_exclusive_minimum_Valid() const{
    return m_exclusive_minimum_isValid;
}

double OAIGoogleCloudRetailV2alphaInterval::getMaximum() const {
    return m_maximum;
}
void OAIGoogleCloudRetailV2alphaInterval::setMaximum(const double &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaInterval::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIGoogleCloudRetailV2alphaInterval::is_maximum_Valid() const{
    return m_maximum_isValid;
}

double OAIGoogleCloudRetailV2alphaInterval::getMinimum() const {
    return m_minimum;
}
void OAIGoogleCloudRetailV2alphaInterval::setMinimum(const double &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaInterval::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIGoogleCloudRetailV2alphaInterval::is_minimum_Valid() const{
    return m_minimum_isValid;
}

bool OAIGoogleCloudRetailV2alphaInterval::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclusive_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2alphaInterval::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
