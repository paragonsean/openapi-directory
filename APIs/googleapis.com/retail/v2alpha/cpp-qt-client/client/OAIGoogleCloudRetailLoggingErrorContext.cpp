/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailLoggingErrorContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailLoggingErrorContext::OAIGoogleCloudRetailLoggingErrorContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailLoggingErrorContext::OAIGoogleCloudRetailLoggingErrorContext() {
    this->initializeModel();
}

OAIGoogleCloudRetailLoggingErrorContext::~OAIGoogleCloudRetailLoggingErrorContext() {}

void OAIGoogleCloudRetailLoggingErrorContext::initializeModel() {

    m_http_request_isSet = false;
    m_http_request_isValid = false;

    m_report_location_isSet = false;
    m_report_location_isValid = false;
}

void OAIGoogleCloudRetailLoggingErrorContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailLoggingErrorContext::fromJsonObject(QJsonObject json) {

    m_http_request_isValid = ::OpenAPI::fromJsonValue(m_http_request, json[QString("httpRequest")]);
    m_http_request_isSet = !json[QString("httpRequest")].isNull() && m_http_request_isValid;

    m_report_location_isValid = ::OpenAPI::fromJsonValue(m_report_location, json[QString("reportLocation")]);
    m_report_location_isSet = !json[QString("reportLocation")].isNull() && m_report_location_isValid;
}

QString OAIGoogleCloudRetailLoggingErrorContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailLoggingErrorContext::asJsonObject() const {
    QJsonObject obj;
    if (m_http_request.isSet()) {
        obj.insert(QString("httpRequest"), ::OpenAPI::toJsonValue(m_http_request));
    }
    if (m_report_location.isSet()) {
        obj.insert(QString("reportLocation"), ::OpenAPI::toJsonValue(m_report_location));
    }
    return obj;
}

OAIGoogleCloudRetailLoggingHttpRequestContext OAIGoogleCloudRetailLoggingErrorContext::getHttpRequest() const {
    return m_http_request;
}
void OAIGoogleCloudRetailLoggingErrorContext::setHttpRequest(const OAIGoogleCloudRetailLoggingHttpRequestContext &http_request) {
    m_http_request = http_request;
    m_http_request_isSet = true;
}

bool OAIGoogleCloudRetailLoggingErrorContext::is_http_request_Set() const{
    return m_http_request_isSet;
}

bool OAIGoogleCloudRetailLoggingErrorContext::is_http_request_Valid() const{
    return m_http_request_isValid;
}

OAIGoogleCloudRetailLoggingSourceLocation OAIGoogleCloudRetailLoggingErrorContext::getReportLocation() const {
    return m_report_location;
}
void OAIGoogleCloudRetailLoggingErrorContext::setReportLocation(const OAIGoogleCloudRetailLoggingSourceLocation &report_location) {
    m_report_location = report_location;
    m_report_location_isSet = true;
}

bool OAIGoogleCloudRetailLoggingErrorContext::is_report_location_Set() const{
    return m_report_location_isSet;
}

bool OAIGoogleCloudRetailLoggingErrorContext::is_report_location_Valid() const{
    return m_report_location_isValid;
}

bool OAIGoogleCloudRetailLoggingErrorContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailLoggingErrorContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
