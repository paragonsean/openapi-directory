/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2alphaProductInputConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2alphaProductInputConfig::OAIGoogleCloudRetailV2alphaProductInputConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2alphaProductInputConfig::OAIGoogleCloudRetailV2alphaProductInputConfig() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2alphaProductInputConfig::~OAIGoogleCloudRetailV2alphaProductInputConfig() {}

void OAIGoogleCloudRetailV2alphaProductInputConfig::initializeModel() {

    m_big_query_source_isSet = false;
    m_big_query_source_isValid = false;

    m_gcs_source_isSet = false;
    m_gcs_source_isValid = false;

    m_product_inline_source_isSet = false;
    m_product_inline_source_isValid = false;
}

void OAIGoogleCloudRetailV2alphaProductInputConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2alphaProductInputConfig::fromJsonObject(QJsonObject json) {

    m_big_query_source_isValid = ::OpenAPI::fromJsonValue(m_big_query_source, json[QString("bigQuerySource")]);
    m_big_query_source_isSet = !json[QString("bigQuerySource")].isNull() && m_big_query_source_isValid;

    m_gcs_source_isValid = ::OpenAPI::fromJsonValue(m_gcs_source, json[QString("gcsSource")]);
    m_gcs_source_isSet = !json[QString("gcsSource")].isNull() && m_gcs_source_isValid;

    m_product_inline_source_isValid = ::OpenAPI::fromJsonValue(m_product_inline_source, json[QString("productInlineSource")]);
    m_product_inline_source_isSet = !json[QString("productInlineSource")].isNull() && m_product_inline_source_isValid;
}

QString OAIGoogleCloudRetailV2alphaProductInputConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2alphaProductInputConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_big_query_source.isSet()) {
        obj.insert(QString("bigQuerySource"), ::OpenAPI::toJsonValue(m_big_query_source));
    }
    if (m_gcs_source.isSet()) {
        obj.insert(QString("gcsSource"), ::OpenAPI::toJsonValue(m_gcs_source));
    }
    if (m_product_inline_source.isSet()) {
        obj.insert(QString("productInlineSource"), ::OpenAPI::toJsonValue(m_product_inline_source));
    }
    return obj;
}

OAIGoogleCloudRetailV2alphaBigQuerySource OAIGoogleCloudRetailV2alphaProductInputConfig::getBigQuerySource() const {
    return m_big_query_source;
}
void OAIGoogleCloudRetailV2alphaProductInputConfig::setBigQuerySource(const OAIGoogleCloudRetailV2alphaBigQuerySource &big_query_source) {
    m_big_query_source = big_query_source;
    m_big_query_source_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaProductInputConfig::is_big_query_source_Set() const{
    return m_big_query_source_isSet;
}

bool OAIGoogleCloudRetailV2alphaProductInputConfig::is_big_query_source_Valid() const{
    return m_big_query_source_isValid;
}

OAIGoogleCloudRetailV2alphaGcsSource OAIGoogleCloudRetailV2alphaProductInputConfig::getGcsSource() const {
    return m_gcs_source;
}
void OAIGoogleCloudRetailV2alphaProductInputConfig::setGcsSource(const OAIGoogleCloudRetailV2alphaGcsSource &gcs_source) {
    m_gcs_source = gcs_source;
    m_gcs_source_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaProductInputConfig::is_gcs_source_Set() const{
    return m_gcs_source_isSet;
}

bool OAIGoogleCloudRetailV2alphaProductInputConfig::is_gcs_source_Valid() const{
    return m_gcs_source_isValid;
}

OAIGoogleCloudRetailV2alphaProductInlineSource OAIGoogleCloudRetailV2alphaProductInputConfig::getProductInlineSource() const {
    return m_product_inline_source;
}
void OAIGoogleCloudRetailV2alphaProductInputConfig::setProductInlineSource(const OAIGoogleCloudRetailV2alphaProductInlineSource &product_inline_source) {
    m_product_inline_source = product_inline_source;
    m_product_inline_source_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaProductInputConfig::is_product_inline_source_Set() const{
    return m_product_inline_source_isSet;
}

bool OAIGoogleCloudRetailV2alphaProductInputConfig::is_product_inline_source_Valid() const{
    return m_product_inline_source_isValid;
}

bool OAIGoogleCloudRetailV2alphaProductInputConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_big_query_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_inline_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2alphaProductInputConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
