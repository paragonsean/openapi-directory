/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2alphaUserEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2alphaUserEvent::OAIGoogleCloudRetailV2alphaUserEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2alphaUserEvent::OAIGoogleCloudRetailV2alphaUserEvent() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2alphaUserEvent::~OAIGoogleCloudRetailV2alphaUserEvent() {}

void OAIGoogleCloudRetailV2alphaUserEvent::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_attribution_token_isSet = false;
    m_attribution_token_isValid = false;

    m_cart_id_isSet = false;
    m_cart_id_isValid = false;

    m_completion_detail_isSet = false;
    m_completion_detail_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_event_time_isSet = false;
    m_event_time_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_experiment_ids_isSet = false;
    m_experiment_ids_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_page_categories_isSet = false;
    m_page_categories_isValid = false;

    m_page_view_id_isSet = false;
    m_page_view_id_isValid = false;

    m_product_details_isSet = false;
    m_product_details_isValid = false;

    m_purchase_transaction_isSet = false;
    m_purchase_transaction_isValid = false;

    m_referrer_uri_isSet = false;
    m_referrer_uri_isValid = false;

    m_search_query_isSet = false;
    m_search_query_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_user_info_isSet = false;
    m_user_info_isValid = false;

    m_visitor_id_isSet = false;
    m_visitor_id_isValid = false;
}

void OAIGoogleCloudRetailV2alphaUserEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2alphaUserEvent::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_attribution_token_isValid = ::OpenAPI::fromJsonValue(m_attribution_token, json[QString("attributionToken")]);
    m_attribution_token_isSet = !json[QString("attributionToken")].isNull() && m_attribution_token_isValid;

    m_cart_id_isValid = ::OpenAPI::fromJsonValue(m_cart_id, json[QString("cartId")]);
    m_cart_id_isSet = !json[QString("cartId")].isNull() && m_cart_id_isValid;

    m_completion_detail_isValid = ::OpenAPI::fromJsonValue(m_completion_detail, json[QString("completionDetail")]);
    m_completion_detail_isSet = !json[QString("completionDetail")].isNull() && m_completion_detail_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_event_time_isValid = ::OpenAPI::fromJsonValue(m_event_time, json[QString("eventTime")]);
    m_event_time_isSet = !json[QString("eventTime")].isNull() && m_event_time_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_experiment_ids_isValid = ::OpenAPI::fromJsonValue(m_experiment_ids, json[QString("experimentIds")]);
    m_experiment_ids_isSet = !json[QString("experimentIds")].isNull() && m_experiment_ids_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;

    m_page_categories_isValid = ::OpenAPI::fromJsonValue(m_page_categories, json[QString("pageCategories")]);
    m_page_categories_isSet = !json[QString("pageCategories")].isNull() && m_page_categories_isValid;

    m_page_view_id_isValid = ::OpenAPI::fromJsonValue(m_page_view_id, json[QString("pageViewId")]);
    m_page_view_id_isSet = !json[QString("pageViewId")].isNull() && m_page_view_id_isValid;

    m_product_details_isValid = ::OpenAPI::fromJsonValue(m_product_details, json[QString("productDetails")]);
    m_product_details_isSet = !json[QString("productDetails")].isNull() && m_product_details_isValid;

    m_purchase_transaction_isValid = ::OpenAPI::fromJsonValue(m_purchase_transaction, json[QString("purchaseTransaction")]);
    m_purchase_transaction_isSet = !json[QString("purchaseTransaction")].isNull() && m_purchase_transaction_isValid;

    m_referrer_uri_isValid = ::OpenAPI::fromJsonValue(m_referrer_uri, json[QString("referrerUri")]);
    m_referrer_uri_isSet = !json[QString("referrerUri")].isNull() && m_referrer_uri_isValid;

    m_search_query_isValid = ::OpenAPI::fromJsonValue(m_search_query, json[QString("searchQuery")]);
    m_search_query_isSet = !json[QString("searchQuery")].isNull() && m_search_query_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_user_info_isValid = ::OpenAPI::fromJsonValue(m_user_info, json[QString("userInfo")]);
    m_user_info_isSet = !json[QString("userInfo")].isNull() && m_user_info_isValid;

    m_visitor_id_isValid = ::OpenAPI::fromJsonValue(m_visitor_id, json[QString("visitorId")]);
    m_visitor_id_isSet = !json[QString("visitorId")].isNull() && m_visitor_id_isValid;
}

QString OAIGoogleCloudRetailV2alphaUserEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2alphaUserEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_attribution_token_isSet) {
        obj.insert(QString("attributionToken"), ::OpenAPI::toJsonValue(m_attribution_token));
    }
    if (m_cart_id_isSet) {
        obj.insert(QString("cartId"), ::OpenAPI::toJsonValue(m_cart_id));
    }
    if (m_completion_detail.isSet()) {
        obj.insert(QString("completionDetail"), ::OpenAPI::toJsonValue(m_completion_detail));
    }
    if (m_entity_isSet) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_event_time_isSet) {
        obj.insert(QString("eventTime"), ::OpenAPI::toJsonValue(m_event_time));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_experiment_ids.size() > 0) {
        obj.insert(QString("experimentIds"), ::OpenAPI::toJsonValue(m_experiment_ids));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_order_by_isSet) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_page_categories.size() > 0) {
        obj.insert(QString("pageCategories"), ::OpenAPI::toJsonValue(m_page_categories));
    }
    if (m_page_view_id_isSet) {
        obj.insert(QString("pageViewId"), ::OpenAPI::toJsonValue(m_page_view_id));
    }
    if (m_product_details.size() > 0) {
        obj.insert(QString("productDetails"), ::OpenAPI::toJsonValue(m_product_details));
    }
    if (m_purchase_transaction.isSet()) {
        obj.insert(QString("purchaseTransaction"), ::OpenAPI::toJsonValue(m_purchase_transaction));
    }
    if (m_referrer_uri_isSet) {
        obj.insert(QString("referrerUri"), ::OpenAPI::toJsonValue(m_referrer_uri));
    }
    if (m_search_query_isSet) {
        obj.insert(QString("searchQuery"), ::OpenAPI::toJsonValue(m_search_query));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_user_info.isSet()) {
        obj.insert(QString("userInfo"), ::OpenAPI::toJsonValue(m_user_info));
    }
    if (m_visitor_id_isSet) {
        obj.insert(QString("visitorId"), ::OpenAPI::toJsonValue(m_visitor_id));
    }
    return obj;
}

QMap<QString, OAIGoogleCloudRetailV2alphaCustomAttribute> OAIGoogleCloudRetailV2alphaUserEvent::getAttributes() const {
    return m_attributes;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setAttributes(const QMap<QString, OAIGoogleCloudRetailV2alphaCustomAttribute> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIGoogleCloudRetailV2alphaUserEvent::getAttributionToken() const {
    return m_attribution_token;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setAttributionToken(const QString &attribution_token) {
    m_attribution_token = attribution_token;
    m_attribution_token_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_attribution_token_Set() const{
    return m_attribution_token_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_attribution_token_Valid() const{
    return m_attribution_token_isValid;
}

QString OAIGoogleCloudRetailV2alphaUserEvent::getCartId() const {
    return m_cart_id;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setCartId(const QString &cart_id) {
    m_cart_id = cart_id;
    m_cart_id_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_cart_id_Set() const{
    return m_cart_id_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_cart_id_Valid() const{
    return m_cart_id_isValid;
}

OAIGoogleCloudRetailV2alphaCompletionDetail OAIGoogleCloudRetailV2alphaUserEvent::getCompletionDetail() const {
    return m_completion_detail;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setCompletionDetail(const OAIGoogleCloudRetailV2alphaCompletionDetail &completion_detail) {
    m_completion_detail = completion_detail;
    m_completion_detail_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_completion_detail_Set() const{
    return m_completion_detail_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_completion_detail_Valid() const{
    return m_completion_detail_isValid;
}

QString OAIGoogleCloudRetailV2alphaUserEvent::getEntity() const {
    return m_entity;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setEntity(const QString &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_entity_Valid() const{
    return m_entity_isValid;
}

QString OAIGoogleCloudRetailV2alphaUserEvent::getEventTime() const {
    return m_event_time;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setEventTime(const QString &event_time) {
    m_event_time = event_time;
    m_event_time_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_event_time_Set() const{
    return m_event_time_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_event_time_Valid() const{
    return m_event_time_isValid;
}

QString OAIGoogleCloudRetailV2alphaUserEvent::getEventType() const {
    return m_event_type;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QList<QString> OAIGoogleCloudRetailV2alphaUserEvent::getExperimentIds() const {
    return m_experiment_ids;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setExperimentIds(const QList<QString> &experiment_ids) {
    m_experiment_ids = experiment_ids;
    m_experiment_ids_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_experiment_ids_Set() const{
    return m_experiment_ids_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_experiment_ids_Valid() const{
    return m_experiment_ids_isValid;
}

QString OAIGoogleCloudRetailV2alphaUserEvent::getFilter() const {
    return m_filter;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_filter_Valid() const{
    return m_filter_isValid;
}

qint32 OAIGoogleCloudRetailV2alphaUserEvent::getOffset() const {
    return m_offset;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAIGoogleCloudRetailV2alphaUserEvent::getOrderBy() const {
    return m_order_by;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setOrderBy(const QString &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_order_by_Valid() const{
    return m_order_by_isValid;
}

QList<QString> OAIGoogleCloudRetailV2alphaUserEvent::getPageCategories() const {
    return m_page_categories;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setPageCategories(const QList<QString> &page_categories) {
    m_page_categories = page_categories;
    m_page_categories_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_page_categories_Set() const{
    return m_page_categories_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_page_categories_Valid() const{
    return m_page_categories_isValid;
}

QString OAIGoogleCloudRetailV2alphaUserEvent::getPageViewId() const {
    return m_page_view_id;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setPageViewId(const QString &page_view_id) {
    m_page_view_id = page_view_id;
    m_page_view_id_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_page_view_id_Set() const{
    return m_page_view_id_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_page_view_id_Valid() const{
    return m_page_view_id_isValid;
}

QList<OAIGoogleCloudRetailV2alphaProductDetail> OAIGoogleCloudRetailV2alphaUserEvent::getProductDetails() const {
    return m_product_details;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setProductDetails(const QList<OAIGoogleCloudRetailV2alphaProductDetail> &product_details) {
    m_product_details = product_details;
    m_product_details_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_product_details_Set() const{
    return m_product_details_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_product_details_Valid() const{
    return m_product_details_isValid;
}

OAIGoogleCloudRetailV2alphaPurchaseTransaction OAIGoogleCloudRetailV2alphaUserEvent::getPurchaseTransaction() const {
    return m_purchase_transaction;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setPurchaseTransaction(const OAIGoogleCloudRetailV2alphaPurchaseTransaction &purchase_transaction) {
    m_purchase_transaction = purchase_transaction;
    m_purchase_transaction_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_purchase_transaction_Set() const{
    return m_purchase_transaction_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_purchase_transaction_Valid() const{
    return m_purchase_transaction_isValid;
}

QString OAIGoogleCloudRetailV2alphaUserEvent::getReferrerUri() const {
    return m_referrer_uri;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setReferrerUri(const QString &referrer_uri) {
    m_referrer_uri = referrer_uri;
    m_referrer_uri_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_referrer_uri_Set() const{
    return m_referrer_uri_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_referrer_uri_Valid() const{
    return m_referrer_uri_isValid;
}

QString OAIGoogleCloudRetailV2alphaUserEvent::getSearchQuery() const {
    return m_search_query;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setSearchQuery(const QString &search_query) {
    m_search_query = search_query;
    m_search_query_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_search_query_Set() const{
    return m_search_query_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_search_query_Valid() const{
    return m_search_query_isValid;
}

QString OAIGoogleCloudRetailV2alphaUserEvent::getSessionId() const {
    return m_session_id;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAIGoogleCloudRetailV2alphaUserEvent::getUri() const {
    return m_uri;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIGoogleCloudRetailV2alphaUserInfo OAIGoogleCloudRetailV2alphaUserEvent::getUserInfo() const {
    return m_user_info;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setUserInfo(const OAIGoogleCloudRetailV2alphaUserInfo &user_info) {
    m_user_info = user_info;
    m_user_info_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_user_info_Set() const{
    return m_user_info_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_user_info_Valid() const{
    return m_user_info_isValid;
}

QString OAIGoogleCloudRetailV2alphaUserEvent::getVisitorId() const {
    return m_visitor_id;
}
void OAIGoogleCloudRetailV2alphaUserEvent::setVisitorId(const QString &visitor_id) {
    m_visitor_id = visitor_id;
    m_visitor_id_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_visitor_id_Set() const{
    return m_visitor_id_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::is_visitor_id_Valid() const{
    return m_visitor_id_isValid;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribution_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cart_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiment_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_view_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_referrer_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visitor_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2alphaUserEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
