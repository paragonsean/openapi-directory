/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2alphaRejoinUserEventsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2alphaRejoinUserEventsRequest::OAIGoogleCloudRetailV2alphaRejoinUserEventsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2alphaRejoinUserEventsRequest::OAIGoogleCloudRetailV2alphaRejoinUserEventsRequest() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2alphaRejoinUserEventsRequest::~OAIGoogleCloudRetailV2alphaRejoinUserEventsRequest() {}

void OAIGoogleCloudRetailV2alphaRejoinUserEventsRequest::initializeModel() {

    m_user_event_rejoin_scope_isSet = false;
    m_user_event_rejoin_scope_isValid = false;
}

void OAIGoogleCloudRetailV2alphaRejoinUserEventsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2alphaRejoinUserEventsRequest::fromJsonObject(QJsonObject json) {

    m_user_event_rejoin_scope_isValid = ::OpenAPI::fromJsonValue(m_user_event_rejoin_scope, json[QString("userEventRejoinScope")]);
    m_user_event_rejoin_scope_isSet = !json[QString("userEventRejoinScope")].isNull() && m_user_event_rejoin_scope_isValid;
}

QString OAIGoogleCloudRetailV2alphaRejoinUserEventsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2alphaRejoinUserEventsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_user_event_rejoin_scope_isSet) {
        obj.insert(QString("userEventRejoinScope"), ::OpenAPI::toJsonValue(m_user_event_rejoin_scope));
    }
    return obj;
}

QString OAIGoogleCloudRetailV2alphaRejoinUserEventsRequest::getUserEventRejoinScope() const {
    return m_user_event_rejoin_scope;
}
void OAIGoogleCloudRetailV2alphaRejoinUserEventsRequest::setUserEventRejoinScope(const QString &user_event_rejoin_scope) {
    m_user_event_rejoin_scope = user_event_rejoin_scope;
    m_user_event_rejoin_scope_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaRejoinUserEventsRequest::is_user_event_rejoin_scope_Set() const{
    return m_user_event_rejoin_scope_isSet;
}

bool OAIGoogleCloudRetailV2alphaRejoinUserEventsRequest::is_user_event_rejoin_scope_Valid() const{
    return m_user_event_rejoin_scope_isValid;
}

bool OAIGoogleCloudRetailV2alphaRejoinUserEventsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_event_rejoin_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2alphaRejoinUserEventsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
