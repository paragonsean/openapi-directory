/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::~OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec() {}

void OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::initializeModel() {

    m_enable_dynamic_position_isSet = false;
    m_enable_dynamic_position_isValid = false;

    m_excluded_filter_keys_isSet = false;
    m_excluded_filter_keys_isValid = false;

    m_facet_key_isSet = false;
    m_facet_key_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;
}

void OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::fromJsonObject(QJsonObject json) {

    m_enable_dynamic_position_isValid = ::OpenAPI::fromJsonValue(m_enable_dynamic_position, json[QString("enableDynamicPosition")]);
    m_enable_dynamic_position_isSet = !json[QString("enableDynamicPosition")].isNull() && m_enable_dynamic_position_isValid;

    m_excluded_filter_keys_isValid = ::OpenAPI::fromJsonValue(m_excluded_filter_keys, json[QString("excludedFilterKeys")]);
    m_excluded_filter_keys_isSet = !json[QString("excludedFilterKeys")].isNull() && m_excluded_filter_keys_isValid;

    m_facet_key_isValid = ::OpenAPI::fromJsonValue(m_facet_key, json[QString("facetKey")]);
    m_facet_key_isSet = !json[QString("facetKey")].isNull() && m_facet_key_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;
}

QString OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_dynamic_position_isSet) {
        obj.insert(QString("enableDynamicPosition"), ::OpenAPI::toJsonValue(m_enable_dynamic_position));
    }
    if (m_excluded_filter_keys.size() > 0) {
        obj.insert(QString("excludedFilterKeys"), ::OpenAPI::toJsonValue(m_excluded_filter_keys));
    }
    if (m_facet_key.isSet()) {
        obj.insert(QString("facetKey"), ::OpenAPI::toJsonValue(m_facet_key));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    return obj;
}

bool OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::isEnableDynamicPosition() const {
    return m_enable_dynamic_position;
}
void OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::setEnableDynamicPosition(const bool &enable_dynamic_position) {
    m_enable_dynamic_position = enable_dynamic_position;
    m_enable_dynamic_position_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::is_enable_dynamic_position_Set() const{
    return m_enable_dynamic_position_isSet;
}

bool OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::is_enable_dynamic_position_Valid() const{
    return m_enable_dynamic_position_isValid;
}

QList<QString> OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::getExcludedFilterKeys() const {
    return m_excluded_filter_keys;
}
void OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::setExcludedFilterKeys(const QList<QString> &excluded_filter_keys) {
    m_excluded_filter_keys = excluded_filter_keys;
    m_excluded_filter_keys_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::is_excluded_filter_keys_Set() const{
    return m_excluded_filter_keys_isSet;
}

bool OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::is_excluded_filter_keys_Valid() const{
    return m_excluded_filter_keys_isValid;
}

OAIGoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::getFacetKey() const {
    return m_facet_key;
}
void OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::setFacetKey(const OAIGoogleCloudRetailV2alphaSearchRequestFacetSpecFacetKey &facet_key) {
    m_facet_key = facet_key;
    m_facet_key_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::is_facet_key_Set() const{
    return m_facet_key_isSet;
}

bool OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::is_facet_key_Valid() const{
    return m_facet_key_isValid;
}

qint32 OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::getLimit() const {
    return m_limit;
}
void OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::is_limit_Valid() const{
    return m_limit_isValid;
}

bool OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_dynamic_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_filter_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2alphaSearchRequestFacetSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
