/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::~OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction() {}

void OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::initializeModel() {

    m_oneway_terms_isSet = false;
    m_oneway_terms_isValid = false;

    m_query_terms_isSet = false;
    m_query_terms_isValid = false;

    m_synonyms_isSet = false;
    m_synonyms_isValid = false;
}

void OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::fromJsonObject(QJsonObject json) {

    m_oneway_terms_isValid = ::OpenAPI::fromJsonValue(m_oneway_terms, json[QString("onewayTerms")]);
    m_oneway_terms_isSet = !json[QString("onewayTerms")].isNull() && m_oneway_terms_isValid;

    m_query_terms_isValid = ::OpenAPI::fromJsonValue(m_query_terms, json[QString("queryTerms")]);
    m_query_terms_isSet = !json[QString("queryTerms")].isNull() && m_query_terms_isValid;

    m_synonyms_isValid = ::OpenAPI::fromJsonValue(m_synonyms, json[QString("synonyms")]);
    m_synonyms_isSet = !json[QString("synonyms")].isNull() && m_synonyms_isValid;
}

QString OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::asJsonObject() const {
    QJsonObject obj;
    if (m_oneway_terms.size() > 0) {
        obj.insert(QString("onewayTerms"), ::OpenAPI::toJsonValue(m_oneway_terms));
    }
    if (m_query_terms.size() > 0) {
        obj.insert(QString("queryTerms"), ::OpenAPI::toJsonValue(m_query_terms));
    }
    if (m_synonyms.size() > 0) {
        obj.insert(QString("synonyms"), ::OpenAPI::toJsonValue(m_synonyms));
    }
    return obj;
}

QList<QString> OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::getOnewayTerms() const {
    return m_oneway_terms;
}
void OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::setOnewayTerms(const QList<QString> &oneway_terms) {
    m_oneway_terms = oneway_terms;
    m_oneway_terms_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::is_oneway_terms_Set() const{
    return m_oneway_terms_isSet;
}

bool OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::is_oneway_terms_Valid() const{
    return m_oneway_terms_isValid;
}

QList<QString> OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::getQueryTerms() const {
    return m_query_terms;
}
void OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::setQueryTerms(const QList<QString> &query_terms) {
    m_query_terms = query_terms;
    m_query_terms_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::is_query_terms_Set() const{
    return m_query_terms_isSet;
}

bool OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::is_query_terms_Valid() const{
    return m_query_terms_isValid;
}

QList<QString> OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::getSynonyms() const {
    return m_synonyms;
}
void OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::setSynonyms(const QList<QString> &synonyms) {
    m_synonyms = synonyms;
    m_synonyms_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::is_synonyms_Set() const{
    return m_synonyms_isSet;
}

bool OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::is_synonyms_Valid() const{
    return m_synonyms_isValid;
}

bool OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_oneway_terms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_terms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_synonyms.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
