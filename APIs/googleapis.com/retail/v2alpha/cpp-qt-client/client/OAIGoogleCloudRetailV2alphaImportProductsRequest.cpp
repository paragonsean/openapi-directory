/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2alphaImportProductsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2alphaImportProductsRequest::OAIGoogleCloudRetailV2alphaImportProductsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2alphaImportProductsRequest::OAIGoogleCloudRetailV2alphaImportProductsRequest() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2alphaImportProductsRequest::~OAIGoogleCloudRetailV2alphaImportProductsRequest() {}

void OAIGoogleCloudRetailV2alphaImportProductsRequest::initializeModel() {

    m_errors_config_isSet = false;
    m_errors_config_isValid = false;

    m_input_config_isSet = false;
    m_input_config_isValid = false;

    m_notification_pubsub_topic_isSet = false;
    m_notification_pubsub_topic_isValid = false;

    m_reconciliation_mode_isSet = false;
    m_reconciliation_mode_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_skip_default_branch_protection_isSet = false;
    m_skip_default_branch_protection_isValid = false;

    m_update_mask_isSet = false;
    m_update_mask_isValid = false;
}

void OAIGoogleCloudRetailV2alphaImportProductsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2alphaImportProductsRequest::fromJsonObject(QJsonObject json) {

    m_errors_config_isValid = ::OpenAPI::fromJsonValue(m_errors_config, json[QString("errorsConfig")]);
    m_errors_config_isSet = !json[QString("errorsConfig")].isNull() && m_errors_config_isValid;

    m_input_config_isValid = ::OpenAPI::fromJsonValue(m_input_config, json[QString("inputConfig")]);
    m_input_config_isSet = !json[QString("inputConfig")].isNull() && m_input_config_isValid;

    m_notification_pubsub_topic_isValid = ::OpenAPI::fromJsonValue(m_notification_pubsub_topic, json[QString("notificationPubsubTopic")]);
    m_notification_pubsub_topic_isSet = !json[QString("notificationPubsubTopic")].isNull() && m_notification_pubsub_topic_isValid;

    m_reconciliation_mode_isValid = ::OpenAPI::fromJsonValue(m_reconciliation_mode, json[QString("reconciliationMode")]);
    m_reconciliation_mode_isSet = !json[QString("reconciliationMode")].isNull() && m_reconciliation_mode_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_skip_default_branch_protection_isValid = ::OpenAPI::fromJsonValue(m_skip_default_branch_protection, json[QString("skipDefaultBranchProtection")]);
    m_skip_default_branch_protection_isSet = !json[QString("skipDefaultBranchProtection")].isNull() && m_skip_default_branch_protection_isValid;

    m_update_mask_isValid = ::OpenAPI::fromJsonValue(m_update_mask, json[QString("updateMask")]);
    m_update_mask_isSet = !json[QString("updateMask")].isNull() && m_update_mask_isValid;
}

QString OAIGoogleCloudRetailV2alphaImportProductsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2alphaImportProductsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_errors_config.isSet()) {
        obj.insert(QString("errorsConfig"), ::OpenAPI::toJsonValue(m_errors_config));
    }
    if (m_input_config.isSet()) {
        obj.insert(QString("inputConfig"), ::OpenAPI::toJsonValue(m_input_config));
    }
    if (m_notification_pubsub_topic_isSet) {
        obj.insert(QString("notificationPubsubTopic"), ::OpenAPI::toJsonValue(m_notification_pubsub_topic));
    }
    if (m_reconciliation_mode_isSet) {
        obj.insert(QString("reconciliationMode"), ::OpenAPI::toJsonValue(m_reconciliation_mode));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_skip_default_branch_protection_isSet) {
        obj.insert(QString("skipDefaultBranchProtection"), ::OpenAPI::toJsonValue(m_skip_default_branch_protection));
    }
    if (m_update_mask_isSet) {
        obj.insert(QString("updateMask"), ::OpenAPI::toJsonValue(m_update_mask));
    }
    return obj;
}

OAIGoogleCloudRetailV2alphaImportErrorsConfig OAIGoogleCloudRetailV2alphaImportProductsRequest::getErrorsConfig() const {
    return m_errors_config;
}
void OAIGoogleCloudRetailV2alphaImportProductsRequest::setErrorsConfig(const OAIGoogleCloudRetailV2alphaImportErrorsConfig &errors_config) {
    m_errors_config = errors_config;
    m_errors_config_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaImportProductsRequest::is_errors_config_Set() const{
    return m_errors_config_isSet;
}

bool OAIGoogleCloudRetailV2alphaImportProductsRequest::is_errors_config_Valid() const{
    return m_errors_config_isValid;
}

OAIGoogleCloudRetailV2alphaProductInputConfig OAIGoogleCloudRetailV2alphaImportProductsRequest::getInputConfig() const {
    return m_input_config;
}
void OAIGoogleCloudRetailV2alphaImportProductsRequest::setInputConfig(const OAIGoogleCloudRetailV2alphaProductInputConfig &input_config) {
    m_input_config = input_config;
    m_input_config_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaImportProductsRequest::is_input_config_Set() const{
    return m_input_config_isSet;
}

bool OAIGoogleCloudRetailV2alphaImportProductsRequest::is_input_config_Valid() const{
    return m_input_config_isValid;
}

QString OAIGoogleCloudRetailV2alphaImportProductsRequest::getNotificationPubsubTopic() const {
    return m_notification_pubsub_topic;
}
void OAIGoogleCloudRetailV2alphaImportProductsRequest::setNotificationPubsubTopic(const QString &notification_pubsub_topic) {
    m_notification_pubsub_topic = notification_pubsub_topic;
    m_notification_pubsub_topic_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaImportProductsRequest::is_notification_pubsub_topic_Set() const{
    return m_notification_pubsub_topic_isSet;
}

bool OAIGoogleCloudRetailV2alphaImportProductsRequest::is_notification_pubsub_topic_Valid() const{
    return m_notification_pubsub_topic_isValid;
}

QString OAIGoogleCloudRetailV2alphaImportProductsRequest::getReconciliationMode() const {
    return m_reconciliation_mode;
}
void OAIGoogleCloudRetailV2alphaImportProductsRequest::setReconciliationMode(const QString &reconciliation_mode) {
    m_reconciliation_mode = reconciliation_mode;
    m_reconciliation_mode_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaImportProductsRequest::is_reconciliation_mode_Set() const{
    return m_reconciliation_mode_isSet;
}

bool OAIGoogleCloudRetailV2alphaImportProductsRequest::is_reconciliation_mode_Valid() const{
    return m_reconciliation_mode_isValid;
}

QString OAIGoogleCloudRetailV2alphaImportProductsRequest::getRequestId() const {
    return m_request_id;
}
void OAIGoogleCloudRetailV2alphaImportProductsRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaImportProductsRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIGoogleCloudRetailV2alphaImportProductsRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIGoogleCloudRetailV2alphaImportProductsRequest::isSkipDefaultBranchProtection() const {
    return m_skip_default_branch_protection;
}
void OAIGoogleCloudRetailV2alphaImportProductsRequest::setSkipDefaultBranchProtection(const bool &skip_default_branch_protection) {
    m_skip_default_branch_protection = skip_default_branch_protection;
    m_skip_default_branch_protection_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaImportProductsRequest::is_skip_default_branch_protection_Set() const{
    return m_skip_default_branch_protection_isSet;
}

bool OAIGoogleCloudRetailV2alphaImportProductsRequest::is_skip_default_branch_protection_Valid() const{
    return m_skip_default_branch_protection_isValid;
}

QString OAIGoogleCloudRetailV2alphaImportProductsRequest::getUpdateMask() const {
    return m_update_mask;
}
void OAIGoogleCloudRetailV2alphaImportProductsRequest::setUpdateMask(const QString &update_mask) {
    m_update_mask = update_mask;
    m_update_mask_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaImportProductsRequest::is_update_mask_Set() const{
    return m_update_mask_isSet;
}

bool OAIGoogleCloudRetailV2alphaImportProductsRequest::is_update_mask_Valid() const{
    return m_update_mask_isValid;
}

bool OAIGoogleCloudRetailV2alphaImportProductsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_pubsub_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciliation_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_default_branch_protection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_mask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2alphaImportProductsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
