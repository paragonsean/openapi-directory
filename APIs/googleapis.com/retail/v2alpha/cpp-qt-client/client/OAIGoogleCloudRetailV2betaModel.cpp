/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaModel::OAIGoogleCloudRetailV2betaModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaModel::OAIGoogleCloudRetailV2betaModel() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaModel::~OAIGoogleCloudRetailV2betaModel() {}

void OAIGoogleCloudRetailV2betaModel::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_data_state_isSet = false;
    m_data_state_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_filtering_option_isSet = false;
    m_filtering_option_isValid = false;

    m_last_tune_time_isSet = false;
    m_last_tune_time_isValid = false;

    m_model_features_config_isSet = false;
    m_model_features_config_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_optimization_objective_isSet = false;
    m_optimization_objective_isValid = false;

    m_periodic_tuning_state_isSet = false;
    m_periodic_tuning_state_isValid = false;

    m_serving_config_lists_isSet = false;
    m_serving_config_lists_isValid = false;

    m_serving_state_isSet = false;
    m_serving_state_isValid = false;

    m_training_state_isSet = false;
    m_training_state_isValid = false;

    m_tuning_operation_isSet = false;
    m_tuning_operation_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudRetailV2betaModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaModel::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_data_state_isValid = ::OpenAPI::fromJsonValue(m_data_state, json[QString("dataState")]);
    m_data_state_isSet = !json[QString("dataState")].isNull() && m_data_state_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_filtering_option_isValid = ::OpenAPI::fromJsonValue(m_filtering_option, json[QString("filteringOption")]);
    m_filtering_option_isSet = !json[QString("filteringOption")].isNull() && m_filtering_option_isValid;

    m_last_tune_time_isValid = ::OpenAPI::fromJsonValue(m_last_tune_time, json[QString("lastTuneTime")]);
    m_last_tune_time_isSet = !json[QString("lastTuneTime")].isNull() && m_last_tune_time_isValid;

    m_model_features_config_isValid = ::OpenAPI::fromJsonValue(m_model_features_config, json[QString("modelFeaturesConfig")]);
    m_model_features_config_isSet = !json[QString("modelFeaturesConfig")].isNull() && m_model_features_config_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_optimization_objective_isValid = ::OpenAPI::fromJsonValue(m_optimization_objective, json[QString("optimizationObjective")]);
    m_optimization_objective_isSet = !json[QString("optimizationObjective")].isNull() && m_optimization_objective_isValid;

    m_periodic_tuning_state_isValid = ::OpenAPI::fromJsonValue(m_periodic_tuning_state, json[QString("periodicTuningState")]);
    m_periodic_tuning_state_isSet = !json[QString("periodicTuningState")].isNull() && m_periodic_tuning_state_isValid;

    m_serving_config_lists_isValid = ::OpenAPI::fromJsonValue(m_serving_config_lists, json[QString("servingConfigLists")]);
    m_serving_config_lists_isSet = !json[QString("servingConfigLists")].isNull() && m_serving_config_lists_isValid;

    m_serving_state_isValid = ::OpenAPI::fromJsonValue(m_serving_state, json[QString("servingState")]);
    m_serving_state_isSet = !json[QString("servingState")].isNull() && m_serving_state_isValid;

    m_training_state_isValid = ::OpenAPI::fromJsonValue(m_training_state, json[QString("trainingState")]);
    m_training_state_isSet = !json[QString("trainingState")].isNull() && m_training_state_isValid;

    m_tuning_operation_isValid = ::OpenAPI::fromJsonValue(m_tuning_operation, json[QString("tuningOperation")]);
    m_tuning_operation_isSet = !json[QString("tuningOperation")].isNull() && m_tuning_operation_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudRetailV2betaModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaModel::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_data_state_isSet) {
        obj.insert(QString("dataState"), ::OpenAPI::toJsonValue(m_data_state));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_filtering_option_isSet) {
        obj.insert(QString("filteringOption"), ::OpenAPI::toJsonValue(m_filtering_option));
    }
    if (m_last_tune_time_isSet) {
        obj.insert(QString("lastTuneTime"), ::OpenAPI::toJsonValue(m_last_tune_time));
    }
    if (m_model_features_config.isSet()) {
        obj.insert(QString("modelFeaturesConfig"), ::OpenAPI::toJsonValue(m_model_features_config));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_optimization_objective_isSet) {
        obj.insert(QString("optimizationObjective"), ::OpenAPI::toJsonValue(m_optimization_objective));
    }
    if (m_periodic_tuning_state_isSet) {
        obj.insert(QString("periodicTuningState"), ::OpenAPI::toJsonValue(m_periodic_tuning_state));
    }
    if (m_serving_config_lists.size() > 0) {
        obj.insert(QString("servingConfigLists"), ::OpenAPI::toJsonValue(m_serving_config_lists));
    }
    if (m_serving_state_isSet) {
        obj.insert(QString("servingState"), ::OpenAPI::toJsonValue(m_serving_state));
    }
    if (m_training_state_isSet) {
        obj.insert(QString("trainingState"), ::OpenAPI::toJsonValue(m_training_state));
    }
    if (m_tuning_operation_isSet) {
        obj.insert(QString("tuningOperation"), ::OpenAPI::toJsonValue(m_tuning_operation));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIGoogleCloudRetailV2betaModel::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudRetailV2betaModel::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudRetailV2betaModel::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudRetailV2betaModel::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudRetailV2betaModel::getDataState() const {
    return m_data_state;
}
void OAIGoogleCloudRetailV2betaModel::setDataState(const QString &data_state) {
    m_data_state = data_state;
    m_data_state_isSet = true;
}

bool OAIGoogleCloudRetailV2betaModel::is_data_state_Set() const{
    return m_data_state_isSet;
}

bool OAIGoogleCloudRetailV2betaModel::is_data_state_Valid() const{
    return m_data_state_isValid;
}

QString OAIGoogleCloudRetailV2betaModel::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudRetailV2betaModel::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudRetailV2betaModel::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudRetailV2betaModel::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGoogleCloudRetailV2betaModel::getFilteringOption() const {
    return m_filtering_option;
}
void OAIGoogleCloudRetailV2betaModel::setFilteringOption(const QString &filtering_option) {
    m_filtering_option = filtering_option;
    m_filtering_option_isSet = true;
}

bool OAIGoogleCloudRetailV2betaModel::is_filtering_option_Set() const{
    return m_filtering_option_isSet;
}

bool OAIGoogleCloudRetailV2betaModel::is_filtering_option_Valid() const{
    return m_filtering_option_isValid;
}

QString OAIGoogleCloudRetailV2betaModel::getLastTuneTime() const {
    return m_last_tune_time;
}
void OAIGoogleCloudRetailV2betaModel::setLastTuneTime(const QString &last_tune_time) {
    m_last_tune_time = last_tune_time;
    m_last_tune_time_isSet = true;
}

bool OAIGoogleCloudRetailV2betaModel::is_last_tune_time_Set() const{
    return m_last_tune_time_isSet;
}

bool OAIGoogleCloudRetailV2betaModel::is_last_tune_time_Valid() const{
    return m_last_tune_time_isValid;
}

OAIGoogleCloudRetailV2betaModelModelFeaturesConfig OAIGoogleCloudRetailV2betaModel::getModelFeaturesConfig() const {
    return m_model_features_config;
}
void OAIGoogleCloudRetailV2betaModel::setModelFeaturesConfig(const OAIGoogleCloudRetailV2betaModelModelFeaturesConfig &model_features_config) {
    m_model_features_config = model_features_config;
    m_model_features_config_isSet = true;
}

bool OAIGoogleCloudRetailV2betaModel::is_model_features_config_Set() const{
    return m_model_features_config_isSet;
}

bool OAIGoogleCloudRetailV2betaModel::is_model_features_config_Valid() const{
    return m_model_features_config_isValid;
}

QString OAIGoogleCloudRetailV2betaModel::getName() const {
    return m_name;
}
void OAIGoogleCloudRetailV2betaModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudRetailV2betaModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudRetailV2betaModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudRetailV2betaModel::getOptimizationObjective() const {
    return m_optimization_objective;
}
void OAIGoogleCloudRetailV2betaModel::setOptimizationObjective(const QString &optimization_objective) {
    m_optimization_objective = optimization_objective;
    m_optimization_objective_isSet = true;
}

bool OAIGoogleCloudRetailV2betaModel::is_optimization_objective_Set() const{
    return m_optimization_objective_isSet;
}

bool OAIGoogleCloudRetailV2betaModel::is_optimization_objective_Valid() const{
    return m_optimization_objective_isValid;
}

QString OAIGoogleCloudRetailV2betaModel::getPeriodicTuningState() const {
    return m_periodic_tuning_state;
}
void OAIGoogleCloudRetailV2betaModel::setPeriodicTuningState(const QString &periodic_tuning_state) {
    m_periodic_tuning_state = periodic_tuning_state;
    m_periodic_tuning_state_isSet = true;
}

bool OAIGoogleCloudRetailV2betaModel::is_periodic_tuning_state_Set() const{
    return m_periodic_tuning_state_isSet;
}

bool OAIGoogleCloudRetailV2betaModel::is_periodic_tuning_state_Valid() const{
    return m_periodic_tuning_state_isValid;
}

QList<OAIGoogleCloudRetailV2betaModelServingConfigList> OAIGoogleCloudRetailV2betaModel::getServingConfigLists() const {
    return m_serving_config_lists;
}
void OAIGoogleCloudRetailV2betaModel::setServingConfigLists(const QList<OAIGoogleCloudRetailV2betaModelServingConfigList> &serving_config_lists) {
    m_serving_config_lists = serving_config_lists;
    m_serving_config_lists_isSet = true;
}

bool OAIGoogleCloudRetailV2betaModel::is_serving_config_lists_Set() const{
    return m_serving_config_lists_isSet;
}

bool OAIGoogleCloudRetailV2betaModel::is_serving_config_lists_Valid() const{
    return m_serving_config_lists_isValid;
}

QString OAIGoogleCloudRetailV2betaModel::getServingState() const {
    return m_serving_state;
}
void OAIGoogleCloudRetailV2betaModel::setServingState(const QString &serving_state) {
    m_serving_state = serving_state;
    m_serving_state_isSet = true;
}

bool OAIGoogleCloudRetailV2betaModel::is_serving_state_Set() const{
    return m_serving_state_isSet;
}

bool OAIGoogleCloudRetailV2betaModel::is_serving_state_Valid() const{
    return m_serving_state_isValid;
}

QString OAIGoogleCloudRetailV2betaModel::getTrainingState() const {
    return m_training_state;
}
void OAIGoogleCloudRetailV2betaModel::setTrainingState(const QString &training_state) {
    m_training_state = training_state;
    m_training_state_isSet = true;
}

bool OAIGoogleCloudRetailV2betaModel::is_training_state_Set() const{
    return m_training_state_isSet;
}

bool OAIGoogleCloudRetailV2betaModel::is_training_state_Valid() const{
    return m_training_state_isValid;
}

QString OAIGoogleCloudRetailV2betaModel::getTuningOperation() const {
    return m_tuning_operation;
}
void OAIGoogleCloudRetailV2betaModel::setTuningOperation(const QString &tuning_operation) {
    m_tuning_operation = tuning_operation;
    m_tuning_operation_isSet = true;
}

bool OAIGoogleCloudRetailV2betaModel::is_tuning_operation_Set() const{
    return m_tuning_operation_isSet;
}

bool OAIGoogleCloudRetailV2betaModel::is_tuning_operation_Valid() const{
    return m_tuning_operation_isValid;
}

QString OAIGoogleCloudRetailV2betaModel::getType() const {
    return m_type;
}
void OAIGoogleCloudRetailV2betaModel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudRetailV2betaModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudRetailV2betaModel::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGoogleCloudRetailV2betaModel::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudRetailV2betaModel::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudRetailV2betaModel::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudRetailV2betaModel::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudRetailV2betaModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filtering_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_tune_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_features_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimization_objective_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_periodic_tuning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serving_config_lists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_serving_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tuning_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
