/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2alphaPredictResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2alphaPredictResponse::OAIGoogleCloudRetailV2alphaPredictResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2alphaPredictResponse::OAIGoogleCloudRetailV2alphaPredictResponse() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2alphaPredictResponse::~OAIGoogleCloudRetailV2alphaPredictResponse() {}

void OAIGoogleCloudRetailV2alphaPredictResponse::initializeModel() {

    m_attribution_token_isSet = false;
    m_attribution_token_isValid = false;

    m_missing_ids_isSet = false;
    m_missing_ids_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_validate_only_isSet = false;
    m_validate_only_isValid = false;
}

void OAIGoogleCloudRetailV2alphaPredictResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2alphaPredictResponse::fromJsonObject(QJsonObject json) {

    m_attribution_token_isValid = ::OpenAPI::fromJsonValue(m_attribution_token, json[QString("attributionToken")]);
    m_attribution_token_isSet = !json[QString("attributionToken")].isNull() && m_attribution_token_isValid;

    m_missing_ids_isValid = ::OpenAPI::fromJsonValue(m_missing_ids, json[QString("missingIds")]);
    m_missing_ids_isSet = !json[QString("missingIds")].isNull() && m_missing_ids_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_validate_only_isValid = ::OpenAPI::fromJsonValue(m_validate_only, json[QString("validateOnly")]);
    m_validate_only_isSet = !json[QString("validateOnly")].isNull() && m_validate_only_isValid;
}

QString OAIGoogleCloudRetailV2alphaPredictResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2alphaPredictResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_attribution_token_isSet) {
        obj.insert(QString("attributionToken"), ::OpenAPI::toJsonValue(m_attribution_token));
    }
    if (m_missing_ids.size() > 0) {
        obj.insert(QString("missingIds"), ::OpenAPI::toJsonValue(m_missing_ids));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_validate_only_isSet) {
        obj.insert(QString("validateOnly"), ::OpenAPI::toJsonValue(m_validate_only));
    }
    return obj;
}

QString OAIGoogleCloudRetailV2alphaPredictResponse::getAttributionToken() const {
    return m_attribution_token;
}
void OAIGoogleCloudRetailV2alphaPredictResponse::setAttributionToken(const QString &attribution_token) {
    m_attribution_token = attribution_token;
    m_attribution_token_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaPredictResponse::is_attribution_token_Set() const{
    return m_attribution_token_isSet;
}

bool OAIGoogleCloudRetailV2alphaPredictResponse::is_attribution_token_Valid() const{
    return m_attribution_token_isValid;
}

QList<QString> OAIGoogleCloudRetailV2alphaPredictResponse::getMissingIds() const {
    return m_missing_ids;
}
void OAIGoogleCloudRetailV2alphaPredictResponse::setMissingIds(const QList<QString> &missing_ids) {
    m_missing_ids = missing_ids;
    m_missing_ids_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaPredictResponse::is_missing_ids_Set() const{
    return m_missing_ids_isSet;
}

bool OAIGoogleCloudRetailV2alphaPredictResponse::is_missing_ids_Valid() const{
    return m_missing_ids_isValid;
}

QList<OAIGoogleCloudRetailV2alphaPredictResponsePredictionResult> OAIGoogleCloudRetailV2alphaPredictResponse::getResults() const {
    return m_results;
}
void OAIGoogleCloudRetailV2alphaPredictResponse::setResults(const QList<OAIGoogleCloudRetailV2alphaPredictResponsePredictionResult> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaPredictResponse::is_results_Set() const{
    return m_results_isSet;
}

bool OAIGoogleCloudRetailV2alphaPredictResponse::is_results_Valid() const{
    return m_results_isValid;
}

bool OAIGoogleCloudRetailV2alphaPredictResponse::isValidateOnly() const {
    return m_validate_only;
}
void OAIGoogleCloudRetailV2alphaPredictResponse::setValidateOnly(const bool &validate_only) {
    m_validate_only = validate_only;
    m_validate_only_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaPredictResponse::is_validate_only_Set() const{
    return m_validate_only_isSet;
}

bool OAIGoogleCloudRetailV2alphaPredictResponse::is_validate_only_Valid() const{
    return m_validate_only_isValid;
}

bool OAIGoogleCloudRetailV2alphaPredictResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribution_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2alphaPredictResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
