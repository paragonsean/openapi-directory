/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2alphaImportUserEventsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2alphaImportUserEventsRequest::OAIGoogleCloudRetailV2alphaImportUserEventsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2alphaImportUserEventsRequest::OAIGoogleCloudRetailV2alphaImportUserEventsRequest() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2alphaImportUserEventsRequest::~OAIGoogleCloudRetailV2alphaImportUserEventsRequest() {}

void OAIGoogleCloudRetailV2alphaImportUserEventsRequest::initializeModel() {

    m_errors_config_isSet = false;
    m_errors_config_isValid = false;

    m_input_config_isSet = false;
    m_input_config_isValid = false;
}

void OAIGoogleCloudRetailV2alphaImportUserEventsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2alphaImportUserEventsRequest::fromJsonObject(QJsonObject json) {

    m_errors_config_isValid = ::OpenAPI::fromJsonValue(m_errors_config, json[QString("errorsConfig")]);
    m_errors_config_isSet = !json[QString("errorsConfig")].isNull() && m_errors_config_isValid;

    m_input_config_isValid = ::OpenAPI::fromJsonValue(m_input_config, json[QString("inputConfig")]);
    m_input_config_isSet = !json[QString("inputConfig")].isNull() && m_input_config_isValid;
}

QString OAIGoogleCloudRetailV2alphaImportUserEventsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2alphaImportUserEventsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_errors_config.isSet()) {
        obj.insert(QString("errorsConfig"), ::OpenAPI::toJsonValue(m_errors_config));
    }
    if (m_input_config.isSet()) {
        obj.insert(QString("inputConfig"), ::OpenAPI::toJsonValue(m_input_config));
    }
    return obj;
}

OAIGoogleCloudRetailV2alphaImportErrorsConfig OAIGoogleCloudRetailV2alphaImportUserEventsRequest::getErrorsConfig() const {
    return m_errors_config;
}
void OAIGoogleCloudRetailV2alphaImportUserEventsRequest::setErrorsConfig(const OAIGoogleCloudRetailV2alphaImportErrorsConfig &errors_config) {
    m_errors_config = errors_config;
    m_errors_config_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaImportUserEventsRequest::is_errors_config_Set() const{
    return m_errors_config_isSet;
}

bool OAIGoogleCloudRetailV2alphaImportUserEventsRequest::is_errors_config_Valid() const{
    return m_errors_config_isValid;
}

OAIGoogleCloudRetailV2alphaUserEventInputConfig OAIGoogleCloudRetailV2alphaImportUserEventsRequest::getInputConfig() const {
    return m_input_config;
}
void OAIGoogleCloudRetailV2alphaImportUserEventsRequest::setInputConfig(const OAIGoogleCloudRetailV2alphaUserEventInputConfig &input_config) {
    m_input_config = input_config;
    m_input_config_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaImportUserEventsRequest::is_input_config_Set() const{
    return m_input_config_isSet;
}

bool OAIGoogleCloudRetailV2alphaImportUserEventsRequest::is_input_config_Valid() const{
    return m_input_config_isValid;
}

bool OAIGoogleCloudRetailV2alphaImportUserEventsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2alphaImportUserEventsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
