/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2alphaLocalInventory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2alphaLocalInventory::OAIGoogleCloudRetailV2alphaLocalInventory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2alphaLocalInventory::OAIGoogleCloudRetailV2alphaLocalInventory() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2alphaLocalInventory::~OAIGoogleCloudRetailV2alphaLocalInventory() {}

void OAIGoogleCloudRetailV2alphaLocalInventory::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_fulfillment_types_isSet = false;
    m_fulfillment_types_isValid = false;

    m_place_id_isSet = false;
    m_place_id_isValid = false;

    m_price_info_isSet = false;
    m_price_info_isValid = false;
}

void OAIGoogleCloudRetailV2alphaLocalInventory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2alphaLocalInventory::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_fulfillment_types_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_types, json[QString("fulfillmentTypes")]);
    m_fulfillment_types_isSet = !json[QString("fulfillmentTypes")].isNull() && m_fulfillment_types_isValid;

    m_place_id_isValid = ::OpenAPI::fromJsonValue(m_place_id, json[QString("placeId")]);
    m_place_id_isSet = !json[QString("placeId")].isNull() && m_place_id_isValid;

    m_price_info_isValid = ::OpenAPI::fromJsonValue(m_price_info, json[QString("priceInfo")]);
    m_price_info_isSet = !json[QString("priceInfo")].isNull() && m_price_info_isValid;
}

QString OAIGoogleCloudRetailV2alphaLocalInventory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2alphaLocalInventory::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_fulfillment_types.size() > 0) {
        obj.insert(QString("fulfillmentTypes"), ::OpenAPI::toJsonValue(m_fulfillment_types));
    }
    if (m_place_id_isSet) {
        obj.insert(QString("placeId"), ::OpenAPI::toJsonValue(m_place_id));
    }
    if (m_price_info.isSet()) {
        obj.insert(QString("priceInfo"), ::OpenAPI::toJsonValue(m_price_info));
    }
    return obj;
}

QMap<QString, OAIGoogleCloudRetailV2alphaCustomAttribute> OAIGoogleCloudRetailV2alphaLocalInventory::getAttributes() const {
    return m_attributes;
}
void OAIGoogleCloudRetailV2alphaLocalInventory::setAttributes(const QMap<QString, OAIGoogleCloudRetailV2alphaCustomAttribute> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaLocalInventory::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIGoogleCloudRetailV2alphaLocalInventory::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList<QString> OAIGoogleCloudRetailV2alphaLocalInventory::getFulfillmentTypes() const {
    return m_fulfillment_types;
}
void OAIGoogleCloudRetailV2alphaLocalInventory::setFulfillmentTypes(const QList<QString> &fulfillment_types) {
    m_fulfillment_types = fulfillment_types;
    m_fulfillment_types_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaLocalInventory::is_fulfillment_types_Set() const{
    return m_fulfillment_types_isSet;
}

bool OAIGoogleCloudRetailV2alphaLocalInventory::is_fulfillment_types_Valid() const{
    return m_fulfillment_types_isValid;
}

QString OAIGoogleCloudRetailV2alphaLocalInventory::getPlaceId() const {
    return m_place_id;
}
void OAIGoogleCloudRetailV2alphaLocalInventory::setPlaceId(const QString &place_id) {
    m_place_id = place_id;
    m_place_id_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaLocalInventory::is_place_id_Set() const{
    return m_place_id_isSet;
}

bool OAIGoogleCloudRetailV2alphaLocalInventory::is_place_id_Valid() const{
    return m_place_id_isValid;
}

OAIGoogleCloudRetailV2alphaPriceInfo OAIGoogleCloudRetailV2alphaLocalInventory::getPriceInfo() const {
    return m_price_info;
}
void OAIGoogleCloudRetailV2alphaLocalInventory::setPriceInfo(const OAIGoogleCloudRetailV2alphaPriceInfo &price_info) {
    m_price_info = price_info;
    m_price_info_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaLocalInventory::is_price_info_Set() const{
    return m_price_info_isSet;
}

bool OAIGoogleCloudRetailV2alphaLocalInventory::is_price_info_Valid() const{
    return m_price_info_isValid;
}

bool OAIGoogleCloudRetailV2alphaLocalInventory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2alphaLocalInventory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
