/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2alphaUserEventInlineSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2alphaUserEventInlineSource::OAIGoogleCloudRetailV2alphaUserEventInlineSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2alphaUserEventInlineSource::OAIGoogleCloudRetailV2alphaUserEventInlineSource() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2alphaUserEventInlineSource::~OAIGoogleCloudRetailV2alphaUserEventInlineSource() {}

void OAIGoogleCloudRetailV2alphaUserEventInlineSource::initializeModel() {

    m_user_events_isSet = false;
    m_user_events_isValid = false;
}

void OAIGoogleCloudRetailV2alphaUserEventInlineSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2alphaUserEventInlineSource::fromJsonObject(QJsonObject json) {

    m_user_events_isValid = ::OpenAPI::fromJsonValue(m_user_events, json[QString("userEvents")]);
    m_user_events_isSet = !json[QString("userEvents")].isNull() && m_user_events_isValid;
}

QString OAIGoogleCloudRetailV2alphaUserEventInlineSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2alphaUserEventInlineSource::asJsonObject() const {
    QJsonObject obj;
    if (m_user_events.size() > 0) {
        obj.insert(QString("userEvents"), ::OpenAPI::toJsonValue(m_user_events));
    }
    return obj;
}

QList<OAIGoogleCloudRetailV2alphaUserEvent> OAIGoogleCloudRetailV2alphaUserEventInlineSource::getUserEvents() const {
    return m_user_events;
}
void OAIGoogleCloudRetailV2alphaUserEventInlineSource::setUserEvents(const QList<OAIGoogleCloudRetailV2alphaUserEvent> &user_events) {
    m_user_events = user_events;
    m_user_events_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEventInlineSource::is_user_events_Set() const{
    return m_user_events_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEventInlineSource::is_user_events_Valid() const{
    return m_user_events_isValid;
}

bool OAIGoogleCloudRetailV2alphaUserEventInlineSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2alphaUserEventInlineSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
