/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaModelServingConfigList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaModelServingConfigList::OAIGoogleCloudRetailV2betaModelServingConfigList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaModelServingConfigList::OAIGoogleCloudRetailV2betaModelServingConfigList() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaModelServingConfigList::~OAIGoogleCloudRetailV2betaModelServingConfigList() {}

void OAIGoogleCloudRetailV2betaModelServingConfigList::initializeModel() {

    m_serving_config_ids_isSet = false;
    m_serving_config_ids_isValid = false;
}

void OAIGoogleCloudRetailV2betaModelServingConfigList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaModelServingConfigList::fromJsonObject(QJsonObject json) {

    m_serving_config_ids_isValid = ::OpenAPI::fromJsonValue(m_serving_config_ids, json[QString("servingConfigIds")]);
    m_serving_config_ids_isSet = !json[QString("servingConfigIds")].isNull() && m_serving_config_ids_isValid;
}

QString OAIGoogleCloudRetailV2betaModelServingConfigList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaModelServingConfigList::asJsonObject() const {
    QJsonObject obj;
    if (m_serving_config_ids.size() > 0) {
        obj.insert(QString("servingConfigIds"), ::OpenAPI::toJsonValue(m_serving_config_ids));
    }
    return obj;
}

QList<QString> OAIGoogleCloudRetailV2betaModelServingConfigList::getServingConfigIds() const {
    return m_serving_config_ids;
}
void OAIGoogleCloudRetailV2betaModelServingConfigList::setServingConfigIds(const QList<QString> &serving_config_ids) {
    m_serving_config_ids = serving_config_ids;
    m_serving_config_ids_isSet = true;
}

bool OAIGoogleCloudRetailV2betaModelServingConfigList::is_serving_config_ids_Set() const{
    return m_serving_config_ids_isSet;
}

bool OAIGoogleCloudRetailV2betaModelServingConfigList::is_serving_config_ids_Valid() const{
    return m_serving_config_ids_isValid;
}

bool OAIGoogleCloudRetailV2betaModelServingConfigList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_serving_config_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaModelServingConfigList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
