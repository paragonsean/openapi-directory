/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2alphaRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2alphaRule::OAIGoogleCloudRetailV2alphaRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2alphaRule::OAIGoogleCloudRetailV2alphaRule() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2alphaRule::~OAIGoogleCloudRetailV2alphaRule() {}

void OAIGoogleCloudRetailV2alphaRule::initializeModel() {

    m_boost_action_isSet = false;
    m_boost_action_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_do_not_associate_action_isSet = false;
    m_do_not_associate_action_isValid = false;

    m_filter_action_isSet = false;
    m_filter_action_isValid = false;

    m_force_return_facet_action_isSet = false;
    m_force_return_facet_action_isValid = false;

    m_ignore_action_isSet = false;
    m_ignore_action_isValid = false;

    m_oneway_synonyms_action_isSet = false;
    m_oneway_synonyms_action_isValid = false;

    m_redirect_action_isSet = false;
    m_redirect_action_isValid = false;

    m_remove_facet_action_isSet = false;
    m_remove_facet_action_isValid = false;

    m_replacement_action_isSet = false;
    m_replacement_action_isValid = false;

    m_twoway_synonyms_action_isSet = false;
    m_twoway_synonyms_action_isValid = false;
}

void OAIGoogleCloudRetailV2alphaRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2alphaRule::fromJsonObject(QJsonObject json) {

    m_boost_action_isValid = ::OpenAPI::fromJsonValue(m_boost_action, json[QString("boostAction")]);
    m_boost_action_isSet = !json[QString("boostAction")].isNull() && m_boost_action_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_do_not_associate_action_isValid = ::OpenAPI::fromJsonValue(m_do_not_associate_action, json[QString("doNotAssociateAction")]);
    m_do_not_associate_action_isSet = !json[QString("doNotAssociateAction")].isNull() && m_do_not_associate_action_isValid;

    m_filter_action_isValid = ::OpenAPI::fromJsonValue(m_filter_action, json[QString("filterAction")]);
    m_filter_action_isSet = !json[QString("filterAction")].isNull() && m_filter_action_isValid;

    m_force_return_facet_action_isValid = ::OpenAPI::fromJsonValue(m_force_return_facet_action, json[QString("forceReturnFacetAction")]);
    m_force_return_facet_action_isSet = !json[QString("forceReturnFacetAction")].isNull() && m_force_return_facet_action_isValid;

    m_ignore_action_isValid = ::OpenAPI::fromJsonValue(m_ignore_action, json[QString("ignoreAction")]);
    m_ignore_action_isSet = !json[QString("ignoreAction")].isNull() && m_ignore_action_isValid;

    m_oneway_synonyms_action_isValid = ::OpenAPI::fromJsonValue(m_oneway_synonyms_action, json[QString("onewaySynonymsAction")]);
    m_oneway_synonyms_action_isSet = !json[QString("onewaySynonymsAction")].isNull() && m_oneway_synonyms_action_isValid;

    m_redirect_action_isValid = ::OpenAPI::fromJsonValue(m_redirect_action, json[QString("redirectAction")]);
    m_redirect_action_isSet = !json[QString("redirectAction")].isNull() && m_redirect_action_isValid;

    m_remove_facet_action_isValid = ::OpenAPI::fromJsonValue(m_remove_facet_action, json[QString("removeFacetAction")]);
    m_remove_facet_action_isSet = !json[QString("removeFacetAction")].isNull() && m_remove_facet_action_isValid;

    m_replacement_action_isValid = ::OpenAPI::fromJsonValue(m_replacement_action, json[QString("replacementAction")]);
    m_replacement_action_isSet = !json[QString("replacementAction")].isNull() && m_replacement_action_isValid;

    m_twoway_synonyms_action_isValid = ::OpenAPI::fromJsonValue(m_twoway_synonyms_action, json[QString("twowaySynonymsAction")]);
    m_twoway_synonyms_action_isSet = !json[QString("twowaySynonymsAction")].isNull() && m_twoway_synonyms_action_isValid;
}

QString OAIGoogleCloudRetailV2alphaRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2alphaRule::asJsonObject() const {
    QJsonObject obj;
    if (m_boost_action.isSet()) {
        obj.insert(QString("boostAction"), ::OpenAPI::toJsonValue(m_boost_action));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_do_not_associate_action.isSet()) {
        obj.insert(QString("doNotAssociateAction"), ::OpenAPI::toJsonValue(m_do_not_associate_action));
    }
    if (m_filter_action.isSet()) {
        obj.insert(QString("filterAction"), ::OpenAPI::toJsonValue(m_filter_action));
    }
    if (m_force_return_facet_action.isSet()) {
        obj.insert(QString("forceReturnFacetAction"), ::OpenAPI::toJsonValue(m_force_return_facet_action));
    }
    if (m_ignore_action.isSet()) {
        obj.insert(QString("ignoreAction"), ::OpenAPI::toJsonValue(m_ignore_action));
    }
    if (m_oneway_synonyms_action.isSet()) {
        obj.insert(QString("onewaySynonymsAction"), ::OpenAPI::toJsonValue(m_oneway_synonyms_action));
    }
    if (m_redirect_action.isSet()) {
        obj.insert(QString("redirectAction"), ::OpenAPI::toJsonValue(m_redirect_action));
    }
    if (m_remove_facet_action.isSet()) {
        obj.insert(QString("removeFacetAction"), ::OpenAPI::toJsonValue(m_remove_facet_action));
    }
    if (m_replacement_action.isSet()) {
        obj.insert(QString("replacementAction"), ::OpenAPI::toJsonValue(m_replacement_action));
    }
    if (m_twoway_synonyms_action.isSet()) {
        obj.insert(QString("twowaySynonymsAction"), ::OpenAPI::toJsonValue(m_twoway_synonyms_action));
    }
    return obj;
}

OAIGoogleCloudRetailV2alphaRuleBoostAction OAIGoogleCloudRetailV2alphaRule::getBoostAction() const {
    return m_boost_action;
}
void OAIGoogleCloudRetailV2alphaRule::setBoostAction(const OAIGoogleCloudRetailV2alphaRuleBoostAction &boost_action) {
    m_boost_action = boost_action;
    m_boost_action_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaRule::is_boost_action_Set() const{
    return m_boost_action_isSet;
}

bool OAIGoogleCloudRetailV2alphaRule::is_boost_action_Valid() const{
    return m_boost_action_isValid;
}

OAIGoogleCloudRetailV2alphaCondition OAIGoogleCloudRetailV2alphaRule::getCondition() const {
    return m_condition;
}
void OAIGoogleCloudRetailV2alphaRule::setCondition(const OAIGoogleCloudRetailV2alphaCondition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaRule::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIGoogleCloudRetailV2alphaRule::is_condition_Valid() const{
    return m_condition_isValid;
}

OAIGoogleCloudRetailV2alphaRuleDoNotAssociateAction OAIGoogleCloudRetailV2alphaRule::getDoNotAssociateAction() const {
    return m_do_not_associate_action;
}
void OAIGoogleCloudRetailV2alphaRule::setDoNotAssociateAction(const OAIGoogleCloudRetailV2alphaRuleDoNotAssociateAction &do_not_associate_action) {
    m_do_not_associate_action = do_not_associate_action;
    m_do_not_associate_action_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaRule::is_do_not_associate_action_Set() const{
    return m_do_not_associate_action_isSet;
}

bool OAIGoogleCloudRetailV2alphaRule::is_do_not_associate_action_Valid() const{
    return m_do_not_associate_action_isValid;
}

OAIGoogleCloudRetailV2alphaRuleFilterAction OAIGoogleCloudRetailV2alphaRule::getFilterAction() const {
    return m_filter_action;
}
void OAIGoogleCloudRetailV2alphaRule::setFilterAction(const OAIGoogleCloudRetailV2alphaRuleFilterAction &filter_action) {
    m_filter_action = filter_action;
    m_filter_action_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaRule::is_filter_action_Set() const{
    return m_filter_action_isSet;
}

bool OAIGoogleCloudRetailV2alphaRule::is_filter_action_Valid() const{
    return m_filter_action_isValid;
}

OAIGoogleCloudRetailV2alphaRuleForceReturnFacetAction OAIGoogleCloudRetailV2alphaRule::getForceReturnFacetAction() const {
    return m_force_return_facet_action;
}
void OAIGoogleCloudRetailV2alphaRule::setForceReturnFacetAction(const OAIGoogleCloudRetailV2alphaRuleForceReturnFacetAction &force_return_facet_action) {
    m_force_return_facet_action = force_return_facet_action;
    m_force_return_facet_action_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaRule::is_force_return_facet_action_Set() const{
    return m_force_return_facet_action_isSet;
}

bool OAIGoogleCloudRetailV2alphaRule::is_force_return_facet_action_Valid() const{
    return m_force_return_facet_action_isValid;
}

OAIGoogleCloudRetailV2alphaRuleIgnoreAction OAIGoogleCloudRetailV2alphaRule::getIgnoreAction() const {
    return m_ignore_action;
}
void OAIGoogleCloudRetailV2alphaRule::setIgnoreAction(const OAIGoogleCloudRetailV2alphaRuleIgnoreAction &ignore_action) {
    m_ignore_action = ignore_action;
    m_ignore_action_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaRule::is_ignore_action_Set() const{
    return m_ignore_action_isSet;
}

bool OAIGoogleCloudRetailV2alphaRule::is_ignore_action_Valid() const{
    return m_ignore_action_isValid;
}

OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction OAIGoogleCloudRetailV2alphaRule::getOnewaySynonymsAction() const {
    return m_oneway_synonyms_action;
}
void OAIGoogleCloudRetailV2alphaRule::setOnewaySynonymsAction(const OAIGoogleCloudRetailV2alphaRuleOnewaySynonymsAction &oneway_synonyms_action) {
    m_oneway_synonyms_action = oneway_synonyms_action;
    m_oneway_synonyms_action_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaRule::is_oneway_synonyms_action_Set() const{
    return m_oneway_synonyms_action_isSet;
}

bool OAIGoogleCloudRetailV2alphaRule::is_oneway_synonyms_action_Valid() const{
    return m_oneway_synonyms_action_isValid;
}

OAIGoogleCloudRetailV2alphaRuleRedirectAction OAIGoogleCloudRetailV2alphaRule::getRedirectAction() const {
    return m_redirect_action;
}
void OAIGoogleCloudRetailV2alphaRule::setRedirectAction(const OAIGoogleCloudRetailV2alphaRuleRedirectAction &redirect_action) {
    m_redirect_action = redirect_action;
    m_redirect_action_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaRule::is_redirect_action_Set() const{
    return m_redirect_action_isSet;
}

bool OAIGoogleCloudRetailV2alphaRule::is_redirect_action_Valid() const{
    return m_redirect_action_isValid;
}

OAIGoogleCloudRetailV2alphaRuleRemoveFacetAction OAIGoogleCloudRetailV2alphaRule::getRemoveFacetAction() const {
    return m_remove_facet_action;
}
void OAIGoogleCloudRetailV2alphaRule::setRemoveFacetAction(const OAIGoogleCloudRetailV2alphaRuleRemoveFacetAction &remove_facet_action) {
    m_remove_facet_action = remove_facet_action;
    m_remove_facet_action_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaRule::is_remove_facet_action_Set() const{
    return m_remove_facet_action_isSet;
}

bool OAIGoogleCloudRetailV2alphaRule::is_remove_facet_action_Valid() const{
    return m_remove_facet_action_isValid;
}

OAIGoogleCloudRetailV2alphaRuleReplacementAction OAIGoogleCloudRetailV2alphaRule::getReplacementAction() const {
    return m_replacement_action;
}
void OAIGoogleCloudRetailV2alphaRule::setReplacementAction(const OAIGoogleCloudRetailV2alphaRuleReplacementAction &replacement_action) {
    m_replacement_action = replacement_action;
    m_replacement_action_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaRule::is_replacement_action_Set() const{
    return m_replacement_action_isSet;
}

bool OAIGoogleCloudRetailV2alphaRule::is_replacement_action_Valid() const{
    return m_replacement_action_isValid;
}

OAIGoogleCloudRetailV2alphaRuleTwowaySynonymsAction OAIGoogleCloudRetailV2alphaRule::getTwowaySynonymsAction() const {
    return m_twoway_synonyms_action;
}
void OAIGoogleCloudRetailV2alphaRule::setTwowaySynonymsAction(const OAIGoogleCloudRetailV2alphaRuleTwowaySynonymsAction &twoway_synonyms_action) {
    m_twoway_synonyms_action = twoway_synonyms_action;
    m_twoway_synonyms_action_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaRule::is_twoway_synonyms_action_Set() const{
    return m_twoway_synonyms_action_isSet;
}

bool OAIGoogleCloudRetailV2alphaRule::is_twoway_synonyms_action_Valid() const{
    return m_twoway_synonyms_action_isValid;
}

bool OAIGoogleCloudRetailV2alphaRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boost_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_associate_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_return_facet_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oneway_synonyms_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_facet_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replacement_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_twoway_synonyms_action.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2alphaRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
