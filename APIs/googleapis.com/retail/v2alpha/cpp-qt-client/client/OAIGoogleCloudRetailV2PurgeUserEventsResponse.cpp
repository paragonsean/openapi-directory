/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2PurgeUserEventsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2PurgeUserEventsResponse::OAIGoogleCloudRetailV2PurgeUserEventsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2PurgeUserEventsResponse::OAIGoogleCloudRetailV2PurgeUserEventsResponse() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2PurgeUserEventsResponse::~OAIGoogleCloudRetailV2PurgeUserEventsResponse() {}

void OAIGoogleCloudRetailV2PurgeUserEventsResponse::initializeModel() {

    m_purged_events_count_isSet = false;
    m_purged_events_count_isValid = false;
}

void OAIGoogleCloudRetailV2PurgeUserEventsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2PurgeUserEventsResponse::fromJsonObject(QJsonObject json) {

    m_purged_events_count_isValid = ::OpenAPI::fromJsonValue(m_purged_events_count, json[QString("purgedEventsCount")]);
    m_purged_events_count_isSet = !json[QString("purgedEventsCount")].isNull() && m_purged_events_count_isValid;
}

QString OAIGoogleCloudRetailV2PurgeUserEventsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2PurgeUserEventsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_purged_events_count_isSet) {
        obj.insert(QString("purgedEventsCount"), ::OpenAPI::toJsonValue(m_purged_events_count));
    }
    return obj;
}

QString OAIGoogleCloudRetailV2PurgeUserEventsResponse::getPurgedEventsCount() const {
    return m_purged_events_count;
}
void OAIGoogleCloudRetailV2PurgeUserEventsResponse::setPurgedEventsCount(const QString &purged_events_count) {
    m_purged_events_count = purged_events_count;
    m_purged_events_count_isSet = true;
}

bool OAIGoogleCloudRetailV2PurgeUserEventsResponse::is_purged_events_count_Set() const{
    return m_purged_events_count_isSet;
}

bool OAIGoogleCloudRetailV2PurgeUserEventsResponse::is_purged_events_count_Valid() const{
    return m_purged_events_count_isValid;
}

bool OAIGoogleCloudRetailV2PurgeUserEventsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_purged_events_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2PurgeUserEventsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
