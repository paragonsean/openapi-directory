/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2alphaUserEventInputConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2alphaUserEventInputConfig::OAIGoogleCloudRetailV2alphaUserEventInputConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2alphaUserEventInputConfig::OAIGoogleCloudRetailV2alphaUserEventInputConfig() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2alphaUserEventInputConfig::~OAIGoogleCloudRetailV2alphaUserEventInputConfig() {}

void OAIGoogleCloudRetailV2alphaUserEventInputConfig::initializeModel() {

    m_big_query_source_isSet = false;
    m_big_query_source_isValid = false;

    m_gcs_source_isSet = false;
    m_gcs_source_isValid = false;

    m_user_event_inline_source_isSet = false;
    m_user_event_inline_source_isValid = false;
}

void OAIGoogleCloudRetailV2alphaUserEventInputConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2alphaUserEventInputConfig::fromJsonObject(QJsonObject json) {

    m_big_query_source_isValid = ::OpenAPI::fromJsonValue(m_big_query_source, json[QString("bigQuerySource")]);
    m_big_query_source_isSet = !json[QString("bigQuerySource")].isNull() && m_big_query_source_isValid;

    m_gcs_source_isValid = ::OpenAPI::fromJsonValue(m_gcs_source, json[QString("gcsSource")]);
    m_gcs_source_isSet = !json[QString("gcsSource")].isNull() && m_gcs_source_isValid;

    m_user_event_inline_source_isValid = ::OpenAPI::fromJsonValue(m_user_event_inline_source, json[QString("userEventInlineSource")]);
    m_user_event_inline_source_isSet = !json[QString("userEventInlineSource")].isNull() && m_user_event_inline_source_isValid;
}

QString OAIGoogleCloudRetailV2alphaUserEventInputConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2alphaUserEventInputConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_big_query_source.isSet()) {
        obj.insert(QString("bigQuerySource"), ::OpenAPI::toJsonValue(m_big_query_source));
    }
    if (m_gcs_source.isSet()) {
        obj.insert(QString("gcsSource"), ::OpenAPI::toJsonValue(m_gcs_source));
    }
    if (m_user_event_inline_source.isSet()) {
        obj.insert(QString("userEventInlineSource"), ::OpenAPI::toJsonValue(m_user_event_inline_source));
    }
    return obj;
}

OAIGoogleCloudRetailV2alphaBigQuerySource OAIGoogleCloudRetailV2alphaUserEventInputConfig::getBigQuerySource() const {
    return m_big_query_source;
}
void OAIGoogleCloudRetailV2alphaUserEventInputConfig::setBigQuerySource(const OAIGoogleCloudRetailV2alphaBigQuerySource &big_query_source) {
    m_big_query_source = big_query_source;
    m_big_query_source_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEventInputConfig::is_big_query_source_Set() const{
    return m_big_query_source_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEventInputConfig::is_big_query_source_Valid() const{
    return m_big_query_source_isValid;
}

OAIGoogleCloudRetailV2alphaGcsSource OAIGoogleCloudRetailV2alphaUserEventInputConfig::getGcsSource() const {
    return m_gcs_source;
}
void OAIGoogleCloudRetailV2alphaUserEventInputConfig::setGcsSource(const OAIGoogleCloudRetailV2alphaGcsSource &gcs_source) {
    m_gcs_source = gcs_source;
    m_gcs_source_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEventInputConfig::is_gcs_source_Set() const{
    return m_gcs_source_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEventInputConfig::is_gcs_source_Valid() const{
    return m_gcs_source_isValid;
}

OAIGoogleCloudRetailV2alphaUserEventInlineSource OAIGoogleCloudRetailV2alphaUserEventInputConfig::getUserEventInlineSource() const {
    return m_user_event_inline_source;
}
void OAIGoogleCloudRetailV2alphaUserEventInputConfig::setUserEventInlineSource(const OAIGoogleCloudRetailV2alphaUserEventInlineSource &user_event_inline_source) {
    m_user_event_inline_source = user_event_inline_source;
    m_user_event_inline_source_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEventInputConfig::is_user_event_inline_source_Set() const{
    return m_user_event_inline_source_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEventInputConfig::is_user_event_inline_source_Valid() const{
    return m_user_event_inline_source_isValid;
}

bool OAIGoogleCloudRetailV2alphaUserEventInputConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_big_query_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_event_inline_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2alphaUserEventInputConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
