/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaImportMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaImportMetadata::OAIGoogleCloudRetailV2betaImportMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaImportMetadata::OAIGoogleCloudRetailV2betaImportMetadata() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaImportMetadata::~OAIGoogleCloudRetailV2betaImportMetadata() {}

void OAIGoogleCloudRetailV2betaImportMetadata::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_failure_count_isSet = false;
    m_failure_count_isValid = false;

    m_notification_pubsub_topic_isSet = false;
    m_notification_pubsub_topic_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_success_count_isSet = false;
    m_success_count_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudRetailV2betaImportMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaImportMetadata::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_failure_count_isValid = ::OpenAPI::fromJsonValue(m_failure_count, json[QString("failureCount")]);
    m_failure_count_isSet = !json[QString("failureCount")].isNull() && m_failure_count_isValid;

    m_notification_pubsub_topic_isValid = ::OpenAPI::fromJsonValue(m_notification_pubsub_topic, json[QString("notificationPubsubTopic")]);
    m_notification_pubsub_topic_isSet = !json[QString("notificationPubsubTopic")].isNull() && m_notification_pubsub_topic_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_success_count_isValid = ::OpenAPI::fromJsonValue(m_success_count, json[QString("successCount")]);
    m_success_count_isSet = !json[QString("successCount")].isNull() && m_success_count_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudRetailV2betaImportMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaImportMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_failure_count_isSet) {
        obj.insert(QString("failureCount"), ::OpenAPI::toJsonValue(m_failure_count));
    }
    if (m_notification_pubsub_topic_isSet) {
        obj.insert(QString("notificationPubsubTopic"), ::OpenAPI::toJsonValue(m_notification_pubsub_topic));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_success_count_isSet) {
        obj.insert(QString("successCount"), ::OpenAPI::toJsonValue(m_success_count));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIGoogleCloudRetailV2betaImportMetadata::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudRetailV2betaImportMetadata::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudRetailV2betaImportMetadata::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudRetailV2betaImportMetadata::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudRetailV2betaImportMetadata::getFailureCount() const {
    return m_failure_count;
}
void OAIGoogleCloudRetailV2betaImportMetadata::setFailureCount(const QString &failure_count) {
    m_failure_count = failure_count;
    m_failure_count_isSet = true;
}

bool OAIGoogleCloudRetailV2betaImportMetadata::is_failure_count_Set() const{
    return m_failure_count_isSet;
}

bool OAIGoogleCloudRetailV2betaImportMetadata::is_failure_count_Valid() const{
    return m_failure_count_isValid;
}

QString OAIGoogleCloudRetailV2betaImportMetadata::getNotificationPubsubTopic() const {
    return m_notification_pubsub_topic;
}
void OAIGoogleCloudRetailV2betaImportMetadata::setNotificationPubsubTopic(const QString &notification_pubsub_topic) {
    m_notification_pubsub_topic = notification_pubsub_topic;
    m_notification_pubsub_topic_isSet = true;
}

bool OAIGoogleCloudRetailV2betaImportMetadata::is_notification_pubsub_topic_Set() const{
    return m_notification_pubsub_topic_isSet;
}

bool OAIGoogleCloudRetailV2betaImportMetadata::is_notification_pubsub_topic_Valid() const{
    return m_notification_pubsub_topic_isValid;
}

QString OAIGoogleCloudRetailV2betaImportMetadata::getRequestId() const {
    return m_request_id;
}
void OAIGoogleCloudRetailV2betaImportMetadata::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIGoogleCloudRetailV2betaImportMetadata::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIGoogleCloudRetailV2betaImportMetadata::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIGoogleCloudRetailV2betaImportMetadata::getSuccessCount() const {
    return m_success_count;
}
void OAIGoogleCloudRetailV2betaImportMetadata::setSuccessCount(const QString &success_count) {
    m_success_count = success_count;
    m_success_count_isSet = true;
}

bool OAIGoogleCloudRetailV2betaImportMetadata::is_success_count_Set() const{
    return m_success_count_isSet;
}

bool OAIGoogleCloudRetailV2betaImportMetadata::is_success_count_Valid() const{
    return m_success_count_isValid;
}

QString OAIGoogleCloudRetailV2betaImportMetadata::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudRetailV2betaImportMetadata::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudRetailV2betaImportMetadata::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudRetailV2betaImportMetadata::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudRetailV2betaImportMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_pubsub_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaImportMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
