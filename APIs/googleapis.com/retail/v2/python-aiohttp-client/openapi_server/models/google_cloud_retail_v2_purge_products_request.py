# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRetailV2PurgeProductsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: str=None, force: bool=None):
        """GoogleCloudRetailV2PurgeProductsRequest - a model defined in OpenAPI

        :param filter: The filter of this GoogleCloudRetailV2PurgeProductsRequest.
        :param force: The force of this GoogleCloudRetailV2PurgeProductsRequest.
        """
        self.openapi_types = {
            'filter': str,
            'force': bool
        }

        self.attribute_map = {
            'filter': 'filter',
            'force': 'force'
        }

        self._filter = filter
        self._force = force

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2PurgeProductsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2PurgeProductsRequest of this GoogleCloudRetailV2PurgeProductsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this GoogleCloudRetailV2PurgeProductsRequest.

        Required. The filter string to specify the products to be deleted with a length limit of 5,000 characters. Empty string filter is not allowed. \"*\" implies delete all items in a branch. The eligible fields for filtering are: * `availability`: Double quoted Product.availability string. * `create_time` : in ISO 8601 \"zulu\" format. Supported syntax: * Comparators (\">\", \"<\", \">=\", \"<=\", \"=\"). Examples: * create_time <= \"2015-02-13T17:05:46Z\" * availability = \"IN_STOCK\" * Conjunctions (\"AND\") Examples: * create_time <= \"2015-02-13T17:05:46Z\" AND availability = \"PREORDER\" * Disjunctions (\"OR\") Examples: * create_time <= \"2015-02-13T17:05:46Z\" OR availability = \"IN_STOCK\" * Can support nested queries. Examples: * (create_time <= \"2015-02-13T17:05:46Z\" AND availability = \"PREORDER\") OR (create_time >= \"2015-02-14T13:03:32Z\" AND availability = \"IN_STOCK\") * Filter Limits: * Filter should not contain more than 6 conditions. * Max nesting depth should not exceed 2 levels. Examples queries: * Delete back order products created before a timestamp. create_time <= \"2015-02-13T17:05:46Z\" OR availability = \"BACKORDER\"

        :return: The filter of this GoogleCloudRetailV2PurgeProductsRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GoogleCloudRetailV2PurgeProductsRequest.

        Required. The filter string to specify the products to be deleted with a length limit of 5,000 characters. Empty string filter is not allowed. \"*\" implies delete all items in a branch. The eligible fields for filtering are: * `availability`: Double quoted Product.availability string. * `create_time` : in ISO 8601 \"zulu\" format. Supported syntax: * Comparators (\">\", \"<\", \">=\", \"<=\", \"=\"). Examples: * create_time <= \"2015-02-13T17:05:46Z\" * availability = \"IN_STOCK\" * Conjunctions (\"AND\") Examples: * create_time <= \"2015-02-13T17:05:46Z\" AND availability = \"PREORDER\" * Disjunctions (\"OR\") Examples: * create_time <= \"2015-02-13T17:05:46Z\" OR availability = \"IN_STOCK\" * Can support nested queries. Examples: * (create_time <= \"2015-02-13T17:05:46Z\" AND availability = \"PREORDER\") OR (create_time >= \"2015-02-14T13:03:32Z\" AND availability = \"IN_STOCK\") * Filter Limits: * Filter should not contain more than 6 conditions. * Max nesting depth should not exceed 2 levels. Examples queries: * Delete back order products created before a timestamp. create_time <= \"2015-02-13T17:05:46Z\" OR availability = \"BACKORDER\"

        :param filter: The filter of this GoogleCloudRetailV2PurgeProductsRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def force(self):
        """Gets the force of this GoogleCloudRetailV2PurgeProductsRequest.

        Actually perform the purge. If `force` is set to false, the method will return the expected purge count without deleting any products.

        :return: The force of this GoogleCloudRetailV2PurgeProductsRequest.
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this GoogleCloudRetailV2PurgeProductsRequest.

        Actually perform the purge. If `force` is set to false, the method will return the expected purge count without deleting any products.

        :param force: The force of this GoogleCloudRetailV2PurgeProductsRequest.
        :type force: bool
        """

        self._force = force
