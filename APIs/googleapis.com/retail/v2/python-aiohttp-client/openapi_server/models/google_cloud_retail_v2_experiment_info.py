# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_retail_v2_experiment_info_serving_config_experiment import GoogleCloudRetailV2ExperimentInfoServingConfigExperiment
from openapi_server import util


class GoogleCloudRetailV2ExperimentInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, experiment: str=None, serving_config_experiment: GoogleCloudRetailV2ExperimentInfoServingConfigExperiment=None):
        """GoogleCloudRetailV2ExperimentInfo - a model defined in OpenAPI

        :param experiment: The experiment of this GoogleCloudRetailV2ExperimentInfo.
        :param serving_config_experiment: The serving_config_experiment of this GoogleCloudRetailV2ExperimentInfo.
        """
        self.openapi_types = {
            'experiment': str,
            'serving_config_experiment': GoogleCloudRetailV2ExperimentInfoServingConfigExperiment
        }

        self.attribute_map = {
            'experiment': 'experiment',
            'serving_config_experiment': 'servingConfigExperiment'
        }

        self._experiment = experiment
        self._serving_config_experiment = serving_config_experiment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2ExperimentInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2ExperimentInfo of this GoogleCloudRetailV2ExperimentInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def experiment(self):
        """Gets the experiment of this GoogleCloudRetailV2ExperimentInfo.

        The fully qualified resource name of the experiment that provides the serving config under test, should an active experiment exist. For example: `projects/*/locations/global/catalogs/default_catalog/experiments/experiment_id`

        :return: The experiment of this GoogleCloudRetailV2ExperimentInfo.
        :rtype: str
        """
        return self._experiment

    @experiment.setter
    def experiment(self, experiment):
        """Sets the experiment of this GoogleCloudRetailV2ExperimentInfo.

        The fully qualified resource name of the experiment that provides the serving config under test, should an active experiment exist. For example: `projects/*/locations/global/catalogs/default_catalog/experiments/experiment_id`

        :param experiment: The experiment of this GoogleCloudRetailV2ExperimentInfo.
        :type experiment: str
        """

        self._experiment = experiment

    @property
    def serving_config_experiment(self):
        """Gets the serving_config_experiment of this GoogleCloudRetailV2ExperimentInfo.


        :return: The serving_config_experiment of this GoogleCloudRetailV2ExperimentInfo.
        :rtype: GoogleCloudRetailV2ExperimentInfoServingConfigExperiment
        """
        return self._serving_config_experiment

    @serving_config_experiment.setter
    def serving_config_experiment(self, serving_config_experiment):
        """Sets the serving_config_experiment of this GoogleCloudRetailV2ExperimentInfo.


        :param serving_config_experiment: The serving_config_experiment of this GoogleCloudRetailV2ExperimentInfo.
        :type serving_config_experiment: GoogleCloudRetailV2ExperimentInfoServingConfigExperiment
        """

        self._serving_config_experiment = serving_config_experiment
