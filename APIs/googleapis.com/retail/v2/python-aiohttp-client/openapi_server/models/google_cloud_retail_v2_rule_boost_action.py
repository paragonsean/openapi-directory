# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRetailV2RuleBoostAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boost: float=None, products_filter: str=None):
        """GoogleCloudRetailV2RuleBoostAction - a model defined in OpenAPI

        :param boost: The boost of this GoogleCloudRetailV2RuleBoostAction.
        :param products_filter: The products_filter of this GoogleCloudRetailV2RuleBoostAction.
        """
        self.openapi_types = {
            'boost': float,
            'products_filter': str
        }

        self.attribute_map = {
            'boost': 'boost',
            'products_filter': 'productsFilter'
        }

        self._boost = boost
        self._products_filter = products_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2RuleBoostAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2RuleBoostAction of this GoogleCloudRetailV2RuleBoostAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boost(self):
        """Gets the boost of this GoogleCloudRetailV2RuleBoostAction.

        Strength of the condition boost, which must be in [-1, 1]. Negative boost means demotion. Default is 0.0. Setting to 1.0 gives the item a big promotion. However, it does not necessarily mean that the boosted item will be the top result at all times, nor that other items will be excluded. Results could still be shown even when none of them matches the condition. And results that are significantly more relevant to the search query can still trump your heavily favored but irrelevant items. Setting to -1.0 gives the item a big demotion. However, results that are deeply relevant might still be shown. The item will have an upstream battle to get a fairly high ranking, but it is not blocked out completely. Setting to 0.0 means no boost applied. The boosting condition is ignored.

        :return: The boost of this GoogleCloudRetailV2RuleBoostAction.
        :rtype: float
        """
        return self._boost

    @boost.setter
    def boost(self, boost):
        """Sets the boost of this GoogleCloudRetailV2RuleBoostAction.

        Strength of the condition boost, which must be in [-1, 1]. Negative boost means demotion. Default is 0.0. Setting to 1.0 gives the item a big promotion. However, it does not necessarily mean that the boosted item will be the top result at all times, nor that other items will be excluded. Results could still be shown even when none of them matches the condition. And results that are significantly more relevant to the search query can still trump your heavily favored but irrelevant items. Setting to -1.0 gives the item a big demotion. However, results that are deeply relevant might still be shown. The item will have an upstream battle to get a fairly high ranking, but it is not blocked out completely. Setting to 0.0 means no boost applied. The boosting condition is ignored.

        :param boost: The boost of this GoogleCloudRetailV2RuleBoostAction.
        :type boost: float
        """

        self._boost = boost

    @property
    def products_filter(self):
        """Gets the products_filter of this GoogleCloudRetailV2RuleBoostAction.

        The filter can have a max size of 5000 characters. An expression which specifies which products to apply an action to. The syntax and supported fields are the same as a filter expression. See SearchRequest.filter for detail syntax and limitations. Examples: * To boost products with product ID \"product_1\" or \"product_2\", and color \"Red\" or \"Blue\": *(id: ANY(\"product_1\", \"product_2\")) * *AND * *(colorFamilies: ANY(\"Red\", \"Blue\")) *

        :return: The products_filter of this GoogleCloudRetailV2RuleBoostAction.
        :rtype: str
        """
        return self._products_filter

    @products_filter.setter
    def products_filter(self, products_filter):
        """Sets the products_filter of this GoogleCloudRetailV2RuleBoostAction.

        The filter can have a max size of 5000 characters. An expression which specifies which products to apply an action to. The syntax and supported fields are the same as a filter expression. See SearchRequest.filter for detail syntax and limitations. Examples: * To boost products with product ID \"product_1\" or \"product_2\", and color \"Red\" or \"Blue\": *(id: ANY(\"product_1\", \"product_2\")) * *AND * *(colorFamilies: ANY(\"Red\", \"Blue\")) *

        :param products_filter: The products_filter of this GoogleCloudRetailV2RuleBoostAction.
        :type products_filter: str
        """

        self._products_filter = products_filter
