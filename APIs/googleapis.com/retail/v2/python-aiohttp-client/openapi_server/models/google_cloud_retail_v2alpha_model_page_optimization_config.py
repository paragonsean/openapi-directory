# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_retail_v2alpha_model_page_optimization_config_panel import GoogleCloudRetailV2alphaModelPageOptimizationConfigPanel
from openapi_server import util


class GoogleCloudRetailV2alphaModelPageOptimizationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, page_optimization_event_type: str=None, panels: List[GoogleCloudRetailV2alphaModelPageOptimizationConfigPanel]=None, restriction: str=None):
        """GoogleCloudRetailV2alphaModelPageOptimizationConfig - a model defined in OpenAPI

        :param page_optimization_event_type: The page_optimization_event_type of this GoogleCloudRetailV2alphaModelPageOptimizationConfig.
        :param panels: The panels of this GoogleCloudRetailV2alphaModelPageOptimizationConfig.
        :param restriction: The restriction of this GoogleCloudRetailV2alphaModelPageOptimizationConfig.
        """
        self.openapi_types = {
            'page_optimization_event_type': str,
            'panels': List[GoogleCloudRetailV2alphaModelPageOptimizationConfigPanel],
            'restriction': str
        }

        self.attribute_map = {
            'page_optimization_event_type': 'pageOptimizationEventType',
            'panels': 'panels',
            'restriction': 'restriction'
        }

        self._page_optimization_event_type = page_optimization_event_type
        self._panels = panels
        self._restriction = restriction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2alphaModelPageOptimizationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2alphaModelPageOptimizationConfig of this GoogleCloudRetailV2alphaModelPageOptimizationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def page_optimization_event_type(self):
        """Gets the page_optimization_event_type of this GoogleCloudRetailV2alphaModelPageOptimizationConfig.

        Required. The type of UserEvent this page optimization is shown for. Each page has an associated event type - this will be the corresponding event type for the page that the page optimization model is used on. Supported types: * `add-to-cart`: Products being added to cart. * `detail-page-view`: Products detail page viewed. * `home-page-view`: Homepage viewed * `category-page-view`: Homepage viewed * `shopping-cart-page-view`: User viewing a shopping cart. `home-page-view` only allows models with type `recommended-for-you`. All other page_optimization_event_type allow all Model.types.

        :return: The page_optimization_event_type of this GoogleCloudRetailV2alphaModelPageOptimizationConfig.
        :rtype: str
        """
        return self._page_optimization_event_type

    @page_optimization_event_type.setter
    def page_optimization_event_type(self, page_optimization_event_type):
        """Sets the page_optimization_event_type of this GoogleCloudRetailV2alphaModelPageOptimizationConfig.

        Required. The type of UserEvent this page optimization is shown for. Each page has an associated event type - this will be the corresponding event type for the page that the page optimization model is used on. Supported types: * `add-to-cart`: Products being added to cart. * `detail-page-view`: Products detail page viewed. * `home-page-view`: Homepage viewed * `category-page-view`: Homepage viewed * `shopping-cart-page-view`: User viewing a shopping cart. `home-page-view` only allows models with type `recommended-for-you`. All other page_optimization_event_type allow all Model.types.

        :param page_optimization_event_type: The page_optimization_event_type of this GoogleCloudRetailV2alphaModelPageOptimizationConfig.
        :type page_optimization_event_type: str
        """

        self._page_optimization_event_type = page_optimization_event_type

    @property
    def panels(self):
        """Gets the panels of this GoogleCloudRetailV2alphaModelPageOptimizationConfig.

        Required. A list of panel configurations. Limit = 5.

        :return: The panels of this GoogleCloudRetailV2alphaModelPageOptimizationConfig.
        :rtype: List[GoogleCloudRetailV2alphaModelPageOptimizationConfigPanel]
        """
        return self._panels

    @panels.setter
    def panels(self, panels):
        """Sets the panels of this GoogleCloudRetailV2alphaModelPageOptimizationConfig.

        Required. A list of panel configurations. Limit = 5.

        :param panels: The panels of this GoogleCloudRetailV2alphaModelPageOptimizationConfig.
        :type panels: List[GoogleCloudRetailV2alphaModelPageOptimizationConfigPanel]
        """

        self._panels = panels

    @property
    def restriction(self):
        """Gets the restriction of this GoogleCloudRetailV2alphaModelPageOptimizationConfig.

        Optional. How to restrict results across panels e.g. can the same ServingConfig be shown on multiple panels at once. If unspecified, default to `UNIQUE_MODEL_RESTRICTION`.

        :return: The restriction of this GoogleCloudRetailV2alphaModelPageOptimizationConfig.
        :rtype: str
        """
        return self._restriction

    @restriction.setter
    def restriction(self, restriction):
        """Sets the restriction of this GoogleCloudRetailV2alphaModelPageOptimizationConfig.

        Optional. How to restrict results across panels e.g. can the same ServingConfig be shown on multiple panels at once. If unspecified, default to `UNIQUE_MODEL_RESTRICTION`.

        :param restriction: The restriction of this GoogleCloudRetailV2alphaModelPageOptimizationConfig.
        :type restriction: str
        """
        allowed_values = ["RESTRICTION_UNSPECIFIED", "NO_RESTRICTION", "UNIQUE_SERVING_CONFIG_RESTRICTION", "UNIQUE_MODEL_RESTRICTION", "UNIQUE_MODEL_TYPE_RESTRICTION"]  # noqa: E501
        if restriction not in allowed_values:
            raise ValueError(
                "Invalid value for `restriction` ({0}), must be one of {1}"
                .format(restriction, allowed_values)
            )

        self._restriction = restriction
