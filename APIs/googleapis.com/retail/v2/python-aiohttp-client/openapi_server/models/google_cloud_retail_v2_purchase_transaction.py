# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRetailV2PurchaseTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: float=None, currency_code: str=None, id: str=None, revenue: float=None, tax: float=None):
        """GoogleCloudRetailV2PurchaseTransaction - a model defined in OpenAPI

        :param cost: The cost of this GoogleCloudRetailV2PurchaseTransaction.
        :param currency_code: The currency_code of this GoogleCloudRetailV2PurchaseTransaction.
        :param id: The id of this GoogleCloudRetailV2PurchaseTransaction.
        :param revenue: The revenue of this GoogleCloudRetailV2PurchaseTransaction.
        :param tax: The tax of this GoogleCloudRetailV2PurchaseTransaction.
        """
        self.openapi_types = {
            'cost': float,
            'currency_code': str,
            'id': str,
            'revenue': float,
            'tax': float
        }

        self.attribute_map = {
            'cost': 'cost',
            'currency_code': 'currencyCode',
            'id': 'id',
            'revenue': 'revenue',
            'tax': 'tax'
        }

        self._cost = cost
        self._currency_code = currency_code
        self._id = id
        self._revenue = revenue
        self._tax = tax

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2PurchaseTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2PurchaseTransaction of this GoogleCloudRetailV2PurchaseTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this GoogleCloudRetailV2PurchaseTransaction.

        All the costs associated with the products. These can be manufacturing costs, shipping expenses not borne by the end user, or any other costs, such that: * Profit = revenue - tax - cost

        :return: The cost of this GoogleCloudRetailV2PurchaseTransaction.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this GoogleCloudRetailV2PurchaseTransaction.

        All the costs associated with the products. These can be manufacturing costs, shipping expenses not borne by the end user, or any other costs, such that: * Profit = revenue - tax - cost

        :param cost: The cost of this GoogleCloudRetailV2PurchaseTransaction.
        :type cost: float
        """

        self._cost = cost

    @property
    def currency_code(self):
        """Gets the currency_code of this GoogleCloudRetailV2PurchaseTransaction.

        Required. Currency code. Use three-character ISO-4217 code.

        :return: The currency_code of this GoogleCloudRetailV2PurchaseTransaction.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this GoogleCloudRetailV2PurchaseTransaction.

        Required. Currency code. Use three-character ISO-4217 code.

        :param currency_code: The currency_code of this GoogleCloudRetailV2PurchaseTransaction.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def id(self):
        """Gets the id of this GoogleCloudRetailV2PurchaseTransaction.

        The transaction ID with a length limit of 128 characters.

        :return: The id of this GoogleCloudRetailV2PurchaseTransaction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GoogleCloudRetailV2PurchaseTransaction.

        The transaction ID with a length limit of 128 characters.

        :param id: The id of this GoogleCloudRetailV2PurchaseTransaction.
        :type id: str
        """

        self._id = id

    @property
    def revenue(self):
        """Gets the revenue of this GoogleCloudRetailV2PurchaseTransaction.

        Required. Total non-zero revenue or grand total associated with the transaction. This value include shipping, tax, or other adjustments to total revenue that you want to include as part of your revenue calculations.

        :return: The revenue of this GoogleCloudRetailV2PurchaseTransaction.
        :rtype: float
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this GoogleCloudRetailV2PurchaseTransaction.

        Required. Total non-zero revenue or grand total associated with the transaction. This value include shipping, tax, or other adjustments to total revenue that you want to include as part of your revenue calculations.

        :param revenue: The revenue of this GoogleCloudRetailV2PurchaseTransaction.
        :type revenue: float
        """

        self._revenue = revenue

    @property
    def tax(self):
        """Gets the tax of this GoogleCloudRetailV2PurchaseTransaction.

        All the taxes associated with the transaction.

        :return: The tax of this GoogleCloudRetailV2PurchaseTransaction.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this GoogleCloudRetailV2PurchaseTransaction.

        All the taxes associated with the transaction.

        :param tax: The tax of this GoogleCloudRetailV2PurchaseTransaction.
        :type tax: float
        """

        self._tax = tax
