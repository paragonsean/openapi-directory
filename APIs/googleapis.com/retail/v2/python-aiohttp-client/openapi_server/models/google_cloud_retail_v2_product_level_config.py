# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRetailV2ProductLevelConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ingestion_product_type: str=None, merchant_center_product_id_field: str=None):
        """GoogleCloudRetailV2ProductLevelConfig - a model defined in OpenAPI

        :param ingestion_product_type: The ingestion_product_type of this GoogleCloudRetailV2ProductLevelConfig.
        :param merchant_center_product_id_field: The merchant_center_product_id_field of this GoogleCloudRetailV2ProductLevelConfig.
        """
        self.openapi_types = {
            'ingestion_product_type': str,
            'merchant_center_product_id_field': str
        }

        self.attribute_map = {
            'ingestion_product_type': 'ingestionProductType',
            'merchant_center_product_id_field': 'merchantCenterProductIdField'
        }

        self._ingestion_product_type = ingestion_product_type
        self._merchant_center_product_id_field = merchant_center_product_id_field

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2ProductLevelConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2ProductLevelConfig of this GoogleCloudRetailV2ProductLevelConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ingestion_product_type(self):
        """Gets the ingestion_product_type of this GoogleCloudRetailV2ProductLevelConfig.

        The type of Products allowed to be ingested into the catalog. Acceptable values are: * `primary` (default): You can ingest Products of all types. When ingesting a Product, its type will default to Product.Type.PRIMARY if unset. * `variant` (incompatible with Retail Search): You can only ingest Product.Type.VARIANT Products. This means Product.primary_product_id cannot be empty. If this field is set to an invalid value other than these, an INVALID_ARGUMENT error is returned. If this field is `variant` and merchant_center_product_id_field is `itemGroupId`, an INVALID_ARGUMENT error is returned. See [Product levels](https://cloud.google.com/retail/docs/catalog#product-levels) for more details.

        :return: The ingestion_product_type of this GoogleCloudRetailV2ProductLevelConfig.
        :rtype: str
        """
        return self._ingestion_product_type

    @ingestion_product_type.setter
    def ingestion_product_type(self, ingestion_product_type):
        """Sets the ingestion_product_type of this GoogleCloudRetailV2ProductLevelConfig.

        The type of Products allowed to be ingested into the catalog. Acceptable values are: * `primary` (default): You can ingest Products of all types. When ingesting a Product, its type will default to Product.Type.PRIMARY if unset. * `variant` (incompatible with Retail Search): You can only ingest Product.Type.VARIANT Products. This means Product.primary_product_id cannot be empty. If this field is set to an invalid value other than these, an INVALID_ARGUMENT error is returned. If this field is `variant` and merchant_center_product_id_field is `itemGroupId`, an INVALID_ARGUMENT error is returned. See [Product levels](https://cloud.google.com/retail/docs/catalog#product-levels) for more details.

        :param ingestion_product_type: The ingestion_product_type of this GoogleCloudRetailV2ProductLevelConfig.
        :type ingestion_product_type: str
        """

        self._ingestion_product_type = ingestion_product_type

    @property
    def merchant_center_product_id_field(self):
        """Gets the merchant_center_product_id_field of this GoogleCloudRetailV2ProductLevelConfig.

        Which field of [Merchant Center Product](/bigquery-transfer/docs/merchant-center-products-schema) should be imported as Product.id. Acceptable values are: * `offerId` (default): Import `offerId` as the product ID. * `itemGroupId`: Import `itemGroupId` as the product ID. Notice that Retail API will choose one item from the ones with the same `itemGroupId`, and use it to represent the item group. If this field is set to an invalid value other than these, an INVALID_ARGUMENT error is returned. If this field is `itemGroupId` and ingestion_product_type is `variant`, an INVALID_ARGUMENT error is returned. See [Product levels](https://cloud.google.com/retail/docs/catalog#product-levels) for more details.

        :return: The merchant_center_product_id_field of this GoogleCloudRetailV2ProductLevelConfig.
        :rtype: str
        """
        return self._merchant_center_product_id_field

    @merchant_center_product_id_field.setter
    def merchant_center_product_id_field(self, merchant_center_product_id_field):
        """Sets the merchant_center_product_id_field of this GoogleCloudRetailV2ProductLevelConfig.

        Which field of [Merchant Center Product](/bigquery-transfer/docs/merchant-center-products-schema) should be imported as Product.id. Acceptable values are: * `offerId` (default): Import `offerId` as the product ID. * `itemGroupId`: Import `itemGroupId` as the product ID. Notice that Retail API will choose one item from the ones with the same `itemGroupId`, and use it to represent the item group. If this field is set to an invalid value other than these, an INVALID_ARGUMENT error is returned. If this field is `itemGroupId` and ingestion_product_type is `variant`, an INVALID_ARGUMENT error is returned. See [Product levels](https://cloud.google.com/retail/docs/catalog#product-levels) for more details.

        :param merchant_center_product_id_field: The merchant_center_product_id_field of this GoogleCloudRetailV2ProductLevelConfig.
        :type merchant_center_product_id_field: str
        """

        self._merchant_center_product_id_field = merchant_center_product_id_field
