# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_retail_v2_audience import GoogleCloudRetailV2Audience
from openapi_server.models.google_cloud_retail_v2_color_info import GoogleCloudRetailV2ColorInfo
from openapi_server.models.google_cloud_retail_v2_custom_attribute import GoogleCloudRetailV2CustomAttribute
from openapi_server.models.google_cloud_retail_v2_fulfillment_info import GoogleCloudRetailV2FulfillmentInfo
from openapi_server.models.google_cloud_retail_v2_image import GoogleCloudRetailV2Image
from openapi_server.models.google_cloud_retail_v2_local_inventory import GoogleCloudRetailV2LocalInventory
from openapi_server.models.google_cloud_retail_v2_price_info import GoogleCloudRetailV2PriceInfo
from openapi_server.models.google_cloud_retail_v2_promotion import GoogleCloudRetailV2Promotion
from openapi_server.models.google_cloud_retail_v2_rating import GoogleCloudRetailV2Rating
from openapi_server import util


class GoogleCloudRetailV2Product(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, GoogleCloudRetailV2CustomAttribute]=None, audience: GoogleCloudRetailV2Audience=None, availability: str=None, available_quantity: int=None, available_time: str=None, brands: List[str]=None, categories: List[str]=None, collection_member_ids: List[str]=None, color_info: GoogleCloudRetailV2ColorInfo=None, conditions: List[str]=None, description: str=None, expire_time: str=None, fulfillment_info: List[GoogleCloudRetailV2FulfillmentInfo]=None, gtin: str=None, id: str=None, images: List[GoogleCloudRetailV2Image]=None, language_code: str=None, local_inventories: List[GoogleCloudRetailV2LocalInventory]=None, materials: List[str]=None, name: str=None, patterns: List[str]=None, price_info: GoogleCloudRetailV2PriceInfo=None, primary_product_id: str=None, promotions: List[GoogleCloudRetailV2Promotion]=None, publish_time: str=None, rating: GoogleCloudRetailV2Rating=None, retrievable_fields: str=None, sizes: List[str]=None, tags: List[str]=None, title: str=None, ttl: str=None, type: str=None, uri: str=None, variants: List[GoogleCloudRetailV2Product]=None):
        """GoogleCloudRetailV2Product - a model defined in OpenAPI

        :param attributes: The attributes of this GoogleCloudRetailV2Product.
        :param audience: The audience of this GoogleCloudRetailV2Product.
        :param availability: The availability of this GoogleCloudRetailV2Product.
        :param available_quantity: The available_quantity of this GoogleCloudRetailV2Product.
        :param available_time: The available_time of this GoogleCloudRetailV2Product.
        :param brands: The brands of this GoogleCloudRetailV2Product.
        :param categories: The categories of this GoogleCloudRetailV2Product.
        :param collection_member_ids: The collection_member_ids of this GoogleCloudRetailV2Product.
        :param color_info: The color_info of this GoogleCloudRetailV2Product.
        :param conditions: The conditions of this GoogleCloudRetailV2Product.
        :param description: The description of this GoogleCloudRetailV2Product.
        :param expire_time: The expire_time of this GoogleCloudRetailV2Product.
        :param fulfillment_info: The fulfillment_info of this GoogleCloudRetailV2Product.
        :param gtin: The gtin of this GoogleCloudRetailV2Product.
        :param id: The id of this GoogleCloudRetailV2Product.
        :param images: The images of this GoogleCloudRetailV2Product.
        :param language_code: The language_code of this GoogleCloudRetailV2Product.
        :param local_inventories: The local_inventories of this GoogleCloudRetailV2Product.
        :param materials: The materials of this GoogleCloudRetailV2Product.
        :param name: The name of this GoogleCloudRetailV2Product.
        :param patterns: The patterns of this GoogleCloudRetailV2Product.
        :param price_info: The price_info of this GoogleCloudRetailV2Product.
        :param primary_product_id: The primary_product_id of this GoogleCloudRetailV2Product.
        :param promotions: The promotions of this GoogleCloudRetailV2Product.
        :param publish_time: The publish_time of this GoogleCloudRetailV2Product.
        :param rating: The rating of this GoogleCloudRetailV2Product.
        :param retrievable_fields: The retrievable_fields of this GoogleCloudRetailV2Product.
        :param sizes: The sizes of this GoogleCloudRetailV2Product.
        :param tags: The tags of this GoogleCloudRetailV2Product.
        :param title: The title of this GoogleCloudRetailV2Product.
        :param ttl: The ttl of this GoogleCloudRetailV2Product.
        :param type: The type of this GoogleCloudRetailV2Product.
        :param uri: The uri of this GoogleCloudRetailV2Product.
        :param variants: The variants of this GoogleCloudRetailV2Product.
        """
        self.openapi_types = {
            'attributes': Dict[str, GoogleCloudRetailV2CustomAttribute],
            'audience': GoogleCloudRetailV2Audience,
            'availability': str,
            'available_quantity': int,
            'available_time': str,
            'brands': List[str],
            'categories': List[str],
            'collection_member_ids': List[str],
            'color_info': GoogleCloudRetailV2ColorInfo,
            'conditions': List[str],
            'description': str,
            'expire_time': str,
            'fulfillment_info': List[GoogleCloudRetailV2FulfillmentInfo],
            'gtin': str,
            'id': str,
            'images': List[GoogleCloudRetailV2Image],
            'language_code': str,
            'local_inventories': List[GoogleCloudRetailV2LocalInventory],
            'materials': List[str],
            'name': str,
            'patterns': List[str],
            'price_info': GoogleCloudRetailV2PriceInfo,
            'primary_product_id': str,
            'promotions': List[GoogleCloudRetailV2Promotion],
            'publish_time': str,
            'rating': GoogleCloudRetailV2Rating,
            'retrievable_fields': str,
            'sizes': List[str],
            'tags': List[str],
            'title': str,
            'ttl': str,
            'type': str,
            'uri': str,
            'variants': List[GoogleCloudRetailV2Product]
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'audience': 'audience',
            'availability': 'availability',
            'available_quantity': 'availableQuantity',
            'available_time': 'availableTime',
            'brands': 'brands',
            'categories': 'categories',
            'collection_member_ids': 'collectionMemberIds',
            'color_info': 'colorInfo',
            'conditions': 'conditions',
            'description': 'description',
            'expire_time': 'expireTime',
            'fulfillment_info': 'fulfillmentInfo',
            'gtin': 'gtin',
            'id': 'id',
            'images': 'images',
            'language_code': 'languageCode',
            'local_inventories': 'localInventories',
            'materials': 'materials',
            'name': 'name',
            'patterns': 'patterns',
            'price_info': 'priceInfo',
            'primary_product_id': 'primaryProductId',
            'promotions': 'promotions',
            'publish_time': 'publishTime',
            'rating': 'rating',
            'retrievable_fields': 'retrievableFields',
            'sizes': 'sizes',
            'tags': 'tags',
            'title': 'title',
            'ttl': 'ttl',
            'type': 'type',
            'uri': 'uri',
            'variants': 'variants'
        }

        self._attributes = attributes
        self._audience = audience
        self._availability = availability
        self._available_quantity = available_quantity
        self._available_time = available_time
        self._brands = brands
        self._categories = categories
        self._collection_member_ids = collection_member_ids
        self._color_info = color_info
        self._conditions = conditions
        self._description = description
        self._expire_time = expire_time
        self._fulfillment_info = fulfillment_info
        self._gtin = gtin
        self._id = id
        self._images = images
        self._language_code = language_code
        self._local_inventories = local_inventories
        self._materials = materials
        self._name = name
        self._patterns = patterns
        self._price_info = price_info
        self._primary_product_id = primary_product_id
        self._promotions = promotions
        self._publish_time = publish_time
        self._rating = rating
        self._retrievable_fields = retrievable_fields
        self._sizes = sizes
        self._tags = tags
        self._title = title
        self._ttl = ttl
        self._type = type
        self._uri = uri
        self._variants = variants

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2Product of this GoogleCloudRetailV2Product.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this GoogleCloudRetailV2Product.

        Highly encouraged. Extra product attributes to be included. For example, for products, this could include the store name, vendor, style, color, etc. These are very strong signals for recommendation model, thus we highly recommend providing the attributes here. Features that can take on one of a limited number of possible values. Two types of features can be set are: Textual features. some examples would be the brand/maker of a product, or country of a customer. Numerical features. Some examples would be the height/weight of a product, or age of a customer. For example: `{ \"vendor\": {\"text\": [\"vendor123\", \"vendor456\"]}, \"lengths_cm\": {\"numbers\":[2.3, 15.4]}, \"heights_cm\": {\"numbers\":[8.1, 6.4]} }`. This field needs to pass all below criteria, otherwise an INVALID_ARGUMENT error is returned: * Max entries count: 200. * The key must be a UTF-8 encoded string with a length limit of 128 characters. * For indexable attribute, the key must match the pattern: `a-zA-Z0-9*`. For example, `key0LikeThis` or `KEY_1_LIKE_THIS`. * For text attributes, at most 400 values are allowed. Empty values are not allowed. Each value must be a non-empty UTF-8 encoded string with a length limit of 256 characters. * For number attributes, at most 400 values are allowed.

        :return: The attributes of this GoogleCloudRetailV2Product.
        :rtype: Dict[str, GoogleCloudRetailV2CustomAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this GoogleCloudRetailV2Product.

        Highly encouraged. Extra product attributes to be included. For example, for products, this could include the store name, vendor, style, color, etc. These are very strong signals for recommendation model, thus we highly recommend providing the attributes here. Features that can take on one of a limited number of possible values. Two types of features can be set are: Textual features. some examples would be the brand/maker of a product, or country of a customer. Numerical features. Some examples would be the height/weight of a product, or age of a customer. For example: `{ \"vendor\": {\"text\": [\"vendor123\", \"vendor456\"]}, \"lengths_cm\": {\"numbers\":[2.3, 15.4]}, \"heights_cm\": {\"numbers\":[8.1, 6.4]} }`. This field needs to pass all below criteria, otherwise an INVALID_ARGUMENT error is returned: * Max entries count: 200. * The key must be a UTF-8 encoded string with a length limit of 128 characters. * For indexable attribute, the key must match the pattern: `a-zA-Z0-9*`. For example, `key0LikeThis` or `KEY_1_LIKE_THIS`. * For text attributes, at most 400 values are allowed. Empty values are not allowed. Each value must be a non-empty UTF-8 encoded string with a length limit of 256 characters. * For number attributes, at most 400 values are allowed.

        :param attributes: The attributes of this GoogleCloudRetailV2Product.
        :type attributes: Dict[str, GoogleCloudRetailV2CustomAttribute]
        """

        self._attributes = attributes

    @property
    def audience(self):
        """Gets the audience of this GoogleCloudRetailV2Product.


        :return: The audience of this GoogleCloudRetailV2Product.
        :rtype: GoogleCloudRetailV2Audience
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this GoogleCloudRetailV2Product.


        :param audience: The audience of this GoogleCloudRetailV2Product.
        :type audience: GoogleCloudRetailV2Audience
        """

        self._audience = audience

    @property
    def availability(self):
        """Gets the availability of this GoogleCloudRetailV2Product.

        The online availability of the Product. Default to Availability.IN_STOCK. Corresponding properties: Google Merchant Center property [availability](https://support.google.com/merchants/answer/6324448). Schema.org property [Offer.availability](https://schema.org/availability).

        :return: The availability of this GoogleCloudRetailV2Product.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this GoogleCloudRetailV2Product.

        The online availability of the Product. Default to Availability.IN_STOCK. Corresponding properties: Google Merchant Center property [availability](https://support.google.com/merchants/answer/6324448). Schema.org property [Offer.availability](https://schema.org/availability).

        :param availability: The availability of this GoogleCloudRetailV2Product.
        :type availability: str
        """
        allowed_values = ["AVAILABILITY_UNSPECIFIED", "IN_STOCK", "OUT_OF_STOCK", "PREORDER", "BACKORDER"]  # noqa: E501
        if availability not in allowed_values:
            raise ValueError(
                "Invalid value for `availability` ({0}), must be one of {1}"
                .format(availability, allowed_values)
            )

        self._availability = availability

    @property
    def available_quantity(self):
        """Gets the available_quantity of this GoogleCloudRetailV2Product.

        The available quantity of the item.

        :return: The available_quantity of this GoogleCloudRetailV2Product.
        :rtype: int
        """
        return self._available_quantity

    @available_quantity.setter
    def available_quantity(self, available_quantity):
        """Sets the available_quantity of this GoogleCloudRetailV2Product.

        The available quantity of the item.

        :param available_quantity: The available_quantity of this GoogleCloudRetailV2Product.
        :type available_quantity: int
        """

        self._available_quantity = available_quantity

    @property
    def available_time(self):
        """Gets the available_time of this GoogleCloudRetailV2Product.

        The timestamp when this Product becomes available for SearchService.Search. Note that this is only applicable to Type.PRIMARY and Type.COLLECTION, and ignored for Type.VARIANT.

        :return: The available_time of this GoogleCloudRetailV2Product.
        :rtype: str
        """
        return self._available_time

    @available_time.setter
    def available_time(self, available_time):
        """Sets the available_time of this GoogleCloudRetailV2Product.

        The timestamp when this Product becomes available for SearchService.Search. Note that this is only applicable to Type.PRIMARY and Type.COLLECTION, and ignored for Type.VARIANT.

        :param available_time: The available_time of this GoogleCloudRetailV2Product.
        :type available_time: str
        """

        self._available_time = available_time

    @property
    def brands(self):
        """Gets the brands of this GoogleCloudRetailV2Product.

        The brands of the product. A maximum of 30 brands are allowed unless overridden through the Google Cloud console. Each brand must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [brand](https://support.google.com/merchants/answer/6324351). Schema.org property [Product.brand](https://schema.org/brand).

        :return: The brands of this GoogleCloudRetailV2Product.
        :rtype: List[str]
        """
        return self._brands

    @brands.setter
    def brands(self, brands):
        """Sets the brands of this GoogleCloudRetailV2Product.

        The brands of the product. A maximum of 30 brands are allowed unless overridden through the Google Cloud console. Each brand must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [brand](https://support.google.com/merchants/answer/6324351). Schema.org property [Product.brand](https://schema.org/brand).

        :param brands: The brands of this GoogleCloudRetailV2Product.
        :type brands: List[str]
        """

        self._brands = brands

    @property
    def categories(self):
        """Gets the categories of this GoogleCloudRetailV2Product.

        Product categories. This field is repeated for supporting one product belonging to several parallel categories. Strongly recommended using the full path for better search / recommendation quality. To represent full path of category, use '>' sign to separate different hierarchies. If '>' is part of the category name, replace it with other character(s). For example, if a shoes product belongs to both [\"Shoes & Accessories\" -> \"Shoes\"] and [\"Sports & Fitness\" -> \"Athletic Clothing\" -> \"Shoes\"], it could be represented as: \"categories\": [ \"Shoes & Accessories > Shoes\", \"Sports & Fitness > Athletic Clothing > Shoes\" ] Must be set for Type.PRIMARY Product otherwise an INVALID_ARGUMENT error is returned. At most 250 values are allowed per Product unless overridden via pantheon UI. Empty values are not allowed. Each value must be a UTF-8 encoded string with a length limit of 5,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property google_product_category. Schema.org property [Product.category] (https://schema.org/category). [mc_google_product_category]: https://support.google.com/merchants/answer/6324436

        :return: The categories of this GoogleCloudRetailV2Product.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this GoogleCloudRetailV2Product.

        Product categories. This field is repeated for supporting one product belonging to several parallel categories. Strongly recommended using the full path for better search / recommendation quality. To represent full path of category, use '>' sign to separate different hierarchies. If '>' is part of the category name, replace it with other character(s). For example, if a shoes product belongs to both [\"Shoes & Accessories\" -> \"Shoes\"] and [\"Sports & Fitness\" -> \"Athletic Clothing\" -> \"Shoes\"], it could be represented as: \"categories\": [ \"Shoes & Accessories > Shoes\", \"Sports & Fitness > Athletic Clothing > Shoes\" ] Must be set for Type.PRIMARY Product otherwise an INVALID_ARGUMENT error is returned. At most 250 values are allowed per Product unless overridden via pantheon UI. Empty values are not allowed. Each value must be a UTF-8 encoded string with a length limit of 5,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property google_product_category. Schema.org property [Product.category] (https://schema.org/category). [mc_google_product_category]: https://support.google.com/merchants/answer/6324436

        :param categories: The categories of this GoogleCloudRetailV2Product.
        :type categories: List[str]
        """

        self._categories = categories

    @property
    def collection_member_ids(self):
        """Gets the collection_member_ids of this GoogleCloudRetailV2Product.

        The id of the collection members when type is Type.COLLECTION. Non-existent product ids are allowed. The type of the members must be either Type.PRIMARY or Type.VARIANT otherwise an INVALID_ARGUMENT error is thrown. Should not set it for other types. A maximum of 1000 values are allowed. Otherwise, an INVALID_ARGUMENT error is return.

        :return: The collection_member_ids of this GoogleCloudRetailV2Product.
        :rtype: List[str]
        """
        return self._collection_member_ids

    @collection_member_ids.setter
    def collection_member_ids(self, collection_member_ids):
        """Sets the collection_member_ids of this GoogleCloudRetailV2Product.

        The id of the collection members when type is Type.COLLECTION. Non-existent product ids are allowed. The type of the members must be either Type.PRIMARY or Type.VARIANT otherwise an INVALID_ARGUMENT error is thrown. Should not set it for other types. A maximum of 1000 values are allowed. Otherwise, an INVALID_ARGUMENT error is return.

        :param collection_member_ids: The collection_member_ids of this GoogleCloudRetailV2Product.
        :type collection_member_ids: List[str]
        """

        self._collection_member_ids = collection_member_ids

    @property
    def color_info(self):
        """Gets the color_info of this GoogleCloudRetailV2Product.


        :return: The color_info of this GoogleCloudRetailV2Product.
        :rtype: GoogleCloudRetailV2ColorInfo
        """
        return self._color_info

    @color_info.setter
    def color_info(self, color_info):
        """Sets the color_info of this GoogleCloudRetailV2Product.


        :param color_info: The color_info of this GoogleCloudRetailV2Product.
        :type color_info: GoogleCloudRetailV2ColorInfo
        """

        self._color_info = color_info

    @property
    def conditions(self):
        """Gets the conditions of this GoogleCloudRetailV2Product.

        The condition of the product. Strongly encouraged to use the standard values: \"new\", \"refurbished\", \"used\". A maximum of 1 value is allowed per Product. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [condition](https://support.google.com/merchants/answer/6324469). Schema.org property [Offer.itemCondition](https://schema.org/itemCondition).

        :return: The conditions of this GoogleCloudRetailV2Product.
        :rtype: List[str]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this GoogleCloudRetailV2Product.

        The condition of the product. Strongly encouraged to use the standard values: \"new\", \"refurbished\", \"used\". A maximum of 1 value is allowed per Product. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [condition](https://support.google.com/merchants/answer/6324469). Schema.org property [Offer.itemCondition](https://schema.org/itemCondition).

        :param conditions: The conditions of this GoogleCloudRetailV2Product.
        :type conditions: List[str]
        """

        self._conditions = conditions

    @property
    def description(self):
        """Gets the description of this GoogleCloudRetailV2Product.

        Product description. This field must be a UTF-8 encoded string with a length limit of 5,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [description](https://support.google.com/merchants/answer/6324468). Schema.org property [Product.description](https://schema.org/description).

        :return: The description of this GoogleCloudRetailV2Product.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudRetailV2Product.

        Product description. This field must be a UTF-8 encoded string with a length limit of 5,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [description](https://support.google.com/merchants/answer/6324468). Schema.org property [Product.description](https://schema.org/description).

        :param description: The description of this GoogleCloudRetailV2Product.
        :type description: str
        """

        self._description = description

    @property
    def expire_time(self):
        """Gets the expire_time of this GoogleCloudRetailV2Product.

        Note that this field is applied in the following ways: * If the Product is already expired when it is uploaded, this product is not indexed for search. * If the Product is not expired when it is uploaded, only the Type.PRIMARY's and Type.COLLECTION's expireTime is respected, and Type.VARIANT's expireTime is not used. In general, we suggest the users to delete the stale products explicitly, instead of using this field to determine staleness. expire_time must be later than available_time and publish_time, otherwise an INVALID_ARGUMENT error is thrown. Corresponding properties: Google Merchant Center property [expiration_date](https://support.google.com/merchants/answer/6324499).

        :return: The expire_time of this GoogleCloudRetailV2Product.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this GoogleCloudRetailV2Product.

        Note that this field is applied in the following ways: * If the Product is already expired when it is uploaded, this product is not indexed for search. * If the Product is not expired when it is uploaded, only the Type.PRIMARY's and Type.COLLECTION's expireTime is respected, and Type.VARIANT's expireTime is not used. In general, we suggest the users to delete the stale products explicitly, instead of using this field to determine staleness. expire_time must be later than available_time and publish_time, otherwise an INVALID_ARGUMENT error is thrown. Corresponding properties: Google Merchant Center property [expiration_date](https://support.google.com/merchants/answer/6324499).

        :param expire_time: The expire_time of this GoogleCloudRetailV2Product.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def fulfillment_info(self):
        """Gets the fulfillment_info of this GoogleCloudRetailV2Product.

        Fulfillment information, such as the store IDs for in-store pickup or region IDs for different shipping methods. All the elements must have distinct FulfillmentInfo.type. Otherwise, an INVALID_ARGUMENT error is returned.

        :return: The fulfillment_info of this GoogleCloudRetailV2Product.
        :rtype: List[GoogleCloudRetailV2FulfillmentInfo]
        """
        return self._fulfillment_info

    @fulfillment_info.setter
    def fulfillment_info(self, fulfillment_info):
        """Sets the fulfillment_info of this GoogleCloudRetailV2Product.

        Fulfillment information, such as the store IDs for in-store pickup or region IDs for different shipping methods. All the elements must have distinct FulfillmentInfo.type. Otherwise, an INVALID_ARGUMENT error is returned.

        :param fulfillment_info: The fulfillment_info of this GoogleCloudRetailV2Product.
        :type fulfillment_info: List[GoogleCloudRetailV2FulfillmentInfo]
        """

        self._fulfillment_info = fulfillment_info

    @property
    def gtin(self):
        """Gets the gtin of this GoogleCloudRetailV2Product.

        The Global Trade Item Number (GTIN) of the product. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. This field must be a Unigram. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [gtin](https://support.google.com/merchants/answer/6324461). Schema.org property [Product.isbn](https://schema.org/isbn), [Product.gtin8](https://schema.org/gtin8), [Product.gtin12](https://schema.org/gtin12), [Product.gtin13](https://schema.org/gtin13), or [Product.gtin14](https://schema.org/gtin14). If the value is not a valid GTIN, an INVALID_ARGUMENT error is returned.

        :return: The gtin of this GoogleCloudRetailV2Product.
        :rtype: str
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this GoogleCloudRetailV2Product.

        The Global Trade Item Number (GTIN) of the product. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. This field must be a Unigram. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [gtin](https://support.google.com/merchants/answer/6324461). Schema.org property [Product.isbn](https://schema.org/isbn), [Product.gtin8](https://schema.org/gtin8), [Product.gtin12](https://schema.org/gtin12), [Product.gtin13](https://schema.org/gtin13), or [Product.gtin14](https://schema.org/gtin14). If the value is not a valid GTIN, an INVALID_ARGUMENT error is returned.

        :param gtin: The gtin of this GoogleCloudRetailV2Product.
        :type gtin: str
        """

        self._gtin = gtin

    @property
    def id(self):
        """Gets the id of this GoogleCloudRetailV2Product.

        Immutable. Product identifier, which is the final component of name. For example, this field is \"id_1\", if name is `projects/*/locations/global/catalogs/default_catalog/branches/default_branch/products/id_1`. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [id](https://support.google.com/merchants/answer/6324405). Schema.org property [Product.sku](https://schema.org/sku).

        :return: The id of this GoogleCloudRetailV2Product.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GoogleCloudRetailV2Product.

        Immutable. Product identifier, which is the final component of name. For example, this field is \"id_1\", if name is `projects/*/locations/global/catalogs/default_catalog/branches/default_branch/products/id_1`. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [id](https://support.google.com/merchants/answer/6324405). Schema.org property [Product.sku](https://schema.org/sku).

        :param id: The id of this GoogleCloudRetailV2Product.
        :type id: str
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this GoogleCloudRetailV2Product.

        Product images for the product. We highly recommend putting the main image first. A maximum of 300 images are allowed. Corresponding properties: Google Merchant Center property [image_link](https://support.google.com/merchants/answer/6324350). Schema.org property [Product.image](https://schema.org/image).

        :return: The images of this GoogleCloudRetailV2Product.
        :rtype: List[GoogleCloudRetailV2Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this GoogleCloudRetailV2Product.

        Product images for the product. We highly recommend putting the main image first. A maximum of 300 images are allowed. Corresponding properties: Google Merchant Center property [image_link](https://support.google.com/merchants/answer/6324350). Schema.org property [Product.image](https://schema.org/image).

        :param images: The images of this GoogleCloudRetailV2Product.
        :type images: List[GoogleCloudRetailV2Image]
        """

        self._images = images

    @property
    def language_code(self):
        """Gets the language_code of this GoogleCloudRetailV2Product.

        Language of the title/description and other string attributes. Use language tags defined by [BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). For product prediction, this field is ignored and the model automatically detects the text language. The Product can include text in different languages, but duplicating Products to provide text in multiple languages can result in degraded model performance. For product search this field is in use. It defaults to \"en-US\" if unset.

        :return: The language_code of this GoogleCloudRetailV2Product.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this GoogleCloudRetailV2Product.

        Language of the title/description and other string attributes. Use language tags defined by [BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). For product prediction, this field is ignored and the model automatically detects the text language. The Product can include text in different languages, but duplicating Products to provide text in multiple languages can result in degraded model performance. For product search this field is in use. It defaults to \"en-US\" if unset.

        :param language_code: The language_code of this GoogleCloudRetailV2Product.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def local_inventories(self):
        """Gets the local_inventories of this GoogleCloudRetailV2Product.

        Output only. A list of local inventories specific to different places. This field can be managed by ProductService.AddLocalInventories and ProductService.RemoveLocalInventories APIs if fine-grained, high-volume updates are necessary.

        :return: The local_inventories of this GoogleCloudRetailV2Product.
        :rtype: List[GoogleCloudRetailV2LocalInventory]
        """
        return self._local_inventories

    @local_inventories.setter
    def local_inventories(self, local_inventories):
        """Sets the local_inventories of this GoogleCloudRetailV2Product.

        Output only. A list of local inventories specific to different places. This field can be managed by ProductService.AddLocalInventories and ProductService.RemoveLocalInventories APIs if fine-grained, high-volume updates are necessary.

        :param local_inventories: The local_inventories of this GoogleCloudRetailV2Product.
        :type local_inventories: List[GoogleCloudRetailV2LocalInventory]
        """

        self._local_inventories = local_inventories

    @property
    def materials(self):
        """Gets the materials of this GoogleCloudRetailV2Product.

        The material of the product. For example, \"leather\", \"wooden\". A maximum of 20 values are allowed. Each value must be a UTF-8 encoded string with a length limit of 200 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [material](https://support.google.com/merchants/answer/6324410). Schema.org property [Product.material](https://schema.org/material).

        :return: The materials of this GoogleCloudRetailV2Product.
        :rtype: List[str]
        """
        return self._materials

    @materials.setter
    def materials(self, materials):
        """Sets the materials of this GoogleCloudRetailV2Product.

        The material of the product. For example, \"leather\", \"wooden\". A maximum of 20 values are allowed. Each value must be a UTF-8 encoded string with a length limit of 200 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [material](https://support.google.com/merchants/answer/6324410). Schema.org property [Product.material](https://schema.org/material).

        :param materials: The materials of this GoogleCloudRetailV2Product.
        :type materials: List[str]
        """

        self._materials = materials

    @property
    def name(self):
        """Gets the name of this GoogleCloudRetailV2Product.

        Immutable. Full resource name of the product, such as `projects/*/locations/global/catalogs/default_catalog/branches/default_branch/products/product_id`.

        :return: The name of this GoogleCloudRetailV2Product.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudRetailV2Product.

        Immutable. Full resource name of the product, such as `projects/*/locations/global/catalogs/default_catalog/branches/default_branch/products/product_id`.

        :param name: The name of this GoogleCloudRetailV2Product.
        :type name: str
        """

        self._name = name

    @property
    def patterns(self):
        """Gets the patterns of this GoogleCloudRetailV2Product.

        The pattern or graphic print of the product. For example, \"striped\", \"polka dot\", \"paisley\". A maximum of 20 values are allowed per Product. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [pattern](https://support.google.com/merchants/answer/6324483). Schema.org property [Product.pattern](https://schema.org/pattern).

        :return: The patterns of this GoogleCloudRetailV2Product.
        :rtype: List[str]
        """
        return self._patterns

    @patterns.setter
    def patterns(self, patterns):
        """Sets the patterns of this GoogleCloudRetailV2Product.

        The pattern or graphic print of the product. For example, \"striped\", \"polka dot\", \"paisley\". A maximum of 20 values are allowed per Product. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [pattern](https://support.google.com/merchants/answer/6324483). Schema.org property [Product.pattern](https://schema.org/pattern).

        :param patterns: The patterns of this GoogleCloudRetailV2Product.
        :type patterns: List[str]
        """

        self._patterns = patterns

    @property
    def price_info(self):
        """Gets the price_info of this GoogleCloudRetailV2Product.


        :return: The price_info of this GoogleCloudRetailV2Product.
        :rtype: GoogleCloudRetailV2PriceInfo
        """
        return self._price_info

    @price_info.setter
    def price_info(self, price_info):
        """Sets the price_info of this GoogleCloudRetailV2Product.


        :param price_info: The price_info of this GoogleCloudRetailV2Product.
        :type price_info: GoogleCloudRetailV2PriceInfo
        """

        self._price_info = price_info

    @property
    def primary_product_id(self):
        """Gets the primary_product_id of this GoogleCloudRetailV2Product.

        Variant group identifier. Must be an id, with the same parent branch with this product. Otherwise, an error is thrown. For Type.PRIMARY Products, this field can only be empty or set to the same value as id. For VARIANT Products, this field cannot be empty. A maximum of 2,000 products are allowed to share the same Type.PRIMARY Product. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [item_group_id](https://support.google.com/merchants/answer/6324507). Schema.org property [Product.inProductGroupWithID](https://schema.org/inProductGroupWithID).

        :return: The primary_product_id of this GoogleCloudRetailV2Product.
        :rtype: str
        """
        return self._primary_product_id

    @primary_product_id.setter
    def primary_product_id(self, primary_product_id):
        """Sets the primary_product_id of this GoogleCloudRetailV2Product.

        Variant group identifier. Must be an id, with the same parent branch with this product. Otherwise, an error is thrown. For Type.PRIMARY Products, this field can only be empty or set to the same value as id. For VARIANT Products, this field cannot be empty. A maximum of 2,000 products are allowed to share the same Type.PRIMARY Product. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [item_group_id](https://support.google.com/merchants/answer/6324507). Schema.org property [Product.inProductGroupWithID](https://schema.org/inProductGroupWithID).

        :param primary_product_id: The primary_product_id of this GoogleCloudRetailV2Product.
        :type primary_product_id: str
        """

        self._primary_product_id = primary_product_id

    @property
    def promotions(self):
        """Gets the promotions of this GoogleCloudRetailV2Product.

        The promotions applied to the product. A maximum of 10 values are allowed per Product. Only Promotion.promotion_id will be used, other fields will be ignored if set.

        :return: The promotions of this GoogleCloudRetailV2Product.
        :rtype: List[GoogleCloudRetailV2Promotion]
        """
        return self._promotions

    @promotions.setter
    def promotions(self, promotions):
        """Sets the promotions of this GoogleCloudRetailV2Product.

        The promotions applied to the product. A maximum of 10 values are allowed per Product. Only Promotion.promotion_id will be used, other fields will be ignored if set.

        :param promotions: The promotions of this GoogleCloudRetailV2Product.
        :type promotions: List[GoogleCloudRetailV2Promotion]
        """

        self._promotions = promotions

    @property
    def publish_time(self):
        """Gets the publish_time of this GoogleCloudRetailV2Product.

        The timestamp when the product is published by the retailer for the first time, which indicates the freshness of the products. Note that this field is different from available_time, given it purely describes product freshness regardless of when it is available on search and recommendation.

        :return: The publish_time of this GoogleCloudRetailV2Product.
        :rtype: str
        """
        return self._publish_time

    @publish_time.setter
    def publish_time(self, publish_time):
        """Sets the publish_time of this GoogleCloudRetailV2Product.

        The timestamp when the product is published by the retailer for the first time, which indicates the freshness of the products. Note that this field is different from available_time, given it purely describes product freshness regardless of when it is available on search and recommendation.

        :param publish_time: The publish_time of this GoogleCloudRetailV2Product.
        :type publish_time: str
        """

        self._publish_time = publish_time

    @property
    def rating(self):
        """Gets the rating of this GoogleCloudRetailV2Product.


        :return: The rating of this GoogleCloudRetailV2Product.
        :rtype: GoogleCloudRetailV2Rating
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this GoogleCloudRetailV2Product.


        :param rating: The rating of this GoogleCloudRetailV2Product.
        :type rating: GoogleCloudRetailV2Rating
        """

        self._rating = rating

    @property
    def retrievable_fields(self):
        """Gets the retrievable_fields of this GoogleCloudRetailV2Product.

        Indicates which fields in the Products are returned in SearchResponse. Supported fields for all types: * audience * availability * brands * color_info * conditions * gtin * materials * name * patterns * price_info * rating * sizes * title * uri Supported fields only for Type.PRIMARY and Type.COLLECTION: * categories * description * images Supported fields only for Type.VARIANT: * Only the first image in images To mark attributes as retrievable, include paths of the form \"attributes.key\" where \"key\" is the key of a custom attribute, as specified in attributes. For Type.PRIMARY and Type.COLLECTION, the following fields are always returned in SearchResponse by default: * name For Type.VARIANT, the following fields are always returned in by default: * name * color_info The maximum number of paths is 30. Otherwise, an INVALID_ARGUMENT error is returned. Note: Returning more fields in SearchResponse can increase response payload size and serving latency. This field is deprecated. Use the retrievable site-wide control instead.

        :return: The retrievable_fields of this GoogleCloudRetailV2Product.
        :rtype: str
        """
        return self._retrievable_fields

    @retrievable_fields.setter
    def retrievable_fields(self, retrievable_fields):
        """Sets the retrievable_fields of this GoogleCloudRetailV2Product.

        Indicates which fields in the Products are returned in SearchResponse. Supported fields for all types: * audience * availability * brands * color_info * conditions * gtin * materials * name * patterns * price_info * rating * sizes * title * uri Supported fields only for Type.PRIMARY and Type.COLLECTION: * categories * description * images Supported fields only for Type.VARIANT: * Only the first image in images To mark attributes as retrievable, include paths of the form \"attributes.key\" where \"key\" is the key of a custom attribute, as specified in attributes. For Type.PRIMARY and Type.COLLECTION, the following fields are always returned in SearchResponse by default: * name For Type.VARIANT, the following fields are always returned in by default: * name * color_info The maximum number of paths is 30. Otherwise, an INVALID_ARGUMENT error is returned. Note: Returning more fields in SearchResponse can increase response payload size and serving latency. This field is deprecated. Use the retrievable site-wide control instead.

        :param retrievable_fields: The retrievable_fields of this GoogleCloudRetailV2Product.
        :type retrievable_fields: str
        """

        self._retrievable_fields = retrievable_fields

    @property
    def sizes(self):
        """Gets the sizes of this GoogleCloudRetailV2Product.

        The size of the product. To represent different size systems or size types, consider using this format: [[[size_system:]size_type:]size_value]. For example, in \"US:MENS:M\", \"US\" represents size system; \"MENS\" represents size type; \"M\" represents size value. In \"GIRLS:27\", size system is empty; \"GIRLS\" represents size type; \"27\" represents size value. In \"32 inches\", both size system and size type are empty, while size value is \"32 inches\". A maximum of 20 values are allowed per Product. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [size](https://support.google.com/merchants/answer/6324492), [size_type](https://support.google.com/merchants/answer/6324497), and [size_system](https://support.google.com/merchants/answer/6324502). Schema.org property [Product.size](https://schema.org/size).

        :return: The sizes of this GoogleCloudRetailV2Product.
        :rtype: List[str]
        """
        return self._sizes

    @sizes.setter
    def sizes(self, sizes):
        """Sets the sizes of this GoogleCloudRetailV2Product.

        The size of the product. To represent different size systems or size types, consider using this format: [[[size_system:]size_type:]size_value]. For example, in \"US:MENS:M\", \"US\" represents size system; \"MENS\" represents size type; \"M\" represents size value. In \"GIRLS:27\", size system is empty; \"GIRLS\" represents size type; \"27\" represents size value. In \"32 inches\", both size system and size type are empty, while size value is \"32 inches\". A maximum of 20 values are allowed per Product. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [size](https://support.google.com/merchants/answer/6324492), [size_type](https://support.google.com/merchants/answer/6324497), and [size_system](https://support.google.com/merchants/answer/6324502). Schema.org property [Product.size](https://schema.org/size).

        :param sizes: The sizes of this GoogleCloudRetailV2Product.
        :type sizes: List[str]
        """

        self._sizes = sizes

    @property
    def tags(self):
        """Gets the tags of this GoogleCloudRetailV2Product.

        Custom tags associated with the product. At most 250 values are allowed per Product. This value must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. This tag can be used for filtering recommendation results by passing the tag as part of the PredictRequest.filter. Corresponding properties: Google Merchant Center property [custom_label_0–4](https://support.google.com/merchants/answer/6324473).

        :return: The tags of this GoogleCloudRetailV2Product.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GoogleCloudRetailV2Product.

        Custom tags associated with the product. At most 250 values are allowed per Product. This value must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. This tag can be used for filtering recommendation results by passing the tag as part of the PredictRequest.filter. Corresponding properties: Google Merchant Center property [custom_label_0–4](https://support.google.com/merchants/answer/6324473).

        :param tags: The tags of this GoogleCloudRetailV2Product.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this GoogleCloudRetailV2Product.

        Required. Product title. This field must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [title](https://support.google.com/merchants/answer/6324415). Schema.org property [Product.name](https://schema.org/name).

        :return: The title of this GoogleCloudRetailV2Product.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GoogleCloudRetailV2Product.

        Required. Product title. This field must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [title](https://support.google.com/merchants/answer/6324415). Schema.org property [Product.name](https://schema.org/name).

        :param title: The title of this GoogleCloudRetailV2Product.
        :type title: str
        """

        self._title = title

    @property
    def ttl(self):
        """Gets the ttl of this GoogleCloudRetailV2Product.

        Input only. The TTL (time to live) of the product. Note that this is only applicable to Type.PRIMARY and Type.COLLECTION, and ignored for Type.VARIANT. In general, we suggest the users to delete the stale products explicitly, instead of using this field to determine staleness. If it is set, it must be a non-negative value, and expire_time is set as current timestamp plus ttl. The derived expire_time is returned in the output and ttl is left blank when retrieving the Product. If it is set, the product is not available for SearchService.Search after current timestamp plus ttl. However, the product can still be retrieved by ProductService.GetProduct and ProductService.ListProducts.

        :return: The ttl of this GoogleCloudRetailV2Product.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this GoogleCloudRetailV2Product.

        Input only. The TTL (time to live) of the product. Note that this is only applicable to Type.PRIMARY and Type.COLLECTION, and ignored for Type.VARIANT. In general, we suggest the users to delete the stale products explicitly, instead of using this field to determine staleness. If it is set, it must be a non-negative value, and expire_time is set as current timestamp plus ttl. The derived expire_time is returned in the output and ttl is left blank when retrieving the Product. If it is set, the product is not available for SearchService.Search after current timestamp plus ttl. However, the product can still be retrieved by ProductService.GetProduct and ProductService.ListProducts.

        :param ttl: The ttl of this GoogleCloudRetailV2Product.
        :type ttl: str
        """

        self._ttl = ttl

    @property
    def type(self):
        """Gets the type of this GoogleCloudRetailV2Product.

        Immutable. The type of the product. Default to Catalog.product_level_config.ingestion_product_type if unset.

        :return: The type of this GoogleCloudRetailV2Product.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudRetailV2Product.

        Immutable. The type of the product. Default to Catalog.product_level_config.ingestion_product_type if unset.

        :param type: The type of this GoogleCloudRetailV2Product.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "PRIMARY", "VARIANT", "COLLECTION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this GoogleCloudRetailV2Product.

        Canonical URL directly linking to the product detail page. It is strongly recommended to provide a valid uri for the product, otherwise the service performance could be significantly degraded. This field must be a UTF-8 encoded string with a length limit of 5,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [link](https://support.google.com/merchants/answer/6324416). Schema.org property [Offer.url](https://schema.org/url).

        :return: The uri of this GoogleCloudRetailV2Product.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this GoogleCloudRetailV2Product.

        Canonical URL directly linking to the product detail page. It is strongly recommended to provide a valid uri for the product, otherwise the service performance could be significantly degraded. This field must be a UTF-8 encoded string with a length limit of 5,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [link](https://support.google.com/merchants/answer/6324416). Schema.org property [Offer.url](https://schema.org/url).

        :param uri: The uri of this GoogleCloudRetailV2Product.
        :type uri: str
        """

        self._uri = uri

    @property
    def variants(self):
        """Gets the variants of this GoogleCloudRetailV2Product.

        Output only. Product variants grouped together on primary product which share similar product attributes. It's automatically grouped by primary_product_id for all the product variants. Only populated for Type.PRIMARY Products. Note: This field is OUTPUT_ONLY for ProductService.GetProduct. Do not set this field in API requests.

        :return: The variants of this GoogleCloudRetailV2Product.
        :rtype: List[GoogleCloudRetailV2Product]
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """Sets the variants of this GoogleCloudRetailV2Product.

        Output only. Product variants grouped together on primary product which share similar product attributes. It's automatically grouped by primary_product_id for all the product variants. Only populated for Type.PRIMARY Products. Note: This field is OUTPUT_ONLY for ProductService.GetProduct. Do not set this field in API requests.

        :param variants: The variants of this GoogleCloudRetailV2Product.
        :type variants: List[GoogleCloudRetailV2Product]
        """

        self._variants = variants
