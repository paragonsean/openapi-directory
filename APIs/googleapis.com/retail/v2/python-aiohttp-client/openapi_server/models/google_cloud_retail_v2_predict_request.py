# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_retail_v2_user_event import GoogleCloudRetailV2UserEvent
from openapi_server import util


class GoogleCloudRetailV2PredictRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: str=None, labels: Dict[str, str]=None, page_size: int=None, page_token: str=None, params: Dict[str, object]=None, user_event: GoogleCloudRetailV2UserEvent=None, validate_only: bool=None):
        """GoogleCloudRetailV2PredictRequest - a model defined in OpenAPI

        :param filter: The filter of this GoogleCloudRetailV2PredictRequest.
        :param labels: The labels of this GoogleCloudRetailV2PredictRequest.
        :param page_size: The page_size of this GoogleCloudRetailV2PredictRequest.
        :param page_token: The page_token of this GoogleCloudRetailV2PredictRequest.
        :param params: The params of this GoogleCloudRetailV2PredictRequest.
        :param user_event: The user_event of this GoogleCloudRetailV2PredictRequest.
        :param validate_only: The validate_only of this GoogleCloudRetailV2PredictRequest.
        """
        self.openapi_types = {
            'filter': str,
            'labels': Dict[str, str],
            'page_size': int,
            'page_token': str,
            'params': Dict[str, object],
            'user_event': GoogleCloudRetailV2UserEvent,
            'validate_only': bool
        }

        self.attribute_map = {
            'filter': 'filter',
            'labels': 'labels',
            'page_size': 'pageSize',
            'page_token': 'pageToken',
            'params': 'params',
            'user_event': 'userEvent',
            'validate_only': 'validateOnly'
        }

        self._filter = filter
        self._labels = labels
        self._page_size = page_size
        self._page_token = page_token
        self._params = params
        self._user_event = user_event
        self._validate_only = validate_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2PredictRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2PredictRequest of this GoogleCloudRetailV2PredictRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this GoogleCloudRetailV2PredictRequest.

        Filter for restricting prediction results with a length limit of 5,000 characters. Accepts values for tags and the `filterOutOfStockItems` flag. * Tag expressions. Restricts predictions to products that match all of the specified tags. Boolean operators `OR` and `NOT` are supported if the expression is enclosed in parentheses, and must be separated from the tag values by a space. `-\"tagA\"` is also supported and is equivalent to `NOT \"tagA\"`. Tag values must be double quoted UTF-8 encoded strings with a size limit of 1,000 characters. Note: \"Recently viewed\" models don't support tag filtering at the moment. * filterOutOfStockItems. Restricts predictions to products that do not have a stockState value of OUT_OF_STOCK. Examples: * tag=(\"Red\" OR \"Blue\") tag=\"New-Arrival\" tag=(NOT \"promotional\") * filterOutOfStockItems tag=(-\"promotional\") * filterOutOfStockItems If your filter blocks all prediction results, the API will return *no* results. If instead you want empty result sets to return generic (unfiltered) popular products, set `strictFiltering` to False in `PredictRequest.params`. Note that the API will never return items with storageStatus of \"EXPIRED\" or \"DELETED\" regardless of filter choices. If `filterSyntaxV2` is set to true under the `params` field, then attribute-based expressions are expected instead of the above described tag-based syntax. Examples: * (colors: ANY(\"Red\", \"Blue\")) AND NOT (categories: ANY(\"Phones\")) * (availability: ANY(\"IN_STOCK\")) AND (colors: ANY(\"Red\") OR categories: ANY(\"Phones\")) For more information, see [Filter recommendations](https://cloud.google.com/retail/docs/filter-recs).

        :return: The filter of this GoogleCloudRetailV2PredictRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GoogleCloudRetailV2PredictRequest.

        Filter for restricting prediction results with a length limit of 5,000 characters. Accepts values for tags and the `filterOutOfStockItems` flag. * Tag expressions. Restricts predictions to products that match all of the specified tags. Boolean operators `OR` and `NOT` are supported if the expression is enclosed in parentheses, and must be separated from the tag values by a space. `-\"tagA\"` is also supported and is equivalent to `NOT \"tagA\"`. Tag values must be double quoted UTF-8 encoded strings with a size limit of 1,000 characters. Note: \"Recently viewed\" models don't support tag filtering at the moment. * filterOutOfStockItems. Restricts predictions to products that do not have a stockState value of OUT_OF_STOCK. Examples: * tag=(\"Red\" OR \"Blue\") tag=\"New-Arrival\" tag=(NOT \"promotional\") * filterOutOfStockItems tag=(-\"promotional\") * filterOutOfStockItems If your filter blocks all prediction results, the API will return *no* results. If instead you want empty result sets to return generic (unfiltered) popular products, set `strictFiltering` to False in `PredictRequest.params`. Note that the API will never return items with storageStatus of \"EXPIRED\" or \"DELETED\" regardless of filter choices. If `filterSyntaxV2` is set to true under the `params` field, then attribute-based expressions are expected instead of the above described tag-based syntax. Examples: * (colors: ANY(\"Red\", \"Blue\")) AND NOT (categories: ANY(\"Phones\")) * (availability: ANY(\"IN_STOCK\")) AND (colors: ANY(\"Red\") OR categories: ANY(\"Phones\")) For more information, see [Filter recommendations](https://cloud.google.com/retail/docs/filter-recs).

        :param filter: The filter of this GoogleCloudRetailV2PredictRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudRetailV2PredictRequest.

        The labels applied to a resource must meet the following requirements: * Each resource can have multiple labels, up to a maximum of 64. * Each label must be a key-value pair. * Keys have a minimum length of 1 character and a maximum length of 63 characters and cannot be empty. Values can be empty and have a maximum length of 63 characters. * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. All characters must use UTF-8 encoding, and international characters are allowed. * The key portion of a label must be unique. However, you can use the same key with multiple resources. * Keys must start with a lowercase letter or international character. See [Google Cloud Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements) for more details.

        :return: The labels of this GoogleCloudRetailV2PredictRequest.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudRetailV2PredictRequest.

        The labels applied to a resource must meet the following requirements: * Each resource can have multiple labels, up to a maximum of 64. * Each label must be a key-value pair. * Keys have a minimum length of 1 character and a maximum length of 63 characters and cannot be empty. Values can be empty and have a maximum length of 63 characters. * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. All characters must use UTF-8 encoding, and international characters are allowed. * The key portion of a label must be unique. However, you can use the same key with multiple resources. * Keys must start with a lowercase letter or international character. See [Google Cloud Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements) for more details.

        :param labels: The labels of this GoogleCloudRetailV2PredictRequest.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def page_size(self):
        """Gets the page_size of this GoogleCloudRetailV2PredictRequest.

        Maximum number of results to return. Set this property to the number of prediction results needed. If zero, the service will choose a reasonable default. The maximum allowed value is 100. Values above 100 will be coerced to 100.

        :return: The page_size of this GoogleCloudRetailV2PredictRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this GoogleCloudRetailV2PredictRequest.

        Maximum number of results to return. Set this property to the number of prediction results needed. If zero, the service will choose a reasonable default. The maximum allowed value is 100. Values above 100 will be coerced to 100.

        :param page_size: The page_size of this GoogleCloudRetailV2PredictRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this GoogleCloudRetailV2PredictRequest.

        This field is not used; leave it unset.

        :return: The page_token of this GoogleCloudRetailV2PredictRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this GoogleCloudRetailV2PredictRequest.

        This field is not used; leave it unset.

        :param page_token: The page_token of this GoogleCloudRetailV2PredictRequest.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def params(self):
        """Gets the params of this GoogleCloudRetailV2PredictRequest.

        Additional domain specific parameters for the predictions. Allowed values: * `returnProduct`: Boolean. If set to true, the associated product object will be returned in the `results.metadata` field in the prediction response. * `returnScore`: Boolean. If set to true, the prediction 'score' corresponding to each returned product will be set in the `results.metadata` field in the prediction response. The given 'score' indicates the probability of a product being clicked/purchased given the user's context and history. * `strictFiltering`: Boolean. True by default. If set to false, the service will return generic (unfiltered) popular products instead of empty if your filter blocks all prediction results. * `priceRerankLevel`: String. Default empty. If set to be non-empty, then it needs to be one of {'no-price-reranking', 'low-price-reranking', 'medium-price-reranking', 'high-price-reranking'}. This gives request-level control and adjusts prediction results based on product price. * `diversityLevel`: String. Default empty. If set to be non-empty, then it needs to be one of {'no-diversity', 'low-diversity', 'medium-diversity', 'high-diversity', 'auto-diversity'}. This gives request-level control and adjusts prediction results based on product category. * `filterSyntaxV2`: Boolean. False by default. If set to true, the `filter` field is interpreteted according to the new, attribute-based syntax.

        :return: The params of this GoogleCloudRetailV2PredictRequest.
        :rtype: Dict[str, object]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this GoogleCloudRetailV2PredictRequest.

        Additional domain specific parameters for the predictions. Allowed values: * `returnProduct`: Boolean. If set to true, the associated product object will be returned in the `results.metadata` field in the prediction response. * `returnScore`: Boolean. If set to true, the prediction 'score' corresponding to each returned product will be set in the `results.metadata` field in the prediction response. The given 'score' indicates the probability of a product being clicked/purchased given the user's context and history. * `strictFiltering`: Boolean. True by default. If set to false, the service will return generic (unfiltered) popular products instead of empty if your filter blocks all prediction results. * `priceRerankLevel`: String. Default empty. If set to be non-empty, then it needs to be one of {'no-price-reranking', 'low-price-reranking', 'medium-price-reranking', 'high-price-reranking'}. This gives request-level control and adjusts prediction results based on product price. * `diversityLevel`: String. Default empty. If set to be non-empty, then it needs to be one of {'no-diversity', 'low-diversity', 'medium-diversity', 'high-diversity', 'auto-diversity'}. This gives request-level control and adjusts prediction results based on product category. * `filterSyntaxV2`: Boolean. False by default. If set to true, the `filter` field is interpreteted according to the new, attribute-based syntax.

        :param params: The params of this GoogleCloudRetailV2PredictRequest.
        :type params: Dict[str, object]
        """

        self._params = params

    @property
    def user_event(self):
        """Gets the user_event of this GoogleCloudRetailV2PredictRequest.


        :return: The user_event of this GoogleCloudRetailV2PredictRequest.
        :rtype: GoogleCloudRetailV2UserEvent
        """
        return self._user_event

    @user_event.setter
    def user_event(self, user_event):
        """Sets the user_event of this GoogleCloudRetailV2PredictRequest.


        :param user_event: The user_event of this GoogleCloudRetailV2PredictRequest.
        :type user_event: GoogleCloudRetailV2UserEvent
        """

        self._user_event = user_event

    @property
    def validate_only(self):
        """Gets the validate_only of this GoogleCloudRetailV2PredictRequest.

        Use validate only mode for this prediction query. If set to true, a dummy model will be used that returns arbitrary products. Note that the validate only mode should only be used for testing the API, or if the model is not ready.

        :return: The validate_only of this GoogleCloudRetailV2PredictRequest.
        :rtype: bool
        """
        return self._validate_only

    @validate_only.setter
    def validate_only(self, validate_only):
        """Sets the validate_only of this GoogleCloudRetailV2PredictRequest.

        Use validate only mode for this prediction query. If set to true, a dummy model will be used that returns arbitrary products. Note that the validate only mode should only be used for testing the API, or if the model is not ready.

        :param validate_only: The validate_only of this GoogleCloudRetailV2PredictRequest.
        :type validate_only: bool
        """

        self._validate_only = validate_only
