# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRetailV2alphaEnrollSolutionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enrolled_solution: str=None):
        """GoogleCloudRetailV2alphaEnrollSolutionResponse - a model defined in OpenAPI

        :param enrolled_solution: The enrolled_solution of this GoogleCloudRetailV2alphaEnrollSolutionResponse.
        """
        self.openapi_types = {
            'enrolled_solution': str
        }

        self.attribute_map = {
            'enrolled_solution': 'enrolledSolution'
        }

        self._enrolled_solution = enrolled_solution

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2alphaEnrollSolutionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2alphaEnrollSolutionResponse of this GoogleCloudRetailV2alphaEnrollSolutionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enrolled_solution(self):
        """Gets the enrolled_solution of this GoogleCloudRetailV2alphaEnrollSolutionResponse.

        Retail API solution that the project has enrolled.

        :return: The enrolled_solution of this GoogleCloudRetailV2alphaEnrollSolutionResponse.
        :rtype: str
        """
        return self._enrolled_solution

    @enrolled_solution.setter
    def enrolled_solution(self, enrolled_solution):
        """Sets the enrolled_solution of this GoogleCloudRetailV2alphaEnrollSolutionResponse.

        Retail API solution that the project has enrolled.

        :param enrolled_solution: The enrolled_solution of this GoogleCloudRetailV2alphaEnrollSolutionResponse.
        :type enrolled_solution: str
        """
        allowed_values = ["SOLUTION_TYPE_UNSPECIFIED", "SOLUTION_TYPE_RECOMMENDATION", "SOLUTION_TYPE_SEARCH"]  # noqa: E501
        if enrolled_solution not in allowed_values:
            raise ValueError(
                "Invalid value for `enrolled_solution` ({0}), must be one of {1}"
                .format(enrolled_solution, allowed_values)
            )

        self._enrolled_solution = enrolled_solution
