# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_retail_v2_search_request_dynamic_facet_spec import GoogleCloudRetailV2SearchRequestDynamicFacetSpec
from openapi_server.models.google_cloud_retail_v2_search_request_personalization_spec import GoogleCloudRetailV2SearchRequestPersonalizationSpec
from openapi_server import util


class GoogleCloudRetailV2ServingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boost_control_ids: List[str]=None, display_name: str=None, diversity_level: str=None, diversity_type: str=None, do_not_associate_control_ids: List[str]=None, dynamic_facet_spec: GoogleCloudRetailV2SearchRequestDynamicFacetSpec=None, enable_category_filter_level: str=None, facet_control_ids: List[str]=None, filter_control_ids: List[str]=None, ignore_control_ids: List[str]=None, model_id: str=None, name: str=None, oneway_synonyms_control_ids: List[str]=None, personalization_spec: GoogleCloudRetailV2SearchRequestPersonalizationSpec=None, price_reranking_level: str=None, redirect_control_ids: List[str]=None, replacement_control_ids: List[str]=None, solution_types: List[str]=None, twoway_synonyms_control_ids: List[str]=None):
        """GoogleCloudRetailV2ServingConfig - a model defined in OpenAPI

        :param boost_control_ids: The boost_control_ids of this GoogleCloudRetailV2ServingConfig.
        :param display_name: The display_name of this GoogleCloudRetailV2ServingConfig.
        :param diversity_level: The diversity_level of this GoogleCloudRetailV2ServingConfig.
        :param diversity_type: The diversity_type of this GoogleCloudRetailV2ServingConfig.
        :param do_not_associate_control_ids: The do_not_associate_control_ids of this GoogleCloudRetailV2ServingConfig.
        :param dynamic_facet_spec: The dynamic_facet_spec of this GoogleCloudRetailV2ServingConfig.
        :param enable_category_filter_level: The enable_category_filter_level of this GoogleCloudRetailV2ServingConfig.
        :param facet_control_ids: The facet_control_ids of this GoogleCloudRetailV2ServingConfig.
        :param filter_control_ids: The filter_control_ids of this GoogleCloudRetailV2ServingConfig.
        :param ignore_control_ids: The ignore_control_ids of this GoogleCloudRetailV2ServingConfig.
        :param model_id: The model_id of this GoogleCloudRetailV2ServingConfig.
        :param name: The name of this GoogleCloudRetailV2ServingConfig.
        :param oneway_synonyms_control_ids: The oneway_synonyms_control_ids of this GoogleCloudRetailV2ServingConfig.
        :param personalization_spec: The personalization_spec of this GoogleCloudRetailV2ServingConfig.
        :param price_reranking_level: The price_reranking_level of this GoogleCloudRetailV2ServingConfig.
        :param redirect_control_ids: The redirect_control_ids of this GoogleCloudRetailV2ServingConfig.
        :param replacement_control_ids: The replacement_control_ids of this GoogleCloudRetailV2ServingConfig.
        :param solution_types: The solution_types of this GoogleCloudRetailV2ServingConfig.
        :param twoway_synonyms_control_ids: The twoway_synonyms_control_ids of this GoogleCloudRetailV2ServingConfig.
        """
        self.openapi_types = {
            'boost_control_ids': List[str],
            'display_name': str,
            'diversity_level': str,
            'diversity_type': str,
            'do_not_associate_control_ids': List[str],
            'dynamic_facet_spec': GoogleCloudRetailV2SearchRequestDynamicFacetSpec,
            'enable_category_filter_level': str,
            'facet_control_ids': List[str],
            'filter_control_ids': List[str],
            'ignore_control_ids': List[str],
            'model_id': str,
            'name': str,
            'oneway_synonyms_control_ids': List[str],
            'personalization_spec': GoogleCloudRetailV2SearchRequestPersonalizationSpec,
            'price_reranking_level': str,
            'redirect_control_ids': List[str],
            'replacement_control_ids': List[str],
            'solution_types': List[str],
            'twoway_synonyms_control_ids': List[str]
        }

        self.attribute_map = {
            'boost_control_ids': 'boostControlIds',
            'display_name': 'displayName',
            'diversity_level': 'diversityLevel',
            'diversity_type': 'diversityType',
            'do_not_associate_control_ids': 'doNotAssociateControlIds',
            'dynamic_facet_spec': 'dynamicFacetSpec',
            'enable_category_filter_level': 'enableCategoryFilterLevel',
            'facet_control_ids': 'facetControlIds',
            'filter_control_ids': 'filterControlIds',
            'ignore_control_ids': 'ignoreControlIds',
            'model_id': 'modelId',
            'name': 'name',
            'oneway_synonyms_control_ids': 'onewaySynonymsControlIds',
            'personalization_spec': 'personalizationSpec',
            'price_reranking_level': 'priceRerankingLevel',
            'redirect_control_ids': 'redirectControlIds',
            'replacement_control_ids': 'replacementControlIds',
            'solution_types': 'solutionTypes',
            'twoway_synonyms_control_ids': 'twowaySynonymsControlIds'
        }

        self._boost_control_ids = boost_control_ids
        self._display_name = display_name
        self._diversity_level = diversity_level
        self._diversity_type = diversity_type
        self._do_not_associate_control_ids = do_not_associate_control_ids
        self._dynamic_facet_spec = dynamic_facet_spec
        self._enable_category_filter_level = enable_category_filter_level
        self._facet_control_ids = facet_control_ids
        self._filter_control_ids = filter_control_ids
        self._ignore_control_ids = ignore_control_ids
        self._model_id = model_id
        self._name = name
        self._oneway_synonyms_control_ids = oneway_synonyms_control_ids
        self._personalization_spec = personalization_spec
        self._price_reranking_level = price_reranking_level
        self._redirect_control_ids = redirect_control_ids
        self._replacement_control_ids = replacement_control_ids
        self._solution_types = solution_types
        self._twoway_synonyms_control_ids = twoway_synonyms_control_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2ServingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2ServingConfig of this GoogleCloudRetailV2ServingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boost_control_ids(self):
        """Gets the boost_control_ids of this GoogleCloudRetailV2ServingConfig.

        Condition boost specifications. If a product matches multiple conditions in the specifications, boost scores from these specifications are all applied and combined in a non-linear way. Maximum number of specifications is 100. Notice that if both ServingConfig.boost_control_ids and SearchRequest.boost_spec are set, the boost conditions from both places are evaluated. If a search request matches multiple boost conditions, the final boost score is equal to the sum of the boost scores from all matched boost conditions. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.

        :return: The boost_control_ids of this GoogleCloudRetailV2ServingConfig.
        :rtype: List[str]
        """
        return self._boost_control_ids

    @boost_control_ids.setter
    def boost_control_ids(self, boost_control_ids):
        """Sets the boost_control_ids of this GoogleCloudRetailV2ServingConfig.

        Condition boost specifications. If a product matches multiple conditions in the specifications, boost scores from these specifications are all applied and combined in a non-linear way. Maximum number of specifications is 100. Notice that if both ServingConfig.boost_control_ids and SearchRequest.boost_spec are set, the boost conditions from both places are evaluated. If a search request matches multiple boost conditions, the final boost score is equal to the sum of the boost scores from all matched boost conditions. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.

        :param boost_control_ids: The boost_control_ids of this GoogleCloudRetailV2ServingConfig.
        :type boost_control_ids: List[str]
        """

        self._boost_control_ids = boost_control_ids

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudRetailV2ServingConfig.

        Required. The human readable serving config display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.

        :return: The display_name of this GoogleCloudRetailV2ServingConfig.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudRetailV2ServingConfig.

        Required. The human readable serving config display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.

        :param display_name: The display_name of this GoogleCloudRetailV2ServingConfig.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def diversity_level(self):
        """Gets the diversity_level of this GoogleCloudRetailV2ServingConfig.

        How much diversity to use in recommendation model results e.g. `medium-diversity` or `high-diversity`. Currently supported values: * `no-diversity` * `low-diversity` * `medium-diversity` * `high-diversity` * `auto-diversity` If not specified, we choose default based on recommendation model type. Default value: `no-diversity`. Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.

        :return: The diversity_level of this GoogleCloudRetailV2ServingConfig.
        :rtype: str
        """
        return self._diversity_level

    @diversity_level.setter
    def diversity_level(self, diversity_level):
        """Sets the diversity_level of this GoogleCloudRetailV2ServingConfig.

        How much diversity to use in recommendation model results e.g. `medium-diversity` or `high-diversity`. Currently supported values: * `no-diversity` * `low-diversity` * `medium-diversity` * `high-diversity` * `auto-diversity` If not specified, we choose default based on recommendation model type. Default value: `no-diversity`. Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.

        :param diversity_level: The diversity_level of this GoogleCloudRetailV2ServingConfig.
        :type diversity_level: str
        """

        self._diversity_level = diversity_level

    @property
    def diversity_type(self):
        """Gets the diversity_type of this GoogleCloudRetailV2ServingConfig.

        What kind of diversity to use - data driven or rule based. If unset, the server behavior defaults to RULE_BASED_DIVERSITY.

        :return: The diversity_type of this GoogleCloudRetailV2ServingConfig.
        :rtype: str
        """
        return self._diversity_type

    @diversity_type.setter
    def diversity_type(self, diversity_type):
        """Sets the diversity_type of this GoogleCloudRetailV2ServingConfig.

        What kind of diversity to use - data driven or rule based. If unset, the server behavior defaults to RULE_BASED_DIVERSITY.

        :param diversity_type: The diversity_type of this GoogleCloudRetailV2ServingConfig.
        :type diversity_type: str
        """
        allowed_values = ["DIVERSITY_TYPE_UNSPECIFIED", "RULE_BASED_DIVERSITY", "DATA_DRIVEN_DIVERSITY"]  # noqa: E501
        if diversity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `diversity_type` ({0}), must be one of {1}"
                .format(diversity_type, allowed_values)
            )

        self._diversity_type = diversity_type

    @property
    def do_not_associate_control_ids(self):
        """Gets the do_not_associate_control_ids of this GoogleCloudRetailV2ServingConfig.

        Condition do not associate specifications. If multiple do not associate conditions match, all matching do not associate controls in the list will execute. - Order does not matter. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.

        :return: The do_not_associate_control_ids of this GoogleCloudRetailV2ServingConfig.
        :rtype: List[str]
        """
        return self._do_not_associate_control_ids

    @do_not_associate_control_ids.setter
    def do_not_associate_control_ids(self, do_not_associate_control_ids):
        """Sets the do_not_associate_control_ids of this GoogleCloudRetailV2ServingConfig.

        Condition do not associate specifications. If multiple do not associate conditions match, all matching do not associate controls in the list will execute. - Order does not matter. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.

        :param do_not_associate_control_ids: The do_not_associate_control_ids of this GoogleCloudRetailV2ServingConfig.
        :type do_not_associate_control_ids: List[str]
        """

        self._do_not_associate_control_ids = do_not_associate_control_ids

    @property
    def dynamic_facet_spec(self):
        """Gets the dynamic_facet_spec of this GoogleCloudRetailV2ServingConfig.


        :return: The dynamic_facet_spec of this GoogleCloudRetailV2ServingConfig.
        :rtype: GoogleCloudRetailV2SearchRequestDynamicFacetSpec
        """
        return self._dynamic_facet_spec

    @dynamic_facet_spec.setter
    def dynamic_facet_spec(self, dynamic_facet_spec):
        """Sets the dynamic_facet_spec of this GoogleCloudRetailV2ServingConfig.


        :param dynamic_facet_spec: The dynamic_facet_spec of this GoogleCloudRetailV2ServingConfig.
        :type dynamic_facet_spec: GoogleCloudRetailV2SearchRequestDynamicFacetSpec
        """

        self._dynamic_facet_spec = dynamic_facet_spec

    @property
    def enable_category_filter_level(self):
        """Gets the enable_category_filter_level of this GoogleCloudRetailV2ServingConfig.

        Whether to add additional category filters on the `similar-items` model. If not specified, we enable it by default. Allowed values are: * `no-category-match`: No additional filtering of original results from the model and the customer's filters. * `relaxed-category-match`: Only keep results with categories that match at least one item categories in the PredictRequests's context item. * If customer also sends filters in the PredictRequest, then the results will satisfy both conditions (user given and category match). Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.

        :return: The enable_category_filter_level of this GoogleCloudRetailV2ServingConfig.
        :rtype: str
        """
        return self._enable_category_filter_level

    @enable_category_filter_level.setter
    def enable_category_filter_level(self, enable_category_filter_level):
        """Sets the enable_category_filter_level of this GoogleCloudRetailV2ServingConfig.

        Whether to add additional category filters on the `similar-items` model. If not specified, we enable it by default. Allowed values are: * `no-category-match`: No additional filtering of original results from the model and the customer's filters. * `relaxed-category-match`: Only keep results with categories that match at least one item categories in the PredictRequests's context item. * If customer also sends filters in the PredictRequest, then the results will satisfy both conditions (user given and category match). Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.

        :param enable_category_filter_level: The enable_category_filter_level of this GoogleCloudRetailV2ServingConfig.
        :type enable_category_filter_level: str
        """

        self._enable_category_filter_level = enable_category_filter_level

    @property
    def facet_control_ids(self):
        """Gets the facet_control_ids of this GoogleCloudRetailV2ServingConfig.

        Facet specifications for faceted search. If empty, no facets are returned. The ids refer to the ids of Control resources with only the Facet control set. These controls are assumed to be in the same Catalog as the ServingConfig. A maximum of 100 values are allowed. Otherwise, an INVALID_ARGUMENT error is returned. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.

        :return: The facet_control_ids of this GoogleCloudRetailV2ServingConfig.
        :rtype: List[str]
        """
        return self._facet_control_ids

    @facet_control_ids.setter
    def facet_control_ids(self, facet_control_ids):
        """Sets the facet_control_ids of this GoogleCloudRetailV2ServingConfig.

        Facet specifications for faceted search. If empty, no facets are returned. The ids refer to the ids of Control resources with only the Facet control set. These controls are assumed to be in the same Catalog as the ServingConfig. A maximum of 100 values are allowed. Otherwise, an INVALID_ARGUMENT error is returned. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.

        :param facet_control_ids: The facet_control_ids of this GoogleCloudRetailV2ServingConfig.
        :type facet_control_ids: List[str]
        """

        self._facet_control_ids = facet_control_ids

    @property
    def filter_control_ids(self):
        """Gets the filter_control_ids of this GoogleCloudRetailV2ServingConfig.

        Condition filter specifications. If a product matches multiple conditions in the specifications, filters from these specifications are all applied and combined via the AND operator. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.

        :return: The filter_control_ids of this GoogleCloudRetailV2ServingConfig.
        :rtype: List[str]
        """
        return self._filter_control_ids

    @filter_control_ids.setter
    def filter_control_ids(self, filter_control_ids):
        """Sets the filter_control_ids of this GoogleCloudRetailV2ServingConfig.

        Condition filter specifications. If a product matches multiple conditions in the specifications, filters from these specifications are all applied and combined via the AND operator. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.

        :param filter_control_ids: The filter_control_ids of this GoogleCloudRetailV2ServingConfig.
        :type filter_control_ids: List[str]
        """

        self._filter_control_ids = filter_control_ids

    @property
    def ignore_control_ids(self):
        """Gets the ignore_control_ids of this GoogleCloudRetailV2ServingConfig.

        Condition ignore specifications. If multiple ignore conditions match, all matching ignore controls in the list will execute. - Order does not matter. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.

        :return: The ignore_control_ids of this GoogleCloudRetailV2ServingConfig.
        :rtype: List[str]
        """
        return self._ignore_control_ids

    @ignore_control_ids.setter
    def ignore_control_ids(self, ignore_control_ids):
        """Sets the ignore_control_ids of this GoogleCloudRetailV2ServingConfig.

        Condition ignore specifications. If multiple ignore conditions match, all matching ignore controls in the list will execute. - Order does not matter. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.

        :param ignore_control_ids: The ignore_control_ids of this GoogleCloudRetailV2ServingConfig.
        :type ignore_control_ids: List[str]
        """

        self._ignore_control_ids = ignore_control_ids

    @property
    def model_id(self):
        """Gets the model_id of this GoogleCloudRetailV2ServingConfig.

        The id of the model in the same Catalog to use at serving time. Currently only RecommendationModels are supported: https://cloud.google.com/retail/recommendations-ai/docs/create-models Can be changed but only to a compatible model (e.g. others-you-may-like CTR to others-you-may-like CVR). Required when solution_types is SOLUTION_TYPE_RECOMMENDATION.

        :return: The model_id of this GoogleCloudRetailV2ServingConfig.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this GoogleCloudRetailV2ServingConfig.

        The id of the model in the same Catalog to use at serving time. Currently only RecommendationModels are supported: https://cloud.google.com/retail/recommendations-ai/docs/create-models Can be changed but only to a compatible model (e.g. others-you-may-like CTR to others-you-may-like CVR). Required when solution_types is SOLUTION_TYPE_RECOMMENDATION.

        :param model_id: The model_id of this GoogleCloudRetailV2ServingConfig.
        :type model_id: str
        """

        self._model_id = model_id

    @property
    def name(self):
        """Gets the name of this GoogleCloudRetailV2ServingConfig.

        Immutable. Fully qualified name `projects/*/locations/global/catalogs/*/servingConfig/*`

        :return: The name of this GoogleCloudRetailV2ServingConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudRetailV2ServingConfig.

        Immutable. Fully qualified name `projects/*/locations/global/catalogs/*/servingConfig/*`

        :param name: The name of this GoogleCloudRetailV2ServingConfig.
        :type name: str
        """

        self._name = name

    @property
    def oneway_synonyms_control_ids(self):
        """Gets the oneway_synonyms_control_ids of this GoogleCloudRetailV2ServingConfig.

        Condition oneway synonyms specifications. If multiple oneway synonyms conditions match, all matching oneway synonyms controls in the list will execute. Order of controls in the list will not matter. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.

        :return: The oneway_synonyms_control_ids of this GoogleCloudRetailV2ServingConfig.
        :rtype: List[str]
        """
        return self._oneway_synonyms_control_ids

    @oneway_synonyms_control_ids.setter
    def oneway_synonyms_control_ids(self, oneway_synonyms_control_ids):
        """Sets the oneway_synonyms_control_ids of this GoogleCloudRetailV2ServingConfig.

        Condition oneway synonyms specifications. If multiple oneway synonyms conditions match, all matching oneway synonyms controls in the list will execute. Order of controls in the list will not matter. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.

        :param oneway_synonyms_control_ids: The oneway_synonyms_control_ids of this GoogleCloudRetailV2ServingConfig.
        :type oneway_synonyms_control_ids: List[str]
        """

        self._oneway_synonyms_control_ids = oneway_synonyms_control_ids

    @property
    def personalization_spec(self):
        """Gets the personalization_spec of this GoogleCloudRetailV2ServingConfig.


        :return: The personalization_spec of this GoogleCloudRetailV2ServingConfig.
        :rtype: GoogleCloudRetailV2SearchRequestPersonalizationSpec
        """
        return self._personalization_spec

    @personalization_spec.setter
    def personalization_spec(self, personalization_spec):
        """Sets the personalization_spec of this GoogleCloudRetailV2ServingConfig.


        :param personalization_spec: The personalization_spec of this GoogleCloudRetailV2ServingConfig.
        :type personalization_spec: GoogleCloudRetailV2SearchRequestPersonalizationSpec
        """

        self._personalization_spec = personalization_spec

    @property
    def price_reranking_level(self):
        """Gets the price_reranking_level of this GoogleCloudRetailV2ServingConfig.

        How much price ranking we want in serving results. Price reranking causes product items with a similar recommendation probability to be ordered by price, with the highest-priced items first. This setting could result in a decrease in click-through and conversion rates. Allowed values are: * `no-price-reranking` * `low-price-reranking` * `medium-price-reranking` * `high-price-reranking` If not specified, we choose default based on model type. Default value: `no-price-reranking`. Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.

        :return: The price_reranking_level of this GoogleCloudRetailV2ServingConfig.
        :rtype: str
        """
        return self._price_reranking_level

    @price_reranking_level.setter
    def price_reranking_level(self, price_reranking_level):
        """Sets the price_reranking_level of this GoogleCloudRetailV2ServingConfig.

        How much price ranking we want in serving results. Price reranking causes product items with a similar recommendation probability to be ordered by price, with the highest-priced items first. This setting could result in a decrease in click-through and conversion rates. Allowed values are: * `no-price-reranking` * `low-price-reranking` * `medium-price-reranking` * `high-price-reranking` If not specified, we choose default based on model type. Default value: `no-price-reranking`. Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.

        :param price_reranking_level: The price_reranking_level of this GoogleCloudRetailV2ServingConfig.
        :type price_reranking_level: str
        """

        self._price_reranking_level = price_reranking_level

    @property
    def redirect_control_ids(self):
        """Gets the redirect_control_ids of this GoogleCloudRetailV2ServingConfig.

        Condition redirect specifications. Only the first triggered redirect action is applied, even if multiple apply. Maximum number of specifications is 1000. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.

        :return: The redirect_control_ids of this GoogleCloudRetailV2ServingConfig.
        :rtype: List[str]
        """
        return self._redirect_control_ids

    @redirect_control_ids.setter
    def redirect_control_ids(self, redirect_control_ids):
        """Sets the redirect_control_ids of this GoogleCloudRetailV2ServingConfig.

        Condition redirect specifications. Only the first triggered redirect action is applied, even if multiple apply. Maximum number of specifications is 1000. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.

        :param redirect_control_ids: The redirect_control_ids of this GoogleCloudRetailV2ServingConfig.
        :type redirect_control_ids: List[str]
        """

        self._redirect_control_ids = redirect_control_ids

    @property
    def replacement_control_ids(self):
        """Gets the replacement_control_ids of this GoogleCloudRetailV2ServingConfig.

        Condition replacement specifications. - Applied according to the order in the list. - A previously replaced term can not be re-replaced. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.

        :return: The replacement_control_ids of this GoogleCloudRetailV2ServingConfig.
        :rtype: List[str]
        """
        return self._replacement_control_ids

    @replacement_control_ids.setter
    def replacement_control_ids(self, replacement_control_ids):
        """Sets the replacement_control_ids of this GoogleCloudRetailV2ServingConfig.

        Condition replacement specifications. - Applied according to the order in the list. - A previously replaced term can not be re-replaced. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.

        :param replacement_control_ids: The replacement_control_ids of this GoogleCloudRetailV2ServingConfig.
        :type replacement_control_ids: List[str]
        """

        self._replacement_control_ids = replacement_control_ids

    @property
    def solution_types(self):
        """Gets the solution_types of this GoogleCloudRetailV2ServingConfig.

        Required. Immutable. Specifies the solution types that a serving config can be associated with. Currently we support setting only one type of solution.

        :return: The solution_types of this GoogleCloudRetailV2ServingConfig.
        :rtype: List[str]
        """
        return self._solution_types

    @solution_types.setter
    def solution_types(self, solution_types):
        """Sets the solution_types of this GoogleCloudRetailV2ServingConfig.

        Required. Immutable. Specifies the solution types that a serving config can be associated with. Currently we support setting only one type of solution.

        :param solution_types: The solution_types of this GoogleCloudRetailV2ServingConfig.
        :type solution_types: List[str]
        """
        allowed_values = ["SOLUTION_TYPE_UNSPECIFIED", "SOLUTION_TYPE_RECOMMENDATION", "SOLUTION_TYPE_SEARCH"]  # noqa: E501
        if not set(solution_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `solution_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(solution_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._solution_types = solution_types

    @property
    def twoway_synonyms_control_ids(self):
        """Gets the twoway_synonyms_control_ids of this GoogleCloudRetailV2ServingConfig.

        Condition synonyms specifications. If multiple syonyms conditions match, all matching synonyms control in the list will execute. Order of controls in the list will not matter. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.

        :return: The twoway_synonyms_control_ids of this GoogleCloudRetailV2ServingConfig.
        :rtype: List[str]
        """
        return self._twoway_synonyms_control_ids

    @twoway_synonyms_control_ids.setter
    def twoway_synonyms_control_ids(self, twoway_synonyms_control_ids):
        """Sets the twoway_synonyms_control_ids of this GoogleCloudRetailV2ServingConfig.

        Condition synonyms specifications. If multiple syonyms conditions match, all matching synonyms control in the list will execute. Order of controls in the list will not matter. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.

        :param twoway_synonyms_control_ids: The twoway_synonyms_control_ids of this GoogleCloudRetailV2ServingConfig.
        :type twoway_synonyms_control_ids: List[str]
        """

        self._twoway_synonyms_control_ids = twoway_synonyms_control_ids
