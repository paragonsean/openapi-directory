/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRetailV2SearchRequestFacetSpecFacetKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A facet specification to perform faceted search.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:22.008824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailV2SearchRequestFacetSpec {
  public static final String SERIALIZED_NAME_ENABLE_DYNAMIC_POSITION = "enableDynamicPosition";
  @SerializedName(SERIALIZED_NAME_ENABLE_DYNAMIC_POSITION)
  private Boolean enableDynamicPosition;

  public static final String SERIALIZED_NAME_EXCLUDED_FILTER_KEYS = "excludedFilterKeys";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_FILTER_KEYS)
  private List<String> excludedFilterKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_FACET_KEY = "facetKey";
  @SerializedName(SERIALIZED_NAME_FACET_KEY)
  private GoogleCloudRetailV2SearchRequestFacetSpecFacetKey facetKey;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public GoogleCloudRetailV2SearchRequestFacetSpec() {
  }

  public GoogleCloudRetailV2SearchRequestFacetSpec enableDynamicPosition(Boolean enableDynamicPosition) {
    this.enableDynamicPosition = enableDynamicPosition;
    return this;
  }

  /**
   * Enables dynamic position for this facet. If set to true, the position of this facet among all facets in the response is determined by Google Retail Search. It is ordered together with dynamic facets if dynamic facets is enabled. If set to false, the position of this facet in the response is the same as in the request, and it is ranked before the facets with dynamic position enable and all dynamic facets. For example, you may always want to have rating facet returned in the response, but it&#39;s not necessarily to always display the rating facet at the top. In that case, you can set enable_dynamic_position to true so that the position of rating facet in response is determined by Google Retail Search. Another example, assuming you have the following facets in the request: * \&quot;rating\&quot;, enable_dynamic_position &#x3D; true * \&quot;price\&quot;, enable_dynamic_position &#x3D; false * \&quot;brands\&quot;, enable_dynamic_position &#x3D; false And also you have a dynamic facets enable, which generates a facet \&quot;gender\&quot;. Then, the final order of the facets in the response can be (\&quot;price\&quot;, \&quot;brands\&quot;, \&quot;rating\&quot;, \&quot;gender\&quot;) or (\&quot;price\&quot;, \&quot;brands\&quot;, \&quot;gender\&quot;, \&quot;rating\&quot;) depends on how Google Retail Search orders \&quot;gender\&quot; and \&quot;rating\&quot; facets. However, notice that \&quot;price\&quot; and \&quot;brands\&quot; are always ranked at first and second position because their enable_dynamic_position values are false.
   * @return enableDynamicPosition
   */
  @javax.annotation.Nullable
  public Boolean getEnableDynamicPosition() {
    return enableDynamicPosition;
  }

  public void setEnableDynamicPosition(Boolean enableDynamicPosition) {
    this.enableDynamicPosition = enableDynamicPosition;
  }


  public GoogleCloudRetailV2SearchRequestFacetSpec excludedFilterKeys(List<String> excludedFilterKeys) {
    this.excludedFilterKeys = excludedFilterKeys;
    return this;
  }

  public GoogleCloudRetailV2SearchRequestFacetSpec addExcludedFilterKeysItem(String excludedFilterKeysItem) {
    if (this.excludedFilterKeys == null) {
      this.excludedFilterKeys = new ArrayList<>();
    }
    this.excludedFilterKeys.add(excludedFilterKeysItem);
    return this;
  }

  /**
   * List of keys to exclude when faceting. By default, FacetKey.key is not excluded from the filter unless it is listed in this field. Listing a facet key in this field allows its values to appear as facet results, even when they are filtered out of search results. Using this field does not affect what search results are returned. For example, suppose there are 100 products with the color facet \&quot;Red\&quot; and 200 products with the color facet \&quot;Blue\&quot;. A query containing the filter \&quot;colorFamilies:ANY(\&quot;Red\&quot;)\&quot; and having \&quot;colorFamilies\&quot; as FacetKey.key would by default return only \&quot;Red\&quot; products in the search results, and also return \&quot;Red\&quot; with count 100 as the only color facet. Although there are also blue products available, \&quot;Blue\&quot; would not be shown as an available facet value. If \&quot;colorFamilies\&quot; is listed in \&quot;excludedFilterKeys\&quot;, then the query returns the facet values \&quot;Red\&quot; with count 100 and \&quot;Blue\&quot; with count 200, because the \&quot;colorFamilies\&quot; key is now excluded from the filter. Because this field doesn&#39;t affect search results, the search results are still correctly filtered to return only \&quot;Red\&quot; products. A maximum of 100 values are allowed. Otherwise, an INVALID_ARGUMENT error is returned.
   * @return excludedFilterKeys
   */
  @javax.annotation.Nullable
  public List<String> getExcludedFilterKeys() {
    return excludedFilterKeys;
  }

  public void setExcludedFilterKeys(List<String> excludedFilterKeys) {
    this.excludedFilterKeys = excludedFilterKeys;
  }


  public GoogleCloudRetailV2SearchRequestFacetSpec facetKey(GoogleCloudRetailV2SearchRequestFacetSpecFacetKey facetKey) {
    this.facetKey = facetKey;
    return this;
  }

  /**
   * Get facetKey
   * @return facetKey
   */
  @javax.annotation.Nullable
  public GoogleCloudRetailV2SearchRequestFacetSpecFacetKey getFacetKey() {
    return facetKey;
  }

  public void setFacetKey(GoogleCloudRetailV2SearchRequestFacetSpecFacetKey facetKey) {
    this.facetKey = facetKey;
  }


  public GoogleCloudRetailV2SearchRequestFacetSpec limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Maximum of facet values that should be returned for this facet. If unspecified, defaults to 50. The maximum allowed value is 300. Values above 300 will be coerced to 300. If this field is negative, an INVALID_ARGUMENT is returned.
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailV2SearchRequestFacetSpec googleCloudRetailV2SearchRequestFacetSpec = (GoogleCloudRetailV2SearchRequestFacetSpec) o;
    return Objects.equals(this.enableDynamicPosition, googleCloudRetailV2SearchRequestFacetSpec.enableDynamicPosition) &&
        Objects.equals(this.excludedFilterKeys, googleCloudRetailV2SearchRequestFacetSpec.excludedFilterKeys) &&
        Objects.equals(this.facetKey, googleCloudRetailV2SearchRequestFacetSpec.facetKey) &&
        Objects.equals(this.limit, googleCloudRetailV2SearchRequestFacetSpec.limit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableDynamicPosition, excludedFilterKeys, facetKey, limit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailV2SearchRequestFacetSpec {\n");
    sb.append("    enableDynamicPosition: ").append(toIndentedString(enableDynamicPosition)).append("\n");
    sb.append("    excludedFilterKeys: ").append(toIndentedString(excludedFilterKeys)).append("\n");
    sb.append("    facetKey: ").append(toIndentedString(facetKey)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enableDynamicPosition");
    openapiFields.add("excludedFilterKeys");
    openapiFields.add("facetKey");
    openapiFields.add("limit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailV2SearchRequestFacetSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailV2SearchRequestFacetSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailV2SearchRequestFacetSpec is not found in the empty JSON string", GoogleCloudRetailV2SearchRequestFacetSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailV2SearchRequestFacetSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailV2SearchRequestFacetSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedFilterKeys") != null && !jsonObj.get("excludedFilterKeys").isJsonNull() && !jsonObj.get("excludedFilterKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedFilterKeys` to be an array in the JSON string but got `%s`", jsonObj.get("excludedFilterKeys").toString()));
      }
      // validate the optional field `facetKey`
      if (jsonObj.get("facetKey") != null && !jsonObj.get("facetKey").isJsonNull()) {
        GoogleCloudRetailV2SearchRequestFacetSpecFacetKey.validateJsonElement(jsonObj.get("facetKey"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailV2SearchRequestFacetSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailV2SearchRequestFacetSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailV2SearchRequestFacetSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailV2SearchRequestFacetSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailV2SearchRequestFacetSpec>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailV2SearchRequestFacetSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailV2SearchRequestFacetSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailV2SearchRequestFacetSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailV2SearchRequestFacetSpec
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailV2SearchRequestFacetSpec
   */
  public static GoogleCloudRetailV2SearchRequestFacetSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailV2SearchRequestFacetSpec.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailV2SearchRequestFacetSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

