/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudRetailV2CatalogAttribute;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Catalog level attribute config.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:22.008824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailV2AttributesConfig {
  /**
   * Output only. The AttributeConfigLevel used for this catalog.
   */
  @JsonAdapter(AttributeConfigLevelEnum.Adapter.class)
  public enum AttributeConfigLevelEnum {
    ATTRIBUTE_CONFIG_LEVEL_UNSPECIFIED("ATTRIBUTE_CONFIG_LEVEL_UNSPECIFIED"),
    
    PRODUCT_LEVEL_ATTRIBUTE_CONFIG("PRODUCT_LEVEL_ATTRIBUTE_CONFIG"),
    
    CATALOG_LEVEL_ATTRIBUTE_CONFIG("CATALOG_LEVEL_ATTRIBUTE_CONFIG");

    private String value;

    AttributeConfigLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AttributeConfigLevelEnum fromValue(String value) {
      for (AttributeConfigLevelEnum b : AttributeConfigLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AttributeConfigLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttributeConfigLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttributeConfigLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AttributeConfigLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AttributeConfigLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ATTRIBUTE_CONFIG_LEVEL = "attributeConfigLevel";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_CONFIG_LEVEL)
  private AttributeConfigLevelEnum attributeConfigLevel;

  public static final String SERIALIZED_NAME_CATALOG_ATTRIBUTES = "catalogAttributes";
  @SerializedName(SERIALIZED_NAME_CATALOG_ATTRIBUTES)
  private Map<String, GoogleCloudRetailV2CatalogAttribute> catalogAttributes = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public GoogleCloudRetailV2AttributesConfig() {
  }

  public GoogleCloudRetailV2AttributesConfig(
     AttributeConfigLevelEnum attributeConfigLevel
  ) {
    this();
    this.attributeConfigLevel = attributeConfigLevel;
  }

  /**
   * Output only. The AttributeConfigLevel used for this catalog.
   * @return attributeConfigLevel
   */
  @javax.annotation.Nullable
  public AttributeConfigLevelEnum getAttributeConfigLevel() {
    return attributeConfigLevel;
  }



  public GoogleCloudRetailV2AttributesConfig catalogAttributes(Map<String, GoogleCloudRetailV2CatalogAttribute> catalogAttributes) {
    this.catalogAttributes = catalogAttributes;
    return this;
  }

  public GoogleCloudRetailV2AttributesConfig putCatalogAttributesItem(String key, GoogleCloudRetailV2CatalogAttribute catalogAttributesItem) {
    if (this.catalogAttributes == null) {
      this.catalogAttributes = new HashMap<>();
    }
    this.catalogAttributes.put(key, catalogAttributesItem);
    return this;
  }

  /**
   * Enable attribute(s) config at catalog level. For example, indexable, dynamic_facetable, or searchable for each attribute. The key is catalog attribute&#39;s name. For example: &#x60;color&#x60;, &#x60;brands&#x60;, &#x60;attributes.custom_attribute&#x60;, such as &#x60;attributes.xyz&#x60;. The maximum number of catalog attributes allowed in a request is 1000.
   * @return catalogAttributes
   */
  @javax.annotation.Nullable
  public Map<String, GoogleCloudRetailV2CatalogAttribute> getCatalogAttributes() {
    return catalogAttributes;
  }

  public void setCatalogAttributes(Map<String, GoogleCloudRetailV2CatalogAttribute> catalogAttributes) {
    this.catalogAttributes = catalogAttributes;
  }


  public GoogleCloudRetailV2AttributesConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Immutable. The fully qualified resource name of the attribute config. Format: &#x60;projects/_*_/locations/_*_/catalogs/_*_/attributesConfig&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailV2AttributesConfig googleCloudRetailV2AttributesConfig = (GoogleCloudRetailV2AttributesConfig) o;
    return Objects.equals(this.attributeConfigLevel, googleCloudRetailV2AttributesConfig.attributeConfigLevel) &&
        Objects.equals(this.catalogAttributes, googleCloudRetailV2AttributesConfig.catalogAttributes) &&
        Objects.equals(this.name, googleCloudRetailV2AttributesConfig.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeConfigLevel, catalogAttributes, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailV2AttributesConfig {\n");
    sb.append("    attributeConfigLevel: ").append(toIndentedString(attributeConfigLevel)).append("\n");
    sb.append("    catalogAttributes: ").append(toIndentedString(catalogAttributes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributeConfigLevel");
    openapiFields.add("catalogAttributes");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailV2AttributesConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailV2AttributesConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailV2AttributesConfig is not found in the empty JSON string", GoogleCloudRetailV2AttributesConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailV2AttributesConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailV2AttributesConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attributeConfigLevel") != null && !jsonObj.get("attributeConfigLevel").isJsonNull()) && !jsonObj.get("attributeConfigLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeConfigLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeConfigLevel").toString()));
      }
      // validate the optional field `attributeConfigLevel`
      if (jsonObj.get("attributeConfigLevel") != null && !jsonObj.get("attributeConfigLevel").isJsonNull()) {
        AttributeConfigLevelEnum.validateJsonElement(jsonObj.get("attributeConfigLevel"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailV2AttributesConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailV2AttributesConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailV2AttributesConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailV2AttributesConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailV2AttributesConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailV2AttributesConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailV2AttributesConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailV2AttributesConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailV2AttributesConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailV2AttributesConfig
   */
  public static GoogleCloudRetailV2AttributesConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailV2AttributesConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailV2AttributesConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

