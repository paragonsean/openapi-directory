/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudRetailV2Audience;
import org.openapitools.client.model.GoogleCloudRetailV2ColorInfo;
import org.openapitools.client.model.GoogleCloudRetailV2CustomAttribute;
import org.openapitools.client.model.GoogleCloudRetailV2FulfillmentInfo;
import org.openapitools.client.model.GoogleCloudRetailV2Image;
import org.openapitools.client.model.GoogleCloudRetailV2LocalInventory;
import org.openapitools.client.model.GoogleCloudRetailV2PriceInfo;
import org.openapitools.client.model.GoogleCloudRetailV2Promotion;
import org.openapitools.client.model.GoogleCloudRetailV2Rating;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Product captures all metadata information of items to be recommended or searched.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:22.008824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailV2Product {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, GoogleCloudRetailV2CustomAttribute> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_AUDIENCE = "audience";
  @SerializedName(SERIALIZED_NAME_AUDIENCE)
  private GoogleCloudRetailV2Audience audience;

  /**
   * The online availability of the Product. Default to Availability.IN_STOCK. Corresponding properties: Google Merchant Center property [availability](https://support.google.com/merchants/answer/6324448). Schema.org property [Offer.availability](https://schema.org/availability).
   */
  @JsonAdapter(AvailabilityEnum.Adapter.class)
  public enum AvailabilityEnum {
    AVAILABILITY_UNSPECIFIED("AVAILABILITY_UNSPECIFIED"),
    
    IN_STOCK("IN_STOCK"),
    
    OUT_OF_STOCK("OUT_OF_STOCK"),
    
    PREORDER("PREORDER"),
    
    BACKORDER("BACKORDER");

    private String value;

    AvailabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailabilityEnum fromValue(String value) {
      for (AvailabilityEnum b : AvailabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvailabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvailabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AvailabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private AvailabilityEnum availability;

  public static final String SERIALIZED_NAME_AVAILABLE_QUANTITY = "availableQuantity";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_QUANTITY)
  private Integer availableQuantity;

  public static final String SERIALIZED_NAME_AVAILABLE_TIME = "availableTime";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_TIME)
  private String availableTime;

  public static final String SERIALIZED_NAME_BRANDS = "brands";
  @SerializedName(SERIALIZED_NAME_BRANDS)
  private List<String> brands = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLLECTION_MEMBER_IDS = "collectionMemberIds";
  @SerializedName(SERIALIZED_NAME_COLLECTION_MEMBER_IDS)
  private List<String> collectionMemberIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLOR_INFO = "colorInfo";
  @SerializedName(SERIALIZED_NAME_COLOR_INFO)
  private GoogleCloudRetailV2ColorInfo colorInfo;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<String> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  public static final String SERIALIZED_NAME_FULFILLMENT_INFO = "fulfillmentInfo";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_INFO)
  private List<GoogleCloudRetailV2FulfillmentInfo> fulfillmentInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_GTIN = "gtin";
  @SerializedName(SERIALIZED_NAME_GTIN)
  private String gtin;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<GoogleCloudRetailV2Image> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_LOCAL_INVENTORIES = "localInventories";
  @SerializedName(SERIALIZED_NAME_LOCAL_INVENTORIES)
  private List<GoogleCloudRetailV2LocalInventory> localInventories = new ArrayList<>();

  public static final String SERIALIZED_NAME_MATERIALS = "materials";
  @SerializedName(SERIALIZED_NAME_MATERIALS)
  private List<String> materials = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATTERNS = "patterns";
  @SerializedName(SERIALIZED_NAME_PATTERNS)
  private List<String> patterns = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE_INFO = "priceInfo";
  @SerializedName(SERIALIZED_NAME_PRICE_INFO)
  private GoogleCloudRetailV2PriceInfo priceInfo;

  public static final String SERIALIZED_NAME_PRIMARY_PRODUCT_ID = "primaryProductId";
  @SerializedName(SERIALIZED_NAME_PRIMARY_PRODUCT_ID)
  private String primaryProductId;

  public static final String SERIALIZED_NAME_PROMOTIONS = "promotions";
  @SerializedName(SERIALIZED_NAME_PROMOTIONS)
  private List<GoogleCloudRetailV2Promotion> promotions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLISH_TIME = "publishTime";
  @SerializedName(SERIALIZED_NAME_PUBLISH_TIME)
  private String publishTime;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private GoogleCloudRetailV2Rating rating;

  public static final String SERIALIZED_NAME_RETRIEVABLE_FIELDS = "retrievableFields";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RETRIEVABLE_FIELDS)
  private String retrievableFields;

  public static final String SERIALIZED_NAME_SIZES = "sizes";
  @SerializedName(SERIALIZED_NAME_SIZES)
  private List<String> sizes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private String ttl;

  /**
   * Immutable. The type of the product. Default to Catalog.product_level_config.ingestion_product_type if unset.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    PRIMARY("PRIMARY"),
    
    VARIANT("VARIANT"),
    
    COLLECTION("COLLECTION");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_VARIANTS = "variants";
  @SerializedName(SERIALIZED_NAME_VARIANTS)
  private List<GoogleCloudRetailV2Product> variants = new ArrayList<>();

  public GoogleCloudRetailV2Product() {
  }

  public GoogleCloudRetailV2Product(
     List<GoogleCloudRetailV2LocalInventory> localInventories, 
     List<GoogleCloudRetailV2Product> variants
  ) {
    this();
    this.localInventories = localInventories;
    this.variants = variants;
  }

  public GoogleCloudRetailV2Product attributes(Map<String, GoogleCloudRetailV2CustomAttribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public GoogleCloudRetailV2Product putAttributesItem(String key, GoogleCloudRetailV2CustomAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Highly encouraged. Extra product attributes to be included. For example, for products, this could include the store name, vendor, style, color, etc. These are very strong signals for recommendation model, thus we highly recommend providing the attributes here. Features that can take on one of a limited number of possible values. Two types of features can be set are: Textual features. some examples would be the brand/maker of a product, or country of a customer. Numerical features. Some examples would be the height/weight of a product, or age of a customer. For example: &#x60;{ \&quot;vendor\&quot;: {\&quot;text\&quot;: [\&quot;vendor123\&quot;, \&quot;vendor456\&quot;]}, \&quot;lengths_cm\&quot;: {\&quot;numbers\&quot;:[2.3, 15.4]}, \&quot;heights_cm\&quot;: {\&quot;numbers\&quot;:[8.1, 6.4]} }&#x60;. This field needs to pass all below criteria, otherwise an INVALID_ARGUMENT error is returned: * Max entries count: 200. * The key must be a UTF-8 encoded string with a length limit of 128 characters. * For indexable attribute, the key must match the pattern: &#x60;a-zA-Z0-9*&#x60;. For example, &#x60;key0LikeThis&#x60; or &#x60;KEY_1_LIKE_THIS&#x60;. * For text attributes, at most 400 values are allowed. Empty values are not allowed. Each value must be a non-empty UTF-8 encoded string with a length limit of 256 characters. * For number attributes, at most 400 values are allowed.
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, GoogleCloudRetailV2CustomAttribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, GoogleCloudRetailV2CustomAttribute> attributes) {
    this.attributes = attributes;
  }


  public GoogleCloudRetailV2Product audience(GoogleCloudRetailV2Audience audience) {
    this.audience = audience;
    return this;
  }

  /**
   * Get audience
   * @return audience
   */
  @javax.annotation.Nullable
  public GoogleCloudRetailV2Audience getAudience() {
    return audience;
  }

  public void setAudience(GoogleCloudRetailV2Audience audience) {
    this.audience = audience;
  }


  public GoogleCloudRetailV2Product availability(AvailabilityEnum availability) {
    this.availability = availability;
    return this;
  }

  /**
   * The online availability of the Product. Default to Availability.IN_STOCK. Corresponding properties: Google Merchant Center property [availability](https://support.google.com/merchants/answer/6324448). Schema.org property [Offer.availability](https://schema.org/availability).
   * @return availability
   */
  @javax.annotation.Nullable
  public AvailabilityEnum getAvailability() {
    return availability;
  }

  public void setAvailability(AvailabilityEnum availability) {
    this.availability = availability;
  }


  public GoogleCloudRetailV2Product availableQuantity(Integer availableQuantity) {
    this.availableQuantity = availableQuantity;
    return this;
  }

  /**
   * The available quantity of the item.
   * @return availableQuantity
   */
  @javax.annotation.Nullable
  public Integer getAvailableQuantity() {
    return availableQuantity;
  }

  public void setAvailableQuantity(Integer availableQuantity) {
    this.availableQuantity = availableQuantity;
  }


  public GoogleCloudRetailV2Product availableTime(String availableTime) {
    this.availableTime = availableTime;
    return this;
  }

  /**
   * The timestamp when this Product becomes available for SearchService.Search. Note that this is only applicable to Type.PRIMARY and Type.COLLECTION, and ignored for Type.VARIANT.
   * @return availableTime
   */
  @javax.annotation.Nullable
  public String getAvailableTime() {
    return availableTime;
  }

  public void setAvailableTime(String availableTime) {
    this.availableTime = availableTime;
  }


  public GoogleCloudRetailV2Product brands(List<String> brands) {
    this.brands = brands;
    return this;
  }

  public GoogleCloudRetailV2Product addBrandsItem(String brandsItem) {
    if (this.brands == null) {
      this.brands = new ArrayList<>();
    }
    this.brands.add(brandsItem);
    return this;
  }

  /**
   * The brands of the product. A maximum of 30 brands are allowed unless overridden through the Google Cloud console. Each brand must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [brand](https://support.google.com/merchants/answer/6324351). Schema.org property [Product.brand](https://schema.org/brand).
   * @return brands
   */
  @javax.annotation.Nullable
  public List<String> getBrands() {
    return brands;
  }

  public void setBrands(List<String> brands) {
    this.brands = brands;
  }


  public GoogleCloudRetailV2Product categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public GoogleCloudRetailV2Product addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Product categories. This field is repeated for supporting one product belonging to several parallel categories. Strongly recommended using the full path for better search / recommendation quality. To represent full path of category, use &#39;&gt;&#39; sign to separate different hierarchies. If &#39;&gt;&#39; is part of the category name, replace it with other character(s). For example, if a shoes product belongs to both [\&quot;Shoes &amp; Accessories\&quot; -&gt; \&quot;Shoes\&quot;] and [\&quot;Sports &amp; Fitness\&quot; -&gt; \&quot;Athletic Clothing\&quot; -&gt; \&quot;Shoes\&quot;], it could be represented as: \&quot;categories\&quot;: [ \&quot;Shoes &amp; Accessories &gt; Shoes\&quot;, \&quot;Sports &amp; Fitness &gt; Athletic Clothing &gt; Shoes\&quot; ] Must be set for Type.PRIMARY Product otherwise an INVALID_ARGUMENT error is returned. At most 250 values are allowed per Product unless overridden via pantheon UI. Empty values are not allowed. Each value must be a UTF-8 encoded string with a length limit of 5,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property google_product_category. Schema.org property [Product.category] (https://schema.org/category). [mc_google_product_category]: https://support.google.com/merchants/answer/6324436
   * @return categories
   */
  @javax.annotation.Nullable
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public GoogleCloudRetailV2Product collectionMemberIds(List<String> collectionMemberIds) {
    this.collectionMemberIds = collectionMemberIds;
    return this;
  }

  public GoogleCloudRetailV2Product addCollectionMemberIdsItem(String collectionMemberIdsItem) {
    if (this.collectionMemberIds == null) {
      this.collectionMemberIds = new ArrayList<>();
    }
    this.collectionMemberIds.add(collectionMemberIdsItem);
    return this;
  }

  /**
   * The id of the collection members when type is Type.COLLECTION. Non-existent product ids are allowed. The type of the members must be either Type.PRIMARY or Type.VARIANT otherwise an INVALID_ARGUMENT error is thrown. Should not set it for other types. A maximum of 1000 values are allowed. Otherwise, an INVALID_ARGUMENT error is return.
   * @return collectionMemberIds
   */
  @javax.annotation.Nullable
  public List<String> getCollectionMemberIds() {
    return collectionMemberIds;
  }

  public void setCollectionMemberIds(List<String> collectionMemberIds) {
    this.collectionMemberIds = collectionMemberIds;
  }


  public GoogleCloudRetailV2Product colorInfo(GoogleCloudRetailV2ColorInfo colorInfo) {
    this.colorInfo = colorInfo;
    return this;
  }

  /**
   * Get colorInfo
   * @return colorInfo
   */
  @javax.annotation.Nullable
  public GoogleCloudRetailV2ColorInfo getColorInfo() {
    return colorInfo;
  }

  public void setColorInfo(GoogleCloudRetailV2ColorInfo colorInfo) {
    this.colorInfo = colorInfo;
  }


  public GoogleCloudRetailV2Product conditions(List<String> conditions) {
    this.conditions = conditions;
    return this;
  }

  public GoogleCloudRetailV2Product addConditionsItem(String conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * The condition of the product. Strongly encouraged to use the standard values: \&quot;new\&quot;, \&quot;refurbished\&quot;, \&quot;used\&quot;. A maximum of 1 value is allowed per Product. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [condition](https://support.google.com/merchants/answer/6324469). Schema.org property [Offer.itemCondition](https://schema.org/itemCondition).
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<String> getConditions() {
    return conditions;
  }

  public void setConditions(List<String> conditions) {
    this.conditions = conditions;
  }


  public GoogleCloudRetailV2Product description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Product description. This field must be a UTF-8 encoded string with a length limit of 5,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [description](https://support.google.com/merchants/answer/6324468). Schema.org property [Product.description](https://schema.org/description).
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudRetailV2Product expireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Note that this field is applied in the following ways: * If the Product is already expired when it is uploaded, this product is not indexed for search. * If the Product is not expired when it is uploaded, only the Type.PRIMARY&#39;s and Type.COLLECTION&#39;s expireTime is respected, and Type.VARIANT&#39;s expireTime is not used. In general, we suggest the users to delete the stale products explicitly, instead of using this field to determine staleness. expire_time must be later than available_time and publish_time, otherwise an INVALID_ARGUMENT error is thrown. Corresponding properties: Google Merchant Center property [expiration_date](https://support.google.com/merchants/answer/6324499).
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(String expireTime) {
    this.expireTime = expireTime;
  }


  public GoogleCloudRetailV2Product fulfillmentInfo(List<GoogleCloudRetailV2FulfillmentInfo> fulfillmentInfo) {
    this.fulfillmentInfo = fulfillmentInfo;
    return this;
  }

  public GoogleCloudRetailV2Product addFulfillmentInfoItem(GoogleCloudRetailV2FulfillmentInfo fulfillmentInfoItem) {
    if (this.fulfillmentInfo == null) {
      this.fulfillmentInfo = new ArrayList<>();
    }
    this.fulfillmentInfo.add(fulfillmentInfoItem);
    return this;
  }

  /**
   * Fulfillment information, such as the store IDs for in-store pickup or region IDs for different shipping methods. All the elements must have distinct FulfillmentInfo.type. Otherwise, an INVALID_ARGUMENT error is returned.
   * @return fulfillmentInfo
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRetailV2FulfillmentInfo> getFulfillmentInfo() {
    return fulfillmentInfo;
  }

  public void setFulfillmentInfo(List<GoogleCloudRetailV2FulfillmentInfo> fulfillmentInfo) {
    this.fulfillmentInfo = fulfillmentInfo;
  }


  public GoogleCloudRetailV2Product gtin(String gtin) {
    this.gtin = gtin;
    return this;
  }

  /**
   * The Global Trade Item Number (GTIN) of the product. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. This field must be a Unigram. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [gtin](https://support.google.com/merchants/answer/6324461). Schema.org property [Product.isbn](https://schema.org/isbn), [Product.gtin8](https://schema.org/gtin8), [Product.gtin12](https://schema.org/gtin12), [Product.gtin13](https://schema.org/gtin13), or [Product.gtin14](https://schema.org/gtin14). If the value is not a valid GTIN, an INVALID_ARGUMENT error is returned.
   * @return gtin
   */
  @javax.annotation.Nullable
  public String getGtin() {
    return gtin;
  }

  public void setGtin(String gtin) {
    this.gtin = gtin;
  }


  public GoogleCloudRetailV2Product id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Immutable. Product identifier, which is the final component of name. For example, this field is \&quot;id_1\&quot;, if name is &#x60;projects/_*_/locations/global/catalogs/default_catalog/branches/default_branch/products/id_1&#x60;. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [id](https://support.google.com/merchants/answer/6324405). Schema.org property [Product.sku](https://schema.org/sku).
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GoogleCloudRetailV2Product images(List<GoogleCloudRetailV2Image> images) {
    this.images = images;
    return this;
  }

  public GoogleCloudRetailV2Product addImagesItem(GoogleCloudRetailV2Image imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Product images for the product. We highly recommend putting the main image first. A maximum of 300 images are allowed. Corresponding properties: Google Merchant Center property [image_link](https://support.google.com/merchants/answer/6324350). Schema.org property [Product.image](https://schema.org/image).
   * @return images
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRetailV2Image> getImages() {
    return images;
  }

  public void setImages(List<GoogleCloudRetailV2Image> images) {
    this.images = images;
  }


  public GoogleCloudRetailV2Product languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Language of the title/description and other string attributes. Use language tags defined by [BCP 47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). For product prediction, this field is ignored and the model automatically detects the text language. The Product can include text in different languages, but duplicating Products to provide text in multiple languages can result in degraded model performance. For product search this field is in use. It defaults to \&quot;en-US\&quot; if unset.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  /**
   * Output only. A list of local inventories specific to different places. This field can be managed by ProductService.AddLocalInventories and ProductService.RemoveLocalInventories APIs if fine-grained, high-volume updates are necessary.
   * @return localInventories
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRetailV2LocalInventory> getLocalInventories() {
    return localInventories;
  }



  public GoogleCloudRetailV2Product materials(List<String> materials) {
    this.materials = materials;
    return this;
  }

  public GoogleCloudRetailV2Product addMaterialsItem(String materialsItem) {
    if (this.materials == null) {
      this.materials = new ArrayList<>();
    }
    this.materials.add(materialsItem);
    return this;
  }

  /**
   * The material of the product. For example, \&quot;leather\&quot;, \&quot;wooden\&quot;. A maximum of 20 values are allowed. Each value must be a UTF-8 encoded string with a length limit of 200 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [material](https://support.google.com/merchants/answer/6324410). Schema.org property [Product.material](https://schema.org/material).
   * @return materials
   */
  @javax.annotation.Nullable
  public List<String> getMaterials() {
    return materials;
  }

  public void setMaterials(List<String> materials) {
    this.materials = materials;
  }


  public GoogleCloudRetailV2Product name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. Full resource name of the product, such as &#x60;projects/_*_/locations/global/catalogs/default_catalog/branches/default_branch/products/product_id&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudRetailV2Product patterns(List<String> patterns) {
    this.patterns = patterns;
    return this;
  }

  public GoogleCloudRetailV2Product addPatternsItem(String patternsItem) {
    if (this.patterns == null) {
      this.patterns = new ArrayList<>();
    }
    this.patterns.add(patternsItem);
    return this;
  }

  /**
   * The pattern or graphic print of the product. For example, \&quot;striped\&quot;, \&quot;polka dot\&quot;, \&quot;paisley\&quot;. A maximum of 20 values are allowed per Product. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [pattern](https://support.google.com/merchants/answer/6324483). Schema.org property [Product.pattern](https://schema.org/pattern).
   * @return patterns
   */
  @javax.annotation.Nullable
  public List<String> getPatterns() {
    return patterns;
  }

  public void setPatterns(List<String> patterns) {
    this.patterns = patterns;
  }


  public GoogleCloudRetailV2Product priceInfo(GoogleCloudRetailV2PriceInfo priceInfo) {
    this.priceInfo = priceInfo;
    return this;
  }

  /**
   * Get priceInfo
   * @return priceInfo
   */
  @javax.annotation.Nullable
  public GoogleCloudRetailV2PriceInfo getPriceInfo() {
    return priceInfo;
  }

  public void setPriceInfo(GoogleCloudRetailV2PriceInfo priceInfo) {
    this.priceInfo = priceInfo;
  }


  public GoogleCloudRetailV2Product primaryProductId(String primaryProductId) {
    this.primaryProductId = primaryProductId;
    return this;
  }

  /**
   * Variant group identifier. Must be an id, with the same parent branch with this product. Otherwise, an error is thrown. For Type.PRIMARY Products, this field can only be empty or set to the same value as id. For VARIANT Products, this field cannot be empty. A maximum of 2,000 products are allowed to share the same Type.PRIMARY Product. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [item_group_id](https://support.google.com/merchants/answer/6324507). Schema.org property [Product.inProductGroupWithID](https://schema.org/inProductGroupWithID).
   * @return primaryProductId
   */
  @javax.annotation.Nullable
  public String getPrimaryProductId() {
    return primaryProductId;
  }

  public void setPrimaryProductId(String primaryProductId) {
    this.primaryProductId = primaryProductId;
  }


  public GoogleCloudRetailV2Product promotions(List<GoogleCloudRetailV2Promotion> promotions) {
    this.promotions = promotions;
    return this;
  }

  public GoogleCloudRetailV2Product addPromotionsItem(GoogleCloudRetailV2Promotion promotionsItem) {
    if (this.promotions == null) {
      this.promotions = new ArrayList<>();
    }
    this.promotions.add(promotionsItem);
    return this;
  }

  /**
   * The promotions applied to the product. A maximum of 10 values are allowed per Product. Only Promotion.promotion_id will be used, other fields will be ignored if set.
   * @return promotions
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRetailV2Promotion> getPromotions() {
    return promotions;
  }

  public void setPromotions(List<GoogleCloudRetailV2Promotion> promotions) {
    this.promotions = promotions;
  }


  public GoogleCloudRetailV2Product publishTime(String publishTime) {
    this.publishTime = publishTime;
    return this;
  }

  /**
   * The timestamp when the product is published by the retailer for the first time, which indicates the freshness of the products. Note that this field is different from available_time, given it purely describes product freshness regardless of when it is available on search and recommendation.
   * @return publishTime
   */
  @javax.annotation.Nullable
  public String getPublishTime() {
    return publishTime;
  }

  public void setPublishTime(String publishTime) {
    this.publishTime = publishTime;
  }


  public GoogleCloudRetailV2Product rating(GoogleCloudRetailV2Rating rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nullable
  public GoogleCloudRetailV2Rating getRating() {
    return rating;
  }

  public void setRating(GoogleCloudRetailV2Rating rating) {
    this.rating = rating;
  }


  @Deprecated
  public GoogleCloudRetailV2Product retrievableFields(String retrievableFields) {
    this.retrievableFields = retrievableFields;
    return this;
  }

  /**
   * Indicates which fields in the Products are returned in SearchResponse. Supported fields for all types: * audience * availability * brands * color_info * conditions * gtin * materials * name * patterns * price_info * rating * sizes * title * uri Supported fields only for Type.PRIMARY and Type.COLLECTION: * categories * description * images Supported fields only for Type.VARIANT: * Only the first image in images To mark attributes as retrievable, include paths of the form \&quot;attributes.key\&quot; where \&quot;key\&quot; is the key of a custom attribute, as specified in attributes. For Type.PRIMARY and Type.COLLECTION, the following fields are always returned in SearchResponse by default: * name For Type.VARIANT, the following fields are always returned in by default: * name * color_info The maximum number of paths is 30. Otherwise, an INVALID_ARGUMENT error is returned. Note: Returning more fields in SearchResponse can increase response payload size and serving latency. This field is deprecated. Use the retrievable site-wide control instead.
   * @return retrievableFields
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getRetrievableFields() {
    return retrievableFields;
  }

  @Deprecated
  public void setRetrievableFields(String retrievableFields) {
    this.retrievableFields = retrievableFields;
  }


  public GoogleCloudRetailV2Product sizes(List<String> sizes) {
    this.sizes = sizes;
    return this;
  }

  public GoogleCloudRetailV2Product addSizesItem(String sizesItem) {
    if (this.sizes == null) {
      this.sizes = new ArrayList<>();
    }
    this.sizes.add(sizesItem);
    return this;
  }

  /**
   * The size of the product. To represent different size systems or size types, consider using this format: [[[size_system:]size_type:]size_value]. For example, in \&quot;US:MENS:M\&quot;, \&quot;US\&quot; represents size system; \&quot;MENS\&quot; represents size type; \&quot;M\&quot; represents size value. In \&quot;GIRLS:27\&quot;, size system is empty; \&quot;GIRLS\&quot; represents size type; \&quot;27\&quot; represents size value. In \&quot;32 inches\&quot;, both size system and size type are empty, while size value is \&quot;32 inches\&quot;. A maximum of 20 values are allowed per Product. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [size](https://support.google.com/merchants/answer/6324492), [size_type](https://support.google.com/merchants/answer/6324497), and [size_system](https://support.google.com/merchants/answer/6324502). Schema.org property [Product.size](https://schema.org/size).
   * @return sizes
   */
  @javax.annotation.Nullable
  public List<String> getSizes() {
    return sizes;
  }

  public void setSizes(List<String> sizes) {
    this.sizes = sizes;
  }


  public GoogleCloudRetailV2Product tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public GoogleCloudRetailV2Product addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Custom tags associated with the product. At most 250 values are allowed per Product. This value must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. This tag can be used for filtering recommendation results by passing the tag as part of the PredictRequest.filter. Corresponding properties: Google Merchant Center property [custom_label_0–4](https://support.google.com/merchants/answer/6324473).
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public GoogleCloudRetailV2Product title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Required. Product title. This field must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [title](https://support.google.com/merchants/answer/6324415). Schema.org property [Product.name](https://schema.org/name).
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public GoogleCloudRetailV2Product ttl(String ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Input only. The TTL (time to live) of the product. Note that this is only applicable to Type.PRIMARY and Type.COLLECTION, and ignored for Type.VARIANT. In general, we suggest the users to delete the stale products explicitly, instead of using this field to determine staleness. If it is set, it must be a non-negative value, and expire_time is set as current timestamp plus ttl. The derived expire_time is returned in the output and ttl is left blank when retrieving the Product. If it is set, the product is not available for SearchService.Search after current timestamp plus ttl. However, the product can still be retrieved by ProductService.GetProduct and ProductService.ListProducts.
   * @return ttl
   */
  @javax.annotation.Nullable
  public String getTtl() {
    return ttl;
  }

  public void setTtl(String ttl) {
    this.ttl = ttl;
  }


  public GoogleCloudRetailV2Product type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Immutable. The type of the product. Default to Catalog.product_level_config.ingestion_product_type if unset.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public GoogleCloudRetailV2Product uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Canonical URL directly linking to the product detail page. It is strongly recommended to provide a valid uri for the product, otherwise the service performance could be significantly degraded. This field must be a UTF-8 encoded string with a length limit of 5,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. Corresponding properties: Google Merchant Center property [link](https://support.google.com/merchants/answer/6324416). Schema.org property [Offer.url](https://schema.org/url).
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  /**
   * Output only. Product variants grouped together on primary product which share similar product attributes. It&#39;s automatically grouped by primary_product_id for all the product variants. Only populated for Type.PRIMARY Products. Note: This field is OUTPUT_ONLY for ProductService.GetProduct. Do not set this field in API requests.
   * @return variants
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRetailV2Product> getVariants() {
    return variants;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailV2Product googleCloudRetailV2Product = (GoogleCloudRetailV2Product) o;
    return Objects.equals(this.attributes, googleCloudRetailV2Product.attributes) &&
        Objects.equals(this.audience, googleCloudRetailV2Product.audience) &&
        Objects.equals(this.availability, googleCloudRetailV2Product.availability) &&
        Objects.equals(this.availableQuantity, googleCloudRetailV2Product.availableQuantity) &&
        Objects.equals(this.availableTime, googleCloudRetailV2Product.availableTime) &&
        Objects.equals(this.brands, googleCloudRetailV2Product.brands) &&
        Objects.equals(this.categories, googleCloudRetailV2Product.categories) &&
        Objects.equals(this.collectionMemberIds, googleCloudRetailV2Product.collectionMemberIds) &&
        Objects.equals(this.colorInfo, googleCloudRetailV2Product.colorInfo) &&
        Objects.equals(this.conditions, googleCloudRetailV2Product.conditions) &&
        Objects.equals(this.description, googleCloudRetailV2Product.description) &&
        Objects.equals(this.expireTime, googleCloudRetailV2Product.expireTime) &&
        Objects.equals(this.fulfillmentInfo, googleCloudRetailV2Product.fulfillmentInfo) &&
        Objects.equals(this.gtin, googleCloudRetailV2Product.gtin) &&
        Objects.equals(this.id, googleCloudRetailV2Product.id) &&
        Objects.equals(this.images, googleCloudRetailV2Product.images) &&
        Objects.equals(this.languageCode, googleCloudRetailV2Product.languageCode) &&
        Objects.equals(this.localInventories, googleCloudRetailV2Product.localInventories) &&
        Objects.equals(this.materials, googleCloudRetailV2Product.materials) &&
        Objects.equals(this.name, googleCloudRetailV2Product.name) &&
        Objects.equals(this.patterns, googleCloudRetailV2Product.patterns) &&
        Objects.equals(this.priceInfo, googleCloudRetailV2Product.priceInfo) &&
        Objects.equals(this.primaryProductId, googleCloudRetailV2Product.primaryProductId) &&
        Objects.equals(this.promotions, googleCloudRetailV2Product.promotions) &&
        Objects.equals(this.publishTime, googleCloudRetailV2Product.publishTime) &&
        Objects.equals(this.rating, googleCloudRetailV2Product.rating) &&
        Objects.equals(this.retrievableFields, googleCloudRetailV2Product.retrievableFields) &&
        Objects.equals(this.sizes, googleCloudRetailV2Product.sizes) &&
        Objects.equals(this.tags, googleCloudRetailV2Product.tags) &&
        Objects.equals(this.title, googleCloudRetailV2Product.title) &&
        Objects.equals(this.ttl, googleCloudRetailV2Product.ttl) &&
        Objects.equals(this.type, googleCloudRetailV2Product.type) &&
        Objects.equals(this.uri, googleCloudRetailV2Product.uri) &&
        Objects.equals(this.variants, googleCloudRetailV2Product.variants);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, audience, availability, availableQuantity, availableTime, brands, categories, collectionMemberIds, colorInfo, conditions, description, expireTime, fulfillmentInfo, gtin, id, images, languageCode, localInventories, materials, name, patterns, priceInfo, primaryProductId, promotions, publishTime, rating, retrievableFields, sizes, tags, title, ttl, type, uri, variants);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailV2Product {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    audience: ").append(toIndentedString(audience)).append("\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    availableQuantity: ").append(toIndentedString(availableQuantity)).append("\n");
    sb.append("    availableTime: ").append(toIndentedString(availableTime)).append("\n");
    sb.append("    brands: ").append(toIndentedString(brands)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    collectionMemberIds: ").append(toIndentedString(collectionMemberIds)).append("\n");
    sb.append("    colorInfo: ").append(toIndentedString(colorInfo)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    fulfillmentInfo: ").append(toIndentedString(fulfillmentInfo)).append("\n");
    sb.append("    gtin: ").append(toIndentedString(gtin)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    localInventories: ").append(toIndentedString(localInventories)).append("\n");
    sb.append("    materials: ").append(toIndentedString(materials)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    patterns: ").append(toIndentedString(patterns)).append("\n");
    sb.append("    priceInfo: ").append(toIndentedString(priceInfo)).append("\n");
    sb.append("    primaryProductId: ").append(toIndentedString(primaryProductId)).append("\n");
    sb.append("    promotions: ").append(toIndentedString(promotions)).append("\n");
    sb.append("    publishTime: ").append(toIndentedString(publishTime)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    retrievableFields: ").append(toIndentedString(retrievableFields)).append("\n");
    sb.append("    sizes: ").append(toIndentedString(sizes)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    variants: ").append(toIndentedString(variants)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("audience");
    openapiFields.add("availability");
    openapiFields.add("availableQuantity");
    openapiFields.add("availableTime");
    openapiFields.add("brands");
    openapiFields.add("categories");
    openapiFields.add("collectionMemberIds");
    openapiFields.add("colorInfo");
    openapiFields.add("conditions");
    openapiFields.add("description");
    openapiFields.add("expireTime");
    openapiFields.add("fulfillmentInfo");
    openapiFields.add("gtin");
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("languageCode");
    openapiFields.add("localInventories");
    openapiFields.add("materials");
    openapiFields.add("name");
    openapiFields.add("patterns");
    openapiFields.add("priceInfo");
    openapiFields.add("primaryProductId");
    openapiFields.add("promotions");
    openapiFields.add("publishTime");
    openapiFields.add("rating");
    openapiFields.add("retrievableFields");
    openapiFields.add("sizes");
    openapiFields.add("tags");
    openapiFields.add("title");
    openapiFields.add("ttl");
    openapiFields.add("type");
    openapiFields.add("uri");
    openapiFields.add("variants");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailV2Product
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailV2Product.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailV2Product is not found in the empty JSON string", GoogleCloudRetailV2Product.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailV2Product.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailV2Product` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `audience`
      if (jsonObj.get("audience") != null && !jsonObj.get("audience").isJsonNull()) {
        GoogleCloudRetailV2Audience.validateJsonElement(jsonObj.get("audience"));
      }
      if ((jsonObj.get("availability") != null && !jsonObj.get("availability").isJsonNull()) && !jsonObj.get("availability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availability").toString()));
      }
      // validate the optional field `availability`
      if (jsonObj.get("availability") != null && !jsonObj.get("availability").isJsonNull()) {
        AvailabilityEnum.validateJsonElement(jsonObj.get("availability"));
      }
      if ((jsonObj.get("availableTime") != null && !jsonObj.get("availableTime").isJsonNull()) && !jsonObj.get("availableTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availableTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("brands") != null && !jsonObj.get("brands").isJsonNull() && !jsonObj.get("brands").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `brands` to be an array in the JSON string but got `%s`", jsonObj.get("brands").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("collectionMemberIds") != null && !jsonObj.get("collectionMemberIds").isJsonNull() && !jsonObj.get("collectionMemberIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `collectionMemberIds` to be an array in the JSON string but got `%s`", jsonObj.get("collectionMemberIds").toString()));
      }
      // validate the optional field `colorInfo`
      if (jsonObj.get("colorInfo") != null && !jsonObj.get("colorInfo").isJsonNull()) {
        GoogleCloudRetailV2ColorInfo.validateJsonElement(jsonObj.get("colorInfo"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull() && !jsonObj.get("conditions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if (jsonObj.get("fulfillmentInfo") != null && !jsonObj.get("fulfillmentInfo").isJsonNull()) {
        JsonArray jsonArrayfulfillmentInfo = jsonObj.getAsJsonArray("fulfillmentInfo");
        if (jsonArrayfulfillmentInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fulfillmentInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fulfillmentInfo` to be an array in the JSON string but got `%s`", jsonObj.get("fulfillmentInfo").toString()));
          }

          // validate the optional field `fulfillmentInfo` (array)
          for (int i = 0; i < jsonArrayfulfillmentInfo.size(); i++) {
            GoogleCloudRetailV2FulfillmentInfo.validateJsonElement(jsonArrayfulfillmentInfo.get(i));
          };
        }
      }
      if ((jsonObj.get("gtin") != null && !jsonObj.get("gtin").isJsonNull()) && !jsonObj.get("gtin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gtin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gtin").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            GoogleCloudRetailV2Image.validateJsonElement(jsonArrayimages.get(i));
          };
        }
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if (jsonObj.get("localInventories") != null && !jsonObj.get("localInventories").isJsonNull()) {
        JsonArray jsonArraylocalInventories = jsonObj.getAsJsonArray("localInventories");
        if (jsonArraylocalInventories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("localInventories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `localInventories` to be an array in the JSON string but got `%s`", jsonObj.get("localInventories").toString()));
          }

          // validate the optional field `localInventories` (array)
          for (int i = 0; i < jsonArraylocalInventories.size(); i++) {
            GoogleCloudRetailV2LocalInventory.validateJsonElement(jsonArraylocalInventories.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("materials") != null && !jsonObj.get("materials").isJsonNull() && !jsonObj.get("materials").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `materials` to be an array in the JSON string but got `%s`", jsonObj.get("materials").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("patterns") != null && !jsonObj.get("patterns").isJsonNull() && !jsonObj.get("patterns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `patterns` to be an array in the JSON string but got `%s`", jsonObj.get("patterns").toString()));
      }
      // validate the optional field `priceInfo`
      if (jsonObj.get("priceInfo") != null && !jsonObj.get("priceInfo").isJsonNull()) {
        GoogleCloudRetailV2PriceInfo.validateJsonElement(jsonObj.get("priceInfo"));
      }
      if ((jsonObj.get("primaryProductId") != null && !jsonObj.get("primaryProductId").isJsonNull()) && !jsonObj.get("primaryProductId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryProductId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryProductId").toString()));
      }
      if (jsonObj.get("promotions") != null && !jsonObj.get("promotions").isJsonNull()) {
        JsonArray jsonArraypromotions = jsonObj.getAsJsonArray("promotions");
        if (jsonArraypromotions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("promotions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `promotions` to be an array in the JSON string but got `%s`", jsonObj.get("promotions").toString()));
          }

          // validate the optional field `promotions` (array)
          for (int i = 0; i < jsonArraypromotions.size(); i++) {
            GoogleCloudRetailV2Promotion.validateJsonElement(jsonArraypromotions.get(i));
          };
        }
      }
      if ((jsonObj.get("publishTime") != null && !jsonObj.get("publishTime").isJsonNull()) && !jsonObj.get("publishTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishTime").toString()));
      }
      // validate the optional field `rating`
      if (jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) {
        GoogleCloudRetailV2Rating.validateJsonElement(jsonObj.get("rating"));
      }
      if ((jsonObj.get("retrievableFields") != null && !jsonObj.get("retrievableFields").isJsonNull()) && !jsonObj.get("retrievableFields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retrievableFields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retrievableFields").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sizes") != null && !jsonObj.get("sizes").isJsonNull() && !jsonObj.get("sizes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizes` to be an array in the JSON string but got `%s`", jsonObj.get("sizes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("ttl") != null && !jsonObj.get("ttl").isJsonNull()) && !jsonObj.get("ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ttl").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if (jsonObj.get("variants") != null && !jsonObj.get("variants").isJsonNull()) {
        JsonArray jsonArrayvariants = jsonObj.getAsJsonArray("variants");
        if (jsonArrayvariants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variants` to be an array in the JSON string but got `%s`", jsonObj.get("variants").toString()));
          }

          // validate the optional field `variants` (array)
          for (int i = 0; i < jsonArrayvariants.size(); i++) {
            GoogleCloudRetailV2Product.validateJsonElement(jsonArrayvariants.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailV2Product.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailV2Product' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailV2Product> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailV2Product.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailV2Product>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailV2Product value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailV2Product read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailV2Product given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailV2Product
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailV2Product
   */
  public static GoogleCloudRetailV2Product fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailV2Product.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailV2Product to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

