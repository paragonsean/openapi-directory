/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRetailV2Rule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configures dynamic metadata that can be linked to a ServingConfig and affect search or recommendation results at serving time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:22.008824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailV2Control {
  public static final String SERIALIZED_NAME_ASSOCIATED_SERVING_CONFIG_IDS = "associatedServingConfigIds";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_SERVING_CONFIG_IDS)
  private List<String> associatedServingConfigIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RULE = "rule";
  @SerializedName(SERIALIZED_NAME_RULE)
  private GoogleCloudRetailV2Rule rule;

  /**
   * Gets or Sets searchSolutionUseCase
   */
  @JsonAdapter(SearchSolutionUseCaseEnum.Adapter.class)
  public enum SearchSolutionUseCaseEnum {
    UNSPECIFIED("SEARCH_SOLUTION_USE_CASE_UNSPECIFIED"),
    
    SEARCH("SEARCH_SOLUTION_USE_CASE_SEARCH"),
    
    BROWSE("SEARCH_SOLUTION_USE_CASE_BROWSE");

    private String value;

    SearchSolutionUseCaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SearchSolutionUseCaseEnum fromValue(String value) {
      for (SearchSolutionUseCaseEnum b : SearchSolutionUseCaseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SearchSolutionUseCaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SearchSolutionUseCaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SearchSolutionUseCaseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SearchSolutionUseCaseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SearchSolutionUseCaseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEARCH_SOLUTION_USE_CASE = "searchSolutionUseCase";
  @SerializedName(SERIALIZED_NAME_SEARCH_SOLUTION_USE_CASE)
  private List<SearchSolutionUseCaseEnum> searchSolutionUseCase = new ArrayList<>();

  /**
   * Gets or Sets solutionTypes
   */
  @JsonAdapter(SolutionTypesEnum.Adapter.class)
  public enum SolutionTypesEnum {
    UNSPECIFIED("SOLUTION_TYPE_UNSPECIFIED"),
    
    RECOMMENDATION("SOLUTION_TYPE_RECOMMENDATION"),
    
    SEARCH("SOLUTION_TYPE_SEARCH");

    private String value;

    SolutionTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SolutionTypesEnum fromValue(String value) {
      for (SolutionTypesEnum b : SolutionTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SolutionTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SolutionTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SolutionTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SolutionTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SolutionTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOLUTION_TYPES = "solutionTypes";
  @SerializedName(SERIALIZED_NAME_SOLUTION_TYPES)
  private List<SolutionTypesEnum> solutionTypes = new ArrayList<>();

  public GoogleCloudRetailV2Control() {
  }

  public GoogleCloudRetailV2Control(
     List<String> associatedServingConfigIds
  ) {
    this();
    this.associatedServingConfigIds = associatedServingConfigIds;
  }

  /**
   * Output only. List of serving config ids that are associated with this control in the same Catalog. Note the association is managed via the ServingConfig, this is an output only denormalized view.
   * @return associatedServingConfigIds
   */
  @javax.annotation.Nullable
  public List<String> getAssociatedServingConfigIds() {
    return associatedServingConfigIds;
  }



  public GoogleCloudRetailV2Control displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The human readable control display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is thrown.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudRetailV2Control name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. Fully qualified name &#x60;projects/_*_/locations/global/catalogs/_*_/controls/_*&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudRetailV2Control rule(GoogleCloudRetailV2Rule rule) {
    this.rule = rule;
    return this;
  }

  /**
   * Get rule
   * @return rule
   */
  @javax.annotation.Nullable
  public GoogleCloudRetailV2Rule getRule() {
    return rule;
  }

  public void setRule(GoogleCloudRetailV2Rule rule) {
    this.rule = rule;
  }


  public GoogleCloudRetailV2Control searchSolutionUseCase(List<SearchSolutionUseCaseEnum> searchSolutionUseCase) {
    this.searchSolutionUseCase = searchSolutionUseCase;
    return this;
  }

  public GoogleCloudRetailV2Control addSearchSolutionUseCaseItem(SearchSolutionUseCaseEnum searchSolutionUseCaseItem) {
    if (this.searchSolutionUseCase == null) {
      this.searchSolutionUseCase = new ArrayList<>();
    }
    this.searchSolutionUseCase.add(searchSolutionUseCaseItem);
    return this;
  }

  /**
   * Specifies the use case for the control. Affects what condition fields can be set. Only settable by search controls. Will default to SEARCH_SOLUTION_USE_CASE_SEARCH if not specified. Currently only allow one search_solution_use_case per control.
   * @return searchSolutionUseCase
   */
  @javax.annotation.Nullable
  public List<SearchSolutionUseCaseEnum> getSearchSolutionUseCase() {
    return searchSolutionUseCase;
  }

  public void setSearchSolutionUseCase(List<SearchSolutionUseCaseEnum> searchSolutionUseCase) {
    this.searchSolutionUseCase = searchSolutionUseCase;
  }


  public GoogleCloudRetailV2Control solutionTypes(List<SolutionTypesEnum> solutionTypes) {
    this.solutionTypes = solutionTypes;
    return this;
  }

  public GoogleCloudRetailV2Control addSolutionTypesItem(SolutionTypesEnum solutionTypesItem) {
    if (this.solutionTypes == null) {
      this.solutionTypes = new ArrayList<>();
    }
    this.solutionTypes.add(solutionTypesItem);
    return this;
  }

  /**
   * Required. Immutable. The solution types that the control is used for. Currently we support setting only one type of solution at creation time. Only &#x60;SOLUTION_TYPE_SEARCH&#x60; value is supported at the moment. If no solution type is provided at creation time, will default to SOLUTION_TYPE_SEARCH.
   * @return solutionTypes
   */
  @javax.annotation.Nullable
  public List<SolutionTypesEnum> getSolutionTypes() {
    return solutionTypes;
  }

  public void setSolutionTypes(List<SolutionTypesEnum> solutionTypes) {
    this.solutionTypes = solutionTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailV2Control googleCloudRetailV2Control = (GoogleCloudRetailV2Control) o;
    return Objects.equals(this.associatedServingConfigIds, googleCloudRetailV2Control.associatedServingConfigIds) &&
        Objects.equals(this.displayName, googleCloudRetailV2Control.displayName) &&
        Objects.equals(this.name, googleCloudRetailV2Control.name) &&
        Objects.equals(this.rule, googleCloudRetailV2Control.rule) &&
        Objects.equals(this.searchSolutionUseCase, googleCloudRetailV2Control.searchSolutionUseCase) &&
        Objects.equals(this.solutionTypes, googleCloudRetailV2Control.solutionTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associatedServingConfigIds, displayName, name, rule, searchSolutionUseCase, solutionTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailV2Control {\n");
    sb.append("    associatedServingConfigIds: ").append(toIndentedString(associatedServingConfigIds)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    searchSolutionUseCase: ").append(toIndentedString(searchSolutionUseCase)).append("\n");
    sb.append("    solutionTypes: ").append(toIndentedString(solutionTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("associatedServingConfigIds");
    openapiFields.add("displayName");
    openapiFields.add("name");
    openapiFields.add("rule");
    openapiFields.add("searchSolutionUseCase");
    openapiFields.add("solutionTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailV2Control
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailV2Control.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailV2Control is not found in the empty JSON string", GoogleCloudRetailV2Control.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailV2Control.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailV2Control` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("associatedServingConfigIds") != null && !jsonObj.get("associatedServingConfigIds").isJsonNull() && !jsonObj.get("associatedServingConfigIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `associatedServingConfigIds` to be an array in the JSON string but got `%s`", jsonObj.get("associatedServingConfigIds").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `rule`
      if (jsonObj.get("rule") != null && !jsonObj.get("rule").isJsonNull()) {
        GoogleCloudRetailV2Rule.validateJsonElement(jsonObj.get("rule"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("searchSolutionUseCase") != null && !jsonObj.get("searchSolutionUseCase").isJsonNull() && !jsonObj.get("searchSolutionUseCase").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchSolutionUseCase` to be an array in the JSON string but got `%s`", jsonObj.get("searchSolutionUseCase").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("solutionTypes") != null && !jsonObj.get("solutionTypes").isJsonNull() && !jsonObj.get("solutionTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `solutionTypes` to be an array in the JSON string but got `%s`", jsonObj.get("solutionTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailV2Control.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailV2Control' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailV2Control> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailV2Control.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailV2Control>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailV2Control value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailV2Control read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailV2Control given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailV2Control
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailV2Control
   */
  public static GoogleCloudRetailV2Control fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailV2Control.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailV2Control to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

