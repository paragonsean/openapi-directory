/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Replaces a term in the query. Multiple replacement candidates can be specified. All &#x60;query_terms&#x60; will be replaced with the replacement term. Example: Replace \&quot;gShoe\&quot; with \&quot;google shoe\&quot;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:22.008824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailV2RuleReplacementAction {
  public static final String SERIALIZED_NAME_QUERY_TERMS = "queryTerms";
  @SerializedName(SERIALIZED_NAME_QUERY_TERMS)
  private List<String> queryTerms = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPLACEMENT_TERM = "replacementTerm";
  @SerializedName(SERIALIZED_NAME_REPLACEMENT_TERM)
  private String replacementTerm;

  public static final String SERIALIZED_NAME_TERM = "term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private String term;

  public GoogleCloudRetailV2RuleReplacementAction() {
  }

  public GoogleCloudRetailV2RuleReplacementAction queryTerms(List<String> queryTerms) {
    this.queryTerms = queryTerms;
    return this;
  }

  public GoogleCloudRetailV2RuleReplacementAction addQueryTermsItem(String queryTermsItem) {
    if (this.queryTerms == null) {
      this.queryTerms = new ArrayList<>();
    }
    this.queryTerms.add(queryTermsItem);
    return this;
  }

  /**
   * Terms from the search query. Will be replaced by replacement term. Can specify up to 100 terms.
   * @return queryTerms
   */
  @javax.annotation.Nullable
  public List<String> getQueryTerms() {
    return queryTerms;
  }

  public void setQueryTerms(List<String> queryTerms) {
    this.queryTerms = queryTerms;
  }


  public GoogleCloudRetailV2RuleReplacementAction replacementTerm(String replacementTerm) {
    this.replacementTerm = replacementTerm;
    return this;
  }

  /**
   * Term that will be used for replacement.
   * @return replacementTerm
   */
  @javax.annotation.Nullable
  public String getReplacementTerm() {
    return replacementTerm;
  }

  public void setReplacementTerm(String replacementTerm) {
    this.replacementTerm = replacementTerm;
  }


  public GoogleCloudRetailV2RuleReplacementAction term(String term) {
    this.term = term;
    return this;
  }

  /**
   * Will be [deprecated &#x3D; true] post migration;
   * @return term
   */
  @javax.annotation.Nullable
  public String getTerm() {
    return term;
  }

  public void setTerm(String term) {
    this.term = term;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailV2RuleReplacementAction googleCloudRetailV2RuleReplacementAction = (GoogleCloudRetailV2RuleReplacementAction) o;
    return Objects.equals(this.queryTerms, googleCloudRetailV2RuleReplacementAction.queryTerms) &&
        Objects.equals(this.replacementTerm, googleCloudRetailV2RuleReplacementAction.replacementTerm) &&
        Objects.equals(this.term, googleCloudRetailV2RuleReplacementAction.term);
  }

  @Override
  public int hashCode() {
    return Objects.hash(queryTerms, replacementTerm, term);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailV2RuleReplacementAction {\n");
    sb.append("    queryTerms: ").append(toIndentedString(queryTerms)).append("\n");
    sb.append("    replacementTerm: ").append(toIndentedString(replacementTerm)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("queryTerms");
    openapiFields.add("replacementTerm");
    openapiFields.add("term");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailV2RuleReplacementAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailV2RuleReplacementAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailV2RuleReplacementAction is not found in the empty JSON string", GoogleCloudRetailV2RuleReplacementAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailV2RuleReplacementAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailV2RuleReplacementAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("queryTerms") != null && !jsonObj.get("queryTerms").isJsonNull() && !jsonObj.get("queryTerms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryTerms` to be an array in the JSON string but got `%s`", jsonObj.get("queryTerms").toString()));
      }
      if ((jsonObj.get("replacementTerm") != null && !jsonObj.get("replacementTerm").isJsonNull()) && !jsonObj.get("replacementTerm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replacementTerm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replacementTerm").toString()));
      }
      if ((jsonObj.get("term") != null && !jsonObj.get("term").isJsonNull()) && !jsonObj.get("term").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `term` to be a primitive type in the JSON string but got `%s`", jsonObj.get("term").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailV2RuleReplacementAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailV2RuleReplacementAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailV2RuleReplacementAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailV2RuleReplacementAction.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailV2RuleReplacementAction>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailV2RuleReplacementAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailV2RuleReplacementAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailV2RuleReplacementAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailV2RuleReplacementAction
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailV2RuleReplacementAction
   */
  public static GoogleCloudRetailV2RuleReplacementAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailV2RuleReplacementAction.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailV2RuleReplacementAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

