/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Replaces a set of textual facet values by the same (possibly different) merged facet value. Each facet value should appear at most once as a value per CatalogAttribute. This feature is available only for textual custom attributes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:22.008824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue {
  public static final String SERIALIZED_NAME_MERGED_VALUE = "mergedValue";
  @SerializedName(SERIALIZED_NAME_MERGED_VALUE)
  private String mergedValue;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<String> values = new ArrayList<>();

  public GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue() {
  }

  public GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue mergedValue(String mergedValue) {
    this.mergedValue = mergedValue;
    return this;
  }

  /**
   * All the previous values are replaced by this merged facet value. This merged_value must be non-empty and can have up to 128 characters.
   * @return mergedValue
   */
  @javax.annotation.Nullable
  public String getMergedValue() {
    return mergedValue;
  }

  public void setMergedValue(String mergedValue) {
    this.mergedValue = mergedValue;
  }


  public GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue values(List<String> values) {
    this.values = values;
    return this;
  }

  public GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue addValuesItem(String valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * All the facet values that are replaces by the same merged_value that follows. The maximum number of values per MergedFacetValue is 25. Each value can have up to 128 characters.
   * @return values
   */
  @javax.annotation.Nullable
  public List<String> getValues() {
    return values;
  }

  public void setValues(List<String> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue googleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue = (GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue) o;
    return Objects.equals(this.mergedValue, googleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue.mergedValue) &&
        Objects.equals(this.values, googleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mergedValue, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue {\n");
    sb.append("    mergedValue: ").append(toIndentedString(mergedValue)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mergedValue");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue is not found in the empty JSON string", GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mergedValue") != null && !jsonObj.get("mergedValue").isJsonNull()) && !jsonObj.get("mergedValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mergedValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mergedValue").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull() && !jsonObj.get("values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue
   */
  public static GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

