/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRetailV2alphaModelModelFeaturesConfig;
import org.openapitools.client.model.GoogleCloudRetailV2alphaModelPageOptimizationConfig;
import org.openapitools.client.model.GoogleCloudRetailV2alphaModelServingConfigList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata that describes the training and serving parameters of a Model. A Model can be associated with a ServingConfig and then queried through the Predict API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:22.008824-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailV2alphaModel {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  /**
   * Output only. The state of data requirements for this model: &#x60;DATA_OK&#x60; and &#x60;DATA_ERROR&#x60;. Recommendation model cannot be trained if the data is in &#x60;DATA_ERROR&#x60; state. Recommendation model can have &#x60;DATA_ERROR&#x60; state even if serving state is &#x60;ACTIVE&#x60;: models were trained successfully before, but cannot be refreshed because model no longer has sufficient data for training.
   */
  @JsonAdapter(DataStateEnum.Adapter.class)
  public enum DataStateEnum {
    STATE_UNSPECIFIED("DATA_STATE_UNSPECIFIED"),
    
    OK("DATA_OK"),
    
    ERROR("DATA_ERROR");

    private String value;

    DataStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataStateEnum fromValue(String value) {
      for (DataStateEnum b : DataStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_STATE = "dataState";
  @SerializedName(SERIALIZED_NAME_DATA_STATE)
  private DataStateEnum dataState;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * Optional. If &#x60;RECOMMENDATIONS_FILTERING_ENABLED&#x60;, recommendation filtering by attributes is enabled for the model.
   */
  @JsonAdapter(FilteringOptionEnum.Adapter.class)
  public enum FilteringOptionEnum {
    OPTION_UNSPECIFIED("RECOMMENDATIONS_FILTERING_OPTION_UNSPECIFIED"),
    
    DISABLED("RECOMMENDATIONS_FILTERING_DISABLED"),
    
    ENABLED("RECOMMENDATIONS_FILTERING_ENABLED");

    private String value;

    FilteringOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FilteringOptionEnum fromValue(String value) {
      for (FilteringOptionEnum b : FilteringOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FilteringOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FilteringOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FilteringOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FilteringOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FilteringOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILTERING_OPTION = "filteringOption";
  @SerializedName(SERIALIZED_NAME_FILTERING_OPTION)
  private FilteringOptionEnum filteringOption;

  public static final String SERIALIZED_NAME_LAST_TUNE_TIME = "lastTuneTime";
  @SerializedName(SERIALIZED_NAME_LAST_TUNE_TIME)
  private String lastTuneTime;

  public static final String SERIALIZED_NAME_MODEL_FEATURES_CONFIG = "modelFeaturesConfig";
  @SerializedName(SERIALIZED_NAME_MODEL_FEATURES_CONFIG)
  private GoogleCloudRetailV2alphaModelModelFeaturesConfig modelFeaturesConfig;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIMIZATION_OBJECTIVE = "optimizationObjective";
  @SerializedName(SERIALIZED_NAME_OPTIMIZATION_OBJECTIVE)
  private String optimizationObjective;

  public static final String SERIALIZED_NAME_PAGE_OPTIMIZATION_CONFIG = "pageOptimizationConfig";
  @SerializedName(SERIALIZED_NAME_PAGE_OPTIMIZATION_CONFIG)
  private GoogleCloudRetailV2alphaModelPageOptimizationConfig pageOptimizationConfig;

  /**
   * Optional. The state of periodic tuning. The period we use is 3 months - to do a one-off tune earlier use the &#x60;TuneModel&#x60; method. Default value is &#x60;PERIODIC_TUNING_ENABLED&#x60;.
   */
  @JsonAdapter(PeriodicTuningStateEnum.Adapter.class)
  public enum PeriodicTuningStateEnum {
    PERIODIC_TUNING_STATE_UNSPECIFIED("PERIODIC_TUNING_STATE_UNSPECIFIED"),
    
    PERIODIC_TUNING_DISABLED("PERIODIC_TUNING_DISABLED"),
    
    ALL_TUNING_DISABLED("ALL_TUNING_DISABLED"),
    
    PERIODIC_TUNING_ENABLED("PERIODIC_TUNING_ENABLED");

    private String value;

    PeriodicTuningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeriodicTuningStateEnum fromValue(String value) {
      for (PeriodicTuningStateEnum b : PeriodicTuningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PeriodicTuningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeriodicTuningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeriodicTuningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PeriodicTuningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PeriodicTuningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERIODIC_TUNING_STATE = "periodicTuningState";
  @SerializedName(SERIALIZED_NAME_PERIODIC_TUNING_STATE)
  private PeriodicTuningStateEnum periodicTuningState;

  public static final String SERIALIZED_NAME_SERVING_CONFIG_LISTS = "servingConfigLists";
  @SerializedName(SERIALIZED_NAME_SERVING_CONFIG_LISTS)
  private List<GoogleCloudRetailV2alphaModelServingConfigList> servingConfigLists = new ArrayList<>();

  /**
   * Output only. The serving state of the model: &#x60;ACTIVE&#x60;, &#x60;NOT_ACTIVE&#x60;.
   */
  @JsonAdapter(ServingStateEnum.Adapter.class)
  public enum ServingStateEnum {
    SERVING_STATE_UNSPECIFIED("SERVING_STATE_UNSPECIFIED"),
    
    INACTIVE("INACTIVE"),
    
    ACTIVE("ACTIVE"),
    
    TUNED("TUNED");

    private String value;

    ServingStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServingStateEnum fromValue(String value) {
      for (ServingStateEnum b : ServingStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServingStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServingStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServingStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServingStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServingStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVING_STATE = "servingState";
  @SerializedName(SERIALIZED_NAME_SERVING_STATE)
  private ServingStateEnum servingState;

  /**
   * Optional. The training state that the model is in (e.g. &#x60;TRAINING&#x60; or &#x60;PAUSED&#x60;). Since part of the cost of running the service is frequency of training - this can be used to determine when to train model in order to control cost. If not specified: the default value for &#x60;CreateModel&#x60; method is &#x60;TRAINING&#x60;. The default value for &#x60;UpdateModel&#x60; method is to keep the state the same as before.
   */
  @JsonAdapter(TrainingStateEnum.Adapter.class)
  public enum TrainingStateEnum {
    TRAINING_STATE_UNSPECIFIED("TRAINING_STATE_UNSPECIFIED"),
    
    PAUSED("PAUSED"),
    
    TRAINING("TRAINING");

    private String value;

    TrainingStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrainingStateEnum fromValue(String value) {
      for (TrainingStateEnum b : TrainingStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrainingStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrainingStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrainingStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrainingStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrainingStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRAINING_STATE = "trainingState";
  @SerializedName(SERIALIZED_NAME_TRAINING_STATE)
  private TrainingStateEnum trainingState;

  public static final String SERIALIZED_NAME_TUNING_OPERATION = "tuningOperation";
  @SerializedName(SERIALIZED_NAME_TUNING_OPERATION)
  private String tuningOperation;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public GoogleCloudRetailV2alphaModel() {
  }

  public GoogleCloudRetailV2alphaModel(
     String createTime, 
     DataStateEnum dataState, 
     String lastTuneTime, 
     List<GoogleCloudRetailV2alphaModelServingConfigList> servingConfigLists, 
     ServingStateEnum servingState, 
     String tuningOperation, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.dataState = dataState;
    this.lastTuneTime = lastTuneTime;
    this.servingConfigLists = servingConfigLists;
    this.servingState = servingState;
    this.tuningOperation = tuningOperation;
    this.updateTime = updateTime;
  }

  /**
   * Output only. Timestamp the Recommendation Model was created at.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The state of data requirements for this model: &#x60;DATA_OK&#x60; and &#x60;DATA_ERROR&#x60;. Recommendation model cannot be trained if the data is in &#x60;DATA_ERROR&#x60; state. Recommendation model can have &#x60;DATA_ERROR&#x60; state even if serving state is &#x60;ACTIVE&#x60;: models were trained successfully before, but cannot be refreshed because model no longer has sufficient data for training.
   * @return dataState
   */
  @javax.annotation.Nullable
  public DataStateEnum getDataState() {
    return dataState;
  }



  public GoogleCloudRetailV2alphaModel displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The display name of the model. Should be human readable, used to display Recommendation Models in the Retail Cloud Console Dashboard. UTF-8 encoded string with limit of 1024 characters.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudRetailV2alphaModel filteringOption(FilteringOptionEnum filteringOption) {
    this.filteringOption = filteringOption;
    return this;
  }

  /**
   * Optional. If &#x60;RECOMMENDATIONS_FILTERING_ENABLED&#x60;, recommendation filtering by attributes is enabled for the model.
   * @return filteringOption
   */
  @javax.annotation.Nullable
  public FilteringOptionEnum getFilteringOption() {
    return filteringOption;
  }

  public void setFilteringOption(FilteringOptionEnum filteringOption) {
    this.filteringOption = filteringOption;
  }


  /**
   * Output only. The timestamp when the latest successful tune finished.
   * @return lastTuneTime
   */
  @javax.annotation.Nullable
  public String getLastTuneTime() {
    return lastTuneTime;
  }



  public GoogleCloudRetailV2alphaModel modelFeaturesConfig(GoogleCloudRetailV2alphaModelModelFeaturesConfig modelFeaturesConfig) {
    this.modelFeaturesConfig = modelFeaturesConfig;
    return this;
  }

  /**
   * Get modelFeaturesConfig
   * @return modelFeaturesConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudRetailV2alphaModelModelFeaturesConfig getModelFeaturesConfig() {
    return modelFeaturesConfig;
  }

  public void setModelFeaturesConfig(GoogleCloudRetailV2alphaModelModelFeaturesConfig modelFeaturesConfig) {
    this.modelFeaturesConfig = modelFeaturesConfig;
  }


  public GoogleCloudRetailV2alphaModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The fully qualified resource name of the model. Format: &#x60;projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}&#x60; catalog_id has char limit of 50. recommendation_model_id has char limit of 40.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudRetailV2alphaModel optimizationObjective(String optimizationObjective) {
    this.optimizationObjective = optimizationObjective;
    return this;
  }

  /**
   * Optional. The optimization objective e.g. &#x60;cvr&#x60;. Currently supported values: &#x60;ctr&#x60;, &#x60;cvr&#x60;, &#x60;revenue-per-order&#x60;. If not specified, we choose default based on model type. Default depends on type of recommendation: &#x60;recommended-for-you&#x60; &#x3D;&gt; &#x60;ctr&#x60; &#x60;others-you-may-like&#x60; &#x3D;&gt; &#x60;ctr&#x60; &#x60;frequently-bought-together&#x60; &#x3D;&gt; &#x60;revenue_per_order&#x60; This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type &#x3D; &#x60;frequently-bought-together&#x60; and optimization_objective &#x3D; &#x60;ctr&#x60;), you receive an error 400 if you try to create/update a recommendation with this set of knobs.
   * @return optimizationObjective
   */
  @javax.annotation.Nullable
  public String getOptimizationObjective() {
    return optimizationObjective;
  }

  public void setOptimizationObjective(String optimizationObjective) {
    this.optimizationObjective = optimizationObjective;
  }


  public GoogleCloudRetailV2alphaModel pageOptimizationConfig(GoogleCloudRetailV2alphaModelPageOptimizationConfig pageOptimizationConfig) {
    this.pageOptimizationConfig = pageOptimizationConfig;
    return this;
  }

  /**
   * Get pageOptimizationConfig
   * @return pageOptimizationConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudRetailV2alphaModelPageOptimizationConfig getPageOptimizationConfig() {
    return pageOptimizationConfig;
  }

  public void setPageOptimizationConfig(GoogleCloudRetailV2alphaModelPageOptimizationConfig pageOptimizationConfig) {
    this.pageOptimizationConfig = pageOptimizationConfig;
  }


  public GoogleCloudRetailV2alphaModel periodicTuningState(PeriodicTuningStateEnum periodicTuningState) {
    this.periodicTuningState = periodicTuningState;
    return this;
  }

  /**
   * Optional. The state of periodic tuning. The period we use is 3 months - to do a one-off tune earlier use the &#x60;TuneModel&#x60; method. Default value is &#x60;PERIODIC_TUNING_ENABLED&#x60;.
   * @return periodicTuningState
   */
  @javax.annotation.Nullable
  public PeriodicTuningStateEnum getPeriodicTuningState() {
    return periodicTuningState;
  }

  public void setPeriodicTuningState(PeriodicTuningStateEnum periodicTuningState) {
    this.periodicTuningState = periodicTuningState;
  }


  /**
   * Output only. The list of valid serving configs associated with the PageOptimizationConfig.
   * @return servingConfigLists
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRetailV2alphaModelServingConfigList> getServingConfigLists() {
    return servingConfigLists;
  }



  /**
   * Output only. The serving state of the model: &#x60;ACTIVE&#x60;, &#x60;NOT_ACTIVE&#x60;.
   * @return servingState
   */
  @javax.annotation.Nullable
  public ServingStateEnum getServingState() {
    return servingState;
  }



  public GoogleCloudRetailV2alphaModel trainingState(TrainingStateEnum trainingState) {
    this.trainingState = trainingState;
    return this;
  }

  /**
   * Optional. The training state that the model is in (e.g. &#x60;TRAINING&#x60; or &#x60;PAUSED&#x60;). Since part of the cost of running the service is frequency of training - this can be used to determine when to train model in order to control cost. If not specified: the default value for &#x60;CreateModel&#x60; method is &#x60;TRAINING&#x60;. The default value for &#x60;UpdateModel&#x60; method is to keep the state the same as before.
   * @return trainingState
   */
  @javax.annotation.Nullable
  public TrainingStateEnum getTrainingState() {
    return trainingState;
  }

  public void setTrainingState(TrainingStateEnum trainingState) {
    this.trainingState = trainingState;
  }


  /**
   * Output only. The tune operation associated with the model. Can be used to determine if there is an ongoing tune for this recommendation. Empty field implies no tune is goig on.
   * @return tuningOperation
   */
  @javax.annotation.Nullable
  public String getTuningOperation() {
    return tuningOperation;
  }



  public GoogleCloudRetailV2alphaModel type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Required. The type of model e.g. &#x60;home-page&#x60;. Currently supported values: &#x60;recommended-for-you&#x60;, &#x60;others-you-may-like&#x60;, &#x60;frequently-bought-together&#x60;, &#x60;page-optimization&#x60;, &#x60;similar-items&#x60;, &#x60;buy-it-again&#x60;, &#x60;on-sale-items&#x60;, and &#x60;recently-viewed&#x60;(readonly value). This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type &#x3D; &#x60;frequently-bought-together&#x60; and optimization_objective &#x3D; &#x60;ctr&#x60;), you receive an error 400 if you try to create/update a recommendation with this set of knobs.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  /**
   * Output only. Timestamp the Recommendation Model was last updated. E.g. if a Recommendation Model was paused - this would be the time the pause was initiated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailV2alphaModel googleCloudRetailV2alphaModel = (GoogleCloudRetailV2alphaModel) o;
    return Objects.equals(this.createTime, googleCloudRetailV2alphaModel.createTime) &&
        Objects.equals(this.dataState, googleCloudRetailV2alphaModel.dataState) &&
        Objects.equals(this.displayName, googleCloudRetailV2alphaModel.displayName) &&
        Objects.equals(this.filteringOption, googleCloudRetailV2alphaModel.filteringOption) &&
        Objects.equals(this.lastTuneTime, googleCloudRetailV2alphaModel.lastTuneTime) &&
        Objects.equals(this.modelFeaturesConfig, googleCloudRetailV2alphaModel.modelFeaturesConfig) &&
        Objects.equals(this.name, googleCloudRetailV2alphaModel.name) &&
        Objects.equals(this.optimizationObjective, googleCloudRetailV2alphaModel.optimizationObjective) &&
        Objects.equals(this.pageOptimizationConfig, googleCloudRetailV2alphaModel.pageOptimizationConfig) &&
        Objects.equals(this.periodicTuningState, googleCloudRetailV2alphaModel.periodicTuningState) &&
        Objects.equals(this.servingConfigLists, googleCloudRetailV2alphaModel.servingConfigLists) &&
        Objects.equals(this.servingState, googleCloudRetailV2alphaModel.servingState) &&
        Objects.equals(this.trainingState, googleCloudRetailV2alphaModel.trainingState) &&
        Objects.equals(this.tuningOperation, googleCloudRetailV2alphaModel.tuningOperation) &&
        Objects.equals(this.type, googleCloudRetailV2alphaModel.type) &&
        Objects.equals(this.updateTime, googleCloudRetailV2alphaModel.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, dataState, displayName, filteringOption, lastTuneTime, modelFeaturesConfig, name, optimizationObjective, pageOptimizationConfig, periodicTuningState, servingConfigLists, servingState, trainingState, tuningOperation, type, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailV2alphaModel {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    dataState: ").append(toIndentedString(dataState)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    filteringOption: ").append(toIndentedString(filteringOption)).append("\n");
    sb.append("    lastTuneTime: ").append(toIndentedString(lastTuneTime)).append("\n");
    sb.append("    modelFeaturesConfig: ").append(toIndentedString(modelFeaturesConfig)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    optimizationObjective: ").append(toIndentedString(optimizationObjective)).append("\n");
    sb.append("    pageOptimizationConfig: ").append(toIndentedString(pageOptimizationConfig)).append("\n");
    sb.append("    periodicTuningState: ").append(toIndentedString(periodicTuningState)).append("\n");
    sb.append("    servingConfigLists: ").append(toIndentedString(servingConfigLists)).append("\n");
    sb.append("    servingState: ").append(toIndentedString(servingState)).append("\n");
    sb.append("    trainingState: ").append(toIndentedString(trainingState)).append("\n");
    sb.append("    tuningOperation: ").append(toIndentedString(tuningOperation)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("dataState");
    openapiFields.add("displayName");
    openapiFields.add("filteringOption");
    openapiFields.add("lastTuneTime");
    openapiFields.add("modelFeaturesConfig");
    openapiFields.add("name");
    openapiFields.add("optimizationObjective");
    openapiFields.add("pageOptimizationConfig");
    openapiFields.add("periodicTuningState");
    openapiFields.add("servingConfigLists");
    openapiFields.add("servingState");
    openapiFields.add("trainingState");
    openapiFields.add("tuningOperation");
    openapiFields.add("type");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailV2alphaModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailV2alphaModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailV2alphaModel is not found in the empty JSON string", GoogleCloudRetailV2alphaModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailV2alphaModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailV2alphaModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("dataState") != null && !jsonObj.get("dataState").isJsonNull()) && !jsonObj.get("dataState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataState").toString()));
      }
      // validate the optional field `dataState`
      if (jsonObj.get("dataState") != null && !jsonObj.get("dataState").isJsonNull()) {
        DataStateEnum.validateJsonElement(jsonObj.get("dataState"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("filteringOption") != null && !jsonObj.get("filteringOption").isJsonNull()) && !jsonObj.get("filteringOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filteringOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filteringOption").toString()));
      }
      // validate the optional field `filteringOption`
      if (jsonObj.get("filteringOption") != null && !jsonObj.get("filteringOption").isJsonNull()) {
        FilteringOptionEnum.validateJsonElement(jsonObj.get("filteringOption"));
      }
      if ((jsonObj.get("lastTuneTime") != null && !jsonObj.get("lastTuneTime").isJsonNull()) && !jsonObj.get("lastTuneTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastTuneTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastTuneTime").toString()));
      }
      // validate the optional field `modelFeaturesConfig`
      if (jsonObj.get("modelFeaturesConfig") != null && !jsonObj.get("modelFeaturesConfig").isJsonNull()) {
        GoogleCloudRetailV2alphaModelModelFeaturesConfig.validateJsonElement(jsonObj.get("modelFeaturesConfig"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("optimizationObjective") != null && !jsonObj.get("optimizationObjective").isJsonNull()) && !jsonObj.get("optimizationObjective").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optimizationObjective` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optimizationObjective").toString()));
      }
      // validate the optional field `pageOptimizationConfig`
      if (jsonObj.get("pageOptimizationConfig") != null && !jsonObj.get("pageOptimizationConfig").isJsonNull()) {
        GoogleCloudRetailV2alphaModelPageOptimizationConfig.validateJsonElement(jsonObj.get("pageOptimizationConfig"));
      }
      if ((jsonObj.get("periodicTuningState") != null && !jsonObj.get("periodicTuningState").isJsonNull()) && !jsonObj.get("periodicTuningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `periodicTuningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("periodicTuningState").toString()));
      }
      // validate the optional field `periodicTuningState`
      if (jsonObj.get("periodicTuningState") != null && !jsonObj.get("periodicTuningState").isJsonNull()) {
        PeriodicTuningStateEnum.validateJsonElement(jsonObj.get("periodicTuningState"));
      }
      if (jsonObj.get("servingConfigLists") != null && !jsonObj.get("servingConfigLists").isJsonNull()) {
        JsonArray jsonArrayservingConfigLists = jsonObj.getAsJsonArray("servingConfigLists");
        if (jsonArrayservingConfigLists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("servingConfigLists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `servingConfigLists` to be an array in the JSON string but got `%s`", jsonObj.get("servingConfigLists").toString()));
          }

          // validate the optional field `servingConfigLists` (array)
          for (int i = 0; i < jsonArrayservingConfigLists.size(); i++) {
            GoogleCloudRetailV2alphaModelServingConfigList.validateJsonElement(jsonArrayservingConfigLists.get(i));
          };
        }
      }
      if ((jsonObj.get("servingState") != null && !jsonObj.get("servingState").isJsonNull()) && !jsonObj.get("servingState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `servingState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("servingState").toString()));
      }
      // validate the optional field `servingState`
      if (jsonObj.get("servingState") != null && !jsonObj.get("servingState").isJsonNull()) {
        ServingStateEnum.validateJsonElement(jsonObj.get("servingState"));
      }
      if ((jsonObj.get("trainingState") != null && !jsonObj.get("trainingState").isJsonNull()) && !jsonObj.get("trainingState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainingState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trainingState").toString()));
      }
      // validate the optional field `trainingState`
      if (jsonObj.get("trainingState") != null && !jsonObj.get("trainingState").isJsonNull()) {
        TrainingStateEnum.validateJsonElement(jsonObj.get("trainingState"));
      }
      if ((jsonObj.get("tuningOperation") != null && !jsonObj.get("tuningOperation").isJsonNull()) && !jsonObj.get("tuningOperation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tuningOperation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tuningOperation").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailV2alphaModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailV2alphaModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailV2alphaModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailV2alphaModel.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailV2alphaModel>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailV2alphaModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailV2alphaModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailV2alphaModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailV2alphaModel
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailV2alphaModel
   */
  public static GoogleCloudRetailV2alphaModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailV2alphaModel.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailV2alphaModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

