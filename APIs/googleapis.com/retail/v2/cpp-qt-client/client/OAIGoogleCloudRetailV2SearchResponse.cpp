/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2SearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2SearchResponse::OAIGoogleCloudRetailV2SearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2SearchResponse::OAIGoogleCloudRetailV2SearchResponse() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2SearchResponse::~OAIGoogleCloudRetailV2SearchResponse() {}

void OAIGoogleCloudRetailV2SearchResponse::initializeModel() {

    m_applied_controls_isSet = false;
    m_applied_controls_isValid = false;

    m_attribution_token_isSet = false;
    m_attribution_token_isValid = false;

    m_corrected_query_isSet = false;
    m_corrected_query_isValid = false;

    m_experiment_info_isSet = false;
    m_experiment_info_isValid = false;

    m_facets_isSet = false;
    m_facets_isValid = false;

    m_invalid_condition_boost_specs_isSet = false;
    m_invalid_condition_boost_specs_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_query_expansion_info_isSet = false;
    m_query_expansion_info_isValid = false;

    m_redirect_uri_isSet = false;
    m_redirect_uri_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_total_size_isSet = false;
    m_total_size_isValid = false;
}

void OAIGoogleCloudRetailV2SearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2SearchResponse::fromJsonObject(QJsonObject json) {

    m_applied_controls_isValid = ::OpenAPI::fromJsonValue(m_applied_controls, json[QString("appliedControls")]);
    m_applied_controls_isSet = !json[QString("appliedControls")].isNull() && m_applied_controls_isValid;

    m_attribution_token_isValid = ::OpenAPI::fromJsonValue(m_attribution_token, json[QString("attributionToken")]);
    m_attribution_token_isSet = !json[QString("attributionToken")].isNull() && m_attribution_token_isValid;

    m_corrected_query_isValid = ::OpenAPI::fromJsonValue(m_corrected_query, json[QString("correctedQuery")]);
    m_corrected_query_isSet = !json[QString("correctedQuery")].isNull() && m_corrected_query_isValid;

    m_experiment_info_isValid = ::OpenAPI::fromJsonValue(m_experiment_info, json[QString("experimentInfo")]);
    m_experiment_info_isSet = !json[QString("experimentInfo")].isNull() && m_experiment_info_isValid;

    m_facets_isValid = ::OpenAPI::fromJsonValue(m_facets, json[QString("facets")]);
    m_facets_isSet = !json[QString("facets")].isNull() && m_facets_isValid;

    m_invalid_condition_boost_specs_isValid = ::OpenAPI::fromJsonValue(m_invalid_condition_boost_specs, json[QString("invalidConditionBoostSpecs")]);
    m_invalid_condition_boost_specs_isSet = !json[QString("invalidConditionBoostSpecs")].isNull() && m_invalid_condition_boost_specs_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_query_expansion_info_isValid = ::OpenAPI::fromJsonValue(m_query_expansion_info, json[QString("queryExpansionInfo")]);
    m_query_expansion_info_isSet = !json[QString("queryExpansionInfo")].isNull() && m_query_expansion_info_isValid;

    m_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_redirect_uri, json[QString("redirectUri")]);
    m_redirect_uri_isSet = !json[QString("redirectUri")].isNull() && m_redirect_uri_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_total_size_isValid = ::OpenAPI::fromJsonValue(m_total_size, json[QString("totalSize")]);
    m_total_size_isSet = !json[QString("totalSize")].isNull() && m_total_size_isValid;
}

QString OAIGoogleCloudRetailV2SearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2SearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_applied_controls.size() > 0) {
        obj.insert(QString("appliedControls"), ::OpenAPI::toJsonValue(m_applied_controls));
    }
    if (m_attribution_token_isSet) {
        obj.insert(QString("attributionToken"), ::OpenAPI::toJsonValue(m_attribution_token));
    }
    if (m_corrected_query_isSet) {
        obj.insert(QString("correctedQuery"), ::OpenAPI::toJsonValue(m_corrected_query));
    }
    if (m_experiment_info.size() > 0) {
        obj.insert(QString("experimentInfo"), ::OpenAPI::toJsonValue(m_experiment_info));
    }
    if (m_facets.size() > 0) {
        obj.insert(QString("facets"), ::OpenAPI::toJsonValue(m_facets));
    }
    if (m_invalid_condition_boost_specs.size() > 0) {
        obj.insert(QString("invalidConditionBoostSpecs"), ::OpenAPI::toJsonValue(m_invalid_condition_boost_specs));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_query_expansion_info.isSet()) {
        obj.insert(QString("queryExpansionInfo"), ::OpenAPI::toJsonValue(m_query_expansion_info));
    }
    if (m_redirect_uri_isSet) {
        obj.insert(QString("redirectUri"), ::OpenAPI::toJsonValue(m_redirect_uri));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_total_size_isSet) {
        obj.insert(QString("totalSize"), ::OpenAPI::toJsonValue(m_total_size));
    }
    return obj;
}

QList<QString> OAIGoogleCloudRetailV2SearchResponse::getAppliedControls() const {
    return m_applied_controls;
}
void OAIGoogleCloudRetailV2SearchResponse::setAppliedControls(const QList<QString> &applied_controls) {
    m_applied_controls = applied_controls;
    m_applied_controls_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_applied_controls_Set() const{
    return m_applied_controls_isSet;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_applied_controls_Valid() const{
    return m_applied_controls_isValid;
}

QString OAIGoogleCloudRetailV2SearchResponse::getAttributionToken() const {
    return m_attribution_token;
}
void OAIGoogleCloudRetailV2SearchResponse::setAttributionToken(const QString &attribution_token) {
    m_attribution_token = attribution_token;
    m_attribution_token_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_attribution_token_Set() const{
    return m_attribution_token_isSet;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_attribution_token_Valid() const{
    return m_attribution_token_isValid;
}

QString OAIGoogleCloudRetailV2SearchResponse::getCorrectedQuery() const {
    return m_corrected_query;
}
void OAIGoogleCloudRetailV2SearchResponse::setCorrectedQuery(const QString &corrected_query) {
    m_corrected_query = corrected_query;
    m_corrected_query_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_corrected_query_Set() const{
    return m_corrected_query_isSet;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_corrected_query_Valid() const{
    return m_corrected_query_isValid;
}

QList<OAIGoogleCloudRetailV2ExperimentInfo> OAIGoogleCloudRetailV2SearchResponse::getExperimentInfo() const {
    return m_experiment_info;
}
void OAIGoogleCloudRetailV2SearchResponse::setExperimentInfo(const QList<OAIGoogleCloudRetailV2ExperimentInfo> &experiment_info) {
    m_experiment_info = experiment_info;
    m_experiment_info_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_experiment_info_Set() const{
    return m_experiment_info_isSet;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_experiment_info_Valid() const{
    return m_experiment_info_isValid;
}

QList<OAIGoogleCloudRetailV2SearchResponseFacet> OAIGoogleCloudRetailV2SearchResponse::getFacets() const {
    return m_facets;
}
void OAIGoogleCloudRetailV2SearchResponse::setFacets(const QList<OAIGoogleCloudRetailV2SearchResponseFacet> &facets) {
    m_facets = facets;
    m_facets_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_facets_Set() const{
    return m_facets_isSet;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_facets_Valid() const{
    return m_facets_isValid;
}

QList<OAIGoogleCloudRetailV2SearchRequestBoostSpecConditionBoostSpec> OAIGoogleCloudRetailV2SearchResponse::getInvalidConditionBoostSpecs() const {
    return m_invalid_condition_boost_specs;
}
void OAIGoogleCloudRetailV2SearchResponse::setInvalidConditionBoostSpecs(const QList<OAIGoogleCloudRetailV2SearchRequestBoostSpecConditionBoostSpec> &invalid_condition_boost_specs) {
    m_invalid_condition_boost_specs = invalid_condition_boost_specs;
    m_invalid_condition_boost_specs_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_invalid_condition_boost_specs_Set() const{
    return m_invalid_condition_boost_specs_isSet;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_invalid_condition_boost_specs_Valid() const{
    return m_invalid_condition_boost_specs_isValid;
}

QString OAIGoogleCloudRetailV2SearchResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleCloudRetailV2SearchResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

OAIGoogleCloudRetailV2SearchResponseQueryExpansionInfo OAIGoogleCloudRetailV2SearchResponse::getQueryExpansionInfo() const {
    return m_query_expansion_info;
}
void OAIGoogleCloudRetailV2SearchResponse::setQueryExpansionInfo(const OAIGoogleCloudRetailV2SearchResponseQueryExpansionInfo &query_expansion_info) {
    m_query_expansion_info = query_expansion_info;
    m_query_expansion_info_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_query_expansion_info_Set() const{
    return m_query_expansion_info_isSet;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_query_expansion_info_Valid() const{
    return m_query_expansion_info_isValid;
}

QString OAIGoogleCloudRetailV2SearchResponse::getRedirectUri() const {
    return m_redirect_uri;
}
void OAIGoogleCloudRetailV2SearchResponse::setRedirectUri(const QString &redirect_uri) {
    m_redirect_uri = redirect_uri;
    m_redirect_uri_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_redirect_uri_Set() const{
    return m_redirect_uri_isSet;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_redirect_uri_Valid() const{
    return m_redirect_uri_isValid;
}

QList<OAIGoogleCloudRetailV2SearchResponseSearchResult> OAIGoogleCloudRetailV2SearchResponse::getResults() const {
    return m_results;
}
void OAIGoogleCloudRetailV2SearchResponse::setResults(const QList<OAIGoogleCloudRetailV2SearchResponseSearchResult> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_results_Set() const{
    return m_results_isSet;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_results_Valid() const{
    return m_results_isValid;
}

qint32 OAIGoogleCloudRetailV2SearchResponse::getTotalSize() const {
    return m_total_size;
}
void OAIGoogleCloudRetailV2SearchResponse::setTotalSize(const qint32 &total_size) {
    m_total_size = total_size;
    m_total_size_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_total_size_Set() const{
    return m_total_size_isSet;
}

bool OAIGoogleCloudRetailV2SearchResponse::is_total_size_Valid() const{
    return m_total_size_isValid;
}

bool OAIGoogleCloudRetailV2SearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applied_controls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribution_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corrected_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiment_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_facets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_condition_boost_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_expansion_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2SearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
