/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2RejoinUserEventsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2RejoinUserEventsRequest::OAIGoogleCloudRetailV2RejoinUserEventsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2RejoinUserEventsRequest::OAIGoogleCloudRetailV2RejoinUserEventsRequest() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2RejoinUserEventsRequest::~OAIGoogleCloudRetailV2RejoinUserEventsRequest() {}

void OAIGoogleCloudRetailV2RejoinUserEventsRequest::initializeModel() {

    m_user_event_rejoin_scope_isSet = false;
    m_user_event_rejoin_scope_isValid = false;
}

void OAIGoogleCloudRetailV2RejoinUserEventsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2RejoinUserEventsRequest::fromJsonObject(QJsonObject json) {

    m_user_event_rejoin_scope_isValid = ::OpenAPI::fromJsonValue(m_user_event_rejoin_scope, json[QString("userEventRejoinScope")]);
    m_user_event_rejoin_scope_isSet = !json[QString("userEventRejoinScope")].isNull() && m_user_event_rejoin_scope_isValid;
}

QString OAIGoogleCloudRetailV2RejoinUserEventsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2RejoinUserEventsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_user_event_rejoin_scope_isSet) {
        obj.insert(QString("userEventRejoinScope"), ::OpenAPI::toJsonValue(m_user_event_rejoin_scope));
    }
    return obj;
}

QString OAIGoogleCloudRetailV2RejoinUserEventsRequest::getUserEventRejoinScope() const {
    return m_user_event_rejoin_scope;
}
void OAIGoogleCloudRetailV2RejoinUserEventsRequest::setUserEventRejoinScope(const QString &user_event_rejoin_scope) {
    m_user_event_rejoin_scope = user_event_rejoin_scope;
    m_user_event_rejoin_scope_isSet = true;
}

bool OAIGoogleCloudRetailV2RejoinUserEventsRequest::is_user_event_rejoin_scope_Set() const{
    return m_user_event_rejoin_scope_isSet;
}

bool OAIGoogleCloudRetailV2RejoinUserEventsRequest::is_user_event_rejoin_scope_Valid() const{
    return m_user_event_rejoin_scope_isValid;
}

bool OAIGoogleCloudRetailV2RejoinUserEventsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_event_rejoin_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2RejoinUserEventsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
