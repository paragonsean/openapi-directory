/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2CatalogAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2CatalogAttribute::OAIGoogleCloudRetailV2CatalogAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2CatalogAttribute::OAIGoogleCloudRetailV2CatalogAttribute() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2CatalogAttribute::~OAIGoogleCloudRetailV2CatalogAttribute() {}

void OAIGoogleCloudRetailV2CatalogAttribute::initializeModel() {

    m_dynamic_facetable_option_isSet = false;
    m_dynamic_facetable_option_isValid = false;

    m_exact_searchable_option_isSet = false;
    m_exact_searchable_option_isValid = false;

    m_facet_config_isSet = false;
    m_facet_config_isValid = false;

    m_in_use_isSet = false;
    m_in_use_isValid = false;

    m_indexable_option_isSet = false;
    m_indexable_option_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_retrievable_option_isSet = false;
    m_retrievable_option_isValid = false;

    m_searchable_option_isSet = false;
    m_searchable_option_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleCloudRetailV2CatalogAttribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2CatalogAttribute::fromJsonObject(QJsonObject json) {

    m_dynamic_facetable_option_isValid = ::OpenAPI::fromJsonValue(m_dynamic_facetable_option, json[QString("dynamicFacetableOption")]);
    m_dynamic_facetable_option_isSet = !json[QString("dynamicFacetableOption")].isNull() && m_dynamic_facetable_option_isValid;

    m_exact_searchable_option_isValid = ::OpenAPI::fromJsonValue(m_exact_searchable_option, json[QString("exactSearchableOption")]);
    m_exact_searchable_option_isSet = !json[QString("exactSearchableOption")].isNull() && m_exact_searchable_option_isValid;

    m_facet_config_isValid = ::OpenAPI::fromJsonValue(m_facet_config, json[QString("facetConfig")]);
    m_facet_config_isSet = !json[QString("facetConfig")].isNull() && m_facet_config_isValid;

    m_in_use_isValid = ::OpenAPI::fromJsonValue(m_in_use, json[QString("inUse")]);
    m_in_use_isSet = !json[QString("inUse")].isNull() && m_in_use_isValid;

    m_indexable_option_isValid = ::OpenAPI::fromJsonValue(m_indexable_option, json[QString("indexableOption")]);
    m_indexable_option_isSet = !json[QString("indexableOption")].isNull() && m_indexable_option_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_retrievable_option_isValid = ::OpenAPI::fromJsonValue(m_retrievable_option, json[QString("retrievableOption")]);
    m_retrievable_option_isSet = !json[QString("retrievableOption")].isNull() && m_retrievable_option_isValid;

    m_searchable_option_isValid = ::OpenAPI::fromJsonValue(m_searchable_option, json[QString("searchableOption")]);
    m_searchable_option_isSet = !json[QString("searchableOption")].isNull() && m_searchable_option_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleCloudRetailV2CatalogAttribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2CatalogAttribute::asJsonObject() const {
    QJsonObject obj;
    if (m_dynamic_facetable_option_isSet) {
        obj.insert(QString("dynamicFacetableOption"), ::OpenAPI::toJsonValue(m_dynamic_facetable_option));
    }
    if (m_exact_searchable_option_isSet) {
        obj.insert(QString("exactSearchableOption"), ::OpenAPI::toJsonValue(m_exact_searchable_option));
    }
    if (m_facet_config.isSet()) {
        obj.insert(QString("facetConfig"), ::OpenAPI::toJsonValue(m_facet_config));
    }
    if (m_in_use_isSet) {
        obj.insert(QString("inUse"), ::OpenAPI::toJsonValue(m_in_use));
    }
    if (m_indexable_option_isSet) {
        obj.insert(QString("indexableOption"), ::OpenAPI::toJsonValue(m_indexable_option));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_retrievable_option_isSet) {
        obj.insert(QString("retrievableOption"), ::OpenAPI::toJsonValue(m_retrievable_option));
    }
    if (m_searchable_option_isSet) {
        obj.insert(QString("searchableOption"), ::OpenAPI::toJsonValue(m_searchable_option));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGoogleCloudRetailV2CatalogAttribute::getDynamicFacetableOption() const {
    return m_dynamic_facetable_option;
}
void OAIGoogleCloudRetailV2CatalogAttribute::setDynamicFacetableOption(const QString &dynamic_facetable_option) {
    m_dynamic_facetable_option = dynamic_facetable_option;
    m_dynamic_facetable_option_isSet = true;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::is_dynamic_facetable_option_Set() const{
    return m_dynamic_facetable_option_isSet;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::is_dynamic_facetable_option_Valid() const{
    return m_dynamic_facetable_option_isValid;
}

QString OAIGoogleCloudRetailV2CatalogAttribute::getExactSearchableOption() const {
    return m_exact_searchable_option;
}
void OAIGoogleCloudRetailV2CatalogAttribute::setExactSearchableOption(const QString &exact_searchable_option) {
    m_exact_searchable_option = exact_searchable_option;
    m_exact_searchable_option_isSet = true;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::is_exact_searchable_option_Set() const{
    return m_exact_searchable_option_isSet;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::is_exact_searchable_option_Valid() const{
    return m_exact_searchable_option_isValid;
}

OAIGoogleCloudRetailV2CatalogAttributeFacetConfig OAIGoogleCloudRetailV2CatalogAttribute::getFacetConfig() const {
    return m_facet_config;
}
void OAIGoogleCloudRetailV2CatalogAttribute::setFacetConfig(const OAIGoogleCloudRetailV2CatalogAttributeFacetConfig &facet_config) {
    m_facet_config = facet_config;
    m_facet_config_isSet = true;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::is_facet_config_Set() const{
    return m_facet_config_isSet;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::is_facet_config_Valid() const{
    return m_facet_config_isValid;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::isInUse() const {
    return m_in_use;
}
void OAIGoogleCloudRetailV2CatalogAttribute::setInUse(const bool &in_use) {
    m_in_use = in_use;
    m_in_use_isSet = true;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::is_in_use_Set() const{
    return m_in_use_isSet;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::is_in_use_Valid() const{
    return m_in_use_isValid;
}

QString OAIGoogleCloudRetailV2CatalogAttribute::getIndexableOption() const {
    return m_indexable_option;
}
void OAIGoogleCloudRetailV2CatalogAttribute::setIndexableOption(const QString &indexable_option) {
    m_indexable_option = indexable_option;
    m_indexable_option_isSet = true;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::is_indexable_option_Set() const{
    return m_indexable_option_isSet;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::is_indexable_option_Valid() const{
    return m_indexable_option_isValid;
}

QString OAIGoogleCloudRetailV2CatalogAttribute::getKey() const {
    return m_key;
}
void OAIGoogleCloudRetailV2CatalogAttribute::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::is_key_Set() const{
    return m_key_isSet;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIGoogleCloudRetailV2CatalogAttribute::getRetrievableOption() const {
    return m_retrievable_option;
}
void OAIGoogleCloudRetailV2CatalogAttribute::setRetrievableOption(const QString &retrievable_option) {
    m_retrievable_option = retrievable_option;
    m_retrievable_option_isSet = true;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::is_retrievable_option_Set() const{
    return m_retrievable_option_isSet;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::is_retrievable_option_Valid() const{
    return m_retrievable_option_isValid;
}

QString OAIGoogleCloudRetailV2CatalogAttribute::getSearchableOption() const {
    return m_searchable_option;
}
void OAIGoogleCloudRetailV2CatalogAttribute::setSearchableOption(const QString &searchable_option) {
    m_searchable_option = searchable_option;
    m_searchable_option_isSet = true;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::is_searchable_option_Set() const{
    return m_searchable_option_isSet;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::is_searchable_option_Valid() const{
    return m_searchable_option_isValid;
}

QString OAIGoogleCloudRetailV2CatalogAttribute::getType() const {
    return m_type;
}
void OAIGoogleCloudRetailV2CatalogAttribute::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dynamic_facetable_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exact_searchable_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indexable_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retrievable_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_searchable_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2CatalogAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
