/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2ServingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2ServingConfig::OAIGoogleCloudRetailV2ServingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2ServingConfig::OAIGoogleCloudRetailV2ServingConfig() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2ServingConfig::~OAIGoogleCloudRetailV2ServingConfig() {}

void OAIGoogleCloudRetailV2ServingConfig::initializeModel() {

    m_boost_control_ids_isSet = false;
    m_boost_control_ids_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_diversity_level_isSet = false;
    m_diversity_level_isValid = false;

    m_diversity_type_isSet = false;
    m_diversity_type_isValid = false;

    m_do_not_associate_control_ids_isSet = false;
    m_do_not_associate_control_ids_isValid = false;

    m_dynamic_facet_spec_isSet = false;
    m_dynamic_facet_spec_isValid = false;

    m_enable_category_filter_level_isSet = false;
    m_enable_category_filter_level_isValid = false;

    m_facet_control_ids_isSet = false;
    m_facet_control_ids_isValid = false;

    m_filter_control_ids_isSet = false;
    m_filter_control_ids_isValid = false;

    m_ignore_control_ids_isSet = false;
    m_ignore_control_ids_isValid = false;

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_oneway_synonyms_control_ids_isSet = false;
    m_oneway_synonyms_control_ids_isValid = false;

    m_personalization_spec_isSet = false;
    m_personalization_spec_isValid = false;

    m_price_reranking_level_isSet = false;
    m_price_reranking_level_isValid = false;

    m_redirect_control_ids_isSet = false;
    m_redirect_control_ids_isValid = false;

    m_replacement_control_ids_isSet = false;
    m_replacement_control_ids_isValid = false;

    m_solution_types_isSet = false;
    m_solution_types_isValid = false;

    m_twoway_synonyms_control_ids_isSet = false;
    m_twoway_synonyms_control_ids_isValid = false;
}

void OAIGoogleCloudRetailV2ServingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2ServingConfig::fromJsonObject(QJsonObject json) {

    m_boost_control_ids_isValid = ::OpenAPI::fromJsonValue(m_boost_control_ids, json[QString("boostControlIds")]);
    m_boost_control_ids_isSet = !json[QString("boostControlIds")].isNull() && m_boost_control_ids_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_diversity_level_isValid = ::OpenAPI::fromJsonValue(m_diversity_level, json[QString("diversityLevel")]);
    m_diversity_level_isSet = !json[QString("diversityLevel")].isNull() && m_diversity_level_isValid;

    m_diversity_type_isValid = ::OpenAPI::fromJsonValue(m_diversity_type, json[QString("diversityType")]);
    m_diversity_type_isSet = !json[QString("diversityType")].isNull() && m_diversity_type_isValid;

    m_do_not_associate_control_ids_isValid = ::OpenAPI::fromJsonValue(m_do_not_associate_control_ids, json[QString("doNotAssociateControlIds")]);
    m_do_not_associate_control_ids_isSet = !json[QString("doNotAssociateControlIds")].isNull() && m_do_not_associate_control_ids_isValid;

    m_dynamic_facet_spec_isValid = ::OpenAPI::fromJsonValue(m_dynamic_facet_spec, json[QString("dynamicFacetSpec")]);
    m_dynamic_facet_spec_isSet = !json[QString("dynamicFacetSpec")].isNull() && m_dynamic_facet_spec_isValid;

    m_enable_category_filter_level_isValid = ::OpenAPI::fromJsonValue(m_enable_category_filter_level, json[QString("enableCategoryFilterLevel")]);
    m_enable_category_filter_level_isSet = !json[QString("enableCategoryFilterLevel")].isNull() && m_enable_category_filter_level_isValid;

    m_facet_control_ids_isValid = ::OpenAPI::fromJsonValue(m_facet_control_ids, json[QString("facetControlIds")]);
    m_facet_control_ids_isSet = !json[QString("facetControlIds")].isNull() && m_facet_control_ids_isValid;

    m_filter_control_ids_isValid = ::OpenAPI::fromJsonValue(m_filter_control_ids, json[QString("filterControlIds")]);
    m_filter_control_ids_isSet = !json[QString("filterControlIds")].isNull() && m_filter_control_ids_isValid;

    m_ignore_control_ids_isValid = ::OpenAPI::fromJsonValue(m_ignore_control_ids, json[QString("ignoreControlIds")]);
    m_ignore_control_ids_isSet = !json[QString("ignoreControlIds")].isNull() && m_ignore_control_ids_isValid;

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("modelId")]);
    m_model_id_isSet = !json[QString("modelId")].isNull() && m_model_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_oneway_synonyms_control_ids_isValid = ::OpenAPI::fromJsonValue(m_oneway_synonyms_control_ids, json[QString("onewaySynonymsControlIds")]);
    m_oneway_synonyms_control_ids_isSet = !json[QString("onewaySynonymsControlIds")].isNull() && m_oneway_synonyms_control_ids_isValid;

    m_personalization_spec_isValid = ::OpenAPI::fromJsonValue(m_personalization_spec, json[QString("personalizationSpec")]);
    m_personalization_spec_isSet = !json[QString("personalizationSpec")].isNull() && m_personalization_spec_isValid;

    m_price_reranking_level_isValid = ::OpenAPI::fromJsonValue(m_price_reranking_level, json[QString("priceRerankingLevel")]);
    m_price_reranking_level_isSet = !json[QString("priceRerankingLevel")].isNull() && m_price_reranking_level_isValid;

    m_redirect_control_ids_isValid = ::OpenAPI::fromJsonValue(m_redirect_control_ids, json[QString("redirectControlIds")]);
    m_redirect_control_ids_isSet = !json[QString("redirectControlIds")].isNull() && m_redirect_control_ids_isValid;

    m_replacement_control_ids_isValid = ::OpenAPI::fromJsonValue(m_replacement_control_ids, json[QString("replacementControlIds")]);
    m_replacement_control_ids_isSet = !json[QString("replacementControlIds")].isNull() && m_replacement_control_ids_isValid;

    m_solution_types_isValid = ::OpenAPI::fromJsonValue(m_solution_types, json[QString("solutionTypes")]);
    m_solution_types_isSet = !json[QString("solutionTypes")].isNull() && m_solution_types_isValid;

    m_twoway_synonyms_control_ids_isValid = ::OpenAPI::fromJsonValue(m_twoway_synonyms_control_ids, json[QString("twowaySynonymsControlIds")]);
    m_twoway_synonyms_control_ids_isSet = !json[QString("twowaySynonymsControlIds")].isNull() && m_twoway_synonyms_control_ids_isValid;
}

QString OAIGoogleCloudRetailV2ServingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2ServingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_boost_control_ids.size() > 0) {
        obj.insert(QString("boostControlIds"), ::OpenAPI::toJsonValue(m_boost_control_ids));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_diversity_level_isSet) {
        obj.insert(QString("diversityLevel"), ::OpenAPI::toJsonValue(m_diversity_level));
    }
    if (m_diversity_type_isSet) {
        obj.insert(QString("diversityType"), ::OpenAPI::toJsonValue(m_diversity_type));
    }
    if (m_do_not_associate_control_ids.size() > 0) {
        obj.insert(QString("doNotAssociateControlIds"), ::OpenAPI::toJsonValue(m_do_not_associate_control_ids));
    }
    if (m_dynamic_facet_spec.isSet()) {
        obj.insert(QString("dynamicFacetSpec"), ::OpenAPI::toJsonValue(m_dynamic_facet_spec));
    }
    if (m_enable_category_filter_level_isSet) {
        obj.insert(QString("enableCategoryFilterLevel"), ::OpenAPI::toJsonValue(m_enable_category_filter_level));
    }
    if (m_facet_control_ids.size() > 0) {
        obj.insert(QString("facetControlIds"), ::OpenAPI::toJsonValue(m_facet_control_ids));
    }
    if (m_filter_control_ids.size() > 0) {
        obj.insert(QString("filterControlIds"), ::OpenAPI::toJsonValue(m_filter_control_ids));
    }
    if (m_ignore_control_ids.size() > 0) {
        obj.insert(QString("ignoreControlIds"), ::OpenAPI::toJsonValue(m_ignore_control_ids));
    }
    if (m_model_id_isSet) {
        obj.insert(QString("modelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_oneway_synonyms_control_ids.size() > 0) {
        obj.insert(QString("onewaySynonymsControlIds"), ::OpenAPI::toJsonValue(m_oneway_synonyms_control_ids));
    }
    if (m_personalization_spec.isSet()) {
        obj.insert(QString("personalizationSpec"), ::OpenAPI::toJsonValue(m_personalization_spec));
    }
    if (m_price_reranking_level_isSet) {
        obj.insert(QString("priceRerankingLevel"), ::OpenAPI::toJsonValue(m_price_reranking_level));
    }
    if (m_redirect_control_ids.size() > 0) {
        obj.insert(QString("redirectControlIds"), ::OpenAPI::toJsonValue(m_redirect_control_ids));
    }
    if (m_replacement_control_ids.size() > 0) {
        obj.insert(QString("replacementControlIds"), ::OpenAPI::toJsonValue(m_replacement_control_ids));
    }
    if (m_solution_types.size() > 0) {
        obj.insert(QString("solutionTypes"), ::OpenAPI::toJsonValue(m_solution_types));
    }
    if (m_twoway_synonyms_control_ids.size() > 0) {
        obj.insert(QString("twowaySynonymsControlIds"), ::OpenAPI::toJsonValue(m_twoway_synonyms_control_ids));
    }
    return obj;
}

QList<QString> OAIGoogleCloudRetailV2ServingConfig::getBoostControlIds() const {
    return m_boost_control_ids;
}
void OAIGoogleCloudRetailV2ServingConfig::setBoostControlIds(const QList<QString> &boost_control_ids) {
    m_boost_control_ids = boost_control_ids;
    m_boost_control_ids_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_boost_control_ids_Set() const{
    return m_boost_control_ids_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_boost_control_ids_Valid() const{
    return m_boost_control_ids_isValid;
}

QString OAIGoogleCloudRetailV2ServingConfig::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudRetailV2ServingConfig::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGoogleCloudRetailV2ServingConfig::getDiversityLevel() const {
    return m_diversity_level;
}
void OAIGoogleCloudRetailV2ServingConfig::setDiversityLevel(const QString &diversity_level) {
    m_diversity_level = diversity_level;
    m_diversity_level_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_diversity_level_Set() const{
    return m_diversity_level_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_diversity_level_Valid() const{
    return m_diversity_level_isValid;
}

QString OAIGoogleCloudRetailV2ServingConfig::getDiversityType() const {
    return m_diversity_type;
}
void OAIGoogleCloudRetailV2ServingConfig::setDiversityType(const QString &diversity_type) {
    m_diversity_type = diversity_type;
    m_diversity_type_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_diversity_type_Set() const{
    return m_diversity_type_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_diversity_type_Valid() const{
    return m_diversity_type_isValid;
}

QList<QString> OAIGoogleCloudRetailV2ServingConfig::getDoNotAssociateControlIds() const {
    return m_do_not_associate_control_ids;
}
void OAIGoogleCloudRetailV2ServingConfig::setDoNotAssociateControlIds(const QList<QString> &do_not_associate_control_ids) {
    m_do_not_associate_control_ids = do_not_associate_control_ids;
    m_do_not_associate_control_ids_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_do_not_associate_control_ids_Set() const{
    return m_do_not_associate_control_ids_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_do_not_associate_control_ids_Valid() const{
    return m_do_not_associate_control_ids_isValid;
}

OAIGoogleCloudRetailV2SearchRequestDynamicFacetSpec OAIGoogleCloudRetailV2ServingConfig::getDynamicFacetSpec() const {
    return m_dynamic_facet_spec;
}
void OAIGoogleCloudRetailV2ServingConfig::setDynamicFacetSpec(const OAIGoogleCloudRetailV2SearchRequestDynamicFacetSpec &dynamic_facet_spec) {
    m_dynamic_facet_spec = dynamic_facet_spec;
    m_dynamic_facet_spec_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_dynamic_facet_spec_Set() const{
    return m_dynamic_facet_spec_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_dynamic_facet_spec_Valid() const{
    return m_dynamic_facet_spec_isValid;
}

QString OAIGoogleCloudRetailV2ServingConfig::getEnableCategoryFilterLevel() const {
    return m_enable_category_filter_level;
}
void OAIGoogleCloudRetailV2ServingConfig::setEnableCategoryFilterLevel(const QString &enable_category_filter_level) {
    m_enable_category_filter_level = enable_category_filter_level;
    m_enable_category_filter_level_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_enable_category_filter_level_Set() const{
    return m_enable_category_filter_level_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_enable_category_filter_level_Valid() const{
    return m_enable_category_filter_level_isValid;
}

QList<QString> OAIGoogleCloudRetailV2ServingConfig::getFacetControlIds() const {
    return m_facet_control_ids;
}
void OAIGoogleCloudRetailV2ServingConfig::setFacetControlIds(const QList<QString> &facet_control_ids) {
    m_facet_control_ids = facet_control_ids;
    m_facet_control_ids_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_facet_control_ids_Set() const{
    return m_facet_control_ids_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_facet_control_ids_Valid() const{
    return m_facet_control_ids_isValid;
}

QList<QString> OAIGoogleCloudRetailV2ServingConfig::getFilterControlIds() const {
    return m_filter_control_ids;
}
void OAIGoogleCloudRetailV2ServingConfig::setFilterControlIds(const QList<QString> &filter_control_ids) {
    m_filter_control_ids = filter_control_ids;
    m_filter_control_ids_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_filter_control_ids_Set() const{
    return m_filter_control_ids_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_filter_control_ids_Valid() const{
    return m_filter_control_ids_isValid;
}

QList<QString> OAIGoogleCloudRetailV2ServingConfig::getIgnoreControlIds() const {
    return m_ignore_control_ids;
}
void OAIGoogleCloudRetailV2ServingConfig::setIgnoreControlIds(const QList<QString> &ignore_control_ids) {
    m_ignore_control_ids = ignore_control_ids;
    m_ignore_control_ids_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_ignore_control_ids_Set() const{
    return m_ignore_control_ids_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_ignore_control_ids_Valid() const{
    return m_ignore_control_ids_isValid;
}

QString OAIGoogleCloudRetailV2ServingConfig::getModelId() const {
    return m_model_id;
}
void OAIGoogleCloudRetailV2ServingConfig::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_model_id_Valid() const{
    return m_model_id_isValid;
}

QString OAIGoogleCloudRetailV2ServingConfig::getName() const {
    return m_name;
}
void OAIGoogleCloudRetailV2ServingConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIGoogleCloudRetailV2ServingConfig::getOnewaySynonymsControlIds() const {
    return m_oneway_synonyms_control_ids;
}
void OAIGoogleCloudRetailV2ServingConfig::setOnewaySynonymsControlIds(const QList<QString> &oneway_synonyms_control_ids) {
    m_oneway_synonyms_control_ids = oneway_synonyms_control_ids;
    m_oneway_synonyms_control_ids_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_oneway_synonyms_control_ids_Set() const{
    return m_oneway_synonyms_control_ids_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_oneway_synonyms_control_ids_Valid() const{
    return m_oneway_synonyms_control_ids_isValid;
}

OAIGoogleCloudRetailV2SearchRequestPersonalizationSpec OAIGoogleCloudRetailV2ServingConfig::getPersonalizationSpec() const {
    return m_personalization_spec;
}
void OAIGoogleCloudRetailV2ServingConfig::setPersonalizationSpec(const OAIGoogleCloudRetailV2SearchRequestPersonalizationSpec &personalization_spec) {
    m_personalization_spec = personalization_spec;
    m_personalization_spec_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_personalization_spec_Set() const{
    return m_personalization_spec_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_personalization_spec_Valid() const{
    return m_personalization_spec_isValid;
}

QString OAIGoogleCloudRetailV2ServingConfig::getPriceRerankingLevel() const {
    return m_price_reranking_level;
}
void OAIGoogleCloudRetailV2ServingConfig::setPriceRerankingLevel(const QString &price_reranking_level) {
    m_price_reranking_level = price_reranking_level;
    m_price_reranking_level_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_price_reranking_level_Set() const{
    return m_price_reranking_level_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_price_reranking_level_Valid() const{
    return m_price_reranking_level_isValid;
}

QList<QString> OAIGoogleCloudRetailV2ServingConfig::getRedirectControlIds() const {
    return m_redirect_control_ids;
}
void OAIGoogleCloudRetailV2ServingConfig::setRedirectControlIds(const QList<QString> &redirect_control_ids) {
    m_redirect_control_ids = redirect_control_ids;
    m_redirect_control_ids_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_redirect_control_ids_Set() const{
    return m_redirect_control_ids_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_redirect_control_ids_Valid() const{
    return m_redirect_control_ids_isValid;
}

QList<QString> OAIGoogleCloudRetailV2ServingConfig::getReplacementControlIds() const {
    return m_replacement_control_ids;
}
void OAIGoogleCloudRetailV2ServingConfig::setReplacementControlIds(const QList<QString> &replacement_control_ids) {
    m_replacement_control_ids = replacement_control_ids;
    m_replacement_control_ids_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_replacement_control_ids_Set() const{
    return m_replacement_control_ids_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_replacement_control_ids_Valid() const{
    return m_replacement_control_ids_isValid;
}

QList<QString> OAIGoogleCloudRetailV2ServingConfig::getSolutionTypes() const {
    return m_solution_types;
}
void OAIGoogleCloudRetailV2ServingConfig::setSolutionTypes(const QList<QString> &solution_types) {
    m_solution_types = solution_types;
    m_solution_types_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_solution_types_Set() const{
    return m_solution_types_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_solution_types_Valid() const{
    return m_solution_types_isValid;
}

QList<QString> OAIGoogleCloudRetailV2ServingConfig::getTwowaySynonymsControlIds() const {
    return m_twoway_synonyms_control_ids;
}
void OAIGoogleCloudRetailV2ServingConfig::setTwowaySynonymsControlIds(const QList<QString> &twoway_synonyms_control_ids) {
    m_twoway_synonyms_control_ids = twoway_synonyms_control_ids;
    m_twoway_synonyms_control_ids_isSet = true;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_twoway_synonyms_control_ids_Set() const{
    return m_twoway_synonyms_control_ids_isSet;
}

bool OAIGoogleCloudRetailV2ServingConfig::is_twoway_synonyms_control_ids_Valid() const{
    return m_twoway_synonyms_control_ids_isValid;
}

bool OAIGoogleCloudRetailV2ServingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boost_control_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diversity_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diversity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_associate_control_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_facet_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_category_filter_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_control_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_control_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_control_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oneway_synonyms_control_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_personalization_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_reranking_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_control_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_replacement_control_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_solution_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_twoway_synonyms_control_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2ServingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
