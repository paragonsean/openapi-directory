/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2SetInventoryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2SetInventoryRequest::OAIGoogleCloudRetailV2SetInventoryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2SetInventoryRequest::OAIGoogleCloudRetailV2SetInventoryRequest() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2SetInventoryRequest::~OAIGoogleCloudRetailV2SetInventoryRequest() {}

void OAIGoogleCloudRetailV2SetInventoryRequest::initializeModel() {

    m_allow_missing_isSet = false;
    m_allow_missing_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_set_mask_isSet = false;
    m_set_mask_isValid = false;

    m_set_time_isSet = false;
    m_set_time_isValid = false;
}

void OAIGoogleCloudRetailV2SetInventoryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2SetInventoryRequest::fromJsonObject(QJsonObject json) {

    m_allow_missing_isValid = ::OpenAPI::fromJsonValue(m_allow_missing, json[QString("allowMissing")]);
    m_allow_missing_isSet = !json[QString("allowMissing")].isNull() && m_allow_missing_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_set_mask_isValid = ::OpenAPI::fromJsonValue(m_set_mask, json[QString("setMask")]);
    m_set_mask_isSet = !json[QString("setMask")].isNull() && m_set_mask_isValid;

    m_set_time_isValid = ::OpenAPI::fromJsonValue(m_set_time, json[QString("setTime")]);
    m_set_time_isSet = !json[QString("setTime")].isNull() && m_set_time_isValid;
}

QString OAIGoogleCloudRetailV2SetInventoryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2SetInventoryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_missing_isSet) {
        obj.insert(QString("allowMissing"), ::OpenAPI::toJsonValue(m_allow_missing));
    }
    if (m_inventory.isSet()) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_set_mask_isSet) {
        obj.insert(QString("setMask"), ::OpenAPI::toJsonValue(m_set_mask));
    }
    if (m_set_time_isSet) {
        obj.insert(QString("setTime"), ::OpenAPI::toJsonValue(m_set_time));
    }
    return obj;
}

bool OAIGoogleCloudRetailV2SetInventoryRequest::isAllowMissing() const {
    return m_allow_missing;
}
void OAIGoogleCloudRetailV2SetInventoryRequest::setAllowMissing(const bool &allow_missing) {
    m_allow_missing = allow_missing;
    m_allow_missing_isSet = true;
}

bool OAIGoogleCloudRetailV2SetInventoryRequest::is_allow_missing_Set() const{
    return m_allow_missing_isSet;
}

bool OAIGoogleCloudRetailV2SetInventoryRequest::is_allow_missing_Valid() const{
    return m_allow_missing_isValid;
}

OAIGoogleCloudRetailV2Product OAIGoogleCloudRetailV2SetInventoryRequest::getInventory() const {
    return m_inventory;
}
void OAIGoogleCloudRetailV2SetInventoryRequest::setInventory(const OAIGoogleCloudRetailV2Product &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAIGoogleCloudRetailV2SetInventoryRequest::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAIGoogleCloudRetailV2SetInventoryRequest::is_inventory_Valid() const{
    return m_inventory_isValid;
}

QString OAIGoogleCloudRetailV2SetInventoryRequest::getSetMask() const {
    return m_set_mask;
}
void OAIGoogleCloudRetailV2SetInventoryRequest::setSetMask(const QString &set_mask) {
    m_set_mask = set_mask;
    m_set_mask_isSet = true;
}

bool OAIGoogleCloudRetailV2SetInventoryRequest::is_set_mask_Set() const{
    return m_set_mask_isSet;
}

bool OAIGoogleCloudRetailV2SetInventoryRequest::is_set_mask_Valid() const{
    return m_set_mask_isValid;
}

QString OAIGoogleCloudRetailV2SetInventoryRequest::getSetTime() const {
    return m_set_time;
}
void OAIGoogleCloudRetailV2SetInventoryRequest::setSetTime(const QString &set_time) {
    m_set_time = set_time;
    m_set_time_isSet = true;
}

bool OAIGoogleCloudRetailV2SetInventoryRequest::is_set_time_Set() const{
    return m_set_time_isSet;
}

bool OAIGoogleCloudRetailV2SetInventoryRequest::is_set_time_Valid() const{
    return m_set_time_isValid;
}

bool OAIGoogleCloudRetailV2SetInventoryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2SetInventoryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
