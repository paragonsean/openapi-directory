/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2ListControlsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2ListControlsResponse::OAIGoogleCloudRetailV2ListControlsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2ListControlsResponse::OAIGoogleCloudRetailV2ListControlsResponse() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2ListControlsResponse::~OAIGoogleCloudRetailV2ListControlsResponse() {}

void OAIGoogleCloudRetailV2ListControlsResponse::initializeModel() {

    m_controls_isSet = false;
    m_controls_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGoogleCloudRetailV2ListControlsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2ListControlsResponse::fromJsonObject(QJsonObject json) {

    m_controls_isValid = ::OpenAPI::fromJsonValue(m_controls, json[QString("controls")]);
    m_controls_isSet = !json[QString("controls")].isNull() && m_controls_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGoogleCloudRetailV2ListControlsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2ListControlsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_controls.size() > 0) {
        obj.insert(QString("controls"), ::OpenAPI::toJsonValue(m_controls));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIGoogleCloudRetailV2Control> OAIGoogleCloudRetailV2ListControlsResponse::getControls() const {
    return m_controls;
}
void OAIGoogleCloudRetailV2ListControlsResponse::setControls(const QList<OAIGoogleCloudRetailV2Control> &controls) {
    m_controls = controls;
    m_controls_isSet = true;
}

bool OAIGoogleCloudRetailV2ListControlsResponse::is_controls_Set() const{
    return m_controls_isSet;
}

bool OAIGoogleCloudRetailV2ListControlsResponse::is_controls_Valid() const{
    return m_controls_isValid;
}

QString OAIGoogleCloudRetailV2ListControlsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleCloudRetailV2ListControlsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleCloudRetailV2ListControlsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleCloudRetailV2ListControlsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGoogleCloudRetailV2ListControlsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_controls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2ListControlsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
