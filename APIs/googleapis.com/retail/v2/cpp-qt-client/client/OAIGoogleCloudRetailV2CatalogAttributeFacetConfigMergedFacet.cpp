/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet::OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet::OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet::~OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet() {}

void OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet::initializeModel() {

    m_merged_facet_key_isSet = false;
    m_merged_facet_key_isValid = false;

    m_merged_facet_values_isSet = false;
    m_merged_facet_values_isValid = false;
}

void OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet::fromJsonObject(QJsonObject json) {

    m_merged_facet_key_isValid = ::OpenAPI::fromJsonValue(m_merged_facet_key, json[QString("mergedFacetKey")]);
    m_merged_facet_key_isSet = !json[QString("mergedFacetKey")].isNull() && m_merged_facet_key_isValid;

    m_merged_facet_values_isValid = ::OpenAPI::fromJsonValue(m_merged_facet_values, json[QString("mergedFacetValues")]);
    m_merged_facet_values_isSet = !json[QString("mergedFacetValues")].isNull() && m_merged_facet_values_isValid;
}

QString OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet::asJsonObject() const {
    QJsonObject obj;
    if (m_merged_facet_key_isSet) {
        obj.insert(QString("mergedFacetKey"), ::OpenAPI::toJsonValue(m_merged_facet_key));
    }
    if (m_merged_facet_values.size() > 0) {
        obj.insert(QString("mergedFacetValues"), ::OpenAPI::toJsonValue(m_merged_facet_values));
    }
    return obj;
}

QString OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet::getMergedFacetKey() const {
    return m_merged_facet_key;
}
void OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet::setMergedFacetKey(const QString &merged_facet_key) {
    m_merged_facet_key = merged_facet_key;
    m_merged_facet_key_isSet = true;
}

bool OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet::is_merged_facet_key_Set() const{
    return m_merged_facet_key_isSet;
}

bool OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet::is_merged_facet_key_Valid() const{
    return m_merged_facet_key_isValid;
}

QList<OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue> OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet::getMergedFacetValues() const {
    return m_merged_facet_values;
}
void OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet::setMergedFacetValues(const QList<OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacetValue> &merged_facet_values) {
    m_merged_facet_values = merged_facet_values;
    m_merged_facet_values_isSet = true;
}

bool OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet::is_merged_facet_values_Set() const{
    return m_merged_facet_values_isSet;
}

bool OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet::is_merged_facet_values_Valid() const{
    return m_merged_facet_values_isValid;
}

bool OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_merged_facet_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_facet_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2CatalogAttributeFacetConfigMergedFacet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
