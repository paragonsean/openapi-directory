/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2SearchRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2SearchRequest::OAIGoogleCloudRetailV2SearchRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2SearchRequest::OAIGoogleCloudRetailV2SearchRequest() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2SearchRequest::~OAIGoogleCloudRetailV2SearchRequest() {}

void OAIGoogleCloudRetailV2SearchRequest::initializeModel() {

    m_boost_spec_isSet = false;
    m_boost_spec_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_canonical_filter_isSet = false;
    m_canonical_filter_isValid = false;

    m_dynamic_facet_spec_isSet = false;
    m_dynamic_facet_spec_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_facet_specs_isSet = false;
    m_facet_specs_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_page_categories_isSet = false;
    m_page_categories_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_personalization_spec_isSet = false;
    m_personalization_spec_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_query_expansion_spec_isSet = false;
    m_query_expansion_spec_isValid = false;

    m_search_mode_isSet = false;
    m_search_mode_isValid = false;

    m_spell_correction_spec_isSet = false;
    m_spell_correction_spec_isValid = false;

    m_user_info_isSet = false;
    m_user_info_isValid = false;

    m_variant_rollup_keys_isSet = false;
    m_variant_rollup_keys_isValid = false;

    m_visitor_id_isSet = false;
    m_visitor_id_isValid = false;
}

void OAIGoogleCloudRetailV2SearchRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2SearchRequest::fromJsonObject(QJsonObject json) {

    m_boost_spec_isValid = ::OpenAPI::fromJsonValue(m_boost_spec, json[QString("boostSpec")]);
    m_boost_spec_isSet = !json[QString("boostSpec")].isNull() && m_boost_spec_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_canonical_filter_isValid = ::OpenAPI::fromJsonValue(m_canonical_filter, json[QString("canonicalFilter")]);
    m_canonical_filter_isSet = !json[QString("canonicalFilter")].isNull() && m_canonical_filter_isValid;

    m_dynamic_facet_spec_isValid = ::OpenAPI::fromJsonValue(m_dynamic_facet_spec, json[QString("dynamicFacetSpec")]);
    m_dynamic_facet_spec_isSet = !json[QString("dynamicFacetSpec")].isNull() && m_dynamic_facet_spec_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_facet_specs_isValid = ::OpenAPI::fromJsonValue(m_facet_specs, json[QString("facetSpecs")]);
    m_facet_specs_isSet = !json[QString("facetSpecs")].isNull() && m_facet_specs_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;

    m_page_categories_isValid = ::OpenAPI::fromJsonValue(m_page_categories, json[QString("pageCategories")]);
    m_page_categories_isSet = !json[QString("pageCategories")].isNull() && m_page_categories_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;

    m_personalization_spec_isValid = ::OpenAPI::fromJsonValue(m_personalization_spec, json[QString("personalizationSpec")]);
    m_personalization_spec_isSet = !json[QString("personalizationSpec")].isNull() && m_personalization_spec_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_query_expansion_spec_isValid = ::OpenAPI::fromJsonValue(m_query_expansion_spec, json[QString("queryExpansionSpec")]);
    m_query_expansion_spec_isSet = !json[QString("queryExpansionSpec")].isNull() && m_query_expansion_spec_isValid;

    m_search_mode_isValid = ::OpenAPI::fromJsonValue(m_search_mode, json[QString("searchMode")]);
    m_search_mode_isSet = !json[QString("searchMode")].isNull() && m_search_mode_isValid;

    m_spell_correction_spec_isValid = ::OpenAPI::fromJsonValue(m_spell_correction_spec, json[QString("spellCorrectionSpec")]);
    m_spell_correction_spec_isSet = !json[QString("spellCorrectionSpec")].isNull() && m_spell_correction_spec_isValid;

    m_user_info_isValid = ::OpenAPI::fromJsonValue(m_user_info, json[QString("userInfo")]);
    m_user_info_isSet = !json[QString("userInfo")].isNull() && m_user_info_isValid;

    m_variant_rollup_keys_isValid = ::OpenAPI::fromJsonValue(m_variant_rollup_keys, json[QString("variantRollupKeys")]);
    m_variant_rollup_keys_isSet = !json[QString("variantRollupKeys")].isNull() && m_variant_rollup_keys_isValid;

    m_visitor_id_isValid = ::OpenAPI::fromJsonValue(m_visitor_id, json[QString("visitorId")]);
    m_visitor_id_isSet = !json[QString("visitorId")].isNull() && m_visitor_id_isValid;
}

QString OAIGoogleCloudRetailV2SearchRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2SearchRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_boost_spec.isSet()) {
        obj.insert(QString("boostSpec"), ::OpenAPI::toJsonValue(m_boost_spec));
    }
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_canonical_filter_isSet) {
        obj.insert(QString("canonicalFilter"), ::OpenAPI::toJsonValue(m_canonical_filter));
    }
    if (m_dynamic_facet_spec.isSet()) {
        obj.insert(QString("dynamicFacetSpec"), ::OpenAPI::toJsonValue(m_dynamic_facet_spec));
    }
    if (m_entity_isSet) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_facet_specs.size() > 0) {
        obj.insert(QString("facetSpecs"), ::OpenAPI::toJsonValue(m_facet_specs));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_order_by_isSet) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_page_categories.size() > 0) {
        obj.insert(QString("pageCategories"), ::OpenAPI::toJsonValue(m_page_categories));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_personalization_spec.isSet()) {
        obj.insert(QString("personalizationSpec"), ::OpenAPI::toJsonValue(m_personalization_spec));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_query_expansion_spec.isSet()) {
        obj.insert(QString("queryExpansionSpec"), ::OpenAPI::toJsonValue(m_query_expansion_spec));
    }
    if (m_search_mode_isSet) {
        obj.insert(QString("searchMode"), ::OpenAPI::toJsonValue(m_search_mode));
    }
    if (m_spell_correction_spec.isSet()) {
        obj.insert(QString("spellCorrectionSpec"), ::OpenAPI::toJsonValue(m_spell_correction_spec));
    }
    if (m_user_info.isSet()) {
        obj.insert(QString("userInfo"), ::OpenAPI::toJsonValue(m_user_info));
    }
    if (m_variant_rollup_keys.size() > 0) {
        obj.insert(QString("variantRollupKeys"), ::OpenAPI::toJsonValue(m_variant_rollup_keys));
    }
    if (m_visitor_id_isSet) {
        obj.insert(QString("visitorId"), ::OpenAPI::toJsonValue(m_visitor_id));
    }
    return obj;
}

OAIGoogleCloudRetailV2SearchRequestBoostSpec OAIGoogleCloudRetailV2SearchRequest::getBoostSpec() const {
    return m_boost_spec;
}
void OAIGoogleCloudRetailV2SearchRequest::setBoostSpec(const OAIGoogleCloudRetailV2SearchRequestBoostSpec &boost_spec) {
    m_boost_spec = boost_spec;
    m_boost_spec_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_boost_spec_Set() const{
    return m_boost_spec_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_boost_spec_Valid() const{
    return m_boost_spec_isValid;
}

QString OAIGoogleCloudRetailV2SearchRequest::getBranch() const {
    return m_branch;
}
void OAIGoogleCloudRetailV2SearchRequest::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAIGoogleCloudRetailV2SearchRequest::getCanonicalFilter() const {
    return m_canonical_filter;
}
void OAIGoogleCloudRetailV2SearchRequest::setCanonicalFilter(const QString &canonical_filter) {
    m_canonical_filter = canonical_filter;
    m_canonical_filter_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_canonical_filter_Set() const{
    return m_canonical_filter_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_canonical_filter_Valid() const{
    return m_canonical_filter_isValid;
}

OAIGoogleCloudRetailV2SearchRequestDynamicFacetSpec OAIGoogleCloudRetailV2SearchRequest::getDynamicFacetSpec() const {
    return m_dynamic_facet_spec;
}
void OAIGoogleCloudRetailV2SearchRequest::setDynamicFacetSpec(const OAIGoogleCloudRetailV2SearchRequestDynamicFacetSpec &dynamic_facet_spec) {
    m_dynamic_facet_spec = dynamic_facet_spec;
    m_dynamic_facet_spec_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_dynamic_facet_spec_Set() const{
    return m_dynamic_facet_spec_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_dynamic_facet_spec_Valid() const{
    return m_dynamic_facet_spec_isValid;
}

QString OAIGoogleCloudRetailV2SearchRequest::getEntity() const {
    return m_entity;
}
void OAIGoogleCloudRetailV2SearchRequest::setEntity(const QString &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_entity_Valid() const{
    return m_entity_isValid;
}

QList<OAIGoogleCloudRetailV2SearchRequestFacetSpec> OAIGoogleCloudRetailV2SearchRequest::getFacetSpecs() const {
    return m_facet_specs;
}
void OAIGoogleCloudRetailV2SearchRequest::setFacetSpecs(const QList<OAIGoogleCloudRetailV2SearchRequestFacetSpec> &facet_specs) {
    m_facet_specs = facet_specs;
    m_facet_specs_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_facet_specs_Set() const{
    return m_facet_specs_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_facet_specs_Valid() const{
    return m_facet_specs_isValid;
}

QString OAIGoogleCloudRetailV2SearchRequest::getFilter() const {
    return m_filter;
}
void OAIGoogleCloudRetailV2SearchRequest::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

QMap<QString, QString> OAIGoogleCloudRetailV2SearchRequest::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudRetailV2SearchRequest::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_labels_Valid() const{
    return m_labels_isValid;
}

qint32 OAIGoogleCloudRetailV2SearchRequest::getOffset() const {
    return m_offset;
}
void OAIGoogleCloudRetailV2SearchRequest::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAIGoogleCloudRetailV2SearchRequest::getOrderBy() const {
    return m_order_by;
}
void OAIGoogleCloudRetailV2SearchRequest::setOrderBy(const QString &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_order_by_Valid() const{
    return m_order_by_isValid;
}

QList<QString> OAIGoogleCloudRetailV2SearchRequest::getPageCategories() const {
    return m_page_categories;
}
void OAIGoogleCloudRetailV2SearchRequest::setPageCategories(const QList<QString> &page_categories) {
    m_page_categories = page_categories;
    m_page_categories_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_page_categories_Set() const{
    return m_page_categories_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_page_categories_Valid() const{
    return m_page_categories_isValid;
}

qint32 OAIGoogleCloudRetailV2SearchRequest::getPageSize() const {
    return m_page_size;
}
void OAIGoogleCloudRetailV2SearchRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIGoogleCloudRetailV2SearchRequest::getPageToken() const {
    return m_page_token;
}
void OAIGoogleCloudRetailV2SearchRequest::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_page_token_Valid() const{
    return m_page_token_isValid;
}

OAIGoogleCloudRetailV2SearchRequestPersonalizationSpec OAIGoogleCloudRetailV2SearchRequest::getPersonalizationSpec() const {
    return m_personalization_spec;
}
void OAIGoogleCloudRetailV2SearchRequest::setPersonalizationSpec(const OAIGoogleCloudRetailV2SearchRequestPersonalizationSpec &personalization_spec) {
    m_personalization_spec = personalization_spec;
    m_personalization_spec_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_personalization_spec_Set() const{
    return m_personalization_spec_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_personalization_spec_Valid() const{
    return m_personalization_spec_isValid;
}

QString OAIGoogleCloudRetailV2SearchRequest::getQuery() const {
    return m_query;
}
void OAIGoogleCloudRetailV2SearchRequest::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_query_Valid() const{
    return m_query_isValid;
}

OAIGoogleCloudRetailV2SearchRequestQueryExpansionSpec OAIGoogleCloudRetailV2SearchRequest::getQueryExpansionSpec() const {
    return m_query_expansion_spec;
}
void OAIGoogleCloudRetailV2SearchRequest::setQueryExpansionSpec(const OAIGoogleCloudRetailV2SearchRequestQueryExpansionSpec &query_expansion_spec) {
    m_query_expansion_spec = query_expansion_spec;
    m_query_expansion_spec_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_query_expansion_spec_Set() const{
    return m_query_expansion_spec_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_query_expansion_spec_Valid() const{
    return m_query_expansion_spec_isValid;
}

QString OAIGoogleCloudRetailV2SearchRequest::getSearchMode() const {
    return m_search_mode;
}
void OAIGoogleCloudRetailV2SearchRequest::setSearchMode(const QString &search_mode) {
    m_search_mode = search_mode;
    m_search_mode_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_search_mode_Set() const{
    return m_search_mode_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_search_mode_Valid() const{
    return m_search_mode_isValid;
}

OAIGoogleCloudRetailV2SearchRequestSpellCorrectionSpec OAIGoogleCloudRetailV2SearchRequest::getSpellCorrectionSpec() const {
    return m_spell_correction_spec;
}
void OAIGoogleCloudRetailV2SearchRequest::setSpellCorrectionSpec(const OAIGoogleCloudRetailV2SearchRequestSpellCorrectionSpec &spell_correction_spec) {
    m_spell_correction_spec = spell_correction_spec;
    m_spell_correction_spec_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_spell_correction_spec_Set() const{
    return m_spell_correction_spec_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_spell_correction_spec_Valid() const{
    return m_spell_correction_spec_isValid;
}

OAIGoogleCloudRetailV2UserInfo OAIGoogleCloudRetailV2SearchRequest::getUserInfo() const {
    return m_user_info;
}
void OAIGoogleCloudRetailV2SearchRequest::setUserInfo(const OAIGoogleCloudRetailV2UserInfo &user_info) {
    m_user_info = user_info;
    m_user_info_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_user_info_Set() const{
    return m_user_info_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_user_info_Valid() const{
    return m_user_info_isValid;
}

QList<QString> OAIGoogleCloudRetailV2SearchRequest::getVariantRollupKeys() const {
    return m_variant_rollup_keys;
}
void OAIGoogleCloudRetailV2SearchRequest::setVariantRollupKeys(const QList<QString> &variant_rollup_keys) {
    m_variant_rollup_keys = variant_rollup_keys;
    m_variant_rollup_keys_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_variant_rollup_keys_Set() const{
    return m_variant_rollup_keys_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_variant_rollup_keys_Valid() const{
    return m_variant_rollup_keys_isValid;
}

QString OAIGoogleCloudRetailV2SearchRequest::getVisitorId() const {
    return m_visitor_id;
}
void OAIGoogleCloudRetailV2SearchRequest::setVisitorId(const QString &visitor_id) {
    m_visitor_id = visitor_id;
    m_visitor_id_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_visitor_id_Set() const{
    return m_visitor_id_isSet;
}

bool OAIGoogleCloudRetailV2SearchRequest::is_visitor_id_Valid() const{
    return m_visitor_id_isValid;
}

bool OAIGoogleCloudRetailV2SearchRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boost_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canonical_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_facet_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_personalization_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_expansion_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spell_correction_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_rollup_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_visitor_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2SearchRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
