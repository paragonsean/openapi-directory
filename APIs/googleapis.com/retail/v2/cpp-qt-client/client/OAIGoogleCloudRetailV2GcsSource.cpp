/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2GcsSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2GcsSource::OAIGoogleCloudRetailV2GcsSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2GcsSource::OAIGoogleCloudRetailV2GcsSource() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2GcsSource::~OAIGoogleCloudRetailV2GcsSource() {}

void OAIGoogleCloudRetailV2GcsSource::initializeModel() {

    m_data_schema_isSet = false;
    m_data_schema_isValid = false;

    m_input_uris_isSet = false;
    m_input_uris_isValid = false;
}

void OAIGoogleCloudRetailV2GcsSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2GcsSource::fromJsonObject(QJsonObject json) {

    m_data_schema_isValid = ::OpenAPI::fromJsonValue(m_data_schema, json[QString("dataSchema")]);
    m_data_schema_isSet = !json[QString("dataSchema")].isNull() && m_data_schema_isValid;

    m_input_uris_isValid = ::OpenAPI::fromJsonValue(m_input_uris, json[QString("inputUris")]);
    m_input_uris_isSet = !json[QString("inputUris")].isNull() && m_input_uris_isValid;
}

QString OAIGoogleCloudRetailV2GcsSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2GcsSource::asJsonObject() const {
    QJsonObject obj;
    if (m_data_schema_isSet) {
        obj.insert(QString("dataSchema"), ::OpenAPI::toJsonValue(m_data_schema));
    }
    if (m_input_uris.size() > 0) {
        obj.insert(QString("inputUris"), ::OpenAPI::toJsonValue(m_input_uris));
    }
    return obj;
}

QString OAIGoogleCloudRetailV2GcsSource::getDataSchema() const {
    return m_data_schema;
}
void OAIGoogleCloudRetailV2GcsSource::setDataSchema(const QString &data_schema) {
    m_data_schema = data_schema;
    m_data_schema_isSet = true;
}

bool OAIGoogleCloudRetailV2GcsSource::is_data_schema_Set() const{
    return m_data_schema_isSet;
}

bool OAIGoogleCloudRetailV2GcsSource::is_data_schema_Valid() const{
    return m_data_schema_isValid;
}

QList<QString> OAIGoogleCloudRetailV2GcsSource::getInputUris() const {
    return m_input_uris;
}
void OAIGoogleCloudRetailV2GcsSource::setInputUris(const QList<QString> &input_uris) {
    m_input_uris = input_uris;
    m_input_uris_isSet = true;
}

bool OAIGoogleCloudRetailV2GcsSource::is_input_uris_Set() const{
    return m_input_uris_isSet;
}

bool OAIGoogleCloudRetailV2GcsSource::is_input_uris_Valid() const{
    return m_input_uris_isValid;
}

bool OAIGoogleCloudRetailV2GcsSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2GcsSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
