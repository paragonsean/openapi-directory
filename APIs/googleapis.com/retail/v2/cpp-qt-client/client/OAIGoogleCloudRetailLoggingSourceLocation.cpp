/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailLoggingSourceLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailLoggingSourceLocation::OAIGoogleCloudRetailLoggingSourceLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailLoggingSourceLocation::OAIGoogleCloudRetailLoggingSourceLocation() {
    this->initializeModel();
}

OAIGoogleCloudRetailLoggingSourceLocation::~OAIGoogleCloudRetailLoggingSourceLocation() {}

void OAIGoogleCloudRetailLoggingSourceLocation::initializeModel() {

    m_function_name_isSet = false;
    m_function_name_isValid = false;
}

void OAIGoogleCloudRetailLoggingSourceLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailLoggingSourceLocation::fromJsonObject(QJsonObject json) {

    m_function_name_isValid = ::OpenAPI::fromJsonValue(m_function_name, json[QString("functionName")]);
    m_function_name_isSet = !json[QString("functionName")].isNull() && m_function_name_isValid;
}

QString OAIGoogleCloudRetailLoggingSourceLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailLoggingSourceLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_function_name_isSet) {
        obj.insert(QString("functionName"), ::OpenAPI::toJsonValue(m_function_name));
    }
    return obj;
}

QString OAIGoogleCloudRetailLoggingSourceLocation::getFunctionName() const {
    return m_function_name;
}
void OAIGoogleCloudRetailLoggingSourceLocation::setFunctionName(const QString &function_name) {
    m_function_name = function_name;
    m_function_name_isSet = true;
}

bool OAIGoogleCloudRetailLoggingSourceLocation::is_function_name_Set() const{
    return m_function_name_isSet;
}

bool OAIGoogleCloudRetailLoggingSourceLocation::is_function_name_Valid() const{
    return m_function_name_isValid;
}

bool OAIGoogleCloudRetailLoggingSourceLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_function_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailLoggingSourceLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
