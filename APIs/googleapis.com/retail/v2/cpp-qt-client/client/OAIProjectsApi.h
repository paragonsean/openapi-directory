/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleApiHttpBody.h"
#include "OAIGoogleCloudRetailV2AddCatalogAttributeRequest.h"
#include "OAIGoogleCloudRetailV2AddControlRequest.h"
#include "OAIGoogleCloudRetailV2AddFulfillmentPlacesRequest.h"
#include "OAIGoogleCloudRetailV2AddLocalInventoriesRequest.h"
#include "OAIGoogleCloudRetailV2AttributesConfig.h"
#include "OAIGoogleCloudRetailV2CompleteQueryResponse.h"
#include "OAIGoogleCloudRetailV2Control.h"
#include "OAIGoogleCloudRetailV2ExportAnalyticsMetricsRequest.h"
#include "OAIGoogleCloudRetailV2GetDefaultBranchResponse.h"
#include "OAIGoogleCloudRetailV2ImportCompletionDataRequest.h"
#include "OAIGoogleCloudRetailV2ImportProductsRequest.h"
#include "OAIGoogleCloudRetailV2ImportUserEventsRequest.h"
#include "OAIGoogleCloudRetailV2ListCatalogsResponse.h"
#include "OAIGoogleCloudRetailV2ListControlsResponse.h"
#include "OAIGoogleCloudRetailV2ListModelsResponse.h"
#include "OAIGoogleCloudRetailV2ListProductsResponse.h"
#include "OAIGoogleCloudRetailV2ListServingConfigsResponse.h"
#include "OAIGoogleCloudRetailV2Model.h"
#include "OAIGoogleCloudRetailV2PredictRequest.h"
#include "OAIGoogleCloudRetailV2PredictResponse.h"
#include "OAIGoogleCloudRetailV2Product.h"
#include "OAIGoogleCloudRetailV2PurgeProductsRequest.h"
#include "OAIGoogleCloudRetailV2PurgeUserEventsRequest.h"
#include "OAIGoogleCloudRetailV2RejoinUserEventsRequest.h"
#include "OAIGoogleCloudRetailV2RemoveCatalogAttributeRequest.h"
#include "OAIGoogleCloudRetailV2RemoveControlRequest.h"
#include "OAIGoogleCloudRetailV2RemoveFulfillmentPlacesRequest.h"
#include "OAIGoogleCloudRetailV2RemoveLocalInventoriesRequest.h"
#include "OAIGoogleCloudRetailV2ReplaceCatalogAttributeRequest.h"
#include "OAIGoogleCloudRetailV2SearchRequest.h"
#include "OAIGoogleCloudRetailV2SearchResponse.h"
#include "OAIGoogleCloudRetailV2ServingConfig.h"
#include "OAIGoogleCloudRetailV2SetDefaultBranchRequest.h"
#include "OAIGoogleCloudRetailV2SetInventoryRequest.h"
#include "OAIGoogleCloudRetailV2UserEvent.h"
#include "OAIGoogleLongrunningListOperationsResponse.h"
#include "OAIGoogleLongrunningOperation.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  attributes_config QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_add_catalog_attribute_request OAIGoogleCloudRetailV2AddCatalogAttributeRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_attributesConfig_addCatalogAttribute(const QString &attributes_config, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2AddCatalogAttributeRequest> &oai_google_cloud_retail_v2_add_catalog_attribute_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2AddCatalogAttributeRequest>());

    /**
    * @param[in]  attributes_config QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_remove_catalog_attribute_request OAIGoogleCloudRetailV2RemoveCatalogAttributeRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_attributesConfig_removeCatalogAttribute(const QString &attributes_config, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2RemoveCatalogAttributeRequest> &oai_google_cloud_retail_v2_remove_catalog_attribute_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2RemoveCatalogAttributeRequest>());

    /**
    * @param[in]  attributes_config QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_replace_catalog_attribute_request OAIGoogleCloudRetailV2ReplaceCatalogAttributeRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_attributesConfig_replaceCatalogAttribute(const QString &attributes_config, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2ReplaceCatalogAttributeRequest> &oai_google_cloud_retail_v2_replace_catalog_attribute_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2ReplaceCatalogAttributeRequest>());

    /**
    * @param[in]  product QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_add_fulfillment_places_request OAIGoogleCloudRetailV2AddFulfillmentPlacesRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_branches_products_addFulfillmentPlaces(const QString &product, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2AddFulfillmentPlacesRequest> &oai_google_cloud_retail_v2_add_fulfillment_places_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2AddFulfillmentPlacesRequest>());

    /**
    * @param[in]  product QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_add_local_inventories_request OAIGoogleCloudRetailV2AddLocalInventoriesRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_branches_products_addLocalInventories(const QString &product, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2AddLocalInventoriesRequest> &oai_google_cloud_retail_v2_add_local_inventories_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2AddLocalInventoriesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  product_id QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_product OAIGoogleCloudRetailV2Product [optional]
    */
    virtual void retail_projects_locations_catalogs_branches_products_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2Product> &oai_google_cloud_retail_v2_product = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2Product>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_import_products_request OAIGoogleCloudRetailV2ImportProductsRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_branches_products_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2ImportProductsRequest> &oai_google_cloud_retail_v2_import_products_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2ImportProductsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void retail_projects_locations_catalogs_branches_products_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_purge_products_request OAIGoogleCloudRetailV2PurgeProductsRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_branches_products_purge(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2PurgeProductsRequest> &oai_google_cloud_retail_v2_purge_products_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2PurgeProductsRequest>());

    /**
    * @param[in]  product QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_remove_fulfillment_places_request OAIGoogleCloudRetailV2RemoveFulfillmentPlacesRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_branches_products_removeFulfillmentPlaces(const QString &product, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2RemoveFulfillmentPlacesRequest> &oai_google_cloud_retail_v2_remove_fulfillment_places_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2RemoveFulfillmentPlacesRequest>());

    /**
    * @param[in]  product QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_remove_local_inventories_request OAIGoogleCloudRetailV2RemoveLocalInventoriesRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_branches_products_removeLocalInventories(const QString &product, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2RemoveLocalInventoriesRequest> &oai_google_cloud_retail_v2_remove_local_inventories_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2RemoveLocalInventoriesRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_set_inventory_request OAIGoogleCloudRetailV2SetInventoryRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_branches_products_setInventory(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2SetInventoryRequest> &oai_google_cloud_retail_v2_set_inventory_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2SetInventoryRequest>());

    /**
    * @param[in]  catalog QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  dataset QString [optional]
    * @param[in]  device_type QString [optional]
    * @param[in]  entity QString [optional]
    * @param[in]  language_codes QList<QString> [optional]
    * @param[in]  max_suggestions qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  visitor_id QString [optional]
    */
    virtual void retail_projects_locations_catalogs_completeQuery(const QString &catalog, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dataset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &device_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &entity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &language_codes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &max_suggestions = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &visitor_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_import_completion_data_request OAIGoogleCloudRetailV2ImportCompletionDataRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_completionData_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2ImportCompletionDataRequest> &oai_google_cloud_retail_v2_import_completion_data_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2ImportCompletionDataRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  control_id QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_control OAIGoogleCloudRetailV2Control [optional]
    */
    virtual void retail_projects_locations_catalogs_controls_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &control_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2Control> &oai_google_cloud_retail_v2_control = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2Control>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void retail_projects_locations_catalogs_controls_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  catalog QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_export_analytics_metrics_request OAIGoogleCloudRetailV2ExportAnalyticsMetricsRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_exportAnalyticsMetrics(const QString &catalog, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2ExportAnalyticsMetricsRequest> &oai_google_cloud_retail_v2_export_analytics_metrics_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2ExportAnalyticsMetricsRequest>());

    /**
    * @param[in]  catalog QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void retail_projects_locations_catalogs_getDefaultBranch(const QString &catalog, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void retail_projects_locations_catalogs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  dry_run bool [optional]
    * @param[in]  oai_google_cloud_retail_v2_model OAIGoogleCloudRetailV2Model [optional]
    */
    virtual void retail_projects_locations_catalogs_models_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &dry_run = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2Model> &oai_google_cloud_retail_v2_model = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2Model>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void retail_projects_locations_catalogs_models_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void retail_projects_locations_catalogs_models_pause(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void retail_projects_locations_catalogs_models_resume(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void retail_projects_locations_catalogs_models_tune(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  serving_config QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_add_control_request OAIGoogleCloudRetailV2AddControlRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_servingConfigs_addControl(const QString &serving_config, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2AddControlRequest> &oai_google_cloud_retail_v2_add_control_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2AddControlRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  serving_config_id QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_serving_config OAIGoogleCloudRetailV2ServingConfig [optional]
    */
    virtual void retail_projects_locations_catalogs_servingConfigs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &serving_config_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2ServingConfig> &oai_google_cloud_retail_v2_serving_config = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2ServingConfig>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void retail_projects_locations_catalogs_servingConfigs_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void retail_projects_locations_catalogs_servingConfigs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_serving_config OAIGoogleCloudRetailV2ServingConfig [optional]
    */
    virtual void retail_projects_locations_catalogs_servingConfigs_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2ServingConfig> &oai_google_cloud_retail_v2_serving_config = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2ServingConfig>());

    /**
    * @param[in]  placement QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_predict_request OAIGoogleCloudRetailV2PredictRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_servingConfigs_predict(const QString &placement, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2PredictRequest> &oai_google_cloud_retail_v2_predict_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2PredictRequest>());

    /**
    * @param[in]  serving_config QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_remove_control_request OAIGoogleCloudRetailV2RemoveControlRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_servingConfigs_removeControl(const QString &serving_config, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2RemoveControlRequest> &oai_google_cloud_retail_v2_remove_control_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2RemoveControlRequest>());

    /**
    * @param[in]  placement QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_search_request OAIGoogleCloudRetailV2SearchRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_servingConfigs_search(const QString &placement, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2SearchRequest> &oai_google_cloud_retail_v2_search_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2SearchRequest>());

    /**
    * @param[in]  catalog QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_set_default_branch_request OAIGoogleCloudRetailV2SetDefaultBranchRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_setDefaultBranch(const QString &catalog, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2SetDefaultBranchRequest> &oai_google_cloud_retail_v2_set_default_branch_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2SetDefaultBranchRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  ets QString [optional]
    * @param[in]  prebuilt_rule QString [optional]
    * @param[in]  raw_json QString [optional]
    * @param[in]  uri QString [optional]
    * @param[in]  user_event QString [optional]
    */
    virtual void retail_projects_locations_catalogs_userEvents_collect(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ets = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &prebuilt_rule = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &raw_json = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_event = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_import_user_events_request OAIGoogleCloudRetailV2ImportUserEventsRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_userEvents_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2ImportUserEventsRequest> &oai_google_cloud_retail_v2_import_user_events_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2ImportUserEventsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_purge_user_events_request OAIGoogleCloudRetailV2PurgeUserEventsRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_userEvents_purge(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2PurgeUserEventsRequest> &oai_google_cloud_retail_v2_purge_user_events_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2PurgeUserEventsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_retail_v2_rejoin_user_events_request OAIGoogleCloudRetailV2RejoinUserEventsRequest [optional]
    */
    virtual void retail_projects_locations_catalogs_userEvents_rejoin(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2RejoinUserEventsRequest> &oai_google_cloud_retail_v2_rejoin_user_events_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2RejoinUserEventsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  write_async bool [optional]
    * @param[in]  oai_google_cloud_retail_v2_user_event OAIGoogleCloudRetailV2UserEvent [optional]
    */
    virtual void retail_projects_locations_catalogs_userEvents_write(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &write_async = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2UserEvent> &oai_google_cloud_retail_v2_user_event = ::OpenAPI::OptionalParam<OAIGoogleCloudRetailV2UserEvent>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void retail_projects_operations_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void retail_projects_operations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void retail_projects_locations_catalogs_attributesConfig_addCatalogAttributeCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_attributesConfig_removeCatalogAttributeCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_attributesConfig_replaceCatalogAttributeCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_branches_products_addFulfillmentPlacesCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_branches_products_addLocalInventoriesCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_branches_products_createCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_branches_products_importCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_branches_products_listCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_branches_products_purgeCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_branches_products_removeFulfillmentPlacesCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_branches_products_removeLocalInventoriesCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_branches_products_setInventoryCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_completeQueryCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_completionData_importCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_controls_createCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_controls_listCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_exportAnalyticsMetricsCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_getDefaultBranchCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_listCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_models_createCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_models_listCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_models_pauseCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_models_resumeCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_models_tuneCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_servingConfigs_addControlCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_servingConfigs_createCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_servingConfigs_deleteCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_servingConfigs_listCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_servingConfigs_patchCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_servingConfigs_predictCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_servingConfigs_removeControlCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_servingConfigs_searchCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_setDefaultBranchCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_userEvents_collectCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_userEvents_importCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_userEvents_purgeCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_userEvents_rejoinCallback(OAIHttpRequestWorker *worker);
    void retail_projects_locations_catalogs_userEvents_writeCallback(OAIHttpRequestWorker *worker);
    void retail_projects_operations_getCallback(OAIHttpRequestWorker *worker);
    void retail_projects_operations_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void retail_projects_locations_catalogs_attributesConfig_addCatalogAttributeSignal(OAIGoogleCloudRetailV2AttributesConfig summary);
    void retail_projects_locations_catalogs_attributesConfig_removeCatalogAttributeSignal(OAIGoogleCloudRetailV2AttributesConfig summary);
    void retail_projects_locations_catalogs_attributesConfig_replaceCatalogAttributeSignal(OAIGoogleCloudRetailV2AttributesConfig summary);
    void retail_projects_locations_catalogs_branches_products_addFulfillmentPlacesSignal(OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_branches_products_addLocalInventoriesSignal(OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_branches_products_createSignal(OAIGoogleCloudRetailV2Product summary);
    void retail_projects_locations_catalogs_branches_products_importSignal(OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_branches_products_listSignal(OAIGoogleCloudRetailV2ListProductsResponse summary);
    void retail_projects_locations_catalogs_branches_products_purgeSignal(OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_branches_products_removeFulfillmentPlacesSignal(OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_branches_products_removeLocalInventoriesSignal(OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_branches_products_setInventorySignal(OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_completeQuerySignal(OAIGoogleCloudRetailV2CompleteQueryResponse summary);
    void retail_projects_locations_catalogs_completionData_importSignal(OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_controls_createSignal(OAIGoogleCloudRetailV2Control summary);
    void retail_projects_locations_catalogs_controls_listSignal(OAIGoogleCloudRetailV2ListControlsResponse summary);
    void retail_projects_locations_catalogs_exportAnalyticsMetricsSignal(OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_getDefaultBranchSignal(OAIGoogleCloudRetailV2GetDefaultBranchResponse summary);
    void retail_projects_locations_catalogs_listSignal(OAIGoogleCloudRetailV2ListCatalogsResponse summary);
    void retail_projects_locations_catalogs_models_createSignal(OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_models_listSignal(OAIGoogleCloudRetailV2ListModelsResponse summary);
    void retail_projects_locations_catalogs_models_pauseSignal(OAIGoogleCloudRetailV2Model summary);
    void retail_projects_locations_catalogs_models_resumeSignal(OAIGoogleCloudRetailV2Model summary);
    void retail_projects_locations_catalogs_models_tuneSignal(OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_servingConfigs_addControlSignal(OAIGoogleCloudRetailV2ServingConfig summary);
    void retail_projects_locations_catalogs_servingConfigs_createSignal(OAIGoogleCloudRetailV2ServingConfig summary);
    void retail_projects_locations_catalogs_servingConfigs_deleteSignal(OAIObject summary);
    void retail_projects_locations_catalogs_servingConfigs_listSignal(OAIGoogleCloudRetailV2ListServingConfigsResponse summary);
    void retail_projects_locations_catalogs_servingConfigs_patchSignal(OAIGoogleCloudRetailV2ServingConfig summary);
    void retail_projects_locations_catalogs_servingConfigs_predictSignal(OAIGoogleCloudRetailV2PredictResponse summary);
    void retail_projects_locations_catalogs_servingConfigs_removeControlSignal(OAIGoogleCloudRetailV2ServingConfig summary);
    void retail_projects_locations_catalogs_servingConfigs_searchSignal(OAIGoogleCloudRetailV2SearchResponse summary);
    void retail_projects_locations_catalogs_setDefaultBranchSignal(OAIObject summary);
    void retail_projects_locations_catalogs_userEvents_collectSignal(OAIGoogleApiHttpBody summary);
    void retail_projects_locations_catalogs_userEvents_importSignal(OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_userEvents_purgeSignal(OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_userEvents_rejoinSignal(OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_userEvents_writeSignal(OAIGoogleCloudRetailV2UserEvent summary);
    void retail_projects_operations_getSignal(OAIGoogleLongrunningOperation summary);
    void retail_projects_operations_listSignal(OAIGoogleLongrunningListOperationsResponse summary);


    void retail_projects_locations_catalogs_attributesConfig_addCatalogAttributeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2AttributesConfig summary);
    void retail_projects_locations_catalogs_attributesConfig_removeCatalogAttributeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2AttributesConfig summary);
    void retail_projects_locations_catalogs_attributesConfig_replaceCatalogAttributeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2AttributesConfig summary);
    void retail_projects_locations_catalogs_branches_products_addFulfillmentPlacesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_branches_products_addLocalInventoriesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_branches_products_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2Product summary);
    void retail_projects_locations_catalogs_branches_products_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_branches_products_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2ListProductsResponse summary);
    void retail_projects_locations_catalogs_branches_products_purgeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_branches_products_removeFulfillmentPlacesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_branches_products_removeLocalInventoriesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_branches_products_setInventorySignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_completeQuerySignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2CompleteQueryResponse summary);
    void retail_projects_locations_catalogs_completionData_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_controls_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2Control summary);
    void retail_projects_locations_catalogs_controls_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2ListControlsResponse summary);
    void retail_projects_locations_catalogs_exportAnalyticsMetricsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_getDefaultBranchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2GetDefaultBranchResponse summary);
    void retail_projects_locations_catalogs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2ListCatalogsResponse summary);
    void retail_projects_locations_catalogs_models_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_models_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2ListModelsResponse summary);
    void retail_projects_locations_catalogs_models_pauseSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2Model summary);
    void retail_projects_locations_catalogs_models_resumeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2Model summary);
    void retail_projects_locations_catalogs_models_tuneSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_servingConfigs_addControlSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2ServingConfig summary);
    void retail_projects_locations_catalogs_servingConfigs_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2ServingConfig summary);
    void retail_projects_locations_catalogs_servingConfigs_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void retail_projects_locations_catalogs_servingConfigs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2ListServingConfigsResponse summary);
    void retail_projects_locations_catalogs_servingConfigs_patchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2ServingConfig summary);
    void retail_projects_locations_catalogs_servingConfigs_predictSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2PredictResponse summary);
    void retail_projects_locations_catalogs_servingConfigs_removeControlSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2ServingConfig summary);
    void retail_projects_locations_catalogs_servingConfigs_searchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2SearchResponse summary);
    void retail_projects_locations_catalogs_setDefaultBranchSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void retail_projects_locations_catalogs_userEvents_collectSignalFull(OAIHttpRequestWorker *worker, OAIGoogleApiHttpBody summary);
    void retail_projects_locations_catalogs_userEvents_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_userEvents_purgeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_userEvents_rejoinSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void retail_projects_locations_catalogs_userEvents_writeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRetailV2UserEvent summary);
    void retail_projects_operations_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void retail_projects_operations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningListOperationsResponse summary);

    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_attributesConfig_addCatalogAttributeSignalError() instead")
    void retail_projects_locations_catalogs_attributesConfig_addCatalogAttributeSignalE(OAIGoogleCloudRetailV2AttributesConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_attributesConfig_addCatalogAttributeSignalError(OAIGoogleCloudRetailV2AttributesConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_attributesConfig_removeCatalogAttributeSignalError() instead")
    void retail_projects_locations_catalogs_attributesConfig_removeCatalogAttributeSignalE(OAIGoogleCloudRetailV2AttributesConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_attributesConfig_removeCatalogAttributeSignalError(OAIGoogleCloudRetailV2AttributesConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_attributesConfig_replaceCatalogAttributeSignalError() instead")
    void retail_projects_locations_catalogs_attributesConfig_replaceCatalogAttributeSignalE(OAIGoogleCloudRetailV2AttributesConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_attributesConfig_replaceCatalogAttributeSignalError(OAIGoogleCloudRetailV2AttributesConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_branches_products_addFulfillmentPlacesSignalError() instead")
    void retail_projects_locations_catalogs_branches_products_addFulfillmentPlacesSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_branches_products_addFulfillmentPlacesSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_branches_products_addLocalInventoriesSignalError() instead")
    void retail_projects_locations_catalogs_branches_products_addLocalInventoriesSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_branches_products_addLocalInventoriesSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_branches_products_createSignalError() instead")
    void retail_projects_locations_catalogs_branches_products_createSignalE(OAIGoogleCloudRetailV2Product summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_branches_products_createSignalError(OAIGoogleCloudRetailV2Product summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_branches_products_importSignalError() instead")
    void retail_projects_locations_catalogs_branches_products_importSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_branches_products_importSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_branches_products_listSignalError() instead")
    void retail_projects_locations_catalogs_branches_products_listSignalE(OAIGoogleCloudRetailV2ListProductsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_branches_products_listSignalError(OAIGoogleCloudRetailV2ListProductsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_branches_products_purgeSignalError() instead")
    void retail_projects_locations_catalogs_branches_products_purgeSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_branches_products_purgeSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_branches_products_removeFulfillmentPlacesSignalError() instead")
    void retail_projects_locations_catalogs_branches_products_removeFulfillmentPlacesSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_branches_products_removeFulfillmentPlacesSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_branches_products_removeLocalInventoriesSignalError() instead")
    void retail_projects_locations_catalogs_branches_products_removeLocalInventoriesSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_branches_products_removeLocalInventoriesSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_branches_products_setInventorySignalError() instead")
    void retail_projects_locations_catalogs_branches_products_setInventorySignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_branches_products_setInventorySignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_completeQuerySignalError() instead")
    void retail_projects_locations_catalogs_completeQuerySignalE(OAIGoogleCloudRetailV2CompleteQueryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_completeQuerySignalError(OAIGoogleCloudRetailV2CompleteQueryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_completionData_importSignalError() instead")
    void retail_projects_locations_catalogs_completionData_importSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_completionData_importSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_controls_createSignalError() instead")
    void retail_projects_locations_catalogs_controls_createSignalE(OAIGoogleCloudRetailV2Control summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_controls_createSignalError(OAIGoogleCloudRetailV2Control summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_controls_listSignalError() instead")
    void retail_projects_locations_catalogs_controls_listSignalE(OAIGoogleCloudRetailV2ListControlsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_controls_listSignalError(OAIGoogleCloudRetailV2ListControlsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_exportAnalyticsMetricsSignalError() instead")
    void retail_projects_locations_catalogs_exportAnalyticsMetricsSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_exportAnalyticsMetricsSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_getDefaultBranchSignalError() instead")
    void retail_projects_locations_catalogs_getDefaultBranchSignalE(OAIGoogleCloudRetailV2GetDefaultBranchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_getDefaultBranchSignalError(OAIGoogleCloudRetailV2GetDefaultBranchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_listSignalError() instead")
    void retail_projects_locations_catalogs_listSignalE(OAIGoogleCloudRetailV2ListCatalogsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_listSignalError(OAIGoogleCloudRetailV2ListCatalogsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_models_createSignalError() instead")
    void retail_projects_locations_catalogs_models_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_models_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_models_listSignalError() instead")
    void retail_projects_locations_catalogs_models_listSignalE(OAIGoogleCloudRetailV2ListModelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_models_listSignalError(OAIGoogleCloudRetailV2ListModelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_models_pauseSignalError() instead")
    void retail_projects_locations_catalogs_models_pauseSignalE(OAIGoogleCloudRetailV2Model summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_models_pauseSignalError(OAIGoogleCloudRetailV2Model summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_models_resumeSignalError() instead")
    void retail_projects_locations_catalogs_models_resumeSignalE(OAIGoogleCloudRetailV2Model summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_models_resumeSignalError(OAIGoogleCloudRetailV2Model summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_models_tuneSignalError() instead")
    void retail_projects_locations_catalogs_models_tuneSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_models_tuneSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_servingConfigs_addControlSignalError() instead")
    void retail_projects_locations_catalogs_servingConfigs_addControlSignalE(OAIGoogleCloudRetailV2ServingConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_servingConfigs_addControlSignalError(OAIGoogleCloudRetailV2ServingConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_servingConfigs_createSignalError() instead")
    void retail_projects_locations_catalogs_servingConfigs_createSignalE(OAIGoogleCloudRetailV2ServingConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_servingConfigs_createSignalError(OAIGoogleCloudRetailV2ServingConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_servingConfigs_deleteSignalError() instead")
    void retail_projects_locations_catalogs_servingConfigs_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_servingConfigs_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_servingConfigs_listSignalError() instead")
    void retail_projects_locations_catalogs_servingConfigs_listSignalE(OAIGoogleCloudRetailV2ListServingConfigsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_servingConfigs_listSignalError(OAIGoogleCloudRetailV2ListServingConfigsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_servingConfigs_patchSignalError() instead")
    void retail_projects_locations_catalogs_servingConfigs_patchSignalE(OAIGoogleCloudRetailV2ServingConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_servingConfigs_patchSignalError(OAIGoogleCloudRetailV2ServingConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_servingConfigs_predictSignalError() instead")
    void retail_projects_locations_catalogs_servingConfigs_predictSignalE(OAIGoogleCloudRetailV2PredictResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_servingConfigs_predictSignalError(OAIGoogleCloudRetailV2PredictResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_servingConfigs_removeControlSignalError() instead")
    void retail_projects_locations_catalogs_servingConfigs_removeControlSignalE(OAIGoogleCloudRetailV2ServingConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_servingConfigs_removeControlSignalError(OAIGoogleCloudRetailV2ServingConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_servingConfigs_searchSignalError() instead")
    void retail_projects_locations_catalogs_servingConfigs_searchSignalE(OAIGoogleCloudRetailV2SearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_servingConfigs_searchSignalError(OAIGoogleCloudRetailV2SearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_setDefaultBranchSignalError() instead")
    void retail_projects_locations_catalogs_setDefaultBranchSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_setDefaultBranchSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_userEvents_collectSignalError() instead")
    void retail_projects_locations_catalogs_userEvents_collectSignalE(OAIGoogleApiHttpBody summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_userEvents_collectSignalError(OAIGoogleApiHttpBody summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_userEvents_importSignalError() instead")
    void retail_projects_locations_catalogs_userEvents_importSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_userEvents_importSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_userEvents_purgeSignalError() instead")
    void retail_projects_locations_catalogs_userEvents_purgeSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_userEvents_purgeSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_userEvents_rejoinSignalError() instead")
    void retail_projects_locations_catalogs_userEvents_rejoinSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_userEvents_rejoinSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_userEvents_writeSignalError() instead")
    void retail_projects_locations_catalogs_userEvents_writeSignalE(OAIGoogleCloudRetailV2UserEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_userEvents_writeSignalError(OAIGoogleCloudRetailV2UserEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_operations_getSignalError() instead")
    void retail_projects_operations_getSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_operations_getSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_operations_listSignalError() instead")
    void retail_projects_operations_listSignalE(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_operations_listSignalError(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_attributesConfig_addCatalogAttributeSignalErrorFull() instead")
    void retail_projects_locations_catalogs_attributesConfig_addCatalogAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_attributesConfig_addCatalogAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_attributesConfig_removeCatalogAttributeSignalErrorFull() instead")
    void retail_projects_locations_catalogs_attributesConfig_removeCatalogAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_attributesConfig_removeCatalogAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_attributesConfig_replaceCatalogAttributeSignalErrorFull() instead")
    void retail_projects_locations_catalogs_attributesConfig_replaceCatalogAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_attributesConfig_replaceCatalogAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_branches_products_addFulfillmentPlacesSignalErrorFull() instead")
    void retail_projects_locations_catalogs_branches_products_addFulfillmentPlacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_branches_products_addFulfillmentPlacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_branches_products_addLocalInventoriesSignalErrorFull() instead")
    void retail_projects_locations_catalogs_branches_products_addLocalInventoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_branches_products_addLocalInventoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_branches_products_createSignalErrorFull() instead")
    void retail_projects_locations_catalogs_branches_products_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_branches_products_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_branches_products_importSignalErrorFull() instead")
    void retail_projects_locations_catalogs_branches_products_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_branches_products_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_branches_products_listSignalErrorFull() instead")
    void retail_projects_locations_catalogs_branches_products_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_branches_products_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_branches_products_purgeSignalErrorFull() instead")
    void retail_projects_locations_catalogs_branches_products_purgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_branches_products_purgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_branches_products_removeFulfillmentPlacesSignalErrorFull() instead")
    void retail_projects_locations_catalogs_branches_products_removeFulfillmentPlacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_branches_products_removeFulfillmentPlacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_branches_products_removeLocalInventoriesSignalErrorFull() instead")
    void retail_projects_locations_catalogs_branches_products_removeLocalInventoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_branches_products_removeLocalInventoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_branches_products_setInventorySignalErrorFull() instead")
    void retail_projects_locations_catalogs_branches_products_setInventorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_branches_products_setInventorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_completeQuerySignalErrorFull() instead")
    void retail_projects_locations_catalogs_completeQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_completeQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_completionData_importSignalErrorFull() instead")
    void retail_projects_locations_catalogs_completionData_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_completionData_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_controls_createSignalErrorFull() instead")
    void retail_projects_locations_catalogs_controls_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_controls_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_controls_listSignalErrorFull() instead")
    void retail_projects_locations_catalogs_controls_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_controls_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_exportAnalyticsMetricsSignalErrorFull() instead")
    void retail_projects_locations_catalogs_exportAnalyticsMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_exportAnalyticsMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_getDefaultBranchSignalErrorFull() instead")
    void retail_projects_locations_catalogs_getDefaultBranchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_getDefaultBranchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_listSignalErrorFull() instead")
    void retail_projects_locations_catalogs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_models_createSignalErrorFull() instead")
    void retail_projects_locations_catalogs_models_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_models_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_models_listSignalErrorFull() instead")
    void retail_projects_locations_catalogs_models_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_models_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_models_pauseSignalErrorFull() instead")
    void retail_projects_locations_catalogs_models_pauseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_models_pauseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_models_resumeSignalErrorFull() instead")
    void retail_projects_locations_catalogs_models_resumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_models_resumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_models_tuneSignalErrorFull() instead")
    void retail_projects_locations_catalogs_models_tuneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_models_tuneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_servingConfigs_addControlSignalErrorFull() instead")
    void retail_projects_locations_catalogs_servingConfigs_addControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_servingConfigs_addControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_servingConfigs_createSignalErrorFull() instead")
    void retail_projects_locations_catalogs_servingConfigs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_servingConfigs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_servingConfigs_deleteSignalErrorFull() instead")
    void retail_projects_locations_catalogs_servingConfigs_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_servingConfigs_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_servingConfigs_listSignalErrorFull() instead")
    void retail_projects_locations_catalogs_servingConfigs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_servingConfigs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_servingConfigs_patchSignalErrorFull() instead")
    void retail_projects_locations_catalogs_servingConfigs_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_servingConfigs_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_servingConfigs_predictSignalErrorFull() instead")
    void retail_projects_locations_catalogs_servingConfigs_predictSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_servingConfigs_predictSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_servingConfigs_removeControlSignalErrorFull() instead")
    void retail_projects_locations_catalogs_servingConfigs_removeControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_servingConfigs_removeControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_servingConfigs_searchSignalErrorFull() instead")
    void retail_projects_locations_catalogs_servingConfigs_searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_servingConfigs_searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_setDefaultBranchSignalErrorFull() instead")
    void retail_projects_locations_catalogs_setDefaultBranchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_setDefaultBranchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_userEvents_collectSignalErrorFull() instead")
    void retail_projects_locations_catalogs_userEvents_collectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_userEvents_collectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_userEvents_importSignalErrorFull() instead")
    void retail_projects_locations_catalogs_userEvents_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_userEvents_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_userEvents_purgeSignalErrorFull() instead")
    void retail_projects_locations_catalogs_userEvents_purgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_userEvents_purgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_userEvents_rejoinSignalErrorFull() instead")
    void retail_projects_locations_catalogs_userEvents_rejoinSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_userEvents_rejoinSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_locations_catalogs_userEvents_writeSignalErrorFull() instead")
    void retail_projects_locations_catalogs_userEvents_writeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_locations_catalogs_userEvents_writeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_operations_getSignalErrorFull() instead")
    void retail_projects_operations_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_operations_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retail_projects_operations_listSignalErrorFull() instead")
    void retail_projects_operations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retail_projects_operations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
