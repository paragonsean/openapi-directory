/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2PurchaseTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2PurchaseTransaction::OAIGoogleCloudRetailV2PurchaseTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2PurchaseTransaction::OAIGoogleCloudRetailV2PurchaseTransaction() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2PurchaseTransaction::~OAIGoogleCloudRetailV2PurchaseTransaction() {}

void OAIGoogleCloudRetailV2PurchaseTransaction::initializeModel() {

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_revenue_isSet = false;
    m_revenue_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;
}

void OAIGoogleCloudRetailV2PurchaseTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2PurchaseTransaction::fromJsonObject(QJsonObject json) {

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_revenue_isValid = ::OpenAPI::fromJsonValue(m_revenue, json[QString("revenue")]);
    m_revenue_isSet = !json[QString("revenue")].isNull() && m_revenue_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;
}

QString OAIGoogleCloudRetailV2PurchaseTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2PurchaseTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_revenue_isSet) {
        obj.insert(QString("revenue"), ::OpenAPI::toJsonValue(m_revenue));
    }
    if (m_tax_isSet) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    return obj;
}

float OAIGoogleCloudRetailV2PurchaseTransaction::getCost() const {
    return m_cost;
}
void OAIGoogleCloudRetailV2PurchaseTransaction::setCost(const float &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIGoogleCloudRetailV2PurchaseTransaction::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIGoogleCloudRetailV2PurchaseTransaction::is_cost_Valid() const{
    return m_cost_isValid;
}

QString OAIGoogleCloudRetailV2PurchaseTransaction::getCurrencyCode() const {
    return m_currency_code;
}
void OAIGoogleCloudRetailV2PurchaseTransaction::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIGoogleCloudRetailV2PurchaseTransaction::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIGoogleCloudRetailV2PurchaseTransaction::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIGoogleCloudRetailV2PurchaseTransaction::getId() const {
    return m_id;
}
void OAIGoogleCloudRetailV2PurchaseTransaction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGoogleCloudRetailV2PurchaseTransaction::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGoogleCloudRetailV2PurchaseTransaction::is_id_Valid() const{
    return m_id_isValid;
}

float OAIGoogleCloudRetailV2PurchaseTransaction::getRevenue() const {
    return m_revenue;
}
void OAIGoogleCloudRetailV2PurchaseTransaction::setRevenue(const float &revenue) {
    m_revenue = revenue;
    m_revenue_isSet = true;
}

bool OAIGoogleCloudRetailV2PurchaseTransaction::is_revenue_Set() const{
    return m_revenue_isSet;
}

bool OAIGoogleCloudRetailV2PurchaseTransaction::is_revenue_Valid() const{
    return m_revenue_isValid;
}

float OAIGoogleCloudRetailV2PurchaseTransaction::getTax() const {
    return m_tax;
}
void OAIGoogleCloudRetailV2PurchaseTransaction::setTax(const float &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIGoogleCloudRetailV2PurchaseTransaction::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIGoogleCloudRetailV2PurchaseTransaction::is_tax_Valid() const{
    return m_tax_isValid;
}

bool OAIGoogleCloudRetailV2PurchaseTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revenue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2PurchaseTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
