/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaImportUserEventsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaImportUserEventsResponse::OAIGoogleCloudRetailV2betaImportUserEventsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaImportUserEventsResponse::OAIGoogleCloudRetailV2betaImportUserEventsResponse() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaImportUserEventsResponse::~OAIGoogleCloudRetailV2betaImportUserEventsResponse() {}

void OAIGoogleCloudRetailV2betaImportUserEventsResponse::initializeModel() {

    m_error_samples_isSet = false;
    m_error_samples_isValid = false;

    m_errors_config_isSet = false;
    m_errors_config_isValid = false;

    m_import_summary_isSet = false;
    m_import_summary_isValid = false;
}

void OAIGoogleCloudRetailV2betaImportUserEventsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaImportUserEventsResponse::fromJsonObject(QJsonObject json) {

    m_error_samples_isValid = ::OpenAPI::fromJsonValue(m_error_samples, json[QString("errorSamples")]);
    m_error_samples_isSet = !json[QString("errorSamples")].isNull() && m_error_samples_isValid;

    m_errors_config_isValid = ::OpenAPI::fromJsonValue(m_errors_config, json[QString("errorsConfig")]);
    m_errors_config_isSet = !json[QString("errorsConfig")].isNull() && m_errors_config_isValid;

    m_import_summary_isValid = ::OpenAPI::fromJsonValue(m_import_summary, json[QString("importSummary")]);
    m_import_summary_isSet = !json[QString("importSummary")].isNull() && m_import_summary_isValid;
}

QString OAIGoogleCloudRetailV2betaImportUserEventsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaImportUserEventsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_error_samples.size() > 0) {
        obj.insert(QString("errorSamples"), ::OpenAPI::toJsonValue(m_error_samples));
    }
    if (m_errors_config.isSet()) {
        obj.insert(QString("errorsConfig"), ::OpenAPI::toJsonValue(m_errors_config));
    }
    if (m_import_summary.isSet()) {
        obj.insert(QString("importSummary"), ::OpenAPI::toJsonValue(m_import_summary));
    }
    return obj;
}

QList<OAIGoogleRpcStatus> OAIGoogleCloudRetailV2betaImportUserEventsResponse::getErrorSamples() const {
    return m_error_samples;
}
void OAIGoogleCloudRetailV2betaImportUserEventsResponse::setErrorSamples(const QList<OAIGoogleRpcStatus> &error_samples) {
    m_error_samples = error_samples;
    m_error_samples_isSet = true;
}

bool OAIGoogleCloudRetailV2betaImportUserEventsResponse::is_error_samples_Set() const{
    return m_error_samples_isSet;
}

bool OAIGoogleCloudRetailV2betaImportUserEventsResponse::is_error_samples_Valid() const{
    return m_error_samples_isValid;
}

OAIGoogleCloudRetailV2betaImportErrorsConfig OAIGoogleCloudRetailV2betaImportUserEventsResponse::getErrorsConfig() const {
    return m_errors_config;
}
void OAIGoogleCloudRetailV2betaImportUserEventsResponse::setErrorsConfig(const OAIGoogleCloudRetailV2betaImportErrorsConfig &errors_config) {
    m_errors_config = errors_config;
    m_errors_config_isSet = true;
}

bool OAIGoogleCloudRetailV2betaImportUserEventsResponse::is_errors_config_Set() const{
    return m_errors_config_isSet;
}

bool OAIGoogleCloudRetailV2betaImportUserEventsResponse::is_errors_config_Valid() const{
    return m_errors_config_isValid;
}

OAIGoogleCloudRetailV2betaUserEventImportSummary OAIGoogleCloudRetailV2betaImportUserEventsResponse::getImportSummary() const {
    return m_import_summary;
}
void OAIGoogleCloudRetailV2betaImportUserEventsResponse::setImportSummary(const OAIGoogleCloudRetailV2betaUserEventImportSummary &import_summary) {
    m_import_summary = import_summary;
    m_import_summary_isSet = true;
}

bool OAIGoogleCloudRetailV2betaImportUserEventsResponse::is_import_summary_Set() const{
    return m_import_summary_isSet;
}

bool OAIGoogleCloudRetailV2betaImportUserEventsResponse::is_import_summary_Valid() const{
    return m_import_summary_isValid;
}

bool OAIGoogleCloudRetailV2betaImportUserEventsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_samples.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaImportUserEventsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
