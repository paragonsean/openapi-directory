/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailLoggingImportErrorContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailLoggingImportErrorContext::OAIGoogleCloudRetailLoggingImportErrorContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailLoggingImportErrorContext::OAIGoogleCloudRetailLoggingImportErrorContext() {
    this->initializeModel();
}

OAIGoogleCloudRetailLoggingImportErrorContext::~OAIGoogleCloudRetailLoggingImportErrorContext() {}

void OAIGoogleCloudRetailLoggingImportErrorContext::initializeModel() {

    m_catalog_item_isSet = false;
    m_catalog_item_isValid = false;

    m_gcs_path_isSet = false;
    m_gcs_path_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_operation_name_isSet = false;
    m_operation_name_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_user_event_isSet = false;
    m_user_event_isValid = false;
}

void OAIGoogleCloudRetailLoggingImportErrorContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailLoggingImportErrorContext::fromJsonObject(QJsonObject json) {

    m_catalog_item_isValid = ::OpenAPI::fromJsonValue(m_catalog_item, json[QString("catalogItem")]);
    m_catalog_item_isSet = !json[QString("catalogItem")].isNull() && m_catalog_item_isValid;

    m_gcs_path_isValid = ::OpenAPI::fromJsonValue(m_gcs_path, json[QString("gcsPath")]);
    m_gcs_path_isSet = !json[QString("gcsPath")].isNull() && m_gcs_path_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_operation_name_isValid = ::OpenAPI::fromJsonValue(m_operation_name, json[QString("operationName")]);
    m_operation_name_isSet = !json[QString("operationName")].isNull() && m_operation_name_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_user_event_isValid = ::OpenAPI::fromJsonValue(m_user_event, json[QString("userEvent")]);
    m_user_event_isSet = !json[QString("userEvent")].isNull() && m_user_event_isValid;
}

QString OAIGoogleCloudRetailLoggingImportErrorContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailLoggingImportErrorContext::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_item_isSet) {
        obj.insert(QString("catalogItem"), ::OpenAPI::toJsonValue(m_catalog_item));
    }
    if (m_gcs_path_isSet) {
        obj.insert(QString("gcsPath"), ::OpenAPI::toJsonValue(m_gcs_path));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_operation_name_isSet) {
        obj.insert(QString("operationName"), ::OpenAPI::toJsonValue(m_operation_name));
    }
    if (m_product_isSet) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_user_event_isSet) {
        obj.insert(QString("userEvent"), ::OpenAPI::toJsonValue(m_user_event));
    }
    return obj;
}

QString OAIGoogleCloudRetailLoggingImportErrorContext::getCatalogItem() const {
    return m_catalog_item;
}
void OAIGoogleCloudRetailLoggingImportErrorContext::setCatalogItem(const QString &catalog_item) {
    m_catalog_item = catalog_item;
    m_catalog_item_isSet = true;
}

bool OAIGoogleCloudRetailLoggingImportErrorContext::is_catalog_item_Set() const{
    return m_catalog_item_isSet;
}

bool OAIGoogleCloudRetailLoggingImportErrorContext::is_catalog_item_Valid() const{
    return m_catalog_item_isValid;
}

QString OAIGoogleCloudRetailLoggingImportErrorContext::getGcsPath() const {
    return m_gcs_path;
}
void OAIGoogleCloudRetailLoggingImportErrorContext::setGcsPath(const QString &gcs_path) {
    m_gcs_path = gcs_path;
    m_gcs_path_isSet = true;
}

bool OAIGoogleCloudRetailLoggingImportErrorContext::is_gcs_path_Set() const{
    return m_gcs_path_isSet;
}

bool OAIGoogleCloudRetailLoggingImportErrorContext::is_gcs_path_Valid() const{
    return m_gcs_path_isValid;
}

QString OAIGoogleCloudRetailLoggingImportErrorContext::getLineNumber() const {
    return m_line_number;
}
void OAIGoogleCloudRetailLoggingImportErrorContext::setLineNumber(const QString &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIGoogleCloudRetailLoggingImportErrorContext::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIGoogleCloudRetailLoggingImportErrorContext::is_line_number_Valid() const{
    return m_line_number_isValid;
}

QString OAIGoogleCloudRetailLoggingImportErrorContext::getOperationName() const {
    return m_operation_name;
}
void OAIGoogleCloudRetailLoggingImportErrorContext::setOperationName(const QString &operation_name) {
    m_operation_name = operation_name;
    m_operation_name_isSet = true;
}

bool OAIGoogleCloudRetailLoggingImportErrorContext::is_operation_name_Set() const{
    return m_operation_name_isSet;
}

bool OAIGoogleCloudRetailLoggingImportErrorContext::is_operation_name_Valid() const{
    return m_operation_name_isValid;
}

QString OAIGoogleCloudRetailLoggingImportErrorContext::getProduct() const {
    return m_product;
}
void OAIGoogleCloudRetailLoggingImportErrorContext::setProduct(const QString &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIGoogleCloudRetailLoggingImportErrorContext::is_product_Set() const{
    return m_product_isSet;
}

bool OAIGoogleCloudRetailLoggingImportErrorContext::is_product_Valid() const{
    return m_product_isValid;
}

QString OAIGoogleCloudRetailLoggingImportErrorContext::getUserEvent() const {
    return m_user_event;
}
void OAIGoogleCloudRetailLoggingImportErrorContext::setUserEvent(const QString &user_event) {
    m_user_event = user_event;
    m_user_event_isSet = true;
}

bool OAIGoogleCloudRetailLoggingImportErrorContext::is_user_event_Set() const{
    return m_user_event_isSet;
}

bool OAIGoogleCloudRetailLoggingImportErrorContext::is_user_event_Valid() const{
    return m_user_event_isValid;
}

bool OAIGoogleCloudRetailLoggingImportErrorContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_event_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailLoggingImportErrorContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
