/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2ImportProductsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2ImportProductsRequest::OAIGoogleCloudRetailV2ImportProductsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2ImportProductsRequest::OAIGoogleCloudRetailV2ImportProductsRequest() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2ImportProductsRequest::~OAIGoogleCloudRetailV2ImportProductsRequest() {}

void OAIGoogleCloudRetailV2ImportProductsRequest::initializeModel() {

    m_errors_config_isSet = false;
    m_errors_config_isValid = false;

    m_input_config_isSet = false;
    m_input_config_isValid = false;

    m_notification_pubsub_topic_isSet = false;
    m_notification_pubsub_topic_isValid = false;

    m_reconciliation_mode_isSet = false;
    m_reconciliation_mode_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_update_mask_isSet = false;
    m_update_mask_isValid = false;
}

void OAIGoogleCloudRetailV2ImportProductsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2ImportProductsRequest::fromJsonObject(QJsonObject json) {

    m_errors_config_isValid = ::OpenAPI::fromJsonValue(m_errors_config, json[QString("errorsConfig")]);
    m_errors_config_isSet = !json[QString("errorsConfig")].isNull() && m_errors_config_isValid;

    m_input_config_isValid = ::OpenAPI::fromJsonValue(m_input_config, json[QString("inputConfig")]);
    m_input_config_isSet = !json[QString("inputConfig")].isNull() && m_input_config_isValid;

    m_notification_pubsub_topic_isValid = ::OpenAPI::fromJsonValue(m_notification_pubsub_topic, json[QString("notificationPubsubTopic")]);
    m_notification_pubsub_topic_isSet = !json[QString("notificationPubsubTopic")].isNull() && m_notification_pubsub_topic_isValid;

    m_reconciliation_mode_isValid = ::OpenAPI::fromJsonValue(m_reconciliation_mode, json[QString("reconciliationMode")]);
    m_reconciliation_mode_isSet = !json[QString("reconciliationMode")].isNull() && m_reconciliation_mode_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_update_mask_isValid = ::OpenAPI::fromJsonValue(m_update_mask, json[QString("updateMask")]);
    m_update_mask_isSet = !json[QString("updateMask")].isNull() && m_update_mask_isValid;
}

QString OAIGoogleCloudRetailV2ImportProductsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2ImportProductsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_errors_config.isSet()) {
        obj.insert(QString("errorsConfig"), ::OpenAPI::toJsonValue(m_errors_config));
    }
    if (m_input_config.isSet()) {
        obj.insert(QString("inputConfig"), ::OpenAPI::toJsonValue(m_input_config));
    }
    if (m_notification_pubsub_topic_isSet) {
        obj.insert(QString("notificationPubsubTopic"), ::OpenAPI::toJsonValue(m_notification_pubsub_topic));
    }
    if (m_reconciliation_mode_isSet) {
        obj.insert(QString("reconciliationMode"), ::OpenAPI::toJsonValue(m_reconciliation_mode));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_update_mask_isSet) {
        obj.insert(QString("updateMask"), ::OpenAPI::toJsonValue(m_update_mask));
    }
    return obj;
}

OAIGoogleCloudRetailV2ImportErrorsConfig OAIGoogleCloudRetailV2ImportProductsRequest::getErrorsConfig() const {
    return m_errors_config;
}
void OAIGoogleCloudRetailV2ImportProductsRequest::setErrorsConfig(const OAIGoogleCloudRetailV2ImportErrorsConfig &errors_config) {
    m_errors_config = errors_config;
    m_errors_config_isSet = true;
}

bool OAIGoogleCloudRetailV2ImportProductsRequest::is_errors_config_Set() const{
    return m_errors_config_isSet;
}

bool OAIGoogleCloudRetailV2ImportProductsRequest::is_errors_config_Valid() const{
    return m_errors_config_isValid;
}

OAIGoogleCloudRetailV2ProductInputConfig OAIGoogleCloudRetailV2ImportProductsRequest::getInputConfig() const {
    return m_input_config;
}
void OAIGoogleCloudRetailV2ImportProductsRequest::setInputConfig(const OAIGoogleCloudRetailV2ProductInputConfig &input_config) {
    m_input_config = input_config;
    m_input_config_isSet = true;
}

bool OAIGoogleCloudRetailV2ImportProductsRequest::is_input_config_Set() const{
    return m_input_config_isSet;
}

bool OAIGoogleCloudRetailV2ImportProductsRequest::is_input_config_Valid() const{
    return m_input_config_isValid;
}

QString OAIGoogleCloudRetailV2ImportProductsRequest::getNotificationPubsubTopic() const {
    return m_notification_pubsub_topic;
}
void OAIGoogleCloudRetailV2ImportProductsRequest::setNotificationPubsubTopic(const QString &notification_pubsub_topic) {
    m_notification_pubsub_topic = notification_pubsub_topic;
    m_notification_pubsub_topic_isSet = true;
}

bool OAIGoogleCloudRetailV2ImportProductsRequest::is_notification_pubsub_topic_Set() const{
    return m_notification_pubsub_topic_isSet;
}

bool OAIGoogleCloudRetailV2ImportProductsRequest::is_notification_pubsub_topic_Valid() const{
    return m_notification_pubsub_topic_isValid;
}

QString OAIGoogleCloudRetailV2ImportProductsRequest::getReconciliationMode() const {
    return m_reconciliation_mode;
}
void OAIGoogleCloudRetailV2ImportProductsRequest::setReconciliationMode(const QString &reconciliation_mode) {
    m_reconciliation_mode = reconciliation_mode;
    m_reconciliation_mode_isSet = true;
}

bool OAIGoogleCloudRetailV2ImportProductsRequest::is_reconciliation_mode_Set() const{
    return m_reconciliation_mode_isSet;
}

bool OAIGoogleCloudRetailV2ImportProductsRequest::is_reconciliation_mode_Valid() const{
    return m_reconciliation_mode_isValid;
}

QString OAIGoogleCloudRetailV2ImportProductsRequest::getRequestId() const {
    return m_request_id;
}
void OAIGoogleCloudRetailV2ImportProductsRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIGoogleCloudRetailV2ImportProductsRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIGoogleCloudRetailV2ImportProductsRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIGoogleCloudRetailV2ImportProductsRequest::getUpdateMask() const {
    return m_update_mask;
}
void OAIGoogleCloudRetailV2ImportProductsRequest::setUpdateMask(const QString &update_mask) {
    m_update_mask = update_mask;
    m_update_mask_isSet = true;
}

bool OAIGoogleCloudRetailV2ImportProductsRequest::is_update_mask_Set() const{
    return m_update_mask_isSet;
}

bool OAIGoogleCloudRetailV2ImportProductsRequest::is_update_mask_Valid() const{
    return m_update_mask_isValid;
}

bool OAIGoogleCloudRetailV2ImportProductsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_pubsub_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciliation_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_mask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2ImportProductsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
