/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment::OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment::OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment::~OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment() {}

void OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment::initializeModel() {

    m_experiment_serving_config_isSet = false;
    m_experiment_serving_config_isValid = false;

    m_original_serving_config_isSet = false;
    m_original_serving_config_isValid = false;
}

void OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment::fromJsonObject(QJsonObject json) {

    m_experiment_serving_config_isValid = ::OpenAPI::fromJsonValue(m_experiment_serving_config, json[QString("experimentServingConfig")]);
    m_experiment_serving_config_isSet = !json[QString("experimentServingConfig")].isNull() && m_experiment_serving_config_isValid;

    m_original_serving_config_isValid = ::OpenAPI::fromJsonValue(m_original_serving_config, json[QString("originalServingConfig")]);
    m_original_serving_config_isSet = !json[QString("originalServingConfig")].isNull() && m_original_serving_config_isValid;
}

QString OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment::asJsonObject() const {
    QJsonObject obj;
    if (m_experiment_serving_config_isSet) {
        obj.insert(QString("experimentServingConfig"), ::OpenAPI::toJsonValue(m_experiment_serving_config));
    }
    if (m_original_serving_config_isSet) {
        obj.insert(QString("originalServingConfig"), ::OpenAPI::toJsonValue(m_original_serving_config));
    }
    return obj;
}

QString OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment::getExperimentServingConfig() const {
    return m_experiment_serving_config;
}
void OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment::setExperimentServingConfig(const QString &experiment_serving_config) {
    m_experiment_serving_config = experiment_serving_config;
    m_experiment_serving_config_isSet = true;
}

bool OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment::is_experiment_serving_config_Set() const{
    return m_experiment_serving_config_isSet;
}

bool OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment::is_experiment_serving_config_Valid() const{
    return m_experiment_serving_config_isValid;
}

QString OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment::getOriginalServingConfig() const {
    return m_original_serving_config;
}
void OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment::setOriginalServingConfig(const QString &original_serving_config) {
    m_original_serving_config = original_serving_config;
    m_original_serving_config_isSet = true;
}

bool OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment::is_original_serving_config_Set() const{
    return m_original_serving_config_isSet;
}

bool OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment::is_original_serving_config_Valid() const{
    return m_original_serving_config_isValid;
}

bool OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_experiment_serving_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_serving_config_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2ExperimentInfoServingConfigExperiment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
