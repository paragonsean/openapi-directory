/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2Interval.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2Interval::OAIGoogleCloudRetailV2Interval(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2Interval::OAIGoogleCloudRetailV2Interval() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2Interval::~OAIGoogleCloudRetailV2Interval() {}

void OAIGoogleCloudRetailV2Interval::initializeModel() {

    m_exclusive_maximum_isSet = false;
    m_exclusive_maximum_isValid = false;

    m_exclusive_minimum_isSet = false;
    m_exclusive_minimum_isValid = false;

    m_maximum_isSet = false;
    m_maximum_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;
}

void OAIGoogleCloudRetailV2Interval::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2Interval::fromJsonObject(QJsonObject json) {

    m_exclusive_maximum_isValid = ::OpenAPI::fromJsonValue(m_exclusive_maximum, json[QString("exclusiveMaximum")]);
    m_exclusive_maximum_isSet = !json[QString("exclusiveMaximum")].isNull() && m_exclusive_maximum_isValid;

    m_exclusive_minimum_isValid = ::OpenAPI::fromJsonValue(m_exclusive_minimum, json[QString("exclusiveMinimum")]);
    m_exclusive_minimum_isSet = !json[QString("exclusiveMinimum")].isNull() && m_exclusive_minimum_isValid;

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("maximum")]);
    m_maximum_isSet = !json[QString("maximum")].isNull() && m_maximum_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("minimum")]);
    m_minimum_isSet = !json[QString("minimum")].isNull() && m_minimum_isValid;
}

QString OAIGoogleCloudRetailV2Interval::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2Interval::asJsonObject() const {
    QJsonObject obj;
    if (m_exclusive_maximum_isSet) {
        obj.insert(QString("exclusiveMaximum"), ::OpenAPI::toJsonValue(m_exclusive_maximum));
    }
    if (m_exclusive_minimum_isSet) {
        obj.insert(QString("exclusiveMinimum"), ::OpenAPI::toJsonValue(m_exclusive_minimum));
    }
    if (m_maximum_isSet) {
        obj.insert(QString("maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    if (m_minimum_isSet) {
        obj.insert(QString("minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    return obj;
}

double OAIGoogleCloudRetailV2Interval::getExclusiveMaximum() const {
    return m_exclusive_maximum;
}
void OAIGoogleCloudRetailV2Interval::setExclusiveMaximum(const double &exclusive_maximum) {
    m_exclusive_maximum = exclusive_maximum;
    m_exclusive_maximum_isSet = true;
}

bool OAIGoogleCloudRetailV2Interval::is_exclusive_maximum_Set() const{
    return m_exclusive_maximum_isSet;
}

bool OAIGoogleCloudRetailV2Interval::is_exclusive_maximum_Valid() const{
    return m_exclusive_maximum_isValid;
}

double OAIGoogleCloudRetailV2Interval::getExclusiveMinimum() const {
    return m_exclusive_minimum;
}
void OAIGoogleCloudRetailV2Interval::setExclusiveMinimum(const double &exclusive_minimum) {
    m_exclusive_minimum = exclusive_minimum;
    m_exclusive_minimum_isSet = true;
}

bool OAIGoogleCloudRetailV2Interval::is_exclusive_minimum_Set() const{
    return m_exclusive_minimum_isSet;
}

bool OAIGoogleCloudRetailV2Interval::is_exclusive_minimum_Valid() const{
    return m_exclusive_minimum_isValid;
}

double OAIGoogleCloudRetailV2Interval::getMaximum() const {
    return m_maximum;
}
void OAIGoogleCloudRetailV2Interval::setMaximum(const double &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIGoogleCloudRetailV2Interval::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIGoogleCloudRetailV2Interval::is_maximum_Valid() const{
    return m_maximum_isValid;
}

double OAIGoogleCloudRetailV2Interval::getMinimum() const {
    return m_minimum;
}
void OAIGoogleCloudRetailV2Interval::setMinimum(const double &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIGoogleCloudRetailV2Interval::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIGoogleCloudRetailV2Interval::is_minimum_Valid() const{
    return m_minimum_isValid;
}

bool OAIGoogleCloudRetailV2Interval::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclusive_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2Interval::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
