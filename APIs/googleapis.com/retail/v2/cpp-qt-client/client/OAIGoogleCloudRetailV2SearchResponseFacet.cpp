/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2SearchResponseFacet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2SearchResponseFacet::OAIGoogleCloudRetailV2SearchResponseFacet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2SearchResponseFacet::OAIGoogleCloudRetailV2SearchResponseFacet() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2SearchResponseFacet::~OAIGoogleCloudRetailV2SearchResponseFacet() {}

void OAIGoogleCloudRetailV2SearchResponseFacet::initializeModel() {

    m_dynamic_facet_isSet = false;
    m_dynamic_facet_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIGoogleCloudRetailV2SearchResponseFacet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2SearchResponseFacet::fromJsonObject(QJsonObject json) {

    m_dynamic_facet_isValid = ::OpenAPI::fromJsonValue(m_dynamic_facet, json[QString("dynamicFacet")]);
    m_dynamic_facet_isSet = !json[QString("dynamicFacet")].isNull() && m_dynamic_facet_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIGoogleCloudRetailV2SearchResponseFacet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2SearchResponseFacet::asJsonObject() const {
    QJsonObject obj;
    if (m_dynamic_facet_isSet) {
        obj.insert(QString("dynamicFacet"), ::OpenAPI::toJsonValue(m_dynamic_facet));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

bool OAIGoogleCloudRetailV2SearchResponseFacet::isDynamicFacet() const {
    return m_dynamic_facet;
}
void OAIGoogleCloudRetailV2SearchResponseFacet::setDynamicFacet(const bool &dynamic_facet) {
    m_dynamic_facet = dynamic_facet;
    m_dynamic_facet_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchResponseFacet::is_dynamic_facet_Set() const{
    return m_dynamic_facet_isSet;
}

bool OAIGoogleCloudRetailV2SearchResponseFacet::is_dynamic_facet_Valid() const{
    return m_dynamic_facet_isValid;
}

QString OAIGoogleCloudRetailV2SearchResponseFacet::getKey() const {
    return m_key;
}
void OAIGoogleCloudRetailV2SearchResponseFacet::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchResponseFacet::is_key_Set() const{
    return m_key_isSet;
}

bool OAIGoogleCloudRetailV2SearchResponseFacet::is_key_Valid() const{
    return m_key_isValid;
}

QList<OAIGoogleCloudRetailV2SearchResponseFacetFacetValue> OAIGoogleCloudRetailV2SearchResponseFacet::getValues() const {
    return m_values;
}
void OAIGoogleCloudRetailV2SearchResponseFacet::setValues(const QList<OAIGoogleCloudRetailV2SearchResponseFacetFacetValue> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIGoogleCloudRetailV2SearchResponseFacet::is_values_Set() const{
    return m_values_isSet;
}

bool OAIGoogleCloudRetailV2SearchResponseFacet::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIGoogleCloudRetailV2SearchResponseFacet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dynamic_facet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2SearchResponseFacet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
