/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2ConditionQueryTerm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2ConditionQueryTerm::OAIGoogleCloudRetailV2ConditionQueryTerm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2ConditionQueryTerm::OAIGoogleCloudRetailV2ConditionQueryTerm() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2ConditionQueryTerm::~OAIGoogleCloudRetailV2ConditionQueryTerm() {}

void OAIGoogleCloudRetailV2ConditionQueryTerm::initializeModel() {

    m_full_match_isSet = false;
    m_full_match_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIGoogleCloudRetailV2ConditionQueryTerm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2ConditionQueryTerm::fromJsonObject(QJsonObject json) {

    m_full_match_isValid = ::OpenAPI::fromJsonValue(m_full_match, json[QString("fullMatch")]);
    m_full_match_isSet = !json[QString("fullMatch")].isNull() && m_full_match_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIGoogleCloudRetailV2ConditionQueryTerm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2ConditionQueryTerm::asJsonObject() const {
    QJsonObject obj;
    if (m_full_match_isSet) {
        obj.insert(QString("fullMatch"), ::OpenAPI::toJsonValue(m_full_match));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

bool OAIGoogleCloudRetailV2ConditionQueryTerm::isFullMatch() const {
    return m_full_match;
}
void OAIGoogleCloudRetailV2ConditionQueryTerm::setFullMatch(const bool &full_match) {
    m_full_match = full_match;
    m_full_match_isSet = true;
}

bool OAIGoogleCloudRetailV2ConditionQueryTerm::is_full_match_Set() const{
    return m_full_match_isSet;
}

bool OAIGoogleCloudRetailV2ConditionQueryTerm::is_full_match_Valid() const{
    return m_full_match_isValid;
}

QString OAIGoogleCloudRetailV2ConditionQueryTerm::getValue() const {
    return m_value;
}
void OAIGoogleCloudRetailV2ConditionQueryTerm::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIGoogleCloudRetailV2ConditionQueryTerm::is_value_Set() const{
    return m_value_isSet;
}

bool OAIGoogleCloudRetailV2ConditionQueryTerm::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIGoogleCloudRetailV2ConditionQueryTerm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_full_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2ConditionQueryTerm::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
