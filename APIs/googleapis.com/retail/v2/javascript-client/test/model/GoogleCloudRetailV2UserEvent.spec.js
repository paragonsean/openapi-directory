/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VertexAiSearchForRetailApi);
  }
}(this, function(expect, VertexAiSearchForRetailApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GoogleCloudRetailV2UserEvent', function() {
    it('should create an instance of GoogleCloudRetailV2UserEvent', function() {
      // uncomment below and update the code to test GoogleCloudRetailV2UserEvent
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be.a(VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent);
    });

    it('should have the property attributes (base name: "attributes")', function() {
      // uncomment below and update the code to test the property attributes
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property attributionToken (base name: "attributionToken")', function() {
      // uncomment below and update the code to test the property attributionToken
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property cartId (base name: "cartId")', function() {
      // uncomment below and update the code to test the property cartId
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property completionDetail (base name: "completionDetail")', function() {
      // uncomment below and update the code to test the property completionDetail
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property entity (base name: "entity")', function() {
      // uncomment below and update the code to test the property entity
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property eventTime (base name: "eventTime")', function() {
      // uncomment below and update the code to test the property eventTime
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property eventType (base name: "eventType")', function() {
      // uncomment below and update the code to test the property eventType
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property experimentIds (base name: "experimentIds")', function() {
      // uncomment below and update the code to test the property experimentIds
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property filter (base name: "filter")', function() {
      // uncomment below and update the code to test the property filter
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property offset (base name: "offset")', function() {
      // uncomment below and update the code to test the property offset
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property orderBy (base name: "orderBy")', function() {
      // uncomment below and update the code to test the property orderBy
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property pageCategories (base name: "pageCategories")', function() {
      // uncomment below and update the code to test the property pageCategories
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property pageViewId (base name: "pageViewId")', function() {
      // uncomment below and update the code to test the property pageViewId
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property productDetails (base name: "productDetails")', function() {
      // uncomment below and update the code to test the property productDetails
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property purchaseTransaction (base name: "purchaseTransaction")', function() {
      // uncomment below and update the code to test the property purchaseTransaction
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property referrerUri (base name: "referrerUri")', function() {
      // uncomment below and update the code to test the property referrerUri
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property searchQuery (base name: "searchQuery")', function() {
      // uncomment below and update the code to test the property searchQuery
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property sessionId (base name: "sessionId")', function() {
      // uncomment below and update the code to test the property sessionId
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property uri (base name: "uri")', function() {
      // uncomment below and update the code to test the property uri
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property userInfo (base name: "userInfo")', function() {
      // uncomment below and update the code to test the property userInfo
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

    it('should have the property visitorId (base name: "visitorId")', function() {
      // uncomment below and update the code to test the property visitorId
      //var instance = new VertexAiSearchForRetailApi.GoogleCloudRetailV2UserEvent();
      //expect(instance).to.be();
    });

  });

}));
