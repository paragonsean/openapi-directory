/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudRetailV2PriceInfoPriceRange from './GoogleCloudRetailV2PriceInfoPriceRange';

/**
 * The GoogleCloudRetailV2PriceInfo model module.
 * @module model/GoogleCloudRetailV2PriceInfo
 * @version v2
 */
class GoogleCloudRetailV2PriceInfo {
    /**
     * Constructs a new <code>GoogleCloudRetailV2PriceInfo</code>.
     * The price information of a Product.
     * @alias module:model/GoogleCloudRetailV2PriceInfo
     */
    constructor() { 
        
        GoogleCloudRetailV2PriceInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudRetailV2PriceInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudRetailV2PriceInfo} obj Optional instance to populate.
     * @return {module:model/GoogleCloudRetailV2PriceInfo} The populated <code>GoogleCloudRetailV2PriceInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudRetailV2PriceInfo();

            if (data.hasOwnProperty('cost')) {
                obj['cost'] = ApiClient.convertToType(data['cost'], 'Number');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('originalPrice')) {
                obj['originalPrice'] = ApiClient.convertToType(data['originalPrice'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('priceEffectiveTime')) {
                obj['priceEffectiveTime'] = ApiClient.convertToType(data['priceEffectiveTime'], 'String');
            }
            if (data.hasOwnProperty('priceExpireTime')) {
                obj['priceExpireTime'] = ApiClient.convertToType(data['priceExpireTime'], 'String');
            }
            if (data.hasOwnProperty('priceRange')) {
                obj['priceRange'] = GoogleCloudRetailV2PriceInfoPriceRange.constructFromObject(data['priceRange']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudRetailV2PriceInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudRetailV2PriceInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['priceEffectiveTime'] && !(typeof data['priceEffectiveTime'] === 'string' || data['priceEffectiveTime'] instanceof String)) {
            throw new Error("Expected the field `priceEffectiveTime` to be a primitive type in the JSON string but got " + data['priceEffectiveTime']);
        }
        // ensure the json data is a string
        if (data['priceExpireTime'] && !(typeof data['priceExpireTime'] === 'string' || data['priceExpireTime'] instanceof String)) {
            throw new Error("Expected the field `priceExpireTime` to be a primitive type in the JSON string but got " + data['priceExpireTime']);
        }
        // validate the optional field `priceRange`
        if (data['priceRange']) { // data not null
          GoogleCloudRetailV2PriceInfoPriceRange.validateJSON(data['priceRange']);
        }

        return true;
    }


}



/**
 * The costs associated with the sale of a particular product. Used for gross profit reporting. * Profit = price - cost Google Merchant Center property [cost_of_goods_sold](https://support.google.com/merchants/answer/9017895).
 * @member {Number} cost
 */
GoogleCloudRetailV2PriceInfo.prototype['cost'] = undefined;

/**
 * The 3-letter currency code defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html). If this field is an unrecognizable currency code, an INVALID_ARGUMENT error is returned. The Product.Type.VARIANT Products with the same Product.primary_product_id must share the same currency_code. Otherwise, a FAILED_PRECONDITION error is returned.
 * @member {String} currencyCode
 */
GoogleCloudRetailV2PriceInfo.prototype['currencyCode'] = undefined;

/**
 * Price of the product without any discount. If zero, by default set to be the price. If set, original_price should be greater than or equal to price, otherwise an INVALID_ARGUMENT error is thrown.
 * @member {Number} originalPrice
 */
GoogleCloudRetailV2PriceInfo.prototype['originalPrice'] = undefined;

/**
 * Price of the product. Google Merchant Center property [price](https://support.google.com/merchants/answer/6324371). Schema.org property [Offer.price](https://schema.org/price).
 * @member {Number} price
 */
GoogleCloudRetailV2PriceInfo.prototype['price'] = undefined;

/**
 * The timestamp when the price starts to be effective. This can be set as a future timestamp, and the price is only used for search after price_effective_time. If so, the original_price must be set and original_price is used before price_effective_time. Do not set if price is always effective because it will cause additional latency during search.
 * @member {String} priceEffectiveTime
 */
GoogleCloudRetailV2PriceInfo.prototype['priceEffectiveTime'] = undefined;

/**
 * The timestamp when the price stops to be effective. The price is used for search before price_expire_time. If this field is set, the original_price must be set and original_price is used after price_expire_time. Do not set if price is always effective because it will cause additional latency during search.
 * @member {String} priceExpireTime
 */
GoogleCloudRetailV2PriceInfo.prototype['priceExpireTime'] = undefined;

/**
 * @member {module:model/GoogleCloudRetailV2PriceInfoPriceRange} priceRange
 */
GoogleCloudRetailV2PriceInfo.prototype['priceRange'] = undefined;






export default GoogleCloudRetailV2PriceInfo;

