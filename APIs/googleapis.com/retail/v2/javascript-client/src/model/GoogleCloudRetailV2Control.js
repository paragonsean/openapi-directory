/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudRetailV2Rule from './GoogleCloudRetailV2Rule';

/**
 * The GoogleCloudRetailV2Control model module.
 * @module model/GoogleCloudRetailV2Control
 * @version v2
 */
class GoogleCloudRetailV2Control {
    /**
     * Constructs a new <code>GoogleCloudRetailV2Control</code>.
     * Configures dynamic metadata that can be linked to a ServingConfig and affect search or recommendation results at serving time.
     * @alias module:model/GoogleCloudRetailV2Control
     */
    constructor() { 
        
        GoogleCloudRetailV2Control.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudRetailV2Control</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudRetailV2Control} obj Optional instance to populate.
     * @return {module:model/GoogleCloudRetailV2Control} The populated <code>GoogleCloudRetailV2Control</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudRetailV2Control();

            if (data.hasOwnProperty('associatedServingConfigIds')) {
                obj['associatedServingConfigIds'] = ApiClient.convertToType(data['associatedServingConfigIds'], ['String']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rule')) {
                obj['rule'] = GoogleCloudRetailV2Rule.constructFromObject(data['rule']);
            }
            if (data.hasOwnProperty('searchSolutionUseCase')) {
                obj['searchSolutionUseCase'] = ApiClient.convertToType(data['searchSolutionUseCase'], ['String']);
            }
            if (data.hasOwnProperty('solutionTypes')) {
                obj['solutionTypes'] = ApiClient.convertToType(data['solutionTypes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudRetailV2Control</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudRetailV2Control</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['associatedServingConfigIds'])) {
            throw new Error("Expected the field `associatedServingConfigIds` to be an array in the JSON data but got " + data['associatedServingConfigIds']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `rule`
        if (data['rule']) { // data not null
          GoogleCloudRetailV2Rule.validateJSON(data['rule']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['searchSolutionUseCase'])) {
            throw new Error("Expected the field `searchSolutionUseCase` to be an array in the JSON data but got " + data['searchSolutionUseCase']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['solutionTypes'])) {
            throw new Error("Expected the field `solutionTypes` to be an array in the JSON data but got " + data['solutionTypes']);
        }

        return true;
    }


}



/**
 * Output only. List of serving config ids that are associated with this control in the same Catalog. Note the association is managed via the ServingConfig, this is an output only denormalized view.
 * @member {Array.<String>} associatedServingConfigIds
 */
GoogleCloudRetailV2Control.prototype['associatedServingConfigIds'] = undefined;

/**
 * Required. The human readable control display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is thrown.
 * @member {String} displayName
 */
GoogleCloudRetailV2Control.prototype['displayName'] = undefined;

/**
 * Immutable. Fully qualified name `projects/_*_/locations/global/catalogs/_*_/controls/_*`
 * @member {String} name
 */
GoogleCloudRetailV2Control.prototype['name'] = undefined;

/**
 * @member {module:model/GoogleCloudRetailV2Rule} rule
 */
GoogleCloudRetailV2Control.prototype['rule'] = undefined;

/**
 * Specifies the use case for the control. Affects what condition fields can be set. Only settable by search controls. Will default to SEARCH_SOLUTION_USE_CASE_SEARCH if not specified. Currently only allow one search_solution_use_case per control.
 * @member {Array.<module:model/GoogleCloudRetailV2Control.SearchSolutionUseCaseEnum>} searchSolutionUseCase
 */
GoogleCloudRetailV2Control.prototype['searchSolutionUseCase'] = undefined;

/**
 * Required. Immutable. The solution types that the control is used for. Currently we support setting only one type of solution at creation time. Only `SOLUTION_TYPE_SEARCH` value is supported at the moment. If no solution type is provided at creation time, will default to SOLUTION_TYPE_SEARCH.
 * @member {Array.<module:model/GoogleCloudRetailV2Control.SolutionTypesEnum>} solutionTypes
 */
GoogleCloudRetailV2Control.prototype['solutionTypes'] = undefined;





/**
 * Allowed values for the <code>searchSolutionUseCase</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudRetailV2Control['SearchSolutionUseCaseEnum'] = {

    /**
     * value: "SEARCH_SOLUTION_USE_CASE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "SEARCH_SOLUTION_USE_CASE_UNSPECIFIED",

    /**
     * value: "SEARCH_SOLUTION_USE_CASE_SEARCH"
     * @const
     */
    "SEARCH": "SEARCH_SOLUTION_USE_CASE_SEARCH",

    /**
     * value: "SEARCH_SOLUTION_USE_CASE_BROWSE"
     * @const
     */
    "BROWSE": "SEARCH_SOLUTION_USE_CASE_BROWSE"
};


/**
 * Allowed values for the <code>solutionTypes</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudRetailV2Control['SolutionTypesEnum'] = {

    /**
     * value: "SOLUTION_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "SOLUTION_TYPE_UNSPECIFIED",

    /**
     * value: "SOLUTION_TYPE_RECOMMENDATION"
     * @const
     */
    "RECOMMENDATION": "SOLUTION_TYPE_RECOMMENDATION",

    /**
     * value: "SOLUTION_TYPE_SEARCH"
     * @const
     */
    "SEARCH": "SOLUTION_TYPE_SEARCH"
};



export default GoogleCloudRetailV2Control;

