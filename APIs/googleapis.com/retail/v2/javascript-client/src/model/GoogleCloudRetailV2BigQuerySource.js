/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleTypeDate from './GoogleTypeDate';

/**
 * The GoogleCloudRetailV2BigQuerySource model module.
 * @module model/GoogleCloudRetailV2BigQuerySource
 * @version v2
 */
class GoogleCloudRetailV2BigQuerySource {
    /**
     * Constructs a new <code>GoogleCloudRetailV2BigQuerySource</code>.
     * BigQuery source import data from.
     * @alias module:model/GoogleCloudRetailV2BigQuerySource
     */
    constructor() { 
        
        GoogleCloudRetailV2BigQuerySource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudRetailV2BigQuerySource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudRetailV2BigQuerySource} obj Optional instance to populate.
     * @return {module:model/GoogleCloudRetailV2BigQuerySource} The populated <code>GoogleCloudRetailV2BigQuerySource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudRetailV2BigQuerySource();

            if (data.hasOwnProperty('dataSchema')) {
                obj['dataSchema'] = ApiClient.convertToType(data['dataSchema'], 'String');
            }
            if (data.hasOwnProperty('datasetId')) {
                obj['datasetId'] = ApiClient.convertToType(data['datasetId'], 'String');
            }
            if (data.hasOwnProperty('gcsStagingDir')) {
                obj['gcsStagingDir'] = ApiClient.convertToType(data['gcsStagingDir'], 'String');
            }
            if (data.hasOwnProperty('partitionDate')) {
                obj['partitionDate'] = GoogleTypeDate.constructFromObject(data['partitionDate']);
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('tableId')) {
                obj['tableId'] = ApiClient.convertToType(data['tableId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudRetailV2BigQuerySource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudRetailV2BigQuerySource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataSchema'] && !(typeof data['dataSchema'] === 'string' || data['dataSchema'] instanceof String)) {
            throw new Error("Expected the field `dataSchema` to be a primitive type in the JSON string but got " + data['dataSchema']);
        }
        // ensure the json data is a string
        if (data['datasetId'] && !(typeof data['datasetId'] === 'string' || data['datasetId'] instanceof String)) {
            throw new Error("Expected the field `datasetId` to be a primitive type in the JSON string but got " + data['datasetId']);
        }
        // ensure the json data is a string
        if (data['gcsStagingDir'] && !(typeof data['gcsStagingDir'] === 'string' || data['gcsStagingDir'] instanceof String)) {
            throw new Error("Expected the field `gcsStagingDir` to be a primitive type in the JSON string but got " + data['gcsStagingDir']);
        }
        // validate the optional field `partitionDate`
        if (data['partitionDate']) { // data not null
          GoogleTypeDate.validateJSON(data['partitionDate']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['tableId'] && !(typeof data['tableId'] === 'string' || data['tableId'] instanceof String)) {
            throw new Error("Expected the field `tableId` to be a primitive type in the JSON string but got " + data['tableId']);
        }

        return true;
    }


}



/**
 * The schema to use when parsing the data from the source. Supported values for product imports: * `product` (default): One JSON Product per line. Each product must have a valid Product.id. * `product_merchant_center`: See [Importing catalog data from Merchant Center](https://cloud.google.com/retail/recommendations-ai/docs/upload-catalog#mc). Supported values for user events imports: * `user_event` (default): One JSON UserEvent per line. * `user_event_ga360`: The schema is available here: https://support.google.com/analytics/answer/3437719. * `user_event_ga4`: The schema is available here: https://support.google.com/analytics/answer/7029846. Supported values for autocomplete imports: * `suggestions` (default): One JSON completion suggestion per line. * `denylist`: One JSON deny suggestion per line. * `allowlist`: One JSON allow suggestion per line.
 * @member {String} dataSchema
 */
GoogleCloudRetailV2BigQuerySource.prototype['dataSchema'] = undefined;

/**
 * Required. The BigQuery data set to copy the data from with a length limit of 1,024 characters.
 * @member {String} datasetId
 */
GoogleCloudRetailV2BigQuerySource.prototype['datasetId'] = undefined;

/**
 * Intermediate Cloud Storage directory used for the import with a length limit of 2,000 characters. Can be specified if one wants to have the BigQuery export to a specific Cloud Storage directory.
 * @member {String} gcsStagingDir
 */
GoogleCloudRetailV2BigQuerySource.prototype['gcsStagingDir'] = undefined;

/**
 * @member {module:model/GoogleTypeDate} partitionDate
 */
GoogleCloudRetailV2BigQuerySource.prototype['partitionDate'] = undefined;

/**
 * The project ID (can be project # or ID) that the BigQuery source is in with a length limit of 128 characters. If not specified, inherits the project ID from the parent request.
 * @member {String} projectId
 */
GoogleCloudRetailV2BigQuerySource.prototype['projectId'] = undefined;

/**
 * Required. The BigQuery table to copy the data from with a length limit of 1,024 characters.
 * @member {String} tableId
 */
GoogleCloudRetailV2BigQuerySource.prototype['tableId'] = undefined;






export default GoogleCloudRetailV2BigQuerySource;

