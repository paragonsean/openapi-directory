/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudRetailV2betaSearchRequestDynamicFacetSpec from './GoogleCloudRetailV2betaSearchRequestDynamicFacetSpec';
import GoogleCloudRetailV2betaSearchRequestPersonalizationSpec from './GoogleCloudRetailV2betaSearchRequestPersonalizationSpec';

/**
 * The GoogleCloudRetailV2betaServingConfig model module.
 * @module model/GoogleCloudRetailV2betaServingConfig
 * @version v2beta
 */
class GoogleCloudRetailV2betaServingConfig {
    /**
     * Constructs a new <code>GoogleCloudRetailV2betaServingConfig</code>.
     * Configures metadata that is used to generate serving time results (e.g. search results or recommendation predictions).
     * @alias module:model/GoogleCloudRetailV2betaServingConfig
     */
    constructor() { 
        
        GoogleCloudRetailV2betaServingConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudRetailV2betaServingConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudRetailV2betaServingConfig} obj Optional instance to populate.
     * @return {module:model/GoogleCloudRetailV2betaServingConfig} The populated <code>GoogleCloudRetailV2betaServingConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudRetailV2betaServingConfig();

            if (data.hasOwnProperty('boostControlIds')) {
                obj['boostControlIds'] = ApiClient.convertToType(data['boostControlIds'], ['String']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('diversityLevel')) {
                obj['diversityLevel'] = ApiClient.convertToType(data['diversityLevel'], 'String');
            }
            if (data.hasOwnProperty('diversityType')) {
                obj['diversityType'] = ApiClient.convertToType(data['diversityType'], 'String');
            }
            if (data.hasOwnProperty('doNotAssociateControlIds')) {
                obj['doNotAssociateControlIds'] = ApiClient.convertToType(data['doNotAssociateControlIds'], ['String']);
            }
            if (data.hasOwnProperty('dynamicFacetSpec')) {
                obj['dynamicFacetSpec'] = GoogleCloudRetailV2betaSearchRequestDynamicFacetSpec.constructFromObject(data['dynamicFacetSpec']);
            }
            if (data.hasOwnProperty('enableCategoryFilterLevel')) {
                obj['enableCategoryFilterLevel'] = ApiClient.convertToType(data['enableCategoryFilterLevel'], 'String');
            }
            if (data.hasOwnProperty('facetControlIds')) {
                obj['facetControlIds'] = ApiClient.convertToType(data['facetControlIds'], ['String']);
            }
            if (data.hasOwnProperty('filterControlIds')) {
                obj['filterControlIds'] = ApiClient.convertToType(data['filterControlIds'], ['String']);
            }
            if (data.hasOwnProperty('ignoreControlIds')) {
                obj['ignoreControlIds'] = ApiClient.convertToType(data['ignoreControlIds'], ['String']);
            }
            if (data.hasOwnProperty('modelId')) {
                obj['modelId'] = ApiClient.convertToType(data['modelId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('onewaySynonymsControlIds')) {
                obj['onewaySynonymsControlIds'] = ApiClient.convertToType(data['onewaySynonymsControlIds'], ['String']);
            }
            if (data.hasOwnProperty('personalizationSpec')) {
                obj['personalizationSpec'] = GoogleCloudRetailV2betaSearchRequestPersonalizationSpec.constructFromObject(data['personalizationSpec']);
            }
            if (data.hasOwnProperty('priceRerankingLevel')) {
                obj['priceRerankingLevel'] = ApiClient.convertToType(data['priceRerankingLevel'], 'String');
            }
            if (data.hasOwnProperty('redirectControlIds')) {
                obj['redirectControlIds'] = ApiClient.convertToType(data['redirectControlIds'], ['String']);
            }
            if (data.hasOwnProperty('replacementControlIds')) {
                obj['replacementControlIds'] = ApiClient.convertToType(data['replacementControlIds'], ['String']);
            }
            if (data.hasOwnProperty('solutionTypes')) {
                obj['solutionTypes'] = ApiClient.convertToType(data['solutionTypes'], ['String']);
            }
            if (data.hasOwnProperty('twowaySynonymsControlIds')) {
                obj['twowaySynonymsControlIds'] = ApiClient.convertToType(data['twowaySynonymsControlIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudRetailV2betaServingConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudRetailV2betaServingConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['boostControlIds'])) {
            throw new Error("Expected the field `boostControlIds` to be an array in the JSON data but got " + data['boostControlIds']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['diversityLevel'] && !(typeof data['diversityLevel'] === 'string' || data['diversityLevel'] instanceof String)) {
            throw new Error("Expected the field `diversityLevel` to be a primitive type in the JSON string but got " + data['diversityLevel']);
        }
        // ensure the json data is a string
        if (data['diversityType'] && !(typeof data['diversityType'] === 'string' || data['diversityType'] instanceof String)) {
            throw new Error("Expected the field `diversityType` to be a primitive type in the JSON string but got " + data['diversityType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['doNotAssociateControlIds'])) {
            throw new Error("Expected the field `doNotAssociateControlIds` to be an array in the JSON data but got " + data['doNotAssociateControlIds']);
        }
        // validate the optional field `dynamicFacetSpec`
        if (data['dynamicFacetSpec']) { // data not null
          GoogleCloudRetailV2betaSearchRequestDynamicFacetSpec.validateJSON(data['dynamicFacetSpec']);
        }
        // ensure the json data is a string
        if (data['enableCategoryFilterLevel'] && !(typeof data['enableCategoryFilterLevel'] === 'string' || data['enableCategoryFilterLevel'] instanceof String)) {
            throw new Error("Expected the field `enableCategoryFilterLevel` to be a primitive type in the JSON string but got " + data['enableCategoryFilterLevel']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['facetControlIds'])) {
            throw new Error("Expected the field `facetControlIds` to be an array in the JSON data but got " + data['facetControlIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['filterControlIds'])) {
            throw new Error("Expected the field `filterControlIds` to be an array in the JSON data but got " + data['filterControlIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ignoreControlIds'])) {
            throw new Error("Expected the field `ignoreControlIds` to be an array in the JSON data but got " + data['ignoreControlIds']);
        }
        // ensure the json data is a string
        if (data['modelId'] && !(typeof data['modelId'] === 'string' || data['modelId'] instanceof String)) {
            throw new Error("Expected the field `modelId` to be a primitive type in the JSON string but got " + data['modelId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['onewaySynonymsControlIds'])) {
            throw new Error("Expected the field `onewaySynonymsControlIds` to be an array in the JSON data but got " + data['onewaySynonymsControlIds']);
        }
        // validate the optional field `personalizationSpec`
        if (data['personalizationSpec']) { // data not null
          GoogleCloudRetailV2betaSearchRequestPersonalizationSpec.validateJSON(data['personalizationSpec']);
        }
        // ensure the json data is a string
        if (data['priceRerankingLevel'] && !(typeof data['priceRerankingLevel'] === 'string' || data['priceRerankingLevel'] instanceof String)) {
            throw new Error("Expected the field `priceRerankingLevel` to be a primitive type in the JSON string but got " + data['priceRerankingLevel']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['redirectControlIds'])) {
            throw new Error("Expected the field `redirectControlIds` to be an array in the JSON data but got " + data['redirectControlIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['replacementControlIds'])) {
            throw new Error("Expected the field `replacementControlIds` to be an array in the JSON data but got " + data['replacementControlIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['solutionTypes'])) {
            throw new Error("Expected the field `solutionTypes` to be an array in the JSON data but got " + data['solutionTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['twowaySynonymsControlIds'])) {
            throw new Error("Expected the field `twowaySynonymsControlIds` to be an array in the JSON data but got " + data['twowaySynonymsControlIds']);
        }

        return true;
    }


}



/**
 * Condition boost specifications. If a product matches multiple conditions in the specifications, boost scores from these specifications are all applied and combined in a non-linear way. Maximum number of specifications is 100. Notice that if both ServingConfig.boost_control_ids and SearchRequest.boost_spec are set, the boost conditions from both places are evaluated. If a search request matches multiple boost conditions, the final boost score is equal to the sum of the boost scores from all matched boost conditions. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
 * @member {Array.<String>} boostControlIds
 */
GoogleCloudRetailV2betaServingConfig.prototype['boostControlIds'] = undefined;

/**
 * Required. The human readable serving config display name. Used in Retail UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
 * @member {String} displayName
 */
GoogleCloudRetailV2betaServingConfig.prototype['displayName'] = undefined;

/**
 * How much diversity to use in recommendation model results e.g. `medium-diversity` or `high-diversity`. Currently supported values: * `no-diversity` * `low-diversity` * `medium-diversity` * `high-diversity` * `auto-diversity` If not specified, we choose default based on recommendation model type. Default value: `no-diversity`. Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.
 * @member {String} diversityLevel
 */
GoogleCloudRetailV2betaServingConfig.prototype['diversityLevel'] = undefined;

/**
 * What kind of diversity to use - data driven or rule based. If unset, the server behavior defaults to RULE_BASED_DIVERSITY.
 * @member {module:model/GoogleCloudRetailV2betaServingConfig.DiversityTypeEnum} diversityType
 */
GoogleCloudRetailV2betaServingConfig.prototype['diversityType'] = undefined;

/**
 * Condition do not associate specifications. If multiple do not associate conditions match, all matching do not associate controls in the list will execute. - Order does not matter. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
 * @member {Array.<String>} doNotAssociateControlIds
 */
GoogleCloudRetailV2betaServingConfig.prototype['doNotAssociateControlIds'] = undefined;

/**
 * @member {module:model/GoogleCloudRetailV2betaSearchRequestDynamicFacetSpec} dynamicFacetSpec
 */
GoogleCloudRetailV2betaServingConfig.prototype['dynamicFacetSpec'] = undefined;

/**
 * Whether to add additional category filters on the `similar-items` model. If not specified, we enable it by default. Allowed values are: * `no-category-match`: No additional filtering of original results from the model and the customer's filters. * `relaxed-category-match`: Only keep results with categories that match at least one item categories in the PredictRequests's context item. * If customer also sends filters in the PredictRequest, then the results will satisfy both conditions (user given and category match). Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.
 * @member {String} enableCategoryFilterLevel
 */
GoogleCloudRetailV2betaServingConfig.prototype['enableCategoryFilterLevel'] = undefined;

/**
 * Facet specifications for faceted search. If empty, no facets are returned. The ids refer to the ids of Control resources with only the Facet control set. These controls are assumed to be in the same Catalog as the ServingConfig. A maximum of 100 values are allowed. Otherwise, an INVALID_ARGUMENT error is returned. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
 * @member {Array.<String>} facetControlIds
 */
GoogleCloudRetailV2betaServingConfig.prototype['facetControlIds'] = undefined;

/**
 * Condition filter specifications. If a product matches multiple conditions in the specifications, filters from these specifications are all applied and combined via the AND operator. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
 * @member {Array.<String>} filterControlIds
 */
GoogleCloudRetailV2betaServingConfig.prototype['filterControlIds'] = undefined;

/**
 * Condition ignore specifications. If multiple ignore conditions match, all matching ignore controls in the list will execute. - Order does not matter. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
 * @member {Array.<String>} ignoreControlIds
 */
GoogleCloudRetailV2betaServingConfig.prototype['ignoreControlIds'] = undefined;

/**
 * The id of the model in the same Catalog to use at serving time. Currently only RecommendationModels are supported: https://cloud.google.com/retail/recommendations-ai/docs/create-models Can be changed but only to a compatible model (e.g. others-you-may-like CTR to others-you-may-like CVR). Required when solution_types is SOLUTION_TYPE_RECOMMENDATION.
 * @member {String} modelId
 */
GoogleCloudRetailV2betaServingConfig.prototype['modelId'] = undefined;

/**
 * Immutable. Fully qualified name `projects/_*_/locations/global/catalogs/_*_/servingConfig/_*`
 * @member {String} name
 */
GoogleCloudRetailV2betaServingConfig.prototype['name'] = undefined;

/**
 * Condition oneway synonyms specifications. If multiple oneway synonyms conditions match, all matching oneway synonyms controls in the list will execute. Order of controls in the list will not matter. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
 * @member {Array.<String>} onewaySynonymsControlIds
 */
GoogleCloudRetailV2betaServingConfig.prototype['onewaySynonymsControlIds'] = undefined;

/**
 * @member {module:model/GoogleCloudRetailV2betaSearchRequestPersonalizationSpec} personalizationSpec
 */
GoogleCloudRetailV2betaServingConfig.prototype['personalizationSpec'] = undefined;

/**
 * How much price ranking we want in serving results. Price reranking causes product items with a similar recommendation probability to be ordered by price, with the highest-priced items first. This setting could result in a decrease in click-through and conversion rates. Allowed values are: * `no-price-reranking` * `low-price-reranking` * `medium-price-reranking` * `high-price-reranking` If not specified, we choose default based on model type. Default value: `no-price-reranking`. Can only be set if solution_types is SOLUTION_TYPE_RECOMMENDATION.
 * @member {String} priceRerankingLevel
 */
GoogleCloudRetailV2betaServingConfig.prototype['priceRerankingLevel'] = undefined;

/**
 * Condition redirect specifications. Only the first triggered redirect action is applied, even if multiple apply. Maximum number of specifications is 1000. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
 * @member {Array.<String>} redirectControlIds
 */
GoogleCloudRetailV2betaServingConfig.prototype['redirectControlIds'] = undefined;

/**
 * Condition replacement specifications. - Applied according to the order in the list. - A previously replaced term can not be re-replaced. - Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
 * @member {Array.<String>} replacementControlIds
 */
GoogleCloudRetailV2betaServingConfig.prototype['replacementControlIds'] = undefined;

/**
 * Required. Immutable. Specifies the solution types that a serving config can be associated with. Currently we support setting only one type of solution.
 * @member {Array.<module:model/GoogleCloudRetailV2betaServingConfig.SolutionTypesEnum>} solutionTypes
 */
GoogleCloudRetailV2betaServingConfig.prototype['solutionTypes'] = undefined;

/**
 * Condition synonyms specifications. If multiple syonyms conditions match, all matching synonyms control in the list will execute. Order of controls in the list will not matter. Maximum number of specifications is 100. Can only be set if solution_types is SOLUTION_TYPE_SEARCH.
 * @member {Array.<String>} twowaySynonymsControlIds
 */
GoogleCloudRetailV2betaServingConfig.prototype['twowaySynonymsControlIds'] = undefined;





/**
 * Allowed values for the <code>diversityType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudRetailV2betaServingConfig['DiversityTypeEnum'] = {

    /**
     * value: "DIVERSITY_TYPE_UNSPECIFIED"
     * @const
     */
    "DIVERSITY_TYPE_UNSPECIFIED": "DIVERSITY_TYPE_UNSPECIFIED",

    /**
     * value: "RULE_BASED_DIVERSITY"
     * @const
     */
    "RULE_BASED_DIVERSITY": "RULE_BASED_DIVERSITY",

    /**
     * value: "DATA_DRIVEN_DIVERSITY"
     * @const
     */
    "DATA_DRIVEN_DIVERSITY": "DATA_DRIVEN_DIVERSITY"
};


/**
 * Allowed values for the <code>solutionTypes</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudRetailV2betaServingConfig['SolutionTypesEnum'] = {

    /**
     * value: "SOLUTION_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "SOLUTION_TYPE_UNSPECIFIED",

    /**
     * value: "SOLUTION_TYPE_RECOMMENDATION"
     * @const
     */
    "RECOMMENDATION": "SOLUTION_TYPE_RECOMMENDATION",

    /**
     * value: "SOLUTION_TYPE_SEARCH"
     * @const
     */
    "SEARCH": "SOLUTION_TYPE_SEARCH"
};



export default GoogleCloudRetailV2betaServingConfig;

