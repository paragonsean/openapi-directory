/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudRetailV2betaColorInfo model module.
 * @module model/GoogleCloudRetailV2betaColorInfo
 * @version v2beta
 */
class GoogleCloudRetailV2betaColorInfo {
    /**
     * Constructs a new <code>GoogleCloudRetailV2betaColorInfo</code>.
     * The color information of a Product.
     * @alias module:model/GoogleCloudRetailV2betaColorInfo
     */
    constructor() { 
        
        GoogleCloudRetailV2betaColorInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudRetailV2betaColorInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudRetailV2betaColorInfo} obj Optional instance to populate.
     * @return {module:model/GoogleCloudRetailV2betaColorInfo} The populated <code>GoogleCloudRetailV2betaColorInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudRetailV2betaColorInfo();

            if (data.hasOwnProperty('colorFamilies')) {
                obj['colorFamilies'] = ApiClient.convertToType(data['colorFamilies'], ['String']);
            }
            if (data.hasOwnProperty('colors')) {
                obj['colors'] = ApiClient.convertToType(data['colors'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudRetailV2betaColorInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudRetailV2betaColorInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['colorFamilies'])) {
            throw new Error("Expected the field `colorFamilies` to be an array in the JSON data but got " + data['colorFamilies']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['colors'])) {
            throw new Error("Expected the field `colors` to be an array in the JSON data but got " + data['colors']);
        }

        return true;
    }


}



/**
 * The standard color families. Strongly recommended to use the following standard color groups: \"Red\", \"Pink\", \"Orange\", \"Yellow\", \"Purple\", \"Green\", \"Cyan\", \"Blue\", \"Brown\", \"White\", \"Gray\", \"Black\" and \"Mixed\". Normally it is expected to have only 1 color family. May consider using single \"Mixed\" instead of multiple values. A maximum of 5 values are allowed. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Google Merchant Center property [color](https://support.google.com/merchants/answer/6324487). Schema.org property [Product.color](https://schema.org/color).
 * @member {Array.<String>} colorFamilies
 */
GoogleCloudRetailV2betaColorInfo.prototype['colorFamilies'] = undefined;

/**
 * The color display names, which may be different from standard color family names, such as the color aliases used in the website frontend. Normally it is expected to have only 1 color. May consider using single \"Mixed\" instead of multiple values. A maximum of 75 colors are allowed. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Google Merchant Center property [color](https://support.google.com/merchants/answer/6324487). Schema.org property [Product.color](https://schema.org/color).
 * @member {Array.<String>} colors
 */
GoogleCloudRetailV2betaColorInfo.prototype['colors'] = undefined;






export default GoogleCloudRetailV2betaColorInfo;

