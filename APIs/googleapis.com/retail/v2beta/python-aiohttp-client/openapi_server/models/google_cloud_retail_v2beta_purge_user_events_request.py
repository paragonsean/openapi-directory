# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRetailV2betaPurgeUserEventsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: str=None, force: bool=None):
        """GoogleCloudRetailV2betaPurgeUserEventsRequest - a model defined in OpenAPI

        :param filter: The filter of this GoogleCloudRetailV2betaPurgeUserEventsRequest.
        :param force: The force of this GoogleCloudRetailV2betaPurgeUserEventsRequest.
        """
        self.openapi_types = {
            'filter': str,
            'force': bool
        }

        self.attribute_map = {
            'filter': 'filter',
            'force': 'force'
        }

        self._filter = filter
        self._force = force

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2betaPurgeUserEventsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2betaPurgeUserEventsRequest of this GoogleCloudRetailV2betaPurgeUserEventsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this GoogleCloudRetailV2betaPurgeUserEventsRequest.

        Required. The filter string to specify the events to be deleted with a length limit of 5,000 characters. Empty string filter is not allowed. The eligible fields for filtering are: * `eventType`: Double quoted UserEvent.event_type string. * `eventTime`: in ISO 8601 \"zulu\" format. * `visitorId`: Double quoted string. Specifying this will delete all events associated with a visitor. * `userId`: Double quoted string. Specifying this will delete all events associated with a user. Examples: * Deleting all events in a time range: `eventTime > \"2012-04-23T18:25:43.511Z\" eventTime < \"2012-04-23T18:30:43.511Z\"` * Deleting specific eventType in time range: `eventTime > \"2012-04-23T18:25:43.511Z\" eventType = \"detail-page-view\"` * Deleting all events for a specific visitor: `visitorId = \"visitor1024\"` The filtering fields are assumed to have an implicit AND.

        :return: The filter of this GoogleCloudRetailV2betaPurgeUserEventsRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GoogleCloudRetailV2betaPurgeUserEventsRequest.

        Required. The filter string to specify the events to be deleted with a length limit of 5,000 characters. Empty string filter is not allowed. The eligible fields for filtering are: * `eventType`: Double quoted UserEvent.event_type string. * `eventTime`: in ISO 8601 \"zulu\" format. * `visitorId`: Double quoted string. Specifying this will delete all events associated with a visitor. * `userId`: Double quoted string. Specifying this will delete all events associated with a user. Examples: * Deleting all events in a time range: `eventTime > \"2012-04-23T18:25:43.511Z\" eventTime < \"2012-04-23T18:30:43.511Z\"` * Deleting specific eventType in time range: `eventTime > \"2012-04-23T18:25:43.511Z\" eventType = \"detail-page-view\"` * Deleting all events for a specific visitor: `visitorId = \"visitor1024\"` The filtering fields are assumed to have an implicit AND.

        :param filter: The filter of this GoogleCloudRetailV2betaPurgeUserEventsRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def force(self):
        """Gets the force of this GoogleCloudRetailV2betaPurgeUserEventsRequest.

        Actually perform the purge. If `force` is set to false, the method will return the expected purge count without deleting any user events.

        :return: The force of this GoogleCloudRetailV2betaPurgeUserEventsRequest.
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this GoogleCloudRetailV2betaPurgeUserEventsRequest.

        Actually perform the purge. If `force` is set to false, the method will return the expected purge count without deleting any user events.

        :param force: The force of this GoogleCloudRetailV2betaPurgeUserEventsRequest.
        :type force: bool
        """

        self._force = force
