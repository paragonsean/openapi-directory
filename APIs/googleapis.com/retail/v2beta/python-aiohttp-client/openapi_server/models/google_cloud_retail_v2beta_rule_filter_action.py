# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRetailV2betaRuleFilterAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: str=None):
        """GoogleCloudRetailV2betaRuleFilterAction - a model defined in OpenAPI

        :param filter: The filter of this GoogleCloudRetailV2betaRuleFilterAction.
        """
        self.openapi_types = {
            'filter': str
        }

        self.attribute_map = {
            'filter': 'filter'
        }

        self._filter = filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2betaRuleFilterAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2betaRuleFilterAction of this GoogleCloudRetailV2betaRuleFilterAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this GoogleCloudRetailV2betaRuleFilterAction.

        A filter to apply on the matching condition results. Supported features: * filter must be set. * Filter syntax is identical to SearchRequest.filter. For more information, see [Filter](/retail/docs/filter-and-order#filter). * To filter products with product ID \"product_1\" or \"product_2\", and color \"Red\" or \"Blue\": *(id: ANY(\"product_1\", \"product_2\")) * *AND * *(colorFamilies: ANY(\"Red\", \"Blue\")) *

        :return: The filter of this GoogleCloudRetailV2betaRuleFilterAction.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GoogleCloudRetailV2betaRuleFilterAction.

        A filter to apply on the matching condition results. Supported features: * filter must be set. * Filter syntax is identical to SearchRequest.filter. For more information, see [Filter](/retail/docs/filter-and-order#filter). * To filter products with product ID \"product_1\" or \"product_2\", and color \"Red\" or \"Blue\": *(id: ANY(\"product_1\", \"product_2\")) * *AND * *(colorFamilies: ANY(\"Red\", \"Blue\")) *

        :param filter: The filter of this GoogleCloudRetailV2betaRuleFilterAction.
        :type filter: str
        """

        self._filter = filter
