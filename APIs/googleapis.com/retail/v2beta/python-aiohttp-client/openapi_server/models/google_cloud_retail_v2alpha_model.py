# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_retail_v2alpha_model_model_features_config import GoogleCloudRetailV2alphaModelModelFeaturesConfig
from openapi_server.models.google_cloud_retail_v2alpha_model_page_optimization_config import GoogleCloudRetailV2alphaModelPageOptimizationConfig
from openapi_server.models.google_cloud_retail_v2alpha_model_serving_config_list import GoogleCloudRetailV2alphaModelServingConfigList
from openapi_server import util


class GoogleCloudRetailV2alphaModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, data_state: str=None, display_name: str=None, filtering_option: str=None, last_tune_time: str=None, model_features_config: GoogleCloudRetailV2alphaModelModelFeaturesConfig=None, name: str=None, optimization_objective: str=None, page_optimization_config: GoogleCloudRetailV2alphaModelPageOptimizationConfig=None, periodic_tuning_state: str=None, serving_config_lists: List[GoogleCloudRetailV2alphaModelServingConfigList]=None, serving_state: str=None, training_state: str=None, tuning_operation: str=None, type: str=None, update_time: str=None):
        """GoogleCloudRetailV2alphaModel - a model defined in OpenAPI

        :param create_time: The create_time of this GoogleCloudRetailV2alphaModel.
        :param data_state: The data_state of this GoogleCloudRetailV2alphaModel.
        :param display_name: The display_name of this GoogleCloudRetailV2alphaModel.
        :param filtering_option: The filtering_option of this GoogleCloudRetailV2alphaModel.
        :param last_tune_time: The last_tune_time of this GoogleCloudRetailV2alphaModel.
        :param model_features_config: The model_features_config of this GoogleCloudRetailV2alphaModel.
        :param name: The name of this GoogleCloudRetailV2alphaModel.
        :param optimization_objective: The optimization_objective of this GoogleCloudRetailV2alphaModel.
        :param page_optimization_config: The page_optimization_config of this GoogleCloudRetailV2alphaModel.
        :param periodic_tuning_state: The periodic_tuning_state of this GoogleCloudRetailV2alphaModel.
        :param serving_config_lists: The serving_config_lists of this GoogleCloudRetailV2alphaModel.
        :param serving_state: The serving_state of this GoogleCloudRetailV2alphaModel.
        :param training_state: The training_state of this GoogleCloudRetailV2alphaModel.
        :param tuning_operation: The tuning_operation of this GoogleCloudRetailV2alphaModel.
        :param type: The type of this GoogleCloudRetailV2alphaModel.
        :param update_time: The update_time of this GoogleCloudRetailV2alphaModel.
        """
        self.openapi_types = {
            'create_time': str,
            'data_state': str,
            'display_name': str,
            'filtering_option': str,
            'last_tune_time': str,
            'model_features_config': GoogleCloudRetailV2alphaModelModelFeaturesConfig,
            'name': str,
            'optimization_objective': str,
            'page_optimization_config': GoogleCloudRetailV2alphaModelPageOptimizationConfig,
            'periodic_tuning_state': str,
            'serving_config_lists': List[GoogleCloudRetailV2alphaModelServingConfigList],
            'serving_state': str,
            'training_state': str,
            'tuning_operation': str,
            'type': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'data_state': 'dataState',
            'display_name': 'displayName',
            'filtering_option': 'filteringOption',
            'last_tune_time': 'lastTuneTime',
            'model_features_config': 'modelFeaturesConfig',
            'name': 'name',
            'optimization_objective': 'optimizationObjective',
            'page_optimization_config': 'pageOptimizationConfig',
            'periodic_tuning_state': 'periodicTuningState',
            'serving_config_lists': 'servingConfigLists',
            'serving_state': 'servingState',
            'training_state': 'trainingState',
            'tuning_operation': 'tuningOperation',
            'type': 'type',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._data_state = data_state
        self._display_name = display_name
        self._filtering_option = filtering_option
        self._last_tune_time = last_tune_time
        self._model_features_config = model_features_config
        self._name = name
        self._optimization_objective = optimization_objective
        self._page_optimization_config = page_optimization_config
        self._periodic_tuning_state = periodic_tuning_state
        self._serving_config_lists = serving_config_lists
        self._serving_state = serving_state
        self._training_state = training_state
        self._tuning_operation = tuning_operation
        self._type = type
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2alphaModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2alphaModel of this GoogleCloudRetailV2alphaModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudRetailV2alphaModel.

        Output only. Timestamp the Recommendation Model was created at.

        :return: The create_time of this GoogleCloudRetailV2alphaModel.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudRetailV2alphaModel.

        Output only. Timestamp the Recommendation Model was created at.

        :param create_time: The create_time of this GoogleCloudRetailV2alphaModel.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def data_state(self):
        """Gets the data_state of this GoogleCloudRetailV2alphaModel.

        Output only. The state of data requirements for this model: `DATA_OK` and `DATA_ERROR`. Recommendation model cannot be trained if the data is in `DATA_ERROR` state. Recommendation model can have `DATA_ERROR` state even if serving state is `ACTIVE`: models were trained successfully before, but cannot be refreshed because model no longer has sufficient data for training.

        :return: The data_state of this GoogleCloudRetailV2alphaModel.
        :rtype: str
        """
        return self._data_state

    @data_state.setter
    def data_state(self, data_state):
        """Sets the data_state of this GoogleCloudRetailV2alphaModel.

        Output only. The state of data requirements for this model: `DATA_OK` and `DATA_ERROR`. Recommendation model cannot be trained if the data is in `DATA_ERROR` state. Recommendation model can have `DATA_ERROR` state even if serving state is `ACTIVE`: models were trained successfully before, but cannot be refreshed because model no longer has sufficient data for training.

        :param data_state: The data_state of this GoogleCloudRetailV2alphaModel.
        :type data_state: str
        """
        allowed_values = ["DATA_STATE_UNSPECIFIED", "DATA_OK", "DATA_ERROR"]  # noqa: E501
        if data_state not in allowed_values:
            raise ValueError(
                "Invalid value for `data_state` ({0}), must be one of {1}"
                .format(data_state, allowed_values)
            )

        self._data_state = data_state

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudRetailV2alphaModel.

        Required. The display name of the model. Should be human readable, used to display Recommendation Models in the Retail Cloud Console Dashboard. UTF-8 encoded string with limit of 1024 characters.

        :return: The display_name of this GoogleCloudRetailV2alphaModel.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudRetailV2alphaModel.

        Required. The display name of the model. Should be human readable, used to display Recommendation Models in the Retail Cloud Console Dashboard. UTF-8 encoded string with limit of 1024 characters.

        :param display_name: The display_name of this GoogleCloudRetailV2alphaModel.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def filtering_option(self):
        """Gets the filtering_option of this GoogleCloudRetailV2alphaModel.

        Optional. If `RECOMMENDATIONS_FILTERING_ENABLED`, recommendation filtering by attributes is enabled for the model.

        :return: The filtering_option of this GoogleCloudRetailV2alphaModel.
        :rtype: str
        """
        return self._filtering_option

    @filtering_option.setter
    def filtering_option(self, filtering_option):
        """Sets the filtering_option of this GoogleCloudRetailV2alphaModel.

        Optional. If `RECOMMENDATIONS_FILTERING_ENABLED`, recommendation filtering by attributes is enabled for the model.

        :param filtering_option: The filtering_option of this GoogleCloudRetailV2alphaModel.
        :type filtering_option: str
        """
        allowed_values = ["RECOMMENDATIONS_FILTERING_OPTION_UNSPECIFIED", "RECOMMENDATIONS_FILTERING_DISABLED", "RECOMMENDATIONS_FILTERING_ENABLED"]  # noqa: E501
        if filtering_option not in allowed_values:
            raise ValueError(
                "Invalid value for `filtering_option` ({0}), must be one of {1}"
                .format(filtering_option, allowed_values)
            )

        self._filtering_option = filtering_option

    @property
    def last_tune_time(self):
        """Gets the last_tune_time of this GoogleCloudRetailV2alphaModel.

        Output only. The timestamp when the latest successful tune finished.

        :return: The last_tune_time of this GoogleCloudRetailV2alphaModel.
        :rtype: str
        """
        return self._last_tune_time

    @last_tune_time.setter
    def last_tune_time(self, last_tune_time):
        """Sets the last_tune_time of this GoogleCloudRetailV2alphaModel.

        Output only. The timestamp when the latest successful tune finished.

        :param last_tune_time: The last_tune_time of this GoogleCloudRetailV2alphaModel.
        :type last_tune_time: str
        """

        self._last_tune_time = last_tune_time

    @property
    def model_features_config(self):
        """Gets the model_features_config of this GoogleCloudRetailV2alphaModel.


        :return: The model_features_config of this GoogleCloudRetailV2alphaModel.
        :rtype: GoogleCloudRetailV2alphaModelModelFeaturesConfig
        """
        return self._model_features_config

    @model_features_config.setter
    def model_features_config(self, model_features_config):
        """Sets the model_features_config of this GoogleCloudRetailV2alphaModel.


        :param model_features_config: The model_features_config of this GoogleCloudRetailV2alphaModel.
        :type model_features_config: GoogleCloudRetailV2alphaModelModelFeaturesConfig
        """

        self._model_features_config = model_features_config

    @property
    def name(self):
        """Gets the name of this GoogleCloudRetailV2alphaModel.

        Required. The fully qualified resource name of the model. Format: `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}` catalog_id has char limit of 50. recommendation_model_id has char limit of 40.

        :return: The name of this GoogleCloudRetailV2alphaModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudRetailV2alphaModel.

        Required. The fully qualified resource name of the model. Format: `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}` catalog_id has char limit of 50. recommendation_model_id has char limit of 40.

        :param name: The name of this GoogleCloudRetailV2alphaModel.
        :type name: str
        """

        self._name = name

    @property
    def optimization_objective(self):
        """Gets the optimization_objective of this GoogleCloudRetailV2alphaModel.

        Optional. The optimization objective e.g. `cvr`. Currently supported values: `ctr`, `cvr`, `revenue-per-order`. If not specified, we choose default based on model type. Default depends on type of recommendation: `recommended-for-you` => `ctr` `others-you-may-like` => `ctr` `frequently-bought-together` => `revenue_per_order` This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.

        :return: The optimization_objective of this GoogleCloudRetailV2alphaModel.
        :rtype: str
        """
        return self._optimization_objective

    @optimization_objective.setter
    def optimization_objective(self, optimization_objective):
        """Sets the optimization_objective of this GoogleCloudRetailV2alphaModel.

        Optional. The optimization objective e.g. `cvr`. Currently supported values: `ctr`, `cvr`, `revenue-per-order`. If not specified, we choose default based on model type. Default depends on type of recommendation: `recommended-for-you` => `ctr` `others-you-may-like` => `ctr` `frequently-bought-together` => `revenue_per_order` This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.

        :param optimization_objective: The optimization_objective of this GoogleCloudRetailV2alphaModel.
        :type optimization_objective: str
        """

        self._optimization_objective = optimization_objective

    @property
    def page_optimization_config(self):
        """Gets the page_optimization_config of this GoogleCloudRetailV2alphaModel.


        :return: The page_optimization_config of this GoogleCloudRetailV2alphaModel.
        :rtype: GoogleCloudRetailV2alphaModelPageOptimizationConfig
        """
        return self._page_optimization_config

    @page_optimization_config.setter
    def page_optimization_config(self, page_optimization_config):
        """Sets the page_optimization_config of this GoogleCloudRetailV2alphaModel.


        :param page_optimization_config: The page_optimization_config of this GoogleCloudRetailV2alphaModel.
        :type page_optimization_config: GoogleCloudRetailV2alphaModelPageOptimizationConfig
        """

        self._page_optimization_config = page_optimization_config

    @property
    def periodic_tuning_state(self):
        """Gets the periodic_tuning_state of this GoogleCloudRetailV2alphaModel.

        Optional. The state of periodic tuning. The period we use is 3 months - to do a one-off tune earlier use the `TuneModel` method. Default value is `PERIODIC_TUNING_ENABLED`.

        :return: The periodic_tuning_state of this GoogleCloudRetailV2alphaModel.
        :rtype: str
        """
        return self._periodic_tuning_state

    @periodic_tuning_state.setter
    def periodic_tuning_state(self, periodic_tuning_state):
        """Sets the periodic_tuning_state of this GoogleCloudRetailV2alphaModel.

        Optional. The state of periodic tuning. The period we use is 3 months - to do a one-off tune earlier use the `TuneModel` method. Default value is `PERIODIC_TUNING_ENABLED`.

        :param periodic_tuning_state: The periodic_tuning_state of this GoogleCloudRetailV2alphaModel.
        :type periodic_tuning_state: str
        """
        allowed_values = ["PERIODIC_TUNING_STATE_UNSPECIFIED", "PERIODIC_TUNING_DISABLED", "ALL_TUNING_DISABLED", "PERIODIC_TUNING_ENABLED"]  # noqa: E501
        if periodic_tuning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `periodic_tuning_state` ({0}), must be one of {1}"
                .format(periodic_tuning_state, allowed_values)
            )

        self._periodic_tuning_state = periodic_tuning_state

    @property
    def serving_config_lists(self):
        """Gets the serving_config_lists of this GoogleCloudRetailV2alphaModel.

        Output only. The list of valid serving configs associated with the PageOptimizationConfig.

        :return: The serving_config_lists of this GoogleCloudRetailV2alphaModel.
        :rtype: List[GoogleCloudRetailV2alphaModelServingConfigList]
        """
        return self._serving_config_lists

    @serving_config_lists.setter
    def serving_config_lists(self, serving_config_lists):
        """Sets the serving_config_lists of this GoogleCloudRetailV2alphaModel.

        Output only. The list of valid serving configs associated with the PageOptimizationConfig.

        :param serving_config_lists: The serving_config_lists of this GoogleCloudRetailV2alphaModel.
        :type serving_config_lists: List[GoogleCloudRetailV2alphaModelServingConfigList]
        """

        self._serving_config_lists = serving_config_lists

    @property
    def serving_state(self):
        """Gets the serving_state of this GoogleCloudRetailV2alphaModel.

        Output only. The serving state of the model: `ACTIVE`, `NOT_ACTIVE`.

        :return: The serving_state of this GoogleCloudRetailV2alphaModel.
        :rtype: str
        """
        return self._serving_state

    @serving_state.setter
    def serving_state(self, serving_state):
        """Sets the serving_state of this GoogleCloudRetailV2alphaModel.

        Output only. The serving state of the model: `ACTIVE`, `NOT_ACTIVE`.

        :param serving_state: The serving_state of this GoogleCloudRetailV2alphaModel.
        :type serving_state: str
        """
        allowed_values = ["SERVING_STATE_UNSPECIFIED", "INACTIVE", "ACTIVE", "TUNED"]  # noqa: E501
        if serving_state not in allowed_values:
            raise ValueError(
                "Invalid value for `serving_state` ({0}), must be one of {1}"
                .format(serving_state, allowed_values)
            )

        self._serving_state = serving_state

    @property
    def training_state(self):
        """Gets the training_state of this GoogleCloudRetailV2alphaModel.

        Optional. The training state that the model is in (e.g. `TRAINING` or `PAUSED`). Since part of the cost of running the service is frequency of training - this can be used to determine when to train model in order to control cost. If not specified: the default value for `CreateModel` method is `TRAINING`. The default value for `UpdateModel` method is to keep the state the same as before.

        :return: The training_state of this GoogleCloudRetailV2alphaModel.
        :rtype: str
        """
        return self._training_state

    @training_state.setter
    def training_state(self, training_state):
        """Sets the training_state of this GoogleCloudRetailV2alphaModel.

        Optional. The training state that the model is in (e.g. `TRAINING` or `PAUSED`). Since part of the cost of running the service is frequency of training - this can be used to determine when to train model in order to control cost. If not specified: the default value for `CreateModel` method is `TRAINING`. The default value for `UpdateModel` method is to keep the state the same as before.

        :param training_state: The training_state of this GoogleCloudRetailV2alphaModel.
        :type training_state: str
        """
        allowed_values = ["TRAINING_STATE_UNSPECIFIED", "PAUSED", "TRAINING"]  # noqa: E501
        if training_state not in allowed_values:
            raise ValueError(
                "Invalid value for `training_state` ({0}), must be one of {1}"
                .format(training_state, allowed_values)
            )

        self._training_state = training_state

    @property
    def tuning_operation(self):
        """Gets the tuning_operation of this GoogleCloudRetailV2alphaModel.

        Output only. The tune operation associated with the model. Can be used to determine if there is an ongoing tune for this recommendation. Empty field implies no tune is goig on.

        :return: The tuning_operation of this GoogleCloudRetailV2alphaModel.
        :rtype: str
        """
        return self._tuning_operation

    @tuning_operation.setter
    def tuning_operation(self, tuning_operation):
        """Sets the tuning_operation of this GoogleCloudRetailV2alphaModel.

        Output only. The tune operation associated with the model. Can be used to determine if there is an ongoing tune for this recommendation. Empty field implies no tune is goig on.

        :param tuning_operation: The tuning_operation of this GoogleCloudRetailV2alphaModel.
        :type tuning_operation: str
        """

        self._tuning_operation = tuning_operation

    @property
    def type(self):
        """Gets the type of this GoogleCloudRetailV2alphaModel.

        Required. The type of model e.g. `home-page`. Currently supported values: `recommended-for-you`, `others-you-may-like`, `frequently-bought-together`, `page-optimization`, `similar-items`, `buy-it-again`, `on-sale-items`, and `recently-viewed`(readonly value). This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.

        :return: The type of this GoogleCloudRetailV2alphaModel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudRetailV2alphaModel.

        Required. The type of model e.g. `home-page`. Currently supported values: `recommended-for-you`, `others-you-may-like`, `frequently-bought-together`, `page-optimization`, `similar-items`, `buy-it-again`, `on-sale-items`, and `recently-viewed`(readonly value). This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.

        :param type: The type of this GoogleCloudRetailV2alphaModel.
        :type type: str
        """

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudRetailV2alphaModel.

        Output only. Timestamp the Recommendation Model was last updated. E.g. if a Recommendation Model was paused - this would be the time the pause was initiated.

        :return: The update_time of this GoogleCloudRetailV2alphaModel.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudRetailV2alphaModel.

        Output only. Timestamp the Recommendation Model was last updated. E.g. if a Recommendation Model was paused - this would be the time the pause was initiated.

        :param update_time: The update_time of this GoogleCloudRetailV2alphaModel.
        :type update_time: str
        """

        self._update_time = update_time
