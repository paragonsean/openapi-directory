# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_retail_v2beta_price_info_price_range import GoogleCloudRetailV2betaPriceInfoPriceRange
from openapi_server import util


class GoogleCloudRetailV2betaPriceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: float=None, currency_code: str=None, original_price: float=None, price: float=None, price_effective_time: str=None, price_expire_time: str=None, price_range: GoogleCloudRetailV2betaPriceInfoPriceRange=None):
        """GoogleCloudRetailV2betaPriceInfo - a model defined in OpenAPI

        :param cost: The cost of this GoogleCloudRetailV2betaPriceInfo.
        :param currency_code: The currency_code of this GoogleCloudRetailV2betaPriceInfo.
        :param original_price: The original_price of this GoogleCloudRetailV2betaPriceInfo.
        :param price: The price of this GoogleCloudRetailV2betaPriceInfo.
        :param price_effective_time: The price_effective_time of this GoogleCloudRetailV2betaPriceInfo.
        :param price_expire_time: The price_expire_time of this GoogleCloudRetailV2betaPriceInfo.
        :param price_range: The price_range of this GoogleCloudRetailV2betaPriceInfo.
        """
        self.openapi_types = {
            'cost': float,
            'currency_code': str,
            'original_price': float,
            'price': float,
            'price_effective_time': str,
            'price_expire_time': str,
            'price_range': GoogleCloudRetailV2betaPriceInfoPriceRange
        }

        self.attribute_map = {
            'cost': 'cost',
            'currency_code': 'currencyCode',
            'original_price': 'originalPrice',
            'price': 'price',
            'price_effective_time': 'priceEffectiveTime',
            'price_expire_time': 'priceExpireTime',
            'price_range': 'priceRange'
        }

        self._cost = cost
        self._currency_code = currency_code
        self._original_price = original_price
        self._price = price
        self._price_effective_time = price_effective_time
        self._price_expire_time = price_expire_time
        self._price_range = price_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2betaPriceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2betaPriceInfo of this GoogleCloudRetailV2betaPriceInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this GoogleCloudRetailV2betaPriceInfo.

        The costs associated with the sale of a particular product. Used for gross profit reporting. * Profit = price - cost Google Merchant Center property [cost_of_goods_sold](https://support.google.com/merchants/answer/9017895).

        :return: The cost of this GoogleCloudRetailV2betaPriceInfo.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this GoogleCloudRetailV2betaPriceInfo.

        The costs associated with the sale of a particular product. Used for gross profit reporting. * Profit = price - cost Google Merchant Center property [cost_of_goods_sold](https://support.google.com/merchants/answer/9017895).

        :param cost: The cost of this GoogleCloudRetailV2betaPriceInfo.
        :type cost: float
        """

        self._cost = cost

    @property
    def currency_code(self):
        """Gets the currency_code of this GoogleCloudRetailV2betaPriceInfo.

        The 3-letter currency code defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html). If this field is an unrecognizable currency code, an INVALID_ARGUMENT error is returned. The Product.Type.VARIANT Products with the same Product.primary_product_id must share the same currency_code. Otherwise, a FAILED_PRECONDITION error is returned.

        :return: The currency_code of this GoogleCloudRetailV2betaPriceInfo.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this GoogleCloudRetailV2betaPriceInfo.

        The 3-letter currency code defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html). If this field is an unrecognizable currency code, an INVALID_ARGUMENT error is returned. The Product.Type.VARIANT Products with the same Product.primary_product_id must share the same currency_code. Otherwise, a FAILED_PRECONDITION error is returned.

        :param currency_code: The currency_code of this GoogleCloudRetailV2betaPriceInfo.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def original_price(self):
        """Gets the original_price of this GoogleCloudRetailV2betaPriceInfo.

        Price of the product without any discount. If zero, by default set to be the price. If set, original_price should be greater than or equal to price, otherwise an INVALID_ARGUMENT error is thrown.

        :return: The original_price of this GoogleCloudRetailV2betaPriceInfo.
        :rtype: float
        """
        return self._original_price

    @original_price.setter
    def original_price(self, original_price):
        """Sets the original_price of this GoogleCloudRetailV2betaPriceInfo.

        Price of the product without any discount. If zero, by default set to be the price. If set, original_price should be greater than or equal to price, otherwise an INVALID_ARGUMENT error is thrown.

        :param original_price: The original_price of this GoogleCloudRetailV2betaPriceInfo.
        :type original_price: float
        """

        self._original_price = original_price

    @property
    def price(self):
        """Gets the price of this GoogleCloudRetailV2betaPriceInfo.

        Price of the product. Google Merchant Center property [price](https://support.google.com/merchants/answer/6324371). Schema.org property [Offer.price](https://schema.org/price).

        :return: The price of this GoogleCloudRetailV2betaPriceInfo.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GoogleCloudRetailV2betaPriceInfo.

        Price of the product. Google Merchant Center property [price](https://support.google.com/merchants/answer/6324371). Schema.org property [Offer.price](https://schema.org/price).

        :param price: The price of this GoogleCloudRetailV2betaPriceInfo.
        :type price: float
        """

        self._price = price

    @property
    def price_effective_time(self):
        """Gets the price_effective_time of this GoogleCloudRetailV2betaPriceInfo.

        The timestamp when the price starts to be effective. This can be set as a future timestamp, and the price is only used for search after price_effective_time. If so, the original_price must be set and original_price is used before price_effective_time. Do not set if price is always effective because it will cause additional latency during search.

        :return: The price_effective_time of this GoogleCloudRetailV2betaPriceInfo.
        :rtype: str
        """
        return self._price_effective_time

    @price_effective_time.setter
    def price_effective_time(self, price_effective_time):
        """Sets the price_effective_time of this GoogleCloudRetailV2betaPriceInfo.

        The timestamp when the price starts to be effective. This can be set as a future timestamp, and the price is only used for search after price_effective_time. If so, the original_price must be set and original_price is used before price_effective_time. Do not set if price is always effective because it will cause additional latency during search.

        :param price_effective_time: The price_effective_time of this GoogleCloudRetailV2betaPriceInfo.
        :type price_effective_time: str
        """

        self._price_effective_time = price_effective_time

    @property
    def price_expire_time(self):
        """Gets the price_expire_time of this GoogleCloudRetailV2betaPriceInfo.

        The timestamp when the price stops to be effective. The price is used for search before price_expire_time. If this field is set, the original_price must be set and original_price is used after price_expire_time. Do not set if price is always effective because it will cause additional latency during search.

        :return: The price_expire_time of this GoogleCloudRetailV2betaPriceInfo.
        :rtype: str
        """
        return self._price_expire_time

    @price_expire_time.setter
    def price_expire_time(self, price_expire_time):
        """Sets the price_expire_time of this GoogleCloudRetailV2betaPriceInfo.

        The timestamp when the price stops to be effective. The price is used for search before price_expire_time. If this field is set, the original_price must be set and original_price is used after price_expire_time. Do not set if price is always effective because it will cause additional latency during search.

        :param price_expire_time: The price_expire_time of this GoogleCloudRetailV2betaPriceInfo.
        :type price_expire_time: str
        """

        self._price_expire_time = price_expire_time

    @property
    def price_range(self):
        """Gets the price_range of this GoogleCloudRetailV2betaPriceInfo.


        :return: The price_range of this GoogleCloudRetailV2betaPriceInfo.
        :rtype: GoogleCloudRetailV2betaPriceInfoPriceRange
        """
        return self._price_range

    @price_range.setter
    def price_range(self, price_range):
        """Sets the price_range of this GoogleCloudRetailV2betaPriceInfo.


        :param price_range: The price_range of this GoogleCloudRetailV2betaPriceInfo.
        :type price_range: GoogleCloudRetailV2betaPriceInfoPriceRange
        """

        self._price_range = price_range
