# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRetailV2betaRuleOnewaySynonymsAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, oneway_terms: List[str]=None, query_terms: List[str]=None, synonyms: List[str]=None):
        """GoogleCloudRetailV2betaRuleOnewaySynonymsAction - a model defined in OpenAPI

        :param oneway_terms: The oneway_terms of this GoogleCloudRetailV2betaRuleOnewaySynonymsAction.
        :param query_terms: The query_terms of this GoogleCloudRetailV2betaRuleOnewaySynonymsAction.
        :param synonyms: The synonyms of this GoogleCloudRetailV2betaRuleOnewaySynonymsAction.
        """
        self.openapi_types = {
            'oneway_terms': List[str],
            'query_terms': List[str],
            'synonyms': List[str]
        }

        self.attribute_map = {
            'oneway_terms': 'onewayTerms',
            'query_terms': 'queryTerms',
            'synonyms': 'synonyms'
        }

        self._oneway_terms = oneway_terms
        self._query_terms = query_terms
        self._synonyms = synonyms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2betaRuleOnewaySynonymsAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2betaRuleOnewaySynonymsAction of this GoogleCloudRetailV2betaRuleOnewaySynonymsAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def oneway_terms(self):
        """Gets the oneway_terms of this GoogleCloudRetailV2betaRuleOnewaySynonymsAction.

        Will be [deprecated = true] post migration;

        :return: The oneway_terms of this GoogleCloudRetailV2betaRuleOnewaySynonymsAction.
        :rtype: List[str]
        """
        return self._oneway_terms

    @oneway_terms.setter
    def oneway_terms(self, oneway_terms):
        """Sets the oneway_terms of this GoogleCloudRetailV2betaRuleOnewaySynonymsAction.

        Will be [deprecated = true] post migration;

        :param oneway_terms: The oneway_terms of this GoogleCloudRetailV2betaRuleOnewaySynonymsAction.
        :type oneway_terms: List[str]
        """

        self._oneway_terms = oneway_terms

    @property
    def query_terms(self):
        """Gets the query_terms of this GoogleCloudRetailV2betaRuleOnewaySynonymsAction.

        Terms from the search query. Will treat synonyms as their synonyms. Not themselves synonyms of the synonyms. Can specify up to 100 terms.

        :return: The query_terms of this GoogleCloudRetailV2betaRuleOnewaySynonymsAction.
        :rtype: List[str]
        """
        return self._query_terms

    @query_terms.setter
    def query_terms(self, query_terms):
        """Sets the query_terms of this GoogleCloudRetailV2betaRuleOnewaySynonymsAction.

        Terms from the search query. Will treat synonyms as their synonyms. Not themselves synonyms of the synonyms. Can specify up to 100 terms.

        :param query_terms: The query_terms of this GoogleCloudRetailV2betaRuleOnewaySynonymsAction.
        :type query_terms: List[str]
        """

        self._query_terms = query_terms

    @property
    def synonyms(self):
        """Gets the synonyms of this GoogleCloudRetailV2betaRuleOnewaySynonymsAction.

        Defines a set of synonyms. Cannot contain duplicates. Can specify up to 100 synonyms.

        :return: The synonyms of this GoogleCloudRetailV2betaRuleOnewaySynonymsAction.
        :rtype: List[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this GoogleCloudRetailV2betaRuleOnewaySynonymsAction.

        Defines a set of synonyms. Cannot contain duplicates. Can specify up to 100 synonyms.

        :param synonyms: The synonyms of this GoogleCloudRetailV2betaRuleOnewaySynonymsAction.
        :type synonyms: List[str]
        """

        self._synonyms = synonyms
