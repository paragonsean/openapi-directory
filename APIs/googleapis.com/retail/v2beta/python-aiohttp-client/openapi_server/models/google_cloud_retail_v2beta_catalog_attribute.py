# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_retail_v2beta_catalog_attribute_facet_config import GoogleCloudRetailV2betaCatalogAttributeFacetConfig
from openapi_server import util


class GoogleCloudRetailV2betaCatalogAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dynamic_facetable_option: str=None, exact_searchable_option: str=None, facet_config: GoogleCloudRetailV2betaCatalogAttributeFacetConfig=None, in_use: bool=None, indexable_option: str=None, key: str=None, recommendations_filtering_option: str=None, retrievable_option: str=None, searchable_option: str=None, type: str=None):
        """GoogleCloudRetailV2betaCatalogAttribute - a model defined in OpenAPI

        :param dynamic_facetable_option: The dynamic_facetable_option of this GoogleCloudRetailV2betaCatalogAttribute.
        :param exact_searchable_option: The exact_searchable_option of this GoogleCloudRetailV2betaCatalogAttribute.
        :param facet_config: The facet_config of this GoogleCloudRetailV2betaCatalogAttribute.
        :param in_use: The in_use of this GoogleCloudRetailV2betaCatalogAttribute.
        :param indexable_option: The indexable_option of this GoogleCloudRetailV2betaCatalogAttribute.
        :param key: The key of this GoogleCloudRetailV2betaCatalogAttribute.
        :param recommendations_filtering_option: The recommendations_filtering_option of this GoogleCloudRetailV2betaCatalogAttribute.
        :param retrievable_option: The retrievable_option of this GoogleCloudRetailV2betaCatalogAttribute.
        :param searchable_option: The searchable_option of this GoogleCloudRetailV2betaCatalogAttribute.
        :param type: The type of this GoogleCloudRetailV2betaCatalogAttribute.
        """
        self.openapi_types = {
            'dynamic_facetable_option': str,
            'exact_searchable_option': str,
            'facet_config': GoogleCloudRetailV2betaCatalogAttributeFacetConfig,
            'in_use': bool,
            'indexable_option': str,
            'key': str,
            'recommendations_filtering_option': str,
            'retrievable_option': str,
            'searchable_option': str,
            'type': str
        }

        self.attribute_map = {
            'dynamic_facetable_option': 'dynamicFacetableOption',
            'exact_searchable_option': 'exactSearchableOption',
            'facet_config': 'facetConfig',
            'in_use': 'inUse',
            'indexable_option': 'indexableOption',
            'key': 'key',
            'recommendations_filtering_option': 'recommendationsFilteringOption',
            'retrievable_option': 'retrievableOption',
            'searchable_option': 'searchableOption',
            'type': 'type'
        }

        self._dynamic_facetable_option = dynamic_facetable_option
        self._exact_searchable_option = exact_searchable_option
        self._facet_config = facet_config
        self._in_use = in_use
        self._indexable_option = indexable_option
        self._key = key
        self._recommendations_filtering_option = recommendations_filtering_option
        self._retrievable_option = retrievable_option
        self._searchable_option = searchable_option
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2betaCatalogAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2betaCatalogAttribute of this GoogleCloudRetailV2betaCatalogAttribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dynamic_facetable_option(self):
        """Gets the dynamic_facetable_option of this GoogleCloudRetailV2betaCatalogAttribute.

        If DYNAMIC_FACETABLE_ENABLED, attribute values are available for dynamic facet. Could only be DYNAMIC_FACETABLE_DISABLED if CatalogAttribute.indexable_option is INDEXABLE_DISABLED. Otherwise, an INVALID_ARGUMENT error is returned. Must be specified, otherwise throws INVALID_FORMAT error.

        :return: The dynamic_facetable_option of this GoogleCloudRetailV2betaCatalogAttribute.
        :rtype: str
        """
        return self._dynamic_facetable_option

    @dynamic_facetable_option.setter
    def dynamic_facetable_option(self, dynamic_facetable_option):
        """Sets the dynamic_facetable_option of this GoogleCloudRetailV2betaCatalogAttribute.

        If DYNAMIC_FACETABLE_ENABLED, attribute values are available for dynamic facet. Could only be DYNAMIC_FACETABLE_DISABLED if CatalogAttribute.indexable_option is INDEXABLE_DISABLED. Otherwise, an INVALID_ARGUMENT error is returned. Must be specified, otherwise throws INVALID_FORMAT error.

        :param dynamic_facetable_option: The dynamic_facetable_option of this GoogleCloudRetailV2betaCatalogAttribute.
        :type dynamic_facetable_option: str
        """
        allowed_values = ["DYNAMIC_FACETABLE_OPTION_UNSPECIFIED", "DYNAMIC_FACETABLE_ENABLED", "DYNAMIC_FACETABLE_DISABLED"]  # noqa: E501
        if dynamic_facetable_option not in allowed_values:
            raise ValueError(
                "Invalid value for `dynamic_facetable_option` ({0}), must be one of {1}"
                .format(dynamic_facetable_option, allowed_values)
            )

        self._dynamic_facetable_option = dynamic_facetable_option

    @property
    def exact_searchable_option(self):
        """Gets the exact_searchable_option of this GoogleCloudRetailV2betaCatalogAttribute.

        If EXACT_SEARCHABLE_ENABLED, attribute values will be exact searchable. This property only applies to textual custom attributes and requires indexable set to enabled to enable exact-searchable. If unset, the server behavior defaults to EXACT_SEARCHABLE_DISABLED.

        :return: The exact_searchable_option of this GoogleCloudRetailV2betaCatalogAttribute.
        :rtype: str
        """
        return self._exact_searchable_option

    @exact_searchable_option.setter
    def exact_searchable_option(self, exact_searchable_option):
        """Sets the exact_searchable_option of this GoogleCloudRetailV2betaCatalogAttribute.

        If EXACT_SEARCHABLE_ENABLED, attribute values will be exact searchable. This property only applies to textual custom attributes and requires indexable set to enabled to enable exact-searchable. If unset, the server behavior defaults to EXACT_SEARCHABLE_DISABLED.

        :param exact_searchable_option: The exact_searchable_option of this GoogleCloudRetailV2betaCatalogAttribute.
        :type exact_searchable_option: str
        """
        allowed_values = ["EXACT_SEARCHABLE_OPTION_UNSPECIFIED", "EXACT_SEARCHABLE_ENABLED", "EXACT_SEARCHABLE_DISABLED"]  # noqa: E501
        if exact_searchable_option not in allowed_values:
            raise ValueError(
                "Invalid value for `exact_searchable_option` ({0}), must be one of {1}"
                .format(exact_searchable_option, allowed_values)
            )

        self._exact_searchable_option = exact_searchable_option

    @property
    def facet_config(self):
        """Gets the facet_config of this GoogleCloudRetailV2betaCatalogAttribute.


        :return: The facet_config of this GoogleCloudRetailV2betaCatalogAttribute.
        :rtype: GoogleCloudRetailV2betaCatalogAttributeFacetConfig
        """
        return self._facet_config

    @facet_config.setter
    def facet_config(self, facet_config):
        """Sets the facet_config of this GoogleCloudRetailV2betaCatalogAttribute.


        :param facet_config: The facet_config of this GoogleCloudRetailV2betaCatalogAttribute.
        :type facet_config: GoogleCloudRetailV2betaCatalogAttributeFacetConfig
        """

        self._facet_config = facet_config

    @property
    def in_use(self):
        """Gets the in_use of this GoogleCloudRetailV2betaCatalogAttribute.

        Output only. Indicates whether this attribute has been used by any products. `True` if at least one Product is using this attribute in Product.attributes. Otherwise, this field is `False`. CatalogAttribute can be pre-loaded by using CatalogService.AddCatalogAttribute, CatalogService.ImportCatalogAttributes, or CatalogService.UpdateAttributesConfig APIs. This field is `False` for pre-loaded CatalogAttributes. Only pre-loaded catalog attributes that are neither in use by products nor predefined can be deleted. Catalog attributes that are either in use by products or are predefined attributes cannot be deleted; however, their configuration properties will reset to default values upon removal request. After catalog changes, it takes about 10 minutes for this field to update.

        :return: The in_use of this GoogleCloudRetailV2betaCatalogAttribute.
        :rtype: bool
        """
        return self._in_use

    @in_use.setter
    def in_use(self, in_use):
        """Sets the in_use of this GoogleCloudRetailV2betaCatalogAttribute.

        Output only. Indicates whether this attribute has been used by any products. `True` if at least one Product is using this attribute in Product.attributes. Otherwise, this field is `False`. CatalogAttribute can be pre-loaded by using CatalogService.AddCatalogAttribute, CatalogService.ImportCatalogAttributes, or CatalogService.UpdateAttributesConfig APIs. This field is `False` for pre-loaded CatalogAttributes. Only pre-loaded catalog attributes that are neither in use by products nor predefined can be deleted. Catalog attributes that are either in use by products or are predefined attributes cannot be deleted; however, their configuration properties will reset to default values upon removal request. After catalog changes, it takes about 10 minutes for this field to update.

        :param in_use: The in_use of this GoogleCloudRetailV2betaCatalogAttribute.
        :type in_use: bool
        """

        self._in_use = in_use

    @property
    def indexable_option(self):
        """Gets the indexable_option of this GoogleCloudRetailV2betaCatalogAttribute.

        When AttributesConfig.attribute_config_level is CATALOG_LEVEL_ATTRIBUTE_CONFIG, if INDEXABLE_ENABLED attribute values are indexed so that it can be filtered, faceted, or boosted in SearchService.Search. Must be specified when AttributesConfig.attribute_config_level is CATALOG_LEVEL_ATTRIBUTE_CONFIG, otherwise throws INVALID_FORMAT error.

        :return: The indexable_option of this GoogleCloudRetailV2betaCatalogAttribute.
        :rtype: str
        """
        return self._indexable_option

    @indexable_option.setter
    def indexable_option(self, indexable_option):
        """Sets the indexable_option of this GoogleCloudRetailV2betaCatalogAttribute.

        When AttributesConfig.attribute_config_level is CATALOG_LEVEL_ATTRIBUTE_CONFIG, if INDEXABLE_ENABLED attribute values are indexed so that it can be filtered, faceted, or boosted in SearchService.Search. Must be specified when AttributesConfig.attribute_config_level is CATALOG_LEVEL_ATTRIBUTE_CONFIG, otherwise throws INVALID_FORMAT error.

        :param indexable_option: The indexable_option of this GoogleCloudRetailV2betaCatalogAttribute.
        :type indexable_option: str
        """
        allowed_values = ["INDEXABLE_OPTION_UNSPECIFIED", "INDEXABLE_ENABLED", "INDEXABLE_DISABLED"]  # noqa: E501
        if indexable_option not in allowed_values:
            raise ValueError(
                "Invalid value for `indexable_option` ({0}), must be one of {1}"
                .format(indexable_option, allowed_values)
            )

        self._indexable_option = indexable_option

    @property
    def key(self):
        """Gets the key of this GoogleCloudRetailV2betaCatalogAttribute.

        Required. Attribute name. For example: `color`, `brands`, `attributes.custom_attribute`, such as `attributes.xyz`. To be indexable, the attribute name can contain only alpha-numeric characters and underscores. For example, an attribute named `attributes.abc_xyz` can be indexed, but an attribute named `attributes.abc-xyz` cannot be indexed. If the attribute key starts with `attributes.`, then the attribute is a custom attribute. Attributes such as `brands`, `patterns`, and `title` are built-in and called system attributes.

        :return: The key of this GoogleCloudRetailV2betaCatalogAttribute.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this GoogleCloudRetailV2betaCatalogAttribute.

        Required. Attribute name. For example: `color`, `brands`, `attributes.custom_attribute`, such as `attributes.xyz`. To be indexable, the attribute name can contain only alpha-numeric characters and underscores. For example, an attribute named `attributes.abc_xyz` can be indexed, but an attribute named `attributes.abc-xyz` cannot be indexed. If the attribute key starts with `attributes.`, then the attribute is a custom attribute. Attributes such as `brands`, `patterns`, and `title` are built-in and called system attributes.

        :param key: The key of this GoogleCloudRetailV2betaCatalogAttribute.
        :type key: str
        """

        self._key = key

    @property
    def recommendations_filtering_option(self):
        """Gets the recommendations_filtering_option of this GoogleCloudRetailV2betaCatalogAttribute.

        When AttributesConfig.attribute_config_level is CATALOG_LEVEL_ATTRIBUTE_CONFIG, if RECOMMENDATIONS_FILTERING_ENABLED, attribute values are filterable for recommendations. This option works for categorical features only, does not work for numerical features, inventory filtering.

        :return: The recommendations_filtering_option of this GoogleCloudRetailV2betaCatalogAttribute.
        :rtype: str
        """
        return self._recommendations_filtering_option

    @recommendations_filtering_option.setter
    def recommendations_filtering_option(self, recommendations_filtering_option):
        """Sets the recommendations_filtering_option of this GoogleCloudRetailV2betaCatalogAttribute.

        When AttributesConfig.attribute_config_level is CATALOG_LEVEL_ATTRIBUTE_CONFIG, if RECOMMENDATIONS_FILTERING_ENABLED, attribute values are filterable for recommendations. This option works for categorical features only, does not work for numerical features, inventory filtering.

        :param recommendations_filtering_option: The recommendations_filtering_option of this GoogleCloudRetailV2betaCatalogAttribute.
        :type recommendations_filtering_option: str
        """
        allowed_values = ["RECOMMENDATIONS_FILTERING_OPTION_UNSPECIFIED", "RECOMMENDATIONS_FILTERING_DISABLED", "RECOMMENDATIONS_FILTERING_ENABLED"]  # noqa: E501
        if recommendations_filtering_option not in allowed_values:
            raise ValueError(
                "Invalid value for `recommendations_filtering_option` ({0}), must be one of {1}"
                .format(recommendations_filtering_option, allowed_values)
            )

        self._recommendations_filtering_option = recommendations_filtering_option

    @property
    def retrievable_option(self):
        """Gets the retrievable_option of this GoogleCloudRetailV2betaCatalogAttribute.

        If RETRIEVABLE_ENABLED, attribute values are retrievable in the search results. If unset, the server behavior defaults to RETRIEVABLE_DISABLED.

        :return: The retrievable_option of this GoogleCloudRetailV2betaCatalogAttribute.
        :rtype: str
        """
        return self._retrievable_option

    @retrievable_option.setter
    def retrievable_option(self, retrievable_option):
        """Sets the retrievable_option of this GoogleCloudRetailV2betaCatalogAttribute.

        If RETRIEVABLE_ENABLED, attribute values are retrievable in the search results. If unset, the server behavior defaults to RETRIEVABLE_DISABLED.

        :param retrievable_option: The retrievable_option of this GoogleCloudRetailV2betaCatalogAttribute.
        :type retrievable_option: str
        """
        allowed_values = ["RETRIEVABLE_OPTION_UNSPECIFIED", "RETRIEVABLE_ENABLED", "RETRIEVABLE_DISABLED"]  # noqa: E501
        if retrievable_option not in allowed_values:
            raise ValueError(
                "Invalid value for `retrievable_option` ({0}), must be one of {1}"
                .format(retrievable_option, allowed_values)
            )

        self._retrievable_option = retrievable_option

    @property
    def searchable_option(self):
        """Gets the searchable_option of this GoogleCloudRetailV2betaCatalogAttribute.

        When AttributesConfig.attribute_config_level is CATALOG_LEVEL_ATTRIBUTE_CONFIG, if SEARCHABLE_ENABLED, attribute values are searchable by text queries in SearchService.Search. If SEARCHABLE_ENABLED but attribute type is numerical, attribute values will not be searchable by text queries in SearchService.Search, as there are no text values associated to numerical attributes. Must be specified, when AttributesConfig.attribute_config_level is CATALOG_LEVEL_ATTRIBUTE_CONFIG, otherwise throws INVALID_FORMAT error.

        :return: The searchable_option of this GoogleCloudRetailV2betaCatalogAttribute.
        :rtype: str
        """
        return self._searchable_option

    @searchable_option.setter
    def searchable_option(self, searchable_option):
        """Sets the searchable_option of this GoogleCloudRetailV2betaCatalogAttribute.

        When AttributesConfig.attribute_config_level is CATALOG_LEVEL_ATTRIBUTE_CONFIG, if SEARCHABLE_ENABLED, attribute values are searchable by text queries in SearchService.Search. If SEARCHABLE_ENABLED but attribute type is numerical, attribute values will not be searchable by text queries in SearchService.Search, as there are no text values associated to numerical attributes. Must be specified, when AttributesConfig.attribute_config_level is CATALOG_LEVEL_ATTRIBUTE_CONFIG, otherwise throws INVALID_FORMAT error.

        :param searchable_option: The searchable_option of this GoogleCloudRetailV2betaCatalogAttribute.
        :type searchable_option: str
        """
        allowed_values = ["SEARCHABLE_OPTION_UNSPECIFIED", "SEARCHABLE_ENABLED", "SEARCHABLE_DISABLED"]  # noqa: E501
        if searchable_option not in allowed_values:
            raise ValueError(
                "Invalid value for `searchable_option` ({0}), must be one of {1}"
                .format(searchable_option, allowed_values)
            )

        self._searchable_option = searchable_option

    @property
    def type(self):
        """Gets the type of this GoogleCloudRetailV2betaCatalogAttribute.

        Output only. The type of this attribute. This is derived from the attribute in Product.attributes.

        :return: The type of this GoogleCloudRetailV2betaCatalogAttribute.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudRetailV2betaCatalogAttribute.

        Output only. The type of this attribute. This is derived from the attribute in Product.attributes.

        :param type: The type of this GoogleCloudRetailV2betaCatalogAttribute.
        :type type: str
        """
        allowed_values = ["UNKNOWN", "TEXTUAL", "NUMERICAL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
