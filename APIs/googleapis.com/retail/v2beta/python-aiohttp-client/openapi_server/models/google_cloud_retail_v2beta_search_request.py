# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_retail_v2beta_search_request_boost_spec import GoogleCloudRetailV2betaSearchRequestBoostSpec
from openapi_server.models.google_cloud_retail_v2beta_search_request_dynamic_facet_spec import GoogleCloudRetailV2betaSearchRequestDynamicFacetSpec
from openapi_server.models.google_cloud_retail_v2beta_search_request_facet_spec import GoogleCloudRetailV2betaSearchRequestFacetSpec
from openapi_server.models.google_cloud_retail_v2beta_search_request_personalization_spec import GoogleCloudRetailV2betaSearchRequestPersonalizationSpec
from openapi_server.models.google_cloud_retail_v2beta_search_request_query_expansion_spec import GoogleCloudRetailV2betaSearchRequestQueryExpansionSpec
from openapi_server.models.google_cloud_retail_v2beta_search_request_spell_correction_spec import GoogleCloudRetailV2betaSearchRequestSpellCorrectionSpec
from openapi_server.models.google_cloud_retail_v2beta_user_info import GoogleCloudRetailV2betaUserInfo
from openapi_server import util


class GoogleCloudRetailV2betaSearchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boost_spec: GoogleCloudRetailV2betaSearchRequestBoostSpec=None, branch: str=None, canonical_filter: str=None, dynamic_facet_spec: GoogleCloudRetailV2betaSearchRequestDynamicFacetSpec=None, entity: str=None, facet_specs: List[GoogleCloudRetailV2betaSearchRequestFacetSpec]=None, filter: str=None, labels: Dict[str, str]=None, offset: int=None, order_by: str=None, page_categories: List[str]=None, page_size: int=None, page_token: str=None, personalization_spec: GoogleCloudRetailV2betaSearchRequestPersonalizationSpec=None, query: str=None, query_expansion_spec: GoogleCloudRetailV2betaSearchRequestQueryExpansionSpec=None, search_mode: str=None, spell_correction_spec: GoogleCloudRetailV2betaSearchRequestSpellCorrectionSpec=None, user_info: GoogleCloudRetailV2betaUserInfo=None, variant_rollup_keys: List[str]=None, visitor_id: str=None):
        """GoogleCloudRetailV2betaSearchRequest - a model defined in OpenAPI

        :param boost_spec: The boost_spec of this GoogleCloudRetailV2betaSearchRequest.
        :param branch: The branch of this GoogleCloudRetailV2betaSearchRequest.
        :param canonical_filter: The canonical_filter of this GoogleCloudRetailV2betaSearchRequest.
        :param dynamic_facet_spec: The dynamic_facet_spec of this GoogleCloudRetailV2betaSearchRequest.
        :param entity: The entity of this GoogleCloudRetailV2betaSearchRequest.
        :param facet_specs: The facet_specs of this GoogleCloudRetailV2betaSearchRequest.
        :param filter: The filter of this GoogleCloudRetailV2betaSearchRequest.
        :param labels: The labels of this GoogleCloudRetailV2betaSearchRequest.
        :param offset: The offset of this GoogleCloudRetailV2betaSearchRequest.
        :param order_by: The order_by of this GoogleCloudRetailV2betaSearchRequest.
        :param page_categories: The page_categories of this GoogleCloudRetailV2betaSearchRequest.
        :param page_size: The page_size of this GoogleCloudRetailV2betaSearchRequest.
        :param page_token: The page_token of this GoogleCloudRetailV2betaSearchRequest.
        :param personalization_spec: The personalization_spec of this GoogleCloudRetailV2betaSearchRequest.
        :param query: The query of this GoogleCloudRetailV2betaSearchRequest.
        :param query_expansion_spec: The query_expansion_spec of this GoogleCloudRetailV2betaSearchRequest.
        :param search_mode: The search_mode of this GoogleCloudRetailV2betaSearchRequest.
        :param spell_correction_spec: The spell_correction_spec of this GoogleCloudRetailV2betaSearchRequest.
        :param user_info: The user_info of this GoogleCloudRetailV2betaSearchRequest.
        :param variant_rollup_keys: The variant_rollup_keys of this GoogleCloudRetailV2betaSearchRequest.
        :param visitor_id: The visitor_id of this GoogleCloudRetailV2betaSearchRequest.
        """
        self.openapi_types = {
            'boost_spec': GoogleCloudRetailV2betaSearchRequestBoostSpec,
            'branch': str,
            'canonical_filter': str,
            'dynamic_facet_spec': GoogleCloudRetailV2betaSearchRequestDynamicFacetSpec,
            'entity': str,
            'facet_specs': List[GoogleCloudRetailV2betaSearchRequestFacetSpec],
            'filter': str,
            'labels': Dict[str, str],
            'offset': int,
            'order_by': str,
            'page_categories': List[str],
            'page_size': int,
            'page_token': str,
            'personalization_spec': GoogleCloudRetailV2betaSearchRequestPersonalizationSpec,
            'query': str,
            'query_expansion_spec': GoogleCloudRetailV2betaSearchRequestQueryExpansionSpec,
            'search_mode': str,
            'spell_correction_spec': GoogleCloudRetailV2betaSearchRequestSpellCorrectionSpec,
            'user_info': GoogleCloudRetailV2betaUserInfo,
            'variant_rollup_keys': List[str],
            'visitor_id': str
        }

        self.attribute_map = {
            'boost_spec': 'boostSpec',
            'branch': 'branch',
            'canonical_filter': 'canonicalFilter',
            'dynamic_facet_spec': 'dynamicFacetSpec',
            'entity': 'entity',
            'facet_specs': 'facetSpecs',
            'filter': 'filter',
            'labels': 'labels',
            'offset': 'offset',
            'order_by': 'orderBy',
            'page_categories': 'pageCategories',
            'page_size': 'pageSize',
            'page_token': 'pageToken',
            'personalization_spec': 'personalizationSpec',
            'query': 'query',
            'query_expansion_spec': 'queryExpansionSpec',
            'search_mode': 'searchMode',
            'spell_correction_spec': 'spellCorrectionSpec',
            'user_info': 'userInfo',
            'variant_rollup_keys': 'variantRollupKeys',
            'visitor_id': 'visitorId'
        }

        self._boost_spec = boost_spec
        self._branch = branch
        self._canonical_filter = canonical_filter
        self._dynamic_facet_spec = dynamic_facet_spec
        self._entity = entity
        self._facet_specs = facet_specs
        self._filter = filter
        self._labels = labels
        self._offset = offset
        self._order_by = order_by
        self._page_categories = page_categories
        self._page_size = page_size
        self._page_token = page_token
        self._personalization_spec = personalization_spec
        self._query = query
        self._query_expansion_spec = query_expansion_spec
        self._search_mode = search_mode
        self._spell_correction_spec = spell_correction_spec
        self._user_info = user_info
        self._variant_rollup_keys = variant_rollup_keys
        self._visitor_id = visitor_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2betaSearchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2betaSearchRequest of this GoogleCloudRetailV2betaSearchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boost_spec(self):
        """Gets the boost_spec of this GoogleCloudRetailV2betaSearchRequest.


        :return: The boost_spec of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: GoogleCloudRetailV2betaSearchRequestBoostSpec
        """
        return self._boost_spec

    @boost_spec.setter
    def boost_spec(self, boost_spec):
        """Sets the boost_spec of this GoogleCloudRetailV2betaSearchRequest.


        :param boost_spec: The boost_spec of this GoogleCloudRetailV2betaSearchRequest.
        :type boost_spec: GoogleCloudRetailV2betaSearchRequestBoostSpec
        """

        self._boost_spec = boost_spec

    @property
    def branch(self):
        """Gets the branch of this GoogleCloudRetailV2betaSearchRequest.

        The branch resource name, such as `projects/*/locations/global/catalogs/default_catalog/branches/0`. Use \"default_branch\" as the branch ID or leave this field empty, to search products under the default branch.

        :return: The branch of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this GoogleCloudRetailV2betaSearchRequest.

        The branch resource name, such as `projects/*/locations/global/catalogs/default_catalog/branches/0`. Use \"default_branch\" as the branch ID or leave this field empty, to search products under the default branch.

        :param branch: The branch of this GoogleCloudRetailV2betaSearchRequest.
        :type branch: str
        """

        self._branch = branch

    @property
    def canonical_filter(self):
        """Gets the canonical_filter of this GoogleCloudRetailV2betaSearchRequest.

        The default filter that is applied when a user performs a search without checking any filters on the search page. The filter applied to every search request when quality improvement such as query expansion is needed. In the case a query does not have a sufficient amount of results this filter will be used to determine whether or not to enable the query expansion flow. The original filter will still be used for the query expanded search. This field is strongly recommended to achieve high search quality. For more information about filter syntax, see SearchRequest.filter.

        :return: The canonical_filter of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: str
        """
        return self._canonical_filter

    @canonical_filter.setter
    def canonical_filter(self, canonical_filter):
        """Sets the canonical_filter of this GoogleCloudRetailV2betaSearchRequest.

        The default filter that is applied when a user performs a search without checking any filters on the search page. The filter applied to every search request when quality improvement such as query expansion is needed. In the case a query does not have a sufficient amount of results this filter will be used to determine whether or not to enable the query expansion flow. The original filter will still be used for the query expanded search. This field is strongly recommended to achieve high search quality. For more information about filter syntax, see SearchRequest.filter.

        :param canonical_filter: The canonical_filter of this GoogleCloudRetailV2betaSearchRequest.
        :type canonical_filter: str
        """

        self._canonical_filter = canonical_filter

    @property
    def dynamic_facet_spec(self):
        """Gets the dynamic_facet_spec of this GoogleCloudRetailV2betaSearchRequest.


        :return: The dynamic_facet_spec of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: GoogleCloudRetailV2betaSearchRequestDynamicFacetSpec
        """
        return self._dynamic_facet_spec

    @dynamic_facet_spec.setter
    def dynamic_facet_spec(self, dynamic_facet_spec):
        """Sets the dynamic_facet_spec of this GoogleCloudRetailV2betaSearchRequest.


        :param dynamic_facet_spec: The dynamic_facet_spec of this GoogleCloudRetailV2betaSearchRequest.
        :type dynamic_facet_spec: GoogleCloudRetailV2betaSearchRequestDynamicFacetSpec
        """

        self._dynamic_facet_spec = dynamic_facet_spec

    @property
    def entity(self):
        """Gets the entity of this GoogleCloudRetailV2betaSearchRequest.

        The entity for customers that may run multiple different entities, domains, sites or regions, for example, `Google US`, `Google Ads`, `Waymo`, `google.com`, `youtube.com`, etc. If this is set, it should be exactly matched with UserEvent.entity to get search results boosted by entity.

        :return: The entity of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this GoogleCloudRetailV2betaSearchRequest.

        The entity for customers that may run multiple different entities, domains, sites or regions, for example, `Google US`, `Google Ads`, `Waymo`, `google.com`, `youtube.com`, etc. If this is set, it should be exactly matched with UserEvent.entity to get search results boosted by entity.

        :param entity: The entity of this GoogleCloudRetailV2betaSearchRequest.
        :type entity: str
        """

        self._entity = entity

    @property
    def facet_specs(self):
        """Gets the facet_specs of this GoogleCloudRetailV2betaSearchRequest.

        Facet specifications for faceted search. If empty, no facets are returned. A maximum of 200 values are allowed. Otherwise, an INVALID_ARGUMENT error is returned.

        :return: The facet_specs of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: List[GoogleCloudRetailV2betaSearchRequestFacetSpec]
        """
        return self._facet_specs

    @facet_specs.setter
    def facet_specs(self, facet_specs):
        """Sets the facet_specs of this GoogleCloudRetailV2betaSearchRequest.

        Facet specifications for faceted search. If empty, no facets are returned. A maximum of 200 values are allowed. Otherwise, an INVALID_ARGUMENT error is returned.

        :param facet_specs: The facet_specs of this GoogleCloudRetailV2betaSearchRequest.
        :type facet_specs: List[GoogleCloudRetailV2betaSearchRequestFacetSpec]
        """

        self._facet_specs = facet_specs

    @property
    def filter(self):
        """Gets the filter of this GoogleCloudRetailV2betaSearchRequest.

        The filter syntax consists of an expression language for constructing a predicate from one or more fields of the products being filtered. Filter expression is case-sensitive. For more information, see [Filter](https://cloud.google.com/retail/docs/filter-and-order#filter). If this field is unrecognizable, an INVALID_ARGUMENT is returned.

        :return: The filter of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GoogleCloudRetailV2betaSearchRequest.

        The filter syntax consists of an expression language for constructing a predicate from one or more fields of the products being filtered. Filter expression is case-sensitive. For more information, see [Filter](https://cloud.google.com/retail/docs/filter-and-order#filter). If this field is unrecognizable, an INVALID_ARGUMENT is returned.

        :param filter: The filter of this GoogleCloudRetailV2betaSearchRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudRetailV2betaSearchRequest.

        The labels applied to a resource must meet the following requirements: * Each resource can have multiple labels, up to a maximum of 64. * Each label must be a key-value pair. * Keys have a minimum length of 1 character and a maximum length of 63 characters and cannot be empty. Values can be empty and have a maximum length of 63 characters. * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. All characters must use UTF-8 encoding, and international characters are allowed. * The key portion of a label must be unique. However, you can use the same key with multiple resources. * Keys must start with a lowercase letter or international character. For more information, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements) in the Resource Manager documentation.

        :return: The labels of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudRetailV2betaSearchRequest.

        The labels applied to a resource must meet the following requirements: * Each resource can have multiple labels, up to a maximum of 64. * Each label must be a key-value pair. * Keys have a minimum length of 1 character and a maximum length of 63 characters and cannot be empty. Values can be empty and have a maximum length of 63 characters. * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. All characters must use UTF-8 encoding, and international characters are allowed. * The key portion of a label must be unique. However, you can use the same key with multiple resources. * Keys must start with a lowercase letter or international character. For more information, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements) in the Resource Manager documentation.

        :param labels: The labels of this GoogleCloudRetailV2betaSearchRequest.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def offset(self):
        """Gets the offset of this GoogleCloudRetailV2betaSearchRequest.

        A 0-indexed integer that specifies the current offset (that is, starting result location, amongst the Products deemed by the API as relevant) in search results. This field is only considered if page_token is unset. If this field is negative, an INVALID_ARGUMENT is returned.

        :return: The offset of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GoogleCloudRetailV2betaSearchRequest.

        A 0-indexed integer that specifies the current offset (that is, starting result location, amongst the Products deemed by the API as relevant) in search results. This field is only considered if page_token is unset. If this field is negative, an INVALID_ARGUMENT is returned.

        :param offset: The offset of this GoogleCloudRetailV2betaSearchRequest.
        :type offset: int
        """

        self._offset = offset

    @property
    def order_by(self):
        """Gets the order_by of this GoogleCloudRetailV2betaSearchRequest.

        The order in which products are returned. Products can be ordered by a field in an Product object. Leave it unset if ordered by relevance. OrderBy expression is case-sensitive. For more information, see [Order](https://cloud.google.com/retail/docs/filter-and-order#order). If this field is unrecognizable, an INVALID_ARGUMENT is returned.

        :return: The order_by of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this GoogleCloudRetailV2betaSearchRequest.

        The order in which products are returned. Products can be ordered by a field in an Product object. Leave it unset if ordered by relevance. OrderBy expression is case-sensitive. For more information, see [Order](https://cloud.google.com/retail/docs/filter-and-order#order). If this field is unrecognizable, an INVALID_ARGUMENT is returned.

        :param order_by: The order_by of this GoogleCloudRetailV2betaSearchRequest.
        :type order_by: str
        """

        self._order_by = order_by

    @property
    def page_categories(self):
        """Gets the page_categories of this GoogleCloudRetailV2betaSearchRequest.

        The categories associated with a category page. Must be set for category navigation queries to achieve good search quality. The format should be the same as UserEvent.page_categories; To represent full path of category, use '>' sign to separate different hierarchies. If '>' is part of the category name, replace it with other character(s). Category pages include special pages such as sales or promotions. For instance, a special sale page may have the category hierarchy: \"pageCategories\" : [\"Sales > 2017 Black Friday Deals\"].

        :return: The page_categories of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: List[str]
        """
        return self._page_categories

    @page_categories.setter
    def page_categories(self, page_categories):
        """Sets the page_categories of this GoogleCloudRetailV2betaSearchRequest.

        The categories associated with a category page. Must be set for category navigation queries to achieve good search quality. The format should be the same as UserEvent.page_categories; To represent full path of category, use '>' sign to separate different hierarchies. If '>' is part of the category name, replace it with other character(s). Category pages include special pages such as sales or promotions. For instance, a special sale page may have the category hierarchy: \"pageCategories\" : [\"Sales > 2017 Black Friday Deals\"].

        :param page_categories: The page_categories of this GoogleCloudRetailV2betaSearchRequest.
        :type page_categories: List[str]
        """

        self._page_categories = page_categories

    @property
    def page_size(self):
        """Gets the page_size of this GoogleCloudRetailV2betaSearchRequest.

        Maximum number of Products to return. If unspecified, defaults to a reasonable value. The maximum allowed value is 120. Values above 120 will be coerced to 120. If this field is negative, an INVALID_ARGUMENT is returned.

        :return: The page_size of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this GoogleCloudRetailV2betaSearchRequest.

        Maximum number of Products to return. If unspecified, defaults to a reasonable value. The maximum allowed value is 120. Values above 120 will be coerced to 120. If this field is negative, an INVALID_ARGUMENT is returned.

        :param page_size: The page_size of this GoogleCloudRetailV2betaSearchRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this GoogleCloudRetailV2betaSearchRequest.

        A page token SearchResponse.next_page_token, received from a previous SearchService.Search call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to SearchService.Search must match the call that provided the page token. Otherwise, an INVALID_ARGUMENT error is returned.

        :return: The page_token of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this GoogleCloudRetailV2betaSearchRequest.

        A page token SearchResponse.next_page_token, received from a previous SearchService.Search call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to SearchService.Search must match the call that provided the page token. Otherwise, an INVALID_ARGUMENT error is returned.

        :param page_token: The page_token of this GoogleCloudRetailV2betaSearchRequest.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def personalization_spec(self):
        """Gets the personalization_spec of this GoogleCloudRetailV2betaSearchRequest.


        :return: The personalization_spec of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: GoogleCloudRetailV2betaSearchRequestPersonalizationSpec
        """
        return self._personalization_spec

    @personalization_spec.setter
    def personalization_spec(self, personalization_spec):
        """Sets the personalization_spec of this GoogleCloudRetailV2betaSearchRequest.


        :param personalization_spec: The personalization_spec of this GoogleCloudRetailV2betaSearchRequest.
        :type personalization_spec: GoogleCloudRetailV2betaSearchRequestPersonalizationSpec
        """

        self._personalization_spec = personalization_spec

    @property
    def query(self):
        """Gets the query of this GoogleCloudRetailV2betaSearchRequest.

        Raw search query. If this field is empty, the request is considered a category browsing request and returned results are based on filter and page_categories.

        :return: The query of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this GoogleCloudRetailV2betaSearchRequest.

        Raw search query. If this field is empty, the request is considered a category browsing request and returned results are based on filter and page_categories.

        :param query: The query of this GoogleCloudRetailV2betaSearchRequest.
        :type query: str
        """

        self._query = query

    @property
    def query_expansion_spec(self):
        """Gets the query_expansion_spec of this GoogleCloudRetailV2betaSearchRequest.


        :return: The query_expansion_spec of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: GoogleCloudRetailV2betaSearchRequestQueryExpansionSpec
        """
        return self._query_expansion_spec

    @query_expansion_spec.setter
    def query_expansion_spec(self, query_expansion_spec):
        """Sets the query_expansion_spec of this GoogleCloudRetailV2betaSearchRequest.


        :param query_expansion_spec: The query_expansion_spec of this GoogleCloudRetailV2betaSearchRequest.
        :type query_expansion_spec: GoogleCloudRetailV2betaSearchRequestQueryExpansionSpec
        """

        self._query_expansion_spec = query_expansion_spec

    @property
    def search_mode(self):
        """Gets the search_mode of this GoogleCloudRetailV2betaSearchRequest.

        The search mode of the search request. If not specified, a single search request triggers both product search and faceted search.

        :return: The search_mode of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: str
        """
        return self._search_mode

    @search_mode.setter
    def search_mode(self, search_mode):
        """Sets the search_mode of this GoogleCloudRetailV2betaSearchRequest.

        The search mode of the search request. If not specified, a single search request triggers both product search and faceted search.

        :param search_mode: The search_mode of this GoogleCloudRetailV2betaSearchRequest.
        :type search_mode: str
        """
        allowed_values = ["SEARCH_MODE_UNSPECIFIED", "PRODUCT_SEARCH_ONLY", "FACETED_SEARCH_ONLY"]  # noqa: E501
        if search_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `search_mode` ({0}), must be one of {1}"
                .format(search_mode, allowed_values)
            )

        self._search_mode = search_mode

    @property
    def spell_correction_spec(self):
        """Gets the spell_correction_spec of this GoogleCloudRetailV2betaSearchRequest.


        :return: The spell_correction_spec of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: GoogleCloudRetailV2betaSearchRequestSpellCorrectionSpec
        """
        return self._spell_correction_spec

    @spell_correction_spec.setter
    def spell_correction_spec(self, spell_correction_spec):
        """Sets the spell_correction_spec of this GoogleCloudRetailV2betaSearchRequest.


        :param spell_correction_spec: The spell_correction_spec of this GoogleCloudRetailV2betaSearchRequest.
        :type spell_correction_spec: GoogleCloudRetailV2betaSearchRequestSpellCorrectionSpec
        """

        self._spell_correction_spec = spell_correction_spec

    @property
    def user_info(self):
        """Gets the user_info of this GoogleCloudRetailV2betaSearchRequest.


        :return: The user_info of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: GoogleCloudRetailV2betaUserInfo
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this GoogleCloudRetailV2betaSearchRequest.


        :param user_info: The user_info of this GoogleCloudRetailV2betaSearchRequest.
        :type user_info: GoogleCloudRetailV2betaUserInfo
        """

        self._user_info = user_info

    @property
    def variant_rollup_keys(self):
        """Gets the variant_rollup_keys of this GoogleCloudRetailV2betaSearchRequest.

        The keys to fetch and rollup the matching variant Products attributes, FulfillmentInfo or LocalInventorys attributes. The attributes from all the matching variant Products or LocalInventorys are merged and de-duplicated. Notice that rollup attributes will lead to extra query latency. Maximum number of keys is 30. For FulfillmentInfo, a fulfillment type and a fulfillment ID must be provided in the format of \"fulfillmentType.fulfillmentId\". E.g., in \"pickupInStore.store123\", \"pickupInStore\" is fulfillment type and \"store123\" is the store ID. Supported keys are: * colorFamilies * price * originalPrice * discount * variantId * inventory(place_id,price) * inventory(place_id,original_price) * inventory(place_id,attributes.key), where key is any key in the Product.local_inventories.attributes map. * attributes.key, where key is any key in the Product.attributes map. * pickupInStore.id, where id is any FulfillmentInfo.place_ids for FulfillmentInfo.type \"pickup-in-store\". * shipToStore.id, where id is any FulfillmentInfo.place_ids for FulfillmentInfo.type \"ship-to-store\". * sameDayDelivery.id, where id is any FulfillmentInfo.place_ids for FulfillmentInfo.type \"same-day-delivery\". * nextDayDelivery.id, where id is any FulfillmentInfo.place_ids for FulfillmentInfo.type \"next-day-delivery\". * customFulfillment1.id, where id is any FulfillmentInfo.place_ids for FulfillmentInfo.type \"custom-type-1\". * customFulfillment2.id, where id is any FulfillmentInfo.place_ids for FulfillmentInfo.type \"custom-type-2\". * customFulfillment3.id, where id is any FulfillmentInfo.place_ids for FulfillmentInfo.type \"custom-type-3\". * customFulfillment4.id, where id is any FulfillmentInfo.place_ids for FulfillmentInfo.type \"custom-type-4\". * customFulfillment5.id, where id is any FulfillmentInfo.place_ids for FulfillmentInfo.type \"custom-type-5\". If this field is set to an invalid value other than these, an INVALID_ARGUMENT error is returned.

        :return: The variant_rollup_keys of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: List[str]
        """
        return self._variant_rollup_keys

    @variant_rollup_keys.setter
    def variant_rollup_keys(self, variant_rollup_keys):
        """Sets the variant_rollup_keys of this GoogleCloudRetailV2betaSearchRequest.

        The keys to fetch and rollup the matching variant Products attributes, FulfillmentInfo or LocalInventorys attributes. The attributes from all the matching variant Products or LocalInventorys are merged and de-duplicated. Notice that rollup attributes will lead to extra query latency. Maximum number of keys is 30. For FulfillmentInfo, a fulfillment type and a fulfillment ID must be provided in the format of \"fulfillmentType.fulfillmentId\". E.g., in \"pickupInStore.store123\", \"pickupInStore\" is fulfillment type and \"store123\" is the store ID. Supported keys are: * colorFamilies * price * originalPrice * discount * variantId * inventory(place_id,price) * inventory(place_id,original_price) * inventory(place_id,attributes.key), where key is any key in the Product.local_inventories.attributes map. * attributes.key, where key is any key in the Product.attributes map. * pickupInStore.id, where id is any FulfillmentInfo.place_ids for FulfillmentInfo.type \"pickup-in-store\". * shipToStore.id, where id is any FulfillmentInfo.place_ids for FulfillmentInfo.type \"ship-to-store\". * sameDayDelivery.id, where id is any FulfillmentInfo.place_ids for FulfillmentInfo.type \"same-day-delivery\". * nextDayDelivery.id, where id is any FulfillmentInfo.place_ids for FulfillmentInfo.type \"next-day-delivery\". * customFulfillment1.id, where id is any FulfillmentInfo.place_ids for FulfillmentInfo.type \"custom-type-1\". * customFulfillment2.id, where id is any FulfillmentInfo.place_ids for FulfillmentInfo.type \"custom-type-2\". * customFulfillment3.id, where id is any FulfillmentInfo.place_ids for FulfillmentInfo.type \"custom-type-3\". * customFulfillment4.id, where id is any FulfillmentInfo.place_ids for FulfillmentInfo.type \"custom-type-4\". * customFulfillment5.id, where id is any FulfillmentInfo.place_ids for FulfillmentInfo.type \"custom-type-5\". If this field is set to an invalid value other than these, an INVALID_ARGUMENT error is returned.

        :param variant_rollup_keys: The variant_rollup_keys of this GoogleCloudRetailV2betaSearchRequest.
        :type variant_rollup_keys: List[str]
        """

        self._variant_rollup_keys = variant_rollup_keys

    @property
    def visitor_id(self):
        """Gets the visitor_id of this GoogleCloudRetailV2betaSearchRequest.

        Required. A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor logs in or out of the website. This should be the same identifier as UserEvent.visitor_id. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.

        :return: The visitor_id of this GoogleCloudRetailV2betaSearchRequest.
        :rtype: str
        """
        return self._visitor_id

    @visitor_id.setter
    def visitor_id(self, visitor_id):
        """Sets the visitor_id of this GoogleCloudRetailV2betaSearchRequest.

        Required. A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor logs in or out of the website. This should be the same identifier as UserEvent.visitor_id. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.

        :param visitor_id: The visitor_id of this GoogleCloudRetailV2betaSearchRequest.
        :type visitor_id: str
        """

        self._visitor_id = visitor_id
