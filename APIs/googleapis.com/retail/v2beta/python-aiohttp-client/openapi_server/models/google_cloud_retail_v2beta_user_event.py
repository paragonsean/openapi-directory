# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_retail_v2beta_completion_detail import GoogleCloudRetailV2betaCompletionDetail
from openapi_server.models.google_cloud_retail_v2beta_custom_attribute import GoogleCloudRetailV2betaCustomAttribute
from openapi_server.models.google_cloud_retail_v2beta_product_detail import GoogleCloudRetailV2betaProductDetail
from openapi_server.models.google_cloud_retail_v2beta_purchase_transaction import GoogleCloudRetailV2betaPurchaseTransaction
from openapi_server.models.google_cloud_retail_v2beta_user_info import GoogleCloudRetailV2betaUserInfo
from openapi_server import util


class GoogleCloudRetailV2betaUserEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, GoogleCloudRetailV2betaCustomAttribute]=None, attribution_token: str=None, cart_id: str=None, completion_detail: GoogleCloudRetailV2betaCompletionDetail=None, entity: str=None, event_time: str=None, event_type: str=None, experiment_ids: List[str]=None, filter: str=None, offset: int=None, order_by: str=None, page_categories: List[str]=None, page_view_id: str=None, product_details: List[GoogleCloudRetailV2betaProductDetail]=None, purchase_transaction: GoogleCloudRetailV2betaPurchaseTransaction=None, referrer_uri: str=None, search_query: str=None, session_id: str=None, uri: str=None, user_info: GoogleCloudRetailV2betaUserInfo=None, visitor_id: str=None):
        """GoogleCloudRetailV2betaUserEvent - a model defined in OpenAPI

        :param attributes: The attributes of this GoogleCloudRetailV2betaUserEvent.
        :param attribution_token: The attribution_token of this GoogleCloudRetailV2betaUserEvent.
        :param cart_id: The cart_id of this GoogleCloudRetailV2betaUserEvent.
        :param completion_detail: The completion_detail of this GoogleCloudRetailV2betaUserEvent.
        :param entity: The entity of this GoogleCloudRetailV2betaUserEvent.
        :param event_time: The event_time of this GoogleCloudRetailV2betaUserEvent.
        :param event_type: The event_type of this GoogleCloudRetailV2betaUserEvent.
        :param experiment_ids: The experiment_ids of this GoogleCloudRetailV2betaUserEvent.
        :param filter: The filter of this GoogleCloudRetailV2betaUserEvent.
        :param offset: The offset of this GoogleCloudRetailV2betaUserEvent.
        :param order_by: The order_by of this GoogleCloudRetailV2betaUserEvent.
        :param page_categories: The page_categories of this GoogleCloudRetailV2betaUserEvent.
        :param page_view_id: The page_view_id of this GoogleCloudRetailV2betaUserEvent.
        :param product_details: The product_details of this GoogleCloudRetailV2betaUserEvent.
        :param purchase_transaction: The purchase_transaction of this GoogleCloudRetailV2betaUserEvent.
        :param referrer_uri: The referrer_uri of this GoogleCloudRetailV2betaUserEvent.
        :param search_query: The search_query of this GoogleCloudRetailV2betaUserEvent.
        :param session_id: The session_id of this GoogleCloudRetailV2betaUserEvent.
        :param uri: The uri of this GoogleCloudRetailV2betaUserEvent.
        :param user_info: The user_info of this GoogleCloudRetailV2betaUserEvent.
        :param visitor_id: The visitor_id of this GoogleCloudRetailV2betaUserEvent.
        """
        self.openapi_types = {
            'attributes': Dict[str, GoogleCloudRetailV2betaCustomAttribute],
            'attribution_token': str,
            'cart_id': str,
            'completion_detail': GoogleCloudRetailV2betaCompletionDetail,
            'entity': str,
            'event_time': str,
            'event_type': str,
            'experiment_ids': List[str],
            'filter': str,
            'offset': int,
            'order_by': str,
            'page_categories': List[str],
            'page_view_id': str,
            'product_details': List[GoogleCloudRetailV2betaProductDetail],
            'purchase_transaction': GoogleCloudRetailV2betaPurchaseTransaction,
            'referrer_uri': str,
            'search_query': str,
            'session_id': str,
            'uri': str,
            'user_info': GoogleCloudRetailV2betaUserInfo,
            'visitor_id': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'attribution_token': 'attributionToken',
            'cart_id': 'cartId',
            'completion_detail': 'completionDetail',
            'entity': 'entity',
            'event_time': 'eventTime',
            'event_type': 'eventType',
            'experiment_ids': 'experimentIds',
            'filter': 'filter',
            'offset': 'offset',
            'order_by': 'orderBy',
            'page_categories': 'pageCategories',
            'page_view_id': 'pageViewId',
            'product_details': 'productDetails',
            'purchase_transaction': 'purchaseTransaction',
            'referrer_uri': 'referrerUri',
            'search_query': 'searchQuery',
            'session_id': 'sessionId',
            'uri': 'uri',
            'user_info': 'userInfo',
            'visitor_id': 'visitorId'
        }

        self._attributes = attributes
        self._attribution_token = attribution_token
        self._cart_id = cart_id
        self._completion_detail = completion_detail
        self._entity = entity
        self._event_time = event_time
        self._event_type = event_type
        self._experiment_ids = experiment_ids
        self._filter = filter
        self._offset = offset
        self._order_by = order_by
        self._page_categories = page_categories
        self._page_view_id = page_view_id
        self._product_details = product_details
        self._purchase_transaction = purchase_transaction
        self._referrer_uri = referrer_uri
        self._search_query = search_query
        self._session_id = session_id
        self._uri = uri
        self._user_info = user_info
        self._visitor_id = visitor_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2betaUserEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2betaUserEvent of this GoogleCloudRetailV2betaUserEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this GoogleCloudRetailV2betaUserEvent.

        Extra user event features to include in the recommendation model. If you provide custom attributes for ingested user events, also include them in the user events that you associate with prediction requests. Custom attribute formatting must be consistent between imported events and events provided with prediction requests. This lets the Retail API use those custom attributes when training models and serving predictions, which helps improve recommendation quality. This field needs to pass all below criteria, otherwise an INVALID_ARGUMENT error is returned: * The key must be a UTF-8 encoded string with a length limit of 5,000 characters. * For text attributes, at most 400 values are allowed. Empty values are not allowed. Each value must be a UTF-8 encoded string with a length limit of 256 characters. * For number attributes, at most 400 values are allowed. For product recommendations, an example of extra user information is traffic_channel, which is how a user arrives at the site. Users can arrive at the site by coming to the site directly, coming through Google search, or in other ways.

        :return: The attributes of this GoogleCloudRetailV2betaUserEvent.
        :rtype: Dict[str, GoogleCloudRetailV2betaCustomAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this GoogleCloudRetailV2betaUserEvent.

        Extra user event features to include in the recommendation model. If you provide custom attributes for ingested user events, also include them in the user events that you associate with prediction requests. Custom attribute formatting must be consistent between imported events and events provided with prediction requests. This lets the Retail API use those custom attributes when training models and serving predictions, which helps improve recommendation quality. This field needs to pass all below criteria, otherwise an INVALID_ARGUMENT error is returned: * The key must be a UTF-8 encoded string with a length limit of 5,000 characters. * For text attributes, at most 400 values are allowed. Empty values are not allowed. Each value must be a UTF-8 encoded string with a length limit of 256 characters. * For number attributes, at most 400 values are allowed. For product recommendations, an example of extra user information is traffic_channel, which is how a user arrives at the site. Users can arrive at the site by coming to the site directly, coming through Google search, or in other ways.

        :param attributes: The attributes of this GoogleCloudRetailV2betaUserEvent.
        :type attributes: Dict[str, GoogleCloudRetailV2betaCustomAttribute]
        """

        self._attributes = attributes

    @property
    def attribution_token(self):
        """Gets the attribution_token of this GoogleCloudRetailV2betaUserEvent.

        Highly recommended for user events that are the result of PredictionService.Predict. This field enables accurate attribution of recommendation model performance. The value must be a valid PredictResponse.attribution_token for user events that are the result of PredictionService.Predict. The value must be a valid SearchResponse.attribution_token for user events that are the result of SearchService.Search. This token enables us to accurately attribute page view or purchase back to the event and the particular predict response containing this clicked/purchased product. If user clicks on product K in the recommendation results, pass PredictResponse.attribution_token as a URL parameter to product K's page. When recording events on product K's page, log the PredictResponse.attribution_token to this field.

        :return: The attribution_token of this GoogleCloudRetailV2betaUserEvent.
        :rtype: str
        """
        return self._attribution_token

    @attribution_token.setter
    def attribution_token(self, attribution_token):
        """Sets the attribution_token of this GoogleCloudRetailV2betaUserEvent.

        Highly recommended for user events that are the result of PredictionService.Predict. This field enables accurate attribution of recommendation model performance. The value must be a valid PredictResponse.attribution_token for user events that are the result of PredictionService.Predict. The value must be a valid SearchResponse.attribution_token for user events that are the result of SearchService.Search. This token enables us to accurately attribute page view or purchase back to the event and the particular predict response containing this clicked/purchased product. If user clicks on product K in the recommendation results, pass PredictResponse.attribution_token as a URL parameter to product K's page. When recording events on product K's page, log the PredictResponse.attribution_token to this field.

        :param attribution_token: The attribution_token of this GoogleCloudRetailV2betaUserEvent.
        :type attribution_token: str
        """

        self._attribution_token = attribution_token

    @property
    def cart_id(self):
        """Gets the cart_id of this GoogleCloudRetailV2betaUserEvent.

        The ID or name of the associated shopping cart. This ID is used to associate multiple items added or present in the cart before purchase. This can only be set for `add-to-cart`, `purchase-complete`, or `shopping-cart-page-view` events.

        :return: The cart_id of this GoogleCloudRetailV2betaUserEvent.
        :rtype: str
        """
        return self._cart_id

    @cart_id.setter
    def cart_id(self, cart_id):
        """Sets the cart_id of this GoogleCloudRetailV2betaUserEvent.

        The ID or name of the associated shopping cart. This ID is used to associate multiple items added or present in the cart before purchase. This can only be set for `add-to-cart`, `purchase-complete`, or `shopping-cart-page-view` events.

        :param cart_id: The cart_id of this GoogleCloudRetailV2betaUserEvent.
        :type cart_id: str
        """

        self._cart_id = cart_id

    @property
    def completion_detail(self):
        """Gets the completion_detail of this GoogleCloudRetailV2betaUserEvent.


        :return: The completion_detail of this GoogleCloudRetailV2betaUserEvent.
        :rtype: GoogleCloudRetailV2betaCompletionDetail
        """
        return self._completion_detail

    @completion_detail.setter
    def completion_detail(self, completion_detail):
        """Sets the completion_detail of this GoogleCloudRetailV2betaUserEvent.


        :param completion_detail: The completion_detail of this GoogleCloudRetailV2betaUserEvent.
        :type completion_detail: GoogleCloudRetailV2betaCompletionDetail
        """

        self._completion_detail = completion_detail

    @property
    def entity(self):
        """Gets the entity of this GoogleCloudRetailV2betaUserEvent.

        The entity for customers that may run multiple different entities, domains, sites or regions, for example, `Google US`, `Google Ads`, `Waymo`, `google.com`, `youtube.com`, etc. We recommend that you set this field to get better per-entity search, completion, and prediction results.

        :return: The entity of this GoogleCloudRetailV2betaUserEvent.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this GoogleCloudRetailV2betaUserEvent.

        The entity for customers that may run multiple different entities, domains, sites or regions, for example, `Google US`, `Google Ads`, `Waymo`, `google.com`, `youtube.com`, etc. We recommend that you set this field to get better per-entity search, completion, and prediction results.

        :param entity: The entity of this GoogleCloudRetailV2betaUserEvent.
        :type entity: str
        """

        self._entity = entity

    @property
    def event_time(self):
        """Gets the event_time of this GoogleCloudRetailV2betaUserEvent.

        Only required for UserEventService.ImportUserEvents method. Timestamp of when the user event happened.

        :return: The event_time of this GoogleCloudRetailV2betaUserEvent.
        :rtype: str
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this GoogleCloudRetailV2betaUserEvent.

        Only required for UserEventService.ImportUserEvents method. Timestamp of when the user event happened.

        :param event_time: The event_time of this GoogleCloudRetailV2betaUserEvent.
        :type event_time: str
        """

        self._event_time = event_time

    @property
    def event_type(self):
        """Gets the event_type of this GoogleCloudRetailV2betaUserEvent.

        Required. User event type. Allowed values are: * `add-to-cart`: Products being added to cart. * `category-page-view`: Special pages such as sale or promotion pages viewed. * `detail-page-view`: Products detail page viewed. * `home-page-view`: Homepage viewed. * `promotion-offered`: Promotion is offered to a user. * `promotion-not-offered`: Promotion is not offered to a user. * `purchase-complete`: User finishing a purchase. * `search`: Product search. * `shopping-cart-page-view`: User viewing a shopping cart.

        :return: The event_type of this GoogleCloudRetailV2betaUserEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this GoogleCloudRetailV2betaUserEvent.

        Required. User event type. Allowed values are: * `add-to-cart`: Products being added to cart. * `category-page-view`: Special pages such as sale or promotion pages viewed. * `detail-page-view`: Products detail page viewed. * `home-page-view`: Homepage viewed. * `promotion-offered`: Promotion is offered to a user. * `promotion-not-offered`: Promotion is not offered to a user. * `purchase-complete`: User finishing a purchase. * `search`: Product search. * `shopping-cart-page-view`: User viewing a shopping cart.

        :param event_type: The event_type of this GoogleCloudRetailV2betaUserEvent.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def experiment_ids(self):
        """Gets the experiment_ids of this GoogleCloudRetailV2betaUserEvent.

        A list of identifiers for the independent experiment groups this user event belongs to. This is used to distinguish between user events associated with different experiment setups (e.g. using Retail API, using different recommendation models).

        :return: The experiment_ids of this GoogleCloudRetailV2betaUserEvent.
        :rtype: List[str]
        """
        return self._experiment_ids

    @experiment_ids.setter
    def experiment_ids(self, experiment_ids):
        """Sets the experiment_ids of this GoogleCloudRetailV2betaUserEvent.

        A list of identifiers for the independent experiment groups this user event belongs to. This is used to distinguish between user events associated with different experiment setups (e.g. using Retail API, using different recommendation models).

        :param experiment_ids: The experiment_ids of this GoogleCloudRetailV2betaUserEvent.
        :type experiment_ids: List[str]
        """

        self._experiment_ids = experiment_ids

    @property
    def filter(self):
        """Gets the filter of this GoogleCloudRetailV2betaUserEvent.

        The filter syntax consists of an expression language for constructing a predicate from one or more fields of the products being filtered. See SearchRequest.filter for definition and syntax. The value must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned.

        :return: The filter of this GoogleCloudRetailV2betaUserEvent.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GoogleCloudRetailV2betaUserEvent.

        The filter syntax consists of an expression language for constructing a predicate from one or more fields of the products being filtered. See SearchRequest.filter for definition and syntax. The value must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned.

        :param filter: The filter of this GoogleCloudRetailV2betaUserEvent.
        :type filter: str
        """

        self._filter = filter

    @property
    def offset(self):
        """Gets the offset of this GoogleCloudRetailV2betaUserEvent.

        An integer that specifies the current offset for pagination (the 0-indexed starting location, amongst the products deemed by the API as relevant). See SearchRequest.offset for definition. If this field is negative, an INVALID_ARGUMENT is returned. This can only be set for `search` events. Other event types should not set this field. Otherwise, an INVALID_ARGUMENT error is returned.

        :return: The offset of this GoogleCloudRetailV2betaUserEvent.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GoogleCloudRetailV2betaUserEvent.

        An integer that specifies the current offset for pagination (the 0-indexed starting location, amongst the products deemed by the API as relevant). See SearchRequest.offset for definition. If this field is negative, an INVALID_ARGUMENT is returned. This can only be set for `search` events. Other event types should not set this field. Otherwise, an INVALID_ARGUMENT error is returned.

        :param offset: The offset of this GoogleCloudRetailV2betaUserEvent.
        :type offset: int
        """

        self._offset = offset

    @property
    def order_by(self):
        """Gets the order_by of this GoogleCloudRetailV2betaUserEvent.

        The order in which products are returned. See SearchRequest.order_by for definition and syntax. The value must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. This can only be set for `search` events. Other event types should not set this field. Otherwise, an INVALID_ARGUMENT error is returned.

        :return: The order_by of this GoogleCloudRetailV2betaUserEvent.
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this GoogleCloudRetailV2betaUserEvent.

        The order in which products are returned. See SearchRequest.order_by for definition and syntax. The value must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. This can only be set for `search` events. Other event types should not set this field. Otherwise, an INVALID_ARGUMENT error is returned.

        :param order_by: The order_by of this GoogleCloudRetailV2betaUserEvent.
        :type order_by: str
        """

        self._order_by = order_by

    @property
    def page_categories(self):
        """Gets the page_categories of this GoogleCloudRetailV2betaUserEvent.

        The categories associated with a category page. To represent full path of category, use '>' sign to separate different hierarchies. If '>' is part of the category name, replace it with other character(s). Category pages include special pages such as sales or promotions. For instance, a special sale page may have the category hierarchy: \"pageCategories\" : [\"Sales > 2017 Black Friday Deals\"]. Required for `category-page-view` events. At least one of search_query or page_categories is required for `search` events. Other event types should not set this field. Otherwise, an INVALID_ARGUMENT error is returned.

        :return: The page_categories of this GoogleCloudRetailV2betaUserEvent.
        :rtype: List[str]
        """
        return self._page_categories

    @page_categories.setter
    def page_categories(self, page_categories):
        """Sets the page_categories of this GoogleCloudRetailV2betaUserEvent.

        The categories associated with a category page. To represent full path of category, use '>' sign to separate different hierarchies. If '>' is part of the category name, replace it with other character(s). Category pages include special pages such as sales or promotions. For instance, a special sale page may have the category hierarchy: \"pageCategories\" : [\"Sales > 2017 Black Friday Deals\"]. Required for `category-page-view` events. At least one of search_query or page_categories is required for `search` events. Other event types should not set this field. Otherwise, an INVALID_ARGUMENT error is returned.

        :param page_categories: The page_categories of this GoogleCloudRetailV2betaUserEvent.
        :type page_categories: List[str]
        """

        self._page_categories = page_categories

    @property
    def page_view_id(self):
        """Gets the page_view_id of this GoogleCloudRetailV2betaUserEvent.

        A unique ID of a web page view. This should be kept the same for all user events triggered from the same pageview. For example, an item detail page view could trigger multiple events as the user is browsing the page. The `pageViewId` property should be kept the same for all these events so that they can be grouped together properly. When using the client side event reporting with JavaScript pixel and Google Tag Manager, this value is filled in automatically.

        :return: The page_view_id of this GoogleCloudRetailV2betaUserEvent.
        :rtype: str
        """
        return self._page_view_id

    @page_view_id.setter
    def page_view_id(self, page_view_id):
        """Sets the page_view_id of this GoogleCloudRetailV2betaUserEvent.

        A unique ID of a web page view. This should be kept the same for all user events triggered from the same pageview. For example, an item detail page view could trigger multiple events as the user is browsing the page. The `pageViewId` property should be kept the same for all these events so that they can be grouped together properly. When using the client side event reporting with JavaScript pixel and Google Tag Manager, this value is filled in automatically.

        :param page_view_id: The page_view_id of this GoogleCloudRetailV2betaUserEvent.
        :type page_view_id: str
        """

        self._page_view_id = page_view_id

    @property
    def product_details(self):
        """Gets the product_details of this GoogleCloudRetailV2betaUserEvent.

        The main product details related to the event. This field is optional except for the following event types: * `add-to-cart` * `detail-page-view` * `purchase-complete` In a `search` event, this field represents the products returned to the end user on the current page (the end user may have not finished browsing the whole page yet). When a new page is returned to the end user, after pagination/filtering/ordering even for the same query, a new `search` event with different product_details is desired. The end user may have not finished browsing the whole page yet.

        :return: The product_details of this GoogleCloudRetailV2betaUserEvent.
        :rtype: List[GoogleCloudRetailV2betaProductDetail]
        """
        return self._product_details

    @product_details.setter
    def product_details(self, product_details):
        """Sets the product_details of this GoogleCloudRetailV2betaUserEvent.

        The main product details related to the event. This field is optional except for the following event types: * `add-to-cart` * `detail-page-view` * `purchase-complete` In a `search` event, this field represents the products returned to the end user on the current page (the end user may have not finished browsing the whole page yet). When a new page is returned to the end user, after pagination/filtering/ordering even for the same query, a new `search` event with different product_details is desired. The end user may have not finished browsing the whole page yet.

        :param product_details: The product_details of this GoogleCloudRetailV2betaUserEvent.
        :type product_details: List[GoogleCloudRetailV2betaProductDetail]
        """

        self._product_details = product_details

    @property
    def purchase_transaction(self):
        """Gets the purchase_transaction of this GoogleCloudRetailV2betaUserEvent.


        :return: The purchase_transaction of this GoogleCloudRetailV2betaUserEvent.
        :rtype: GoogleCloudRetailV2betaPurchaseTransaction
        """
        return self._purchase_transaction

    @purchase_transaction.setter
    def purchase_transaction(self, purchase_transaction):
        """Sets the purchase_transaction of this GoogleCloudRetailV2betaUserEvent.


        :param purchase_transaction: The purchase_transaction of this GoogleCloudRetailV2betaUserEvent.
        :type purchase_transaction: GoogleCloudRetailV2betaPurchaseTransaction
        """

        self._purchase_transaction = purchase_transaction

    @property
    def referrer_uri(self):
        """Gets the referrer_uri of this GoogleCloudRetailV2betaUserEvent.

        The referrer URL of the current page. When using the client side event reporting with JavaScript pixel and Google Tag Manager, this value is filled in automatically.

        :return: The referrer_uri of this GoogleCloudRetailV2betaUserEvent.
        :rtype: str
        """
        return self._referrer_uri

    @referrer_uri.setter
    def referrer_uri(self, referrer_uri):
        """Sets the referrer_uri of this GoogleCloudRetailV2betaUserEvent.

        The referrer URL of the current page. When using the client side event reporting with JavaScript pixel and Google Tag Manager, this value is filled in automatically.

        :param referrer_uri: The referrer_uri of this GoogleCloudRetailV2betaUserEvent.
        :type referrer_uri: str
        """

        self._referrer_uri = referrer_uri

    @property
    def search_query(self):
        """Gets the search_query of this GoogleCloudRetailV2betaUserEvent.

        The user's search query. See SearchRequest.query for definition. The value must be a UTF-8 encoded string with a length limit of 5,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. At least one of search_query or page_categories is required for `search` events. Other event types should not set this field. Otherwise, an INVALID_ARGUMENT error is returned.

        :return: The search_query of this GoogleCloudRetailV2betaUserEvent.
        :rtype: str
        """
        return self._search_query

    @search_query.setter
    def search_query(self, search_query):
        """Sets the search_query of this GoogleCloudRetailV2betaUserEvent.

        The user's search query. See SearchRequest.query for definition. The value must be a UTF-8 encoded string with a length limit of 5,000 characters. Otherwise, an INVALID_ARGUMENT error is returned. At least one of search_query or page_categories is required for `search` events. Other event types should not set this field. Otherwise, an INVALID_ARGUMENT error is returned.

        :param search_query: The search_query of this GoogleCloudRetailV2betaUserEvent.
        :type search_query: str
        """

        self._search_query = search_query

    @property
    def session_id(self):
        """Gets the session_id of this GoogleCloudRetailV2betaUserEvent.

        A unique identifier for tracking a visitor session with a length limit of 128 bytes. A session is an aggregation of an end user behavior in a time span. A general guideline to populate the sesion_id: 1. If user has no activity for 30 min, a new session_id should be assigned. 2. The session_id should be unique across users, suggest use uuid or add visitor_id as prefix.

        :return: The session_id of this GoogleCloudRetailV2betaUserEvent.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this GoogleCloudRetailV2betaUserEvent.

        A unique identifier for tracking a visitor session with a length limit of 128 bytes. A session is an aggregation of an end user behavior in a time span. A general guideline to populate the sesion_id: 1. If user has no activity for 30 min, a new session_id should be assigned. 2. The session_id should be unique across users, suggest use uuid or add visitor_id as prefix.

        :param session_id: The session_id of this GoogleCloudRetailV2betaUserEvent.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def uri(self):
        """Gets the uri of this GoogleCloudRetailV2betaUserEvent.

        Complete URL (window.location.href) of the user's current page. When using the client side event reporting with JavaScript pixel and Google Tag Manager, this value is filled in automatically. Maximum length 5,000 characters.

        :return: The uri of this GoogleCloudRetailV2betaUserEvent.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this GoogleCloudRetailV2betaUserEvent.

        Complete URL (window.location.href) of the user's current page. When using the client side event reporting with JavaScript pixel and Google Tag Manager, this value is filled in automatically. Maximum length 5,000 characters.

        :param uri: The uri of this GoogleCloudRetailV2betaUserEvent.
        :type uri: str
        """

        self._uri = uri

    @property
    def user_info(self):
        """Gets the user_info of this GoogleCloudRetailV2betaUserEvent.


        :return: The user_info of this GoogleCloudRetailV2betaUserEvent.
        :rtype: GoogleCloudRetailV2betaUserInfo
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this GoogleCloudRetailV2betaUserEvent.


        :param user_info: The user_info of this GoogleCloudRetailV2betaUserEvent.
        :type user_info: GoogleCloudRetailV2betaUserInfo
        """

        self._user_info = user_info

    @property
    def visitor_id(self):
        """Gets the visitor_id of this GoogleCloudRetailV2betaUserEvent.

        Required. A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor log in/out of the website. Don't set the field to the same fixed ID for different users. This mixes the event history of those users together, which results in degraded model quality. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. The field should not contain PII or user-data. We recommend to use Google Analytics [Client ID](https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#clientId) for this field.

        :return: The visitor_id of this GoogleCloudRetailV2betaUserEvent.
        :rtype: str
        """
        return self._visitor_id

    @visitor_id.setter
    def visitor_id(self, visitor_id):
        """Sets the visitor_id of this GoogleCloudRetailV2betaUserEvent.

        Required. A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor log in/out of the website. Don't set the field to the same fixed ID for different users. This mixes the event history of those users together, which results in degraded model quality. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. The field should not contain PII or user-data. We recommend to use Google Analytics [Client ID](https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#clientId) for this field.

        :param visitor_id: The visitor_id of this GoogleCloudRetailV2betaUserEvent.
        :type visitor_id: str
        """

        self._visitor_id = visitor_id
