# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_retail_v2beta_catalog_attribute import GoogleCloudRetailV2betaCatalogAttribute
from openapi_server import util


class GoogleCloudRetailV2betaAttributesConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_config_level: str=None, catalog_attributes: Dict[str, GoogleCloudRetailV2betaCatalogAttribute]=None, name: str=None):
        """GoogleCloudRetailV2betaAttributesConfig - a model defined in OpenAPI

        :param attribute_config_level: The attribute_config_level of this GoogleCloudRetailV2betaAttributesConfig.
        :param catalog_attributes: The catalog_attributes of this GoogleCloudRetailV2betaAttributesConfig.
        :param name: The name of this GoogleCloudRetailV2betaAttributesConfig.
        """
        self.openapi_types = {
            'attribute_config_level': str,
            'catalog_attributes': Dict[str, GoogleCloudRetailV2betaCatalogAttribute],
            'name': str
        }

        self.attribute_map = {
            'attribute_config_level': 'attributeConfigLevel',
            'catalog_attributes': 'catalogAttributes',
            'name': 'name'
        }

        self._attribute_config_level = attribute_config_level
        self._catalog_attributes = catalog_attributes
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRetailV2betaAttributesConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRetailV2betaAttributesConfig of this GoogleCloudRetailV2betaAttributesConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_config_level(self):
        """Gets the attribute_config_level of this GoogleCloudRetailV2betaAttributesConfig.

        Output only. The AttributeConfigLevel used for this catalog.

        :return: The attribute_config_level of this GoogleCloudRetailV2betaAttributesConfig.
        :rtype: str
        """
        return self._attribute_config_level

    @attribute_config_level.setter
    def attribute_config_level(self, attribute_config_level):
        """Sets the attribute_config_level of this GoogleCloudRetailV2betaAttributesConfig.

        Output only. The AttributeConfigLevel used for this catalog.

        :param attribute_config_level: The attribute_config_level of this GoogleCloudRetailV2betaAttributesConfig.
        :type attribute_config_level: str
        """
        allowed_values = ["ATTRIBUTE_CONFIG_LEVEL_UNSPECIFIED", "PRODUCT_LEVEL_ATTRIBUTE_CONFIG", "CATALOG_LEVEL_ATTRIBUTE_CONFIG"]  # noqa: E501
        if attribute_config_level not in allowed_values:
            raise ValueError(
                "Invalid value for `attribute_config_level` ({0}), must be one of {1}"
                .format(attribute_config_level, allowed_values)
            )

        self._attribute_config_level = attribute_config_level

    @property
    def catalog_attributes(self):
        """Gets the catalog_attributes of this GoogleCloudRetailV2betaAttributesConfig.

        Enable attribute(s) config at catalog level. For example, indexable, dynamic_facetable, or searchable for each attribute. The key is catalog attribute's name. For example: `color`, `brands`, `attributes.custom_attribute`, such as `attributes.xyz`. The maximum number of catalog attributes allowed in a request is 1000.

        :return: The catalog_attributes of this GoogleCloudRetailV2betaAttributesConfig.
        :rtype: Dict[str, GoogleCloudRetailV2betaCatalogAttribute]
        """
        return self._catalog_attributes

    @catalog_attributes.setter
    def catalog_attributes(self, catalog_attributes):
        """Sets the catalog_attributes of this GoogleCloudRetailV2betaAttributesConfig.

        Enable attribute(s) config at catalog level. For example, indexable, dynamic_facetable, or searchable for each attribute. The key is catalog attribute's name. For example: `color`, `brands`, `attributes.custom_attribute`, such as `attributes.xyz`. The maximum number of catalog attributes allowed in a request is 1000.

        :param catalog_attributes: The catalog_attributes of this GoogleCloudRetailV2betaAttributesConfig.
        :type catalog_attributes: Dict[str, GoogleCloudRetailV2betaCatalogAttribute]
        """

        self._catalog_attributes = catalog_attributes

    @property
    def name(self):
        """Gets the name of this GoogleCloudRetailV2betaAttributesConfig.

        Required. Immutable. The fully qualified resource name of the attribute config. Format: `projects/*/locations/*/catalogs/*/attributesConfig`

        :return: The name of this GoogleCloudRetailV2betaAttributesConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudRetailV2betaAttributesConfig.

        Required. Immutable. The fully qualified resource name of the attribute config. Format: `projects/*/locations/*/catalogs/*/attributesConfig`

        :param name: The name of this GoogleCloudRetailV2betaAttributesConfig.
        :type name: str
        """

        self._name = name
