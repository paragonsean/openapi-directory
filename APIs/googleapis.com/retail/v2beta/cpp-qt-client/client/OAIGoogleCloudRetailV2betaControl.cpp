/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaControl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaControl::OAIGoogleCloudRetailV2betaControl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaControl::OAIGoogleCloudRetailV2betaControl() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaControl::~OAIGoogleCloudRetailV2betaControl() {}

void OAIGoogleCloudRetailV2betaControl::initializeModel() {

    m_associated_serving_config_ids_isSet = false;
    m_associated_serving_config_ids_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_facet_spec_isSet = false;
    m_facet_spec_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rule_isSet = false;
    m_rule_isValid = false;

    m_search_solution_use_case_isSet = false;
    m_search_solution_use_case_isValid = false;

    m_solution_types_isSet = false;
    m_solution_types_isValid = false;
}

void OAIGoogleCloudRetailV2betaControl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaControl::fromJsonObject(QJsonObject json) {

    m_associated_serving_config_ids_isValid = ::OpenAPI::fromJsonValue(m_associated_serving_config_ids, json[QString("associatedServingConfigIds")]);
    m_associated_serving_config_ids_isSet = !json[QString("associatedServingConfigIds")].isNull() && m_associated_serving_config_ids_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_facet_spec_isValid = ::OpenAPI::fromJsonValue(m_facet_spec, json[QString("facetSpec")]);
    m_facet_spec_isSet = !json[QString("facetSpec")].isNull() && m_facet_spec_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("rule")]);
    m_rule_isSet = !json[QString("rule")].isNull() && m_rule_isValid;

    m_search_solution_use_case_isValid = ::OpenAPI::fromJsonValue(m_search_solution_use_case, json[QString("searchSolutionUseCase")]);
    m_search_solution_use_case_isSet = !json[QString("searchSolutionUseCase")].isNull() && m_search_solution_use_case_isValid;

    m_solution_types_isValid = ::OpenAPI::fromJsonValue(m_solution_types, json[QString("solutionTypes")]);
    m_solution_types_isSet = !json[QString("solutionTypes")].isNull() && m_solution_types_isValid;
}

QString OAIGoogleCloudRetailV2betaControl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaControl::asJsonObject() const {
    QJsonObject obj;
    if (m_associated_serving_config_ids.size() > 0) {
        obj.insert(QString("associatedServingConfigIds"), ::OpenAPI::toJsonValue(m_associated_serving_config_ids));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_facet_spec.isSet()) {
        obj.insert(QString("facetSpec"), ::OpenAPI::toJsonValue(m_facet_spec));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rule.isSet()) {
        obj.insert(QString("rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    if (m_search_solution_use_case.size() > 0) {
        obj.insert(QString("searchSolutionUseCase"), ::OpenAPI::toJsonValue(m_search_solution_use_case));
    }
    if (m_solution_types.size() > 0) {
        obj.insert(QString("solutionTypes"), ::OpenAPI::toJsonValue(m_solution_types));
    }
    return obj;
}

QList<QString> OAIGoogleCloudRetailV2betaControl::getAssociatedServingConfigIds() const {
    return m_associated_serving_config_ids;
}
void OAIGoogleCloudRetailV2betaControl::setAssociatedServingConfigIds(const QList<QString> &associated_serving_config_ids) {
    m_associated_serving_config_ids = associated_serving_config_ids;
    m_associated_serving_config_ids_isSet = true;
}

bool OAIGoogleCloudRetailV2betaControl::is_associated_serving_config_ids_Set() const{
    return m_associated_serving_config_ids_isSet;
}

bool OAIGoogleCloudRetailV2betaControl::is_associated_serving_config_ids_Valid() const{
    return m_associated_serving_config_ids_isValid;
}

QString OAIGoogleCloudRetailV2betaControl::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudRetailV2betaControl::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudRetailV2betaControl::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudRetailV2betaControl::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGoogleCloudRetailV2betaSearchRequestFacetSpec OAIGoogleCloudRetailV2betaControl::getFacetSpec() const {
    return m_facet_spec;
}
void OAIGoogleCloudRetailV2betaControl::setFacetSpec(const OAIGoogleCloudRetailV2betaSearchRequestFacetSpec &facet_spec) {
    m_facet_spec = facet_spec;
    m_facet_spec_isSet = true;
}

bool OAIGoogleCloudRetailV2betaControl::is_facet_spec_Set() const{
    return m_facet_spec_isSet;
}

bool OAIGoogleCloudRetailV2betaControl::is_facet_spec_Valid() const{
    return m_facet_spec_isValid;
}

QString OAIGoogleCloudRetailV2betaControl::getName() const {
    return m_name;
}
void OAIGoogleCloudRetailV2betaControl::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudRetailV2betaControl::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudRetailV2betaControl::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleCloudRetailV2betaRule OAIGoogleCloudRetailV2betaControl::getRule() const {
    return m_rule;
}
void OAIGoogleCloudRetailV2betaControl::setRule(const OAIGoogleCloudRetailV2betaRule &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAIGoogleCloudRetailV2betaControl::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAIGoogleCloudRetailV2betaControl::is_rule_Valid() const{
    return m_rule_isValid;
}

QList<QString> OAIGoogleCloudRetailV2betaControl::getSearchSolutionUseCase() const {
    return m_search_solution_use_case;
}
void OAIGoogleCloudRetailV2betaControl::setSearchSolutionUseCase(const QList<QString> &search_solution_use_case) {
    m_search_solution_use_case = search_solution_use_case;
    m_search_solution_use_case_isSet = true;
}

bool OAIGoogleCloudRetailV2betaControl::is_search_solution_use_case_Set() const{
    return m_search_solution_use_case_isSet;
}

bool OAIGoogleCloudRetailV2betaControl::is_search_solution_use_case_Valid() const{
    return m_search_solution_use_case_isValid;
}

QList<QString> OAIGoogleCloudRetailV2betaControl::getSolutionTypes() const {
    return m_solution_types;
}
void OAIGoogleCloudRetailV2betaControl::setSolutionTypes(const QList<QString> &solution_types) {
    m_solution_types = solution_types;
    m_solution_types_isSet = true;
}

bool OAIGoogleCloudRetailV2betaControl::is_solution_types_Set() const{
    return m_solution_types_isSet;
}

bool OAIGoogleCloudRetailV2betaControl::is_solution_types_Valid() const{
    return m_solution_types_isValid;
}

bool OAIGoogleCloudRetailV2betaControl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_associated_serving_config_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_solution_use_case.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_solution_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaControl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
