/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaSetInventoryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaSetInventoryRequest::OAIGoogleCloudRetailV2betaSetInventoryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaSetInventoryRequest::OAIGoogleCloudRetailV2betaSetInventoryRequest() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaSetInventoryRequest::~OAIGoogleCloudRetailV2betaSetInventoryRequest() {}

void OAIGoogleCloudRetailV2betaSetInventoryRequest::initializeModel() {

    m_allow_missing_isSet = false;
    m_allow_missing_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_set_mask_isSet = false;
    m_set_mask_isValid = false;

    m_set_time_isSet = false;
    m_set_time_isValid = false;
}

void OAIGoogleCloudRetailV2betaSetInventoryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaSetInventoryRequest::fromJsonObject(QJsonObject json) {

    m_allow_missing_isValid = ::OpenAPI::fromJsonValue(m_allow_missing, json[QString("allowMissing")]);
    m_allow_missing_isSet = !json[QString("allowMissing")].isNull() && m_allow_missing_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_set_mask_isValid = ::OpenAPI::fromJsonValue(m_set_mask, json[QString("setMask")]);
    m_set_mask_isSet = !json[QString("setMask")].isNull() && m_set_mask_isValid;

    m_set_time_isValid = ::OpenAPI::fromJsonValue(m_set_time, json[QString("setTime")]);
    m_set_time_isSet = !json[QString("setTime")].isNull() && m_set_time_isValid;
}

QString OAIGoogleCloudRetailV2betaSetInventoryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaSetInventoryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_missing_isSet) {
        obj.insert(QString("allowMissing"), ::OpenAPI::toJsonValue(m_allow_missing));
    }
    if (m_inventory.isSet()) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_set_mask_isSet) {
        obj.insert(QString("setMask"), ::OpenAPI::toJsonValue(m_set_mask));
    }
    if (m_set_time_isSet) {
        obj.insert(QString("setTime"), ::OpenAPI::toJsonValue(m_set_time));
    }
    return obj;
}

bool OAIGoogleCloudRetailV2betaSetInventoryRequest::isAllowMissing() const {
    return m_allow_missing;
}
void OAIGoogleCloudRetailV2betaSetInventoryRequest::setAllowMissing(const bool &allow_missing) {
    m_allow_missing = allow_missing;
    m_allow_missing_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSetInventoryRequest::is_allow_missing_Set() const{
    return m_allow_missing_isSet;
}

bool OAIGoogleCloudRetailV2betaSetInventoryRequest::is_allow_missing_Valid() const{
    return m_allow_missing_isValid;
}

OAIGoogleCloudRetailV2betaProduct OAIGoogleCloudRetailV2betaSetInventoryRequest::getInventory() const {
    return m_inventory;
}
void OAIGoogleCloudRetailV2betaSetInventoryRequest::setInventory(const OAIGoogleCloudRetailV2betaProduct &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSetInventoryRequest::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAIGoogleCloudRetailV2betaSetInventoryRequest::is_inventory_Valid() const{
    return m_inventory_isValid;
}

QString OAIGoogleCloudRetailV2betaSetInventoryRequest::getSetMask() const {
    return m_set_mask;
}
void OAIGoogleCloudRetailV2betaSetInventoryRequest::setSetMask(const QString &set_mask) {
    m_set_mask = set_mask;
    m_set_mask_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSetInventoryRequest::is_set_mask_Set() const{
    return m_set_mask_isSet;
}

bool OAIGoogleCloudRetailV2betaSetInventoryRequest::is_set_mask_Valid() const{
    return m_set_mask_isValid;
}

QString OAIGoogleCloudRetailV2betaSetInventoryRequest::getSetTime() const {
    return m_set_time;
}
void OAIGoogleCloudRetailV2betaSetInventoryRequest::setSetTime(const QString &set_time) {
    m_set_time = set_time;
    m_set_time_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSetInventoryRequest::is_set_time_Set() const{
    return m_set_time_isSet;
}

bool OAIGoogleCloudRetailV2betaSetInventoryRequest::is_set_time_Valid() const{
    return m_set_time_isValid;
}

bool OAIGoogleCloudRetailV2betaSetInventoryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaSetInventoryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
