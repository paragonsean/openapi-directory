/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2alphaUserEventImportSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2alphaUserEventImportSummary::OAIGoogleCloudRetailV2alphaUserEventImportSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2alphaUserEventImportSummary::OAIGoogleCloudRetailV2alphaUserEventImportSummary() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2alphaUserEventImportSummary::~OAIGoogleCloudRetailV2alphaUserEventImportSummary() {}

void OAIGoogleCloudRetailV2alphaUserEventImportSummary::initializeModel() {

    m_joined_events_count_isSet = false;
    m_joined_events_count_isValid = false;

    m_unjoined_events_count_isSet = false;
    m_unjoined_events_count_isValid = false;
}

void OAIGoogleCloudRetailV2alphaUserEventImportSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2alphaUserEventImportSummary::fromJsonObject(QJsonObject json) {

    m_joined_events_count_isValid = ::OpenAPI::fromJsonValue(m_joined_events_count, json[QString("joinedEventsCount")]);
    m_joined_events_count_isSet = !json[QString("joinedEventsCount")].isNull() && m_joined_events_count_isValid;

    m_unjoined_events_count_isValid = ::OpenAPI::fromJsonValue(m_unjoined_events_count, json[QString("unjoinedEventsCount")]);
    m_unjoined_events_count_isSet = !json[QString("unjoinedEventsCount")].isNull() && m_unjoined_events_count_isValid;
}

QString OAIGoogleCloudRetailV2alphaUserEventImportSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2alphaUserEventImportSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_joined_events_count_isSet) {
        obj.insert(QString("joinedEventsCount"), ::OpenAPI::toJsonValue(m_joined_events_count));
    }
    if (m_unjoined_events_count_isSet) {
        obj.insert(QString("unjoinedEventsCount"), ::OpenAPI::toJsonValue(m_unjoined_events_count));
    }
    return obj;
}

QString OAIGoogleCloudRetailV2alphaUserEventImportSummary::getJoinedEventsCount() const {
    return m_joined_events_count;
}
void OAIGoogleCloudRetailV2alphaUserEventImportSummary::setJoinedEventsCount(const QString &joined_events_count) {
    m_joined_events_count = joined_events_count;
    m_joined_events_count_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEventImportSummary::is_joined_events_count_Set() const{
    return m_joined_events_count_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEventImportSummary::is_joined_events_count_Valid() const{
    return m_joined_events_count_isValid;
}

QString OAIGoogleCloudRetailV2alphaUserEventImportSummary::getUnjoinedEventsCount() const {
    return m_unjoined_events_count;
}
void OAIGoogleCloudRetailV2alphaUserEventImportSummary::setUnjoinedEventsCount(const QString &unjoined_events_count) {
    m_unjoined_events_count = unjoined_events_count;
    m_unjoined_events_count_isSet = true;
}

bool OAIGoogleCloudRetailV2alphaUserEventImportSummary::is_unjoined_events_count_Set() const{
    return m_unjoined_events_count_isSet;
}

bool OAIGoogleCloudRetailV2alphaUserEventImportSummary::is_unjoined_events_count_Valid() const{
    return m_unjoined_events_count_isValid;
}

bool OAIGoogleCloudRetailV2alphaUserEventImportSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_joined_events_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unjoined_events_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2alphaUserEventImportSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
