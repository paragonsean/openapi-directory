/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaCompletionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaCompletionConfig::OAIGoogleCloudRetailV2betaCompletionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaCompletionConfig::OAIGoogleCloudRetailV2betaCompletionConfig() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaCompletionConfig::~OAIGoogleCloudRetailV2betaCompletionConfig() {}

void OAIGoogleCloudRetailV2betaCompletionConfig::initializeModel() {

    m_allowlist_input_config_isSet = false;
    m_allowlist_input_config_isValid = false;

    m_auto_learning_isSet = false;
    m_auto_learning_isValid = false;

    m_denylist_input_config_isSet = false;
    m_denylist_input_config_isValid = false;

    m_last_allowlist_import_operation_isSet = false;
    m_last_allowlist_import_operation_isValid = false;

    m_last_denylist_import_operation_isSet = false;
    m_last_denylist_import_operation_isValid = false;

    m_last_suggestions_import_operation_isSet = false;
    m_last_suggestions_import_operation_isValid = false;

    m_matching_order_isSet = false;
    m_matching_order_isValid = false;

    m_max_suggestions_isSet = false;
    m_max_suggestions_isValid = false;

    m_min_prefix_length_isSet = false;
    m_min_prefix_length_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_suggestions_input_config_isSet = false;
    m_suggestions_input_config_isValid = false;
}

void OAIGoogleCloudRetailV2betaCompletionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaCompletionConfig::fromJsonObject(QJsonObject json) {

    m_allowlist_input_config_isValid = ::OpenAPI::fromJsonValue(m_allowlist_input_config, json[QString("allowlistInputConfig")]);
    m_allowlist_input_config_isSet = !json[QString("allowlistInputConfig")].isNull() && m_allowlist_input_config_isValid;

    m_auto_learning_isValid = ::OpenAPI::fromJsonValue(m_auto_learning, json[QString("autoLearning")]);
    m_auto_learning_isSet = !json[QString("autoLearning")].isNull() && m_auto_learning_isValid;

    m_denylist_input_config_isValid = ::OpenAPI::fromJsonValue(m_denylist_input_config, json[QString("denylistInputConfig")]);
    m_denylist_input_config_isSet = !json[QString("denylistInputConfig")].isNull() && m_denylist_input_config_isValid;

    m_last_allowlist_import_operation_isValid = ::OpenAPI::fromJsonValue(m_last_allowlist_import_operation, json[QString("lastAllowlistImportOperation")]);
    m_last_allowlist_import_operation_isSet = !json[QString("lastAllowlistImportOperation")].isNull() && m_last_allowlist_import_operation_isValid;

    m_last_denylist_import_operation_isValid = ::OpenAPI::fromJsonValue(m_last_denylist_import_operation, json[QString("lastDenylistImportOperation")]);
    m_last_denylist_import_operation_isSet = !json[QString("lastDenylistImportOperation")].isNull() && m_last_denylist_import_operation_isValid;

    m_last_suggestions_import_operation_isValid = ::OpenAPI::fromJsonValue(m_last_suggestions_import_operation, json[QString("lastSuggestionsImportOperation")]);
    m_last_suggestions_import_operation_isSet = !json[QString("lastSuggestionsImportOperation")].isNull() && m_last_suggestions_import_operation_isValid;

    m_matching_order_isValid = ::OpenAPI::fromJsonValue(m_matching_order, json[QString("matchingOrder")]);
    m_matching_order_isSet = !json[QString("matchingOrder")].isNull() && m_matching_order_isValid;

    m_max_suggestions_isValid = ::OpenAPI::fromJsonValue(m_max_suggestions, json[QString("maxSuggestions")]);
    m_max_suggestions_isSet = !json[QString("maxSuggestions")].isNull() && m_max_suggestions_isValid;

    m_min_prefix_length_isValid = ::OpenAPI::fromJsonValue(m_min_prefix_length, json[QString("minPrefixLength")]);
    m_min_prefix_length_isSet = !json[QString("minPrefixLength")].isNull() && m_min_prefix_length_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_suggestions_input_config_isValid = ::OpenAPI::fromJsonValue(m_suggestions_input_config, json[QString("suggestionsInputConfig")]);
    m_suggestions_input_config_isSet = !json[QString("suggestionsInputConfig")].isNull() && m_suggestions_input_config_isValid;
}

QString OAIGoogleCloudRetailV2betaCompletionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaCompletionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_allowlist_input_config.isSet()) {
        obj.insert(QString("allowlistInputConfig"), ::OpenAPI::toJsonValue(m_allowlist_input_config));
    }
    if (m_auto_learning_isSet) {
        obj.insert(QString("autoLearning"), ::OpenAPI::toJsonValue(m_auto_learning));
    }
    if (m_denylist_input_config.isSet()) {
        obj.insert(QString("denylistInputConfig"), ::OpenAPI::toJsonValue(m_denylist_input_config));
    }
    if (m_last_allowlist_import_operation_isSet) {
        obj.insert(QString("lastAllowlistImportOperation"), ::OpenAPI::toJsonValue(m_last_allowlist_import_operation));
    }
    if (m_last_denylist_import_operation_isSet) {
        obj.insert(QString("lastDenylistImportOperation"), ::OpenAPI::toJsonValue(m_last_denylist_import_operation));
    }
    if (m_last_suggestions_import_operation_isSet) {
        obj.insert(QString("lastSuggestionsImportOperation"), ::OpenAPI::toJsonValue(m_last_suggestions_import_operation));
    }
    if (m_matching_order_isSet) {
        obj.insert(QString("matchingOrder"), ::OpenAPI::toJsonValue(m_matching_order));
    }
    if (m_max_suggestions_isSet) {
        obj.insert(QString("maxSuggestions"), ::OpenAPI::toJsonValue(m_max_suggestions));
    }
    if (m_min_prefix_length_isSet) {
        obj.insert(QString("minPrefixLength"), ::OpenAPI::toJsonValue(m_min_prefix_length));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_suggestions_input_config.isSet()) {
        obj.insert(QString("suggestionsInputConfig"), ::OpenAPI::toJsonValue(m_suggestions_input_config));
    }
    return obj;
}

OAIGoogleCloudRetailV2betaCompletionDataInputConfig OAIGoogleCloudRetailV2betaCompletionConfig::getAllowlistInputConfig() const {
    return m_allowlist_input_config;
}
void OAIGoogleCloudRetailV2betaCompletionConfig::setAllowlistInputConfig(const OAIGoogleCloudRetailV2betaCompletionDataInputConfig &allowlist_input_config) {
    m_allowlist_input_config = allowlist_input_config;
    m_allowlist_input_config_isSet = true;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_allowlist_input_config_Set() const{
    return m_allowlist_input_config_isSet;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_allowlist_input_config_Valid() const{
    return m_allowlist_input_config_isValid;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::isAutoLearning() const {
    return m_auto_learning;
}
void OAIGoogleCloudRetailV2betaCompletionConfig::setAutoLearning(const bool &auto_learning) {
    m_auto_learning = auto_learning;
    m_auto_learning_isSet = true;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_auto_learning_Set() const{
    return m_auto_learning_isSet;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_auto_learning_Valid() const{
    return m_auto_learning_isValid;
}

OAIGoogleCloudRetailV2betaCompletionDataInputConfig OAIGoogleCloudRetailV2betaCompletionConfig::getDenylistInputConfig() const {
    return m_denylist_input_config;
}
void OAIGoogleCloudRetailV2betaCompletionConfig::setDenylistInputConfig(const OAIGoogleCloudRetailV2betaCompletionDataInputConfig &denylist_input_config) {
    m_denylist_input_config = denylist_input_config;
    m_denylist_input_config_isSet = true;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_denylist_input_config_Set() const{
    return m_denylist_input_config_isSet;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_denylist_input_config_Valid() const{
    return m_denylist_input_config_isValid;
}

QString OAIGoogleCloudRetailV2betaCompletionConfig::getLastAllowlistImportOperation() const {
    return m_last_allowlist_import_operation;
}
void OAIGoogleCloudRetailV2betaCompletionConfig::setLastAllowlistImportOperation(const QString &last_allowlist_import_operation) {
    m_last_allowlist_import_operation = last_allowlist_import_operation;
    m_last_allowlist_import_operation_isSet = true;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_last_allowlist_import_operation_Set() const{
    return m_last_allowlist_import_operation_isSet;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_last_allowlist_import_operation_Valid() const{
    return m_last_allowlist_import_operation_isValid;
}

QString OAIGoogleCloudRetailV2betaCompletionConfig::getLastDenylistImportOperation() const {
    return m_last_denylist_import_operation;
}
void OAIGoogleCloudRetailV2betaCompletionConfig::setLastDenylistImportOperation(const QString &last_denylist_import_operation) {
    m_last_denylist_import_operation = last_denylist_import_operation;
    m_last_denylist_import_operation_isSet = true;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_last_denylist_import_operation_Set() const{
    return m_last_denylist_import_operation_isSet;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_last_denylist_import_operation_Valid() const{
    return m_last_denylist_import_operation_isValid;
}

QString OAIGoogleCloudRetailV2betaCompletionConfig::getLastSuggestionsImportOperation() const {
    return m_last_suggestions_import_operation;
}
void OAIGoogleCloudRetailV2betaCompletionConfig::setLastSuggestionsImportOperation(const QString &last_suggestions_import_operation) {
    m_last_suggestions_import_operation = last_suggestions_import_operation;
    m_last_suggestions_import_operation_isSet = true;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_last_suggestions_import_operation_Set() const{
    return m_last_suggestions_import_operation_isSet;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_last_suggestions_import_operation_Valid() const{
    return m_last_suggestions_import_operation_isValid;
}

QString OAIGoogleCloudRetailV2betaCompletionConfig::getMatchingOrder() const {
    return m_matching_order;
}
void OAIGoogleCloudRetailV2betaCompletionConfig::setMatchingOrder(const QString &matching_order) {
    m_matching_order = matching_order;
    m_matching_order_isSet = true;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_matching_order_Set() const{
    return m_matching_order_isSet;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_matching_order_Valid() const{
    return m_matching_order_isValid;
}

qint32 OAIGoogleCloudRetailV2betaCompletionConfig::getMaxSuggestions() const {
    return m_max_suggestions;
}
void OAIGoogleCloudRetailV2betaCompletionConfig::setMaxSuggestions(const qint32 &max_suggestions) {
    m_max_suggestions = max_suggestions;
    m_max_suggestions_isSet = true;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_max_suggestions_Set() const{
    return m_max_suggestions_isSet;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_max_suggestions_Valid() const{
    return m_max_suggestions_isValid;
}

qint32 OAIGoogleCloudRetailV2betaCompletionConfig::getMinPrefixLength() const {
    return m_min_prefix_length;
}
void OAIGoogleCloudRetailV2betaCompletionConfig::setMinPrefixLength(const qint32 &min_prefix_length) {
    m_min_prefix_length = min_prefix_length;
    m_min_prefix_length_isSet = true;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_min_prefix_length_Set() const{
    return m_min_prefix_length_isSet;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_min_prefix_length_Valid() const{
    return m_min_prefix_length_isValid;
}

QString OAIGoogleCloudRetailV2betaCompletionConfig::getName() const {
    return m_name;
}
void OAIGoogleCloudRetailV2betaCompletionConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleCloudRetailV2betaCompletionDataInputConfig OAIGoogleCloudRetailV2betaCompletionConfig::getSuggestionsInputConfig() const {
    return m_suggestions_input_config;
}
void OAIGoogleCloudRetailV2betaCompletionConfig::setSuggestionsInputConfig(const OAIGoogleCloudRetailV2betaCompletionDataInputConfig &suggestions_input_config) {
    m_suggestions_input_config = suggestions_input_config;
    m_suggestions_input_config_isSet = true;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_suggestions_input_config_Set() const{
    return m_suggestions_input_config_isSet;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::is_suggestions_input_config_Valid() const{
    return m_suggestions_input_config_isValid;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowlist_input_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_learning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_denylist_input_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_allowlist_import_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_denylist_import_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_suggestions_import_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matching_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_suggestions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_prefix_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestions_input_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaCompletionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
