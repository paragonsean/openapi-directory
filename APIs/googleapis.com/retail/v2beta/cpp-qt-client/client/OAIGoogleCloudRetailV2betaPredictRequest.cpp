/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaPredictRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaPredictRequest::OAIGoogleCloudRetailV2betaPredictRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaPredictRequest::OAIGoogleCloudRetailV2betaPredictRequest() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaPredictRequest::~OAIGoogleCloudRetailV2betaPredictRequest() {}

void OAIGoogleCloudRetailV2betaPredictRequest::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_user_event_isSet = false;
    m_user_event_isValid = false;

    m_validate_only_isSet = false;
    m_validate_only_isValid = false;
}

void OAIGoogleCloudRetailV2betaPredictRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaPredictRequest::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_user_event_isValid = ::OpenAPI::fromJsonValue(m_user_event, json[QString("userEvent")]);
    m_user_event_isSet = !json[QString("userEvent")].isNull() && m_user_event_isValid;

    m_validate_only_isValid = ::OpenAPI::fromJsonValue(m_validate_only, json[QString("validateOnly")]);
    m_validate_only_isSet = !json[QString("validateOnly")].isNull() && m_validate_only_isValid;
}

QString OAIGoogleCloudRetailV2betaPredictRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaPredictRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_user_event.isSet()) {
        obj.insert(QString("userEvent"), ::OpenAPI::toJsonValue(m_user_event));
    }
    if (m_validate_only_isSet) {
        obj.insert(QString("validateOnly"), ::OpenAPI::toJsonValue(m_validate_only));
    }
    return obj;
}

QString OAIGoogleCloudRetailV2betaPredictRequest::getFilter() const {
    return m_filter;
}
void OAIGoogleCloudRetailV2betaPredictRequest::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGoogleCloudRetailV2betaPredictRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGoogleCloudRetailV2betaPredictRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

QMap<QString, QString> OAIGoogleCloudRetailV2betaPredictRequest::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudRetailV2betaPredictRequest::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudRetailV2betaPredictRequest::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudRetailV2betaPredictRequest::is_labels_Valid() const{
    return m_labels_isValid;
}

qint32 OAIGoogleCloudRetailV2betaPredictRequest::getPageSize() const {
    return m_page_size;
}
void OAIGoogleCloudRetailV2betaPredictRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGoogleCloudRetailV2betaPredictRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGoogleCloudRetailV2betaPredictRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIGoogleCloudRetailV2betaPredictRequest::getPageToken() const {
    return m_page_token;
}
void OAIGoogleCloudRetailV2betaPredictRequest::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIGoogleCloudRetailV2betaPredictRequest::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIGoogleCloudRetailV2betaPredictRequest::is_page_token_Valid() const{
    return m_page_token_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudRetailV2betaPredictRequest::getParams() const {
    return m_params;
}
void OAIGoogleCloudRetailV2betaPredictRequest::setParams(const QMap<QString, QJsonValue> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIGoogleCloudRetailV2betaPredictRequest::is_params_Set() const{
    return m_params_isSet;
}

bool OAIGoogleCloudRetailV2betaPredictRequest::is_params_Valid() const{
    return m_params_isValid;
}

OAIGoogleCloudRetailV2betaUserEvent OAIGoogleCloudRetailV2betaPredictRequest::getUserEvent() const {
    return m_user_event;
}
void OAIGoogleCloudRetailV2betaPredictRequest::setUserEvent(const OAIGoogleCloudRetailV2betaUserEvent &user_event) {
    m_user_event = user_event;
    m_user_event_isSet = true;
}

bool OAIGoogleCloudRetailV2betaPredictRequest::is_user_event_Set() const{
    return m_user_event_isSet;
}

bool OAIGoogleCloudRetailV2betaPredictRequest::is_user_event_Valid() const{
    return m_user_event_isValid;
}

bool OAIGoogleCloudRetailV2betaPredictRequest::isValidateOnly() const {
    return m_validate_only;
}
void OAIGoogleCloudRetailV2betaPredictRequest::setValidateOnly(const bool &validate_only) {
    m_validate_only = validate_only;
    m_validate_only_isSet = true;
}

bool OAIGoogleCloudRetailV2betaPredictRequest::is_validate_only_Set() const{
    return m_validate_only_isSet;
}

bool OAIGoogleCloudRetailV2betaPredictRequest::is_validate_only_Valid() const{
    return m_validate_only_isValid;
}

bool OAIGoogleCloudRetailV2betaPredictRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaPredictRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
