/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaUserEventImportSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaUserEventImportSummary::OAIGoogleCloudRetailV2betaUserEventImportSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaUserEventImportSummary::OAIGoogleCloudRetailV2betaUserEventImportSummary() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaUserEventImportSummary::~OAIGoogleCloudRetailV2betaUserEventImportSummary() {}

void OAIGoogleCloudRetailV2betaUserEventImportSummary::initializeModel() {

    m_joined_events_count_isSet = false;
    m_joined_events_count_isValid = false;

    m_unjoined_events_count_isSet = false;
    m_unjoined_events_count_isValid = false;
}

void OAIGoogleCloudRetailV2betaUserEventImportSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaUserEventImportSummary::fromJsonObject(QJsonObject json) {

    m_joined_events_count_isValid = ::OpenAPI::fromJsonValue(m_joined_events_count, json[QString("joinedEventsCount")]);
    m_joined_events_count_isSet = !json[QString("joinedEventsCount")].isNull() && m_joined_events_count_isValid;

    m_unjoined_events_count_isValid = ::OpenAPI::fromJsonValue(m_unjoined_events_count, json[QString("unjoinedEventsCount")]);
    m_unjoined_events_count_isSet = !json[QString("unjoinedEventsCount")].isNull() && m_unjoined_events_count_isValid;
}

QString OAIGoogleCloudRetailV2betaUserEventImportSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaUserEventImportSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_joined_events_count_isSet) {
        obj.insert(QString("joinedEventsCount"), ::OpenAPI::toJsonValue(m_joined_events_count));
    }
    if (m_unjoined_events_count_isSet) {
        obj.insert(QString("unjoinedEventsCount"), ::OpenAPI::toJsonValue(m_unjoined_events_count));
    }
    return obj;
}

QString OAIGoogleCloudRetailV2betaUserEventImportSummary::getJoinedEventsCount() const {
    return m_joined_events_count;
}
void OAIGoogleCloudRetailV2betaUserEventImportSummary::setJoinedEventsCount(const QString &joined_events_count) {
    m_joined_events_count = joined_events_count;
    m_joined_events_count_isSet = true;
}

bool OAIGoogleCloudRetailV2betaUserEventImportSummary::is_joined_events_count_Set() const{
    return m_joined_events_count_isSet;
}

bool OAIGoogleCloudRetailV2betaUserEventImportSummary::is_joined_events_count_Valid() const{
    return m_joined_events_count_isValid;
}

QString OAIGoogleCloudRetailV2betaUserEventImportSummary::getUnjoinedEventsCount() const {
    return m_unjoined_events_count;
}
void OAIGoogleCloudRetailV2betaUserEventImportSummary::setUnjoinedEventsCount(const QString &unjoined_events_count) {
    m_unjoined_events_count = unjoined_events_count;
    m_unjoined_events_count_isSet = true;
}

bool OAIGoogleCloudRetailV2betaUserEventImportSummary::is_unjoined_events_count_Set() const{
    return m_unjoined_events_count_isSet;
}

bool OAIGoogleCloudRetailV2betaUserEventImportSummary::is_unjoined_events_count_Valid() const{
    return m_unjoined_events_count_isValid;
}

bool OAIGoogleCloudRetailV2betaUserEventImportSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_joined_events_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unjoined_events_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaUserEventImportSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
