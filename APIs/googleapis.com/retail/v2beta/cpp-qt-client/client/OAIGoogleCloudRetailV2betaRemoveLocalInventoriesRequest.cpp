/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::~OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest() {}

void OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::initializeModel() {

    m_allow_missing_isSet = false;
    m_allow_missing_isValid = false;

    m_place_ids_isSet = false;
    m_place_ids_isValid = false;

    m_remove_time_isSet = false;
    m_remove_time_isValid = false;
}

void OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::fromJsonObject(QJsonObject json) {

    m_allow_missing_isValid = ::OpenAPI::fromJsonValue(m_allow_missing, json[QString("allowMissing")]);
    m_allow_missing_isSet = !json[QString("allowMissing")].isNull() && m_allow_missing_isValid;

    m_place_ids_isValid = ::OpenAPI::fromJsonValue(m_place_ids, json[QString("placeIds")]);
    m_place_ids_isSet = !json[QString("placeIds")].isNull() && m_place_ids_isValid;

    m_remove_time_isValid = ::OpenAPI::fromJsonValue(m_remove_time, json[QString("removeTime")]);
    m_remove_time_isSet = !json[QString("removeTime")].isNull() && m_remove_time_isValid;
}

QString OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_missing_isSet) {
        obj.insert(QString("allowMissing"), ::OpenAPI::toJsonValue(m_allow_missing));
    }
    if (m_place_ids.size() > 0) {
        obj.insert(QString("placeIds"), ::OpenAPI::toJsonValue(m_place_ids));
    }
    if (m_remove_time_isSet) {
        obj.insert(QString("removeTime"), ::OpenAPI::toJsonValue(m_remove_time));
    }
    return obj;
}

bool OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::isAllowMissing() const {
    return m_allow_missing;
}
void OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::setAllowMissing(const bool &allow_missing) {
    m_allow_missing = allow_missing;
    m_allow_missing_isSet = true;
}

bool OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::is_allow_missing_Set() const{
    return m_allow_missing_isSet;
}

bool OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::is_allow_missing_Valid() const{
    return m_allow_missing_isValid;
}

QList<QString> OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::getPlaceIds() const {
    return m_place_ids;
}
void OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::setPlaceIds(const QList<QString> &place_ids) {
    m_place_ids = place_ids;
    m_place_ids_isSet = true;
}

bool OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::is_place_ids_Set() const{
    return m_place_ids_isSet;
}

bool OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::is_place_ids_Valid() const{
    return m_place_ids_isValid;
}

QString OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::getRemoveTime() const {
    return m_remove_time;
}
void OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::setRemoveTime(const QString &remove_time) {
    m_remove_time = remove_time;
    m_remove_time_isSet = true;
}

bool OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::is_remove_time_Set() const{
    return m_remove_time_isSet;
}

bool OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::is_remove_time_Valid() const{
    return m_remove_time_isValid;
}

bool OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaRemoveLocalInventoriesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
