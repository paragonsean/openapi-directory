/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaSearchResponseSearchResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaSearchResponseSearchResult::OAIGoogleCloudRetailV2betaSearchResponseSearchResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaSearchResponseSearchResult::OAIGoogleCloudRetailV2betaSearchResponseSearchResult() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaSearchResponseSearchResult::~OAIGoogleCloudRetailV2betaSearchResponseSearchResult() {}

void OAIGoogleCloudRetailV2betaSearchResponseSearchResult::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_matching_variant_count_isSet = false;
    m_matching_variant_count_isValid = false;

    m_matching_variant_fields_isSet = false;
    m_matching_variant_fields_isValid = false;

    m_personal_labels_isSet = false;
    m_personal_labels_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_variant_rollup_values_isSet = false;
    m_variant_rollup_values_isValid = false;
}

void OAIGoogleCloudRetailV2betaSearchResponseSearchResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaSearchResponseSearchResult::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_matching_variant_count_isValid = ::OpenAPI::fromJsonValue(m_matching_variant_count, json[QString("matchingVariantCount")]);
    m_matching_variant_count_isSet = !json[QString("matchingVariantCount")].isNull() && m_matching_variant_count_isValid;

    m_matching_variant_fields_isValid = ::OpenAPI::fromJsonValue(m_matching_variant_fields, json[QString("matchingVariantFields")]);
    m_matching_variant_fields_isSet = !json[QString("matchingVariantFields")].isNull() && m_matching_variant_fields_isValid;

    m_personal_labels_isValid = ::OpenAPI::fromJsonValue(m_personal_labels, json[QString("personalLabels")]);
    m_personal_labels_isSet = !json[QString("personalLabels")].isNull() && m_personal_labels_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_variant_rollup_values_isValid = ::OpenAPI::fromJsonValue(m_variant_rollup_values, json[QString("variantRollupValues")]);
    m_variant_rollup_values_isSet = !json[QString("variantRollupValues")].isNull() && m_variant_rollup_values_isValid;
}

QString OAIGoogleCloudRetailV2betaSearchResponseSearchResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaSearchResponseSearchResult::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_matching_variant_count_isSet) {
        obj.insert(QString("matchingVariantCount"), ::OpenAPI::toJsonValue(m_matching_variant_count));
    }
    if (m_matching_variant_fields.size() > 0) {
        obj.insert(QString("matchingVariantFields"), ::OpenAPI::toJsonValue(m_matching_variant_fields));
    }
    if (m_personal_labels.size() > 0) {
        obj.insert(QString("personalLabels"), ::OpenAPI::toJsonValue(m_personal_labels));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_variant_rollup_values.size() > 0) {
        obj.insert(QString("variantRollupValues"), ::OpenAPI::toJsonValue(m_variant_rollup_values));
    }
    return obj;
}

QString OAIGoogleCloudRetailV2betaSearchResponseSearchResult::getId() const {
    return m_id;
}
void OAIGoogleCloudRetailV2betaSearchResponseSearchResult::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchResponseSearchResult::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchResponseSearchResult::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIGoogleCloudRetailV2betaSearchResponseSearchResult::getMatchingVariantCount() const {
    return m_matching_variant_count;
}
void OAIGoogleCloudRetailV2betaSearchResponseSearchResult::setMatchingVariantCount(const qint32 &matching_variant_count) {
    m_matching_variant_count = matching_variant_count;
    m_matching_variant_count_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchResponseSearchResult::is_matching_variant_count_Set() const{
    return m_matching_variant_count_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchResponseSearchResult::is_matching_variant_count_Valid() const{
    return m_matching_variant_count_isValid;
}

QMap<QString, QString> OAIGoogleCloudRetailV2betaSearchResponseSearchResult::getMatchingVariantFields() const {
    return m_matching_variant_fields;
}
void OAIGoogleCloudRetailV2betaSearchResponseSearchResult::setMatchingVariantFields(const QMap<QString, QString> &matching_variant_fields) {
    m_matching_variant_fields = matching_variant_fields;
    m_matching_variant_fields_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchResponseSearchResult::is_matching_variant_fields_Set() const{
    return m_matching_variant_fields_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchResponseSearchResult::is_matching_variant_fields_Valid() const{
    return m_matching_variant_fields_isValid;
}

QList<QString> OAIGoogleCloudRetailV2betaSearchResponseSearchResult::getPersonalLabels() const {
    return m_personal_labels;
}
void OAIGoogleCloudRetailV2betaSearchResponseSearchResult::setPersonalLabels(const QList<QString> &personal_labels) {
    m_personal_labels = personal_labels;
    m_personal_labels_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchResponseSearchResult::is_personal_labels_Set() const{
    return m_personal_labels_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchResponseSearchResult::is_personal_labels_Valid() const{
    return m_personal_labels_isValid;
}

OAIGoogleCloudRetailV2betaProduct OAIGoogleCloudRetailV2betaSearchResponseSearchResult::getProduct() const {
    return m_product;
}
void OAIGoogleCloudRetailV2betaSearchResponseSearchResult::setProduct(const OAIGoogleCloudRetailV2betaProduct &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchResponseSearchResult::is_product_Set() const{
    return m_product_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchResponseSearchResult::is_product_Valid() const{
    return m_product_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudRetailV2betaSearchResponseSearchResult::getVariantRollupValues() const {
    return m_variant_rollup_values;
}
void OAIGoogleCloudRetailV2betaSearchResponseSearchResult::setVariantRollupValues(const QMap<QString, QJsonValue> &variant_rollup_values) {
    m_variant_rollup_values = variant_rollup_values;
    m_variant_rollup_values_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchResponseSearchResult::is_variant_rollup_values_Set() const{
    return m_variant_rollup_values_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchResponseSearchResult::is_variant_rollup_values_Valid() const{
    return m_variant_rollup_values_isValid;
}

bool OAIGoogleCloudRetailV2betaSearchResponseSearchResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matching_variant_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matching_variant_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_personal_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_rollup_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaSearchResponseSearchResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
