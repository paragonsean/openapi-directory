/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::~OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue() {}

void OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_min_value_isSet = false;
    m_min_value_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("maxValue")]);
    m_max_value_isSet = !json[QString("maxValue")].isNull() && m_max_value_isValid;

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("minValue")]);
    m_min_value_isSet = !json[QString("minValue")].isNull() && m_min_value_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_interval.isSet()) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("maxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_min_value_isSet) {
        obj.insert(QString("minValue"), ::OpenAPI::toJsonValue(m_min_value));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::getCount() const {
    return m_count;
}
void OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::setCount(const QString &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::is_count_Set() const{
    return m_count_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::is_count_Valid() const{
    return m_count_isValid;
}

OAIGoogleCloudRetailV2betaInterval OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::getInterval() const {
    return m_interval;
}
void OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::setInterval(const OAIGoogleCloudRetailV2betaInterval &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::is_interval_Valid() const{
    return m_interval_isValid;
}

double OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::getMaxValue() const {
    return m_max_value;
}
void OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::setMaxValue(const double &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::is_max_value_Valid() const{
    return m_max_value_isValid;
}

double OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::getMinValue() const {
    return m_min_value;
}
void OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::setMinValue(const double &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::is_min_value_Valid() const{
    return m_min_value_isValid;
}

QString OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::getValue() const {
    return m_value;
}
void OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaSearchResponseFacetFacetValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
