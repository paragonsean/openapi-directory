/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaRuleReplacementAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaRuleReplacementAction::OAIGoogleCloudRetailV2betaRuleReplacementAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaRuleReplacementAction::OAIGoogleCloudRetailV2betaRuleReplacementAction() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaRuleReplacementAction::~OAIGoogleCloudRetailV2betaRuleReplacementAction() {}

void OAIGoogleCloudRetailV2betaRuleReplacementAction::initializeModel() {

    m_query_terms_isSet = false;
    m_query_terms_isValid = false;

    m_replacement_term_isSet = false;
    m_replacement_term_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;
}

void OAIGoogleCloudRetailV2betaRuleReplacementAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaRuleReplacementAction::fromJsonObject(QJsonObject json) {

    m_query_terms_isValid = ::OpenAPI::fromJsonValue(m_query_terms, json[QString("queryTerms")]);
    m_query_terms_isSet = !json[QString("queryTerms")].isNull() && m_query_terms_isValid;

    m_replacement_term_isValid = ::OpenAPI::fromJsonValue(m_replacement_term, json[QString("replacementTerm")]);
    m_replacement_term_isSet = !json[QString("replacementTerm")].isNull() && m_replacement_term_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("term")]);
    m_term_isSet = !json[QString("term")].isNull() && m_term_isValid;
}

QString OAIGoogleCloudRetailV2betaRuleReplacementAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaRuleReplacementAction::asJsonObject() const {
    QJsonObject obj;
    if (m_query_terms.size() > 0) {
        obj.insert(QString("queryTerms"), ::OpenAPI::toJsonValue(m_query_terms));
    }
    if (m_replacement_term_isSet) {
        obj.insert(QString("replacementTerm"), ::OpenAPI::toJsonValue(m_replacement_term));
    }
    if (m_term_isSet) {
        obj.insert(QString("term"), ::OpenAPI::toJsonValue(m_term));
    }
    return obj;
}

QList<QString> OAIGoogleCloudRetailV2betaRuleReplacementAction::getQueryTerms() const {
    return m_query_terms;
}
void OAIGoogleCloudRetailV2betaRuleReplacementAction::setQueryTerms(const QList<QString> &query_terms) {
    m_query_terms = query_terms;
    m_query_terms_isSet = true;
}

bool OAIGoogleCloudRetailV2betaRuleReplacementAction::is_query_terms_Set() const{
    return m_query_terms_isSet;
}

bool OAIGoogleCloudRetailV2betaRuleReplacementAction::is_query_terms_Valid() const{
    return m_query_terms_isValid;
}

QString OAIGoogleCloudRetailV2betaRuleReplacementAction::getReplacementTerm() const {
    return m_replacement_term;
}
void OAIGoogleCloudRetailV2betaRuleReplacementAction::setReplacementTerm(const QString &replacement_term) {
    m_replacement_term = replacement_term;
    m_replacement_term_isSet = true;
}

bool OAIGoogleCloudRetailV2betaRuleReplacementAction::is_replacement_term_Set() const{
    return m_replacement_term_isSet;
}

bool OAIGoogleCloudRetailV2betaRuleReplacementAction::is_replacement_term_Valid() const{
    return m_replacement_term_isValid;
}

QString OAIGoogleCloudRetailV2betaRuleReplacementAction::getTerm() const {
    return m_term;
}
void OAIGoogleCloudRetailV2betaRuleReplacementAction::setTerm(const QString &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAIGoogleCloudRetailV2betaRuleReplacementAction::is_term_Set() const{
    return m_term_isSet;
}

bool OAIGoogleCloudRetailV2betaRuleReplacementAction::is_term_Valid() const{
    return m_term_isValid;
}

bool OAIGoogleCloudRetailV2betaRuleReplacementAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_terms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_replacement_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaRuleReplacementAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
