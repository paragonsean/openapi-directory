/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailLoggingErrorLog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailLoggingErrorLog::OAIGoogleCloudRetailLoggingErrorLog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailLoggingErrorLog::OAIGoogleCloudRetailLoggingErrorLog() {
    this->initializeModel();
}

OAIGoogleCloudRetailLoggingErrorLog::~OAIGoogleCloudRetailLoggingErrorLog() {}

void OAIGoogleCloudRetailLoggingErrorLog::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_import_payload_isSet = false;
    m_import_payload_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_request_payload_isSet = false;
    m_request_payload_isValid = false;

    m_response_payload_isSet = false;
    m_response_payload_isValid = false;

    m_service_context_isSet = false;
    m_service_context_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGoogleCloudRetailLoggingErrorLog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailLoggingErrorLog::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_import_payload_isValid = ::OpenAPI::fromJsonValue(m_import_payload, json[QString("importPayload")]);
    m_import_payload_isSet = !json[QString("importPayload")].isNull() && m_import_payload_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_request_payload_isValid = ::OpenAPI::fromJsonValue(m_request_payload, json[QString("requestPayload")]);
    m_request_payload_isSet = !json[QString("requestPayload")].isNull() && m_request_payload_isValid;

    m_response_payload_isValid = ::OpenAPI::fromJsonValue(m_response_payload, json[QString("responsePayload")]);
    m_response_payload_isSet = !json[QString("responsePayload")].isNull() && m_response_payload_isValid;

    m_service_context_isValid = ::OpenAPI::fromJsonValue(m_service_context, json[QString("serviceContext")]);
    m_service_context_isSet = !json[QString("serviceContext")].isNull() && m_service_context_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGoogleCloudRetailLoggingErrorLog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailLoggingErrorLog::asJsonObject() const {
    QJsonObject obj;
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_import_payload.isSet()) {
        obj.insert(QString("importPayload"), ::OpenAPI::toJsonValue(m_import_payload));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_request_payload.size() > 0) {
        obj.insert(QString("requestPayload"), ::OpenAPI::toJsonValue(m_request_payload));
    }
    if (m_response_payload.size() > 0) {
        obj.insert(QString("responsePayload"), ::OpenAPI::toJsonValue(m_response_payload));
    }
    if (m_service_context.isSet()) {
        obj.insert(QString("serviceContext"), ::OpenAPI::toJsonValue(m_service_context));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIGoogleCloudRetailLoggingErrorContext OAIGoogleCloudRetailLoggingErrorLog::getContext() const {
    return m_context;
}
void OAIGoogleCloudRetailLoggingErrorLog::setContext(const OAIGoogleCloudRetailLoggingErrorContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIGoogleCloudRetailLoggingErrorLog::is_context_Set() const{
    return m_context_isSet;
}

bool OAIGoogleCloudRetailLoggingErrorLog::is_context_Valid() const{
    return m_context_isValid;
}

OAIGoogleCloudRetailLoggingImportErrorContext OAIGoogleCloudRetailLoggingErrorLog::getImportPayload() const {
    return m_import_payload;
}
void OAIGoogleCloudRetailLoggingErrorLog::setImportPayload(const OAIGoogleCloudRetailLoggingImportErrorContext &import_payload) {
    m_import_payload = import_payload;
    m_import_payload_isSet = true;
}

bool OAIGoogleCloudRetailLoggingErrorLog::is_import_payload_Set() const{
    return m_import_payload_isSet;
}

bool OAIGoogleCloudRetailLoggingErrorLog::is_import_payload_Valid() const{
    return m_import_payload_isValid;
}

QString OAIGoogleCloudRetailLoggingErrorLog::getMessage() const {
    return m_message;
}
void OAIGoogleCloudRetailLoggingErrorLog::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGoogleCloudRetailLoggingErrorLog::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGoogleCloudRetailLoggingErrorLog::is_message_Valid() const{
    return m_message_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudRetailLoggingErrorLog::getRequestPayload() const {
    return m_request_payload;
}
void OAIGoogleCloudRetailLoggingErrorLog::setRequestPayload(const QMap<QString, QJsonValue> &request_payload) {
    m_request_payload = request_payload;
    m_request_payload_isSet = true;
}

bool OAIGoogleCloudRetailLoggingErrorLog::is_request_payload_Set() const{
    return m_request_payload_isSet;
}

bool OAIGoogleCloudRetailLoggingErrorLog::is_request_payload_Valid() const{
    return m_request_payload_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudRetailLoggingErrorLog::getResponsePayload() const {
    return m_response_payload;
}
void OAIGoogleCloudRetailLoggingErrorLog::setResponsePayload(const QMap<QString, QJsonValue> &response_payload) {
    m_response_payload = response_payload;
    m_response_payload_isSet = true;
}

bool OAIGoogleCloudRetailLoggingErrorLog::is_response_payload_Set() const{
    return m_response_payload_isSet;
}

bool OAIGoogleCloudRetailLoggingErrorLog::is_response_payload_Valid() const{
    return m_response_payload_isValid;
}

OAIGoogleCloudRetailLoggingServiceContext OAIGoogleCloudRetailLoggingErrorLog::getServiceContext() const {
    return m_service_context;
}
void OAIGoogleCloudRetailLoggingErrorLog::setServiceContext(const OAIGoogleCloudRetailLoggingServiceContext &service_context) {
    m_service_context = service_context;
    m_service_context_isSet = true;
}

bool OAIGoogleCloudRetailLoggingErrorLog::is_service_context_Set() const{
    return m_service_context_isSet;
}

bool OAIGoogleCloudRetailLoggingErrorLog::is_service_context_Valid() const{
    return m_service_context_isValid;
}

OAIGoogleRpcStatus OAIGoogleCloudRetailLoggingErrorLog::getStatus() const {
    return m_status;
}
void OAIGoogleCloudRetailLoggingErrorLog::setStatus(const OAIGoogleRpcStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGoogleCloudRetailLoggingErrorLog::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGoogleCloudRetailLoggingErrorLog::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGoogleCloudRetailLoggingErrorLog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_payload.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_payload.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailLoggingErrorLog::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
