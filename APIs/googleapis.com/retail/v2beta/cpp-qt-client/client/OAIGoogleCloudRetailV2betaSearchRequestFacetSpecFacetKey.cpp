/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::~OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey() {}

void OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::initializeModel() {

    m_case_insensitive_isSet = false;
    m_case_insensitive_isValid = false;

    m_contains_isSet = false;
    m_contains_isValid = false;

    m_intervals_isSet = false;
    m_intervals_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_prefixes_isSet = false;
    m_prefixes_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_restricted_values_isSet = false;
    m_restricted_values_isValid = false;

    m_return_min_max_isSet = false;
    m_return_min_max_isValid = false;
}

void OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::fromJsonObject(QJsonObject json) {

    m_case_insensitive_isValid = ::OpenAPI::fromJsonValue(m_case_insensitive, json[QString("caseInsensitive")]);
    m_case_insensitive_isSet = !json[QString("caseInsensitive")].isNull() && m_case_insensitive_isValid;

    m_contains_isValid = ::OpenAPI::fromJsonValue(m_contains, json[QString("contains")]);
    m_contains_isSet = !json[QString("contains")].isNull() && m_contains_isValid;

    m_intervals_isValid = ::OpenAPI::fromJsonValue(m_intervals, json[QString("intervals")]);
    m_intervals_isSet = !json[QString("intervals")].isNull() && m_intervals_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;

    m_prefixes_isValid = ::OpenAPI::fromJsonValue(m_prefixes, json[QString("prefixes")]);
    m_prefixes_isSet = !json[QString("prefixes")].isNull() && m_prefixes_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_restricted_values_isValid = ::OpenAPI::fromJsonValue(m_restricted_values, json[QString("restrictedValues")]);
    m_restricted_values_isSet = !json[QString("restrictedValues")].isNull() && m_restricted_values_isValid;

    m_return_min_max_isValid = ::OpenAPI::fromJsonValue(m_return_min_max, json[QString("returnMinMax")]);
    m_return_min_max_isSet = !json[QString("returnMinMax")].isNull() && m_return_min_max_isValid;
}

QString OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::asJsonObject() const {
    QJsonObject obj;
    if (m_case_insensitive_isSet) {
        obj.insert(QString("caseInsensitive"), ::OpenAPI::toJsonValue(m_case_insensitive));
    }
    if (m_contains.size() > 0) {
        obj.insert(QString("contains"), ::OpenAPI::toJsonValue(m_contains));
    }
    if (m_intervals.size() > 0) {
        obj.insert(QString("intervals"), ::OpenAPI::toJsonValue(m_intervals));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_order_by_isSet) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_prefixes.size() > 0) {
        obj.insert(QString("prefixes"), ::OpenAPI::toJsonValue(m_prefixes));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_restricted_values.size() > 0) {
        obj.insert(QString("restrictedValues"), ::OpenAPI::toJsonValue(m_restricted_values));
    }
    if (m_return_min_max_isSet) {
        obj.insert(QString("returnMinMax"), ::OpenAPI::toJsonValue(m_return_min_max));
    }
    return obj;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::isCaseInsensitive() const {
    return m_case_insensitive;
}
void OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::setCaseInsensitive(const bool &case_insensitive) {
    m_case_insensitive = case_insensitive;
    m_case_insensitive_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::is_case_insensitive_Set() const{
    return m_case_insensitive_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::is_case_insensitive_Valid() const{
    return m_case_insensitive_isValid;
}

QList<QString> OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::getContains() const {
    return m_contains;
}
void OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::setContains(const QList<QString> &contains) {
    m_contains = contains;
    m_contains_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::is_contains_Set() const{
    return m_contains_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::is_contains_Valid() const{
    return m_contains_isValid;
}

QList<OAIGoogleCloudRetailV2betaInterval> OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::getIntervals() const {
    return m_intervals;
}
void OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::setIntervals(const QList<OAIGoogleCloudRetailV2betaInterval> &intervals) {
    m_intervals = intervals;
    m_intervals_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::is_intervals_Set() const{
    return m_intervals_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::is_intervals_Valid() const{
    return m_intervals_isValid;
}

QString OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::getKey() const {
    return m_key;
}
void OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::is_key_Set() const{
    return m_key_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::getOrderBy() const {
    return m_order_by;
}
void OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::setOrderBy(const QString &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::is_order_by_Valid() const{
    return m_order_by_isValid;
}

QList<QString> OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::getPrefixes() const {
    return m_prefixes;
}
void OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::setPrefixes(const QList<QString> &prefixes) {
    m_prefixes = prefixes;
    m_prefixes_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::is_prefixes_Set() const{
    return m_prefixes_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::is_prefixes_Valid() const{
    return m_prefixes_isValid;
}

QString OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::getQuery() const {
    return m_query;
}
void OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::is_query_Set() const{
    return m_query_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::is_query_Valid() const{
    return m_query_isValid;
}

QList<QString> OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::getRestrictedValues() const {
    return m_restricted_values;
}
void OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::setRestrictedValues(const QList<QString> &restricted_values) {
    m_restricted_values = restricted_values;
    m_restricted_values_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::is_restricted_values_Set() const{
    return m_restricted_values_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::is_restricted_values_Valid() const{
    return m_restricted_values_isValid;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::isReturnMinMax() const {
    return m_return_min_max;
}
void OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::setReturnMinMax(const bool &return_min_max) {
    m_return_min_max = return_min_max;
    m_return_min_max_isSet = true;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::is_return_min_max_Set() const{
    return m_return_min_max_isSet;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::is_return_min_max_Valid() const{
    return m_return_min_max_isValid;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_case_insensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_intervals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefixes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_min_max_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaSearchRequestFacetSpecFacetKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
