/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaRuleTwowaySynonymsAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaRuleTwowaySynonymsAction::OAIGoogleCloudRetailV2betaRuleTwowaySynonymsAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaRuleTwowaySynonymsAction::OAIGoogleCloudRetailV2betaRuleTwowaySynonymsAction() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaRuleTwowaySynonymsAction::~OAIGoogleCloudRetailV2betaRuleTwowaySynonymsAction() {}

void OAIGoogleCloudRetailV2betaRuleTwowaySynonymsAction::initializeModel() {

    m_synonyms_isSet = false;
    m_synonyms_isValid = false;
}

void OAIGoogleCloudRetailV2betaRuleTwowaySynonymsAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaRuleTwowaySynonymsAction::fromJsonObject(QJsonObject json) {

    m_synonyms_isValid = ::OpenAPI::fromJsonValue(m_synonyms, json[QString("synonyms")]);
    m_synonyms_isSet = !json[QString("synonyms")].isNull() && m_synonyms_isValid;
}

QString OAIGoogleCloudRetailV2betaRuleTwowaySynonymsAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaRuleTwowaySynonymsAction::asJsonObject() const {
    QJsonObject obj;
    if (m_synonyms.size() > 0) {
        obj.insert(QString("synonyms"), ::OpenAPI::toJsonValue(m_synonyms));
    }
    return obj;
}

QList<QString> OAIGoogleCloudRetailV2betaRuleTwowaySynonymsAction::getSynonyms() const {
    return m_synonyms;
}
void OAIGoogleCloudRetailV2betaRuleTwowaySynonymsAction::setSynonyms(const QList<QString> &synonyms) {
    m_synonyms = synonyms;
    m_synonyms_isSet = true;
}

bool OAIGoogleCloudRetailV2betaRuleTwowaySynonymsAction::is_synonyms_Set() const{
    return m_synonyms_isSet;
}

bool OAIGoogleCloudRetailV2betaRuleTwowaySynonymsAction::is_synonyms_Valid() const{
    return m_synonyms_isValid;
}

bool OAIGoogleCloudRetailV2betaRuleTwowaySynonymsAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_synonyms.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaRuleTwowaySynonymsAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
