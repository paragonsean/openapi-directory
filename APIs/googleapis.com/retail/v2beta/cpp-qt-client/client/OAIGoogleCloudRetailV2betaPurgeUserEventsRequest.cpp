/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaPurgeUserEventsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaPurgeUserEventsRequest::OAIGoogleCloudRetailV2betaPurgeUserEventsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaPurgeUserEventsRequest::OAIGoogleCloudRetailV2betaPurgeUserEventsRequest() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaPurgeUserEventsRequest::~OAIGoogleCloudRetailV2betaPurgeUserEventsRequest() {}

void OAIGoogleCloudRetailV2betaPurgeUserEventsRequest::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_force_isSet = false;
    m_force_isValid = false;
}

void OAIGoogleCloudRetailV2betaPurgeUserEventsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaPurgeUserEventsRequest::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_force_isValid = ::OpenAPI::fromJsonValue(m_force, json[QString("force")]);
    m_force_isSet = !json[QString("force")].isNull() && m_force_isValid;
}

QString OAIGoogleCloudRetailV2betaPurgeUserEventsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaPurgeUserEventsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_force_isSet) {
        obj.insert(QString("force"), ::OpenAPI::toJsonValue(m_force));
    }
    return obj;
}

QString OAIGoogleCloudRetailV2betaPurgeUserEventsRequest::getFilter() const {
    return m_filter;
}
void OAIGoogleCloudRetailV2betaPurgeUserEventsRequest::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGoogleCloudRetailV2betaPurgeUserEventsRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGoogleCloudRetailV2betaPurgeUserEventsRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

bool OAIGoogleCloudRetailV2betaPurgeUserEventsRequest::isForce() const {
    return m_force;
}
void OAIGoogleCloudRetailV2betaPurgeUserEventsRequest::setForce(const bool &force) {
    m_force = force;
    m_force_isSet = true;
}

bool OAIGoogleCloudRetailV2betaPurgeUserEventsRequest::is_force_Set() const{
    return m_force_isSet;
}

bool OAIGoogleCloudRetailV2betaPurgeUserEventsRequest::is_force_Valid() const{
    return m_force_isValid;
}

bool OAIGoogleCloudRetailV2betaPurgeUserEventsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaPurgeUserEventsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
