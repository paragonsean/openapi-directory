/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::~OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest() {}

void OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::initializeModel() {

    m_add_mask_isSet = false;
    m_add_mask_isValid = false;

    m_add_time_isSet = false;
    m_add_time_isValid = false;

    m_allow_missing_isSet = false;
    m_allow_missing_isValid = false;

    m_local_inventories_isSet = false;
    m_local_inventories_isValid = false;
}

void OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::fromJsonObject(QJsonObject json) {

    m_add_mask_isValid = ::OpenAPI::fromJsonValue(m_add_mask, json[QString("addMask")]);
    m_add_mask_isSet = !json[QString("addMask")].isNull() && m_add_mask_isValid;

    m_add_time_isValid = ::OpenAPI::fromJsonValue(m_add_time, json[QString("addTime")]);
    m_add_time_isSet = !json[QString("addTime")].isNull() && m_add_time_isValid;

    m_allow_missing_isValid = ::OpenAPI::fromJsonValue(m_allow_missing, json[QString("allowMissing")]);
    m_allow_missing_isSet = !json[QString("allowMissing")].isNull() && m_allow_missing_isValid;

    m_local_inventories_isValid = ::OpenAPI::fromJsonValue(m_local_inventories, json[QString("localInventories")]);
    m_local_inventories_isSet = !json[QString("localInventories")].isNull() && m_local_inventories_isValid;
}

QString OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_add_mask_isSet) {
        obj.insert(QString("addMask"), ::OpenAPI::toJsonValue(m_add_mask));
    }
    if (m_add_time_isSet) {
        obj.insert(QString("addTime"), ::OpenAPI::toJsonValue(m_add_time));
    }
    if (m_allow_missing_isSet) {
        obj.insert(QString("allowMissing"), ::OpenAPI::toJsonValue(m_allow_missing));
    }
    if (m_local_inventories.size() > 0) {
        obj.insert(QString("localInventories"), ::OpenAPI::toJsonValue(m_local_inventories));
    }
    return obj;
}

QString OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::getAddMask() const {
    return m_add_mask;
}
void OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::setAddMask(const QString &add_mask) {
    m_add_mask = add_mask;
    m_add_mask_isSet = true;
}

bool OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::is_add_mask_Set() const{
    return m_add_mask_isSet;
}

bool OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::is_add_mask_Valid() const{
    return m_add_mask_isValid;
}

QString OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::getAddTime() const {
    return m_add_time;
}
void OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::setAddTime(const QString &add_time) {
    m_add_time = add_time;
    m_add_time_isSet = true;
}

bool OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::is_add_time_Set() const{
    return m_add_time_isSet;
}

bool OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::is_add_time_Valid() const{
    return m_add_time_isValid;
}

bool OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::isAllowMissing() const {
    return m_allow_missing;
}
void OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::setAllowMissing(const bool &allow_missing) {
    m_allow_missing = allow_missing;
    m_allow_missing_isSet = true;
}

bool OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::is_allow_missing_Set() const{
    return m_allow_missing_isSet;
}

bool OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::is_allow_missing_Valid() const{
    return m_allow_missing_isValid;
}

QList<OAIGoogleCloudRetailV2betaLocalInventory> OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::getLocalInventories() const {
    return m_local_inventories;
}
void OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::setLocalInventories(const QList<OAIGoogleCloudRetailV2betaLocalInventory> &local_inventories) {
    m_local_inventories = local_inventories;
    m_local_inventories_isSet = true;
}

bool OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::is_local_inventories_Set() const{
    return m_local_inventories_isSet;
}

bool OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::is_local_inventories_Valid() const{
    return m_local_inventories_isValid;
}

bool OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_inventories.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaAddLocalInventoriesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
