/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaBigQuerySource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaBigQuerySource::OAIGoogleCloudRetailV2betaBigQuerySource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaBigQuerySource::OAIGoogleCloudRetailV2betaBigQuerySource() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaBigQuerySource::~OAIGoogleCloudRetailV2betaBigQuerySource() {}

void OAIGoogleCloudRetailV2betaBigQuerySource::initializeModel() {

    m_data_schema_isSet = false;
    m_data_schema_isValid = false;

    m_dataset_id_isSet = false;
    m_dataset_id_isValid = false;

    m_gcs_staging_dir_isSet = false;
    m_gcs_staging_dir_isValid = false;

    m_partition_date_isSet = false;
    m_partition_date_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_table_id_isSet = false;
    m_table_id_isValid = false;
}

void OAIGoogleCloudRetailV2betaBigQuerySource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaBigQuerySource::fromJsonObject(QJsonObject json) {

    m_data_schema_isValid = ::OpenAPI::fromJsonValue(m_data_schema, json[QString("dataSchema")]);
    m_data_schema_isSet = !json[QString("dataSchema")].isNull() && m_data_schema_isValid;

    m_dataset_id_isValid = ::OpenAPI::fromJsonValue(m_dataset_id, json[QString("datasetId")]);
    m_dataset_id_isSet = !json[QString("datasetId")].isNull() && m_dataset_id_isValid;

    m_gcs_staging_dir_isValid = ::OpenAPI::fromJsonValue(m_gcs_staging_dir, json[QString("gcsStagingDir")]);
    m_gcs_staging_dir_isSet = !json[QString("gcsStagingDir")].isNull() && m_gcs_staging_dir_isValid;

    m_partition_date_isValid = ::OpenAPI::fromJsonValue(m_partition_date, json[QString("partitionDate")]);
    m_partition_date_isSet = !json[QString("partitionDate")].isNull() && m_partition_date_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_table_id_isValid = ::OpenAPI::fromJsonValue(m_table_id, json[QString("tableId")]);
    m_table_id_isSet = !json[QString("tableId")].isNull() && m_table_id_isValid;
}

QString OAIGoogleCloudRetailV2betaBigQuerySource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaBigQuerySource::asJsonObject() const {
    QJsonObject obj;
    if (m_data_schema_isSet) {
        obj.insert(QString("dataSchema"), ::OpenAPI::toJsonValue(m_data_schema));
    }
    if (m_dataset_id_isSet) {
        obj.insert(QString("datasetId"), ::OpenAPI::toJsonValue(m_dataset_id));
    }
    if (m_gcs_staging_dir_isSet) {
        obj.insert(QString("gcsStagingDir"), ::OpenAPI::toJsonValue(m_gcs_staging_dir));
    }
    if (m_partition_date.isSet()) {
        obj.insert(QString("partitionDate"), ::OpenAPI::toJsonValue(m_partition_date));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_table_id_isSet) {
        obj.insert(QString("tableId"), ::OpenAPI::toJsonValue(m_table_id));
    }
    return obj;
}

QString OAIGoogleCloudRetailV2betaBigQuerySource::getDataSchema() const {
    return m_data_schema;
}
void OAIGoogleCloudRetailV2betaBigQuerySource::setDataSchema(const QString &data_schema) {
    m_data_schema = data_schema;
    m_data_schema_isSet = true;
}

bool OAIGoogleCloudRetailV2betaBigQuerySource::is_data_schema_Set() const{
    return m_data_schema_isSet;
}

bool OAIGoogleCloudRetailV2betaBigQuerySource::is_data_schema_Valid() const{
    return m_data_schema_isValid;
}

QString OAIGoogleCloudRetailV2betaBigQuerySource::getDatasetId() const {
    return m_dataset_id;
}
void OAIGoogleCloudRetailV2betaBigQuerySource::setDatasetId(const QString &dataset_id) {
    m_dataset_id = dataset_id;
    m_dataset_id_isSet = true;
}

bool OAIGoogleCloudRetailV2betaBigQuerySource::is_dataset_id_Set() const{
    return m_dataset_id_isSet;
}

bool OAIGoogleCloudRetailV2betaBigQuerySource::is_dataset_id_Valid() const{
    return m_dataset_id_isValid;
}

QString OAIGoogleCloudRetailV2betaBigQuerySource::getGcsStagingDir() const {
    return m_gcs_staging_dir;
}
void OAIGoogleCloudRetailV2betaBigQuerySource::setGcsStagingDir(const QString &gcs_staging_dir) {
    m_gcs_staging_dir = gcs_staging_dir;
    m_gcs_staging_dir_isSet = true;
}

bool OAIGoogleCloudRetailV2betaBigQuerySource::is_gcs_staging_dir_Set() const{
    return m_gcs_staging_dir_isSet;
}

bool OAIGoogleCloudRetailV2betaBigQuerySource::is_gcs_staging_dir_Valid() const{
    return m_gcs_staging_dir_isValid;
}

OAIGoogleTypeDate OAIGoogleCloudRetailV2betaBigQuerySource::getPartitionDate() const {
    return m_partition_date;
}
void OAIGoogleCloudRetailV2betaBigQuerySource::setPartitionDate(const OAIGoogleTypeDate &partition_date) {
    m_partition_date = partition_date;
    m_partition_date_isSet = true;
}

bool OAIGoogleCloudRetailV2betaBigQuerySource::is_partition_date_Set() const{
    return m_partition_date_isSet;
}

bool OAIGoogleCloudRetailV2betaBigQuerySource::is_partition_date_Valid() const{
    return m_partition_date_isValid;
}

QString OAIGoogleCloudRetailV2betaBigQuerySource::getProjectId() const {
    return m_project_id;
}
void OAIGoogleCloudRetailV2betaBigQuerySource::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIGoogleCloudRetailV2betaBigQuerySource::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIGoogleCloudRetailV2betaBigQuerySource::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIGoogleCloudRetailV2betaBigQuerySource::getTableId() const {
    return m_table_id;
}
void OAIGoogleCloudRetailV2betaBigQuerySource::setTableId(const QString &table_id) {
    m_table_id = table_id;
    m_table_id_isSet = true;
}

bool OAIGoogleCloudRetailV2betaBigQuerySource::is_table_id_Set() const{
    return m_table_id_isSet;
}

bool OAIGoogleCloudRetailV2betaBigQuerySource::is_table_id_Valid() const{
    return m_table_id_isValid;
}

bool OAIGoogleCloudRetailV2betaBigQuerySource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_staging_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaBigQuerySource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
