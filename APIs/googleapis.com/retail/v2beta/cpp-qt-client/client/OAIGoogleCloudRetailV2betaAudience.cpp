/**
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRetailV2betaAudience.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRetailV2betaAudience::OAIGoogleCloudRetailV2betaAudience(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRetailV2betaAudience::OAIGoogleCloudRetailV2betaAudience() {
    this->initializeModel();
}

OAIGoogleCloudRetailV2betaAudience::~OAIGoogleCloudRetailV2betaAudience() {}

void OAIGoogleCloudRetailV2betaAudience::initializeModel() {

    m_age_groups_isSet = false;
    m_age_groups_isValid = false;

    m_genders_isSet = false;
    m_genders_isValid = false;
}

void OAIGoogleCloudRetailV2betaAudience::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRetailV2betaAudience::fromJsonObject(QJsonObject json) {

    m_age_groups_isValid = ::OpenAPI::fromJsonValue(m_age_groups, json[QString("ageGroups")]);
    m_age_groups_isSet = !json[QString("ageGroups")].isNull() && m_age_groups_isValid;

    m_genders_isValid = ::OpenAPI::fromJsonValue(m_genders, json[QString("genders")]);
    m_genders_isSet = !json[QString("genders")].isNull() && m_genders_isValid;
}

QString OAIGoogleCloudRetailV2betaAudience::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRetailV2betaAudience::asJsonObject() const {
    QJsonObject obj;
    if (m_age_groups.size() > 0) {
        obj.insert(QString("ageGroups"), ::OpenAPI::toJsonValue(m_age_groups));
    }
    if (m_genders.size() > 0) {
        obj.insert(QString("genders"), ::OpenAPI::toJsonValue(m_genders));
    }
    return obj;
}

QList<QString> OAIGoogleCloudRetailV2betaAudience::getAgeGroups() const {
    return m_age_groups;
}
void OAIGoogleCloudRetailV2betaAudience::setAgeGroups(const QList<QString> &age_groups) {
    m_age_groups = age_groups;
    m_age_groups_isSet = true;
}

bool OAIGoogleCloudRetailV2betaAudience::is_age_groups_Set() const{
    return m_age_groups_isSet;
}

bool OAIGoogleCloudRetailV2betaAudience::is_age_groups_Valid() const{
    return m_age_groups_isValid;
}

QList<QString> OAIGoogleCloudRetailV2betaAudience::getGenders() const {
    return m_genders;
}
void OAIGoogleCloudRetailV2betaAudience::setGenders(const QList<QString> &genders) {
    m_genders = genders;
    m_genders_isSet = true;
}

bool OAIGoogleCloudRetailV2betaAudience::is_genders_Set() const{
    return m_genders_isSet;
}

bool OAIGoogleCloudRetailV2betaAudience::is_genders_Valid() const{
    return m_genders_isValid;
}

bool OAIGoogleCloudRetailV2betaAudience::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_age_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_genders.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRetailV2betaAudience::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
