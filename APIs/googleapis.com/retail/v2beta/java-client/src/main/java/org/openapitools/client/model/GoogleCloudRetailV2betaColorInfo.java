/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The color information of a Product.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:18.873693-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailV2betaColorInfo {
  public static final String SERIALIZED_NAME_COLOR_FAMILIES = "colorFamilies";
  @SerializedName(SERIALIZED_NAME_COLOR_FAMILIES)
  private List<String> colorFamilies = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private List<String> colors = new ArrayList<>();

  public GoogleCloudRetailV2betaColorInfo() {
  }

  public GoogleCloudRetailV2betaColorInfo colorFamilies(List<String> colorFamilies) {
    this.colorFamilies = colorFamilies;
    return this;
  }

  public GoogleCloudRetailV2betaColorInfo addColorFamiliesItem(String colorFamiliesItem) {
    if (this.colorFamilies == null) {
      this.colorFamilies = new ArrayList<>();
    }
    this.colorFamilies.add(colorFamiliesItem);
    return this;
  }

  /**
   * The standard color families. Strongly recommended to use the following standard color groups: \&quot;Red\&quot;, \&quot;Pink\&quot;, \&quot;Orange\&quot;, \&quot;Yellow\&quot;, \&quot;Purple\&quot;, \&quot;Green\&quot;, \&quot;Cyan\&quot;, \&quot;Blue\&quot;, \&quot;Brown\&quot;, \&quot;White\&quot;, \&quot;Gray\&quot;, \&quot;Black\&quot; and \&quot;Mixed\&quot;. Normally it is expected to have only 1 color family. May consider using single \&quot;Mixed\&quot; instead of multiple values. A maximum of 5 values are allowed. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Google Merchant Center property [color](https://support.google.com/merchants/answer/6324487). Schema.org property [Product.color](https://schema.org/color).
   * @return colorFamilies
   */
  @javax.annotation.Nullable
  public List<String> getColorFamilies() {
    return colorFamilies;
  }

  public void setColorFamilies(List<String> colorFamilies) {
    this.colorFamilies = colorFamilies;
  }


  public GoogleCloudRetailV2betaColorInfo colors(List<String> colors) {
    this.colors = colors;
    return this;
  }

  public GoogleCloudRetailV2betaColorInfo addColorsItem(String colorsItem) {
    if (this.colors == null) {
      this.colors = new ArrayList<>();
    }
    this.colors.add(colorsItem);
    return this;
  }

  /**
   * The color display names, which may be different from standard color family names, such as the color aliases used in the website frontend. Normally it is expected to have only 1 color. May consider using single \&quot;Mixed\&quot; instead of multiple values. A maximum of 75 colors are allowed. Each value must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. Google Merchant Center property [color](https://support.google.com/merchants/answer/6324487). Schema.org property [Product.color](https://schema.org/color).
   * @return colors
   */
  @javax.annotation.Nullable
  public List<String> getColors() {
    return colors;
  }

  public void setColors(List<String> colors) {
    this.colors = colors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailV2betaColorInfo googleCloudRetailV2betaColorInfo = (GoogleCloudRetailV2betaColorInfo) o;
    return Objects.equals(this.colorFamilies, googleCloudRetailV2betaColorInfo.colorFamilies) &&
        Objects.equals(this.colors, googleCloudRetailV2betaColorInfo.colors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorFamilies, colors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailV2betaColorInfo {\n");
    sb.append("    colorFamilies: ").append(toIndentedString(colorFamilies)).append("\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colorFamilies");
    openapiFields.add("colors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailV2betaColorInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailV2betaColorInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailV2betaColorInfo is not found in the empty JSON string", GoogleCloudRetailV2betaColorInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailV2betaColorInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailV2betaColorInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("colorFamilies") != null && !jsonObj.get("colorFamilies").isJsonNull() && !jsonObj.get("colorFamilies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorFamilies` to be an array in the JSON string but got `%s`", jsonObj.get("colorFamilies").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("colors") != null && !jsonObj.get("colors").isJsonNull() && !jsonObj.get("colors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `colors` to be an array in the JSON string but got `%s`", jsonObj.get("colors").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailV2betaColorInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailV2betaColorInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailV2betaColorInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailV2betaColorInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailV2betaColorInfo>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailV2betaColorInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailV2betaColorInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailV2betaColorInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailV2betaColorInfo
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailV2betaColorInfo
   */
  public static GoogleCloudRetailV2betaColorInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailV2betaColorInfo.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailV2betaColorInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

