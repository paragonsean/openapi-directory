/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudRetailLoggingErrorContext;
import org.openapitools.client.model.GoogleCloudRetailLoggingImportErrorContext;
import org.openapitools.client.model.GoogleCloudRetailLoggingServiceContext;
import org.openapitools.client.model.GoogleRpcStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An error log which is reported to the Error Reporting system. This proto a superset of google.devtools.clouderrorreporting.v1beta1.ReportedErrorEvent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:18.873693-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailLoggingErrorLog {
  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private GoogleCloudRetailLoggingErrorContext context;

  public static final String SERIALIZED_NAME_IMPORT_PAYLOAD = "importPayload";
  @SerializedName(SERIALIZED_NAME_IMPORT_PAYLOAD)
  private GoogleCloudRetailLoggingImportErrorContext importPayload;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_REQUEST_PAYLOAD = "requestPayload";
  @SerializedName(SERIALIZED_NAME_REQUEST_PAYLOAD)
  private Map<String, Object> requestPayload = new HashMap<>();

  public static final String SERIALIZED_NAME_RESPONSE_PAYLOAD = "responsePayload";
  @SerializedName(SERIALIZED_NAME_RESPONSE_PAYLOAD)
  private Map<String, Object> responsePayload = new HashMap<>();

  public static final String SERIALIZED_NAME_SERVICE_CONTEXT = "serviceContext";
  @SerializedName(SERIALIZED_NAME_SERVICE_CONTEXT)
  private GoogleCloudRetailLoggingServiceContext serviceContext;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private GoogleRpcStatus status;

  public GoogleCloudRetailLoggingErrorLog() {
  }

  public GoogleCloudRetailLoggingErrorLog context(GoogleCloudRetailLoggingErrorContext context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public GoogleCloudRetailLoggingErrorContext getContext() {
    return context;
  }

  public void setContext(GoogleCloudRetailLoggingErrorContext context) {
    this.context = context;
  }


  public GoogleCloudRetailLoggingErrorLog importPayload(GoogleCloudRetailLoggingImportErrorContext importPayload) {
    this.importPayload = importPayload;
    return this;
  }

  /**
   * Get importPayload
   * @return importPayload
   */
  @javax.annotation.Nullable
  public GoogleCloudRetailLoggingImportErrorContext getImportPayload() {
    return importPayload;
  }

  public void setImportPayload(GoogleCloudRetailLoggingImportErrorContext importPayload) {
    this.importPayload = importPayload;
  }


  public GoogleCloudRetailLoggingErrorLog message(String message) {
    this.message = message;
    return this;
  }

  /**
   * A message describing the error.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public GoogleCloudRetailLoggingErrorLog requestPayload(Map<String, Object> requestPayload) {
    this.requestPayload = requestPayload;
    return this;
  }

  public GoogleCloudRetailLoggingErrorLog putRequestPayloadItem(String key, Object requestPayloadItem) {
    if (this.requestPayload == null) {
      this.requestPayload = new HashMap<>();
    }
    this.requestPayload.put(key, requestPayloadItem);
    return this;
  }

  /**
   * The API request payload, represented as a protocol buffer. Most API request types are supported. For example: \&quot;type.googleapis.com/google.cloud.retail.v2.ProductService.CreateProductRequest\&quot; \&quot;type.googleapis.com/google.cloud.retail.v2.UserEventService.WriteUserEventRequest\&quot;
   * @return requestPayload
   */
  @javax.annotation.Nullable
  public Map<String, Object> getRequestPayload() {
    return requestPayload;
  }

  public void setRequestPayload(Map<String, Object> requestPayload) {
    this.requestPayload = requestPayload;
  }


  public GoogleCloudRetailLoggingErrorLog responsePayload(Map<String, Object> responsePayload) {
    this.responsePayload = responsePayload;
    return this;
  }

  public GoogleCloudRetailLoggingErrorLog putResponsePayloadItem(String key, Object responsePayloadItem) {
    if (this.responsePayload == null) {
      this.responsePayload = new HashMap<>();
    }
    this.responsePayload.put(key, responsePayloadItem);
    return this;
  }

  /**
   * The API response payload, represented as a protocol buffer. This is used to log some \&quot;soft errors\&quot;, where the response is valid but we consider there are some quality issues like unjoined events. The following API responses are supported and no PII is included: \&quot;google.cloud.retail.v2.PredictionService.Predict\&quot; \&quot;google.cloud.retail.v2.UserEventService.WriteUserEvent\&quot; \&quot;google.cloud.retail.v2.UserEventService.CollectUserEvent\&quot;
   * @return responsePayload
   */
  @javax.annotation.Nullable
  public Map<String, Object> getResponsePayload() {
    return responsePayload;
  }

  public void setResponsePayload(Map<String, Object> responsePayload) {
    this.responsePayload = responsePayload;
  }


  public GoogleCloudRetailLoggingErrorLog serviceContext(GoogleCloudRetailLoggingServiceContext serviceContext) {
    this.serviceContext = serviceContext;
    return this;
  }

  /**
   * Get serviceContext
   * @return serviceContext
   */
  @javax.annotation.Nullable
  public GoogleCloudRetailLoggingServiceContext getServiceContext() {
    return serviceContext;
  }

  public void setServiceContext(GoogleCloudRetailLoggingServiceContext serviceContext) {
    this.serviceContext = serviceContext;
  }


  public GoogleCloudRetailLoggingErrorLog status(GoogleRpcStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public GoogleRpcStatus getStatus() {
    return status;
  }

  public void setStatus(GoogleRpcStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailLoggingErrorLog googleCloudRetailLoggingErrorLog = (GoogleCloudRetailLoggingErrorLog) o;
    return Objects.equals(this.context, googleCloudRetailLoggingErrorLog.context) &&
        Objects.equals(this.importPayload, googleCloudRetailLoggingErrorLog.importPayload) &&
        Objects.equals(this.message, googleCloudRetailLoggingErrorLog.message) &&
        Objects.equals(this.requestPayload, googleCloudRetailLoggingErrorLog.requestPayload) &&
        Objects.equals(this.responsePayload, googleCloudRetailLoggingErrorLog.responsePayload) &&
        Objects.equals(this.serviceContext, googleCloudRetailLoggingErrorLog.serviceContext) &&
        Objects.equals(this.status, googleCloudRetailLoggingErrorLog.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(context, importPayload, message, requestPayload, responsePayload, serviceContext, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailLoggingErrorLog {\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    importPayload: ").append(toIndentedString(importPayload)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    requestPayload: ").append(toIndentedString(requestPayload)).append("\n");
    sb.append("    responsePayload: ").append(toIndentedString(responsePayload)).append("\n");
    sb.append("    serviceContext: ").append(toIndentedString(serviceContext)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("context");
    openapiFields.add("importPayload");
    openapiFields.add("message");
    openapiFields.add("requestPayload");
    openapiFields.add("responsePayload");
    openapiFields.add("serviceContext");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailLoggingErrorLog
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailLoggingErrorLog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailLoggingErrorLog is not found in the empty JSON string", GoogleCloudRetailLoggingErrorLog.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailLoggingErrorLog.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailLoggingErrorLog` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        GoogleCloudRetailLoggingErrorContext.validateJsonElement(jsonObj.get("context"));
      }
      // validate the optional field `importPayload`
      if (jsonObj.get("importPayload") != null && !jsonObj.get("importPayload").isJsonNull()) {
        GoogleCloudRetailLoggingImportErrorContext.validateJsonElement(jsonObj.get("importPayload"));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the optional field `serviceContext`
      if (jsonObj.get("serviceContext") != null && !jsonObj.get("serviceContext").isJsonNull()) {
        GoogleCloudRetailLoggingServiceContext.validateJsonElement(jsonObj.get("serviceContext"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        GoogleRpcStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailLoggingErrorLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailLoggingErrorLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailLoggingErrorLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailLoggingErrorLog.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailLoggingErrorLog>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailLoggingErrorLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailLoggingErrorLog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailLoggingErrorLog given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailLoggingErrorLog
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailLoggingErrorLog
   */
  public static GoogleCloudRetailLoggingErrorLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailLoggingErrorLog.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailLoggingErrorLog to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

