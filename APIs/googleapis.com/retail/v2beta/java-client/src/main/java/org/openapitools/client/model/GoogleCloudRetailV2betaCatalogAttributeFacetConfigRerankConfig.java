/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options to rerank based on facet values engaged by the user for the current key. That key needs to be a custom textual key and facetable. To use this control, you also need to pass all the facet keys engaged by the user in the request using the field [SearchRequest.FacetSpec]. In particular, if you don&#39;t pass the facet keys engaged that you want to rerank on, this control won&#39;t be effective. Moreover, to obtain better results, the facet values that you want to rerank on should be close to English (ideally made of words, underscores, and spaces).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:18.873693-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig {
  public static final String SERIALIZED_NAME_FACET_VALUES = "facetValues";
  @SerializedName(SERIALIZED_NAME_FACET_VALUES)
  private List<String> facetValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_RERANK_FACET = "rerankFacet";
  @SerializedName(SERIALIZED_NAME_RERANK_FACET)
  private Boolean rerankFacet;

  public GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig() {
  }

  public GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig facetValues(List<String> facetValues) {
    this.facetValues = facetValues;
    return this;
  }

  public GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig addFacetValuesItem(String facetValuesItem) {
    if (this.facetValues == null) {
      this.facetValues = new ArrayList<>();
    }
    this.facetValues.add(facetValuesItem);
    return this;
  }

  /**
   * If empty, rerank on all facet values for the current key. Otherwise, will rerank on the facet values from this list only.
   * @return facetValues
   */
  @javax.annotation.Nullable
  public List<String> getFacetValues() {
    return facetValues;
  }

  public void setFacetValues(List<String> facetValues) {
    this.facetValues = facetValues;
  }


  public GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig rerankFacet(Boolean rerankFacet) {
    this.rerankFacet = rerankFacet;
    return this;
  }

  /**
   * If set to true, then we also rerank the dynamic facets based on the facet values engaged by the user for the current attribute key during serving.
   * @return rerankFacet
   */
  @javax.annotation.Nullable
  public Boolean getRerankFacet() {
    return rerankFacet;
  }

  public void setRerankFacet(Boolean rerankFacet) {
    this.rerankFacet = rerankFacet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig googleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig = (GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig) o;
    return Objects.equals(this.facetValues, googleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig.facetValues) &&
        Objects.equals(this.rerankFacet, googleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig.rerankFacet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(facetValues, rerankFacet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig {\n");
    sb.append("    facetValues: ").append(toIndentedString(facetValues)).append("\n");
    sb.append("    rerankFacet: ").append(toIndentedString(rerankFacet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("facetValues");
    openapiFields.add("rerankFacet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig is not found in the empty JSON string", GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("facetValues") != null && !jsonObj.get("facetValues").isJsonNull() && !jsonObj.get("facetValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `facetValues` to be an array in the JSON string but got `%s`", jsonObj.get("facetValues").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig
   */
  public static GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

