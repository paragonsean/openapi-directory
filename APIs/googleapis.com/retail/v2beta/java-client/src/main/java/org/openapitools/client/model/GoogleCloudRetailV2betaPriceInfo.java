/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudRetailV2betaPriceInfoPriceRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The price information of a Product.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:18.873693-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailV2betaPriceInfo {
  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private Float cost;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_ORIGINAL_PRICE = "originalPrice";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_PRICE)
  private Float originalPrice;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Float price;

  public static final String SERIALIZED_NAME_PRICE_EFFECTIVE_TIME = "priceEffectiveTime";
  @SerializedName(SERIALIZED_NAME_PRICE_EFFECTIVE_TIME)
  private String priceEffectiveTime;

  public static final String SERIALIZED_NAME_PRICE_EXPIRE_TIME = "priceExpireTime";
  @SerializedName(SERIALIZED_NAME_PRICE_EXPIRE_TIME)
  private String priceExpireTime;

  public static final String SERIALIZED_NAME_PRICE_RANGE = "priceRange";
  @SerializedName(SERIALIZED_NAME_PRICE_RANGE)
  private GoogleCloudRetailV2betaPriceInfoPriceRange priceRange;

  public GoogleCloudRetailV2betaPriceInfo() {
  }

  public GoogleCloudRetailV2betaPriceInfo cost(Float cost) {
    this.cost = cost;
    return this;
  }

  /**
   * The costs associated with the sale of a particular product. Used for gross profit reporting. * Profit &#x3D; price - cost Google Merchant Center property [cost_of_goods_sold](https://support.google.com/merchants/answer/9017895).
   * @return cost
   */
  @javax.annotation.Nullable
  public Float getCost() {
    return cost;
  }

  public void setCost(Float cost) {
    this.cost = cost;
  }


  public GoogleCloudRetailV2betaPriceInfo currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The 3-letter currency code defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html). If this field is an unrecognizable currency code, an INVALID_ARGUMENT error is returned. The Product.Type.VARIANT Products with the same Product.primary_product_id must share the same currency_code. Otherwise, a FAILED_PRECONDITION error is returned.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public GoogleCloudRetailV2betaPriceInfo originalPrice(Float originalPrice) {
    this.originalPrice = originalPrice;
    return this;
  }

  /**
   * Price of the product without any discount. If zero, by default set to be the price. If set, original_price should be greater than or equal to price, otherwise an INVALID_ARGUMENT error is thrown.
   * @return originalPrice
   */
  @javax.annotation.Nullable
  public Float getOriginalPrice() {
    return originalPrice;
  }

  public void setOriginalPrice(Float originalPrice) {
    this.originalPrice = originalPrice;
  }


  public GoogleCloudRetailV2betaPriceInfo price(Float price) {
    this.price = price;
    return this;
  }

  /**
   * Price of the product. Google Merchant Center property [price](https://support.google.com/merchants/answer/6324371). Schema.org property [Offer.price](https://schema.org/price).
   * @return price
   */
  @javax.annotation.Nullable
  public Float getPrice() {
    return price;
  }

  public void setPrice(Float price) {
    this.price = price;
  }


  public GoogleCloudRetailV2betaPriceInfo priceEffectiveTime(String priceEffectiveTime) {
    this.priceEffectiveTime = priceEffectiveTime;
    return this;
  }

  /**
   * The timestamp when the price starts to be effective. This can be set as a future timestamp, and the price is only used for search after price_effective_time. If so, the original_price must be set and original_price is used before price_effective_time. Do not set if price is always effective because it will cause additional latency during search.
   * @return priceEffectiveTime
   */
  @javax.annotation.Nullable
  public String getPriceEffectiveTime() {
    return priceEffectiveTime;
  }

  public void setPriceEffectiveTime(String priceEffectiveTime) {
    this.priceEffectiveTime = priceEffectiveTime;
  }


  public GoogleCloudRetailV2betaPriceInfo priceExpireTime(String priceExpireTime) {
    this.priceExpireTime = priceExpireTime;
    return this;
  }

  /**
   * The timestamp when the price stops to be effective. The price is used for search before price_expire_time. If this field is set, the original_price must be set and original_price is used after price_expire_time. Do not set if price is always effective because it will cause additional latency during search.
   * @return priceExpireTime
   */
  @javax.annotation.Nullable
  public String getPriceExpireTime() {
    return priceExpireTime;
  }

  public void setPriceExpireTime(String priceExpireTime) {
    this.priceExpireTime = priceExpireTime;
  }


  public GoogleCloudRetailV2betaPriceInfo priceRange(GoogleCloudRetailV2betaPriceInfoPriceRange priceRange) {
    this.priceRange = priceRange;
    return this;
  }

  /**
   * Get priceRange
   * @return priceRange
   */
  @javax.annotation.Nullable
  public GoogleCloudRetailV2betaPriceInfoPriceRange getPriceRange() {
    return priceRange;
  }

  public void setPriceRange(GoogleCloudRetailV2betaPriceInfoPriceRange priceRange) {
    this.priceRange = priceRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailV2betaPriceInfo googleCloudRetailV2betaPriceInfo = (GoogleCloudRetailV2betaPriceInfo) o;
    return Objects.equals(this.cost, googleCloudRetailV2betaPriceInfo.cost) &&
        Objects.equals(this.currencyCode, googleCloudRetailV2betaPriceInfo.currencyCode) &&
        Objects.equals(this.originalPrice, googleCloudRetailV2betaPriceInfo.originalPrice) &&
        Objects.equals(this.price, googleCloudRetailV2betaPriceInfo.price) &&
        Objects.equals(this.priceEffectiveTime, googleCloudRetailV2betaPriceInfo.priceEffectiveTime) &&
        Objects.equals(this.priceExpireTime, googleCloudRetailV2betaPriceInfo.priceExpireTime) &&
        Objects.equals(this.priceRange, googleCloudRetailV2betaPriceInfo.priceRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cost, currencyCode, originalPrice, price, priceEffectiveTime, priceExpireTime, priceRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailV2betaPriceInfo {\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    originalPrice: ").append(toIndentedString(originalPrice)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceEffectiveTime: ").append(toIndentedString(priceEffectiveTime)).append("\n");
    sb.append("    priceExpireTime: ").append(toIndentedString(priceExpireTime)).append("\n");
    sb.append("    priceRange: ").append(toIndentedString(priceRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cost");
    openapiFields.add("currencyCode");
    openapiFields.add("originalPrice");
    openapiFields.add("price");
    openapiFields.add("priceEffectiveTime");
    openapiFields.add("priceExpireTime");
    openapiFields.add("priceRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailV2betaPriceInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailV2betaPriceInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailV2betaPriceInfo is not found in the empty JSON string", GoogleCloudRetailV2betaPriceInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailV2betaPriceInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailV2betaPriceInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("priceEffectiveTime") != null && !jsonObj.get("priceEffectiveTime").isJsonNull()) && !jsonObj.get("priceEffectiveTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceEffectiveTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceEffectiveTime").toString()));
      }
      if ((jsonObj.get("priceExpireTime") != null && !jsonObj.get("priceExpireTime").isJsonNull()) && !jsonObj.get("priceExpireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceExpireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceExpireTime").toString()));
      }
      // validate the optional field `priceRange`
      if (jsonObj.get("priceRange") != null && !jsonObj.get("priceRange").isJsonNull()) {
        GoogleCloudRetailV2betaPriceInfoPriceRange.validateJsonElement(jsonObj.get("priceRange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailV2betaPriceInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailV2betaPriceInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailV2betaPriceInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailV2betaPriceInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailV2betaPriceInfo>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailV2betaPriceInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailV2betaPriceInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailV2betaPriceInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailV2betaPriceInfo
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailV2betaPriceInfo
   */
  public static GoogleCloudRetailV2betaPriceInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailV2betaPriceInfo.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailV2betaPriceInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

