/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleTypeDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BigQuery source import data from.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:18.873693-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailV2betaBigQuerySource {
  public static final String SERIALIZED_NAME_DATA_SCHEMA = "dataSchema";
  @SerializedName(SERIALIZED_NAME_DATA_SCHEMA)
  private String dataSchema;

  public static final String SERIALIZED_NAME_DATASET_ID = "datasetId";
  @SerializedName(SERIALIZED_NAME_DATASET_ID)
  private String datasetId;

  public static final String SERIALIZED_NAME_GCS_STAGING_DIR = "gcsStagingDir";
  @SerializedName(SERIALIZED_NAME_GCS_STAGING_DIR)
  private String gcsStagingDir;

  public static final String SERIALIZED_NAME_PARTITION_DATE = "partitionDate";
  @SerializedName(SERIALIZED_NAME_PARTITION_DATE)
  private GoogleTypeDate partitionDate;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_TABLE_ID = "tableId";
  @SerializedName(SERIALIZED_NAME_TABLE_ID)
  private String tableId;

  public GoogleCloudRetailV2betaBigQuerySource() {
  }

  public GoogleCloudRetailV2betaBigQuerySource dataSchema(String dataSchema) {
    this.dataSchema = dataSchema;
    return this;
  }

  /**
   * The schema to use when parsing the data from the source. Supported values for product imports: * &#x60;product&#x60; (default): One JSON Product per line. Each product must have a valid Product.id. * &#x60;product_merchant_center&#x60;: See [Importing catalog data from Merchant Center](https://cloud.google.com/retail/recommendations-ai/docs/upload-catalog#mc). Supported values for user events imports: * &#x60;user_event&#x60; (default): One JSON UserEvent per line. * &#x60;user_event_ga360&#x60;: The schema is available here: https://support.google.com/analytics/answer/3437719. * &#x60;user_event_ga4&#x60;: The schema is available here: https://support.google.com/analytics/answer/7029846. Supported values for autocomplete imports: * &#x60;suggestions&#x60; (default): One JSON completion suggestion per line. * &#x60;denylist&#x60;: One JSON deny suggestion per line. * &#x60;allowlist&#x60;: One JSON allow suggestion per line.
   * @return dataSchema
   */
  @javax.annotation.Nullable
  public String getDataSchema() {
    return dataSchema;
  }

  public void setDataSchema(String dataSchema) {
    this.dataSchema = dataSchema;
  }


  public GoogleCloudRetailV2betaBigQuerySource datasetId(String datasetId) {
    this.datasetId = datasetId;
    return this;
  }

  /**
   * Required. The BigQuery data set to copy the data from with a length limit of 1,024 characters.
   * @return datasetId
   */
  @javax.annotation.Nullable
  public String getDatasetId() {
    return datasetId;
  }

  public void setDatasetId(String datasetId) {
    this.datasetId = datasetId;
  }


  public GoogleCloudRetailV2betaBigQuerySource gcsStagingDir(String gcsStagingDir) {
    this.gcsStagingDir = gcsStagingDir;
    return this;
  }

  /**
   * Intermediate Cloud Storage directory used for the import with a length limit of 2,000 characters. Can be specified if one wants to have the BigQuery export to a specific Cloud Storage directory.
   * @return gcsStagingDir
   */
  @javax.annotation.Nullable
  public String getGcsStagingDir() {
    return gcsStagingDir;
  }

  public void setGcsStagingDir(String gcsStagingDir) {
    this.gcsStagingDir = gcsStagingDir;
  }


  public GoogleCloudRetailV2betaBigQuerySource partitionDate(GoogleTypeDate partitionDate) {
    this.partitionDate = partitionDate;
    return this;
  }

  /**
   * Get partitionDate
   * @return partitionDate
   */
  @javax.annotation.Nullable
  public GoogleTypeDate getPartitionDate() {
    return partitionDate;
  }

  public void setPartitionDate(GoogleTypeDate partitionDate) {
    this.partitionDate = partitionDate;
  }


  public GoogleCloudRetailV2betaBigQuerySource projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * The project ID (can be project # or ID) that the BigQuery source is in with a length limit of 128 characters. If not specified, inherits the project ID from the parent request.
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public GoogleCloudRetailV2betaBigQuerySource tableId(String tableId) {
    this.tableId = tableId;
    return this;
  }

  /**
   * Required. The BigQuery table to copy the data from with a length limit of 1,024 characters.
   * @return tableId
   */
  @javax.annotation.Nullable
  public String getTableId() {
    return tableId;
  }

  public void setTableId(String tableId) {
    this.tableId = tableId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailV2betaBigQuerySource googleCloudRetailV2betaBigQuerySource = (GoogleCloudRetailV2betaBigQuerySource) o;
    return Objects.equals(this.dataSchema, googleCloudRetailV2betaBigQuerySource.dataSchema) &&
        Objects.equals(this.datasetId, googleCloudRetailV2betaBigQuerySource.datasetId) &&
        Objects.equals(this.gcsStagingDir, googleCloudRetailV2betaBigQuerySource.gcsStagingDir) &&
        Objects.equals(this.partitionDate, googleCloudRetailV2betaBigQuerySource.partitionDate) &&
        Objects.equals(this.projectId, googleCloudRetailV2betaBigQuerySource.projectId) &&
        Objects.equals(this.tableId, googleCloudRetailV2betaBigQuerySource.tableId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSchema, datasetId, gcsStagingDir, partitionDate, projectId, tableId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailV2betaBigQuerySource {\n");
    sb.append("    dataSchema: ").append(toIndentedString(dataSchema)).append("\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    gcsStagingDir: ").append(toIndentedString(gcsStagingDir)).append("\n");
    sb.append("    partitionDate: ").append(toIndentedString(partitionDate)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    tableId: ").append(toIndentedString(tableId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSchema");
    openapiFields.add("datasetId");
    openapiFields.add("gcsStagingDir");
    openapiFields.add("partitionDate");
    openapiFields.add("projectId");
    openapiFields.add("tableId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailV2betaBigQuerySource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailV2betaBigQuerySource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailV2betaBigQuerySource is not found in the empty JSON string", GoogleCloudRetailV2betaBigQuerySource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailV2betaBigQuerySource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailV2betaBigQuerySource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataSchema") != null && !jsonObj.get("dataSchema").isJsonNull()) && !jsonObj.get("dataSchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSchema").toString()));
      }
      if ((jsonObj.get("datasetId") != null && !jsonObj.get("datasetId").isJsonNull()) && !jsonObj.get("datasetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasetId").toString()));
      }
      if ((jsonObj.get("gcsStagingDir") != null && !jsonObj.get("gcsStagingDir").isJsonNull()) && !jsonObj.get("gcsStagingDir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcsStagingDir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcsStagingDir").toString()));
      }
      // validate the optional field `partitionDate`
      if (jsonObj.get("partitionDate") != null && !jsonObj.get("partitionDate").isJsonNull()) {
        GoogleTypeDate.validateJsonElement(jsonObj.get("partitionDate"));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("tableId") != null && !jsonObj.get("tableId").isJsonNull()) && !jsonObj.get("tableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailV2betaBigQuerySource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailV2betaBigQuerySource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailV2betaBigQuerySource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailV2betaBigQuerySource.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailV2betaBigQuerySource>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailV2betaBigQuerySource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailV2betaBigQuerySource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailV2betaBigQuerySource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailV2betaBigQuerySource
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailV2betaBigQuerySource
   */
  public static GoogleCloudRetailV2betaBigQuerySource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailV2betaBigQuerySource.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailV2betaBigQuerySource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

