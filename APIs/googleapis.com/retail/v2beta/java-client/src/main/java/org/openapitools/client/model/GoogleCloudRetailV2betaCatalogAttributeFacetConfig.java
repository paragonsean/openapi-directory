/*
 * Vertex AI Search for Retail API
 * Vertex AI Search for Retail API is made up of Retail Search, Browse and Recommendations. These discovery AI solutions help you implement personalized search, browse and recommendations, based on machine learning models, across your websites and mobile applications.
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRetailV2betaCatalogAttributeFacetConfigIgnoredFacetValues;
import org.openapitools.client.model.GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacet;
import org.openapitools.client.model.GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacetValue;
import org.openapitools.client.model.GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig;
import org.openapitools.client.model.GoogleCloudRetailV2betaInterval;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Possible options for the facet that corresponds to the current attribute config.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:18.873693-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRetailV2betaCatalogAttributeFacetConfig {
  public static final String SERIALIZED_NAME_FACET_INTERVALS = "facetIntervals";
  @SerializedName(SERIALIZED_NAME_FACET_INTERVALS)
  private List<GoogleCloudRetailV2betaInterval> facetIntervals = new ArrayList<>();

  public static final String SERIALIZED_NAME_IGNORED_FACET_VALUES = "ignoredFacetValues";
  @SerializedName(SERIALIZED_NAME_IGNORED_FACET_VALUES)
  private List<GoogleCloudRetailV2betaCatalogAttributeFacetConfigIgnoredFacetValues> ignoredFacetValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_MERGED_FACET = "mergedFacet";
  @SerializedName(SERIALIZED_NAME_MERGED_FACET)
  private GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacet mergedFacet;

  public static final String SERIALIZED_NAME_MERGED_FACET_VALUES = "mergedFacetValues";
  @SerializedName(SERIALIZED_NAME_MERGED_FACET_VALUES)
  private List<GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacetValue> mergedFacetValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_RERANK_CONFIG = "rerankConfig";
  @SerializedName(SERIALIZED_NAME_RERANK_CONFIG)
  private GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig rerankConfig;

  public GoogleCloudRetailV2betaCatalogAttributeFacetConfig() {
  }

  public GoogleCloudRetailV2betaCatalogAttributeFacetConfig facetIntervals(List<GoogleCloudRetailV2betaInterval> facetIntervals) {
    this.facetIntervals = facetIntervals;
    return this;
  }

  public GoogleCloudRetailV2betaCatalogAttributeFacetConfig addFacetIntervalsItem(GoogleCloudRetailV2betaInterval facetIntervalsItem) {
    if (this.facetIntervals == null) {
      this.facetIntervals = new ArrayList<>();
    }
    this.facetIntervals.add(facetIntervalsItem);
    return this;
  }

  /**
   * If you don&#39;t set the facet SearchRequest.FacetSpec.FacetKey.intervals in the request to a numerical attribute, then we use the computed intervals with rounded bounds obtained from all its product numerical attribute values. The computed intervals might not be ideal for some attributes. Therefore, we give you the option to overwrite them with the facet_intervals field. The maximum of facet intervals per CatalogAttribute is 40. Each interval must have a lower bound or an upper bound. If both bounds are provided, then the lower bound must be smaller or equal than the upper bound.
   * @return facetIntervals
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRetailV2betaInterval> getFacetIntervals() {
    return facetIntervals;
  }

  public void setFacetIntervals(List<GoogleCloudRetailV2betaInterval> facetIntervals) {
    this.facetIntervals = facetIntervals;
  }


  public GoogleCloudRetailV2betaCatalogAttributeFacetConfig ignoredFacetValues(List<GoogleCloudRetailV2betaCatalogAttributeFacetConfigIgnoredFacetValues> ignoredFacetValues) {
    this.ignoredFacetValues = ignoredFacetValues;
    return this;
  }

  public GoogleCloudRetailV2betaCatalogAttributeFacetConfig addIgnoredFacetValuesItem(GoogleCloudRetailV2betaCatalogAttributeFacetConfigIgnoredFacetValues ignoredFacetValuesItem) {
    if (this.ignoredFacetValues == null) {
      this.ignoredFacetValues = new ArrayList<>();
    }
    this.ignoredFacetValues.add(ignoredFacetValuesItem);
    return this;
  }

  /**
   * Each instance represents a list of attribute values to ignore as facet values for a specific time range. The maximum number of instances per CatalogAttribute is 25.
   * @return ignoredFacetValues
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRetailV2betaCatalogAttributeFacetConfigIgnoredFacetValues> getIgnoredFacetValues() {
    return ignoredFacetValues;
  }

  public void setIgnoredFacetValues(List<GoogleCloudRetailV2betaCatalogAttributeFacetConfigIgnoredFacetValues> ignoredFacetValues) {
    this.ignoredFacetValues = ignoredFacetValues;
  }


  public GoogleCloudRetailV2betaCatalogAttributeFacetConfig mergedFacet(GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacet mergedFacet) {
    this.mergedFacet = mergedFacet;
    return this;
  }

  /**
   * Get mergedFacet
   * @return mergedFacet
   */
  @javax.annotation.Nullable
  public GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacet getMergedFacet() {
    return mergedFacet;
  }

  public void setMergedFacet(GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacet mergedFacet) {
    this.mergedFacet = mergedFacet;
  }


  public GoogleCloudRetailV2betaCatalogAttributeFacetConfig mergedFacetValues(List<GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacetValue> mergedFacetValues) {
    this.mergedFacetValues = mergedFacetValues;
    return this;
  }

  public GoogleCloudRetailV2betaCatalogAttributeFacetConfig addMergedFacetValuesItem(GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacetValue mergedFacetValuesItem) {
    if (this.mergedFacetValues == null) {
      this.mergedFacetValues = new ArrayList<>();
    }
    this.mergedFacetValues.add(mergedFacetValuesItem);
    return this;
  }

  /**
   * Each instance replaces a list of facet values by a merged facet value. If a facet value is not in any list, then it will stay the same. To avoid conflicts, only paths of length 1 are accepted. In other words, if \&quot;dark_blue\&quot; merged into \&quot;BLUE\&quot;, then the latter can&#39;t merge into \&quot;blues\&quot; because this would create a path of length 2. The maximum number of instances of MergedFacetValue per CatalogAttribute is 100. This feature is available only for textual custom attributes.
   * @return mergedFacetValues
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacetValue> getMergedFacetValues() {
    return mergedFacetValues;
  }

  public void setMergedFacetValues(List<GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacetValue> mergedFacetValues) {
    this.mergedFacetValues = mergedFacetValues;
  }


  public GoogleCloudRetailV2betaCatalogAttributeFacetConfig rerankConfig(GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig rerankConfig) {
    this.rerankConfig = rerankConfig;
    return this;
  }

  /**
   * Get rerankConfig
   * @return rerankConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig getRerankConfig() {
    return rerankConfig;
  }

  public void setRerankConfig(GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig rerankConfig) {
    this.rerankConfig = rerankConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRetailV2betaCatalogAttributeFacetConfig googleCloudRetailV2betaCatalogAttributeFacetConfig = (GoogleCloudRetailV2betaCatalogAttributeFacetConfig) o;
    return Objects.equals(this.facetIntervals, googleCloudRetailV2betaCatalogAttributeFacetConfig.facetIntervals) &&
        Objects.equals(this.ignoredFacetValues, googleCloudRetailV2betaCatalogAttributeFacetConfig.ignoredFacetValues) &&
        Objects.equals(this.mergedFacet, googleCloudRetailV2betaCatalogAttributeFacetConfig.mergedFacet) &&
        Objects.equals(this.mergedFacetValues, googleCloudRetailV2betaCatalogAttributeFacetConfig.mergedFacetValues) &&
        Objects.equals(this.rerankConfig, googleCloudRetailV2betaCatalogAttributeFacetConfig.rerankConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(facetIntervals, ignoredFacetValues, mergedFacet, mergedFacetValues, rerankConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRetailV2betaCatalogAttributeFacetConfig {\n");
    sb.append("    facetIntervals: ").append(toIndentedString(facetIntervals)).append("\n");
    sb.append("    ignoredFacetValues: ").append(toIndentedString(ignoredFacetValues)).append("\n");
    sb.append("    mergedFacet: ").append(toIndentedString(mergedFacet)).append("\n");
    sb.append("    mergedFacetValues: ").append(toIndentedString(mergedFacetValues)).append("\n");
    sb.append("    rerankConfig: ").append(toIndentedString(rerankConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("facetIntervals");
    openapiFields.add("ignoredFacetValues");
    openapiFields.add("mergedFacet");
    openapiFields.add("mergedFacetValues");
    openapiFields.add("rerankConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRetailV2betaCatalogAttributeFacetConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRetailV2betaCatalogAttributeFacetConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRetailV2betaCatalogAttributeFacetConfig is not found in the empty JSON string", GoogleCloudRetailV2betaCatalogAttributeFacetConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRetailV2betaCatalogAttributeFacetConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRetailV2betaCatalogAttributeFacetConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("facetIntervals") != null && !jsonObj.get("facetIntervals").isJsonNull()) {
        JsonArray jsonArrayfacetIntervals = jsonObj.getAsJsonArray("facetIntervals");
        if (jsonArrayfacetIntervals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("facetIntervals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `facetIntervals` to be an array in the JSON string but got `%s`", jsonObj.get("facetIntervals").toString()));
          }

          // validate the optional field `facetIntervals` (array)
          for (int i = 0; i < jsonArrayfacetIntervals.size(); i++) {
            GoogleCloudRetailV2betaInterval.validateJsonElement(jsonArrayfacetIntervals.get(i));
          };
        }
      }
      if (jsonObj.get("ignoredFacetValues") != null && !jsonObj.get("ignoredFacetValues").isJsonNull()) {
        JsonArray jsonArrayignoredFacetValues = jsonObj.getAsJsonArray("ignoredFacetValues");
        if (jsonArrayignoredFacetValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ignoredFacetValues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ignoredFacetValues` to be an array in the JSON string but got `%s`", jsonObj.get("ignoredFacetValues").toString()));
          }

          // validate the optional field `ignoredFacetValues` (array)
          for (int i = 0; i < jsonArrayignoredFacetValues.size(); i++) {
            GoogleCloudRetailV2betaCatalogAttributeFacetConfigIgnoredFacetValues.validateJsonElement(jsonArrayignoredFacetValues.get(i));
          };
        }
      }
      // validate the optional field `mergedFacet`
      if (jsonObj.get("mergedFacet") != null && !jsonObj.get("mergedFacet").isJsonNull()) {
        GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacet.validateJsonElement(jsonObj.get("mergedFacet"));
      }
      if (jsonObj.get("mergedFacetValues") != null && !jsonObj.get("mergedFacetValues").isJsonNull()) {
        JsonArray jsonArraymergedFacetValues = jsonObj.getAsJsonArray("mergedFacetValues");
        if (jsonArraymergedFacetValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mergedFacetValues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mergedFacetValues` to be an array in the JSON string but got `%s`", jsonObj.get("mergedFacetValues").toString()));
          }

          // validate the optional field `mergedFacetValues` (array)
          for (int i = 0; i < jsonArraymergedFacetValues.size(); i++) {
            GoogleCloudRetailV2betaCatalogAttributeFacetConfigMergedFacetValue.validateJsonElement(jsonArraymergedFacetValues.get(i));
          };
        }
      }
      // validate the optional field `rerankConfig`
      if (jsonObj.get("rerankConfig") != null && !jsonObj.get("rerankConfig").isJsonNull()) {
        GoogleCloudRetailV2betaCatalogAttributeFacetConfigRerankConfig.validateJsonElement(jsonObj.get("rerankConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRetailV2betaCatalogAttributeFacetConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRetailV2betaCatalogAttributeFacetConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRetailV2betaCatalogAttributeFacetConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRetailV2betaCatalogAttributeFacetConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRetailV2betaCatalogAttributeFacetConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRetailV2betaCatalogAttributeFacetConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRetailV2betaCatalogAttributeFacetConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRetailV2betaCatalogAttributeFacetConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRetailV2betaCatalogAttributeFacetConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRetailV2betaCatalogAttributeFacetConfig
   */
  public static GoogleCloudRetailV2betaCatalogAttributeFacetConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRetailV2betaCatalogAttributeFacetConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudRetailV2betaCatalogAttributeFacetConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

