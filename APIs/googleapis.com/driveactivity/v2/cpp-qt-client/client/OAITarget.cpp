/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITarget::OAITarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITarget::OAITarget() {
    this->initializeModel();
}

OAITarget::~OAITarget() {}

void OAITarget::initializeModel() {

    m_drive_isSet = false;
    m_drive_isValid = false;

    m_drive_item_isSet = false;
    m_drive_item_isValid = false;

    m_file_comment_isSet = false;
    m_file_comment_isValid = false;

    m_team_drive_isSet = false;
    m_team_drive_isValid = false;
}

void OAITarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITarget::fromJsonObject(QJsonObject json) {

    m_drive_isValid = ::OpenAPI::fromJsonValue(m_drive, json[QString("drive")]);
    m_drive_isSet = !json[QString("drive")].isNull() && m_drive_isValid;

    m_drive_item_isValid = ::OpenAPI::fromJsonValue(m_drive_item, json[QString("driveItem")]);
    m_drive_item_isSet = !json[QString("driveItem")].isNull() && m_drive_item_isValid;

    m_file_comment_isValid = ::OpenAPI::fromJsonValue(m_file_comment, json[QString("fileComment")]);
    m_file_comment_isSet = !json[QString("fileComment")].isNull() && m_file_comment_isValid;

    m_team_drive_isValid = ::OpenAPI::fromJsonValue(m_team_drive, json[QString("teamDrive")]);
    m_team_drive_isSet = !json[QString("teamDrive")].isNull() && m_team_drive_isValid;
}

QString OAITarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITarget::asJsonObject() const {
    QJsonObject obj;
    if (m_drive.isSet()) {
        obj.insert(QString("drive"), ::OpenAPI::toJsonValue(m_drive));
    }
    if (m_drive_item.isSet()) {
        obj.insert(QString("driveItem"), ::OpenAPI::toJsonValue(m_drive_item));
    }
    if (m_file_comment.isSet()) {
        obj.insert(QString("fileComment"), ::OpenAPI::toJsonValue(m_file_comment));
    }
    if (m_team_drive.isSet()) {
        obj.insert(QString("teamDrive"), ::OpenAPI::toJsonValue(m_team_drive));
    }
    return obj;
}

OAIDrive OAITarget::getDrive() const {
    return m_drive;
}
void OAITarget::setDrive(const OAIDrive &drive) {
    m_drive = drive;
    m_drive_isSet = true;
}

bool OAITarget::is_drive_Set() const{
    return m_drive_isSet;
}

bool OAITarget::is_drive_Valid() const{
    return m_drive_isValid;
}

OAIDriveItem OAITarget::getDriveItem() const {
    return m_drive_item;
}
void OAITarget::setDriveItem(const OAIDriveItem &drive_item) {
    m_drive_item = drive_item;
    m_drive_item_isSet = true;
}

bool OAITarget::is_drive_item_Set() const{
    return m_drive_item_isSet;
}

bool OAITarget::is_drive_item_Valid() const{
    return m_drive_item_isValid;
}

OAIFileComment OAITarget::getFileComment() const {
    return m_file_comment;
}
void OAITarget::setFileComment(const OAIFileComment &file_comment) {
    m_file_comment = file_comment;
    m_file_comment_isSet = true;
}

bool OAITarget::is_file_comment_Set() const{
    return m_file_comment_isSet;
}

bool OAITarget::is_file_comment_Valid() const{
    return m_file_comment_isValid;
}

OAITeamDrive OAITarget::getTeamDrive() const {
    return m_team_drive;
}
void OAITarget::setTeamDrive(const OAITeamDrive &team_drive) {
    m_team_drive = team_drive;
    m_team_drive_isSet = true;
}

bool OAITarget::is_team_drive_Set() const{
    return m_team_drive_isSet;
}

bool OAITarget::is_team_drive_Valid() const{
    return m_team_drive_isValid;
}

bool OAITarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_drive.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_drive.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
