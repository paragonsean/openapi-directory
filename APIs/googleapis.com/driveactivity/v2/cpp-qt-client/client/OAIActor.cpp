/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActor::OAIActor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActor::OAIActor() {
    this->initializeModel();
}

OAIActor::~OAIActor() {}

void OAIActor::initializeModel() {

    m_administrator_isSet = false;
    m_administrator_isValid = false;

    m_anonymous_isSet = false;
    m_anonymous_isValid = false;

    m_impersonation_isSet = false;
    m_impersonation_isValid = false;

    m_system_isSet = false;
    m_system_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIActor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActor::fromJsonObject(QJsonObject json) {

    m_administrator_isValid = ::OpenAPI::fromJsonValue(m_administrator, json[QString("administrator")]);
    m_administrator_isSet = !json[QString("administrator")].isNull() && m_administrator_isValid;

    m_anonymous_isValid = ::OpenAPI::fromJsonValue(m_anonymous, json[QString("anonymous")]);
    m_anonymous_isSet = !json[QString("anonymous")].isNull() && m_anonymous_isValid;

    m_impersonation_isValid = ::OpenAPI::fromJsonValue(m_impersonation, json[QString("impersonation")]);
    m_impersonation_isSet = !json[QString("impersonation")].isNull() && m_impersonation_isValid;

    m_system_isValid = ::OpenAPI::fromJsonValue(m_system, json[QString("system")]);
    m_system_isSet = !json[QString("system")].isNull() && m_system_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIActor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActor::asJsonObject() const {
    QJsonObject obj;
    if (m_administrator_isSet) {
        obj.insert(QString("administrator"), ::OpenAPI::toJsonValue(m_administrator));
    }
    if (m_anonymous_isSet) {
        obj.insert(QString("anonymous"), ::OpenAPI::toJsonValue(m_anonymous));
    }
    if (m_impersonation.isSet()) {
        obj.insert(QString("impersonation"), ::OpenAPI::toJsonValue(m_impersonation));
    }
    if (m_system.isSet()) {
        obj.insert(QString("system"), ::OpenAPI::toJsonValue(m_system));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIObject OAIActor::getAdministrator() const {
    return m_administrator;
}
void OAIActor::setAdministrator(const OAIObject &administrator) {
    m_administrator = administrator;
    m_administrator_isSet = true;
}

bool OAIActor::is_administrator_Set() const{
    return m_administrator_isSet;
}

bool OAIActor::is_administrator_Valid() const{
    return m_administrator_isValid;
}

OAIObject OAIActor::getAnonymous() const {
    return m_anonymous;
}
void OAIActor::setAnonymous(const OAIObject &anonymous) {
    m_anonymous = anonymous;
    m_anonymous_isSet = true;
}

bool OAIActor::is_anonymous_Set() const{
    return m_anonymous_isSet;
}

bool OAIActor::is_anonymous_Valid() const{
    return m_anonymous_isValid;
}

OAIImpersonation OAIActor::getImpersonation() const {
    return m_impersonation;
}
void OAIActor::setImpersonation(const OAIImpersonation &impersonation) {
    m_impersonation = impersonation;
    m_impersonation_isSet = true;
}

bool OAIActor::is_impersonation_Set() const{
    return m_impersonation_isSet;
}

bool OAIActor::is_impersonation_Valid() const{
    return m_impersonation_isValid;
}

OAISystemEvent OAIActor::getSystem() const {
    return m_system;
}
void OAIActor::setSystem(const OAISystemEvent &system) {
    m_system = system;
    m_system_isSet = true;
}

bool OAIActor::is_system_Set() const{
    return m_system_isSet;
}

bool OAIActor::is_system_Valid() const{
    return m_system_isValid;
}

OAIUser OAIActor::getUser() const {
    return m_user;
}
void OAIActor::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIActor::is_user_Set() const{
    return m_user_isSet;
}

bool OAIActor::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIActor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_administrator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anonymous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impersonation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_system.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
