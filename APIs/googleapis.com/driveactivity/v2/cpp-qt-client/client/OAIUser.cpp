/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_deleted_user_isSet = false;
    m_deleted_user_isValid = false;

    m_known_user_isSet = false;
    m_known_user_isValid = false;

    m_unknown_user_isSet = false;
    m_unknown_user_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_deleted_user_isValid = ::OpenAPI::fromJsonValue(m_deleted_user, json[QString("deletedUser")]);
    m_deleted_user_isSet = !json[QString("deletedUser")].isNull() && m_deleted_user_isValid;

    m_known_user_isValid = ::OpenAPI::fromJsonValue(m_known_user, json[QString("knownUser")]);
    m_known_user_isSet = !json[QString("knownUser")].isNull() && m_known_user_isValid;

    m_unknown_user_isValid = ::OpenAPI::fromJsonValue(m_unknown_user, json[QString("unknownUser")]);
    m_unknown_user_isSet = !json[QString("unknownUser")].isNull() && m_unknown_user_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_deleted_user_isSet) {
        obj.insert(QString("deletedUser"), ::OpenAPI::toJsonValue(m_deleted_user));
    }
    if (m_known_user.isSet()) {
        obj.insert(QString("knownUser"), ::OpenAPI::toJsonValue(m_known_user));
    }
    if (m_unknown_user_isSet) {
        obj.insert(QString("unknownUser"), ::OpenAPI::toJsonValue(m_unknown_user));
    }
    return obj;
}

OAIObject OAIUser::getDeletedUser() const {
    return m_deleted_user;
}
void OAIUser::setDeletedUser(const OAIObject &deleted_user) {
    m_deleted_user = deleted_user;
    m_deleted_user_isSet = true;
}

bool OAIUser::is_deleted_user_Set() const{
    return m_deleted_user_isSet;
}

bool OAIUser::is_deleted_user_Valid() const{
    return m_deleted_user_isValid;
}

OAIKnownUser OAIUser::getKnownUser() const {
    return m_known_user;
}
void OAIUser::setKnownUser(const OAIKnownUser &known_user) {
    m_known_user = known_user;
    m_known_user_isSet = true;
}

bool OAIUser::is_known_user_Set() const{
    return m_known_user_isSet;
}

bool OAIUser::is_known_user_Valid() const{
    return m_known_user_isValid;
}

OAIObject OAIUser::getUnknownUser() const {
    return m_unknown_user;
}
void OAIUser::setUnknownUser(const OAIObject &unknown_user) {
    m_unknown_user = unknown_user;
    m_unknown_user_isSet = true;
}

bool OAIUser::is_unknown_user_Set() const{
    return m_unknown_user_isSet;
}

bool OAIUser::is_unknown_user_Valid() const{
    return m_unknown_user_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deleted_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_known_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unknown_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
