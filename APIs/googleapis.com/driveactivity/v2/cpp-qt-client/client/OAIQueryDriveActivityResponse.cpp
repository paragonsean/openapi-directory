/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryDriveActivityResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryDriveActivityResponse::OAIQueryDriveActivityResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryDriveActivityResponse::OAIQueryDriveActivityResponse() {
    this->initializeModel();
}

OAIQueryDriveActivityResponse::~OAIQueryDriveActivityResponse() {}

void OAIQueryDriveActivityResponse::initializeModel() {

    m_activities_isSet = false;
    m_activities_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIQueryDriveActivityResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryDriveActivityResponse::fromJsonObject(QJsonObject json) {

    m_activities_isValid = ::OpenAPI::fromJsonValue(m_activities, json[QString("activities")]);
    m_activities_isSet = !json[QString("activities")].isNull() && m_activities_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIQueryDriveActivityResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryDriveActivityResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_activities.size() > 0) {
        obj.insert(QString("activities"), ::OpenAPI::toJsonValue(m_activities));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIDriveActivity> OAIQueryDriveActivityResponse::getActivities() const {
    return m_activities;
}
void OAIQueryDriveActivityResponse::setActivities(const QList<OAIDriveActivity> &activities) {
    m_activities = activities;
    m_activities_isSet = true;
}

bool OAIQueryDriveActivityResponse::is_activities_Set() const{
    return m_activities_isSet;
}

bool OAIQueryDriveActivityResponse::is_activities_Valid() const{
    return m_activities_isValid;
}

QString OAIQueryDriveActivityResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIQueryDriveActivityResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIQueryDriveActivityResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIQueryDriveActivityResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIQueryDriveActivityResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryDriveActivityResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
