/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldValue::OAIFieldValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldValue::OAIFieldValue() {
    this->initializeModel();
}

OAIFieldValue::~OAIFieldValue() {}

void OAIFieldValue::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_integer_isSet = false;
    m_integer_isValid = false;

    m_selection_isSet = false;
    m_selection_isValid = false;

    m_selection_list_isSet = false;
    m_selection_list_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_text_list_isSet = false;
    m_text_list_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_list_isSet = false;
    m_user_list_isValid = false;
}

void OAIFieldValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldValue::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_integer_isValid = ::OpenAPI::fromJsonValue(m_integer, json[QString("integer")]);
    m_integer_isSet = !json[QString("integer")].isNull() && m_integer_isValid;

    m_selection_isValid = ::OpenAPI::fromJsonValue(m_selection, json[QString("selection")]);
    m_selection_isSet = !json[QString("selection")].isNull() && m_selection_isValid;

    m_selection_list_isValid = ::OpenAPI::fromJsonValue(m_selection_list, json[QString("selectionList")]);
    m_selection_list_isSet = !json[QString("selectionList")].isNull() && m_selection_list_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_text_list_isValid = ::OpenAPI::fromJsonValue(m_text_list, json[QString("textList")]);
    m_text_list_isSet = !json[QString("textList")].isNull() && m_text_list_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_list_isValid = ::OpenAPI::fromJsonValue(m_user_list, json[QString("userList")]);
    m_user_list_isSet = !json[QString("userList")].isNull() && m_user_list_isValid;
}

QString OAIFieldValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldValue::asJsonObject() const {
    QJsonObject obj;
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_integer.isSet()) {
        obj.insert(QString("integer"), ::OpenAPI::toJsonValue(m_integer));
    }
    if (m_selection.isSet()) {
        obj.insert(QString("selection"), ::OpenAPI::toJsonValue(m_selection));
    }
    if (m_selection_list.isSet()) {
        obj.insert(QString("selectionList"), ::OpenAPI::toJsonValue(m_selection_list));
    }
    if (m_text.isSet()) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_text_list.isSet()) {
        obj.insert(QString("textList"), ::OpenAPI::toJsonValue(m_text_list));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_list.isSet()) {
        obj.insert(QString("userList"), ::OpenAPI::toJsonValue(m_user_list));
    }
    return obj;
}

OAIDate OAIFieldValue::getDate() const {
    return m_date;
}
void OAIFieldValue::setDate(const OAIDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIFieldValue::is_date_Set() const{
    return m_date_isSet;
}

bool OAIFieldValue::is_date_Valid() const{
    return m_date_isValid;
}

Integer OAIFieldValue::getInteger() const {
    return m_integer;
}
void OAIFieldValue::setInteger(const Integer &integer) {
    m_integer = integer;
    m_integer_isSet = true;
}

bool OAIFieldValue::is_integer_Set() const{
    return m_integer_isSet;
}

bool OAIFieldValue::is_integer_Valid() const{
    return m_integer_isValid;
}

OAISelection OAIFieldValue::getSelection() const {
    return m_selection;
}
void OAIFieldValue::setSelection(const OAISelection &selection) {
    m_selection = selection;
    m_selection_isSet = true;
}

bool OAIFieldValue::is_selection_Set() const{
    return m_selection_isSet;
}

bool OAIFieldValue::is_selection_Valid() const{
    return m_selection_isValid;
}

OAISelectionList OAIFieldValue::getSelectionList() const {
    return m_selection_list;
}
void OAIFieldValue::setSelectionList(const OAISelectionList &selection_list) {
    m_selection_list = selection_list;
    m_selection_list_isSet = true;
}

bool OAIFieldValue::is_selection_list_Set() const{
    return m_selection_list_isSet;
}

bool OAIFieldValue::is_selection_list_Valid() const{
    return m_selection_list_isValid;
}

OAIText OAIFieldValue::getText() const {
    return m_text;
}
void OAIFieldValue::setText(const OAIText &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIFieldValue::is_text_Set() const{
    return m_text_isSet;
}

bool OAIFieldValue::is_text_Valid() const{
    return m_text_isValid;
}

OAITextList OAIFieldValue::getTextList() const {
    return m_text_list;
}
void OAIFieldValue::setTextList(const OAITextList &text_list) {
    m_text_list = text_list;
    m_text_list_isSet = true;
}

bool OAIFieldValue::is_text_list_Set() const{
    return m_text_list_isSet;
}

bool OAIFieldValue::is_text_list_Valid() const{
    return m_text_list_isValid;
}

OAISingleUser OAIFieldValue::getUser() const {
    return m_user;
}
void OAIFieldValue::setUser(const OAISingleUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIFieldValue::is_user_Set() const{
    return m_user_isSet;
}

bool OAIFieldValue::is_user_Valid() const{
    return m_user_isValid;
}

OAIUserList OAIFieldValue::getUserList() const {
    return m_user_list;
}
void OAIFieldValue::setUserList(const OAIUserList &user_list) {
    m_user_list = user_list;
    m_user_list_isSet = true;
}

bool OAIFieldValue::is_user_list_Set() const{
    return m_user_list_isSet;
}

bool OAIFieldValue::is_user_list_Valid() const{
    return m_user_list_isValid;
}

bool OAIFieldValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
