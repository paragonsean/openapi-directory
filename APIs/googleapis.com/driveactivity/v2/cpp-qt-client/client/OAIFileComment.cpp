/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileComment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileComment::OAIFileComment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileComment::OAIFileComment() {
    this->initializeModel();
}

OAIFileComment::~OAIFileComment() {}

void OAIFileComment::initializeModel() {

    m_legacy_comment_id_isSet = false;
    m_legacy_comment_id_isValid = false;

    m_legacy_discussion_id_isSet = false;
    m_legacy_discussion_id_isValid = false;

    m_link_to_discussion_isSet = false;
    m_link_to_discussion_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;
}

void OAIFileComment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileComment::fromJsonObject(QJsonObject json) {

    m_legacy_comment_id_isValid = ::OpenAPI::fromJsonValue(m_legacy_comment_id, json[QString("legacyCommentId")]);
    m_legacy_comment_id_isSet = !json[QString("legacyCommentId")].isNull() && m_legacy_comment_id_isValid;

    m_legacy_discussion_id_isValid = ::OpenAPI::fromJsonValue(m_legacy_discussion_id, json[QString("legacyDiscussionId")]);
    m_legacy_discussion_id_isSet = !json[QString("legacyDiscussionId")].isNull() && m_legacy_discussion_id_isValid;

    m_link_to_discussion_isValid = ::OpenAPI::fromJsonValue(m_link_to_discussion, json[QString("linkToDiscussion")]);
    m_link_to_discussion_isSet = !json[QString("linkToDiscussion")].isNull() && m_link_to_discussion_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;
}

QString OAIFileComment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileComment::asJsonObject() const {
    QJsonObject obj;
    if (m_legacy_comment_id_isSet) {
        obj.insert(QString("legacyCommentId"), ::OpenAPI::toJsonValue(m_legacy_comment_id));
    }
    if (m_legacy_discussion_id_isSet) {
        obj.insert(QString("legacyDiscussionId"), ::OpenAPI::toJsonValue(m_legacy_discussion_id));
    }
    if (m_link_to_discussion_isSet) {
        obj.insert(QString("linkToDiscussion"), ::OpenAPI::toJsonValue(m_link_to_discussion));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    return obj;
}

QString OAIFileComment::getLegacyCommentId() const {
    return m_legacy_comment_id;
}
void OAIFileComment::setLegacyCommentId(const QString &legacy_comment_id) {
    m_legacy_comment_id = legacy_comment_id;
    m_legacy_comment_id_isSet = true;
}

bool OAIFileComment::is_legacy_comment_id_Set() const{
    return m_legacy_comment_id_isSet;
}

bool OAIFileComment::is_legacy_comment_id_Valid() const{
    return m_legacy_comment_id_isValid;
}

QString OAIFileComment::getLegacyDiscussionId() const {
    return m_legacy_discussion_id;
}
void OAIFileComment::setLegacyDiscussionId(const QString &legacy_discussion_id) {
    m_legacy_discussion_id = legacy_discussion_id;
    m_legacy_discussion_id_isSet = true;
}

bool OAIFileComment::is_legacy_discussion_id_Set() const{
    return m_legacy_discussion_id_isSet;
}

bool OAIFileComment::is_legacy_discussion_id_Valid() const{
    return m_legacy_discussion_id_isValid;
}

QString OAIFileComment::getLinkToDiscussion() const {
    return m_link_to_discussion;
}
void OAIFileComment::setLinkToDiscussion(const QString &link_to_discussion) {
    m_link_to_discussion = link_to_discussion;
    m_link_to_discussion_isSet = true;
}

bool OAIFileComment::is_link_to_discussion_Set() const{
    return m_link_to_discussion_isSet;
}

bool OAIFileComment::is_link_to_discussion_Valid() const{
    return m_link_to_discussion_isValid;
}

OAIDriveItem OAIFileComment::getParent() const {
    return m_parent;
}
void OAIFileComment::setParent(const OAIDriveItem &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIFileComment::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIFileComment::is_parent_Valid() const{
    return m_parent_isValid;
}

bool OAIFileComment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_legacy_comment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_discussion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_to_discussion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileComment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
