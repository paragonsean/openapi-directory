/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDriveActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDriveActivity::OAIDriveActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDriveActivity::OAIDriveActivity() {
    this->initializeModel();
}

OAIDriveActivity::~OAIDriveActivity() {}

void OAIDriveActivity::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_actors_isSet = false;
    m_actors_isValid = false;

    m_primary_action_detail_isSet = false;
    m_primary_action_detail_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;

    m_time_range_isSet = false;
    m_time_range_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIDriveActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDriveActivity::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_actors_isValid = ::OpenAPI::fromJsonValue(m_actors, json[QString("actors")]);
    m_actors_isSet = !json[QString("actors")].isNull() && m_actors_isValid;

    m_primary_action_detail_isValid = ::OpenAPI::fromJsonValue(m_primary_action_detail, json[QString("primaryActionDetail")]);
    m_primary_action_detail_isSet = !json[QString("primaryActionDetail")].isNull() && m_primary_action_detail_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;

    m_time_range_isValid = ::OpenAPI::fromJsonValue(m_time_range, json[QString("timeRange")]);
    m_time_range_isSet = !json[QString("timeRange")].isNull() && m_time_range_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIDriveActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDriveActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_actors.size() > 0) {
        obj.insert(QString("actors"), ::OpenAPI::toJsonValue(m_actors));
    }
    if (m_primary_action_detail.isSet()) {
        obj.insert(QString("primaryActionDetail"), ::OpenAPI::toJsonValue(m_primary_action_detail));
    }
    if (m_targets.size() > 0) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    if (m_time_range.isSet()) {
        obj.insert(QString("timeRange"), ::OpenAPI::toJsonValue(m_time_range));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QList<OAIAction> OAIDriveActivity::getActions() const {
    return m_actions;
}
void OAIDriveActivity::setActions(const QList<OAIAction> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIDriveActivity::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIDriveActivity::is_actions_Valid() const{
    return m_actions_isValid;
}

QList<OAIActor> OAIDriveActivity::getActors() const {
    return m_actors;
}
void OAIDriveActivity::setActors(const QList<OAIActor> &actors) {
    m_actors = actors;
    m_actors_isSet = true;
}

bool OAIDriveActivity::is_actors_Set() const{
    return m_actors_isSet;
}

bool OAIDriveActivity::is_actors_Valid() const{
    return m_actors_isValid;
}

OAIActionDetail OAIDriveActivity::getPrimaryActionDetail() const {
    return m_primary_action_detail;
}
void OAIDriveActivity::setPrimaryActionDetail(const OAIActionDetail &primary_action_detail) {
    m_primary_action_detail = primary_action_detail;
    m_primary_action_detail_isSet = true;
}

bool OAIDriveActivity::is_primary_action_detail_Set() const{
    return m_primary_action_detail_isSet;
}

bool OAIDriveActivity::is_primary_action_detail_Valid() const{
    return m_primary_action_detail_isValid;
}

QList<OAITarget> OAIDriveActivity::getTargets() const {
    return m_targets;
}
void OAIDriveActivity::setTargets(const QList<OAITarget> &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIDriveActivity::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIDriveActivity::is_targets_Valid() const{
    return m_targets_isValid;
}

OAITimeRange OAIDriveActivity::getTimeRange() const {
    return m_time_range;
}
void OAIDriveActivity::setTimeRange(const OAITimeRange &time_range) {
    m_time_range = time_range;
    m_time_range_isSet = true;
}

bool OAIDriveActivity::is_time_range_Set() const{
    return m_time_range_isSet;
}

bool OAIDriveActivity::is_time_range_Valid() const{
    return m_time_range_isValid;
}

QString OAIDriveActivity::getTimestamp() const {
    return m_timestamp;
}
void OAIDriveActivity::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIDriveActivity::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIDriveActivity::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIDriveActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_actors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_action_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDriveActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
