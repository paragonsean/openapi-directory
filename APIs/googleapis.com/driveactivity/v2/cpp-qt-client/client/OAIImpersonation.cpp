/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImpersonation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImpersonation::OAIImpersonation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImpersonation::OAIImpersonation() {
    this->initializeModel();
}

OAIImpersonation::~OAIImpersonation() {}

void OAIImpersonation::initializeModel() {

    m_impersonated_user_isSet = false;
    m_impersonated_user_isValid = false;
}

void OAIImpersonation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImpersonation::fromJsonObject(QJsonObject json) {

    m_impersonated_user_isValid = ::OpenAPI::fromJsonValue(m_impersonated_user, json[QString("impersonatedUser")]);
    m_impersonated_user_isSet = !json[QString("impersonatedUser")].isNull() && m_impersonated_user_isValid;
}

QString OAIImpersonation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImpersonation::asJsonObject() const {
    QJsonObject obj;
    if (m_impersonated_user.isSet()) {
        obj.insert(QString("impersonatedUser"), ::OpenAPI::toJsonValue(m_impersonated_user));
    }
    return obj;
}

OAIUser OAIImpersonation::getImpersonatedUser() const {
    return m_impersonated_user;
}
void OAIImpersonation::setImpersonatedUser(const OAIUser &impersonated_user) {
    m_impersonated_user = impersonated_user;
    m_impersonated_user_isSet = true;
}

bool OAIImpersonation::is_impersonated_user_Set() const{
    return m_impersonated_user_isSet;
}

bool OAIImpersonation::is_impersonated_user_Valid() const{
    return m_impersonated_user_isValid;
}

bool OAIImpersonation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_impersonated_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImpersonation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
