/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOwner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOwner::OAIOwner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOwner::OAIOwner() {
    this->initializeModel();
}

OAIOwner::~OAIOwner() {}

void OAIOwner::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_drive_isSet = false;
    m_drive_isValid = false;

    m_team_drive_isSet = false;
    m_team_drive_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIOwner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOwner::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_drive_isValid = ::OpenAPI::fromJsonValue(m_drive, json[QString("drive")]);
    m_drive_isSet = !json[QString("drive")].isNull() && m_drive_isValid;

    m_team_drive_isValid = ::OpenAPI::fromJsonValue(m_team_drive, json[QString("teamDrive")]);
    m_team_drive_isSet = !json[QString("teamDrive")].isNull() && m_team_drive_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIOwner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOwner::asJsonObject() const {
    QJsonObject obj;
    if (m_domain.isSet()) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_drive.isSet()) {
        obj.insert(QString("drive"), ::OpenAPI::toJsonValue(m_drive));
    }
    if (m_team_drive.isSet()) {
        obj.insert(QString("teamDrive"), ::OpenAPI::toJsonValue(m_team_drive));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIDomain OAIOwner::getDomain() const {
    return m_domain;
}
void OAIOwner::setDomain(const OAIDomain &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIOwner::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIOwner::is_domain_Valid() const{
    return m_domain_isValid;
}

OAIDriveReference OAIOwner::getDrive() const {
    return m_drive;
}
void OAIOwner::setDrive(const OAIDriveReference &drive) {
    m_drive = drive;
    m_drive_isSet = true;
}

bool OAIOwner::is_drive_Set() const{
    return m_drive_isSet;
}

bool OAIOwner::is_drive_Valid() const{
    return m_drive_isValid;
}

OAITeamDriveReference OAIOwner::getTeamDrive() const {
    return m_team_drive;
}
void OAIOwner::setTeamDrive(const OAITeamDriveReference &team_drive) {
    m_team_drive = team_drive;
    m_team_drive_isSet = true;
}

bool OAIOwner::is_team_drive_Set() const{
    return m_team_drive_isSet;
}

bool OAIOwner::is_team_drive_Valid() const{
    return m_team_drive_isValid;
}

OAIUser OAIOwner::getUser() const {
    return m_user;
}
void OAIOwner::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIOwner::is_user_Set() const{
    return m_user_isSet;
}

bool OAIOwner::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIOwner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_drive.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOwner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
