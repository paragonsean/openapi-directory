/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreate::OAICreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreate::OAICreate() {
    this->initializeModel();
}

OAICreate::~OAICreate() {}

void OAICreate::initializeModel() {

    m_copy_isSet = false;
    m_copy_isValid = false;

    m_r_new_isSet = false;
    m_r_new_isValid = false;

    m_upload_isSet = false;
    m_upload_isValid = false;
}

void OAICreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreate::fromJsonObject(QJsonObject json) {

    m_copy_isValid = ::OpenAPI::fromJsonValue(m_copy, json[QString("copy")]);
    m_copy_isSet = !json[QString("copy")].isNull() && m_copy_isValid;

    m_r_new_isValid = ::OpenAPI::fromJsonValue(m_r_new, json[QString("new")]);
    m_r_new_isSet = !json[QString("new")].isNull() && m_r_new_isValid;

    m_upload_isValid = ::OpenAPI::fromJsonValue(m_upload, json[QString("upload")]);
    m_upload_isSet = !json[QString("upload")].isNull() && m_upload_isValid;
}

QString OAICreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreate::asJsonObject() const {
    QJsonObject obj;
    if (m_copy.isSet()) {
        obj.insert(QString("copy"), ::OpenAPI::toJsonValue(m_copy));
    }
    if (m_r_new_isSet) {
        obj.insert(QString("new"), ::OpenAPI::toJsonValue(m_r_new));
    }
    if (m_upload_isSet) {
        obj.insert(QString("upload"), ::OpenAPI::toJsonValue(m_upload));
    }
    return obj;
}

OAICopy OAICreate::getCopy() const {
    return m_copy;
}
void OAICreate::setCopy(const OAICopy &copy) {
    m_copy = copy;
    m_copy_isSet = true;
}

bool OAICreate::is_copy_Set() const{
    return m_copy_isSet;
}

bool OAICreate::is_copy_Valid() const{
    return m_copy_isValid;
}

OAIObject OAICreate::getRNew() const {
    return m_r_new;
}
void OAICreate::setRNew(const OAIObject &r_new) {
    m_r_new = r_new;
    m_r_new_isSet = true;
}

bool OAICreate::is_r_new_Set() const{
    return m_r_new_isSet;
}

bool OAICreate::is_r_new_Valid() const{
    return m_r_new_isValid;
}

OAIObject OAICreate::getUpload() const {
    return m_upload;
}
void OAICreate::setUpload(const OAIObject &upload) {
    m_upload = upload;
    m_upload_isSet = true;
}

bool OAICreate::is_upload_Set() const{
    return m_upload_isSet;
}

bool OAICreate::is_upload_Valid() const{
    return m_upload_isValid;
}

bool OAICreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_copy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_new_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
