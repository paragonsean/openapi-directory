/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsolidationStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsolidationStrategy::OAIConsolidationStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsolidationStrategy::OAIConsolidationStrategy() {
    this->initializeModel();
}

OAIConsolidationStrategy::~OAIConsolidationStrategy() {}

void OAIConsolidationStrategy::initializeModel() {

    m_legacy_isSet = false;
    m_legacy_isValid = false;

    m_none_isSet = false;
    m_none_isValid = false;
}

void OAIConsolidationStrategy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsolidationStrategy::fromJsonObject(QJsonObject json) {

    m_legacy_isValid = ::OpenAPI::fromJsonValue(m_legacy, json[QString("legacy")]);
    m_legacy_isSet = !json[QString("legacy")].isNull() && m_legacy_isValid;

    m_none_isValid = ::OpenAPI::fromJsonValue(m_none, json[QString("none")]);
    m_none_isSet = !json[QString("none")].isNull() && m_none_isValid;
}

QString OAIConsolidationStrategy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsolidationStrategy::asJsonObject() const {
    QJsonObject obj;
    if (m_legacy_isSet) {
        obj.insert(QString("legacy"), ::OpenAPI::toJsonValue(m_legacy));
    }
    if (m_none_isSet) {
        obj.insert(QString("none"), ::OpenAPI::toJsonValue(m_none));
    }
    return obj;
}

OAIObject OAIConsolidationStrategy::getLegacy() const {
    return m_legacy;
}
void OAIConsolidationStrategy::setLegacy(const OAIObject &legacy) {
    m_legacy = legacy;
    m_legacy_isSet = true;
}

bool OAIConsolidationStrategy::is_legacy_Set() const{
    return m_legacy_isSet;
}

bool OAIConsolidationStrategy::is_legacy_Valid() const{
    return m_legacy_isValid;
}

OAIObject OAIConsolidationStrategy::getNone() const {
    return m_none;
}
void OAIConsolidationStrategy::setNone(const OAIObject &none) {
    m_none = none;
    m_none_isSet = true;
}

bool OAIConsolidationStrategy::is_none_Set() const{
    return m_none_isSet;
}

bool OAIConsolidationStrategy::is_none_Valid() const{
    return m_none_isValid;
}

bool OAIConsolidationStrategy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_legacy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_none_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsolidationStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
