/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComment::OAIComment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComment::OAIComment() {
    this->initializeModel();
}

OAIComment::~OAIComment() {}

void OAIComment::initializeModel() {

    m_assignment_isSet = false;
    m_assignment_isValid = false;

    m_mentioned_users_isSet = false;
    m_mentioned_users_isValid = false;

    m_post_isSet = false;
    m_post_isValid = false;

    m_suggestion_isSet = false;
    m_suggestion_isValid = false;
}

void OAIComment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComment::fromJsonObject(QJsonObject json) {

    m_assignment_isValid = ::OpenAPI::fromJsonValue(m_assignment, json[QString("assignment")]);
    m_assignment_isSet = !json[QString("assignment")].isNull() && m_assignment_isValid;

    m_mentioned_users_isValid = ::OpenAPI::fromJsonValue(m_mentioned_users, json[QString("mentionedUsers")]);
    m_mentioned_users_isSet = !json[QString("mentionedUsers")].isNull() && m_mentioned_users_isValid;

    m_post_isValid = ::OpenAPI::fromJsonValue(m_post, json[QString("post")]);
    m_post_isSet = !json[QString("post")].isNull() && m_post_isValid;

    m_suggestion_isValid = ::OpenAPI::fromJsonValue(m_suggestion, json[QString("suggestion")]);
    m_suggestion_isSet = !json[QString("suggestion")].isNull() && m_suggestion_isValid;
}

QString OAIComment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComment::asJsonObject() const {
    QJsonObject obj;
    if (m_assignment.isSet()) {
        obj.insert(QString("assignment"), ::OpenAPI::toJsonValue(m_assignment));
    }
    if (m_mentioned_users.size() > 0) {
        obj.insert(QString("mentionedUsers"), ::OpenAPI::toJsonValue(m_mentioned_users));
    }
    if (m_post.isSet()) {
        obj.insert(QString("post"), ::OpenAPI::toJsonValue(m_post));
    }
    if (m_suggestion.isSet()) {
        obj.insert(QString("suggestion"), ::OpenAPI::toJsonValue(m_suggestion));
    }
    return obj;
}

OAIAssignment OAIComment::getAssignment() const {
    return m_assignment;
}
void OAIComment::setAssignment(const OAIAssignment &assignment) {
    m_assignment = assignment;
    m_assignment_isSet = true;
}

bool OAIComment::is_assignment_Set() const{
    return m_assignment_isSet;
}

bool OAIComment::is_assignment_Valid() const{
    return m_assignment_isValid;
}

QList<OAIUser> OAIComment::getMentionedUsers() const {
    return m_mentioned_users;
}
void OAIComment::setMentionedUsers(const QList<OAIUser> &mentioned_users) {
    m_mentioned_users = mentioned_users;
    m_mentioned_users_isSet = true;
}

bool OAIComment::is_mentioned_users_Set() const{
    return m_mentioned_users_isSet;
}

bool OAIComment::is_mentioned_users_Valid() const{
    return m_mentioned_users_isValid;
}

OAIPost OAIComment::getPost() const {
    return m_post;
}
void OAIComment::setPost(const OAIPost &post) {
    m_post = post;
    m_post_isSet = true;
}

bool OAIComment::is_post_Set() const{
    return m_post_isSet;
}

bool OAIComment::is_post_Valid() const{
    return m_post_isValid;
}

OAISuggestion OAIComment::getSuggestion() const {
    return m_suggestion;
}
void OAIComment::setSuggestion(const OAISuggestion &suggestion) {
    m_suggestion = suggestion;
    m_suggestion_isSet = true;
}

bool OAIComment::is_suggestion_Set() const{
    return m_suggestion_isSet;
}

bool OAIComment::is_suggestion_Valid() const{
    return m_suggestion_isValid;
}

bool OAIComment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentioned_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_post.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestion.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
