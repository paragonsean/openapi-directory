/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldValueChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldValueChange::OAIFieldValueChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldValueChange::OAIFieldValueChange() {
    this->initializeModel();
}

OAIFieldValueChange::~OAIFieldValueChange() {}

void OAIFieldValueChange::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_new_value_isSet = false;
    m_new_value_isValid = false;

    m_old_value_isSet = false;
    m_old_value_isValid = false;
}

void OAIFieldValueChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldValueChange::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("fieldId")]);
    m_field_id_isSet = !json[QString("fieldId")].isNull() && m_field_id_isValid;

    m_new_value_isValid = ::OpenAPI::fromJsonValue(m_new_value, json[QString("newValue")]);
    m_new_value_isSet = !json[QString("newValue")].isNull() && m_new_value_isValid;

    m_old_value_isValid = ::OpenAPI::fromJsonValue(m_old_value, json[QString("oldValue")]);
    m_old_value_isSet = !json[QString("oldValue")].isNull() && m_old_value_isValid;
}

QString OAIFieldValueChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldValueChange::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_field_id_isSet) {
        obj.insert(QString("fieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_new_value.isSet()) {
        obj.insert(QString("newValue"), ::OpenAPI::toJsonValue(m_new_value));
    }
    if (m_old_value.isSet()) {
        obj.insert(QString("oldValue"), ::OpenAPI::toJsonValue(m_old_value));
    }
    return obj;
}

QString OAIFieldValueChange::getDisplayName() const {
    return m_display_name;
}
void OAIFieldValueChange::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIFieldValueChange::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIFieldValueChange::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIFieldValueChange::getFieldId() const {
    return m_field_id;
}
void OAIFieldValueChange::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIFieldValueChange::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIFieldValueChange::is_field_id_Valid() const{
    return m_field_id_isValid;
}

OAIFieldValue OAIFieldValueChange::getNewValue() const {
    return m_new_value;
}
void OAIFieldValueChange::setNewValue(const OAIFieldValue &new_value) {
    m_new_value = new_value;
    m_new_value_isSet = true;
}

bool OAIFieldValueChange::is_new_value_Set() const{
    return m_new_value_isSet;
}

bool OAIFieldValueChange::is_new_value_Valid() const{
    return m_new_value_isValid;
}

OAIFieldValue OAIFieldValueChange::getOldValue() const {
    return m_old_value;
}
void OAIFieldValueChange::setOldValue(const OAIFieldValue &old_value) {
    m_old_value = old_value;
    m_old_value_isSet = true;
}

bool OAIFieldValueChange::is_old_value_Set() const{
    return m_old_value_isSet;
}

bool OAIFieldValueChange::is_old_value_Valid() const{
    return m_old_value_isValid;
}

bool OAIFieldValueChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldValueChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
