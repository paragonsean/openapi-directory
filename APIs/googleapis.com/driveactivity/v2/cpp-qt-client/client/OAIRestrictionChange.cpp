/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestrictionChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestrictionChange::OAIRestrictionChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestrictionChange::OAIRestrictionChange() {
    this->initializeModel();
}

OAIRestrictionChange::~OAIRestrictionChange() {}

void OAIRestrictionChange::initializeModel() {

    m_feature_isSet = false;
    m_feature_isValid = false;

    m_new_restriction_isSet = false;
    m_new_restriction_isValid = false;
}

void OAIRestrictionChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestrictionChange::fromJsonObject(QJsonObject json) {

    m_feature_isValid = ::OpenAPI::fromJsonValue(m_feature, json[QString("feature")]);
    m_feature_isSet = !json[QString("feature")].isNull() && m_feature_isValid;

    m_new_restriction_isValid = ::OpenAPI::fromJsonValue(m_new_restriction, json[QString("newRestriction")]);
    m_new_restriction_isSet = !json[QString("newRestriction")].isNull() && m_new_restriction_isValid;
}

QString OAIRestrictionChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestrictionChange::asJsonObject() const {
    QJsonObject obj;
    if (m_feature_isSet) {
        obj.insert(QString("feature"), ::OpenAPI::toJsonValue(m_feature));
    }
    if (m_new_restriction_isSet) {
        obj.insert(QString("newRestriction"), ::OpenAPI::toJsonValue(m_new_restriction));
    }
    return obj;
}

QString OAIRestrictionChange::getFeature() const {
    return m_feature;
}
void OAIRestrictionChange::setFeature(const QString &feature) {
    m_feature = feature;
    m_feature_isSet = true;
}

bool OAIRestrictionChange::is_feature_Set() const{
    return m_feature_isSet;
}

bool OAIRestrictionChange::is_feature_Valid() const{
    return m_feature_isValid;
}

QString OAIRestrictionChange::getNewRestriction() const {
    return m_new_restriction;
}
void OAIRestrictionChange::setNewRestriction(const QString &new_restriction) {
    m_new_restriction = new_restriction;
    m_new_restriction_isSet = true;
}

bool OAIRestrictionChange::is_new_restriction_Set() const{
    return m_new_restriction_isSet;
}

bool OAIRestrictionChange::is_new_restriction_Valid() const{
    return m_new_restriction_isValid;
}

bool OAIRestrictionChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_restriction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestrictionChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
