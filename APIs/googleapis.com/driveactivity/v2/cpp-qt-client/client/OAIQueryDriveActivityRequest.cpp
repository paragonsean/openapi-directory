/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryDriveActivityRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryDriveActivityRequest::OAIQueryDriveActivityRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryDriveActivityRequest::OAIQueryDriveActivityRequest() {
    this->initializeModel();
}

OAIQueryDriveActivityRequest::~OAIQueryDriveActivityRequest() {}

void OAIQueryDriveActivityRequest::initializeModel() {

    m_ancestor_name_isSet = false;
    m_ancestor_name_isValid = false;

    m_consolidation_strategy_isSet = false;
    m_consolidation_strategy_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_item_name_isSet = false;
    m_item_name_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;
}

void OAIQueryDriveActivityRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryDriveActivityRequest::fromJsonObject(QJsonObject json) {

    m_ancestor_name_isValid = ::OpenAPI::fromJsonValue(m_ancestor_name, json[QString("ancestorName")]);
    m_ancestor_name_isSet = !json[QString("ancestorName")].isNull() && m_ancestor_name_isValid;

    m_consolidation_strategy_isValid = ::OpenAPI::fromJsonValue(m_consolidation_strategy, json[QString("consolidationStrategy")]);
    m_consolidation_strategy_isSet = !json[QString("consolidationStrategy")].isNull() && m_consolidation_strategy_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_item_name_isValid = ::OpenAPI::fromJsonValue(m_item_name, json[QString("itemName")]);
    m_item_name_isSet = !json[QString("itemName")].isNull() && m_item_name_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;
}

QString OAIQueryDriveActivityRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryDriveActivityRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_ancestor_name_isSet) {
        obj.insert(QString("ancestorName"), ::OpenAPI::toJsonValue(m_ancestor_name));
    }
    if (m_consolidation_strategy.isSet()) {
        obj.insert(QString("consolidationStrategy"), ::OpenAPI::toJsonValue(m_consolidation_strategy));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_item_name_isSet) {
        obj.insert(QString("itemName"), ::OpenAPI::toJsonValue(m_item_name));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    return obj;
}

QString OAIQueryDriveActivityRequest::getAncestorName() const {
    return m_ancestor_name;
}
void OAIQueryDriveActivityRequest::setAncestorName(const QString &ancestor_name) {
    m_ancestor_name = ancestor_name;
    m_ancestor_name_isSet = true;
}

bool OAIQueryDriveActivityRequest::is_ancestor_name_Set() const{
    return m_ancestor_name_isSet;
}

bool OAIQueryDriveActivityRequest::is_ancestor_name_Valid() const{
    return m_ancestor_name_isValid;
}

OAIConsolidationStrategy OAIQueryDriveActivityRequest::getConsolidationStrategy() const {
    return m_consolidation_strategy;
}
void OAIQueryDriveActivityRequest::setConsolidationStrategy(const OAIConsolidationStrategy &consolidation_strategy) {
    m_consolidation_strategy = consolidation_strategy;
    m_consolidation_strategy_isSet = true;
}

bool OAIQueryDriveActivityRequest::is_consolidation_strategy_Set() const{
    return m_consolidation_strategy_isSet;
}

bool OAIQueryDriveActivityRequest::is_consolidation_strategy_Valid() const{
    return m_consolidation_strategy_isValid;
}

QString OAIQueryDriveActivityRequest::getFilter() const {
    return m_filter;
}
void OAIQueryDriveActivityRequest::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIQueryDriveActivityRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIQueryDriveActivityRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIQueryDriveActivityRequest::getItemName() const {
    return m_item_name;
}
void OAIQueryDriveActivityRequest::setItemName(const QString &item_name) {
    m_item_name = item_name;
    m_item_name_isSet = true;
}

bool OAIQueryDriveActivityRequest::is_item_name_Set() const{
    return m_item_name_isSet;
}

bool OAIQueryDriveActivityRequest::is_item_name_Valid() const{
    return m_item_name_isValid;
}

qint32 OAIQueryDriveActivityRequest::getPageSize() const {
    return m_page_size;
}
void OAIQueryDriveActivityRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIQueryDriveActivityRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIQueryDriveActivityRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIQueryDriveActivityRequest::getPageToken() const {
    return m_page_token;
}
void OAIQueryDriveActivityRequest::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIQueryDriveActivityRequest::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIQueryDriveActivityRequest::is_page_token_Valid() const{
    return m_page_token_isValid;
}

bool OAIQueryDriveActivityRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ancestor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consolidation_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryDriveActivityRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
