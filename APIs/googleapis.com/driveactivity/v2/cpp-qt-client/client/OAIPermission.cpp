/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermission::OAIPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermission::OAIPermission() {
    this->initializeModel();
}

OAIPermission::~OAIPermission() {}

void OAIPermission::initializeModel() {

    m_allow_discovery_isSet = false;
    m_allow_discovery_isValid = false;

    m_anyone_isSet = false;
    m_anyone_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermission::fromJsonObject(QJsonObject json) {

    m_allow_discovery_isValid = ::OpenAPI::fromJsonValue(m_allow_discovery, json[QString("allowDiscovery")]);
    m_allow_discovery_isSet = !json[QString("allowDiscovery")].isNull() && m_allow_discovery_isValid;

    m_anyone_isValid = ::OpenAPI::fromJsonValue(m_anyone, json[QString("anyone")]);
    m_anyone_isSet = !json[QString("anyone")].isNull() && m_anyone_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_discovery_isSet) {
        obj.insert(QString("allowDiscovery"), ::OpenAPI::toJsonValue(m_allow_discovery));
    }
    if (m_anyone_isSet) {
        obj.insert(QString("anyone"), ::OpenAPI::toJsonValue(m_anyone));
    }
    if (m_domain.isSet()) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

bool OAIPermission::isAllowDiscovery() const {
    return m_allow_discovery;
}
void OAIPermission::setAllowDiscovery(const bool &allow_discovery) {
    m_allow_discovery = allow_discovery;
    m_allow_discovery_isSet = true;
}

bool OAIPermission::is_allow_discovery_Set() const{
    return m_allow_discovery_isSet;
}

bool OAIPermission::is_allow_discovery_Valid() const{
    return m_allow_discovery_isValid;
}

OAIObject OAIPermission::getAnyone() const {
    return m_anyone;
}
void OAIPermission::setAnyone(const OAIObject &anyone) {
    m_anyone = anyone;
    m_anyone_isSet = true;
}

bool OAIPermission::is_anyone_Set() const{
    return m_anyone_isSet;
}

bool OAIPermission::is_anyone_Valid() const{
    return m_anyone_isValid;
}

OAIDomain OAIPermission::getDomain() const {
    return m_domain;
}
void OAIPermission::setDomain(const OAIDomain &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIPermission::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIPermission::is_domain_Valid() const{
    return m_domain_isValid;
}

OAIGroup OAIPermission::getGroup() const {
    return m_group;
}
void OAIPermission::setGroup(const OAIGroup &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIPermission::is_group_Set() const{
    return m_group_isSet;
}

bool OAIPermission::is_group_Valid() const{
    return m_group_isValid;
}

QString OAIPermission::getRole() const {
    return m_role;
}
void OAIPermission::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIPermission::is_role_Set() const{
    return m_role_isSet;
}

bool OAIPermission::is_role_Valid() const{
    return m_role_isValid;
}

OAIUser OAIPermission::getUser() const {
    return m_user;
}
void OAIPermission::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIPermission::is_user_Set() const{
    return m_user_isSet;
}

bool OAIPermission::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_discovery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anyone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
