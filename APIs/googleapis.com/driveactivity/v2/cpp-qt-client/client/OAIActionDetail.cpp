/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActionDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActionDetail::OAIActionDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActionDetail::OAIActionDetail() {
    this->initializeModel();
}

OAIActionDetail::~OAIActionDetail() {}

void OAIActionDetail::initializeModel() {

    m_applied_label_change_isSet = false;
    m_applied_label_change_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_create_isSet = false;
    m_create_isValid = false;

    m_r_delete_isSet = false;
    m_r_delete_isValid = false;

    m_dlp_change_isSet = false;
    m_dlp_change_isValid = false;

    m_edit_isSet = false;
    m_edit_isValid = false;

    m_move_isSet = false;
    m_move_isValid = false;

    m_permission_change_isSet = false;
    m_permission_change_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_rename_isSet = false;
    m_rename_isValid = false;

    m_restore_isSet = false;
    m_restore_isValid = false;

    m_settings_change_isSet = false;
    m_settings_change_isValid = false;
}

void OAIActionDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActionDetail::fromJsonObject(QJsonObject json) {

    m_applied_label_change_isValid = ::OpenAPI::fromJsonValue(m_applied_label_change, json[QString("appliedLabelChange")]);
    m_applied_label_change_isSet = !json[QString("appliedLabelChange")].isNull() && m_applied_label_change_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_create_isValid = ::OpenAPI::fromJsonValue(m_create, json[QString("create")]);
    m_create_isSet = !json[QString("create")].isNull() && m_create_isValid;

    m_r_delete_isValid = ::OpenAPI::fromJsonValue(m_r_delete, json[QString("delete")]);
    m_r_delete_isSet = !json[QString("delete")].isNull() && m_r_delete_isValid;

    m_dlp_change_isValid = ::OpenAPI::fromJsonValue(m_dlp_change, json[QString("dlpChange")]);
    m_dlp_change_isSet = !json[QString("dlpChange")].isNull() && m_dlp_change_isValid;

    m_edit_isValid = ::OpenAPI::fromJsonValue(m_edit, json[QString("edit")]);
    m_edit_isSet = !json[QString("edit")].isNull() && m_edit_isValid;

    m_move_isValid = ::OpenAPI::fromJsonValue(m_move, json[QString("move")]);
    m_move_isSet = !json[QString("move")].isNull() && m_move_isValid;

    m_permission_change_isValid = ::OpenAPI::fromJsonValue(m_permission_change, json[QString("permissionChange")]);
    m_permission_change_isSet = !json[QString("permissionChange")].isNull() && m_permission_change_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_rename_isValid = ::OpenAPI::fromJsonValue(m_rename, json[QString("rename")]);
    m_rename_isSet = !json[QString("rename")].isNull() && m_rename_isValid;

    m_restore_isValid = ::OpenAPI::fromJsonValue(m_restore, json[QString("restore")]);
    m_restore_isSet = !json[QString("restore")].isNull() && m_restore_isValid;

    m_settings_change_isValid = ::OpenAPI::fromJsonValue(m_settings_change, json[QString("settingsChange")]);
    m_settings_change_isSet = !json[QString("settingsChange")].isNull() && m_settings_change_isValid;
}

QString OAIActionDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActionDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_applied_label_change.isSet()) {
        obj.insert(QString("appliedLabelChange"), ::OpenAPI::toJsonValue(m_applied_label_change));
    }
    if (m_comment.isSet()) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_create.isSet()) {
        obj.insert(QString("create"), ::OpenAPI::toJsonValue(m_create));
    }
    if (m_r_delete.isSet()) {
        obj.insert(QString("delete"), ::OpenAPI::toJsonValue(m_r_delete));
    }
    if (m_dlp_change.isSet()) {
        obj.insert(QString("dlpChange"), ::OpenAPI::toJsonValue(m_dlp_change));
    }
    if (m_edit_isSet) {
        obj.insert(QString("edit"), ::OpenAPI::toJsonValue(m_edit));
    }
    if (m_move.isSet()) {
        obj.insert(QString("move"), ::OpenAPI::toJsonValue(m_move));
    }
    if (m_permission_change.isSet()) {
        obj.insert(QString("permissionChange"), ::OpenAPI::toJsonValue(m_permission_change));
    }
    if (m_reference.isSet()) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_rename.isSet()) {
        obj.insert(QString("rename"), ::OpenAPI::toJsonValue(m_rename));
    }
    if (m_restore.isSet()) {
        obj.insert(QString("restore"), ::OpenAPI::toJsonValue(m_restore));
    }
    if (m_settings_change.isSet()) {
        obj.insert(QString("settingsChange"), ::OpenAPI::toJsonValue(m_settings_change));
    }
    return obj;
}

OAIAppliedLabelChange OAIActionDetail::getAppliedLabelChange() const {
    return m_applied_label_change;
}
void OAIActionDetail::setAppliedLabelChange(const OAIAppliedLabelChange &applied_label_change) {
    m_applied_label_change = applied_label_change;
    m_applied_label_change_isSet = true;
}

bool OAIActionDetail::is_applied_label_change_Set() const{
    return m_applied_label_change_isSet;
}

bool OAIActionDetail::is_applied_label_change_Valid() const{
    return m_applied_label_change_isValid;
}

OAIComment OAIActionDetail::getComment() const {
    return m_comment;
}
void OAIActionDetail::setComment(const OAIComment &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIActionDetail::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIActionDetail::is_comment_Valid() const{
    return m_comment_isValid;
}

OAICreate OAIActionDetail::getCreate() const {
    return m_create;
}
void OAIActionDetail::setCreate(const OAICreate &create) {
    m_create = create;
    m_create_isSet = true;
}

bool OAIActionDetail::is_create_Set() const{
    return m_create_isSet;
}

bool OAIActionDetail::is_create_Valid() const{
    return m_create_isValid;
}

OAIDelete OAIActionDetail::getRDelete() const {
    return m_r_delete;
}
void OAIActionDetail::setRDelete(const OAIDelete &r_delete) {
    m_r_delete = r_delete;
    m_r_delete_isSet = true;
}

bool OAIActionDetail::is_r_delete_Set() const{
    return m_r_delete_isSet;
}

bool OAIActionDetail::is_r_delete_Valid() const{
    return m_r_delete_isValid;
}

OAIDataLeakPreventionChange OAIActionDetail::getDlpChange() const {
    return m_dlp_change;
}
void OAIActionDetail::setDlpChange(const OAIDataLeakPreventionChange &dlp_change) {
    m_dlp_change = dlp_change;
    m_dlp_change_isSet = true;
}

bool OAIActionDetail::is_dlp_change_Set() const{
    return m_dlp_change_isSet;
}

bool OAIActionDetail::is_dlp_change_Valid() const{
    return m_dlp_change_isValid;
}

OAIObject OAIActionDetail::getEdit() const {
    return m_edit;
}
void OAIActionDetail::setEdit(const OAIObject &edit) {
    m_edit = edit;
    m_edit_isSet = true;
}

bool OAIActionDetail::is_edit_Set() const{
    return m_edit_isSet;
}

bool OAIActionDetail::is_edit_Valid() const{
    return m_edit_isValid;
}

OAIMove OAIActionDetail::getMove() const {
    return m_move;
}
void OAIActionDetail::setMove(const OAIMove &move) {
    m_move = move;
    m_move_isSet = true;
}

bool OAIActionDetail::is_move_Set() const{
    return m_move_isSet;
}

bool OAIActionDetail::is_move_Valid() const{
    return m_move_isValid;
}

OAIPermissionChange OAIActionDetail::getPermissionChange() const {
    return m_permission_change;
}
void OAIActionDetail::setPermissionChange(const OAIPermissionChange &permission_change) {
    m_permission_change = permission_change;
    m_permission_change_isSet = true;
}

bool OAIActionDetail::is_permission_change_Set() const{
    return m_permission_change_isSet;
}

bool OAIActionDetail::is_permission_change_Valid() const{
    return m_permission_change_isValid;
}

OAIApplicationReference OAIActionDetail::getReference() const {
    return m_reference;
}
void OAIActionDetail::setReference(const OAIApplicationReference &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIActionDetail::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIActionDetail::is_reference_Valid() const{
    return m_reference_isValid;
}

OAIRename OAIActionDetail::getRename() const {
    return m_rename;
}
void OAIActionDetail::setRename(const OAIRename &rename) {
    m_rename = rename;
    m_rename_isSet = true;
}

bool OAIActionDetail::is_rename_Set() const{
    return m_rename_isSet;
}

bool OAIActionDetail::is_rename_Valid() const{
    return m_rename_isValid;
}

OAIRestore OAIActionDetail::getRestore() const {
    return m_restore;
}
void OAIActionDetail::setRestore(const OAIRestore &restore) {
    m_restore = restore;
    m_restore_isSet = true;
}

bool OAIActionDetail::is_restore_Set() const{
    return m_restore_isSet;
}

bool OAIActionDetail::is_restore_Valid() const{
    return m_restore_isValid;
}

OAISettingsChange OAIActionDetail::getSettingsChange() const {
    return m_settings_change;
}
void OAIActionDetail::setSettingsChange(const OAISettingsChange &settings_change) {
    m_settings_change = settings_change;
    m_settings_change_isSet = true;
}

bool OAIActionDetail::is_settings_change_Set() const{
    return m_settings_change_isSet;
}

bool OAIActionDetail::is_settings_change_Valid() const{
    return m_settings_change_isValid;
}

bool OAIActionDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applied_label_change.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_delete.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dlp_change.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_move.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_change.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rename.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings_change.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActionDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
