/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction::OAIAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction::OAIAction() {
    this->initializeModel();
}

OAIAction::~OAIAction() {}

void OAIAction::initializeModel() {

    m_actor_isSet = false;
    m_actor_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_time_range_isSet = false;
    m_time_range_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction::fromJsonObject(QJsonObject json) {

    m_actor_isValid = ::OpenAPI::fromJsonValue(m_actor, json[QString("actor")]);
    m_actor_isSet = !json[QString("actor")].isNull() && m_actor_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_time_range_isValid = ::OpenAPI::fromJsonValue(m_time_range, json[QString("timeRange")]);
    m_time_range_isSet = !json[QString("timeRange")].isNull() && m_time_range_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction::asJsonObject() const {
    QJsonObject obj;
    if (m_actor.isSet()) {
        obj.insert(QString("actor"), ::OpenAPI::toJsonValue(m_actor));
    }
    if (m_detail.isSet()) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_time_range.isSet()) {
        obj.insert(QString("timeRange"), ::OpenAPI::toJsonValue(m_time_range));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

OAIActor OAIAction::getActor() const {
    return m_actor;
}
void OAIAction::setActor(const OAIActor &actor) {
    m_actor = actor;
    m_actor_isSet = true;
}

bool OAIAction::is_actor_Set() const{
    return m_actor_isSet;
}

bool OAIAction::is_actor_Valid() const{
    return m_actor_isValid;
}

OAIActionDetail OAIAction::getDetail() const {
    return m_detail;
}
void OAIAction::setDetail(const OAIActionDetail &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIAction::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIAction::is_detail_Valid() const{
    return m_detail_isValid;
}

OAITarget OAIAction::getTarget() const {
    return m_target;
}
void OAIAction::setTarget(const OAITarget &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIAction::is_target_Set() const{
    return m_target_isSet;
}

bool OAIAction::is_target_Valid() const{
    return m_target_isValid;
}

OAITimeRange OAIAction::getTimeRange() const {
    return m_time_range;
}
void OAIAction::setTimeRange(const OAITimeRange &time_range) {
    m_time_range = time_range;
    m_time_range_isSet = true;
}

bool OAIAction::is_time_range_Set() const{
    return m_time_range_isSet;
}

bool OAIAction::is_time_range_Valid() const{
    return m_time_range_isValid;
}

QString OAIAction::getTimestamp() const {
    return m_timestamp;
}
void OAIAction::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIAction::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIAction::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
