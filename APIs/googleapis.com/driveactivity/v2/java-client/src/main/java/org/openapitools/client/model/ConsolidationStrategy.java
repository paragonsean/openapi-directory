/*
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * How the individual activities are consolidated. If a set of activities is related they can be consolidated into one combined activity, such as one actor performing the same action on multiple targets, or multiple actors performing the same action on a single target. The strategy defines the rules for which activities are related.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:06.299010-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConsolidationStrategy {
  public static final String SERIALIZED_NAME_LEGACY = "legacy";
  @SerializedName(SERIALIZED_NAME_LEGACY)
  private Object legacy;

  public static final String SERIALIZED_NAME_NONE = "none";
  @SerializedName(SERIALIZED_NAME_NONE)
  private Object none;

  public ConsolidationStrategy() {
  }

  public ConsolidationStrategy legacy(Object legacy) {
    this.legacy = legacy;
    return this;
  }

  /**
   * A strategy that consolidates activities using the grouping rules from the legacy V1 Activity API. Similar actions occurring within a window of time can be grouped across multiple targets (such as moving a set of files at once) or multiple actors (such as several users editing the same item). Grouping rules for this strategy are specific to each type of action.
   * @return legacy
   */
  @javax.annotation.Nullable
  public Object getLegacy() {
    return legacy;
  }

  public void setLegacy(Object legacy) {
    this.legacy = legacy;
  }


  public ConsolidationStrategy none(Object none) {
    this.none = none;
    return this;
  }

  /**
   * A strategy that does no consolidation of individual activities.
   * @return none
   */
  @javax.annotation.Nullable
  public Object getNone() {
    return none;
  }

  public void setNone(Object none) {
    this.none = none;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsolidationStrategy consolidationStrategy = (ConsolidationStrategy) o;
    return Objects.equals(this.legacy, consolidationStrategy.legacy) &&
        Objects.equals(this.none, consolidationStrategy.none);
  }

  @Override
  public int hashCode() {
    return Objects.hash(legacy, none);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsolidationStrategy {\n");
    sb.append("    legacy: ").append(toIndentedString(legacy)).append("\n");
    sb.append("    none: ").append(toIndentedString(none)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("legacy");
    openapiFields.add("none");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConsolidationStrategy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConsolidationStrategy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsolidationStrategy is not found in the empty JSON string", ConsolidationStrategy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConsolidationStrategy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsolidationStrategy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsolidationStrategy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsolidationStrategy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsolidationStrategy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsolidationStrategy.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsolidationStrategy>() {
           @Override
           public void write(JsonWriter out, ConsolidationStrategy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsolidationStrategy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConsolidationStrategy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConsolidationStrategy
   * @throws IOException if the JSON string is invalid with respect to ConsolidationStrategy
   */
  public static ConsolidationStrategy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsolidationStrategy.class);
  }

  /**
   * Convert an instance of ConsolidationStrategy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

