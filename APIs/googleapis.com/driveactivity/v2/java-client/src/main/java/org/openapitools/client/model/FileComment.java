/*
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DriveItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A comment on a file.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:06.299010-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileComment {
  public static final String SERIALIZED_NAME_LEGACY_COMMENT_ID = "legacyCommentId";
  @SerializedName(SERIALIZED_NAME_LEGACY_COMMENT_ID)
  private String legacyCommentId;

  public static final String SERIALIZED_NAME_LEGACY_DISCUSSION_ID = "legacyDiscussionId";
  @SerializedName(SERIALIZED_NAME_LEGACY_DISCUSSION_ID)
  private String legacyDiscussionId;

  public static final String SERIALIZED_NAME_LINK_TO_DISCUSSION = "linkToDiscussion";
  @SerializedName(SERIALIZED_NAME_LINK_TO_DISCUSSION)
  private String linkToDiscussion;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private DriveItem parent;

  public FileComment() {
  }

  public FileComment legacyCommentId(String legacyCommentId) {
    this.legacyCommentId = legacyCommentId;
    return this;
  }

  /**
   * The comment in the discussion thread. This identifier is an opaque string compatible with the Drive API; see https://developers.google.com/drive/v3/reference/comments/get
   * @return legacyCommentId
   */
  @javax.annotation.Nullable
  public String getLegacyCommentId() {
    return legacyCommentId;
  }

  public void setLegacyCommentId(String legacyCommentId) {
    this.legacyCommentId = legacyCommentId;
  }


  public FileComment legacyDiscussionId(String legacyDiscussionId) {
    this.legacyDiscussionId = legacyDiscussionId;
    return this;
  }

  /**
   * The discussion thread to which the comment was added. This identifier is an opaque string compatible with the Drive API and references the first comment in a discussion; see https://developers.google.com/drive/v3/reference/comments/get
   * @return legacyDiscussionId
   */
  @javax.annotation.Nullable
  public String getLegacyDiscussionId() {
    return legacyDiscussionId;
  }

  public void setLegacyDiscussionId(String legacyDiscussionId) {
    this.legacyDiscussionId = legacyDiscussionId;
  }


  public FileComment linkToDiscussion(String linkToDiscussion) {
    this.linkToDiscussion = linkToDiscussion;
    return this;
  }

  /**
   * The link to the discussion thread containing this comment, for example, &#x60;https://docs.google.com/DOCUMENT_ID/edit?disco&#x3D;THREAD_ID&#x60;.
   * @return linkToDiscussion
   */
  @javax.annotation.Nullable
  public String getLinkToDiscussion() {
    return linkToDiscussion;
  }

  public void setLinkToDiscussion(String linkToDiscussion) {
    this.linkToDiscussion = linkToDiscussion;
  }


  public FileComment parent(DriveItem parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public DriveItem getParent() {
    return parent;
  }

  public void setParent(DriveItem parent) {
    this.parent = parent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileComment fileComment = (FileComment) o;
    return Objects.equals(this.legacyCommentId, fileComment.legacyCommentId) &&
        Objects.equals(this.legacyDiscussionId, fileComment.legacyDiscussionId) &&
        Objects.equals(this.linkToDiscussion, fileComment.linkToDiscussion) &&
        Objects.equals(this.parent, fileComment.parent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(legacyCommentId, legacyDiscussionId, linkToDiscussion, parent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileComment {\n");
    sb.append("    legacyCommentId: ").append(toIndentedString(legacyCommentId)).append("\n");
    sb.append("    legacyDiscussionId: ").append(toIndentedString(legacyDiscussionId)).append("\n");
    sb.append("    linkToDiscussion: ").append(toIndentedString(linkToDiscussion)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("legacyCommentId");
    openapiFields.add("legacyDiscussionId");
    openapiFields.add("linkToDiscussion");
    openapiFields.add("parent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileComment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileComment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileComment is not found in the empty JSON string", FileComment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileComment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileComment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("legacyCommentId") != null && !jsonObj.get("legacyCommentId").isJsonNull()) && !jsonObj.get("legacyCommentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legacyCommentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legacyCommentId").toString()));
      }
      if ((jsonObj.get("legacyDiscussionId") != null && !jsonObj.get("legacyDiscussionId").isJsonNull()) && !jsonObj.get("legacyDiscussionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legacyDiscussionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legacyDiscussionId").toString()));
      }
      if ((jsonObj.get("linkToDiscussion") != null && !jsonObj.get("linkToDiscussion").isJsonNull()) && !jsonObj.get("linkToDiscussion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkToDiscussion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkToDiscussion").toString()));
      }
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        DriveItem.validateJsonElement(jsonObj.get("parent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileComment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileComment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileComment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileComment.class));

       return (TypeAdapter<T>) new TypeAdapter<FileComment>() {
           @Override
           public void write(JsonWriter out, FileComment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileComment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileComment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileComment
   * @throws IOException if the JSON string is invalid with respect to FileComment
   */
  public static FileComment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileComment.class);
  }

  /**
   * Convert an instance of FileComment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

