/*
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DriveFolder;
import org.openapitools.client.model.Folder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A lightweight reference to a Drive item, such as a file or folder.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:06.299010-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DriveItemReference {
  public static final String SERIALIZED_NAME_DRIVE_FILE = "driveFile";
  @SerializedName(SERIALIZED_NAME_DRIVE_FILE)
  private Object driveFile;

  public static final String SERIALIZED_NAME_DRIVE_FOLDER = "driveFolder";
  @SerializedName(SERIALIZED_NAME_DRIVE_FOLDER)
  private DriveFolder driveFolder;

  public static final String SERIALIZED_NAME_FILE = "file";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_FILE)
  private Object _file;

  public static final String SERIALIZED_NAME_FOLDER = "folder";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_FOLDER)
  private Folder folder;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public DriveItemReference() {
  }

  public DriveItemReference driveFile(Object driveFile) {
    this.driveFile = driveFile;
    return this;
  }

  /**
   * A Drive item which is a file.
   * @return driveFile
   */
  @javax.annotation.Nullable
  public Object getDriveFile() {
    return driveFile;
  }

  public void setDriveFile(Object driveFile) {
    this.driveFile = driveFile;
  }


  public DriveItemReference driveFolder(DriveFolder driveFolder) {
    this.driveFolder = driveFolder;
    return this;
  }

  /**
   * Get driveFolder
   * @return driveFolder
   */
  @javax.annotation.Nullable
  public DriveFolder getDriveFolder() {
    return driveFolder;
  }

  public void setDriveFolder(DriveFolder driveFolder) {
    this.driveFolder = driveFolder;
  }


  @Deprecated
  public DriveItemReference _file(Object _file) {
    this._file = _file;
    return this;
  }

  /**
   * This item is deprecated; please see &#x60;DriveFile&#x60; instead.
   * @return _file
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Object getFile() {
    return _file;
  }

  @Deprecated
  public void setFile(Object _file) {
    this._file = _file;
  }


  @Deprecated
  public DriveItemReference folder(Folder folder) {
    this.folder = folder;
    return this;
  }

  /**
   * Get folder
   * @return folder
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Folder getFolder() {
    return folder;
  }

  @Deprecated
  public void setFolder(Folder folder) {
    this.folder = folder;
  }


  public DriveItemReference name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The target Drive item. The format is &#x60;items/ITEM_ID&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DriveItemReference title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the Drive item.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DriveItemReference driveItemReference = (DriveItemReference) o;
    return Objects.equals(this.driveFile, driveItemReference.driveFile) &&
        Objects.equals(this.driveFolder, driveItemReference.driveFolder) &&
        Objects.equals(this._file, driveItemReference._file) &&
        Objects.equals(this.folder, driveItemReference.folder) &&
        Objects.equals(this.name, driveItemReference.name) &&
        Objects.equals(this.title, driveItemReference.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(driveFile, driveFolder, _file, folder, name, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DriveItemReference {\n");
    sb.append("    driveFile: ").append(toIndentedString(driveFile)).append("\n");
    sb.append("    driveFolder: ").append(toIndentedString(driveFolder)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("driveFile");
    openapiFields.add("driveFolder");
    openapiFields.add("file");
    openapiFields.add("folder");
    openapiFields.add("name");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DriveItemReference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DriveItemReference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DriveItemReference is not found in the empty JSON string", DriveItemReference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DriveItemReference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DriveItemReference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `driveFolder`
      if (jsonObj.get("driveFolder") != null && !jsonObj.get("driveFolder").isJsonNull()) {
        DriveFolder.validateJsonElement(jsonObj.get("driveFolder"));
      }
      // validate the optional field `folder`
      if (jsonObj.get("folder") != null && !jsonObj.get("folder").isJsonNull()) {
        Folder.validateJsonElement(jsonObj.get("folder"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DriveItemReference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DriveItemReference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DriveItemReference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DriveItemReference.class));

       return (TypeAdapter<T>) new TypeAdapter<DriveItemReference>() {
           @Override
           public void write(JsonWriter out, DriveItemReference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DriveItemReference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DriveItemReference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DriveItemReference
   * @throws IOException if the JSON string is invalid with respect to DriveItemReference
   */
  public static DriveItemReference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DriveItemReference.class);
  }

  /**
   * Convert an instance of DriveItemReference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

