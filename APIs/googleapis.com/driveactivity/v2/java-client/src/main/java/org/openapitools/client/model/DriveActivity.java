/*
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Action;
import org.openapitools.client.model.ActionDetail;
import org.openapitools.client.model.Actor;
import org.openapitools.client.model.Target;
import org.openapitools.client.model.TimeRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single Drive activity comprising one or more Actions by one or more Actors on one or more Targets. Some Action groupings occur spontaneously, such as moving an item into a shared folder triggering a permission change. Other groupings of related Actions, such as multiple Actors editing one item or moving multiple files into a new folder, are controlled by the selection of a ConsolidationStrategy in the QueryDriveActivityRequest.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:06.299010-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DriveActivity {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<Action> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTORS = "actors";
  @SerializedName(SERIALIZED_NAME_ACTORS)
  private List<Actor> actors = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIMARY_ACTION_DETAIL = "primaryActionDetail";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ACTION_DETAIL)
  private ActionDetail primaryActionDetail;

  public static final String SERIALIZED_NAME_TARGETS = "targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List<Target> targets = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_RANGE = "timeRange";
  @SerializedName(SERIALIZED_NAME_TIME_RANGE)
  private TimeRange timeRange;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public DriveActivity() {
  }

  public DriveActivity actions(List<Action> actions) {
    this.actions = actions;
    return this;
  }

  public DriveActivity addActionsItem(Action actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * Details on all actions in this activity.
   * @return actions
   */
  @javax.annotation.Nullable
  public List<Action> getActions() {
    return actions;
  }

  public void setActions(List<Action> actions) {
    this.actions = actions;
  }


  public DriveActivity actors(List<Actor> actors) {
    this.actors = actors;
    return this;
  }

  public DriveActivity addActorsItem(Actor actorsItem) {
    if (this.actors == null) {
      this.actors = new ArrayList<>();
    }
    this.actors.add(actorsItem);
    return this;
  }

  /**
   * All actor(s) responsible for the activity.
   * @return actors
   */
  @javax.annotation.Nullable
  public List<Actor> getActors() {
    return actors;
  }

  public void setActors(List<Actor> actors) {
    this.actors = actors;
  }


  public DriveActivity primaryActionDetail(ActionDetail primaryActionDetail) {
    this.primaryActionDetail = primaryActionDetail;
    return this;
  }

  /**
   * Get primaryActionDetail
   * @return primaryActionDetail
   */
  @javax.annotation.Nullable
  public ActionDetail getPrimaryActionDetail() {
    return primaryActionDetail;
  }

  public void setPrimaryActionDetail(ActionDetail primaryActionDetail) {
    this.primaryActionDetail = primaryActionDetail;
  }


  public DriveActivity targets(List<Target> targets) {
    this.targets = targets;
    return this;
  }

  public DriveActivity addTargetsItem(Target targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<>();
    }
    this.targets.add(targetsItem);
    return this;
  }

  /**
   * All Google Drive objects this activity is about (e.g. file, folder, drive). This represents the state of the target immediately after the actions occurred.
   * @return targets
   */
  @javax.annotation.Nullable
  public List<Target> getTargets() {
    return targets;
  }

  public void setTargets(List<Target> targets) {
    this.targets = targets;
  }


  public DriveActivity timeRange(TimeRange timeRange) {
    this.timeRange = timeRange;
    return this;
  }

  /**
   * Get timeRange
   * @return timeRange
   */
  @javax.annotation.Nullable
  public TimeRange getTimeRange() {
    return timeRange;
  }

  public void setTimeRange(TimeRange timeRange) {
    this.timeRange = timeRange;
  }


  public DriveActivity timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * The activity occurred at this specific time.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DriveActivity driveActivity = (DriveActivity) o;
    return Objects.equals(this.actions, driveActivity.actions) &&
        Objects.equals(this.actors, driveActivity.actors) &&
        Objects.equals(this.primaryActionDetail, driveActivity.primaryActionDetail) &&
        Objects.equals(this.targets, driveActivity.targets) &&
        Objects.equals(this.timeRange, driveActivity.timeRange) &&
        Objects.equals(this.timestamp, driveActivity.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, actors, primaryActionDetail, targets, timeRange, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DriveActivity {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    actors: ").append(toIndentedString(actors)).append("\n");
    sb.append("    primaryActionDetail: ").append(toIndentedString(primaryActionDetail)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    timeRange: ").append(toIndentedString(timeRange)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("actors");
    openapiFields.add("primaryActionDetail");
    openapiFields.add("targets");
    openapiFields.add("timeRange");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DriveActivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DriveActivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DriveActivity is not found in the empty JSON string", DriveActivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DriveActivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DriveActivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
          }

          // validate the optional field `actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            Action.validateJsonElement(jsonArrayactions.get(i));
          };
        }
      }
      if (jsonObj.get("actors") != null && !jsonObj.get("actors").isJsonNull()) {
        JsonArray jsonArrayactors = jsonObj.getAsJsonArray("actors");
        if (jsonArrayactors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actors` to be an array in the JSON string but got `%s`", jsonObj.get("actors").toString()));
          }

          // validate the optional field `actors` (array)
          for (int i = 0; i < jsonArrayactors.size(); i++) {
            Actor.validateJsonElement(jsonArrayactors.get(i));
          };
        }
      }
      // validate the optional field `primaryActionDetail`
      if (jsonObj.get("primaryActionDetail") != null && !jsonObj.get("primaryActionDetail").isJsonNull()) {
        ActionDetail.validateJsonElement(jsonObj.get("primaryActionDetail"));
      }
      if (jsonObj.get("targets") != null && !jsonObj.get("targets").isJsonNull()) {
        JsonArray jsonArraytargets = jsonObj.getAsJsonArray("targets");
        if (jsonArraytargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("targets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `targets` to be an array in the JSON string but got `%s`", jsonObj.get("targets").toString()));
          }

          // validate the optional field `targets` (array)
          for (int i = 0; i < jsonArraytargets.size(); i++) {
            Target.validateJsonElement(jsonArraytargets.get(i));
          };
        }
      }
      // validate the optional field `timeRange`
      if (jsonObj.get("timeRange") != null && !jsonObj.get("timeRange").isJsonNull()) {
        TimeRange.validateJsonElement(jsonObj.get("timeRange"));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DriveActivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DriveActivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DriveActivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DriveActivity.class));

       return (TypeAdapter<T>) new TypeAdapter<DriveActivity>() {
           @Override
           public void write(JsonWriter out, DriveActivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DriveActivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DriveActivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DriveActivity
   * @throws IOException if the JSON string is invalid with respect to DriveActivity
   */
  public static DriveActivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DriveActivity.class);
  }

  /**
   * Convert an instance of DriveActivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

