/*
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationReference;
import org.openapitools.client.model.AppliedLabelChange;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.Create;
import org.openapitools.client.model.DataLeakPreventionChange;
import org.openapitools.client.model.Delete;
import org.openapitools.client.model.Move;
import org.openapitools.client.model.PermissionChange;
import org.openapitools.client.model.Rename;
import org.openapitools.client.model.Restore;
import org.openapitools.client.model.SettingsChange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data describing the type and additional information of an action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:06.299010-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActionDetail {
  public static final String SERIALIZED_NAME_APPLIED_LABEL_CHANGE = "appliedLabelChange";
  @SerializedName(SERIALIZED_NAME_APPLIED_LABEL_CHANGE)
  private AppliedLabelChange appliedLabelChange;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private Comment comment;

  public static final String SERIALIZED_NAME_CREATE = "create";
  @SerializedName(SERIALIZED_NAME_CREATE)
  private Create create;

  public static final String SERIALIZED_NAME_DELETE = "delete";
  @SerializedName(SERIALIZED_NAME_DELETE)
  private Delete delete;

  public static final String SERIALIZED_NAME_DLP_CHANGE = "dlpChange";
  @SerializedName(SERIALIZED_NAME_DLP_CHANGE)
  private DataLeakPreventionChange dlpChange;

  public static final String SERIALIZED_NAME_EDIT = "edit";
  @SerializedName(SERIALIZED_NAME_EDIT)
  private Object edit;

  public static final String SERIALIZED_NAME_MOVE = "move";
  @SerializedName(SERIALIZED_NAME_MOVE)
  private Move move;

  public static final String SERIALIZED_NAME_PERMISSION_CHANGE = "permissionChange";
  @SerializedName(SERIALIZED_NAME_PERMISSION_CHANGE)
  private PermissionChange permissionChange;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private ApplicationReference reference;

  public static final String SERIALIZED_NAME_RENAME = "rename";
  @SerializedName(SERIALIZED_NAME_RENAME)
  private Rename rename;

  public static final String SERIALIZED_NAME_RESTORE = "restore";
  @SerializedName(SERIALIZED_NAME_RESTORE)
  private Restore restore;

  public static final String SERIALIZED_NAME_SETTINGS_CHANGE = "settingsChange";
  @SerializedName(SERIALIZED_NAME_SETTINGS_CHANGE)
  private SettingsChange settingsChange;

  public ActionDetail() {
  }

  public ActionDetail appliedLabelChange(AppliedLabelChange appliedLabelChange) {
    this.appliedLabelChange = appliedLabelChange;
    return this;
  }

  /**
   * Get appliedLabelChange
   * @return appliedLabelChange
   */
  @javax.annotation.Nullable
  public AppliedLabelChange getAppliedLabelChange() {
    return appliedLabelChange;
  }

  public void setAppliedLabelChange(AppliedLabelChange appliedLabelChange) {
    this.appliedLabelChange = appliedLabelChange;
  }


  public ActionDetail comment(Comment comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public Comment getComment() {
    return comment;
  }

  public void setComment(Comment comment) {
    this.comment = comment;
  }


  public ActionDetail create(Create create) {
    this.create = create;
    return this;
  }

  /**
   * Get create
   * @return create
   */
  @javax.annotation.Nullable
  public Create getCreate() {
    return create;
  }

  public void setCreate(Create create) {
    this.create = create;
  }


  public ActionDetail delete(Delete delete) {
    this.delete = delete;
    return this;
  }

  /**
   * Get delete
   * @return delete
   */
  @javax.annotation.Nullable
  public Delete getDelete() {
    return delete;
  }

  public void setDelete(Delete delete) {
    this.delete = delete;
  }


  public ActionDetail dlpChange(DataLeakPreventionChange dlpChange) {
    this.dlpChange = dlpChange;
    return this;
  }

  /**
   * Get dlpChange
   * @return dlpChange
   */
  @javax.annotation.Nullable
  public DataLeakPreventionChange getDlpChange() {
    return dlpChange;
  }

  public void setDlpChange(DataLeakPreventionChange dlpChange) {
    this.dlpChange = dlpChange;
  }


  public ActionDetail edit(Object edit) {
    this.edit = edit;
    return this;
  }

  /**
   * An empty message indicating an object was edited.
   * @return edit
   */
  @javax.annotation.Nullable
  public Object getEdit() {
    return edit;
  }

  public void setEdit(Object edit) {
    this.edit = edit;
  }


  public ActionDetail move(Move move) {
    this.move = move;
    return this;
  }

  /**
   * Get move
   * @return move
   */
  @javax.annotation.Nullable
  public Move getMove() {
    return move;
  }

  public void setMove(Move move) {
    this.move = move;
  }


  public ActionDetail permissionChange(PermissionChange permissionChange) {
    this.permissionChange = permissionChange;
    return this;
  }

  /**
   * Get permissionChange
   * @return permissionChange
   */
  @javax.annotation.Nullable
  public PermissionChange getPermissionChange() {
    return permissionChange;
  }

  public void setPermissionChange(PermissionChange permissionChange) {
    this.permissionChange = permissionChange;
  }


  public ActionDetail reference(ApplicationReference reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Get reference
   * @return reference
   */
  @javax.annotation.Nullable
  public ApplicationReference getReference() {
    return reference;
  }

  public void setReference(ApplicationReference reference) {
    this.reference = reference;
  }


  public ActionDetail rename(Rename rename) {
    this.rename = rename;
    return this;
  }

  /**
   * Get rename
   * @return rename
   */
  @javax.annotation.Nullable
  public Rename getRename() {
    return rename;
  }

  public void setRename(Rename rename) {
    this.rename = rename;
  }


  public ActionDetail restore(Restore restore) {
    this.restore = restore;
    return this;
  }

  /**
   * Get restore
   * @return restore
   */
  @javax.annotation.Nullable
  public Restore getRestore() {
    return restore;
  }

  public void setRestore(Restore restore) {
    this.restore = restore;
  }


  public ActionDetail settingsChange(SettingsChange settingsChange) {
    this.settingsChange = settingsChange;
    return this;
  }

  /**
   * Get settingsChange
   * @return settingsChange
   */
  @javax.annotation.Nullable
  public SettingsChange getSettingsChange() {
    return settingsChange;
  }

  public void setSettingsChange(SettingsChange settingsChange) {
    this.settingsChange = settingsChange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionDetail actionDetail = (ActionDetail) o;
    return Objects.equals(this.appliedLabelChange, actionDetail.appliedLabelChange) &&
        Objects.equals(this.comment, actionDetail.comment) &&
        Objects.equals(this.create, actionDetail.create) &&
        Objects.equals(this.delete, actionDetail.delete) &&
        Objects.equals(this.dlpChange, actionDetail.dlpChange) &&
        Objects.equals(this.edit, actionDetail.edit) &&
        Objects.equals(this.move, actionDetail.move) &&
        Objects.equals(this.permissionChange, actionDetail.permissionChange) &&
        Objects.equals(this.reference, actionDetail.reference) &&
        Objects.equals(this.rename, actionDetail.rename) &&
        Objects.equals(this.restore, actionDetail.restore) &&
        Objects.equals(this.settingsChange, actionDetail.settingsChange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appliedLabelChange, comment, create, delete, dlpChange, edit, move, permissionChange, reference, rename, restore, settingsChange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionDetail {\n");
    sb.append("    appliedLabelChange: ").append(toIndentedString(appliedLabelChange)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("    dlpChange: ").append(toIndentedString(dlpChange)).append("\n");
    sb.append("    edit: ").append(toIndentedString(edit)).append("\n");
    sb.append("    move: ").append(toIndentedString(move)).append("\n");
    sb.append("    permissionChange: ").append(toIndentedString(permissionChange)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    rename: ").append(toIndentedString(rename)).append("\n");
    sb.append("    restore: ").append(toIndentedString(restore)).append("\n");
    sb.append("    settingsChange: ").append(toIndentedString(settingsChange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appliedLabelChange");
    openapiFields.add("comment");
    openapiFields.add("create");
    openapiFields.add("delete");
    openapiFields.add("dlpChange");
    openapiFields.add("edit");
    openapiFields.add("move");
    openapiFields.add("permissionChange");
    openapiFields.add("reference");
    openapiFields.add("rename");
    openapiFields.add("restore");
    openapiFields.add("settingsChange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActionDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActionDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActionDetail is not found in the empty JSON string", ActionDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActionDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActionDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appliedLabelChange`
      if (jsonObj.get("appliedLabelChange") != null && !jsonObj.get("appliedLabelChange").isJsonNull()) {
        AppliedLabelChange.validateJsonElement(jsonObj.get("appliedLabelChange"));
      }
      // validate the optional field `comment`
      if (jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) {
        Comment.validateJsonElement(jsonObj.get("comment"));
      }
      // validate the optional field `create`
      if (jsonObj.get("create") != null && !jsonObj.get("create").isJsonNull()) {
        Create.validateJsonElement(jsonObj.get("create"));
      }
      // validate the optional field `delete`
      if (jsonObj.get("delete") != null && !jsonObj.get("delete").isJsonNull()) {
        Delete.validateJsonElement(jsonObj.get("delete"));
      }
      // validate the optional field `dlpChange`
      if (jsonObj.get("dlpChange") != null && !jsonObj.get("dlpChange").isJsonNull()) {
        DataLeakPreventionChange.validateJsonElement(jsonObj.get("dlpChange"));
      }
      // validate the optional field `move`
      if (jsonObj.get("move") != null && !jsonObj.get("move").isJsonNull()) {
        Move.validateJsonElement(jsonObj.get("move"));
      }
      // validate the optional field `permissionChange`
      if (jsonObj.get("permissionChange") != null && !jsonObj.get("permissionChange").isJsonNull()) {
        PermissionChange.validateJsonElement(jsonObj.get("permissionChange"));
      }
      // validate the optional field `reference`
      if (jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) {
        ApplicationReference.validateJsonElement(jsonObj.get("reference"));
      }
      // validate the optional field `rename`
      if (jsonObj.get("rename") != null && !jsonObj.get("rename").isJsonNull()) {
        Rename.validateJsonElement(jsonObj.get("rename"));
      }
      // validate the optional field `restore`
      if (jsonObj.get("restore") != null && !jsonObj.get("restore").isJsonNull()) {
        Restore.validateJsonElement(jsonObj.get("restore"));
      }
      // validate the optional field `settingsChange`
      if (jsonObj.get("settingsChange") != null && !jsonObj.get("settingsChange").isJsonNull()) {
        SettingsChange.validateJsonElement(jsonObj.get("settingsChange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActionDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActionDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActionDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActionDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ActionDetail>() {
           @Override
           public void write(JsonWriter out, ActionDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActionDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActionDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActionDetail
   * @throws IOException if the JSON string is invalid with respect to ActionDetail
   */
  public static ActionDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActionDetail.class);
  }

  /**
   * Convert an instance of ActionDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

