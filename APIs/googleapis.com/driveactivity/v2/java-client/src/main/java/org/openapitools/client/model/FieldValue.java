/*
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import org.openapitools.client.model.Selection;
import org.openapitools.client.model.SelectionList;
import org.openapitools.client.model.SingleUser;
import org.openapitools.client.model.Text;
import org.openapitools.client.model.TextList;
import org.openapitools.client.model.UserList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains a value of a Field.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:06.299010-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FieldValue {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private Date date;

  public static final String SERIALIZED_NAME_INTEGER = "integer";
  @SerializedName(SERIALIZED_NAME_INTEGER)
  private Integer integer;

  public static final String SERIALIZED_NAME_SELECTION = "selection";
  @SerializedName(SERIALIZED_NAME_SELECTION)
  private Selection selection;

  public static final String SERIALIZED_NAME_SELECTION_LIST = "selectionList";
  @SerializedName(SERIALIZED_NAME_SELECTION_LIST)
  private SelectionList selectionList;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private Text text;

  public static final String SERIALIZED_NAME_TEXT_LIST = "textList";
  @SerializedName(SERIALIZED_NAME_TEXT_LIST)
  private TextList textList;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private SingleUser user;

  public static final String SERIALIZED_NAME_USER_LIST = "userList";
  @SerializedName(SERIALIZED_NAME_USER_LIST)
  private UserList userList;

  public FieldValue() {
  }

  public FieldValue date(Date date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public Date getDate() {
    return date;
  }

  public void setDate(Date date) {
    this.date = date;
  }


  public FieldValue integer(Integer integer) {
    this.integer = integer;
    return this;
  }

  /**
   * Get integer
   * @return integer
   */
  @javax.annotation.Nullable
  public Integer getInteger() {
    return integer;
  }

  public void setInteger(Integer integer) {
    this.integer = integer;
  }


  public FieldValue selection(Selection selection) {
    this.selection = selection;
    return this;
  }

  /**
   * Get selection
   * @return selection
   */
  @javax.annotation.Nullable
  public Selection getSelection() {
    return selection;
  }

  public void setSelection(Selection selection) {
    this.selection = selection;
  }


  public FieldValue selectionList(SelectionList selectionList) {
    this.selectionList = selectionList;
    return this;
  }

  /**
   * Get selectionList
   * @return selectionList
   */
  @javax.annotation.Nullable
  public SelectionList getSelectionList() {
    return selectionList;
  }

  public void setSelectionList(SelectionList selectionList) {
    this.selectionList = selectionList;
  }


  public FieldValue text(Text text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public Text getText() {
    return text;
  }

  public void setText(Text text) {
    this.text = text;
  }


  public FieldValue textList(TextList textList) {
    this.textList = textList;
    return this;
  }

  /**
   * Get textList
   * @return textList
   */
  @javax.annotation.Nullable
  public TextList getTextList() {
    return textList;
  }

  public void setTextList(TextList textList) {
    this.textList = textList;
  }


  public FieldValue user(SingleUser user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public SingleUser getUser() {
    return user;
  }

  public void setUser(SingleUser user) {
    this.user = user;
  }


  public FieldValue userList(UserList userList) {
    this.userList = userList;
    return this;
  }

  /**
   * Get userList
   * @return userList
   */
  @javax.annotation.Nullable
  public UserList getUserList() {
    return userList;
  }

  public void setUserList(UserList userList) {
    this.userList = userList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldValue fieldValue = (FieldValue) o;
    return Objects.equals(this.date, fieldValue.date) &&
        Objects.equals(this.integer, fieldValue.integer) &&
        Objects.equals(this.selection, fieldValue.selection) &&
        Objects.equals(this.selectionList, fieldValue.selectionList) &&
        Objects.equals(this.text, fieldValue.text) &&
        Objects.equals(this.textList, fieldValue.textList) &&
        Objects.equals(this.user, fieldValue.user) &&
        Objects.equals(this.userList, fieldValue.userList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, integer, selection, selectionList, text, textList, user, userList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldValue {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    integer: ").append(toIndentedString(integer)).append("\n");
    sb.append("    selection: ").append(toIndentedString(selection)).append("\n");
    sb.append("    selectionList: ").append(toIndentedString(selectionList)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    textList: ").append(toIndentedString(textList)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userList: ").append(toIndentedString(userList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("integer");
    openapiFields.add("selection");
    openapiFields.add("selectionList");
    openapiFields.add("text");
    openapiFields.add("textList");
    openapiFields.add("user");
    openapiFields.add("userList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FieldValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldValue is not found in the empty JSON string", FieldValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FieldValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `date`
      if (jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("date"));
      }
      // validate the optional field `integer`
      if (jsonObj.get("integer") != null && !jsonObj.get("integer").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("integer"));
      }
      // validate the optional field `selection`
      if (jsonObj.get("selection") != null && !jsonObj.get("selection").isJsonNull()) {
        Selection.validateJsonElement(jsonObj.get("selection"));
      }
      // validate the optional field `selectionList`
      if (jsonObj.get("selectionList") != null && !jsonObj.get("selectionList").isJsonNull()) {
        SelectionList.validateJsonElement(jsonObj.get("selectionList"));
      }
      // validate the optional field `text`
      if (jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) {
        Text.validateJsonElement(jsonObj.get("text"));
      }
      // validate the optional field `textList`
      if (jsonObj.get("textList") != null && !jsonObj.get("textList").isJsonNull()) {
        TextList.validateJsonElement(jsonObj.get("textList"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        SingleUser.validateJsonElement(jsonObj.get("user"));
      }
      // validate the optional field `userList`
      if (jsonObj.get("userList") != null && !jsonObj.get("userList").isJsonNull()) {
        UserList.validateJsonElement(jsonObj.get("userList"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldValue.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldValue>() {
           @Override
           public void write(JsonWriter out, FieldValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FieldValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FieldValue
   * @throws IOException if the JSON string is invalid with respect to FieldValue
   */
  public static FieldValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldValue.class);
  }

  /**
   * Convert an instance of FieldValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

