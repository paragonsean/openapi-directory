/*
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Assignment;
import org.openapitools.client.model.Post;
import org.openapitools.client.model.Suggestion;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A change about comments on an object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:06.299010-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Comment {
  public static final String SERIALIZED_NAME_ASSIGNMENT = "assignment";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT)
  private Assignment assignment;

  public static final String SERIALIZED_NAME_MENTIONED_USERS = "mentionedUsers";
  @SerializedName(SERIALIZED_NAME_MENTIONED_USERS)
  private List<User> mentionedUsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_POST = "post";
  @SerializedName(SERIALIZED_NAME_POST)
  private Post post;

  public static final String SERIALIZED_NAME_SUGGESTION = "suggestion";
  @SerializedName(SERIALIZED_NAME_SUGGESTION)
  private Suggestion suggestion;

  public Comment() {
  }

  public Comment assignment(Assignment assignment) {
    this.assignment = assignment;
    return this;
  }

  /**
   * Get assignment
   * @return assignment
   */
  @javax.annotation.Nullable
  public Assignment getAssignment() {
    return assignment;
  }

  public void setAssignment(Assignment assignment) {
    this.assignment = assignment;
  }


  public Comment mentionedUsers(List<User> mentionedUsers) {
    this.mentionedUsers = mentionedUsers;
    return this;
  }

  public Comment addMentionedUsersItem(User mentionedUsersItem) {
    if (this.mentionedUsers == null) {
      this.mentionedUsers = new ArrayList<>();
    }
    this.mentionedUsers.add(mentionedUsersItem);
    return this;
  }

  /**
   * Users who are mentioned in this comment.
   * @return mentionedUsers
   */
  @javax.annotation.Nullable
  public List<User> getMentionedUsers() {
    return mentionedUsers;
  }

  public void setMentionedUsers(List<User> mentionedUsers) {
    this.mentionedUsers = mentionedUsers;
  }


  public Comment post(Post post) {
    this.post = post;
    return this;
  }

  /**
   * Get post
   * @return post
   */
  @javax.annotation.Nullable
  public Post getPost() {
    return post;
  }

  public void setPost(Post post) {
    this.post = post;
  }


  public Comment suggestion(Suggestion suggestion) {
    this.suggestion = suggestion;
    return this;
  }

  /**
   * Get suggestion
   * @return suggestion
   */
  @javax.annotation.Nullable
  public Suggestion getSuggestion() {
    return suggestion;
  }

  public void setSuggestion(Suggestion suggestion) {
    this.suggestion = suggestion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Comment comment = (Comment) o;
    return Objects.equals(this.assignment, comment.assignment) &&
        Objects.equals(this.mentionedUsers, comment.mentionedUsers) &&
        Objects.equals(this.post, comment.post) &&
        Objects.equals(this.suggestion, comment.suggestion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignment, mentionedUsers, post, suggestion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Comment {\n");
    sb.append("    assignment: ").append(toIndentedString(assignment)).append("\n");
    sb.append("    mentionedUsers: ").append(toIndentedString(mentionedUsers)).append("\n");
    sb.append("    post: ").append(toIndentedString(post)).append("\n");
    sb.append("    suggestion: ").append(toIndentedString(suggestion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignment");
    openapiFields.add("mentionedUsers");
    openapiFields.add("post");
    openapiFields.add("suggestion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Comment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Comment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Comment is not found in the empty JSON string", Comment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Comment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Comment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `assignment`
      if (jsonObj.get("assignment") != null && !jsonObj.get("assignment").isJsonNull()) {
        Assignment.validateJsonElement(jsonObj.get("assignment"));
      }
      if (jsonObj.get("mentionedUsers") != null && !jsonObj.get("mentionedUsers").isJsonNull()) {
        JsonArray jsonArraymentionedUsers = jsonObj.getAsJsonArray("mentionedUsers");
        if (jsonArraymentionedUsers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mentionedUsers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mentionedUsers` to be an array in the JSON string but got `%s`", jsonObj.get("mentionedUsers").toString()));
          }

          // validate the optional field `mentionedUsers` (array)
          for (int i = 0; i < jsonArraymentionedUsers.size(); i++) {
            User.validateJsonElement(jsonArraymentionedUsers.get(i));
          };
        }
      }
      // validate the optional field `post`
      if (jsonObj.get("post") != null && !jsonObj.get("post").isJsonNull()) {
        Post.validateJsonElement(jsonObj.get("post"));
      }
      // validate the optional field `suggestion`
      if (jsonObj.get("suggestion") != null && !jsonObj.get("suggestion").isJsonNull()) {
        Suggestion.validateJsonElement(jsonObj.get("suggestion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Comment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Comment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Comment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Comment.class));

       return (TypeAdapter<T>) new TypeAdapter<Comment>() {
           @Override
           public void write(JsonWriter out, Comment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Comment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Comment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Comment
   * @throws IOException if the JSON string is invalid with respect to Comment
   */
  public static Comment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Comment.class);
  }

  /**
   * Convert an instance of Comment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

