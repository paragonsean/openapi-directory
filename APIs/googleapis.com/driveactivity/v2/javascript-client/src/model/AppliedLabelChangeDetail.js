/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldValueChange from './FieldValueChange';

/**
 * The AppliedLabelChangeDetail model module.
 * @module model/AppliedLabelChangeDetail
 * @version v2
 */
class AppliedLabelChangeDetail {
    /**
     * Constructs a new <code>AppliedLabelChangeDetail</code>.
     * A change made to a Label on the Target.
     * @alias module:model/AppliedLabelChangeDetail
     */
    constructor() { 
        
        AppliedLabelChangeDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AppliedLabelChangeDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppliedLabelChangeDetail} obj Optional instance to populate.
     * @return {module:model/AppliedLabelChangeDetail} The populated <code>AppliedLabelChangeDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppliedLabelChangeDetail();

            if (data.hasOwnProperty('fieldChanges')) {
                obj['fieldChanges'] = ApiClient.convertToType(data['fieldChanges'], [FieldValueChange]);
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppliedLabelChangeDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppliedLabelChangeDetail</code>.
     */
    static validateJSON(data) {
        if (data['fieldChanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fieldChanges'])) {
                throw new Error("Expected the field `fieldChanges` to be an array in the JSON data but got " + data['fieldChanges']);
            }
            // validate the optional field `fieldChanges` (array)
            for (const item of data['fieldChanges']) {
                FieldValueChange.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['types'])) {
            throw new Error("Expected the field `types` to be an array in the JSON data but got " + data['types']);
        }

        return true;
    }


}



/**
 * Field Changes. Only present if `types` contains `LABEL_FIELD_VALUE_CHANGED`.
 * @member {Array.<module:model/FieldValueChange>} fieldChanges
 */
AppliedLabelChangeDetail.prototype['fieldChanges'] = undefined;

/**
 * The Label name representing the Label that changed. This name always contains the revision of the Label that was used when this Action occurred. The format is `labels/id@revision`.
 * @member {String} label
 */
AppliedLabelChangeDetail.prototype['label'] = undefined;

/**
 * The human-readable title of the label that changed.
 * @member {String} title
 */
AppliedLabelChangeDetail.prototype['title'] = undefined;

/**
 * The types of changes made to the Label on the Target.
 * @member {Array.<module:model/AppliedLabelChangeDetail.TypesEnum>} types
 */
AppliedLabelChangeDetail.prototype['types'] = undefined;





/**
 * Allowed values for the <code>types</code> property.
 * @enum {String}
 * @readonly
 */
AppliedLabelChangeDetail['TypesEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "LABEL_ADDED"
     * @const
     */
    "LABEL_ADDED": "LABEL_ADDED",

    /**
     * value: "LABEL_REMOVED"
     * @const
     */
    "LABEL_REMOVED": "LABEL_REMOVED",

    /**
     * value: "LABEL_FIELD_VALUE_CHANGED"
     * @const
     */
    "LABEL_FIELD_VALUE_CHANGED": "LABEL_FIELD_VALUE_CHANGED",

    /**
     * value: "LABEL_APPLIED_BY_ITEM_CREATE"
     * @const
     */
    "LABEL_APPLIED_BY_ITEM_CREATE": "LABEL_APPLIED_BY_ITEM_CREATE"
};



export default AppliedLabelChangeDetail;

