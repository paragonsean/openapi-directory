/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Domain from './Domain';
import DriveReference from './DriveReference';
import TeamDriveReference from './TeamDriveReference';
import User from './User';

/**
 * The Owner model module.
 * @module model/Owner
 * @version v2
 */
class Owner {
    /**
     * Constructs a new <code>Owner</code>.
     * Information about the owner of a Drive item.
     * @alias module:model/Owner
     */
    constructor() { 
        
        Owner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Owner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Owner} obj Optional instance to populate.
     * @return {module:model/Owner} The populated <code>Owner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Owner();

            if (data.hasOwnProperty('domain')) {
                obj['domain'] = Domain.constructFromObject(data['domain']);
            }
            if (data.hasOwnProperty('drive')) {
                obj['drive'] = DriveReference.constructFromObject(data['drive']);
            }
            if (data.hasOwnProperty('teamDrive')) {
                obj['teamDrive'] = TeamDriveReference.constructFromObject(data['teamDrive']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Owner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Owner</code>.
     */
    static validateJSON(data) {
        // validate the optional field `domain`
        if (data['domain']) { // data not null
          Domain.validateJSON(data['domain']);
        }
        // validate the optional field `drive`
        if (data['drive']) { // data not null
          DriveReference.validateJSON(data['drive']);
        }
        // validate the optional field `teamDrive`
        if (data['teamDrive']) { // data not null
          TeamDriveReference.validateJSON(data['teamDrive']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {module:model/Domain} domain
 */
Owner.prototype['domain'] = undefined;

/**
 * @member {module:model/DriveReference} drive
 */
Owner.prototype['drive'] = undefined;

/**
 * @member {module:model/TeamDriveReference} teamDrive
 */
Owner.prototype['teamDrive'] = undefined;

/**
 * @member {module:model/User} user
 */
Owner.prototype['user'] = undefined;






export default Owner;

