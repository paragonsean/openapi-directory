/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';

/**
 * The Impersonation model module.
 * @module model/Impersonation
 * @version v2
 */
class Impersonation {
    /**
     * Constructs a new <code>Impersonation</code>.
     * Information about an impersonation, where an admin acts on behalf of an end user. Information about the acting admin is not currently available.
     * @alias module:model/Impersonation
     */
    constructor() { 
        
        Impersonation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Impersonation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Impersonation} obj Optional instance to populate.
     * @return {module:model/Impersonation} The populated <code>Impersonation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Impersonation();

            if (data.hasOwnProperty('impersonatedUser')) {
                obj['impersonatedUser'] = User.constructFromObject(data['impersonatedUser']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Impersonation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Impersonation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `impersonatedUser`
        if (data['impersonatedUser']) { // data not null
          User.validateJSON(data['impersonatedUser']);
        }

        return true;
    }


}



/**
 * @member {module:model/User} impersonatedUser
 */
Impersonation.prototype['impersonatedUser'] = undefined;






export default Impersonation;

