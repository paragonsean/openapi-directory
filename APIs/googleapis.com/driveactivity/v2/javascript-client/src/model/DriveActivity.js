/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Action from './Action';
import ActionDetail from './ActionDetail';
import Actor from './Actor';
import Target from './Target';
import TimeRange from './TimeRange';

/**
 * The DriveActivity model module.
 * @module model/DriveActivity
 * @version v2
 */
class DriveActivity {
    /**
     * Constructs a new <code>DriveActivity</code>.
     * A single Drive activity comprising one or more Actions by one or more Actors on one or more Targets. Some Action groupings occur spontaneously, such as moving an item into a shared folder triggering a permission change. Other groupings of related Actions, such as multiple Actors editing one item or moving multiple files into a new folder, are controlled by the selection of a ConsolidationStrategy in the QueryDriveActivityRequest.
     * @alias module:model/DriveActivity
     */
    constructor() { 
        
        DriveActivity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DriveActivity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DriveActivity} obj Optional instance to populate.
     * @return {module:model/DriveActivity} The populated <code>DriveActivity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DriveActivity();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [Action]);
            }
            if (data.hasOwnProperty('actors')) {
                obj['actors'] = ApiClient.convertToType(data['actors'], [Actor]);
            }
            if (data.hasOwnProperty('primaryActionDetail')) {
                obj['primaryActionDetail'] = ActionDetail.constructFromObject(data['primaryActionDetail']);
            }
            if (data.hasOwnProperty('targets')) {
                obj['targets'] = ApiClient.convertToType(data['targets'], [Target]);
            }
            if (data.hasOwnProperty('timeRange')) {
                obj['timeRange'] = TimeRange.constructFromObject(data['timeRange']);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DriveActivity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DriveActivity</code>.
     */
    static validateJSON(data) {
        if (data['actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actions'])) {
                throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
            }
            // validate the optional field `actions` (array)
            for (const item of data['actions']) {
                Action.validateJSON(item);
            };
        }
        if (data['actors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actors'])) {
                throw new Error("Expected the field `actors` to be an array in the JSON data but got " + data['actors']);
            }
            // validate the optional field `actors` (array)
            for (const item of data['actors']) {
                Actor.validateJSON(item);
            };
        }
        // validate the optional field `primaryActionDetail`
        if (data['primaryActionDetail']) { // data not null
          ActionDetail.validateJSON(data['primaryActionDetail']);
        }
        if (data['targets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['targets'])) {
                throw new Error("Expected the field `targets` to be an array in the JSON data but got " + data['targets']);
            }
            // validate the optional field `targets` (array)
            for (const item of data['targets']) {
                Target.validateJSON(item);
            };
        }
        // validate the optional field `timeRange`
        if (data['timeRange']) { // data not null
          TimeRange.validateJSON(data['timeRange']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }

        return true;
    }


}



/**
 * Details on all actions in this activity.
 * @member {Array.<module:model/Action>} actions
 */
DriveActivity.prototype['actions'] = undefined;

/**
 * All actor(s) responsible for the activity.
 * @member {Array.<module:model/Actor>} actors
 */
DriveActivity.prototype['actors'] = undefined;

/**
 * @member {module:model/ActionDetail} primaryActionDetail
 */
DriveActivity.prototype['primaryActionDetail'] = undefined;

/**
 * All Google Drive objects this activity is about (e.g. file, folder, drive). This represents the state of the target immediately after the actions occurred.
 * @member {Array.<module:model/Target>} targets
 */
DriveActivity.prototype['targets'] = undefined;

/**
 * @member {module:model/TimeRange} timeRange
 */
DriveActivity.prototype['timeRange'] = undefined;

/**
 * The activity occurred at this specific time.
 * @member {String} timestamp
 */
DriveActivity.prototype['timestamp'] = undefined;






export default DriveActivity;

