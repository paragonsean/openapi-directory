/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Impersonation from './Impersonation';
import SystemEvent from './SystemEvent';
import User from './User';

/**
 * The Actor model module.
 * @module model/Actor
 * @version v2
 */
class Actor {
    /**
     * Constructs a new <code>Actor</code>.
     * The actor of a Drive activity.
     * @alias module:model/Actor
     */
    constructor() { 
        
        Actor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Actor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Actor} obj Optional instance to populate.
     * @return {module:model/Actor} The populated <code>Actor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Actor();

            if (data.hasOwnProperty('administrator')) {
                obj['administrator'] = ApiClient.convertToType(data['administrator'], Object);
            }
            if (data.hasOwnProperty('anonymous')) {
                obj['anonymous'] = ApiClient.convertToType(data['anonymous'], Object);
            }
            if (data.hasOwnProperty('impersonation')) {
                obj['impersonation'] = Impersonation.constructFromObject(data['impersonation']);
            }
            if (data.hasOwnProperty('system')) {
                obj['system'] = SystemEvent.constructFromObject(data['system']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Actor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Actor</code>.
     */
    static validateJSON(data) {
        // validate the optional field `impersonation`
        if (data['impersonation']) { // data not null
          Impersonation.validateJSON(data['impersonation']);
        }
        // validate the optional field `system`
        if (data['system']) { // data not null
          SystemEvent.validateJSON(data['system']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * Empty message representing an administrator.
 * @member {Object} administrator
 */
Actor.prototype['administrator'] = undefined;

/**
 * Empty message representing an anonymous user or indicating the authenticated user should be anonymized.
 * @member {Object} anonymous
 */
Actor.prototype['anonymous'] = undefined;

/**
 * @member {module:model/Impersonation} impersonation
 */
Actor.prototype['impersonation'] = undefined;

/**
 * @member {module:model/SystemEvent} system
 */
Actor.prototype['system'] = undefined;

/**
 * @member {module:model/User} user
 */
Actor.prototype['user'] = undefined;






export default Actor;

