/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Integer from './Integer';
import ModelDate from './ModelDate';
import Selection from './Selection';
import SelectionList from './SelectionList';
import SingleUser from './SingleUser';
import Text from './Text';
import TextList from './TextList';
import UserList from './UserList';

/**
 * The FieldValue model module.
 * @module model/FieldValue
 * @version v2
 */
class FieldValue {
    /**
     * Constructs a new <code>FieldValue</code>.
     * Contains a value of a Field.
     * @alias module:model/FieldValue
     */
    constructor() { 
        
        FieldValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FieldValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldValue} obj Optional instance to populate.
     * @return {module:model/FieldValue} The populated <code>FieldValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldValue();

            if (data.hasOwnProperty('date')) {
                obj['date'] = ModelDate.constructFromObject(data['date']);
            }
            if (data.hasOwnProperty('integer')) {
                obj['integer'] = 'Integer'.constructFromObject(data['integer']);
            }
            if (data.hasOwnProperty('selection')) {
                obj['selection'] = Selection.constructFromObject(data['selection']);
            }
            if (data.hasOwnProperty('selectionList')) {
                obj['selectionList'] = SelectionList.constructFromObject(data['selectionList']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = Text.constructFromObject(data['text']);
            }
            if (data.hasOwnProperty('textList')) {
                obj['textList'] = TextList.constructFromObject(data['textList']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = SingleUser.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('userList')) {
                obj['userList'] = UserList.constructFromObject(data['userList']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FieldValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FieldValue</code>.
     */
    static validateJSON(data) {
        // validate the optional field `date`
        if (data['date']) { // data not null
          ModelDate.validateJSON(data['date']);
        }
        // validate the optional field `integer`
        if (data['integer']) { // data not null
          Integer.validateJSON(data['integer']);
        }
        // validate the optional field `selection`
        if (data['selection']) { // data not null
          Selection.validateJSON(data['selection']);
        }
        // validate the optional field `selectionList`
        if (data['selectionList']) { // data not null
          SelectionList.validateJSON(data['selectionList']);
        }
        // validate the optional field `text`
        if (data['text']) { // data not null
          Text.validateJSON(data['text']);
        }
        // validate the optional field `textList`
        if (data['textList']) { // data not null
          TextList.validateJSON(data['textList']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          SingleUser.validateJSON(data['user']);
        }
        // validate the optional field `userList`
        if (data['userList']) { // data not null
          UserList.validateJSON(data['userList']);
        }

        return true;
    }


}



/**
 * @member {module:model/ModelDate} date
 */
FieldValue.prototype['date'] = undefined;

/**
 * @member {module:model/Integer} integer
 */
FieldValue.prototype['integer'] = undefined;

/**
 * @member {module:model/Selection} selection
 */
FieldValue.prototype['selection'] = undefined;

/**
 * @member {module:model/SelectionList} selectionList
 */
FieldValue.prototype['selectionList'] = undefined;

/**
 * @member {module:model/Text} text
 */
FieldValue.prototype['text'] = undefined;

/**
 * @member {module:model/TextList} textList
 */
FieldValue.prototype['textList'] = undefined;

/**
 * @member {module:model/SingleUser} user
 */
FieldValue.prototype['user'] = undefined;

/**
 * @member {module:model/UserList} userList
 */
FieldValue.prototype['userList'] = undefined;






export default FieldValue;

