/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldValue from './FieldValue';

/**
 * The FieldValueChange model module.
 * @module model/FieldValueChange
 * @version v2
 */
class FieldValueChange {
    /**
     * Constructs a new <code>FieldValueChange</code>.
     * Change to a Field value.
     * @alias module:model/FieldValueChange
     */
    constructor() { 
        
        FieldValueChange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FieldValueChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldValueChange} obj Optional instance to populate.
     * @return {module:model/FieldValueChange} The populated <code>FieldValueChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldValueChange();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('fieldId')) {
                obj['fieldId'] = ApiClient.convertToType(data['fieldId'], 'String');
            }
            if (data.hasOwnProperty('newValue')) {
                obj['newValue'] = FieldValue.constructFromObject(data['newValue']);
            }
            if (data.hasOwnProperty('oldValue')) {
                obj['oldValue'] = FieldValue.constructFromObject(data['oldValue']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FieldValueChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FieldValueChange</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['fieldId'] && !(typeof data['fieldId'] === 'string' || data['fieldId'] instanceof String)) {
            throw new Error("Expected the field `fieldId` to be a primitive type in the JSON string but got " + data['fieldId']);
        }
        // validate the optional field `newValue`
        if (data['newValue']) { // data not null
          FieldValue.validateJSON(data['newValue']);
        }
        // validate the optional field `oldValue`
        if (data['oldValue']) { // data not null
          FieldValue.validateJSON(data['oldValue']);
        }

        return true;
    }


}



/**
 * The human-readable display name for this field.
 * @member {String} displayName
 */
FieldValueChange.prototype['displayName'] = undefined;

/**
 * The ID of this field. Field IDs are unique within a Label.
 * @member {String} fieldId
 */
FieldValueChange.prototype['fieldId'] = undefined;

/**
 * @member {module:model/FieldValue} newValue
 */
FieldValueChange.prototype['newValue'] = undefined;

/**
 * @member {module:model/FieldValue} oldValue
 */
FieldValueChange.prototype['oldValue'] = undefined;






export default FieldValueChange;

