/**
 * Drive Activity API
 * Provides a historical view of activity in Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Assignment from './Assignment';
import Post from './Post';
import Suggestion from './Suggestion';
import User from './User';

/**
 * The Comment model module.
 * @module model/Comment
 * @version v2
 */
class Comment {
    /**
     * Constructs a new <code>Comment</code>.
     * A change about comments on an object.
     * @alias module:model/Comment
     */
    constructor() { 
        
        Comment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Comment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Comment} obj Optional instance to populate.
     * @return {module:model/Comment} The populated <code>Comment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Comment();

            if (data.hasOwnProperty('assignment')) {
                obj['assignment'] = Assignment.constructFromObject(data['assignment']);
            }
            if (data.hasOwnProperty('mentionedUsers')) {
                obj['mentionedUsers'] = ApiClient.convertToType(data['mentionedUsers'], [User]);
            }
            if (data.hasOwnProperty('post')) {
                obj['post'] = Post.constructFromObject(data['post']);
            }
            if (data.hasOwnProperty('suggestion')) {
                obj['suggestion'] = Suggestion.constructFromObject(data['suggestion']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Comment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Comment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `assignment`
        if (data['assignment']) { // data not null
          Assignment.validateJSON(data['assignment']);
        }
        if (data['mentionedUsers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mentionedUsers'])) {
                throw new Error("Expected the field `mentionedUsers` to be an array in the JSON data but got " + data['mentionedUsers']);
            }
            // validate the optional field `mentionedUsers` (array)
            for (const item of data['mentionedUsers']) {
                User.validateJSON(item);
            };
        }
        // validate the optional field `post`
        if (data['post']) { // data not null
          Post.validateJSON(data['post']);
        }
        // validate the optional field `suggestion`
        if (data['suggestion']) { // data not null
          Suggestion.validateJSON(data['suggestion']);
        }

        return true;
    }


}



/**
 * @member {module:model/Assignment} assignment
 */
Comment.prototype['assignment'] = undefined;

/**
 * Users who are mentioned in this comment.
 * @member {Array.<module:model/User>} mentionedUsers
 */
Comment.prototype['mentionedUsers'] = undefined;

/**
 * @member {module:model/Post} post
 */
Comment.prototype['post'] = undefined;

/**
 * @member {module:model/Suggestion} suggestion
 */
Comment.prototype['suggestion'] = undefined;






export default Comment;

