# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consolidation_strategy import ConsolidationStrategy
from openapi_server import util


class QueryDriveActivityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ancestor_name: str=None, consolidation_strategy: ConsolidationStrategy=None, filter: str=None, item_name: str=None, page_size: int=None, page_token: str=None):
        """QueryDriveActivityRequest - a model defined in OpenAPI

        :param ancestor_name: The ancestor_name of this QueryDriveActivityRequest.
        :param consolidation_strategy: The consolidation_strategy of this QueryDriveActivityRequest.
        :param filter: The filter of this QueryDriveActivityRequest.
        :param item_name: The item_name of this QueryDriveActivityRequest.
        :param page_size: The page_size of this QueryDriveActivityRequest.
        :param page_token: The page_token of this QueryDriveActivityRequest.
        """
        self.openapi_types = {
            'ancestor_name': str,
            'consolidation_strategy': ConsolidationStrategy,
            'filter': str,
            'item_name': str,
            'page_size': int,
            'page_token': str
        }

        self.attribute_map = {
            'ancestor_name': 'ancestorName',
            'consolidation_strategy': 'consolidationStrategy',
            'filter': 'filter',
            'item_name': 'itemName',
            'page_size': 'pageSize',
            'page_token': 'pageToken'
        }

        self._ancestor_name = ancestor_name
        self._consolidation_strategy = consolidation_strategy
        self._filter = filter
        self._item_name = item_name
        self._page_size = page_size
        self._page_token = page_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryDriveActivityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryDriveActivityRequest of this QueryDriveActivityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ancestor_name(self):
        """Gets the ancestor_name of this QueryDriveActivityRequest.

        Return activities for this Drive folder, plus all children and descendants. The format is `items/ITEM_ID`.

        :return: The ancestor_name of this QueryDriveActivityRequest.
        :rtype: str
        """
        return self._ancestor_name

    @ancestor_name.setter
    def ancestor_name(self, ancestor_name):
        """Sets the ancestor_name of this QueryDriveActivityRequest.

        Return activities for this Drive folder, plus all children and descendants. The format is `items/ITEM_ID`.

        :param ancestor_name: The ancestor_name of this QueryDriveActivityRequest.
        :type ancestor_name: str
        """

        self._ancestor_name = ancestor_name

    @property
    def consolidation_strategy(self):
        """Gets the consolidation_strategy of this QueryDriveActivityRequest.


        :return: The consolidation_strategy of this QueryDriveActivityRequest.
        :rtype: ConsolidationStrategy
        """
        return self._consolidation_strategy

    @consolidation_strategy.setter
    def consolidation_strategy(self, consolidation_strategy):
        """Sets the consolidation_strategy of this QueryDriveActivityRequest.


        :param consolidation_strategy: The consolidation_strategy of this QueryDriveActivityRequest.
        :type consolidation_strategy: ConsolidationStrategy
        """

        self._consolidation_strategy = consolidation_strategy

    @property
    def filter(self):
        """Gets the filter of this QueryDriveActivityRequest.

        The filtering for items returned from this query request. The format of the filter string is a sequence of expressions, joined by an optional \"AND\", where each expression is of the form \"field operator value\". Supported fields: - `time`: Uses numerical operators on date values either in terms of milliseconds since Jan 1, 1970 or in RFC 3339 format. Examples: - `time > 1452409200000 AND time <= 1492812924310` - `time >= \"2016-01-10T01:02:03-05:00\"` - `detail.action_detail_case`: Uses the \"has\" operator (:) and either a singular value or a list of allowed action types enclosed in parentheses, separated by a space. To exclude a result from the response, prepend a hyphen (`-`) to the beginning of the filter string. Examples: - `detail.action_detail_case:RENAME` - `detail.action_detail_case:(CREATE RESTORE)` - `-detail.action_detail_case:MOVE` 

        :return: The filter of this QueryDriveActivityRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this QueryDriveActivityRequest.

        The filtering for items returned from this query request. The format of the filter string is a sequence of expressions, joined by an optional \"AND\", where each expression is of the form \"field operator value\". Supported fields: - `time`: Uses numerical operators on date values either in terms of milliseconds since Jan 1, 1970 or in RFC 3339 format. Examples: - `time > 1452409200000 AND time <= 1492812924310` - `time >= \"2016-01-10T01:02:03-05:00\"` - `detail.action_detail_case`: Uses the \"has\" operator (:) and either a singular value or a list of allowed action types enclosed in parentheses, separated by a space. To exclude a result from the response, prepend a hyphen (`-`) to the beginning of the filter string. Examples: - `detail.action_detail_case:RENAME` - `detail.action_detail_case:(CREATE RESTORE)` - `-detail.action_detail_case:MOVE` 

        :param filter: The filter of this QueryDriveActivityRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def item_name(self):
        """Gets the item_name of this QueryDriveActivityRequest.

        Return activities for this Drive item. The format is `items/ITEM_ID`.

        :return: The item_name of this QueryDriveActivityRequest.
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name):
        """Sets the item_name of this QueryDriveActivityRequest.

        Return activities for this Drive item. The format is `items/ITEM_ID`.

        :param item_name: The item_name of this QueryDriveActivityRequest.
        :type item_name: str
        """

        self._item_name = item_name

    @property
    def page_size(self):
        """Gets the page_size of this QueryDriveActivityRequest.

        The minimum number of activities desired in the response; the server attempts to return at least this quantity. The server may also return fewer activities if it has a partial response ready before the request times out. If not set, a default value is used.

        :return: The page_size of this QueryDriveActivityRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this QueryDriveActivityRequest.

        The minimum number of activities desired in the response; the server attempts to return at least this quantity. The server may also return fewer activities if it has a partial response ready before the request times out. If not set, a default value is used.

        :param page_size: The page_size of this QueryDriveActivityRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this QueryDriveActivityRequest.

        The token identifies which page of results to return. Set this to the next_page_token value returned from a previous query to obtain the following page of results. If not set, the first page of results is returned.

        :return: The page_token of this QueryDriveActivityRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this QueryDriveActivityRequest.

        The token identifies which page of results to return. Set this to the next_page_token value returned from a previous query to obtain the following page of results. If not set, the first page of results is returned.

        :param page_token: The page_token of this QueryDriveActivityRequest.
        :type page_token: str
        """

        self._page_token = page_token
