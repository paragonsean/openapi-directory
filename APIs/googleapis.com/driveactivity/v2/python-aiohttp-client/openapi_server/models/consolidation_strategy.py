# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConsolidationStrategy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, legacy: object=None, _none: object=None):
        """ConsolidationStrategy - a model defined in OpenAPI

        :param legacy: The legacy of this ConsolidationStrategy.
        :param _none: The _none of this ConsolidationStrategy.
        """
        self.openapi_types = {
            'legacy': object,
            '_none': object
        }

        self.attribute_map = {
            'legacy': 'legacy',
            '_none': 'none'
        }

        self._legacy = legacy
        self.__none = _none

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsolidationStrategy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsolidationStrategy of this ConsolidationStrategy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def legacy(self):
        """Gets the legacy of this ConsolidationStrategy.

        A strategy that consolidates activities using the grouping rules from the legacy V1 Activity API. Similar actions occurring within a window of time can be grouped across multiple targets (such as moving a set of files at once) or multiple actors (such as several users editing the same item). Grouping rules for this strategy are specific to each type of action.

        :return: The legacy of this ConsolidationStrategy.
        :rtype: object
        """
        return self._legacy

    @legacy.setter
    def legacy(self, legacy):
        """Sets the legacy of this ConsolidationStrategy.

        A strategy that consolidates activities using the grouping rules from the legacy V1 Activity API. Similar actions occurring within a window of time can be grouped across multiple targets (such as moving a set of files at once) or multiple actors (such as several users editing the same item). Grouping rules for this strategy are specific to each type of action.

        :param legacy: The legacy of this ConsolidationStrategy.
        :type legacy: object
        """

        self._legacy = legacy

    @property
    def _none(self):
        """Gets the _none of this ConsolidationStrategy.

        A strategy that does no consolidation of individual activities.

        :return: The _none of this ConsolidationStrategy.
        :rtype: object
        """
        return self.__none

    @_none.setter
    def _none(self, _none):
        """Sets the _none of this ConsolidationStrategy.

        A strategy that does no consolidation of individual activities.

        :param _none: The _none of this ConsolidationStrategy.
        :type _none: object
        """

        self.__none = _none
