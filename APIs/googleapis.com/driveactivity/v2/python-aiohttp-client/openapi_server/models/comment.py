# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assignment import Assignment
from openapi_server.models.post import Post
from openapi_server.models.suggestion import Suggestion
from openapi_server.models.user import User
from openapi_server import util


class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignment: Assignment=None, mentioned_users: List[User]=None, post: Post=None, suggestion: Suggestion=None):
        """Comment - a model defined in OpenAPI

        :param assignment: The assignment of this Comment.
        :param mentioned_users: The mentioned_users of this Comment.
        :param post: The post of this Comment.
        :param suggestion: The suggestion of this Comment.
        """
        self.openapi_types = {
            'assignment': Assignment,
            'mentioned_users': List[User],
            'post': Post,
            'suggestion': Suggestion
        }

        self.attribute_map = {
            'assignment': 'assignment',
            'mentioned_users': 'mentionedUsers',
            'post': 'post',
            'suggestion': 'suggestion'
        }

        self._assignment = assignment
        self._mentioned_users = mentioned_users
        self._post = post
        self._suggestion = suggestion

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Comment of this Comment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignment(self):
        """Gets the assignment of this Comment.


        :return: The assignment of this Comment.
        :rtype: Assignment
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """Sets the assignment of this Comment.


        :param assignment: The assignment of this Comment.
        :type assignment: Assignment
        """

        self._assignment = assignment

    @property
    def mentioned_users(self):
        """Gets the mentioned_users of this Comment.

        Users who are mentioned in this comment.

        :return: The mentioned_users of this Comment.
        :rtype: List[User]
        """
        return self._mentioned_users

    @mentioned_users.setter
    def mentioned_users(self, mentioned_users):
        """Sets the mentioned_users of this Comment.

        Users who are mentioned in this comment.

        :param mentioned_users: The mentioned_users of this Comment.
        :type mentioned_users: List[User]
        """

        self._mentioned_users = mentioned_users

    @property
    def post(self):
        """Gets the post of this Comment.


        :return: The post of this Comment.
        :rtype: Post
        """
        return self._post

    @post.setter
    def post(self, post):
        """Sets the post of this Comment.


        :param post: The post of this Comment.
        :type post: Post
        """

        self._post = post

    @property
    def suggestion(self):
        """Gets the suggestion of this Comment.


        :return: The suggestion of this Comment.
        :rtype: Suggestion
        """
        return self._suggestion

    @suggestion.setter
    def suggestion(self, suggestion):
        """Sets the suggestion of this Comment.


        :param suggestion: The suggestion of this Comment.
        :type suggestion: Suggestion
        """

        self._suggestion = suggestion
