# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RestrictionChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature: str=None, new_restriction: str=None):
        """RestrictionChange - a model defined in OpenAPI

        :param feature: The feature of this RestrictionChange.
        :param new_restriction: The new_restriction of this RestrictionChange.
        """
        self.openapi_types = {
            'feature': str,
            'new_restriction': str
        }

        self.attribute_map = {
            'feature': 'feature',
            'new_restriction': 'newRestriction'
        }

        self._feature = feature
        self._new_restriction = new_restriction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestrictionChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestrictionChange of this RestrictionChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature(self):
        """Gets the feature of this RestrictionChange.

        The feature which had a change in restriction policy.

        :return: The feature of this RestrictionChange.
        :rtype: str
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """Sets the feature of this RestrictionChange.

        The feature which had a change in restriction policy.

        :param feature: The feature of this RestrictionChange.
        :type feature: str
        """
        allowed_values = ["FEATURE_UNSPECIFIED", "SHARING_OUTSIDE_DOMAIN", "DIRECT_SHARING", "ITEM_DUPLICATION", "DRIVE_FILE_STREAM", "FILE_ORGANIZER_CAN_SHARE_FOLDERS"]  # noqa: E501
        if feature not in allowed_values:
            raise ValueError(
                "Invalid value for `feature` ({0}), must be one of {1}"
                .format(feature, allowed_values)
            )

        self._feature = feature

    @property
    def new_restriction(self):
        """Gets the new_restriction of this RestrictionChange.

        The restriction in place after the change.

        :return: The new_restriction of this RestrictionChange.
        :rtype: str
        """
        return self._new_restriction

    @new_restriction.setter
    def new_restriction(self, new_restriction):
        """Sets the new_restriction of this RestrictionChange.

        The restriction in place after the change.

        :param new_restriction: The new_restriction of this RestrictionChange.
        :type new_restriction: str
        """
        allowed_values = ["RESTRICTION_UNSPECIFIED", "UNRESTRICTED", "FULLY_RESTRICTED"]  # noqa: E501
        if new_restriction not in allowed_values:
            raise ValueError(
                "Invalid value for `new_restriction` ({0}), must be one of {1}"
                .format(new_restriction, allowed_values)
            )

        self._new_restriction = new_restriction
