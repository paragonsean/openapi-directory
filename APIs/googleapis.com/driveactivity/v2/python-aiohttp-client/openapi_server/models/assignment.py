# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class Assignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assigned_user: User=None, subtype: str=None):
        """Assignment - a model defined in OpenAPI

        :param assigned_user: The assigned_user of this Assignment.
        :param subtype: The subtype of this Assignment.
        """
        self.openapi_types = {
            'assigned_user': User,
            'subtype': str
        }

        self.attribute_map = {
            'assigned_user': 'assignedUser',
            'subtype': 'subtype'
        }

        self._assigned_user = assigned_user
        self._subtype = subtype

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Assignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Assignment of this Assignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assigned_user(self):
        """Gets the assigned_user of this Assignment.


        :return: The assigned_user of this Assignment.
        :rtype: User
        """
        return self._assigned_user

    @assigned_user.setter
    def assigned_user(self, assigned_user):
        """Sets the assigned_user of this Assignment.


        :param assigned_user: The assigned_user of this Assignment.
        :type assigned_user: User
        """

        self._assigned_user = assigned_user

    @property
    def subtype(self):
        """Gets the subtype of this Assignment.

        The sub-type of this event.

        :return: The subtype of this Assignment.
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this Assignment.

        The sub-type of this event.

        :param subtype: The subtype of this Assignment.
        :type subtype: str
        """
        allowed_values = ["SUBTYPE_UNSPECIFIED", "ADDED", "DELETED", "REPLY_ADDED", "REPLY_DELETED", "RESOLVED", "REOPENED", "REASSIGNED"]  # noqa: E501
        if subtype not in allowed_values:
            raise ValueError(
                "Invalid value for `subtype` ({0}), must be one of {1}"
                .format(subtype, allowed_values)
            )

        self._subtype = subtype
