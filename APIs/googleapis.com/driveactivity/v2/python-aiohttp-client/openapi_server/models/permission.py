# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.domain import Domain
from openapi_server.models.group import Group
from openapi_server.models.user import User
from openapi_server import util


class Permission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_discovery: bool=None, anyone: object=None, domain: Domain=None, group: Group=None, role: str=None, user: User=None):
        """Permission - a model defined in OpenAPI

        :param allow_discovery: The allow_discovery of this Permission.
        :param anyone: The anyone of this Permission.
        :param domain: The domain of this Permission.
        :param group: The group of this Permission.
        :param role: The role of this Permission.
        :param user: The user of this Permission.
        """
        self.openapi_types = {
            'allow_discovery': bool,
            'anyone': object,
            'domain': Domain,
            'group': Group,
            'role': str,
            'user': User
        }

        self.attribute_map = {
            'allow_discovery': 'allowDiscovery',
            'anyone': 'anyone',
            'domain': 'domain',
            'group': 'group',
            'role': 'role',
            'user': 'user'
        }

        self._allow_discovery = allow_discovery
        self._anyone = anyone
        self._domain = domain
        self._group = group
        self._role = role
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Permission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Permission of this Permission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_discovery(self):
        """Gets the allow_discovery of this Permission.

        If true, the item can be discovered (e.g. in the user's \"Shared with me\" collection) without needing a link to the item.

        :return: The allow_discovery of this Permission.
        :rtype: bool
        """
        return self._allow_discovery

    @allow_discovery.setter
    def allow_discovery(self, allow_discovery):
        """Sets the allow_discovery of this Permission.

        If true, the item can be discovered (e.g. in the user's \"Shared with me\" collection) without needing a link to the item.

        :param allow_discovery: The allow_discovery of this Permission.
        :type allow_discovery: bool
        """

        self._allow_discovery = allow_discovery

    @property
    def anyone(self):
        """Gets the anyone of this Permission.

        Represents any user (including a logged out user).

        :return: The anyone of this Permission.
        :rtype: object
        """
        return self._anyone

    @anyone.setter
    def anyone(self, anyone):
        """Sets the anyone of this Permission.

        Represents any user (including a logged out user).

        :param anyone: The anyone of this Permission.
        :type anyone: object
        """

        self._anyone = anyone

    @property
    def domain(self):
        """Gets the domain of this Permission.


        :return: The domain of this Permission.
        :rtype: Domain
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Permission.


        :param domain: The domain of this Permission.
        :type domain: Domain
        """

        self._domain = domain

    @property
    def group(self):
        """Gets the group of this Permission.


        :return: The group of this Permission.
        :rtype: Group
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Permission.


        :param group: The group of this Permission.
        :type group: Group
        """

        self._group = group

    @property
    def role(self):
        """Gets the role of this Permission.

        Indicates the [Google Drive permissions role](https://developers.google.com/drive/web/manage-sharing#roles). The role determines a user's ability to read, write, and comment on items.

        :return: The role of this Permission.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Permission.

        Indicates the [Google Drive permissions role](https://developers.google.com/drive/web/manage-sharing#roles). The role determines a user's ability to read, write, and comment on items.

        :param role: The role of this Permission.
        :type role: str
        """
        allowed_values = ["ROLE_UNSPECIFIED", "OWNER", "ORGANIZER", "FILE_ORGANIZER", "EDITOR", "COMMENTER", "VIEWER", "PUBLISHED_VIEWER"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def user(self):
        """Gets the user of this Permission.


        :return: The user of this Permission.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Permission.


        :param user: The user of this Permission.
        :type user: User
        """

        self._user = user
