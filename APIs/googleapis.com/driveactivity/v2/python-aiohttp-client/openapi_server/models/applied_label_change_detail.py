# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_value_change import FieldValueChange
from openapi_server import util


class AppliedLabelChangeDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_changes: List[FieldValueChange]=None, label: str=None, title: str=None, types: List[str]=None):
        """AppliedLabelChangeDetail - a model defined in OpenAPI

        :param field_changes: The field_changes of this AppliedLabelChangeDetail.
        :param label: The label of this AppliedLabelChangeDetail.
        :param title: The title of this AppliedLabelChangeDetail.
        :param types: The types of this AppliedLabelChangeDetail.
        """
        self.openapi_types = {
            'field_changes': List[FieldValueChange],
            'label': str,
            'title': str,
            'types': List[str]
        }

        self.attribute_map = {
            'field_changes': 'fieldChanges',
            'label': 'label',
            'title': 'title',
            'types': 'types'
        }

        self._field_changes = field_changes
        self._label = label
        self._title = title
        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppliedLabelChangeDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppliedLabelChangeDetail of this AppliedLabelChangeDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_changes(self):
        """Gets the field_changes of this AppliedLabelChangeDetail.

        Field Changes. Only present if `types` contains `LABEL_FIELD_VALUE_CHANGED`.

        :return: The field_changes of this AppliedLabelChangeDetail.
        :rtype: List[FieldValueChange]
        """
        return self._field_changes

    @field_changes.setter
    def field_changes(self, field_changes):
        """Sets the field_changes of this AppliedLabelChangeDetail.

        Field Changes. Only present if `types` contains `LABEL_FIELD_VALUE_CHANGED`.

        :param field_changes: The field_changes of this AppliedLabelChangeDetail.
        :type field_changes: List[FieldValueChange]
        """

        self._field_changes = field_changes

    @property
    def label(self):
        """Gets the label of this AppliedLabelChangeDetail.

        The Label name representing the Label that changed. This name always contains the revision of the Label that was used when this Action occurred. The format is `labels/id@revision`.

        :return: The label of this AppliedLabelChangeDetail.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AppliedLabelChangeDetail.

        The Label name representing the Label that changed. This name always contains the revision of the Label that was used when this Action occurred. The format is `labels/id@revision`.

        :param label: The label of this AppliedLabelChangeDetail.
        :type label: str
        """

        self._label = label

    @property
    def title(self):
        """Gets the title of this AppliedLabelChangeDetail.

        The human-readable title of the label that changed.

        :return: The title of this AppliedLabelChangeDetail.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AppliedLabelChangeDetail.

        The human-readable title of the label that changed.

        :param title: The title of this AppliedLabelChangeDetail.
        :type title: str
        """

        self._title = title

    @property
    def types(self):
        """Gets the types of this AppliedLabelChangeDetail.

        The types of changes made to the Label on the Target.

        :return: The types of this AppliedLabelChangeDetail.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this AppliedLabelChangeDetail.

        The types of changes made to the Label on the Target.

        :param types: The types of this AppliedLabelChangeDetail.
        :type types: List[str]
        """
        allowed_values = ["TYPE_UNSPECIFIED", "LABEL_ADDED", "LABEL_REMOVED", "LABEL_FIELD_VALUE_CHANGED", "LABEL_APPLIED_BY_ITEM_CREATE"]  # noqa: E501
        if not set(types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._types = types
