# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.impersonation import Impersonation
from openapi_server.models.system_event import SystemEvent
from openapi_server.models.user import User
from openapi_server import util


class Actor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, administrator: object=None, anonymous: object=None, impersonation: Impersonation=None, system: SystemEvent=None, user: User=None):
        """Actor - a model defined in OpenAPI

        :param administrator: The administrator of this Actor.
        :param anonymous: The anonymous of this Actor.
        :param impersonation: The impersonation of this Actor.
        :param system: The system of this Actor.
        :param user: The user of this Actor.
        """
        self.openapi_types = {
            'administrator': object,
            'anonymous': object,
            'impersonation': Impersonation,
            'system': SystemEvent,
            'user': User
        }

        self.attribute_map = {
            'administrator': 'administrator',
            'anonymous': 'anonymous',
            'impersonation': 'impersonation',
            'system': 'system',
            'user': 'user'
        }

        self._administrator = administrator
        self._anonymous = anonymous
        self._impersonation = impersonation
        self._system = system
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Actor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Actor of this Actor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def administrator(self):
        """Gets the administrator of this Actor.

        Empty message representing an administrator.

        :return: The administrator of this Actor.
        :rtype: object
        """
        return self._administrator

    @administrator.setter
    def administrator(self, administrator):
        """Sets the administrator of this Actor.

        Empty message representing an administrator.

        :param administrator: The administrator of this Actor.
        :type administrator: object
        """

        self._administrator = administrator

    @property
    def anonymous(self):
        """Gets the anonymous of this Actor.

        Empty message representing an anonymous user or indicating the authenticated user should be anonymized.

        :return: The anonymous of this Actor.
        :rtype: object
        """
        return self._anonymous

    @anonymous.setter
    def anonymous(self, anonymous):
        """Sets the anonymous of this Actor.

        Empty message representing an anonymous user or indicating the authenticated user should be anonymized.

        :param anonymous: The anonymous of this Actor.
        :type anonymous: object
        """

        self._anonymous = anonymous

    @property
    def impersonation(self):
        """Gets the impersonation of this Actor.


        :return: The impersonation of this Actor.
        :rtype: Impersonation
        """
        return self._impersonation

    @impersonation.setter
    def impersonation(self, impersonation):
        """Sets the impersonation of this Actor.


        :param impersonation: The impersonation of this Actor.
        :type impersonation: Impersonation
        """

        self._impersonation = impersonation

    @property
    def system(self):
        """Gets the system of this Actor.


        :return: The system of this Actor.
        :rtype: SystemEvent
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this Actor.


        :param system: The system of this Actor.
        :type system: SystemEvent
        """

        self._system = system

    @property
    def user(self):
        """Gets the user of this Actor.


        :return: The user of this Actor.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Actor.


        :param user: The user of this Actor.
        :type user: User
        """

        self._user = user
