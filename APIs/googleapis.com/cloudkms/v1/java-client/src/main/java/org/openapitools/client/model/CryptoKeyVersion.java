/*
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExternalProtectionLevelOptions;
import org.openapitools.client.model.KeyOperationAttestation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A CryptoKeyVersion represents an individual cryptographic key, and the associated key material. An ENABLED version can be used for cryptographic operations. For security reasons, the raw cryptographic key material represented by a CryptoKeyVersion can never be viewed or exported. It can only be used to encrypt, decrypt, or sign data when an authorized user or application invokes Cloud KMS.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:14.760057-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CryptoKeyVersion {
  /**
   * Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
   */
  @JsonAdapter(AlgorithmEnum.Adapter.class)
  public enum AlgorithmEnum {
    CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED("CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED"),
    
    GOOGLE_SYMMETRIC_ENCRYPTION("GOOGLE_SYMMETRIC_ENCRYPTION"),
    
    AES_128_GCM("AES_128_GCM"),
    
    AES_256_GCM("AES_256_GCM"),
    
    AES_128_CBC("AES_128_CBC"),
    
    AES_256_CBC("AES_256_CBC"),
    
    AES_128_CTR("AES_128_CTR"),
    
    AES_256_CTR("AES_256_CTR"),
    
    RSA_SIGN_PSS_2048_SHA256("RSA_SIGN_PSS_2048_SHA256"),
    
    RSA_SIGN_PSS_3072_SHA256("RSA_SIGN_PSS_3072_SHA256"),
    
    RSA_SIGN_PSS_4096_SHA256("RSA_SIGN_PSS_4096_SHA256"),
    
    RSA_SIGN_PSS_4096_SHA512("RSA_SIGN_PSS_4096_SHA512"),
    
    RSA_SIGN_PKCS1_2048_SHA256("RSA_SIGN_PKCS1_2048_SHA256"),
    
    RSA_SIGN_PKCS1_3072_SHA256("RSA_SIGN_PKCS1_3072_SHA256"),
    
    RSA_SIGN_PKCS1_4096_SHA256("RSA_SIGN_PKCS1_4096_SHA256"),
    
    RSA_SIGN_PKCS1_4096_SHA512("RSA_SIGN_PKCS1_4096_SHA512"),
    
    RSA_SIGN_RAW_PKCS1_2048("RSA_SIGN_RAW_PKCS1_2048"),
    
    RSA_SIGN_RAW_PKCS1_3072("RSA_SIGN_RAW_PKCS1_3072"),
    
    RSA_SIGN_RAW_PKCS1_4096("RSA_SIGN_RAW_PKCS1_4096"),
    
    RSA_DECRYPT_OAEP_2048_SHA256("RSA_DECRYPT_OAEP_2048_SHA256"),
    
    RSA_DECRYPT_OAEP_3072_SHA256("RSA_DECRYPT_OAEP_3072_SHA256"),
    
    RSA_DECRYPT_OAEP_4096_SHA256("RSA_DECRYPT_OAEP_4096_SHA256"),
    
    RSA_DECRYPT_OAEP_4096_SHA512("RSA_DECRYPT_OAEP_4096_SHA512"),
    
    RSA_DECRYPT_OAEP_2048_SHA1("RSA_DECRYPT_OAEP_2048_SHA1"),
    
    RSA_DECRYPT_OAEP_3072_SHA1("RSA_DECRYPT_OAEP_3072_SHA1"),
    
    RSA_DECRYPT_OAEP_4096_SHA1("RSA_DECRYPT_OAEP_4096_SHA1"),
    
    EC_SIGN_P256_SHA256("EC_SIGN_P256_SHA256"),
    
    EC_SIGN_P384_SHA384("EC_SIGN_P384_SHA384"),
    
    EC_SIGN_SECP256_K1_SHA256("EC_SIGN_SECP256K1_SHA256"),
    
    HMAC_SHA256("HMAC_SHA256"),
    
    HMAC_SHA1("HMAC_SHA1"),
    
    HMAC_SHA384("HMAC_SHA384"),
    
    HMAC_SHA512("HMAC_SHA512"),
    
    HMAC_SHA224("HMAC_SHA224"),
    
    EXTERNAL_SYMMETRIC_ENCRYPTION("EXTERNAL_SYMMETRIC_ENCRYPTION");

    private String value;

    AlgorithmEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlgorithmEnum fromValue(String value) {
      for (AlgorithmEnum b : AlgorithmEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlgorithmEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlgorithmEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlgorithmEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlgorithmEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AlgorithmEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALGORITHM = "algorithm";
  @SerializedName(SERIALIZED_NAME_ALGORITHM)
  private AlgorithmEnum algorithm;

  public static final String SERIALIZED_NAME_ATTESTATION = "attestation";
  @SerializedName(SERIALIZED_NAME_ATTESTATION)
  private KeyOperationAttestation attestation;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESTROY_EVENT_TIME = "destroyEventTime";
  @SerializedName(SERIALIZED_NAME_DESTROY_EVENT_TIME)
  private String destroyEventTime;

  public static final String SERIALIZED_NAME_DESTROY_TIME = "destroyTime";
  @SerializedName(SERIALIZED_NAME_DESTROY_TIME)
  private String destroyTime;

  public static final String SERIALIZED_NAME_EXTERNAL_DESTRUCTION_FAILURE_REASON = "externalDestructionFailureReason";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DESTRUCTION_FAILURE_REASON)
  private String externalDestructionFailureReason;

  public static final String SERIALIZED_NAME_EXTERNAL_PROTECTION_LEVEL_OPTIONS = "externalProtectionLevelOptions";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_PROTECTION_LEVEL_OPTIONS)
  private ExternalProtectionLevelOptions externalProtectionLevelOptions;

  public static final String SERIALIZED_NAME_GENERATE_TIME = "generateTime";
  @SerializedName(SERIALIZED_NAME_GENERATE_TIME)
  private String generateTime;

  public static final String SERIALIZED_NAME_GENERATION_FAILURE_REASON = "generationFailureReason";
  @SerializedName(SERIALIZED_NAME_GENERATION_FAILURE_REASON)
  private String generationFailureReason;

  public static final String SERIALIZED_NAME_IMPORT_FAILURE_REASON = "importFailureReason";
  @SerializedName(SERIALIZED_NAME_IMPORT_FAILURE_REASON)
  private String importFailureReason;

  public static final String SERIALIZED_NAME_IMPORT_JOB = "importJob";
  @SerializedName(SERIALIZED_NAME_IMPORT_JOB)
  private String importJob;

  public static final String SERIALIZED_NAME_IMPORT_TIME = "importTime";
  @SerializedName(SERIALIZED_NAME_IMPORT_TIME)
  private String importTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
   */
  @JsonAdapter(ProtectionLevelEnum.Adapter.class)
  public enum ProtectionLevelEnum {
    PROTECTION_LEVEL_UNSPECIFIED("PROTECTION_LEVEL_UNSPECIFIED"),
    
    SOFTWARE("SOFTWARE"),
    
    HSM("HSM"),
    
    EXTERNAL("EXTERNAL"),
    
    EXTERNAL_VPC("EXTERNAL_VPC");

    private String value;

    ProtectionLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtectionLevelEnum fromValue(String value) {
      for (ProtectionLevelEnum b : ProtectionLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtectionLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtectionLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtectionLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtectionLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtectionLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTECTION_LEVEL = "protectionLevel";
  @SerializedName(SERIALIZED_NAME_PROTECTION_LEVEL)
  private ProtectionLevelEnum protectionLevel;

  public static final String SERIALIZED_NAME_REIMPORT_ELIGIBLE = "reimportEligible";
  @SerializedName(SERIALIZED_NAME_REIMPORT_ELIGIBLE)
  private Boolean reimportEligible;

  /**
   * The current state of the CryptoKeyVersion.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    CRYPTO_KEY_VERSION_STATE_UNSPECIFIED("CRYPTO_KEY_VERSION_STATE_UNSPECIFIED"),
    
    PENDING_GENERATION("PENDING_GENERATION"),
    
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED"),
    
    DESTROYED("DESTROYED"),
    
    DESTROY_SCHEDULED("DESTROY_SCHEDULED"),
    
    PENDING_IMPORT("PENDING_IMPORT"),
    
    IMPORT_FAILED("IMPORT_FAILED"),
    
    GENERATION_FAILED("GENERATION_FAILED"),
    
    PENDING_EXTERNAL_DESTRUCTION("PENDING_EXTERNAL_DESTRUCTION"),
    
    EXTERNAL_DESTRUCTION_FAILED("EXTERNAL_DESTRUCTION_FAILED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public CryptoKeyVersion() {
  }

  public CryptoKeyVersion(
     AlgorithmEnum algorithm, 
     String createTime, 
     String destroyEventTime, 
     String destroyTime, 
     String externalDestructionFailureReason, 
     String generateTime, 
     String generationFailureReason, 
     String importFailureReason, 
     String importJob, 
     String importTime, 
     String name, 
     ProtectionLevelEnum protectionLevel, 
     Boolean reimportEligible
  ) {
    this();
    this.algorithm = algorithm;
    this.createTime = createTime;
    this.destroyEventTime = destroyEventTime;
    this.destroyTime = destroyTime;
    this.externalDestructionFailureReason = externalDestructionFailureReason;
    this.generateTime = generateTime;
    this.generationFailureReason = generationFailureReason;
    this.importFailureReason = importFailureReason;
    this.importJob = importJob;
    this.importTime = importTime;
    this.name = name;
    this.protectionLevel = protectionLevel;
    this.reimportEligible = reimportEligible;
  }

  /**
   * Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.
   * @return algorithm
   */
  @javax.annotation.Nullable
  public AlgorithmEnum getAlgorithm() {
    return algorithm;
  }



  public CryptoKeyVersion attestation(KeyOperationAttestation attestation) {
    this.attestation = attestation;
    return this;
  }

  /**
   * Get attestation
   * @return attestation
   */
  @javax.annotation.Nullable
  public KeyOperationAttestation getAttestation() {
    return attestation;
  }

  public void setAttestation(KeyOperationAttestation attestation) {
    this.attestation = attestation;
  }


  /**
   * Output only. The time at which this CryptoKeyVersion was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The time this CryptoKeyVersion&#39;s key material was destroyed. Only present if state is DESTROYED.
   * @return destroyEventTime
   */
  @javax.annotation.Nullable
  public String getDestroyEventTime() {
    return destroyEventTime;
  }



  /**
   * Output only. The time this CryptoKeyVersion&#39;s key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.
   * @return destroyTime
   */
  @javax.annotation.Nullable
  public String getDestroyTime() {
    return destroyTime;
  }



  /**
   * Output only. The root cause of the most recent external destruction failure. Only present if state is EXTERNAL_DESTRUCTION_FAILED.
   * @return externalDestructionFailureReason
   */
  @javax.annotation.Nullable
  public String getExternalDestructionFailureReason() {
    return externalDestructionFailureReason;
  }



  public CryptoKeyVersion externalProtectionLevelOptions(ExternalProtectionLevelOptions externalProtectionLevelOptions) {
    this.externalProtectionLevelOptions = externalProtectionLevelOptions;
    return this;
  }

  /**
   * Get externalProtectionLevelOptions
   * @return externalProtectionLevelOptions
   */
  @javax.annotation.Nullable
  public ExternalProtectionLevelOptions getExternalProtectionLevelOptions() {
    return externalProtectionLevelOptions;
  }

  public void setExternalProtectionLevelOptions(ExternalProtectionLevelOptions externalProtectionLevelOptions) {
    this.externalProtectionLevelOptions = externalProtectionLevelOptions;
  }


  /**
   * Output only. The time this CryptoKeyVersion&#39;s key material was generated.
   * @return generateTime
   */
  @javax.annotation.Nullable
  public String getGenerateTime() {
    return generateTime;
  }



  /**
   * Output only. The root cause of the most recent generation failure. Only present if state is GENERATION_FAILED.
   * @return generationFailureReason
   */
  @javax.annotation.Nullable
  public String getGenerationFailureReason() {
    return generationFailureReason;
  }



  /**
   * Output only. The root cause of the most recent import failure. Only present if state is IMPORT_FAILED.
   * @return importFailureReason
   */
  @javax.annotation.Nullable
  public String getImportFailureReason() {
    return importFailureReason;
  }



  /**
   * Output only. The name of the ImportJob used in the most recent import of this CryptoKeyVersion. Only present if the underlying key material was imported.
   * @return importJob
   */
  @javax.annotation.Nullable
  public String getImportJob() {
    return importJob;
  }



  /**
   * Output only. The time at which this CryptoKeyVersion&#39;s key material was most recently imported.
   * @return importTime
   */
  @javax.annotation.Nullable
  public String getImportTime() {
    return importTime;
  }



  /**
   * Output only. The resource name for this CryptoKeyVersion in the format &#x60;projects/_*_/locations/_*_/keyRings/_*_/cryptoKeys/_*_/cryptoKeyVersions/_*&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.
   * @return protectionLevel
   */
  @javax.annotation.Nullable
  public ProtectionLevelEnum getProtectionLevel() {
    return protectionLevel;
  }



  /**
   * Output only. Whether or not this key version is eligible for reimport, by being specified as a target in ImportCryptoKeyVersionRequest.crypto_key_version.
   * @return reimportEligible
   */
  @javax.annotation.Nullable
  public Boolean getReimportEligible() {
    return reimportEligible;
  }



  public CryptoKeyVersion state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The current state of the CryptoKeyVersion.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CryptoKeyVersion cryptoKeyVersion = (CryptoKeyVersion) o;
    return Objects.equals(this.algorithm, cryptoKeyVersion.algorithm) &&
        Objects.equals(this.attestation, cryptoKeyVersion.attestation) &&
        Objects.equals(this.createTime, cryptoKeyVersion.createTime) &&
        Objects.equals(this.destroyEventTime, cryptoKeyVersion.destroyEventTime) &&
        Objects.equals(this.destroyTime, cryptoKeyVersion.destroyTime) &&
        Objects.equals(this.externalDestructionFailureReason, cryptoKeyVersion.externalDestructionFailureReason) &&
        Objects.equals(this.externalProtectionLevelOptions, cryptoKeyVersion.externalProtectionLevelOptions) &&
        Objects.equals(this.generateTime, cryptoKeyVersion.generateTime) &&
        Objects.equals(this.generationFailureReason, cryptoKeyVersion.generationFailureReason) &&
        Objects.equals(this.importFailureReason, cryptoKeyVersion.importFailureReason) &&
        Objects.equals(this.importJob, cryptoKeyVersion.importJob) &&
        Objects.equals(this.importTime, cryptoKeyVersion.importTime) &&
        Objects.equals(this.name, cryptoKeyVersion.name) &&
        Objects.equals(this.protectionLevel, cryptoKeyVersion.protectionLevel) &&
        Objects.equals(this.reimportEligible, cryptoKeyVersion.reimportEligible) &&
        Objects.equals(this.state, cryptoKeyVersion.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algorithm, attestation, createTime, destroyEventTime, destroyTime, externalDestructionFailureReason, externalProtectionLevelOptions, generateTime, generationFailureReason, importFailureReason, importJob, importTime, name, protectionLevel, reimportEligible, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CryptoKeyVersion {\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    attestation: ").append(toIndentedString(attestation)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    destroyEventTime: ").append(toIndentedString(destroyEventTime)).append("\n");
    sb.append("    destroyTime: ").append(toIndentedString(destroyTime)).append("\n");
    sb.append("    externalDestructionFailureReason: ").append(toIndentedString(externalDestructionFailureReason)).append("\n");
    sb.append("    externalProtectionLevelOptions: ").append(toIndentedString(externalProtectionLevelOptions)).append("\n");
    sb.append("    generateTime: ").append(toIndentedString(generateTime)).append("\n");
    sb.append("    generationFailureReason: ").append(toIndentedString(generationFailureReason)).append("\n");
    sb.append("    importFailureReason: ").append(toIndentedString(importFailureReason)).append("\n");
    sb.append("    importJob: ").append(toIndentedString(importJob)).append("\n");
    sb.append("    importTime: ").append(toIndentedString(importTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protectionLevel: ").append(toIndentedString(protectionLevel)).append("\n");
    sb.append("    reimportEligible: ").append(toIndentedString(reimportEligible)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("algorithm");
    openapiFields.add("attestation");
    openapiFields.add("createTime");
    openapiFields.add("destroyEventTime");
    openapiFields.add("destroyTime");
    openapiFields.add("externalDestructionFailureReason");
    openapiFields.add("externalProtectionLevelOptions");
    openapiFields.add("generateTime");
    openapiFields.add("generationFailureReason");
    openapiFields.add("importFailureReason");
    openapiFields.add("importJob");
    openapiFields.add("importTime");
    openapiFields.add("name");
    openapiFields.add("protectionLevel");
    openapiFields.add("reimportEligible");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CryptoKeyVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CryptoKeyVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CryptoKeyVersion is not found in the empty JSON string", CryptoKeyVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CryptoKeyVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CryptoKeyVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("algorithm") != null && !jsonObj.get("algorithm").isJsonNull()) && !jsonObj.get("algorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `algorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("algorithm").toString()));
      }
      // validate the optional field `algorithm`
      if (jsonObj.get("algorithm") != null && !jsonObj.get("algorithm").isJsonNull()) {
        AlgorithmEnum.validateJsonElement(jsonObj.get("algorithm"));
      }
      // validate the optional field `attestation`
      if (jsonObj.get("attestation") != null && !jsonObj.get("attestation").isJsonNull()) {
        KeyOperationAttestation.validateJsonElement(jsonObj.get("attestation"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("destroyEventTime") != null && !jsonObj.get("destroyEventTime").isJsonNull()) && !jsonObj.get("destroyEventTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destroyEventTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destroyEventTime").toString()));
      }
      if ((jsonObj.get("destroyTime") != null && !jsonObj.get("destroyTime").isJsonNull()) && !jsonObj.get("destroyTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destroyTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destroyTime").toString()));
      }
      if ((jsonObj.get("externalDestructionFailureReason") != null && !jsonObj.get("externalDestructionFailureReason").isJsonNull()) && !jsonObj.get("externalDestructionFailureReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalDestructionFailureReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalDestructionFailureReason").toString()));
      }
      // validate the optional field `externalProtectionLevelOptions`
      if (jsonObj.get("externalProtectionLevelOptions") != null && !jsonObj.get("externalProtectionLevelOptions").isJsonNull()) {
        ExternalProtectionLevelOptions.validateJsonElement(jsonObj.get("externalProtectionLevelOptions"));
      }
      if ((jsonObj.get("generateTime") != null && !jsonObj.get("generateTime").isJsonNull()) && !jsonObj.get("generateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `generateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("generateTime").toString()));
      }
      if ((jsonObj.get("generationFailureReason") != null && !jsonObj.get("generationFailureReason").isJsonNull()) && !jsonObj.get("generationFailureReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `generationFailureReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("generationFailureReason").toString()));
      }
      if ((jsonObj.get("importFailureReason") != null && !jsonObj.get("importFailureReason").isJsonNull()) && !jsonObj.get("importFailureReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importFailureReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importFailureReason").toString()));
      }
      if ((jsonObj.get("importJob") != null && !jsonObj.get("importJob").isJsonNull()) && !jsonObj.get("importJob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importJob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importJob").toString()));
      }
      if ((jsonObj.get("importTime") != null && !jsonObj.get("importTime").isJsonNull()) && !jsonObj.get("importTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("protectionLevel") != null && !jsonObj.get("protectionLevel").isJsonNull()) && !jsonObj.get("protectionLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protectionLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protectionLevel").toString()));
      }
      // validate the optional field `protectionLevel`
      if (jsonObj.get("protectionLevel") != null && !jsonObj.get("protectionLevel").isJsonNull()) {
        ProtectionLevelEnum.validateJsonElement(jsonObj.get("protectionLevel"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CryptoKeyVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CryptoKeyVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CryptoKeyVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CryptoKeyVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<CryptoKeyVersion>() {
           @Override
           public void write(JsonWriter out, CryptoKeyVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CryptoKeyVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CryptoKeyVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CryptoKeyVersion
   * @throws IOException if the JSON string is invalid with respect to CryptoKeyVersion
   */
  public static CryptoKeyVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CryptoKeyVersion.class);
  }

  /**
   * Convert an instance of CryptoKeyVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

