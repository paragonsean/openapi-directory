/*
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Certificate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A ServiceResolver represents an EKM replica that can be reached within an EkmConnection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:14.760057-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceResolver {
  public static final String SERIALIZED_NAME_ENDPOINT_FILTER = "endpointFilter";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_FILTER)
  private String endpointFilter;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_SERVER_CERTIFICATES = "serverCertificates";
  @SerializedName(SERIALIZED_NAME_SERVER_CERTIFICATES)
  private List<Certificate> serverCertificates = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_DIRECTORY_SERVICE = "serviceDirectoryService";
  @SerializedName(SERIALIZED_NAME_SERVICE_DIRECTORY_SERVICE)
  private String serviceDirectoryService;

  public ServiceResolver() {
  }

  public ServiceResolver endpointFilter(String endpointFilter) {
    this.endpointFilter = endpointFilter;
    return this;
  }

  /**
   * Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.
   * @return endpointFilter
   */
  @javax.annotation.Nullable
  public String getEndpointFilter() {
    return endpointFilter;
  }

  public void setEndpointFilter(String endpointFilter) {
    this.endpointFilter = endpointFilter;
  }


  public ServiceResolver hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Required. The hostname of the EKM replica used at TLS and HTTP layers.
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public ServiceResolver serverCertificates(List<Certificate> serverCertificates) {
    this.serverCertificates = serverCertificates;
    return this;
  }

  public ServiceResolver addServerCertificatesItem(Certificate serverCertificatesItem) {
    if (this.serverCertificates == null) {
      this.serverCertificates = new ArrayList<>();
    }
    this.serverCertificates.add(serverCertificatesItem);
    return this;
  }

  /**
   * Required. A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.
   * @return serverCertificates
   */
  @javax.annotation.Nullable
  public List<Certificate> getServerCertificates() {
    return serverCertificates;
  }

  public void setServerCertificates(List<Certificate> serverCertificates) {
    this.serverCertificates = serverCertificates;
  }


  public ServiceResolver serviceDirectoryService(String serviceDirectoryService) {
    this.serviceDirectoryService = serviceDirectoryService;
    return this;
  }

  /**
   * Required. The resource name of the Service Directory service pointing to an EKM replica, in the format &#x60;projects/_*_/locations/_*_/namespaces/_*_/services/_*&#x60;.
   * @return serviceDirectoryService
   */
  @javax.annotation.Nullable
  public String getServiceDirectoryService() {
    return serviceDirectoryService;
  }

  public void setServiceDirectoryService(String serviceDirectoryService) {
    this.serviceDirectoryService = serviceDirectoryService;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceResolver serviceResolver = (ServiceResolver) o;
    return Objects.equals(this.endpointFilter, serviceResolver.endpointFilter) &&
        Objects.equals(this.hostname, serviceResolver.hostname) &&
        Objects.equals(this.serverCertificates, serviceResolver.serverCertificates) &&
        Objects.equals(this.serviceDirectoryService, serviceResolver.serviceDirectoryService);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpointFilter, hostname, serverCertificates, serviceDirectoryService);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceResolver {\n");
    sb.append("    endpointFilter: ").append(toIndentedString(endpointFilter)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    serverCertificates: ").append(toIndentedString(serverCertificates)).append("\n");
    sb.append("    serviceDirectoryService: ").append(toIndentedString(serviceDirectoryService)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endpointFilter");
    openapiFields.add("hostname");
    openapiFields.add("serverCertificates");
    openapiFields.add("serviceDirectoryService");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceResolver
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceResolver.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceResolver is not found in the empty JSON string", ServiceResolver.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceResolver.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceResolver` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endpointFilter") != null && !jsonObj.get("endpointFilter").isJsonNull()) && !jsonObj.get("endpointFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointFilter").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if (jsonObj.get("serverCertificates") != null && !jsonObj.get("serverCertificates").isJsonNull()) {
        JsonArray jsonArrayserverCertificates = jsonObj.getAsJsonArray("serverCertificates");
        if (jsonArrayserverCertificates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serverCertificates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serverCertificates` to be an array in the JSON string but got `%s`", jsonObj.get("serverCertificates").toString()));
          }

          // validate the optional field `serverCertificates` (array)
          for (int i = 0; i < jsonArrayserverCertificates.size(); i++) {
            Certificate.validateJsonElement(jsonArrayserverCertificates.get(i));
          };
        }
      }
      if ((jsonObj.get("serviceDirectoryService") != null && !jsonObj.get("serviceDirectoryService").isJsonNull()) && !jsonObj.get("serviceDirectoryService").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceDirectoryService` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceDirectoryService").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceResolver.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceResolver' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceResolver> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceResolver.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceResolver>() {
           @Override
           public void write(JsonWriter out, ServiceResolver value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceResolver read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceResolver given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceResolver
   * @throws IOException if the JSON string is invalid with respect to ServiceResolver
   */
  public static ServiceResolver fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceResolver.class);
  }

  /**
   * Convert an instance of ServiceResolver to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

