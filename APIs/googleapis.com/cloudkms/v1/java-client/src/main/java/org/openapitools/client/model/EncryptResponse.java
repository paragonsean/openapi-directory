/*
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for KeyManagementService.Encrypt.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:14.760057-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EncryptResponse {
  public static final String SERIALIZED_NAME_CIPHERTEXT = "ciphertext";
  @SerializedName(SERIALIZED_NAME_CIPHERTEXT)
  private byte[] ciphertext;

  public static final String SERIALIZED_NAME_CIPHERTEXT_CRC32C = "ciphertextCrc32c";
  @SerializedName(SERIALIZED_NAME_CIPHERTEXT_CRC32C)
  private String ciphertextCrc32c;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The ProtectionLevel of the CryptoKeyVersion used in encryption.
   */
  @JsonAdapter(ProtectionLevelEnum.Adapter.class)
  public enum ProtectionLevelEnum {
    PROTECTION_LEVEL_UNSPECIFIED("PROTECTION_LEVEL_UNSPECIFIED"),
    
    SOFTWARE("SOFTWARE"),
    
    HSM("HSM"),
    
    EXTERNAL("EXTERNAL"),
    
    EXTERNAL_VPC("EXTERNAL_VPC");

    private String value;

    ProtectionLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtectionLevelEnum fromValue(String value) {
      for (ProtectionLevelEnum b : ProtectionLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtectionLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtectionLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtectionLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtectionLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtectionLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTECTION_LEVEL = "protectionLevel";
  @SerializedName(SERIALIZED_NAME_PROTECTION_LEVEL)
  private ProtectionLevelEnum protectionLevel;

  public static final String SERIALIZED_NAME_VERIFIED_ADDITIONAL_AUTHENTICATED_DATA_CRC32C = "verifiedAdditionalAuthenticatedDataCrc32c";
  @SerializedName(SERIALIZED_NAME_VERIFIED_ADDITIONAL_AUTHENTICATED_DATA_CRC32C)
  private Boolean verifiedAdditionalAuthenticatedDataCrc32c;

  public static final String SERIALIZED_NAME_VERIFIED_PLAINTEXT_CRC32C = "verifiedPlaintextCrc32c";
  @SerializedName(SERIALIZED_NAME_VERIFIED_PLAINTEXT_CRC32C)
  private Boolean verifiedPlaintextCrc32c;

  public EncryptResponse() {
  }

  public EncryptResponse ciphertext(byte[] ciphertext) {
    this.ciphertext = ciphertext;
    return this;
  }

  /**
   * The encrypted data.
   * @return ciphertext
   */
  @javax.annotation.Nullable
  public byte[] getCiphertext() {
    return ciphertext;
  }

  public void setCiphertext(byte[] ciphertext) {
    this.ciphertext = ciphertext;
  }


  public EncryptResponse ciphertextCrc32c(String ciphertextCrc32c) {
    this.ciphertextCrc32c = ciphertextCrc32c;
    return this;
  }

  /**
   * Integrity verification field. A CRC32C checksum of the returned EncryptResponse.ciphertext. An integrity check of EncryptResponse.ciphertext can be performed by computing the CRC32C checksum of EncryptResponse.ciphertext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
   * @return ciphertextCrc32c
   */
  @javax.annotation.Nullable
  public String getCiphertextCrc32c() {
    return ciphertextCrc32c;
  }

  public void setCiphertextCrc32c(String ciphertextCrc32c) {
    this.ciphertextCrc32c = ciphertextCrc32c;
  }


  public EncryptResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the CryptoKeyVersion used in encryption. Check this field to verify that the intended resource was used for encryption.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EncryptResponse protectionLevel(ProtectionLevelEnum protectionLevel) {
    this.protectionLevel = protectionLevel;
    return this;
  }

  /**
   * The ProtectionLevel of the CryptoKeyVersion used in encryption.
   * @return protectionLevel
   */
  @javax.annotation.Nullable
  public ProtectionLevelEnum getProtectionLevel() {
    return protectionLevel;
  }

  public void setProtectionLevel(ProtectionLevelEnum protectionLevel) {
    this.protectionLevel = protectionLevel;
  }


  public EncryptResponse verifiedAdditionalAuthenticatedDataCrc32c(Boolean verifiedAdditionalAuthenticatedDataCrc32c) {
    this.verifiedAdditionalAuthenticatedDataCrc32c = verifiedAdditionalAuthenticatedDataCrc32c;
    return this;
  }

  /**
   * Integrity verification field. A flag indicating whether EncryptRequest.additional_authenticated_data_crc32c was received by KeyManagementService and used for the integrity verification of the AAD. A false value of this field indicates either that EncryptRequest.additional_authenticated_data_crc32c was left unset or that it was not delivered to KeyManagementService. If you&#39;ve set EncryptRequest.additional_authenticated_data_crc32c but this field is still false, discard the response and perform a limited number of retries.
   * @return verifiedAdditionalAuthenticatedDataCrc32c
   */
  @javax.annotation.Nullable
  public Boolean getVerifiedAdditionalAuthenticatedDataCrc32c() {
    return verifiedAdditionalAuthenticatedDataCrc32c;
  }

  public void setVerifiedAdditionalAuthenticatedDataCrc32c(Boolean verifiedAdditionalAuthenticatedDataCrc32c) {
    this.verifiedAdditionalAuthenticatedDataCrc32c = verifiedAdditionalAuthenticatedDataCrc32c;
  }


  public EncryptResponse verifiedPlaintextCrc32c(Boolean verifiedPlaintextCrc32c) {
    this.verifiedPlaintextCrc32c = verifiedPlaintextCrc32c;
    return this;
  }

  /**
   * Integrity verification field. A flag indicating whether EncryptRequest.plaintext_crc32c was received by KeyManagementService and used for the integrity verification of the plaintext. A false value of this field indicates either that EncryptRequest.plaintext_crc32c was left unset or that it was not delivered to KeyManagementService. If you&#39;ve set EncryptRequest.plaintext_crc32c but this field is still false, discard the response and perform a limited number of retries.
   * @return verifiedPlaintextCrc32c
   */
  @javax.annotation.Nullable
  public Boolean getVerifiedPlaintextCrc32c() {
    return verifiedPlaintextCrc32c;
  }

  public void setVerifiedPlaintextCrc32c(Boolean verifiedPlaintextCrc32c) {
    this.verifiedPlaintextCrc32c = verifiedPlaintextCrc32c;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EncryptResponse encryptResponse = (EncryptResponse) o;
    return Arrays.equals(this.ciphertext, encryptResponse.ciphertext) &&
        Objects.equals(this.ciphertextCrc32c, encryptResponse.ciphertextCrc32c) &&
        Objects.equals(this.name, encryptResponse.name) &&
        Objects.equals(this.protectionLevel, encryptResponse.protectionLevel) &&
        Objects.equals(this.verifiedAdditionalAuthenticatedDataCrc32c, encryptResponse.verifiedAdditionalAuthenticatedDataCrc32c) &&
        Objects.equals(this.verifiedPlaintextCrc32c, encryptResponse.verifiedPlaintextCrc32c);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(ciphertext), ciphertextCrc32c, name, protectionLevel, verifiedAdditionalAuthenticatedDataCrc32c, verifiedPlaintextCrc32c);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EncryptResponse {\n");
    sb.append("    ciphertext: ").append(toIndentedString(ciphertext)).append("\n");
    sb.append("    ciphertextCrc32c: ").append(toIndentedString(ciphertextCrc32c)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protectionLevel: ").append(toIndentedString(protectionLevel)).append("\n");
    sb.append("    verifiedAdditionalAuthenticatedDataCrc32c: ").append(toIndentedString(verifiedAdditionalAuthenticatedDataCrc32c)).append("\n");
    sb.append("    verifiedPlaintextCrc32c: ").append(toIndentedString(verifiedPlaintextCrc32c)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ciphertext");
    openapiFields.add("ciphertextCrc32c");
    openapiFields.add("name");
    openapiFields.add("protectionLevel");
    openapiFields.add("verifiedAdditionalAuthenticatedDataCrc32c");
    openapiFields.add("verifiedPlaintextCrc32c");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EncryptResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EncryptResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EncryptResponse is not found in the empty JSON string", EncryptResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EncryptResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EncryptResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ciphertextCrc32c") != null && !jsonObj.get("ciphertextCrc32c").isJsonNull()) && !jsonObj.get("ciphertextCrc32c").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ciphertextCrc32c` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ciphertextCrc32c").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("protectionLevel") != null && !jsonObj.get("protectionLevel").isJsonNull()) && !jsonObj.get("protectionLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protectionLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protectionLevel").toString()));
      }
      // validate the optional field `protectionLevel`
      if (jsonObj.get("protectionLevel") != null && !jsonObj.get("protectionLevel").isJsonNull()) {
        ProtectionLevelEnum.validateJsonElement(jsonObj.get("protectionLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EncryptResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EncryptResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EncryptResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EncryptResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<EncryptResponse>() {
           @Override
           public void write(JsonWriter out, EncryptResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EncryptResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EncryptResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EncryptResponse
   * @throws IOException if the JSON string is invalid with respect to EncryptResponse
   */
  public static EncryptResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EncryptResponse.class);
  }

  /**
   * Convert an instance of EncryptResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

