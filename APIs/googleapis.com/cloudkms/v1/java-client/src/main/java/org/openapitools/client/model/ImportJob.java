/*
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.KeyOperationAttestation;
import org.openapitools.client.model.WrappingPublicKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An ImportJob can be used to create CryptoKeys and CryptoKeyVersions using pre-existing key material, generated outside of Cloud KMS. When an ImportJob is created, Cloud KMS will generate a \&quot;wrapping key\&quot;, which is a public/private key pair. You use the wrapping key to encrypt (also known as wrap) the pre-existing key material to protect it during the import process. The nature of the wrapping key depends on the choice of import_method. When the wrapping key generation is complete, the state will be set to ACTIVE and the public_key can be fetched. The fetched public key can then be used to wrap your pre-existing key material. Once the key material is wrapped, it can be imported into a new CryptoKeyVersion in an existing CryptoKey by calling ImportCryptoKeyVersion. Multiple CryptoKeyVersions can be imported with a single ImportJob. Cloud KMS uses the private key portion of the wrapping key to unwrap the key material. Only Cloud KMS has access to the private key. An ImportJob expires 3 days after it is created. Once expired, Cloud KMS will no longer be able to import or unwrap any key material that was wrapped with the ImportJob&#39;s public key. For more information, see [Importing a key](https://cloud.google.com/kms/docs/importing-a-key).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:14.760057-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportJob {
  public static final String SERIALIZED_NAME_ATTESTATION = "attestation";
  @SerializedName(SERIALIZED_NAME_ATTESTATION)
  private KeyOperationAttestation attestation;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_EXPIRE_EVENT_TIME = "expireEventTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_EVENT_TIME)
  private String expireEventTime;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  public static final String SERIALIZED_NAME_GENERATE_TIME = "generateTime";
  @SerializedName(SERIALIZED_NAME_GENERATE_TIME)
  private String generateTime;

  /**
   * Required. Immutable. The wrapping method to be used for incoming key material.
   */
  @JsonAdapter(ImportMethodEnum.Adapter.class)
  public enum ImportMethodEnum {
    IMPORT_METHOD_UNSPECIFIED("IMPORT_METHOD_UNSPECIFIED"),
    
    RSA_OAEP_3072_SHA1_AES_256("RSA_OAEP_3072_SHA1_AES_256"),
    
    RSA_OAEP_4096_SHA1_AES_256("RSA_OAEP_4096_SHA1_AES_256"),
    
    RSA_OAEP_3072_SHA256_AES_256("RSA_OAEP_3072_SHA256_AES_256"),
    
    RSA_OAEP_4096_SHA256_AES_256("RSA_OAEP_4096_SHA256_AES_256"),
    
    RSA_OAEP_3072_SHA256("RSA_OAEP_3072_SHA256"),
    
    RSA_OAEP_4096_SHA256("RSA_OAEP_4096_SHA256");

    private String value;

    ImportMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImportMethodEnum fromValue(String value) {
      for (ImportMethodEnum b : ImportMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImportMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImportMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImportMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImportMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ImportMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IMPORT_METHOD = "importMethod";
  @SerializedName(SERIALIZED_NAME_IMPORT_METHOD)
  private ImportMethodEnum importMethod;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Required. Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
   */
  @JsonAdapter(ProtectionLevelEnum.Adapter.class)
  public enum ProtectionLevelEnum {
    PROTECTION_LEVEL_UNSPECIFIED("PROTECTION_LEVEL_UNSPECIFIED"),
    
    SOFTWARE("SOFTWARE"),
    
    HSM("HSM"),
    
    EXTERNAL("EXTERNAL"),
    
    EXTERNAL_VPC("EXTERNAL_VPC");

    private String value;

    ProtectionLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtectionLevelEnum fromValue(String value) {
      for (ProtectionLevelEnum b : ProtectionLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtectionLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtectionLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtectionLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtectionLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtectionLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTECTION_LEVEL = "protectionLevel";
  @SerializedName(SERIALIZED_NAME_PROTECTION_LEVEL)
  private ProtectionLevelEnum protectionLevel;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "publicKey";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private WrappingPublicKey publicKey;

  /**
   * Output only. The current state of the ImportJob, indicating if it can be used.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    IMPORT_JOB_STATE_UNSPECIFIED("IMPORT_JOB_STATE_UNSPECIFIED"),
    
    PENDING_GENERATION("PENDING_GENERATION"),
    
    ACTIVE("ACTIVE"),
    
    EXPIRED("EXPIRED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public ImportJob() {
  }

  public ImportJob(
     String createTime, 
     String expireEventTime, 
     String expireTime, 
     String generateTime, 
     String name, 
     StateEnum state
  ) {
    this();
    this.createTime = createTime;
    this.expireEventTime = expireEventTime;
    this.expireTime = expireTime;
    this.generateTime = generateTime;
    this.name = name;
    this.state = state;
  }

  public ImportJob attestation(KeyOperationAttestation attestation) {
    this.attestation = attestation;
    return this;
  }

  /**
   * Get attestation
   * @return attestation
   */
  @javax.annotation.Nullable
  public KeyOperationAttestation getAttestation() {
    return attestation;
  }

  public void setAttestation(KeyOperationAttestation attestation) {
    this.attestation = attestation;
  }


  /**
   * Output only. The time at which this ImportJob was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The time this ImportJob expired. Only present if state is EXPIRED.
   * @return expireEventTime
   */
  @javax.annotation.Nullable
  public String getExpireEventTime() {
    return expireEventTime;
  }



  /**
   * Output only. The time at which this ImportJob is scheduled for expiration and can no longer be used to import key material.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }



  /**
   * Output only. The time this ImportJob&#39;s key material was generated.
   * @return generateTime
   */
  @javax.annotation.Nullable
  public String getGenerateTime() {
    return generateTime;
  }



  public ImportJob importMethod(ImportMethodEnum importMethod) {
    this.importMethod = importMethod;
    return this;
  }

  /**
   * Required. Immutable. The wrapping method to be used for incoming key material.
   * @return importMethod
   */
  @javax.annotation.Nullable
  public ImportMethodEnum getImportMethod() {
    return importMethod;
  }

  public void setImportMethod(ImportMethodEnum importMethod) {
    this.importMethod = importMethod;
  }


  /**
   * Output only. The resource name for this ImportJob in the format &#x60;projects/_*_/locations/_*_/keyRings/_*_/importJobs/_*&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public ImportJob protectionLevel(ProtectionLevelEnum protectionLevel) {
    this.protectionLevel = protectionLevel;
    return this;
  }

  /**
   * Required. Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
   * @return protectionLevel
   */
  @javax.annotation.Nullable
  public ProtectionLevelEnum getProtectionLevel() {
    return protectionLevel;
  }

  public void setProtectionLevel(ProtectionLevelEnum protectionLevel) {
    this.protectionLevel = protectionLevel;
  }


  public ImportJob publicKey(WrappingPublicKey publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * Get publicKey
   * @return publicKey
   */
  @javax.annotation.Nullable
  public WrappingPublicKey getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(WrappingPublicKey publicKey) {
    this.publicKey = publicKey;
  }


  /**
   * Output only. The current state of the ImportJob, indicating if it can be used.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportJob importJob = (ImportJob) o;
    return Objects.equals(this.attestation, importJob.attestation) &&
        Objects.equals(this.createTime, importJob.createTime) &&
        Objects.equals(this.expireEventTime, importJob.expireEventTime) &&
        Objects.equals(this.expireTime, importJob.expireTime) &&
        Objects.equals(this.generateTime, importJob.generateTime) &&
        Objects.equals(this.importMethod, importJob.importMethod) &&
        Objects.equals(this.name, importJob.name) &&
        Objects.equals(this.protectionLevel, importJob.protectionLevel) &&
        Objects.equals(this.publicKey, importJob.publicKey) &&
        Objects.equals(this.state, importJob.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attestation, createTime, expireEventTime, expireTime, generateTime, importMethod, name, protectionLevel, publicKey, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportJob {\n");
    sb.append("    attestation: ").append(toIndentedString(attestation)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    expireEventTime: ").append(toIndentedString(expireEventTime)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    generateTime: ").append(toIndentedString(generateTime)).append("\n");
    sb.append("    importMethod: ").append(toIndentedString(importMethod)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protectionLevel: ").append(toIndentedString(protectionLevel)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attestation");
    openapiFields.add("createTime");
    openapiFields.add("expireEventTime");
    openapiFields.add("expireTime");
    openapiFields.add("generateTime");
    openapiFields.add("importMethod");
    openapiFields.add("name");
    openapiFields.add("protectionLevel");
    openapiFields.add("publicKey");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportJob is not found in the empty JSON string", ImportJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attestation`
      if (jsonObj.get("attestation") != null && !jsonObj.get("attestation").isJsonNull()) {
        KeyOperationAttestation.validateJsonElement(jsonObj.get("attestation"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("expireEventTime") != null && !jsonObj.get("expireEventTime").isJsonNull()) && !jsonObj.get("expireEventTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireEventTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireEventTime").toString()));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if ((jsonObj.get("generateTime") != null && !jsonObj.get("generateTime").isJsonNull()) && !jsonObj.get("generateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `generateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("generateTime").toString()));
      }
      if ((jsonObj.get("importMethod") != null && !jsonObj.get("importMethod").isJsonNull()) && !jsonObj.get("importMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importMethod").toString()));
      }
      // validate the optional field `importMethod`
      if (jsonObj.get("importMethod") != null && !jsonObj.get("importMethod").isJsonNull()) {
        ImportMethodEnum.validateJsonElement(jsonObj.get("importMethod"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("protectionLevel") != null && !jsonObj.get("protectionLevel").isJsonNull()) && !jsonObj.get("protectionLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protectionLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protectionLevel").toString()));
      }
      // validate the optional field `protectionLevel`
      if (jsonObj.get("protectionLevel") != null && !jsonObj.get("protectionLevel").isJsonNull()) {
        ProtectionLevelEnum.validateJsonElement(jsonObj.get("protectionLevel"));
      }
      // validate the optional field `publicKey`
      if (jsonObj.get("publicKey") != null && !jsonObj.get("publicKey").isJsonNull()) {
        WrappingPublicKey.validateJsonElement(jsonObj.get("publicKey"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportJob.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportJob>() {
           @Override
           public void write(JsonWriter out, ImportJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportJob
   * @throws IOException if the JSON string is invalid with respect to ImportJob
   */
  public static ImportJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportJob.class);
  }

  /**
   * Convert an instance of ImportJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

