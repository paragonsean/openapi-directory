/*
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for KeyManagementService.MacVerify.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:14.760057-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MacVerifyRequest {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private byte[] data;

  public static final String SERIALIZED_NAME_DATA_CRC32C = "dataCrc32c";
  @SerializedName(SERIALIZED_NAME_DATA_CRC32C)
  private String dataCrc32c;

  public static final String SERIALIZED_NAME_MAC = "mac";
  @SerializedName(SERIALIZED_NAME_MAC)
  private byte[] mac;

  public static final String SERIALIZED_NAME_MAC_CRC32C = "macCrc32c";
  @SerializedName(SERIALIZED_NAME_MAC_CRC32C)
  private String macCrc32c;

  public MacVerifyRequest() {
  }

  public MacVerifyRequest data(byte[] data) {
    this.data = data;
    return this;
  }

  /**
   * Required. The data used previously as a MacSignRequest.data to generate the MAC tag.
   * @return data
   */
  @javax.annotation.Nullable
  public byte[] getData() {
    return data;
  }

  public void setData(byte[] data) {
    this.data = data;
  }


  public MacVerifyRequest dataCrc32c(String dataCrc32c) {
    this.dataCrc32c = dataCrc32c;
    return this;
  }

  /**
   * Optional. An optional CRC32C checksum of the MacVerifyRequest.data. If specified, KeyManagementService will verify the integrity of the received MacVerifyRequest.data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(MacVerifyRequest.data) is equal to MacVerifyRequest.data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
   * @return dataCrc32c
   */
  @javax.annotation.Nullable
  public String getDataCrc32c() {
    return dataCrc32c;
  }

  public void setDataCrc32c(String dataCrc32c) {
    this.dataCrc32c = dataCrc32c;
  }


  public MacVerifyRequest mac(byte[] mac) {
    this.mac = mac;
    return this;
  }

  /**
   * Required. The signature to verify.
   * @return mac
   */
  @javax.annotation.Nullable
  public byte[] getMac() {
    return mac;
  }

  public void setMac(byte[] mac) {
    this.mac = mac;
  }


  public MacVerifyRequest macCrc32c(String macCrc32c) {
    this.macCrc32c = macCrc32c;
    return this;
  }

  /**
   * Optional. An optional CRC32C checksum of the MacVerifyRequest.mac. If specified, KeyManagementService will verify the integrity of the received MacVerifyRequest.mac using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(MacVerifyRequest.tag) is equal to MacVerifyRequest.mac_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
   * @return macCrc32c
   */
  @javax.annotation.Nullable
  public String getMacCrc32c() {
    return macCrc32c;
  }

  public void setMacCrc32c(String macCrc32c) {
    this.macCrc32c = macCrc32c;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MacVerifyRequest macVerifyRequest = (MacVerifyRequest) o;
    return Arrays.equals(this.data, macVerifyRequest.data) &&
        Objects.equals(this.dataCrc32c, macVerifyRequest.dataCrc32c) &&
        Arrays.equals(this.mac, macVerifyRequest.mac) &&
        Objects.equals(this.macCrc32c, macVerifyRequest.macCrc32c);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(data), dataCrc32c, Arrays.hashCode(mac), macCrc32c);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MacVerifyRequest {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    dataCrc32c: ").append(toIndentedString(dataCrc32c)).append("\n");
    sb.append("    mac: ").append(toIndentedString(mac)).append("\n");
    sb.append("    macCrc32c: ").append(toIndentedString(macCrc32c)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("dataCrc32c");
    openapiFields.add("mac");
    openapiFields.add("macCrc32c");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MacVerifyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MacVerifyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MacVerifyRequest is not found in the empty JSON string", MacVerifyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MacVerifyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MacVerifyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataCrc32c") != null && !jsonObj.get("dataCrc32c").isJsonNull()) && !jsonObj.get("dataCrc32c").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataCrc32c` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataCrc32c").toString()));
      }
      if ((jsonObj.get("macCrc32c") != null && !jsonObj.get("macCrc32c").isJsonNull()) && !jsonObj.get("macCrc32c").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `macCrc32c` to be a primitive type in the JSON string but got `%s`", jsonObj.get("macCrc32c").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MacVerifyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MacVerifyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MacVerifyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MacVerifyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MacVerifyRequest>() {
           @Override
           public void write(JsonWriter out, MacVerifyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MacVerifyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MacVerifyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MacVerifyRequest
   * @throws IOException if the JSON string is invalid with respect to MacVerifyRequest
   */
  public static MacVerifyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MacVerifyRequest.class);
  }

  /**
   * Convert an instance of MacVerifyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

