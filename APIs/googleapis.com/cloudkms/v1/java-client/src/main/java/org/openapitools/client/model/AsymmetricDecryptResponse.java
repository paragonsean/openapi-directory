/*
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for KeyManagementService.AsymmetricDecrypt.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:14.760057-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AsymmetricDecryptResponse {
  public static final String SERIALIZED_NAME_PLAINTEXT = "plaintext";
  @SerializedName(SERIALIZED_NAME_PLAINTEXT)
  private byte[] plaintext;

  public static final String SERIALIZED_NAME_PLAINTEXT_CRC32C = "plaintextCrc32c";
  @SerializedName(SERIALIZED_NAME_PLAINTEXT_CRC32C)
  private String plaintextCrc32c;

  /**
   * The ProtectionLevel of the CryptoKeyVersion used in decryption.
   */
  @JsonAdapter(ProtectionLevelEnum.Adapter.class)
  public enum ProtectionLevelEnum {
    PROTECTION_LEVEL_UNSPECIFIED("PROTECTION_LEVEL_UNSPECIFIED"),
    
    SOFTWARE("SOFTWARE"),
    
    HSM("HSM"),
    
    EXTERNAL("EXTERNAL"),
    
    EXTERNAL_VPC("EXTERNAL_VPC");

    private String value;

    ProtectionLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtectionLevelEnum fromValue(String value) {
      for (ProtectionLevelEnum b : ProtectionLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtectionLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtectionLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtectionLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtectionLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtectionLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTECTION_LEVEL = "protectionLevel";
  @SerializedName(SERIALIZED_NAME_PROTECTION_LEVEL)
  private ProtectionLevelEnum protectionLevel;

  public static final String SERIALIZED_NAME_VERIFIED_CIPHERTEXT_CRC32C = "verifiedCiphertextCrc32c";
  @SerializedName(SERIALIZED_NAME_VERIFIED_CIPHERTEXT_CRC32C)
  private Boolean verifiedCiphertextCrc32c;

  public AsymmetricDecryptResponse() {
  }

  public AsymmetricDecryptResponse plaintext(byte[] plaintext) {
    this.plaintext = plaintext;
    return this;
  }

  /**
   * The decrypted data originally encrypted with the matching public key.
   * @return plaintext
   */
  @javax.annotation.Nullable
  public byte[] getPlaintext() {
    return plaintext;
  }

  public void setPlaintext(byte[] plaintext) {
    this.plaintext = plaintext;
  }


  public AsymmetricDecryptResponse plaintextCrc32c(String plaintextCrc32c) {
    this.plaintextCrc32c = plaintextCrc32c;
    return this;
  }

  /**
   * Integrity verification field. A CRC32C checksum of the returned AsymmetricDecryptResponse.plaintext. An integrity check of AsymmetricDecryptResponse.plaintext can be performed by computing the CRC32C checksum of AsymmetricDecryptResponse.plaintext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
   * @return plaintextCrc32c
   */
  @javax.annotation.Nullable
  public String getPlaintextCrc32c() {
    return plaintextCrc32c;
  }

  public void setPlaintextCrc32c(String plaintextCrc32c) {
    this.plaintextCrc32c = plaintextCrc32c;
  }


  public AsymmetricDecryptResponse protectionLevel(ProtectionLevelEnum protectionLevel) {
    this.protectionLevel = protectionLevel;
    return this;
  }

  /**
   * The ProtectionLevel of the CryptoKeyVersion used in decryption.
   * @return protectionLevel
   */
  @javax.annotation.Nullable
  public ProtectionLevelEnum getProtectionLevel() {
    return protectionLevel;
  }

  public void setProtectionLevel(ProtectionLevelEnum protectionLevel) {
    this.protectionLevel = protectionLevel;
  }


  public AsymmetricDecryptResponse verifiedCiphertextCrc32c(Boolean verifiedCiphertextCrc32c) {
    this.verifiedCiphertextCrc32c = verifiedCiphertextCrc32c;
    return this;
  }

  /**
   * Integrity verification field. A flag indicating whether AsymmetricDecryptRequest.ciphertext_crc32c was received by KeyManagementService and used for the integrity verification of the ciphertext. A false value of this field indicates either that AsymmetricDecryptRequest.ciphertext_crc32c was left unset or that it was not delivered to KeyManagementService. If you&#39;ve set AsymmetricDecryptRequest.ciphertext_crc32c but this field is still false, discard the response and perform a limited number of retries.
   * @return verifiedCiphertextCrc32c
   */
  @javax.annotation.Nullable
  public Boolean getVerifiedCiphertextCrc32c() {
    return verifiedCiphertextCrc32c;
  }

  public void setVerifiedCiphertextCrc32c(Boolean verifiedCiphertextCrc32c) {
    this.verifiedCiphertextCrc32c = verifiedCiphertextCrc32c;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AsymmetricDecryptResponse asymmetricDecryptResponse = (AsymmetricDecryptResponse) o;
    return Arrays.equals(this.plaintext, asymmetricDecryptResponse.plaintext) &&
        Objects.equals(this.plaintextCrc32c, asymmetricDecryptResponse.plaintextCrc32c) &&
        Objects.equals(this.protectionLevel, asymmetricDecryptResponse.protectionLevel) &&
        Objects.equals(this.verifiedCiphertextCrc32c, asymmetricDecryptResponse.verifiedCiphertextCrc32c);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(plaintext), plaintextCrc32c, protectionLevel, verifiedCiphertextCrc32c);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AsymmetricDecryptResponse {\n");
    sb.append("    plaintext: ").append(toIndentedString(plaintext)).append("\n");
    sb.append("    plaintextCrc32c: ").append(toIndentedString(plaintextCrc32c)).append("\n");
    sb.append("    protectionLevel: ").append(toIndentedString(protectionLevel)).append("\n");
    sb.append("    verifiedCiphertextCrc32c: ").append(toIndentedString(verifiedCiphertextCrc32c)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("plaintext");
    openapiFields.add("plaintextCrc32c");
    openapiFields.add("protectionLevel");
    openapiFields.add("verifiedCiphertextCrc32c");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AsymmetricDecryptResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AsymmetricDecryptResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AsymmetricDecryptResponse is not found in the empty JSON string", AsymmetricDecryptResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AsymmetricDecryptResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AsymmetricDecryptResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("plaintextCrc32c") != null && !jsonObj.get("plaintextCrc32c").isJsonNull()) && !jsonObj.get("plaintextCrc32c").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plaintextCrc32c` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plaintextCrc32c").toString()));
      }
      if ((jsonObj.get("protectionLevel") != null && !jsonObj.get("protectionLevel").isJsonNull()) && !jsonObj.get("protectionLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protectionLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protectionLevel").toString()));
      }
      // validate the optional field `protectionLevel`
      if (jsonObj.get("protectionLevel") != null && !jsonObj.get("protectionLevel").isJsonNull()) {
        ProtectionLevelEnum.validateJsonElement(jsonObj.get("protectionLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AsymmetricDecryptResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AsymmetricDecryptResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AsymmetricDecryptResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AsymmetricDecryptResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AsymmetricDecryptResponse>() {
           @Override
           public void write(JsonWriter out, AsymmetricDecryptResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AsymmetricDecryptResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AsymmetricDecryptResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AsymmetricDecryptResponse
   * @throws IOException if the JSON string is invalid with respect to AsymmetricDecryptResponse
   */
  public static AsymmetricDecryptResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AsymmetricDecryptResponse.class);
  }

  /**
   * Convert an instance of AsymmetricDecryptResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

