/*
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ServiceResolver;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An EkmConnection represents an individual EKM connection. It can be used for creating CryptoKeys and CryptoKeyVersions with a ProtectionLevel of EXTERNAL_VPC, as well as performing cryptographic operations using keys created within the EkmConnection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:14.760057-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EkmConnection {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CRYPTO_SPACE_PATH = "cryptoSpacePath";
  @SerializedName(SERIALIZED_NAME_CRYPTO_SPACE_PATH)
  private String cryptoSpacePath;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  /**
   * Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.
   */
  @JsonAdapter(KeyManagementModeEnum.Adapter.class)
  public enum KeyManagementModeEnum {
    KEY_MANAGEMENT_MODE_UNSPECIFIED("KEY_MANAGEMENT_MODE_UNSPECIFIED"),
    
    MANUAL("MANUAL"),
    
    CLOUD_KMS("CLOUD_KMS");

    private String value;

    KeyManagementModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyManagementModeEnum fromValue(String value) {
      for (KeyManagementModeEnum b : KeyManagementModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeyManagementModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyManagementModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyManagementModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeyManagementModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KeyManagementModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KEY_MANAGEMENT_MODE = "keyManagementMode";
  @SerializedName(SERIALIZED_NAME_KEY_MANAGEMENT_MODE)
  private KeyManagementModeEnum keyManagementMode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVICE_RESOLVERS = "serviceResolvers";
  @SerializedName(SERIALIZED_NAME_SERVICE_RESOLVERS)
  private List<ServiceResolver> serviceResolvers = new ArrayList<>();

  public EkmConnection() {
  }

  public EkmConnection(
     String createTime, 
     String name
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
  }

  /**
   * Output only. The time at which the EkmConnection was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public EkmConnection cryptoSpacePath(String cryptoSpacePath) {
    this.cryptoSpacePath = cryptoSpacePath;
    return this;
  }

  /**
   * Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
   * @return cryptoSpacePath
   */
  @javax.annotation.Nullable
  public String getCryptoSpacePath() {
    return cryptoSpacePath;
  }

  public void setCryptoSpacePath(String cryptoSpacePath) {
    this.cryptoSpacePath = cryptoSpacePath;
  }


  public EkmConnection etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Optional. Etag of the currently stored EkmConnection.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public EkmConnection keyManagementMode(KeyManagementModeEnum keyManagementMode) {
    this.keyManagementMode = keyManagementMode;
    return this;
  }

  /**
   * Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.
   * @return keyManagementMode
   */
  @javax.annotation.Nullable
  public KeyManagementModeEnum getKeyManagementMode() {
    return keyManagementMode;
  }

  public void setKeyManagementMode(KeyManagementModeEnum keyManagementMode) {
    this.keyManagementMode = keyManagementMode;
  }


  /**
   * Output only. The resource name for the EkmConnection in the format &#x60;projects/_*_/locations/_*_/ekmConnections/_*&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public EkmConnection serviceResolvers(List<ServiceResolver> serviceResolvers) {
    this.serviceResolvers = serviceResolvers;
    return this;
  }

  public EkmConnection addServiceResolversItem(ServiceResolver serviceResolversItem) {
    if (this.serviceResolvers == null) {
      this.serviceResolvers = new ArrayList<>();
    }
    this.serviceResolvers.add(serviceResolversItem);
    return this;
  }

  /**
   * A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.
   * @return serviceResolvers
   */
  @javax.annotation.Nullable
  public List<ServiceResolver> getServiceResolvers() {
    return serviceResolvers;
  }

  public void setServiceResolvers(List<ServiceResolver> serviceResolvers) {
    this.serviceResolvers = serviceResolvers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EkmConnection ekmConnection = (EkmConnection) o;
    return Objects.equals(this.createTime, ekmConnection.createTime) &&
        Objects.equals(this.cryptoSpacePath, ekmConnection.cryptoSpacePath) &&
        Objects.equals(this.etag, ekmConnection.etag) &&
        Objects.equals(this.keyManagementMode, ekmConnection.keyManagementMode) &&
        Objects.equals(this.name, ekmConnection.name) &&
        Objects.equals(this.serviceResolvers, ekmConnection.serviceResolvers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, cryptoSpacePath, etag, keyManagementMode, name, serviceResolvers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EkmConnection {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    cryptoSpacePath: ").append(toIndentedString(cryptoSpacePath)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    keyManagementMode: ").append(toIndentedString(keyManagementMode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serviceResolvers: ").append(toIndentedString(serviceResolvers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("cryptoSpacePath");
    openapiFields.add("etag");
    openapiFields.add("keyManagementMode");
    openapiFields.add("name");
    openapiFields.add("serviceResolvers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EkmConnection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EkmConnection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EkmConnection is not found in the empty JSON string", EkmConnection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EkmConnection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EkmConnection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("cryptoSpacePath") != null && !jsonObj.get("cryptoSpacePath").isJsonNull()) && !jsonObj.get("cryptoSpacePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cryptoSpacePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cryptoSpacePath").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("keyManagementMode") != null && !jsonObj.get("keyManagementMode").isJsonNull()) && !jsonObj.get("keyManagementMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyManagementMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyManagementMode").toString()));
      }
      // validate the optional field `keyManagementMode`
      if (jsonObj.get("keyManagementMode") != null && !jsonObj.get("keyManagementMode").isJsonNull()) {
        KeyManagementModeEnum.validateJsonElement(jsonObj.get("keyManagementMode"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("serviceResolvers") != null && !jsonObj.get("serviceResolvers").isJsonNull()) {
        JsonArray jsonArrayserviceResolvers = jsonObj.getAsJsonArray("serviceResolvers");
        if (jsonArrayserviceResolvers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serviceResolvers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serviceResolvers` to be an array in the JSON string but got `%s`", jsonObj.get("serviceResolvers").toString()));
          }

          // validate the optional field `serviceResolvers` (array)
          for (int i = 0; i < jsonArrayserviceResolvers.size(); i++) {
            ServiceResolver.validateJsonElement(jsonArrayserviceResolvers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EkmConnection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EkmConnection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EkmConnection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EkmConnection.class));

       return (TypeAdapter<T>) new TypeAdapter<EkmConnection>() {
           @Override
           public void write(JsonWriter out, EkmConnection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EkmConnection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EkmConnection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EkmConnection
   * @throws IOException if the JSON string is invalid with respect to EkmConnection
   */
  public static EkmConnection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EkmConnection.class);
  }

  /**
   * Convert an instance of EkmConnection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

