/*
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Certificate chains needed to verify the attestation. Certificates in chains are PEM-encoded and are ordered based on https://tools.ietf.org/html/rfc5246#section-7.4.2.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:14.760057-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateChains {
  public static final String SERIALIZED_NAME_CAVIUM_CERTS = "caviumCerts";
  @SerializedName(SERIALIZED_NAME_CAVIUM_CERTS)
  private List<String> caviumCerts = new ArrayList<>();

  public static final String SERIALIZED_NAME_GOOGLE_CARD_CERTS = "googleCardCerts";
  @SerializedName(SERIALIZED_NAME_GOOGLE_CARD_CERTS)
  private List<String> googleCardCerts = new ArrayList<>();

  public static final String SERIALIZED_NAME_GOOGLE_PARTITION_CERTS = "googlePartitionCerts";
  @SerializedName(SERIALIZED_NAME_GOOGLE_PARTITION_CERTS)
  private List<String> googlePartitionCerts = new ArrayList<>();

  public CertificateChains() {
  }

  public CertificateChains caviumCerts(List<String> caviumCerts) {
    this.caviumCerts = caviumCerts;
    return this;
  }

  public CertificateChains addCaviumCertsItem(String caviumCertsItem) {
    if (this.caviumCerts == null) {
      this.caviumCerts = new ArrayList<>();
    }
    this.caviumCerts.add(caviumCertsItem);
    return this;
  }

  /**
   * Cavium certificate chain corresponding to the attestation.
   * @return caviumCerts
   */
  @javax.annotation.Nullable
  public List<String> getCaviumCerts() {
    return caviumCerts;
  }

  public void setCaviumCerts(List<String> caviumCerts) {
    this.caviumCerts = caviumCerts;
  }


  public CertificateChains googleCardCerts(List<String> googleCardCerts) {
    this.googleCardCerts = googleCardCerts;
    return this;
  }

  public CertificateChains addGoogleCardCertsItem(String googleCardCertsItem) {
    if (this.googleCardCerts == null) {
      this.googleCardCerts = new ArrayList<>();
    }
    this.googleCardCerts.add(googleCardCertsItem);
    return this;
  }

  /**
   * Google card certificate chain corresponding to the attestation.
   * @return googleCardCerts
   */
  @javax.annotation.Nullable
  public List<String> getGoogleCardCerts() {
    return googleCardCerts;
  }

  public void setGoogleCardCerts(List<String> googleCardCerts) {
    this.googleCardCerts = googleCardCerts;
  }


  public CertificateChains googlePartitionCerts(List<String> googlePartitionCerts) {
    this.googlePartitionCerts = googlePartitionCerts;
    return this;
  }

  public CertificateChains addGooglePartitionCertsItem(String googlePartitionCertsItem) {
    if (this.googlePartitionCerts == null) {
      this.googlePartitionCerts = new ArrayList<>();
    }
    this.googlePartitionCerts.add(googlePartitionCertsItem);
    return this;
  }

  /**
   * Google partition certificate chain corresponding to the attestation.
   * @return googlePartitionCerts
   */
  @javax.annotation.Nullable
  public List<String> getGooglePartitionCerts() {
    return googlePartitionCerts;
  }

  public void setGooglePartitionCerts(List<String> googlePartitionCerts) {
    this.googlePartitionCerts = googlePartitionCerts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateChains certificateChains = (CertificateChains) o;
    return Objects.equals(this.caviumCerts, certificateChains.caviumCerts) &&
        Objects.equals(this.googleCardCerts, certificateChains.googleCardCerts) &&
        Objects.equals(this.googlePartitionCerts, certificateChains.googlePartitionCerts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caviumCerts, googleCardCerts, googlePartitionCerts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateChains {\n");
    sb.append("    caviumCerts: ").append(toIndentedString(caviumCerts)).append("\n");
    sb.append("    googleCardCerts: ").append(toIndentedString(googleCardCerts)).append("\n");
    sb.append("    googlePartitionCerts: ").append(toIndentedString(googlePartitionCerts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caviumCerts");
    openapiFields.add("googleCardCerts");
    openapiFields.add("googlePartitionCerts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateChains
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateChains.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateChains is not found in the empty JSON string", CertificateChains.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateChains.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateChains` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("caviumCerts") != null && !jsonObj.get("caviumCerts").isJsonNull() && !jsonObj.get("caviumCerts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `caviumCerts` to be an array in the JSON string but got `%s`", jsonObj.get("caviumCerts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("googleCardCerts") != null && !jsonObj.get("googleCardCerts").isJsonNull() && !jsonObj.get("googleCardCerts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleCardCerts` to be an array in the JSON string but got `%s`", jsonObj.get("googleCardCerts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("googlePartitionCerts") != null && !jsonObj.get("googlePartitionCerts").isJsonNull() && !jsonObj.get("googlePartitionCerts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `googlePartitionCerts` to be an array in the JSON string but got `%s`", jsonObj.get("googlePartitionCerts").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateChains.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateChains' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateChains> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateChains.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateChains>() {
           @Override
           public void write(JsonWriter out, CertificateChains value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateChains read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateChains given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateChains
   * @throws IOException if the JSON string is invalid with respect to CertificateChains
   */
  public static CertificateChains fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateChains.class);
  }

  /**
   * Convert an instance of CertificateChains to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

