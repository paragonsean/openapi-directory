/*
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for KeyManagementService.MacVerify.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:14.760057-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MacVerifyResponse {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The ProtectionLevel of the CryptoKeyVersion used for verification.
   */
  @JsonAdapter(ProtectionLevelEnum.Adapter.class)
  public enum ProtectionLevelEnum {
    PROTECTION_LEVEL_UNSPECIFIED("PROTECTION_LEVEL_UNSPECIFIED"),
    
    SOFTWARE("SOFTWARE"),
    
    HSM("HSM"),
    
    EXTERNAL("EXTERNAL"),
    
    EXTERNAL_VPC("EXTERNAL_VPC");

    private String value;

    ProtectionLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtectionLevelEnum fromValue(String value) {
      for (ProtectionLevelEnum b : ProtectionLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtectionLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtectionLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtectionLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtectionLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtectionLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTECTION_LEVEL = "protectionLevel";
  @SerializedName(SERIALIZED_NAME_PROTECTION_LEVEL)
  private ProtectionLevelEnum protectionLevel;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public static final String SERIALIZED_NAME_VERIFIED_DATA_CRC32C = "verifiedDataCrc32c";
  @SerializedName(SERIALIZED_NAME_VERIFIED_DATA_CRC32C)
  private Boolean verifiedDataCrc32c;

  public static final String SERIALIZED_NAME_VERIFIED_MAC_CRC32C = "verifiedMacCrc32c";
  @SerializedName(SERIALIZED_NAME_VERIFIED_MAC_CRC32C)
  private Boolean verifiedMacCrc32c;

  public static final String SERIALIZED_NAME_VERIFIED_SUCCESS_INTEGRITY = "verifiedSuccessIntegrity";
  @SerializedName(SERIALIZED_NAME_VERIFIED_SUCCESS_INTEGRITY)
  private Boolean verifiedSuccessIntegrity;

  public MacVerifyResponse() {
  }

  public MacVerifyResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the CryptoKeyVersion used for verification. Check this field to verify that the intended resource was used for verification.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MacVerifyResponse protectionLevel(ProtectionLevelEnum protectionLevel) {
    this.protectionLevel = protectionLevel;
    return this;
  }

  /**
   * The ProtectionLevel of the CryptoKeyVersion used for verification.
   * @return protectionLevel
   */
  @javax.annotation.Nullable
  public ProtectionLevelEnum getProtectionLevel() {
    return protectionLevel;
  }

  public void setProtectionLevel(ProtectionLevelEnum protectionLevel) {
    this.protectionLevel = protectionLevel;
  }


  public MacVerifyResponse success(Boolean success) {
    this.success = success;
    return this;
  }

  /**
   * This field indicates whether or not the verification operation for MacVerifyRequest.mac over MacVerifyRequest.data was successful.
   * @return success
   */
  @javax.annotation.Nullable
  public Boolean getSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }


  public MacVerifyResponse verifiedDataCrc32c(Boolean verifiedDataCrc32c) {
    this.verifiedDataCrc32c = verifiedDataCrc32c;
    return this;
  }

  /**
   * Integrity verification field. A flag indicating whether MacVerifyRequest.data_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that MacVerifyRequest.data_crc32c was left unset or that it was not delivered to KeyManagementService. If you&#39;ve set MacVerifyRequest.data_crc32c but this field is still false, discard the response and perform a limited number of retries.
   * @return verifiedDataCrc32c
   */
  @javax.annotation.Nullable
  public Boolean getVerifiedDataCrc32c() {
    return verifiedDataCrc32c;
  }

  public void setVerifiedDataCrc32c(Boolean verifiedDataCrc32c) {
    this.verifiedDataCrc32c = verifiedDataCrc32c;
  }


  public MacVerifyResponse verifiedMacCrc32c(Boolean verifiedMacCrc32c) {
    this.verifiedMacCrc32c = verifiedMacCrc32c;
    return this;
  }

  /**
   * Integrity verification field. A flag indicating whether MacVerifyRequest.mac_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that MacVerifyRequest.mac_crc32c was left unset or that it was not delivered to KeyManagementService. If you&#39;ve set MacVerifyRequest.mac_crc32c but this field is still false, discard the response and perform a limited number of retries.
   * @return verifiedMacCrc32c
   */
  @javax.annotation.Nullable
  public Boolean getVerifiedMacCrc32c() {
    return verifiedMacCrc32c;
  }

  public void setVerifiedMacCrc32c(Boolean verifiedMacCrc32c) {
    this.verifiedMacCrc32c = verifiedMacCrc32c;
  }


  public MacVerifyResponse verifiedSuccessIntegrity(Boolean verifiedSuccessIntegrity) {
    this.verifiedSuccessIntegrity = verifiedSuccessIntegrity;
    return this;
  }

  /**
   * Integrity verification field. This value is used for the integrity verification of [MacVerifyResponse.success]. If the value of this field contradicts the value of [MacVerifyResponse.success], discard the response and perform a limited number of retries.
   * @return verifiedSuccessIntegrity
   */
  @javax.annotation.Nullable
  public Boolean getVerifiedSuccessIntegrity() {
    return verifiedSuccessIntegrity;
  }

  public void setVerifiedSuccessIntegrity(Boolean verifiedSuccessIntegrity) {
    this.verifiedSuccessIntegrity = verifiedSuccessIntegrity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MacVerifyResponse macVerifyResponse = (MacVerifyResponse) o;
    return Objects.equals(this.name, macVerifyResponse.name) &&
        Objects.equals(this.protectionLevel, macVerifyResponse.protectionLevel) &&
        Objects.equals(this.success, macVerifyResponse.success) &&
        Objects.equals(this.verifiedDataCrc32c, macVerifyResponse.verifiedDataCrc32c) &&
        Objects.equals(this.verifiedMacCrc32c, macVerifyResponse.verifiedMacCrc32c) &&
        Objects.equals(this.verifiedSuccessIntegrity, macVerifyResponse.verifiedSuccessIntegrity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, protectionLevel, success, verifiedDataCrc32c, verifiedMacCrc32c, verifiedSuccessIntegrity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MacVerifyResponse {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protectionLevel: ").append(toIndentedString(protectionLevel)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    verifiedDataCrc32c: ").append(toIndentedString(verifiedDataCrc32c)).append("\n");
    sb.append("    verifiedMacCrc32c: ").append(toIndentedString(verifiedMacCrc32c)).append("\n");
    sb.append("    verifiedSuccessIntegrity: ").append(toIndentedString(verifiedSuccessIntegrity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("protectionLevel");
    openapiFields.add("success");
    openapiFields.add("verifiedDataCrc32c");
    openapiFields.add("verifiedMacCrc32c");
    openapiFields.add("verifiedSuccessIntegrity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MacVerifyResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MacVerifyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MacVerifyResponse is not found in the empty JSON string", MacVerifyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MacVerifyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MacVerifyResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("protectionLevel") != null && !jsonObj.get("protectionLevel").isJsonNull()) && !jsonObj.get("protectionLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protectionLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protectionLevel").toString()));
      }
      // validate the optional field `protectionLevel`
      if (jsonObj.get("protectionLevel") != null && !jsonObj.get("protectionLevel").isJsonNull()) {
        ProtectionLevelEnum.validateJsonElement(jsonObj.get("protectionLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MacVerifyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MacVerifyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MacVerifyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MacVerifyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MacVerifyResponse>() {
           @Override
           public void write(JsonWriter out, MacVerifyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MacVerifyResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MacVerifyResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MacVerifyResponse
   * @throws IOException if the JSON string is invalid with respect to MacVerifyResponse
   */
  public static MacVerifyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MacVerifyResponse.class);
  }

  /**
   * Convert an instance of MacVerifyResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

