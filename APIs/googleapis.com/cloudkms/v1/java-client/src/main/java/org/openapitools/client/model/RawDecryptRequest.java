/*
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for KeyManagementService.RawDecrypt.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:14.760057-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RawDecryptRequest {
  public static final String SERIALIZED_NAME_ADDITIONAL_AUTHENTICATED_DATA = "additionalAuthenticatedData";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_AUTHENTICATED_DATA)
  private byte[] additionalAuthenticatedData;

  public static final String SERIALIZED_NAME_ADDITIONAL_AUTHENTICATED_DATA_CRC32C = "additionalAuthenticatedDataCrc32c";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_AUTHENTICATED_DATA_CRC32C)
  private String additionalAuthenticatedDataCrc32c;

  public static final String SERIALIZED_NAME_CIPHERTEXT = "ciphertext";
  @SerializedName(SERIALIZED_NAME_CIPHERTEXT)
  private byte[] ciphertext;

  public static final String SERIALIZED_NAME_CIPHERTEXT_CRC32C = "ciphertextCrc32c";
  @SerializedName(SERIALIZED_NAME_CIPHERTEXT_CRC32C)
  private String ciphertextCrc32c;

  public static final String SERIALIZED_NAME_INITIALIZATION_VECTOR = "initializationVector";
  @SerializedName(SERIALIZED_NAME_INITIALIZATION_VECTOR)
  private byte[] initializationVector;

  public static final String SERIALIZED_NAME_INITIALIZATION_VECTOR_CRC32C = "initializationVectorCrc32c";
  @SerializedName(SERIALIZED_NAME_INITIALIZATION_VECTOR_CRC32C)
  private String initializationVectorCrc32c;

  public static final String SERIALIZED_NAME_TAG_LENGTH = "tagLength";
  @SerializedName(SERIALIZED_NAME_TAG_LENGTH)
  private Integer tagLength;

  public RawDecryptRequest() {
  }

  public RawDecryptRequest additionalAuthenticatedData(byte[] additionalAuthenticatedData) {
    this.additionalAuthenticatedData = additionalAuthenticatedData;
    return this;
  }

  /**
   * Optional. Optional data that must match the data originally supplied in RawEncryptRequest.additional_authenticated_data.
   * @return additionalAuthenticatedData
   */
  @javax.annotation.Nullable
  public byte[] getAdditionalAuthenticatedData() {
    return additionalAuthenticatedData;
  }

  public void setAdditionalAuthenticatedData(byte[] additionalAuthenticatedData) {
    this.additionalAuthenticatedData = additionalAuthenticatedData;
  }


  public RawDecryptRequest additionalAuthenticatedDataCrc32c(String additionalAuthenticatedDataCrc32c) {
    this.additionalAuthenticatedDataCrc32c = additionalAuthenticatedDataCrc32c;
    return this;
  }

  /**
   * Optional. An optional CRC32C checksum of the RawDecryptRequest.additional_authenticated_data. If specified, KeyManagementService will verify the integrity of the received additional_authenticated_data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(additional_authenticated_data) is equal to additional_authenticated_data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
   * @return additionalAuthenticatedDataCrc32c
   */
  @javax.annotation.Nullable
  public String getAdditionalAuthenticatedDataCrc32c() {
    return additionalAuthenticatedDataCrc32c;
  }

  public void setAdditionalAuthenticatedDataCrc32c(String additionalAuthenticatedDataCrc32c) {
    this.additionalAuthenticatedDataCrc32c = additionalAuthenticatedDataCrc32c;
  }


  public RawDecryptRequest ciphertext(byte[] ciphertext) {
    this.ciphertext = ciphertext;
    return this;
  }

  /**
   * Required. The encrypted data originally returned in RawEncryptResponse.ciphertext.
   * @return ciphertext
   */
  @javax.annotation.Nullable
  public byte[] getCiphertext() {
    return ciphertext;
  }

  public void setCiphertext(byte[] ciphertext) {
    this.ciphertext = ciphertext;
  }


  public RawDecryptRequest ciphertextCrc32c(String ciphertextCrc32c) {
    this.ciphertextCrc32c = ciphertextCrc32c;
    return this;
  }

  /**
   * Optional. An optional CRC32C checksum of the RawDecryptRequest.ciphertext. If specified, KeyManagementService will verify the integrity of the received ciphertext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(ciphertext) is equal to ciphertext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
   * @return ciphertextCrc32c
   */
  @javax.annotation.Nullable
  public String getCiphertextCrc32c() {
    return ciphertextCrc32c;
  }

  public void setCiphertextCrc32c(String ciphertextCrc32c) {
    this.ciphertextCrc32c = ciphertextCrc32c;
  }


  public RawDecryptRequest initializationVector(byte[] initializationVector) {
    this.initializationVector = initializationVector;
    return this;
  }

  /**
   * Required. The initialization vector (IV) used during encryption, which must match the data originally provided in RawEncryptResponse.initialization_vector.
   * @return initializationVector
   */
  @javax.annotation.Nullable
  public byte[] getInitializationVector() {
    return initializationVector;
  }

  public void setInitializationVector(byte[] initializationVector) {
    this.initializationVector = initializationVector;
  }


  public RawDecryptRequest initializationVectorCrc32c(String initializationVectorCrc32c) {
    this.initializationVectorCrc32c = initializationVectorCrc32c;
    return this;
  }

  /**
   * Optional. An optional CRC32C checksum of the RawDecryptRequest.initialization_vector. If specified, KeyManagementService will verify the integrity of the received initialization_vector using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(initialization_vector) is equal to initialization_vector_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
   * @return initializationVectorCrc32c
   */
  @javax.annotation.Nullable
  public String getInitializationVectorCrc32c() {
    return initializationVectorCrc32c;
  }

  public void setInitializationVectorCrc32c(String initializationVectorCrc32c) {
    this.initializationVectorCrc32c = initializationVectorCrc32c;
  }


  public RawDecryptRequest tagLength(Integer tagLength) {
    this.tagLength = tagLength;
    return this;
  }

  /**
   * The length of the authentication tag that is appended to the end of the ciphertext. If unspecified (0), the default value for the key&#39;s algorithm will be used (for AES-GCM, the default value is 16).
   * @return tagLength
   */
  @javax.annotation.Nullable
  public Integer getTagLength() {
    return tagLength;
  }

  public void setTagLength(Integer tagLength) {
    this.tagLength = tagLength;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RawDecryptRequest rawDecryptRequest = (RawDecryptRequest) o;
    return Arrays.equals(this.additionalAuthenticatedData, rawDecryptRequest.additionalAuthenticatedData) &&
        Objects.equals(this.additionalAuthenticatedDataCrc32c, rawDecryptRequest.additionalAuthenticatedDataCrc32c) &&
        Arrays.equals(this.ciphertext, rawDecryptRequest.ciphertext) &&
        Objects.equals(this.ciphertextCrc32c, rawDecryptRequest.ciphertextCrc32c) &&
        Arrays.equals(this.initializationVector, rawDecryptRequest.initializationVector) &&
        Objects.equals(this.initializationVectorCrc32c, rawDecryptRequest.initializationVectorCrc32c) &&
        Objects.equals(this.tagLength, rawDecryptRequest.tagLength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(additionalAuthenticatedData), additionalAuthenticatedDataCrc32c, Arrays.hashCode(ciphertext), ciphertextCrc32c, Arrays.hashCode(initializationVector), initializationVectorCrc32c, tagLength);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RawDecryptRequest {\n");
    sb.append("    additionalAuthenticatedData: ").append(toIndentedString(additionalAuthenticatedData)).append("\n");
    sb.append("    additionalAuthenticatedDataCrc32c: ").append(toIndentedString(additionalAuthenticatedDataCrc32c)).append("\n");
    sb.append("    ciphertext: ").append(toIndentedString(ciphertext)).append("\n");
    sb.append("    ciphertextCrc32c: ").append(toIndentedString(ciphertextCrc32c)).append("\n");
    sb.append("    initializationVector: ").append(toIndentedString(initializationVector)).append("\n");
    sb.append("    initializationVectorCrc32c: ").append(toIndentedString(initializationVectorCrc32c)).append("\n");
    sb.append("    tagLength: ").append(toIndentedString(tagLength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalAuthenticatedData");
    openapiFields.add("additionalAuthenticatedDataCrc32c");
    openapiFields.add("ciphertext");
    openapiFields.add("ciphertextCrc32c");
    openapiFields.add("initializationVector");
    openapiFields.add("initializationVectorCrc32c");
    openapiFields.add("tagLength");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RawDecryptRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RawDecryptRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RawDecryptRequest is not found in the empty JSON string", RawDecryptRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RawDecryptRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RawDecryptRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalAuthenticatedDataCrc32c") != null && !jsonObj.get("additionalAuthenticatedDataCrc32c").isJsonNull()) && !jsonObj.get("additionalAuthenticatedDataCrc32c").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalAuthenticatedDataCrc32c` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalAuthenticatedDataCrc32c").toString()));
      }
      if ((jsonObj.get("ciphertextCrc32c") != null && !jsonObj.get("ciphertextCrc32c").isJsonNull()) && !jsonObj.get("ciphertextCrc32c").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ciphertextCrc32c` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ciphertextCrc32c").toString()));
      }
      if ((jsonObj.get("initializationVectorCrc32c") != null && !jsonObj.get("initializationVectorCrc32c").isJsonNull()) && !jsonObj.get("initializationVectorCrc32c").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initializationVectorCrc32c` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initializationVectorCrc32c").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RawDecryptRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RawDecryptRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RawDecryptRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RawDecryptRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RawDecryptRequest>() {
           @Override
           public void write(JsonWriter out, RawDecryptRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RawDecryptRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RawDecryptRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RawDecryptRequest
   * @throws IOException if the JSON string is invalid with respect to RawDecryptRequest
   */
  public static RawDecryptRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RawDecryptRequest.class);
  }

  /**
   * Convert an instance of RawDecryptRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

