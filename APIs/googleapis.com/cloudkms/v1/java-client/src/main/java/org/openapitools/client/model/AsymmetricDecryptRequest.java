/*
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for KeyManagementService.AsymmetricDecrypt.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:14.760057-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AsymmetricDecryptRequest {
  public static final String SERIALIZED_NAME_CIPHERTEXT = "ciphertext";
  @SerializedName(SERIALIZED_NAME_CIPHERTEXT)
  private byte[] ciphertext;

  public static final String SERIALIZED_NAME_CIPHERTEXT_CRC32C = "ciphertextCrc32c";
  @SerializedName(SERIALIZED_NAME_CIPHERTEXT_CRC32C)
  private String ciphertextCrc32c;

  public AsymmetricDecryptRequest() {
  }

  public AsymmetricDecryptRequest ciphertext(byte[] ciphertext) {
    this.ciphertext = ciphertext;
    return this;
  }

  /**
   * Required. The data encrypted with the named CryptoKeyVersion&#39;s public key using OAEP.
   * @return ciphertext
   */
  @javax.annotation.Nullable
  public byte[] getCiphertext() {
    return ciphertext;
  }

  public void setCiphertext(byte[] ciphertext) {
    this.ciphertext = ciphertext;
  }


  public AsymmetricDecryptRequest ciphertextCrc32c(String ciphertextCrc32c) {
    this.ciphertextCrc32c = ciphertextCrc32c;
    return this;
  }

  /**
   * Optional. An optional CRC32C checksum of the AsymmetricDecryptRequest.ciphertext. If specified, KeyManagementService will verify the integrity of the received AsymmetricDecryptRequest.ciphertext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(AsymmetricDecryptRequest.ciphertext) is equal to AsymmetricDecryptRequest.ciphertext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
   * @return ciphertextCrc32c
   */
  @javax.annotation.Nullable
  public String getCiphertextCrc32c() {
    return ciphertextCrc32c;
  }

  public void setCiphertextCrc32c(String ciphertextCrc32c) {
    this.ciphertextCrc32c = ciphertextCrc32c;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AsymmetricDecryptRequest asymmetricDecryptRequest = (AsymmetricDecryptRequest) o;
    return Arrays.equals(this.ciphertext, asymmetricDecryptRequest.ciphertext) &&
        Objects.equals(this.ciphertextCrc32c, asymmetricDecryptRequest.ciphertextCrc32c);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(ciphertext), ciphertextCrc32c);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AsymmetricDecryptRequest {\n");
    sb.append("    ciphertext: ").append(toIndentedString(ciphertext)).append("\n");
    sb.append("    ciphertextCrc32c: ").append(toIndentedString(ciphertextCrc32c)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ciphertext");
    openapiFields.add("ciphertextCrc32c");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AsymmetricDecryptRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AsymmetricDecryptRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AsymmetricDecryptRequest is not found in the empty JSON string", AsymmetricDecryptRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AsymmetricDecryptRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AsymmetricDecryptRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ciphertextCrc32c") != null && !jsonObj.get("ciphertextCrc32c").isJsonNull()) && !jsonObj.get("ciphertextCrc32c").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ciphertextCrc32c` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ciphertextCrc32c").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AsymmetricDecryptRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AsymmetricDecryptRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AsymmetricDecryptRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AsymmetricDecryptRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AsymmetricDecryptRequest>() {
           @Override
           public void write(JsonWriter out, AsymmetricDecryptRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AsymmetricDecryptRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AsymmetricDecryptRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AsymmetricDecryptRequest
   * @throws IOException if the JSON string is invalid with respect to AsymmetricDecryptRequest
   */
  public static AsymmetricDecryptRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AsymmetricDecryptRequest.class);
  }

  /**
   * Convert an instance of AsymmetricDecryptRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

