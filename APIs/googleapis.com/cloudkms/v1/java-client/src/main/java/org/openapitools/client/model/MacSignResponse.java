/*
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for KeyManagementService.MacSign.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:14.760057-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MacSignResponse {
  public static final String SERIALIZED_NAME_MAC = "mac";
  @SerializedName(SERIALIZED_NAME_MAC)
  private byte[] mac;

  public static final String SERIALIZED_NAME_MAC_CRC32C = "macCrc32c";
  @SerializedName(SERIALIZED_NAME_MAC_CRC32C)
  private String macCrc32c;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The ProtectionLevel of the CryptoKeyVersion used for signing.
   */
  @JsonAdapter(ProtectionLevelEnum.Adapter.class)
  public enum ProtectionLevelEnum {
    PROTECTION_LEVEL_UNSPECIFIED("PROTECTION_LEVEL_UNSPECIFIED"),
    
    SOFTWARE("SOFTWARE"),
    
    HSM("HSM"),
    
    EXTERNAL("EXTERNAL"),
    
    EXTERNAL_VPC("EXTERNAL_VPC");

    private String value;

    ProtectionLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtectionLevelEnum fromValue(String value) {
      for (ProtectionLevelEnum b : ProtectionLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtectionLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtectionLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtectionLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtectionLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtectionLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTECTION_LEVEL = "protectionLevel";
  @SerializedName(SERIALIZED_NAME_PROTECTION_LEVEL)
  private ProtectionLevelEnum protectionLevel;

  public static final String SERIALIZED_NAME_VERIFIED_DATA_CRC32C = "verifiedDataCrc32c";
  @SerializedName(SERIALIZED_NAME_VERIFIED_DATA_CRC32C)
  private Boolean verifiedDataCrc32c;

  public MacSignResponse() {
  }

  public MacSignResponse mac(byte[] mac) {
    this.mac = mac;
    return this;
  }

  /**
   * The created signature.
   * @return mac
   */
  @javax.annotation.Nullable
  public byte[] getMac() {
    return mac;
  }

  public void setMac(byte[] mac) {
    this.mac = mac;
  }


  public MacSignResponse macCrc32c(String macCrc32c) {
    this.macCrc32c = macCrc32c;
    return this;
  }

  /**
   * Integrity verification field. A CRC32C checksum of the returned MacSignResponse.mac. An integrity check of MacSignResponse.mac can be performed by computing the CRC32C checksum of MacSignResponse.mac and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
   * @return macCrc32c
   */
  @javax.annotation.Nullable
  public String getMacCrc32c() {
    return macCrc32c;
  }

  public void setMacCrc32c(String macCrc32c) {
    this.macCrc32c = macCrc32c;
  }


  public MacSignResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the CryptoKeyVersion used for signing. Check this field to verify that the intended resource was used for signing.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MacSignResponse protectionLevel(ProtectionLevelEnum protectionLevel) {
    this.protectionLevel = protectionLevel;
    return this;
  }

  /**
   * The ProtectionLevel of the CryptoKeyVersion used for signing.
   * @return protectionLevel
   */
  @javax.annotation.Nullable
  public ProtectionLevelEnum getProtectionLevel() {
    return protectionLevel;
  }

  public void setProtectionLevel(ProtectionLevelEnum protectionLevel) {
    this.protectionLevel = protectionLevel;
  }


  public MacSignResponse verifiedDataCrc32c(Boolean verifiedDataCrc32c) {
    this.verifiedDataCrc32c = verifiedDataCrc32c;
    return this;
  }

  /**
   * Integrity verification field. A flag indicating whether MacSignRequest.data_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that MacSignRequest.data_crc32c was left unset or that it was not delivered to KeyManagementService. If you&#39;ve set MacSignRequest.data_crc32c but this field is still false, discard the response and perform a limited number of retries.
   * @return verifiedDataCrc32c
   */
  @javax.annotation.Nullable
  public Boolean getVerifiedDataCrc32c() {
    return verifiedDataCrc32c;
  }

  public void setVerifiedDataCrc32c(Boolean verifiedDataCrc32c) {
    this.verifiedDataCrc32c = verifiedDataCrc32c;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MacSignResponse macSignResponse = (MacSignResponse) o;
    return Arrays.equals(this.mac, macSignResponse.mac) &&
        Objects.equals(this.macCrc32c, macSignResponse.macCrc32c) &&
        Objects.equals(this.name, macSignResponse.name) &&
        Objects.equals(this.protectionLevel, macSignResponse.protectionLevel) &&
        Objects.equals(this.verifiedDataCrc32c, macSignResponse.verifiedDataCrc32c);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(mac), macCrc32c, name, protectionLevel, verifiedDataCrc32c);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MacSignResponse {\n");
    sb.append("    mac: ").append(toIndentedString(mac)).append("\n");
    sb.append("    macCrc32c: ").append(toIndentedString(macCrc32c)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protectionLevel: ").append(toIndentedString(protectionLevel)).append("\n");
    sb.append("    verifiedDataCrc32c: ").append(toIndentedString(verifiedDataCrc32c)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mac");
    openapiFields.add("macCrc32c");
    openapiFields.add("name");
    openapiFields.add("protectionLevel");
    openapiFields.add("verifiedDataCrc32c");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MacSignResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MacSignResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MacSignResponse is not found in the empty JSON string", MacSignResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MacSignResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MacSignResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("macCrc32c") != null && !jsonObj.get("macCrc32c").isJsonNull()) && !jsonObj.get("macCrc32c").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `macCrc32c` to be a primitive type in the JSON string but got `%s`", jsonObj.get("macCrc32c").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("protectionLevel") != null && !jsonObj.get("protectionLevel").isJsonNull()) && !jsonObj.get("protectionLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protectionLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protectionLevel").toString()));
      }
      // validate the optional field `protectionLevel`
      if (jsonObj.get("protectionLevel") != null && !jsonObj.get("protectionLevel").isJsonNull()) {
        ProtectionLevelEnum.validateJsonElement(jsonObj.get("protectionLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MacSignResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MacSignResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MacSignResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MacSignResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MacSignResponse>() {
           @Override
           public void write(JsonWriter out, MacSignResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MacSignResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MacSignResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MacSignResponse
   * @throws IOException if the JSON string is invalid with respect to MacSignResponse
   */
  public static MacSignResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MacSignResponse.class);
  }

  /**
   * Convert an instance of MacSignResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

