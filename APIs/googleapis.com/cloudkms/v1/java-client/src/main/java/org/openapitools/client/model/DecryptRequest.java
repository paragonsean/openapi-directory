/*
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for KeyManagementService.Decrypt.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:14.760057-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DecryptRequest {
  public static final String SERIALIZED_NAME_ADDITIONAL_AUTHENTICATED_DATA = "additionalAuthenticatedData";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_AUTHENTICATED_DATA)
  private byte[] additionalAuthenticatedData;

  public static final String SERIALIZED_NAME_ADDITIONAL_AUTHENTICATED_DATA_CRC32C = "additionalAuthenticatedDataCrc32c";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_AUTHENTICATED_DATA_CRC32C)
  private String additionalAuthenticatedDataCrc32c;

  public static final String SERIALIZED_NAME_CIPHERTEXT = "ciphertext";
  @SerializedName(SERIALIZED_NAME_CIPHERTEXT)
  private byte[] ciphertext;

  public static final String SERIALIZED_NAME_CIPHERTEXT_CRC32C = "ciphertextCrc32c";
  @SerializedName(SERIALIZED_NAME_CIPHERTEXT_CRC32C)
  private String ciphertextCrc32c;

  public DecryptRequest() {
  }

  public DecryptRequest additionalAuthenticatedData(byte[] additionalAuthenticatedData) {
    this.additionalAuthenticatedData = additionalAuthenticatedData;
    return this;
  }

  /**
   * Optional. Optional data that must match the data originally supplied in EncryptRequest.additional_authenticated_data.
   * @return additionalAuthenticatedData
   */
  @javax.annotation.Nullable
  public byte[] getAdditionalAuthenticatedData() {
    return additionalAuthenticatedData;
  }

  public void setAdditionalAuthenticatedData(byte[] additionalAuthenticatedData) {
    this.additionalAuthenticatedData = additionalAuthenticatedData;
  }


  public DecryptRequest additionalAuthenticatedDataCrc32c(String additionalAuthenticatedDataCrc32c) {
    this.additionalAuthenticatedDataCrc32c = additionalAuthenticatedDataCrc32c;
    return this;
  }

  /**
   * Optional. An optional CRC32C checksum of the DecryptRequest.additional_authenticated_data. If specified, KeyManagementService will verify the integrity of the received DecryptRequest.additional_authenticated_data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(DecryptRequest.additional_authenticated_data) is equal to DecryptRequest.additional_authenticated_data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
   * @return additionalAuthenticatedDataCrc32c
   */
  @javax.annotation.Nullable
  public String getAdditionalAuthenticatedDataCrc32c() {
    return additionalAuthenticatedDataCrc32c;
  }

  public void setAdditionalAuthenticatedDataCrc32c(String additionalAuthenticatedDataCrc32c) {
    this.additionalAuthenticatedDataCrc32c = additionalAuthenticatedDataCrc32c;
  }


  public DecryptRequest ciphertext(byte[] ciphertext) {
    this.ciphertext = ciphertext;
    return this;
  }

  /**
   * Required. The encrypted data originally returned in EncryptResponse.ciphertext.
   * @return ciphertext
   */
  @javax.annotation.Nullable
  public byte[] getCiphertext() {
    return ciphertext;
  }

  public void setCiphertext(byte[] ciphertext) {
    this.ciphertext = ciphertext;
  }


  public DecryptRequest ciphertextCrc32c(String ciphertextCrc32c) {
    this.ciphertextCrc32c = ciphertextCrc32c;
    return this;
  }

  /**
   * Optional. An optional CRC32C checksum of the DecryptRequest.ciphertext. If specified, KeyManagementService will verify the integrity of the received DecryptRequest.ciphertext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(DecryptRequest.ciphertext) is equal to DecryptRequest.ciphertext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
   * @return ciphertextCrc32c
   */
  @javax.annotation.Nullable
  public String getCiphertextCrc32c() {
    return ciphertextCrc32c;
  }

  public void setCiphertextCrc32c(String ciphertextCrc32c) {
    this.ciphertextCrc32c = ciphertextCrc32c;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DecryptRequest decryptRequest = (DecryptRequest) o;
    return Arrays.equals(this.additionalAuthenticatedData, decryptRequest.additionalAuthenticatedData) &&
        Objects.equals(this.additionalAuthenticatedDataCrc32c, decryptRequest.additionalAuthenticatedDataCrc32c) &&
        Arrays.equals(this.ciphertext, decryptRequest.ciphertext) &&
        Objects.equals(this.ciphertextCrc32c, decryptRequest.ciphertextCrc32c);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(additionalAuthenticatedData), additionalAuthenticatedDataCrc32c, Arrays.hashCode(ciphertext), ciphertextCrc32c);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DecryptRequest {\n");
    sb.append("    additionalAuthenticatedData: ").append(toIndentedString(additionalAuthenticatedData)).append("\n");
    sb.append("    additionalAuthenticatedDataCrc32c: ").append(toIndentedString(additionalAuthenticatedDataCrc32c)).append("\n");
    sb.append("    ciphertext: ").append(toIndentedString(ciphertext)).append("\n");
    sb.append("    ciphertextCrc32c: ").append(toIndentedString(ciphertextCrc32c)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalAuthenticatedData");
    openapiFields.add("additionalAuthenticatedDataCrc32c");
    openapiFields.add("ciphertext");
    openapiFields.add("ciphertextCrc32c");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DecryptRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DecryptRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DecryptRequest is not found in the empty JSON string", DecryptRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DecryptRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DecryptRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalAuthenticatedDataCrc32c") != null && !jsonObj.get("additionalAuthenticatedDataCrc32c").isJsonNull()) && !jsonObj.get("additionalAuthenticatedDataCrc32c").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalAuthenticatedDataCrc32c` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalAuthenticatedDataCrc32c").toString()));
      }
      if ((jsonObj.get("ciphertextCrc32c") != null && !jsonObj.get("ciphertextCrc32c").isJsonNull()) && !jsonObj.get("ciphertextCrc32c").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ciphertextCrc32c` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ciphertextCrc32c").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DecryptRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DecryptRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DecryptRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DecryptRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DecryptRequest>() {
           @Override
           public void write(JsonWriter out, DecryptRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DecryptRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DecryptRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DecryptRequest
   * @throws IOException if the JSON string is invalid with respect to DecryptRequest
   */
  public static DecryptRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DecryptRequest.class);
  }

  /**
   * Convert an instance of DecryptRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

