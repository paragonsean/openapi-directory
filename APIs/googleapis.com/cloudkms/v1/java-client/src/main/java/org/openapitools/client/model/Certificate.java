/*
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Certificate represents an X.509 certificate used to authenticate HTTPS connections to EKM replicas.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:14.760057-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Certificate {
  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_NOT_AFTER_TIME = "notAfterTime";
  @SerializedName(SERIALIZED_NAME_NOT_AFTER_TIME)
  private String notAfterTime;

  public static final String SERIALIZED_NAME_NOT_BEFORE_TIME = "notBeforeTime";
  @SerializedName(SERIALIZED_NAME_NOT_BEFORE_TIME)
  private String notBeforeTime;

  public static final String SERIALIZED_NAME_PARSED = "parsed";
  @SerializedName(SERIALIZED_NAME_PARSED)
  private Boolean parsed;

  public static final String SERIALIZED_NAME_RAW_DER = "rawDer";
  @SerializedName(SERIALIZED_NAME_RAW_DER)
  private byte[] rawDer;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_SHA256_FINGERPRINT = "sha256Fingerprint";
  @SerializedName(SERIALIZED_NAME_SHA256_FINGERPRINT)
  private String sha256Fingerprint;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_SUBJECT_ALTERNATIVE_DNS_NAMES = "subjectAlternativeDnsNames";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ALTERNATIVE_DNS_NAMES)
  private List<String> subjectAlternativeDnsNames = new ArrayList<>();

  public Certificate() {
  }

  public Certificate(
     String issuer, 
     String notAfterTime, 
     String notBeforeTime, 
     Boolean parsed, 
     String serialNumber, 
     String sha256Fingerprint, 
     String subject, 
     List<String> subjectAlternativeDnsNames
  ) {
    this();
    this.issuer = issuer;
    this.notAfterTime = notAfterTime;
    this.notBeforeTime = notBeforeTime;
    this.parsed = parsed;
    this.serialNumber = serialNumber;
    this.sha256Fingerprint = sha256Fingerprint;
    this.subject = subject;
    this.subjectAlternativeDnsNames = subjectAlternativeDnsNames;
  }

  /**
   * Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }



  /**
   * Output only. The certificate is not valid after this time. Only present if parsed is true.
   * @return notAfterTime
   */
  @javax.annotation.Nullable
  public String getNotAfterTime() {
    return notAfterTime;
  }



  /**
   * Output only. The certificate is not valid before this time. Only present if parsed is true.
   * @return notBeforeTime
   */
  @javax.annotation.Nullable
  public String getNotBeforeTime() {
    return notBeforeTime;
  }



  /**
   * Output only. True if the certificate was parsed successfully.
   * @return parsed
   */
  @javax.annotation.Nullable
  public Boolean getParsed() {
    return parsed;
  }



  public Certificate rawDer(byte[] rawDer) {
    this.rawDer = rawDer;
    return this;
  }

  /**
   * Required. The raw certificate bytes in DER format.
   * @return rawDer
   */
  @javax.annotation.Nullable
  public byte[] getRawDer() {
    return rawDer;
  }

  public void setRawDer(byte[] rawDer) {
    this.rawDer = rawDer;
  }


  /**
   * Output only. The certificate serial number as a hex string. Only present if parsed is true.
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }



  /**
   * Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
   * @return sha256Fingerprint
   */
  @javax.annotation.Nullable
  public String getSha256Fingerprint() {
    return sha256Fingerprint;
  }



  /**
   * Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true.
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }



  /**
   * Output only. The subject Alternative DNS names. Only present if parsed is true.
   * @return subjectAlternativeDnsNames
   */
  @javax.annotation.Nullable
  public List<String> getSubjectAlternativeDnsNames() {
    return subjectAlternativeDnsNames;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Certificate certificate = (Certificate) o;
    return Objects.equals(this.issuer, certificate.issuer) &&
        Objects.equals(this.notAfterTime, certificate.notAfterTime) &&
        Objects.equals(this.notBeforeTime, certificate.notBeforeTime) &&
        Objects.equals(this.parsed, certificate.parsed) &&
        Arrays.equals(this.rawDer, certificate.rawDer) &&
        Objects.equals(this.serialNumber, certificate.serialNumber) &&
        Objects.equals(this.sha256Fingerprint, certificate.sha256Fingerprint) &&
        Objects.equals(this.subject, certificate.subject) &&
        Objects.equals(this.subjectAlternativeDnsNames, certificate.subjectAlternativeDnsNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issuer, notAfterTime, notBeforeTime, parsed, Arrays.hashCode(rawDer), serialNumber, sha256Fingerprint, subject, subjectAlternativeDnsNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Certificate {\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    notAfterTime: ").append(toIndentedString(notAfterTime)).append("\n");
    sb.append("    notBeforeTime: ").append(toIndentedString(notBeforeTime)).append("\n");
    sb.append("    parsed: ").append(toIndentedString(parsed)).append("\n");
    sb.append("    rawDer: ").append(toIndentedString(rawDer)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    sha256Fingerprint: ").append(toIndentedString(sha256Fingerprint)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    subjectAlternativeDnsNames: ").append(toIndentedString(subjectAlternativeDnsNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("issuer");
    openapiFields.add("notAfterTime");
    openapiFields.add("notBeforeTime");
    openapiFields.add("parsed");
    openapiFields.add("rawDer");
    openapiFields.add("serialNumber");
    openapiFields.add("sha256Fingerprint");
    openapiFields.add("subject");
    openapiFields.add("subjectAlternativeDnsNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Certificate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Certificate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Certificate is not found in the empty JSON string", Certificate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Certificate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Certificate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("notAfterTime") != null && !jsonObj.get("notAfterTime").isJsonNull()) && !jsonObj.get("notAfterTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notAfterTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notAfterTime").toString()));
      }
      if ((jsonObj.get("notBeforeTime") != null && !jsonObj.get("notBeforeTime").isJsonNull()) && !jsonObj.get("notBeforeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notBeforeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notBeforeTime").toString()));
      }
      if ((jsonObj.get("serialNumber") != null && !jsonObj.get("serialNumber").isJsonNull()) && !jsonObj.get("serialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumber").toString()));
      }
      if ((jsonObj.get("sha256Fingerprint") != null && !jsonObj.get("sha256Fingerprint").isJsonNull()) && !jsonObj.get("sha256Fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sha256Fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sha256Fingerprint").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subjectAlternativeDnsNames") != null && !jsonObj.get("subjectAlternativeDnsNames").isJsonNull() && !jsonObj.get("subjectAlternativeDnsNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectAlternativeDnsNames` to be an array in the JSON string but got `%s`", jsonObj.get("subjectAlternativeDnsNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Certificate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Certificate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Certificate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Certificate.class));

       return (TypeAdapter<T>) new TypeAdapter<Certificate>() {
           @Override
           public void write(JsonWriter out, Certificate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Certificate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Certificate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Certificate
   * @throws IOException if the JSON string is invalid with respect to Certificate
   */
  public static Certificate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Certificate.class);
  }

  /**
   * Convert an instance of Certificate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

