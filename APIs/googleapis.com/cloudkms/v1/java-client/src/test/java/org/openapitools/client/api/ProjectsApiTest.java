/*
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AsymmetricDecryptRequest;
import org.openapitools.client.model.AsymmetricDecryptResponse;
import org.openapitools.client.model.AsymmetricSignRequest;
import org.openapitools.client.model.AsymmetricSignResponse;
import org.openapitools.client.model.CryptoKey;
import org.openapitools.client.model.CryptoKeyVersion;
import org.openapitools.client.model.DecryptRequest;
import org.openapitools.client.model.DecryptResponse;
import org.openapitools.client.model.EkmConnection;
import org.openapitools.client.model.EncryptRequest;
import org.openapitools.client.model.EncryptResponse;
import org.openapitools.client.model.GenerateRandomBytesRequest;
import org.openapitools.client.model.GenerateRandomBytesResponse;
import org.openapitools.client.model.ImportCryptoKeyVersionRequest;
import org.openapitools.client.model.ImportJob;
import org.openapitools.client.model.KeyRing;
import org.openapitools.client.model.ListCryptoKeyVersionsResponse;
import org.openapitools.client.model.ListCryptoKeysResponse;
import org.openapitools.client.model.ListEkmConnectionsResponse;
import org.openapitools.client.model.ListImportJobsResponse;
import org.openapitools.client.model.ListKeyRingsResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.MacSignRequest;
import org.openapitools.client.model.MacSignResponse;
import org.openapitools.client.model.MacVerifyRequest;
import org.openapitools.client.model.MacVerifyResponse;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.PublicKey;
import org.openapitools.client.model.RawDecryptRequest;
import org.openapitools.client.model.RawDecryptResponse;
import org.openapitools.client.model.RawEncryptRequest;
import org.openapitools.client.model.RawEncryptResponse;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.openapitools.client.model.UpdateCryptoKeyPrimaryVersionRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates a new EkmConnection in a given Project and Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsEkmConnectionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String ekmConnectionId = null;
        EkmConnection ekmConnection = null;
        EkmConnection response = api.cloudkmsProjectsLocationsEkmConnectionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ekmConnectionId, ekmConnection);
        // TODO: test validations
    }

    /**
     * Lists EkmConnections.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsEkmConnectionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListEkmConnectionsResponse response = api.cloudkmsProjectsLocationsEkmConnectionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Verifies that Cloud KMS can successfully connect to the external key manager specified by an EkmConnection. If there is an error connecting to the EKM, this method returns a FAILED_PRECONDITION status containing structured information as described at https://cloud.google.com/kms/docs/reference/ekm_errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsEkmConnectionsVerifyConnectivityTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.cloudkmsProjectsLocationsEkmConnectionsVerifyConnectivity(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Generate random bytes using the Cloud KMS randomness source in the provided location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsGenerateRandomBytesTest() throws ApiException {
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GenerateRandomBytesRequest generateRandomBytesRequest = null;
        GenerateRandomBytesResponse response = api.cloudkmsProjectsLocationsGenerateRandomBytes(location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, generateRandomBytesRequest);
        // TODO: test validations
    }

    /**
     * Create a new KeyRing in a given Project and Location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String keyRingId = null;
        KeyRing keyRing = null;
        KeyRing response = api.cloudkmsProjectsLocationsKeyRingsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, keyRingId, keyRing);
        // TODO: test validations
    }

    /**
     * Create a new CryptoKey within a KeyRing. CryptoKey.purpose and CryptoKey.version_template.algorithm are required.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCryptoKeysCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String cryptoKeyId = null;
        Boolean skipInitialVersionCreation = null;
        CryptoKey cryptoKey = null;
        CryptoKey response = api.cloudkmsProjectsLocationsKeyRingsCryptoKeysCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, cryptoKeyId, skipInitialVersionCreation, cryptoKey);
        // TODO: test validations
    }

    /**
     * Decrypts data that was encrypted with a public key retrieved from GetPublicKey corresponding to a CryptoKeyVersion with CryptoKey.purpose ASYMMETRIC_DECRYPT.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsAsymmetricDecryptTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AsymmetricDecryptRequest asymmetricDecryptRequest = null;
        AsymmetricDecryptResponse response = api.cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsAsymmetricDecrypt(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, asymmetricDecryptRequest);
        // TODO: test validations
    }

    /**
     * Signs data using a CryptoKeyVersion with CryptoKey.purpose ASYMMETRIC_SIGN, producing a signature that can be verified with the public key retrieved from GetPublicKey.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsAsymmetricSignTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AsymmetricSignRequest asymmetricSignRequest = null;
        AsymmetricSignResponse response = api.cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsAsymmetricSign(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, asymmetricSignRequest);
        // TODO: test validations
    }

    /**
     * Create a new CryptoKeyVersion in a CryptoKey. The server will assign the next sequential id. If unset, state will be set to ENABLED.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CryptoKeyVersion cryptoKeyVersion = null;
        CryptoKeyVersion response = api.cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, cryptoKeyVersion);
        // TODO: test validations
    }

    /**
     * Schedule a CryptoKeyVersion for destruction. Upon calling this method, CryptoKeyVersion.state will be set to DESTROY_SCHEDULED, and destroy_time will be set to the time destroy_scheduled_duration in the future. At that time, the state will automatically change to DESTROYED, and the key material will be irrevocably destroyed. Before the destroy_time is reached, RestoreCryptoKeyVersion may be called to reverse the process.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsDestroyTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        CryptoKeyVersion response = api.cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsDestroy(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Returns the public key for the given CryptoKeyVersion. The CryptoKey.purpose must be ASYMMETRIC_SIGN or ASYMMETRIC_DECRYPT.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsGetPublicKeyTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PublicKey response = api.cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsGetPublicKey(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Import wrapped key material into a CryptoKeyVersion. All requests must specify a CryptoKey. If a CryptoKeyVersion is additionally specified in the request, key material will be reimported into that version. Otherwise, a new version will be created, and will be assigned the next sequential id within the CryptoKey.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsImportTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ImportCryptoKeyVersionRequest importCryptoKeyVersionRequest = null;
        CryptoKeyVersion response = api.cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsImport(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, importCryptoKeyVersionRequest);
        // TODO: test validations
    }

    /**
     * Lists CryptoKeyVersions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListCryptoKeyVersionsResponse response = api.cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * Signs data using a CryptoKeyVersion with CryptoKey.purpose MAC, producing a tag that can be verified by another source with the same key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsMacSignTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        MacSignRequest macSignRequest = null;
        MacSignResponse response = api.cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsMacSign(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, macSignRequest);
        // TODO: test validations
    }

    /**
     * Verifies MAC tag using a CryptoKeyVersion with CryptoKey.purpose MAC, and returns a response that indicates whether or not the verification was successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsMacVerifyTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        MacVerifyRequest macVerifyRequest = null;
        MacVerifyResponse response = api.cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsMacVerify(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, macVerifyRequest);
        // TODO: test validations
    }

    /**
     * Update a CryptoKeyVersion&#39;s metadata. state may be changed between ENABLED and DISABLED using this method. See DestroyCryptoKeyVersion and RestoreCryptoKeyVersion to move between other states.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        CryptoKeyVersion cryptoKeyVersion = null;
        CryptoKeyVersion response = api.cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, cryptoKeyVersion);
        // TODO: test validations
    }

    /**
     * Decrypts data that was originally encrypted using a raw cryptographic mechanism. The CryptoKey.purpose must be RAW_ENCRYPT_DECRYPT.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsRawDecryptTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RawDecryptRequest rawDecryptRequest = null;
        RawDecryptResponse response = api.cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsRawDecrypt(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, rawDecryptRequest);
        // TODO: test validations
    }

    /**
     * Encrypts data using portable cryptographic primitives. Most users should choose Encrypt and Decrypt rather than their raw counterparts. The CryptoKey.purpose must be RAW_ENCRYPT_DECRYPT.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsRawEncryptTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RawEncryptRequest rawEncryptRequest = null;
        RawEncryptResponse response = api.cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsRawEncrypt(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, rawEncryptRequest);
        // TODO: test validations
    }

    /**
     * Restore a CryptoKeyVersion in the DESTROY_SCHEDULED state. Upon restoration of the CryptoKeyVersion, state will be set to DISABLED, and destroy_time will be cleared.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsRestoreTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        CryptoKeyVersion response = api.cloudkmsProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsRestore(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Decrypts data that was protected by Encrypt. The CryptoKey.purpose must be ENCRYPT_DECRYPT.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCryptoKeysDecryptTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DecryptRequest decryptRequest = null;
        DecryptResponse response = api.cloudkmsProjectsLocationsKeyRingsCryptoKeysDecrypt(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, decryptRequest);
        // TODO: test validations
    }

    /**
     * Encrypts data, so that it can only be recovered by a call to Decrypt. The CryptoKey.purpose must be ENCRYPT_DECRYPT.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCryptoKeysEncryptTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        EncryptRequest encryptRequest = null;
        EncryptResponse response = api.cloudkmsProjectsLocationsKeyRingsCryptoKeysEncrypt(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, encryptRequest);
        // TODO: test validations
    }

    /**
     * Lists CryptoKeys.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCryptoKeysListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String versionView = null;
        ListCryptoKeysResponse response = api.cloudkmsProjectsLocationsKeyRingsCryptoKeysList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken, versionView);
        // TODO: test validations
    }

    /**
     * Update the version of a CryptoKey that will be used in Encrypt. Returns an error if called on a key whose purpose is not ENCRYPT_DECRYPT.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsCryptoKeysUpdatePrimaryVersionTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UpdateCryptoKeyPrimaryVersionRequest updateCryptoKeyPrimaryVersionRequest = null;
        CryptoKey response = api.cloudkmsProjectsLocationsKeyRingsCryptoKeysUpdatePrimaryVersion(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateCryptoKeyPrimaryVersionRequest);
        // TODO: test validations
    }

    /**
     * Create a new ImportJob within a KeyRing. ImportJob.import_method is required.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsImportJobsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String importJobId = null;
        ImportJob importJob = null;
        ImportJob response = api.cloudkmsProjectsLocationsKeyRingsImportJobsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, importJobId, importJob);
        // TODO: test validations
    }

    /**
     * Returns metadata for a given ImportJob.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsImportJobsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ImportJob response = api.cloudkmsProjectsLocationsKeyRingsImportJobsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsImportJobsGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer optionsRequestedPolicyVersion = null;
        Policy response = api.cloudkmsProjectsLocationsKeyRingsImportJobsGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, optionsRequestedPolicyVersion);
        // TODO: test validations
    }

    /**
     * Lists ImportJobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsImportJobsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListImportJobsResponse response = api.cloudkmsProjectsLocationsKeyRingsImportJobsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsImportJobsSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.cloudkmsProjectsLocationsKeyRingsImportJobsSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsImportJobsTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.cloudkmsProjectsLocationsKeyRingsImportJobsTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Lists KeyRings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsKeyRingsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListKeyRingsResponse response = api.cloudkmsProjectsLocationsKeyRingsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudkmsProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.cloudkmsProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

}
