# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RawEncryptResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ciphertext: str=None, ciphertext_crc32c: str=None, initialization_vector: str=None, initialization_vector_crc32c: str=None, name: str=None, protection_level: str=None, tag_length: int=None, verified_additional_authenticated_data_crc32c: bool=None, verified_initialization_vector_crc32c: bool=None, verified_plaintext_crc32c: bool=None):
        """RawEncryptResponse - a model defined in OpenAPI

        :param ciphertext: The ciphertext of this RawEncryptResponse.
        :param ciphertext_crc32c: The ciphertext_crc32c of this RawEncryptResponse.
        :param initialization_vector: The initialization_vector of this RawEncryptResponse.
        :param initialization_vector_crc32c: The initialization_vector_crc32c of this RawEncryptResponse.
        :param name: The name of this RawEncryptResponse.
        :param protection_level: The protection_level of this RawEncryptResponse.
        :param tag_length: The tag_length of this RawEncryptResponse.
        :param verified_additional_authenticated_data_crc32c: The verified_additional_authenticated_data_crc32c of this RawEncryptResponse.
        :param verified_initialization_vector_crc32c: The verified_initialization_vector_crc32c of this RawEncryptResponse.
        :param verified_plaintext_crc32c: The verified_plaintext_crc32c of this RawEncryptResponse.
        """
        self.openapi_types = {
            'ciphertext': str,
            'ciphertext_crc32c': str,
            'initialization_vector': str,
            'initialization_vector_crc32c': str,
            'name': str,
            'protection_level': str,
            'tag_length': int,
            'verified_additional_authenticated_data_crc32c': bool,
            'verified_initialization_vector_crc32c': bool,
            'verified_plaintext_crc32c': bool
        }

        self.attribute_map = {
            'ciphertext': 'ciphertext',
            'ciphertext_crc32c': 'ciphertextCrc32c',
            'initialization_vector': 'initializationVector',
            'initialization_vector_crc32c': 'initializationVectorCrc32c',
            'name': 'name',
            'protection_level': 'protectionLevel',
            'tag_length': 'tagLength',
            'verified_additional_authenticated_data_crc32c': 'verifiedAdditionalAuthenticatedDataCrc32c',
            'verified_initialization_vector_crc32c': 'verifiedInitializationVectorCrc32c',
            'verified_plaintext_crc32c': 'verifiedPlaintextCrc32c'
        }

        self._ciphertext = ciphertext
        self._ciphertext_crc32c = ciphertext_crc32c
        self._initialization_vector = initialization_vector
        self._initialization_vector_crc32c = initialization_vector_crc32c
        self._name = name
        self._protection_level = protection_level
        self._tag_length = tag_length
        self._verified_additional_authenticated_data_crc32c = verified_additional_authenticated_data_crc32c
        self._verified_initialization_vector_crc32c = verified_initialization_vector_crc32c
        self._verified_plaintext_crc32c = verified_plaintext_crc32c

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RawEncryptResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RawEncryptResponse of this RawEncryptResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ciphertext(self):
        """Gets the ciphertext of this RawEncryptResponse.

        The encrypted data. In the case of AES-GCM, the authentication tag is the tag_length bytes at the end of this field.

        :return: The ciphertext of this RawEncryptResponse.
        :rtype: str
        """
        return self._ciphertext

    @ciphertext.setter
    def ciphertext(self, ciphertext):
        """Sets the ciphertext of this RawEncryptResponse.

        The encrypted data. In the case of AES-GCM, the authentication tag is the tag_length bytes at the end of this field.

        :param ciphertext: The ciphertext of this RawEncryptResponse.
        :type ciphertext: str
        """

        self._ciphertext = ciphertext

    @property
    def ciphertext_crc32c(self):
        """Gets the ciphertext_crc32c of this RawEncryptResponse.

        Integrity verification field. A CRC32C checksum of the returned RawEncryptResponse.ciphertext. An integrity check of ciphertext can be performed by computing the CRC32C checksum of ciphertext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The ciphertext_crc32c of this RawEncryptResponse.
        :rtype: str
        """
        return self._ciphertext_crc32c

    @ciphertext_crc32c.setter
    def ciphertext_crc32c(self, ciphertext_crc32c):
        """Sets the ciphertext_crc32c of this RawEncryptResponse.

        Integrity verification field. A CRC32C checksum of the returned RawEncryptResponse.ciphertext. An integrity check of ciphertext can be performed by computing the CRC32C checksum of ciphertext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param ciphertext_crc32c: The ciphertext_crc32c of this RawEncryptResponse.
        :type ciphertext_crc32c: str
        """

        self._ciphertext_crc32c = ciphertext_crc32c

    @property
    def initialization_vector(self):
        """Gets the initialization_vector of this RawEncryptResponse.

        The initialization vector (IV) generated by the service during encryption. This value must be stored and provided in RawDecryptRequest.initialization_vector at decryption time.

        :return: The initialization_vector of this RawEncryptResponse.
        :rtype: str
        """
        return self._initialization_vector

    @initialization_vector.setter
    def initialization_vector(self, initialization_vector):
        """Sets the initialization_vector of this RawEncryptResponse.

        The initialization vector (IV) generated by the service during encryption. This value must be stored and provided in RawDecryptRequest.initialization_vector at decryption time.

        :param initialization_vector: The initialization_vector of this RawEncryptResponse.
        :type initialization_vector: str
        """

        self._initialization_vector = initialization_vector

    @property
    def initialization_vector_crc32c(self):
        """Gets the initialization_vector_crc32c of this RawEncryptResponse.

        Integrity verification field. A CRC32C checksum of the returned RawEncryptResponse.initialization_vector. An integrity check of initialization_vector can be performed by computing the CRC32C checksum of initialization_vector and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The initialization_vector_crc32c of this RawEncryptResponse.
        :rtype: str
        """
        return self._initialization_vector_crc32c

    @initialization_vector_crc32c.setter
    def initialization_vector_crc32c(self, initialization_vector_crc32c):
        """Sets the initialization_vector_crc32c of this RawEncryptResponse.

        Integrity verification field. A CRC32C checksum of the returned RawEncryptResponse.initialization_vector. An integrity check of initialization_vector can be performed by computing the CRC32C checksum of initialization_vector and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param initialization_vector_crc32c: The initialization_vector_crc32c of this RawEncryptResponse.
        :type initialization_vector_crc32c: str
        """

        self._initialization_vector_crc32c = initialization_vector_crc32c

    @property
    def name(self):
        """Gets the name of this RawEncryptResponse.

        The resource name of the CryptoKeyVersion used in encryption. Check this field to verify that the intended resource was used for encryption.

        :return: The name of this RawEncryptResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RawEncryptResponse.

        The resource name of the CryptoKeyVersion used in encryption. Check this field to verify that the intended resource was used for encryption.

        :param name: The name of this RawEncryptResponse.
        :type name: str
        """

        self._name = name

    @property
    def protection_level(self):
        """Gets the protection_level of this RawEncryptResponse.

        The ProtectionLevel of the CryptoKeyVersion used in encryption.

        :return: The protection_level of this RawEncryptResponse.
        :rtype: str
        """
        return self._protection_level

    @protection_level.setter
    def protection_level(self, protection_level):
        """Sets the protection_level of this RawEncryptResponse.

        The ProtectionLevel of the CryptoKeyVersion used in encryption.

        :param protection_level: The protection_level of this RawEncryptResponse.
        :type protection_level: str
        """
        allowed_values = ["PROTECTION_LEVEL_UNSPECIFIED", "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC"]  # noqa: E501
        if protection_level not in allowed_values:
            raise ValueError(
                "Invalid value for `protection_level` ({0}), must be one of {1}"
                .format(protection_level, allowed_values)
            )

        self._protection_level = protection_level

    @property
    def tag_length(self):
        """Gets the tag_length of this RawEncryptResponse.

        The length of the authentication tag that is appended to the end of the ciphertext.

        :return: The tag_length of this RawEncryptResponse.
        :rtype: int
        """
        return self._tag_length

    @tag_length.setter
    def tag_length(self, tag_length):
        """Sets the tag_length of this RawEncryptResponse.

        The length of the authentication tag that is appended to the end of the ciphertext.

        :param tag_length: The tag_length of this RawEncryptResponse.
        :type tag_length: int
        """

        self._tag_length = tag_length

    @property
    def verified_additional_authenticated_data_crc32c(self):
        """Gets the verified_additional_authenticated_data_crc32c of this RawEncryptResponse.

        Integrity verification field. A flag indicating whether RawEncryptRequest.additional_authenticated_data_crc32c was received by KeyManagementService and used for the integrity verification of additional_authenticated_data. A false value of this field indicates either that // RawEncryptRequest.additional_authenticated_data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawEncryptRequest.additional_authenticated_data_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :return: The verified_additional_authenticated_data_crc32c of this RawEncryptResponse.
        :rtype: bool
        """
        return self._verified_additional_authenticated_data_crc32c

    @verified_additional_authenticated_data_crc32c.setter
    def verified_additional_authenticated_data_crc32c(self, verified_additional_authenticated_data_crc32c):
        """Sets the verified_additional_authenticated_data_crc32c of this RawEncryptResponse.

        Integrity verification field. A flag indicating whether RawEncryptRequest.additional_authenticated_data_crc32c was received by KeyManagementService and used for the integrity verification of additional_authenticated_data. A false value of this field indicates either that // RawEncryptRequest.additional_authenticated_data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawEncryptRequest.additional_authenticated_data_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :param verified_additional_authenticated_data_crc32c: The verified_additional_authenticated_data_crc32c of this RawEncryptResponse.
        :type verified_additional_authenticated_data_crc32c: bool
        """

        self._verified_additional_authenticated_data_crc32c = verified_additional_authenticated_data_crc32c

    @property
    def verified_initialization_vector_crc32c(self):
        """Gets the verified_initialization_vector_crc32c of this RawEncryptResponse.

        Integrity verification field. A flag indicating whether RawEncryptRequest.initialization_vector_crc32c was received by KeyManagementService and used for the integrity verification of initialization_vector. A false value of this field indicates either that RawEncryptRequest.initialization_vector_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawEncryptRequest.initialization_vector_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :return: The verified_initialization_vector_crc32c of this RawEncryptResponse.
        :rtype: bool
        """
        return self._verified_initialization_vector_crc32c

    @verified_initialization_vector_crc32c.setter
    def verified_initialization_vector_crc32c(self, verified_initialization_vector_crc32c):
        """Sets the verified_initialization_vector_crc32c of this RawEncryptResponse.

        Integrity verification field. A flag indicating whether RawEncryptRequest.initialization_vector_crc32c was received by KeyManagementService and used for the integrity verification of initialization_vector. A false value of this field indicates either that RawEncryptRequest.initialization_vector_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawEncryptRequest.initialization_vector_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :param verified_initialization_vector_crc32c: The verified_initialization_vector_crc32c of this RawEncryptResponse.
        :type verified_initialization_vector_crc32c: bool
        """

        self._verified_initialization_vector_crc32c = verified_initialization_vector_crc32c

    @property
    def verified_plaintext_crc32c(self):
        """Gets the verified_plaintext_crc32c of this RawEncryptResponse.

        Integrity verification field. A flag indicating whether RawEncryptRequest.plaintext_crc32c was received by KeyManagementService and used for the integrity verification of the plaintext. A false value of this field indicates either that RawEncryptRequest.plaintext_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawEncryptRequest.plaintext_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :return: The verified_plaintext_crc32c of this RawEncryptResponse.
        :rtype: bool
        """
        return self._verified_plaintext_crc32c

    @verified_plaintext_crc32c.setter
    def verified_plaintext_crc32c(self, verified_plaintext_crc32c):
        """Sets the verified_plaintext_crc32c of this RawEncryptResponse.

        Integrity verification field. A flag indicating whether RawEncryptRequest.plaintext_crc32c was received by KeyManagementService and used for the integrity verification of the plaintext. A false value of this field indicates either that RawEncryptRequest.plaintext_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawEncryptRequest.plaintext_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :param verified_plaintext_crc32c: The verified_plaintext_crc32c of this RawEncryptResponse.
        :type verified_plaintext_crc32c: bool
        """

        self._verified_plaintext_crc32c = verified_plaintext_crc32c
