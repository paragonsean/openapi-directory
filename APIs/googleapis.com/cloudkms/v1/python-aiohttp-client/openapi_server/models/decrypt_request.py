# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DecryptRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_authenticated_data: str=None, additional_authenticated_data_crc32c: str=None, ciphertext: str=None, ciphertext_crc32c: str=None):
        """DecryptRequest - a model defined in OpenAPI

        :param additional_authenticated_data: The additional_authenticated_data of this DecryptRequest.
        :param additional_authenticated_data_crc32c: The additional_authenticated_data_crc32c of this DecryptRequest.
        :param ciphertext: The ciphertext of this DecryptRequest.
        :param ciphertext_crc32c: The ciphertext_crc32c of this DecryptRequest.
        """
        self.openapi_types = {
            'additional_authenticated_data': str,
            'additional_authenticated_data_crc32c': str,
            'ciphertext': str,
            'ciphertext_crc32c': str
        }

        self.attribute_map = {
            'additional_authenticated_data': 'additionalAuthenticatedData',
            'additional_authenticated_data_crc32c': 'additionalAuthenticatedDataCrc32c',
            'ciphertext': 'ciphertext',
            'ciphertext_crc32c': 'ciphertextCrc32c'
        }

        self._additional_authenticated_data = additional_authenticated_data
        self._additional_authenticated_data_crc32c = additional_authenticated_data_crc32c
        self._ciphertext = ciphertext
        self._ciphertext_crc32c = ciphertext_crc32c

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DecryptRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DecryptRequest of this DecryptRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_authenticated_data(self):
        """Gets the additional_authenticated_data of this DecryptRequest.

        Optional. Optional data that must match the data originally supplied in EncryptRequest.additional_authenticated_data.

        :return: The additional_authenticated_data of this DecryptRequest.
        :rtype: str
        """
        return self._additional_authenticated_data

    @additional_authenticated_data.setter
    def additional_authenticated_data(self, additional_authenticated_data):
        """Sets the additional_authenticated_data of this DecryptRequest.

        Optional. Optional data that must match the data originally supplied in EncryptRequest.additional_authenticated_data.

        :param additional_authenticated_data: The additional_authenticated_data of this DecryptRequest.
        :type additional_authenticated_data: str
        """

        self._additional_authenticated_data = additional_authenticated_data

    @property
    def additional_authenticated_data_crc32c(self):
        """Gets the additional_authenticated_data_crc32c of this DecryptRequest.

        Optional. An optional CRC32C checksum of the DecryptRequest.additional_authenticated_data. If specified, KeyManagementService will verify the integrity of the received DecryptRequest.additional_authenticated_data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(DecryptRequest.additional_authenticated_data) is equal to DecryptRequest.additional_authenticated_data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The additional_authenticated_data_crc32c of this DecryptRequest.
        :rtype: str
        """
        return self._additional_authenticated_data_crc32c

    @additional_authenticated_data_crc32c.setter
    def additional_authenticated_data_crc32c(self, additional_authenticated_data_crc32c):
        """Sets the additional_authenticated_data_crc32c of this DecryptRequest.

        Optional. An optional CRC32C checksum of the DecryptRequest.additional_authenticated_data. If specified, KeyManagementService will verify the integrity of the received DecryptRequest.additional_authenticated_data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(DecryptRequest.additional_authenticated_data) is equal to DecryptRequest.additional_authenticated_data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param additional_authenticated_data_crc32c: The additional_authenticated_data_crc32c of this DecryptRequest.
        :type additional_authenticated_data_crc32c: str
        """

        self._additional_authenticated_data_crc32c = additional_authenticated_data_crc32c

    @property
    def ciphertext(self):
        """Gets the ciphertext of this DecryptRequest.

        Required. The encrypted data originally returned in EncryptResponse.ciphertext.

        :return: The ciphertext of this DecryptRequest.
        :rtype: str
        """
        return self._ciphertext

    @ciphertext.setter
    def ciphertext(self, ciphertext):
        """Sets the ciphertext of this DecryptRequest.

        Required. The encrypted data originally returned in EncryptResponse.ciphertext.

        :param ciphertext: The ciphertext of this DecryptRequest.
        :type ciphertext: str
        """

        self._ciphertext = ciphertext

    @property
    def ciphertext_crc32c(self):
        """Gets the ciphertext_crc32c of this DecryptRequest.

        Optional. An optional CRC32C checksum of the DecryptRequest.ciphertext. If specified, KeyManagementService will verify the integrity of the received DecryptRequest.ciphertext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(DecryptRequest.ciphertext) is equal to DecryptRequest.ciphertext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The ciphertext_crc32c of this DecryptRequest.
        :rtype: str
        """
        return self._ciphertext_crc32c

    @ciphertext_crc32c.setter
    def ciphertext_crc32c(self, ciphertext_crc32c):
        """Sets the ciphertext_crc32c of this DecryptRequest.

        Optional. An optional CRC32C checksum of the DecryptRequest.ciphertext. If specified, KeyManagementService will verify the integrity of the received DecryptRequest.ciphertext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(DecryptRequest.ciphertext) is equal to DecryptRequest.ciphertext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param ciphertext_crc32c: The ciphertext_crc32c of this DecryptRequest.
        :type ciphertext_crc32c: str
        """

        self._ciphertext_crc32c = ciphertext_crc32c
