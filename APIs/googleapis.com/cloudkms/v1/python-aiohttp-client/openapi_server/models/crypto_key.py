# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crypto_key_version import CryptoKeyVersion
from openapi_server.models.crypto_key_version_template import CryptoKeyVersionTemplate
from openapi_server import util


class CryptoKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, crypto_key_backend: str=None, destroy_scheduled_duration: str=None, import_only: bool=None, labels: Dict[str, str]=None, name: str=None, next_rotation_time: str=None, primary: CryptoKeyVersion=None, purpose: str=None, rotation_period: str=None, version_template: CryptoKeyVersionTemplate=None):
        """CryptoKey - a model defined in OpenAPI

        :param create_time: The create_time of this CryptoKey.
        :param crypto_key_backend: The crypto_key_backend of this CryptoKey.
        :param destroy_scheduled_duration: The destroy_scheduled_duration of this CryptoKey.
        :param import_only: The import_only of this CryptoKey.
        :param labels: The labels of this CryptoKey.
        :param name: The name of this CryptoKey.
        :param next_rotation_time: The next_rotation_time of this CryptoKey.
        :param primary: The primary of this CryptoKey.
        :param purpose: The purpose of this CryptoKey.
        :param rotation_period: The rotation_period of this CryptoKey.
        :param version_template: The version_template of this CryptoKey.
        """
        self.openapi_types = {
            'create_time': str,
            'crypto_key_backend': str,
            'destroy_scheduled_duration': str,
            'import_only': bool,
            'labels': Dict[str, str],
            'name': str,
            'next_rotation_time': str,
            'primary': CryptoKeyVersion,
            'purpose': str,
            'rotation_period': str,
            'version_template': CryptoKeyVersionTemplate
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'crypto_key_backend': 'cryptoKeyBackend',
            'destroy_scheduled_duration': 'destroyScheduledDuration',
            'import_only': 'importOnly',
            'labels': 'labels',
            'name': 'name',
            'next_rotation_time': 'nextRotationTime',
            'primary': 'primary',
            'purpose': 'purpose',
            'rotation_period': 'rotationPeriod',
            'version_template': 'versionTemplate'
        }

        self._create_time = create_time
        self._crypto_key_backend = crypto_key_backend
        self._destroy_scheduled_duration = destroy_scheduled_duration
        self._import_only = import_only
        self._labels = labels
        self._name = name
        self._next_rotation_time = next_rotation_time
        self._primary = primary
        self._purpose = purpose
        self._rotation_period = rotation_period
        self._version_template = version_template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CryptoKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CryptoKey of this CryptoKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this CryptoKey.

        Output only. The time at which this CryptoKey was created.

        :return: The create_time of this CryptoKey.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CryptoKey.

        Output only. The time at which this CryptoKey was created.

        :param create_time: The create_time of this CryptoKey.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def crypto_key_backend(self):
        """Gets the crypto_key_backend of this CryptoKey.

        Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*/locations/*/ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.

        :return: The crypto_key_backend of this CryptoKey.
        :rtype: str
        """
        return self._crypto_key_backend

    @crypto_key_backend.setter
    def crypto_key_backend(self, crypto_key_backend):
        """Sets the crypto_key_backend of this CryptoKey.

        Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*/locations/*/ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.

        :param crypto_key_backend: The crypto_key_backend of this CryptoKey.
        :type crypto_key_backend: str
        """

        self._crypto_key_backend = crypto_key_backend

    @property
    def destroy_scheduled_duration(self):
        """Gets the destroy_scheduled_duration of this CryptoKey.

        Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.

        :return: The destroy_scheduled_duration of this CryptoKey.
        :rtype: str
        """
        return self._destroy_scheduled_duration

    @destroy_scheduled_duration.setter
    def destroy_scheduled_duration(self, destroy_scheduled_duration):
        """Sets the destroy_scheduled_duration of this CryptoKey.

        Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.

        :param destroy_scheduled_duration: The destroy_scheduled_duration of this CryptoKey.
        :type destroy_scheduled_duration: str
        """

        self._destroy_scheduled_duration = destroy_scheduled_duration

    @property
    def import_only(self):
        """Gets the import_only of this CryptoKey.

        Immutable. Whether this key may contain imported versions only.

        :return: The import_only of this CryptoKey.
        :rtype: bool
        """
        return self._import_only

    @import_only.setter
    def import_only(self, import_only):
        """Sets the import_only of this CryptoKey.

        Immutable. Whether this key may contain imported versions only.

        :param import_only: The import_only of this CryptoKey.
        :type import_only: bool
        """

        self._import_only = import_only

    @property
    def labels(self):
        """Gets the labels of this CryptoKey.

        Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).

        :return: The labels of this CryptoKey.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CryptoKey.

        Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).

        :param labels: The labels of this CryptoKey.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this CryptoKey.

        Output only. The resource name for this CryptoKey in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*`.

        :return: The name of this CryptoKey.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CryptoKey.

        Output only. The resource name for this CryptoKey in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*`.

        :param name: The name of this CryptoKey.
        :type name: str
        """

        self._name = name

    @property
    def next_rotation_time(self):
        """Gets the next_rotation_time of this CryptoKey.

        At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.

        :return: The next_rotation_time of this CryptoKey.
        :rtype: str
        """
        return self._next_rotation_time

    @next_rotation_time.setter
    def next_rotation_time(self, next_rotation_time):
        """Sets the next_rotation_time of this CryptoKey.

        At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.

        :param next_rotation_time: The next_rotation_time of this CryptoKey.
        :type next_rotation_time: str
        """

        self._next_rotation_time = next_rotation_time

    @property
    def primary(self):
        """Gets the primary of this CryptoKey.


        :return: The primary of this CryptoKey.
        :rtype: CryptoKeyVersion
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this CryptoKey.


        :param primary: The primary of this CryptoKey.
        :type primary: CryptoKeyVersion
        """

        self._primary = primary

    @property
    def purpose(self):
        """Gets the purpose of this CryptoKey.

        Immutable. The immutable purpose of this CryptoKey.

        :return: The purpose of this CryptoKey.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this CryptoKey.

        Immutable. The immutable purpose of this CryptoKey.

        :param purpose: The purpose of this CryptoKey.
        :type purpose: str
        """
        allowed_values = ["CRYPTO_KEY_PURPOSE_UNSPECIFIED", "ENCRYPT_DECRYPT", "ASYMMETRIC_SIGN", "ASYMMETRIC_DECRYPT", "RAW_ENCRYPT_DECRYPT", "MAC"]  # noqa: E501
        if purpose not in allowed_values:
            raise ValueError(
                "Invalid value for `purpose` ({0}), must be one of {1}"
                .format(purpose, allowed_values)
            )

        self._purpose = purpose

    @property
    def rotation_period(self):
        """Gets the rotation_period of this CryptoKey.

        next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.

        :return: The rotation_period of this CryptoKey.
        :rtype: str
        """
        return self._rotation_period

    @rotation_period.setter
    def rotation_period(self, rotation_period):
        """Sets the rotation_period of this CryptoKey.

        next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.

        :param rotation_period: The rotation_period of this CryptoKey.
        :type rotation_period: str
        """

        self._rotation_period = rotation_period

    @property
    def version_template(self):
        """Gets the version_template of this CryptoKey.


        :return: The version_template of this CryptoKey.
        :rtype: CryptoKeyVersionTemplate
        """
        return self._version_template

    @version_template.setter
    def version_template(self, version_template):
        """Sets the version_template of this CryptoKey.


        :param version_template: The version_template of this CryptoKey.
        :type version_template: CryptoKeyVersionTemplate
        """

        self._version_template = version_template
