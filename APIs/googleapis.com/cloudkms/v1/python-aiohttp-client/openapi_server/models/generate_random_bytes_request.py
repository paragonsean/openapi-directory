# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenerateRandomBytesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, length_bytes: int=None, protection_level: str=None):
        """GenerateRandomBytesRequest - a model defined in OpenAPI

        :param length_bytes: The length_bytes of this GenerateRandomBytesRequest.
        :param protection_level: The protection_level of this GenerateRandomBytesRequest.
        """
        self.openapi_types = {
            'length_bytes': int,
            'protection_level': str
        }

        self.attribute_map = {
            'length_bytes': 'lengthBytes',
            'protection_level': 'protectionLevel'
        }

        self._length_bytes = length_bytes
        self._protection_level = protection_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateRandomBytesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenerateRandomBytesRequest of this GenerateRandomBytesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def length_bytes(self):
        """Gets the length_bytes of this GenerateRandomBytesRequest.

        The length in bytes of the amount of randomness to retrieve. Minimum 8 bytes, maximum 1024 bytes.

        :return: The length_bytes of this GenerateRandomBytesRequest.
        :rtype: int
        """
        return self._length_bytes

    @length_bytes.setter
    def length_bytes(self, length_bytes):
        """Sets the length_bytes of this GenerateRandomBytesRequest.

        The length in bytes of the amount of randomness to retrieve. Minimum 8 bytes, maximum 1024 bytes.

        :param length_bytes: The length_bytes of this GenerateRandomBytesRequest.
        :type length_bytes: int
        """

        self._length_bytes = length_bytes

    @property
    def protection_level(self):
        """Gets the protection_level of this GenerateRandomBytesRequest.

        The ProtectionLevel to use when generating the random data. Currently, only HSM protection level is supported.

        :return: The protection_level of this GenerateRandomBytesRequest.
        :rtype: str
        """
        return self._protection_level

    @protection_level.setter
    def protection_level(self, protection_level):
        """Sets the protection_level of this GenerateRandomBytesRequest.

        The ProtectionLevel to use when generating the random data. Currently, only HSM protection level is supported.

        :param protection_level: The protection_level of this GenerateRandomBytesRequest.
        :type protection_level: str
        """
        allowed_values = ["PROTECTION_LEVEL_UNSPECIFIED", "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC"]  # noqa: E501
        if protection_level not in allowed_values:
            raise ValueError(
                "Invalid value for `protection_level` ({0}), must be one of {1}"
                .format(protection_level, allowed_values)
            )

        self._protection_level = protection_level
