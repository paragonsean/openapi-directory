# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate import Certificate
from openapi_server import util


class ServiceResolver(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_filter: str=None, hostname: str=None, server_certificates: List[Certificate]=None, service_directory_service: str=None):
        """ServiceResolver - a model defined in OpenAPI

        :param endpoint_filter: The endpoint_filter of this ServiceResolver.
        :param hostname: The hostname of this ServiceResolver.
        :param server_certificates: The server_certificates of this ServiceResolver.
        :param service_directory_service: The service_directory_service of this ServiceResolver.
        """
        self.openapi_types = {
            'endpoint_filter': str,
            'hostname': str,
            'server_certificates': List[Certificate],
            'service_directory_service': str
        }

        self.attribute_map = {
            'endpoint_filter': 'endpointFilter',
            'hostname': 'hostname',
            'server_certificates': 'serverCertificates',
            'service_directory_service': 'serviceDirectoryService'
        }

        self._endpoint_filter = endpoint_filter
        self._hostname = hostname
        self._server_certificates = server_certificates
        self._service_directory_service = service_directory_service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceResolver':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceResolver of this ServiceResolver.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_filter(self):
        """Gets the endpoint_filter of this ServiceResolver.

        Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.

        :return: The endpoint_filter of this ServiceResolver.
        :rtype: str
        """
        return self._endpoint_filter

    @endpoint_filter.setter
    def endpoint_filter(self, endpoint_filter):
        """Sets the endpoint_filter of this ServiceResolver.

        Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.

        :param endpoint_filter: The endpoint_filter of this ServiceResolver.
        :type endpoint_filter: str
        """

        self._endpoint_filter = endpoint_filter

    @property
    def hostname(self):
        """Gets the hostname of this ServiceResolver.

        Required. The hostname of the EKM replica used at TLS and HTTP layers.

        :return: The hostname of this ServiceResolver.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ServiceResolver.

        Required. The hostname of the EKM replica used at TLS and HTTP layers.

        :param hostname: The hostname of this ServiceResolver.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def server_certificates(self):
        """Gets the server_certificates of this ServiceResolver.

        Required. A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.

        :return: The server_certificates of this ServiceResolver.
        :rtype: List[Certificate]
        """
        return self._server_certificates

    @server_certificates.setter
    def server_certificates(self, server_certificates):
        """Sets the server_certificates of this ServiceResolver.

        Required. A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.

        :param server_certificates: The server_certificates of this ServiceResolver.
        :type server_certificates: List[Certificate]
        """

        self._server_certificates = server_certificates

    @property
    def service_directory_service(self):
        """Gets the service_directory_service of this ServiceResolver.

        Required. The resource name of the Service Directory service pointing to an EKM replica, in the format `projects/*/locations/*/namespaces/*/services/*`.

        :return: The service_directory_service of this ServiceResolver.
        :rtype: str
        """
        return self._service_directory_service

    @service_directory_service.setter
    def service_directory_service(self, service_directory_service):
        """Sets the service_directory_service of this ServiceResolver.

        Required. The resource name of the Service Directory service pointing to an EKM replica, in the format `projects/*/locations/*/namespaces/*/services/*`.

        :param service_directory_service: The service_directory_service of this ServiceResolver.
        :type service_directory_service: str
        """

        self._service_directory_service = service_directory_service
