# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_operation_attestation import KeyOperationAttestation
from openapi_server.models.wrapping_public_key import WrappingPublicKey
from openapi_server import util


class ImportJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attestation: KeyOperationAttestation=None, create_time: str=None, expire_event_time: str=None, expire_time: str=None, generate_time: str=None, import_method: str=None, name: str=None, protection_level: str=None, public_key: WrappingPublicKey=None, state: str=None):
        """ImportJob - a model defined in OpenAPI

        :param attestation: The attestation of this ImportJob.
        :param create_time: The create_time of this ImportJob.
        :param expire_event_time: The expire_event_time of this ImportJob.
        :param expire_time: The expire_time of this ImportJob.
        :param generate_time: The generate_time of this ImportJob.
        :param import_method: The import_method of this ImportJob.
        :param name: The name of this ImportJob.
        :param protection_level: The protection_level of this ImportJob.
        :param public_key: The public_key of this ImportJob.
        :param state: The state of this ImportJob.
        """
        self.openapi_types = {
            'attestation': KeyOperationAttestation,
            'create_time': str,
            'expire_event_time': str,
            'expire_time': str,
            'generate_time': str,
            'import_method': str,
            'name': str,
            'protection_level': str,
            'public_key': WrappingPublicKey,
            'state': str
        }

        self.attribute_map = {
            'attestation': 'attestation',
            'create_time': 'createTime',
            'expire_event_time': 'expireEventTime',
            'expire_time': 'expireTime',
            'generate_time': 'generateTime',
            'import_method': 'importMethod',
            'name': 'name',
            'protection_level': 'protectionLevel',
            'public_key': 'publicKey',
            'state': 'state'
        }

        self._attestation = attestation
        self._create_time = create_time
        self._expire_event_time = expire_event_time
        self._expire_time = expire_time
        self._generate_time = generate_time
        self._import_method = import_method
        self._name = name
        self._protection_level = protection_level
        self._public_key = public_key
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportJob of this ImportJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attestation(self):
        """Gets the attestation of this ImportJob.


        :return: The attestation of this ImportJob.
        :rtype: KeyOperationAttestation
        """
        return self._attestation

    @attestation.setter
    def attestation(self, attestation):
        """Sets the attestation of this ImportJob.


        :param attestation: The attestation of this ImportJob.
        :type attestation: KeyOperationAttestation
        """

        self._attestation = attestation

    @property
    def create_time(self):
        """Gets the create_time of this ImportJob.

        Output only. The time at which this ImportJob was created.

        :return: The create_time of this ImportJob.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ImportJob.

        Output only. The time at which this ImportJob was created.

        :param create_time: The create_time of this ImportJob.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def expire_event_time(self):
        """Gets the expire_event_time of this ImportJob.

        Output only. The time this ImportJob expired. Only present if state is EXPIRED.

        :return: The expire_event_time of this ImportJob.
        :rtype: str
        """
        return self._expire_event_time

    @expire_event_time.setter
    def expire_event_time(self, expire_event_time):
        """Sets the expire_event_time of this ImportJob.

        Output only. The time this ImportJob expired. Only present if state is EXPIRED.

        :param expire_event_time: The expire_event_time of this ImportJob.
        :type expire_event_time: str
        """

        self._expire_event_time = expire_event_time

    @property
    def expire_time(self):
        """Gets the expire_time of this ImportJob.

        Output only. The time at which this ImportJob is scheduled for expiration and can no longer be used to import key material.

        :return: The expire_time of this ImportJob.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this ImportJob.

        Output only. The time at which this ImportJob is scheduled for expiration and can no longer be used to import key material.

        :param expire_time: The expire_time of this ImportJob.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def generate_time(self):
        """Gets the generate_time of this ImportJob.

        Output only. The time this ImportJob's key material was generated.

        :return: The generate_time of this ImportJob.
        :rtype: str
        """
        return self._generate_time

    @generate_time.setter
    def generate_time(self, generate_time):
        """Sets the generate_time of this ImportJob.

        Output only. The time this ImportJob's key material was generated.

        :param generate_time: The generate_time of this ImportJob.
        :type generate_time: str
        """

        self._generate_time = generate_time

    @property
    def import_method(self):
        """Gets the import_method of this ImportJob.

        Required. Immutable. The wrapping method to be used for incoming key material.

        :return: The import_method of this ImportJob.
        :rtype: str
        """
        return self._import_method

    @import_method.setter
    def import_method(self, import_method):
        """Sets the import_method of this ImportJob.

        Required. Immutable. The wrapping method to be used for incoming key material.

        :param import_method: The import_method of this ImportJob.
        :type import_method: str
        """
        allowed_values = ["IMPORT_METHOD_UNSPECIFIED", "RSA_OAEP_3072_SHA1_AES_256", "RSA_OAEP_4096_SHA1_AES_256", "RSA_OAEP_3072_SHA256_AES_256", "RSA_OAEP_4096_SHA256_AES_256", "RSA_OAEP_3072_SHA256", "RSA_OAEP_4096_SHA256"]  # noqa: E501
        if import_method not in allowed_values:
            raise ValueError(
                "Invalid value for `import_method` ({0}), must be one of {1}"
                .format(import_method, allowed_values)
            )

        self._import_method = import_method

    @property
    def name(self):
        """Gets the name of this ImportJob.

        Output only. The resource name for this ImportJob in the format `projects/*/locations/*/keyRings/*/importJobs/*`.

        :return: The name of this ImportJob.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportJob.

        Output only. The resource name for this ImportJob in the format `projects/*/locations/*/keyRings/*/importJobs/*`.

        :param name: The name of this ImportJob.
        :type name: str
        """

        self._name = name

    @property
    def protection_level(self):
        """Gets the protection_level of this ImportJob.

        Required. Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.

        :return: The protection_level of this ImportJob.
        :rtype: str
        """
        return self._protection_level

    @protection_level.setter
    def protection_level(self, protection_level):
        """Sets the protection_level of this ImportJob.

        Required. Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.

        :param protection_level: The protection_level of this ImportJob.
        :type protection_level: str
        """
        allowed_values = ["PROTECTION_LEVEL_UNSPECIFIED", "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC"]  # noqa: E501
        if protection_level not in allowed_values:
            raise ValueError(
                "Invalid value for `protection_level` ({0}), must be one of {1}"
                .format(protection_level, allowed_values)
            )

        self._protection_level = protection_level

    @property
    def public_key(self):
        """Gets the public_key of this ImportJob.


        :return: The public_key of this ImportJob.
        :rtype: WrappingPublicKey
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this ImportJob.


        :param public_key: The public_key of this ImportJob.
        :type public_key: WrappingPublicKey
        """

        self._public_key = public_key

    @property
    def state(self):
        """Gets the state of this ImportJob.

        Output only. The current state of the ImportJob, indicating if it can be used.

        :return: The state of this ImportJob.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ImportJob.

        Output only. The current state of the ImportJob, indicating if it can be used.

        :param state: The state of this ImportJob.
        :type state: str
        """
        allowed_values = ["IMPORT_JOB_STATE_UNSPECIFIED", "PENDING_GENERATION", "ACTIVE", "EXPIRED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
