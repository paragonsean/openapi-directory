# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_resolver import ServiceResolver
from openapi_server import util


class EkmConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, crypto_space_path: str=None, etag: str=None, key_management_mode: str=None, name: str=None, service_resolvers: List[ServiceResolver]=None):
        """EkmConnection - a model defined in OpenAPI

        :param create_time: The create_time of this EkmConnection.
        :param crypto_space_path: The crypto_space_path of this EkmConnection.
        :param etag: The etag of this EkmConnection.
        :param key_management_mode: The key_management_mode of this EkmConnection.
        :param name: The name of this EkmConnection.
        :param service_resolvers: The service_resolvers of this EkmConnection.
        """
        self.openapi_types = {
            'create_time': str,
            'crypto_space_path': str,
            'etag': str,
            'key_management_mode': str,
            'name': str,
            'service_resolvers': List[ServiceResolver]
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'crypto_space_path': 'cryptoSpacePath',
            'etag': 'etag',
            'key_management_mode': 'keyManagementMode',
            'name': 'name',
            'service_resolvers': 'serviceResolvers'
        }

        self._create_time = create_time
        self._crypto_space_path = crypto_space_path
        self._etag = etag
        self._key_management_mode = key_management_mode
        self._name = name
        self._service_resolvers = service_resolvers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EkmConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EkmConnection of this EkmConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this EkmConnection.

        Output only. The time at which the EkmConnection was created.

        :return: The create_time of this EkmConnection.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this EkmConnection.

        Output only. The time at which the EkmConnection was created.

        :param create_time: The create_time of this EkmConnection.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def crypto_space_path(self):
        """Gets the crypto_space_path of this EkmConnection.

        Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.

        :return: The crypto_space_path of this EkmConnection.
        :rtype: str
        """
        return self._crypto_space_path

    @crypto_space_path.setter
    def crypto_space_path(self, crypto_space_path):
        """Sets the crypto_space_path of this EkmConnection.

        Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.

        :param crypto_space_path: The crypto_space_path of this EkmConnection.
        :type crypto_space_path: str
        """

        self._crypto_space_path = crypto_space_path

    @property
    def etag(self):
        """Gets the etag of this EkmConnection.

        Optional. Etag of the currently stored EkmConnection.

        :return: The etag of this EkmConnection.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EkmConnection.

        Optional. Etag of the currently stored EkmConnection.

        :param etag: The etag of this EkmConnection.
        :type etag: str
        """

        self._etag = etag

    @property
    def key_management_mode(self):
        """Gets the key_management_mode of this EkmConnection.

        Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.

        :return: The key_management_mode of this EkmConnection.
        :rtype: str
        """
        return self._key_management_mode

    @key_management_mode.setter
    def key_management_mode(self, key_management_mode):
        """Sets the key_management_mode of this EkmConnection.

        Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.

        :param key_management_mode: The key_management_mode of this EkmConnection.
        :type key_management_mode: str
        """
        allowed_values = ["KEY_MANAGEMENT_MODE_UNSPECIFIED", "MANUAL", "CLOUD_KMS"]  # noqa: E501
        if key_management_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `key_management_mode` ({0}), must be one of {1}"
                .format(key_management_mode, allowed_values)
            )

        self._key_management_mode = key_management_mode

    @property
    def name(self):
        """Gets the name of this EkmConnection.

        Output only. The resource name for the EkmConnection in the format `projects/*/locations/*/ekmConnections/*`.

        :return: The name of this EkmConnection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EkmConnection.

        Output only. The resource name for the EkmConnection in the format `projects/*/locations/*/ekmConnections/*`.

        :param name: The name of this EkmConnection.
        :type name: str
        """

        self._name = name

    @property
    def service_resolvers(self):
        """Gets the service_resolvers of this EkmConnection.

        A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.

        :return: The service_resolvers of this EkmConnection.
        :rtype: List[ServiceResolver]
        """
        return self._service_resolvers

    @service_resolvers.setter
    def service_resolvers(self, service_resolvers):
        """Sets the service_resolvers of this EkmConnection.

        A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.

        :param service_resolvers: The service_resolvers of this EkmConnection.
        :type service_resolvers: List[ServiceResolver]
        """

        self._service_resolvers = service_resolvers
