# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DecryptResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, plaintext: str=None, plaintext_crc32c: str=None, protection_level: str=None, used_primary: bool=None):
        """DecryptResponse - a model defined in OpenAPI

        :param plaintext: The plaintext of this DecryptResponse.
        :param plaintext_crc32c: The plaintext_crc32c of this DecryptResponse.
        :param protection_level: The protection_level of this DecryptResponse.
        :param used_primary: The used_primary of this DecryptResponse.
        """
        self.openapi_types = {
            'plaintext': str,
            'plaintext_crc32c': str,
            'protection_level': str,
            'used_primary': bool
        }

        self.attribute_map = {
            'plaintext': 'plaintext',
            'plaintext_crc32c': 'plaintextCrc32c',
            'protection_level': 'protectionLevel',
            'used_primary': 'usedPrimary'
        }

        self._plaintext = plaintext
        self._plaintext_crc32c = plaintext_crc32c
        self._protection_level = protection_level
        self._used_primary = used_primary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DecryptResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DecryptResponse of this DecryptResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def plaintext(self):
        """Gets the plaintext of this DecryptResponse.

        The decrypted data originally supplied in EncryptRequest.plaintext.

        :return: The plaintext of this DecryptResponse.
        :rtype: str
        """
        return self._plaintext

    @plaintext.setter
    def plaintext(self, plaintext):
        """Sets the plaintext of this DecryptResponse.

        The decrypted data originally supplied in EncryptRequest.plaintext.

        :param plaintext: The plaintext of this DecryptResponse.
        :type plaintext: str
        """

        self._plaintext = plaintext

    @property
    def plaintext_crc32c(self):
        """Gets the plaintext_crc32c of this DecryptResponse.

        Integrity verification field. A CRC32C checksum of the returned DecryptResponse.plaintext. An integrity check of DecryptResponse.plaintext can be performed by computing the CRC32C checksum of DecryptResponse.plaintext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: receiving this response message indicates that KeyManagementService is able to successfully decrypt the ciphertext. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The plaintext_crc32c of this DecryptResponse.
        :rtype: str
        """
        return self._plaintext_crc32c

    @plaintext_crc32c.setter
    def plaintext_crc32c(self, plaintext_crc32c):
        """Sets the plaintext_crc32c of this DecryptResponse.

        Integrity verification field. A CRC32C checksum of the returned DecryptResponse.plaintext. An integrity check of DecryptResponse.plaintext can be performed by computing the CRC32C checksum of DecryptResponse.plaintext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: receiving this response message indicates that KeyManagementService is able to successfully decrypt the ciphertext. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param plaintext_crc32c: The plaintext_crc32c of this DecryptResponse.
        :type plaintext_crc32c: str
        """

        self._plaintext_crc32c = plaintext_crc32c

    @property
    def protection_level(self):
        """Gets the protection_level of this DecryptResponse.

        The ProtectionLevel of the CryptoKeyVersion used in decryption.

        :return: The protection_level of this DecryptResponse.
        :rtype: str
        """
        return self._protection_level

    @protection_level.setter
    def protection_level(self, protection_level):
        """Sets the protection_level of this DecryptResponse.

        The ProtectionLevel of the CryptoKeyVersion used in decryption.

        :param protection_level: The protection_level of this DecryptResponse.
        :type protection_level: str
        """
        allowed_values = ["PROTECTION_LEVEL_UNSPECIFIED", "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC"]  # noqa: E501
        if protection_level not in allowed_values:
            raise ValueError(
                "Invalid value for `protection_level` ({0}), must be one of {1}"
                .format(protection_level, allowed_values)
            )

        self._protection_level = protection_level

    @property
    def used_primary(self):
        """Gets the used_primary of this DecryptResponse.

        Whether the Decryption was performed using the primary key version.

        :return: The used_primary of this DecryptResponse.
        :rtype: bool
        """
        return self._used_primary

    @used_primary.setter
    def used_primary(self, used_primary):
        """Sets the used_primary of this DecryptResponse.

        Whether the Decryption was performed using the primary key version.

        :param used_primary: The used_primary of this DecryptResponse.
        :type used_primary: bool
        """

        self._used_primary = used_primary
