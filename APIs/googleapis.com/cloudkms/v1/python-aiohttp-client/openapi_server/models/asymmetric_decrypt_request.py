# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AsymmetricDecryptRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ciphertext: str=None, ciphertext_crc32c: str=None):
        """AsymmetricDecryptRequest - a model defined in OpenAPI

        :param ciphertext: The ciphertext of this AsymmetricDecryptRequest.
        :param ciphertext_crc32c: The ciphertext_crc32c of this AsymmetricDecryptRequest.
        """
        self.openapi_types = {
            'ciphertext': str,
            'ciphertext_crc32c': str
        }

        self.attribute_map = {
            'ciphertext': 'ciphertext',
            'ciphertext_crc32c': 'ciphertextCrc32c'
        }

        self._ciphertext = ciphertext
        self._ciphertext_crc32c = ciphertext_crc32c

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AsymmetricDecryptRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AsymmetricDecryptRequest of this AsymmetricDecryptRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ciphertext(self):
        """Gets the ciphertext of this AsymmetricDecryptRequest.

        Required. The data encrypted with the named CryptoKeyVersion's public key using OAEP.

        :return: The ciphertext of this AsymmetricDecryptRequest.
        :rtype: str
        """
        return self._ciphertext

    @ciphertext.setter
    def ciphertext(self, ciphertext):
        """Sets the ciphertext of this AsymmetricDecryptRequest.

        Required. The data encrypted with the named CryptoKeyVersion's public key using OAEP.

        :param ciphertext: The ciphertext of this AsymmetricDecryptRequest.
        :type ciphertext: str
        """

        self._ciphertext = ciphertext

    @property
    def ciphertext_crc32c(self):
        """Gets the ciphertext_crc32c of this AsymmetricDecryptRequest.

        Optional. An optional CRC32C checksum of the AsymmetricDecryptRequest.ciphertext. If specified, KeyManagementService will verify the integrity of the received AsymmetricDecryptRequest.ciphertext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(AsymmetricDecryptRequest.ciphertext) is equal to AsymmetricDecryptRequest.ciphertext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The ciphertext_crc32c of this AsymmetricDecryptRequest.
        :rtype: str
        """
        return self._ciphertext_crc32c

    @ciphertext_crc32c.setter
    def ciphertext_crc32c(self, ciphertext_crc32c):
        """Sets the ciphertext_crc32c of this AsymmetricDecryptRequest.

        Optional. An optional CRC32C checksum of the AsymmetricDecryptRequest.ciphertext. If specified, KeyManagementService will verify the integrity of the received AsymmetricDecryptRequest.ciphertext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(AsymmetricDecryptRequest.ciphertext) is equal to AsymmetricDecryptRequest.ciphertext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param ciphertext_crc32c: The ciphertext_crc32c of this AsymmetricDecryptRequest.
        :type ciphertext_crc32c: str
        """

        self._ciphertext_crc32c = ciphertext_crc32c
