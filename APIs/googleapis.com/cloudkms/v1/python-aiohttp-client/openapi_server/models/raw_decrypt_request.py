# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RawDecryptRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_authenticated_data: str=None, additional_authenticated_data_crc32c: str=None, ciphertext: str=None, ciphertext_crc32c: str=None, initialization_vector: str=None, initialization_vector_crc32c: str=None, tag_length: int=None):
        """RawDecryptRequest - a model defined in OpenAPI

        :param additional_authenticated_data: The additional_authenticated_data of this RawDecryptRequest.
        :param additional_authenticated_data_crc32c: The additional_authenticated_data_crc32c of this RawDecryptRequest.
        :param ciphertext: The ciphertext of this RawDecryptRequest.
        :param ciphertext_crc32c: The ciphertext_crc32c of this RawDecryptRequest.
        :param initialization_vector: The initialization_vector of this RawDecryptRequest.
        :param initialization_vector_crc32c: The initialization_vector_crc32c of this RawDecryptRequest.
        :param tag_length: The tag_length of this RawDecryptRequest.
        """
        self.openapi_types = {
            'additional_authenticated_data': str,
            'additional_authenticated_data_crc32c': str,
            'ciphertext': str,
            'ciphertext_crc32c': str,
            'initialization_vector': str,
            'initialization_vector_crc32c': str,
            'tag_length': int
        }

        self.attribute_map = {
            'additional_authenticated_data': 'additionalAuthenticatedData',
            'additional_authenticated_data_crc32c': 'additionalAuthenticatedDataCrc32c',
            'ciphertext': 'ciphertext',
            'ciphertext_crc32c': 'ciphertextCrc32c',
            'initialization_vector': 'initializationVector',
            'initialization_vector_crc32c': 'initializationVectorCrc32c',
            'tag_length': 'tagLength'
        }

        self._additional_authenticated_data = additional_authenticated_data
        self._additional_authenticated_data_crc32c = additional_authenticated_data_crc32c
        self._ciphertext = ciphertext
        self._ciphertext_crc32c = ciphertext_crc32c
        self._initialization_vector = initialization_vector
        self._initialization_vector_crc32c = initialization_vector_crc32c
        self._tag_length = tag_length

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RawDecryptRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RawDecryptRequest of this RawDecryptRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_authenticated_data(self):
        """Gets the additional_authenticated_data of this RawDecryptRequest.

        Optional. Optional data that must match the data originally supplied in RawEncryptRequest.additional_authenticated_data.

        :return: The additional_authenticated_data of this RawDecryptRequest.
        :rtype: str
        """
        return self._additional_authenticated_data

    @additional_authenticated_data.setter
    def additional_authenticated_data(self, additional_authenticated_data):
        """Sets the additional_authenticated_data of this RawDecryptRequest.

        Optional. Optional data that must match the data originally supplied in RawEncryptRequest.additional_authenticated_data.

        :param additional_authenticated_data: The additional_authenticated_data of this RawDecryptRequest.
        :type additional_authenticated_data: str
        """

        self._additional_authenticated_data = additional_authenticated_data

    @property
    def additional_authenticated_data_crc32c(self):
        """Gets the additional_authenticated_data_crc32c of this RawDecryptRequest.

        Optional. An optional CRC32C checksum of the RawDecryptRequest.additional_authenticated_data. If specified, KeyManagementService will verify the integrity of the received additional_authenticated_data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(additional_authenticated_data) is equal to additional_authenticated_data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The additional_authenticated_data_crc32c of this RawDecryptRequest.
        :rtype: str
        """
        return self._additional_authenticated_data_crc32c

    @additional_authenticated_data_crc32c.setter
    def additional_authenticated_data_crc32c(self, additional_authenticated_data_crc32c):
        """Sets the additional_authenticated_data_crc32c of this RawDecryptRequest.

        Optional. An optional CRC32C checksum of the RawDecryptRequest.additional_authenticated_data. If specified, KeyManagementService will verify the integrity of the received additional_authenticated_data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(additional_authenticated_data) is equal to additional_authenticated_data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param additional_authenticated_data_crc32c: The additional_authenticated_data_crc32c of this RawDecryptRequest.
        :type additional_authenticated_data_crc32c: str
        """

        self._additional_authenticated_data_crc32c = additional_authenticated_data_crc32c

    @property
    def ciphertext(self):
        """Gets the ciphertext of this RawDecryptRequest.

        Required. The encrypted data originally returned in RawEncryptResponse.ciphertext.

        :return: The ciphertext of this RawDecryptRequest.
        :rtype: str
        """
        return self._ciphertext

    @ciphertext.setter
    def ciphertext(self, ciphertext):
        """Sets the ciphertext of this RawDecryptRequest.

        Required. The encrypted data originally returned in RawEncryptResponse.ciphertext.

        :param ciphertext: The ciphertext of this RawDecryptRequest.
        :type ciphertext: str
        """

        self._ciphertext = ciphertext

    @property
    def ciphertext_crc32c(self):
        """Gets the ciphertext_crc32c of this RawDecryptRequest.

        Optional. An optional CRC32C checksum of the RawDecryptRequest.ciphertext. If specified, KeyManagementService will verify the integrity of the received ciphertext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(ciphertext) is equal to ciphertext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The ciphertext_crc32c of this RawDecryptRequest.
        :rtype: str
        """
        return self._ciphertext_crc32c

    @ciphertext_crc32c.setter
    def ciphertext_crc32c(self, ciphertext_crc32c):
        """Sets the ciphertext_crc32c of this RawDecryptRequest.

        Optional. An optional CRC32C checksum of the RawDecryptRequest.ciphertext. If specified, KeyManagementService will verify the integrity of the received ciphertext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(ciphertext) is equal to ciphertext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param ciphertext_crc32c: The ciphertext_crc32c of this RawDecryptRequest.
        :type ciphertext_crc32c: str
        """

        self._ciphertext_crc32c = ciphertext_crc32c

    @property
    def initialization_vector(self):
        """Gets the initialization_vector of this RawDecryptRequest.

        Required. The initialization vector (IV) used during encryption, which must match the data originally provided in RawEncryptResponse.initialization_vector.

        :return: The initialization_vector of this RawDecryptRequest.
        :rtype: str
        """
        return self._initialization_vector

    @initialization_vector.setter
    def initialization_vector(self, initialization_vector):
        """Sets the initialization_vector of this RawDecryptRequest.

        Required. The initialization vector (IV) used during encryption, which must match the data originally provided in RawEncryptResponse.initialization_vector.

        :param initialization_vector: The initialization_vector of this RawDecryptRequest.
        :type initialization_vector: str
        """

        self._initialization_vector = initialization_vector

    @property
    def initialization_vector_crc32c(self):
        """Gets the initialization_vector_crc32c of this RawDecryptRequest.

        Optional. An optional CRC32C checksum of the RawDecryptRequest.initialization_vector. If specified, KeyManagementService will verify the integrity of the received initialization_vector using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(initialization_vector) is equal to initialization_vector_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The initialization_vector_crc32c of this RawDecryptRequest.
        :rtype: str
        """
        return self._initialization_vector_crc32c

    @initialization_vector_crc32c.setter
    def initialization_vector_crc32c(self, initialization_vector_crc32c):
        """Sets the initialization_vector_crc32c of this RawDecryptRequest.

        Optional. An optional CRC32C checksum of the RawDecryptRequest.initialization_vector. If specified, KeyManagementService will verify the integrity of the received initialization_vector using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(initialization_vector) is equal to initialization_vector_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param initialization_vector_crc32c: The initialization_vector_crc32c of this RawDecryptRequest.
        :type initialization_vector_crc32c: str
        """

        self._initialization_vector_crc32c = initialization_vector_crc32c

    @property
    def tag_length(self):
        """Gets the tag_length of this RawDecryptRequest.

        The length of the authentication tag that is appended to the end of the ciphertext. If unspecified (0), the default value for the key's algorithm will be used (for AES-GCM, the default value is 16).

        :return: The tag_length of this RawDecryptRequest.
        :rtype: int
        """
        return self._tag_length

    @tag_length.setter
    def tag_length(self, tag_length):
        """Sets the tag_length of this RawDecryptRequest.

        The length of the authentication tag that is appended to the end of the ciphertext. If unspecified (0), the default value for the key's algorithm will be used (for AES-GCM, the default value is 16).

        :param tag_length: The tag_length of this RawDecryptRequest.
        :type tag_length: int
        """

        self._tag_length = tag_length
