# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RawDecryptResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, plaintext: str=None, plaintext_crc32c: str=None, protection_level: str=None, verified_additional_authenticated_data_crc32c: bool=None, verified_ciphertext_crc32c: bool=None, verified_initialization_vector_crc32c: bool=None):
        """RawDecryptResponse - a model defined in OpenAPI

        :param plaintext: The plaintext of this RawDecryptResponse.
        :param plaintext_crc32c: The plaintext_crc32c of this RawDecryptResponse.
        :param protection_level: The protection_level of this RawDecryptResponse.
        :param verified_additional_authenticated_data_crc32c: The verified_additional_authenticated_data_crc32c of this RawDecryptResponse.
        :param verified_ciphertext_crc32c: The verified_ciphertext_crc32c of this RawDecryptResponse.
        :param verified_initialization_vector_crc32c: The verified_initialization_vector_crc32c of this RawDecryptResponse.
        """
        self.openapi_types = {
            'plaintext': str,
            'plaintext_crc32c': str,
            'protection_level': str,
            'verified_additional_authenticated_data_crc32c': bool,
            'verified_ciphertext_crc32c': bool,
            'verified_initialization_vector_crc32c': bool
        }

        self.attribute_map = {
            'plaintext': 'plaintext',
            'plaintext_crc32c': 'plaintextCrc32c',
            'protection_level': 'protectionLevel',
            'verified_additional_authenticated_data_crc32c': 'verifiedAdditionalAuthenticatedDataCrc32c',
            'verified_ciphertext_crc32c': 'verifiedCiphertextCrc32c',
            'verified_initialization_vector_crc32c': 'verifiedInitializationVectorCrc32c'
        }

        self._plaintext = plaintext
        self._plaintext_crc32c = plaintext_crc32c
        self._protection_level = protection_level
        self._verified_additional_authenticated_data_crc32c = verified_additional_authenticated_data_crc32c
        self._verified_ciphertext_crc32c = verified_ciphertext_crc32c
        self._verified_initialization_vector_crc32c = verified_initialization_vector_crc32c

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RawDecryptResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RawDecryptResponse of this RawDecryptResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def plaintext(self):
        """Gets the plaintext of this RawDecryptResponse.

        The decrypted data.

        :return: The plaintext of this RawDecryptResponse.
        :rtype: str
        """
        return self._plaintext

    @plaintext.setter
    def plaintext(self, plaintext):
        """Sets the plaintext of this RawDecryptResponse.

        The decrypted data.

        :param plaintext: The plaintext of this RawDecryptResponse.
        :type plaintext: str
        """

        self._plaintext = plaintext

    @property
    def plaintext_crc32c(self):
        """Gets the plaintext_crc32c of this RawDecryptResponse.

        Integrity verification field. A CRC32C checksum of the returned RawDecryptResponse.plaintext. An integrity check of plaintext can be performed by computing the CRC32C checksum of plaintext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: receiving this response message indicates that KeyManagementService is able to successfully decrypt the ciphertext. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The plaintext_crc32c of this RawDecryptResponse.
        :rtype: str
        """
        return self._plaintext_crc32c

    @plaintext_crc32c.setter
    def plaintext_crc32c(self, plaintext_crc32c):
        """Sets the plaintext_crc32c of this RawDecryptResponse.

        Integrity verification field. A CRC32C checksum of the returned RawDecryptResponse.plaintext. An integrity check of plaintext can be performed by computing the CRC32C checksum of plaintext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: receiving this response message indicates that KeyManagementService is able to successfully decrypt the ciphertext. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param plaintext_crc32c: The plaintext_crc32c of this RawDecryptResponse.
        :type plaintext_crc32c: str
        """

        self._plaintext_crc32c = plaintext_crc32c

    @property
    def protection_level(self):
        """Gets the protection_level of this RawDecryptResponse.

        The ProtectionLevel of the CryptoKeyVersion used in decryption.

        :return: The protection_level of this RawDecryptResponse.
        :rtype: str
        """
        return self._protection_level

    @protection_level.setter
    def protection_level(self, protection_level):
        """Sets the protection_level of this RawDecryptResponse.

        The ProtectionLevel of the CryptoKeyVersion used in decryption.

        :param protection_level: The protection_level of this RawDecryptResponse.
        :type protection_level: str
        """
        allowed_values = ["PROTECTION_LEVEL_UNSPECIFIED", "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC"]  # noqa: E501
        if protection_level not in allowed_values:
            raise ValueError(
                "Invalid value for `protection_level` ({0}), must be one of {1}"
                .format(protection_level, allowed_values)
            )

        self._protection_level = protection_level

    @property
    def verified_additional_authenticated_data_crc32c(self):
        """Gets the verified_additional_authenticated_data_crc32c of this RawDecryptResponse.

        Integrity verification field. A flag indicating whether RawDecryptRequest.additional_authenticated_data_crc32c was received by KeyManagementService and used for the integrity verification of additional_authenticated_data. A false value of this field indicates either that // RawDecryptRequest.additional_authenticated_data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawDecryptRequest.additional_authenticated_data_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :return: The verified_additional_authenticated_data_crc32c of this RawDecryptResponse.
        :rtype: bool
        """
        return self._verified_additional_authenticated_data_crc32c

    @verified_additional_authenticated_data_crc32c.setter
    def verified_additional_authenticated_data_crc32c(self, verified_additional_authenticated_data_crc32c):
        """Sets the verified_additional_authenticated_data_crc32c of this RawDecryptResponse.

        Integrity verification field. A flag indicating whether RawDecryptRequest.additional_authenticated_data_crc32c was received by KeyManagementService and used for the integrity verification of additional_authenticated_data. A false value of this field indicates either that // RawDecryptRequest.additional_authenticated_data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawDecryptRequest.additional_authenticated_data_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :param verified_additional_authenticated_data_crc32c: The verified_additional_authenticated_data_crc32c of this RawDecryptResponse.
        :type verified_additional_authenticated_data_crc32c: bool
        """

        self._verified_additional_authenticated_data_crc32c = verified_additional_authenticated_data_crc32c

    @property
    def verified_ciphertext_crc32c(self):
        """Gets the verified_ciphertext_crc32c of this RawDecryptResponse.

        Integrity verification field. A flag indicating whether RawDecryptRequest.ciphertext_crc32c was received by KeyManagementService and used for the integrity verification of the ciphertext. A false value of this field indicates either that RawDecryptRequest.ciphertext_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawDecryptRequest.ciphertext_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :return: The verified_ciphertext_crc32c of this RawDecryptResponse.
        :rtype: bool
        """
        return self._verified_ciphertext_crc32c

    @verified_ciphertext_crc32c.setter
    def verified_ciphertext_crc32c(self, verified_ciphertext_crc32c):
        """Sets the verified_ciphertext_crc32c of this RawDecryptResponse.

        Integrity verification field. A flag indicating whether RawDecryptRequest.ciphertext_crc32c was received by KeyManagementService and used for the integrity verification of the ciphertext. A false value of this field indicates either that RawDecryptRequest.ciphertext_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawDecryptRequest.ciphertext_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :param verified_ciphertext_crc32c: The verified_ciphertext_crc32c of this RawDecryptResponse.
        :type verified_ciphertext_crc32c: bool
        """

        self._verified_ciphertext_crc32c = verified_ciphertext_crc32c

    @property
    def verified_initialization_vector_crc32c(self):
        """Gets the verified_initialization_vector_crc32c of this RawDecryptResponse.

        Integrity verification field. A flag indicating whether RawDecryptRequest.initialization_vector_crc32c was received by KeyManagementService and used for the integrity verification of initialization_vector. A false value of this field indicates either that RawDecryptRequest.initialization_vector_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawDecryptRequest.initialization_vector_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :return: The verified_initialization_vector_crc32c of this RawDecryptResponse.
        :rtype: bool
        """
        return self._verified_initialization_vector_crc32c

    @verified_initialization_vector_crc32c.setter
    def verified_initialization_vector_crc32c(self, verified_initialization_vector_crc32c):
        """Sets the verified_initialization_vector_crc32c of this RawDecryptResponse.

        Integrity verification field. A flag indicating whether RawDecryptRequest.initialization_vector_crc32c was received by KeyManagementService and used for the integrity verification of initialization_vector. A false value of this field indicates either that RawDecryptRequest.initialization_vector_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set RawDecryptRequest.initialization_vector_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :param verified_initialization_vector_crc32c: The verified_initialization_vector_crc32c of this RawDecryptResponse.
        :type verified_initialization_vector_crc32c: bool
        """

        self._verified_initialization_vector_crc32c = verified_initialization_vector_crc32c
