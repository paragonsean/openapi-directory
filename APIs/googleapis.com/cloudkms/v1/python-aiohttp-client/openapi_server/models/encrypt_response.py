# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EncryptResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ciphertext: str=None, ciphertext_crc32c: str=None, name: str=None, protection_level: str=None, verified_additional_authenticated_data_crc32c: bool=None, verified_plaintext_crc32c: bool=None):
        """EncryptResponse - a model defined in OpenAPI

        :param ciphertext: The ciphertext of this EncryptResponse.
        :param ciphertext_crc32c: The ciphertext_crc32c of this EncryptResponse.
        :param name: The name of this EncryptResponse.
        :param protection_level: The protection_level of this EncryptResponse.
        :param verified_additional_authenticated_data_crc32c: The verified_additional_authenticated_data_crc32c of this EncryptResponse.
        :param verified_plaintext_crc32c: The verified_plaintext_crc32c of this EncryptResponse.
        """
        self.openapi_types = {
            'ciphertext': str,
            'ciphertext_crc32c': str,
            'name': str,
            'protection_level': str,
            'verified_additional_authenticated_data_crc32c': bool,
            'verified_plaintext_crc32c': bool
        }

        self.attribute_map = {
            'ciphertext': 'ciphertext',
            'ciphertext_crc32c': 'ciphertextCrc32c',
            'name': 'name',
            'protection_level': 'protectionLevel',
            'verified_additional_authenticated_data_crc32c': 'verifiedAdditionalAuthenticatedDataCrc32c',
            'verified_plaintext_crc32c': 'verifiedPlaintextCrc32c'
        }

        self._ciphertext = ciphertext
        self._ciphertext_crc32c = ciphertext_crc32c
        self._name = name
        self._protection_level = protection_level
        self._verified_additional_authenticated_data_crc32c = verified_additional_authenticated_data_crc32c
        self._verified_plaintext_crc32c = verified_plaintext_crc32c

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptResponse of this EncryptResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ciphertext(self):
        """Gets the ciphertext of this EncryptResponse.

        The encrypted data.

        :return: The ciphertext of this EncryptResponse.
        :rtype: str
        """
        return self._ciphertext

    @ciphertext.setter
    def ciphertext(self, ciphertext):
        """Sets the ciphertext of this EncryptResponse.

        The encrypted data.

        :param ciphertext: The ciphertext of this EncryptResponse.
        :type ciphertext: str
        """

        self._ciphertext = ciphertext

    @property
    def ciphertext_crc32c(self):
        """Gets the ciphertext_crc32c of this EncryptResponse.

        Integrity verification field. A CRC32C checksum of the returned EncryptResponse.ciphertext. An integrity check of EncryptResponse.ciphertext can be performed by computing the CRC32C checksum of EncryptResponse.ciphertext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The ciphertext_crc32c of this EncryptResponse.
        :rtype: str
        """
        return self._ciphertext_crc32c

    @ciphertext_crc32c.setter
    def ciphertext_crc32c(self, ciphertext_crc32c):
        """Sets the ciphertext_crc32c of this EncryptResponse.

        Integrity verification field. A CRC32C checksum of the returned EncryptResponse.ciphertext. An integrity check of EncryptResponse.ciphertext can be performed by computing the CRC32C checksum of EncryptResponse.ciphertext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param ciphertext_crc32c: The ciphertext_crc32c of this EncryptResponse.
        :type ciphertext_crc32c: str
        """

        self._ciphertext_crc32c = ciphertext_crc32c

    @property
    def name(self):
        """Gets the name of this EncryptResponse.

        The resource name of the CryptoKeyVersion used in encryption. Check this field to verify that the intended resource was used for encryption.

        :return: The name of this EncryptResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EncryptResponse.

        The resource name of the CryptoKeyVersion used in encryption. Check this field to verify that the intended resource was used for encryption.

        :param name: The name of this EncryptResponse.
        :type name: str
        """

        self._name = name

    @property
    def protection_level(self):
        """Gets the protection_level of this EncryptResponse.

        The ProtectionLevel of the CryptoKeyVersion used in encryption.

        :return: The protection_level of this EncryptResponse.
        :rtype: str
        """
        return self._protection_level

    @protection_level.setter
    def protection_level(self, protection_level):
        """Sets the protection_level of this EncryptResponse.

        The ProtectionLevel of the CryptoKeyVersion used in encryption.

        :param protection_level: The protection_level of this EncryptResponse.
        :type protection_level: str
        """
        allowed_values = ["PROTECTION_LEVEL_UNSPECIFIED", "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC"]  # noqa: E501
        if protection_level not in allowed_values:
            raise ValueError(
                "Invalid value for `protection_level` ({0}), must be one of {1}"
                .format(protection_level, allowed_values)
            )

        self._protection_level = protection_level

    @property
    def verified_additional_authenticated_data_crc32c(self):
        """Gets the verified_additional_authenticated_data_crc32c of this EncryptResponse.

        Integrity verification field. A flag indicating whether EncryptRequest.additional_authenticated_data_crc32c was received by KeyManagementService and used for the integrity verification of the AAD. A false value of this field indicates either that EncryptRequest.additional_authenticated_data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set EncryptRequest.additional_authenticated_data_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :return: The verified_additional_authenticated_data_crc32c of this EncryptResponse.
        :rtype: bool
        """
        return self._verified_additional_authenticated_data_crc32c

    @verified_additional_authenticated_data_crc32c.setter
    def verified_additional_authenticated_data_crc32c(self, verified_additional_authenticated_data_crc32c):
        """Sets the verified_additional_authenticated_data_crc32c of this EncryptResponse.

        Integrity verification field. A flag indicating whether EncryptRequest.additional_authenticated_data_crc32c was received by KeyManagementService and used for the integrity verification of the AAD. A false value of this field indicates either that EncryptRequest.additional_authenticated_data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set EncryptRequest.additional_authenticated_data_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :param verified_additional_authenticated_data_crc32c: The verified_additional_authenticated_data_crc32c of this EncryptResponse.
        :type verified_additional_authenticated_data_crc32c: bool
        """

        self._verified_additional_authenticated_data_crc32c = verified_additional_authenticated_data_crc32c

    @property
    def verified_plaintext_crc32c(self):
        """Gets the verified_plaintext_crc32c of this EncryptResponse.

        Integrity verification field. A flag indicating whether EncryptRequest.plaintext_crc32c was received by KeyManagementService and used for the integrity verification of the plaintext. A false value of this field indicates either that EncryptRequest.plaintext_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set EncryptRequest.plaintext_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :return: The verified_plaintext_crc32c of this EncryptResponse.
        :rtype: bool
        """
        return self._verified_plaintext_crc32c

    @verified_plaintext_crc32c.setter
    def verified_plaintext_crc32c(self, verified_plaintext_crc32c):
        """Sets the verified_plaintext_crc32c of this EncryptResponse.

        Integrity verification field. A flag indicating whether EncryptRequest.plaintext_crc32c was received by KeyManagementService and used for the integrity verification of the plaintext. A false value of this field indicates either that EncryptRequest.plaintext_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set EncryptRequest.plaintext_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :param verified_plaintext_crc32c: The verified_plaintext_crc32c of this EncryptResponse.
        :type verified_plaintext_crc32c: bool
        """

        self._verified_plaintext_crc32c = verified_plaintext_crc32c
