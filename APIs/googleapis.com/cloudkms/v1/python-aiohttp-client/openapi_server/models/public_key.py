# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublicKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, name: str=None, pem: str=None, pem_crc32c: str=None, protection_level: str=None):
        """PublicKey - a model defined in OpenAPI

        :param algorithm: The algorithm of this PublicKey.
        :param name: The name of this PublicKey.
        :param pem: The pem of this PublicKey.
        :param pem_crc32c: The pem_crc32c of this PublicKey.
        :param protection_level: The protection_level of this PublicKey.
        """
        self.openapi_types = {
            'algorithm': str,
            'name': str,
            'pem': str,
            'pem_crc32c': str,
            'protection_level': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'name': 'name',
            'pem': 'pem',
            'pem_crc32c': 'pemCrc32c',
            'protection_level': 'protectionLevel'
        }

        self._algorithm = algorithm
        self._name = name
        self._pem = pem
        self._pem_crc32c = pem_crc32c
        self._protection_level = protection_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicKey of this PublicKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this PublicKey.

        The Algorithm associated with this key.

        :return: The algorithm of this PublicKey.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this PublicKey.

        The Algorithm associated with this key.

        :param algorithm: The algorithm of this PublicKey.
        :type algorithm: str
        """
        allowed_values = ["CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED", "GOOGLE_SYMMETRIC_ENCRYPTION", "AES_128_GCM", "AES_256_GCM", "AES_128_CBC", "AES_256_CBC", "AES_128_CTR", "AES_256_CTR", "RSA_SIGN_PSS_2048_SHA256", "RSA_SIGN_PSS_3072_SHA256", "RSA_SIGN_PSS_4096_SHA256", "RSA_SIGN_PSS_4096_SHA512", "RSA_SIGN_PKCS1_2048_SHA256", "RSA_SIGN_PKCS1_3072_SHA256", "RSA_SIGN_PKCS1_4096_SHA256", "RSA_SIGN_PKCS1_4096_SHA512", "RSA_SIGN_RAW_PKCS1_2048", "RSA_SIGN_RAW_PKCS1_3072", "RSA_SIGN_RAW_PKCS1_4096", "RSA_DECRYPT_OAEP_2048_SHA256", "RSA_DECRYPT_OAEP_3072_SHA256", "RSA_DECRYPT_OAEP_4096_SHA256", "RSA_DECRYPT_OAEP_4096_SHA512", "RSA_DECRYPT_OAEP_2048_SHA1", "RSA_DECRYPT_OAEP_3072_SHA1", "RSA_DECRYPT_OAEP_4096_SHA1", "EC_SIGN_P256_SHA256", "EC_SIGN_P384_SHA384", "EC_SIGN_SECP256K1_SHA256", "HMAC_SHA256", "HMAC_SHA1", "HMAC_SHA384", "HMAC_SHA512", "HMAC_SHA224", "EXTERNAL_SYMMETRIC_ENCRYPTION"]  # noqa: E501
        if algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm` ({0}), must be one of {1}"
                .format(algorithm, allowed_values)
            )

        self._algorithm = algorithm

    @property
    def name(self):
        """Gets the name of this PublicKey.

        The name of the CryptoKeyVersion public key. Provided here for verification. NOTE: This field is in Beta.

        :return: The name of this PublicKey.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublicKey.

        The name of the CryptoKeyVersion public key. Provided here for verification. NOTE: This field is in Beta.

        :param name: The name of this PublicKey.
        :type name: str
        """

        self._name = name

    @property
    def pem(self):
        """Gets the pem of this PublicKey.

        A public key encoded in PEM format, populated only when GetPublicKey returns one key. For more information, see the [RFC 7468](https://tools.ietf.org/html/rfc7468) sections for [General Considerations](https://tools.ietf.org/html/rfc7468#section-2) and [Textual Encoding of Subject Public Key Info] (https://tools.ietf.org/html/rfc7468#section-13).

        :return: The pem of this PublicKey.
        :rtype: str
        """
        return self._pem

    @pem.setter
    def pem(self, pem):
        """Sets the pem of this PublicKey.

        A public key encoded in PEM format, populated only when GetPublicKey returns one key. For more information, see the [RFC 7468](https://tools.ietf.org/html/rfc7468) sections for [General Considerations](https://tools.ietf.org/html/rfc7468#section-2) and [Textual Encoding of Subject Public Key Info] (https://tools.ietf.org/html/rfc7468#section-13).

        :param pem: The pem of this PublicKey.
        :type pem: str
        """

        self._pem = pem

    @property
    def pem_crc32c(self):
        """Gets the pem_crc32c of this PublicKey.

        Integrity verification field: A CRC32C checksum of the returned PublicKey.pem. It is only populated when GetPublicKey returns one key. An integrity check of PublicKey.pem can be performed by computing the CRC32C checksum of PublicKey.pem and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type. NOTE: This field is in Beta.

        :return: The pem_crc32c of this PublicKey.
        :rtype: str
        """
        return self._pem_crc32c

    @pem_crc32c.setter
    def pem_crc32c(self, pem_crc32c):
        """Sets the pem_crc32c of this PublicKey.

        Integrity verification field: A CRC32C checksum of the returned PublicKey.pem. It is only populated when GetPublicKey returns one key. An integrity check of PublicKey.pem can be performed by computing the CRC32C checksum of PublicKey.pem and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type. NOTE: This field is in Beta.

        :param pem_crc32c: The pem_crc32c of this PublicKey.
        :type pem_crc32c: str
        """

        self._pem_crc32c = pem_crc32c

    @property
    def protection_level(self):
        """Gets the protection_level of this PublicKey.

        The ProtectionLevel of the CryptoKeyVersion public key.

        :return: The protection_level of this PublicKey.
        :rtype: str
        """
        return self._protection_level

    @protection_level.setter
    def protection_level(self, protection_level):
        """Sets the protection_level of this PublicKey.

        The ProtectionLevel of the CryptoKeyVersion public key.

        :param protection_level: The protection_level of this PublicKey.
        :type protection_level: str
        """
        allowed_values = ["PROTECTION_LEVEL_UNSPECIFIED", "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC"]  # noqa: E501
        if protection_level not in allowed_values:
            raise ValueError(
                "Invalid value for `protection_level` ({0}), must be one of {1}"
                .format(protection_level, allowed_values)
            )

        self._protection_level = protection_level
