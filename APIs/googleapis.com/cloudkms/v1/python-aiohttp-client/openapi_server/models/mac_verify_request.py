# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MacVerifyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: str=None, data_crc32c: str=None, mac: str=None, mac_crc32c: str=None):
        """MacVerifyRequest - a model defined in OpenAPI

        :param data: The data of this MacVerifyRequest.
        :param data_crc32c: The data_crc32c of this MacVerifyRequest.
        :param mac: The mac of this MacVerifyRequest.
        :param mac_crc32c: The mac_crc32c of this MacVerifyRequest.
        """
        self.openapi_types = {
            'data': str,
            'data_crc32c': str,
            'mac': str,
            'mac_crc32c': str
        }

        self.attribute_map = {
            'data': 'data',
            'data_crc32c': 'dataCrc32c',
            'mac': 'mac',
            'mac_crc32c': 'macCrc32c'
        }

        self._data = data
        self._data_crc32c = data_crc32c
        self._mac = mac
        self._mac_crc32c = mac_crc32c

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MacVerifyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MacVerifyRequest of this MacVerifyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this MacVerifyRequest.

        Required. The data used previously as a MacSignRequest.data to generate the MAC tag.

        :return: The data of this MacVerifyRequest.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this MacVerifyRequest.

        Required. The data used previously as a MacSignRequest.data to generate the MAC tag.

        :param data: The data of this MacVerifyRequest.
        :type data: str
        """

        self._data = data

    @property
    def data_crc32c(self):
        """Gets the data_crc32c of this MacVerifyRequest.

        Optional. An optional CRC32C checksum of the MacVerifyRequest.data. If specified, KeyManagementService will verify the integrity of the received MacVerifyRequest.data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(MacVerifyRequest.data) is equal to MacVerifyRequest.data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The data_crc32c of this MacVerifyRequest.
        :rtype: str
        """
        return self._data_crc32c

    @data_crc32c.setter
    def data_crc32c(self, data_crc32c):
        """Sets the data_crc32c of this MacVerifyRequest.

        Optional. An optional CRC32C checksum of the MacVerifyRequest.data. If specified, KeyManagementService will verify the integrity of the received MacVerifyRequest.data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(MacVerifyRequest.data) is equal to MacVerifyRequest.data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param data_crc32c: The data_crc32c of this MacVerifyRequest.
        :type data_crc32c: str
        """

        self._data_crc32c = data_crc32c

    @property
    def mac(self):
        """Gets the mac of this MacVerifyRequest.

        Required. The signature to verify.

        :return: The mac of this MacVerifyRequest.
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this MacVerifyRequest.

        Required. The signature to verify.

        :param mac: The mac of this MacVerifyRequest.
        :type mac: str
        """

        self._mac = mac

    @property
    def mac_crc32c(self):
        """Gets the mac_crc32c of this MacVerifyRequest.

        Optional. An optional CRC32C checksum of the MacVerifyRequest.mac. If specified, KeyManagementService will verify the integrity of the received MacVerifyRequest.mac using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(MacVerifyRequest.tag) is equal to MacVerifyRequest.mac_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The mac_crc32c of this MacVerifyRequest.
        :rtype: str
        """
        return self._mac_crc32c

    @mac_crc32c.setter
    def mac_crc32c(self, mac_crc32c):
        """Sets the mac_crc32c of this MacVerifyRequest.

        Optional. An optional CRC32C checksum of the MacVerifyRequest.mac. If specified, KeyManagementService will verify the integrity of the received MacVerifyRequest.mac using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(MacVerifyRequest.tag) is equal to MacVerifyRequest.mac_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param mac_crc32c: The mac_crc32c of this MacVerifyRequest.
        :type mac_crc32c: str
        """

        self._mac_crc32c = mac_crc32c
