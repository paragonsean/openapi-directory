# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MacSignResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mac: str=None, mac_crc32c: str=None, name: str=None, protection_level: str=None, verified_data_crc32c: bool=None):
        """MacSignResponse - a model defined in OpenAPI

        :param mac: The mac of this MacSignResponse.
        :param mac_crc32c: The mac_crc32c of this MacSignResponse.
        :param name: The name of this MacSignResponse.
        :param protection_level: The protection_level of this MacSignResponse.
        :param verified_data_crc32c: The verified_data_crc32c of this MacSignResponse.
        """
        self.openapi_types = {
            'mac': str,
            'mac_crc32c': str,
            'name': str,
            'protection_level': str,
            'verified_data_crc32c': bool
        }

        self.attribute_map = {
            'mac': 'mac',
            'mac_crc32c': 'macCrc32c',
            'name': 'name',
            'protection_level': 'protectionLevel',
            'verified_data_crc32c': 'verifiedDataCrc32c'
        }

        self._mac = mac
        self._mac_crc32c = mac_crc32c
        self._name = name
        self._protection_level = protection_level
        self._verified_data_crc32c = verified_data_crc32c

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MacSignResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MacSignResponse of this MacSignResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mac(self):
        """Gets the mac of this MacSignResponse.

        The created signature.

        :return: The mac of this MacSignResponse.
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this MacSignResponse.

        The created signature.

        :param mac: The mac of this MacSignResponse.
        :type mac: str
        """

        self._mac = mac

    @property
    def mac_crc32c(self):
        """Gets the mac_crc32c of this MacSignResponse.

        Integrity verification field. A CRC32C checksum of the returned MacSignResponse.mac. An integrity check of MacSignResponse.mac can be performed by computing the CRC32C checksum of MacSignResponse.mac and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The mac_crc32c of this MacSignResponse.
        :rtype: str
        """
        return self._mac_crc32c

    @mac_crc32c.setter
    def mac_crc32c(self, mac_crc32c):
        """Sets the mac_crc32c of this MacSignResponse.

        Integrity verification field. A CRC32C checksum of the returned MacSignResponse.mac. An integrity check of MacSignResponse.mac can be performed by computing the CRC32C checksum of MacSignResponse.mac and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param mac_crc32c: The mac_crc32c of this MacSignResponse.
        :type mac_crc32c: str
        """

        self._mac_crc32c = mac_crc32c

    @property
    def name(self):
        """Gets the name of this MacSignResponse.

        The resource name of the CryptoKeyVersion used for signing. Check this field to verify that the intended resource was used for signing.

        :return: The name of this MacSignResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MacSignResponse.

        The resource name of the CryptoKeyVersion used for signing. Check this field to verify that the intended resource was used for signing.

        :param name: The name of this MacSignResponse.
        :type name: str
        """

        self._name = name

    @property
    def protection_level(self):
        """Gets the protection_level of this MacSignResponse.

        The ProtectionLevel of the CryptoKeyVersion used for signing.

        :return: The protection_level of this MacSignResponse.
        :rtype: str
        """
        return self._protection_level

    @protection_level.setter
    def protection_level(self, protection_level):
        """Sets the protection_level of this MacSignResponse.

        The ProtectionLevel of the CryptoKeyVersion used for signing.

        :param protection_level: The protection_level of this MacSignResponse.
        :type protection_level: str
        """
        allowed_values = ["PROTECTION_LEVEL_UNSPECIFIED", "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC"]  # noqa: E501
        if protection_level not in allowed_values:
            raise ValueError(
                "Invalid value for `protection_level` ({0}), must be one of {1}"
                .format(protection_level, allowed_values)
            )

        self._protection_level = protection_level

    @property
    def verified_data_crc32c(self):
        """Gets the verified_data_crc32c of this MacSignResponse.

        Integrity verification field. A flag indicating whether MacSignRequest.data_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that MacSignRequest.data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set MacSignRequest.data_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :return: The verified_data_crc32c of this MacSignResponse.
        :rtype: bool
        """
        return self._verified_data_crc32c

    @verified_data_crc32c.setter
    def verified_data_crc32c(self, verified_data_crc32c):
        """Sets the verified_data_crc32c of this MacSignResponse.

        Integrity verification field. A flag indicating whether MacSignRequest.data_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that MacSignRequest.data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set MacSignRequest.data_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :param verified_data_crc32c: The verified_data_crc32c of this MacSignResponse.
        :type verified_data_crc32c: bool
        """

        self._verified_data_crc32c = verified_data_crc32c
