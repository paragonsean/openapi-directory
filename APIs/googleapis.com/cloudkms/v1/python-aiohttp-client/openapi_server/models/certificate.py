# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Certificate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issuer: str=None, not_after_time: str=None, not_before_time: str=None, parsed: bool=None, raw_der: str=None, serial_number: str=None, sha256_fingerprint: str=None, subject: str=None, subject_alternative_dns_names: List[str]=None):
        """Certificate - a model defined in OpenAPI

        :param issuer: The issuer of this Certificate.
        :param not_after_time: The not_after_time of this Certificate.
        :param not_before_time: The not_before_time of this Certificate.
        :param parsed: The parsed of this Certificate.
        :param raw_der: The raw_der of this Certificate.
        :param serial_number: The serial_number of this Certificate.
        :param sha256_fingerprint: The sha256_fingerprint of this Certificate.
        :param subject: The subject of this Certificate.
        :param subject_alternative_dns_names: The subject_alternative_dns_names of this Certificate.
        """
        self.openapi_types = {
            'issuer': str,
            'not_after_time': str,
            'not_before_time': str,
            'parsed': bool,
            'raw_der': str,
            'serial_number': str,
            'sha256_fingerprint': str,
            'subject': str,
            'subject_alternative_dns_names': List[str]
        }

        self.attribute_map = {
            'issuer': 'issuer',
            'not_after_time': 'notAfterTime',
            'not_before_time': 'notBeforeTime',
            'parsed': 'parsed',
            'raw_der': 'rawDer',
            'serial_number': 'serialNumber',
            'sha256_fingerprint': 'sha256Fingerprint',
            'subject': 'subject',
            'subject_alternative_dns_names': 'subjectAlternativeDnsNames'
        }

        self._issuer = issuer
        self._not_after_time = not_after_time
        self._not_before_time = not_before_time
        self._parsed = parsed
        self._raw_der = raw_der
        self._serial_number = serial_number
        self._sha256_fingerprint = sha256_fingerprint
        self._subject = subject
        self._subject_alternative_dns_names = subject_alternative_dns_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Certificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Certificate of this Certificate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issuer(self):
        """Gets the issuer of this Certificate.

        Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true.

        :return: The issuer of this Certificate.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this Certificate.

        Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true.

        :param issuer: The issuer of this Certificate.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def not_after_time(self):
        """Gets the not_after_time of this Certificate.

        Output only. The certificate is not valid after this time. Only present if parsed is true.

        :return: The not_after_time of this Certificate.
        :rtype: str
        """
        return self._not_after_time

    @not_after_time.setter
    def not_after_time(self, not_after_time):
        """Sets the not_after_time of this Certificate.

        Output only. The certificate is not valid after this time. Only present if parsed is true.

        :param not_after_time: The not_after_time of this Certificate.
        :type not_after_time: str
        """

        self._not_after_time = not_after_time

    @property
    def not_before_time(self):
        """Gets the not_before_time of this Certificate.

        Output only. The certificate is not valid before this time. Only present if parsed is true.

        :return: The not_before_time of this Certificate.
        :rtype: str
        """
        return self._not_before_time

    @not_before_time.setter
    def not_before_time(self, not_before_time):
        """Sets the not_before_time of this Certificate.

        Output only. The certificate is not valid before this time. Only present if parsed is true.

        :param not_before_time: The not_before_time of this Certificate.
        :type not_before_time: str
        """

        self._not_before_time = not_before_time

    @property
    def parsed(self):
        """Gets the parsed of this Certificate.

        Output only. True if the certificate was parsed successfully.

        :return: The parsed of this Certificate.
        :rtype: bool
        """
        return self._parsed

    @parsed.setter
    def parsed(self, parsed):
        """Sets the parsed of this Certificate.

        Output only. True if the certificate was parsed successfully.

        :param parsed: The parsed of this Certificate.
        :type parsed: bool
        """

        self._parsed = parsed

    @property
    def raw_der(self):
        """Gets the raw_der of this Certificate.

        Required. The raw certificate bytes in DER format.

        :return: The raw_der of this Certificate.
        :rtype: str
        """
        return self._raw_der

    @raw_der.setter
    def raw_der(self, raw_der):
        """Sets the raw_der of this Certificate.

        Required. The raw certificate bytes in DER format.

        :param raw_der: The raw_der of this Certificate.
        :type raw_der: str
        """

        self._raw_der = raw_der

    @property
    def serial_number(self):
        """Gets the serial_number of this Certificate.

        Output only. The certificate serial number as a hex string. Only present if parsed is true.

        :return: The serial_number of this Certificate.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Certificate.

        Output only. The certificate serial number as a hex string. Only present if parsed is true.

        :param serial_number: The serial_number of this Certificate.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def sha256_fingerprint(self):
        """Gets the sha256_fingerprint of this Certificate.

        Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.

        :return: The sha256_fingerprint of this Certificate.
        :rtype: str
        """
        return self._sha256_fingerprint

    @sha256_fingerprint.setter
    def sha256_fingerprint(self, sha256_fingerprint):
        """Sets the sha256_fingerprint of this Certificate.

        Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.

        :param sha256_fingerprint: The sha256_fingerprint of this Certificate.
        :type sha256_fingerprint: str
        """

        self._sha256_fingerprint = sha256_fingerprint

    @property
    def subject(self):
        """Gets the subject of this Certificate.

        Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true.

        :return: The subject of this Certificate.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Certificate.

        Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true.

        :param subject: The subject of this Certificate.
        :type subject: str
        """

        self._subject = subject

    @property
    def subject_alternative_dns_names(self):
        """Gets the subject_alternative_dns_names of this Certificate.

        Output only. The subject Alternative DNS names. Only present if parsed is true.

        :return: The subject_alternative_dns_names of this Certificate.
        :rtype: List[str]
        """
        return self._subject_alternative_dns_names

    @subject_alternative_dns_names.setter
    def subject_alternative_dns_names(self, subject_alternative_dns_names):
        """Sets the subject_alternative_dns_names of this Certificate.

        Output only. The subject Alternative DNS names. Only present if parsed is true.

        :param subject_alternative_dns_names: The subject_alternative_dns_names of this Certificate.
        :type subject_alternative_dns_names: List[str]
        """

        self._subject_alternative_dns_names = subject_alternative_dns_names
