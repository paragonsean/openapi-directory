# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AsymmetricSignResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, protection_level: str=None, signature: str=None, signature_crc32c: str=None, verified_data_crc32c: bool=None, verified_digest_crc32c: bool=None):
        """AsymmetricSignResponse - a model defined in OpenAPI

        :param name: The name of this AsymmetricSignResponse.
        :param protection_level: The protection_level of this AsymmetricSignResponse.
        :param signature: The signature of this AsymmetricSignResponse.
        :param signature_crc32c: The signature_crc32c of this AsymmetricSignResponse.
        :param verified_data_crc32c: The verified_data_crc32c of this AsymmetricSignResponse.
        :param verified_digest_crc32c: The verified_digest_crc32c of this AsymmetricSignResponse.
        """
        self.openapi_types = {
            'name': str,
            'protection_level': str,
            'signature': str,
            'signature_crc32c': str,
            'verified_data_crc32c': bool,
            'verified_digest_crc32c': bool
        }

        self.attribute_map = {
            'name': 'name',
            'protection_level': 'protectionLevel',
            'signature': 'signature',
            'signature_crc32c': 'signatureCrc32c',
            'verified_data_crc32c': 'verifiedDataCrc32c',
            'verified_digest_crc32c': 'verifiedDigestCrc32c'
        }

        self._name = name
        self._protection_level = protection_level
        self._signature = signature
        self._signature_crc32c = signature_crc32c
        self._verified_data_crc32c = verified_data_crc32c
        self._verified_digest_crc32c = verified_digest_crc32c

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AsymmetricSignResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AsymmetricSignResponse of this AsymmetricSignResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AsymmetricSignResponse.

        The resource name of the CryptoKeyVersion used for signing. Check this field to verify that the intended resource was used for signing.

        :return: The name of this AsymmetricSignResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AsymmetricSignResponse.

        The resource name of the CryptoKeyVersion used for signing. Check this field to verify that the intended resource was used for signing.

        :param name: The name of this AsymmetricSignResponse.
        :type name: str
        """

        self._name = name

    @property
    def protection_level(self):
        """Gets the protection_level of this AsymmetricSignResponse.

        The ProtectionLevel of the CryptoKeyVersion used for signing.

        :return: The protection_level of this AsymmetricSignResponse.
        :rtype: str
        """
        return self._protection_level

    @protection_level.setter
    def protection_level(self, protection_level):
        """Sets the protection_level of this AsymmetricSignResponse.

        The ProtectionLevel of the CryptoKeyVersion used for signing.

        :param protection_level: The protection_level of this AsymmetricSignResponse.
        :type protection_level: str
        """
        allowed_values = ["PROTECTION_LEVEL_UNSPECIFIED", "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC"]  # noqa: E501
        if protection_level not in allowed_values:
            raise ValueError(
                "Invalid value for `protection_level` ({0}), must be one of {1}"
                .format(protection_level, allowed_values)
            )

        self._protection_level = protection_level

    @property
    def signature(self):
        """Gets the signature of this AsymmetricSignResponse.

        The created signature.

        :return: The signature of this AsymmetricSignResponse.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this AsymmetricSignResponse.

        The created signature.

        :param signature: The signature of this AsymmetricSignResponse.
        :type signature: str
        """

        self._signature = signature

    @property
    def signature_crc32c(self):
        """Gets the signature_crc32c of this AsymmetricSignResponse.

        Integrity verification field. A CRC32C checksum of the returned AsymmetricSignResponse.signature. An integrity check of AsymmetricSignResponse.signature can be performed by computing the CRC32C checksum of AsymmetricSignResponse.signature and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The signature_crc32c of this AsymmetricSignResponse.
        :rtype: str
        """
        return self._signature_crc32c

    @signature_crc32c.setter
    def signature_crc32c(self, signature_crc32c):
        """Sets the signature_crc32c of this AsymmetricSignResponse.

        Integrity verification field. A CRC32C checksum of the returned AsymmetricSignResponse.signature. An integrity check of AsymmetricSignResponse.signature can be performed by computing the CRC32C checksum of AsymmetricSignResponse.signature and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param signature_crc32c: The signature_crc32c of this AsymmetricSignResponse.
        :type signature_crc32c: str
        """

        self._signature_crc32c = signature_crc32c

    @property
    def verified_data_crc32c(self):
        """Gets the verified_data_crc32c of this AsymmetricSignResponse.

        Integrity verification field. A flag indicating whether AsymmetricSignRequest.data_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that AsymmetricSignRequest.data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set AsymmetricSignRequest.data_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :return: The verified_data_crc32c of this AsymmetricSignResponse.
        :rtype: bool
        """
        return self._verified_data_crc32c

    @verified_data_crc32c.setter
    def verified_data_crc32c(self, verified_data_crc32c):
        """Sets the verified_data_crc32c of this AsymmetricSignResponse.

        Integrity verification field. A flag indicating whether AsymmetricSignRequest.data_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that AsymmetricSignRequest.data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set AsymmetricSignRequest.data_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :param verified_data_crc32c: The verified_data_crc32c of this AsymmetricSignResponse.
        :type verified_data_crc32c: bool
        """

        self._verified_data_crc32c = verified_data_crc32c

    @property
    def verified_digest_crc32c(self):
        """Gets the verified_digest_crc32c of this AsymmetricSignResponse.

        Integrity verification field. A flag indicating whether AsymmetricSignRequest.digest_crc32c was received by KeyManagementService and used for the integrity verification of the digest. A false value of this field indicates either that AsymmetricSignRequest.digest_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set AsymmetricSignRequest.digest_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :return: The verified_digest_crc32c of this AsymmetricSignResponse.
        :rtype: bool
        """
        return self._verified_digest_crc32c

    @verified_digest_crc32c.setter
    def verified_digest_crc32c(self, verified_digest_crc32c):
        """Sets the verified_digest_crc32c of this AsymmetricSignResponse.

        Integrity verification field. A flag indicating whether AsymmetricSignRequest.digest_crc32c was received by KeyManagementService and used for the integrity verification of the digest. A false value of this field indicates either that AsymmetricSignRequest.digest_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set AsymmetricSignRequest.digest_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :param verified_digest_crc32c: The verified_digest_crc32c of this AsymmetricSignResponse.
        :type verified_digest_crc32c: bool
        """

        self._verified_digest_crc32c = verified_digest_crc32c
