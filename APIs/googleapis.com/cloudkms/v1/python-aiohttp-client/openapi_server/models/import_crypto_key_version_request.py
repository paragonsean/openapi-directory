# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportCryptoKeyVersionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, crypto_key_version: str=None, import_job: str=None, rsa_aes_wrapped_key: str=None, wrapped_key: str=None):
        """ImportCryptoKeyVersionRequest - a model defined in OpenAPI

        :param algorithm: The algorithm of this ImportCryptoKeyVersionRequest.
        :param crypto_key_version: The crypto_key_version of this ImportCryptoKeyVersionRequest.
        :param import_job: The import_job of this ImportCryptoKeyVersionRequest.
        :param rsa_aes_wrapped_key: The rsa_aes_wrapped_key of this ImportCryptoKeyVersionRequest.
        :param wrapped_key: The wrapped_key of this ImportCryptoKeyVersionRequest.
        """
        self.openapi_types = {
            'algorithm': str,
            'crypto_key_version': str,
            'import_job': str,
            'rsa_aes_wrapped_key': str,
            'wrapped_key': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'crypto_key_version': 'cryptoKeyVersion',
            'import_job': 'importJob',
            'rsa_aes_wrapped_key': 'rsaAesWrappedKey',
            'wrapped_key': 'wrappedKey'
        }

        self._algorithm = algorithm
        self._crypto_key_version = crypto_key_version
        self._import_job = import_job
        self._rsa_aes_wrapped_key = rsa_aes_wrapped_key
        self._wrapped_key = wrapped_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportCryptoKeyVersionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportCryptoKeyVersionRequest of this ImportCryptoKeyVersionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this ImportCryptoKeyVersionRequest.

        Required. The algorithm of the key being imported. This does not need to match the version_template of the CryptoKey this version imports into.

        :return: The algorithm of this ImportCryptoKeyVersionRequest.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this ImportCryptoKeyVersionRequest.

        Required. The algorithm of the key being imported. This does not need to match the version_template of the CryptoKey this version imports into.

        :param algorithm: The algorithm of this ImportCryptoKeyVersionRequest.
        :type algorithm: str
        """
        allowed_values = ["CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED", "GOOGLE_SYMMETRIC_ENCRYPTION", "AES_128_GCM", "AES_256_GCM", "AES_128_CBC", "AES_256_CBC", "AES_128_CTR", "AES_256_CTR", "RSA_SIGN_PSS_2048_SHA256", "RSA_SIGN_PSS_3072_SHA256", "RSA_SIGN_PSS_4096_SHA256", "RSA_SIGN_PSS_4096_SHA512", "RSA_SIGN_PKCS1_2048_SHA256", "RSA_SIGN_PKCS1_3072_SHA256", "RSA_SIGN_PKCS1_4096_SHA256", "RSA_SIGN_PKCS1_4096_SHA512", "RSA_SIGN_RAW_PKCS1_2048", "RSA_SIGN_RAW_PKCS1_3072", "RSA_SIGN_RAW_PKCS1_4096", "RSA_DECRYPT_OAEP_2048_SHA256", "RSA_DECRYPT_OAEP_3072_SHA256", "RSA_DECRYPT_OAEP_4096_SHA256", "RSA_DECRYPT_OAEP_4096_SHA512", "RSA_DECRYPT_OAEP_2048_SHA1", "RSA_DECRYPT_OAEP_3072_SHA1", "RSA_DECRYPT_OAEP_4096_SHA1", "EC_SIGN_P256_SHA256", "EC_SIGN_P384_SHA384", "EC_SIGN_SECP256K1_SHA256", "HMAC_SHA256", "HMAC_SHA1", "HMAC_SHA384", "HMAC_SHA512", "HMAC_SHA224", "EXTERNAL_SYMMETRIC_ENCRYPTION"]  # noqa: E501
        if algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm` ({0}), must be one of {1}"
                .format(algorithm, allowed_values)
            )

        self._algorithm = algorithm

    @property
    def crypto_key_version(self):
        """Gets the crypto_key_version of this ImportCryptoKeyVersionRequest.

        Optional. The optional name of an existing CryptoKeyVersion to target for an import operation. If this field is not present, a new CryptoKeyVersion containing the supplied key material is created. If this field is present, the supplied key material is imported into the existing CryptoKeyVersion. To import into an existing CryptoKeyVersion, the CryptoKeyVersion must be a child of ImportCryptoKeyVersionRequest.parent, have been previously created via ImportCryptoKeyVersion, and be in DESTROYED or IMPORT_FAILED state. The key material and algorithm must match the previous CryptoKeyVersion exactly if the CryptoKeyVersion has ever contained key material.

        :return: The crypto_key_version of this ImportCryptoKeyVersionRequest.
        :rtype: str
        """
        return self._crypto_key_version

    @crypto_key_version.setter
    def crypto_key_version(self, crypto_key_version):
        """Sets the crypto_key_version of this ImportCryptoKeyVersionRequest.

        Optional. The optional name of an existing CryptoKeyVersion to target for an import operation. If this field is not present, a new CryptoKeyVersion containing the supplied key material is created. If this field is present, the supplied key material is imported into the existing CryptoKeyVersion. To import into an existing CryptoKeyVersion, the CryptoKeyVersion must be a child of ImportCryptoKeyVersionRequest.parent, have been previously created via ImportCryptoKeyVersion, and be in DESTROYED or IMPORT_FAILED state. The key material and algorithm must match the previous CryptoKeyVersion exactly if the CryptoKeyVersion has ever contained key material.

        :param crypto_key_version: The crypto_key_version of this ImportCryptoKeyVersionRequest.
        :type crypto_key_version: str
        """

        self._crypto_key_version = crypto_key_version

    @property
    def import_job(self):
        """Gets the import_job of this ImportCryptoKeyVersionRequest.

        Required. The name of the ImportJob that was used to wrap this key material.

        :return: The import_job of this ImportCryptoKeyVersionRequest.
        :rtype: str
        """
        return self._import_job

    @import_job.setter
    def import_job(self, import_job):
        """Sets the import_job of this ImportCryptoKeyVersionRequest.

        Required. The name of the ImportJob that was used to wrap this key material.

        :param import_job: The import_job of this ImportCryptoKeyVersionRequest.
        :type import_job: str
        """

        self._import_job = import_job

    @property
    def rsa_aes_wrapped_key(self):
        """Gets the rsa_aes_wrapped_key of this ImportCryptoKeyVersionRequest.

        Optional. This field has the same meaning as wrapped_key. Prefer to use that field in new work. Either that field or this field (but not both) must be specified.

        :return: The rsa_aes_wrapped_key of this ImportCryptoKeyVersionRequest.
        :rtype: str
        """
        return self._rsa_aes_wrapped_key

    @rsa_aes_wrapped_key.setter
    def rsa_aes_wrapped_key(self, rsa_aes_wrapped_key):
        """Sets the rsa_aes_wrapped_key of this ImportCryptoKeyVersionRequest.

        Optional. This field has the same meaning as wrapped_key. Prefer to use that field in new work. Either that field or this field (but not both) must be specified.

        :param rsa_aes_wrapped_key: The rsa_aes_wrapped_key of this ImportCryptoKeyVersionRequest.
        :type rsa_aes_wrapped_key: str
        """

        self._rsa_aes_wrapped_key = rsa_aes_wrapped_key

    @property
    def wrapped_key(self):
        """Gets the wrapped_key of this ImportCryptoKeyVersionRequest.

        Optional. The wrapped key material to import. Before wrapping, key material must be formatted. If importing symmetric key material, the expected key material format is plain bytes. If importing asymmetric key material, the expected key material format is PKCS#8-encoded DER (the PrivateKeyInfo structure from RFC 5208). When wrapping with import methods (RSA_OAEP_3072_SHA1_AES_256 or RSA_OAEP_4096_SHA1_AES_256 or RSA_OAEP_3072_SHA256_AES_256 or RSA_OAEP_4096_SHA256_AES_256), this field must contain the concatenation of: 1. An ephemeral AES-256 wrapping key wrapped with the public_key using RSAES-OAEP with SHA-1/SHA-256, MGF1 with SHA-1/SHA-256, and an empty label. 2. The formatted key to be imported, wrapped with the ephemeral AES-256 key using AES-KWP (RFC 5649). This format is the same as the format produced by PKCS#11 mechanism CKM_RSA_AES_KEY_WRAP. When wrapping with import methods (RSA_OAEP_3072_SHA256 or RSA_OAEP_4096_SHA256), this field must contain the formatted key to be imported, wrapped with the public_key using RSAES-OAEP with SHA-256, MGF1 with SHA-256, and an empty label.

        :return: The wrapped_key of this ImportCryptoKeyVersionRequest.
        :rtype: str
        """
        return self._wrapped_key

    @wrapped_key.setter
    def wrapped_key(self, wrapped_key):
        """Sets the wrapped_key of this ImportCryptoKeyVersionRequest.

        Optional. The wrapped key material to import. Before wrapping, key material must be formatted. If importing symmetric key material, the expected key material format is plain bytes. If importing asymmetric key material, the expected key material format is PKCS#8-encoded DER (the PrivateKeyInfo structure from RFC 5208). When wrapping with import methods (RSA_OAEP_3072_SHA1_AES_256 or RSA_OAEP_4096_SHA1_AES_256 or RSA_OAEP_3072_SHA256_AES_256 or RSA_OAEP_4096_SHA256_AES_256), this field must contain the concatenation of: 1. An ephemeral AES-256 wrapping key wrapped with the public_key using RSAES-OAEP with SHA-1/SHA-256, MGF1 with SHA-1/SHA-256, and an empty label. 2. The formatted key to be imported, wrapped with the ephemeral AES-256 key using AES-KWP (RFC 5649). This format is the same as the format produced by PKCS#11 mechanism CKM_RSA_AES_KEY_WRAP. When wrapping with import methods (RSA_OAEP_3072_SHA256 or RSA_OAEP_4096_SHA256), this field must contain the formatted key to be imported, wrapped with the public_key using RSAES-OAEP with SHA-256, MGF1 with SHA-256, and an empty label.

        :param wrapped_key: The wrapped_key of this ImportCryptoKeyVersionRequest.
        :type wrapped_key: str
        """

        self._wrapped_key = wrapped_key
