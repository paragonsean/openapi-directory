# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MacVerifyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, protection_level: str=None, success: bool=None, verified_data_crc32c: bool=None, verified_mac_crc32c: bool=None, verified_success_integrity: bool=None):
        """MacVerifyResponse - a model defined in OpenAPI

        :param name: The name of this MacVerifyResponse.
        :param protection_level: The protection_level of this MacVerifyResponse.
        :param success: The success of this MacVerifyResponse.
        :param verified_data_crc32c: The verified_data_crc32c of this MacVerifyResponse.
        :param verified_mac_crc32c: The verified_mac_crc32c of this MacVerifyResponse.
        :param verified_success_integrity: The verified_success_integrity of this MacVerifyResponse.
        """
        self.openapi_types = {
            'name': str,
            'protection_level': str,
            'success': bool,
            'verified_data_crc32c': bool,
            'verified_mac_crc32c': bool,
            'verified_success_integrity': bool
        }

        self.attribute_map = {
            'name': 'name',
            'protection_level': 'protectionLevel',
            'success': 'success',
            'verified_data_crc32c': 'verifiedDataCrc32c',
            'verified_mac_crc32c': 'verifiedMacCrc32c',
            'verified_success_integrity': 'verifiedSuccessIntegrity'
        }

        self._name = name
        self._protection_level = protection_level
        self._success = success
        self._verified_data_crc32c = verified_data_crc32c
        self._verified_mac_crc32c = verified_mac_crc32c
        self._verified_success_integrity = verified_success_integrity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MacVerifyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MacVerifyResponse of this MacVerifyResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this MacVerifyResponse.

        The resource name of the CryptoKeyVersion used for verification. Check this field to verify that the intended resource was used for verification.

        :return: The name of this MacVerifyResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MacVerifyResponse.

        The resource name of the CryptoKeyVersion used for verification. Check this field to verify that the intended resource was used for verification.

        :param name: The name of this MacVerifyResponse.
        :type name: str
        """

        self._name = name

    @property
    def protection_level(self):
        """Gets the protection_level of this MacVerifyResponse.

        The ProtectionLevel of the CryptoKeyVersion used for verification.

        :return: The protection_level of this MacVerifyResponse.
        :rtype: str
        """
        return self._protection_level

    @protection_level.setter
    def protection_level(self, protection_level):
        """Sets the protection_level of this MacVerifyResponse.

        The ProtectionLevel of the CryptoKeyVersion used for verification.

        :param protection_level: The protection_level of this MacVerifyResponse.
        :type protection_level: str
        """
        allowed_values = ["PROTECTION_LEVEL_UNSPECIFIED", "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC"]  # noqa: E501
        if protection_level not in allowed_values:
            raise ValueError(
                "Invalid value for `protection_level` ({0}), must be one of {1}"
                .format(protection_level, allowed_values)
            )

        self._protection_level = protection_level

    @property
    def success(self):
        """Gets the success of this MacVerifyResponse.

        This field indicates whether or not the verification operation for MacVerifyRequest.mac over MacVerifyRequest.data was successful.

        :return: The success of this MacVerifyResponse.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this MacVerifyResponse.

        This field indicates whether or not the verification operation for MacVerifyRequest.mac over MacVerifyRequest.data was successful.

        :param success: The success of this MacVerifyResponse.
        :type success: bool
        """

        self._success = success

    @property
    def verified_data_crc32c(self):
        """Gets the verified_data_crc32c of this MacVerifyResponse.

        Integrity verification field. A flag indicating whether MacVerifyRequest.data_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that MacVerifyRequest.data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set MacVerifyRequest.data_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :return: The verified_data_crc32c of this MacVerifyResponse.
        :rtype: bool
        """
        return self._verified_data_crc32c

    @verified_data_crc32c.setter
    def verified_data_crc32c(self, verified_data_crc32c):
        """Sets the verified_data_crc32c of this MacVerifyResponse.

        Integrity verification field. A flag indicating whether MacVerifyRequest.data_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that MacVerifyRequest.data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set MacVerifyRequest.data_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :param verified_data_crc32c: The verified_data_crc32c of this MacVerifyResponse.
        :type verified_data_crc32c: bool
        """

        self._verified_data_crc32c = verified_data_crc32c

    @property
    def verified_mac_crc32c(self):
        """Gets the verified_mac_crc32c of this MacVerifyResponse.

        Integrity verification field. A flag indicating whether MacVerifyRequest.mac_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that MacVerifyRequest.mac_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set MacVerifyRequest.mac_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :return: The verified_mac_crc32c of this MacVerifyResponse.
        :rtype: bool
        """
        return self._verified_mac_crc32c

    @verified_mac_crc32c.setter
    def verified_mac_crc32c(self, verified_mac_crc32c):
        """Sets the verified_mac_crc32c of this MacVerifyResponse.

        Integrity verification field. A flag indicating whether MacVerifyRequest.mac_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that MacVerifyRequest.mac_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set MacVerifyRequest.mac_crc32c but this field is still false, discard the response and perform a limited number of retries.

        :param verified_mac_crc32c: The verified_mac_crc32c of this MacVerifyResponse.
        :type verified_mac_crc32c: bool
        """

        self._verified_mac_crc32c = verified_mac_crc32c

    @property
    def verified_success_integrity(self):
        """Gets the verified_success_integrity of this MacVerifyResponse.

        Integrity verification field. This value is used for the integrity verification of [MacVerifyResponse.success]. If the value of this field contradicts the value of [MacVerifyResponse.success], discard the response and perform a limited number of retries.

        :return: The verified_success_integrity of this MacVerifyResponse.
        :rtype: bool
        """
        return self._verified_success_integrity

    @verified_success_integrity.setter
    def verified_success_integrity(self, verified_success_integrity):
        """Sets the verified_success_integrity of this MacVerifyResponse.

        Integrity verification field. This value is used for the integrity verification of [MacVerifyResponse.success]. If the value of this field contradicts the value of [MacVerifyResponse.success], discard the response and perform a limited number of retries.

        :param verified_success_integrity: The verified_success_integrity of this MacVerifyResponse.
        :type verified_success_integrity: bool
        """

        self._verified_success_integrity = verified_success_integrity
