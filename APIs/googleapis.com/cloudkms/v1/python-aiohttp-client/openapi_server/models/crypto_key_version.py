# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.external_protection_level_options import ExternalProtectionLevelOptions
from openapi_server.models.key_operation_attestation import KeyOperationAttestation
from openapi_server import util


class CryptoKeyVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, attestation: KeyOperationAttestation=None, create_time: str=None, destroy_event_time: str=None, destroy_time: str=None, external_destruction_failure_reason: str=None, external_protection_level_options: ExternalProtectionLevelOptions=None, generate_time: str=None, generation_failure_reason: str=None, import_failure_reason: str=None, import_job: str=None, import_time: str=None, name: str=None, protection_level: str=None, reimport_eligible: bool=None, state: str=None):
        """CryptoKeyVersion - a model defined in OpenAPI

        :param algorithm: The algorithm of this CryptoKeyVersion.
        :param attestation: The attestation of this CryptoKeyVersion.
        :param create_time: The create_time of this CryptoKeyVersion.
        :param destroy_event_time: The destroy_event_time of this CryptoKeyVersion.
        :param destroy_time: The destroy_time of this CryptoKeyVersion.
        :param external_destruction_failure_reason: The external_destruction_failure_reason of this CryptoKeyVersion.
        :param external_protection_level_options: The external_protection_level_options of this CryptoKeyVersion.
        :param generate_time: The generate_time of this CryptoKeyVersion.
        :param generation_failure_reason: The generation_failure_reason of this CryptoKeyVersion.
        :param import_failure_reason: The import_failure_reason of this CryptoKeyVersion.
        :param import_job: The import_job of this CryptoKeyVersion.
        :param import_time: The import_time of this CryptoKeyVersion.
        :param name: The name of this CryptoKeyVersion.
        :param protection_level: The protection_level of this CryptoKeyVersion.
        :param reimport_eligible: The reimport_eligible of this CryptoKeyVersion.
        :param state: The state of this CryptoKeyVersion.
        """
        self.openapi_types = {
            'algorithm': str,
            'attestation': KeyOperationAttestation,
            'create_time': str,
            'destroy_event_time': str,
            'destroy_time': str,
            'external_destruction_failure_reason': str,
            'external_protection_level_options': ExternalProtectionLevelOptions,
            'generate_time': str,
            'generation_failure_reason': str,
            'import_failure_reason': str,
            'import_job': str,
            'import_time': str,
            'name': str,
            'protection_level': str,
            'reimport_eligible': bool,
            'state': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'attestation': 'attestation',
            'create_time': 'createTime',
            'destroy_event_time': 'destroyEventTime',
            'destroy_time': 'destroyTime',
            'external_destruction_failure_reason': 'externalDestructionFailureReason',
            'external_protection_level_options': 'externalProtectionLevelOptions',
            'generate_time': 'generateTime',
            'generation_failure_reason': 'generationFailureReason',
            'import_failure_reason': 'importFailureReason',
            'import_job': 'importJob',
            'import_time': 'importTime',
            'name': 'name',
            'protection_level': 'protectionLevel',
            'reimport_eligible': 'reimportEligible',
            'state': 'state'
        }

        self._algorithm = algorithm
        self._attestation = attestation
        self._create_time = create_time
        self._destroy_event_time = destroy_event_time
        self._destroy_time = destroy_time
        self._external_destruction_failure_reason = external_destruction_failure_reason
        self._external_protection_level_options = external_protection_level_options
        self._generate_time = generate_time
        self._generation_failure_reason = generation_failure_reason
        self._import_failure_reason = import_failure_reason
        self._import_job = import_job
        self._import_time = import_time
        self._name = name
        self._protection_level = protection_level
        self._reimport_eligible = reimport_eligible
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CryptoKeyVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CryptoKeyVersion of this CryptoKeyVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this CryptoKeyVersion.

        Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.

        :return: The algorithm of this CryptoKeyVersion.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this CryptoKeyVersion.

        Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.

        :param algorithm: The algorithm of this CryptoKeyVersion.
        :type algorithm: str
        """
        allowed_values = ["CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED", "GOOGLE_SYMMETRIC_ENCRYPTION", "AES_128_GCM", "AES_256_GCM", "AES_128_CBC", "AES_256_CBC", "AES_128_CTR", "AES_256_CTR", "RSA_SIGN_PSS_2048_SHA256", "RSA_SIGN_PSS_3072_SHA256", "RSA_SIGN_PSS_4096_SHA256", "RSA_SIGN_PSS_4096_SHA512", "RSA_SIGN_PKCS1_2048_SHA256", "RSA_SIGN_PKCS1_3072_SHA256", "RSA_SIGN_PKCS1_4096_SHA256", "RSA_SIGN_PKCS1_4096_SHA512", "RSA_SIGN_RAW_PKCS1_2048", "RSA_SIGN_RAW_PKCS1_3072", "RSA_SIGN_RAW_PKCS1_4096", "RSA_DECRYPT_OAEP_2048_SHA256", "RSA_DECRYPT_OAEP_3072_SHA256", "RSA_DECRYPT_OAEP_4096_SHA256", "RSA_DECRYPT_OAEP_4096_SHA512", "RSA_DECRYPT_OAEP_2048_SHA1", "RSA_DECRYPT_OAEP_3072_SHA1", "RSA_DECRYPT_OAEP_4096_SHA1", "EC_SIGN_P256_SHA256", "EC_SIGN_P384_SHA384", "EC_SIGN_SECP256K1_SHA256", "HMAC_SHA256", "HMAC_SHA1", "HMAC_SHA384", "HMAC_SHA512", "HMAC_SHA224", "EXTERNAL_SYMMETRIC_ENCRYPTION"]  # noqa: E501
        if algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm` ({0}), must be one of {1}"
                .format(algorithm, allowed_values)
            )

        self._algorithm = algorithm

    @property
    def attestation(self):
        """Gets the attestation of this CryptoKeyVersion.


        :return: The attestation of this CryptoKeyVersion.
        :rtype: KeyOperationAttestation
        """
        return self._attestation

    @attestation.setter
    def attestation(self, attestation):
        """Sets the attestation of this CryptoKeyVersion.


        :param attestation: The attestation of this CryptoKeyVersion.
        :type attestation: KeyOperationAttestation
        """

        self._attestation = attestation

    @property
    def create_time(self):
        """Gets the create_time of this CryptoKeyVersion.

        Output only. The time at which this CryptoKeyVersion was created.

        :return: The create_time of this CryptoKeyVersion.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CryptoKeyVersion.

        Output only. The time at which this CryptoKeyVersion was created.

        :param create_time: The create_time of this CryptoKeyVersion.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def destroy_event_time(self):
        """Gets the destroy_event_time of this CryptoKeyVersion.

        Output only. The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED.

        :return: The destroy_event_time of this CryptoKeyVersion.
        :rtype: str
        """
        return self._destroy_event_time

    @destroy_event_time.setter
    def destroy_event_time(self, destroy_event_time):
        """Sets the destroy_event_time of this CryptoKeyVersion.

        Output only. The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED.

        :param destroy_event_time: The destroy_event_time of this CryptoKeyVersion.
        :type destroy_event_time: str
        """

        self._destroy_event_time = destroy_event_time

    @property
    def destroy_time(self):
        """Gets the destroy_time of this CryptoKeyVersion.

        Output only. The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.

        :return: The destroy_time of this CryptoKeyVersion.
        :rtype: str
        """
        return self._destroy_time

    @destroy_time.setter
    def destroy_time(self, destroy_time):
        """Sets the destroy_time of this CryptoKeyVersion.

        Output only. The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.

        :param destroy_time: The destroy_time of this CryptoKeyVersion.
        :type destroy_time: str
        """

        self._destroy_time = destroy_time

    @property
    def external_destruction_failure_reason(self):
        """Gets the external_destruction_failure_reason of this CryptoKeyVersion.

        Output only. The root cause of the most recent external destruction failure. Only present if state is EXTERNAL_DESTRUCTION_FAILED.

        :return: The external_destruction_failure_reason of this CryptoKeyVersion.
        :rtype: str
        """
        return self._external_destruction_failure_reason

    @external_destruction_failure_reason.setter
    def external_destruction_failure_reason(self, external_destruction_failure_reason):
        """Sets the external_destruction_failure_reason of this CryptoKeyVersion.

        Output only. The root cause of the most recent external destruction failure. Only present if state is EXTERNAL_DESTRUCTION_FAILED.

        :param external_destruction_failure_reason: The external_destruction_failure_reason of this CryptoKeyVersion.
        :type external_destruction_failure_reason: str
        """

        self._external_destruction_failure_reason = external_destruction_failure_reason

    @property
    def external_protection_level_options(self):
        """Gets the external_protection_level_options of this CryptoKeyVersion.


        :return: The external_protection_level_options of this CryptoKeyVersion.
        :rtype: ExternalProtectionLevelOptions
        """
        return self._external_protection_level_options

    @external_protection_level_options.setter
    def external_protection_level_options(self, external_protection_level_options):
        """Sets the external_protection_level_options of this CryptoKeyVersion.


        :param external_protection_level_options: The external_protection_level_options of this CryptoKeyVersion.
        :type external_protection_level_options: ExternalProtectionLevelOptions
        """

        self._external_protection_level_options = external_protection_level_options

    @property
    def generate_time(self):
        """Gets the generate_time of this CryptoKeyVersion.

        Output only. The time this CryptoKeyVersion's key material was generated.

        :return: The generate_time of this CryptoKeyVersion.
        :rtype: str
        """
        return self._generate_time

    @generate_time.setter
    def generate_time(self, generate_time):
        """Sets the generate_time of this CryptoKeyVersion.

        Output only. The time this CryptoKeyVersion's key material was generated.

        :param generate_time: The generate_time of this CryptoKeyVersion.
        :type generate_time: str
        """

        self._generate_time = generate_time

    @property
    def generation_failure_reason(self):
        """Gets the generation_failure_reason of this CryptoKeyVersion.

        Output only. The root cause of the most recent generation failure. Only present if state is GENERATION_FAILED.

        :return: The generation_failure_reason of this CryptoKeyVersion.
        :rtype: str
        """
        return self._generation_failure_reason

    @generation_failure_reason.setter
    def generation_failure_reason(self, generation_failure_reason):
        """Sets the generation_failure_reason of this CryptoKeyVersion.

        Output only. The root cause of the most recent generation failure. Only present if state is GENERATION_FAILED.

        :param generation_failure_reason: The generation_failure_reason of this CryptoKeyVersion.
        :type generation_failure_reason: str
        """

        self._generation_failure_reason = generation_failure_reason

    @property
    def import_failure_reason(self):
        """Gets the import_failure_reason of this CryptoKeyVersion.

        Output only. The root cause of the most recent import failure. Only present if state is IMPORT_FAILED.

        :return: The import_failure_reason of this CryptoKeyVersion.
        :rtype: str
        """
        return self._import_failure_reason

    @import_failure_reason.setter
    def import_failure_reason(self, import_failure_reason):
        """Sets the import_failure_reason of this CryptoKeyVersion.

        Output only. The root cause of the most recent import failure. Only present if state is IMPORT_FAILED.

        :param import_failure_reason: The import_failure_reason of this CryptoKeyVersion.
        :type import_failure_reason: str
        """

        self._import_failure_reason = import_failure_reason

    @property
    def import_job(self):
        """Gets the import_job of this CryptoKeyVersion.

        Output only. The name of the ImportJob used in the most recent import of this CryptoKeyVersion. Only present if the underlying key material was imported.

        :return: The import_job of this CryptoKeyVersion.
        :rtype: str
        """
        return self._import_job

    @import_job.setter
    def import_job(self, import_job):
        """Sets the import_job of this CryptoKeyVersion.

        Output only. The name of the ImportJob used in the most recent import of this CryptoKeyVersion. Only present if the underlying key material was imported.

        :param import_job: The import_job of this CryptoKeyVersion.
        :type import_job: str
        """

        self._import_job = import_job

    @property
    def import_time(self):
        """Gets the import_time of this CryptoKeyVersion.

        Output only. The time at which this CryptoKeyVersion's key material was most recently imported.

        :return: The import_time of this CryptoKeyVersion.
        :rtype: str
        """
        return self._import_time

    @import_time.setter
    def import_time(self, import_time):
        """Sets the import_time of this CryptoKeyVersion.

        Output only. The time at which this CryptoKeyVersion's key material was most recently imported.

        :param import_time: The import_time of this CryptoKeyVersion.
        :type import_time: str
        """

        self._import_time = import_time

    @property
    def name(self):
        """Gets the name of this CryptoKeyVersion.

        Output only. The resource name for this CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.

        :return: The name of this CryptoKeyVersion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CryptoKeyVersion.

        Output only. The resource name for this CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.

        :param name: The name of this CryptoKeyVersion.
        :type name: str
        """

        self._name = name

    @property
    def protection_level(self):
        """Gets the protection_level of this CryptoKeyVersion.

        Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.

        :return: The protection_level of this CryptoKeyVersion.
        :rtype: str
        """
        return self._protection_level

    @protection_level.setter
    def protection_level(self, protection_level):
        """Sets the protection_level of this CryptoKeyVersion.

        Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.

        :param protection_level: The protection_level of this CryptoKeyVersion.
        :type protection_level: str
        """
        allowed_values = ["PROTECTION_LEVEL_UNSPECIFIED", "SOFTWARE", "HSM", "EXTERNAL", "EXTERNAL_VPC"]  # noqa: E501
        if protection_level not in allowed_values:
            raise ValueError(
                "Invalid value for `protection_level` ({0}), must be one of {1}"
                .format(protection_level, allowed_values)
            )

        self._protection_level = protection_level

    @property
    def reimport_eligible(self):
        """Gets the reimport_eligible of this CryptoKeyVersion.

        Output only. Whether or not this key version is eligible for reimport, by being specified as a target in ImportCryptoKeyVersionRequest.crypto_key_version.

        :return: The reimport_eligible of this CryptoKeyVersion.
        :rtype: bool
        """
        return self._reimport_eligible

    @reimport_eligible.setter
    def reimport_eligible(self, reimport_eligible):
        """Sets the reimport_eligible of this CryptoKeyVersion.

        Output only. Whether or not this key version is eligible for reimport, by being specified as a target in ImportCryptoKeyVersionRequest.crypto_key_version.

        :param reimport_eligible: The reimport_eligible of this CryptoKeyVersion.
        :type reimport_eligible: bool
        """

        self._reimport_eligible = reimport_eligible

    @property
    def state(self):
        """Gets the state of this CryptoKeyVersion.

        The current state of the CryptoKeyVersion.

        :return: The state of this CryptoKeyVersion.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CryptoKeyVersion.

        The current state of the CryptoKeyVersion.

        :param state: The state of this CryptoKeyVersion.
        :type state: str
        """
        allowed_values = ["CRYPTO_KEY_VERSION_STATE_UNSPECIFIED", "PENDING_GENERATION", "ENABLED", "DISABLED", "DESTROYED", "DESTROY_SCHEDULED", "PENDING_IMPORT", "IMPORT_FAILED", "GENERATION_FAILED", "PENDING_EXTERNAL_DESTRUCTION", "EXTERNAL_DESTRUCTION_FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
