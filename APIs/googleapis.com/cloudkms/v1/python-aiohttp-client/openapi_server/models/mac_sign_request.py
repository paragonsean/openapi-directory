# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MacSignRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: str=None, data_crc32c: str=None):
        """MacSignRequest - a model defined in OpenAPI

        :param data: The data of this MacSignRequest.
        :param data_crc32c: The data_crc32c of this MacSignRequest.
        """
        self.openapi_types = {
            'data': str,
            'data_crc32c': str
        }

        self.attribute_map = {
            'data': 'data',
            'data_crc32c': 'dataCrc32c'
        }

        self._data = data
        self._data_crc32c = data_crc32c

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MacSignRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MacSignRequest of this MacSignRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this MacSignRequest.

        Required. The data to sign. The MAC tag is computed over this data field based on the specific algorithm.

        :return: The data of this MacSignRequest.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this MacSignRequest.

        Required. The data to sign. The MAC tag is computed over this data field based on the specific algorithm.

        :param data: The data of this MacSignRequest.
        :type data: str
        """

        self._data = data

    @property
    def data_crc32c(self):
        """Gets the data_crc32c of this MacSignRequest.

        Optional. An optional CRC32C checksum of the MacSignRequest.data. If specified, KeyManagementService will verify the integrity of the received MacSignRequest.data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(MacSignRequest.data) is equal to MacSignRequest.data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The data_crc32c of this MacSignRequest.
        :rtype: str
        """
        return self._data_crc32c

    @data_crc32c.setter
    def data_crc32c(self, data_crc32c):
        """Sets the data_crc32c of this MacSignRequest.

        Optional. An optional CRC32C checksum of the MacSignRequest.data. If specified, KeyManagementService will verify the integrity of the received MacSignRequest.data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(MacSignRequest.data) is equal to MacSignRequest.data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param data_crc32c: The data_crc32c of this MacSignRequest.
        :type data_crc32c: str
        """

        self._data_crc32c = data_crc32c
