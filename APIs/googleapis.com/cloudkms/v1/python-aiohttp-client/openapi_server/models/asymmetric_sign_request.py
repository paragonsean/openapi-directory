# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.digest import Digest
from openapi_server import util


class AsymmetricSignRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: str=None, data_crc32c: str=None, digest: Digest=None, digest_crc32c: str=None):
        """AsymmetricSignRequest - a model defined in OpenAPI

        :param data: The data of this AsymmetricSignRequest.
        :param data_crc32c: The data_crc32c of this AsymmetricSignRequest.
        :param digest: The digest of this AsymmetricSignRequest.
        :param digest_crc32c: The digest_crc32c of this AsymmetricSignRequest.
        """
        self.openapi_types = {
            'data': str,
            'data_crc32c': str,
            'digest': Digest,
            'digest_crc32c': str
        }

        self.attribute_map = {
            'data': 'data',
            'data_crc32c': 'dataCrc32c',
            'digest': 'digest',
            'digest_crc32c': 'digestCrc32c'
        }

        self._data = data
        self._data_crc32c = data_crc32c
        self._digest = digest
        self._digest_crc32c = digest_crc32c

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AsymmetricSignRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AsymmetricSignRequest of this AsymmetricSignRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this AsymmetricSignRequest.

        Optional. The data to sign. It can't be supplied if AsymmetricSignRequest.digest is supplied.

        :return: The data of this AsymmetricSignRequest.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AsymmetricSignRequest.

        Optional. The data to sign. It can't be supplied if AsymmetricSignRequest.digest is supplied.

        :param data: The data of this AsymmetricSignRequest.
        :type data: str
        """

        self._data = data

    @property
    def data_crc32c(self):
        """Gets the data_crc32c of this AsymmetricSignRequest.

        Optional. An optional CRC32C checksum of the AsymmetricSignRequest.data. If specified, KeyManagementService will verify the integrity of the received AsymmetricSignRequest.data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(AsymmetricSignRequest.data) is equal to AsymmetricSignRequest.data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The data_crc32c of this AsymmetricSignRequest.
        :rtype: str
        """
        return self._data_crc32c

    @data_crc32c.setter
    def data_crc32c(self, data_crc32c):
        """Sets the data_crc32c of this AsymmetricSignRequest.

        Optional. An optional CRC32C checksum of the AsymmetricSignRequest.data. If specified, KeyManagementService will verify the integrity of the received AsymmetricSignRequest.data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(AsymmetricSignRequest.data) is equal to AsymmetricSignRequest.data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param data_crc32c: The data_crc32c of this AsymmetricSignRequest.
        :type data_crc32c: str
        """

        self._data_crc32c = data_crc32c

    @property
    def digest(self):
        """Gets the digest of this AsymmetricSignRequest.


        :return: The digest of this AsymmetricSignRequest.
        :rtype: Digest
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this AsymmetricSignRequest.


        :param digest: The digest of this AsymmetricSignRequest.
        :type digest: Digest
        """

        self._digest = digest

    @property
    def digest_crc32c(self):
        """Gets the digest_crc32c of this AsymmetricSignRequest.

        Optional. An optional CRC32C checksum of the AsymmetricSignRequest.digest. If specified, KeyManagementService will verify the integrity of the received AsymmetricSignRequest.digest using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(AsymmetricSignRequest.digest) is equal to AsymmetricSignRequest.digest_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The digest_crc32c of this AsymmetricSignRequest.
        :rtype: str
        """
        return self._digest_crc32c

    @digest_crc32c.setter
    def digest_crc32c(self, digest_crc32c):
        """Sets the digest_crc32c of this AsymmetricSignRequest.

        Optional. An optional CRC32C checksum of the AsymmetricSignRequest.digest. If specified, KeyManagementService will verify the integrity of the received AsymmetricSignRequest.digest using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(AsymmetricSignRequest.digest) is equal to AsymmetricSignRequest.digest_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param digest_crc32c: The digest_crc32c of this AsymmetricSignRequest.
        :type digest_crc32c: str
        """

        self._digest_crc32c = digest_crc32c
