# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ekm_available: bool=None, hsm_available: bool=None):
        """LocationMetadata - a model defined in OpenAPI

        :param ekm_available: The ekm_available of this LocationMetadata.
        :param hsm_available: The hsm_available of this LocationMetadata.
        """
        self.openapi_types = {
            'ekm_available': bool,
            'hsm_available': bool
        }

        self.attribute_map = {
            'ekm_available': 'ekmAvailable',
            'hsm_available': 'hsmAvailable'
        }

        self._ekm_available = ekm_available
        self._hsm_available = hsm_available

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationMetadata of this LocationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ekm_available(self):
        """Gets the ekm_available of this LocationMetadata.

        Indicates whether CryptoKeys with protection_level EXTERNAL can be created in this location.

        :return: The ekm_available of this LocationMetadata.
        :rtype: bool
        """
        return self._ekm_available

    @ekm_available.setter
    def ekm_available(self, ekm_available):
        """Sets the ekm_available of this LocationMetadata.

        Indicates whether CryptoKeys with protection_level EXTERNAL can be created in this location.

        :param ekm_available: The ekm_available of this LocationMetadata.
        :type ekm_available: bool
        """

        self._ekm_available = ekm_available

    @property
    def hsm_available(self):
        """Gets the hsm_available of this LocationMetadata.

        Indicates whether CryptoKeys with protection_level HSM can be created in this location.

        :return: The hsm_available of this LocationMetadata.
        :rtype: bool
        """
        return self._hsm_available

    @hsm_available.setter
    def hsm_available(self, hsm_available):
        """Sets the hsm_available of this LocationMetadata.

        Indicates whether CryptoKeys with protection_level HSM can be created in this location.

        :param hsm_available: The hsm_available of this LocationMetadata.
        :type hsm_available: bool
        """

        self._hsm_available = hsm_available
