# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EncryptRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_authenticated_data: str=None, additional_authenticated_data_crc32c: str=None, plaintext: str=None, plaintext_crc32c: str=None):
        """EncryptRequest - a model defined in OpenAPI

        :param additional_authenticated_data: The additional_authenticated_data of this EncryptRequest.
        :param additional_authenticated_data_crc32c: The additional_authenticated_data_crc32c of this EncryptRequest.
        :param plaintext: The plaintext of this EncryptRequest.
        :param plaintext_crc32c: The plaintext_crc32c of this EncryptRequest.
        """
        self.openapi_types = {
            'additional_authenticated_data': str,
            'additional_authenticated_data_crc32c': str,
            'plaintext': str,
            'plaintext_crc32c': str
        }

        self.attribute_map = {
            'additional_authenticated_data': 'additionalAuthenticatedData',
            'additional_authenticated_data_crc32c': 'additionalAuthenticatedDataCrc32c',
            'plaintext': 'plaintext',
            'plaintext_crc32c': 'plaintextCrc32c'
        }

        self._additional_authenticated_data = additional_authenticated_data
        self._additional_authenticated_data_crc32c = additional_authenticated_data_crc32c
        self._plaintext = plaintext
        self._plaintext_crc32c = plaintext_crc32c

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptRequest of this EncryptRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_authenticated_data(self):
        """Gets the additional_authenticated_data of this EncryptRequest.

        Optional. Optional data that, if specified, must also be provided during decryption through DecryptRequest.additional_authenticated_data. The maximum size depends on the key version's protection_level. For SOFTWARE, EXTERNAL, and EXTERNAL_VPC keys the AAD must be no larger than 64KiB. For HSM keys, the combined length of the plaintext and additional_authenticated_data fields must be no larger than 8KiB.

        :return: The additional_authenticated_data of this EncryptRequest.
        :rtype: str
        """
        return self._additional_authenticated_data

    @additional_authenticated_data.setter
    def additional_authenticated_data(self, additional_authenticated_data):
        """Sets the additional_authenticated_data of this EncryptRequest.

        Optional. Optional data that, if specified, must also be provided during decryption through DecryptRequest.additional_authenticated_data. The maximum size depends on the key version's protection_level. For SOFTWARE, EXTERNAL, and EXTERNAL_VPC keys the AAD must be no larger than 64KiB. For HSM keys, the combined length of the plaintext and additional_authenticated_data fields must be no larger than 8KiB.

        :param additional_authenticated_data: The additional_authenticated_data of this EncryptRequest.
        :type additional_authenticated_data: str
        """

        self._additional_authenticated_data = additional_authenticated_data

    @property
    def additional_authenticated_data_crc32c(self):
        """Gets the additional_authenticated_data_crc32c of this EncryptRequest.

        Optional. An optional CRC32C checksum of the EncryptRequest.additional_authenticated_data. If specified, KeyManagementService will verify the integrity of the received EncryptRequest.additional_authenticated_data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(EncryptRequest.additional_authenticated_data) is equal to EncryptRequest.additional_authenticated_data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The additional_authenticated_data_crc32c of this EncryptRequest.
        :rtype: str
        """
        return self._additional_authenticated_data_crc32c

    @additional_authenticated_data_crc32c.setter
    def additional_authenticated_data_crc32c(self, additional_authenticated_data_crc32c):
        """Sets the additional_authenticated_data_crc32c of this EncryptRequest.

        Optional. An optional CRC32C checksum of the EncryptRequest.additional_authenticated_data. If specified, KeyManagementService will verify the integrity of the received EncryptRequest.additional_authenticated_data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(EncryptRequest.additional_authenticated_data) is equal to EncryptRequest.additional_authenticated_data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param additional_authenticated_data_crc32c: The additional_authenticated_data_crc32c of this EncryptRequest.
        :type additional_authenticated_data_crc32c: str
        """

        self._additional_authenticated_data_crc32c = additional_authenticated_data_crc32c

    @property
    def plaintext(self):
        """Gets the plaintext of this EncryptRequest.

        Required. The data to encrypt. Must be no larger than 64KiB. The maximum size depends on the key version's protection_level. For SOFTWARE, EXTERNAL, and EXTERNAL_VPC keys, the plaintext must be no larger than 64KiB. For HSM keys, the combined length of the plaintext and additional_authenticated_data fields must be no larger than 8KiB.

        :return: The plaintext of this EncryptRequest.
        :rtype: str
        """
        return self._plaintext

    @plaintext.setter
    def plaintext(self, plaintext):
        """Sets the plaintext of this EncryptRequest.

        Required. The data to encrypt. Must be no larger than 64KiB. The maximum size depends on the key version's protection_level. For SOFTWARE, EXTERNAL, and EXTERNAL_VPC keys, the plaintext must be no larger than 64KiB. For HSM keys, the combined length of the plaintext and additional_authenticated_data fields must be no larger than 8KiB.

        :param plaintext: The plaintext of this EncryptRequest.
        :type plaintext: str
        """

        self._plaintext = plaintext

    @property
    def plaintext_crc32c(self):
        """Gets the plaintext_crc32c of this EncryptRequest.

        Optional. An optional CRC32C checksum of the EncryptRequest.plaintext. If specified, KeyManagementService will verify the integrity of the received EncryptRequest.plaintext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(EncryptRequest.plaintext) is equal to EncryptRequest.plaintext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :return: The plaintext_crc32c of this EncryptRequest.
        :rtype: str
        """
        return self._plaintext_crc32c

    @plaintext_crc32c.setter
    def plaintext_crc32c(self, plaintext_crc32c):
        """Sets the plaintext_crc32c of this EncryptRequest.

        Optional. An optional CRC32C checksum of the EncryptRequest.plaintext. If specified, KeyManagementService will verify the integrity of the received EncryptRequest.plaintext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(EncryptRequest.plaintext) is equal to EncryptRequest.plaintext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.

        :param plaintext_crc32c: The plaintext_crc32c of this EncryptRequest.
        :type plaintext_crc32c: str
        """

        self._plaintext_crc32c = plaintext_crc32c
