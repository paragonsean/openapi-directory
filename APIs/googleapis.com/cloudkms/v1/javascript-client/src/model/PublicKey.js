/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PublicKey model module.
 * @module model/PublicKey
 * @version v1
 */
class PublicKey {
    /**
     * Constructs a new <code>PublicKey</code>.
     * The public keys for a given CryptoKeyVersion. Obtained via GetPublicKey.
     * @alias module:model/PublicKey
     */
    constructor() { 
        
        PublicKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PublicKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublicKey} obj Optional instance to populate.
     * @return {module:model/PublicKey} The populated <code>PublicKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublicKey();

            if (data.hasOwnProperty('algorithm')) {
                obj['algorithm'] = ApiClient.convertToType(data['algorithm'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pem')) {
                obj['pem'] = ApiClient.convertToType(data['pem'], 'String');
            }
            if (data.hasOwnProperty('pemCrc32c')) {
                obj['pemCrc32c'] = ApiClient.convertToType(data['pemCrc32c'], 'String');
            }
            if (data.hasOwnProperty('protectionLevel')) {
                obj['protectionLevel'] = ApiClient.convertToType(data['protectionLevel'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublicKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublicKey</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['algorithm'] && !(typeof data['algorithm'] === 'string' || data['algorithm'] instanceof String)) {
            throw new Error("Expected the field `algorithm` to be a primitive type in the JSON string but got " + data['algorithm']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['pem'] && !(typeof data['pem'] === 'string' || data['pem'] instanceof String)) {
            throw new Error("Expected the field `pem` to be a primitive type in the JSON string but got " + data['pem']);
        }
        // ensure the json data is a string
        if (data['pemCrc32c'] && !(typeof data['pemCrc32c'] === 'string' || data['pemCrc32c'] instanceof String)) {
            throw new Error("Expected the field `pemCrc32c` to be a primitive type in the JSON string but got " + data['pemCrc32c']);
        }
        // ensure the json data is a string
        if (data['protectionLevel'] && !(typeof data['protectionLevel'] === 'string' || data['protectionLevel'] instanceof String)) {
            throw new Error("Expected the field `protectionLevel` to be a primitive type in the JSON string but got " + data['protectionLevel']);
        }

        return true;
    }


}



/**
 * The Algorithm associated with this key.
 * @member {module:model/PublicKey.AlgorithmEnum} algorithm
 */
PublicKey.prototype['algorithm'] = undefined;

/**
 * The name of the CryptoKeyVersion public key. Provided here for verification. NOTE: This field is in Beta.
 * @member {String} name
 */
PublicKey.prototype['name'] = undefined;

/**
 * A public key encoded in PEM format, populated only when GetPublicKey returns one key. For more information, see the [RFC 7468](https://tools.ietf.org/html/rfc7468) sections for [General Considerations](https://tools.ietf.org/html/rfc7468#section-2) and [Textual Encoding of Subject Public Key Info] (https://tools.ietf.org/html/rfc7468#section-13).
 * @member {String} pem
 */
PublicKey.prototype['pem'] = undefined;

/**
 * Integrity verification field: A CRC32C checksum of the returned PublicKey.pem. It is only populated when GetPublicKey returns one key. An integrity check of PublicKey.pem can be performed by computing the CRC32C checksum of PublicKey.pem and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type. NOTE: This field is in Beta.
 * @member {String} pemCrc32c
 */
PublicKey.prototype['pemCrc32c'] = undefined;

/**
 * The ProtectionLevel of the CryptoKeyVersion public key.
 * @member {module:model/PublicKey.ProtectionLevelEnum} protectionLevel
 */
PublicKey.prototype['protectionLevel'] = undefined;





/**
 * Allowed values for the <code>algorithm</code> property.
 * @enum {String}
 * @readonly
 */
PublicKey['AlgorithmEnum'] = {

    /**
     * value: "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED"
     * @const
     */
    "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED": "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED",

    /**
     * value: "GOOGLE_SYMMETRIC_ENCRYPTION"
     * @const
     */
    "GOOGLE_SYMMETRIC_ENCRYPTION": "GOOGLE_SYMMETRIC_ENCRYPTION",

    /**
     * value: "AES_128_GCM"
     * @const
     */
    "AES_128_GCM": "AES_128_GCM",

    /**
     * value: "AES_256_GCM"
     * @const
     */
    "AES_256_GCM": "AES_256_GCM",

    /**
     * value: "AES_128_CBC"
     * @const
     */
    "AES_128_CBC": "AES_128_CBC",

    /**
     * value: "AES_256_CBC"
     * @const
     */
    "AES_256_CBC": "AES_256_CBC",

    /**
     * value: "AES_128_CTR"
     * @const
     */
    "AES_128_CTR": "AES_128_CTR",

    /**
     * value: "AES_256_CTR"
     * @const
     */
    "AES_256_CTR": "AES_256_CTR",

    /**
     * value: "RSA_SIGN_PSS_2048_SHA256"
     * @const
     */
    "RSA_SIGN_PSS_2048_SHA256": "RSA_SIGN_PSS_2048_SHA256",

    /**
     * value: "RSA_SIGN_PSS_3072_SHA256"
     * @const
     */
    "RSA_SIGN_PSS_3072_SHA256": "RSA_SIGN_PSS_3072_SHA256",

    /**
     * value: "RSA_SIGN_PSS_4096_SHA256"
     * @const
     */
    "RSA_SIGN_PSS_4096_SHA256": "RSA_SIGN_PSS_4096_SHA256",

    /**
     * value: "RSA_SIGN_PSS_4096_SHA512"
     * @const
     */
    "RSA_SIGN_PSS_4096_SHA512": "RSA_SIGN_PSS_4096_SHA512",

    /**
     * value: "RSA_SIGN_PKCS1_2048_SHA256"
     * @const
     */
    "RSA_SIGN_PKCS1_2048_SHA256": "RSA_SIGN_PKCS1_2048_SHA256",

    /**
     * value: "RSA_SIGN_PKCS1_3072_SHA256"
     * @const
     */
    "RSA_SIGN_PKCS1_3072_SHA256": "RSA_SIGN_PKCS1_3072_SHA256",

    /**
     * value: "RSA_SIGN_PKCS1_4096_SHA256"
     * @const
     */
    "RSA_SIGN_PKCS1_4096_SHA256": "RSA_SIGN_PKCS1_4096_SHA256",

    /**
     * value: "RSA_SIGN_PKCS1_4096_SHA512"
     * @const
     */
    "RSA_SIGN_PKCS1_4096_SHA512": "RSA_SIGN_PKCS1_4096_SHA512",

    /**
     * value: "RSA_SIGN_RAW_PKCS1_2048"
     * @const
     */
    "RSA_SIGN_RAW_PKCS1_2048": "RSA_SIGN_RAW_PKCS1_2048",

    /**
     * value: "RSA_SIGN_RAW_PKCS1_3072"
     * @const
     */
    "RSA_SIGN_RAW_PKCS1_3072": "RSA_SIGN_RAW_PKCS1_3072",

    /**
     * value: "RSA_SIGN_RAW_PKCS1_4096"
     * @const
     */
    "RSA_SIGN_RAW_PKCS1_4096": "RSA_SIGN_RAW_PKCS1_4096",

    /**
     * value: "RSA_DECRYPT_OAEP_2048_SHA256"
     * @const
     */
    "RSA_DECRYPT_OAEP_2048_SHA256": "RSA_DECRYPT_OAEP_2048_SHA256",

    /**
     * value: "RSA_DECRYPT_OAEP_3072_SHA256"
     * @const
     */
    "RSA_DECRYPT_OAEP_3072_SHA256": "RSA_DECRYPT_OAEP_3072_SHA256",

    /**
     * value: "RSA_DECRYPT_OAEP_4096_SHA256"
     * @const
     */
    "RSA_DECRYPT_OAEP_4096_SHA256": "RSA_DECRYPT_OAEP_4096_SHA256",

    /**
     * value: "RSA_DECRYPT_OAEP_4096_SHA512"
     * @const
     */
    "RSA_DECRYPT_OAEP_4096_SHA512": "RSA_DECRYPT_OAEP_4096_SHA512",

    /**
     * value: "RSA_DECRYPT_OAEP_2048_SHA1"
     * @const
     */
    "RSA_DECRYPT_OAEP_2048_SHA1": "RSA_DECRYPT_OAEP_2048_SHA1",

    /**
     * value: "RSA_DECRYPT_OAEP_3072_SHA1"
     * @const
     */
    "RSA_DECRYPT_OAEP_3072_SHA1": "RSA_DECRYPT_OAEP_3072_SHA1",

    /**
     * value: "RSA_DECRYPT_OAEP_4096_SHA1"
     * @const
     */
    "RSA_DECRYPT_OAEP_4096_SHA1": "RSA_DECRYPT_OAEP_4096_SHA1",

    /**
     * value: "EC_SIGN_P256_SHA256"
     * @const
     */
    "EC_SIGN_P256_SHA256": "EC_SIGN_P256_SHA256",

    /**
     * value: "EC_SIGN_P384_SHA384"
     * @const
     */
    "EC_SIGN_P384_SHA384": "EC_SIGN_P384_SHA384",

    /**
     * value: "EC_SIGN_SECP256K1_SHA256"
     * @const
     */
    "EC_SIGN_SECP256K1_SHA256": "EC_SIGN_SECP256K1_SHA256",

    /**
     * value: "HMAC_SHA256"
     * @const
     */
    "HMAC_SHA256": "HMAC_SHA256",

    /**
     * value: "HMAC_SHA1"
     * @const
     */
    "HMAC_SHA1": "HMAC_SHA1",

    /**
     * value: "HMAC_SHA384"
     * @const
     */
    "HMAC_SHA384": "HMAC_SHA384",

    /**
     * value: "HMAC_SHA512"
     * @const
     */
    "HMAC_SHA512": "HMAC_SHA512",

    /**
     * value: "HMAC_SHA224"
     * @const
     */
    "HMAC_SHA224": "HMAC_SHA224",

    /**
     * value: "EXTERNAL_SYMMETRIC_ENCRYPTION"
     * @const
     */
    "EXTERNAL_SYMMETRIC_ENCRYPTION": "EXTERNAL_SYMMETRIC_ENCRYPTION"
};


/**
 * Allowed values for the <code>protectionLevel</code> property.
 * @enum {String}
 * @readonly
 */
PublicKey['ProtectionLevelEnum'] = {

    /**
     * value: "PROTECTION_LEVEL_UNSPECIFIED"
     * @const
     */
    "PROTECTION_LEVEL_UNSPECIFIED": "PROTECTION_LEVEL_UNSPECIFIED",

    /**
     * value: "SOFTWARE"
     * @const
     */
    "SOFTWARE": "SOFTWARE",

    /**
     * value: "HSM"
     * @const
     */
    "HSM": "HSM",

    /**
     * value: "EXTERNAL"
     * @const
     */
    "EXTERNAL": "EXTERNAL",

    /**
     * value: "EXTERNAL_VPC"
     * @const
     */
    "EXTERNAL_VPC": "EXTERNAL_VPC"
};



export default PublicKey;

