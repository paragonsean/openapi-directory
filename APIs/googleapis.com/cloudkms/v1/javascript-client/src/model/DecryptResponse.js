/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DecryptResponse model module.
 * @module model/DecryptResponse
 * @version v1
 */
class DecryptResponse {
    /**
     * Constructs a new <code>DecryptResponse</code>.
     * Response message for KeyManagementService.Decrypt.
     * @alias module:model/DecryptResponse
     */
    constructor() { 
        
        DecryptResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DecryptResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DecryptResponse} obj Optional instance to populate.
     * @return {module:model/DecryptResponse} The populated <code>DecryptResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DecryptResponse();

            if (data.hasOwnProperty('plaintext')) {
                obj['plaintext'] = ApiClient.convertToType(data['plaintext'], 'Blob');
            }
            if (data.hasOwnProperty('plaintextCrc32c')) {
                obj['plaintextCrc32c'] = ApiClient.convertToType(data['plaintextCrc32c'], 'String');
            }
            if (data.hasOwnProperty('protectionLevel')) {
                obj['protectionLevel'] = ApiClient.convertToType(data['protectionLevel'], 'String');
            }
            if (data.hasOwnProperty('usedPrimary')) {
                obj['usedPrimary'] = ApiClient.convertToType(data['usedPrimary'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DecryptResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DecryptResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['plaintextCrc32c'] && !(typeof data['plaintextCrc32c'] === 'string' || data['plaintextCrc32c'] instanceof String)) {
            throw new Error("Expected the field `plaintextCrc32c` to be a primitive type in the JSON string but got " + data['plaintextCrc32c']);
        }
        // ensure the json data is a string
        if (data['protectionLevel'] && !(typeof data['protectionLevel'] === 'string' || data['protectionLevel'] instanceof String)) {
            throw new Error("Expected the field `protectionLevel` to be a primitive type in the JSON string but got " + data['protectionLevel']);
        }

        return true;
    }


}



/**
 * The decrypted data originally supplied in EncryptRequest.plaintext.
 * @member {Blob} plaintext
 */
DecryptResponse.prototype['plaintext'] = undefined;

/**
 * Integrity verification field. A CRC32C checksum of the returned DecryptResponse.plaintext. An integrity check of DecryptResponse.plaintext can be performed by computing the CRC32C checksum of DecryptResponse.plaintext and comparing your results to this field. Discard the response in case of non-matching checksum values, and perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: receiving this response message indicates that KeyManagementService is able to successfully decrypt the ciphertext. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
 * @member {String} plaintextCrc32c
 */
DecryptResponse.prototype['plaintextCrc32c'] = undefined;

/**
 * The ProtectionLevel of the CryptoKeyVersion used in decryption.
 * @member {module:model/DecryptResponse.ProtectionLevelEnum} protectionLevel
 */
DecryptResponse.prototype['protectionLevel'] = undefined;

/**
 * Whether the Decryption was performed using the primary key version.
 * @member {Boolean} usedPrimary
 */
DecryptResponse.prototype['usedPrimary'] = undefined;





/**
 * Allowed values for the <code>protectionLevel</code> property.
 * @enum {String}
 * @readonly
 */
DecryptResponse['ProtectionLevelEnum'] = {

    /**
     * value: "PROTECTION_LEVEL_UNSPECIFIED"
     * @const
     */
    "PROTECTION_LEVEL_UNSPECIFIED": "PROTECTION_LEVEL_UNSPECIFIED",

    /**
     * value: "SOFTWARE"
     * @const
     */
    "SOFTWARE": "SOFTWARE",

    /**
     * value: "HSM"
     * @const
     */
    "HSM": "HSM",

    /**
     * value: "EXTERNAL"
     * @const
     */
    "EXTERNAL": "EXTERNAL",

    /**
     * value: "EXTERNAL_VPC"
     * @const
     */
    "EXTERNAL_VPC": "EXTERNAL_VPC"
};



export default DecryptResponse;

