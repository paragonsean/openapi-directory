/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Certificate model module.
 * @module model/Certificate
 * @version v1
 */
class Certificate {
    /**
     * Constructs a new <code>Certificate</code>.
     * A Certificate represents an X.509 certificate used to authenticate HTTPS connections to EKM replicas.
     * @alias module:model/Certificate
     */
    constructor() { 
        
        Certificate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Certificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Certificate} obj Optional instance to populate.
     * @return {module:model/Certificate} The populated <code>Certificate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Certificate();

            if (data.hasOwnProperty('issuer')) {
                obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
            }
            if (data.hasOwnProperty('notAfterTime')) {
                obj['notAfterTime'] = ApiClient.convertToType(data['notAfterTime'], 'String');
            }
            if (data.hasOwnProperty('notBeforeTime')) {
                obj['notBeforeTime'] = ApiClient.convertToType(data['notBeforeTime'], 'String');
            }
            if (data.hasOwnProperty('parsed')) {
                obj['parsed'] = ApiClient.convertToType(data['parsed'], 'Boolean');
            }
            if (data.hasOwnProperty('rawDer')) {
                obj['rawDer'] = ApiClient.convertToType(data['rawDer'], 'Blob');
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
            if (data.hasOwnProperty('sha256Fingerprint')) {
                obj['sha256Fingerprint'] = ApiClient.convertToType(data['sha256Fingerprint'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('subjectAlternativeDnsNames')) {
                obj['subjectAlternativeDnsNames'] = ApiClient.convertToType(data['subjectAlternativeDnsNames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Certificate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Certificate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['issuer'] && !(typeof data['issuer'] === 'string' || data['issuer'] instanceof String)) {
            throw new Error("Expected the field `issuer` to be a primitive type in the JSON string but got " + data['issuer']);
        }
        // ensure the json data is a string
        if (data['notAfterTime'] && !(typeof data['notAfterTime'] === 'string' || data['notAfterTime'] instanceof String)) {
            throw new Error("Expected the field `notAfterTime` to be a primitive type in the JSON string but got " + data['notAfterTime']);
        }
        // ensure the json data is a string
        if (data['notBeforeTime'] && !(typeof data['notBeforeTime'] === 'string' || data['notBeforeTime'] instanceof String)) {
            throw new Error("Expected the field `notBeforeTime` to be a primitive type in the JSON string but got " + data['notBeforeTime']);
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }
        // ensure the json data is a string
        if (data['sha256Fingerprint'] && !(typeof data['sha256Fingerprint'] === 'string' || data['sha256Fingerprint'] instanceof String)) {
            throw new Error("Expected the field `sha256Fingerprint` to be a primitive type in the JSON string but got " + data['sha256Fingerprint']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subjectAlternativeDnsNames'])) {
            throw new Error("Expected the field `subjectAlternativeDnsNames` to be an array in the JSON data but got " + data['subjectAlternativeDnsNames']);
        }

        return true;
    }


}



/**
 * Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true.
 * @member {String} issuer
 */
Certificate.prototype['issuer'] = undefined;

/**
 * Output only. The certificate is not valid after this time. Only present if parsed is true.
 * @member {String} notAfterTime
 */
Certificate.prototype['notAfterTime'] = undefined;

/**
 * Output only. The certificate is not valid before this time. Only present if parsed is true.
 * @member {String} notBeforeTime
 */
Certificate.prototype['notBeforeTime'] = undefined;

/**
 * Output only. True if the certificate was parsed successfully.
 * @member {Boolean} parsed
 */
Certificate.prototype['parsed'] = undefined;

/**
 * Required. The raw certificate bytes in DER format.
 * @member {Blob} rawDer
 */
Certificate.prototype['rawDer'] = undefined;

/**
 * Output only. The certificate serial number as a hex string. Only present if parsed is true.
 * @member {String} serialNumber
 */
Certificate.prototype['serialNumber'] = undefined;

/**
 * Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.
 * @member {String} sha256Fingerprint
 */
Certificate.prototype['sha256Fingerprint'] = undefined;

/**
 * Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true.
 * @member {String} subject
 */
Certificate.prototype['subject'] = undefined;

/**
 * Output only. The subject Alternative DNS names. Only present if parsed is true.
 * @member {Array.<String>} subjectAlternativeDnsNames
 */
Certificate.prototype['subjectAlternativeDnsNames'] = undefined;






export default Certificate;

