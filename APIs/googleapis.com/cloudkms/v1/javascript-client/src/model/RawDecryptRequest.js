/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RawDecryptRequest model module.
 * @module model/RawDecryptRequest
 * @version v1
 */
class RawDecryptRequest {
    /**
     * Constructs a new <code>RawDecryptRequest</code>.
     * Request message for KeyManagementService.RawDecrypt.
     * @alias module:model/RawDecryptRequest
     */
    constructor() { 
        
        RawDecryptRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RawDecryptRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RawDecryptRequest} obj Optional instance to populate.
     * @return {module:model/RawDecryptRequest} The populated <code>RawDecryptRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RawDecryptRequest();

            if (data.hasOwnProperty('additionalAuthenticatedData')) {
                obj['additionalAuthenticatedData'] = ApiClient.convertToType(data['additionalAuthenticatedData'], 'Blob');
            }
            if (data.hasOwnProperty('additionalAuthenticatedDataCrc32c')) {
                obj['additionalAuthenticatedDataCrc32c'] = ApiClient.convertToType(data['additionalAuthenticatedDataCrc32c'], 'String');
            }
            if (data.hasOwnProperty('ciphertext')) {
                obj['ciphertext'] = ApiClient.convertToType(data['ciphertext'], 'Blob');
            }
            if (data.hasOwnProperty('ciphertextCrc32c')) {
                obj['ciphertextCrc32c'] = ApiClient.convertToType(data['ciphertextCrc32c'], 'String');
            }
            if (data.hasOwnProperty('initializationVector')) {
                obj['initializationVector'] = ApiClient.convertToType(data['initializationVector'], 'Blob');
            }
            if (data.hasOwnProperty('initializationVectorCrc32c')) {
                obj['initializationVectorCrc32c'] = ApiClient.convertToType(data['initializationVectorCrc32c'], 'String');
            }
            if (data.hasOwnProperty('tagLength')) {
                obj['tagLength'] = ApiClient.convertToType(data['tagLength'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RawDecryptRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RawDecryptRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['additionalAuthenticatedDataCrc32c'] && !(typeof data['additionalAuthenticatedDataCrc32c'] === 'string' || data['additionalAuthenticatedDataCrc32c'] instanceof String)) {
            throw new Error("Expected the field `additionalAuthenticatedDataCrc32c` to be a primitive type in the JSON string but got " + data['additionalAuthenticatedDataCrc32c']);
        }
        // ensure the json data is a string
        if (data['ciphertextCrc32c'] && !(typeof data['ciphertextCrc32c'] === 'string' || data['ciphertextCrc32c'] instanceof String)) {
            throw new Error("Expected the field `ciphertextCrc32c` to be a primitive type in the JSON string but got " + data['ciphertextCrc32c']);
        }
        // ensure the json data is a string
        if (data['initializationVectorCrc32c'] && !(typeof data['initializationVectorCrc32c'] === 'string' || data['initializationVectorCrc32c'] instanceof String)) {
            throw new Error("Expected the field `initializationVectorCrc32c` to be a primitive type in the JSON string but got " + data['initializationVectorCrc32c']);
        }

        return true;
    }


}



/**
 * Optional. Optional data that must match the data originally supplied in RawEncryptRequest.additional_authenticated_data.
 * @member {Blob} additionalAuthenticatedData
 */
RawDecryptRequest.prototype['additionalAuthenticatedData'] = undefined;

/**
 * Optional. An optional CRC32C checksum of the RawDecryptRequest.additional_authenticated_data. If specified, KeyManagementService will verify the integrity of the received additional_authenticated_data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(additional_authenticated_data) is equal to additional_authenticated_data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
 * @member {String} additionalAuthenticatedDataCrc32c
 */
RawDecryptRequest.prototype['additionalAuthenticatedDataCrc32c'] = undefined;

/**
 * Required. The encrypted data originally returned in RawEncryptResponse.ciphertext.
 * @member {Blob} ciphertext
 */
RawDecryptRequest.prototype['ciphertext'] = undefined;

/**
 * Optional. An optional CRC32C checksum of the RawDecryptRequest.ciphertext. If specified, KeyManagementService will verify the integrity of the received ciphertext using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(ciphertext) is equal to ciphertext_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
 * @member {String} ciphertextCrc32c
 */
RawDecryptRequest.prototype['ciphertextCrc32c'] = undefined;

/**
 * Required. The initialization vector (IV) used during encryption, which must match the data originally provided in RawEncryptResponse.initialization_vector.
 * @member {Blob} initializationVector
 */
RawDecryptRequest.prototype['initializationVector'] = undefined;

/**
 * Optional. An optional CRC32C checksum of the RawDecryptRequest.initialization_vector. If specified, KeyManagementService will verify the integrity of the received initialization_vector using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(initialization_vector) is equal to initialization_vector_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
 * @member {String} initializationVectorCrc32c
 */
RawDecryptRequest.prototype['initializationVectorCrc32c'] = undefined;

/**
 * The length of the authentication tag that is appended to the end of the ciphertext. If unspecified (0), the default value for the key's algorithm will be used (for AES-GCM, the default value is 16).
 * @member {Number} tagLength
 */
RawDecryptRequest.prototype['tagLength'] = undefined;






export default RawDecryptRequest;

