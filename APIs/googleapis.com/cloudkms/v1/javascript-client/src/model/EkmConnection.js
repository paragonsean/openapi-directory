/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServiceResolver from './ServiceResolver';

/**
 * The EkmConnection model module.
 * @module model/EkmConnection
 * @version v1
 */
class EkmConnection {
    /**
     * Constructs a new <code>EkmConnection</code>.
     * An EkmConnection represents an individual EKM connection. It can be used for creating CryptoKeys and CryptoKeyVersions with a ProtectionLevel of EXTERNAL_VPC, as well as performing cryptographic operations using keys created within the EkmConnection.
     * @alias module:model/EkmConnection
     */
    constructor() { 
        
        EkmConnection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EkmConnection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EkmConnection} obj Optional instance to populate.
     * @return {module:model/EkmConnection} The populated <code>EkmConnection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EkmConnection();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('cryptoSpacePath')) {
                obj['cryptoSpacePath'] = ApiClient.convertToType(data['cryptoSpacePath'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('keyManagementMode')) {
                obj['keyManagementMode'] = ApiClient.convertToType(data['keyManagementMode'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('serviceResolvers')) {
                obj['serviceResolvers'] = ApiClient.convertToType(data['serviceResolvers'], [ServiceResolver]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EkmConnection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EkmConnection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['cryptoSpacePath'] && !(typeof data['cryptoSpacePath'] === 'string' || data['cryptoSpacePath'] instanceof String)) {
            throw new Error("Expected the field `cryptoSpacePath` to be a primitive type in the JSON string but got " + data['cryptoSpacePath']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['keyManagementMode'] && !(typeof data['keyManagementMode'] === 'string' || data['keyManagementMode'] instanceof String)) {
            throw new Error("Expected the field `keyManagementMode` to be a primitive type in the JSON string but got " + data['keyManagementMode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['serviceResolvers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['serviceResolvers'])) {
                throw new Error("Expected the field `serviceResolvers` to be an array in the JSON data but got " + data['serviceResolvers']);
            }
            // validate the optional field `serviceResolvers` (array)
            for (const item of data['serviceResolvers']) {
                ServiceResolver.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Output only. The time at which the EkmConnection was created.
 * @member {String} createTime
 */
EkmConnection.prototype['createTime'] = undefined;

/**
 * Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
 * @member {String} cryptoSpacePath
 */
EkmConnection.prototype['cryptoSpacePath'] = undefined;

/**
 * Optional. Etag of the currently stored EkmConnection.
 * @member {String} etag
 */
EkmConnection.prototype['etag'] = undefined;

/**
 * Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.
 * @member {module:model/EkmConnection.KeyManagementModeEnum} keyManagementMode
 */
EkmConnection.prototype['keyManagementMode'] = undefined;

/**
 * Output only. The resource name for the EkmConnection in the format `projects/_*_/locations/_*_/ekmConnections/_*`.
 * @member {String} name
 */
EkmConnection.prototype['name'] = undefined;

/**
 * A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.
 * @member {Array.<module:model/ServiceResolver>} serviceResolvers
 */
EkmConnection.prototype['serviceResolvers'] = undefined;





/**
 * Allowed values for the <code>keyManagementMode</code> property.
 * @enum {String}
 * @readonly
 */
EkmConnection['KeyManagementModeEnum'] = {

    /**
     * value: "KEY_MANAGEMENT_MODE_UNSPECIFIED"
     * @const
     */
    "KEY_MANAGEMENT_MODE_UNSPECIFIED": "KEY_MANAGEMENT_MODE_UNSPECIFIED",

    /**
     * value: "MANUAL"
     * @const
     */
    "MANUAL": "MANUAL",

    /**
     * value: "CLOUD_KMS"
     * @const
     */
    "CLOUD_KMS": "CLOUD_KMS"
};



export default EkmConnection;

