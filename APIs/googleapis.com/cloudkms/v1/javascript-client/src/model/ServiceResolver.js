/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Certificate from './Certificate';

/**
 * The ServiceResolver model module.
 * @module model/ServiceResolver
 * @version v1
 */
class ServiceResolver {
    /**
     * Constructs a new <code>ServiceResolver</code>.
     * A ServiceResolver represents an EKM replica that can be reached within an EkmConnection.
     * @alias module:model/ServiceResolver
     */
    constructor() { 
        
        ServiceResolver.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceResolver</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceResolver} obj Optional instance to populate.
     * @return {module:model/ServiceResolver} The populated <code>ServiceResolver</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceResolver();

            if (data.hasOwnProperty('endpointFilter')) {
                obj['endpointFilter'] = ApiClient.convertToType(data['endpointFilter'], 'String');
            }
            if (data.hasOwnProperty('hostname')) {
                obj['hostname'] = ApiClient.convertToType(data['hostname'], 'String');
            }
            if (data.hasOwnProperty('serverCertificates')) {
                obj['serverCertificates'] = ApiClient.convertToType(data['serverCertificates'], [Certificate]);
            }
            if (data.hasOwnProperty('serviceDirectoryService')) {
                obj['serviceDirectoryService'] = ApiClient.convertToType(data['serviceDirectoryService'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceResolver</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceResolver</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endpointFilter'] && !(typeof data['endpointFilter'] === 'string' || data['endpointFilter'] instanceof String)) {
            throw new Error("Expected the field `endpointFilter` to be a primitive type in the JSON string but got " + data['endpointFilter']);
        }
        // ensure the json data is a string
        if (data['hostname'] && !(typeof data['hostname'] === 'string' || data['hostname'] instanceof String)) {
            throw new Error("Expected the field `hostname` to be a primitive type in the JSON string but got " + data['hostname']);
        }
        if (data['serverCertificates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['serverCertificates'])) {
                throw new Error("Expected the field `serverCertificates` to be an array in the JSON data but got " + data['serverCertificates']);
            }
            // validate the optional field `serverCertificates` (array)
            for (const item of data['serverCertificates']) {
                Certificate.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serviceDirectoryService'] && !(typeof data['serviceDirectoryService'] === 'string' || data['serviceDirectoryService'] instanceof String)) {
            throw new Error("Expected the field `serviceDirectoryService` to be a primitive type in the JSON string but got " + data['serviceDirectoryService']);
        }

        return true;
    }


}



/**
 * Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.
 * @member {String} endpointFilter
 */
ServiceResolver.prototype['endpointFilter'] = undefined;

/**
 * Required. The hostname of the EKM replica used at TLS and HTTP layers.
 * @member {String} hostname
 */
ServiceResolver.prototype['hostname'] = undefined;

/**
 * Required. A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.
 * @member {Array.<module:model/Certificate>} serverCertificates
 */
ServiceResolver.prototype['serverCertificates'] = undefined;

/**
 * Required. The resource name of the Service Directory service pointing to an EKM replica, in the format `projects/_*_/locations/_*_/namespaces/_*_/services/_*`.
 * @member {String} serviceDirectoryService
 */
ServiceResolver.prototype['serviceDirectoryService'] = undefined;






export default ServiceResolver;

