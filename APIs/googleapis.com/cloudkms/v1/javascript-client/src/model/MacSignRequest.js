/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MacSignRequest model module.
 * @module model/MacSignRequest
 * @version v1
 */
class MacSignRequest {
    /**
     * Constructs a new <code>MacSignRequest</code>.
     * Request message for KeyManagementService.MacSign.
     * @alias module:model/MacSignRequest
     */
    constructor() { 
        
        MacSignRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MacSignRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MacSignRequest} obj Optional instance to populate.
     * @return {module:model/MacSignRequest} The populated <code>MacSignRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MacSignRequest();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'Blob');
            }
            if (data.hasOwnProperty('dataCrc32c')) {
                obj['dataCrc32c'] = ApiClient.convertToType(data['dataCrc32c'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MacSignRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MacSignRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataCrc32c'] && !(typeof data['dataCrc32c'] === 'string' || data['dataCrc32c'] instanceof String)) {
            throw new Error("Expected the field `dataCrc32c` to be a primitive type in the JSON string but got " + data['dataCrc32c']);
        }

        return true;
    }


}



/**
 * Required. The data to sign. The MAC tag is computed over this data field based on the specific algorithm.
 * @member {Blob} data
 */
MacSignRequest.prototype['data'] = undefined;

/**
 * Optional. An optional CRC32C checksum of the MacSignRequest.data. If specified, KeyManagementService will verify the integrity of the received MacSignRequest.data using this checksum. KeyManagementService will report an error if the checksum verification fails. If you receive a checksum error, your client should verify that CRC32C(MacSignRequest.data) is equal to MacSignRequest.data_crc32c, and if so, perform a limited number of retries. A persistent mismatch may indicate an issue in your computation of the CRC32C checksum. Note: This field is defined as int64 for reasons of compatibility across different languages. However, it is a non-negative integer, which will never exceed 2^32-1, and can be safely downconverted to uint32 in languages that support this type.
 * @member {String} dataCrc32c
 */
MacSignRequest.prototype['dataCrc32c'] = undefined;






export default MacSignRequest;

