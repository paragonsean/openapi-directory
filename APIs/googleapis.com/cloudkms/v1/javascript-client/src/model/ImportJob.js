/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyOperationAttestation from './KeyOperationAttestation';
import WrappingPublicKey from './WrappingPublicKey';

/**
 * The ImportJob model module.
 * @module model/ImportJob
 * @version v1
 */
class ImportJob {
    /**
     * Constructs a new <code>ImportJob</code>.
     * An ImportJob can be used to create CryptoKeys and CryptoKeyVersions using pre-existing key material, generated outside of Cloud KMS. When an ImportJob is created, Cloud KMS will generate a \&quot;wrapping key\&quot;, which is a public/private key pair. You use the wrapping key to encrypt (also known as wrap) the pre-existing key material to protect it during the import process. The nature of the wrapping key depends on the choice of import_method. When the wrapping key generation is complete, the state will be set to ACTIVE and the public_key can be fetched. The fetched public key can then be used to wrap your pre-existing key material. Once the key material is wrapped, it can be imported into a new CryptoKeyVersion in an existing CryptoKey by calling ImportCryptoKeyVersion. Multiple CryptoKeyVersions can be imported with a single ImportJob. Cloud KMS uses the private key portion of the wrapping key to unwrap the key material. Only Cloud KMS has access to the private key. An ImportJob expires 3 days after it is created. Once expired, Cloud KMS will no longer be able to import or unwrap any key material that was wrapped with the ImportJob&#39;s public key. For more information, see [Importing a key](https://cloud.google.com/kms/docs/importing-a-key).
     * @alias module:model/ImportJob
     */
    constructor() { 
        
        ImportJob.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImportJob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportJob} obj Optional instance to populate.
     * @return {module:model/ImportJob} The populated <code>ImportJob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportJob();

            if (data.hasOwnProperty('attestation')) {
                obj['attestation'] = KeyOperationAttestation.constructFromObject(data['attestation']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('expireEventTime')) {
                obj['expireEventTime'] = ApiClient.convertToType(data['expireEventTime'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('generateTime')) {
                obj['generateTime'] = ApiClient.convertToType(data['generateTime'], 'String');
            }
            if (data.hasOwnProperty('importMethod')) {
                obj['importMethod'] = ApiClient.convertToType(data['importMethod'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('protectionLevel')) {
                obj['protectionLevel'] = ApiClient.convertToType(data['protectionLevel'], 'String');
            }
            if (data.hasOwnProperty('publicKey')) {
                obj['publicKey'] = WrappingPublicKey.constructFromObject(data['publicKey']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportJob</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportJob</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attestation`
        if (data['attestation']) { // data not null
          KeyOperationAttestation.validateJSON(data['attestation']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['expireEventTime'] && !(typeof data['expireEventTime'] === 'string' || data['expireEventTime'] instanceof String)) {
            throw new Error("Expected the field `expireEventTime` to be a primitive type in the JSON string but got " + data['expireEventTime']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // ensure the json data is a string
        if (data['generateTime'] && !(typeof data['generateTime'] === 'string' || data['generateTime'] instanceof String)) {
            throw new Error("Expected the field `generateTime` to be a primitive type in the JSON string but got " + data['generateTime']);
        }
        // ensure the json data is a string
        if (data['importMethod'] && !(typeof data['importMethod'] === 'string' || data['importMethod'] instanceof String)) {
            throw new Error("Expected the field `importMethod` to be a primitive type in the JSON string but got " + data['importMethod']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['protectionLevel'] && !(typeof data['protectionLevel'] === 'string' || data['protectionLevel'] instanceof String)) {
            throw new Error("Expected the field `protectionLevel` to be a primitive type in the JSON string but got " + data['protectionLevel']);
        }
        // validate the optional field `publicKey`
        if (data['publicKey']) { // data not null
          WrappingPublicKey.validateJSON(data['publicKey']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * @member {module:model/KeyOperationAttestation} attestation
 */
ImportJob.prototype['attestation'] = undefined;

/**
 * Output only. The time at which this ImportJob was created.
 * @member {String} createTime
 */
ImportJob.prototype['createTime'] = undefined;

/**
 * Output only. The time this ImportJob expired. Only present if state is EXPIRED.
 * @member {String} expireEventTime
 */
ImportJob.prototype['expireEventTime'] = undefined;

/**
 * Output only. The time at which this ImportJob is scheduled for expiration and can no longer be used to import key material.
 * @member {String} expireTime
 */
ImportJob.prototype['expireTime'] = undefined;

/**
 * Output only. The time this ImportJob's key material was generated.
 * @member {String} generateTime
 */
ImportJob.prototype['generateTime'] = undefined;

/**
 * Required. Immutable. The wrapping method to be used for incoming key material.
 * @member {module:model/ImportJob.ImportMethodEnum} importMethod
 */
ImportJob.prototype['importMethod'] = undefined;

/**
 * Output only. The resource name for this ImportJob in the format `projects/_*_/locations/_*_/keyRings/_*_/importJobs/_*`.
 * @member {String} name
 */
ImportJob.prototype['name'] = undefined;

/**
 * Required. Immutable. The protection level of the ImportJob. This must match the protection_level of the version_template on the CryptoKey you attempt to import into.
 * @member {module:model/ImportJob.ProtectionLevelEnum} protectionLevel
 */
ImportJob.prototype['protectionLevel'] = undefined;

/**
 * @member {module:model/WrappingPublicKey} publicKey
 */
ImportJob.prototype['publicKey'] = undefined;

/**
 * Output only. The current state of the ImportJob, indicating if it can be used.
 * @member {module:model/ImportJob.StateEnum} state
 */
ImportJob.prototype['state'] = undefined;





/**
 * Allowed values for the <code>importMethod</code> property.
 * @enum {String}
 * @readonly
 */
ImportJob['ImportMethodEnum'] = {

    /**
     * value: "IMPORT_METHOD_UNSPECIFIED"
     * @const
     */
    "IMPORT_METHOD_UNSPECIFIED": "IMPORT_METHOD_UNSPECIFIED",

    /**
     * value: "RSA_OAEP_3072_SHA1_AES_256"
     * @const
     */
    "RSA_OAEP_3072_SHA1_AES_256": "RSA_OAEP_3072_SHA1_AES_256",

    /**
     * value: "RSA_OAEP_4096_SHA1_AES_256"
     * @const
     */
    "RSA_OAEP_4096_SHA1_AES_256": "RSA_OAEP_4096_SHA1_AES_256",

    /**
     * value: "RSA_OAEP_3072_SHA256_AES_256"
     * @const
     */
    "RSA_OAEP_3072_SHA256_AES_256": "RSA_OAEP_3072_SHA256_AES_256",

    /**
     * value: "RSA_OAEP_4096_SHA256_AES_256"
     * @const
     */
    "RSA_OAEP_4096_SHA256_AES_256": "RSA_OAEP_4096_SHA256_AES_256",

    /**
     * value: "RSA_OAEP_3072_SHA256"
     * @const
     */
    "RSA_OAEP_3072_SHA256": "RSA_OAEP_3072_SHA256",

    /**
     * value: "RSA_OAEP_4096_SHA256"
     * @const
     */
    "RSA_OAEP_4096_SHA256": "RSA_OAEP_4096_SHA256"
};


/**
 * Allowed values for the <code>protectionLevel</code> property.
 * @enum {String}
 * @readonly
 */
ImportJob['ProtectionLevelEnum'] = {

    /**
     * value: "PROTECTION_LEVEL_UNSPECIFIED"
     * @const
     */
    "PROTECTION_LEVEL_UNSPECIFIED": "PROTECTION_LEVEL_UNSPECIFIED",

    /**
     * value: "SOFTWARE"
     * @const
     */
    "SOFTWARE": "SOFTWARE",

    /**
     * value: "HSM"
     * @const
     */
    "HSM": "HSM",

    /**
     * value: "EXTERNAL"
     * @const
     */
    "EXTERNAL": "EXTERNAL",

    /**
     * value: "EXTERNAL_VPC"
     * @const
     */
    "EXTERNAL_VPC": "EXTERNAL_VPC"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ImportJob['StateEnum'] = {

    /**
     * value: "IMPORT_JOB_STATE_UNSPECIFIED"
     * @const
     */
    "IMPORT_JOB_STATE_UNSPECIFIED": "IMPORT_JOB_STATE_UNSPECIFIED",

    /**
     * value: "PENDING_GENERATION"
     * @const
     */
    "PENDING_GENERATION": "PENDING_GENERATION",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "EXPIRED"
     * @const
     */
    "EXPIRED": "EXPIRED"
};



export default ImportJob;

