/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceResolver.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceResolver::OAIServiceResolver(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceResolver::OAIServiceResolver() {
    this->initializeModel();
}

OAIServiceResolver::~OAIServiceResolver() {}

void OAIServiceResolver::initializeModel() {

    m_endpoint_filter_isSet = false;
    m_endpoint_filter_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_server_certificates_isSet = false;
    m_server_certificates_isValid = false;

    m_service_directory_service_isSet = false;
    m_service_directory_service_isValid = false;
}

void OAIServiceResolver::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceResolver::fromJsonObject(QJsonObject json) {

    m_endpoint_filter_isValid = ::OpenAPI::fromJsonValue(m_endpoint_filter, json[QString("endpointFilter")]);
    m_endpoint_filter_isSet = !json[QString("endpointFilter")].isNull() && m_endpoint_filter_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_server_certificates_isValid = ::OpenAPI::fromJsonValue(m_server_certificates, json[QString("serverCertificates")]);
    m_server_certificates_isSet = !json[QString("serverCertificates")].isNull() && m_server_certificates_isValid;

    m_service_directory_service_isValid = ::OpenAPI::fromJsonValue(m_service_directory_service, json[QString("serviceDirectoryService")]);
    m_service_directory_service_isSet = !json[QString("serviceDirectoryService")].isNull() && m_service_directory_service_isValid;
}

QString OAIServiceResolver::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceResolver::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_filter_isSet) {
        obj.insert(QString("endpointFilter"), ::OpenAPI::toJsonValue(m_endpoint_filter));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_server_certificates.size() > 0) {
        obj.insert(QString("serverCertificates"), ::OpenAPI::toJsonValue(m_server_certificates));
    }
    if (m_service_directory_service_isSet) {
        obj.insert(QString("serviceDirectoryService"), ::OpenAPI::toJsonValue(m_service_directory_service));
    }
    return obj;
}

QString OAIServiceResolver::getEndpointFilter() const {
    return m_endpoint_filter;
}
void OAIServiceResolver::setEndpointFilter(const QString &endpoint_filter) {
    m_endpoint_filter = endpoint_filter;
    m_endpoint_filter_isSet = true;
}

bool OAIServiceResolver::is_endpoint_filter_Set() const{
    return m_endpoint_filter_isSet;
}

bool OAIServiceResolver::is_endpoint_filter_Valid() const{
    return m_endpoint_filter_isValid;
}

QString OAIServiceResolver::getHostname() const {
    return m_hostname;
}
void OAIServiceResolver::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIServiceResolver::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIServiceResolver::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QList<OAICertificate> OAIServiceResolver::getServerCertificates() const {
    return m_server_certificates;
}
void OAIServiceResolver::setServerCertificates(const QList<OAICertificate> &server_certificates) {
    m_server_certificates = server_certificates;
    m_server_certificates_isSet = true;
}

bool OAIServiceResolver::is_server_certificates_Set() const{
    return m_server_certificates_isSet;
}

bool OAIServiceResolver::is_server_certificates_Valid() const{
    return m_server_certificates_isValid;
}

QString OAIServiceResolver::getServiceDirectoryService() const {
    return m_service_directory_service;
}
void OAIServiceResolver::setServiceDirectoryService(const QString &service_directory_service) {
    m_service_directory_service = service_directory_service;
    m_service_directory_service_isSet = true;
}

bool OAIServiceResolver::is_service_directory_service_Set() const{
    return m_service_directory_service_isSet;
}

bool OAIServiceResolver::is_service_directory_service_Valid() const{
    return m_service_directory_service_isValid;
}

bool OAIServiceResolver::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_directory_service_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceResolver::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
