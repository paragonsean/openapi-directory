/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRawEncryptResponse.h
 *
 * Response message for KeyManagementService.RawEncrypt.
 */

#ifndef OAIRawEncryptResponse_H
#define OAIRawEncryptResponse_H

#include <QJsonObject>

#include <QByteArray>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRawEncryptResponse : public OAIObject {
public:
    OAIRawEncryptResponse();
    OAIRawEncryptResponse(QString json);
    ~OAIRawEncryptResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QByteArray getCiphertext() const;
    void setCiphertext(const QByteArray &ciphertext);
    bool is_ciphertext_Set() const;
    bool is_ciphertext_Valid() const;

    QString getCiphertextCrc32c() const;
    void setCiphertextCrc32c(const QString &ciphertext_crc32c);
    bool is_ciphertext_crc32c_Set() const;
    bool is_ciphertext_crc32c_Valid() const;

    QByteArray getInitializationVector() const;
    void setInitializationVector(const QByteArray &initialization_vector);
    bool is_initialization_vector_Set() const;
    bool is_initialization_vector_Valid() const;

    QString getInitializationVectorCrc32c() const;
    void setInitializationVectorCrc32c(const QString &initialization_vector_crc32c);
    bool is_initialization_vector_crc32c_Set() const;
    bool is_initialization_vector_crc32c_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getProtectionLevel() const;
    void setProtectionLevel(const QString &protection_level);
    bool is_protection_level_Set() const;
    bool is_protection_level_Valid() const;

    qint32 getTagLength() const;
    void setTagLength(const qint32 &tag_length);
    bool is_tag_length_Set() const;
    bool is_tag_length_Valid() const;

    bool isVerifiedAdditionalAuthenticatedDataCrc32c() const;
    void setVerifiedAdditionalAuthenticatedDataCrc32c(const bool &verified_additional_authenticated_data_crc32c);
    bool is_verified_additional_authenticated_data_crc32c_Set() const;
    bool is_verified_additional_authenticated_data_crc32c_Valid() const;

    bool isVerifiedInitializationVectorCrc32c() const;
    void setVerifiedInitializationVectorCrc32c(const bool &verified_initialization_vector_crc32c);
    bool is_verified_initialization_vector_crc32c_Set() const;
    bool is_verified_initialization_vector_crc32c_Valid() const;

    bool isVerifiedPlaintextCrc32c() const;
    void setVerifiedPlaintextCrc32c(const bool &verified_plaintext_crc32c);
    bool is_verified_plaintext_crc32c_Set() const;
    bool is_verified_plaintext_crc32c_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QByteArray m_ciphertext;
    bool m_ciphertext_isSet;
    bool m_ciphertext_isValid;

    QString m_ciphertext_crc32c;
    bool m_ciphertext_crc32c_isSet;
    bool m_ciphertext_crc32c_isValid;

    QByteArray m_initialization_vector;
    bool m_initialization_vector_isSet;
    bool m_initialization_vector_isValid;

    QString m_initialization_vector_crc32c;
    bool m_initialization_vector_crc32c_isSet;
    bool m_initialization_vector_crc32c_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_protection_level;
    bool m_protection_level_isSet;
    bool m_protection_level_isValid;

    qint32 m_tag_length;
    bool m_tag_length_isSet;
    bool m_tag_length_isValid;

    bool m_verified_additional_authenticated_data_crc32c;
    bool m_verified_additional_authenticated_data_crc32c_isSet;
    bool m_verified_additional_authenticated_data_crc32c_isValid;

    bool m_verified_initialization_vector_crc32c;
    bool m_verified_initialization_vector_crc32c_isSet;
    bool m_verified_initialization_vector_crc32c_isValid;

    bool m_verified_plaintext_crc32c;
    bool m_verified_plaintext_crc32c_isSet;
    bool m_verified_plaintext_crc32c_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRawEncryptResponse)

#endif // OAIRawEncryptResponse_H
