/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsymmetricSignRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsymmetricSignRequest::OAIAsymmetricSignRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsymmetricSignRequest::OAIAsymmetricSignRequest() {
    this->initializeModel();
}

OAIAsymmetricSignRequest::~OAIAsymmetricSignRequest() {}

void OAIAsymmetricSignRequest::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_data_crc32c_isSet = false;
    m_data_crc32c_isValid = false;

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_digest_crc32c_isSet = false;
    m_digest_crc32c_isValid = false;
}

void OAIAsymmetricSignRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsymmetricSignRequest::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_data_crc32c_isValid = ::OpenAPI::fromJsonValue(m_data_crc32c, json[QString("dataCrc32c")]);
    m_data_crc32c_isSet = !json[QString("dataCrc32c")].isNull() && m_data_crc32c_isValid;

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_digest_crc32c_isValid = ::OpenAPI::fromJsonValue(m_digest_crc32c, json[QString("digestCrc32c")]);
    m_digest_crc32c_isSet = !json[QString("digestCrc32c")].isNull() && m_digest_crc32c_isValid;
}

QString OAIAsymmetricSignRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsymmetricSignRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_data_crc32c_isSet) {
        obj.insert(QString("dataCrc32c"), ::OpenAPI::toJsonValue(m_data_crc32c));
    }
    if (m_digest.isSet()) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_digest_crc32c_isSet) {
        obj.insert(QString("digestCrc32c"), ::OpenAPI::toJsonValue(m_digest_crc32c));
    }
    return obj;
}

QByteArray OAIAsymmetricSignRequest::getData() const {
    return m_data;
}
void OAIAsymmetricSignRequest::setData(const QByteArray &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIAsymmetricSignRequest::is_data_Set() const{
    return m_data_isSet;
}

bool OAIAsymmetricSignRequest::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIAsymmetricSignRequest::getDataCrc32c() const {
    return m_data_crc32c;
}
void OAIAsymmetricSignRequest::setDataCrc32c(const QString &data_crc32c) {
    m_data_crc32c = data_crc32c;
    m_data_crc32c_isSet = true;
}

bool OAIAsymmetricSignRequest::is_data_crc32c_Set() const{
    return m_data_crc32c_isSet;
}

bool OAIAsymmetricSignRequest::is_data_crc32c_Valid() const{
    return m_data_crc32c_isValid;
}

OAIDigest OAIAsymmetricSignRequest::getDigest() const {
    return m_digest;
}
void OAIAsymmetricSignRequest::setDigest(const OAIDigest &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAIAsymmetricSignRequest::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAIAsymmetricSignRequest::is_digest_Valid() const{
    return m_digest_isValid;
}

QString OAIAsymmetricSignRequest::getDigestCrc32c() const {
    return m_digest_crc32c;
}
void OAIAsymmetricSignRequest::setDigestCrc32c(const QString &digest_crc32c) {
    m_digest_crc32c = digest_crc32c;
    m_digest_crc32c_isSet = true;
}

bool OAIAsymmetricSignRequest::is_digest_crc32c_Set() const{
    return m_digest_crc32c_isSet;
}

bool OAIAsymmetricSignRequest::is_digest_crc32c_Valid() const{
    return m_digest_crc32c_isValid;
}

bool OAIAsymmetricSignRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_digest_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsymmetricSignRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
