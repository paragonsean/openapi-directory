/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMacVerifyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMacVerifyRequest::OAIMacVerifyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMacVerifyRequest::OAIMacVerifyRequest() {
    this->initializeModel();
}

OAIMacVerifyRequest::~OAIMacVerifyRequest() {}

void OAIMacVerifyRequest::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_data_crc32c_isSet = false;
    m_data_crc32c_isValid = false;

    m_mac_isSet = false;
    m_mac_isValid = false;

    m_mac_crc32c_isSet = false;
    m_mac_crc32c_isValid = false;
}

void OAIMacVerifyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMacVerifyRequest::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_data_crc32c_isValid = ::OpenAPI::fromJsonValue(m_data_crc32c, json[QString("dataCrc32c")]);
    m_data_crc32c_isSet = !json[QString("dataCrc32c")].isNull() && m_data_crc32c_isValid;

    m_mac_isValid = ::OpenAPI::fromJsonValue(m_mac, json[QString("mac")]);
    m_mac_isSet = !json[QString("mac")].isNull() && m_mac_isValid;

    m_mac_crc32c_isValid = ::OpenAPI::fromJsonValue(m_mac_crc32c, json[QString("macCrc32c")]);
    m_mac_crc32c_isSet = !json[QString("macCrc32c")].isNull() && m_mac_crc32c_isValid;
}

QString OAIMacVerifyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMacVerifyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_data_crc32c_isSet) {
        obj.insert(QString("dataCrc32c"), ::OpenAPI::toJsonValue(m_data_crc32c));
    }
    if (m_mac_isSet) {
        obj.insert(QString("mac"), ::OpenAPI::toJsonValue(m_mac));
    }
    if (m_mac_crc32c_isSet) {
        obj.insert(QString("macCrc32c"), ::OpenAPI::toJsonValue(m_mac_crc32c));
    }
    return obj;
}

QByteArray OAIMacVerifyRequest::getData() const {
    return m_data;
}
void OAIMacVerifyRequest::setData(const QByteArray &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIMacVerifyRequest::is_data_Set() const{
    return m_data_isSet;
}

bool OAIMacVerifyRequest::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIMacVerifyRequest::getDataCrc32c() const {
    return m_data_crc32c;
}
void OAIMacVerifyRequest::setDataCrc32c(const QString &data_crc32c) {
    m_data_crc32c = data_crc32c;
    m_data_crc32c_isSet = true;
}

bool OAIMacVerifyRequest::is_data_crc32c_Set() const{
    return m_data_crc32c_isSet;
}

bool OAIMacVerifyRequest::is_data_crc32c_Valid() const{
    return m_data_crc32c_isValid;
}

QByteArray OAIMacVerifyRequest::getMac() const {
    return m_mac;
}
void OAIMacVerifyRequest::setMac(const QByteArray &mac) {
    m_mac = mac;
    m_mac_isSet = true;
}

bool OAIMacVerifyRequest::is_mac_Set() const{
    return m_mac_isSet;
}

bool OAIMacVerifyRequest::is_mac_Valid() const{
    return m_mac_isValid;
}

QString OAIMacVerifyRequest::getMacCrc32c() const {
    return m_mac_crc32c;
}
void OAIMacVerifyRequest::setMacCrc32c(const QString &mac_crc32c) {
    m_mac_crc32c = mac_crc32c;
    m_mac_crc32c_isSet = true;
}

bool OAIMacVerifyRequest::is_mac_crc32c_Set() const{
    return m_mac_crc32c_isSet;
}

bool OAIMacVerifyRequest::is_mac_crc32c_Valid() const{
    return m_mac_crc32c_isValid;
}

bool OAIMacVerifyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMacVerifyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
