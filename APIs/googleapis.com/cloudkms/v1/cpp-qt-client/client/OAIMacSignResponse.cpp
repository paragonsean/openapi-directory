/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMacSignResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMacSignResponse::OAIMacSignResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMacSignResponse::OAIMacSignResponse() {
    this->initializeModel();
}

OAIMacSignResponse::~OAIMacSignResponse() {}

void OAIMacSignResponse::initializeModel() {

    m_mac_isSet = false;
    m_mac_isValid = false;

    m_mac_crc32c_isSet = false;
    m_mac_crc32c_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_protection_level_isSet = false;
    m_protection_level_isValid = false;

    m_verified_data_crc32c_isSet = false;
    m_verified_data_crc32c_isValid = false;
}

void OAIMacSignResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMacSignResponse::fromJsonObject(QJsonObject json) {

    m_mac_isValid = ::OpenAPI::fromJsonValue(m_mac, json[QString("mac")]);
    m_mac_isSet = !json[QString("mac")].isNull() && m_mac_isValid;

    m_mac_crc32c_isValid = ::OpenAPI::fromJsonValue(m_mac_crc32c, json[QString("macCrc32c")]);
    m_mac_crc32c_isSet = !json[QString("macCrc32c")].isNull() && m_mac_crc32c_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_protection_level_isValid = ::OpenAPI::fromJsonValue(m_protection_level, json[QString("protectionLevel")]);
    m_protection_level_isSet = !json[QString("protectionLevel")].isNull() && m_protection_level_isValid;

    m_verified_data_crc32c_isValid = ::OpenAPI::fromJsonValue(m_verified_data_crc32c, json[QString("verifiedDataCrc32c")]);
    m_verified_data_crc32c_isSet = !json[QString("verifiedDataCrc32c")].isNull() && m_verified_data_crc32c_isValid;
}

QString OAIMacSignResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMacSignResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_mac_isSet) {
        obj.insert(QString("mac"), ::OpenAPI::toJsonValue(m_mac));
    }
    if (m_mac_crc32c_isSet) {
        obj.insert(QString("macCrc32c"), ::OpenAPI::toJsonValue(m_mac_crc32c));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protection_level_isSet) {
        obj.insert(QString("protectionLevel"), ::OpenAPI::toJsonValue(m_protection_level));
    }
    if (m_verified_data_crc32c_isSet) {
        obj.insert(QString("verifiedDataCrc32c"), ::OpenAPI::toJsonValue(m_verified_data_crc32c));
    }
    return obj;
}

QByteArray OAIMacSignResponse::getMac() const {
    return m_mac;
}
void OAIMacSignResponse::setMac(const QByteArray &mac) {
    m_mac = mac;
    m_mac_isSet = true;
}

bool OAIMacSignResponse::is_mac_Set() const{
    return m_mac_isSet;
}

bool OAIMacSignResponse::is_mac_Valid() const{
    return m_mac_isValid;
}

QString OAIMacSignResponse::getMacCrc32c() const {
    return m_mac_crc32c;
}
void OAIMacSignResponse::setMacCrc32c(const QString &mac_crc32c) {
    m_mac_crc32c = mac_crc32c;
    m_mac_crc32c_isSet = true;
}

bool OAIMacSignResponse::is_mac_crc32c_Set() const{
    return m_mac_crc32c_isSet;
}

bool OAIMacSignResponse::is_mac_crc32c_Valid() const{
    return m_mac_crc32c_isValid;
}

QString OAIMacSignResponse::getName() const {
    return m_name;
}
void OAIMacSignResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMacSignResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMacSignResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMacSignResponse::getProtectionLevel() const {
    return m_protection_level;
}
void OAIMacSignResponse::setProtectionLevel(const QString &protection_level) {
    m_protection_level = protection_level;
    m_protection_level_isSet = true;
}

bool OAIMacSignResponse::is_protection_level_Set() const{
    return m_protection_level_isSet;
}

bool OAIMacSignResponse::is_protection_level_Valid() const{
    return m_protection_level_isValid;
}

bool OAIMacSignResponse::isVerifiedDataCrc32c() const {
    return m_verified_data_crc32c;
}
void OAIMacSignResponse::setVerifiedDataCrc32c(const bool &verified_data_crc32c) {
    m_verified_data_crc32c = verified_data_crc32c;
    m_verified_data_crc32c_isSet = true;
}

bool OAIMacSignResponse::is_verified_data_crc32c_Set() const{
    return m_verified_data_crc32c_isSet;
}

bool OAIMacSignResponse::is_verified_data_crc32c_Valid() const{
    return m_verified_data_crc32c_isValid;
}

bool OAIMacSignResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_data_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMacSignResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
