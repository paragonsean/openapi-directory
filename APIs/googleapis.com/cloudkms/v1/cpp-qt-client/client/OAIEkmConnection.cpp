/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEkmConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEkmConnection::OAIEkmConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEkmConnection::OAIEkmConnection() {
    this->initializeModel();
}

OAIEkmConnection::~OAIEkmConnection() {}

void OAIEkmConnection::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_crypto_space_path_isSet = false;
    m_crypto_space_path_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_key_management_mode_isSet = false;
    m_key_management_mode_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_service_resolvers_isSet = false;
    m_service_resolvers_isValid = false;
}

void OAIEkmConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEkmConnection::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_crypto_space_path_isValid = ::OpenAPI::fromJsonValue(m_crypto_space_path, json[QString("cryptoSpacePath")]);
    m_crypto_space_path_isSet = !json[QString("cryptoSpacePath")].isNull() && m_crypto_space_path_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_key_management_mode_isValid = ::OpenAPI::fromJsonValue(m_key_management_mode, json[QString("keyManagementMode")]);
    m_key_management_mode_isSet = !json[QString("keyManagementMode")].isNull() && m_key_management_mode_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_service_resolvers_isValid = ::OpenAPI::fromJsonValue(m_service_resolvers, json[QString("serviceResolvers")]);
    m_service_resolvers_isSet = !json[QString("serviceResolvers")].isNull() && m_service_resolvers_isValid;
}

QString OAIEkmConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEkmConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_crypto_space_path_isSet) {
        obj.insert(QString("cryptoSpacePath"), ::OpenAPI::toJsonValue(m_crypto_space_path));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_key_management_mode_isSet) {
        obj.insert(QString("keyManagementMode"), ::OpenAPI::toJsonValue(m_key_management_mode));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_service_resolvers.size() > 0) {
        obj.insert(QString("serviceResolvers"), ::OpenAPI::toJsonValue(m_service_resolvers));
    }
    return obj;
}

QString OAIEkmConnection::getCreateTime() const {
    return m_create_time;
}
void OAIEkmConnection::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIEkmConnection::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIEkmConnection::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIEkmConnection::getCryptoSpacePath() const {
    return m_crypto_space_path;
}
void OAIEkmConnection::setCryptoSpacePath(const QString &crypto_space_path) {
    m_crypto_space_path = crypto_space_path;
    m_crypto_space_path_isSet = true;
}

bool OAIEkmConnection::is_crypto_space_path_Set() const{
    return m_crypto_space_path_isSet;
}

bool OAIEkmConnection::is_crypto_space_path_Valid() const{
    return m_crypto_space_path_isValid;
}

QString OAIEkmConnection::getEtag() const {
    return m_etag;
}
void OAIEkmConnection::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIEkmConnection::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIEkmConnection::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIEkmConnection::getKeyManagementMode() const {
    return m_key_management_mode;
}
void OAIEkmConnection::setKeyManagementMode(const QString &key_management_mode) {
    m_key_management_mode = key_management_mode;
    m_key_management_mode_isSet = true;
}

bool OAIEkmConnection::is_key_management_mode_Set() const{
    return m_key_management_mode_isSet;
}

bool OAIEkmConnection::is_key_management_mode_Valid() const{
    return m_key_management_mode_isValid;
}

QString OAIEkmConnection::getName() const {
    return m_name;
}
void OAIEkmConnection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEkmConnection::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEkmConnection::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIServiceResolver> OAIEkmConnection::getServiceResolvers() const {
    return m_service_resolvers;
}
void OAIEkmConnection::setServiceResolvers(const QList<OAIServiceResolver> &service_resolvers) {
    m_service_resolvers = service_resolvers;
    m_service_resolvers_isSet = true;
}

bool OAIEkmConnection::is_service_resolvers_Set() const{
    return m_service_resolvers_isSet;
}

bool OAIEkmConnection::is_service_resolvers_Valid() const{
    return m_service_resolvers_isValid;
}

bool OAIEkmConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crypto_space_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_management_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_resolvers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEkmConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
