/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationMetadata::OAILocationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationMetadata::OAILocationMetadata() {
    this->initializeModel();
}

OAILocationMetadata::~OAILocationMetadata() {}

void OAILocationMetadata::initializeModel() {

    m_ekm_available_isSet = false;
    m_ekm_available_isValid = false;

    m_hsm_available_isSet = false;
    m_hsm_available_isValid = false;
}

void OAILocationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocationMetadata::fromJsonObject(QJsonObject json) {

    m_ekm_available_isValid = ::OpenAPI::fromJsonValue(m_ekm_available, json[QString("ekmAvailable")]);
    m_ekm_available_isSet = !json[QString("ekmAvailable")].isNull() && m_ekm_available_isValid;

    m_hsm_available_isValid = ::OpenAPI::fromJsonValue(m_hsm_available, json[QString("hsmAvailable")]);
    m_hsm_available_isSet = !json[QString("hsmAvailable")].isNull() && m_hsm_available_isValid;
}

QString OAILocationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_ekm_available_isSet) {
        obj.insert(QString("ekmAvailable"), ::OpenAPI::toJsonValue(m_ekm_available));
    }
    if (m_hsm_available_isSet) {
        obj.insert(QString("hsmAvailable"), ::OpenAPI::toJsonValue(m_hsm_available));
    }
    return obj;
}

bool OAILocationMetadata::isEkmAvailable() const {
    return m_ekm_available;
}
void OAILocationMetadata::setEkmAvailable(const bool &ekm_available) {
    m_ekm_available = ekm_available;
    m_ekm_available_isSet = true;
}

bool OAILocationMetadata::is_ekm_available_Set() const{
    return m_ekm_available_isSet;
}

bool OAILocationMetadata::is_ekm_available_Valid() const{
    return m_ekm_available_isValid;
}

bool OAILocationMetadata::isHsmAvailable() const {
    return m_hsm_available;
}
void OAILocationMetadata::setHsmAvailable(const bool &hsm_available) {
    m_hsm_available = hsm_available;
    m_hsm_available_isSet = true;
}

bool OAILocationMetadata::is_hsm_available_Set() const{
    return m_hsm_available_isSet;
}

bool OAILocationMetadata::is_hsm_available_Valid() const{
    return m_hsm_available_isValid;
}

bool OAILocationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ekm_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hsm_available_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
