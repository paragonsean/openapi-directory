/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICryptoKey.h
 *
 * A CryptoKey represents a logical key that can be used for cryptographic operations. A CryptoKey is made up of zero or more versions, which represent the actual key material used in cryptographic operations.
 */

#ifndef OAICryptoKey_H
#define OAICryptoKey_H

#include <QJsonObject>

#include "OAICryptoKeyVersion.h"
#include "OAICryptoKeyVersionTemplate.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICryptoKeyVersion;
class OAICryptoKeyVersionTemplate;

class OAICryptoKey : public OAIObject {
public:
    OAICryptoKey();
    OAICryptoKey(QString json);
    ~OAICryptoKey() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getCryptoKeyBackend() const;
    void setCryptoKeyBackend(const QString &crypto_key_backend);
    bool is_crypto_key_backend_Set() const;
    bool is_crypto_key_backend_Valid() const;

    QString getDestroyScheduledDuration() const;
    void setDestroyScheduledDuration(const QString &destroy_scheduled_duration);
    bool is_destroy_scheduled_duration_Set() const;
    bool is_destroy_scheduled_duration_Valid() const;

    bool isImportOnly() const;
    void setImportOnly(const bool &import_only);
    bool is_import_only_Set() const;
    bool is_import_only_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNextRotationTime() const;
    void setNextRotationTime(const QString &next_rotation_time);
    bool is_next_rotation_time_Set() const;
    bool is_next_rotation_time_Valid() const;

    OAICryptoKeyVersion getPrimary() const;
    void setPrimary(const OAICryptoKeyVersion &primary);
    bool is_primary_Set() const;
    bool is_primary_Valid() const;

    QString getPurpose() const;
    void setPurpose(const QString &purpose);
    bool is_purpose_Set() const;
    bool is_purpose_Valid() const;

    QString getRotationPeriod() const;
    void setRotationPeriod(const QString &rotation_period);
    bool is_rotation_period_Set() const;
    bool is_rotation_period_Valid() const;

    OAICryptoKeyVersionTemplate getVersionTemplate() const;
    void setVersionTemplate(const OAICryptoKeyVersionTemplate &version_template);
    bool is_version_template_Set() const;
    bool is_version_template_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_crypto_key_backend;
    bool m_crypto_key_backend_isSet;
    bool m_crypto_key_backend_isValid;

    QString m_destroy_scheduled_duration;
    bool m_destroy_scheduled_duration_isSet;
    bool m_destroy_scheduled_duration_isValid;

    bool m_import_only;
    bool m_import_only_isSet;
    bool m_import_only_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_next_rotation_time;
    bool m_next_rotation_time_isSet;
    bool m_next_rotation_time_isValid;

    OAICryptoKeyVersion m_primary;
    bool m_primary_isSet;
    bool m_primary_isValid;

    QString m_purpose;
    bool m_purpose_isSet;
    bool m_purpose_isValid;

    QString m_rotation_period;
    bool m_rotation_period_isSet;
    bool m_rotation_period_isValid;

    OAICryptoKeyVersionTemplate m_version_template;
    bool m_version_template_isSet;
    bool m_version_template_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICryptoKey)

#endif // OAICryptoKey_H
