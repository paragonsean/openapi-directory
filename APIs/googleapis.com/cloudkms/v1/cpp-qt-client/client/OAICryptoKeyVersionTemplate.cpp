/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICryptoKeyVersionTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICryptoKeyVersionTemplate::OAICryptoKeyVersionTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICryptoKeyVersionTemplate::OAICryptoKeyVersionTemplate() {
    this->initializeModel();
}

OAICryptoKeyVersionTemplate::~OAICryptoKeyVersionTemplate() {}

void OAICryptoKeyVersionTemplate::initializeModel() {

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_protection_level_isSet = false;
    m_protection_level_isValid = false;
}

void OAICryptoKeyVersionTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICryptoKeyVersionTemplate::fromJsonObject(QJsonObject json) {

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("algorithm")]);
    m_algorithm_isSet = !json[QString("algorithm")].isNull() && m_algorithm_isValid;

    m_protection_level_isValid = ::OpenAPI::fromJsonValue(m_protection_level, json[QString("protectionLevel")]);
    m_protection_level_isSet = !json[QString("protectionLevel")].isNull() && m_protection_level_isValid;
}

QString OAICryptoKeyVersionTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICryptoKeyVersionTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_isSet) {
        obj.insert(QString("algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_protection_level_isSet) {
        obj.insert(QString("protectionLevel"), ::OpenAPI::toJsonValue(m_protection_level));
    }
    return obj;
}

QString OAICryptoKeyVersionTemplate::getAlgorithm() const {
    return m_algorithm;
}
void OAICryptoKeyVersionTemplate::setAlgorithm(const QString &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAICryptoKeyVersionTemplate::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAICryptoKeyVersionTemplate::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

QString OAICryptoKeyVersionTemplate::getProtectionLevel() const {
    return m_protection_level;
}
void OAICryptoKeyVersionTemplate::setProtectionLevel(const QString &protection_level) {
    m_protection_level = protection_level;
    m_protection_level_isSet = true;
}

bool OAICryptoKeyVersionTemplate::is_protection_level_Set() const{
    return m_protection_level_isSet;
}

bool OAICryptoKeyVersionTemplate::is_protection_level_Valid() const{
    return m_protection_level_isValid;
}

bool OAICryptoKeyVersionTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICryptoKeyVersionTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
