/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRawEncryptRequest.h
 *
 * Request message for KeyManagementService.RawEncrypt.
 */

#ifndef OAIRawEncryptRequest_H
#define OAIRawEncryptRequest_H

#include <QJsonObject>

#include <QByteArray>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRawEncryptRequest : public OAIObject {
public:
    OAIRawEncryptRequest();
    OAIRawEncryptRequest(QString json);
    ~OAIRawEncryptRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QByteArray getAdditionalAuthenticatedData() const;
    void setAdditionalAuthenticatedData(const QByteArray &additional_authenticated_data);
    bool is_additional_authenticated_data_Set() const;
    bool is_additional_authenticated_data_Valid() const;

    QString getAdditionalAuthenticatedDataCrc32c() const;
    void setAdditionalAuthenticatedDataCrc32c(const QString &additional_authenticated_data_crc32c);
    bool is_additional_authenticated_data_crc32c_Set() const;
    bool is_additional_authenticated_data_crc32c_Valid() const;

    QByteArray getInitializationVector() const;
    void setInitializationVector(const QByteArray &initialization_vector);
    bool is_initialization_vector_Set() const;
    bool is_initialization_vector_Valid() const;

    QString getInitializationVectorCrc32c() const;
    void setInitializationVectorCrc32c(const QString &initialization_vector_crc32c);
    bool is_initialization_vector_crc32c_Set() const;
    bool is_initialization_vector_crc32c_Valid() const;

    QByteArray getPlaintext() const;
    void setPlaintext(const QByteArray &plaintext);
    bool is_plaintext_Set() const;
    bool is_plaintext_Valid() const;

    QString getPlaintextCrc32c() const;
    void setPlaintextCrc32c(const QString &plaintext_crc32c);
    bool is_plaintext_crc32c_Set() const;
    bool is_plaintext_crc32c_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QByteArray m_additional_authenticated_data;
    bool m_additional_authenticated_data_isSet;
    bool m_additional_authenticated_data_isValid;

    QString m_additional_authenticated_data_crc32c;
    bool m_additional_authenticated_data_crc32c_isSet;
    bool m_additional_authenticated_data_crc32c_isValid;

    QByteArray m_initialization_vector;
    bool m_initialization_vector_isSet;
    bool m_initialization_vector_isValid;

    QString m_initialization_vector_crc32c;
    bool m_initialization_vector_crc32c_isSet;
    bool m_initialization_vector_crc32c_isValid;

    QByteArray m_plaintext;
    bool m_plaintext_isSet;
    bool m_plaintext_isValid;

    QString m_plaintext_crc32c;
    bool m_plaintext_crc32c_isSet;
    bool m_plaintext_crc32c_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRawEncryptRequest)

#endif // OAIRawEncryptRequest_H
