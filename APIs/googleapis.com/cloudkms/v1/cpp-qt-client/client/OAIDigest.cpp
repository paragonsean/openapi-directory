/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDigest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDigest::OAIDigest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDigest::OAIDigest() {
    this->initializeModel();
}

OAIDigest::~OAIDigest() {}

void OAIDigest::initializeModel() {

    m_sha256_isSet = false;
    m_sha256_isValid = false;

    m_sha384_isSet = false;
    m_sha384_isValid = false;

    m_sha512_isSet = false;
    m_sha512_isValid = false;
}

void OAIDigest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDigest::fromJsonObject(QJsonObject json) {

    m_sha256_isValid = ::OpenAPI::fromJsonValue(m_sha256, json[QString("sha256")]);
    m_sha256_isSet = !json[QString("sha256")].isNull() && m_sha256_isValid;

    m_sha384_isValid = ::OpenAPI::fromJsonValue(m_sha384, json[QString("sha384")]);
    m_sha384_isSet = !json[QString("sha384")].isNull() && m_sha384_isValid;

    m_sha512_isValid = ::OpenAPI::fromJsonValue(m_sha512, json[QString("sha512")]);
    m_sha512_isSet = !json[QString("sha512")].isNull() && m_sha512_isValid;
}

QString OAIDigest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDigest::asJsonObject() const {
    QJsonObject obj;
    if (m_sha256_isSet) {
        obj.insert(QString("sha256"), ::OpenAPI::toJsonValue(m_sha256));
    }
    if (m_sha384_isSet) {
        obj.insert(QString("sha384"), ::OpenAPI::toJsonValue(m_sha384));
    }
    if (m_sha512_isSet) {
        obj.insert(QString("sha512"), ::OpenAPI::toJsonValue(m_sha512));
    }
    return obj;
}

QByteArray OAIDigest::getSha256() const {
    return m_sha256;
}
void OAIDigest::setSha256(const QByteArray &sha256) {
    m_sha256 = sha256;
    m_sha256_isSet = true;
}

bool OAIDigest::is_sha256_Set() const{
    return m_sha256_isSet;
}

bool OAIDigest::is_sha256_Valid() const{
    return m_sha256_isValid;
}

QByteArray OAIDigest::getSha384() const {
    return m_sha384;
}
void OAIDigest::setSha384(const QByteArray &sha384) {
    m_sha384 = sha384;
    m_sha384_isSet = true;
}

bool OAIDigest::is_sha384_Set() const{
    return m_sha384_isSet;
}

bool OAIDigest::is_sha384_Valid() const{
    return m_sha384_isValid;
}

QByteArray OAIDigest::getSha512() const {
    return m_sha512;
}
void OAIDigest::setSha512(const QByteArray &sha512) {
    m_sha512 = sha512;
    m_sha512_isSet = true;
}

bool OAIDigest::is_sha512_Set() const{
    return m_sha512_isSet;
}

bool OAIDigest::is_sha512_Valid() const{
    return m_sha512_isValid;
}

bool OAIDigest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sha256_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha384_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha512_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDigest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
