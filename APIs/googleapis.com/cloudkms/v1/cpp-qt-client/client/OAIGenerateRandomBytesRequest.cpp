/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateRandomBytesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateRandomBytesRequest::OAIGenerateRandomBytesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateRandomBytesRequest::OAIGenerateRandomBytesRequest() {
    this->initializeModel();
}

OAIGenerateRandomBytesRequest::~OAIGenerateRandomBytesRequest() {}

void OAIGenerateRandomBytesRequest::initializeModel() {

    m_length_bytes_isSet = false;
    m_length_bytes_isValid = false;

    m_protection_level_isSet = false;
    m_protection_level_isValid = false;
}

void OAIGenerateRandomBytesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateRandomBytesRequest::fromJsonObject(QJsonObject json) {

    m_length_bytes_isValid = ::OpenAPI::fromJsonValue(m_length_bytes, json[QString("lengthBytes")]);
    m_length_bytes_isSet = !json[QString("lengthBytes")].isNull() && m_length_bytes_isValid;

    m_protection_level_isValid = ::OpenAPI::fromJsonValue(m_protection_level, json[QString("protectionLevel")]);
    m_protection_level_isSet = !json[QString("protectionLevel")].isNull() && m_protection_level_isValid;
}

QString OAIGenerateRandomBytesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateRandomBytesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_length_bytes_isSet) {
        obj.insert(QString("lengthBytes"), ::OpenAPI::toJsonValue(m_length_bytes));
    }
    if (m_protection_level_isSet) {
        obj.insert(QString("protectionLevel"), ::OpenAPI::toJsonValue(m_protection_level));
    }
    return obj;
}

qint32 OAIGenerateRandomBytesRequest::getLengthBytes() const {
    return m_length_bytes;
}
void OAIGenerateRandomBytesRequest::setLengthBytes(const qint32 &length_bytes) {
    m_length_bytes = length_bytes;
    m_length_bytes_isSet = true;
}

bool OAIGenerateRandomBytesRequest::is_length_bytes_Set() const{
    return m_length_bytes_isSet;
}

bool OAIGenerateRandomBytesRequest::is_length_bytes_Valid() const{
    return m_length_bytes_isValid;
}

QString OAIGenerateRandomBytesRequest::getProtectionLevel() const {
    return m_protection_level;
}
void OAIGenerateRandomBytesRequest::setProtectionLevel(const QString &protection_level) {
    m_protection_level = protection_level;
    m_protection_level_isSet = true;
}

bool OAIGenerateRandomBytesRequest::is_protection_level_Set() const{
    return m_protection_level_isSet;
}

bool OAIGenerateRandomBytesRequest::is_protection_level_Valid() const{
    return m_protection_level_isValid;
}

bool OAIGenerateRandomBytesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_length_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateRandomBytesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
