/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEkmConnection.h
 *
 * An EkmConnection represents an individual EKM connection. It can be used for creating CryptoKeys and CryptoKeyVersions with a ProtectionLevel of EXTERNAL_VPC, as well as performing cryptographic operations using keys created within the EkmConnection.
 */

#ifndef OAIEkmConnection_H
#define OAIEkmConnection_H

#include <QJsonObject>

#include "OAIServiceResolver.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIServiceResolver;

class OAIEkmConnection : public OAIObject {
public:
    OAIEkmConnection();
    OAIEkmConnection(QString json);
    ~OAIEkmConnection() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getCryptoSpacePath() const;
    void setCryptoSpacePath(const QString &crypto_space_path);
    bool is_crypto_space_path_Set() const;
    bool is_crypto_space_path_Valid() const;

    QString getEtag() const;
    void setEtag(const QString &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    QString getKeyManagementMode() const;
    void setKeyManagementMode(const QString &key_management_mode);
    bool is_key_management_mode_Set() const;
    bool is_key_management_mode_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIServiceResolver> getServiceResolvers() const;
    void setServiceResolvers(const QList<OAIServiceResolver> &service_resolvers);
    bool is_service_resolvers_Set() const;
    bool is_service_resolvers_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_crypto_space_path;
    bool m_crypto_space_path_isSet;
    bool m_crypto_space_path_isValid;

    QString m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    QString m_key_management_mode;
    bool m_key_management_mode_isSet;
    bool m_key_management_mode_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIServiceResolver> m_service_resolvers;
    bool m_service_resolvers_isSet;
    bool m_service_resolvers_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEkmConnection)

#endif // OAIEkmConnection_H
