/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptResponse::OAIEncryptResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptResponse::OAIEncryptResponse() {
    this->initializeModel();
}

OAIEncryptResponse::~OAIEncryptResponse() {}

void OAIEncryptResponse::initializeModel() {

    m_ciphertext_isSet = false;
    m_ciphertext_isValid = false;

    m_ciphertext_crc32c_isSet = false;
    m_ciphertext_crc32c_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_protection_level_isSet = false;
    m_protection_level_isValid = false;

    m_verified_additional_authenticated_data_crc32c_isSet = false;
    m_verified_additional_authenticated_data_crc32c_isValid = false;

    m_verified_plaintext_crc32c_isSet = false;
    m_verified_plaintext_crc32c_isValid = false;
}

void OAIEncryptResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptResponse::fromJsonObject(QJsonObject json) {

    m_ciphertext_isValid = ::OpenAPI::fromJsonValue(m_ciphertext, json[QString("ciphertext")]);
    m_ciphertext_isSet = !json[QString("ciphertext")].isNull() && m_ciphertext_isValid;

    m_ciphertext_crc32c_isValid = ::OpenAPI::fromJsonValue(m_ciphertext_crc32c, json[QString("ciphertextCrc32c")]);
    m_ciphertext_crc32c_isSet = !json[QString("ciphertextCrc32c")].isNull() && m_ciphertext_crc32c_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_protection_level_isValid = ::OpenAPI::fromJsonValue(m_protection_level, json[QString("protectionLevel")]);
    m_protection_level_isSet = !json[QString("protectionLevel")].isNull() && m_protection_level_isValid;

    m_verified_additional_authenticated_data_crc32c_isValid = ::OpenAPI::fromJsonValue(m_verified_additional_authenticated_data_crc32c, json[QString("verifiedAdditionalAuthenticatedDataCrc32c")]);
    m_verified_additional_authenticated_data_crc32c_isSet = !json[QString("verifiedAdditionalAuthenticatedDataCrc32c")].isNull() && m_verified_additional_authenticated_data_crc32c_isValid;

    m_verified_plaintext_crc32c_isValid = ::OpenAPI::fromJsonValue(m_verified_plaintext_crc32c, json[QString("verifiedPlaintextCrc32c")]);
    m_verified_plaintext_crc32c_isSet = !json[QString("verifiedPlaintextCrc32c")].isNull() && m_verified_plaintext_crc32c_isValid;
}

QString OAIEncryptResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_ciphertext_isSet) {
        obj.insert(QString("ciphertext"), ::OpenAPI::toJsonValue(m_ciphertext));
    }
    if (m_ciphertext_crc32c_isSet) {
        obj.insert(QString("ciphertextCrc32c"), ::OpenAPI::toJsonValue(m_ciphertext_crc32c));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protection_level_isSet) {
        obj.insert(QString("protectionLevel"), ::OpenAPI::toJsonValue(m_protection_level));
    }
    if (m_verified_additional_authenticated_data_crc32c_isSet) {
        obj.insert(QString("verifiedAdditionalAuthenticatedDataCrc32c"), ::OpenAPI::toJsonValue(m_verified_additional_authenticated_data_crc32c));
    }
    if (m_verified_plaintext_crc32c_isSet) {
        obj.insert(QString("verifiedPlaintextCrc32c"), ::OpenAPI::toJsonValue(m_verified_plaintext_crc32c));
    }
    return obj;
}

QByteArray OAIEncryptResponse::getCiphertext() const {
    return m_ciphertext;
}
void OAIEncryptResponse::setCiphertext(const QByteArray &ciphertext) {
    m_ciphertext = ciphertext;
    m_ciphertext_isSet = true;
}

bool OAIEncryptResponse::is_ciphertext_Set() const{
    return m_ciphertext_isSet;
}

bool OAIEncryptResponse::is_ciphertext_Valid() const{
    return m_ciphertext_isValid;
}

QString OAIEncryptResponse::getCiphertextCrc32c() const {
    return m_ciphertext_crc32c;
}
void OAIEncryptResponse::setCiphertextCrc32c(const QString &ciphertext_crc32c) {
    m_ciphertext_crc32c = ciphertext_crc32c;
    m_ciphertext_crc32c_isSet = true;
}

bool OAIEncryptResponse::is_ciphertext_crc32c_Set() const{
    return m_ciphertext_crc32c_isSet;
}

bool OAIEncryptResponse::is_ciphertext_crc32c_Valid() const{
    return m_ciphertext_crc32c_isValid;
}

QString OAIEncryptResponse::getName() const {
    return m_name;
}
void OAIEncryptResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEncryptResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEncryptResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEncryptResponse::getProtectionLevel() const {
    return m_protection_level;
}
void OAIEncryptResponse::setProtectionLevel(const QString &protection_level) {
    m_protection_level = protection_level;
    m_protection_level_isSet = true;
}

bool OAIEncryptResponse::is_protection_level_Set() const{
    return m_protection_level_isSet;
}

bool OAIEncryptResponse::is_protection_level_Valid() const{
    return m_protection_level_isValid;
}

bool OAIEncryptResponse::isVerifiedAdditionalAuthenticatedDataCrc32c() const {
    return m_verified_additional_authenticated_data_crc32c;
}
void OAIEncryptResponse::setVerifiedAdditionalAuthenticatedDataCrc32c(const bool &verified_additional_authenticated_data_crc32c) {
    m_verified_additional_authenticated_data_crc32c = verified_additional_authenticated_data_crc32c;
    m_verified_additional_authenticated_data_crc32c_isSet = true;
}

bool OAIEncryptResponse::is_verified_additional_authenticated_data_crc32c_Set() const{
    return m_verified_additional_authenticated_data_crc32c_isSet;
}

bool OAIEncryptResponse::is_verified_additional_authenticated_data_crc32c_Valid() const{
    return m_verified_additional_authenticated_data_crc32c_isValid;
}

bool OAIEncryptResponse::isVerifiedPlaintextCrc32c() const {
    return m_verified_plaintext_crc32c;
}
void OAIEncryptResponse::setVerifiedPlaintextCrc32c(const bool &verified_plaintext_crc32c) {
    m_verified_plaintext_crc32c = verified_plaintext_crc32c;
    m_verified_plaintext_crc32c_isSet = true;
}

bool OAIEncryptResponse::is_verified_plaintext_crc32c_Set() const{
    return m_verified_plaintext_crc32c_isSet;
}

bool OAIEncryptResponse::is_verified_plaintext_crc32c_Valid() const{
    return m_verified_plaintext_crc32c_isValid;
}

bool OAIEncryptResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ciphertext_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ciphertext_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_additional_authenticated_data_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_plaintext_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
