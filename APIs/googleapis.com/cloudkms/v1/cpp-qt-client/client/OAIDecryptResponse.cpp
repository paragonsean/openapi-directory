/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDecryptResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDecryptResponse::OAIDecryptResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDecryptResponse::OAIDecryptResponse() {
    this->initializeModel();
}

OAIDecryptResponse::~OAIDecryptResponse() {}

void OAIDecryptResponse::initializeModel() {

    m_plaintext_isSet = false;
    m_plaintext_isValid = false;

    m_plaintext_crc32c_isSet = false;
    m_plaintext_crc32c_isValid = false;

    m_protection_level_isSet = false;
    m_protection_level_isValid = false;

    m_used_primary_isSet = false;
    m_used_primary_isValid = false;
}

void OAIDecryptResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDecryptResponse::fromJsonObject(QJsonObject json) {

    m_plaintext_isValid = ::OpenAPI::fromJsonValue(m_plaintext, json[QString("plaintext")]);
    m_plaintext_isSet = !json[QString("plaintext")].isNull() && m_plaintext_isValid;

    m_plaintext_crc32c_isValid = ::OpenAPI::fromJsonValue(m_plaintext_crc32c, json[QString("plaintextCrc32c")]);
    m_plaintext_crc32c_isSet = !json[QString("plaintextCrc32c")].isNull() && m_plaintext_crc32c_isValid;

    m_protection_level_isValid = ::OpenAPI::fromJsonValue(m_protection_level, json[QString("protectionLevel")]);
    m_protection_level_isSet = !json[QString("protectionLevel")].isNull() && m_protection_level_isValid;

    m_used_primary_isValid = ::OpenAPI::fromJsonValue(m_used_primary, json[QString("usedPrimary")]);
    m_used_primary_isSet = !json[QString("usedPrimary")].isNull() && m_used_primary_isValid;
}

QString OAIDecryptResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDecryptResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_plaintext_isSet) {
        obj.insert(QString("plaintext"), ::OpenAPI::toJsonValue(m_plaintext));
    }
    if (m_plaintext_crc32c_isSet) {
        obj.insert(QString("plaintextCrc32c"), ::OpenAPI::toJsonValue(m_plaintext_crc32c));
    }
    if (m_protection_level_isSet) {
        obj.insert(QString("protectionLevel"), ::OpenAPI::toJsonValue(m_protection_level));
    }
    if (m_used_primary_isSet) {
        obj.insert(QString("usedPrimary"), ::OpenAPI::toJsonValue(m_used_primary));
    }
    return obj;
}

QByteArray OAIDecryptResponse::getPlaintext() const {
    return m_plaintext;
}
void OAIDecryptResponse::setPlaintext(const QByteArray &plaintext) {
    m_plaintext = plaintext;
    m_plaintext_isSet = true;
}

bool OAIDecryptResponse::is_plaintext_Set() const{
    return m_plaintext_isSet;
}

bool OAIDecryptResponse::is_plaintext_Valid() const{
    return m_plaintext_isValid;
}

QString OAIDecryptResponse::getPlaintextCrc32c() const {
    return m_plaintext_crc32c;
}
void OAIDecryptResponse::setPlaintextCrc32c(const QString &plaintext_crc32c) {
    m_plaintext_crc32c = plaintext_crc32c;
    m_plaintext_crc32c_isSet = true;
}

bool OAIDecryptResponse::is_plaintext_crc32c_Set() const{
    return m_plaintext_crc32c_isSet;
}

bool OAIDecryptResponse::is_plaintext_crc32c_Valid() const{
    return m_plaintext_crc32c_isValid;
}

QString OAIDecryptResponse::getProtectionLevel() const {
    return m_protection_level;
}
void OAIDecryptResponse::setProtectionLevel(const QString &protection_level) {
    m_protection_level = protection_level;
    m_protection_level_isSet = true;
}

bool OAIDecryptResponse::is_protection_level_Set() const{
    return m_protection_level_isSet;
}

bool OAIDecryptResponse::is_protection_level_Valid() const{
    return m_protection_level_isValid;
}

bool OAIDecryptResponse::isUsedPrimary() const {
    return m_used_primary;
}
void OAIDecryptResponse::setUsedPrimary(const bool &used_primary) {
    m_used_primary = used_primary;
    m_used_primary_isSet = true;
}

bool OAIDecryptResponse::is_used_primary_Set() const{
    return m_used_primary_isSet;
}

bool OAIDecryptResponse::is_used_primary_Valid() const{
    return m_used_primary_isValid;
}

bool OAIDecryptResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_plaintext_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plaintext_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_primary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDecryptResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
