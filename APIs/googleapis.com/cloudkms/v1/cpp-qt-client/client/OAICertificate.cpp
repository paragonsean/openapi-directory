/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificate::OAICertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificate::OAICertificate() {
    this->initializeModel();
}

OAICertificate::~OAICertificate() {}

void OAICertificate::initializeModel() {

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_not_after_time_isSet = false;
    m_not_after_time_isValid = false;

    m_not_before_time_isSet = false;
    m_not_before_time_isValid = false;

    m_parsed_isSet = false;
    m_parsed_isValid = false;

    m_raw_der_isSet = false;
    m_raw_der_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_sha256_fingerprint_isSet = false;
    m_sha256_fingerprint_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_subject_alternative_dns_names_isSet = false;
    m_subject_alternative_dns_names_isValid = false;
}

void OAICertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificate::fromJsonObject(QJsonObject json) {

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_not_after_time_isValid = ::OpenAPI::fromJsonValue(m_not_after_time, json[QString("notAfterTime")]);
    m_not_after_time_isSet = !json[QString("notAfterTime")].isNull() && m_not_after_time_isValid;

    m_not_before_time_isValid = ::OpenAPI::fromJsonValue(m_not_before_time, json[QString("notBeforeTime")]);
    m_not_before_time_isSet = !json[QString("notBeforeTime")].isNull() && m_not_before_time_isValid;

    m_parsed_isValid = ::OpenAPI::fromJsonValue(m_parsed, json[QString("parsed")]);
    m_parsed_isSet = !json[QString("parsed")].isNull() && m_parsed_isValid;

    m_raw_der_isValid = ::OpenAPI::fromJsonValue(m_raw_der, json[QString("rawDer")]);
    m_raw_der_isSet = !json[QString("rawDer")].isNull() && m_raw_der_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_sha256_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_sha256_fingerprint, json[QString("sha256Fingerprint")]);
    m_sha256_fingerprint_isSet = !json[QString("sha256Fingerprint")].isNull() && m_sha256_fingerprint_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_subject_alternative_dns_names_isValid = ::OpenAPI::fromJsonValue(m_subject_alternative_dns_names, json[QString("subjectAlternativeDnsNames")]);
    m_subject_alternative_dns_names_isSet = !json[QString("subjectAlternativeDnsNames")].isNull() && m_subject_alternative_dns_names_isValid;
}

QString OAICertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_not_after_time_isSet) {
        obj.insert(QString("notAfterTime"), ::OpenAPI::toJsonValue(m_not_after_time));
    }
    if (m_not_before_time_isSet) {
        obj.insert(QString("notBeforeTime"), ::OpenAPI::toJsonValue(m_not_before_time));
    }
    if (m_parsed_isSet) {
        obj.insert(QString("parsed"), ::OpenAPI::toJsonValue(m_parsed));
    }
    if (m_raw_der_isSet) {
        obj.insert(QString("rawDer"), ::OpenAPI::toJsonValue(m_raw_der));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_sha256_fingerprint_isSet) {
        obj.insert(QString("sha256Fingerprint"), ::OpenAPI::toJsonValue(m_sha256_fingerprint));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_subject_alternative_dns_names.size() > 0) {
        obj.insert(QString("subjectAlternativeDnsNames"), ::OpenAPI::toJsonValue(m_subject_alternative_dns_names));
    }
    return obj;
}

QString OAICertificate::getIssuer() const {
    return m_issuer;
}
void OAICertificate::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAICertificate::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAICertificate::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAICertificate::getNotAfterTime() const {
    return m_not_after_time;
}
void OAICertificate::setNotAfterTime(const QString &not_after_time) {
    m_not_after_time = not_after_time;
    m_not_after_time_isSet = true;
}

bool OAICertificate::is_not_after_time_Set() const{
    return m_not_after_time_isSet;
}

bool OAICertificate::is_not_after_time_Valid() const{
    return m_not_after_time_isValid;
}

QString OAICertificate::getNotBeforeTime() const {
    return m_not_before_time;
}
void OAICertificate::setNotBeforeTime(const QString &not_before_time) {
    m_not_before_time = not_before_time;
    m_not_before_time_isSet = true;
}

bool OAICertificate::is_not_before_time_Set() const{
    return m_not_before_time_isSet;
}

bool OAICertificate::is_not_before_time_Valid() const{
    return m_not_before_time_isValid;
}

bool OAICertificate::isParsed() const {
    return m_parsed;
}
void OAICertificate::setParsed(const bool &parsed) {
    m_parsed = parsed;
    m_parsed_isSet = true;
}

bool OAICertificate::is_parsed_Set() const{
    return m_parsed_isSet;
}

bool OAICertificate::is_parsed_Valid() const{
    return m_parsed_isValid;
}

QByteArray OAICertificate::getRawDer() const {
    return m_raw_der;
}
void OAICertificate::setRawDer(const QByteArray &raw_der) {
    m_raw_der = raw_der;
    m_raw_der_isSet = true;
}

bool OAICertificate::is_raw_der_Set() const{
    return m_raw_der_isSet;
}

bool OAICertificate::is_raw_der_Valid() const{
    return m_raw_der_isValid;
}

QString OAICertificate::getSerialNumber() const {
    return m_serial_number;
}
void OAICertificate::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAICertificate::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAICertificate::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAICertificate::getSha256Fingerprint() const {
    return m_sha256_fingerprint;
}
void OAICertificate::setSha256Fingerprint(const QString &sha256_fingerprint) {
    m_sha256_fingerprint = sha256_fingerprint;
    m_sha256_fingerprint_isSet = true;
}

bool OAICertificate::is_sha256_fingerprint_Set() const{
    return m_sha256_fingerprint_isSet;
}

bool OAICertificate::is_sha256_fingerprint_Valid() const{
    return m_sha256_fingerprint_isValid;
}

QString OAICertificate::getSubject() const {
    return m_subject;
}
void OAICertificate::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAICertificate::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAICertificate::is_subject_Valid() const{
    return m_subject_isValid;
}

QList<QString> OAICertificate::getSubjectAlternativeDnsNames() const {
    return m_subject_alternative_dns_names;
}
void OAICertificate::setSubjectAlternativeDnsNames(const QList<QString> &subject_alternative_dns_names) {
    m_subject_alternative_dns_names = subject_alternative_dns_names;
    m_subject_alternative_dns_names_isSet = true;
}

bool OAICertificate::is_subject_alternative_dns_names_Set() const{
    return m_subject_alternative_dns_names_isSet;
}

bool OAICertificate::is_subject_alternative_dns_names_Valid() const{
    return m_subject_alternative_dns_names_isValid;
}

bool OAICertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_after_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_before_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parsed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_der_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha256_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_alternative_dns_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
