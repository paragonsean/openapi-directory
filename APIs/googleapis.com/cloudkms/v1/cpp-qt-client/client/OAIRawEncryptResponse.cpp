/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRawEncryptResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRawEncryptResponse::OAIRawEncryptResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRawEncryptResponse::OAIRawEncryptResponse() {
    this->initializeModel();
}

OAIRawEncryptResponse::~OAIRawEncryptResponse() {}

void OAIRawEncryptResponse::initializeModel() {

    m_ciphertext_isSet = false;
    m_ciphertext_isValid = false;

    m_ciphertext_crc32c_isSet = false;
    m_ciphertext_crc32c_isValid = false;

    m_initialization_vector_isSet = false;
    m_initialization_vector_isValid = false;

    m_initialization_vector_crc32c_isSet = false;
    m_initialization_vector_crc32c_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_protection_level_isSet = false;
    m_protection_level_isValid = false;

    m_tag_length_isSet = false;
    m_tag_length_isValid = false;

    m_verified_additional_authenticated_data_crc32c_isSet = false;
    m_verified_additional_authenticated_data_crc32c_isValid = false;

    m_verified_initialization_vector_crc32c_isSet = false;
    m_verified_initialization_vector_crc32c_isValid = false;

    m_verified_plaintext_crc32c_isSet = false;
    m_verified_plaintext_crc32c_isValid = false;
}

void OAIRawEncryptResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRawEncryptResponse::fromJsonObject(QJsonObject json) {

    m_ciphertext_isValid = ::OpenAPI::fromJsonValue(m_ciphertext, json[QString("ciphertext")]);
    m_ciphertext_isSet = !json[QString("ciphertext")].isNull() && m_ciphertext_isValid;

    m_ciphertext_crc32c_isValid = ::OpenAPI::fromJsonValue(m_ciphertext_crc32c, json[QString("ciphertextCrc32c")]);
    m_ciphertext_crc32c_isSet = !json[QString("ciphertextCrc32c")].isNull() && m_ciphertext_crc32c_isValid;

    m_initialization_vector_isValid = ::OpenAPI::fromJsonValue(m_initialization_vector, json[QString("initializationVector")]);
    m_initialization_vector_isSet = !json[QString("initializationVector")].isNull() && m_initialization_vector_isValid;

    m_initialization_vector_crc32c_isValid = ::OpenAPI::fromJsonValue(m_initialization_vector_crc32c, json[QString("initializationVectorCrc32c")]);
    m_initialization_vector_crc32c_isSet = !json[QString("initializationVectorCrc32c")].isNull() && m_initialization_vector_crc32c_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_protection_level_isValid = ::OpenAPI::fromJsonValue(m_protection_level, json[QString("protectionLevel")]);
    m_protection_level_isSet = !json[QString("protectionLevel")].isNull() && m_protection_level_isValid;

    m_tag_length_isValid = ::OpenAPI::fromJsonValue(m_tag_length, json[QString("tagLength")]);
    m_tag_length_isSet = !json[QString("tagLength")].isNull() && m_tag_length_isValid;

    m_verified_additional_authenticated_data_crc32c_isValid = ::OpenAPI::fromJsonValue(m_verified_additional_authenticated_data_crc32c, json[QString("verifiedAdditionalAuthenticatedDataCrc32c")]);
    m_verified_additional_authenticated_data_crc32c_isSet = !json[QString("verifiedAdditionalAuthenticatedDataCrc32c")].isNull() && m_verified_additional_authenticated_data_crc32c_isValid;

    m_verified_initialization_vector_crc32c_isValid = ::OpenAPI::fromJsonValue(m_verified_initialization_vector_crc32c, json[QString("verifiedInitializationVectorCrc32c")]);
    m_verified_initialization_vector_crc32c_isSet = !json[QString("verifiedInitializationVectorCrc32c")].isNull() && m_verified_initialization_vector_crc32c_isValid;

    m_verified_plaintext_crc32c_isValid = ::OpenAPI::fromJsonValue(m_verified_plaintext_crc32c, json[QString("verifiedPlaintextCrc32c")]);
    m_verified_plaintext_crc32c_isSet = !json[QString("verifiedPlaintextCrc32c")].isNull() && m_verified_plaintext_crc32c_isValid;
}

QString OAIRawEncryptResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRawEncryptResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_ciphertext_isSet) {
        obj.insert(QString("ciphertext"), ::OpenAPI::toJsonValue(m_ciphertext));
    }
    if (m_ciphertext_crc32c_isSet) {
        obj.insert(QString("ciphertextCrc32c"), ::OpenAPI::toJsonValue(m_ciphertext_crc32c));
    }
    if (m_initialization_vector_isSet) {
        obj.insert(QString("initializationVector"), ::OpenAPI::toJsonValue(m_initialization_vector));
    }
    if (m_initialization_vector_crc32c_isSet) {
        obj.insert(QString("initializationVectorCrc32c"), ::OpenAPI::toJsonValue(m_initialization_vector_crc32c));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protection_level_isSet) {
        obj.insert(QString("protectionLevel"), ::OpenAPI::toJsonValue(m_protection_level));
    }
    if (m_tag_length_isSet) {
        obj.insert(QString("tagLength"), ::OpenAPI::toJsonValue(m_tag_length));
    }
    if (m_verified_additional_authenticated_data_crc32c_isSet) {
        obj.insert(QString("verifiedAdditionalAuthenticatedDataCrc32c"), ::OpenAPI::toJsonValue(m_verified_additional_authenticated_data_crc32c));
    }
    if (m_verified_initialization_vector_crc32c_isSet) {
        obj.insert(QString("verifiedInitializationVectorCrc32c"), ::OpenAPI::toJsonValue(m_verified_initialization_vector_crc32c));
    }
    if (m_verified_plaintext_crc32c_isSet) {
        obj.insert(QString("verifiedPlaintextCrc32c"), ::OpenAPI::toJsonValue(m_verified_plaintext_crc32c));
    }
    return obj;
}

QByteArray OAIRawEncryptResponse::getCiphertext() const {
    return m_ciphertext;
}
void OAIRawEncryptResponse::setCiphertext(const QByteArray &ciphertext) {
    m_ciphertext = ciphertext;
    m_ciphertext_isSet = true;
}

bool OAIRawEncryptResponse::is_ciphertext_Set() const{
    return m_ciphertext_isSet;
}

bool OAIRawEncryptResponse::is_ciphertext_Valid() const{
    return m_ciphertext_isValid;
}

QString OAIRawEncryptResponse::getCiphertextCrc32c() const {
    return m_ciphertext_crc32c;
}
void OAIRawEncryptResponse::setCiphertextCrc32c(const QString &ciphertext_crc32c) {
    m_ciphertext_crc32c = ciphertext_crc32c;
    m_ciphertext_crc32c_isSet = true;
}

bool OAIRawEncryptResponse::is_ciphertext_crc32c_Set() const{
    return m_ciphertext_crc32c_isSet;
}

bool OAIRawEncryptResponse::is_ciphertext_crc32c_Valid() const{
    return m_ciphertext_crc32c_isValid;
}

QByteArray OAIRawEncryptResponse::getInitializationVector() const {
    return m_initialization_vector;
}
void OAIRawEncryptResponse::setInitializationVector(const QByteArray &initialization_vector) {
    m_initialization_vector = initialization_vector;
    m_initialization_vector_isSet = true;
}

bool OAIRawEncryptResponse::is_initialization_vector_Set() const{
    return m_initialization_vector_isSet;
}

bool OAIRawEncryptResponse::is_initialization_vector_Valid() const{
    return m_initialization_vector_isValid;
}

QString OAIRawEncryptResponse::getInitializationVectorCrc32c() const {
    return m_initialization_vector_crc32c;
}
void OAIRawEncryptResponse::setInitializationVectorCrc32c(const QString &initialization_vector_crc32c) {
    m_initialization_vector_crc32c = initialization_vector_crc32c;
    m_initialization_vector_crc32c_isSet = true;
}

bool OAIRawEncryptResponse::is_initialization_vector_crc32c_Set() const{
    return m_initialization_vector_crc32c_isSet;
}

bool OAIRawEncryptResponse::is_initialization_vector_crc32c_Valid() const{
    return m_initialization_vector_crc32c_isValid;
}

QString OAIRawEncryptResponse::getName() const {
    return m_name;
}
void OAIRawEncryptResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRawEncryptResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRawEncryptResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRawEncryptResponse::getProtectionLevel() const {
    return m_protection_level;
}
void OAIRawEncryptResponse::setProtectionLevel(const QString &protection_level) {
    m_protection_level = protection_level;
    m_protection_level_isSet = true;
}

bool OAIRawEncryptResponse::is_protection_level_Set() const{
    return m_protection_level_isSet;
}

bool OAIRawEncryptResponse::is_protection_level_Valid() const{
    return m_protection_level_isValid;
}

qint32 OAIRawEncryptResponse::getTagLength() const {
    return m_tag_length;
}
void OAIRawEncryptResponse::setTagLength(const qint32 &tag_length) {
    m_tag_length = tag_length;
    m_tag_length_isSet = true;
}

bool OAIRawEncryptResponse::is_tag_length_Set() const{
    return m_tag_length_isSet;
}

bool OAIRawEncryptResponse::is_tag_length_Valid() const{
    return m_tag_length_isValid;
}

bool OAIRawEncryptResponse::isVerifiedAdditionalAuthenticatedDataCrc32c() const {
    return m_verified_additional_authenticated_data_crc32c;
}
void OAIRawEncryptResponse::setVerifiedAdditionalAuthenticatedDataCrc32c(const bool &verified_additional_authenticated_data_crc32c) {
    m_verified_additional_authenticated_data_crc32c = verified_additional_authenticated_data_crc32c;
    m_verified_additional_authenticated_data_crc32c_isSet = true;
}

bool OAIRawEncryptResponse::is_verified_additional_authenticated_data_crc32c_Set() const{
    return m_verified_additional_authenticated_data_crc32c_isSet;
}

bool OAIRawEncryptResponse::is_verified_additional_authenticated_data_crc32c_Valid() const{
    return m_verified_additional_authenticated_data_crc32c_isValid;
}

bool OAIRawEncryptResponse::isVerifiedInitializationVectorCrc32c() const {
    return m_verified_initialization_vector_crc32c;
}
void OAIRawEncryptResponse::setVerifiedInitializationVectorCrc32c(const bool &verified_initialization_vector_crc32c) {
    m_verified_initialization_vector_crc32c = verified_initialization_vector_crc32c;
    m_verified_initialization_vector_crc32c_isSet = true;
}

bool OAIRawEncryptResponse::is_verified_initialization_vector_crc32c_Set() const{
    return m_verified_initialization_vector_crc32c_isSet;
}

bool OAIRawEncryptResponse::is_verified_initialization_vector_crc32c_Valid() const{
    return m_verified_initialization_vector_crc32c_isValid;
}

bool OAIRawEncryptResponse::isVerifiedPlaintextCrc32c() const {
    return m_verified_plaintext_crc32c;
}
void OAIRawEncryptResponse::setVerifiedPlaintextCrc32c(const bool &verified_plaintext_crc32c) {
    m_verified_plaintext_crc32c = verified_plaintext_crc32c;
    m_verified_plaintext_crc32c_isSet = true;
}

bool OAIRawEncryptResponse::is_verified_plaintext_crc32c_Set() const{
    return m_verified_plaintext_crc32c_isSet;
}

bool OAIRawEncryptResponse::is_verified_plaintext_crc32c_Valid() const{
    return m_verified_plaintext_crc32c_isValid;
}

bool OAIRawEncryptResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ciphertext_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ciphertext_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initialization_vector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initialization_vector_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_additional_authenticated_data_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_initialization_vector_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_plaintext_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRawEncryptResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
