/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMacVerifyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMacVerifyResponse::OAIMacVerifyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMacVerifyResponse::OAIMacVerifyResponse() {
    this->initializeModel();
}

OAIMacVerifyResponse::~OAIMacVerifyResponse() {}

void OAIMacVerifyResponse::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_protection_level_isSet = false;
    m_protection_level_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;

    m_verified_data_crc32c_isSet = false;
    m_verified_data_crc32c_isValid = false;

    m_verified_mac_crc32c_isSet = false;
    m_verified_mac_crc32c_isValid = false;

    m_verified_success_integrity_isSet = false;
    m_verified_success_integrity_isValid = false;
}

void OAIMacVerifyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMacVerifyResponse::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_protection_level_isValid = ::OpenAPI::fromJsonValue(m_protection_level, json[QString("protectionLevel")]);
    m_protection_level_isSet = !json[QString("protectionLevel")].isNull() && m_protection_level_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;

    m_verified_data_crc32c_isValid = ::OpenAPI::fromJsonValue(m_verified_data_crc32c, json[QString("verifiedDataCrc32c")]);
    m_verified_data_crc32c_isSet = !json[QString("verifiedDataCrc32c")].isNull() && m_verified_data_crc32c_isValid;

    m_verified_mac_crc32c_isValid = ::OpenAPI::fromJsonValue(m_verified_mac_crc32c, json[QString("verifiedMacCrc32c")]);
    m_verified_mac_crc32c_isSet = !json[QString("verifiedMacCrc32c")].isNull() && m_verified_mac_crc32c_isValid;

    m_verified_success_integrity_isValid = ::OpenAPI::fromJsonValue(m_verified_success_integrity, json[QString("verifiedSuccessIntegrity")]);
    m_verified_success_integrity_isSet = !json[QString("verifiedSuccessIntegrity")].isNull() && m_verified_success_integrity_isValid;
}

QString OAIMacVerifyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMacVerifyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protection_level_isSet) {
        obj.insert(QString("protectionLevel"), ::OpenAPI::toJsonValue(m_protection_level));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    if (m_verified_data_crc32c_isSet) {
        obj.insert(QString("verifiedDataCrc32c"), ::OpenAPI::toJsonValue(m_verified_data_crc32c));
    }
    if (m_verified_mac_crc32c_isSet) {
        obj.insert(QString("verifiedMacCrc32c"), ::OpenAPI::toJsonValue(m_verified_mac_crc32c));
    }
    if (m_verified_success_integrity_isSet) {
        obj.insert(QString("verifiedSuccessIntegrity"), ::OpenAPI::toJsonValue(m_verified_success_integrity));
    }
    return obj;
}

QString OAIMacVerifyResponse::getName() const {
    return m_name;
}
void OAIMacVerifyResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMacVerifyResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMacVerifyResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMacVerifyResponse::getProtectionLevel() const {
    return m_protection_level;
}
void OAIMacVerifyResponse::setProtectionLevel(const QString &protection_level) {
    m_protection_level = protection_level;
    m_protection_level_isSet = true;
}

bool OAIMacVerifyResponse::is_protection_level_Set() const{
    return m_protection_level_isSet;
}

bool OAIMacVerifyResponse::is_protection_level_Valid() const{
    return m_protection_level_isValid;
}

bool OAIMacVerifyResponse::isSuccess() const {
    return m_success;
}
void OAIMacVerifyResponse::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIMacVerifyResponse::is_success_Set() const{
    return m_success_isSet;
}

bool OAIMacVerifyResponse::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIMacVerifyResponse::isVerifiedDataCrc32c() const {
    return m_verified_data_crc32c;
}
void OAIMacVerifyResponse::setVerifiedDataCrc32c(const bool &verified_data_crc32c) {
    m_verified_data_crc32c = verified_data_crc32c;
    m_verified_data_crc32c_isSet = true;
}

bool OAIMacVerifyResponse::is_verified_data_crc32c_Set() const{
    return m_verified_data_crc32c_isSet;
}

bool OAIMacVerifyResponse::is_verified_data_crc32c_Valid() const{
    return m_verified_data_crc32c_isValid;
}

bool OAIMacVerifyResponse::isVerifiedMacCrc32c() const {
    return m_verified_mac_crc32c;
}
void OAIMacVerifyResponse::setVerifiedMacCrc32c(const bool &verified_mac_crc32c) {
    m_verified_mac_crc32c = verified_mac_crc32c;
    m_verified_mac_crc32c_isSet = true;
}

bool OAIMacVerifyResponse::is_verified_mac_crc32c_Set() const{
    return m_verified_mac_crc32c_isSet;
}

bool OAIMacVerifyResponse::is_verified_mac_crc32c_Valid() const{
    return m_verified_mac_crc32c_isValid;
}

bool OAIMacVerifyResponse::isVerifiedSuccessIntegrity() const {
    return m_verified_success_integrity;
}
void OAIMacVerifyResponse::setVerifiedSuccessIntegrity(const bool &verified_success_integrity) {
    m_verified_success_integrity = verified_success_integrity;
    m_verified_success_integrity_isSet = true;
}

bool OAIMacVerifyResponse::is_verified_success_integrity_Set() const{
    return m_verified_success_integrity_isSet;
}

bool OAIMacVerifyResponse::is_verified_success_integrity_Valid() const{
    return m_verified_success_integrity_isValid;
}

bool OAIMacVerifyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_data_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_mac_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_success_integrity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMacVerifyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
