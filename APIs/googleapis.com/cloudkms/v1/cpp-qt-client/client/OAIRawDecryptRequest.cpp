/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRawDecryptRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRawDecryptRequest::OAIRawDecryptRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRawDecryptRequest::OAIRawDecryptRequest() {
    this->initializeModel();
}

OAIRawDecryptRequest::~OAIRawDecryptRequest() {}

void OAIRawDecryptRequest::initializeModel() {

    m_additional_authenticated_data_isSet = false;
    m_additional_authenticated_data_isValid = false;

    m_additional_authenticated_data_crc32c_isSet = false;
    m_additional_authenticated_data_crc32c_isValid = false;

    m_ciphertext_isSet = false;
    m_ciphertext_isValid = false;

    m_ciphertext_crc32c_isSet = false;
    m_ciphertext_crc32c_isValid = false;

    m_initialization_vector_isSet = false;
    m_initialization_vector_isValid = false;

    m_initialization_vector_crc32c_isSet = false;
    m_initialization_vector_crc32c_isValid = false;

    m_tag_length_isSet = false;
    m_tag_length_isValid = false;
}

void OAIRawDecryptRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRawDecryptRequest::fromJsonObject(QJsonObject json) {

    m_additional_authenticated_data_isValid = ::OpenAPI::fromJsonValue(m_additional_authenticated_data, json[QString("additionalAuthenticatedData")]);
    m_additional_authenticated_data_isSet = !json[QString("additionalAuthenticatedData")].isNull() && m_additional_authenticated_data_isValid;

    m_additional_authenticated_data_crc32c_isValid = ::OpenAPI::fromJsonValue(m_additional_authenticated_data_crc32c, json[QString("additionalAuthenticatedDataCrc32c")]);
    m_additional_authenticated_data_crc32c_isSet = !json[QString("additionalAuthenticatedDataCrc32c")].isNull() && m_additional_authenticated_data_crc32c_isValid;

    m_ciphertext_isValid = ::OpenAPI::fromJsonValue(m_ciphertext, json[QString("ciphertext")]);
    m_ciphertext_isSet = !json[QString("ciphertext")].isNull() && m_ciphertext_isValid;

    m_ciphertext_crc32c_isValid = ::OpenAPI::fromJsonValue(m_ciphertext_crc32c, json[QString("ciphertextCrc32c")]);
    m_ciphertext_crc32c_isSet = !json[QString("ciphertextCrc32c")].isNull() && m_ciphertext_crc32c_isValid;

    m_initialization_vector_isValid = ::OpenAPI::fromJsonValue(m_initialization_vector, json[QString("initializationVector")]);
    m_initialization_vector_isSet = !json[QString("initializationVector")].isNull() && m_initialization_vector_isValid;

    m_initialization_vector_crc32c_isValid = ::OpenAPI::fromJsonValue(m_initialization_vector_crc32c, json[QString("initializationVectorCrc32c")]);
    m_initialization_vector_crc32c_isSet = !json[QString("initializationVectorCrc32c")].isNull() && m_initialization_vector_crc32c_isValid;

    m_tag_length_isValid = ::OpenAPI::fromJsonValue(m_tag_length, json[QString("tagLength")]);
    m_tag_length_isSet = !json[QString("tagLength")].isNull() && m_tag_length_isValid;
}

QString OAIRawDecryptRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRawDecryptRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_authenticated_data_isSet) {
        obj.insert(QString("additionalAuthenticatedData"), ::OpenAPI::toJsonValue(m_additional_authenticated_data));
    }
    if (m_additional_authenticated_data_crc32c_isSet) {
        obj.insert(QString("additionalAuthenticatedDataCrc32c"), ::OpenAPI::toJsonValue(m_additional_authenticated_data_crc32c));
    }
    if (m_ciphertext_isSet) {
        obj.insert(QString("ciphertext"), ::OpenAPI::toJsonValue(m_ciphertext));
    }
    if (m_ciphertext_crc32c_isSet) {
        obj.insert(QString("ciphertextCrc32c"), ::OpenAPI::toJsonValue(m_ciphertext_crc32c));
    }
    if (m_initialization_vector_isSet) {
        obj.insert(QString("initializationVector"), ::OpenAPI::toJsonValue(m_initialization_vector));
    }
    if (m_initialization_vector_crc32c_isSet) {
        obj.insert(QString("initializationVectorCrc32c"), ::OpenAPI::toJsonValue(m_initialization_vector_crc32c));
    }
    if (m_tag_length_isSet) {
        obj.insert(QString("tagLength"), ::OpenAPI::toJsonValue(m_tag_length));
    }
    return obj;
}

QByteArray OAIRawDecryptRequest::getAdditionalAuthenticatedData() const {
    return m_additional_authenticated_data;
}
void OAIRawDecryptRequest::setAdditionalAuthenticatedData(const QByteArray &additional_authenticated_data) {
    m_additional_authenticated_data = additional_authenticated_data;
    m_additional_authenticated_data_isSet = true;
}

bool OAIRawDecryptRequest::is_additional_authenticated_data_Set() const{
    return m_additional_authenticated_data_isSet;
}

bool OAIRawDecryptRequest::is_additional_authenticated_data_Valid() const{
    return m_additional_authenticated_data_isValid;
}

QString OAIRawDecryptRequest::getAdditionalAuthenticatedDataCrc32c() const {
    return m_additional_authenticated_data_crc32c;
}
void OAIRawDecryptRequest::setAdditionalAuthenticatedDataCrc32c(const QString &additional_authenticated_data_crc32c) {
    m_additional_authenticated_data_crc32c = additional_authenticated_data_crc32c;
    m_additional_authenticated_data_crc32c_isSet = true;
}

bool OAIRawDecryptRequest::is_additional_authenticated_data_crc32c_Set() const{
    return m_additional_authenticated_data_crc32c_isSet;
}

bool OAIRawDecryptRequest::is_additional_authenticated_data_crc32c_Valid() const{
    return m_additional_authenticated_data_crc32c_isValid;
}

QByteArray OAIRawDecryptRequest::getCiphertext() const {
    return m_ciphertext;
}
void OAIRawDecryptRequest::setCiphertext(const QByteArray &ciphertext) {
    m_ciphertext = ciphertext;
    m_ciphertext_isSet = true;
}

bool OAIRawDecryptRequest::is_ciphertext_Set() const{
    return m_ciphertext_isSet;
}

bool OAIRawDecryptRequest::is_ciphertext_Valid() const{
    return m_ciphertext_isValid;
}

QString OAIRawDecryptRequest::getCiphertextCrc32c() const {
    return m_ciphertext_crc32c;
}
void OAIRawDecryptRequest::setCiphertextCrc32c(const QString &ciphertext_crc32c) {
    m_ciphertext_crc32c = ciphertext_crc32c;
    m_ciphertext_crc32c_isSet = true;
}

bool OAIRawDecryptRequest::is_ciphertext_crc32c_Set() const{
    return m_ciphertext_crc32c_isSet;
}

bool OAIRawDecryptRequest::is_ciphertext_crc32c_Valid() const{
    return m_ciphertext_crc32c_isValid;
}

QByteArray OAIRawDecryptRequest::getInitializationVector() const {
    return m_initialization_vector;
}
void OAIRawDecryptRequest::setInitializationVector(const QByteArray &initialization_vector) {
    m_initialization_vector = initialization_vector;
    m_initialization_vector_isSet = true;
}

bool OAIRawDecryptRequest::is_initialization_vector_Set() const{
    return m_initialization_vector_isSet;
}

bool OAIRawDecryptRequest::is_initialization_vector_Valid() const{
    return m_initialization_vector_isValid;
}

QString OAIRawDecryptRequest::getInitializationVectorCrc32c() const {
    return m_initialization_vector_crc32c;
}
void OAIRawDecryptRequest::setInitializationVectorCrc32c(const QString &initialization_vector_crc32c) {
    m_initialization_vector_crc32c = initialization_vector_crc32c;
    m_initialization_vector_crc32c_isSet = true;
}

bool OAIRawDecryptRequest::is_initialization_vector_crc32c_Set() const{
    return m_initialization_vector_crc32c_isSet;
}

bool OAIRawDecryptRequest::is_initialization_vector_crc32c_Valid() const{
    return m_initialization_vector_crc32c_isValid;
}

qint32 OAIRawDecryptRequest::getTagLength() const {
    return m_tag_length;
}
void OAIRawDecryptRequest::setTagLength(const qint32 &tag_length) {
    m_tag_length = tag_length;
    m_tag_length_isSet = true;
}

bool OAIRawDecryptRequest::is_tag_length_Set() const{
    return m_tag_length_isSet;
}

bool OAIRawDecryptRequest::is_tag_length_Valid() const{
    return m_tag_length_isValid;
}

bool OAIRawDecryptRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_authenticated_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_authenticated_data_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ciphertext_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ciphertext_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initialization_vector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initialization_vector_crc32c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_length_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRawDecryptRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
