/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImportJob.h
 *
 * An ImportJob can be used to create CryptoKeys and CryptoKeyVersions using pre-existing key material, generated outside of Cloud KMS. When an ImportJob is created, Cloud KMS will generate a \&quot;wrapping key\&quot;, which is a public/private key pair. You use the wrapping key to encrypt (also known as wrap) the pre-existing key material to protect it during the import process. The nature of the wrapping key depends on the choice of import_method. When the wrapping key generation is complete, the state will be set to ACTIVE and the public_key can be fetched. The fetched public key can then be used to wrap your pre-existing key material. Once the key material is wrapped, it can be imported into a new CryptoKeyVersion in an existing CryptoKey by calling ImportCryptoKeyVersion. Multiple CryptoKeyVersions can be imported with a single ImportJob. Cloud KMS uses the private key portion of the wrapping key to unwrap the key material. Only Cloud KMS has access to the private key. An ImportJob expires 3 days after it is created. Once expired, Cloud KMS will no longer be able to import or unwrap any key material that was wrapped with the ImportJob&#39;s public key. For more information, see [Importing a key](https://cloud.google.com/kms/docs/importing-a-key).
 */

#ifndef OAIImportJob_H
#define OAIImportJob_H

#include <QJsonObject>

#include "OAIKeyOperationAttestation.h"
#include "OAIWrappingPublicKey.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIKeyOperationAttestation;
class OAIWrappingPublicKey;

class OAIImportJob : public OAIObject {
public:
    OAIImportJob();
    OAIImportJob(QString json);
    ~OAIImportJob() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIKeyOperationAttestation getAttestation() const;
    void setAttestation(const OAIKeyOperationAttestation &attestation);
    bool is_attestation_Set() const;
    bool is_attestation_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getExpireEventTime() const;
    void setExpireEventTime(const QString &expire_event_time);
    bool is_expire_event_time_Set() const;
    bool is_expire_event_time_Valid() const;

    QString getExpireTime() const;
    void setExpireTime(const QString &expire_time);
    bool is_expire_time_Set() const;
    bool is_expire_time_Valid() const;

    QString getGenerateTime() const;
    void setGenerateTime(const QString &generate_time);
    bool is_generate_time_Set() const;
    bool is_generate_time_Valid() const;

    QString getImportMethod() const;
    void setImportMethod(const QString &import_method);
    bool is_import_method_Set() const;
    bool is_import_method_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getProtectionLevel() const;
    void setProtectionLevel(const QString &protection_level);
    bool is_protection_level_Set() const;
    bool is_protection_level_Valid() const;

    OAIWrappingPublicKey getPublicKey() const;
    void setPublicKey(const OAIWrappingPublicKey &public_key);
    bool is_public_key_Set() const;
    bool is_public_key_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIKeyOperationAttestation m_attestation;
    bool m_attestation_isSet;
    bool m_attestation_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_expire_event_time;
    bool m_expire_event_time_isSet;
    bool m_expire_event_time_isValid;

    QString m_expire_time;
    bool m_expire_time_isSet;
    bool m_expire_time_isValid;

    QString m_generate_time;
    bool m_generate_time_isSet;
    bool m_generate_time_isValid;

    QString m_import_method;
    bool m_import_method_isSet;
    bool m_import_method_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_protection_level;
    bool m_protection_level_isSet;
    bool m_protection_level_isValid;

    OAIWrappingPublicKey m_public_key;
    bool m_public_key_isSet;
    bool m_public_key_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImportJob)

#endif // OAIImportJob_H
