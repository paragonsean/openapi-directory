/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICryptoKeyVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICryptoKeyVersion::OAICryptoKeyVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICryptoKeyVersion::OAICryptoKeyVersion() {
    this->initializeModel();
}

OAICryptoKeyVersion::~OAICryptoKeyVersion() {}

void OAICryptoKeyVersion::initializeModel() {

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_attestation_isSet = false;
    m_attestation_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_destroy_event_time_isSet = false;
    m_destroy_event_time_isValid = false;

    m_destroy_time_isSet = false;
    m_destroy_time_isValid = false;

    m_external_destruction_failure_reason_isSet = false;
    m_external_destruction_failure_reason_isValid = false;

    m_external_protection_level_options_isSet = false;
    m_external_protection_level_options_isValid = false;

    m_generate_time_isSet = false;
    m_generate_time_isValid = false;

    m_generation_failure_reason_isSet = false;
    m_generation_failure_reason_isValid = false;

    m_import_failure_reason_isSet = false;
    m_import_failure_reason_isValid = false;

    m_import_job_isSet = false;
    m_import_job_isValid = false;

    m_import_time_isSet = false;
    m_import_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_protection_level_isSet = false;
    m_protection_level_isValid = false;

    m_reimport_eligible_isSet = false;
    m_reimport_eligible_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICryptoKeyVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICryptoKeyVersion::fromJsonObject(QJsonObject json) {

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("algorithm")]);
    m_algorithm_isSet = !json[QString("algorithm")].isNull() && m_algorithm_isValid;

    m_attestation_isValid = ::OpenAPI::fromJsonValue(m_attestation, json[QString("attestation")]);
    m_attestation_isSet = !json[QString("attestation")].isNull() && m_attestation_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_destroy_event_time_isValid = ::OpenAPI::fromJsonValue(m_destroy_event_time, json[QString("destroyEventTime")]);
    m_destroy_event_time_isSet = !json[QString("destroyEventTime")].isNull() && m_destroy_event_time_isValid;

    m_destroy_time_isValid = ::OpenAPI::fromJsonValue(m_destroy_time, json[QString("destroyTime")]);
    m_destroy_time_isSet = !json[QString("destroyTime")].isNull() && m_destroy_time_isValid;

    m_external_destruction_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_external_destruction_failure_reason, json[QString("externalDestructionFailureReason")]);
    m_external_destruction_failure_reason_isSet = !json[QString("externalDestructionFailureReason")].isNull() && m_external_destruction_failure_reason_isValid;

    m_external_protection_level_options_isValid = ::OpenAPI::fromJsonValue(m_external_protection_level_options, json[QString("externalProtectionLevelOptions")]);
    m_external_protection_level_options_isSet = !json[QString("externalProtectionLevelOptions")].isNull() && m_external_protection_level_options_isValid;

    m_generate_time_isValid = ::OpenAPI::fromJsonValue(m_generate_time, json[QString("generateTime")]);
    m_generate_time_isSet = !json[QString("generateTime")].isNull() && m_generate_time_isValid;

    m_generation_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_generation_failure_reason, json[QString("generationFailureReason")]);
    m_generation_failure_reason_isSet = !json[QString("generationFailureReason")].isNull() && m_generation_failure_reason_isValid;

    m_import_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_import_failure_reason, json[QString("importFailureReason")]);
    m_import_failure_reason_isSet = !json[QString("importFailureReason")].isNull() && m_import_failure_reason_isValid;

    m_import_job_isValid = ::OpenAPI::fromJsonValue(m_import_job, json[QString("importJob")]);
    m_import_job_isSet = !json[QString("importJob")].isNull() && m_import_job_isValid;

    m_import_time_isValid = ::OpenAPI::fromJsonValue(m_import_time, json[QString("importTime")]);
    m_import_time_isSet = !json[QString("importTime")].isNull() && m_import_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_protection_level_isValid = ::OpenAPI::fromJsonValue(m_protection_level, json[QString("protectionLevel")]);
    m_protection_level_isSet = !json[QString("protectionLevel")].isNull() && m_protection_level_isValid;

    m_reimport_eligible_isValid = ::OpenAPI::fromJsonValue(m_reimport_eligible, json[QString("reimportEligible")]);
    m_reimport_eligible_isSet = !json[QString("reimportEligible")].isNull() && m_reimport_eligible_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAICryptoKeyVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICryptoKeyVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_isSet) {
        obj.insert(QString("algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_attestation.isSet()) {
        obj.insert(QString("attestation"), ::OpenAPI::toJsonValue(m_attestation));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_destroy_event_time_isSet) {
        obj.insert(QString("destroyEventTime"), ::OpenAPI::toJsonValue(m_destroy_event_time));
    }
    if (m_destroy_time_isSet) {
        obj.insert(QString("destroyTime"), ::OpenAPI::toJsonValue(m_destroy_time));
    }
    if (m_external_destruction_failure_reason_isSet) {
        obj.insert(QString("externalDestructionFailureReason"), ::OpenAPI::toJsonValue(m_external_destruction_failure_reason));
    }
    if (m_external_protection_level_options.isSet()) {
        obj.insert(QString("externalProtectionLevelOptions"), ::OpenAPI::toJsonValue(m_external_protection_level_options));
    }
    if (m_generate_time_isSet) {
        obj.insert(QString("generateTime"), ::OpenAPI::toJsonValue(m_generate_time));
    }
    if (m_generation_failure_reason_isSet) {
        obj.insert(QString("generationFailureReason"), ::OpenAPI::toJsonValue(m_generation_failure_reason));
    }
    if (m_import_failure_reason_isSet) {
        obj.insert(QString("importFailureReason"), ::OpenAPI::toJsonValue(m_import_failure_reason));
    }
    if (m_import_job_isSet) {
        obj.insert(QString("importJob"), ::OpenAPI::toJsonValue(m_import_job));
    }
    if (m_import_time_isSet) {
        obj.insert(QString("importTime"), ::OpenAPI::toJsonValue(m_import_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protection_level_isSet) {
        obj.insert(QString("protectionLevel"), ::OpenAPI::toJsonValue(m_protection_level));
    }
    if (m_reimport_eligible_isSet) {
        obj.insert(QString("reimportEligible"), ::OpenAPI::toJsonValue(m_reimport_eligible));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAICryptoKeyVersion::getAlgorithm() const {
    return m_algorithm;
}
void OAICryptoKeyVersion::setAlgorithm(const QString &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAICryptoKeyVersion::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAICryptoKeyVersion::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

OAIKeyOperationAttestation OAICryptoKeyVersion::getAttestation() const {
    return m_attestation;
}
void OAICryptoKeyVersion::setAttestation(const OAIKeyOperationAttestation &attestation) {
    m_attestation = attestation;
    m_attestation_isSet = true;
}

bool OAICryptoKeyVersion::is_attestation_Set() const{
    return m_attestation_isSet;
}

bool OAICryptoKeyVersion::is_attestation_Valid() const{
    return m_attestation_isValid;
}

QString OAICryptoKeyVersion::getCreateTime() const {
    return m_create_time;
}
void OAICryptoKeyVersion::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICryptoKeyVersion::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICryptoKeyVersion::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAICryptoKeyVersion::getDestroyEventTime() const {
    return m_destroy_event_time;
}
void OAICryptoKeyVersion::setDestroyEventTime(const QString &destroy_event_time) {
    m_destroy_event_time = destroy_event_time;
    m_destroy_event_time_isSet = true;
}

bool OAICryptoKeyVersion::is_destroy_event_time_Set() const{
    return m_destroy_event_time_isSet;
}

bool OAICryptoKeyVersion::is_destroy_event_time_Valid() const{
    return m_destroy_event_time_isValid;
}

QString OAICryptoKeyVersion::getDestroyTime() const {
    return m_destroy_time;
}
void OAICryptoKeyVersion::setDestroyTime(const QString &destroy_time) {
    m_destroy_time = destroy_time;
    m_destroy_time_isSet = true;
}

bool OAICryptoKeyVersion::is_destroy_time_Set() const{
    return m_destroy_time_isSet;
}

bool OAICryptoKeyVersion::is_destroy_time_Valid() const{
    return m_destroy_time_isValid;
}

QString OAICryptoKeyVersion::getExternalDestructionFailureReason() const {
    return m_external_destruction_failure_reason;
}
void OAICryptoKeyVersion::setExternalDestructionFailureReason(const QString &external_destruction_failure_reason) {
    m_external_destruction_failure_reason = external_destruction_failure_reason;
    m_external_destruction_failure_reason_isSet = true;
}

bool OAICryptoKeyVersion::is_external_destruction_failure_reason_Set() const{
    return m_external_destruction_failure_reason_isSet;
}

bool OAICryptoKeyVersion::is_external_destruction_failure_reason_Valid() const{
    return m_external_destruction_failure_reason_isValid;
}

OAIExternalProtectionLevelOptions OAICryptoKeyVersion::getExternalProtectionLevelOptions() const {
    return m_external_protection_level_options;
}
void OAICryptoKeyVersion::setExternalProtectionLevelOptions(const OAIExternalProtectionLevelOptions &external_protection_level_options) {
    m_external_protection_level_options = external_protection_level_options;
    m_external_protection_level_options_isSet = true;
}

bool OAICryptoKeyVersion::is_external_protection_level_options_Set() const{
    return m_external_protection_level_options_isSet;
}

bool OAICryptoKeyVersion::is_external_protection_level_options_Valid() const{
    return m_external_protection_level_options_isValid;
}

QString OAICryptoKeyVersion::getGenerateTime() const {
    return m_generate_time;
}
void OAICryptoKeyVersion::setGenerateTime(const QString &generate_time) {
    m_generate_time = generate_time;
    m_generate_time_isSet = true;
}

bool OAICryptoKeyVersion::is_generate_time_Set() const{
    return m_generate_time_isSet;
}

bool OAICryptoKeyVersion::is_generate_time_Valid() const{
    return m_generate_time_isValid;
}

QString OAICryptoKeyVersion::getGenerationFailureReason() const {
    return m_generation_failure_reason;
}
void OAICryptoKeyVersion::setGenerationFailureReason(const QString &generation_failure_reason) {
    m_generation_failure_reason = generation_failure_reason;
    m_generation_failure_reason_isSet = true;
}

bool OAICryptoKeyVersion::is_generation_failure_reason_Set() const{
    return m_generation_failure_reason_isSet;
}

bool OAICryptoKeyVersion::is_generation_failure_reason_Valid() const{
    return m_generation_failure_reason_isValid;
}

QString OAICryptoKeyVersion::getImportFailureReason() const {
    return m_import_failure_reason;
}
void OAICryptoKeyVersion::setImportFailureReason(const QString &import_failure_reason) {
    m_import_failure_reason = import_failure_reason;
    m_import_failure_reason_isSet = true;
}

bool OAICryptoKeyVersion::is_import_failure_reason_Set() const{
    return m_import_failure_reason_isSet;
}

bool OAICryptoKeyVersion::is_import_failure_reason_Valid() const{
    return m_import_failure_reason_isValid;
}

QString OAICryptoKeyVersion::getImportJob() const {
    return m_import_job;
}
void OAICryptoKeyVersion::setImportJob(const QString &import_job) {
    m_import_job = import_job;
    m_import_job_isSet = true;
}

bool OAICryptoKeyVersion::is_import_job_Set() const{
    return m_import_job_isSet;
}

bool OAICryptoKeyVersion::is_import_job_Valid() const{
    return m_import_job_isValid;
}

QString OAICryptoKeyVersion::getImportTime() const {
    return m_import_time;
}
void OAICryptoKeyVersion::setImportTime(const QString &import_time) {
    m_import_time = import_time;
    m_import_time_isSet = true;
}

bool OAICryptoKeyVersion::is_import_time_Set() const{
    return m_import_time_isSet;
}

bool OAICryptoKeyVersion::is_import_time_Valid() const{
    return m_import_time_isValid;
}

QString OAICryptoKeyVersion::getName() const {
    return m_name;
}
void OAICryptoKeyVersion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICryptoKeyVersion::is_name_Set() const{
    return m_name_isSet;
}

bool OAICryptoKeyVersion::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICryptoKeyVersion::getProtectionLevel() const {
    return m_protection_level;
}
void OAICryptoKeyVersion::setProtectionLevel(const QString &protection_level) {
    m_protection_level = protection_level;
    m_protection_level_isSet = true;
}

bool OAICryptoKeyVersion::is_protection_level_Set() const{
    return m_protection_level_isSet;
}

bool OAICryptoKeyVersion::is_protection_level_Valid() const{
    return m_protection_level_isValid;
}

bool OAICryptoKeyVersion::isReimportEligible() const {
    return m_reimport_eligible;
}
void OAICryptoKeyVersion::setReimportEligible(const bool &reimport_eligible) {
    m_reimport_eligible = reimport_eligible;
    m_reimport_eligible_isSet = true;
}

bool OAICryptoKeyVersion::is_reimport_eligible_Set() const{
    return m_reimport_eligible_isSet;
}

bool OAICryptoKeyVersion::is_reimport_eligible_Valid() const{
    return m_reimport_eligible_isValid;
}

QString OAICryptoKeyVersion::getState() const {
    return m_state;
}
void OAICryptoKeyVersion::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICryptoKeyVersion::is_state_Set() const{
    return m_state_isSet;
}

bool OAICryptoKeyVersion::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICryptoKeyVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attestation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destroy_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destroy_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_destruction_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_protection_level_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_generate_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reimport_eligible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICryptoKeyVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
