/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportCryptoKeyVersionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportCryptoKeyVersionRequest::OAIImportCryptoKeyVersionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportCryptoKeyVersionRequest::OAIImportCryptoKeyVersionRequest() {
    this->initializeModel();
}

OAIImportCryptoKeyVersionRequest::~OAIImportCryptoKeyVersionRequest() {}

void OAIImportCryptoKeyVersionRequest::initializeModel() {

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_crypto_key_version_isSet = false;
    m_crypto_key_version_isValid = false;

    m_import_job_isSet = false;
    m_import_job_isValid = false;

    m_rsa_aes_wrapped_key_isSet = false;
    m_rsa_aes_wrapped_key_isValid = false;

    m_wrapped_key_isSet = false;
    m_wrapped_key_isValid = false;
}

void OAIImportCryptoKeyVersionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportCryptoKeyVersionRequest::fromJsonObject(QJsonObject json) {

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("algorithm")]);
    m_algorithm_isSet = !json[QString("algorithm")].isNull() && m_algorithm_isValid;

    m_crypto_key_version_isValid = ::OpenAPI::fromJsonValue(m_crypto_key_version, json[QString("cryptoKeyVersion")]);
    m_crypto_key_version_isSet = !json[QString("cryptoKeyVersion")].isNull() && m_crypto_key_version_isValid;

    m_import_job_isValid = ::OpenAPI::fromJsonValue(m_import_job, json[QString("importJob")]);
    m_import_job_isSet = !json[QString("importJob")].isNull() && m_import_job_isValid;

    m_rsa_aes_wrapped_key_isValid = ::OpenAPI::fromJsonValue(m_rsa_aes_wrapped_key, json[QString("rsaAesWrappedKey")]);
    m_rsa_aes_wrapped_key_isSet = !json[QString("rsaAesWrappedKey")].isNull() && m_rsa_aes_wrapped_key_isValid;

    m_wrapped_key_isValid = ::OpenAPI::fromJsonValue(m_wrapped_key, json[QString("wrappedKey")]);
    m_wrapped_key_isSet = !json[QString("wrappedKey")].isNull() && m_wrapped_key_isValid;
}

QString OAIImportCryptoKeyVersionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportCryptoKeyVersionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_isSet) {
        obj.insert(QString("algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_crypto_key_version_isSet) {
        obj.insert(QString("cryptoKeyVersion"), ::OpenAPI::toJsonValue(m_crypto_key_version));
    }
    if (m_import_job_isSet) {
        obj.insert(QString("importJob"), ::OpenAPI::toJsonValue(m_import_job));
    }
    if (m_rsa_aes_wrapped_key_isSet) {
        obj.insert(QString("rsaAesWrappedKey"), ::OpenAPI::toJsonValue(m_rsa_aes_wrapped_key));
    }
    if (m_wrapped_key_isSet) {
        obj.insert(QString("wrappedKey"), ::OpenAPI::toJsonValue(m_wrapped_key));
    }
    return obj;
}

QString OAIImportCryptoKeyVersionRequest::getAlgorithm() const {
    return m_algorithm;
}
void OAIImportCryptoKeyVersionRequest::setAlgorithm(const QString &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAIImportCryptoKeyVersionRequest::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAIImportCryptoKeyVersionRequest::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

QString OAIImportCryptoKeyVersionRequest::getCryptoKeyVersion() const {
    return m_crypto_key_version;
}
void OAIImportCryptoKeyVersionRequest::setCryptoKeyVersion(const QString &crypto_key_version) {
    m_crypto_key_version = crypto_key_version;
    m_crypto_key_version_isSet = true;
}

bool OAIImportCryptoKeyVersionRequest::is_crypto_key_version_Set() const{
    return m_crypto_key_version_isSet;
}

bool OAIImportCryptoKeyVersionRequest::is_crypto_key_version_Valid() const{
    return m_crypto_key_version_isValid;
}

QString OAIImportCryptoKeyVersionRequest::getImportJob() const {
    return m_import_job;
}
void OAIImportCryptoKeyVersionRequest::setImportJob(const QString &import_job) {
    m_import_job = import_job;
    m_import_job_isSet = true;
}

bool OAIImportCryptoKeyVersionRequest::is_import_job_Set() const{
    return m_import_job_isSet;
}

bool OAIImportCryptoKeyVersionRequest::is_import_job_Valid() const{
    return m_import_job_isValid;
}

QByteArray OAIImportCryptoKeyVersionRequest::getRsaAesWrappedKey() const {
    return m_rsa_aes_wrapped_key;
}
void OAIImportCryptoKeyVersionRequest::setRsaAesWrappedKey(const QByteArray &rsa_aes_wrapped_key) {
    m_rsa_aes_wrapped_key = rsa_aes_wrapped_key;
    m_rsa_aes_wrapped_key_isSet = true;
}

bool OAIImportCryptoKeyVersionRequest::is_rsa_aes_wrapped_key_Set() const{
    return m_rsa_aes_wrapped_key_isSet;
}

bool OAIImportCryptoKeyVersionRequest::is_rsa_aes_wrapped_key_Valid() const{
    return m_rsa_aes_wrapped_key_isValid;
}

QByteArray OAIImportCryptoKeyVersionRequest::getWrappedKey() const {
    return m_wrapped_key;
}
void OAIImportCryptoKeyVersionRequest::setWrappedKey(const QByteArray &wrapped_key) {
    m_wrapped_key = wrapped_key;
    m_wrapped_key_isSet = true;
}

bool OAIImportCryptoKeyVersionRequest::is_wrapped_key_Set() const{
    return m_wrapped_key_isSet;
}

bool OAIImportCryptoKeyVersionRequest::is_wrapped_key_Valid() const{
    return m_wrapped_key_isValid;
}

bool OAIImportCryptoKeyVersionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crypto_key_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rsa_aes_wrapped_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wrapped_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportCryptoKeyVersionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
