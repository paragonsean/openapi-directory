/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAsymmetricDecryptRequest.h"
#include "OAIAsymmetricDecryptResponse.h"
#include "OAIAsymmetricSignRequest.h"
#include "OAIAsymmetricSignResponse.h"
#include "OAICryptoKey.h"
#include "OAICryptoKeyVersion.h"
#include "OAIDecryptRequest.h"
#include "OAIDecryptResponse.h"
#include "OAIEkmConnection.h"
#include "OAIEncryptRequest.h"
#include "OAIEncryptResponse.h"
#include "OAIGenerateRandomBytesRequest.h"
#include "OAIGenerateRandomBytesResponse.h"
#include "OAIImportCryptoKeyVersionRequest.h"
#include "OAIImportJob.h"
#include "OAIKeyRing.h"
#include "OAIListCryptoKeyVersionsResponse.h"
#include "OAIListCryptoKeysResponse.h"
#include "OAIListEkmConnectionsResponse.h"
#include "OAIListImportJobsResponse.h"
#include "OAIListKeyRingsResponse.h"
#include "OAIListLocationsResponse.h"
#include "OAIMacSignRequest.h"
#include "OAIMacSignResponse.h"
#include "OAIMacVerifyRequest.h"
#include "OAIMacVerifyResponse.h"
#include "OAIObject.h"
#include "OAIPolicy.h"
#include "OAIPublicKey.h"
#include "OAIRawDecryptRequest.h"
#include "OAIRawDecryptResponse.h"
#include "OAIRawEncryptRequest.h"
#include "OAIRawEncryptResponse.h"
#include "OAISetIamPolicyRequest.h"
#include "OAITestIamPermissionsRequest.h"
#include "OAITestIamPermissionsResponse.h"
#include "OAIUpdateCryptoKeyPrimaryVersionRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  ekm_connection_id QString [optional]
    * @param[in]  oai_ekm_connection OAIEkmConnection [optional]
    */
    virtual void cloudkms_projects_locations_ekmConnections_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ekm_connection_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEkmConnection> &oai_ekm_connection = ::OpenAPI::OptionalParam<OAIEkmConnection>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void cloudkms_projects_locations_ekmConnections_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void cloudkms_projects_locations_ekmConnections_verifyConnectivity(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_generate_random_bytes_request OAIGenerateRandomBytesRequest [optional]
    */
    virtual void cloudkms_projects_locations_generateRandomBytes(const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGenerateRandomBytesRequest> &oai_generate_random_bytes_request = ::OpenAPI::OptionalParam<OAIGenerateRandomBytesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  key_ring_id QString [optional]
    * @param[in]  oai_key_ring OAIKeyRing [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key_ring_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIKeyRing> &oai_key_ring = ::OpenAPI::OptionalParam<OAIKeyRing>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  crypto_key_id QString [optional]
    * @param[in]  skip_initial_version_creation bool [optional]
    * @param[in]  oai_crypto_key OAICryptoKey [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_cryptoKeys_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &crypto_key_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &skip_initial_version_creation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAICryptoKey> &oai_crypto_key = ::OpenAPI::OptionalParam<OAICryptoKey>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_asymmetric_decrypt_request OAIAsymmetricDecryptRequest [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricDecrypt(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAsymmetricDecryptRequest> &oai_asymmetric_decrypt_request = ::OpenAPI::OptionalParam<OAIAsymmetricDecryptRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_asymmetric_sign_request OAIAsymmetricSignRequest [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricSign(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAsymmetricSignRequest> &oai_asymmetric_sign_request = ::OpenAPI::OptionalParam<OAIAsymmetricSignRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_crypto_key_version OAICryptoKeyVersion [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICryptoKeyVersion> &oai_crypto_key_version = ::OpenAPI::OptionalParam<OAICryptoKeyVersion>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_destroy(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_getPublicKey(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_import_crypto_key_version_request OAIImportCryptoKeyVersionRequest [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImportCryptoKeyVersionRequest> &oai_import_crypto_key_version_request = ::OpenAPI::OptionalParam<OAIImportCryptoKeyVersionRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_mac_sign_request OAIMacSignRequest [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macSign(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIMacSignRequest> &oai_mac_sign_request = ::OpenAPI::OptionalParam<OAIMacSignRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_mac_verify_request OAIMacVerifyRequest [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macVerify(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIMacVerifyRequest> &oai_mac_verify_request = ::OpenAPI::OptionalParam<OAIMacVerifyRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_crypto_key_version OAICryptoKeyVersion [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICryptoKeyVersion> &oai_crypto_key_version = ::OpenAPI::OptionalParam<OAICryptoKeyVersion>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_raw_decrypt_request OAIRawDecryptRequest [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawDecrypt(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRawDecryptRequest> &oai_raw_decrypt_request = ::OpenAPI::OptionalParam<OAIRawDecryptRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_raw_encrypt_request OAIRawEncryptRequest [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawEncrypt(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRawEncryptRequest> &oai_raw_encrypt_request = ::OpenAPI::OptionalParam<OAIRawEncryptRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_restore(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_decrypt_request OAIDecryptRequest [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_cryptoKeys_decrypt(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDecryptRequest> &oai_decrypt_request = ::OpenAPI::OptionalParam<OAIDecryptRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_encrypt_request OAIEncryptRequest [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_cryptoKeys_encrypt(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEncryptRequest> &oai_encrypt_request = ::OpenAPI::OptionalParam<OAIEncryptRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  version_view QString [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_cryptoKeys_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version_view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_update_crypto_key_primary_version_request OAIUpdateCryptoKeyPrimaryVersionRequest [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_cryptoKeys_updatePrimaryVersion(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateCryptoKeyPrimaryVersionRequest> &oai_update_crypto_key_primary_version_request = ::OpenAPI::OptionalParam<OAIUpdateCryptoKeyPrimaryVersionRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  import_job_id QString [optional]
    * @param[in]  oai_import_job OAIImportJob [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_importJobs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &import_job_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImportJob> &oai_import_job = ::OpenAPI::OptionalParam<OAIImportJob>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_importJobs_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  options_requested_policy_version qint32 [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_importJobs_getIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &options_requested_policy_version = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_importJobs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_iam_policy_request OAISetIamPolicyRequest [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_importJobs_setIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetIamPolicyRequest> &oai_set_iam_policy_request = ::OpenAPI::OptionalParam<OAISetIamPolicyRequest>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_test_iam_permissions_request OAITestIamPermissionsRequest [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_importJobs_testIamPermissions(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITestIamPermissionsRequest> &oai_test_iam_permissions_request = ::OpenAPI::OptionalParam<OAITestIamPermissionsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void cloudkms_projects_locations_keyRings_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void cloudkms_projects_locations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cloudkms_projects_locations_ekmConnections_createCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_ekmConnections_listCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_ekmConnections_verifyConnectivityCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_generateRandomBytesCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_createCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_cryptoKeys_createCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricDecryptCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricSignCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_createCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_destroyCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_getPublicKeyCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_importCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_listCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macSignCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macVerifyCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_patchCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawDecryptCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawEncryptCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_restoreCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_cryptoKeys_decryptCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_cryptoKeys_encryptCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_cryptoKeys_listCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_cryptoKeys_updatePrimaryVersionCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_importJobs_createCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_importJobs_getCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_importJobs_getIamPolicyCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_importJobs_listCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_importJobs_setIamPolicyCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_importJobs_testIamPermissionsCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_keyRings_listCallback(OAIHttpRequestWorker *worker);
    void cloudkms_projects_locations_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cloudkms_projects_locations_ekmConnections_createSignal(OAIEkmConnection summary);
    void cloudkms_projects_locations_ekmConnections_listSignal(OAIListEkmConnectionsResponse summary);
    void cloudkms_projects_locations_ekmConnections_verifyConnectivitySignal(OAIObject summary);
    void cloudkms_projects_locations_generateRandomBytesSignal(OAIGenerateRandomBytesResponse summary);
    void cloudkms_projects_locations_keyRings_createSignal(OAIKeyRing summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_createSignal(OAICryptoKey summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricDecryptSignal(OAIAsymmetricDecryptResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricSignSignal(OAIAsymmetricSignResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_createSignal(OAICryptoKeyVersion summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_destroySignal(OAICryptoKeyVersion summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_getPublicKeySignal(OAIPublicKey summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_importSignal(OAICryptoKeyVersion summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_listSignal(OAIListCryptoKeyVersionsResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macSignSignal(OAIMacSignResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macVerifySignal(OAIMacVerifyResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_patchSignal(OAICryptoKeyVersion summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawDecryptSignal(OAIRawDecryptResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawEncryptSignal(OAIRawEncryptResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_restoreSignal(OAICryptoKeyVersion summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_decryptSignal(OAIDecryptResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_encryptSignal(OAIEncryptResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_listSignal(OAIListCryptoKeysResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_updatePrimaryVersionSignal(OAICryptoKey summary);
    void cloudkms_projects_locations_keyRings_importJobs_createSignal(OAIImportJob summary);
    void cloudkms_projects_locations_keyRings_importJobs_getSignal(OAIImportJob summary);
    void cloudkms_projects_locations_keyRings_importJobs_getIamPolicySignal(OAIPolicy summary);
    void cloudkms_projects_locations_keyRings_importJobs_listSignal(OAIListImportJobsResponse summary);
    void cloudkms_projects_locations_keyRings_importJobs_setIamPolicySignal(OAIPolicy summary);
    void cloudkms_projects_locations_keyRings_importJobs_testIamPermissionsSignal(OAITestIamPermissionsResponse summary);
    void cloudkms_projects_locations_keyRings_listSignal(OAIListKeyRingsResponse summary);
    void cloudkms_projects_locations_listSignal(OAIListLocationsResponse summary);


    void cloudkms_projects_locations_ekmConnections_createSignalFull(OAIHttpRequestWorker *worker, OAIEkmConnection summary);
    void cloudkms_projects_locations_ekmConnections_listSignalFull(OAIHttpRequestWorker *worker, OAIListEkmConnectionsResponse summary);
    void cloudkms_projects_locations_ekmConnections_verifyConnectivitySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void cloudkms_projects_locations_generateRandomBytesSignalFull(OAIHttpRequestWorker *worker, OAIGenerateRandomBytesResponse summary);
    void cloudkms_projects_locations_keyRings_createSignalFull(OAIHttpRequestWorker *worker, OAIKeyRing summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_createSignalFull(OAIHttpRequestWorker *worker, OAICryptoKey summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricDecryptSignalFull(OAIHttpRequestWorker *worker, OAIAsymmetricDecryptResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricSignSignalFull(OAIHttpRequestWorker *worker, OAIAsymmetricSignResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_createSignalFull(OAIHttpRequestWorker *worker, OAICryptoKeyVersion summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_destroySignalFull(OAIHttpRequestWorker *worker, OAICryptoKeyVersion summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_getPublicKeySignalFull(OAIHttpRequestWorker *worker, OAIPublicKey summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_importSignalFull(OAIHttpRequestWorker *worker, OAICryptoKeyVersion summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_listSignalFull(OAIHttpRequestWorker *worker, OAIListCryptoKeyVersionsResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macSignSignalFull(OAIHttpRequestWorker *worker, OAIMacSignResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macVerifySignalFull(OAIHttpRequestWorker *worker, OAIMacVerifyResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_patchSignalFull(OAIHttpRequestWorker *worker, OAICryptoKeyVersion summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawDecryptSignalFull(OAIHttpRequestWorker *worker, OAIRawDecryptResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawEncryptSignalFull(OAIHttpRequestWorker *worker, OAIRawEncryptResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_restoreSignalFull(OAIHttpRequestWorker *worker, OAICryptoKeyVersion summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_decryptSignalFull(OAIHttpRequestWorker *worker, OAIDecryptResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_encryptSignalFull(OAIHttpRequestWorker *worker, OAIEncryptResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_listSignalFull(OAIHttpRequestWorker *worker, OAIListCryptoKeysResponse summary);
    void cloudkms_projects_locations_keyRings_cryptoKeys_updatePrimaryVersionSignalFull(OAIHttpRequestWorker *worker, OAICryptoKey summary);
    void cloudkms_projects_locations_keyRings_importJobs_createSignalFull(OAIHttpRequestWorker *worker, OAIImportJob summary);
    void cloudkms_projects_locations_keyRings_importJobs_getSignalFull(OAIHttpRequestWorker *worker, OAIImportJob summary);
    void cloudkms_projects_locations_keyRings_importJobs_getIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIPolicy summary);
    void cloudkms_projects_locations_keyRings_importJobs_listSignalFull(OAIHttpRequestWorker *worker, OAIListImportJobsResponse summary);
    void cloudkms_projects_locations_keyRings_importJobs_setIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIPolicy summary);
    void cloudkms_projects_locations_keyRings_importJobs_testIamPermissionsSignalFull(OAIHttpRequestWorker *worker, OAITestIamPermissionsResponse summary);
    void cloudkms_projects_locations_keyRings_listSignalFull(OAIHttpRequestWorker *worker, OAIListKeyRingsResponse summary);
    void cloudkms_projects_locations_listSignalFull(OAIHttpRequestWorker *worker, OAIListLocationsResponse summary);

    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_ekmConnections_createSignalError() instead")
    void cloudkms_projects_locations_ekmConnections_createSignalE(OAIEkmConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_ekmConnections_createSignalError(OAIEkmConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_ekmConnections_listSignalError() instead")
    void cloudkms_projects_locations_ekmConnections_listSignalE(OAIListEkmConnectionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_ekmConnections_listSignalError(OAIListEkmConnectionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_ekmConnections_verifyConnectivitySignalError() instead")
    void cloudkms_projects_locations_ekmConnections_verifyConnectivitySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_ekmConnections_verifyConnectivitySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_generateRandomBytesSignalError() instead")
    void cloudkms_projects_locations_generateRandomBytesSignalE(OAIGenerateRandomBytesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_generateRandomBytesSignalError(OAIGenerateRandomBytesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_createSignalError() instead")
    void cloudkms_projects_locations_keyRings_createSignalE(OAIKeyRing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_createSignalError(OAIKeyRing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_createSignalError() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_createSignalE(OAICryptoKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_createSignalError(OAICryptoKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricDecryptSignalError() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricDecryptSignalE(OAIAsymmetricDecryptResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricDecryptSignalError(OAIAsymmetricDecryptResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricSignSignalError() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricSignSignalE(OAIAsymmetricSignResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricSignSignalError(OAIAsymmetricSignResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_createSignalError() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_createSignalE(OAICryptoKeyVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_createSignalError(OAICryptoKeyVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_destroySignalError() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_destroySignalE(OAICryptoKeyVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_destroySignalError(OAICryptoKeyVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_getPublicKeySignalError() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_getPublicKeySignalE(OAIPublicKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_getPublicKeySignalError(OAIPublicKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_importSignalError() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_importSignalE(OAICryptoKeyVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_importSignalError(OAICryptoKeyVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_listSignalError() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_listSignalE(OAIListCryptoKeyVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_listSignalError(OAIListCryptoKeyVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macSignSignalError() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macSignSignalE(OAIMacSignResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macSignSignalError(OAIMacSignResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macVerifySignalError() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macVerifySignalE(OAIMacVerifyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macVerifySignalError(OAIMacVerifyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_patchSignalError() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_patchSignalE(OAICryptoKeyVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_patchSignalError(OAICryptoKeyVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawDecryptSignalError() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawDecryptSignalE(OAIRawDecryptResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawDecryptSignalError(OAIRawDecryptResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawEncryptSignalError() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawEncryptSignalE(OAIRawEncryptResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawEncryptSignalError(OAIRawEncryptResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_restoreSignalError() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_restoreSignalE(OAICryptoKeyVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_restoreSignalError(OAICryptoKeyVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_decryptSignalError() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_decryptSignalE(OAIDecryptResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_decryptSignalError(OAIDecryptResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_encryptSignalError() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_encryptSignalE(OAIEncryptResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_encryptSignalError(OAIEncryptResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_listSignalError() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_listSignalE(OAIListCryptoKeysResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_listSignalError(OAIListCryptoKeysResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_updatePrimaryVersionSignalError() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_updatePrimaryVersionSignalE(OAICryptoKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_updatePrimaryVersionSignalError(OAICryptoKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_importJobs_createSignalError() instead")
    void cloudkms_projects_locations_keyRings_importJobs_createSignalE(OAIImportJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_importJobs_createSignalError(OAIImportJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_importJobs_getSignalError() instead")
    void cloudkms_projects_locations_keyRings_importJobs_getSignalE(OAIImportJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_importJobs_getSignalError(OAIImportJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_importJobs_getIamPolicySignalError() instead")
    void cloudkms_projects_locations_keyRings_importJobs_getIamPolicySignalE(OAIPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_importJobs_getIamPolicySignalError(OAIPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_importJobs_listSignalError() instead")
    void cloudkms_projects_locations_keyRings_importJobs_listSignalE(OAIListImportJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_importJobs_listSignalError(OAIListImportJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_importJobs_setIamPolicySignalError() instead")
    void cloudkms_projects_locations_keyRings_importJobs_setIamPolicySignalE(OAIPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_importJobs_setIamPolicySignalError(OAIPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_importJobs_testIamPermissionsSignalError() instead")
    void cloudkms_projects_locations_keyRings_importJobs_testIamPermissionsSignalE(OAITestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_importJobs_testIamPermissionsSignalError(OAITestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_listSignalError() instead")
    void cloudkms_projects_locations_keyRings_listSignalE(OAIListKeyRingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_listSignalError(OAIListKeyRingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_listSignalError() instead")
    void cloudkms_projects_locations_listSignalE(OAIListLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_listSignalError(OAIListLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_ekmConnections_createSignalErrorFull() instead")
    void cloudkms_projects_locations_ekmConnections_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_ekmConnections_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_ekmConnections_listSignalErrorFull() instead")
    void cloudkms_projects_locations_ekmConnections_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_ekmConnections_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_ekmConnections_verifyConnectivitySignalErrorFull() instead")
    void cloudkms_projects_locations_ekmConnections_verifyConnectivitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_ekmConnections_verifyConnectivitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_generateRandomBytesSignalErrorFull() instead")
    void cloudkms_projects_locations_generateRandomBytesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_generateRandomBytesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_createSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_createSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricDecryptSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricDecryptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricDecryptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricSignSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricSignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_asymmetricSignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_createSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_destroySignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_destroySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_destroySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_getPublicKeySignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_getPublicKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_getPublicKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_importSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_listSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macSignSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macSignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macSignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macVerifySignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macVerifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_macVerifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_patchSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawDecryptSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawDecryptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawDecryptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawEncryptSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawEncryptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_rawEncryptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_restoreSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_restoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_restoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_decryptSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_decryptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_decryptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_encryptSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_encryptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_encryptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_listSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_cryptoKeys_updatePrimaryVersionSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_cryptoKeys_updatePrimaryVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_cryptoKeys_updatePrimaryVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_importJobs_createSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_importJobs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_importJobs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_importJobs_getSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_importJobs_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_importJobs_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_importJobs_getIamPolicySignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_importJobs_getIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_importJobs_getIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_importJobs_listSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_importJobs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_importJobs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_importJobs_setIamPolicySignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_importJobs_setIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_importJobs_setIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_importJobs_testIamPermissionsSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_importJobs_testIamPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_importJobs_testIamPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_keyRings_listSignalErrorFull() instead")
    void cloudkms_projects_locations_keyRings_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_keyRings_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudkms_projects_locations_listSignalErrorFull() instead")
    void cloudkms_projects_locations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudkms_projects_locations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
