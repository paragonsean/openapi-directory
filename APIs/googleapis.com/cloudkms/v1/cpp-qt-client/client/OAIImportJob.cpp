/**
 * Cloud Key Management Service (KMS) API
 * Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportJob::OAIImportJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportJob::OAIImportJob() {
    this->initializeModel();
}

OAIImportJob::~OAIImportJob() {}

void OAIImportJob::initializeModel() {

    m_attestation_isSet = false;
    m_attestation_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_expire_event_time_isSet = false;
    m_expire_event_time_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_generate_time_isSet = false;
    m_generate_time_isValid = false;

    m_import_method_isSet = false;
    m_import_method_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_protection_level_isSet = false;
    m_protection_level_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIImportJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportJob::fromJsonObject(QJsonObject json) {

    m_attestation_isValid = ::OpenAPI::fromJsonValue(m_attestation, json[QString("attestation")]);
    m_attestation_isSet = !json[QString("attestation")].isNull() && m_attestation_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_expire_event_time_isValid = ::OpenAPI::fromJsonValue(m_expire_event_time, json[QString("expireEventTime")]);
    m_expire_event_time_isSet = !json[QString("expireEventTime")].isNull() && m_expire_event_time_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_generate_time_isValid = ::OpenAPI::fromJsonValue(m_generate_time, json[QString("generateTime")]);
    m_generate_time_isSet = !json[QString("generateTime")].isNull() && m_generate_time_isValid;

    m_import_method_isValid = ::OpenAPI::fromJsonValue(m_import_method, json[QString("importMethod")]);
    m_import_method_isSet = !json[QString("importMethod")].isNull() && m_import_method_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_protection_level_isValid = ::OpenAPI::fromJsonValue(m_protection_level, json[QString("protectionLevel")]);
    m_protection_level_isSet = !json[QString("protectionLevel")].isNull() && m_protection_level_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("publicKey")]);
    m_public_key_isSet = !json[QString("publicKey")].isNull() && m_public_key_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIImportJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportJob::asJsonObject() const {
    QJsonObject obj;
    if (m_attestation.isSet()) {
        obj.insert(QString("attestation"), ::OpenAPI::toJsonValue(m_attestation));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_expire_event_time_isSet) {
        obj.insert(QString("expireEventTime"), ::OpenAPI::toJsonValue(m_expire_event_time));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_generate_time_isSet) {
        obj.insert(QString("generateTime"), ::OpenAPI::toJsonValue(m_generate_time));
    }
    if (m_import_method_isSet) {
        obj.insert(QString("importMethod"), ::OpenAPI::toJsonValue(m_import_method));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protection_level_isSet) {
        obj.insert(QString("protectionLevel"), ::OpenAPI::toJsonValue(m_protection_level));
    }
    if (m_public_key.isSet()) {
        obj.insert(QString("publicKey"), ::OpenAPI::toJsonValue(m_public_key));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIKeyOperationAttestation OAIImportJob::getAttestation() const {
    return m_attestation;
}
void OAIImportJob::setAttestation(const OAIKeyOperationAttestation &attestation) {
    m_attestation = attestation;
    m_attestation_isSet = true;
}

bool OAIImportJob::is_attestation_Set() const{
    return m_attestation_isSet;
}

bool OAIImportJob::is_attestation_Valid() const{
    return m_attestation_isValid;
}

QString OAIImportJob::getCreateTime() const {
    return m_create_time;
}
void OAIImportJob::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIImportJob::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIImportJob::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIImportJob::getExpireEventTime() const {
    return m_expire_event_time;
}
void OAIImportJob::setExpireEventTime(const QString &expire_event_time) {
    m_expire_event_time = expire_event_time;
    m_expire_event_time_isSet = true;
}

bool OAIImportJob::is_expire_event_time_Set() const{
    return m_expire_event_time_isSet;
}

bool OAIImportJob::is_expire_event_time_Valid() const{
    return m_expire_event_time_isValid;
}

QString OAIImportJob::getExpireTime() const {
    return m_expire_time;
}
void OAIImportJob::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIImportJob::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIImportJob::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAIImportJob::getGenerateTime() const {
    return m_generate_time;
}
void OAIImportJob::setGenerateTime(const QString &generate_time) {
    m_generate_time = generate_time;
    m_generate_time_isSet = true;
}

bool OAIImportJob::is_generate_time_Set() const{
    return m_generate_time_isSet;
}

bool OAIImportJob::is_generate_time_Valid() const{
    return m_generate_time_isValid;
}

QString OAIImportJob::getImportMethod() const {
    return m_import_method;
}
void OAIImportJob::setImportMethod(const QString &import_method) {
    m_import_method = import_method;
    m_import_method_isSet = true;
}

bool OAIImportJob::is_import_method_Set() const{
    return m_import_method_isSet;
}

bool OAIImportJob::is_import_method_Valid() const{
    return m_import_method_isValid;
}

QString OAIImportJob::getName() const {
    return m_name;
}
void OAIImportJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImportJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImportJob::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImportJob::getProtectionLevel() const {
    return m_protection_level;
}
void OAIImportJob::setProtectionLevel(const QString &protection_level) {
    m_protection_level = protection_level;
    m_protection_level_isSet = true;
}

bool OAIImportJob::is_protection_level_Set() const{
    return m_protection_level_isSet;
}

bool OAIImportJob::is_protection_level_Valid() const{
    return m_protection_level_isValid;
}

OAIWrappingPublicKey OAIImportJob::getPublicKey() const {
    return m_public_key;
}
void OAIImportJob::setPublicKey(const OAIWrappingPublicKey &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAIImportJob::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAIImportJob::is_public_key_Valid() const{
    return m_public_key_isValid;
}

QString OAIImportJob::getState() const {
    return m_state;
}
void OAIImportJob::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIImportJob::is_state_Set() const{
    return m_state_isSet;
}

bool OAIImportJob::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIImportJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attestation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generate_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
