# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.daily_sub_entity_type import DailySubEntityType
from openapi_server.models.time_series import TimeSeries
from openapi_server import util


class DailyMetricTimeSeries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, daily_metric: str=None, daily_sub_entity_type: DailySubEntityType=None, time_series: TimeSeries=None):
        """DailyMetricTimeSeries - a model defined in OpenAPI

        :param daily_metric: The daily_metric of this DailyMetricTimeSeries.
        :param daily_sub_entity_type: The daily_sub_entity_type of this DailyMetricTimeSeries.
        :param time_series: The time_series of this DailyMetricTimeSeries.
        """
        self.openapi_types = {
            'daily_metric': str,
            'daily_sub_entity_type': DailySubEntityType,
            'time_series': TimeSeries
        }

        self.attribute_map = {
            'daily_metric': 'dailyMetric',
            'daily_sub_entity_type': 'dailySubEntityType',
            'time_series': 'timeSeries'
        }

        self._daily_metric = daily_metric
        self._daily_sub_entity_type = daily_sub_entity_type
        self._time_series = time_series

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DailyMetricTimeSeries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DailyMetricTimeSeries of this DailyMetricTimeSeries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def daily_metric(self):
        """Gets the daily_metric of this DailyMetricTimeSeries.

        The DailyMetric that the TimeSeries represents.

        :return: The daily_metric of this DailyMetricTimeSeries.
        :rtype: str
        """
        return self._daily_metric

    @daily_metric.setter
    def daily_metric(self, daily_metric):
        """Sets the daily_metric of this DailyMetricTimeSeries.

        The DailyMetric that the TimeSeries represents.

        :param daily_metric: The daily_metric of this DailyMetricTimeSeries.
        :type daily_metric: str
        """
        allowed_values = ["DAILY_METRIC_UNKNOWN", "BUSINESS_IMPRESSIONS_DESKTOP_MAPS", "BUSINESS_IMPRESSIONS_DESKTOP_SEARCH", "BUSINESS_IMPRESSIONS_MOBILE_MAPS", "BUSINESS_IMPRESSIONS_MOBILE_SEARCH", "BUSINESS_CONVERSATIONS", "BUSINESS_DIRECTION_REQUESTS", "CALL_CLICKS", "WEBSITE_CLICKS", "BUSINESS_BOOKINGS", "BUSINESS_FOOD_ORDERS", "BUSINESS_FOOD_MENU_CLICKS"]  # noqa: E501
        if daily_metric not in allowed_values:
            raise ValueError(
                "Invalid value for `daily_metric` ({0}), must be one of {1}"
                .format(daily_metric, allowed_values)
            )

        self._daily_metric = daily_metric

    @property
    def daily_sub_entity_type(self):
        """Gets the daily_sub_entity_type of this DailyMetricTimeSeries.


        :return: The daily_sub_entity_type of this DailyMetricTimeSeries.
        :rtype: DailySubEntityType
        """
        return self._daily_sub_entity_type

    @daily_sub_entity_type.setter
    def daily_sub_entity_type(self, daily_sub_entity_type):
        """Sets the daily_sub_entity_type of this DailyMetricTimeSeries.


        :param daily_sub_entity_type: The daily_sub_entity_type of this DailyMetricTimeSeries.
        :type daily_sub_entity_type: DailySubEntityType
        """

        self._daily_sub_entity_type = daily_sub_entity_type

    @property
    def time_series(self):
        """Gets the time_series of this DailyMetricTimeSeries.


        :return: The time_series of this DailyMetricTimeSeries.
        :rtype: TimeSeries
        """
        return self._time_series

    @time_series.setter
    def time_series(self, time_series):
        """Sets the time_series of this DailyMetricTimeSeries.


        :param time_series: The time_series of this DailyMetricTimeSeries.
        :type time_series: TimeSeries
        """

        self._time_series = time_series
