/**
 * Business Profile Performance API
 * The Business Profile Performance API allows merchants to fetch performance reports about their business profile on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILocationsApi_H
#define OAI_OAILocationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFetchMultiDailyMetricsTimeSeriesResponse.h"
#include "OAIGetDailyMetricsTimeSeriesResponse.h"
#include "OAIListSearchKeywordImpressionsMonthlyResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILocationsApi : public QObject {
    Q_OBJECT

public:
    OAILocationsApi(const int timeOut = 0);
    ~OAILocationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  location QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  daily_metrics QList<QString> [optional]
    * @param[in]  daily_range_end_date_day qint32 [optional]
    * @param[in]  daily_range_end_date_month qint32 [optional]
    * @param[in]  daily_range_end_date_year qint32 [optional]
    * @param[in]  daily_range_start_date_day qint32 [optional]
    * @param[in]  daily_range_start_date_month qint32 [optional]
    * @param[in]  daily_range_start_date_year qint32 [optional]
    */
    virtual void businessprofileperformance_locations_fetchMultiDailyMetricsTimeSeries(const QString &location, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &daily_metrics = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &daily_range_end_date_day = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &daily_range_end_date_month = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &daily_range_end_date_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &daily_range_start_date_day = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &daily_range_start_date_month = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &daily_range_start_date_year = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  daily_metric QString [optional]
    * @param[in]  daily_range_end_date_day qint32 [optional]
    * @param[in]  daily_range_end_date_month qint32 [optional]
    * @param[in]  daily_range_end_date_year qint32 [optional]
    * @param[in]  daily_range_start_date_day qint32 [optional]
    * @param[in]  daily_range_start_date_month qint32 [optional]
    * @param[in]  daily_range_start_date_year qint32 [optional]
    * @param[in]  daily_sub_entity_type_day_of_week QString [optional]
    * @param[in]  daily_sub_entity_type_time_of_day_hours qint32 [optional]
    * @param[in]  daily_sub_entity_type_time_of_day_minutes qint32 [optional]
    * @param[in]  daily_sub_entity_type_time_of_day_nanos qint32 [optional]
    * @param[in]  daily_sub_entity_type_time_of_day_seconds qint32 [optional]
    */
    virtual void businessprofileperformance_locations_getDailyMetricsTimeSeries(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &daily_metric = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &daily_range_end_date_day = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &daily_range_end_date_month = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &daily_range_end_date_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &daily_range_start_date_day = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &daily_range_start_date_month = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &daily_range_start_date_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &daily_sub_entity_type_day_of_week = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &daily_sub_entity_type_time_of_day_hours = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &daily_sub_entity_type_time_of_day_minutes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &daily_sub_entity_type_time_of_day_nanos = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &daily_sub_entity_type_time_of_day_seconds = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  monthly_range_end_month_day qint32 [optional]
    * @param[in]  monthly_range_end_month_month qint32 [optional]
    * @param[in]  monthly_range_end_month_year qint32 [optional]
    * @param[in]  monthly_range_start_month_day qint32 [optional]
    * @param[in]  monthly_range_start_month_month qint32 [optional]
    * @param[in]  monthly_range_start_month_year qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void businessprofileperformance_locations_searchkeywords_impressions_monthly_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &monthly_range_end_month_day = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &monthly_range_end_month_month = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &monthly_range_end_month_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &monthly_range_start_month_day = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &monthly_range_start_month_month = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &monthly_range_start_month_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void businessprofileperformance_locations_fetchMultiDailyMetricsTimeSeriesCallback(OAIHttpRequestWorker *worker);
    void businessprofileperformance_locations_getDailyMetricsTimeSeriesCallback(OAIHttpRequestWorker *worker);
    void businessprofileperformance_locations_searchkeywords_impressions_monthly_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void businessprofileperformance_locations_fetchMultiDailyMetricsTimeSeriesSignal(OAIFetchMultiDailyMetricsTimeSeriesResponse summary);
    void businessprofileperformance_locations_getDailyMetricsTimeSeriesSignal(OAIGetDailyMetricsTimeSeriesResponse summary);
    void businessprofileperformance_locations_searchkeywords_impressions_monthly_listSignal(OAIListSearchKeywordImpressionsMonthlyResponse summary);


    void businessprofileperformance_locations_fetchMultiDailyMetricsTimeSeriesSignalFull(OAIHttpRequestWorker *worker, OAIFetchMultiDailyMetricsTimeSeriesResponse summary);
    void businessprofileperformance_locations_getDailyMetricsTimeSeriesSignalFull(OAIHttpRequestWorker *worker, OAIGetDailyMetricsTimeSeriesResponse summary);
    void businessprofileperformance_locations_searchkeywords_impressions_monthly_listSignalFull(OAIHttpRequestWorker *worker, OAIListSearchKeywordImpressionsMonthlyResponse summary);

    Q_DECL_DEPRECATED_X("Use businessprofileperformance_locations_fetchMultiDailyMetricsTimeSeriesSignalError() instead")
    void businessprofileperformance_locations_fetchMultiDailyMetricsTimeSeriesSignalE(OAIFetchMultiDailyMetricsTimeSeriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void businessprofileperformance_locations_fetchMultiDailyMetricsTimeSeriesSignalError(OAIFetchMultiDailyMetricsTimeSeriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessprofileperformance_locations_getDailyMetricsTimeSeriesSignalError() instead")
    void businessprofileperformance_locations_getDailyMetricsTimeSeriesSignalE(OAIGetDailyMetricsTimeSeriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void businessprofileperformance_locations_getDailyMetricsTimeSeriesSignalError(OAIGetDailyMetricsTimeSeriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessprofileperformance_locations_searchkeywords_impressions_monthly_listSignalError() instead")
    void businessprofileperformance_locations_searchkeywords_impressions_monthly_listSignalE(OAIListSearchKeywordImpressionsMonthlyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void businessprofileperformance_locations_searchkeywords_impressions_monthly_listSignalError(OAIListSearchKeywordImpressionsMonthlyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use businessprofileperformance_locations_fetchMultiDailyMetricsTimeSeriesSignalErrorFull() instead")
    void businessprofileperformance_locations_fetchMultiDailyMetricsTimeSeriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void businessprofileperformance_locations_fetchMultiDailyMetricsTimeSeriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessprofileperformance_locations_getDailyMetricsTimeSeriesSignalErrorFull() instead")
    void businessprofileperformance_locations_getDailyMetricsTimeSeriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void businessprofileperformance_locations_getDailyMetricsTimeSeriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use businessprofileperformance_locations_searchkeywords_impressions_monthly_listSignalErrorFull() instead")
    void businessprofileperformance_locations_searchkeywords_impressions_monthly_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void businessprofileperformance_locations_searchkeywords_impressions_monthly_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
