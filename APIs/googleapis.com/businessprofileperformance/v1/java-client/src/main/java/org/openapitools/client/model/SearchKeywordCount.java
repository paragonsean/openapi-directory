/*
 * Business Profile Performance API
 * The Business Profile Performance API allows merchants to fetch performance reports about their business profile on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InsightsValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a single search keyword and its value.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:07.986705-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchKeywordCount {
  public static final String SERIALIZED_NAME_INSIGHTS_VALUE = "insightsValue";
  @SerializedName(SERIALIZED_NAME_INSIGHTS_VALUE)
  private InsightsValue insightsValue;

  public static final String SERIALIZED_NAME_SEARCH_KEYWORD = "searchKeyword";
  @SerializedName(SERIALIZED_NAME_SEARCH_KEYWORD)
  private String searchKeyword;

  public SearchKeywordCount() {
  }

  public SearchKeywordCount insightsValue(InsightsValue insightsValue) {
    this.insightsValue = insightsValue;
    return this;
  }

  /**
   * Get insightsValue
   * @return insightsValue
   */
  @javax.annotation.Nullable
  public InsightsValue getInsightsValue() {
    return insightsValue;
  }

  public void setInsightsValue(InsightsValue insightsValue) {
    this.insightsValue = insightsValue;
  }


  public SearchKeywordCount searchKeyword(String searchKeyword) {
    this.searchKeyword = searchKeyword;
    return this;
  }

  /**
   * The lower-cased string that the user entered.
   * @return searchKeyword
   */
  @javax.annotation.Nullable
  public String getSearchKeyword() {
    return searchKeyword;
  }

  public void setSearchKeyword(String searchKeyword) {
    this.searchKeyword = searchKeyword;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchKeywordCount searchKeywordCount = (SearchKeywordCount) o;
    return Objects.equals(this.insightsValue, searchKeywordCount.insightsValue) &&
        Objects.equals(this.searchKeyword, searchKeywordCount.searchKeyword);
  }

  @Override
  public int hashCode() {
    return Objects.hash(insightsValue, searchKeyword);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchKeywordCount {\n");
    sb.append("    insightsValue: ").append(toIndentedString(insightsValue)).append("\n");
    sb.append("    searchKeyword: ").append(toIndentedString(searchKeyword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("insightsValue");
    openapiFields.add("searchKeyword");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchKeywordCount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchKeywordCount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchKeywordCount is not found in the empty JSON string", SearchKeywordCount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchKeywordCount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchKeywordCount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `insightsValue`
      if (jsonObj.get("insightsValue") != null && !jsonObj.get("insightsValue").isJsonNull()) {
        InsightsValue.validateJsonElement(jsonObj.get("insightsValue"));
      }
      if ((jsonObj.get("searchKeyword") != null && !jsonObj.get("searchKeyword").isJsonNull()) && !jsonObj.get("searchKeyword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchKeyword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchKeyword").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchKeywordCount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchKeywordCount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchKeywordCount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchKeywordCount.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchKeywordCount>() {
           @Override
           public void write(JsonWriter out, SearchKeywordCount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchKeywordCount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchKeywordCount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchKeywordCount
   * @throws IOException if the JSON string is invalid with respect to SearchKeywordCount
   */
  public static SearchKeywordCount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchKeywordCount.class);
  }

  /**
   * Convert an instance of SearchKeywordCount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

