/*
 * Business Profile Performance API
 * The Business Profile Performance API allows merchants to fetch performance reports about their business profile on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DailySubEntityType;
import org.openapitools.client.model.TimeSeries;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a single datapoint, where each datapoint is a DailyMetric-DailySubEntityType-TimeSeries tuple.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:07.986705-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DailyMetricTimeSeries {
  /**
   * The DailyMetric that the TimeSeries represents.
   */
  @JsonAdapter(DailyMetricEnum.Adapter.class)
  public enum DailyMetricEnum {
    DAILY_METRIC_UNKNOWN("DAILY_METRIC_UNKNOWN"),
    
    BUSINESS_IMPRESSIONS_DESKTOP_MAPS("BUSINESS_IMPRESSIONS_DESKTOP_MAPS"),
    
    BUSINESS_IMPRESSIONS_DESKTOP_SEARCH("BUSINESS_IMPRESSIONS_DESKTOP_SEARCH"),
    
    BUSINESS_IMPRESSIONS_MOBILE_MAPS("BUSINESS_IMPRESSIONS_MOBILE_MAPS"),
    
    BUSINESS_IMPRESSIONS_MOBILE_SEARCH("BUSINESS_IMPRESSIONS_MOBILE_SEARCH"),
    
    BUSINESS_CONVERSATIONS("BUSINESS_CONVERSATIONS"),
    
    BUSINESS_DIRECTION_REQUESTS("BUSINESS_DIRECTION_REQUESTS"),
    
    CALL_CLICKS("CALL_CLICKS"),
    
    WEBSITE_CLICKS("WEBSITE_CLICKS"),
    
    BUSINESS_BOOKINGS("BUSINESS_BOOKINGS"),
    
    BUSINESS_FOOD_ORDERS("BUSINESS_FOOD_ORDERS"),
    
    BUSINESS_FOOD_MENU_CLICKS("BUSINESS_FOOD_MENU_CLICKS");

    private String value;

    DailyMetricEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DailyMetricEnum fromValue(String value) {
      for (DailyMetricEnum b : DailyMetricEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DailyMetricEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DailyMetricEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DailyMetricEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DailyMetricEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DailyMetricEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DAILY_METRIC = "dailyMetric";
  @SerializedName(SERIALIZED_NAME_DAILY_METRIC)
  private DailyMetricEnum dailyMetric;

  public static final String SERIALIZED_NAME_DAILY_SUB_ENTITY_TYPE = "dailySubEntityType";
  @SerializedName(SERIALIZED_NAME_DAILY_SUB_ENTITY_TYPE)
  private DailySubEntityType dailySubEntityType;

  public static final String SERIALIZED_NAME_TIME_SERIES = "timeSeries";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES)
  private TimeSeries timeSeries;

  public DailyMetricTimeSeries() {
  }

  public DailyMetricTimeSeries dailyMetric(DailyMetricEnum dailyMetric) {
    this.dailyMetric = dailyMetric;
    return this;
  }

  /**
   * The DailyMetric that the TimeSeries represents.
   * @return dailyMetric
   */
  @javax.annotation.Nullable
  public DailyMetricEnum getDailyMetric() {
    return dailyMetric;
  }

  public void setDailyMetric(DailyMetricEnum dailyMetric) {
    this.dailyMetric = dailyMetric;
  }


  public DailyMetricTimeSeries dailySubEntityType(DailySubEntityType dailySubEntityType) {
    this.dailySubEntityType = dailySubEntityType;
    return this;
  }

  /**
   * Get dailySubEntityType
   * @return dailySubEntityType
   */
  @javax.annotation.Nullable
  public DailySubEntityType getDailySubEntityType() {
    return dailySubEntityType;
  }

  public void setDailySubEntityType(DailySubEntityType dailySubEntityType) {
    this.dailySubEntityType = dailySubEntityType;
  }


  public DailyMetricTimeSeries timeSeries(TimeSeries timeSeries) {
    this.timeSeries = timeSeries;
    return this;
  }

  /**
   * Get timeSeries
   * @return timeSeries
   */
  @javax.annotation.Nullable
  public TimeSeries getTimeSeries() {
    return timeSeries;
  }

  public void setTimeSeries(TimeSeries timeSeries) {
    this.timeSeries = timeSeries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DailyMetricTimeSeries dailyMetricTimeSeries = (DailyMetricTimeSeries) o;
    return Objects.equals(this.dailyMetric, dailyMetricTimeSeries.dailyMetric) &&
        Objects.equals(this.dailySubEntityType, dailyMetricTimeSeries.dailySubEntityType) &&
        Objects.equals(this.timeSeries, dailyMetricTimeSeries.timeSeries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dailyMetric, dailySubEntityType, timeSeries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DailyMetricTimeSeries {\n");
    sb.append("    dailyMetric: ").append(toIndentedString(dailyMetric)).append("\n");
    sb.append("    dailySubEntityType: ").append(toIndentedString(dailySubEntityType)).append("\n");
    sb.append("    timeSeries: ").append(toIndentedString(timeSeries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dailyMetric");
    openapiFields.add("dailySubEntityType");
    openapiFields.add("timeSeries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DailyMetricTimeSeries
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DailyMetricTimeSeries.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DailyMetricTimeSeries is not found in the empty JSON string", DailyMetricTimeSeries.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DailyMetricTimeSeries.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DailyMetricTimeSeries` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dailyMetric") != null && !jsonObj.get("dailyMetric").isJsonNull()) && !jsonObj.get("dailyMetric").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dailyMetric` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dailyMetric").toString()));
      }
      // validate the optional field `dailyMetric`
      if (jsonObj.get("dailyMetric") != null && !jsonObj.get("dailyMetric").isJsonNull()) {
        DailyMetricEnum.validateJsonElement(jsonObj.get("dailyMetric"));
      }
      // validate the optional field `dailySubEntityType`
      if (jsonObj.get("dailySubEntityType") != null && !jsonObj.get("dailySubEntityType").isJsonNull()) {
        DailySubEntityType.validateJsonElement(jsonObj.get("dailySubEntityType"));
      }
      // validate the optional field `timeSeries`
      if (jsonObj.get("timeSeries") != null && !jsonObj.get("timeSeries").isJsonNull()) {
        TimeSeries.validateJsonElement(jsonObj.get("timeSeries"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DailyMetricTimeSeries.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DailyMetricTimeSeries' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DailyMetricTimeSeries> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DailyMetricTimeSeries.class));

       return (TypeAdapter<T>) new TypeAdapter<DailyMetricTimeSeries>() {
           @Override
           public void write(JsonWriter out, DailyMetricTimeSeries value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DailyMetricTimeSeries read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DailyMetricTimeSeries given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DailyMetricTimeSeries
   * @throws IOException if the JSON string is invalid with respect to DailyMetricTimeSeries
   */
  public static DailyMetricTimeSeries fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DailyMetricTimeSeries.class);
  }

  /**
   * Convert an instance of DailyMetricTimeSeries to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

