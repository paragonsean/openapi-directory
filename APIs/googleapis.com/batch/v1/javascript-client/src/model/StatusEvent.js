/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaskExecution from './TaskExecution';

/**
 * The StatusEvent model module.
 * @module model/StatusEvent
 * @version v1
 */
class StatusEvent {
    /**
     * Constructs a new <code>StatusEvent</code>.
     * Status event
     * @alias module:model/StatusEvent
     */
    constructor() { 
        
        StatusEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StatusEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatusEvent} obj Optional instance to populate.
     * @return {module:model/StatusEvent} The populated <code>StatusEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatusEvent();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('eventTime')) {
                obj['eventTime'] = ApiClient.convertToType(data['eventTime'], 'String');
            }
            if (data.hasOwnProperty('taskExecution')) {
                obj['taskExecution'] = TaskExecution.constructFromObject(data['taskExecution']);
            }
            if (data.hasOwnProperty('taskState')) {
                obj['taskState'] = ApiClient.convertToType(data['taskState'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StatusEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StatusEvent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['eventTime'] && !(typeof data['eventTime'] === 'string' || data['eventTime'] instanceof String)) {
            throw new Error("Expected the field `eventTime` to be a primitive type in the JSON string but got " + data['eventTime']);
        }
        // validate the optional field `taskExecution`
        if (data['taskExecution']) { // data not null
          TaskExecution.validateJSON(data['taskExecution']);
        }
        // ensure the json data is a string
        if (data['taskState'] && !(typeof data['taskState'] === 'string' || data['taskState'] instanceof String)) {
            throw new Error("Expected the field `taskState` to be a primitive type in the JSON string but got " + data['taskState']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Description of the event.
 * @member {String} description
 */
StatusEvent.prototype['description'] = undefined;

/**
 * The time this event occurred.
 * @member {String} eventTime
 */
StatusEvent.prototype['eventTime'] = undefined;

/**
 * @member {module:model/TaskExecution} taskExecution
 */
StatusEvent.prototype['taskExecution'] = undefined;

/**
 * Task State
 * @member {module:model/StatusEvent.TaskStateEnum} taskState
 */
StatusEvent.prototype['taskState'] = undefined;

/**
 * Type of the event.
 * @member {String} type
 */
StatusEvent.prototype['type'] = undefined;





/**
 * Allowed values for the <code>taskState</code> property.
 * @enum {String}
 * @readonly
 */
StatusEvent['TaskStateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "ASSIGNED"
     * @const
     */
    "ASSIGNED": "ASSIGNED",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "UNEXECUTED"
     * @const
     */
    "UNEXECUTED": "UNEXECUTED"
};



export default StatusEvent;

