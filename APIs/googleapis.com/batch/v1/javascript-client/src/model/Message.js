/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Message model module.
 * @module model/Message
 * @version v1
 */
class Message {
    /**
     * Constructs a new <code>Message</code>.
     * Message details. Describe the conditions under which messages will be sent. If no attribute is defined, no message will be sent by default. One message should specify either the job or the task level attributes, but not both. For example, job level: JOB_STATE_CHANGED and/or a specified new_job_state; task level: TASK_STATE_CHANGED and/or a specified new_task_state.
     * @alias module:model/Message
     */
    constructor() { 
        
        Message.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Message</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Message} obj Optional instance to populate.
     * @return {module:model/Message} The populated <code>Message</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Message();

            if (data.hasOwnProperty('newJobState')) {
                obj['newJobState'] = ApiClient.convertToType(data['newJobState'], 'String');
            }
            if (data.hasOwnProperty('newTaskState')) {
                obj['newTaskState'] = ApiClient.convertToType(data['newTaskState'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Message</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Message</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['newJobState'] && !(typeof data['newJobState'] === 'string' || data['newJobState'] instanceof String)) {
            throw new Error("Expected the field `newJobState` to be a primitive type in the JSON string but got " + data['newJobState']);
        }
        // ensure the json data is a string
        if (data['newTaskState'] && !(typeof data['newTaskState'] === 'string' || data['newTaskState'] instanceof String)) {
            throw new Error("Expected the field `newTaskState` to be a primitive type in the JSON string but got " + data['newTaskState']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The new job state.
 * @member {module:model/Message.NewJobStateEnum} newJobState
 */
Message.prototype['newJobState'] = undefined;

/**
 * The new task state.
 * @member {module:model/Message.NewTaskStateEnum} newTaskState
 */
Message.prototype['newTaskState'] = undefined;

/**
 * The message type.
 * @member {module:model/Message.TypeEnum} type
 */
Message.prototype['type'] = undefined;





/**
 * Allowed values for the <code>newJobState</code> property.
 * @enum {String}
 * @readonly
 */
Message['NewJobStateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "QUEUED"
     * @const
     */
    "QUEUED": "QUEUED",

    /**
     * value: "SCHEDULED"
     * @const
     */
    "SCHEDULED": "SCHEDULED",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "DELETION_IN_PROGRESS"
     * @const
     */
    "DELETION_IN_PROGRESS": "DELETION_IN_PROGRESS"
};


/**
 * Allowed values for the <code>newTaskState</code> property.
 * @enum {String}
 * @readonly
 */
Message['NewTaskStateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "ASSIGNED"
     * @const
     */
    "ASSIGNED": "ASSIGNED",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "UNEXECUTED"
     * @const
     */
    "UNEXECUTED": "UNEXECUTED"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Message['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "JOB_STATE_CHANGED"
     * @const
     */
    "JOB_STATE_CHANGED": "JOB_STATE_CHANGED",

    /**
     * value: "TASK_STATE_CHANGED"
     * @const
     */
    "TASK_STATE_CHANGED": "TASK_STATE_CHANGED"
};



export default Message;

