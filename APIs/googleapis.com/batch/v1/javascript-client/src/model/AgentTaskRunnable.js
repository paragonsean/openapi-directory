/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AgentContainer from './AgentContainer';
import AgentEnvironment from './AgentEnvironment';
import AgentScript from './AgentScript';

/**
 * The AgentTaskRunnable model module.
 * @module model/AgentTaskRunnable
 * @version v1
 */
class AgentTaskRunnable {
    /**
     * Constructs a new <code>AgentTaskRunnable</code>.
     * AgentTaskRunnable is the Runnable representation between Agent and CLH communication.
     * @alias module:model/AgentTaskRunnable
     */
    constructor() { 
        
        AgentTaskRunnable.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AgentTaskRunnable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AgentTaskRunnable} obj Optional instance to populate.
     * @return {module:model/AgentTaskRunnable} The populated <code>AgentTaskRunnable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AgentTaskRunnable();

            if (data.hasOwnProperty('alwaysRun')) {
                obj['alwaysRun'] = ApiClient.convertToType(data['alwaysRun'], 'Boolean');
            }
            if (data.hasOwnProperty('background')) {
                obj['background'] = ApiClient.convertToType(data['background'], 'Boolean');
            }
            if (data.hasOwnProperty('container')) {
                obj['container'] = AgentContainer.constructFromObject(data['container']);
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = AgentEnvironment.constructFromObject(data['environment']);
            }
            if (data.hasOwnProperty('ignoreExitStatus')) {
                obj['ignoreExitStatus'] = ApiClient.convertToType(data['ignoreExitStatus'], 'Boolean');
            }
            if (data.hasOwnProperty('script')) {
                obj['script'] = AgentScript.constructFromObject(data['script']);
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AgentTaskRunnable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AgentTaskRunnable</code>.
     */
    static validateJSON(data) {
        // validate the optional field `container`
        if (data['container']) { // data not null
          AgentContainer.validateJSON(data['container']);
        }
        // validate the optional field `environment`
        if (data['environment']) { // data not null
          AgentEnvironment.validateJSON(data['environment']);
        }
        // validate the optional field `script`
        if (data['script']) { // data not null
          AgentScript.validateJSON(data['script']);
        }
        // ensure the json data is a string
        if (data['timeout'] && !(typeof data['timeout'] === 'string' || data['timeout'] instanceof String)) {
            throw new Error("Expected the field `timeout` to be a primitive type in the JSON string but got " + data['timeout']);
        }

        return true;
    }


}



/**
 * By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables.
 * @member {Boolean} alwaysRun
 */
AgentTaskRunnable.prototype['alwaysRun'] = undefined;

/**
 * This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).
 * @member {Boolean} background
 */
AgentTaskRunnable.prototype['background'] = undefined;

/**
 * @member {module:model/AgentContainer} container
 */
AgentTaskRunnable.prototype['container'] = undefined;

/**
 * @member {module:model/AgentEnvironment} environment
 */
AgentTaskRunnable.prototype['environment'] = undefined;

/**
 * Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.
 * @member {Boolean} ignoreExitStatus
 */
AgentTaskRunnable.prototype['ignoreExitStatus'] = undefined;

/**
 * @member {module:model/AgentScript} script
 */
AgentTaskRunnable.prototype['script'] = undefined;

/**
 * Timeout for this Runnable.
 * @member {String} timeout
 */
AgentTaskRunnable.prototype['timeout'] = undefined;






export default AgentTaskRunnable;

