/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PlacementPolicy model module.
 * @module model/PlacementPolicy
 * @version v1
 */
class PlacementPolicy {
    /**
     * Constructs a new <code>PlacementPolicy</code>.
     * PlacementPolicy describes a group placement policy for the VMs controlled by this AllocationPolicy.
     * @alias module:model/PlacementPolicy
     */
    constructor() { 
        
        PlacementPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlacementPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlacementPolicy} obj Optional instance to populate.
     * @return {module:model/PlacementPolicy} The populated <code>PlacementPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlacementPolicy();

            if (data.hasOwnProperty('collocation')) {
                obj['collocation'] = ApiClient.convertToType(data['collocation'], 'String');
            }
            if (data.hasOwnProperty('maxDistance')) {
                obj['maxDistance'] = ApiClient.convertToType(data['maxDistance'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlacementPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlacementPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['collocation'] && !(typeof data['collocation'] === 'string' || data['collocation'] instanceof String)) {
            throw new Error("Expected the field `collocation` to be a primitive type in the JSON string but got " + data['collocation']);
        }
        // ensure the json data is a string
        if (data['maxDistance'] && !(typeof data['maxDistance'] === 'string' || data['maxDistance'] instanceof String)) {
            throw new Error("Expected the field `maxDistance` to be a primitive type in the JSON string but got " + data['maxDistance']);
        }

        return true;
    }


}



/**
 * UNSPECIFIED vs. COLLOCATED (default UNSPECIFIED). Use COLLOCATED when you want VMs to be located close to each other for low network latency between the VMs. No placement policy will be generated when collocation is UNSPECIFIED.
 * @member {String} collocation
 */
PlacementPolicy.prototype['collocation'] = undefined;

/**
 * When specified, causes the job to fail if more than max_distance logical switches are required between VMs. Batch uses the most compact possible placement of VMs even when max_distance is not specified. An explicit max_distance makes that level of compactness a strict requirement. Not yet implemented
 * @member {String} maxDistance
 */
PlacementPolicy.prototype['maxDistance'] = undefined;






export default PlacementPolicy;

