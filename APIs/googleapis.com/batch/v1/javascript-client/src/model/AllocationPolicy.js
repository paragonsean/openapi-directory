/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstancePolicyOrTemplate from './InstancePolicyOrTemplate';
import LocationPolicy from './LocationPolicy';
import NetworkPolicy from './NetworkPolicy';
import PlacementPolicy from './PlacementPolicy';
import ServiceAccount from './ServiceAccount';

/**
 * The AllocationPolicy model module.
 * @module model/AllocationPolicy
 * @version v1
 */
class AllocationPolicy {
    /**
     * Constructs a new <code>AllocationPolicy</code>.
     * A Job&#39;s resource allocation policy describes when, where, and how compute resources should be allocated for the Job.
     * @alias module:model/AllocationPolicy
     */
    constructor() { 
        
        AllocationPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AllocationPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AllocationPolicy} obj Optional instance to populate.
     * @return {module:model/AllocationPolicy} The populated <code>AllocationPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AllocationPolicy();

            if (data.hasOwnProperty('instances')) {
                obj['instances'] = ApiClient.convertToType(data['instances'], [InstancePolicyOrTemplate]);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = LocationPolicy.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = NetworkPolicy.constructFromObject(data['network']);
            }
            if (data.hasOwnProperty('placement')) {
                obj['placement'] = PlacementPolicy.constructFromObject(data['placement']);
            }
            if (data.hasOwnProperty('serviceAccount')) {
                obj['serviceAccount'] = ServiceAccount.constructFromObject(data['serviceAccount']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AllocationPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AllocationPolicy</code>.
     */
    static validateJSON(data) {
        if (data['instances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['instances'])) {
                throw new Error("Expected the field `instances` to be an array in the JSON data but got " + data['instances']);
            }
            // validate the optional field `instances` (array)
            for (const item of data['instances']) {
                InstancePolicyOrTemplate.validateJSON(item);
            };
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          LocationPolicy.validateJSON(data['location']);
        }
        // validate the optional field `network`
        if (data['network']) { // data not null
          NetworkPolicy.validateJSON(data['network']);
        }
        // validate the optional field `placement`
        if (data['placement']) { // data not null
          PlacementPolicy.validateJSON(data['placement']);
        }
        // validate the optional field `serviceAccount`
        if (data['serviceAccount']) { // data not null
          ServiceAccount.validateJSON(data['serviceAccount']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}



/**
 * Describe instances that can be created by this AllocationPolicy. Only instances[0] is supported now.
 * @member {Array.<module:model/InstancePolicyOrTemplate>} instances
 */
AllocationPolicy.prototype['instances'] = undefined;

/**
 * Labels applied to all VM instances and other resources created by AllocationPolicy. Labels could be user provided or system generated. You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with \"goog-\" or \"google-\" are reserved.
 * @member {Object.<String, String>} labels
 */
AllocationPolicy.prototype['labels'] = undefined;

/**
 * @member {module:model/LocationPolicy} location
 */
AllocationPolicy.prototype['location'] = undefined;

/**
 * @member {module:model/NetworkPolicy} network
 */
AllocationPolicy.prototype['network'] = undefined;

/**
 * @member {module:model/PlacementPolicy} placement
 */
AllocationPolicy.prototype['placement'] = undefined;

/**
 * @member {module:model/ServiceAccount} serviceAccount
 */
AllocationPolicy.prototype['serviceAccount'] = undefined;

/**
 * Optional. Tags applied to the VM instances. The tags identify valid sources or targets for network firewalls. Each tag must be 1-63 characters long, and comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
 * @member {Array.<String>} tags
 */
AllocationPolicy.prototype['tags'] = undefined;






export default AllocationPolicy;

