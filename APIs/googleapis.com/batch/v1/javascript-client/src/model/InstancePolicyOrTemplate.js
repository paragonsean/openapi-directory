/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstancePolicy from './InstancePolicy';

/**
 * The InstancePolicyOrTemplate model module.
 * @module model/InstancePolicyOrTemplate
 * @version v1
 */
class InstancePolicyOrTemplate {
    /**
     * Constructs a new <code>InstancePolicyOrTemplate</code>.
     * InstancePolicyOrTemplate lets you define the type of resources to use for this job either with an InstancePolicy or an instance template. If undefined, Batch picks the type of VM to use and doesn&#39;t include optional VM resources such as GPUs and extra disks.
     * @alias module:model/InstancePolicyOrTemplate
     */
    constructor() { 
        
        InstancePolicyOrTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InstancePolicyOrTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstancePolicyOrTemplate} obj Optional instance to populate.
     * @return {module:model/InstancePolicyOrTemplate} The populated <code>InstancePolicyOrTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstancePolicyOrTemplate();

            if (data.hasOwnProperty('installGpuDrivers')) {
                obj['installGpuDrivers'] = ApiClient.convertToType(data['installGpuDrivers'], 'Boolean');
            }
            if (data.hasOwnProperty('instanceTemplate')) {
                obj['instanceTemplate'] = ApiClient.convertToType(data['instanceTemplate'], 'String');
            }
            if (data.hasOwnProperty('policy')) {
                obj['policy'] = InstancePolicy.constructFromObject(data['policy']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InstancePolicyOrTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InstancePolicyOrTemplate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['instanceTemplate'] && !(typeof data['instanceTemplate'] === 'string' || data['instanceTemplate'] instanceof String)) {
            throw new Error("Expected the field `instanceTemplate` to be a primitive type in the JSON string but got " + data['instanceTemplate']);
        }
        // validate the optional field `policy`
        if (data['policy']) { // data not null
          InstancePolicy.validateJSON(data['policy']);
        }

        return true;
    }


}



/**
 * Set this field true if users want Batch to help fetch drivers from a third party location and install them for GPUs specified in policy.accelerators or instance_template on their behalf. Default is false. For Container-Optimized Image cases, Batch will install the accelerator driver following milestones of https://cloud.google.com/container-optimized-os/docs/release-notes. For non Container-Optimized Image cases, following https://github.com/GoogleCloudPlatform/compute-gpu-installation/blob/main/linux/install_gpu_driver.py.
 * @member {Boolean} installGpuDrivers
 */
InstancePolicyOrTemplate.prototype['installGpuDrivers'] = undefined;

/**
 * Name of an instance template used to create VMs. Named the field as 'instance_template' instead of 'template' to avoid c++ keyword conflict.
 * @member {String} instanceTemplate
 */
InstancePolicyOrTemplate.prototype['instanceTemplate'] = undefined;

/**
 * @member {module:model/InstancePolicy} policy
 */
InstancePolicyOrTemplate.prototype['policy'] = undefined;






export default InstancePolicyOrTemplate;

