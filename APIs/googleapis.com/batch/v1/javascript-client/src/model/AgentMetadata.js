/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AgentMetadata model module.
 * @module model/AgentMetadata
 * @version v1
 */
class AgentMetadata {
    /**
     * Constructs a new <code>AgentMetadata</code>.
     * VM Agent Metadata.
     * @alias module:model/AgentMetadata
     */
    constructor() { 
        
        AgentMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AgentMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AgentMetadata} obj Optional instance to populate.
     * @return {module:model/AgentMetadata} The populated <code>AgentMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AgentMetadata();

            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = ApiClient.convertToType(data['creator'], 'String');
            }
            if (data.hasOwnProperty('imageVersion')) {
                obj['imageVersion'] = ApiClient.convertToType(data['imageVersion'], 'String');
            }
            if (data.hasOwnProperty('instance')) {
                obj['instance'] = ApiClient.convertToType(data['instance'], 'String');
            }
            if (data.hasOwnProperty('instanceId')) {
                obj['instanceId'] = ApiClient.convertToType(data['instanceId'], 'String');
            }
            if (data.hasOwnProperty('instancePreemptionNoticeReceived')) {
                obj['instancePreemptionNoticeReceived'] = ApiClient.convertToType(data['instancePreemptionNoticeReceived'], 'Boolean');
            }
            if (data.hasOwnProperty('osRelease')) {
                obj['osRelease'] = ApiClient.convertToType(data['osRelease'], {'String': 'String'});
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AgentMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AgentMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['creator'] && !(typeof data['creator'] === 'string' || data['creator'] instanceof String)) {
            throw new Error("Expected the field `creator` to be a primitive type in the JSON string but got " + data['creator']);
        }
        // ensure the json data is a string
        if (data['imageVersion'] && !(typeof data['imageVersion'] === 'string' || data['imageVersion'] instanceof String)) {
            throw new Error("Expected the field `imageVersion` to be a primitive type in the JSON string but got " + data['imageVersion']);
        }
        // ensure the json data is a string
        if (data['instance'] && !(typeof data['instance'] === 'string' || data['instance'] instanceof String)) {
            throw new Error("Expected the field `instance` to be a primitive type in the JSON string but got " + data['instance']);
        }
        // ensure the json data is a string
        if (data['instanceId'] && !(typeof data['instanceId'] === 'string' || data['instanceId'] instanceof String)) {
            throw new Error("Expected the field `instanceId` to be a primitive type in the JSON string but got " + data['instanceId']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['zone'] && !(typeof data['zone'] === 'string' || data['zone'] instanceof String)) {
            throw new Error("Expected the field `zone` to be a primitive type in the JSON string but got " + data['zone']);
        }

        return true;
    }


}



/**
 * When the VM agent started. Use agent_startup_time instead.
 * @member {String} creationTime
 */
AgentMetadata.prototype['creationTime'] = undefined;

/**
 * Full name of the entity that created this vm. For MIG, this path is: projects/{project}/regions/{region}/InstanceGroupManagers/{igm} The value is retrieved from the vm metadata key of \"created-by\".
 * @member {String} creator
 */
AgentMetadata.prototype['creator'] = undefined;

/**
 * image version for the VM that this agent is installed on.
 * @member {String} imageVersion
 */
AgentMetadata.prototype['imageVersion'] = undefined;

/**
 * GCP instance name (go/instance-name).
 * @member {String} instance
 */
AgentMetadata.prototype['instance'] = undefined;

/**
 * GCP instance ID (go/instance-id).
 * @member {String} instanceId
 */
AgentMetadata.prototype['instanceId'] = undefined;

/**
 * If the GCP instance has received preemption notice.
 * @member {Boolean} instancePreemptionNoticeReceived
 */
AgentMetadata.prototype['instancePreemptionNoticeReceived'] = undefined;

/**
 * parsed contents of /etc/os-release
 * @member {Object.<String, String>} osRelease
 */
AgentMetadata.prototype['osRelease'] = undefined;

/**
 * agent binary version running on VM
 * @member {String} version
 */
AgentMetadata.prototype['version'] = undefined;

/**
 * Agent zone.
 * @member {String} zone
 */
AgentMetadata.prototype['zone'] = undefined;






export default AgentMetadata;

