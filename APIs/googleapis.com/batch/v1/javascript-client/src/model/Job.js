/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AllocationPolicy from './AllocationPolicy';
import JobNotification from './JobNotification';
import JobStatus from './JobStatus';
import LogsPolicy from './LogsPolicy';
import TaskGroup from './TaskGroup';

/**
 * The Job model module.
 * @module model/Job
 * @version v1
 */
class Job {
    /**
     * Constructs a new <code>Job</code>.
     * The Cloud Batch Job description.
     * @alias module:model/Job
     */
    constructor() { 
        
        Job.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Job</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Job} obj Optional instance to populate.
     * @return {module:model/Job} The populated <code>Job</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Job();

            if (data.hasOwnProperty('allocationPolicy')) {
                obj['allocationPolicy'] = AllocationPolicy.constructFromObject(data['allocationPolicy']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('logsPolicy')) {
                obj['logsPolicy'] = LogsPolicy.constructFromObject(data['logsPolicy']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notifications')) {
                obj['notifications'] = ApiClient.convertToType(data['notifications'], [JobNotification]);
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = JobStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('taskGroups')) {
                obj['taskGroups'] = ApiClient.convertToType(data['taskGroups'], [TaskGroup]);
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Job</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Job</code>.
     */
    static validateJSON(data) {
        // validate the optional field `allocationPolicy`
        if (data['allocationPolicy']) { // data not null
          AllocationPolicy.validateJSON(data['allocationPolicy']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `logsPolicy`
        if (data['logsPolicy']) { // data not null
          LogsPolicy.validateJSON(data['logsPolicy']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['notifications']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['notifications'])) {
                throw new Error("Expected the field `notifications` to be an array in the JSON data but got " + data['notifications']);
            }
            // validate the optional field `notifications` (array)
            for (const item of data['notifications']) {
                JobNotification.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['priority'] && !(typeof data['priority'] === 'string' || data['priority'] instanceof String)) {
            throw new Error("Expected the field `priority` to be a primitive type in the JSON string but got " + data['priority']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          JobStatus.validateJSON(data['status']);
        }
        if (data['taskGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taskGroups'])) {
                throw new Error("Expected the field `taskGroups` to be an array in the JSON data but got " + data['taskGroups']);
            }
            // validate the optional field `taskGroups` (array)
            for (const item of data['taskGroups']) {
                TaskGroup.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/AllocationPolicy} allocationPolicy
 */
Job.prototype['allocationPolicy'] = undefined;

/**
 * Output only. When the Job was created.
 * @member {String} createTime
 */
Job.prototype['createTime'] = undefined;

/**
 * Labels for the Job. Labels could be user provided or system generated. For example, \"labels\": { \"department\": \"finance\", \"environment\": \"test\" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with \"goog-\" or \"google-\" are reserved.
 * @member {Object.<String, String>} labels
 */
Job.prototype['labels'] = undefined;

/**
 * @member {module:model/LogsPolicy} logsPolicy
 */
Job.prototype['logsPolicy'] = undefined;

/**
 * Output only. Job name. For example: \"projects/123456/locations/us-central1/jobs/job01\".
 * @member {String} name
 */
Job.prototype['name'] = undefined;

/**
 * Notification configurations.
 * @member {Array.<module:model/JobNotification>} notifications
 */
Job.prototype['notifications'] = undefined;

/**
 * Priority of the Job. The valid value range is [0, 100). Default value is 0. Higher value indicates higher priority. A job with higher priority value is more likely to run earlier if all other requirements are satisfied.
 * @member {String} priority
 */
Job.prototype['priority'] = undefined;

/**
 * @member {module:model/JobStatus} status
 */
Job.prototype['status'] = undefined;

/**
 * Required. TaskGroups in the Job. Only one TaskGroup is supported now.
 * @member {Array.<module:model/TaskGroup>} taskGroups
 */
Job.prototype['taskGroups'] = undefined;

/**
 * Output only. A system generated unique ID for the Job.
 * @member {String} uid
 */
Job.prototype['uid'] = undefined;

/**
 * Output only. The last time the Job was updated.
 * @member {String} updateTime
 */
Job.prototype['updateTime'] = undefined;






export default Job;

