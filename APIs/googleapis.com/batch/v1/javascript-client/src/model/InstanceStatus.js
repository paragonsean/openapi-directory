/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Disk from './Disk';

/**
 * The InstanceStatus model module.
 * @module model/InstanceStatus
 * @version v1
 */
class InstanceStatus {
    /**
     * Constructs a new <code>InstanceStatus</code>.
     * VM instance status.
     * @alias module:model/InstanceStatus
     */
    constructor() { 
        
        InstanceStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InstanceStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstanceStatus} obj Optional instance to populate.
     * @return {module:model/InstanceStatus} The populated <code>InstanceStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstanceStatus();

            if (data.hasOwnProperty('bootDisk')) {
                obj['bootDisk'] = Disk.constructFromObject(data['bootDisk']);
            }
            if (data.hasOwnProperty('machineType')) {
                obj['machineType'] = ApiClient.convertToType(data['machineType'], 'String');
            }
            if (data.hasOwnProperty('provisioningModel')) {
                obj['provisioningModel'] = ApiClient.convertToType(data['provisioningModel'], 'String');
            }
            if (data.hasOwnProperty('taskPack')) {
                obj['taskPack'] = ApiClient.convertToType(data['taskPack'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InstanceStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InstanceStatus</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bootDisk`
        if (data['bootDisk']) { // data not null
          Disk.validateJSON(data['bootDisk']);
        }
        // ensure the json data is a string
        if (data['machineType'] && !(typeof data['machineType'] === 'string' || data['machineType'] instanceof String)) {
            throw new Error("Expected the field `machineType` to be a primitive type in the JSON string but got " + data['machineType']);
        }
        // ensure the json data is a string
        if (data['provisioningModel'] && !(typeof data['provisioningModel'] === 'string' || data['provisioningModel'] instanceof String)) {
            throw new Error("Expected the field `provisioningModel` to be a primitive type in the JSON string but got " + data['provisioningModel']);
        }
        // ensure the json data is a string
        if (data['taskPack'] && !(typeof data['taskPack'] === 'string' || data['taskPack'] instanceof String)) {
            throw new Error("Expected the field `taskPack` to be a primitive type in the JSON string but got " + data['taskPack']);
        }

        return true;
    }


}



/**
 * @member {module:model/Disk} bootDisk
 */
InstanceStatus.prototype['bootDisk'] = undefined;

/**
 * The Compute Engine machine type.
 * @member {String} machineType
 */
InstanceStatus.prototype['machineType'] = undefined;

/**
 * The VM instance provisioning model.
 * @member {module:model/InstanceStatus.ProvisioningModelEnum} provisioningModel
 */
InstanceStatus.prototype['provisioningModel'] = undefined;

/**
 * The max number of tasks can be assigned to this instance type.
 * @member {String} taskPack
 */
InstanceStatus.prototype['taskPack'] = undefined;





/**
 * Allowed values for the <code>provisioningModel</code> property.
 * @enum {String}
 * @readonly
 */
InstanceStatus['ProvisioningModelEnum'] = {

    /**
     * value: "PROVISIONING_MODEL_UNSPECIFIED"
     * @const
     */
    "PROVISIONING_MODEL_UNSPECIFIED": "PROVISIONING_MODEL_UNSPECIFIED",

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD",

    /**
     * value: "SPOT"
     * @const
     */
    "SPOT": "SPOT",

    /**
     * value: "PREEMPTIBLE"
     * @const
     */
    "PREEMPTIBLE": "PREEMPTIBLE"
};



export default InstanceStatus;

