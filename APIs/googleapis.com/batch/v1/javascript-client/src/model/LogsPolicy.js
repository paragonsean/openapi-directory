/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CloudLoggingOption from './CloudLoggingOption';

/**
 * The LogsPolicy model module.
 * @module model/LogsPolicy
 * @version v1
 */
class LogsPolicy {
    /**
     * Constructs a new <code>LogsPolicy</code>.
     * LogsPolicy describes how outputs from a Job&#39;s Tasks (stdout/stderr) will be preserved.
     * @alias module:model/LogsPolicy
     */
    constructor() { 
        
        LogsPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LogsPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogsPolicy} obj Optional instance to populate.
     * @return {module:model/LogsPolicy} The populated <code>LogsPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogsPolicy();

            if (data.hasOwnProperty('cloudLoggingOption')) {
                obj['cloudLoggingOption'] = CloudLoggingOption.constructFromObject(data['cloudLoggingOption']);
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ApiClient.convertToType(data['destination'], 'String');
            }
            if (data.hasOwnProperty('logsPath')) {
                obj['logsPath'] = ApiClient.convertToType(data['logsPath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogsPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogsPolicy</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cloudLoggingOption`
        if (data['cloudLoggingOption']) { // data not null
          CloudLoggingOption.validateJSON(data['cloudLoggingOption']);
        }
        // ensure the json data is a string
        if (data['destination'] && !(typeof data['destination'] === 'string' || data['destination'] instanceof String)) {
            throw new Error("Expected the field `destination` to be a primitive type in the JSON string but got " + data['destination']);
        }
        // ensure the json data is a string
        if (data['logsPath'] && !(typeof data['logsPath'] === 'string' || data['logsPath'] instanceof String)) {
            throw new Error("Expected the field `logsPath` to be a primitive type in the JSON string but got " + data['logsPath']);
        }

        return true;
    }


}



/**
 * @member {module:model/CloudLoggingOption} cloudLoggingOption
 */
LogsPolicy.prototype['cloudLoggingOption'] = undefined;

/**
 * Where logs should be saved.
 * @member {module:model/LogsPolicy.DestinationEnum} destination
 */
LogsPolicy.prototype['destination'] = undefined;

/**
 * The path to which logs are saved when the destination = PATH. This can be a local file path on the VM, or under the mount point of a Persistent Disk or Filestore, or a Cloud Storage path.
 * @member {String} logsPath
 */
LogsPolicy.prototype['logsPath'] = undefined;





/**
 * Allowed values for the <code>destination</code> property.
 * @enum {String}
 * @readonly
 */
LogsPolicy['DestinationEnum'] = {

    /**
     * value: "DESTINATION_UNSPECIFIED"
     * @const
     */
    "DESTINATION_UNSPECIFIED": "DESTINATION_UNSPECIFIED",

    /**
     * value: "CLOUD_LOGGING"
     * @const
     */
    "CLOUD_LOGGING": "CLOUD_LOGGING",

    /**
     * value: "PATH"
     * @const
     */
    "PATH": "PATH"
};



export default LogsPolicy;

