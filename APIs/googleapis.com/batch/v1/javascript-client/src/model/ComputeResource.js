/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ComputeResource model module.
 * @module model/ComputeResource
 * @version v1
 */
class ComputeResource {
    /**
     * Constructs a new <code>ComputeResource</code>.
     * Compute resource requirements. ComputeResource defines the amount of resources required for each task. Make sure your tasks have enough resources to successfully run. If you also define the types of resources for a job to use with the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure both fields are compatible with each other.
     * @alias module:model/ComputeResource
     */
    constructor() { 
        
        ComputeResource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ComputeResource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComputeResource} obj Optional instance to populate.
     * @return {module:model/ComputeResource} The populated <code>ComputeResource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComputeResource();

            if (data.hasOwnProperty('bootDiskMib')) {
                obj['bootDiskMib'] = ApiClient.convertToType(data['bootDiskMib'], 'String');
            }
            if (data.hasOwnProperty('cpuMilli')) {
                obj['cpuMilli'] = ApiClient.convertToType(data['cpuMilli'], 'String');
            }
            if (data.hasOwnProperty('memoryMib')) {
                obj['memoryMib'] = ApiClient.convertToType(data['memoryMib'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComputeResource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComputeResource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bootDiskMib'] && !(typeof data['bootDiskMib'] === 'string' || data['bootDiskMib'] instanceof String)) {
            throw new Error("Expected the field `bootDiskMib` to be a primitive type in the JSON string but got " + data['bootDiskMib']);
        }
        // ensure the json data is a string
        if (data['cpuMilli'] && !(typeof data['cpuMilli'] === 'string' || data['cpuMilli'] instanceof String)) {
            throw new Error("Expected the field `cpuMilli` to be a primitive type in the JSON string but got " + data['cpuMilli']);
        }
        // ensure the json data is a string
        if (data['memoryMib'] && !(typeof data['memoryMib'] === 'string' || data['memoryMib'] instanceof String)) {
            throw new Error("Expected the field `memoryMib` to be a primitive type in the JSON string but got " + data['memoryMib']);
        }

        return true;
    }


}



/**
 * Extra boot disk size in MiB for each task.
 * @member {String} bootDiskMib
 */
ComputeResource.prototype['bootDiskMib'] = undefined;

/**
 * The milliCPU count. `cpuMilli` defines the amount of CPU resources per task in milliCPU units. For example, `1000` corresponds to 1 vCPU per task. If undefined, the default value is `2000`. If you also define the VM's machine type using the `machineType` in [InstancePolicy](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicy) field or inside the `instanceTemplate` in the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure the CPU resources for both fields are compatible with each other and with how many tasks you want to allow to run on the same VM at the same time. For example, if you specify the `n2-standard-2` machine type, which has 2 vCPUs each, you are recommended to set `cpuMilli` no more than `2000`, or you are recommended to run two tasks on the same VM if you set `cpuMilli` to `1000` or less.
 * @member {String} cpuMilli
 */
ComputeResource.prototype['cpuMilli'] = undefined;

/**
 * Memory in MiB. `memoryMib` defines the amount of memory per task in MiB units. If undefined, the default value is `2000`. If you also define the VM's machine type using the `machineType` in [InstancePolicy](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicy) field or inside the `instanceTemplate` in the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure the memory resources for both fields are compatible with each other and with how many tasks you want to allow to run on the same VM at the same time. For example, if you specify the `n2-standard-2` machine type, which has 8 GiB each, you are recommended to set `memoryMib` to no more than `8192`, or you are recommended to run two tasks on the same VM if you set `memoryMib` to `4096` or less.
 * @member {String} memoryMib
 */
ComputeResource.prototype['memoryMib'] = undefined;






export default ComputeResource;

