/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TaskExecution model module.
 * @module model/TaskExecution
 * @version v1
 */
class TaskExecution {
    /**
     * Constructs a new <code>TaskExecution</code>.
     * This Task Execution field includes detail information for task execution procedures, based on StatusEvent types.
     * @alias module:model/TaskExecution
     */
    constructor() { 
        
        TaskExecution.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskExecution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskExecution} obj Optional instance to populate.
     * @return {module:model/TaskExecution} The populated <code>TaskExecution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskExecution();

            if (data.hasOwnProperty('exitCode')) {
                obj['exitCode'] = ApiClient.convertToType(data['exitCode'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskExecution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskExecution</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * When task is completed as the status of FAILED or SUCCEEDED, exit code is for one task execution result, default is 0 as success.
 * @member {Number} exitCode
 */
TaskExecution.prototype['exitCode'] = undefined;






export default TaskExecution;

