/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Environment from './Environment';
import TaskSpec from './TaskSpec';

/**
 * The TaskGroup model module.
 * @module model/TaskGroup
 * @version v1
 */
class TaskGroup {
    /**
     * Constructs a new <code>TaskGroup</code>.
     * A TaskGroup defines one or more Tasks that all share the same TaskSpec.
     * @alias module:model/TaskGroup
     */
    constructor() { 
        
        TaskGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskGroup} obj Optional instance to populate.
     * @return {module:model/TaskGroup} The populated <code>TaskGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskGroup();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parallelism')) {
                obj['parallelism'] = ApiClient.convertToType(data['parallelism'], 'String');
            }
            if (data.hasOwnProperty('permissiveSsh')) {
                obj['permissiveSsh'] = ApiClient.convertToType(data['permissiveSsh'], 'Boolean');
            }
            if (data.hasOwnProperty('requireHostsFile')) {
                obj['requireHostsFile'] = ApiClient.convertToType(data['requireHostsFile'], 'Boolean');
            }
            if (data.hasOwnProperty('runAsNonRoot')) {
                obj['runAsNonRoot'] = ApiClient.convertToType(data['runAsNonRoot'], 'Boolean');
            }
            if (data.hasOwnProperty('schedulingPolicy')) {
                obj['schedulingPolicy'] = ApiClient.convertToType(data['schedulingPolicy'], 'String');
            }
            if (data.hasOwnProperty('taskCount')) {
                obj['taskCount'] = ApiClient.convertToType(data['taskCount'], 'String');
            }
            if (data.hasOwnProperty('taskCountPerNode')) {
                obj['taskCountPerNode'] = ApiClient.convertToType(data['taskCountPerNode'], 'String');
            }
            if (data.hasOwnProperty('taskEnvironments')) {
                obj['taskEnvironments'] = ApiClient.convertToType(data['taskEnvironments'], [Environment]);
            }
            if (data.hasOwnProperty('taskSpec')) {
                obj['taskSpec'] = TaskSpec.constructFromObject(data['taskSpec']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskGroup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parallelism'] && !(typeof data['parallelism'] === 'string' || data['parallelism'] instanceof String)) {
            throw new Error("Expected the field `parallelism` to be a primitive type in the JSON string but got " + data['parallelism']);
        }
        // ensure the json data is a string
        if (data['schedulingPolicy'] && !(typeof data['schedulingPolicy'] === 'string' || data['schedulingPolicy'] instanceof String)) {
            throw new Error("Expected the field `schedulingPolicy` to be a primitive type in the JSON string but got " + data['schedulingPolicy']);
        }
        // ensure the json data is a string
        if (data['taskCount'] && !(typeof data['taskCount'] === 'string' || data['taskCount'] instanceof String)) {
            throw new Error("Expected the field `taskCount` to be a primitive type in the JSON string but got " + data['taskCount']);
        }
        // ensure the json data is a string
        if (data['taskCountPerNode'] && !(typeof data['taskCountPerNode'] === 'string' || data['taskCountPerNode'] instanceof String)) {
            throw new Error("Expected the field `taskCountPerNode` to be a primitive type in the JSON string but got " + data['taskCountPerNode']);
        }
        if (data['taskEnvironments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taskEnvironments'])) {
                throw new Error("Expected the field `taskEnvironments` to be an array in the JSON data but got " + data['taskEnvironments']);
            }
            // validate the optional field `taskEnvironments` (array)
            for (const item of data['taskEnvironments']) {
                Environment.validateJSON(item);
            };
        }
        // validate the optional field `taskSpec`
        if (data['taskSpec']) { // data not null
          TaskSpec.validateJSON(data['taskSpec']);
        }

        return true;
    }


}



/**
 * Output only. TaskGroup name. The system generates this field based on parent Job name. For example: \"projects/123456/locations/us-west1/jobs/job01/taskGroups/group01\".
 * @member {String} name
 */
TaskGroup.prototype['name'] = undefined;

/**
 * Max number of tasks that can run in parallel. Default to min(task_count, parallel tasks per job limit). See: [Job Limits](https://cloud.google.com/batch/quotas#job_limits). Field parallelism must be 1 if the scheduling_policy is IN_ORDER.
 * @member {String} parallelism
 */
TaskGroup.prototype['parallelism'] = undefined;

/**
 * When true, Batch will configure SSH to allow passwordless login between VMs running the Batch tasks in the same TaskGroup.
 * @member {Boolean} permissiveSsh
 */
TaskGroup.prototype['permissiveSsh'] = undefined;

/**
 * When true, Batch will populate a file with a list of all VMs assigned to the TaskGroup and set the BATCH_HOSTS_FILE environment variable to the path of that file. Defaults to false. The host file supports up to 1000 VMs.
 * @member {Boolean} requireHostsFile
 */
TaskGroup.prototype['requireHostsFile'] = undefined;

/**
 * Optional. If not set or set to false, Batch uses the root user to execute runnables. If set to true, Batch runs the runnables using a non-root user. Currently, the non-root user Batch used is generated by OS Login. For more information, see [About OS Login](https://cloud.google.com/compute/docs/oslogin).
 * @member {Boolean} runAsNonRoot
 */
TaskGroup.prototype['runAsNonRoot'] = undefined;

/**
 * Scheduling policy for Tasks in the TaskGroup. The default value is AS_SOON_AS_POSSIBLE.
 * @member {module:model/TaskGroup.SchedulingPolicyEnum} schedulingPolicy
 */
TaskGroup.prototype['schedulingPolicy'] = undefined;

/**
 * Number of Tasks in the TaskGroup. Default is 1.
 * @member {String} taskCount
 */
TaskGroup.prototype['taskCount'] = undefined;

/**
 * Max number of tasks that can be run on a VM at the same time. If not specified, the system will decide a value based on available compute resources on a VM and task requirements.
 * @member {String} taskCountPerNode
 */
TaskGroup.prototype['taskCountPerNode'] = undefined;

/**
 * An array of environment variable mappings, which are passed to Tasks with matching indices. If task_environments is used then task_count should not be specified in the request (and will be ignored). Task count will be the length of task_environments. Tasks get a BATCH_TASK_INDEX and BATCH_TASK_COUNT environment variable, in addition to any environment variables set in task_environments, specifying the number of Tasks in the Task's parent TaskGroup, and the specific Task's index in the TaskGroup (0 through BATCH_TASK_COUNT - 1).
 * @member {Array.<module:model/Environment>} taskEnvironments
 */
TaskGroup.prototype['taskEnvironments'] = undefined;

/**
 * @member {module:model/TaskSpec} taskSpec
 */
TaskGroup.prototype['taskSpec'] = undefined;





/**
 * Allowed values for the <code>schedulingPolicy</code> property.
 * @enum {String}
 * @readonly
 */
TaskGroup['SchedulingPolicyEnum'] = {

    /**
     * value: "SCHEDULING_POLICY_UNSPECIFIED"
     * @const
     */
    "SCHEDULING_POLICY_UNSPECIFIED": "SCHEDULING_POLICY_UNSPECIFIED",

    /**
     * value: "AS_SOON_AS_POSSIBLE"
     * @const
     */
    "AS_SOON_AS_POSSIBLE": "AS_SOON_AS_POSSIBLE",

    /**
     * value: "IN_ORDER"
     * @const
     */
    "IN_ORDER": "IN_ORDER"
};



export default TaskGroup;

