/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ComputeResource from './ComputeResource';
import Environment from './Environment';
import LifecyclePolicy from './LifecyclePolicy';
import Runnable from './Runnable';
import Volume from './Volume';

/**
 * The TaskSpec model module.
 * @module model/TaskSpec
 * @version v1
 */
class TaskSpec {
    /**
     * Constructs a new <code>TaskSpec</code>.
     * Spec of a task
     * @alias module:model/TaskSpec
     */
    constructor() { 
        
        TaskSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskSpec} obj Optional instance to populate.
     * @return {module:model/TaskSpec} The populated <code>TaskSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskSpec();

            if (data.hasOwnProperty('computeResource')) {
                obj['computeResource'] = ComputeResource.constructFromObject(data['computeResource']);
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = Environment.constructFromObject(data['environment']);
            }
            if (data.hasOwnProperty('environments')) {
                obj['environments'] = ApiClient.convertToType(data['environments'], {'String': 'String'});
            }
            if (data.hasOwnProperty('lifecyclePolicies')) {
                obj['lifecyclePolicies'] = ApiClient.convertToType(data['lifecyclePolicies'], [LifecyclePolicy]);
            }
            if (data.hasOwnProperty('maxRetryCount')) {
                obj['maxRetryCount'] = ApiClient.convertToType(data['maxRetryCount'], 'Number');
            }
            if (data.hasOwnProperty('maxRunDuration')) {
                obj['maxRunDuration'] = ApiClient.convertToType(data['maxRunDuration'], 'String');
            }
            if (data.hasOwnProperty('runnables')) {
                obj['runnables'] = ApiClient.convertToType(data['runnables'], [Runnable]);
            }
            if (data.hasOwnProperty('volumes')) {
                obj['volumes'] = ApiClient.convertToType(data['volumes'], [Volume]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskSpec</code>.
     */
    static validateJSON(data) {
        // validate the optional field `computeResource`
        if (data['computeResource']) { // data not null
          ComputeResource.validateJSON(data['computeResource']);
        }
        // validate the optional field `environment`
        if (data['environment']) { // data not null
          Environment.validateJSON(data['environment']);
        }
        if (data['lifecyclePolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lifecyclePolicies'])) {
                throw new Error("Expected the field `lifecyclePolicies` to be an array in the JSON data but got " + data['lifecyclePolicies']);
            }
            // validate the optional field `lifecyclePolicies` (array)
            for (const item of data['lifecyclePolicies']) {
                LifecyclePolicy.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['maxRunDuration'] && !(typeof data['maxRunDuration'] === 'string' || data['maxRunDuration'] instanceof String)) {
            throw new Error("Expected the field `maxRunDuration` to be a primitive type in the JSON string but got " + data['maxRunDuration']);
        }
        if (data['runnables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['runnables'])) {
                throw new Error("Expected the field `runnables` to be an array in the JSON data but got " + data['runnables']);
            }
            // validate the optional field `runnables` (array)
            for (const item of data['runnables']) {
                Runnable.validateJSON(item);
            };
        }
        if (data['volumes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['volumes'])) {
                throw new Error("Expected the field `volumes` to be an array in the JSON data but got " + data['volumes']);
            }
            // validate the optional field `volumes` (array)
            for (const item of data['volumes']) {
                Volume.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/ComputeResource} computeResource
 */
TaskSpec.prototype['computeResource'] = undefined;

/**
 * @member {module:model/Environment} environment
 */
TaskSpec.prototype['environment'] = undefined;

/**
 * Deprecated: please use environment(non-plural) instead.
 * @member {Object.<String, String>} environments
 */
TaskSpec.prototype['environments'] = undefined;

/**
 * Lifecycle management schema when any task in a task group is failed. Currently we only support one lifecycle policy. When the lifecycle policy condition is met, the action in the policy will execute. If task execution result does not meet with the defined lifecycle policy, we consider it as the default policy. Default policy means if the exit code is 0, exit task. If task ends with non-zero exit code, retry the task with max_retry_count.
 * @member {Array.<module:model/LifecyclePolicy>} lifecyclePolicies
 */
TaskSpec.prototype['lifecyclePolicies'] = undefined;

/**
 * Maximum number of retries on failures. The default, 0, which means never retry. The valid value range is [0, 10].
 * @member {Number} maxRetryCount
 */
TaskSpec.prototype['maxRetryCount'] = undefined;

/**
 * Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.
 * @member {String} maxRunDuration
 */
TaskSpec.prototype['maxRunDuration'] = undefined;

/**
 * The sequence of scripts or containers to run for this Task. Each Task using this TaskSpec executes its list of runnables in order. The Task succeeds if all of its runnables either exit with a zero status or any that exit with a non-zero status have the ignore_exit_status flag. Background runnables are killed automatically (if they have not already exited) a short time after all foreground runnables have completed. Even though this is likely to result in a non-zero exit status for the background runnable, these automatic kills are not treated as Task failures.
 * @member {Array.<module:model/Runnable>} runnables
 */
TaskSpec.prototype['runnables'] = undefined;

/**
 * Volumes to mount before running Tasks using this TaskSpec.
 * @member {Array.<module:model/Volume>} volumes
 */
TaskSpec.prototype['volumes'] = undefined;






export default TaskSpec;

