/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GCS from './GCS';
import NFS from './NFS';

/**
 * The Volume model module.
 * @module model/Volume
 * @version v1
 */
class Volume {
    /**
     * Constructs a new <code>Volume</code>.
     * Volume describes a volume and parameters for it to be mounted to a VM.
     * @alias module:model/Volume
     */
    constructor() { 
        
        Volume.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Volume</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Volume} obj Optional instance to populate.
     * @return {module:model/Volume} The populated <code>Volume</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Volume();

            if (data.hasOwnProperty('deviceName')) {
                obj['deviceName'] = ApiClient.convertToType(data['deviceName'], 'String');
            }
            if (data.hasOwnProperty('gcs')) {
                obj['gcs'] = GCS.constructFromObject(data['gcs']);
            }
            if (data.hasOwnProperty('mountOptions')) {
                obj['mountOptions'] = ApiClient.convertToType(data['mountOptions'], ['String']);
            }
            if (data.hasOwnProperty('mountPath')) {
                obj['mountPath'] = ApiClient.convertToType(data['mountPath'], 'String');
            }
            if (data.hasOwnProperty('nfs')) {
                obj['nfs'] = NFS.constructFromObject(data['nfs']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Volume</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Volume</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deviceName'] && !(typeof data['deviceName'] === 'string' || data['deviceName'] instanceof String)) {
            throw new Error("Expected the field `deviceName` to be a primitive type in the JSON string but got " + data['deviceName']);
        }
        // validate the optional field `gcs`
        if (data['gcs']) { // data not null
          GCS.validateJSON(data['gcs']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mountOptions'])) {
            throw new Error("Expected the field `mountOptions` to be an array in the JSON data but got " + data['mountOptions']);
        }
        // ensure the json data is a string
        if (data['mountPath'] && !(typeof data['mountPath'] === 'string' || data['mountPath'] instanceof String)) {
            throw new Error("Expected the field `mountPath` to be a primitive type in the JSON string but got " + data['mountPath']);
        }
        // validate the optional field `nfs`
        if (data['nfs']) { // data not null
          NFS.validateJSON(data['nfs']);
        }

        return true;
    }


}



/**
 * Device name of an attached disk volume, which should align with a device_name specified by job.allocation_policy.instances[0].policy.disks[i].device_name or defined by the given instance template in job.allocation_policy.instances[0].instance_template.
 * @member {String} deviceName
 */
Volume.prototype['deviceName'] = undefined;

/**
 * @member {module:model/GCS} gcs
 */
Volume.prototype['gcs'] = undefined;

/**
 * For Google Cloud Storage (GCS), mount options are the options supported by the gcsfuse tool (https://github.com/GoogleCloudPlatform/gcsfuse). For existing persistent disks, mount options provided by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html) except writing are supported. This is due to restrictions of multi-writer mode (https://cloud.google.com/compute/docs/disks/sharing-disks-between-vms). For other attached disks and Network File System (NFS), mount options are these supported by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html).
 * @member {Array.<String>} mountOptions
 */
Volume.prototype['mountOptions'] = undefined;

/**
 * The mount path for the volume, e.g. /mnt/disks/share.
 * @member {String} mountPath
 */
Volume.prototype['mountPath'] = undefined;

/**
 * @member {module:model/NFS} nfs
 */
Volume.prototype['nfs'] = undefined;






export default Volume;

