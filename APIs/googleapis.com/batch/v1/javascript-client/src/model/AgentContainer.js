/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AgentContainer model module.
 * @module model/AgentContainer
 * @version v1
 */
class AgentContainer {
    /**
     * Constructs a new <code>AgentContainer</code>.
     * Container runnable representation on the agent side.
     * @alias module:model/AgentContainer
     */
    constructor() { 
        
        AgentContainer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AgentContainer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AgentContainer} obj Optional instance to populate.
     * @return {module:model/AgentContainer} The populated <code>AgentContainer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AgentContainer();

            if (data.hasOwnProperty('commands')) {
                obj['commands'] = ApiClient.convertToType(data['commands'], ['String']);
            }
            if (data.hasOwnProperty('entrypoint')) {
                obj['entrypoint'] = ApiClient.convertToType(data['entrypoint'], 'String');
            }
            if (data.hasOwnProperty('imageUri')) {
                obj['imageUri'] = ApiClient.convertToType(data['imageUri'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], 'String');
            }
            if (data.hasOwnProperty('volumes')) {
                obj['volumes'] = ApiClient.convertToType(data['volumes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AgentContainer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AgentContainer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['commands'])) {
            throw new Error("Expected the field `commands` to be an array in the JSON data but got " + data['commands']);
        }
        // ensure the json data is a string
        if (data['entrypoint'] && !(typeof data['entrypoint'] === 'string' || data['entrypoint'] instanceof String)) {
            throw new Error("Expected the field `entrypoint` to be a primitive type in the JSON string but got " + data['entrypoint']);
        }
        // ensure the json data is a string
        if (data['imageUri'] && !(typeof data['imageUri'] === 'string' || data['imageUri'] instanceof String)) {
            throw new Error("Expected the field `imageUri` to be a primitive type in the JSON string but got " + data['imageUri']);
        }
        // ensure the json data is a string
        if (data['options'] && !(typeof data['options'] === 'string' || data['options'] instanceof String)) {
            throw new Error("Expected the field `options` to be a primitive type in the JSON string but got " + data['options']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['volumes'])) {
            throw new Error("Expected the field `volumes` to be an array in the JSON data but got " + data['volumes']);
        }

        return true;
    }


}



/**
 * Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.
 * @member {Array.<String>} commands
 */
AgentContainer.prototype['commands'] = undefined;

/**
 * Overrides the `ENTRYPOINT` specified in the container.
 * @member {String} entrypoint
 */
AgentContainer.prototype['entrypoint'] = undefined;

/**
 * The URI to pull the container image from.
 * @member {String} imageUri
 */
AgentContainer.prototype['imageUri'] = undefined;

/**
 * Arbitrary additional options to include in the \"docker run\" command when running this container, e.g. \"--network host\".
 * @member {String} options
 */
AgentContainer.prototype['options'] = undefined;

/**
 * Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro
 * @member {Array.<String>} volumes
 */
AgentContainer.prototype['volumes'] = undefined;






export default AgentContainer;

