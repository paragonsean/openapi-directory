/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AgentTaskInfo from './AgentTaskInfo';

/**
 * The AgentInfo model module.
 * @module model/AgentInfo
 * @version v1
 */
class AgentInfo {
    /**
     * Constructs a new <code>AgentInfo</code>.
     * VM Agent Info.
     * @alias module:model/AgentInfo
     */
    constructor() { 
        
        AgentInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AgentInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AgentInfo} obj Optional instance to populate.
     * @return {module:model/AgentInfo} The populated <code>AgentInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AgentInfo();

            if (data.hasOwnProperty('jobId')) {
                obj['jobId'] = ApiClient.convertToType(data['jobId'], 'String');
            }
            if (data.hasOwnProperty('reportTime')) {
                obj['reportTime'] = ApiClient.convertToType(data['reportTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('taskGroupId')) {
                obj['taskGroupId'] = ApiClient.convertToType(data['taskGroupId'], 'String');
            }
            if (data.hasOwnProperty('tasks')) {
                obj['tasks'] = ApiClient.convertToType(data['tasks'], [AgentTaskInfo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AgentInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AgentInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['jobId'] && !(typeof data['jobId'] === 'string' || data['jobId'] instanceof String)) {
            throw new Error("Expected the field `jobId` to be a primitive type in the JSON string but got " + data['jobId']);
        }
        // ensure the json data is a string
        if (data['reportTime'] && !(typeof data['reportTime'] === 'string' || data['reportTime'] instanceof String)) {
            throw new Error("Expected the field `reportTime` to be a primitive type in the JSON string but got " + data['reportTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['taskGroupId'] && !(typeof data['taskGroupId'] === 'string' || data['taskGroupId'] instanceof String)) {
            throw new Error("Expected the field `taskGroupId` to be a primitive type in the JSON string but got " + data['taskGroupId']);
        }
        if (data['tasks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tasks'])) {
                throw new Error("Expected the field `tasks` to be an array in the JSON data but got " + data['tasks']);
            }
            // validate the optional field `tasks` (array)
            for (const item of data['tasks']) {
                AgentTaskInfo.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Optional. The assigned Job ID
 * @member {String} jobId
 */
AgentInfo.prototype['jobId'] = undefined;

/**
 * When the AgentInfo is generated.
 * @member {String} reportTime
 */
AgentInfo.prototype['reportTime'] = undefined;

/**
 * Agent state.
 * @member {module:model/AgentInfo.StateEnum} state
 */
AgentInfo.prototype['state'] = undefined;

/**
 * The assigned task group ID.
 * @member {String} taskGroupId
 */
AgentInfo.prototype['taskGroupId'] = undefined;

/**
 * Task Info.
 * @member {Array.<module:model/AgentTaskInfo>} tasks
 */
AgentInfo.prototype['tasks'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
AgentInfo['StateEnum'] = {

    /**
     * value: "AGENT_STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "AGENT_STATE_UNSPECIFIED",

    /**
     * value: "AGENT_STARTING"
     * @const
     */
    "STARTING": "AGENT_STARTING",

    /**
     * value: "AGENT_RUNNING"
     * @const
     */
    "RUNNING": "AGENT_RUNNING",

    /**
     * value: "AGENT_STOPPED"
     * @const
     */
    "STOPPED": "AGENT_STOPPED"
};



export default AgentInfo;

