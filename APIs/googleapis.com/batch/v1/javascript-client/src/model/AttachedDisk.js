/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Disk from './Disk';

/**
 * The AttachedDisk model module.
 * @module model/AttachedDisk
 * @version v1
 */
class AttachedDisk {
    /**
     * Constructs a new <code>AttachedDisk</code>.
     * A new or an existing persistent disk (PD) or a local ssd attached to a VM instance.
     * @alias module:model/AttachedDisk
     */
    constructor() { 
        
        AttachedDisk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AttachedDisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttachedDisk} obj Optional instance to populate.
     * @return {module:model/AttachedDisk} The populated <code>AttachedDisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttachedDisk();

            if (data.hasOwnProperty('deviceName')) {
                obj['deviceName'] = ApiClient.convertToType(data['deviceName'], 'String');
            }
            if (data.hasOwnProperty('existingDisk')) {
                obj['existingDisk'] = ApiClient.convertToType(data['existingDisk'], 'String');
            }
            if (data.hasOwnProperty('newDisk')) {
                obj['newDisk'] = Disk.constructFromObject(data['newDisk']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttachedDisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttachedDisk</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deviceName'] && !(typeof data['deviceName'] === 'string' || data['deviceName'] instanceof String)) {
            throw new Error("Expected the field `deviceName` to be a primitive type in the JSON string but got " + data['deviceName']);
        }
        // ensure the json data is a string
        if (data['existingDisk'] && !(typeof data['existingDisk'] === 'string' || data['existingDisk'] instanceof String)) {
            throw new Error("Expected the field `existingDisk` to be a primitive type in the JSON string but got " + data['existingDisk']);
        }
        // validate the optional field `newDisk`
        if (data['newDisk']) { // data not null
          Disk.validateJSON(data['newDisk']);
        }

        return true;
    }


}



/**
 * Device name that the guest operating system will see. It is used by Runnable.volumes field to mount disks. So please specify the device_name if you want Batch to help mount the disk, and it should match the device_name field in volumes.
 * @member {String} deviceName
 */
AttachedDisk.prototype['deviceName'] = undefined;

/**
 * Name of an existing PD.
 * @member {String} existingDisk
 */
AttachedDisk.prototype['existingDisk'] = undefined;

/**
 * @member {module:model/Disk} newDisk
 */
AttachedDisk.prototype['newDisk'] = undefined;






export default AttachedDisk;

