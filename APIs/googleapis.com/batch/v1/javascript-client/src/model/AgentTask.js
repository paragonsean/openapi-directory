/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AgentTaskSpec from './AgentTaskSpec';
import TaskSpec from './TaskSpec';
import TaskStatus from './TaskStatus';

/**
 * The AgentTask model module.
 * @module model/AgentTask
 * @version v1
 */
class AgentTask {
    /**
     * Constructs a new <code>AgentTask</code>.
     * TODO(b/182501497) The message needs to be redefined when the Agent API server updates data in storage per the backend design.
     * @alias module:model/AgentTask
     */
    constructor() { 
        
        AgentTask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AgentTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AgentTask} obj Optional instance to populate.
     * @return {module:model/AgentTask} The populated <code>AgentTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AgentTask();

            if (data.hasOwnProperty('agentTaskSpec')) {
                obj['agentTaskSpec'] = AgentTaskSpec.constructFromObject(data['agentTaskSpec']);
            }
            if (data.hasOwnProperty('intendedState')) {
                obj['intendedState'] = ApiClient.convertToType(data['intendedState'], 'String');
            }
            if (data.hasOwnProperty('reachedBarrier')) {
                obj['reachedBarrier'] = ApiClient.convertToType(data['reachedBarrier'], 'String');
            }
            if (data.hasOwnProperty('spec')) {
                obj['spec'] = TaskSpec.constructFromObject(data['spec']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TaskStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('task')) {
                obj['task'] = ApiClient.convertToType(data['task'], 'String');
            }
            if (data.hasOwnProperty('taskSource')) {
                obj['taskSource'] = ApiClient.convertToType(data['taskSource'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AgentTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AgentTask</code>.
     */
    static validateJSON(data) {
        // validate the optional field `agentTaskSpec`
        if (data['agentTaskSpec']) { // data not null
          AgentTaskSpec.validateJSON(data['agentTaskSpec']);
        }
        // ensure the json data is a string
        if (data['intendedState'] && !(typeof data['intendedState'] === 'string' || data['intendedState'] instanceof String)) {
            throw new Error("Expected the field `intendedState` to be a primitive type in the JSON string but got " + data['intendedState']);
        }
        // ensure the json data is a string
        if (data['reachedBarrier'] && !(typeof data['reachedBarrier'] === 'string' || data['reachedBarrier'] instanceof String)) {
            throw new Error("Expected the field `reachedBarrier` to be a primitive type in the JSON string but got " + data['reachedBarrier']);
        }
        // validate the optional field `spec`
        if (data['spec']) { // data not null
          TaskSpec.validateJSON(data['spec']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          TaskStatus.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['task'] && !(typeof data['task'] === 'string' || data['task'] instanceof String)) {
            throw new Error("Expected the field `task` to be a primitive type in the JSON string but got " + data['task']);
        }
        // ensure the json data is a string
        if (data['taskSource'] && !(typeof data['taskSource'] === 'string' || data['taskSource'] instanceof String)) {
            throw new Error("Expected the field `taskSource` to be a primitive type in the JSON string but got " + data['taskSource']);
        }

        return true;
    }


}



/**
 * @member {module:model/AgentTaskSpec} agentTaskSpec
 */
AgentTask.prototype['agentTaskSpec'] = undefined;

/**
 * The intended state of the task.
 * @member {module:model/AgentTask.IntendedStateEnum} intendedState
 */
AgentTask.prototype['intendedState'] = undefined;

/**
 * The highest barrier reached by all tasks in the task's TaskGroup.
 * @member {String} reachedBarrier
 */
AgentTask.prototype['reachedBarrier'] = undefined;

/**
 * @member {module:model/TaskSpec} spec
 */
AgentTask.prototype['spec'] = undefined;

/**
 * @member {module:model/TaskStatus} status
 */
AgentTask.prototype['status'] = undefined;

/**
 * Task name.
 * @member {String} task
 */
AgentTask.prototype['task'] = undefined;

/**
 * TaskSource represents the source of the task.
 * @member {module:model/AgentTask.TaskSourceEnum} taskSource
 */
AgentTask.prototype['taskSource'] = undefined;





/**
 * Allowed values for the <code>intendedState</code> property.
 * @enum {String}
 * @readonly
 */
AgentTask['IntendedStateEnum'] = {

    /**
     * value: "INTENDED_STATE_UNSPECIFIED"
     * @const
     */
    "INTENDED_STATE_UNSPECIFIED": "INTENDED_STATE_UNSPECIFIED",

    /**
     * value: "ASSIGNED"
     * @const
     */
    "ASSIGNED": "ASSIGNED",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};


/**
 * Allowed values for the <code>taskSource</code> property.
 * @enum {String}
 * @readonly
 */
AgentTask['TaskSourceEnum'] = {

    /**
     * value: "TASK_SOURCE_UNSPECIFIED"
     * @const
     */
    "TASK_SOURCE_UNSPECIFIED": "TASK_SOURCE_UNSPECIFIED",

    /**
     * value: "BATCH_INTERNAL"
     * @const
     */
    "BATCH_INTERNAL": "BATCH_INTERNAL",

    /**
     * value: "USER"
     * @const
     */
    "USER": "USER"
};



export default AgentTask;

