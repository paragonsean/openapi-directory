/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActionCondition from './ActionCondition';

/**
 * The LifecyclePolicy model module.
 * @module model/LifecyclePolicy
 * @version v1
 */
class LifecyclePolicy {
    /**
     * Constructs a new <code>LifecyclePolicy</code>.
     * LifecyclePolicy describes how to deal with task failures based on different conditions.
     * @alias module:model/LifecyclePolicy
     */
    constructor() { 
        
        LifecyclePolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LifecyclePolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LifecyclePolicy} obj Optional instance to populate.
     * @return {module:model/LifecyclePolicy} The populated <code>LifecyclePolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LifecyclePolicy();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('actionCondition')) {
                obj['actionCondition'] = ActionCondition.constructFromObject(data['actionCondition']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LifecyclePolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LifecyclePolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // validate the optional field `actionCondition`
        if (data['actionCondition']) { // data not null
          ActionCondition.validateJSON(data['actionCondition']);
        }

        return true;
    }


}



/**
 * Action to execute when ActionCondition is true. When RETRY_TASK is specified, we will retry failed tasks if we notice any exit code match and fail tasks if no match is found. Likewise, when FAIL_TASK is specified, we will fail tasks if we notice any exit code match and retry tasks if no match is found.
 * @member {module:model/LifecyclePolicy.ActionEnum} action
 */
LifecyclePolicy.prototype['action'] = undefined;

/**
 * @member {module:model/ActionCondition} actionCondition
 */
LifecyclePolicy.prototype['actionCondition'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
LifecyclePolicy['ActionEnum'] = {

    /**
     * value: "ACTION_UNSPECIFIED"
     * @const
     */
    "ACTION_UNSPECIFIED": "ACTION_UNSPECIFIED",

    /**
     * value: "RETRY_TASK"
     * @const
     */
    "RETRY_TASK": "RETRY_TASK",

    /**
     * value: "FAIL_TASK"
     * @const
     */
    "FAIL_TASK": "FAIL_TASK"
};



export default LifecyclePolicy;

