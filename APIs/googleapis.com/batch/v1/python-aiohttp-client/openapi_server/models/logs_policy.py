# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloud_logging_option import CloudLoggingOption
from openapi_server import util


class LogsPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_logging_option: CloudLoggingOption=None, destination: str=None, logs_path: str=None):
        """LogsPolicy - a model defined in OpenAPI

        :param cloud_logging_option: The cloud_logging_option of this LogsPolicy.
        :param destination: The destination of this LogsPolicy.
        :param logs_path: The logs_path of this LogsPolicy.
        """
        self.openapi_types = {
            'cloud_logging_option': CloudLoggingOption,
            'destination': str,
            'logs_path': str
        }

        self.attribute_map = {
            'cloud_logging_option': 'cloudLoggingOption',
            'destination': 'destination',
            'logs_path': 'logsPath'
        }

        self._cloud_logging_option = cloud_logging_option
        self._destination = destination
        self._logs_path = logs_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogsPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogsPolicy of this LogsPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_logging_option(self):
        """Gets the cloud_logging_option of this LogsPolicy.


        :return: The cloud_logging_option of this LogsPolicy.
        :rtype: CloudLoggingOption
        """
        return self._cloud_logging_option

    @cloud_logging_option.setter
    def cloud_logging_option(self, cloud_logging_option):
        """Sets the cloud_logging_option of this LogsPolicy.


        :param cloud_logging_option: The cloud_logging_option of this LogsPolicy.
        :type cloud_logging_option: CloudLoggingOption
        """

        self._cloud_logging_option = cloud_logging_option

    @property
    def destination(self):
        """Gets the destination of this LogsPolicy.

        Where logs should be saved.

        :return: The destination of this LogsPolicy.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this LogsPolicy.

        Where logs should be saved.

        :param destination: The destination of this LogsPolicy.
        :type destination: str
        """
        allowed_values = ["DESTINATION_UNSPECIFIED", "CLOUD_LOGGING", "PATH"]  # noqa: E501
        if destination not in allowed_values:
            raise ValueError(
                "Invalid value for `destination` ({0}), must be one of {1}"
                .format(destination, allowed_values)
            )

        self._destination = destination

    @property
    def logs_path(self):
        """Gets the logs_path of this LogsPolicy.

        The path to which logs are saved when the destination = PATH. This can be a local file path on the VM, or under the mount point of a Persistent Disk or Filestore, or a Cloud Storage path.

        :return: The logs_path of this LogsPolicy.
        :rtype: str
        """
        return self._logs_path

    @logs_path.setter
    def logs_path(self, logs_path):
        """Sets the logs_path of this LogsPolicy.

        The path to which logs are saved when the destination = PATH. This can be a local file path on the VM, or under the mount point of a Persistent Disk or Filestore, or a Cloud Storage path.

        :param logs_path: The logs_path of this LogsPolicy.
        :type logs_path: str
        """

        self._logs_path = logs_path
