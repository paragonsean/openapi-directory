# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.barrier import Barrier
from openapi_server.models.container import Container
from openapi_server.models.environment import Environment
from openapi_server.models.script import Script
from openapi_server import util


class Runnable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, always_run: bool=None, background: bool=None, barrier: Barrier=None, container: Container=None, display_name: str=None, environment: Environment=None, ignore_exit_status: bool=None, labels: Dict[str, str]=None, script: Script=None, timeout: str=None):
        """Runnable - a model defined in OpenAPI

        :param always_run: The always_run of this Runnable.
        :param background: The background of this Runnable.
        :param barrier: The barrier of this Runnable.
        :param container: The container of this Runnable.
        :param display_name: The display_name of this Runnable.
        :param environment: The environment of this Runnable.
        :param ignore_exit_status: The ignore_exit_status of this Runnable.
        :param labels: The labels of this Runnable.
        :param script: The script of this Runnable.
        :param timeout: The timeout of this Runnable.
        """
        self.openapi_types = {
            'always_run': bool,
            'background': bool,
            'barrier': Barrier,
            'container': Container,
            'display_name': str,
            'environment': Environment,
            'ignore_exit_status': bool,
            'labels': Dict[str, str],
            'script': Script,
            'timeout': str
        }

        self.attribute_map = {
            'always_run': 'alwaysRun',
            'background': 'background',
            'barrier': 'barrier',
            'container': 'container',
            'display_name': 'displayName',
            'environment': 'environment',
            'ignore_exit_status': 'ignoreExitStatus',
            'labels': 'labels',
            'script': 'script',
            'timeout': 'timeout'
        }

        self._always_run = always_run
        self._background = background
        self._barrier = barrier
        self._container = container
        self._display_name = display_name
        self._environment = environment
        self._ignore_exit_status = ignore_exit_status
        self._labels = labels
        self._script = script
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Runnable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Runnable of this Runnable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def always_run(self):
        """Gets the always_run of this Runnable.

        By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables.

        :return: The always_run of this Runnable.
        :rtype: bool
        """
        return self._always_run

    @always_run.setter
    def always_run(self, always_run):
        """Sets the always_run of this Runnable.

        By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables.

        :param always_run: The always_run of this Runnable.
        :type always_run: bool
        """

        self._always_run = always_run

    @property
    def background(self):
        """Gets the background of this Runnable.

        This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).

        :return: The background of this Runnable.
        :rtype: bool
        """
        return self._background

    @background.setter
    def background(self, background):
        """Sets the background of this Runnable.

        This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).

        :param background: The background of this Runnable.
        :type background: bool
        """

        self._background = background

    @property
    def barrier(self):
        """Gets the barrier of this Runnable.


        :return: The barrier of this Runnable.
        :rtype: Barrier
        """
        return self._barrier

    @barrier.setter
    def barrier(self, barrier):
        """Sets the barrier of this Runnable.


        :param barrier: The barrier of this Runnable.
        :type barrier: Barrier
        """

        self._barrier = barrier

    @property
    def container(self):
        """Gets the container of this Runnable.


        :return: The container of this Runnable.
        :rtype: Container
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this Runnable.


        :param container: The container of this Runnable.
        :type container: Container
        """

        self._container = container

    @property
    def display_name(self):
        """Gets the display_name of this Runnable.

        Optional. DisplayName is an optional field that can be provided by the caller. If provided, it will be used in logs and other outputs to identify the script, making it easier for users to understand the logs. If not provided the index of the runnable will be used for outputs.

        :return: The display_name of this Runnable.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Runnable.

        Optional. DisplayName is an optional field that can be provided by the caller. If provided, it will be used in logs and other outputs to identify the script, making it easier for users to understand the logs. If not provided the index of the runnable will be used for outputs.

        :param display_name: The display_name of this Runnable.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def environment(self):
        """Gets the environment of this Runnable.


        :return: The environment of this Runnable.
        :rtype: Environment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Runnable.


        :param environment: The environment of this Runnable.
        :type environment: Environment
        """

        self._environment = environment

    @property
    def ignore_exit_status(self):
        """Gets the ignore_exit_status of this Runnable.

        Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.

        :return: The ignore_exit_status of this Runnable.
        :rtype: bool
        """
        return self._ignore_exit_status

    @ignore_exit_status.setter
    def ignore_exit_status(self, ignore_exit_status):
        """Sets the ignore_exit_status of this Runnable.

        Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.

        :param ignore_exit_status: The ignore_exit_status of this Runnable.
        :type ignore_exit_status: bool
        """

        self._ignore_exit_status = ignore_exit_status

    @property
    def labels(self):
        """Gets the labels of this Runnable.

        Labels for this Runnable.

        :return: The labels of this Runnable.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Runnable.

        Labels for this Runnable.

        :param labels: The labels of this Runnable.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def script(self):
        """Gets the script of this Runnable.


        :return: The script of this Runnable.
        :rtype: Script
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this Runnable.


        :param script: The script of this Runnable.
        :type script: Script
        """

        self._script = script

    @property
    def timeout(self):
        """Gets the timeout of this Runnable.

        Timeout for this Runnable.

        :return: The timeout of this Runnable.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Runnable.

        Timeout for this Runnable.

        :param timeout: The timeout of this Runnable.
        :type timeout: str
        """

        self._timeout = timeout
