# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlacementPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collocation: str=None, max_distance: str=None):
        """PlacementPolicy - a model defined in OpenAPI

        :param collocation: The collocation of this PlacementPolicy.
        :param max_distance: The max_distance of this PlacementPolicy.
        """
        self.openapi_types = {
            'collocation': str,
            'max_distance': str
        }

        self.attribute_map = {
            'collocation': 'collocation',
            'max_distance': 'maxDistance'
        }

        self._collocation = collocation
        self._max_distance = max_distance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlacementPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlacementPolicy of this PlacementPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collocation(self):
        """Gets the collocation of this PlacementPolicy.

        UNSPECIFIED vs. COLLOCATED (default UNSPECIFIED). Use COLLOCATED when you want VMs to be located close to each other for low network latency between the VMs. No placement policy will be generated when collocation is UNSPECIFIED.

        :return: The collocation of this PlacementPolicy.
        :rtype: str
        """
        return self._collocation

    @collocation.setter
    def collocation(self, collocation):
        """Sets the collocation of this PlacementPolicy.

        UNSPECIFIED vs. COLLOCATED (default UNSPECIFIED). Use COLLOCATED when you want VMs to be located close to each other for low network latency between the VMs. No placement policy will be generated when collocation is UNSPECIFIED.

        :param collocation: The collocation of this PlacementPolicy.
        :type collocation: str
        """

        self._collocation = collocation

    @property
    def max_distance(self):
        """Gets the max_distance of this PlacementPolicy.

        When specified, causes the job to fail if more than max_distance logical switches are required between VMs. Batch uses the most compact possible placement of VMs even when max_distance is not specified. An explicit max_distance makes that level of compactness a strict requirement. Not yet implemented

        :return: The max_distance of this PlacementPolicy.
        :rtype: str
        """
        return self._max_distance

    @max_distance.setter
    def max_distance(self, max_distance):
        """Sets the max_distance of this PlacementPolicy.

        When specified, causes the job to fail if more than max_distance logical switches are required between VMs. Batch uses the most compact possible placement of VMs even when max_distance is not specified. An explicit max_distance makes that level of compactness a strict requirement. Not yet implemented

        :param max_distance: The max_distance of this PlacementPolicy.
        :type max_distance: str
        """

        self._max_distance = max_distance
