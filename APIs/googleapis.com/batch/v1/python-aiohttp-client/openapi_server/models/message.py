# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_job_state: str=None, new_task_state: str=None, type: str=None):
        """Message - a model defined in OpenAPI

        :param new_job_state: The new_job_state of this Message.
        :param new_task_state: The new_task_state of this Message.
        :param type: The type of this Message.
        """
        self.openapi_types = {
            'new_job_state': str,
            'new_task_state': str,
            'type': str
        }

        self.attribute_map = {
            'new_job_state': 'newJobState',
            'new_task_state': 'newTaskState',
            'type': 'type'
        }

        self._new_job_state = new_job_state
        self._new_task_state = new_task_state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message of this Message.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_job_state(self):
        """Gets the new_job_state of this Message.

        The new job state.

        :return: The new_job_state of this Message.
        :rtype: str
        """
        return self._new_job_state

    @new_job_state.setter
    def new_job_state(self, new_job_state):
        """Sets the new_job_state of this Message.

        The new job state.

        :param new_job_state: The new_job_state of this Message.
        :type new_job_state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "QUEUED", "SCHEDULED", "RUNNING", "SUCCEEDED", "FAILED", "DELETION_IN_PROGRESS"]  # noqa: E501
        if new_job_state not in allowed_values:
            raise ValueError(
                "Invalid value for `new_job_state` ({0}), must be one of {1}"
                .format(new_job_state, allowed_values)
            )

        self._new_job_state = new_job_state

    @property
    def new_task_state(self):
        """Gets the new_task_state of this Message.

        The new task state.

        :return: The new_task_state of this Message.
        :rtype: str
        """
        return self._new_task_state

    @new_task_state.setter
    def new_task_state(self, new_task_state):
        """Sets the new_task_state of this Message.

        The new task state.

        :param new_task_state: The new_task_state of this Message.
        :type new_task_state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PENDING", "ASSIGNED", "RUNNING", "FAILED", "SUCCEEDED", "UNEXECUTED"]  # noqa: E501
        if new_task_state not in allowed_values:
            raise ValueError(
                "Invalid value for `new_task_state` ({0}), must be one of {1}"
                .format(new_task_state, allowed_values)
            )

        self._new_task_state = new_task_state

    @property
    def type(self):
        """Gets the type of this Message.

        The message type.

        :return: The type of this Message.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Message.

        The message type.

        :param type: The type of this Message.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "JOB_STATE_CHANGED", "TASK_STATE_CHANGED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
