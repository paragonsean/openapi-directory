# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message import Message
from openapi_server import util


class JobNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: Message=None, pubsub_topic: str=None):
        """JobNotification - a model defined in OpenAPI

        :param message: The message of this JobNotification.
        :param pubsub_topic: The pubsub_topic of this JobNotification.
        """
        self.openapi_types = {
            'message': Message,
            'pubsub_topic': str
        }

        self.attribute_map = {
            'message': 'message',
            'pubsub_topic': 'pubsubTopic'
        }

        self._message = message
        self._pubsub_topic = pubsub_topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobNotification of this JobNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this JobNotification.


        :return: The message of this JobNotification.
        :rtype: Message
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this JobNotification.


        :param message: The message of this JobNotification.
        :type message: Message
        """

        self._message = message

    @property
    def pubsub_topic(self):
        """Gets the pubsub_topic of this JobNotification.

        The Pub/Sub topic where notifications like the job state changes will be published. The topic must exist in the same project as the job and billings will be charged to this project. If not specified, no Pub/Sub messages will be sent. Topic format: `projects/{project}/topics/{topic}`.

        :return: The pubsub_topic of this JobNotification.
        :rtype: str
        """
        return self._pubsub_topic

    @pubsub_topic.setter
    def pubsub_topic(self, pubsub_topic):
        """Sets the pubsub_topic of this JobNotification.

        The Pub/Sub topic where notifications like the job state changes will be published. The topic must exist in the same project as the job and billings will be charged to this project. If not specified, no Pub/Sub messages will be sent. Topic format: `projects/{project}/topics/{topic}`.

        :param pubsub_topic: The pubsub_topic of this JobNotification.
        :type pubsub_topic: str
        """

        self._pubsub_topic = pubsub_topic
