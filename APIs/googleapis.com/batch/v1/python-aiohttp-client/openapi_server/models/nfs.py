# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NFS(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, remote_path: str=None, server: str=None):
        """NFS - a model defined in OpenAPI

        :param remote_path: The remote_path of this NFS.
        :param server: The server of this NFS.
        """
        self.openapi_types = {
            'remote_path': str,
            'server': str
        }

        self.attribute_map = {
            'remote_path': 'remotePath',
            'server': 'server'
        }

        self._remote_path = remote_path
        self._server = server

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NFS':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NFS of this NFS.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def remote_path(self):
        """Gets the remote_path of this NFS.

        Remote source path exported from the NFS, e.g., \"/share\".

        :return: The remote_path of this NFS.
        :rtype: str
        """
        return self._remote_path

    @remote_path.setter
    def remote_path(self, remote_path):
        """Sets the remote_path of this NFS.

        Remote source path exported from the NFS, e.g., \"/share\".

        :param remote_path: The remote_path of this NFS.
        :type remote_path: str
        """

        self._remote_path = remote_path

    @property
    def server(self):
        """Gets the server of this NFS.

        The IP address of the NFS.

        :return: The server of this NFS.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this NFS.

        The IP address of the NFS.

        :param server: The server of this NFS.
        :type server: str
        """

        self._server = server
