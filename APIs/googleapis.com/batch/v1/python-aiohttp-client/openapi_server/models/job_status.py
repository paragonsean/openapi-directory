# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status_event import StatusEvent
from openapi_server.models.task_group_status import TaskGroupStatus
from openapi_server import util


class JobStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, run_duration: str=None, state: str=None, status_events: List[StatusEvent]=None, task_groups: Dict[str, TaskGroupStatus]=None):
        """JobStatus - a model defined in OpenAPI

        :param run_duration: The run_duration of this JobStatus.
        :param state: The state of this JobStatus.
        :param status_events: The status_events of this JobStatus.
        :param task_groups: The task_groups of this JobStatus.
        """
        self.openapi_types = {
            'run_duration': str,
            'state': str,
            'status_events': List[StatusEvent],
            'task_groups': Dict[str, TaskGroupStatus]
        }

        self.attribute_map = {
            'run_duration': 'runDuration',
            'state': 'state',
            'status_events': 'statusEvents',
            'task_groups': 'taskGroups'
        }

        self._run_duration = run_duration
        self._state = state
        self._status_events = status_events
        self._task_groups = task_groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobStatus of this JobStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def run_duration(self):
        """Gets the run_duration of this JobStatus.

        The duration of time that the Job spent in status RUNNING.

        :return: The run_duration of this JobStatus.
        :rtype: str
        """
        return self._run_duration

    @run_duration.setter
    def run_duration(self, run_duration):
        """Sets the run_duration of this JobStatus.

        The duration of time that the Job spent in status RUNNING.

        :param run_duration: The run_duration of this JobStatus.
        :type run_duration: str
        """

        self._run_duration = run_duration

    @property
    def state(self):
        """Gets the state of this JobStatus.

        Job state

        :return: The state of this JobStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobStatus.

        Job state

        :param state: The state of this JobStatus.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "QUEUED", "SCHEDULED", "RUNNING", "SUCCEEDED", "FAILED", "DELETION_IN_PROGRESS"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status_events(self):
        """Gets the status_events of this JobStatus.

        Job status events

        :return: The status_events of this JobStatus.
        :rtype: List[StatusEvent]
        """
        return self._status_events

    @status_events.setter
    def status_events(self, status_events):
        """Sets the status_events of this JobStatus.

        Job status events

        :param status_events: The status_events of this JobStatus.
        :type status_events: List[StatusEvent]
        """

        self._status_events = status_events

    @property
    def task_groups(self):
        """Gets the task_groups of this JobStatus.

        Aggregated task status for each TaskGroup in the Job. The map key is TaskGroup ID.

        :return: The task_groups of this JobStatus.
        :rtype: Dict[str, TaskGroupStatus]
        """
        return self._task_groups

    @task_groups.setter
    def task_groups(self, task_groups):
        """Sets the task_groups of this JobStatus.

        Aggregated task status for each TaskGroup in the Job. The map key is TaskGroup ID.

        :param task_groups: The task_groups of this JobStatus.
        :type task_groups: Dict[str, TaskGroupStatus]
        """

        self._task_groups = task_groups
