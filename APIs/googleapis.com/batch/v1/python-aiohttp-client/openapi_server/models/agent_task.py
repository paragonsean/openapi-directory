# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_task_spec import AgentTaskSpec
from openapi_server.models.task_spec import TaskSpec
from openapi_server.models.task_status import TaskStatus
from openapi_server import util


class AgentTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_task_spec: AgentTaskSpec=None, intended_state: str=None, reached_barrier: str=None, spec: TaskSpec=None, status: TaskStatus=None, task: str=None, task_source: str=None):
        """AgentTask - a model defined in OpenAPI

        :param agent_task_spec: The agent_task_spec of this AgentTask.
        :param intended_state: The intended_state of this AgentTask.
        :param reached_barrier: The reached_barrier of this AgentTask.
        :param spec: The spec of this AgentTask.
        :param status: The status of this AgentTask.
        :param task: The task of this AgentTask.
        :param task_source: The task_source of this AgentTask.
        """
        self.openapi_types = {
            'agent_task_spec': AgentTaskSpec,
            'intended_state': str,
            'reached_barrier': str,
            'spec': TaskSpec,
            'status': TaskStatus,
            'task': str,
            'task_source': str
        }

        self.attribute_map = {
            'agent_task_spec': 'agentTaskSpec',
            'intended_state': 'intendedState',
            'reached_barrier': 'reachedBarrier',
            'spec': 'spec',
            'status': 'status',
            'task': 'task',
            'task_source': 'taskSource'
        }

        self._agent_task_spec = agent_task_spec
        self._intended_state = intended_state
        self._reached_barrier = reached_barrier
        self._spec = spec
        self._status = status
        self._task = task
        self._task_source = task_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgentTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgentTask of this AgentTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_task_spec(self):
        """Gets the agent_task_spec of this AgentTask.


        :return: The agent_task_spec of this AgentTask.
        :rtype: AgentTaskSpec
        """
        return self._agent_task_spec

    @agent_task_spec.setter
    def agent_task_spec(self, agent_task_spec):
        """Sets the agent_task_spec of this AgentTask.


        :param agent_task_spec: The agent_task_spec of this AgentTask.
        :type agent_task_spec: AgentTaskSpec
        """

        self._agent_task_spec = agent_task_spec

    @property
    def intended_state(self):
        """Gets the intended_state of this AgentTask.

        The intended state of the task.

        :return: The intended_state of this AgentTask.
        :rtype: str
        """
        return self._intended_state

    @intended_state.setter
    def intended_state(self, intended_state):
        """Sets the intended_state of this AgentTask.

        The intended state of the task.

        :param intended_state: The intended_state of this AgentTask.
        :type intended_state: str
        """
        allowed_values = ["INTENDED_STATE_UNSPECIFIED", "ASSIGNED", "CANCELLED", "DELETED"]  # noqa: E501
        if intended_state not in allowed_values:
            raise ValueError(
                "Invalid value for `intended_state` ({0}), must be one of {1}"
                .format(intended_state, allowed_values)
            )

        self._intended_state = intended_state

    @property
    def reached_barrier(self):
        """Gets the reached_barrier of this AgentTask.

        The highest barrier reached by all tasks in the task's TaskGroup.

        :return: The reached_barrier of this AgentTask.
        :rtype: str
        """
        return self._reached_barrier

    @reached_barrier.setter
    def reached_barrier(self, reached_barrier):
        """Sets the reached_barrier of this AgentTask.

        The highest barrier reached by all tasks in the task's TaskGroup.

        :param reached_barrier: The reached_barrier of this AgentTask.
        :type reached_barrier: str
        """

        self._reached_barrier = reached_barrier

    @property
    def spec(self):
        """Gets the spec of this AgentTask.


        :return: The spec of this AgentTask.
        :rtype: TaskSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this AgentTask.


        :param spec: The spec of this AgentTask.
        :type spec: TaskSpec
        """

        self._spec = spec

    @property
    def status(self):
        """Gets the status of this AgentTask.


        :return: The status of this AgentTask.
        :rtype: TaskStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AgentTask.


        :param status: The status of this AgentTask.
        :type status: TaskStatus
        """

        self._status = status

    @property
    def task(self):
        """Gets the task of this AgentTask.

        Task name.

        :return: The task of this AgentTask.
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this AgentTask.

        Task name.

        :param task: The task of this AgentTask.
        :type task: str
        """

        self._task = task

    @property
    def task_source(self):
        """Gets the task_source of this AgentTask.

        TaskSource represents the source of the task.

        :return: The task_source of this AgentTask.
        :rtype: str
        """
        return self._task_source

    @task_source.setter
    def task_source(self, task_source):
        """Sets the task_source of this AgentTask.

        TaskSource represents the source of the task.

        :param task_source: The task_source of this AgentTask.
        :type task_source: str
        """
        allowed_values = ["TASK_SOURCE_UNSPECIFIED", "BATCH_INTERNAL", "USER"]  # noqa: E501
        if task_source not in allowed_values:
            raise ValueError(
                "Invalid value for `task_source` ({0}), must be one of {1}"
                .format(task_source, allowed_values)
            )

        self._task_source = task_source
