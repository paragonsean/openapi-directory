# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_execution import TaskExecution
from openapi_server import util


class StatusEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, event_time: str=None, task_execution: TaskExecution=None, task_state: str=None, type: str=None):
        """StatusEvent - a model defined in OpenAPI

        :param description: The description of this StatusEvent.
        :param event_time: The event_time of this StatusEvent.
        :param task_execution: The task_execution of this StatusEvent.
        :param task_state: The task_state of this StatusEvent.
        :param type: The type of this StatusEvent.
        """
        self.openapi_types = {
            'description': str,
            'event_time': str,
            'task_execution': TaskExecution,
            'task_state': str,
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            'event_time': 'eventTime',
            'task_execution': 'taskExecution',
            'task_state': 'taskState',
            'type': 'type'
        }

        self._description = description
        self._event_time = event_time
        self._task_execution = task_execution
        self._task_state = task_state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatusEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatusEvent of this StatusEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this StatusEvent.

        Description of the event.

        :return: The description of this StatusEvent.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StatusEvent.

        Description of the event.

        :param description: The description of this StatusEvent.
        :type description: str
        """

        self._description = description

    @property
    def event_time(self):
        """Gets the event_time of this StatusEvent.

        The time this event occurred.

        :return: The event_time of this StatusEvent.
        :rtype: str
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this StatusEvent.

        The time this event occurred.

        :param event_time: The event_time of this StatusEvent.
        :type event_time: str
        """

        self._event_time = event_time

    @property
    def task_execution(self):
        """Gets the task_execution of this StatusEvent.


        :return: The task_execution of this StatusEvent.
        :rtype: TaskExecution
        """
        return self._task_execution

    @task_execution.setter
    def task_execution(self, task_execution):
        """Sets the task_execution of this StatusEvent.


        :param task_execution: The task_execution of this StatusEvent.
        :type task_execution: TaskExecution
        """

        self._task_execution = task_execution

    @property
    def task_state(self):
        """Gets the task_state of this StatusEvent.

        Task State

        :return: The task_state of this StatusEvent.
        :rtype: str
        """
        return self._task_state

    @task_state.setter
    def task_state(self, task_state):
        """Sets the task_state of this StatusEvent.

        Task State

        :param task_state: The task_state of this StatusEvent.
        :type task_state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PENDING", "ASSIGNED", "RUNNING", "FAILED", "SUCCEEDED", "UNEXECUTED"]  # noqa: E501
        if task_state not in allowed_values:
            raise ValueError(
                "Invalid value for `task_state` ({0}), must be one of {1}"
                .format(task_state, allowed_values)
            )

        self._task_state = task_state

    @property
    def type(self):
        """Gets the type of this StatusEvent.

        Type of the event.

        :return: The type of this StatusEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StatusEvent.

        Type of the event.

        :param type: The type of this StatusEvent.
        :type type: str
        """

        self._type = type
