# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Accelerator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: str=None, driver_version: str=None, install_gpu_drivers: bool=None, type: str=None):
        """Accelerator - a model defined in OpenAPI

        :param count: The count of this Accelerator.
        :param driver_version: The driver_version of this Accelerator.
        :param install_gpu_drivers: The install_gpu_drivers of this Accelerator.
        :param type: The type of this Accelerator.
        """
        self.openapi_types = {
            'count': str,
            'driver_version': str,
            'install_gpu_drivers': bool,
            'type': str
        }

        self.attribute_map = {
            'count': 'count',
            'driver_version': 'driverVersion',
            'install_gpu_drivers': 'installGpuDrivers',
            'type': 'type'
        }

        self._count = count
        self._driver_version = driver_version
        self._install_gpu_drivers = install_gpu_drivers
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Accelerator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Accelerator of this Accelerator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Accelerator.

        The number of accelerators of this type.

        :return: The count of this Accelerator.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Accelerator.

        The number of accelerators of this type.

        :param count: The count of this Accelerator.
        :type count: str
        """

        self._count = count

    @property
    def driver_version(self):
        """Gets the driver_version of this Accelerator.

        Optional. The NVIDIA GPU driver version that should be installed for this type. You can define the specific driver version such as \"470.103.01\", following the driver version requirements in https://cloud.google.com/compute/docs/gpus/install-drivers-gpu#minimum-driver. Batch will install the specific accelerator driver if qualified.

        :return: The driver_version of this Accelerator.
        :rtype: str
        """
        return self._driver_version

    @driver_version.setter
    def driver_version(self, driver_version):
        """Sets the driver_version of this Accelerator.

        Optional. The NVIDIA GPU driver version that should be installed for this type. You can define the specific driver version such as \"470.103.01\", following the driver version requirements in https://cloud.google.com/compute/docs/gpus/install-drivers-gpu#minimum-driver. Batch will install the specific accelerator driver if qualified.

        :param driver_version: The driver_version of this Accelerator.
        :type driver_version: str
        """

        self._driver_version = driver_version

    @property
    def install_gpu_drivers(self):
        """Gets the install_gpu_drivers of this Accelerator.

        Deprecated: please use instances[0].install_gpu_drivers instead.

        :return: The install_gpu_drivers of this Accelerator.
        :rtype: bool
        """
        return self._install_gpu_drivers

    @install_gpu_drivers.setter
    def install_gpu_drivers(self, install_gpu_drivers):
        """Sets the install_gpu_drivers of this Accelerator.

        Deprecated: please use instances[0].install_gpu_drivers instead.

        :param install_gpu_drivers: The install_gpu_drivers of this Accelerator.
        :type install_gpu_drivers: bool
        """

        self._install_gpu_drivers = install_gpu_drivers

    @property
    def type(self):
        """Gets the type of this Accelerator.

        The accelerator type. For example, \"nvidia-tesla-t4\". See `gcloud compute accelerator-types list`.

        :return: The type of this Accelerator.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Accelerator.

        The accelerator type. For example, \"nvidia-tesla-t4\". See `gcloud compute accelerator-types list`.

        :param type: The type of this Accelerator.
        :type type: str
        """

        self._type = type
