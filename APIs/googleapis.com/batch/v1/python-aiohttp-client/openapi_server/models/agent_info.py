# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_task_info import AgentTaskInfo
from openapi_server import util


class AgentInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id: str=None, report_time: str=None, state: str=None, task_group_id: str=None, tasks: List[AgentTaskInfo]=None):
        """AgentInfo - a model defined in OpenAPI

        :param job_id: The job_id of this AgentInfo.
        :param report_time: The report_time of this AgentInfo.
        :param state: The state of this AgentInfo.
        :param task_group_id: The task_group_id of this AgentInfo.
        :param tasks: The tasks of this AgentInfo.
        """
        self.openapi_types = {
            'job_id': str,
            'report_time': str,
            'state': str,
            'task_group_id': str,
            'tasks': List[AgentTaskInfo]
        }

        self.attribute_map = {
            'job_id': 'jobId',
            'report_time': 'reportTime',
            'state': 'state',
            'task_group_id': 'taskGroupId',
            'tasks': 'tasks'
        }

        self._job_id = job_id
        self._report_time = report_time
        self._state = state
        self._task_group_id = task_group_id
        self._tasks = tasks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgentInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgentInfo of this AgentInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this AgentInfo.

        Optional. The assigned Job ID

        :return: The job_id of this AgentInfo.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this AgentInfo.

        Optional. The assigned Job ID

        :param job_id: The job_id of this AgentInfo.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def report_time(self):
        """Gets the report_time of this AgentInfo.

        When the AgentInfo is generated.

        :return: The report_time of this AgentInfo.
        :rtype: str
        """
        return self._report_time

    @report_time.setter
    def report_time(self, report_time):
        """Sets the report_time of this AgentInfo.

        When the AgentInfo is generated.

        :param report_time: The report_time of this AgentInfo.
        :type report_time: str
        """

        self._report_time = report_time

    @property
    def state(self):
        """Gets the state of this AgentInfo.

        Agent state.

        :return: The state of this AgentInfo.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AgentInfo.

        Agent state.

        :param state: The state of this AgentInfo.
        :type state: str
        """
        allowed_values = ["AGENT_STATE_UNSPECIFIED", "AGENT_STARTING", "AGENT_RUNNING", "AGENT_STOPPED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def task_group_id(self):
        """Gets the task_group_id of this AgentInfo.

        The assigned task group ID.

        :return: The task_group_id of this AgentInfo.
        :rtype: str
        """
        return self._task_group_id

    @task_group_id.setter
    def task_group_id(self, task_group_id):
        """Sets the task_group_id of this AgentInfo.

        The assigned task group ID.

        :param task_group_id: The task_group_id of this AgentInfo.
        :type task_group_id: str
        """

        self._task_group_id = task_group_id

    @property
    def tasks(self):
        """Gets the tasks of this AgentInfo.

        Task Info.

        :return: The tasks of this AgentInfo.
        :rtype: List[AgentTaskInfo]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this AgentInfo.

        Task Info.

        :param tasks: The tasks of this AgentInfo.
        :type tasks: List[AgentTaskInfo]
        """

        self._tasks = tasks
