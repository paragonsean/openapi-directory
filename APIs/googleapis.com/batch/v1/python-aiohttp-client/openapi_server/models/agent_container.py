# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AgentContainer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commands: List[str]=None, entrypoint: str=None, image_uri: str=None, options: str=None, volumes: List[str]=None):
        """AgentContainer - a model defined in OpenAPI

        :param commands: The commands of this AgentContainer.
        :param entrypoint: The entrypoint of this AgentContainer.
        :param image_uri: The image_uri of this AgentContainer.
        :param options: The options of this AgentContainer.
        :param volumes: The volumes of this AgentContainer.
        """
        self.openapi_types = {
            'commands': List[str],
            'entrypoint': str,
            'image_uri': str,
            'options': str,
            'volumes': List[str]
        }

        self.attribute_map = {
            'commands': 'commands',
            'entrypoint': 'entrypoint',
            'image_uri': 'imageUri',
            'options': 'options',
            'volumes': 'volumes'
        }

        self._commands = commands
        self._entrypoint = entrypoint
        self._image_uri = image_uri
        self._options = options
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgentContainer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgentContainer of this AgentContainer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commands(self):
        """Gets the commands of this AgentContainer.

        Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.

        :return: The commands of this AgentContainer.
        :rtype: List[str]
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """Sets the commands of this AgentContainer.

        Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.

        :param commands: The commands of this AgentContainer.
        :type commands: List[str]
        """

        self._commands = commands

    @property
    def entrypoint(self):
        """Gets the entrypoint of this AgentContainer.

        Overrides the `ENTRYPOINT` specified in the container.

        :return: The entrypoint of this AgentContainer.
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint):
        """Sets the entrypoint of this AgentContainer.

        Overrides the `ENTRYPOINT` specified in the container.

        :param entrypoint: The entrypoint of this AgentContainer.
        :type entrypoint: str
        """

        self._entrypoint = entrypoint

    @property
    def image_uri(self):
        """Gets the image_uri of this AgentContainer.

        The URI to pull the container image from.

        :return: The image_uri of this AgentContainer.
        :rtype: str
        """
        return self._image_uri

    @image_uri.setter
    def image_uri(self, image_uri):
        """Sets the image_uri of this AgentContainer.

        The URI to pull the container image from.

        :param image_uri: The image_uri of this AgentContainer.
        :type image_uri: str
        """

        self._image_uri = image_uri

    @property
    def options(self):
        """Gets the options of this AgentContainer.

        Arbitrary additional options to include in the \"docker run\" command when running this container, e.g. \"--network host\".

        :return: The options of this AgentContainer.
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this AgentContainer.

        Arbitrary additional options to include in the \"docker run\" command when running this container, e.g. \"--network host\".

        :param options: The options of this AgentContainer.
        :type options: str
        """

        self._options = options

    @property
    def volumes(self):
        """Gets the volumes of this AgentContainer.

        Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro

        :return: The volumes of this AgentContainer.
        :rtype: List[str]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this AgentContainer.

        Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro

        :param volumes: The volumes of this AgentContainer.
        :type volumes: List[str]
        """

        self._volumes = volumes
