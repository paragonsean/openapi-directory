# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compute_resource import ComputeResource
from openapi_server.models.environment import Environment
from openapi_server.models.lifecycle_policy import LifecyclePolicy
from openapi_server.models.runnable import Runnable
from openapi_server.models.volume import Volume
from openapi_server import util


class TaskSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_resource: ComputeResource=None, environment: Environment=None, environments: Dict[str, str]=None, lifecycle_policies: List[LifecyclePolicy]=None, max_retry_count: int=None, max_run_duration: str=None, runnables: List[Runnable]=None, volumes: List[Volume]=None):
        """TaskSpec - a model defined in OpenAPI

        :param compute_resource: The compute_resource of this TaskSpec.
        :param environment: The environment of this TaskSpec.
        :param environments: The environments of this TaskSpec.
        :param lifecycle_policies: The lifecycle_policies of this TaskSpec.
        :param max_retry_count: The max_retry_count of this TaskSpec.
        :param max_run_duration: The max_run_duration of this TaskSpec.
        :param runnables: The runnables of this TaskSpec.
        :param volumes: The volumes of this TaskSpec.
        """
        self.openapi_types = {
            'compute_resource': ComputeResource,
            'environment': Environment,
            'environments': Dict[str, str],
            'lifecycle_policies': List[LifecyclePolicy],
            'max_retry_count': int,
            'max_run_duration': str,
            'runnables': List[Runnable],
            'volumes': List[Volume]
        }

        self.attribute_map = {
            'compute_resource': 'computeResource',
            'environment': 'environment',
            'environments': 'environments',
            'lifecycle_policies': 'lifecyclePolicies',
            'max_retry_count': 'maxRetryCount',
            'max_run_duration': 'maxRunDuration',
            'runnables': 'runnables',
            'volumes': 'volumes'
        }

        self._compute_resource = compute_resource
        self._environment = environment
        self._environments = environments
        self._lifecycle_policies = lifecycle_policies
        self._max_retry_count = max_retry_count
        self._max_run_duration = max_run_duration
        self._runnables = runnables
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskSpec of this TaskSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_resource(self):
        """Gets the compute_resource of this TaskSpec.


        :return: The compute_resource of this TaskSpec.
        :rtype: ComputeResource
        """
        return self._compute_resource

    @compute_resource.setter
    def compute_resource(self, compute_resource):
        """Sets the compute_resource of this TaskSpec.


        :param compute_resource: The compute_resource of this TaskSpec.
        :type compute_resource: ComputeResource
        """

        self._compute_resource = compute_resource

    @property
    def environment(self):
        """Gets the environment of this TaskSpec.


        :return: The environment of this TaskSpec.
        :rtype: Environment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this TaskSpec.


        :param environment: The environment of this TaskSpec.
        :type environment: Environment
        """

        self._environment = environment

    @property
    def environments(self):
        """Gets the environments of this TaskSpec.

        Deprecated: please use environment(non-plural) instead.

        :return: The environments of this TaskSpec.
        :rtype: Dict[str, str]
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """Sets the environments of this TaskSpec.

        Deprecated: please use environment(non-plural) instead.

        :param environments: The environments of this TaskSpec.
        :type environments: Dict[str, str]
        """

        self._environments = environments

    @property
    def lifecycle_policies(self):
        """Gets the lifecycle_policies of this TaskSpec.

        Lifecycle management schema when any task in a task group is failed. Currently we only support one lifecycle policy. When the lifecycle policy condition is met, the action in the policy will execute. If task execution result does not meet with the defined lifecycle policy, we consider it as the default policy. Default policy means if the exit code is 0, exit task. If task ends with non-zero exit code, retry the task with max_retry_count.

        :return: The lifecycle_policies of this TaskSpec.
        :rtype: List[LifecyclePolicy]
        """
        return self._lifecycle_policies

    @lifecycle_policies.setter
    def lifecycle_policies(self, lifecycle_policies):
        """Sets the lifecycle_policies of this TaskSpec.

        Lifecycle management schema when any task in a task group is failed. Currently we only support one lifecycle policy. When the lifecycle policy condition is met, the action in the policy will execute. If task execution result does not meet with the defined lifecycle policy, we consider it as the default policy. Default policy means if the exit code is 0, exit task. If task ends with non-zero exit code, retry the task with max_retry_count.

        :param lifecycle_policies: The lifecycle_policies of this TaskSpec.
        :type lifecycle_policies: List[LifecyclePolicy]
        """

        self._lifecycle_policies = lifecycle_policies

    @property
    def max_retry_count(self):
        """Gets the max_retry_count of this TaskSpec.

        Maximum number of retries on failures. The default, 0, which means never retry. The valid value range is [0, 10].

        :return: The max_retry_count of this TaskSpec.
        :rtype: int
        """
        return self._max_retry_count

    @max_retry_count.setter
    def max_retry_count(self, max_retry_count):
        """Sets the max_retry_count of this TaskSpec.

        Maximum number of retries on failures. The default, 0, which means never retry. The valid value range is [0, 10].

        :param max_retry_count: The max_retry_count of this TaskSpec.
        :type max_retry_count: int
        """

        self._max_retry_count = max_retry_count

    @property
    def max_run_duration(self):
        """Gets the max_run_duration of this TaskSpec.

        Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.

        :return: The max_run_duration of this TaskSpec.
        :rtype: str
        """
        return self._max_run_duration

    @max_run_duration.setter
    def max_run_duration(self, max_run_duration):
        """Sets the max_run_duration of this TaskSpec.

        Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.

        :param max_run_duration: The max_run_duration of this TaskSpec.
        :type max_run_duration: str
        """

        self._max_run_duration = max_run_duration

    @property
    def runnables(self):
        """Gets the runnables of this TaskSpec.

        The sequence of scripts or containers to run for this Task. Each Task using this TaskSpec executes its list of runnables in order. The Task succeeds if all of its runnables either exit with a zero status or any that exit with a non-zero status have the ignore_exit_status flag. Background runnables are killed automatically (if they have not already exited) a short time after all foreground runnables have completed. Even though this is likely to result in a non-zero exit status for the background runnable, these automatic kills are not treated as Task failures.

        :return: The runnables of this TaskSpec.
        :rtype: List[Runnable]
        """
        return self._runnables

    @runnables.setter
    def runnables(self, runnables):
        """Sets the runnables of this TaskSpec.

        The sequence of scripts or containers to run for this Task. Each Task using this TaskSpec executes its list of runnables in order. The Task succeeds if all of its runnables either exit with a zero status or any that exit with a non-zero status have the ignore_exit_status flag. Background runnables are killed automatically (if they have not already exited) a short time after all foreground runnables have completed. Even though this is likely to result in a non-zero exit status for the background runnable, these automatic kills are not treated as Task failures.

        :param runnables: The runnables of this TaskSpec.
        :type runnables: List[Runnable]
        """

        self._runnables = runnables

    @property
    def volumes(self):
        """Gets the volumes of this TaskSpec.

        Volumes to mount before running Tasks using this TaskSpec.

        :return: The volumes of this TaskSpec.
        :rtype: List[Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this TaskSpec.

        Volumes to mount before running Tasks using this TaskSpec.

        :param volumes: The volumes of this TaskSpec.
        :type volumes: List[Volume]
        """

        self._volumes = volumes
