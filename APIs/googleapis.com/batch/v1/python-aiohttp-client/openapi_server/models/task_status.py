# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status_event import StatusEvent
from openapi_server import util


class TaskStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state: str=None, status_events: List[StatusEvent]=None):
        """TaskStatus - a model defined in OpenAPI

        :param state: The state of this TaskStatus.
        :param status_events: The status_events of this TaskStatus.
        """
        self.openapi_types = {
            'state': str,
            'status_events': List[StatusEvent]
        }

        self.attribute_map = {
            'state': 'state',
            'status_events': 'statusEvents'
        }

        self._state = state
        self._status_events = status_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskStatus of this TaskStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state(self):
        """Gets the state of this TaskStatus.

        Task state

        :return: The state of this TaskStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TaskStatus.

        Task state

        :param state: The state of this TaskStatus.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PENDING", "ASSIGNED", "RUNNING", "FAILED", "SUCCEEDED", "UNEXECUTED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status_events(self):
        """Gets the status_events of this TaskStatus.

        Detailed info about why the state is reached.

        :return: The status_events of this TaskStatus.
        :rtype: List[StatusEvent]
        """
        return self._status_events

    @status_events.setter
    def status_events(self, status_events):
        """Sets the status_events of this TaskStatus.

        Detailed info about why the state is reached.

        :param status_events: The status_events of this TaskStatus.
        :type status_events: List[StatusEvent]
        """

        self._status_events = status_events
