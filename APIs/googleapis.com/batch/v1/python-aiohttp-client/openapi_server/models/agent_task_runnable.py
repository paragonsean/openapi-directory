# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_container import AgentContainer
from openapi_server.models.agent_environment import AgentEnvironment
from openapi_server.models.agent_script import AgentScript
from openapi_server import util


class AgentTaskRunnable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, always_run: bool=None, background: bool=None, container: AgentContainer=None, environment: AgentEnvironment=None, ignore_exit_status: bool=None, script: AgentScript=None, timeout: str=None):
        """AgentTaskRunnable - a model defined in OpenAPI

        :param always_run: The always_run of this AgentTaskRunnable.
        :param background: The background of this AgentTaskRunnable.
        :param container: The container of this AgentTaskRunnable.
        :param environment: The environment of this AgentTaskRunnable.
        :param ignore_exit_status: The ignore_exit_status of this AgentTaskRunnable.
        :param script: The script of this AgentTaskRunnable.
        :param timeout: The timeout of this AgentTaskRunnable.
        """
        self.openapi_types = {
            'always_run': bool,
            'background': bool,
            'container': AgentContainer,
            'environment': AgentEnvironment,
            'ignore_exit_status': bool,
            'script': AgentScript,
            'timeout': str
        }

        self.attribute_map = {
            'always_run': 'alwaysRun',
            'background': 'background',
            'container': 'container',
            'environment': 'environment',
            'ignore_exit_status': 'ignoreExitStatus',
            'script': 'script',
            'timeout': 'timeout'
        }

        self._always_run = always_run
        self._background = background
        self._container = container
        self._environment = environment
        self._ignore_exit_status = ignore_exit_status
        self._script = script
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgentTaskRunnable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgentTaskRunnable of this AgentTaskRunnable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def always_run(self):
        """Gets the always_run of this AgentTaskRunnable.

        By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables.

        :return: The always_run of this AgentTaskRunnable.
        :rtype: bool
        """
        return self._always_run

    @always_run.setter
    def always_run(self, always_run):
        """Sets the always_run of this AgentTaskRunnable.

        By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables.

        :param always_run: The always_run of this AgentTaskRunnable.
        :type always_run: bool
        """

        self._always_run = always_run

    @property
    def background(self):
        """Gets the background of this AgentTaskRunnable.

        This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).

        :return: The background of this AgentTaskRunnable.
        :rtype: bool
        """
        return self._background

    @background.setter
    def background(self, background):
        """Sets the background of this AgentTaskRunnable.

        This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).

        :param background: The background of this AgentTaskRunnable.
        :type background: bool
        """

        self._background = background

    @property
    def container(self):
        """Gets the container of this AgentTaskRunnable.


        :return: The container of this AgentTaskRunnable.
        :rtype: AgentContainer
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this AgentTaskRunnable.


        :param container: The container of this AgentTaskRunnable.
        :type container: AgentContainer
        """

        self._container = container

    @property
    def environment(self):
        """Gets the environment of this AgentTaskRunnable.


        :return: The environment of this AgentTaskRunnable.
        :rtype: AgentEnvironment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this AgentTaskRunnable.


        :param environment: The environment of this AgentTaskRunnable.
        :type environment: AgentEnvironment
        """

        self._environment = environment

    @property
    def ignore_exit_status(self):
        """Gets the ignore_exit_status of this AgentTaskRunnable.

        Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.

        :return: The ignore_exit_status of this AgentTaskRunnable.
        :rtype: bool
        """
        return self._ignore_exit_status

    @ignore_exit_status.setter
    def ignore_exit_status(self, ignore_exit_status):
        """Sets the ignore_exit_status of this AgentTaskRunnable.

        Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.

        :param ignore_exit_status: The ignore_exit_status of this AgentTaskRunnable.
        :type ignore_exit_status: bool
        """

        self._ignore_exit_status = ignore_exit_status

    @property
    def script(self):
        """Gets the script of this AgentTaskRunnable.


        :return: The script of this AgentTaskRunnable.
        :rtype: AgentScript
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this AgentTaskRunnable.


        :param script: The script of this AgentTaskRunnable.
        :type script: AgentScript
        """

        self._script = script

    @property
    def timeout(self):
        """Gets the timeout of this AgentTaskRunnable.

        Timeout for this Runnable.

        :return: The timeout of this AgentTaskRunnable.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this AgentTaskRunnable.

        Timeout for this Runnable.

        :param timeout: The timeout of this AgentTaskRunnable.
        :type timeout: str
        """

        self._timeout = timeout
