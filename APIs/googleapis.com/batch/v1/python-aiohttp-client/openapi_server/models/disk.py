# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Disk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk_interface: str=None, image: str=None, size_gb: str=None, snapshot: str=None, type: str=None):
        """Disk - a model defined in OpenAPI

        :param disk_interface: The disk_interface of this Disk.
        :param image: The image of this Disk.
        :param size_gb: The size_gb of this Disk.
        :param snapshot: The snapshot of this Disk.
        :param type: The type of this Disk.
        """
        self.openapi_types = {
            'disk_interface': str,
            'image': str,
            'size_gb': str,
            'snapshot': str,
            'type': str
        }

        self.attribute_map = {
            'disk_interface': 'diskInterface',
            'image': 'image',
            'size_gb': 'sizeGb',
            'snapshot': 'snapshot',
            'type': 'type'
        }

        self._disk_interface = disk_interface
        self._image = image
        self._size_gb = size_gb
        self._snapshot = snapshot
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Disk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Disk of this Disk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk_interface(self):
        """Gets the disk_interface of this Disk.

        Local SSDs are available through both \"SCSI\" and \"NVMe\" interfaces. If not indicated, \"NVMe\" will be the default one for local ssds. This field is ignored for persistent disks as the interface is chosen automatically. See https://cloud.google.com/compute/docs/disks/persistent-disks#choose_an_interface.

        :return: The disk_interface of this Disk.
        :rtype: str
        """
        return self._disk_interface

    @disk_interface.setter
    def disk_interface(self, disk_interface):
        """Sets the disk_interface of this Disk.

        Local SSDs are available through both \"SCSI\" and \"NVMe\" interfaces. If not indicated, \"NVMe\" will be the default one for local ssds. This field is ignored for persistent disks as the interface is chosen automatically. See https://cloud.google.com/compute/docs/disks/persistent-disks#choose_an_interface.

        :param disk_interface: The disk_interface of this Disk.
        :type disk_interface: str
        """

        self._disk_interface = disk_interface

    @property
    def image(self):
        """Gets the image of this Disk.

        URL for a VM image to use as the data source for this disk. For example, the following are all valid URLs: * Specify the image by its family name: projects/{project}/global/images/family/{image_family} * Specify the image version: projects/{project}/global/images/{image_version} You can also use Batch customized image in short names. The following image values are supported for a boot disk: * `batch-debian`: use Batch Debian images. * `batch-centos`: use Batch CentOS images. * `batch-cos`: use Batch Container-Optimized images. * `batch-hpc-centos`: use Batch HPC CentOS images. * `batch-hpc-rocky`: use Batch HPC Rocky Linux images.

        :return: The image of this Disk.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Disk.

        URL for a VM image to use as the data source for this disk. For example, the following are all valid URLs: * Specify the image by its family name: projects/{project}/global/images/family/{image_family} * Specify the image version: projects/{project}/global/images/{image_version} You can also use Batch customized image in short names. The following image values are supported for a boot disk: * `batch-debian`: use Batch Debian images. * `batch-centos`: use Batch CentOS images. * `batch-cos`: use Batch Container-Optimized images. * `batch-hpc-centos`: use Batch HPC CentOS images. * `batch-hpc-rocky`: use Batch HPC Rocky Linux images.

        :param image: The image of this Disk.
        :type image: str
        """

        self._image = image

    @property
    def size_gb(self):
        """Gets the size_gb of this Disk.

        Disk size in GB. **Non-Boot Disk**: If the `type` specifies a persistent disk, this field is ignored if `data_source` is set as `image` or `snapshot`. If the `type` specifies a local SSD, this field should be a multiple of 375 GB, otherwise, the final size will be the next greater multiple of 375 GB. **Boot Disk**: Batch will calculate the boot disk size based on source image and task requirements if you do not speicify the size. If both this field and the `boot_disk_mib` field in task spec's `compute_resource` are defined, Batch will only honor this field. Also, this field should be no smaller than the source disk's size when the `data_source` is set as `snapshot` or `image`. For example, if you set an image as the `data_source` field and the image's default disk size 30 GB, you can only use this field to make the disk larger or equal to 30 GB.

        :return: The size_gb of this Disk.
        :rtype: str
        """
        return self._size_gb

    @size_gb.setter
    def size_gb(self, size_gb):
        """Sets the size_gb of this Disk.

        Disk size in GB. **Non-Boot Disk**: If the `type` specifies a persistent disk, this field is ignored if `data_source` is set as `image` or `snapshot`. If the `type` specifies a local SSD, this field should be a multiple of 375 GB, otherwise, the final size will be the next greater multiple of 375 GB. **Boot Disk**: Batch will calculate the boot disk size based on source image and task requirements if you do not speicify the size. If both this field and the `boot_disk_mib` field in task spec's `compute_resource` are defined, Batch will only honor this field. Also, this field should be no smaller than the source disk's size when the `data_source` is set as `snapshot` or `image`. For example, if you set an image as the `data_source` field and the image's default disk size 30 GB, you can only use this field to make the disk larger or equal to 30 GB.

        :param size_gb: The size_gb of this Disk.
        :type size_gb: str
        """

        self._size_gb = size_gb

    @property
    def snapshot(self):
        """Gets the snapshot of this Disk.

        Name of a snapshot used as the data source. Snapshot is not supported as boot disk now.

        :return: The snapshot of this Disk.
        :rtype: str
        """
        return self._snapshot

    @snapshot.setter
    def snapshot(self, snapshot):
        """Sets the snapshot of this Disk.

        Name of a snapshot used as the data source. Snapshot is not supported as boot disk now.

        :param snapshot: The snapshot of this Disk.
        :type snapshot: str
        """

        self._snapshot = snapshot

    @property
    def type(self):
        """Gets the type of this Disk.

        Disk type as shown in `gcloud compute disk-types list`. For example, local SSD uses type \"local-ssd\". Persistent disks and boot disks use \"pd-balanced\", \"pd-extreme\", \"pd-ssd\" or \"pd-standard\".

        :return: The type of this Disk.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Disk.

        Disk type as shown in `gcloud compute disk-types list`. For example, local SSD uses type \"local-ssd\". Persistent disks and boot disks use \"pd-balanced\", \"pd-extreme\", \"pd-ssd\" or \"pd-standard\".

        :param type: The type of this Disk.
        :type type: str
        """

        self._type = type
