# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_condition import ActionCondition
from openapi_server import util


class LifecyclePolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, action_condition: ActionCondition=None):
        """LifecyclePolicy - a model defined in OpenAPI

        :param action: The action of this LifecyclePolicy.
        :param action_condition: The action_condition of this LifecyclePolicy.
        """
        self.openapi_types = {
            'action': str,
            'action_condition': ActionCondition
        }

        self.attribute_map = {
            'action': 'action',
            'action_condition': 'actionCondition'
        }

        self._action = action
        self._action_condition = action_condition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LifecyclePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LifecyclePolicy of this LifecyclePolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this LifecyclePolicy.

        Action to execute when ActionCondition is true. When RETRY_TASK is specified, we will retry failed tasks if we notice any exit code match and fail tasks if no match is found. Likewise, when FAIL_TASK is specified, we will fail tasks if we notice any exit code match and retry tasks if no match is found.

        :return: The action of this LifecyclePolicy.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this LifecyclePolicy.

        Action to execute when ActionCondition is true. When RETRY_TASK is specified, we will retry failed tasks if we notice any exit code match and fail tasks if no match is found. Likewise, when FAIL_TASK is specified, we will fail tasks if we notice any exit code match and retry tasks if no match is found.

        :param action: The action of this LifecyclePolicy.
        :type action: str
        """
        allowed_values = ["ACTION_UNSPECIFIED", "RETRY_TASK", "FAIL_TASK"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def action_condition(self):
        """Gets the action_condition of this LifecyclePolicy.


        :return: The action_condition of this LifecyclePolicy.
        :rtype: ActionCondition
        """
        return self._action_condition

    @action_condition.setter
    def action_condition(self, action_condition):
        """Sets the action_condition of this LifecyclePolicy.


        :param action_condition: The action_condition of this LifecyclePolicy.
        :type action_condition: ActionCondition
        """

        self._action_condition = action_condition
