# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allocation_policy import AllocationPolicy
from openapi_server.models.job_notification import JobNotification
from openapi_server.models.job_status import JobStatus
from openapi_server.models.logs_policy import LogsPolicy
from openapi_server.models.task_group import TaskGroup
from openapi_server import util


class Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocation_policy: AllocationPolicy=None, create_time: str=None, labels: Dict[str, str]=None, logs_policy: LogsPolicy=None, name: str=None, notifications: List[JobNotification]=None, priority: str=None, status: JobStatus=None, task_groups: List[TaskGroup]=None, uid: str=None, update_time: str=None):
        """Job - a model defined in OpenAPI

        :param allocation_policy: The allocation_policy of this Job.
        :param create_time: The create_time of this Job.
        :param labels: The labels of this Job.
        :param logs_policy: The logs_policy of this Job.
        :param name: The name of this Job.
        :param notifications: The notifications of this Job.
        :param priority: The priority of this Job.
        :param status: The status of this Job.
        :param task_groups: The task_groups of this Job.
        :param uid: The uid of this Job.
        :param update_time: The update_time of this Job.
        """
        self.openapi_types = {
            'allocation_policy': AllocationPolicy,
            'create_time': str,
            'labels': Dict[str, str],
            'logs_policy': LogsPolicy,
            'name': str,
            'notifications': List[JobNotification],
            'priority': str,
            'status': JobStatus,
            'task_groups': List[TaskGroup],
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'allocation_policy': 'allocationPolicy',
            'create_time': 'createTime',
            'labels': 'labels',
            'logs_policy': 'logsPolicy',
            'name': 'name',
            'notifications': 'notifications',
            'priority': 'priority',
            'status': 'status',
            'task_groups': 'taskGroups',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._allocation_policy = allocation_policy
        self._create_time = create_time
        self._labels = labels
        self._logs_policy = logs_policy
        self._name = name
        self._notifications = notifications
        self._priority = priority
        self._status = status
        self._task_groups = task_groups
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Job of this Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocation_policy(self):
        """Gets the allocation_policy of this Job.


        :return: The allocation_policy of this Job.
        :rtype: AllocationPolicy
        """
        return self._allocation_policy

    @allocation_policy.setter
    def allocation_policy(self, allocation_policy):
        """Sets the allocation_policy of this Job.


        :param allocation_policy: The allocation_policy of this Job.
        :type allocation_policy: AllocationPolicy
        """

        self._allocation_policy = allocation_policy

    @property
    def create_time(self):
        """Gets the create_time of this Job.

        Output only. When the Job was created.

        :return: The create_time of this Job.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Job.

        Output only. When the Job was created.

        :param create_time: The create_time of this Job.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def labels(self):
        """Gets the labels of this Job.

        Labels for the Job. Labels could be user provided or system generated. For example, \"labels\": { \"department\": \"finance\", \"environment\": \"test\" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with \"goog-\" or \"google-\" are reserved.

        :return: The labels of this Job.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Job.

        Labels for the Job. Labels could be user provided or system generated. For example, \"labels\": { \"department\": \"finance\", \"environment\": \"test\" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with \"goog-\" or \"google-\" are reserved.

        :param labels: The labels of this Job.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def logs_policy(self):
        """Gets the logs_policy of this Job.


        :return: The logs_policy of this Job.
        :rtype: LogsPolicy
        """
        return self._logs_policy

    @logs_policy.setter
    def logs_policy(self, logs_policy):
        """Sets the logs_policy of this Job.


        :param logs_policy: The logs_policy of this Job.
        :type logs_policy: LogsPolicy
        """

        self._logs_policy = logs_policy

    @property
    def name(self):
        """Gets the name of this Job.

        Output only. Job name. For example: \"projects/123456/locations/us-central1/jobs/job01\".

        :return: The name of this Job.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.

        Output only. Job name. For example: \"projects/123456/locations/us-central1/jobs/job01\".

        :param name: The name of this Job.
        :type name: str
        """

        self._name = name

    @property
    def notifications(self):
        """Gets the notifications of this Job.

        Notification configurations.

        :return: The notifications of this Job.
        :rtype: List[JobNotification]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this Job.

        Notification configurations.

        :param notifications: The notifications of this Job.
        :type notifications: List[JobNotification]
        """

        self._notifications = notifications

    @property
    def priority(self):
        """Gets the priority of this Job.

        Priority of the Job. The valid value range is [0, 100). Default value is 0. Higher value indicates higher priority. A job with higher priority value is more likely to run earlier if all other requirements are satisfied.

        :return: The priority of this Job.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Job.

        Priority of the Job. The valid value range is [0, 100). Default value is 0. Higher value indicates higher priority. A job with higher priority value is more likely to run earlier if all other requirements are satisfied.

        :param priority: The priority of this Job.
        :type priority: str
        """

        self._priority = priority

    @property
    def status(self):
        """Gets the status of this Job.


        :return: The status of this Job.
        :rtype: JobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.


        :param status: The status of this Job.
        :type status: JobStatus
        """

        self._status = status

    @property
    def task_groups(self):
        """Gets the task_groups of this Job.

        Required. TaskGroups in the Job. Only one TaskGroup is supported now.

        :return: The task_groups of this Job.
        :rtype: List[TaskGroup]
        """
        return self._task_groups

    @task_groups.setter
    def task_groups(self, task_groups):
        """Sets the task_groups of this Job.

        Required. TaskGroups in the Job. Only one TaskGroup is supported now.

        :param task_groups: The task_groups of this Job.
        :type task_groups: List[TaskGroup]
        """

        self._task_groups = task_groups

    @property
    def uid(self):
        """Gets the uid of this Job.

        Output only. A system generated unique ID for the Job.

        :return: The uid of this Job.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Job.

        Output only. A system generated unique ID for the Job.

        :param uid: The uid of this Job.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Job.

        Output only. The last time the Job was updated.

        :return: The update_time of this Job.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Job.

        Output only. The last time the Job was updated.

        :param update_time: The update_time of this Job.
        :type update_time: str
        """

        self._update_time = update_time
