# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_kms_env_map import AgentKMSEnvMap
from openapi_server import util


class AgentEnvironment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encrypted_variables: AgentKMSEnvMap=None, secret_variables: Dict[str, str]=None, variables: Dict[str, str]=None):
        """AgentEnvironment - a model defined in OpenAPI

        :param encrypted_variables: The encrypted_variables of this AgentEnvironment.
        :param secret_variables: The secret_variables of this AgentEnvironment.
        :param variables: The variables of this AgentEnvironment.
        """
        self.openapi_types = {
            'encrypted_variables': AgentKMSEnvMap,
            'secret_variables': Dict[str, str],
            'variables': Dict[str, str]
        }

        self.attribute_map = {
            'encrypted_variables': 'encryptedVariables',
            'secret_variables': 'secretVariables',
            'variables': 'variables'
        }

        self._encrypted_variables = encrypted_variables
        self._secret_variables = secret_variables
        self._variables = variables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgentEnvironment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgentEnvironment of this AgentEnvironment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encrypted_variables(self):
        """Gets the encrypted_variables of this AgentEnvironment.


        :return: The encrypted_variables of this AgentEnvironment.
        :rtype: AgentKMSEnvMap
        """
        return self._encrypted_variables

    @encrypted_variables.setter
    def encrypted_variables(self, encrypted_variables):
        """Sets the encrypted_variables of this AgentEnvironment.


        :param encrypted_variables: The encrypted_variables of this AgentEnvironment.
        :type encrypted_variables: AgentKMSEnvMap
        """

        self._encrypted_variables = encrypted_variables

    @property
    def secret_variables(self):
        """Gets the secret_variables of this AgentEnvironment.

        A map of environment variable names to Secret Manager secret names. The VM will access the named secrets to set the value of each environment variable.

        :return: The secret_variables of this AgentEnvironment.
        :rtype: Dict[str, str]
        """
        return self._secret_variables

    @secret_variables.setter
    def secret_variables(self, secret_variables):
        """Sets the secret_variables of this AgentEnvironment.

        A map of environment variable names to Secret Manager secret names. The VM will access the named secrets to set the value of each environment variable.

        :param secret_variables: The secret_variables of this AgentEnvironment.
        :type secret_variables: Dict[str, str]
        """

        self._secret_variables = secret_variables

    @property
    def variables(self):
        """Gets the variables of this AgentEnvironment.

        A map of environment variable names to values.

        :return: The variables of this AgentEnvironment.
        :rtype: Dict[str, str]
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this AgentEnvironment.

        A map of environment variable names to values.

        :param variables: The variables of this AgentEnvironment.
        :type variables: Dict[str, str]
        """

        self._variables = variables
