# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network: str=None, no_external_ip_address: bool=None, subnetwork: str=None):
        """NetworkInterface - a model defined in OpenAPI

        :param network: The network of this NetworkInterface.
        :param no_external_ip_address: The no_external_ip_address of this NetworkInterface.
        :param subnetwork: The subnetwork of this NetworkInterface.
        """
        self.openapi_types = {
            'network': str,
            'no_external_ip_address': bool,
            'subnetwork': str
        }

        self.attribute_map = {
            'network': 'network',
            'no_external_ip_address': 'noExternalIpAddress',
            'subnetwork': 'subnetwork'
        }

        self._network = network
        self._no_external_ip_address = no_external_ip_address
        self._subnetwork = subnetwork

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkInterface of this NetworkInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network(self):
        """Gets the network of this NetworkInterface.

        The URL of an existing network resource. You can specify the network as a full or partial URL. For example, the following are all valid URLs: * https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} * projects/{project}/global/networks/{network} * global/networks/{network}

        :return: The network of this NetworkInterface.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this NetworkInterface.

        The URL of an existing network resource. You can specify the network as a full or partial URL. For example, the following are all valid URLs: * https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} * projects/{project}/global/networks/{network} * global/networks/{network}

        :param network: The network of this NetworkInterface.
        :type network: str
        """

        self._network = network

    @property
    def no_external_ip_address(self):
        """Gets the no_external_ip_address of this NetworkInterface.

        Default is false (with an external IP address). Required if no external public IP address is attached to the VM. If no external public IP address, additional configuration is required to allow the VM to access Google Services. See https://cloud.google.com/vpc/docs/configure-private-google-access and https://cloud.google.com/nat/docs/gce-example#create-nat for more information.

        :return: The no_external_ip_address of this NetworkInterface.
        :rtype: bool
        """
        return self._no_external_ip_address

    @no_external_ip_address.setter
    def no_external_ip_address(self, no_external_ip_address):
        """Sets the no_external_ip_address of this NetworkInterface.

        Default is false (with an external IP address). Required if no external public IP address is attached to the VM. If no external public IP address, additional configuration is required to allow the VM to access Google Services. See https://cloud.google.com/vpc/docs/configure-private-google-access and https://cloud.google.com/nat/docs/gce-example#create-nat for more information.

        :param no_external_ip_address: The no_external_ip_address of this NetworkInterface.
        :type no_external_ip_address: bool
        """

        self._no_external_ip_address = no_external_ip_address

    @property
    def subnetwork(self):
        """Gets the subnetwork of this NetworkInterface.

        The URL of an existing subnetwork resource in the network. You can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: * https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork} * projects/{project}/regions/{region}/subnetworks/{subnetwork} * regions/{region}/subnetworks/{subnetwork}

        :return: The subnetwork of this NetworkInterface.
        :rtype: str
        """
        return self._subnetwork

    @subnetwork.setter
    def subnetwork(self, subnetwork):
        """Sets the subnetwork of this NetworkInterface.

        The URL of an existing subnetwork resource in the network. You can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: * https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork} * projects/{project}/regions/{region}/subnetworks/{subnetwork} * regions/{region}/subnetworks/{subnetwork}

        :param subnetwork: The subnetwork of this NetworkInterface.
        :type subnetwork: str
        """

        self._subnetwork = subnetwork
