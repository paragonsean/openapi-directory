# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ComputeResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boot_disk_mib: str=None, cpu_milli: str=None, memory_mib: str=None):
        """ComputeResource - a model defined in OpenAPI

        :param boot_disk_mib: The boot_disk_mib of this ComputeResource.
        :param cpu_milli: The cpu_milli of this ComputeResource.
        :param memory_mib: The memory_mib of this ComputeResource.
        """
        self.openapi_types = {
            'boot_disk_mib': str,
            'cpu_milli': str,
            'memory_mib': str
        }

        self.attribute_map = {
            'boot_disk_mib': 'bootDiskMib',
            'cpu_milli': 'cpuMilli',
            'memory_mib': 'memoryMib'
        }

        self._boot_disk_mib = boot_disk_mib
        self._cpu_milli = cpu_milli
        self._memory_mib = memory_mib

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComputeResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComputeResource of this ComputeResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boot_disk_mib(self):
        """Gets the boot_disk_mib of this ComputeResource.

        Extra boot disk size in MiB for each task.

        :return: The boot_disk_mib of this ComputeResource.
        :rtype: str
        """
        return self._boot_disk_mib

    @boot_disk_mib.setter
    def boot_disk_mib(self, boot_disk_mib):
        """Sets the boot_disk_mib of this ComputeResource.

        Extra boot disk size in MiB for each task.

        :param boot_disk_mib: The boot_disk_mib of this ComputeResource.
        :type boot_disk_mib: str
        """

        self._boot_disk_mib = boot_disk_mib

    @property
    def cpu_milli(self):
        """Gets the cpu_milli of this ComputeResource.

        The milliCPU count. `cpuMilli` defines the amount of CPU resources per task in milliCPU units. For example, `1000` corresponds to 1 vCPU per task. If undefined, the default value is `2000`. If you also define the VM's machine type using the `machineType` in [InstancePolicy](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicy) field or inside the `instanceTemplate` in the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure the CPU resources for both fields are compatible with each other and with how many tasks you want to allow to run on the same VM at the same time. For example, if you specify the `n2-standard-2` machine type, which has 2 vCPUs each, you are recommended to set `cpuMilli` no more than `2000`, or you are recommended to run two tasks on the same VM if you set `cpuMilli` to `1000` or less.

        :return: The cpu_milli of this ComputeResource.
        :rtype: str
        """
        return self._cpu_milli

    @cpu_milli.setter
    def cpu_milli(self, cpu_milli):
        """Sets the cpu_milli of this ComputeResource.

        The milliCPU count. `cpuMilli` defines the amount of CPU resources per task in milliCPU units. For example, `1000` corresponds to 1 vCPU per task. If undefined, the default value is `2000`. If you also define the VM's machine type using the `machineType` in [InstancePolicy](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicy) field or inside the `instanceTemplate` in the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure the CPU resources for both fields are compatible with each other and with how many tasks you want to allow to run on the same VM at the same time. For example, if you specify the `n2-standard-2` machine type, which has 2 vCPUs each, you are recommended to set `cpuMilli` no more than `2000`, or you are recommended to run two tasks on the same VM if you set `cpuMilli` to `1000` or less.

        :param cpu_milli: The cpu_milli of this ComputeResource.
        :type cpu_milli: str
        """

        self._cpu_milli = cpu_milli

    @property
    def memory_mib(self):
        """Gets the memory_mib of this ComputeResource.

        Memory in MiB. `memoryMib` defines the amount of memory per task in MiB units. If undefined, the default value is `2000`. If you also define the VM's machine type using the `machineType` in [InstancePolicy](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicy) field or inside the `instanceTemplate` in the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure the memory resources for both fields are compatible with each other and with how many tasks you want to allow to run on the same VM at the same time. For example, if you specify the `n2-standard-2` machine type, which has 8 GiB each, you are recommended to set `memoryMib` to no more than `8192`, or you are recommended to run two tasks on the same VM if you set `memoryMib` to `4096` or less.

        :return: The memory_mib of this ComputeResource.
        :rtype: str
        """
        return self._memory_mib

    @memory_mib.setter
    def memory_mib(self, memory_mib):
        """Sets the memory_mib of this ComputeResource.

        Memory in MiB. `memoryMib` defines the amount of memory per task in MiB units. If undefined, the default value is `2000`. If you also define the VM's machine type using the `machineType` in [InstancePolicy](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicy) field or inside the `instanceTemplate` in the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure the memory resources for both fields are compatible with each other and with how many tasks you want to allow to run on the same VM at the same time. For example, if you specify the `n2-standard-2` machine type, which has 8 GiB each, you are recommended to set `memoryMib` to no more than `8192`, or you are recommended to run two tasks on the same VM if you set `memoryMib` to `4096` or less.

        :param memory_mib: The memory_mib of this ComputeResource.
        :type memory_mib: str
        """

        self._memory_mib = memory_mib
