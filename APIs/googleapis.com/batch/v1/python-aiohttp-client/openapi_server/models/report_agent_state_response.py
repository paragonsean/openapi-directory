# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_task import AgentTask
from openapi_server import util


class ReportAgentStateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_report_interval: str=None, min_report_interval: str=None, tasks: List[AgentTask]=None, use_batch_monitored_resource: bool=None):
        """ReportAgentStateResponse - a model defined in OpenAPI

        :param default_report_interval: The default_report_interval of this ReportAgentStateResponse.
        :param min_report_interval: The min_report_interval of this ReportAgentStateResponse.
        :param tasks: The tasks of this ReportAgentStateResponse.
        :param use_batch_monitored_resource: The use_batch_monitored_resource of this ReportAgentStateResponse.
        """
        self.openapi_types = {
            'default_report_interval': str,
            'min_report_interval': str,
            'tasks': List[AgentTask],
            'use_batch_monitored_resource': bool
        }

        self.attribute_map = {
            'default_report_interval': 'defaultReportInterval',
            'min_report_interval': 'minReportInterval',
            'tasks': 'tasks',
            'use_batch_monitored_resource': 'useBatchMonitoredResource'
        }

        self._default_report_interval = default_report_interval
        self._min_report_interval = min_report_interval
        self._tasks = tasks
        self._use_batch_monitored_resource = use_batch_monitored_resource

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportAgentStateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportAgentStateResponse of this ReportAgentStateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_report_interval(self):
        """Gets the default_report_interval of this ReportAgentStateResponse.

        Default report interval override

        :return: The default_report_interval of this ReportAgentStateResponse.
        :rtype: str
        """
        return self._default_report_interval

    @default_report_interval.setter
    def default_report_interval(self, default_report_interval):
        """Sets the default_report_interval of this ReportAgentStateResponse.

        Default report interval override

        :param default_report_interval: The default_report_interval of this ReportAgentStateResponse.
        :type default_report_interval: str
        """

        self._default_report_interval = default_report_interval

    @property
    def min_report_interval(self):
        """Gets the min_report_interval of this ReportAgentStateResponse.

        Minimum report interval override

        :return: The min_report_interval of this ReportAgentStateResponse.
        :rtype: str
        """
        return self._min_report_interval

    @min_report_interval.setter
    def min_report_interval(self, min_report_interval):
        """Sets the min_report_interval of this ReportAgentStateResponse.

        Minimum report interval override

        :param min_report_interval: The min_report_interval of this ReportAgentStateResponse.
        :type min_report_interval: str
        """

        self._min_report_interval = min_report_interval

    @property
    def tasks(self):
        """Gets the tasks of this ReportAgentStateResponse.

        Tasks assigned to the agent

        :return: The tasks of this ReportAgentStateResponse.
        :rtype: List[AgentTask]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this ReportAgentStateResponse.

        Tasks assigned to the agent

        :param tasks: The tasks of this ReportAgentStateResponse.
        :type tasks: List[AgentTask]
        """

        self._tasks = tasks

    @property
    def use_batch_monitored_resource(self):
        """Gets the use_batch_monitored_resource of this ReportAgentStateResponse.

        If true, the cloud logging for batch agent will use batch.googleapis.com/Job as monitored resource for Batch job related logging.

        :return: The use_batch_monitored_resource of this ReportAgentStateResponse.
        :rtype: bool
        """
        return self._use_batch_monitored_resource

    @use_batch_monitored_resource.setter
    def use_batch_monitored_resource(self, use_batch_monitored_resource):
        """Sets the use_batch_monitored_resource of this ReportAgentStateResponse.

        If true, the cloud logging for batch agent will use batch.googleapis.com/Job as monitored resource for Batch job related logging.

        :param use_batch_monitored_resource: The use_batch_monitored_resource of this ReportAgentStateResponse.
        :type use_batch_monitored_resource: bool
        """

        self._use_batch_monitored_resource = use_batch_monitored_resource
