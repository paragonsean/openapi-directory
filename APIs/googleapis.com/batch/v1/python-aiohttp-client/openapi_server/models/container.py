# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Container(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, block_external_network: bool=None, commands: List[str]=None, enable_image_streaming: bool=None, entrypoint: str=None, image_uri: str=None, options: str=None, password: str=None, username: str=None, volumes: List[str]=None):
        """Container - a model defined in OpenAPI

        :param block_external_network: The block_external_network of this Container.
        :param commands: The commands of this Container.
        :param enable_image_streaming: The enable_image_streaming of this Container.
        :param entrypoint: The entrypoint of this Container.
        :param image_uri: The image_uri of this Container.
        :param options: The options of this Container.
        :param password: The password of this Container.
        :param username: The username of this Container.
        :param volumes: The volumes of this Container.
        """
        self.openapi_types = {
            'block_external_network': bool,
            'commands': List[str],
            'enable_image_streaming': bool,
            'entrypoint': str,
            'image_uri': str,
            'options': str,
            'password': str,
            'username': str,
            'volumes': List[str]
        }

        self.attribute_map = {
            'block_external_network': 'blockExternalNetwork',
            'commands': 'commands',
            'enable_image_streaming': 'enableImageStreaming',
            'entrypoint': 'entrypoint',
            'image_uri': 'imageUri',
            'options': 'options',
            'password': 'password',
            'username': 'username',
            'volumes': 'volumes'
        }

        self._block_external_network = block_external_network
        self._commands = commands
        self._enable_image_streaming = enable_image_streaming
        self._entrypoint = entrypoint
        self._image_uri = image_uri
        self._options = options
        self._password = password
        self._username = username
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Container':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Container of this Container.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block_external_network(self):
        """Gets the block_external_network of this Container.

        If set to true, external network access to and from container will be blocked, containers that are with block_external_network as true can still communicate with each other, network cannot be specified in the `container.options` field.

        :return: The block_external_network of this Container.
        :rtype: bool
        """
        return self._block_external_network

    @block_external_network.setter
    def block_external_network(self, block_external_network):
        """Sets the block_external_network of this Container.

        If set to true, external network access to and from container will be blocked, containers that are with block_external_network as true can still communicate with each other, network cannot be specified in the `container.options` field.

        :param block_external_network: The block_external_network of this Container.
        :type block_external_network: bool
        """

        self._block_external_network = block_external_network

    @property
    def commands(self):
        """Gets the commands of this Container.

        Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.

        :return: The commands of this Container.
        :rtype: List[str]
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """Sets the commands of this Container.

        Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.

        :param commands: The commands of this Container.
        :type commands: List[str]
        """

        self._commands = commands

    @property
    def enable_image_streaming(self):
        """Gets the enable_image_streaming of this Container.

        Optional. If set to true, this container runnable uses Image streaming. Use Image streaming to allow the runnable to initialize without waiting for the entire container image to download, which can significantly reduce startup time for large container images. When `enableImageStreaming` is set to true, the container runtime is [containerd](https://containerd.io/) instead of Docker. Additionally, this container runnable only supports the following `container` subfields: `imageUri`, `commands[]`, `entrypoint`, and `volumes[]`; any other `container` subfields are ignored. For more information about the requirements and limitations for using Image streaming with Batch, see the [`image-streaming` sample on GitHub](https://github.com/GoogleCloudPlatform/batch-samples/tree/main/api-samples/image-streaming).

        :return: The enable_image_streaming of this Container.
        :rtype: bool
        """
        return self._enable_image_streaming

    @enable_image_streaming.setter
    def enable_image_streaming(self, enable_image_streaming):
        """Sets the enable_image_streaming of this Container.

        Optional. If set to true, this container runnable uses Image streaming. Use Image streaming to allow the runnable to initialize without waiting for the entire container image to download, which can significantly reduce startup time for large container images. When `enableImageStreaming` is set to true, the container runtime is [containerd](https://containerd.io/) instead of Docker. Additionally, this container runnable only supports the following `container` subfields: `imageUri`, `commands[]`, `entrypoint`, and `volumes[]`; any other `container` subfields are ignored. For more information about the requirements and limitations for using Image streaming with Batch, see the [`image-streaming` sample on GitHub](https://github.com/GoogleCloudPlatform/batch-samples/tree/main/api-samples/image-streaming).

        :param enable_image_streaming: The enable_image_streaming of this Container.
        :type enable_image_streaming: bool
        """

        self._enable_image_streaming = enable_image_streaming

    @property
    def entrypoint(self):
        """Gets the entrypoint of this Container.

        Overrides the `ENTRYPOINT` specified in the container.

        :return: The entrypoint of this Container.
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint):
        """Sets the entrypoint of this Container.

        Overrides the `ENTRYPOINT` specified in the container.

        :param entrypoint: The entrypoint of this Container.
        :type entrypoint: str
        """

        self._entrypoint = entrypoint

    @property
    def image_uri(self):
        """Gets the image_uri of this Container.

        The URI to pull the container image from.

        :return: The image_uri of this Container.
        :rtype: str
        """
        return self._image_uri

    @image_uri.setter
    def image_uri(self, image_uri):
        """Sets the image_uri of this Container.

        The URI to pull the container image from.

        :param image_uri: The image_uri of this Container.
        :type image_uri: str
        """

        self._image_uri = image_uri

    @property
    def options(self):
        """Gets the options of this Container.

        Arbitrary additional options to include in the \"docker run\" command when running this container, e.g. \"--network host\".

        :return: The options of this Container.
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Container.

        Arbitrary additional options to include in the \"docker run\" command when running this container, e.g. \"--network host\".

        :param options: The options of this Container.
        :type options: str
        """

        self._options = options

    @property
    def password(self):
        """Gets the password of this Container.

        Required if the container image is from a private Docker registry. The password to login to the Docker registry that contains the image. For security, it is strongly recommended to specify an encrypted password by using a Secret Manager secret: `projects/*/secrets/*/versions/*`. Warning: If you specify the password using plain text, you risk the password being exposed to any users who can view the job or its logs. To avoid this risk, specify a secret that contains the password instead. Learn more about [Secret Manager](https://cloud.google.com/secret-manager/docs/) and [using Secret Manager with Batch](https://cloud.google.com/batch/docs/create-run-job-secret-manager).

        :return: The password of this Container.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Container.

        Required if the container image is from a private Docker registry. The password to login to the Docker registry that contains the image. For security, it is strongly recommended to specify an encrypted password by using a Secret Manager secret: `projects/*/secrets/*/versions/*`. Warning: If you specify the password using plain text, you risk the password being exposed to any users who can view the job or its logs. To avoid this risk, specify a secret that contains the password instead. Learn more about [Secret Manager](https://cloud.google.com/secret-manager/docs/) and [using Secret Manager with Batch](https://cloud.google.com/batch/docs/create-run-job-secret-manager).

        :param password: The password of this Container.
        :type password: str
        """

        self._password = password

    @property
    def username(self):
        """Gets the username of this Container.

        Required if the container image is from a private Docker registry. The username to login to the Docker registry that contains the image. You can either specify the username directly by using plain text or specify an encrypted username by using a Secret Manager secret: `projects/*/secrets/*/versions/*`. However, using a secret is recommended for enhanced security. Caution: If you specify the username using plain text, you risk the username being exposed to any users who can view the job or its logs. To avoid this risk, specify a secret that contains the username instead. Learn more about [Secret Manager](https://cloud.google.com/secret-manager/docs/) and [using Secret Manager with Batch](https://cloud.google.com/batch/docs/create-run-job-secret-manager).

        :return: The username of this Container.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Container.

        Required if the container image is from a private Docker registry. The username to login to the Docker registry that contains the image. You can either specify the username directly by using plain text or specify an encrypted username by using a Secret Manager secret: `projects/*/secrets/*/versions/*`. However, using a secret is recommended for enhanced security. Caution: If you specify the username using plain text, you risk the username being exposed to any users who can view the job or its logs. To avoid this risk, specify a secret that contains the username instead. Learn more about [Secret Manager](https://cloud.google.com/secret-manager/docs/) and [using Secret Manager with Batch](https://cloud.google.com/batch/docs/create-run-job-secret-manager).

        :param username: The username of this Container.
        :type username: str
        """

        self._username = username

    @property
    def volumes(self):
        """Gets the volumes of this Container.

        Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro If the `TaskSpec.Volumes` field is specified but this field is not, Batch will mount each volume from the host machine to the container with the same mount path by default. In this case, the default mount option for containers will be read-only (ro) for existing persistent disks and read-write (rw) for other volume types, regardless of the original mount options specified in `TaskSpec.Volumes`. If you need different mount settings, you can explicitly configure them in this field.

        :return: The volumes of this Container.
        :rtype: List[str]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this Container.

        Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro If the `TaskSpec.Volumes` field is specified but this field is not, Batch will mount each volume from the host machine to the container with the same mount path by default. In this case, the default mount option for containers will be read-only (ro) for existing persistent disks and read-write (rw) for other volume types, regardless of the original mount options specified in `TaskSpec.Volumes`. If you need different mount settings, you can explicitly configure them in this field.

        :param volumes: The volumes of this Container.
        :type volumes: List[str]
        """

        self._volumes = volumes
