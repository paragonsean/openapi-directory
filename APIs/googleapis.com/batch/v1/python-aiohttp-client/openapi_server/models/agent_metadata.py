# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AgentMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: str=None, creator: str=None, image_version: str=None, instance: str=None, instance_id: str=None, instance_preemption_notice_received: bool=None, os_release: Dict[str, str]=None, version: str=None, zone: str=None):
        """AgentMetadata - a model defined in OpenAPI

        :param creation_time: The creation_time of this AgentMetadata.
        :param creator: The creator of this AgentMetadata.
        :param image_version: The image_version of this AgentMetadata.
        :param instance: The instance of this AgentMetadata.
        :param instance_id: The instance_id of this AgentMetadata.
        :param instance_preemption_notice_received: The instance_preemption_notice_received of this AgentMetadata.
        :param os_release: The os_release of this AgentMetadata.
        :param version: The version of this AgentMetadata.
        :param zone: The zone of this AgentMetadata.
        """
        self.openapi_types = {
            'creation_time': str,
            'creator': str,
            'image_version': str,
            'instance': str,
            'instance_id': str,
            'instance_preemption_notice_received': bool,
            'os_release': Dict[str, str],
            'version': str,
            'zone': str
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'creator': 'creator',
            'image_version': 'imageVersion',
            'instance': 'instance',
            'instance_id': 'instanceId',
            'instance_preemption_notice_received': 'instancePreemptionNoticeReceived',
            'os_release': 'osRelease',
            'version': 'version',
            'zone': 'zone'
        }

        self._creation_time = creation_time
        self._creator = creator
        self._image_version = image_version
        self._instance = instance
        self._instance_id = instance_id
        self._instance_preemption_notice_received = instance_preemption_notice_received
        self._os_release = os_release
        self._version = version
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgentMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgentMetadata of this AgentMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this AgentMetadata.

        When the VM agent started. Use agent_startup_time instead.

        :return: The creation_time of this AgentMetadata.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this AgentMetadata.

        When the VM agent started. Use agent_startup_time instead.

        :param creation_time: The creation_time of this AgentMetadata.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def creator(self):
        """Gets the creator of this AgentMetadata.

        Full name of the entity that created this vm. For MIG, this path is: projects/{project}/regions/{region}/InstanceGroupManagers/{igm} The value is retrieved from the vm metadata key of \"created-by\".

        :return: The creator of this AgentMetadata.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this AgentMetadata.

        Full name of the entity that created this vm. For MIG, this path is: projects/{project}/regions/{region}/InstanceGroupManagers/{igm} The value is retrieved from the vm metadata key of \"created-by\".

        :param creator: The creator of this AgentMetadata.
        :type creator: str
        """

        self._creator = creator

    @property
    def image_version(self):
        """Gets the image_version of this AgentMetadata.

        image version for the VM that this agent is installed on.

        :return: The image_version of this AgentMetadata.
        :rtype: str
        """
        return self._image_version

    @image_version.setter
    def image_version(self, image_version):
        """Sets the image_version of this AgentMetadata.

        image version for the VM that this agent is installed on.

        :param image_version: The image_version of this AgentMetadata.
        :type image_version: str
        """

        self._image_version = image_version

    @property
    def instance(self):
        """Gets the instance of this AgentMetadata.

        GCP instance name (go/instance-name).

        :return: The instance of this AgentMetadata.
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this AgentMetadata.

        GCP instance name (go/instance-name).

        :param instance: The instance of this AgentMetadata.
        :type instance: str
        """

        self._instance = instance

    @property
    def instance_id(self):
        """Gets the instance_id of this AgentMetadata.

        GCP instance ID (go/instance-id).

        :return: The instance_id of this AgentMetadata.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this AgentMetadata.

        GCP instance ID (go/instance-id).

        :param instance_id: The instance_id of this AgentMetadata.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def instance_preemption_notice_received(self):
        """Gets the instance_preemption_notice_received of this AgentMetadata.

        If the GCP instance has received preemption notice.

        :return: The instance_preemption_notice_received of this AgentMetadata.
        :rtype: bool
        """
        return self._instance_preemption_notice_received

    @instance_preemption_notice_received.setter
    def instance_preemption_notice_received(self, instance_preemption_notice_received):
        """Sets the instance_preemption_notice_received of this AgentMetadata.

        If the GCP instance has received preemption notice.

        :param instance_preemption_notice_received: The instance_preemption_notice_received of this AgentMetadata.
        :type instance_preemption_notice_received: bool
        """

        self._instance_preemption_notice_received = instance_preemption_notice_received

    @property
    def os_release(self):
        """Gets the os_release of this AgentMetadata.

        parsed contents of /etc/os-release

        :return: The os_release of this AgentMetadata.
        :rtype: Dict[str, str]
        """
        return self._os_release

    @os_release.setter
    def os_release(self, os_release):
        """Sets the os_release of this AgentMetadata.

        parsed contents of /etc/os-release

        :param os_release: The os_release of this AgentMetadata.
        :type os_release: Dict[str, str]
        """

        self._os_release = os_release

    @property
    def version(self):
        """Gets the version of this AgentMetadata.

        agent binary version running on VM

        :return: The version of this AgentMetadata.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AgentMetadata.

        agent binary version running on VM

        :param version: The version of this AgentMetadata.
        :type version: str
        """

        self._version = version

    @property
    def zone(self):
        """Gets the zone of this AgentMetadata.

        Agent zone.

        :return: The zone of this AgentMetadata.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this AgentMetadata.

        Agent zone.

        :param zone: The zone of this AgentMetadata.
        :type zone: str
        """

        self._zone = zone
