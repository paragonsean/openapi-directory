# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gcs import GCS
from openapi_server.models.nfs import NFS
from openapi_server import util


class Volume(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_name: str=None, gcs: GCS=None, mount_options: List[str]=None, mount_path: str=None, nfs: NFS=None):
        """Volume - a model defined in OpenAPI

        :param device_name: The device_name of this Volume.
        :param gcs: The gcs of this Volume.
        :param mount_options: The mount_options of this Volume.
        :param mount_path: The mount_path of this Volume.
        :param nfs: The nfs of this Volume.
        """
        self.openapi_types = {
            'device_name': str,
            'gcs': GCS,
            'mount_options': List[str],
            'mount_path': str,
            'nfs': NFS
        }

        self.attribute_map = {
            'device_name': 'deviceName',
            'gcs': 'gcs',
            'mount_options': 'mountOptions',
            'mount_path': 'mountPath',
            'nfs': 'nfs'
        }

        self._device_name = device_name
        self._gcs = gcs
        self._mount_options = mount_options
        self._mount_path = mount_path
        self._nfs = nfs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Volume':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Volume of this Volume.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_name(self):
        """Gets the device_name of this Volume.

        Device name of an attached disk volume, which should align with a device_name specified by job.allocation_policy.instances[0].policy.disks[i].device_name or defined by the given instance template in job.allocation_policy.instances[0].instance_template.

        :return: The device_name of this Volume.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this Volume.

        Device name of an attached disk volume, which should align with a device_name specified by job.allocation_policy.instances[0].policy.disks[i].device_name or defined by the given instance template in job.allocation_policy.instances[0].instance_template.

        :param device_name: The device_name of this Volume.
        :type device_name: str
        """

        self._device_name = device_name

    @property
    def gcs(self):
        """Gets the gcs of this Volume.


        :return: The gcs of this Volume.
        :rtype: GCS
        """
        return self._gcs

    @gcs.setter
    def gcs(self, gcs):
        """Sets the gcs of this Volume.


        :param gcs: The gcs of this Volume.
        :type gcs: GCS
        """

        self._gcs = gcs

    @property
    def mount_options(self):
        """Gets the mount_options of this Volume.

        For Google Cloud Storage (GCS), mount options are the options supported by the gcsfuse tool (https://github.com/GoogleCloudPlatform/gcsfuse). For existing persistent disks, mount options provided by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html) except writing are supported. This is due to restrictions of multi-writer mode (https://cloud.google.com/compute/docs/disks/sharing-disks-between-vms). For other attached disks and Network File System (NFS), mount options are these supported by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html).

        :return: The mount_options of this Volume.
        :rtype: List[str]
        """
        return self._mount_options

    @mount_options.setter
    def mount_options(self, mount_options):
        """Sets the mount_options of this Volume.

        For Google Cloud Storage (GCS), mount options are the options supported by the gcsfuse tool (https://github.com/GoogleCloudPlatform/gcsfuse). For existing persistent disks, mount options provided by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html) except writing are supported. This is due to restrictions of multi-writer mode (https://cloud.google.com/compute/docs/disks/sharing-disks-between-vms). For other attached disks and Network File System (NFS), mount options are these supported by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html).

        :param mount_options: The mount_options of this Volume.
        :type mount_options: List[str]
        """

        self._mount_options = mount_options

    @property
    def mount_path(self):
        """Gets the mount_path of this Volume.

        The mount path for the volume, e.g. /mnt/disks/share.

        :return: The mount_path of this Volume.
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        """Sets the mount_path of this Volume.

        The mount path for the volume, e.g. /mnt/disks/share.

        :param mount_path: The mount_path of this Volume.
        :type mount_path: str
        """

        self._mount_path = mount_path

    @property
    def nfs(self):
        """Gets the nfs of this Volume.


        :return: The nfs of this Volume.
        :rtype: NFS
        """
        return self._nfs

    @nfs.setter
    def nfs(self, nfs):
        """Sets the nfs of this Volume.


        :param nfs: The nfs of this Volume.
        :type nfs: NFS
        """

        self._nfs = nfs
