# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.accelerator import Accelerator
from openapi_server.models.attached_disk import AttachedDisk
from openapi_server.models.disk import Disk
from openapi_server import util


class InstancePolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerators: List[Accelerator]=None, boot_disk: Disk=None, disks: List[AttachedDisk]=None, machine_type: str=None, min_cpu_platform: str=None, provisioning_model: str=None, reservation: str=None):
        """InstancePolicy - a model defined in OpenAPI

        :param accelerators: The accelerators of this InstancePolicy.
        :param boot_disk: The boot_disk of this InstancePolicy.
        :param disks: The disks of this InstancePolicy.
        :param machine_type: The machine_type of this InstancePolicy.
        :param min_cpu_platform: The min_cpu_platform of this InstancePolicy.
        :param provisioning_model: The provisioning_model of this InstancePolicy.
        :param reservation: The reservation of this InstancePolicy.
        """
        self.openapi_types = {
            'accelerators': List[Accelerator],
            'boot_disk': Disk,
            'disks': List[AttachedDisk],
            'machine_type': str,
            'min_cpu_platform': str,
            'provisioning_model': str,
            'reservation': str
        }

        self.attribute_map = {
            'accelerators': 'accelerators',
            'boot_disk': 'bootDisk',
            'disks': 'disks',
            'machine_type': 'machineType',
            'min_cpu_platform': 'minCpuPlatform',
            'provisioning_model': 'provisioningModel',
            'reservation': 'reservation'
        }

        self._accelerators = accelerators
        self._boot_disk = boot_disk
        self._disks = disks
        self._machine_type = machine_type
        self._min_cpu_platform = min_cpu_platform
        self._provisioning_model = provisioning_model
        self._reservation = reservation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstancePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstancePolicy of this InstancePolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerators(self):
        """Gets the accelerators of this InstancePolicy.

        The accelerators attached to each VM instance.

        :return: The accelerators of this InstancePolicy.
        :rtype: List[Accelerator]
        """
        return self._accelerators

    @accelerators.setter
    def accelerators(self, accelerators):
        """Sets the accelerators of this InstancePolicy.

        The accelerators attached to each VM instance.

        :param accelerators: The accelerators of this InstancePolicy.
        :type accelerators: List[Accelerator]
        """

        self._accelerators = accelerators

    @property
    def boot_disk(self):
        """Gets the boot_disk of this InstancePolicy.


        :return: The boot_disk of this InstancePolicy.
        :rtype: Disk
        """
        return self._boot_disk

    @boot_disk.setter
    def boot_disk(self, boot_disk):
        """Sets the boot_disk of this InstancePolicy.


        :param boot_disk: The boot_disk of this InstancePolicy.
        :type boot_disk: Disk
        """

        self._boot_disk = boot_disk

    @property
    def disks(self):
        """Gets the disks of this InstancePolicy.

        Non-boot disks to be attached for each VM created by this InstancePolicy. New disks will be deleted when the VM is deleted. A non-boot disk is a disk that can be of a device with a file system or a raw storage drive that is not ready for data storage and accessing.

        :return: The disks of this InstancePolicy.
        :rtype: List[AttachedDisk]
        """
        return self._disks

    @disks.setter
    def disks(self, disks):
        """Sets the disks of this InstancePolicy.

        Non-boot disks to be attached for each VM created by this InstancePolicy. New disks will be deleted when the VM is deleted. A non-boot disk is a disk that can be of a device with a file system or a raw storage drive that is not ready for data storage and accessing.

        :param disks: The disks of this InstancePolicy.
        :type disks: List[AttachedDisk]
        """

        self._disks = disks

    @property
    def machine_type(self):
        """Gets the machine_type of this InstancePolicy.

        The Compute Engine machine type.

        :return: The machine_type of this InstancePolicy.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this InstancePolicy.

        The Compute Engine machine type.

        :param machine_type: The machine_type of this InstancePolicy.
        :type machine_type: str
        """

        self._machine_type = machine_type

    @property
    def min_cpu_platform(self):
        """Gets the min_cpu_platform of this InstancePolicy.

        The minimum CPU platform. See https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.

        :return: The min_cpu_platform of this InstancePolicy.
        :rtype: str
        """
        return self._min_cpu_platform

    @min_cpu_platform.setter
    def min_cpu_platform(self, min_cpu_platform):
        """Sets the min_cpu_platform of this InstancePolicy.

        The minimum CPU platform. See https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.

        :param min_cpu_platform: The min_cpu_platform of this InstancePolicy.
        :type min_cpu_platform: str
        """

        self._min_cpu_platform = min_cpu_platform

    @property
    def provisioning_model(self):
        """Gets the provisioning_model of this InstancePolicy.

        The provisioning model.

        :return: The provisioning_model of this InstancePolicy.
        :rtype: str
        """
        return self._provisioning_model

    @provisioning_model.setter
    def provisioning_model(self, provisioning_model):
        """Sets the provisioning_model of this InstancePolicy.

        The provisioning model.

        :param provisioning_model: The provisioning_model of this InstancePolicy.
        :type provisioning_model: str
        """
        allowed_values = ["PROVISIONING_MODEL_UNSPECIFIED", "STANDARD", "SPOT", "PREEMPTIBLE"]  # noqa: E501
        if provisioning_model not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_model` ({0}), must be one of {1}"
                .format(provisioning_model, allowed_values)
            )

        self._provisioning_model = provisioning_model

    @property
    def reservation(self):
        """Gets the reservation of this InstancePolicy.

        Optional. If specified, VMs will consume only the specified reservation. If not specified (default), VMs will consume any applicable reservation.

        :return: The reservation of this InstancePolicy.
        :rtype: str
        """
        return self._reservation

    @reservation.setter
    def reservation(self, reservation):
        """Sets the reservation of this InstancePolicy.

        Optional. If specified, VMs will consume only the specified reservation. If not specified (default), VMs will consume any applicable reservation.

        :param reservation: The reservation of this InstancePolicy.
        :type reservation: str
        """

        self._reservation = reservation
