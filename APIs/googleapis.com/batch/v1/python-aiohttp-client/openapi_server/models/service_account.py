# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, scopes: List[str]=None):
        """ServiceAccount - a model defined in OpenAPI

        :param email: The email of this ServiceAccount.
        :param scopes: The scopes of this ServiceAccount.
        """
        self.openapi_types = {
            'email': str,
            'scopes': List[str]
        }

        self.attribute_map = {
            'email': 'email',
            'scopes': 'scopes'
        }

        self._email = email
        self._scopes = scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceAccount of this ServiceAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this ServiceAccount.

        Email address of the service account. If not specified, the default Compute Engine service account for the project will be used. If instance template is being used, the service account has to be specified in the instance template and it has to match the email field here.

        :return: The email of this ServiceAccount.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ServiceAccount.

        Email address of the service account. If not specified, the default Compute Engine service account for the project will be used. If instance template is being used, the service account has to be specified in the instance template and it has to match the email field here.

        :param email: The email of this ServiceAccount.
        :type email: str
        """

        self._email = email

    @property
    def scopes(self):
        """Gets the scopes of this ServiceAccount.

        List of scopes to be enabled for this service account on the VM, in addition to the cloud-platform API scope that will be added by default.

        :return: The scopes of this ServiceAccount.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ServiceAccount.

        List of scopes to be enabled for this service account on the VM, in addition to the cloud-platform API scope that will be added by default.

        :param scopes: The scopes of this ServiceAccount.
        :type scopes: List[str]
        """

        self._scopes = scopes
