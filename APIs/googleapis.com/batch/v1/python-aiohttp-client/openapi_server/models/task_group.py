# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment import Environment
from openapi_server.models.task_spec import TaskSpec
from openapi_server import util


class TaskGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, parallelism: str=None, permissive_ssh: bool=None, require_hosts_file: bool=None, run_as_non_root: bool=None, scheduling_policy: str=None, task_count: str=None, task_count_per_node: str=None, task_environments: List[Environment]=None, task_spec: TaskSpec=None):
        """TaskGroup - a model defined in OpenAPI

        :param name: The name of this TaskGroup.
        :param parallelism: The parallelism of this TaskGroup.
        :param permissive_ssh: The permissive_ssh of this TaskGroup.
        :param require_hosts_file: The require_hosts_file of this TaskGroup.
        :param run_as_non_root: The run_as_non_root of this TaskGroup.
        :param scheduling_policy: The scheduling_policy of this TaskGroup.
        :param task_count: The task_count of this TaskGroup.
        :param task_count_per_node: The task_count_per_node of this TaskGroup.
        :param task_environments: The task_environments of this TaskGroup.
        :param task_spec: The task_spec of this TaskGroup.
        """
        self.openapi_types = {
            'name': str,
            'parallelism': str,
            'permissive_ssh': bool,
            'require_hosts_file': bool,
            'run_as_non_root': bool,
            'scheduling_policy': str,
            'task_count': str,
            'task_count_per_node': str,
            'task_environments': List[Environment],
            'task_spec': TaskSpec
        }

        self.attribute_map = {
            'name': 'name',
            'parallelism': 'parallelism',
            'permissive_ssh': 'permissiveSsh',
            'require_hosts_file': 'requireHostsFile',
            'run_as_non_root': 'runAsNonRoot',
            'scheduling_policy': 'schedulingPolicy',
            'task_count': 'taskCount',
            'task_count_per_node': 'taskCountPerNode',
            'task_environments': 'taskEnvironments',
            'task_spec': 'taskSpec'
        }

        self._name = name
        self._parallelism = parallelism
        self._permissive_ssh = permissive_ssh
        self._require_hosts_file = require_hosts_file
        self._run_as_non_root = run_as_non_root
        self._scheduling_policy = scheduling_policy
        self._task_count = task_count
        self._task_count_per_node = task_count_per_node
        self._task_environments = task_environments
        self._task_spec = task_spec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskGroup of this TaskGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this TaskGroup.

        Output only. TaskGroup name. The system generates this field based on parent Job name. For example: \"projects/123456/locations/us-west1/jobs/job01/taskGroups/group01\".

        :return: The name of this TaskGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskGroup.

        Output only. TaskGroup name. The system generates this field based on parent Job name. For example: \"projects/123456/locations/us-west1/jobs/job01/taskGroups/group01\".

        :param name: The name of this TaskGroup.
        :type name: str
        """

        self._name = name

    @property
    def parallelism(self):
        """Gets the parallelism of this TaskGroup.

        Max number of tasks that can run in parallel. Default to min(task_count, parallel tasks per job limit). See: [Job Limits](https://cloud.google.com/batch/quotas#job_limits). Field parallelism must be 1 if the scheduling_policy is IN_ORDER.

        :return: The parallelism of this TaskGroup.
        :rtype: str
        """
        return self._parallelism

    @parallelism.setter
    def parallelism(self, parallelism):
        """Sets the parallelism of this TaskGroup.

        Max number of tasks that can run in parallel. Default to min(task_count, parallel tasks per job limit). See: [Job Limits](https://cloud.google.com/batch/quotas#job_limits). Field parallelism must be 1 if the scheduling_policy is IN_ORDER.

        :param parallelism: The parallelism of this TaskGroup.
        :type parallelism: str
        """

        self._parallelism = parallelism

    @property
    def permissive_ssh(self):
        """Gets the permissive_ssh of this TaskGroup.

        When true, Batch will configure SSH to allow passwordless login between VMs running the Batch tasks in the same TaskGroup.

        :return: The permissive_ssh of this TaskGroup.
        :rtype: bool
        """
        return self._permissive_ssh

    @permissive_ssh.setter
    def permissive_ssh(self, permissive_ssh):
        """Sets the permissive_ssh of this TaskGroup.

        When true, Batch will configure SSH to allow passwordless login between VMs running the Batch tasks in the same TaskGroup.

        :param permissive_ssh: The permissive_ssh of this TaskGroup.
        :type permissive_ssh: bool
        """

        self._permissive_ssh = permissive_ssh

    @property
    def require_hosts_file(self):
        """Gets the require_hosts_file of this TaskGroup.

        When true, Batch will populate a file with a list of all VMs assigned to the TaskGroup and set the BATCH_HOSTS_FILE environment variable to the path of that file. Defaults to false. The host file supports up to 1000 VMs.

        :return: The require_hosts_file of this TaskGroup.
        :rtype: bool
        """
        return self._require_hosts_file

    @require_hosts_file.setter
    def require_hosts_file(self, require_hosts_file):
        """Sets the require_hosts_file of this TaskGroup.

        When true, Batch will populate a file with a list of all VMs assigned to the TaskGroup and set the BATCH_HOSTS_FILE environment variable to the path of that file. Defaults to false. The host file supports up to 1000 VMs.

        :param require_hosts_file: The require_hosts_file of this TaskGroup.
        :type require_hosts_file: bool
        """

        self._require_hosts_file = require_hosts_file

    @property
    def run_as_non_root(self):
        """Gets the run_as_non_root of this TaskGroup.

        Optional. If not set or set to false, Batch uses the root user to execute runnables. If set to true, Batch runs the runnables using a non-root user. Currently, the non-root user Batch used is generated by OS Login. For more information, see [About OS Login](https://cloud.google.com/compute/docs/oslogin).

        :return: The run_as_non_root of this TaskGroup.
        :rtype: bool
        """
        return self._run_as_non_root

    @run_as_non_root.setter
    def run_as_non_root(self, run_as_non_root):
        """Sets the run_as_non_root of this TaskGroup.

        Optional. If not set or set to false, Batch uses the root user to execute runnables. If set to true, Batch runs the runnables using a non-root user. Currently, the non-root user Batch used is generated by OS Login. For more information, see [About OS Login](https://cloud.google.com/compute/docs/oslogin).

        :param run_as_non_root: The run_as_non_root of this TaskGroup.
        :type run_as_non_root: bool
        """

        self._run_as_non_root = run_as_non_root

    @property
    def scheduling_policy(self):
        """Gets the scheduling_policy of this TaskGroup.

        Scheduling policy for Tasks in the TaskGroup. The default value is AS_SOON_AS_POSSIBLE.

        :return: The scheduling_policy of this TaskGroup.
        :rtype: str
        """
        return self._scheduling_policy

    @scheduling_policy.setter
    def scheduling_policy(self, scheduling_policy):
        """Sets the scheduling_policy of this TaskGroup.

        Scheduling policy for Tasks in the TaskGroup. The default value is AS_SOON_AS_POSSIBLE.

        :param scheduling_policy: The scheduling_policy of this TaskGroup.
        :type scheduling_policy: str
        """
        allowed_values = ["SCHEDULING_POLICY_UNSPECIFIED", "AS_SOON_AS_POSSIBLE", "IN_ORDER"]  # noqa: E501
        if scheduling_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `scheduling_policy` ({0}), must be one of {1}"
                .format(scheduling_policy, allowed_values)
            )

        self._scheduling_policy = scheduling_policy

    @property
    def task_count(self):
        """Gets the task_count of this TaskGroup.

        Number of Tasks in the TaskGroup. Default is 1.

        :return: The task_count of this TaskGroup.
        :rtype: str
        """
        return self._task_count

    @task_count.setter
    def task_count(self, task_count):
        """Sets the task_count of this TaskGroup.

        Number of Tasks in the TaskGroup. Default is 1.

        :param task_count: The task_count of this TaskGroup.
        :type task_count: str
        """

        self._task_count = task_count

    @property
    def task_count_per_node(self):
        """Gets the task_count_per_node of this TaskGroup.

        Max number of tasks that can be run on a VM at the same time. If not specified, the system will decide a value based on available compute resources on a VM and task requirements.

        :return: The task_count_per_node of this TaskGroup.
        :rtype: str
        """
        return self._task_count_per_node

    @task_count_per_node.setter
    def task_count_per_node(self, task_count_per_node):
        """Sets the task_count_per_node of this TaskGroup.

        Max number of tasks that can be run on a VM at the same time. If not specified, the system will decide a value based on available compute resources on a VM and task requirements.

        :param task_count_per_node: The task_count_per_node of this TaskGroup.
        :type task_count_per_node: str
        """

        self._task_count_per_node = task_count_per_node

    @property
    def task_environments(self):
        """Gets the task_environments of this TaskGroup.

        An array of environment variable mappings, which are passed to Tasks with matching indices. If task_environments is used then task_count should not be specified in the request (and will be ignored). Task count will be the length of task_environments. Tasks get a BATCH_TASK_INDEX and BATCH_TASK_COUNT environment variable, in addition to any environment variables set in task_environments, specifying the number of Tasks in the Task's parent TaskGroup, and the specific Task's index in the TaskGroup (0 through BATCH_TASK_COUNT - 1).

        :return: The task_environments of this TaskGroup.
        :rtype: List[Environment]
        """
        return self._task_environments

    @task_environments.setter
    def task_environments(self, task_environments):
        """Sets the task_environments of this TaskGroup.

        An array of environment variable mappings, which are passed to Tasks with matching indices. If task_environments is used then task_count should not be specified in the request (and will be ignored). Task count will be the length of task_environments. Tasks get a BATCH_TASK_INDEX and BATCH_TASK_COUNT environment variable, in addition to any environment variables set in task_environments, specifying the number of Tasks in the Task's parent TaskGroup, and the specific Task's index in the TaskGroup (0 through BATCH_TASK_COUNT - 1).

        :param task_environments: The task_environments of this TaskGroup.
        :type task_environments: List[Environment]
        """

        self._task_environments = task_environments

    @property
    def task_spec(self):
        """Gets the task_spec of this TaskGroup.


        :return: The task_spec of this TaskGroup.
        :rtype: TaskSpec
        """
        return self._task_spec

    @task_spec.setter
    def task_spec(self, task_spec):
        """Sets the task_spec of this TaskGroup.


        :param task_spec: The task_spec of this TaskGroup.
        :type task_spec: TaskSpec
        """

        self._task_spec = task_spec
