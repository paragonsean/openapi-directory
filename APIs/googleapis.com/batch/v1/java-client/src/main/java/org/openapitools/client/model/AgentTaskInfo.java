/*
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TaskStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Task Info
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:22.956738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AgentTaskInfo {
  public static final String SERIALIZED_NAME_RUNNABLE = "runnable";
  @SerializedName(SERIALIZED_NAME_RUNNABLE)
  private String runnable;

  public static final String SERIALIZED_NAME_TASK_ID = "taskId";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private String taskId;

  public static final String SERIALIZED_NAME_TASK_STATUS = "taskStatus";
  @SerializedName(SERIALIZED_NAME_TASK_STATUS)
  private TaskStatus taskStatus;

  public AgentTaskInfo() {
  }

  public AgentTaskInfo runnable(String runnable) {
    this.runnable = runnable;
    return this;
  }

  /**
   * The highest index of a runnable started by the agent for this task. The runnables are indexed from 1. Value 0 is undefined.
   * @return runnable
   */
  @javax.annotation.Nullable
  public String getRunnable() {
    return runnable;
  }

  public void setRunnable(String runnable) {
    this.runnable = runnable;
  }


  public AgentTaskInfo taskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

  /**
   * ID of the Task
   * @return taskId
   */
  @javax.annotation.Nullable
  public String getTaskId() {
    return taskId;
  }

  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }


  public AgentTaskInfo taskStatus(TaskStatus taskStatus) {
    this.taskStatus = taskStatus;
    return this;
  }

  /**
   * Get taskStatus
   * @return taskStatus
   */
  @javax.annotation.Nullable
  public TaskStatus getTaskStatus() {
    return taskStatus;
  }

  public void setTaskStatus(TaskStatus taskStatus) {
    this.taskStatus = taskStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgentTaskInfo agentTaskInfo = (AgentTaskInfo) o;
    return Objects.equals(this.runnable, agentTaskInfo.runnable) &&
        Objects.equals(this.taskId, agentTaskInfo.taskId) &&
        Objects.equals(this.taskStatus, agentTaskInfo.taskStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(runnable, taskId, taskStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgentTaskInfo {\n");
    sb.append("    runnable: ").append(toIndentedString(runnable)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    taskStatus: ").append(toIndentedString(taskStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("runnable");
    openapiFields.add("taskId");
    openapiFields.add("taskStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AgentTaskInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AgentTaskInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgentTaskInfo is not found in the empty JSON string", AgentTaskInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AgentTaskInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgentTaskInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("runnable") != null && !jsonObj.get("runnable").isJsonNull()) && !jsonObj.get("runnable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runnable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runnable").toString()));
      }
      if ((jsonObj.get("taskId") != null && !jsonObj.get("taskId").isJsonNull()) && !jsonObj.get("taskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskId").toString()));
      }
      // validate the optional field `taskStatus`
      if (jsonObj.get("taskStatus") != null && !jsonObj.get("taskStatus").isJsonNull()) {
        TaskStatus.validateJsonElement(jsonObj.get("taskStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgentTaskInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgentTaskInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgentTaskInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgentTaskInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AgentTaskInfo>() {
           @Override
           public void write(JsonWriter out, AgentTaskInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgentTaskInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AgentTaskInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AgentTaskInfo
   * @throws IOException if the JSON string is invalid with respect to AgentTaskInfo
   */
  public static AgentTaskInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgentTaskInfo.class);
  }

  /**
   * Convert an instance of AgentTaskInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

