/*
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AgentTaskSpec;
import org.openapitools.client.model.TaskSpec;
import org.openapitools.client.model.TaskStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TODO(b/182501497) The message needs to be redefined when the Agent API server updates data in storage per the backend design.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:22.956738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AgentTask {
  public static final String SERIALIZED_NAME_AGENT_TASK_SPEC = "agentTaskSpec";
  @SerializedName(SERIALIZED_NAME_AGENT_TASK_SPEC)
  private AgentTaskSpec agentTaskSpec;

  /**
   * The intended state of the task.
   */
  @JsonAdapter(IntendedStateEnum.Adapter.class)
  public enum IntendedStateEnum {
    INTENDED_STATE_UNSPECIFIED("INTENDED_STATE_UNSPECIFIED"),
    
    ASSIGNED("ASSIGNED"),
    
    CANCELLED("CANCELLED"),
    
    DELETED("DELETED");

    private String value;

    IntendedStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntendedStateEnum fromValue(String value) {
      for (IntendedStateEnum b : IntendedStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IntendedStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntendedStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntendedStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IntendedStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IntendedStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTENDED_STATE = "intendedState";
  @SerializedName(SERIALIZED_NAME_INTENDED_STATE)
  private IntendedStateEnum intendedState;

  public static final String SERIALIZED_NAME_REACHED_BARRIER = "reachedBarrier";
  @SerializedName(SERIALIZED_NAME_REACHED_BARRIER)
  private String reachedBarrier;

  public static final String SERIALIZED_NAME_SPEC = "spec";
  @SerializedName(SERIALIZED_NAME_SPEC)
  private TaskSpec spec;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TaskStatus status;

  public static final String SERIALIZED_NAME_TASK = "task";
  @SerializedName(SERIALIZED_NAME_TASK)
  private String task;

  /**
   * TaskSource represents the source of the task.
   */
  @JsonAdapter(TaskSourceEnum.Adapter.class)
  public enum TaskSourceEnum {
    TASK_SOURCE_UNSPECIFIED("TASK_SOURCE_UNSPECIFIED"),
    
    BATCH_INTERNAL("BATCH_INTERNAL"),
    
    USER("USER");

    private String value;

    TaskSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TaskSourceEnum fromValue(String value) {
      for (TaskSourceEnum b : TaskSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TaskSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaskSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TaskSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TaskSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TaskSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TASK_SOURCE = "taskSource";
  @SerializedName(SERIALIZED_NAME_TASK_SOURCE)
  private TaskSourceEnum taskSource;

  public AgentTask() {
  }

  public AgentTask agentTaskSpec(AgentTaskSpec agentTaskSpec) {
    this.agentTaskSpec = agentTaskSpec;
    return this;
  }

  /**
   * Get agentTaskSpec
   * @return agentTaskSpec
   */
  @javax.annotation.Nullable
  public AgentTaskSpec getAgentTaskSpec() {
    return agentTaskSpec;
  }

  public void setAgentTaskSpec(AgentTaskSpec agentTaskSpec) {
    this.agentTaskSpec = agentTaskSpec;
  }


  public AgentTask intendedState(IntendedStateEnum intendedState) {
    this.intendedState = intendedState;
    return this;
  }

  /**
   * The intended state of the task.
   * @return intendedState
   */
  @javax.annotation.Nullable
  public IntendedStateEnum getIntendedState() {
    return intendedState;
  }

  public void setIntendedState(IntendedStateEnum intendedState) {
    this.intendedState = intendedState;
  }


  public AgentTask reachedBarrier(String reachedBarrier) {
    this.reachedBarrier = reachedBarrier;
    return this;
  }

  /**
   * The highest barrier reached by all tasks in the task&#39;s TaskGroup.
   * @return reachedBarrier
   */
  @javax.annotation.Nullable
  public String getReachedBarrier() {
    return reachedBarrier;
  }

  public void setReachedBarrier(String reachedBarrier) {
    this.reachedBarrier = reachedBarrier;
  }


  public AgentTask spec(TaskSpec spec) {
    this.spec = spec;
    return this;
  }

  /**
   * Get spec
   * @return spec
   */
  @javax.annotation.Nullable
  public TaskSpec getSpec() {
    return spec;
  }

  public void setSpec(TaskSpec spec) {
    this.spec = spec;
  }


  public AgentTask status(TaskStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public TaskStatus getStatus() {
    return status;
  }

  public void setStatus(TaskStatus status) {
    this.status = status;
  }


  public AgentTask task(String task) {
    this.task = task;
    return this;
  }

  /**
   * Task name.
   * @return task
   */
  @javax.annotation.Nullable
  public String getTask() {
    return task;
  }

  public void setTask(String task) {
    this.task = task;
  }


  public AgentTask taskSource(TaskSourceEnum taskSource) {
    this.taskSource = taskSource;
    return this;
  }

  /**
   * TaskSource represents the source of the task.
   * @return taskSource
   */
  @javax.annotation.Nullable
  public TaskSourceEnum getTaskSource() {
    return taskSource;
  }

  public void setTaskSource(TaskSourceEnum taskSource) {
    this.taskSource = taskSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgentTask agentTask = (AgentTask) o;
    return Objects.equals(this.agentTaskSpec, agentTask.agentTaskSpec) &&
        Objects.equals(this.intendedState, agentTask.intendedState) &&
        Objects.equals(this.reachedBarrier, agentTask.reachedBarrier) &&
        Objects.equals(this.spec, agentTask.spec) &&
        Objects.equals(this.status, agentTask.status) &&
        Objects.equals(this.task, agentTask.task) &&
        Objects.equals(this.taskSource, agentTask.taskSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentTaskSpec, intendedState, reachedBarrier, spec, status, task, taskSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgentTask {\n");
    sb.append("    agentTaskSpec: ").append(toIndentedString(agentTaskSpec)).append("\n");
    sb.append("    intendedState: ").append(toIndentedString(intendedState)).append("\n");
    sb.append("    reachedBarrier: ").append(toIndentedString(reachedBarrier)).append("\n");
    sb.append("    spec: ").append(toIndentedString(spec)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    task: ").append(toIndentedString(task)).append("\n");
    sb.append("    taskSource: ").append(toIndentedString(taskSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentTaskSpec");
    openapiFields.add("intendedState");
    openapiFields.add("reachedBarrier");
    openapiFields.add("spec");
    openapiFields.add("status");
    openapiFields.add("task");
    openapiFields.add("taskSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AgentTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AgentTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgentTask is not found in the empty JSON string", AgentTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AgentTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgentTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `agentTaskSpec`
      if (jsonObj.get("agentTaskSpec") != null && !jsonObj.get("agentTaskSpec").isJsonNull()) {
        AgentTaskSpec.validateJsonElement(jsonObj.get("agentTaskSpec"));
      }
      if ((jsonObj.get("intendedState") != null && !jsonObj.get("intendedState").isJsonNull()) && !jsonObj.get("intendedState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intendedState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intendedState").toString()));
      }
      // validate the optional field `intendedState`
      if (jsonObj.get("intendedState") != null && !jsonObj.get("intendedState").isJsonNull()) {
        IntendedStateEnum.validateJsonElement(jsonObj.get("intendedState"));
      }
      if ((jsonObj.get("reachedBarrier") != null && !jsonObj.get("reachedBarrier").isJsonNull()) && !jsonObj.get("reachedBarrier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reachedBarrier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reachedBarrier").toString()));
      }
      // validate the optional field `spec`
      if (jsonObj.get("spec") != null && !jsonObj.get("spec").isJsonNull()) {
        TaskSpec.validateJsonElement(jsonObj.get("spec"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        TaskStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("task") != null && !jsonObj.get("task").isJsonNull()) && !jsonObj.get("task").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task").toString()));
      }
      if ((jsonObj.get("taskSource") != null && !jsonObj.get("taskSource").isJsonNull()) && !jsonObj.get("taskSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskSource").toString()));
      }
      // validate the optional field `taskSource`
      if (jsonObj.get("taskSource") != null && !jsonObj.get("taskSource").isJsonNull()) {
        TaskSourceEnum.validateJsonElement(jsonObj.get("taskSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgentTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgentTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgentTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgentTask.class));

       return (TypeAdapter<T>) new TypeAdapter<AgentTask>() {
           @Override
           public void write(JsonWriter out, AgentTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgentTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AgentTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AgentTask
   * @throws IOException if the JSON string is invalid with respect to AgentTask
   */
  public static AgentTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgentTask.class);
  }

  /**
   * Convert an instance of AgentTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

