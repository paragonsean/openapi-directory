/*
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VM timing information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:22.956738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AgentTimingInfo {
  public static final String SERIALIZED_NAME_AGENT_STARTUP_TIME = "agentStartupTime";
  @SerializedName(SERIALIZED_NAME_AGENT_STARTUP_TIME)
  private String agentStartupTime;

  public static final String SERIALIZED_NAME_BOOT_TIME = "bootTime";
  @SerializedName(SERIALIZED_NAME_BOOT_TIME)
  private String bootTime;

  public static final String SERIALIZED_NAME_SCRIPT_STARTUP_TIME = "scriptStartupTime";
  @SerializedName(SERIALIZED_NAME_SCRIPT_STARTUP_TIME)
  private String scriptStartupTime;

  public AgentTimingInfo() {
  }

  public AgentTimingInfo agentStartupTime(String agentStartupTime) {
    this.agentStartupTime = agentStartupTime;
    return this;
  }

  /**
   * Agent startup time
   * @return agentStartupTime
   */
  @javax.annotation.Nullable
  public String getAgentStartupTime() {
    return agentStartupTime;
  }

  public void setAgentStartupTime(String agentStartupTime) {
    this.agentStartupTime = agentStartupTime;
  }


  public AgentTimingInfo bootTime(String bootTime) {
    this.bootTime = bootTime;
    return this;
  }

  /**
   * Boot timestamp of the VM OS
   * @return bootTime
   */
  @javax.annotation.Nullable
  public String getBootTime() {
    return bootTime;
  }

  public void setBootTime(String bootTime) {
    this.bootTime = bootTime;
  }


  public AgentTimingInfo scriptStartupTime(String scriptStartupTime) {
    this.scriptStartupTime = scriptStartupTime;
    return this;
  }

  /**
   * Startup time of the Batch VM script.
   * @return scriptStartupTime
   */
  @javax.annotation.Nullable
  public String getScriptStartupTime() {
    return scriptStartupTime;
  }

  public void setScriptStartupTime(String scriptStartupTime) {
    this.scriptStartupTime = scriptStartupTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgentTimingInfo agentTimingInfo = (AgentTimingInfo) o;
    return Objects.equals(this.agentStartupTime, agentTimingInfo.agentStartupTime) &&
        Objects.equals(this.bootTime, agentTimingInfo.bootTime) &&
        Objects.equals(this.scriptStartupTime, agentTimingInfo.scriptStartupTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentStartupTime, bootTime, scriptStartupTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgentTimingInfo {\n");
    sb.append("    agentStartupTime: ").append(toIndentedString(agentStartupTime)).append("\n");
    sb.append("    bootTime: ").append(toIndentedString(bootTime)).append("\n");
    sb.append("    scriptStartupTime: ").append(toIndentedString(scriptStartupTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentStartupTime");
    openapiFields.add("bootTime");
    openapiFields.add("scriptStartupTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AgentTimingInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AgentTimingInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgentTimingInfo is not found in the empty JSON string", AgentTimingInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AgentTimingInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgentTimingInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agentStartupTime") != null && !jsonObj.get("agentStartupTime").isJsonNull()) && !jsonObj.get("agentStartupTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentStartupTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentStartupTime").toString()));
      }
      if ((jsonObj.get("bootTime") != null && !jsonObj.get("bootTime").isJsonNull()) && !jsonObj.get("bootTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bootTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bootTime").toString()));
      }
      if ((jsonObj.get("scriptStartupTime") != null && !jsonObj.get("scriptStartupTime").isJsonNull()) && !jsonObj.get("scriptStartupTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scriptStartupTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scriptStartupTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgentTimingInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgentTimingInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgentTimingInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgentTimingInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AgentTimingInfo>() {
           @Override
           public void write(JsonWriter out, AgentTimingInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgentTimingInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AgentTimingInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AgentTimingInfo
   * @throws IOException if the JSON string is invalid with respect to AgentTimingInfo
   */
  public static AgentTimingInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgentTimingInfo.class);
  }

  /**
   * Convert an instance of AgentTimingInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

