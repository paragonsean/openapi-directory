/*
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AgentContainer;
import org.openapitools.client.model.AgentEnvironment;
import org.openapitools.client.model.AgentScript;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AgentTaskRunnable is the Runnable representation between Agent and CLH communication.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:22.956738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AgentTaskRunnable {
  public static final String SERIALIZED_NAME_ALWAYS_RUN = "alwaysRun";
  @SerializedName(SERIALIZED_NAME_ALWAYS_RUN)
  private Boolean alwaysRun;

  public static final String SERIALIZED_NAME_BACKGROUND = "background";
  @SerializedName(SERIALIZED_NAME_BACKGROUND)
  private Boolean background;

  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private AgentContainer container;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private AgentEnvironment environment;

  public static final String SERIALIZED_NAME_IGNORE_EXIT_STATUS = "ignoreExitStatus";
  @SerializedName(SERIALIZED_NAME_IGNORE_EXIT_STATUS)
  private Boolean ignoreExitStatus;

  public static final String SERIALIZED_NAME_SCRIPT = "script";
  @SerializedName(SERIALIZED_NAME_SCRIPT)
  private AgentScript script;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public AgentTaskRunnable() {
  }

  public AgentTaskRunnable alwaysRun(Boolean alwaysRun) {
    this.alwaysRun = alwaysRun;
    return this;
  }

  /**
   * By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task&#39;s overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables.
   * @return alwaysRun
   */
  @javax.annotation.Nullable
  public Boolean getAlwaysRun() {
    return alwaysRun;
  }

  public void setAlwaysRun(Boolean alwaysRun) {
    this.alwaysRun = alwaysRun;
  }


  public AgentTaskRunnable background(Boolean background) {
    this.background = background;
    return this;
  }

  /**
   * This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).
   * @return background
   */
  @javax.annotation.Nullable
  public Boolean getBackground() {
    return background;
  }

  public void setBackground(Boolean background) {
    this.background = background;
  }


  public AgentTaskRunnable container(AgentContainer container) {
    this.container = container;
    return this;
  }

  /**
   * Get container
   * @return container
   */
  @javax.annotation.Nullable
  public AgentContainer getContainer() {
    return container;
  }

  public void setContainer(AgentContainer container) {
    this.container = container;
  }


  public AgentTaskRunnable environment(AgentEnvironment environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public AgentEnvironment getEnvironment() {
    return environment;
  }

  public void setEnvironment(AgentEnvironment environment) {
    this.environment = environment;
  }


  public AgentTaskRunnable ignoreExitStatus(Boolean ignoreExitStatus) {
    this.ignoreExitStatus = ignoreExitStatus;
    return this;
  }

  /**
   * Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.
   * @return ignoreExitStatus
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreExitStatus() {
    return ignoreExitStatus;
  }

  public void setIgnoreExitStatus(Boolean ignoreExitStatus) {
    this.ignoreExitStatus = ignoreExitStatus;
  }


  public AgentTaskRunnable script(AgentScript script) {
    this.script = script;
    return this;
  }

  /**
   * Get script
   * @return script
   */
  @javax.annotation.Nullable
  public AgentScript getScript() {
    return script;
  }

  public void setScript(AgentScript script) {
    this.script = script;
  }


  public AgentTaskRunnable timeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Timeout for this Runnable.
   * @return timeout
   */
  @javax.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }

  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgentTaskRunnable agentTaskRunnable = (AgentTaskRunnable) o;
    return Objects.equals(this.alwaysRun, agentTaskRunnable.alwaysRun) &&
        Objects.equals(this.background, agentTaskRunnable.background) &&
        Objects.equals(this.container, agentTaskRunnable.container) &&
        Objects.equals(this.environment, agentTaskRunnable.environment) &&
        Objects.equals(this.ignoreExitStatus, agentTaskRunnable.ignoreExitStatus) &&
        Objects.equals(this.script, agentTaskRunnable.script) &&
        Objects.equals(this.timeout, agentTaskRunnable.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alwaysRun, background, container, environment, ignoreExitStatus, script, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgentTaskRunnable {\n");
    sb.append("    alwaysRun: ").append(toIndentedString(alwaysRun)).append("\n");
    sb.append("    background: ").append(toIndentedString(background)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    ignoreExitStatus: ").append(toIndentedString(ignoreExitStatus)).append("\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alwaysRun");
    openapiFields.add("background");
    openapiFields.add("container");
    openapiFields.add("environment");
    openapiFields.add("ignoreExitStatus");
    openapiFields.add("script");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AgentTaskRunnable
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AgentTaskRunnable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgentTaskRunnable is not found in the empty JSON string", AgentTaskRunnable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AgentTaskRunnable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgentTaskRunnable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `container`
      if (jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) {
        AgentContainer.validateJsonElement(jsonObj.get("container"));
      }
      // validate the optional field `environment`
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        AgentEnvironment.validateJsonElement(jsonObj.get("environment"));
      }
      // validate the optional field `script`
      if (jsonObj.get("script") != null && !jsonObj.get("script").isJsonNull()) {
        AgentScript.validateJsonElement(jsonObj.get("script"));
      }
      if ((jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) && !jsonObj.get("timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgentTaskRunnable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgentTaskRunnable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgentTaskRunnable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgentTaskRunnable.class));

       return (TypeAdapter<T>) new TypeAdapter<AgentTaskRunnable>() {
           @Override
           public void write(JsonWriter out, AgentTaskRunnable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgentTaskRunnable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AgentTaskRunnable given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AgentTaskRunnable
   * @throws IOException if the JSON string is invalid with respect to AgentTaskRunnable
   */
  public static AgentTaskRunnable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgentTaskRunnable.class);
  }

  /**
   * Convert an instance of AgentTaskRunnable to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

