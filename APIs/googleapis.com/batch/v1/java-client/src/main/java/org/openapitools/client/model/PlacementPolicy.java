/*
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlacementPolicy describes a group placement policy for the VMs controlled by this AllocationPolicy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:22.956738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlacementPolicy {
  public static final String SERIALIZED_NAME_COLLOCATION = "collocation";
  @SerializedName(SERIALIZED_NAME_COLLOCATION)
  private String collocation;

  public static final String SERIALIZED_NAME_MAX_DISTANCE = "maxDistance";
  @SerializedName(SERIALIZED_NAME_MAX_DISTANCE)
  private String maxDistance;

  public PlacementPolicy() {
  }

  public PlacementPolicy collocation(String collocation) {
    this.collocation = collocation;
    return this;
  }

  /**
   * UNSPECIFIED vs. COLLOCATED (default UNSPECIFIED). Use COLLOCATED when you want VMs to be located close to each other for low network latency between the VMs. No placement policy will be generated when collocation is UNSPECIFIED.
   * @return collocation
   */
  @javax.annotation.Nullable
  public String getCollocation() {
    return collocation;
  }

  public void setCollocation(String collocation) {
    this.collocation = collocation;
  }


  public PlacementPolicy maxDistance(String maxDistance) {
    this.maxDistance = maxDistance;
    return this;
  }

  /**
   * When specified, causes the job to fail if more than max_distance logical switches are required between VMs. Batch uses the most compact possible placement of VMs even when max_distance is not specified. An explicit max_distance makes that level of compactness a strict requirement. Not yet implemented
   * @return maxDistance
   */
  @javax.annotation.Nullable
  public String getMaxDistance() {
    return maxDistance;
  }

  public void setMaxDistance(String maxDistance) {
    this.maxDistance = maxDistance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlacementPolicy placementPolicy = (PlacementPolicy) o;
    return Objects.equals(this.collocation, placementPolicy.collocation) &&
        Objects.equals(this.maxDistance, placementPolicy.maxDistance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collocation, maxDistance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlacementPolicy {\n");
    sb.append("    collocation: ").append(toIndentedString(collocation)).append("\n");
    sb.append("    maxDistance: ").append(toIndentedString(maxDistance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collocation");
    openapiFields.add("maxDistance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlacementPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlacementPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlacementPolicy is not found in the empty JSON string", PlacementPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlacementPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlacementPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("collocation") != null && !jsonObj.get("collocation").isJsonNull()) && !jsonObj.get("collocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collocation").toString()));
      }
      if ((jsonObj.get("maxDistance") != null && !jsonObj.get("maxDistance").isJsonNull()) && !jsonObj.get("maxDistance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxDistance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxDistance").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlacementPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlacementPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlacementPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlacementPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<PlacementPolicy>() {
           @Override
           public void write(JsonWriter out, PlacementPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlacementPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlacementPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlacementPolicy
   * @throws IOException if the JSON string is invalid with respect to PlacementPolicy
   */
  public static PlacementPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlacementPolicy.class);
  }

  /**
   * Convert an instance of PlacementPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

