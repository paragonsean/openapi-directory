/*
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VM Agent Metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:22.956738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AgentMetadata {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private String creator;

  public static final String SERIALIZED_NAME_IMAGE_VERSION = "imageVersion";
  @SerializedName(SERIALIZED_NAME_IMAGE_VERSION)
  private String imageVersion;

  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private String instance;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_INSTANCE_PREEMPTION_NOTICE_RECEIVED = "instancePreemptionNoticeReceived";
  @SerializedName(SERIALIZED_NAME_INSTANCE_PREEMPTION_NOTICE_RECEIVED)
  private Boolean instancePreemptionNoticeReceived;

  public static final String SERIALIZED_NAME_OS_RELEASE = "osRelease";
  @SerializedName(SERIALIZED_NAME_OS_RELEASE)
  private Map<String, String> osRelease = new HashMap<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public AgentMetadata() {
  }

  @Deprecated
  public AgentMetadata creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * When the VM agent started. Use agent_startup_time instead.
   * @return creationTime
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }

  @Deprecated
  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }


  public AgentMetadata creator(String creator) {
    this.creator = creator;
    return this;
  }

  /**
   * Full name of the entity that created this vm. For MIG, this path is: projects/{project}/regions/{region}/InstanceGroupManagers/{igm} The value is retrieved from the vm metadata key of \&quot;created-by\&quot;.
   * @return creator
   */
  @javax.annotation.Nullable
  public String getCreator() {
    return creator;
  }

  public void setCreator(String creator) {
    this.creator = creator;
  }


  public AgentMetadata imageVersion(String imageVersion) {
    this.imageVersion = imageVersion;
    return this;
  }

  /**
   * image version for the VM that this agent is installed on.
   * @return imageVersion
   */
  @javax.annotation.Nullable
  public String getImageVersion() {
    return imageVersion;
  }

  public void setImageVersion(String imageVersion) {
    this.imageVersion = imageVersion;
  }


  public AgentMetadata instance(String instance) {
    this.instance = instance;
    return this;
  }

  /**
   * GCP instance name (go/instance-name).
   * @return instance
   */
  @javax.annotation.Nullable
  public String getInstance() {
    return instance;
  }

  public void setInstance(String instance) {
    this.instance = instance;
  }


  public AgentMetadata instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * GCP instance ID (go/instance-id).
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public AgentMetadata instancePreemptionNoticeReceived(Boolean instancePreemptionNoticeReceived) {
    this.instancePreemptionNoticeReceived = instancePreemptionNoticeReceived;
    return this;
  }

  /**
   * If the GCP instance has received preemption notice.
   * @return instancePreemptionNoticeReceived
   */
  @javax.annotation.Nullable
  public Boolean getInstancePreemptionNoticeReceived() {
    return instancePreemptionNoticeReceived;
  }

  public void setInstancePreemptionNoticeReceived(Boolean instancePreemptionNoticeReceived) {
    this.instancePreemptionNoticeReceived = instancePreemptionNoticeReceived;
  }


  public AgentMetadata osRelease(Map<String, String> osRelease) {
    this.osRelease = osRelease;
    return this;
  }

  public AgentMetadata putOsReleaseItem(String key, String osReleaseItem) {
    if (this.osRelease == null) {
      this.osRelease = new HashMap<>();
    }
    this.osRelease.put(key, osReleaseItem);
    return this;
  }

  /**
   * parsed contents of /etc/os-release
   * @return osRelease
   */
  @javax.annotation.Nullable
  public Map<String, String> getOsRelease() {
    return osRelease;
  }

  public void setOsRelease(Map<String, String> osRelease) {
    this.osRelease = osRelease;
  }


  public AgentMetadata version(String version) {
    this.version = version;
    return this;
  }

  /**
   * agent binary version running on VM
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public AgentMetadata zone(String zone) {
    this.zone = zone;
    return this;
  }

  /**
   * Agent zone.
   * @return zone
   */
  @javax.annotation.Nullable
  public String getZone() {
    return zone;
  }

  public void setZone(String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgentMetadata agentMetadata = (AgentMetadata) o;
    return Objects.equals(this.creationTime, agentMetadata.creationTime) &&
        Objects.equals(this.creator, agentMetadata.creator) &&
        Objects.equals(this.imageVersion, agentMetadata.imageVersion) &&
        Objects.equals(this.instance, agentMetadata.instance) &&
        Objects.equals(this.instanceId, agentMetadata.instanceId) &&
        Objects.equals(this.instancePreemptionNoticeReceived, agentMetadata.instancePreemptionNoticeReceived) &&
        Objects.equals(this.osRelease, agentMetadata.osRelease) &&
        Objects.equals(this.version, agentMetadata.version) &&
        Objects.equals(this.zone, agentMetadata.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, creator, imageVersion, instance, instanceId, instancePreemptionNoticeReceived, osRelease, version, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgentMetadata {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    imageVersion: ").append(toIndentedString(imageVersion)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    instancePreemptionNoticeReceived: ").append(toIndentedString(instancePreemptionNoticeReceived)).append("\n");
    sb.append("    osRelease: ").append(toIndentedString(osRelease)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("creator");
    openapiFields.add("imageVersion");
    openapiFields.add("instance");
    openapiFields.add("instanceId");
    openapiFields.add("instancePreemptionNoticeReceived");
    openapiFields.add("osRelease");
    openapiFields.add("version");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AgentMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AgentMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgentMetadata is not found in the empty JSON string", AgentMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AgentMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgentMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull()) && !jsonObj.get("creator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator").toString()));
      }
      if ((jsonObj.get("imageVersion") != null && !jsonObj.get("imageVersion").isJsonNull()) && !jsonObj.get("imageVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageVersion").toString()));
      }
      if ((jsonObj.get("instance") != null && !jsonObj.get("instance").isJsonNull()) && !jsonObj.get("instance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instance").toString()));
      }
      if ((jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) && !jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) && !jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgentMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgentMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgentMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgentMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<AgentMetadata>() {
           @Override
           public void write(JsonWriter out, AgentMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgentMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AgentMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AgentMetadata
   * @throws IOException if the JSON string is invalid with respect to AgentMetadata
   */
  public static AgentMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgentMetadata.class);
  }

  /**
   * Convert an instance of AgentMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

