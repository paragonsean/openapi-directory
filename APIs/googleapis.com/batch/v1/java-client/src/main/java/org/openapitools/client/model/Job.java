/*
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AllocationPolicy;
import org.openapitools.client.model.JobNotification;
import org.openapitools.client.model.JobStatus;
import org.openapitools.client.model.LogsPolicy;
import org.openapitools.client.model.TaskGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Cloud Batch Job description.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:22.956738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Job {
  public static final String SERIALIZED_NAME_ALLOCATION_POLICY = "allocationPolicy";
  @SerializedName(SERIALIZED_NAME_ALLOCATION_POLICY)
  private AllocationPolicy allocationPolicy;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LOGS_POLICY = "logsPolicy";
  @SerializedName(SERIALIZED_NAME_LOGS_POLICY)
  private LogsPolicy logsPolicy;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private List<JobNotification> notifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private String priority;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private JobStatus status;

  public static final String SERIALIZED_NAME_TASK_GROUPS = "taskGroups";
  @SerializedName(SERIALIZED_NAME_TASK_GROUPS)
  private List<TaskGroup> taskGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Job() {
  }

  public Job(
     String createTime, 
     String name, 
     String uid, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  public Job allocationPolicy(AllocationPolicy allocationPolicy) {
    this.allocationPolicy = allocationPolicy;
    return this;
  }

  /**
   * Get allocationPolicy
   * @return allocationPolicy
   */
  @javax.annotation.Nullable
  public AllocationPolicy getAllocationPolicy() {
    return allocationPolicy;
  }

  public void setAllocationPolicy(AllocationPolicy allocationPolicy) {
    this.allocationPolicy = allocationPolicy;
  }


  /**
   * Output only. When the Job was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Job labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Job putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels for the Job. Labels could be user provided or system generated. For example, \&quot;labels\&quot;: { \&quot;department\&quot;: \&quot;finance\&quot;, \&quot;environment\&quot;: \&quot;test\&quot; } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with \&quot;goog-\&quot; or \&quot;google-\&quot; are reserved.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Job logsPolicy(LogsPolicy logsPolicy) {
    this.logsPolicy = logsPolicy;
    return this;
  }

  /**
   * Get logsPolicy
   * @return logsPolicy
   */
  @javax.annotation.Nullable
  public LogsPolicy getLogsPolicy() {
    return logsPolicy;
  }

  public void setLogsPolicy(LogsPolicy logsPolicy) {
    this.logsPolicy = logsPolicy;
  }


  /**
   * Output only. Job name. For example: \&quot;projects/123456/locations/us-central1/jobs/job01\&quot;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Job notifications(List<JobNotification> notifications) {
    this.notifications = notifications;
    return this;
  }

  public Job addNotificationsItem(JobNotification notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

  /**
   * Notification configurations.
   * @return notifications
   */
  @javax.annotation.Nullable
  public List<JobNotification> getNotifications() {
    return notifications;
  }

  public void setNotifications(List<JobNotification> notifications) {
    this.notifications = notifications;
  }


  public Job priority(String priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Priority of the Job. The valid value range is [0, 100). Default value is 0. Higher value indicates higher priority. A job with higher priority value is more likely to run earlier if all other requirements are satisfied.
   * @return priority
   */
  @javax.annotation.Nullable
  public String getPriority() {
    return priority;
  }

  public void setPriority(String priority) {
    this.priority = priority;
  }


  public Job status(JobStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public JobStatus getStatus() {
    return status;
  }

  public void setStatus(JobStatus status) {
    this.status = status;
  }


  public Job taskGroups(List<TaskGroup> taskGroups) {
    this.taskGroups = taskGroups;
    return this;
  }

  public Job addTaskGroupsItem(TaskGroup taskGroupsItem) {
    if (this.taskGroups == null) {
      this.taskGroups = new ArrayList<>();
    }
    this.taskGroups.add(taskGroupsItem);
    return this;
  }

  /**
   * Required. TaskGroups in the Job. Only one TaskGroup is supported now.
   * @return taskGroups
   */
  @javax.annotation.Nullable
  public List<TaskGroup> getTaskGroups() {
    return taskGroups;
  }

  public void setTaskGroups(List<TaskGroup> taskGroups) {
    this.taskGroups = taskGroups;
  }


  /**
   * Output only. A system generated unique ID for the Job.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. The last time the Job was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Job job = (Job) o;
    return Objects.equals(this.allocationPolicy, job.allocationPolicy) &&
        Objects.equals(this.createTime, job.createTime) &&
        Objects.equals(this.labels, job.labels) &&
        Objects.equals(this.logsPolicy, job.logsPolicy) &&
        Objects.equals(this.name, job.name) &&
        Objects.equals(this.notifications, job.notifications) &&
        Objects.equals(this.priority, job.priority) &&
        Objects.equals(this.status, job.status) &&
        Objects.equals(this.taskGroups, job.taskGroups) &&
        Objects.equals(this.uid, job.uid) &&
        Objects.equals(this.updateTime, job.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocationPolicy, createTime, labels, logsPolicy, name, notifications, priority, status, taskGroups, uid, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Job {\n");
    sb.append("    allocationPolicy: ").append(toIndentedString(allocationPolicy)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    logsPolicy: ").append(toIndentedString(logsPolicy)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taskGroups: ").append(toIndentedString(taskGroups)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocationPolicy");
    openapiFields.add("createTime");
    openapiFields.add("labels");
    openapiFields.add("logsPolicy");
    openapiFields.add("name");
    openapiFields.add("notifications");
    openapiFields.add("priority");
    openapiFields.add("status");
    openapiFields.add("taskGroups");
    openapiFields.add("uid");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Job
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Job.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Job is not found in the empty JSON string", Job.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Job.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Job` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `allocationPolicy`
      if (jsonObj.get("allocationPolicy") != null && !jsonObj.get("allocationPolicy").isJsonNull()) {
        AllocationPolicy.validateJsonElement(jsonObj.get("allocationPolicy"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `logsPolicy`
      if (jsonObj.get("logsPolicy") != null && !jsonObj.get("logsPolicy").isJsonNull()) {
        LogsPolicy.validateJsonElement(jsonObj.get("logsPolicy"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("notifications") != null && !jsonObj.get("notifications").isJsonNull()) {
        JsonArray jsonArraynotifications = jsonObj.getAsJsonArray("notifications");
        if (jsonArraynotifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notifications` to be an array in the JSON string but got `%s`", jsonObj.get("notifications").toString()));
          }

          // validate the optional field `notifications` (array)
          for (int i = 0; i < jsonArraynotifications.size(); i++) {
            JobNotification.validateJsonElement(jsonArraynotifications.get(i));
          };
        }
      }
      if ((jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) && !jsonObj.get("priority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priority").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        JobStatus.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("taskGroups") != null && !jsonObj.get("taskGroups").isJsonNull()) {
        JsonArray jsonArraytaskGroups = jsonObj.getAsJsonArray("taskGroups");
        if (jsonArraytaskGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taskGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taskGroups` to be an array in the JSON string but got `%s`", jsonObj.get("taskGroups").toString()));
          }

          // validate the optional field `taskGroups` (array)
          for (int i = 0; i < jsonArraytaskGroups.size(); i++) {
            TaskGroup.validateJsonElement(jsonArraytaskGroups.get(i));
          };
        }
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Job.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Job' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Job> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Job.class));

       return (TypeAdapter<T>) new TypeAdapter<Job>() {
           @Override
           public void write(JsonWriter out, Job value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Job read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Job given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Job
   * @throws IOException if the JSON string is invalid with respect to Job
   */
  public static Job fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Job.class);
  }

  /**
   * Convert an instance of Job to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

