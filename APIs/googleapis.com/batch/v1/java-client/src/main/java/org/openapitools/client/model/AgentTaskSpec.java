/*
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AgentEnvironment;
import org.openapitools.client.model.AgentTaskRunnable;
import org.openapitools.client.model.AgentTaskUserAccount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AgentTaskSpec is the user&#39;s TaskSpec representation between Agent and CLH communication.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:22.956738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AgentTaskSpec {
  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private AgentEnvironment environment;

  public static final String SERIALIZED_NAME_MAX_RUN_DURATION = "maxRunDuration";
  @SerializedName(SERIALIZED_NAME_MAX_RUN_DURATION)
  private String maxRunDuration;

  public static final String SERIALIZED_NAME_RUNNABLES = "runnables";
  @SerializedName(SERIALIZED_NAME_RUNNABLES)
  private List<AgentTaskRunnable> runnables = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_ACCOUNT = "userAccount";
  @SerializedName(SERIALIZED_NAME_USER_ACCOUNT)
  private AgentTaskUserAccount userAccount;

  public AgentTaskSpec() {
  }

  public AgentTaskSpec environment(AgentEnvironment environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public AgentEnvironment getEnvironment() {
    return environment;
  }

  public void setEnvironment(AgentEnvironment environment) {
    this.environment = environment;
  }


  public AgentTaskSpec maxRunDuration(String maxRunDuration) {
    this.maxRunDuration = maxRunDuration;
    return this;
  }

  /**
   * Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.
   * @return maxRunDuration
   */
  @javax.annotation.Nullable
  public String getMaxRunDuration() {
    return maxRunDuration;
  }

  public void setMaxRunDuration(String maxRunDuration) {
    this.maxRunDuration = maxRunDuration;
  }


  public AgentTaskSpec runnables(List<AgentTaskRunnable> runnables) {
    this.runnables = runnables;
    return this;
  }

  public AgentTaskSpec addRunnablesItem(AgentTaskRunnable runnablesItem) {
    if (this.runnables == null) {
      this.runnables = new ArrayList<>();
    }
    this.runnables.add(runnablesItem);
    return this;
  }

  /**
   * AgentTaskRunnable is runanbles that will be executed on the agent.
   * @return runnables
   */
  @javax.annotation.Nullable
  public List<AgentTaskRunnable> getRunnables() {
    return runnables;
  }

  public void setRunnables(List<AgentTaskRunnable> runnables) {
    this.runnables = runnables;
  }


  public AgentTaskSpec userAccount(AgentTaskUserAccount userAccount) {
    this.userAccount = userAccount;
    return this;
  }

  /**
   * Get userAccount
   * @return userAccount
   */
  @javax.annotation.Nullable
  public AgentTaskUserAccount getUserAccount() {
    return userAccount;
  }

  public void setUserAccount(AgentTaskUserAccount userAccount) {
    this.userAccount = userAccount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgentTaskSpec agentTaskSpec = (AgentTaskSpec) o;
    return Objects.equals(this.environment, agentTaskSpec.environment) &&
        Objects.equals(this.maxRunDuration, agentTaskSpec.maxRunDuration) &&
        Objects.equals(this.runnables, agentTaskSpec.runnables) &&
        Objects.equals(this.userAccount, agentTaskSpec.userAccount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(environment, maxRunDuration, runnables, userAccount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgentTaskSpec {\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    maxRunDuration: ").append(toIndentedString(maxRunDuration)).append("\n");
    sb.append("    runnables: ").append(toIndentedString(runnables)).append("\n");
    sb.append("    userAccount: ").append(toIndentedString(userAccount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("environment");
    openapiFields.add("maxRunDuration");
    openapiFields.add("runnables");
    openapiFields.add("userAccount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AgentTaskSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AgentTaskSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgentTaskSpec is not found in the empty JSON string", AgentTaskSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AgentTaskSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgentTaskSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `environment`
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) {
        AgentEnvironment.validateJsonElement(jsonObj.get("environment"));
      }
      if ((jsonObj.get("maxRunDuration") != null && !jsonObj.get("maxRunDuration").isJsonNull()) && !jsonObj.get("maxRunDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxRunDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxRunDuration").toString()));
      }
      if (jsonObj.get("runnables") != null && !jsonObj.get("runnables").isJsonNull()) {
        JsonArray jsonArrayrunnables = jsonObj.getAsJsonArray("runnables");
        if (jsonArrayrunnables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("runnables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `runnables` to be an array in the JSON string but got `%s`", jsonObj.get("runnables").toString()));
          }

          // validate the optional field `runnables` (array)
          for (int i = 0; i < jsonArrayrunnables.size(); i++) {
            AgentTaskRunnable.validateJsonElement(jsonArrayrunnables.get(i));
          };
        }
      }
      // validate the optional field `userAccount`
      if (jsonObj.get("userAccount") != null && !jsonObj.get("userAccount").isJsonNull()) {
        AgentTaskUserAccount.validateJsonElement(jsonObj.get("userAccount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgentTaskSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgentTaskSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgentTaskSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgentTaskSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<AgentTaskSpec>() {
           @Override
           public void write(JsonWriter out, AgentTaskSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgentTaskSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AgentTaskSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AgentTaskSpec
   * @throws IOException if the JSON string is invalid with respect to AgentTaskSpec
   */
  public static AgentTaskSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgentTaskSpec.class);
  }

  /**
   * Convert an instance of AgentTaskSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

