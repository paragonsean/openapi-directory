/*
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InstancePolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InstancePolicyOrTemplate lets you define the type of resources to use for this job either with an InstancePolicy or an instance template. If undefined, Batch picks the type of VM to use and doesn&#39;t include optional VM resources such as GPUs and extra disks.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:22.956738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstancePolicyOrTemplate {
  public static final String SERIALIZED_NAME_INSTALL_GPU_DRIVERS = "installGpuDrivers";
  @SerializedName(SERIALIZED_NAME_INSTALL_GPU_DRIVERS)
  private Boolean installGpuDrivers;

  public static final String SERIALIZED_NAME_INSTANCE_TEMPLATE = "instanceTemplate";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TEMPLATE)
  private String instanceTemplate;

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private InstancePolicy policy;

  public InstancePolicyOrTemplate() {
  }

  public InstancePolicyOrTemplate installGpuDrivers(Boolean installGpuDrivers) {
    this.installGpuDrivers = installGpuDrivers;
    return this;
  }

  /**
   * Set this field true if users want Batch to help fetch drivers from a third party location and install them for GPUs specified in policy.accelerators or instance_template on their behalf. Default is false. For Container-Optimized Image cases, Batch will install the accelerator driver following milestones of https://cloud.google.com/container-optimized-os/docs/release-notes. For non Container-Optimized Image cases, following https://github.com/GoogleCloudPlatform/compute-gpu-installation/blob/main/linux/install_gpu_driver.py.
   * @return installGpuDrivers
   */
  @javax.annotation.Nullable
  public Boolean getInstallGpuDrivers() {
    return installGpuDrivers;
  }

  public void setInstallGpuDrivers(Boolean installGpuDrivers) {
    this.installGpuDrivers = installGpuDrivers;
  }


  public InstancePolicyOrTemplate instanceTemplate(String instanceTemplate) {
    this.instanceTemplate = instanceTemplate;
    return this;
  }

  /**
   * Name of an instance template used to create VMs. Named the field as &#39;instance_template&#39; instead of &#39;template&#39; to avoid c++ keyword conflict.
   * @return instanceTemplate
   */
  @javax.annotation.Nullable
  public String getInstanceTemplate() {
    return instanceTemplate;
  }

  public void setInstanceTemplate(String instanceTemplate) {
    this.instanceTemplate = instanceTemplate;
  }


  public InstancePolicyOrTemplate policy(InstancePolicy policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Get policy
   * @return policy
   */
  @javax.annotation.Nullable
  public InstancePolicy getPolicy() {
    return policy;
  }

  public void setPolicy(InstancePolicy policy) {
    this.policy = policy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstancePolicyOrTemplate instancePolicyOrTemplate = (InstancePolicyOrTemplate) o;
    return Objects.equals(this.installGpuDrivers, instancePolicyOrTemplate.installGpuDrivers) &&
        Objects.equals(this.instanceTemplate, instancePolicyOrTemplate.instanceTemplate) &&
        Objects.equals(this.policy, instancePolicyOrTemplate.policy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(installGpuDrivers, instanceTemplate, policy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstancePolicyOrTemplate {\n");
    sb.append("    installGpuDrivers: ").append(toIndentedString(installGpuDrivers)).append("\n");
    sb.append("    instanceTemplate: ").append(toIndentedString(instanceTemplate)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("installGpuDrivers");
    openapiFields.add("instanceTemplate");
    openapiFields.add("policy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstancePolicyOrTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstancePolicyOrTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstancePolicyOrTemplate is not found in the empty JSON string", InstancePolicyOrTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstancePolicyOrTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstancePolicyOrTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("instanceTemplate") != null && !jsonObj.get("instanceTemplate").isJsonNull()) && !jsonObj.get("instanceTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceTemplate").toString()));
      }
      // validate the optional field `policy`
      if (jsonObj.get("policy") != null && !jsonObj.get("policy").isJsonNull()) {
        InstancePolicy.validateJsonElement(jsonObj.get("policy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstancePolicyOrTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstancePolicyOrTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstancePolicyOrTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstancePolicyOrTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<InstancePolicyOrTemplate>() {
           @Override
           public void write(JsonWriter out, InstancePolicyOrTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstancePolicyOrTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstancePolicyOrTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstancePolicyOrTemplate
   * @throws IOException if the JSON string is invalid with respect to InstancePolicyOrTemplate
   */
  public static InstancePolicyOrTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstancePolicyOrTemplate.class);
  }

  /**
   * Convert an instance of InstancePolicyOrTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

