/*
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Environment;
import org.openapitools.client.model.TaskSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A TaskGroup defines one or more Tasks that all share the same TaskSpec.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:22.956738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaskGroup {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARALLELISM = "parallelism";
  @SerializedName(SERIALIZED_NAME_PARALLELISM)
  private String parallelism;

  public static final String SERIALIZED_NAME_PERMISSIVE_SSH = "permissiveSsh";
  @SerializedName(SERIALIZED_NAME_PERMISSIVE_SSH)
  private Boolean permissiveSsh;

  public static final String SERIALIZED_NAME_REQUIRE_HOSTS_FILE = "requireHostsFile";
  @SerializedName(SERIALIZED_NAME_REQUIRE_HOSTS_FILE)
  private Boolean requireHostsFile;

  public static final String SERIALIZED_NAME_RUN_AS_NON_ROOT = "runAsNonRoot";
  @SerializedName(SERIALIZED_NAME_RUN_AS_NON_ROOT)
  private Boolean runAsNonRoot;

  /**
   * Scheduling policy for Tasks in the TaskGroup. The default value is AS_SOON_AS_POSSIBLE.
   */
  @JsonAdapter(SchedulingPolicyEnum.Adapter.class)
  public enum SchedulingPolicyEnum {
    SCHEDULING_POLICY_UNSPECIFIED("SCHEDULING_POLICY_UNSPECIFIED"),
    
    AS_SOON_AS_POSSIBLE("AS_SOON_AS_POSSIBLE"),
    
    IN_ORDER("IN_ORDER");

    private String value;

    SchedulingPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SchedulingPolicyEnum fromValue(String value) {
      for (SchedulingPolicyEnum b : SchedulingPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SchedulingPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SchedulingPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SchedulingPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SchedulingPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SchedulingPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEDULING_POLICY = "schedulingPolicy";
  @SerializedName(SERIALIZED_NAME_SCHEDULING_POLICY)
  private SchedulingPolicyEnum schedulingPolicy;

  public static final String SERIALIZED_NAME_TASK_COUNT = "taskCount";
  @SerializedName(SERIALIZED_NAME_TASK_COUNT)
  private String taskCount;

  public static final String SERIALIZED_NAME_TASK_COUNT_PER_NODE = "taskCountPerNode";
  @SerializedName(SERIALIZED_NAME_TASK_COUNT_PER_NODE)
  private String taskCountPerNode;

  public static final String SERIALIZED_NAME_TASK_ENVIRONMENTS = "taskEnvironments";
  @SerializedName(SERIALIZED_NAME_TASK_ENVIRONMENTS)
  private List<Environment> taskEnvironments = new ArrayList<>();

  public static final String SERIALIZED_NAME_TASK_SPEC = "taskSpec";
  @SerializedName(SERIALIZED_NAME_TASK_SPEC)
  private TaskSpec taskSpec;

  public TaskGroup() {
  }

  public TaskGroup(
     String name
  ) {
    this();
    this.name = name;
  }

  /**
   * Output only. TaskGroup name. The system generates this field based on parent Job name. For example: \&quot;projects/123456/locations/us-west1/jobs/job01/taskGroups/group01\&quot;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public TaskGroup parallelism(String parallelism) {
    this.parallelism = parallelism;
    return this;
  }

  /**
   * Max number of tasks that can run in parallel. Default to min(task_count, parallel tasks per job limit). See: [Job Limits](https://cloud.google.com/batch/quotas#job_limits). Field parallelism must be 1 if the scheduling_policy is IN_ORDER.
   * @return parallelism
   */
  @javax.annotation.Nullable
  public String getParallelism() {
    return parallelism;
  }

  public void setParallelism(String parallelism) {
    this.parallelism = parallelism;
  }


  public TaskGroup permissiveSsh(Boolean permissiveSsh) {
    this.permissiveSsh = permissiveSsh;
    return this;
  }

  /**
   * When true, Batch will configure SSH to allow passwordless login between VMs running the Batch tasks in the same TaskGroup.
   * @return permissiveSsh
   */
  @javax.annotation.Nullable
  public Boolean getPermissiveSsh() {
    return permissiveSsh;
  }

  public void setPermissiveSsh(Boolean permissiveSsh) {
    this.permissiveSsh = permissiveSsh;
  }


  public TaskGroup requireHostsFile(Boolean requireHostsFile) {
    this.requireHostsFile = requireHostsFile;
    return this;
  }

  /**
   * When true, Batch will populate a file with a list of all VMs assigned to the TaskGroup and set the BATCH_HOSTS_FILE environment variable to the path of that file. Defaults to false. The host file supports up to 1000 VMs.
   * @return requireHostsFile
   */
  @javax.annotation.Nullable
  public Boolean getRequireHostsFile() {
    return requireHostsFile;
  }

  public void setRequireHostsFile(Boolean requireHostsFile) {
    this.requireHostsFile = requireHostsFile;
  }


  public TaskGroup runAsNonRoot(Boolean runAsNonRoot) {
    this.runAsNonRoot = runAsNonRoot;
    return this;
  }

  /**
   * Optional. If not set or set to false, Batch uses the root user to execute runnables. If set to true, Batch runs the runnables using a non-root user. Currently, the non-root user Batch used is generated by OS Login. For more information, see [About OS Login](https://cloud.google.com/compute/docs/oslogin).
   * @return runAsNonRoot
   */
  @javax.annotation.Nullable
  public Boolean getRunAsNonRoot() {
    return runAsNonRoot;
  }

  public void setRunAsNonRoot(Boolean runAsNonRoot) {
    this.runAsNonRoot = runAsNonRoot;
  }


  public TaskGroup schedulingPolicy(SchedulingPolicyEnum schedulingPolicy) {
    this.schedulingPolicy = schedulingPolicy;
    return this;
  }

  /**
   * Scheduling policy for Tasks in the TaskGroup. The default value is AS_SOON_AS_POSSIBLE.
   * @return schedulingPolicy
   */
  @javax.annotation.Nullable
  public SchedulingPolicyEnum getSchedulingPolicy() {
    return schedulingPolicy;
  }

  public void setSchedulingPolicy(SchedulingPolicyEnum schedulingPolicy) {
    this.schedulingPolicy = schedulingPolicy;
  }


  public TaskGroup taskCount(String taskCount) {
    this.taskCount = taskCount;
    return this;
  }

  /**
   * Number of Tasks in the TaskGroup. Default is 1.
   * @return taskCount
   */
  @javax.annotation.Nullable
  public String getTaskCount() {
    return taskCount;
  }

  public void setTaskCount(String taskCount) {
    this.taskCount = taskCount;
  }


  public TaskGroup taskCountPerNode(String taskCountPerNode) {
    this.taskCountPerNode = taskCountPerNode;
    return this;
  }

  /**
   * Max number of tasks that can be run on a VM at the same time. If not specified, the system will decide a value based on available compute resources on a VM and task requirements.
   * @return taskCountPerNode
   */
  @javax.annotation.Nullable
  public String getTaskCountPerNode() {
    return taskCountPerNode;
  }

  public void setTaskCountPerNode(String taskCountPerNode) {
    this.taskCountPerNode = taskCountPerNode;
  }


  public TaskGroup taskEnvironments(List<Environment> taskEnvironments) {
    this.taskEnvironments = taskEnvironments;
    return this;
  }

  public TaskGroup addTaskEnvironmentsItem(Environment taskEnvironmentsItem) {
    if (this.taskEnvironments == null) {
      this.taskEnvironments = new ArrayList<>();
    }
    this.taskEnvironments.add(taskEnvironmentsItem);
    return this;
  }

  /**
   * An array of environment variable mappings, which are passed to Tasks with matching indices. If task_environments is used then task_count should not be specified in the request (and will be ignored). Task count will be the length of task_environments. Tasks get a BATCH_TASK_INDEX and BATCH_TASK_COUNT environment variable, in addition to any environment variables set in task_environments, specifying the number of Tasks in the Task&#39;s parent TaskGroup, and the specific Task&#39;s index in the TaskGroup (0 through BATCH_TASK_COUNT - 1).
   * @return taskEnvironments
   */
  @javax.annotation.Nullable
  public List<Environment> getTaskEnvironments() {
    return taskEnvironments;
  }

  public void setTaskEnvironments(List<Environment> taskEnvironments) {
    this.taskEnvironments = taskEnvironments;
  }


  public TaskGroup taskSpec(TaskSpec taskSpec) {
    this.taskSpec = taskSpec;
    return this;
  }

  /**
   * Get taskSpec
   * @return taskSpec
   */
  @javax.annotation.Nullable
  public TaskSpec getTaskSpec() {
    return taskSpec;
  }

  public void setTaskSpec(TaskSpec taskSpec) {
    this.taskSpec = taskSpec;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskGroup taskGroup = (TaskGroup) o;
    return Objects.equals(this.name, taskGroup.name) &&
        Objects.equals(this.parallelism, taskGroup.parallelism) &&
        Objects.equals(this.permissiveSsh, taskGroup.permissiveSsh) &&
        Objects.equals(this.requireHostsFile, taskGroup.requireHostsFile) &&
        Objects.equals(this.runAsNonRoot, taskGroup.runAsNonRoot) &&
        Objects.equals(this.schedulingPolicy, taskGroup.schedulingPolicy) &&
        Objects.equals(this.taskCount, taskGroup.taskCount) &&
        Objects.equals(this.taskCountPerNode, taskGroup.taskCountPerNode) &&
        Objects.equals(this.taskEnvironments, taskGroup.taskEnvironments) &&
        Objects.equals(this.taskSpec, taskGroup.taskSpec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, parallelism, permissiveSsh, requireHostsFile, runAsNonRoot, schedulingPolicy, taskCount, taskCountPerNode, taskEnvironments, taskSpec);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskGroup {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parallelism: ").append(toIndentedString(parallelism)).append("\n");
    sb.append("    permissiveSsh: ").append(toIndentedString(permissiveSsh)).append("\n");
    sb.append("    requireHostsFile: ").append(toIndentedString(requireHostsFile)).append("\n");
    sb.append("    runAsNonRoot: ").append(toIndentedString(runAsNonRoot)).append("\n");
    sb.append("    schedulingPolicy: ").append(toIndentedString(schedulingPolicy)).append("\n");
    sb.append("    taskCount: ").append(toIndentedString(taskCount)).append("\n");
    sb.append("    taskCountPerNode: ").append(toIndentedString(taskCountPerNode)).append("\n");
    sb.append("    taskEnvironments: ").append(toIndentedString(taskEnvironments)).append("\n");
    sb.append("    taskSpec: ").append(toIndentedString(taskSpec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("parallelism");
    openapiFields.add("permissiveSsh");
    openapiFields.add("requireHostsFile");
    openapiFields.add("runAsNonRoot");
    openapiFields.add("schedulingPolicy");
    openapiFields.add("taskCount");
    openapiFields.add("taskCountPerNode");
    openapiFields.add("taskEnvironments");
    openapiFields.add("taskSpec");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskGroup is not found in the empty JSON string", TaskGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parallelism") != null && !jsonObj.get("parallelism").isJsonNull()) && !jsonObj.get("parallelism").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parallelism` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parallelism").toString()));
      }
      if ((jsonObj.get("schedulingPolicy") != null && !jsonObj.get("schedulingPolicy").isJsonNull()) && !jsonObj.get("schedulingPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedulingPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedulingPolicy").toString()));
      }
      // validate the optional field `schedulingPolicy`
      if (jsonObj.get("schedulingPolicy") != null && !jsonObj.get("schedulingPolicy").isJsonNull()) {
        SchedulingPolicyEnum.validateJsonElement(jsonObj.get("schedulingPolicy"));
      }
      if ((jsonObj.get("taskCount") != null && !jsonObj.get("taskCount").isJsonNull()) && !jsonObj.get("taskCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskCount").toString()));
      }
      if ((jsonObj.get("taskCountPerNode") != null && !jsonObj.get("taskCountPerNode").isJsonNull()) && !jsonObj.get("taskCountPerNode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskCountPerNode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskCountPerNode").toString()));
      }
      if (jsonObj.get("taskEnvironments") != null && !jsonObj.get("taskEnvironments").isJsonNull()) {
        JsonArray jsonArraytaskEnvironments = jsonObj.getAsJsonArray("taskEnvironments");
        if (jsonArraytaskEnvironments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taskEnvironments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taskEnvironments` to be an array in the JSON string but got `%s`", jsonObj.get("taskEnvironments").toString()));
          }

          // validate the optional field `taskEnvironments` (array)
          for (int i = 0; i < jsonArraytaskEnvironments.size(); i++) {
            Environment.validateJsonElement(jsonArraytaskEnvironments.get(i));
          };
        }
      }
      // validate the optional field `taskSpec`
      if (jsonObj.get("taskSpec") != null && !jsonObj.get("taskSpec").isJsonNull()) {
        TaskSpec.validateJsonElement(jsonObj.get("taskSpec"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskGroup>() {
           @Override
           public void write(JsonWriter out, TaskGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskGroup
   * @throws IOException if the JSON string is invalid with respect to TaskGroup
   */
  public static TaskGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskGroup.class);
  }

  /**
   * Convert an instance of TaskGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

