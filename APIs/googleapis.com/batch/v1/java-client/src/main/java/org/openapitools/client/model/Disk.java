/*
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A new persistent disk or a local ssd. A VM can only have one local SSD setting but multiple local SSD partitions. See https://cloud.google.com/compute/docs/disks#pdspecs and https://cloud.google.com/compute/docs/disks#localssds.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:22.956738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Disk {
  public static final String SERIALIZED_NAME_DISK_INTERFACE = "diskInterface";
  @SerializedName(SERIALIZED_NAME_DISK_INTERFACE)
  private String diskInterface;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_SIZE_GB = "sizeGb";
  @SerializedName(SERIALIZED_NAME_SIZE_GB)
  private String sizeGb;

  public static final String SERIALIZED_NAME_SNAPSHOT = "snapshot";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT)
  private String snapshot;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Disk() {
  }

  public Disk diskInterface(String diskInterface) {
    this.diskInterface = diskInterface;
    return this;
  }

  /**
   * Local SSDs are available through both \&quot;SCSI\&quot; and \&quot;NVMe\&quot; interfaces. If not indicated, \&quot;NVMe\&quot; will be the default one for local ssds. This field is ignored for persistent disks as the interface is chosen automatically. See https://cloud.google.com/compute/docs/disks/persistent-disks#choose_an_interface.
   * @return diskInterface
   */
  @javax.annotation.Nullable
  public String getDiskInterface() {
    return diskInterface;
  }

  public void setDiskInterface(String diskInterface) {
    this.diskInterface = diskInterface;
  }


  public Disk image(String image) {
    this.image = image;
    return this;
  }

  /**
   * URL for a VM image to use as the data source for this disk. For example, the following are all valid URLs: * Specify the image by its family name: projects/{project}/global/images/family/{image_family} * Specify the image version: projects/{project}/global/images/{image_version} You can also use Batch customized image in short names. The following image values are supported for a boot disk: * &#x60;batch-debian&#x60;: use Batch Debian images. * &#x60;batch-centos&#x60;: use Batch CentOS images. * &#x60;batch-cos&#x60;: use Batch Container-Optimized images. * &#x60;batch-hpc-centos&#x60;: use Batch HPC CentOS images. * &#x60;batch-hpc-rocky&#x60;: use Batch HPC Rocky Linux images.
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public Disk sizeGb(String sizeGb) {
    this.sizeGb = sizeGb;
    return this;
  }

  /**
   * Disk size in GB. **Non-Boot Disk**: If the &#x60;type&#x60; specifies a persistent disk, this field is ignored if &#x60;data_source&#x60; is set as &#x60;image&#x60; or &#x60;snapshot&#x60;. If the &#x60;type&#x60; specifies a local SSD, this field should be a multiple of 375 GB, otherwise, the final size will be the next greater multiple of 375 GB. **Boot Disk**: Batch will calculate the boot disk size based on source image and task requirements if you do not speicify the size. If both this field and the &#x60;boot_disk_mib&#x60; field in task spec&#39;s &#x60;compute_resource&#x60; are defined, Batch will only honor this field. Also, this field should be no smaller than the source disk&#39;s size when the &#x60;data_source&#x60; is set as &#x60;snapshot&#x60; or &#x60;image&#x60;. For example, if you set an image as the &#x60;data_source&#x60; field and the image&#39;s default disk size 30 GB, you can only use this field to make the disk larger or equal to 30 GB.
   * @return sizeGb
   */
  @javax.annotation.Nullable
  public String getSizeGb() {
    return sizeGb;
  }

  public void setSizeGb(String sizeGb) {
    this.sizeGb = sizeGb;
  }


  public Disk snapshot(String snapshot) {
    this.snapshot = snapshot;
    return this;
  }

  /**
   * Name of a snapshot used as the data source. Snapshot is not supported as boot disk now.
   * @return snapshot
   */
  @javax.annotation.Nullable
  public String getSnapshot() {
    return snapshot;
  }

  public void setSnapshot(String snapshot) {
    this.snapshot = snapshot;
  }


  public Disk type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Disk type as shown in &#x60;gcloud compute disk-types list&#x60;. For example, local SSD uses type \&quot;local-ssd\&quot;. Persistent disks and boot disks use \&quot;pd-balanced\&quot;, \&quot;pd-extreme\&quot;, \&quot;pd-ssd\&quot; or \&quot;pd-standard\&quot;.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Disk disk = (Disk) o;
    return Objects.equals(this.diskInterface, disk.diskInterface) &&
        Objects.equals(this.image, disk.image) &&
        Objects.equals(this.sizeGb, disk.sizeGb) &&
        Objects.equals(this.snapshot, disk.snapshot) &&
        Objects.equals(this.type, disk.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diskInterface, image, sizeGb, snapshot, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Disk {\n");
    sb.append("    diskInterface: ").append(toIndentedString(diskInterface)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    sizeGb: ").append(toIndentedString(sizeGb)).append("\n");
    sb.append("    snapshot: ").append(toIndentedString(snapshot)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("diskInterface");
    openapiFields.add("image");
    openapiFields.add("sizeGb");
    openapiFields.add("snapshot");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Disk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Disk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Disk is not found in the empty JSON string", Disk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Disk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Disk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("diskInterface") != null && !jsonObj.get("diskInterface").isJsonNull()) && !jsonObj.get("diskInterface").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskInterface` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskInterface").toString()));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("sizeGb") != null && !jsonObj.get("sizeGb").isJsonNull()) && !jsonObj.get("sizeGb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizeGb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sizeGb").toString()));
      }
      if ((jsonObj.get("snapshot") != null && !jsonObj.get("snapshot").isJsonNull()) && !jsonObj.get("snapshot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snapshot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snapshot").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Disk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Disk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Disk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Disk.class));

       return (TypeAdapter<T>) new TypeAdapter<Disk>() {
           @Override
           public void write(JsonWriter out, Disk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Disk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Disk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Disk
   * @throws IOException if the JSON string is invalid with respect to Disk
   */
  public static Disk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Disk.class);
  }

  /**
   * Convert an instance of Disk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

