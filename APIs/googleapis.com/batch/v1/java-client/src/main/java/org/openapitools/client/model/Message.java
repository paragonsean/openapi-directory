/*
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message details. Describe the conditions under which messages will be sent. If no attribute is defined, no message will be sent by default. One message should specify either the job or the task level attributes, but not both. For example, job level: JOB_STATE_CHANGED and/or a specified new_job_state; task level: TASK_STATE_CHANGED and/or a specified new_task_state.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:22.956738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Message {
  /**
   * The new job state.
   */
  @JsonAdapter(NewJobStateEnum.Adapter.class)
  public enum NewJobStateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    QUEUED("QUEUED"),
    
    SCHEDULED("SCHEDULED"),
    
    RUNNING("RUNNING"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    DELETION_IN_PROGRESS("DELETION_IN_PROGRESS");

    private String value;

    NewJobStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NewJobStateEnum fromValue(String value) {
      for (NewJobStateEnum b : NewJobStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NewJobStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NewJobStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NewJobStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NewJobStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NewJobStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NEW_JOB_STATE = "newJobState";
  @SerializedName(SERIALIZED_NAME_NEW_JOB_STATE)
  private NewJobStateEnum newJobState;

  /**
   * The new task state.
   */
  @JsonAdapter(NewTaskStateEnum.Adapter.class)
  public enum NewTaskStateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    PENDING("PENDING"),
    
    ASSIGNED("ASSIGNED"),
    
    RUNNING("RUNNING"),
    
    FAILED("FAILED"),
    
    SUCCEEDED("SUCCEEDED"),
    
    UNEXECUTED("UNEXECUTED");

    private String value;

    NewTaskStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NewTaskStateEnum fromValue(String value) {
      for (NewTaskStateEnum b : NewTaskStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NewTaskStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NewTaskStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NewTaskStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NewTaskStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NewTaskStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NEW_TASK_STATE = "newTaskState";
  @SerializedName(SERIALIZED_NAME_NEW_TASK_STATE)
  private NewTaskStateEnum newTaskState;

  /**
   * The message type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    JOB_STATE_CHANGED("JOB_STATE_CHANGED"),
    
    TASK_STATE_CHANGED("TASK_STATE_CHANGED");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Message() {
  }

  public Message newJobState(NewJobStateEnum newJobState) {
    this.newJobState = newJobState;
    return this;
  }

  /**
   * The new job state.
   * @return newJobState
   */
  @javax.annotation.Nullable
  public NewJobStateEnum getNewJobState() {
    return newJobState;
  }

  public void setNewJobState(NewJobStateEnum newJobState) {
    this.newJobState = newJobState;
  }


  public Message newTaskState(NewTaskStateEnum newTaskState) {
    this.newTaskState = newTaskState;
    return this;
  }

  /**
   * The new task state.
   * @return newTaskState
   */
  @javax.annotation.Nullable
  public NewTaskStateEnum getNewTaskState() {
    return newTaskState;
  }

  public void setNewTaskState(NewTaskStateEnum newTaskState) {
    this.newTaskState = newTaskState;
  }


  public Message type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The message type.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Message message = (Message) o;
    return Objects.equals(this.newJobState, message.newJobState) &&
        Objects.equals(this.newTaskState, message.newTaskState) &&
        Objects.equals(this.type, message.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(newJobState, newTaskState, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Message {\n");
    sb.append("    newJobState: ").append(toIndentedString(newJobState)).append("\n");
    sb.append("    newTaskState: ").append(toIndentedString(newTaskState)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("newJobState");
    openapiFields.add("newTaskState");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Message
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Message.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Message is not found in the empty JSON string", Message.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Message.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Message` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("newJobState") != null && !jsonObj.get("newJobState").isJsonNull()) && !jsonObj.get("newJobState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newJobState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newJobState").toString()));
      }
      // validate the optional field `newJobState`
      if (jsonObj.get("newJobState") != null && !jsonObj.get("newJobState").isJsonNull()) {
        NewJobStateEnum.validateJsonElement(jsonObj.get("newJobState"));
      }
      if ((jsonObj.get("newTaskState") != null && !jsonObj.get("newTaskState").isJsonNull()) && !jsonObj.get("newTaskState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newTaskState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newTaskState").toString()));
      }
      // validate the optional field `newTaskState`
      if (jsonObj.get("newTaskState") != null && !jsonObj.get("newTaskState").isJsonNull()) {
        NewTaskStateEnum.validateJsonElement(jsonObj.get("newTaskState"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Message.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Message' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Message> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Message.class));

       return (TypeAdapter<T>) new TypeAdapter<Message>() {
           @Override
           public void write(JsonWriter out, Message value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Message read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Message given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Message
   * @throws IOException if the JSON string is invalid with respect to Message
   */
  public static Message fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Message.class);
  }

  /**
   * Convert an instance of Message to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

