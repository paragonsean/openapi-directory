/*
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Accelerator;
import org.openapitools.client.model.AttachedDisk;
import org.openapitools.client.model.Disk;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InstancePolicy describes an instance type and resources attached to each VM created by this InstancePolicy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:22.956738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstancePolicy {
  public static final String SERIALIZED_NAME_ACCELERATORS = "accelerators";
  @SerializedName(SERIALIZED_NAME_ACCELERATORS)
  private List<Accelerator> accelerators = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOOT_DISK = "bootDisk";
  @SerializedName(SERIALIZED_NAME_BOOT_DISK)
  private Disk bootDisk;

  public static final String SERIALIZED_NAME_DISKS = "disks";
  @SerializedName(SERIALIZED_NAME_DISKS)
  private List<AttachedDisk> disks = new ArrayList<>();

  public static final String SERIALIZED_NAME_MACHINE_TYPE = "machineType";
  @SerializedName(SERIALIZED_NAME_MACHINE_TYPE)
  private String machineType;

  public static final String SERIALIZED_NAME_MIN_CPU_PLATFORM = "minCpuPlatform";
  @SerializedName(SERIALIZED_NAME_MIN_CPU_PLATFORM)
  private String minCpuPlatform;

  /**
   * The provisioning model.
   */
  @JsonAdapter(ProvisioningModelEnum.Adapter.class)
  public enum ProvisioningModelEnum {
    PROVISIONING_MODEL_UNSPECIFIED("PROVISIONING_MODEL_UNSPECIFIED"),
    
    STANDARD("STANDARD"),
    
    SPOT("SPOT"),
    
    PREEMPTIBLE("PREEMPTIBLE");

    private String value;

    ProvisioningModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningModelEnum fromValue(String value) {
      for (ProvisioningModelEnum b : ProvisioningModelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningModelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningModelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningModelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_MODEL = "provisioningModel";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_MODEL)
  private ProvisioningModelEnum provisioningModel;

  public static final String SERIALIZED_NAME_RESERVATION = "reservation";
  @SerializedName(SERIALIZED_NAME_RESERVATION)
  private String reservation;

  public InstancePolicy() {
  }

  public InstancePolicy accelerators(List<Accelerator> accelerators) {
    this.accelerators = accelerators;
    return this;
  }

  public InstancePolicy addAcceleratorsItem(Accelerator acceleratorsItem) {
    if (this.accelerators == null) {
      this.accelerators = new ArrayList<>();
    }
    this.accelerators.add(acceleratorsItem);
    return this;
  }

  /**
   * The accelerators attached to each VM instance.
   * @return accelerators
   */
  @javax.annotation.Nullable
  public List<Accelerator> getAccelerators() {
    return accelerators;
  }

  public void setAccelerators(List<Accelerator> accelerators) {
    this.accelerators = accelerators;
  }


  public InstancePolicy bootDisk(Disk bootDisk) {
    this.bootDisk = bootDisk;
    return this;
  }

  /**
   * Get bootDisk
   * @return bootDisk
   */
  @javax.annotation.Nullable
  public Disk getBootDisk() {
    return bootDisk;
  }

  public void setBootDisk(Disk bootDisk) {
    this.bootDisk = bootDisk;
  }


  public InstancePolicy disks(List<AttachedDisk> disks) {
    this.disks = disks;
    return this;
  }

  public InstancePolicy addDisksItem(AttachedDisk disksItem) {
    if (this.disks == null) {
      this.disks = new ArrayList<>();
    }
    this.disks.add(disksItem);
    return this;
  }

  /**
   * Non-boot disks to be attached for each VM created by this InstancePolicy. New disks will be deleted when the VM is deleted. A non-boot disk is a disk that can be of a device with a file system or a raw storage drive that is not ready for data storage and accessing.
   * @return disks
   */
  @javax.annotation.Nullable
  public List<AttachedDisk> getDisks() {
    return disks;
  }

  public void setDisks(List<AttachedDisk> disks) {
    this.disks = disks;
  }


  public InstancePolicy machineType(String machineType) {
    this.machineType = machineType;
    return this;
  }

  /**
   * The Compute Engine machine type.
   * @return machineType
   */
  @javax.annotation.Nullable
  public String getMachineType() {
    return machineType;
  }

  public void setMachineType(String machineType) {
    this.machineType = machineType;
  }


  public InstancePolicy minCpuPlatform(String minCpuPlatform) {
    this.minCpuPlatform = minCpuPlatform;
    return this;
  }

  /**
   * The minimum CPU platform. See https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.
   * @return minCpuPlatform
   */
  @javax.annotation.Nullable
  public String getMinCpuPlatform() {
    return minCpuPlatform;
  }

  public void setMinCpuPlatform(String minCpuPlatform) {
    this.minCpuPlatform = minCpuPlatform;
  }


  public InstancePolicy provisioningModel(ProvisioningModelEnum provisioningModel) {
    this.provisioningModel = provisioningModel;
    return this;
  }

  /**
   * The provisioning model.
   * @return provisioningModel
   */
  @javax.annotation.Nullable
  public ProvisioningModelEnum getProvisioningModel() {
    return provisioningModel;
  }

  public void setProvisioningModel(ProvisioningModelEnum provisioningModel) {
    this.provisioningModel = provisioningModel;
  }


  public InstancePolicy reservation(String reservation) {
    this.reservation = reservation;
    return this;
  }

  /**
   * Optional. If specified, VMs will consume only the specified reservation. If not specified (default), VMs will consume any applicable reservation.
   * @return reservation
   */
  @javax.annotation.Nullable
  public String getReservation() {
    return reservation;
  }

  public void setReservation(String reservation) {
    this.reservation = reservation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstancePolicy instancePolicy = (InstancePolicy) o;
    return Objects.equals(this.accelerators, instancePolicy.accelerators) &&
        Objects.equals(this.bootDisk, instancePolicy.bootDisk) &&
        Objects.equals(this.disks, instancePolicy.disks) &&
        Objects.equals(this.machineType, instancePolicy.machineType) &&
        Objects.equals(this.minCpuPlatform, instancePolicy.minCpuPlatform) &&
        Objects.equals(this.provisioningModel, instancePolicy.provisioningModel) &&
        Objects.equals(this.reservation, instancePolicy.reservation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accelerators, bootDisk, disks, machineType, minCpuPlatform, provisioningModel, reservation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstancePolicy {\n");
    sb.append("    accelerators: ").append(toIndentedString(accelerators)).append("\n");
    sb.append("    bootDisk: ").append(toIndentedString(bootDisk)).append("\n");
    sb.append("    disks: ").append(toIndentedString(disks)).append("\n");
    sb.append("    machineType: ").append(toIndentedString(machineType)).append("\n");
    sb.append("    minCpuPlatform: ").append(toIndentedString(minCpuPlatform)).append("\n");
    sb.append("    provisioningModel: ").append(toIndentedString(provisioningModel)).append("\n");
    sb.append("    reservation: ").append(toIndentedString(reservation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accelerators");
    openapiFields.add("bootDisk");
    openapiFields.add("disks");
    openapiFields.add("machineType");
    openapiFields.add("minCpuPlatform");
    openapiFields.add("provisioningModel");
    openapiFields.add("reservation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstancePolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstancePolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstancePolicy is not found in the empty JSON string", InstancePolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstancePolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstancePolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("accelerators") != null && !jsonObj.get("accelerators").isJsonNull()) {
        JsonArray jsonArrayaccelerators = jsonObj.getAsJsonArray("accelerators");
        if (jsonArrayaccelerators != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accelerators").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accelerators` to be an array in the JSON string but got `%s`", jsonObj.get("accelerators").toString()));
          }

          // validate the optional field `accelerators` (array)
          for (int i = 0; i < jsonArrayaccelerators.size(); i++) {
            Accelerator.validateJsonElement(jsonArrayaccelerators.get(i));
          };
        }
      }
      // validate the optional field `bootDisk`
      if (jsonObj.get("bootDisk") != null && !jsonObj.get("bootDisk").isJsonNull()) {
        Disk.validateJsonElement(jsonObj.get("bootDisk"));
      }
      if (jsonObj.get("disks") != null && !jsonObj.get("disks").isJsonNull()) {
        JsonArray jsonArraydisks = jsonObj.getAsJsonArray("disks");
        if (jsonArraydisks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("disks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `disks` to be an array in the JSON string but got `%s`", jsonObj.get("disks").toString()));
          }

          // validate the optional field `disks` (array)
          for (int i = 0; i < jsonArraydisks.size(); i++) {
            AttachedDisk.validateJsonElement(jsonArraydisks.get(i));
          };
        }
      }
      if ((jsonObj.get("machineType") != null && !jsonObj.get("machineType").isJsonNull()) && !jsonObj.get("machineType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineType").toString()));
      }
      if ((jsonObj.get("minCpuPlatform") != null && !jsonObj.get("minCpuPlatform").isJsonNull()) && !jsonObj.get("minCpuPlatform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minCpuPlatform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minCpuPlatform").toString()));
      }
      if ((jsonObj.get("provisioningModel") != null && !jsonObj.get("provisioningModel").isJsonNull()) && !jsonObj.get("provisioningModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningModel").toString()));
      }
      // validate the optional field `provisioningModel`
      if (jsonObj.get("provisioningModel") != null && !jsonObj.get("provisioningModel").isJsonNull()) {
        ProvisioningModelEnum.validateJsonElement(jsonObj.get("provisioningModel"));
      }
      if ((jsonObj.get("reservation") != null && !jsonObj.get("reservation").isJsonNull()) && !jsonObj.get("reservation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstancePolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstancePolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstancePolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstancePolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<InstancePolicy>() {
           @Override
           public void write(JsonWriter out, InstancePolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstancePolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstancePolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstancePolicy
   * @throws IOException if the JSON string is invalid with respect to InstancePolicy
   */
  public static InstancePolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstancePolicy.class);
  }

  /**
   * Convert an instance of InstancePolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

