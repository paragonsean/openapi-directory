/*
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AgentTask;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response to ReportAgentStateRequest.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:22.956738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportAgentStateResponse {
  public static final String SERIALIZED_NAME_DEFAULT_REPORT_INTERVAL = "defaultReportInterval";
  @SerializedName(SERIALIZED_NAME_DEFAULT_REPORT_INTERVAL)
  private String defaultReportInterval;

  public static final String SERIALIZED_NAME_MIN_REPORT_INTERVAL = "minReportInterval";
  @SerializedName(SERIALIZED_NAME_MIN_REPORT_INTERVAL)
  private String minReportInterval;

  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  private List<AgentTask> tasks = new ArrayList<>();

  public static final String SERIALIZED_NAME_USE_BATCH_MONITORED_RESOURCE = "useBatchMonitoredResource";
  @SerializedName(SERIALIZED_NAME_USE_BATCH_MONITORED_RESOURCE)
  private Boolean useBatchMonitoredResource;

  public ReportAgentStateResponse() {
  }

  public ReportAgentStateResponse defaultReportInterval(String defaultReportInterval) {
    this.defaultReportInterval = defaultReportInterval;
    return this;
  }

  /**
   * Default report interval override
   * @return defaultReportInterval
   */
  @javax.annotation.Nullable
  public String getDefaultReportInterval() {
    return defaultReportInterval;
  }

  public void setDefaultReportInterval(String defaultReportInterval) {
    this.defaultReportInterval = defaultReportInterval;
  }


  public ReportAgentStateResponse minReportInterval(String minReportInterval) {
    this.minReportInterval = minReportInterval;
    return this;
  }

  /**
   * Minimum report interval override
   * @return minReportInterval
   */
  @javax.annotation.Nullable
  public String getMinReportInterval() {
    return minReportInterval;
  }

  public void setMinReportInterval(String minReportInterval) {
    this.minReportInterval = minReportInterval;
  }


  public ReportAgentStateResponse tasks(List<AgentTask> tasks) {
    this.tasks = tasks;
    return this;
  }

  public ReportAgentStateResponse addTasksItem(AgentTask tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

  /**
   * Tasks assigned to the agent
   * @return tasks
   */
  @javax.annotation.Nullable
  public List<AgentTask> getTasks() {
    return tasks;
  }

  public void setTasks(List<AgentTask> tasks) {
    this.tasks = tasks;
  }


  public ReportAgentStateResponse useBatchMonitoredResource(Boolean useBatchMonitoredResource) {
    this.useBatchMonitoredResource = useBatchMonitoredResource;
    return this;
  }

  /**
   * If true, the cloud logging for batch agent will use batch.googleapis.com/Job as monitored resource for Batch job related logging.
   * @return useBatchMonitoredResource
   */
  @javax.annotation.Nullable
  public Boolean getUseBatchMonitoredResource() {
    return useBatchMonitoredResource;
  }

  public void setUseBatchMonitoredResource(Boolean useBatchMonitoredResource) {
    this.useBatchMonitoredResource = useBatchMonitoredResource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportAgentStateResponse reportAgentStateResponse = (ReportAgentStateResponse) o;
    return Objects.equals(this.defaultReportInterval, reportAgentStateResponse.defaultReportInterval) &&
        Objects.equals(this.minReportInterval, reportAgentStateResponse.minReportInterval) &&
        Objects.equals(this.tasks, reportAgentStateResponse.tasks) &&
        Objects.equals(this.useBatchMonitoredResource, reportAgentStateResponse.useBatchMonitoredResource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultReportInterval, minReportInterval, tasks, useBatchMonitoredResource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportAgentStateResponse {\n");
    sb.append("    defaultReportInterval: ").append(toIndentedString(defaultReportInterval)).append("\n");
    sb.append("    minReportInterval: ").append(toIndentedString(minReportInterval)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    useBatchMonitoredResource: ").append(toIndentedString(useBatchMonitoredResource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultReportInterval");
    openapiFields.add("minReportInterval");
    openapiFields.add("tasks");
    openapiFields.add("useBatchMonitoredResource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportAgentStateResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportAgentStateResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportAgentStateResponse is not found in the empty JSON string", ReportAgentStateResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportAgentStateResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportAgentStateResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("defaultReportInterval") != null && !jsonObj.get("defaultReportInterval").isJsonNull()) && !jsonObj.get("defaultReportInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultReportInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultReportInterval").toString()));
      }
      if ((jsonObj.get("minReportInterval") != null && !jsonObj.get("minReportInterval").isJsonNull()) && !jsonObj.get("minReportInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minReportInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minReportInterval").toString()));
      }
      if (jsonObj.get("tasks") != null && !jsonObj.get("tasks").isJsonNull()) {
        JsonArray jsonArraytasks = jsonObj.getAsJsonArray("tasks");
        if (jsonArraytasks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tasks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tasks` to be an array in the JSON string but got `%s`", jsonObj.get("tasks").toString()));
          }

          // validate the optional field `tasks` (array)
          for (int i = 0; i < jsonArraytasks.size(); i++) {
            AgentTask.validateJsonElement(jsonArraytasks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportAgentStateResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportAgentStateResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportAgentStateResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportAgentStateResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportAgentStateResponse>() {
           @Override
           public void write(JsonWriter out, ReportAgentStateResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportAgentStateResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportAgentStateResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportAgentStateResponse
   * @throws IOException if the JSON string is invalid with respect to ReportAgentStateResponse
   */
  public static ReportAgentStateResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportAgentStateResponse.class);
  }

  /**
   * Convert an instance of ReportAgentStateResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

