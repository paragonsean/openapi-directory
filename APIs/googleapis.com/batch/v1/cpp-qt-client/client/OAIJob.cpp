/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJob::OAIJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJob::OAIJob() {
    this->initializeModel();
}

OAIJob::~OAIJob() {}

void OAIJob::initializeModel() {

    m_allocation_policy_isSet = false;
    m_allocation_policy_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_logs_policy_isSet = false;
    m_logs_policy_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notifications_isSet = false;
    m_notifications_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_task_groups_isSet = false;
    m_task_groups_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJob::fromJsonObject(QJsonObject json) {

    m_allocation_policy_isValid = ::OpenAPI::fromJsonValue(m_allocation_policy, json[QString("allocationPolicy")]);
    m_allocation_policy_isSet = !json[QString("allocationPolicy")].isNull() && m_allocation_policy_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_logs_policy_isValid = ::OpenAPI::fromJsonValue(m_logs_policy, json[QString("logsPolicy")]);
    m_logs_policy_isSet = !json[QString("logsPolicy")].isNull() && m_logs_policy_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("notifications")]);
    m_notifications_isSet = !json[QString("notifications")].isNull() && m_notifications_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_task_groups_isValid = ::OpenAPI::fromJsonValue(m_task_groups, json[QString("taskGroups")]);
    m_task_groups_isSet = !json[QString("taskGroups")].isNull() && m_task_groups_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJob::asJsonObject() const {
    QJsonObject obj;
    if (m_allocation_policy.isSet()) {
        obj.insert(QString("allocationPolicy"), ::OpenAPI::toJsonValue(m_allocation_policy));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_logs_policy.isSet()) {
        obj.insert(QString("logsPolicy"), ::OpenAPI::toJsonValue(m_logs_policy));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notifications.size() > 0) {
        obj.insert(QString("notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_task_groups.size() > 0) {
        obj.insert(QString("taskGroups"), ::OpenAPI::toJsonValue(m_task_groups));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIAllocationPolicy OAIJob::getAllocationPolicy() const {
    return m_allocation_policy;
}
void OAIJob::setAllocationPolicy(const OAIAllocationPolicy &allocation_policy) {
    m_allocation_policy = allocation_policy;
    m_allocation_policy_isSet = true;
}

bool OAIJob::is_allocation_policy_Set() const{
    return m_allocation_policy_isSet;
}

bool OAIJob::is_allocation_policy_Valid() const{
    return m_allocation_policy_isValid;
}

QString OAIJob::getCreateTime() const {
    return m_create_time;
}
void OAIJob::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIJob::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIJob::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QMap<QString, QString> OAIJob::getLabels() const {
    return m_labels;
}
void OAIJob::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIJob::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIJob::is_labels_Valid() const{
    return m_labels_isValid;
}

OAILogsPolicy OAIJob::getLogsPolicy() const {
    return m_logs_policy;
}
void OAIJob::setLogsPolicy(const OAILogsPolicy &logs_policy) {
    m_logs_policy = logs_policy;
    m_logs_policy_isSet = true;
}

bool OAIJob::is_logs_policy_Set() const{
    return m_logs_policy_isSet;
}

bool OAIJob::is_logs_policy_Valid() const{
    return m_logs_policy_isValid;
}

QString OAIJob::getName() const {
    return m_name;
}
void OAIJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJob::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIJobNotification> OAIJob::getNotifications() const {
    return m_notifications;
}
void OAIJob::setNotifications(const QList<OAIJobNotification> &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAIJob::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAIJob::is_notifications_Valid() const{
    return m_notifications_isValid;
}

QString OAIJob::getPriority() const {
    return m_priority;
}
void OAIJob::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIJob::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIJob::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIJobStatus OAIJob::getStatus() const {
    return m_status;
}
void OAIJob::setStatus(const OAIJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJob::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJob::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAITaskGroup> OAIJob::getTaskGroups() const {
    return m_task_groups;
}
void OAIJob::setTaskGroups(const QList<OAITaskGroup> &task_groups) {
    m_task_groups = task_groups;
    m_task_groups_isSet = true;
}

bool OAIJob::is_task_groups_Set() const{
    return m_task_groups_isSet;
}

bool OAIJob::is_task_groups_Valid() const{
    return m_task_groups_isValid;
}

QString OAIJob::getUid() const {
    return m_uid;
}
void OAIJob::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIJob::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIJob::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIJob::getUpdateTime() const {
    return m_update_time;
}
void OAIJob::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIJob::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIJob::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocation_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
