/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogsPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogsPolicy::OAILogsPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogsPolicy::OAILogsPolicy() {
    this->initializeModel();
}

OAILogsPolicy::~OAILogsPolicy() {}

void OAILogsPolicy::initializeModel() {

    m_cloud_logging_option_isSet = false;
    m_cloud_logging_option_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_logs_path_isSet = false;
    m_logs_path_isValid = false;
}

void OAILogsPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogsPolicy::fromJsonObject(QJsonObject json) {

    m_cloud_logging_option_isValid = ::OpenAPI::fromJsonValue(m_cloud_logging_option, json[QString("cloudLoggingOption")]);
    m_cloud_logging_option_isSet = !json[QString("cloudLoggingOption")].isNull() && m_cloud_logging_option_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_logs_path_isValid = ::OpenAPI::fromJsonValue(m_logs_path, json[QString("logsPath")]);
    m_logs_path_isSet = !json[QString("logsPath")].isNull() && m_logs_path_isValid;
}

QString OAILogsPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogsPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_logging_option.isSet()) {
        obj.insert(QString("cloudLoggingOption"), ::OpenAPI::toJsonValue(m_cloud_logging_option));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_logs_path_isSet) {
        obj.insert(QString("logsPath"), ::OpenAPI::toJsonValue(m_logs_path));
    }
    return obj;
}

OAICloudLoggingOption OAILogsPolicy::getCloudLoggingOption() const {
    return m_cloud_logging_option;
}
void OAILogsPolicy::setCloudLoggingOption(const OAICloudLoggingOption &cloud_logging_option) {
    m_cloud_logging_option = cloud_logging_option;
    m_cloud_logging_option_isSet = true;
}

bool OAILogsPolicy::is_cloud_logging_option_Set() const{
    return m_cloud_logging_option_isSet;
}

bool OAILogsPolicy::is_cloud_logging_option_Valid() const{
    return m_cloud_logging_option_isValid;
}

QString OAILogsPolicy::getDestination() const {
    return m_destination;
}
void OAILogsPolicy::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAILogsPolicy::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAILogsPolicy::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAILogsPolicy::getLogsPath() const {
    return m_logs_path;
}
void OAILogsPolicy::setLogsPath(const QString &logs_path) {
    m_logs_path = logs_path;
    m_logs_path_isSet = true;
}

bool OAILogsPolicy::is_logs_path_Set() const{
    return m_logs_path_isSet;
}

bool OAILogsPolicy::is_logs_path_Valid() const{
    return m_logs_path_isValid;
}

bool OAILogsPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_logging_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogsPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
