/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgentContainer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgentContainer::OAIAgentContainer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgentContainer::OAIAgentContainer() {
    this->initializeModel();
}

OAIAgentContainer::~OAIAgentContainer() {}

void OAIAgentContainer::initializeModel() {

    m_commands_isSet = false;
    m_commands_isValid = false;

    m_entrypoint_isSet = false;
    m_entrypoint_isValid = false;

    m_image_uri_isSet = false;
    m_image_uri_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;
}

void OAIAgentContainer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAgentContainer::fromJsonObject(QJsonObject json) {

    m_commands_isValid = ::OpenAPI::fromJsonValue(m_commands, json[QString("commands")]);
    m_commands_isSet = !json[QString("commands")].isNull() && m_commands_isValid;

    m_entrypoint_isValid = ::OpenAPI::fromJsonValue(m_entrypoint, json[QString("entrypoint")]);
    m_entrypoint_isSet = !json[QString("entrypoint")].isNull() && m_entrypoint_isValid;

    m_image_uri_isValid = ::OpenAPI::fromJsonValue(m_image_uri, json[QString("imageUri")]);
    m_image_uri_isSet = !json[QString("imageUri")].isNull() && m_image_uri_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("volumes")]);
    m_volumes_isSet = !json[QString("volumes")].isNull() && m_volumes_isValid;
}

QString OAIAgentContainer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAgentContainer::asJsonObject() const {
    QJsonObject obj;
    if (m_commands.size() > 0) {
        obj.insert(QString("commands"), ::OpenAPI::toJsonValue(m_commands));
    }
    if (m_entrypoint_isSet) {
        obj.insert(QString("entrypoint"), ::OpenAPI::toJsonValue(m_entrypoint));
    }
    if (m_image_uri_isSet) {
        obj.insert(QString("imageUri"), ::OpenAPI::toJsonValue(m_image_uri));
    }
    if (m_options_isSet) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_volumes.size() > 0) {
        obj.insert(QString("volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    return obj;
}

QList<QString> OAIAgentContainer::getCommands() const {
    return m_commands;
}
void OAIAgentContainer::setCommands(const QList<QString> &commands) {
    m_commands = commands;
    m_commands_isSet = true;
}

bool OAIAgentContainer::is_commands_Set() const{
    return m_commands_isSet;
}

bool OAIAgentContainer::is_commands_Valid() const{
    return m_commands_isValid;
}

QString OAIAgentContainer::getEntrypoint() const {
    return m_entrypoint;
}
void OAIAgentContainer::setEntrypoint(const QString &entrypoint) {
    m_entrypoint = entrypoint;
    m_entrypoint_isSet = true;
}

bool OAIAgentContainer::is_entrypoint_Set() const{
    return m_entrypoint_isSet;
}

bool OAIAgentContainer::is_entrypoint_Valid() const{
    return m_entrypoint_isValid;
}

QString OAIAgentContainer::getImageUri() const {
    return m_image_uri;
}
void OAIAgentContainer::setImageUri(const QString &image_uri) {
    m_image_uri = image_uri;
    m_image_uri_isSet = true;
}

bool OAIAgentContainer::is_image_uri_Set() const{
    return m_image_uri_isSet;
}

bool OAIAgentContainer::is_image_uri_Valid() const{
    return m_image_uri_isValid;
}

QString OAIAgentContainer::getOptions() const {
    return m_options;
}
void OAIAgentContainer::setOptions(const QString &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIAgentContainer::is_options_Set() const{
    return m_options_isSet;
}

bool OAIAgentContainer::is_options_Valid() const{
    return m_options_isValid;
}

QList<QString> OAIAgentContainer::getVolumes() const {
    return m_volumes;
}
void OAIAgentContainer::setVolumes(const QList<QString> &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAIAgentContainer::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAIAgentContainer::is_volumes_Valid() const{
    return m_volumes_isValid;
}

bool OAIAgentContainer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entrypoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAgentContainer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
