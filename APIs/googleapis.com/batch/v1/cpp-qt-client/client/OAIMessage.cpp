/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage::OAIMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage::OAIMessage() {
    this->initializeModel();
}

OAIMessage::~OAIMessage() {}

void OAIMessage::initializeModel() {

    m_new_job_state_isSet = false;
    m_new_job_state_isValid = false;

    m_new_task_state_isSet = false;
    m_new_task_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage::fromJsonObject(QJsonObject json) {

    m_new_job_state_isValid = ::OpenAPI::fromJsonValue(m_new_job_state, json[QString("newJobState")]);
    m_new_job_state_isSet = !json[QString("newJobState")].isNull() && m_new_job_state_isValid;

    m_new_task_state_isValid = ::OpenAPI::fromJsonValue(m_new_task_state, json[QString("newTaskState")]);
    m_new_task_state_isSet = !json[QString("newTaskState")].isNull() && m_new_task_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_new_job_state_isSet) {
        obj.insert(QString("newJobState"), ::OpenAPI::toJsonValue(m_new_job_state));
    }
    if (m_new_task_state_isSet) {
        obj.insert(QString("newTaskState"), ::OpenAPI::toJsonValue(m_new_task_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIMessage::getNewJobState() const {
    return m_new_job_state;
}
void OAIMessage::setNewJobState(const QString &new_job_state) {
    m_new_job_state = new_job_state;
    m_new_job_state_isSet = true;
}

bool OAIMessage::is_new_job_state_Set() const{
    return m_new_job_state_isSet;
}

bool OAIMessage::is_new_job_state_Valid() const{
    return m_new_job_state_isValid;
}

QString OAIMessage::getNewTaskState() const {
    return m_new_task_state;
}
void OAIMessage::setNewTaskState(const QString &new_task_state) {
    m_new_task_state = new_task_state;
    m_new_task_state_isSet = true;
}

bool OAIMessage::is_new_task_state_Set() const{
    return m_new_task_state_isSet;
}

bool OAIMessage::is_new_task_state_Valid() const{
    return m_new_task_state_isValid;
}

QString OAIMessage::getType() const {
    return m_type;
}
void OAIMessage::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMessage::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMessage::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_new_job_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_task_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
