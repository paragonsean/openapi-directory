/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgentTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgentTask::OAIAgentTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgentTask::OAIAgentTask() {
    this->initializeModel();
}

OAIAgentTask::~OAIAgentTask() {}

void OAIAgentTask::initializeModel() {

    m_agent_task_spec_isSet = false;
    m_agent_task_spec_isValid = false;

    m_intended_state_isSet = false;
    m_intended_state_isValid = false;

    m_reached_barrier_isSet = false;
    m_reached_barrier_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_task_isSet = false;
    m_task_isValid = false;

    m_task_source_isSet = false;
    m_task_source_isValid = false;
}

void OAIAgentTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAgentTask::fromJsonObject(QJsonObject json) {

    m_agent_task_spec_isValid = ::OpenAPI::fromJsonValue(m_agent_task_spec, json[QString("agentTaskSpec")]);
    m_agent_task_spec_isSet = !json[QString("agentTaskSpec")].isNull() && m_agent_task_spec_isValid;

    m_intended_state_isValid = ::OpenAPI::fromJsonValue(m_intended_state, json[QString("intendedState")]);
    m_intended_state_isSet = !json[QString("intendedState")].isNull() && m_intended_state_isValid;

    m_reached_barrier_isValid = ::OpenAPI::fromJsonValue(m_reached_barrier, json[QString("reachedBarrier")]);
    m_reached_barrier_isSet = !json[QString("reachedBarrier")].isNull() && m_reached_barrier_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_task_isValid = ::OpenAPI::fromJsonValue(m_task, json[QString("task")]);
    m_task_isSet = !json[QString("task")].isNull() && m_task_isValid;

    m_task_source_isValid = ::OpenAPI::fromJsonValue(m_task_source, json[QString("taskSource")]);
    m_task_source_isSet = !json[QString("taskSource")].isNull() && m_task_source_isValid;
}

QString OAIAgentTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAgentTask::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_task_spec.isSet()) {
        obj.insert(QString("agentTaskSpec"), ::OpenAPI::toJsonValue(m_agent_task_spec));
    }
    if (m_intended_state_isSet) {
        obj.insert(QString("intendedState"), ::OpenAPI::toJsonValue(m_intended_state));
    }
    if (m_reached_barrier_isSet) {
        obj.insert(QString("reachedBarrier"), ::OpenAPI::toJsonValue(m_reached_barrier));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_task_isSet) {
        obj.insert(QString("task"), ::OpenAPI::toJsonValue(m_task));
    }
    if (m_task_source_isSet) {
        obj.insert(QString("taskSource"), ::OpenAPI::toJsonValue(m_task_source));
    }
    return obj;
}

OAIAgentTaskSpec OAIAgentTask::getAgentTaskSpec() const {
    return m_agent_task_spec;
}
void OAIAgentTask::setAgentTaskSpec(const OAIAgentTaskSpec &agent_task_spec) {
    m_agent_task_spec = agent_task_spec;
    m_agent_task_spec_isSet = true;
}

bool OAIAgentTask::is_agent_task_spec_Set() const{
    return m_agent_task_spec_isSet;
}

bool OAIAgentTask::is_agent_task_spec_Valid() const{
    return m_agent_task_spec_isValid;
}

QString OAIAgentTask::getIntendedState() const {
    return m_intended_state;
}
void OAIAgentTask::setIntendedState(const QString &intended_state) {
    m_intended_state = intended_state;
    m_intended_state_isSet = true;
}

bool OAIAgentTask::is_intended_state_Set() const{
    return m_intended_state_isSet;
}

bool OAIAgentTask::is_intended_state_Valid() const{
    return m_intended_state_isValid;
}

QString OAIAgentTask::getReachedBarrier() const {
    return m_reached_barrier;
}
void OAIAgentTask::setReachedBarrier(const QString &reached_barrier) {
    m_reached_barrier = reached_barrier;
    m_reached_barrier_isSet = true;
}

bool OAIAgentTask::is_reached_barrier_Set() const{
    return m_reached_barrier_isSet;
}

bool OAIAgentTask::is_reached_barrier_Valid() const{
    return m_reached_barrier_isValid;
}

OAITaskSpec OAIAgentTask::getSpec() const {
    return m_spec;
}
void OAIAgentTask::setSpec(const OAITaskSpec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIAgentTask::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIAgentTask::is_spec_Valid() const{
    return m_spec_isValid;
}

OAITaskStatus OAIAgentTask::getStatus() const {
    return m_status;
}
void OAIAgentTask::setStatus(const OAITaskStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAgentTask::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAgentTask::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAgentTask::getTask() const {
    return m_task;
}
void OAIAgentTask::setTask(const QString &task) {
    m_task = task;
    m_task_isSet = true;
}

bool OAIAgentTask::is_task_Set() const{
    return m_task_isSet;
}

bool OAIAgentTask::is_task_Valid() const{
    return m_task_isValid;
}

QString OAIAgentTask::getTaskSource() const {
    return m_task_source;
}
void OAIAgentTask::setTaskSource(const QString &task_source) {
    m_task_source = task_source;
    m_task_source_isSet = true;
}

bool OAIAgentTask::is_task_source_Set() const{
    return m_task_source_isSet;
}

bool OAIAgentTask::is_task_source_Valid() const{
    return m_task_source_isValid;
}

bool OAIAgentTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_task_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intended_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reached_barrier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAgentTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
