/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskGroup::OAITaskGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskGroup::OAITaskGroup() {
    this->initializeModel();
}

OAITaskGroup::~OAITaskGroup() {}

void OAITaskGroup::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_parallelism_isSet = false;
    m_parallelism_isValid = false;

    m_permissive_ssh_isSet = false;
    m_permissive_ssh_isValid = false;

    m_require_hosts_file_isSet = false;
    m_require_hosts_file_isValid = false;

    m_run_as_non_root_isSet = false;
    m_run_as_non_root_isValid = false;

    m_scheduling_policy_isSet = false;
    m_scheduling_policy_isValid = false;

    m_task_count_isSet = false;
    m_task_count_isValid = false;

    m_task_count_per_node_isSet = false;
    m_task_count_per_node_isValid = false;

    m_task_environments_isSet = false;
    m_task_environments_isValid = false;

    m_task_spec_isSet = false;
    m_task_spec_isValid = false;
}

void OAITaskGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskGroup::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parallelism_isValid = ::OpenAPI::fromJsonValue(m_parallelism, json[QString("parallelism")]);
    m_parallelism_isSet = !json[QString("parallelism")].isNull() && m_parallelism_isValid;

    m_permissive_ssh_isValid = ::OpenAPI::fromJsonValue(m_permissive_ssh, json[QString("permissiveSsh")]);
    m_permissive_ssh_isSet = !json[QString("permissiveSsh")].isNull() && m_permissive_ssh_isValid;

    m_require_hosts_file_isValid = ::OpenAPI::fromJsonValue(m_require_hosts_file, json[QString("requireHostsFile")]);
    m_require_hosts_file_isSet = !json[QString("requireHostsFile")].isNull() && m_require_hosts_file_isValid;

    m_run_as_non_root_isValid = ::OpenAPI::fromJsonValue(m_run_as_non_root, json[QString("runAsNonRoot")]);
    m_run_as_non_root_isSet = !json[QString("runAsNonRoot")].isNull() && m_run_as_non_root_isValid;

    m_scheduling_policy_isValid = ::OpenAPI::fromJsonValue(m_scheduling_policy, json[QString("schedulingPolicy")]);
    m_scheduling_policy_isSet = !json[QString("schedulingPolicy")].isNull() && m_scheduling_policy_isValid;

    m_task_count_isValid = ::OpenAPI::fromJsonValue(m_task_count, json[QString("taskCount")]);
    m_task_count_isSet = !json[QString("taskCount")].isNull() && m_task_count_isValid;

    m_task_count_per_node_isValid = ::OpenAPI::fromJsonValue(m_task_count_per_node, json[QString("taskCountPerNode")]);
    m_task_count_per_node_isSet = !json[QString("taskCountPerNode")].isNull() && m_task_count_per_node_isValid;

    m_task_environments_isValid = ::OpenAPI::fromJsonValue(m_task_environments, json[QString("taskEnvironments")]);
    m_task_environments_isSet = !json[QString("taskEnvironments")].isNull() && m_task_environments_isValid;

    m_task_spec_isValid = ::OpenAPI::fromJsonValue(m_task_spec, json[QString("taskSpec")]);
    m_task_spec_isSet = !json[QString("taskSpec")].isNull() && m_task_spec_isValid;
}

QString OAITaskGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parallelism_isSet) {
        obj.insert(QString("parallelism"), ::OpenAPI::toJsonValue(m_parallelism));
    }
    if (m_permissive_ssh_isSet) {
        obj.insert(QString("permissiveSsh"), ::OpenAPI::toJsonValue(m_permissive_ssh));
    }
    if (m_require_hosts_file_isSet) {
        obj.insert(QString("requireHostsFile"), ::OpenAPI::toJsonValue(m_require_hosts_file));
    }
    if (m_run_as_non_root_isSet) {
        obj.insert(QString("runAsNonRoot"), ::OpenAPI::toJsonValue(m_run_as_non_root));
    }
    if (m_scheduling_policy_isSet) {
        obj.insert(QString("schedulingPolicy"), ::OpenAPI::toJsonValue(m_scheduling_policy));
    }
    if (m_task_count_isSet) {
        obj.insert(QString("taskCount"), ::OpenAPI::toJsonValue(m_task_count));
    }
    if (m_task_count_per_node_isSet) {
        obj.insert(QString("taskCountPerNode"), ::OpenAPI::toJsonValue(m_task_count_per_node));
    }
    if (m_task_environments.size() > 0) {
        obj.insert(QString("taskEnvironments"), ::OpenAPI::toJsonValue(m_task_environments));
    }
    if (m_task_spec.isSet()) {
        obj.insert(QString("taskSpec"), ::OpenAPI::toJsonValue(m_task_spec));
    }
    return obj;
}

QString OAITaskGroup::getName() const {
    return m_name;
}
void OAITaskGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITaskGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAITaskGroup::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITaskGroup::getParallelism() const {
    return m_parallelism;
}
void OAITaskGroup::setParallelism(const QString &parallelism) {
    m_parallelism = parallelism;
    m_parallelism_isSet = true;
}

bool OAITaskGroup::is_parallelism_Set() const{
    return m_parallelism_isSet;
}

bool OAITaskGroup::is_parallelism_Valid() const{
    return m_parallelism_isValid;
}

bool OAITaskGroup::isPermissiveSsh() const {
    return m_permissive_ssh;
}
void OAITaskGroup::setPermissiveSsh(const bool &permissive_ssh) {
    m_permissive_ssh = permissive_ssh;
    m_permissive_ssh_isSet = true;
}

bool OAITaskGroup::is_permissive_ssh_Set() const{
    return m_permissive_ssh_isSet;
}

bool OAITaskGroup::is_permissive_ssh_Valid() const{
    return m_permissive_ssh_isValid;
}

bool OAITaskGroup::isRequireHostsFile() const {
    return m_require_hosts_file;
}
void OAITaskGroup::setRequireHostsFile(const bool &require_hosts_file) {
    m_require_hosts_file = require_hosts_file;
    m_require_hosts_file_isSet = true;
}

bool OAITaskGroup::is_require_hosts_file_Set() const{
    return m_require_hosts_file_isSet;
}

bool OAITaskGroup::is_require_hosts_file_Valid() const{
    return m_require_hosts_file_isValid;
}

bool OAITaskGroup::isRunAsNonRoot() const {
    return m_run_as_non_root;
}
void OAITaskGroup::setRunAsNonRoot(const bool &run_as_non_root) {
    m_run_as_non_root = run_as_non_root;
    m_run_as_non_root_isSet = true;
}

bool OAITaskGroup::is_run_as_non_root_Set() const{
    return m_run_as_non_root_isSet;
}

bool OAITaskGroup::is_run_as_non_root_Valid() const{
    return m_run_as_non_root_isValid;
}

QString OAITaskGroup::getSchedulingPolicy() const {
    return m_scheduling_policy;
}
void OAITaskGroup::setSchedulingPolicy(const QString &scheduling_policy) {
    m_scheduling_policy = scheduling_policy;
    m_scheduling_policy_isSet = true;
}

bool OAITaskGroup::is_scheduling_policy_Set() const{
    return m_scheduling_policy_isSet;
}

bool OAITaskGroup::is_scheduling_policy_Valid() const{
    return m_scheduling_policy_isValid;
}

QString OAITaskGroup::getTaskCount() const {
    return m_task_count;
}
void OAITaskGroup::setTaskCount(const QString &task_count) {
    m_task_count = task_count;
    m_task_count_isSet = true;
}

bool OAITaskGroup::is_task_count_Set() const{
    return m_task_count_isSet;
}

bool OAITaskGroup::is_task_count_Valid() const{
    return m_task_count_isValid;
}

QString OAITaskGroup::getTaskCountPerNode() const {
    return m_task_count_per_node;
}
void OAITaskGroup::setTaskCountPerNode(const QString &task_count_per_node) {
    m_task_count_per_node = task_count_per_node;
    m_task_count_per_node_isSet = true;
}

bool OAITaskGroup::is_task_count_per_node_Set() const{
    return m_task_count_per_node_isSet;
}

bool OAITaskGroup::is_task_count_per_node_Valid() const{
    return m_task_count_per_node_isValid;
}

QList<OAIEnvironment> OAITaskGroup::getTaskEnvironments() const {
    return m_task_environments;
}
void OAITaskGroup::setTaskEnvironments(const QList<OAIEnvironment> &task_environments) {
    m_task_environments = task_environments;
    m_task_environments_isSet = true;
}

bool OAITaskGroup::is_task_environments_Set() const{
    return m_task_environments_isSet;
}

bool OAITaskGroup::is_task_environments_Valid() const{
    return m_task_environments_isValid;
}

OAITaskSpec OAITaskGroup::getTaskSpec() const {
    return m_task_spec;
}
void OAITaskGroup::setTaskSpec(const OAITaskSpec &task_spec) {
    m_task_spec = task_spec;
    m_task_spec_isSet = true;
}

bool OAITaskGroup::is_task_spec_Set() const{
    return m_task_spec_isSet;
}

bool OAITaskGroup::is_task_spec_Valid() const{
    return m_task_spec_isValid;
}

bool OAITaskGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallelism_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissive_ssh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_hosts_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_as_non_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduling_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_count_per_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_environments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
