/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgentTimingInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgentTimingInfo::OAIAgentTimingInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgentTimingInfo::OAIAgentTimingInfo() {
    this->initializeModel();
}

OAIAgentTimingInfo::~OAIAgentTimingInfo() {}

void OAIAgentTimingInfo::initializeModel() {

    m_agent_startup_time_isSet = false;
    m_agent_startup_time_isValid = false;

    m_boot_time_isSet = false;
    m_boot_time_isValid = false;

    m_script_startup_time_isSet = false;
    m_script_startup_time_isValid = false;
}

void OAIAgentTimingInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAgentTimingInfo::fromJsonObject(QJsonObject json) {

    m_agent_startup_time_isValid = ::OpenAPI::fromJsonValue(m_agent_startup_time, json[QString("agentStartupTime")]);
    m_agent_startup_time_isSet = !json[QString("agentStartupTime")].isNull() && m_agent_startup_time_isValid;

    m_boot_time_isValid = ::OpenAPI::fromJsonValue(m_boot_time, json[QString("bootTime")]);
    m_boot_time_isSet = !json[QString("bootTime")].isNull() && m_boot_time_isValid;

    m_script_startup_time_isValid = ::OpenAPI::fromJsonValue(m_script_startup_time, json[QString("scriptStartupTime")]);
    m_script_startup_time_isSet = !json[QString("scriptStartupTime")].isNull() && m_script_startup_time_isValid;
}

QString OAIAgentTimingInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAgentTimingInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_startup_time_isSet) {
        obj.insert(QString("agentStartupTime"), ::OpenAPI::toJsonValue(m_agent_startup_time));
    }
    if (m_boot_time_isSet) {
        obj.insert(QString("bootTime"), ::OpenAPI::toJsonValue(m_boot_time));
    }
    if (m_script_startup_time_isSet) {
        obj.insert(QString("scriptStartupTime"), ::OpenAPI::toJsonValue(m_script_startup_time));
    }
    return obj;
}

QString OAIAgentTimingInfo::getAgentStartupTime() const {
    return m_agent_startup_time;
}
void OAIAgentTimingInfo::setAgentStartupTime(const QString &agent_startup_time) {
    m_agent_startup_time = agent_startup_time;
    m_agent_startup_time_isSet = true;
}

bool OAIAgentTimingInfo::is_agent_startup_time_Set() const{
    return m_agent_startup_time_isSet;
}

bool OAIAgentTimingInfo::is_agent_startup_time_Valid() const{
    return m_agent_startup_time_isValid;
}

QString OAIAgentTimingInfo::getBootTime() const {
    return m_boot_time;
}
void OAIAgentTimingInfo::setBootTime(const QString &boot_time) {
    m_boot_time = boot_time;
    m_boot_time_isSet = true;
}

bool OAIAgentTimingInfo::is_boot_time_Set() const{
    return m_boot_time_isSet;
}

bool OAIAgentTimingInfo::is_boot_time_Valid() const{
    return m_boot_time_isValid;
}

QString OAIAgentTimingInfo::getScriptStartupTime() const {
    return m_script_startup_time;
}
void OAIAgentTimingInfo::setScriptStartupTime(const QString &script_startup_time) {
    m_script_startup_time = script_startup_time;
    m_script_startup_time_isSet = true;
}

bool OAIAgentTimingInfo::is_script_startup_time_Set() const{
    return m_script_startup_time_isSet;
}

bool OAIAgentTimingInfo::is_script_startup_time_Valid() const{
    return m_script_startup_time_isValid;
}

bool OAIAgentTimingInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_startup_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boot_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_startup_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAgentTimingInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
