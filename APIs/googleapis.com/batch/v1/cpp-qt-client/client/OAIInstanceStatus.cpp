/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceStatus::OAIInstanceStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceStatus::OAIInstanceStatus() {
    this->initializeModel();
}

OAIInstanceStatus::~OAIInstanceStatus() {}

void OAIInstanceStatus::initializeModel() {

    m_boot_disk_isSet = false;
    m_boot_disk_isValid = false;

    m_machine_type_isSet = false;
    m_machine_type_isValid = false;

    m_provisioning_model_isSet = false;
    m_provisioning_model_isValid = false;

    m_task_pack_isSet = false;
    m_task_pack_isValid = false;
}

void OAIInstanceStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceStatus::fromJsonObject(QJsonObject json) {

    m_boot_disk_isValid = ::OpenAPI::fromJsonValue(m_boot_disk, json[QString("bootDisk")]);
    m_boot_disk_isSet = !json[QString("bootDisk")].isNull() && m_boot_disk_isValid;

    m_machine_type_isValid = ::OpenAPI::fromJsonValue(m_machine_type, json[QString("machineType")]);
    m_machine_type_isSet = !json[QString("machineType")].isNull() && m_machine_type_isValid;

    m_provisioning_model_isValid = ::OpenAPI::fromJsonValue(m_provisioning_model, json[QString("provisioningModel")]);
    m_provisioning_model_isSet = !json[QString("provisioningModel")].isNull() && m_provisioning_model_isValid;

    m_task_pack_isValid = ::OpenAPI::fromJsonValue(m_task_pack, json[QString("taskPack")]);
    m_task_pack_isSet = !json[QString("taskPack")].isNull() && m_task_pack_isValid;
}

QString OAIInstanceStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_boot_disk.isSet()) {
        obj.insert(QString("bootDisk"), ::OpenAPI::toJsonValue(m_boot_disk));
    }
    if (m_machine_type_isSet) {
        obj.insert(QString("machineType"), ::OpenAPI::toJsonValue(m_machine_type));
    }
    if (m_provisioning_model_isSet) {
        obj.insert(QString("provisioningModel"), ::OpenAPI::toJsonValue(m_provisioning_model));
    }
    if (m_task_pack_isSet) {
        obj.insert(QString("taskPack"), ::OpenAPI::toJsonValue(m_task_pack));
    }
    return obj;
}

OAIDisk OAIInstanceStatus::getBootDisk() const {
    return m_boot_disk;
}
void OAIInstanceStatus::setBootDisk(const OAIDisk &boot_disk) {
    m_boot_disk = boot_disk;
    m_boot_disk_isSet = true;
}

bool OAIInstanceStatus::is_boot_disk_Set() const{
    return m_boot_disk_isSet;
}

bool OAIInstanceStatus::is_boot_disk_Valid() const{
    return m_boot_disk_isValid;
}

QString OAIInstanceStatus::getMachineType() const {
    return m_machine_type;
}
void OAIInstanceStatus::setMachineType(const QString &machine_type) {
    m_machine_type = machine_type;
    m_machine_type_isSet = true;
}

bool OAIInstanceStatus::is_machine_type_Set() const{
    return m_machine_type_isSet;
}

bool OAIInstanceStatus::is_machine_type_Valid() const{
    return m_machine_type_isValid;
}

QString OAIInstanceStatus::getProvisioningModel() const {
    return m_provisioning_model;
}
void OAIInstanceStatus::setProvisioningModel(const QString &provisioning_model) {
    m_provisioning_model = provisioning_model;
    m_provisioning_model_isSet = true;
}

bool OAIInstanceStatus::is_provisioning_model_Set() const{
    return m_provisioning_model_isSet;
}

bool OAIInstanceStatus::is_provisioning_model_Valid() const{
    return m_provisioning_model_isValid;
}

QString OAIInstanceStatus::getTaskPack() const {
    return m_task_pack;
}
void OAIInstanceStatus::setTaskPack(const QString &task_pack) {
    m_task_pack = task_pack;
    m_task_pack_isSet = true;
}

bool OAIInstanceStatus::is_task_pack_Set() const{
    return m_task_pack_isSet;
}

bool OAIInstanceStatus::is_task_pack_Valid() const{
    return m_task_pack_isValid;
}

bool OAIInstanceStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boot_disk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_pack_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
