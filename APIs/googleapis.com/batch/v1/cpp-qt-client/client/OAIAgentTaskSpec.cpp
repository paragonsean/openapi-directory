/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgentTaskSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgentTaskSpec::OAIAgentTaskSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgentTaskSpec::OAIAgentTaskSpec() {
    this->initializeModel();
}

OAIAgentTaskSpec::~OAIAgentTaskSpec() {}

void OAIAgentTaskSpec::initializeModel() {

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_max_run_duration_isSet = false;
    m_max_run_duration_isValid = false;

    m_runnables_isSet = false;
    m_runnables_isValid = false;

    m_user_account_isSet = false;
    m_user_account_isValid = false;
}

void OAIAgentTaskSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAgentTaskSpec::fromJsonObject(QJsonObject json) {

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_max_run_duration_isValid = ::OpenAPI::fromJsonValue(m_max_run_duration, json[QString("maxRunDuration")]);
    m_max_run_duration_isSet = !json[QString("maxRunDuration")].isNull() && m_max_run_duration_isValid;

    m_runnables_isValid = ::OpenAPI::fromJsonValue(m_runnables, json[QString("runnables")]);
    m_runnables_isSet = !json[QString("runnables")].isNull() && m_runnables_isValid;

    m_user_account_isValid = ::OpenAPI::fromJsonValue(m_user_account, json[QString("userAccount")]);
    m_user_account_isSet = !json[QString("userAccount")].isNull() && m_user_account_isValid;
}

QString OAIAgentTaskSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAgentTaskSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_max_run_duration_isSet) {
        obj.insert(QString("maxRunDuration"), ::OpenAPI::toJsonValue(m_max_run_duration));
    }
    if (m_runnables.size() > 0) {
        obj.insert(QString("runnables"), ::OpenAPI::toJsonValue(m_runnables));
    }
    if (m_user_account.isSet()) {
        obj.insert(QString("userAccount"), ::OpenAPI::toJsonValue(m_user_account));
    }
    return obj;
}

OAIAgentEnvironment OAIAgentTaskSpec::getEnvironment() const {
    return m_environment;
}
void OAIAgentTaskSpec::setEnvironment(const OAIAgentEnvironment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIAgentTaskSpec::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIAgentTaskSpec::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAIAgentTaskSpec::getMaxRunDuration() const {
    return m_max_run_duration;
}
void OAIAgentTaskSpec::setMaxRunDuration(const QString &max_run_duration) {
    m_max_run_duration = max_run_duration;
    m_max_run_duration_isSet = true;
}

bool OAIAgentTaskSpec::is_max_run_duration_Set() const{
    return m_max_run_duration_isSet;
}

bool OAIAgentTaskSpec::is_max_run_duration_Valid() const{
    return m_max_run_duration_isValid;
}

QList<OAIAgentTaskRunnable> OAIAgentTaskSpec::getRunnables() const {
    return m_runnables;
}
void OAIAgentTaskSpec::setRunnables(const QList<OAIAgentTaskRunnable> &runnables) {
    m_runnables = runnables;
    m_runnables_isSet = true;
}

bool OAIAgentTaskSpec::is_runnables_Set() const{
    return m_runnables_isSet;
}

bool OAIAgentTaskSpec::is_runnables_Valid() const{
    return m_runnables_isValid;
}

OAIAgentTaskUserAccount OAIAgentTaskSpec::getUserAccount() const {
    return m_user_account;
}
void OAIAgentTaskSpec::setUserAccount(const OAIAgentTaskUserAccount &user_account) {
    m_user_account = user_account;
    m_user_account_isSet = true;
}

bool OAIAgentTaskSpec::is_user_account_Set() const{
    return m_user_account_isSet;
}

bool OAIAgentTaskSpec::is_user_account_Valid() const{
    return m_user_account_isValid;
}

bool OAIAgentTaskSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_run_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runnables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_account.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAgentTaskSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
