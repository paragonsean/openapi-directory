/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunnable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunnable::OAIRunnable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunnable::OAIRunnable() {
    this->initializeModel();
}

OAIRunnable::~OAIRunnable() {}

void OAIRunnable::initializeModel() {

    m_always_run_isSet = false;
    m_always_run_isValid = false;

    m_background_isSet = false;
    m_background_isValid = false;

    m_barrier_isSet = false;
    m_barrier_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_ignore_exit_status_isSet = false;
    m_ignore_exit_status_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIRunnable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunnable::fromJsonObject(QJsonObject json) {

    m_always_run_isValid = ::OpenAPI::fromJsonValue(m_always_run, json[QString("alwaysRun")]);
    m_always_run_isSet = !json[QString("alwaysRun")].isNull() && m_always_run_isValid;

    m_background_isValid = ::OpenAPI::fromJsonValue(m_background, json[QString("background")]);
    m_background_isSet = !json[QString("background")].isNull() && m_background_isValid;

    m_barrier_isValid = ::OpenAPI::fromJsonValue(m_barrier, json[QString("barrier")]);
    m_barrier_isSet = !json[QString("barrier")].isNull() && m_barrier_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_ignore_exit_status_isValid = ::OpenAPI::fromJsonValue(m_ignore_exit_status, json[QString("ignoreExitStatus")]);
    m_ignore_exit_status_isSet = !json[QString("ignoreExitStatus")].isNull() && m_ignore_exit_status_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIRunnable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunnable::asJsonObject() const {
    QJsonObject obj;
    if (m_always_run_isSet) {
        obj.insert(QString("alwaysRun"), ::OpenAPI::toJsonValue(m_always_run));
    }
    if (m_background_isSet) {
        obj.insert(QString("background"), ::OpenAPI::toJsonValue(m_background));
    }
    if (m_barrier.isSet()) {
        obj.insert(QString("barrier"), ::OpenAPI::toJsonValue(m_barrier));
    }
    if (m_container.isSet()) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_ignore_exit_status_isSet) {
        obj.insert(QString("ignoreExitStatus"), ::OpenAPI::toJsonValue(m_ignore_exit_status));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_script.isSet()) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

bool OAIRunnable::isAlwaysRun() const {
    return m_always_run;
}
void OAIRunnable::setAlwaysRun(const bool &always_run) {
    m_always_run = always_run;
    m_always_run_isSet = true;
}

bool OAIRunnable::is_always_run_Set() const{
    return m_always_run_isSet;
}

bool OAIRunnable::is_always_run_Valid() const{
    return m_always_run_isValid;
}

bool OAIRunnable::isBackground() const {
    return m_background;
}
void OAIRunnable::setBackground(const bool &background) {
    m_background = background;
    m_background_isSet = true;
}

bool OAIRunnable::is_background_Set() const{
    return m_background_isSet;
}

bool OAIRunnable::is_background_Valid() const{
    return m_background_isValid;
}

OAIBarrier OAIRunnable::getBarrier() const {
    return m_barrier;
}
void OAIRunnable::setBarrier(const OAIBarrier &barrier) {
    m_barrier = barrier;
    m_barrier_isSet = true;
}

bool OAIRunnable::is_barrier_Set() const{
    return m_barrier_isSet;
}

bool OAIRunnable::is_barrier_Valid() const{
    return m_barrier_isValid;
}

OAIContainer OAIRunnable::getContainer() const {
    return m_container;
}
void OAIRunnable::setContainer(const OAIContainer &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIRunnable::is_container_Set() const{
    return m_container_isSet;
}

bool OAIRunnable::is_container_Valid() const{
    return m_container_isValid;
}

QString OAIRunnable::getDisplayName() const {
    return m_display_name;
}
void OAIRunnable::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRunnable::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRunnable::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIEnvironment OAIRunnable::getEnvironment() const {
    return m_environment;
}
void OAIRunnable::setEnvironment(const OAIEnvironment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIRunnable::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIRunnable::is_environment_Valid() const{
    return m_environment_isValid;
}

bool OAIRunnable::isIgnoreExitStatus() const {
    return m_ignore_exit_status;
}
void OAIRunnable::setIgnoreExitStatus(const bool &ignore_exit_status) {
    m_ignore_exit_status = ignore_exit_status;
    m_ignore_exit_status_isSet = true;
}

bool OAIRunnable::is_ignore_exit_status_Set() const{
    return m_ignore_exit_status_isSet;
}

bool OAIRunnable::is_ignore_exit_status_Valid() const{
    return m_ignore_exit_status_isValid;
}

QMap<QString, QString> OAIRunnable::getLabels() const {
    return m_labels;
}
void OAIRunnable::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIRunnable::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIRunnable::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIScript OAIRunnable::getScript() const {
    return m_script;
}
void OAIRunnable::setScript(const OAIScript &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIRunnable::is_script_Set() const{
    return m_script_isSet;
}

bool OAIRunnable::is_script_Valid() const{
    return m_script_isValid;
}

QString OAIRunnable::getTimeout() const {
    return m_timeout;
}
void OAIRunnable::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIRunnable::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIRunnable::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIRunnable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_always_run_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_barrier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_exit_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_script.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunnable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
