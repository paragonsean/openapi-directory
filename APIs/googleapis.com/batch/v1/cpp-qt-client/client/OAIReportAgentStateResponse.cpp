/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportAgentStateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportAgentStateResponse::OAIReportAgentStateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportAgentStateResponse::OAIReportAgentStateResponse() {
    this->initializeModel();
}

OAIReportAgentStateResponse::~OAIReportAgentStateResponse() {}

void OAIReportAgentStateResponse::initializeModel() {

    m_default_report_interval_isSet = false;
    m_default_report_interval_isValid = false;

    m_min_report_interval_isSet = false;
    m_min_report_interval_isValid = false;

    m_tasks_isSet = false;
    m_tasks_isValid = false;

    m_use_batch_monitored_resource_isSet = false;
    m_use_batch_monitored_resource_isValid = false;
}

void OAIReportAgentStateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportAgentStateResponse::fromJsonObject(QJsonObject json) {

    m_default_report_interval_isValid = ::OpenAPI::fromJsonValue(m_default_report_interval, json[QString("defaultReportInterval")]);
    m_default_report_interval_isSet = !json[QString("defaultReportInterval")].isNull() && m_default_report_interval_isValid;

    m_min_report_interval_isValid = ::OpenAPI::fromJsonValue(m_min_report_interval, json[QString("minReportInterval")]);
    m_min_report_interval_isSet = !json[QString("minReportInterval")].isNull() && m_min_report_interval_isValid;

    m_tasks_isValid = ::OpenAPI::fromJsonValue(m_tasks, json[QString("tasks")]);
    m_tasks_isSet = !json[QString("tasks")].isNull() && m_tasks_isValid;

    m_use_batch_monitored_resource_isValid = ::OpenAPI::fromJsonValue(m_use_batch_monitored_resource, json[QString("useBatchMonitoredResource")]);
    m_use_batch_monitored_resource_isSet = !json[QString("useBatchMonitoredResource")].isNull() && m_use_batch_monitored_resource_isValid;
}

QString OAIReportAgentStateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportAgentStateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_default_report_interval_isSet) {
        obj.insert(QString("defaultReportInterval"), ::OpenAPI::toJsonValue(m_default_report_interval));
    }
    if (m_min_report_interval_isSet) {
        obj.insert(QString("minReportInterval"), ::OpenAPI::toJsonValue(m_min_report_interval));
    }
    if (m_tasks.size() > 0) {
        obj.insert(QString("tasks"), ::OpenAPI::toJsonValue(m_tasks));
    }
    if (m_use_batch_monitored_resource_isSet) {
        obj.insert(QString("useBatchMonitoredResource"), ::OpenAPI::toJsonValue(m_use_batch_monitored_resource));
    }
    return obj;
}

QString OAIReportAgentStateResponse::getDefaultReportInterval() const {
    return m_default_report_interval;
}
void OAIReportAgentStateResponse::setDefaultReportInterval(const QString &default_report_interval) {
    m_default_report_interval = default_report_interval;
    m_default_report_interval_isSet = true;
}

bool OAIReportAgentStateResponse::is_default_report_interval_Set() const{
    return m_default_report_interval_isSet;
}

bool OAIReportAgentStateResponse::is_default_report_interval_Valid() const{
    return m_default_report_interval_isValid;
}

QString OAIReportAgentStateResponse::getMinReportInterval() const {
    return m_min_report_interval;
}
void OAIReportAgentStateResponse::setMinReportInterval(const QString &min_report_interval) {
    m_min_report_interval = min_report_interval;
    m_min_report_interval_isSet = true;
}

bool OAIReportAgentStateResponse::is_min_report_interval_Set() const{
    return m_min_report_interval_isSet;
}

bool OAIReportAgentStateResponse::is_min_report_interval_Valid() const{
    return m_min_report_interval_isValid;
}

QList<OAIAgentTask> OAIReportAgentStateResponse::getTasks() const {
    return m_tasks;
}
void OAIReportAgentStateResponse::setTasks(const QList<OAIAgentTask> &tasks) {
    m_tasks = tasks;
    m_tasks_isSet = true;
}

bool OAIReportAgentStateResponse::is_tasks_Set() const{
    return m_tasks_isSet;
}

bool OAIReportAgentStateResponse::is_tasks_Valid() const{
    return m_tasks_isValid;
}

bool OAIReportAgentStateResponse::isUseBatchMonitoredResource() const {
    return m_use_batch_monitored_resource;
}
void OAIReportAgentStateResponse::setUseBatchMonitoredResource(const bool &use_batch_monitored_resource) {
    m_use_batch_monitored_resource = use_batch_monitored_resource;
    m_use_batch_monitored_resource_isSet = true;
}

bool OAIReportAgentStateResponse::is_use_batch_monitored_resource_Set() const{
    return m_use_batch_monitored_resource_isSet;
}

bool OAIReportAgentStateResponse::is_use_batch_monitored_resource_Valid() const{
    return m_use_batch_monitored_resource_isValid;
}

bool OAIReportAgentStateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_report_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_report_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_batch_monitored_resource_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportAgentStateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
