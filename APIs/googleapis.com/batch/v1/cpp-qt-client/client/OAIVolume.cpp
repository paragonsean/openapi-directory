/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolume::OAIVolume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolume::OAIVolume() {
    this->initializeModel();
}

OAIVolume::~OAIVolume() {}

void OAIVolume::initializeModel() {

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_gcs_isSet = false;
    m_gcs_isValid = false;

    m_mount_options_isSet = false;
    m_mount_options_isValid = false;

    m_mount_path_isSet = false;
    m_mount_path_isValid = false;

    m_nfs_isSet = false;
    m_nfs_isValid = false;
}

void OAIVolume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolume::fromJsonObject(QJsonObject json) {

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("deviceName")]);
    m_device_name_isSet = !json[QString("deviceName")].isNull() && m_device_name_isValid;

    m_gcs_isValid = ::OpenAPI::fromJsonValue(m_gcs, json[QString("gcs")]);
    m_gcs_isSet = !json[QString("gcs")].isNull() && m_gcs_isValid;

    m_mount_options_isValid = ::OpenAPI::fromJsonValue(m_mount_options, json[QString("mountOptions")]);
    m_mount_options_isSet = !json[QString("mountOptions")].isNull() && m_mount_options_isValid;

    m_mount_path_isValid = ::OpenAPI::fromJsonValue(m_mount_path, json[QString("mountPath")]);
    m_mount_path_isSet = !json[QString("mountPath")].isNull() && m_mount_path_isValid;

    m_nfs_isValid = ::OpenAPI::fromJsonValue(m_nfs, json[QString("nfs")]);
    m_nfs_isSet = !json[QString("nfs")].isNull() && m_nfs_isValid;
}

QString OAIVolume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolume::asJsonObject() const {
    QJsonObject obj;
    if (m_device_name_isSet) {
        obj.insert(QString("deviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_gcs.isSet()) {
        obj.insert(QString("gcs"), ::OpenAPI::toJsonValue(m_gcs));
    }
    if (m_mount_options.size() > 0) {
        obj.insert(QString("mountOptions"), ::OpenAPI::toJsonValue(m_mount_options));
    }
    if (m_mount_path_isSet) {
        obj.insert(QString("mountPath"), ::OpenAPI::toJsonValue(m_mount_path));
    }
    if (m_nfs.isSet()) {
        obj.insert(QString("nfs"), ::OpenAPI::toJsonValue(m_nfs));
    }
    return obj;
}

QString OAIVolume::getDeviceName() const {
    return m_device_name;
}
void OAIVolume::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIVolume::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIVolume::is_device_name_Valid() const{
    return m_device_name_isValid;
}

OAIGCS OAIVolume::getGcs() const {
    return m_gcs;
}
void OAIVolume::setGcs(const OAIGCS &gcs) {
    m_gcs = gcs;
    m_gcs_isSet = true;
}

bool OAIVolume::is_gcs_Set() const{
    return m_gcs_isSet;
}

bool OAIVolume::is_gcs_Valid() const{
    return m_gcs_isValid;
}

QList<QString> OAIVolume::getMountOptions() const {
    return m_mount_options;
}
void OAIVolume::setMountOptions(const QList<QString> &mount_options) {
    m_mount_options = mount_options;
    m_mount_options_isSet = true;
}

bool OAIVolume::is_mount_options_Set() const{
    return m_mount_options_isSet;
}

bool OAIVolume::is_mount_options_Valid() const{
    return m_mount_options_isValid;
}

QString OAIVolume::getMountPath() const {
    return m_mount_path;
}
void OAIVolume::setMountPath(const QString &mount_path) {
    m_mount_path = mount_path;
    m_mount_path_isSet = true;
}

bool OAIVolume::is_mount_path_Set() const{
    return m_mount_path_isSet;
}

bool OAIVolume::is_mount_path_Valid() const{
    return m_mount_path_isValid;
}

OAINFS OAIVolume::getNfs() const {
    return m_nfs;
}
void OAIVolume::setNfs(const OAINFS &nfs) {
    m_nfs = nfs;
    m_nfs_isSet = true;
}

bool OAIVolume::is_nfs_Set() const{
    return m_nfs_isSet;
}

bool OAIVolume::is_nfs_Valid() const{
    return m_nfs_isValid;
}

bool OAIVolume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolume::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
