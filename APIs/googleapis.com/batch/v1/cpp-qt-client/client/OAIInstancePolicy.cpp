/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstancePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstancePolicy::OAIInstancePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstancePolicy::OAIInstancePolicy() {
    this->initializeModel();
}

OAIInstancePolicy::~OAIInstancePolicy() {}

void OAIInstancePolicy::initializeModel() {

    m_accelerators_isSet = false;
    m_accelerators_isValid = false;

    m_boot_disk_isSet = false;
    m_boot_disk_isValid = false;

    m_disks_isSet = false;
    m_disks_isValid = false;

    m_machine_type_isSet = false;
    m_machine_type_isValid = false;

    m_min_cpu_platform_isSet = false;
    m_min_cpu_platform_isValid = false;

    m_provisioning_model_isSet = false;
    m_provisioning_model_isValid = false;

    m_reservation_isSet = false;
    m_reservation_isValid = false;
}

void OAIInstancePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstancePolicy::fromJsonObject(QJsonObject json) {

    m_accelerators_isValid = ::OpenAPI::fromJsonValue(m_accelerators, json[QString("accelerators")]);
    m_accelerators_isSet = !json[QString("accelerators")].isNull() && m_accelerators_isValid;

    m_boot_disk_isValid = ::OpenAPI::fromJsonValue(m_boot_disk, json[QString("bootDisk")]);
    m_boot_disk_isSet = !json[QString("bootDisk")].isNull() && m_boot_disk_isValid;

    m_disks_isValid = ::OpenAPI::fromJsonValue(m_disks, json[QString("disks")]);
    m_disks_isSet = !json[QString("disks")].isNull() && m_disks_isValid;

    m_machine_type_isValid = ::OpenAPI::fromJsonValue(m_machine_type, json[QString("machineType")]);
    m_machine_type_isSet = !json[QString("machineType")].isNull() && m_machine_type_isValid;

    m_min_cpu_platform_isValid = ::OpenAPI::fromJsonValue(m_min_cpu_platform, json[QString("minCpuPlatform")]);
    m_min_cpu_platform_isSet = !json[QString("minCpuPlatform")].isNull() && m_min_cpu_platform_isValid;

    m_provisioning_model_isValid = ::OpenAPI::fromJsonValue(m_provisioning_model, json[QString("provisioningModel")]);
    m_provisioning_model_isSet = !json[QString("provisioningModel")].isNull() && m_provisioning_model_isValid;

    m_reservation_isValid = ::OpenAPI::fromJsonValue(m_reservation, json[QString("reservation")]);
    m_reservation_isSet = !json[QString("reservation")].isNull() && m_reservation_isValid;
}

QString OAIInstancePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstancePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerators.size() > 0) {
        obj.insert(QString("accelerators"), ::OpenAPI::toJsonValue(m_accelerators));
    }
    if (m_boot_disk.isSet()) {
        obj.insert(QString("bootDisk"), ::OpenAPI::toJsonValue(m_boot_disk));
    }
    if (m_disks.size() > 0) {
        obj.insert(QString("disks"), ::OpenAPI::toJsonValue(m_disks));
    }
    if (m_machine_type_isSet) {
        obj.insert(QString("machineType"), ::OpenAPI::toJsonValue(m_machine_type));
    }
    if (m_min_cpu_platform_isSet) {
        obj.insert(QString("minCpuPlatform"), ::OpenAPI::toJsonValue(m_min_cpu_platform));
    }
    if (m_provisioning_model_isSet) {
        obj.insert(QString("provisioningModel"), ::OpenAPI::toJsonValue(m_provisioning_model));
    }
    if (m_reservation_isSet) {
        obj.insert(QString("reservation"), ::OpenAPI::toJsonValue(m_reservation));
    }
    return obj;
}

QList<OAIAccelerator> OAIInstancePolicy::getAccelerators() const {
    return m_accelerators;
}
void OAIInstancePolicy::setAccelerators(const QList<OAIAccelerator> &accelerators) {
    m_accelerators = accelerators;
    m_accelerators_isSet = true;
}

bool OAIInstancePolicy::is_accelerators_Set() const{
    return m_accelerators_isSet;
}

bool OAIInstancePolicy::is_accelerators_Valid() const{
    return m_accelerators_isValid;
}

OAIDisk OAIInstancePolicy::getBootDisk() const {
    return m_boot_disk;
}
void OAIInstancePolicy::setBootDisk(const OAIDisk &boot_disk) {
    m_boot_disk = boot_disk;
    m_boot_disk_isSet = true;
}

bool OAIInstancePolicy::is_boot_disk_Set() const{
    return m_boot_disk_isSet;
}

bool OAIInstancePolicy::is_boot_disk_Valid() const{
    return m_boot_disk_isValid;
}

QList<OAIAttachedDisk> OAIInstancePolicy::getDisks() const {
    return m_disks;
}
void OAIInstancePolicy::setDisks(const QList<OAIAttachedDisk> &disks) {
    m_disks = disks;
    m_disks_isSet = true;
}

bool OAIInstancePolicy::is_disks_Set() const{
    return m_disks_isSet;
}

bool OAIInstancePolicy::is_disks_Valid() const{
    return m_disks_isValid;
}

QString OAIInstancePolicy::getMachineType() const {
    return m_machine_type;
}
void OAIInstancePolicy::setMachineType(const QString &machine_type) {
    m_machine_type = machine_type;
    m_machine_type_isSet = true;
}

bool OAIInstancePolicy::is_machine_type_Set() const{
    return m_machine_type_isSet;
}

bool OAIInstancePolicy::is_machine_type_Valid() const{
    return m_machine_type_isValid;
}

QString OAIInstancePolicy::getMinCpuPlatform() const {
    return m_min_cpu_platform;
}
void OAIInstancePolicy::setMinCpuPlatform(const QString &min_cpu_platform) {
    m_min_cpu_platform = min_cpu_platform;
    m_min_cpu_platform_isSet = true;
}

bool OAIInstancePolicy::is_min_cpu_platform_Set() const{
    return m_min_cpu_platform_isSet;
}

bool OAIInstancePolicy::is_min_cpu_platform_Valid() const{
    return m_min_cpu_platform_isValid;
}

QString OAIInstancePolicy::getProvisioningModel() const {
    return m_provisioning_model;
}
void OAIInstancePolicy::setProvisioningModel(const QString &provisioning_model) {
    m_provisioning_model = provisioning_model;
    m_provisioning_model_isSet = true;
}

bool OAIInstancePolicy::is_provisioning_model_Set() const{
    return m_provisioning_model_isSet;
}

bool OAIInstancePolicy::is_provisioning_model_Valid() const{
    return m_provisioning_model_isValid;
}

QString OAIInstancePolicy::getReservation() const {
    return m_reservation;
}
void OAIInstancePolicy::setReservation(const QString &reservation) {
    m_reservation = reservation;
    m_reservation_isSet = true;
}

bool OAIInstancePolicy::is_reservation_Set() const{
    return m_reservation_isSet;
}

bool OAIInstancePolicy::is_reservation_Valid() const{
    return m_reservation_isValid;
}

bool OAIInstancePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_boot_disk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_cpu_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstancePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
