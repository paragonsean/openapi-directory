/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachedDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachedDisk::OAIAttachedDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachedDisk::OAIAttachedDisk() {
    this->initializeModel();
}

OAIAttachedDisk::~OAIAttachedDisk() {}

void OAIAttachedDisk::initializeModel() {

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_existing_disk_isSet = false;
    m_existing_disk_isValid = false;

    m_new_disk_isSet = false;
    m_new_disk_isValid = false;
}

void OAIAttachedDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachedDisk::fromJsonObject(QJsonObject json) {

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("deviceName")]);
    m_device_name_isSet = !json[QString("deviceName")].isNull() && m_device_name_isValid;

    m_existing_disk_isValid = ::OpenAPI::fromJsonValue(m_existing_disk, json[QString("existingDisk")]);
    m_existing_disk_isSet = !json[QString("existingDisk")].isNull() && m_existing_disk_isValid;

    m_new_disk_isValid = ::OpenAPI::fromJsonValue(m_new_disk, json[QString("newDisk")]);
    m_new_disk_isSet = !json[QString("newDisk")].isNull() && m_new_disk_isValid;
}

QString OAIAttachedDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachedDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_device_name_isSet) {
        obj.insert(QString("deviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_existing_disk_isSet) {
        obj.insert(QString("existingDisk"), ::OpenAPI::toJsonValue(m_existing_disk));
    }
    if (m_new_disk.isSet()) {
        obj.insert(QString("newDisk"), ::OpenAPI::toJsonValue(m_new_disk));
    }
    return obj;
}

QString OAIAttachedDisk::getDeviceName() const {
    return m_device_name;
}
void OAIAttachedDisk::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIAttachedDisk::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIAttachedDisk::is_device_name_Valid() const{
    return m_device_name_isValid;
}

QString OAIAttachedDisk::getExistingDisk() const {
    return m_existing_disk;
}
void OAIAttachedDisk::setExistingDisk(const QString &existing_disk) {
    m_existing_disk = existing_disk;
    m_existing_disk_isSet = true;
}

bool OAIAttachedDisk::is_existing_disk_Set() const{
    return m_existing_disk_isSet;
}

bool OAIAttachedDisk::is_existing_disk_Valid() const{
    return m_existing_disk_isValid;
}

OAIDisk OAIAttachedDisk::getNewDisk() const {
    return m_new_disk;
}
void OAIAttachedDisk::setNewDisk(const OAIDisk &new_disk) {
    m_new_disk = new_disk;
    m_new_disk_isSet = true;
}

bool OAIAttachedDisk::is_new_disk_Set() const{
    return m_new_disk_isSet;
}

bool OAIAttachedDisk::is_new_disk_Valid() const{
    return m_new_disk_isValid;
}

bool OAIAttachedDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_existing_disk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_disk.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachedDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
