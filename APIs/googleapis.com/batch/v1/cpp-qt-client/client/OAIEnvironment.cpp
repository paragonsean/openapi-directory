/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironment::OAIEnvironment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironment::OAIEnvironment() {
    this->initializeModel();
}

OAIEnvironment::~OAIEnvironment() {}

void OAIEnvironment::initializeModel() {

    m_encrypted_variables_isSet = false;
    m_encrypted_variables_isValid = false;

    m_secret_variables_isSet = false;
    m_secret_variables_isValid = false;

    m_variables_isSet = false;
    m_variables_isValid = false;
}

void OAIEnvironment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironment::fromJsonObject(QJsonObject json) {

    m_encrypted_variables_isValid = ::OpenAPI::fromJsonValue(m_encrypted_variables, json[QString("encryptedVariables")]);
    m_encrypted_variables_isSet = !json[QString("encryptedVariables")].isNull() && m_encrypted_variables_isValid;

    m_secret_variables_isValid = ::OpenAPI::fromJsonValue(m_secret_variables, json[QString("secretVariables")]);
    m_secret_variables_isSet = !json[QString("secretVariables")].isNull() && m_secret_variables_isValid;

    m_variables_isValid = ::OpenAPI::fromJsonValue(m_variables, json[QString("variables")]);
    m_variables_isSet = !json[QString("variables")].isNull() && m_variables_isValid;
}

QString OAIEnvironment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironment::asJsonObject() const {
    QJsonObject obj;
    if (m_encrypted_variables.isSet()) {
        obj.insert(QString("encryptedVariables"), ::OpenAPI::toJsonValue(m_encrypted_variables));
    }
    if (m_secret_variables.size() > 0) {
        obj.insert(QString("secretVariables"), ::OpenAPI::toJsonValue(m_secret_variables));
    }
    if (m_variables.size() > 0) {
        obj.insert(QString("variables"), ::OpenAPI::toJsonValue(m_variables));
    }
    return obj;
}

OAIKMSEnvMap OAIEnvironment::getEncryptedVariables() const {
    return m_encrypted_variables;
}
void OAIEnvironment::setEncryptedVariables(const OAIKMSEnvMap &encrypted_variables) {
    m_encrypted_variables = encrypted_variables;
    m_encrypted_variables_isSet = true;
}

bool OAIEnvironment::is_encrypted_variables_Set() const{
    return m_encrypted_variables_isSet;
}

bool OAIEnvironment::is_encrypted_variables_Valid() const{
    return m_encrypted_variables_isValid;
}

QMap<QString, QString> OAIEnvironment::getSecretVariables() const {
    return m_secret_variables;
}
void OAIEnvironment::setSecretVariables(const QMap<QString, QString> &secret_variables) {
    m_secret_variables = secret_variables;
    m_secret_variables_isSet = true;
}

bool OAIEnvironment::is_secret_variables_Set() const{
    return m_secret_variables_isSet;
}

bool OAIEnvironment::is_secret_variables_Valid() const{
    return m_secret_variables_isValid;
}

QMap<QString, QString> OAIEnvironment::getVariables() const {
    return m_variables;
}
void OAIEnvironment::setVariables(const QMap<QString, QString> &variables) {
    m_variables = variables;
    m_variables_isSet = true;
}

bool OAIEnvironment::is_variables_Set() const{
    return m_variables_isSet;
}

bool OAIEnvironment::is_variables_Valid() const{
    return m_variables_isValid;
}

bool OAIEnvironment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encrypted_variables.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
