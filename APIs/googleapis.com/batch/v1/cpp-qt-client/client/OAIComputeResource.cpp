/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputeResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputeResource::OAIComputeResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputeResource::OAIComputeResource() {
    this->initializeModel();
}

OAIComputeResource::~OAIComputeResource() {}

void OAIComputeResource::initializeModel() {

    m_boot_disk_mib_isSet = false;
    m_boot_disk_mib_isValid = false;

    m_cpu_milli_isSet = false;
    m_cpu_milli_isValid = false;

    m_memory_mib_isSet = false;
    m_memory_mib_isValid = false;
}

void OAIComputeResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComputeResource::fromJsonObject(QJsonObject json) {

    m_boot_disk_mib_isValid = ::OpenAPI::fromJsonValue(m_boot_disk_mib, json[QString("bootDiskMib")]);
    m_boot_disk_mib_isSet = !json[QString("bootDiskMib")].isNull() && m_boot_disk_mib_isValid;

    m_cpu_milli_isValid = ::OpenAPI::fromJsonValue(m_cpu_milli, json[QString("cpuMilli")]);
    m_cpu_milli_isSet = !json[QString("cpuMilli")].isNull() && m_cpu_milli_isValid;

    m_memory_mib_isValid = ::OpenAPI::fromJsonValue(m_memory_mib, json[QString("memoryMib")]);
    m_memory_mib_isSet = !json[QString("memoryMib")].isNull() && m_memory_mib_isValid;
}

QString OAIComputeResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComputeResource::asJsonObject() const {
    QJsonObject obj;
    if (m_boot_disk_mib_isSet) {
        obj.insert(QString("bootDiskMib"), ::OpenAPI::toJsonValue(m_boot_disk_mib));
    }
    if (m_cpu_milli_isSet) {
        obj.insert(QString("cpuMilli"), ::OpenAPI::toJsonValue(m_cpu_milli));
    }
    if (m_memory_mib_isSet) {
        obj.insert(QString("memoryMib"), ::OpenAPI::toJsonValue(m_memory_mib));
    }
    return obj;
}

QString OAIComputeResource::getBootDiskMib() const {
    return m_boot_disk_mib;
}
void OAIComputeResource::setBootDiskMib(const QString &boot_disk_mib) {
    m_boot_disk_mib = boot_disk_mib;
    m_boot_disk_mib_isSet = true;
}

bool OAIComputeResource::is_boot_disk_mib_Set() const{
    return m_boot_disk_mib_isSet;
}

bool OAIComputeResource::is_boot_disk_mib_Valid() const{
    return m_boot_disk_mib_isValid;
}

QString OAIComputeResource::getCpuMilli() const {
    return m_cpu_milli;
}
void OAIComputeResource::setCpuMilli(const QString &cpu_milli) {
    m_cpu_milli = cpu_milli;
    m_cpu_milli_isSet = true;
}

bool OAIComputeResource::is_cpu_milli_Set() const{
    return m_cpu_milli_isSet;
}

bool OAIComputeResource::is_cpu_milli_Valid() const{
    return m_cpu_milli_isValid;
}

QString OAIComputeResource::getMemoryMib() const {
    return m_memory_mib;
}
void OAIComputeResource::setMemoryMib(const QString &memory_mib) {
    m_memory_mib = memory_mib;
    m_memory_mib_isSet = true;
}

bool OAIComputeResource::is_memory_mib_Set() const{
    return m_memory_mib_isSet;
}

bool OAIComputeResource::is_memory_mib_Valid() const{
    return m_memory_mib_isValid;
}

bool OAIComputeResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boot_disk_mib_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_milli_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_mib_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComputeResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
