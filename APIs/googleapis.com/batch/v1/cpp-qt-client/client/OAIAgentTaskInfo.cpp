/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgentTaskInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgentTaskInfo::OAIAgentTaskInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgentTaskInfo::OAIAgentTaskInfo() {
    this->initializeModel();
}

OAIAgentTaskInfo::~OAIAgentTaskInfo() {}

void OAIAgentTaskInfo::initializeModel() {

    m_runnable_isSet = false;
    m_runnable_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;

    m_task_status_isSet = false;
    m_task_status_isValid = false;
}

void OAIAgentTaskInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAgentTaskInfo::fromJsonObject(QJsonObject json) {

    m_runnable_isValid = ::OpenAPI::fromJsonValue(m_runnable, json[QString("runnable")]);
    m_runnable_isSet = !json[QString("runnable")].isNull() && m_runnable_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("taskId")]);
    m_task_id_isSet = !json[QString("taskId")].isNull() && m_task_id_isValid;

    m_task_status_isValid = ::OpenAPI::fromJsonValue(m_task_status, json[QString("taskStatus")]);
    m_task_status_isSet = !json[QString("taskStatus")].isNull() && m_task_status_isValid;
}

QString OAIAgentTaskInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAgentTaskInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_runnable_isSet) {
        obj.insert(QString("runnable"), ::OpenAPI::toJsonValue(m_runnable));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("taskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    if (m_task_status.isSet()) {
        obj.insert(QString("taskStatus"), ::OpenAPI::toJsonValue(m_task_status));
    }
    return obj;
}

QString OAIAgentTaskInfo::getRunnable() const {
    return m_runnable;
}
void OAIAgentTaskInfo::setRunnable(const QString &runnable) {
    m_runnable = runnable;
    m_runnable_isSet = true;
}

bool OAIAgentTaskInfo::is_runnable_Set() const{
    return m_runnable_isSet;
}

bool OAIAgentTaskInfo::is_runnable_Valid() const{
    return m_runnable_isValid;
}

QString OAIAgentTaskInfo::getTaskId() const {
    return m_task_id;
}
void OAIAgentTaskInfo::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAIAgentTaskInfo::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAIAgentTaskInfo::is_task_id_Valid() const{
    return m_task_id_isValid;
}

OAITaskStatus OAIAgentTaskInfo::getTaskStatus() const {
    return m_task_status;
}
void OAIAgentTaskInfo::setTaskStatus(const OAITaskStatus &task_status) {
    m_task_status = task_status;
    m_task_status_isSet = true;
}

bool OAIAgentTaskInfo::is_task_status_Set() const{
    return m_task_status_isSet;
}

bool OAIAgentTaskInfo::is_task_status_Valid() const{
    return m_task_status_isValid;
}

bool OAIAgentTaskInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_runnable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAgentTaskInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
