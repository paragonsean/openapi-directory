/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgentInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgentInfo::OAIAgentInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgentInfo::OAIAgentInfo() {
    this->initializeModel();
}

OAIAgentInfo::~OAIAgentInfo() {}

void OAIAgentInfo::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_report_time_isSet = false;
    m_report_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_task_group_id_isSet = false;
    m_task_group_id_isValid = false;

    m_tasks_isSet = false;
    m_tasks_isValid = false;
}

void OAIAgentInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAgentInfo::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_report_time_isValid = ::OpenAPI::fromJsonValue(m_report_time, json[QString("reportTime")]);
    m_report_time_isSet = !json[QString("reportTime")].isNull() && m_report_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_task_group_id_isValid = ::OpenAPI::fromJsonValue(m_task_group_id, json[QString("taskGroupId")]);
    m_task_group_id_isSet = !json[QString("taskGroupId")].isNull() && m_task_group_id_isValid;

    m_tasks_isValid = ::OpenAPI::fromJsonValue(m_tasks, json[QString("tasks")]);
    m_tasks_isSet = !json[QString("tasks")].isNull() && m_tasks_isValid;
}

QString OAIAgentInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAgentInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_report_time_isSet) {
        obj.insert(QString("reportTime"), ::OpenAPI::toJsonValue(m_report_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_task_group_id_isSet) {
        obj.insert(QString("taskGroupId"), ::OpenAPI::toJsonValue(m_task_group_id));
    }
    if (m_tasks.size() > 0) {
        obj.insert(QString("tasks"), ::OpenAPI::toJsonValue(m_tasks));
    }
    return obj;
}

QString OAIAgentInfo::getJobId() const {
    return m_job_id;
}
void OAIAgentInfo::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIAgentInfo::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIAgentInfo::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIAgentInfo::getReportTime() const {
    return m_report_time;
}
void OAIAgentInfo::setReportTime(const QString &report_time) {
    m_report_time = report_time;
    m_report_time_isSet = true;
}

bool OAIAgentInfo::is_report_time_Set() const{
    return m_report_time_isSet;
}

bool OAIAgentInfo::is_report_time_Valid() const{
    return m_report_time_isValid;
}

QString OAIAgentInfo::getState() const {
    return m_state;
}
void OAIAgentInfo::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAgentInfo::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAgentInfo::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAgentInfo::getTaskGroupId() const {
    return m_task_group_id;
}
void OAIAgentInfo::setTaskGroupId(const QString &task_group_id) {
    m_task_group_id = task_group_id;
    m_task_group_id_isSet = true;
}

bool OAIAgentInfo::is_task_group_id_Set() const{
    return m_task_group_id_isSet;
}

bool OAIAgentInfo::is_task_group_id_Valid() const{
    return m_task_group_id_isValid;
}

QList<OAIAgentTaskInfo> OAIAgentInfo::getTasks() const {
    return m_tasks;
}
void OAIAgentInfo::setTasks(const QList<OAIAgentTaskInfo> &tasks) {
    m_tasks = tasks;
    m_tasks_isSet = true;
}

bool OAIAgentInfo::is_tasks_Set() const{
    return m_tasks_isSet;
}

bool OAIAgentInfo::is_tasks_Valid() const{
    return m_tasks_isValid;
}

bool OAIAgentInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tasks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAgentInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
