/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgentMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgentMetadata::OAIAgentMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgentMetadata::OAIAgentMetadata() {
    this->initializeModel();
}

OAIAgentMetadata::~OAIAgentMetadata() {}

void OAIAgentMetadata::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_image_version_isSet = false;
    m_image_version_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_instance_preemption_notice_received_isSet = false;
    m_instance_preemption_notice_received_isValid = false;

    m_os_release_isSet = false;
    m_os_release_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIAgentMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAgentMetadata::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_image_version_isValid = ::OpenAPI::fromJsonValue(m_image_version, json[QString("imageVersion")]);
    m_image_version_isSet = !json[QString("imageVersion")].isNull() && m_image_version_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_instance_preemption_notice_received_isValid = ::OpenAPI::fromJsonValue(m_instance_preemption_notice_received, json[QString("instancePreemptionNoticeReceived")]);
    m_instance_preemption_notice_received_isSet = !json[QString("instancePreemptionNoticeReceived")].isNull() && m_instance_preemption_notice_received_isValid;

    m_os_release_isValid = ::OpenAPI::fromJsonValue(m_os_release, json[QString("osRelease")]);
    m_os_release_isSet = !json[QString("osRelease")].isNull() && m_os_release_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAIAgentMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAgentMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_creator_isSet) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_image_version_isSet) {
        obj.insert(QString("imageVersion"), ::OpenAPI::toJsonValue(m_image_version));
    }
    if (m_instance_isSet) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_instance_preemption_notice_received_isSet) {
        obj.insert(QString("instancePreemptionNoticeReceived"), ::OpenAPI::toJsonValue(m_instance_preemption_notice_received));
    }
    if (m_os_release.size() > 0) {
        obj.insert(QString("osRelease"), ::OpenAPI::toJsonValue(m_os_release));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QString OAIAgentMetadata::getCreationTime() const {
    return m_creation_time;
}
void OAIAgentMetadata::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIAgentMetadata::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIAgentMetadata::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIAgentMetadata::getCreator() const {
    return m_creator;
}
void OAIAgentMetadata::setCreator(const QString &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIAgentMetadata::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIAgentMetadata::is_creator_Valid() const{
    return m_creator_isValid;
}

QString OAIAgentMetadata::getImageVersion() const {
    return m_image_version;
}
void OAIAgentMetadata::setImageVersion(const QString &image_version) {
    m_image_version = image_version;
    m_image_version_isSet = true;
}

bool OAIAgentMetadata::is_image_version_Set() const{
    return m_image_version_isSet;
}

bool OAIAgentMetadata::is_image_version_Valid() const{
    return m_image_version_isValid;
}

QString OAIAgentMetadata::getInstance() const {
    return m_instance;
}
void OAIAgentMetadata::setInstance(const QString &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAIAgentMetadata::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIAgentMetadata::is_instance_Valid() const{
    return m_instance_isValid;
}

QString OAIAgentMetadata::getInstanceId() const {
    return m_instance_id;
}
void OAIAgentMetadata::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIAgentMetadata::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIAgentMetadata::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

bool OAIAgentMetadata::isInstancePreemptionNoticeReceived() const {
    return m_instance_preemption_notice_received;
}
void OAIAgentMetadata::setInstancePreemptionNoticeReceived(const bool &instance_preemption_notice_received) {
    m_instance_preemption_notice_received = instance_preemption_notice_received;
    m_instance_preemption_notice_received_isSet = true;
}

bool OAIAgentMetadata::is_instance_preemption_notice_received_Set() const{
    return m_instance_preemption_notice_received_isSet;
}

bool OAIAgentMetadata::is_instance_preemption_notice_received_Valid() const{
    return m_instance_preemption_notice_received_isValid;
}

QMap<QString, QString> OAIAgentMetadata::getOsRelease() const {
    return m_os_release;
}
void OAIAgentMetadata::setOsRelease(const QMap<QString, QString> &os_release) {
    m_os_release = os_release;
    m_os_release_isSet = true;
}

bool OAIAgentMetadata::is_os_release_Set() const{
    return m_os_release_isSet;
}

bool OAIAgentMetadata::is_os_release_Valid() const{
    return m_os_release_isValid;
}

QString OAIAgentMetadata::getVersion() const {
    return m_version;
}
void OAIAgentMetadata::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIAgentMetadata::is_version_Set() const{
    return m_version_isSet;
}

bool OAIAgentMetadata::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIAgentMetadata::getZone() const {
    return m_zone;
}
void OAIAgentMetadata::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIAgentMetadata::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIAgentMetadata::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIAgentMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_preemption_notice_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_release.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAgentMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
