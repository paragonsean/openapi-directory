/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllocationPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllocationPolicy::OAIAllocationPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllocationPolicy::OAIAllocationPolicy() {
    this->initializeModel();
}

OAIAllocationPolicy::~OAIAllocationPolicy() {}

void OAIAllocationPolicy::initializeModel() {

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_placement_isSet = false;
    m_placement_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIAllocationPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllocationPolicy::fromJsonObject(QJsonObject json) {

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_placement_isValid = ::OpenAPI::fromJsonValue(m_placement, json[QString("placement")]);
    m_placement_isSet = !json[QString("placement")].isNull() && m_placement_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIAllocationPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllocationPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_instances.size() > 0) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_network.isSet()) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_placement.isSet()) {
        obj.insert(QString("placement"), ::OpenAPI::toJsonValue(m_placement));
    }
    if (m_service_account.isSet()) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList<OAIInstancePolicyOrTemplate> OAIAllocationPolicy::getInstances() const {
    return m_instances;
}
void OAIAllocationPolicy::setInstances(const QList<OAIInstancePolicyOrTemplate> &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAIAllocationPolicy::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIAllocationPolicy::is_instances_Valid() const{
    return m_instances_isValid;
}

QMap<QString, QString> OAIAllocationPolicy::getLabels() const {
    return m_labels;
}
void OAIAllocationPolicy::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIAllocationPolicy::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIAllocationPolicy::is_labels_Valid() const{
    return m_labels_isValid;
}

OAILocationPolicy OAIAllocationPolicy::getLocation() const {
    return m_location;
}
void OAIAllocationPolicy::setLocation(const OAILocationPolicy &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIAllocationPolicy::is_location_Set() const{
    return m_location_isSet;
}

bool OAIAllocationPolicy::is_location_Valid() const{
    return m_location_isValid;
}

OAINetworkPolicy OAIAllocationPolicy::getNetwork() const {
    return m_network;
}
void OAIAllocationPolicy::setNetwork(const OAINetworkPolicy &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIAllocationPolicy::is_network_Set() const{
    return m_network_isSet;
}

bool OAIAllocationPolicy::is_network_Valid() const{
    return m_network_isValid;
}

OAIPlacementPolicy OAIAllocationPolicy::getPlacement() const {
    return m_placement;
}
void OAIAllocationPolicy::setPlacement(const OAIPlacementPolicy &placement) {
    m_placement = placement;
    m_placement_isSet = true;
}

bool OAIAllocationPolicy::is_placement_Set() const{
    return m_placement_isSet;
}

bool OAIAllocationPolicy::is_placement_Valid() const{
    return m_placement_isValid;
}

OAIServiceAccount OAIAllocationPolicy::getServiceAccount() const {
    return m_service_account;
}
void OAIAllocationPolicy::setServiceAccount(const OAIServiceAccount &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIAllocationPolicy::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIAllocationPolicy::is_service_account_Valid() const{
    return m_service_account_isValid;
}

QList<QString> OAIAllocationPolicy::getTags() const {
    return m_tags;
}
void OAIAllocationPolicy::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAllocationPolicy::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAllocationPolicy::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIAllocationPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllocationPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
