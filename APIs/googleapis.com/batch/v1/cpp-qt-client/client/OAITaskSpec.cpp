/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskSpec::OAITaskSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskSpec::OAITaskSpec() {
    this->initializeModel();
}

OAITaskSpec::~OAITaskSpec() {}

void OAITaskSpec::initializeModel() {

    m_compute_resource_isSet = false;
    m_compute_resource_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_environments_isSet = false;
    m_environments_isValid = false;

    m_lifecycle_policies_isSet = false;
    m_lifecycle_policies_isValid = false;

    m_max_retry_count_isSet = false;
    m_max_retry_count_isValid = false;

    m_max_run_duration_isSet = false;
    m_max_run_duration_isValid = false;

    m_runnables_isSet = false;
    m_runnables_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;
}

void OAITaskSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskSpec::fromJsonObject(QJsonObject json) {

    m_compute_resource_isValid = ::OpenAPI::fromJsonValue(m_compute_resource, json[QString("computeResource")]);
    m_compute_resource_isSet = !json[QString("computeResource")].isNull() && m_compute_resource_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_environments_isValid = ::OpenAPI::fromJsonValue(m_environments, json[QString("environments")]);
    m_environments_isSet = !json[QString("environments")].isNull() && m_environments_isValid;

    m_lifecycle_policies_isValid = ::OpenAPI::fromJsonValue(m_lifecycle_policies, json[QString("lifecyclePolicies")]);
    m_lifecycle_policies_isSet = !json[QString("lifecyclePolicies")].isNull() && m_lifecycle_policies_isValid;

    m_max_retry_count_isValid = ::OpenAPI::fromJsonValue(m_max_retry_count, json[QString("maxRetryCount")]);
    m_max_retry_count_isSet = !json[QString("maxRetryCount")].isNull() && m_max_retry_count_isValid;

    m_max_run_duration_isValid = ::OpenAPI::fromJsonValue(m_max_run_duration, json[QString("maxRunDuration")]);
    m_max_run_duration_isSet = !json[QString("maxRunDuration")].isNull() && m_max_run_duration_isValid;

    m_runnables_isValid = ::OpenAPI::fromJsonValue(m_runnables, json[QString("runnables")]);
    m_runnables_isSet = !json[QString("runnables")].isNull() && m_runnables_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("volumes")]);
    m_volumes_isSet = !json[QString("volumes")].isNull() && m_volumes_isValid;
}

QString OAITaskSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_compute_resource.isSet()) {
        obj.insert(QString("computeResource"), ::OpenAPI::toJsonValue(m_compute_resource));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_environments.size() > 0) {
        obj.insert(QString("environments"), ::OpenAPI::toJsonValue(m_environments));
    }
    if (m_lifecycle_policies.size() > 0) {
        obj.insert(QString("lifecyclePolicies"), ::OpenAPI::toJsonValue(m_lifecycle_policies));
    }
    if (m_max_retry_count_isSet) {
        obj.insert(QString("maxRetryCount"), ::OpenAPI::toJsonValue(m_max_retry_count));
    }
    if (m_max_run_duration_isSet) {
        obj.insert(QString("maxRunDuration"), ::OpenAPI::toJsonValue(m_max_run_duration));
    }
    if (m_runnables.size() > 0) {
        obj.insert(QString("runnables"), ::OpenAPI::toJsonValue(m_runnables));
    }
    if (m_volumes.size() > 0) {
        obj.insert(QString("volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    return obj;
}

OAIComputeResource OAITaskSpec::getComputeResource() const {
    return m_compute_resource;
}
void OAITaskSpec::setComputeResource(const OAIComputeResource &compute_resource) {
    m_compute_resource = compute_resource;
    m_compute_resource_isSet = true;
}

bool OAITaskSpec::is_compute_resource_Set() const{
    return m_compute_resource_isSet;
}

bool OAITaskSpec::is_compute_resource_Valid() const{
    return m_compute_resource_isValid;
}

OAIEnvironment OAITaskSpec::getEnvironment() const {
    return m_environment;
}
void OAITaskSpec::setEnvironment(const OAIEnvironment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAITaskSpec::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAITaskSpec::is_environment_Valid() const{
    return m_environment_isValid;
}

QMap<QString, QString> OAITaskSpec::getEnvironments() const {
    return m_environments;
}
void OAITaskSpec::setEnvironments(const QMap<QString, QString> &environments) {
    m_environments = environments;
    m_environments_isSet = true;
}

bool OAITaskSpec::is_environments_Set() const{
    return m_environments_isSet;
}

bool OAITaskSpec::is_environments_Valid() const{
    return m_environments_isValid;
}

QList<OAILifecyclePolicy> OAITaskSpec::getLifecyclePolicies() const {
    return m_lifecycle_policies;
}
void OAITaskSpec::setLifecyclePolicies(const QList<OAILifecyclePolicy> &lifecycle_policies) {
    m_lifecycle_policies = lifecycle_policies;
    m_lifecycle_policies_isSet = true;
}

bool OAITaskSpec::is_lifecycle_policies_Set() const{
    return m_lifecycle_policies_isSet;
}

bool OAITaskSpec::is_lifecycle_policies_Valid() const{
    return m_lifecycle_policies_isValid;
}

qint32 OAITaskSpec::getMaxRetryCount() const {
    return m_max_retry_count;
}
void OAITaskSpec::setMaxRetryCount(const qint32 &max_retry_count) {
    m_max_retry_count = max_retry_count;
    m_max_retry_count_isSet = true;
}

bool OAITaskSpec::is_max_retry_count_Set() const{
    return m_max_retry_count_isSet;
}

bool OAITaskSpec::is_max_retry_count_Valid() const{
    return m_max_retry_count_isValid;
}

QString OAITaskSpec::getMaxRunDuration() const {
    return m_max_run_duration;
}
void OAITaskSpec::setMaxRunDuration(const QString &max_run_duration) {
    m_max_run_duration = max_run_duration;
    m_max_run_duration_isSet = true;
}

bool OAITaskSpec::is_max_run_duration_Set() const{
    return m_max_run_duration_isSet;
}

bool OAITaskSpec::is_max_run_duration_Valid() const{
    return m_max_run_duration_isValid;
}

QList<OAIRunnable> OAITaskSpec::getRunnables() const {
    return m_runnables;
}
void OAITaskSpec::setRunnables(const QList<OAIRunnable> &runnables) {
    m_runnables = runnables;
    m_runnables_isSet = true;
}

bool OAITaskSpec::is_runnables_Set() const{
    return m_runnables_isSet;
}

bool OAITaskSpec::is_runnables_Valid() const{
    return m_runnables_isValid;
}

QList<OAIVolume> OAITaskSpec::getVolumes() const {
    return m_volumes;
}
void OAITaskSpec::setVolumes(const QList<OAIVolume> &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAITaskSpec::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAITaskSpec::is_volumes_Valid() const{
    return m_volumes_isValid;
}

bool OAITaskSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compute_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_retry_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_run_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runnables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
