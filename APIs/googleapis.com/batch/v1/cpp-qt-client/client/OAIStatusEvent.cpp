/**
 * Batch API
 * An API to manage the running of batch resources on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatusEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatusEvent::OAIStatusEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatusEvent::OAIStatusEvent() {
    this->initializeModel();
}

OAIStatusEvent::~OAIStatusEvent() {}

void OAIStatusEvent::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_time_isSet = false;
    m_event_time_isValid = false;

    m_task_execution_isSet = false;
    m_task_execution_isValid = false;

    m_task_state_isSet = false;
    m_task_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIStatusEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatusEvent::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_time_isValid = ::OpenAPI::fromJsonValue(m_event_time, json[QString("eventTime")]);
    m_event_time_isSet = !json[QString("eventTime")].isNull() && m_event_time_isValid;

    m_task_execution_isValid = ::OpenAPI::fromJsonValue(m_task_execution, json[QString("taskExecution")]);
    m_task_execution_isSet = !json[QString("taskExecution")].isNull() && m_task_execution_isValid;

    m_task_state_isValid = ::OpenAPI::fromJsonValue(m_task_state, json[QString("taskState")]);
    m_task_state_isSet = !json[QString("taskState")].isNull() && m_task_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIStatusEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatusEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_time_isSet) {
        obj.insert(QString("eventTime"), ::OpenAPI::toJsonValue(m_event_time));
    }
    if (m_task_execution.isSet()) {
        obj.insert(QString("taskExecution"), ::OpenAPI::toJsonValue(m_task_execution));
    }
    if (m_task_state_isSet) {
        obj.insert(QString("taskState"), ::OpenAPI::toJsonValue(m_task_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIStatusEvent::getDescription() const {
    return m_description;
}
void OAIStatusEvent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStatusEvent::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStatusEvent::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIStatusEvent::getEventTime() const {
    return m_event_time;
}
void OAIStatusEvent::setEventTime(const QString &event_time) {
    m_event_time = event_time;
    m_event_time_isSet = true;
}

bool OAIStatusEvent::is_event_time_Set() const{
    return m_event_time_isSet;
}

bool OAIStatusEvent::is_event_time_Valid() const{
    return m_event_time_isValid;
}

OAITaskExecution OAIStatusEvent::getTaskExecution() const {
    return m_task_execution;
}
void OAIStatusEvent::setTaskExecution(const OAITaskExecution &task_execution) {
    m_task_execution = task_execution;
    m_task_execution_isSet = true;
}

bool OAIStatusEvent::is_task_execution_Set() const{
    return m_task_execution_isSet;
}

bool OAIStatusEvent::is_task_execution_Valid() const{
    return m_task_execution_isValid;
}

QString OAIStatusEvent::getTaskState() const {
    return m_task_state;
}
void OAIStatusEvent::setTaskState(const QString &task_state) {
    m_task_state = task_state;
    m_task_state_isSet = true;
}

bool OAIStatusEvent::is_task_state_Set() const{
    return m_task_state_isSet;
}

bool OAIStatusEvent::is_task_state_Valid() const{
    return m_task_state_isValid;
}

QString OAIStatusEvent::getType() const {
    return m_type;
}
void OAIStatusEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStatusEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStatusEvent::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIStatusEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_execution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatusEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
