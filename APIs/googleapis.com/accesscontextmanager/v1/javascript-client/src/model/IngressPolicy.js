/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IngressFrom from './IngressFrom';
import IngressTo from './IngressTo';

/**
 * The IngressPolicy model module.
 * @module model/IngressPolicy
 * @version v1
 */
class IngressPolicy {
    /**
     * Constructs a new <code>IngressPolicy</code>.
     * Policy for ingress into ServicePerimeter. IngressPolicies match requests based on &#x60;ingress_from&#x60; and &#x60;ingress_to&#x60; stanzas. For an ingress policy to match, both the &#x60;ingress_from&#x60; and &#x60;ingress_to&#x60; stanzas must be matched. If an IngressPolicy matches a request, the request is allowed through the perimeter boundary from outside the perimeter. For example, access from the internet can be allowed either based on an AccessLevel or, for traffic hosted on Google Cloud, the project of the source network. For access from private networks, using the project of the hosting network is required. Individual ingress policies can be limited by restricting which services and/or actions they match using the &#x60;ingress_to&#x60; field.
     * @alias module:model/IngressPolicy
     */
    constructor() { 
        
        IngressPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IngressPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IngressPolicy} obj Optional instance to populate.
     * @return {module:model/IngressPolicy} The populated <code>IngressPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IngressPolicy();

            if (data.hasOwnProperty('ingressFrom')) {
                obj['ingressFrom'] = IngressFrom.constructFromObject(data['ingressFrom']);
            }
            if (data.hasOwnProperty('ingressTo')) {
                obj['ingressTo'] = IngressTo.constructFromObject(data['ingressTo']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IngressPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IngressPolicy</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ingressFrom`
        if (data['ingressFrom']) { // data not null
          IngressFrom.validateJSON(data['ingressFrom']);
        }
        // validate the optional field `ingressTo`
        if (data['ingressTo']) { // data not null
          IngressTo.validateJSON(data['ingressTo']);
        }

        return true;
    }


}



/**
 * @member {module:model/IngressFrom} ingressFrom
 */
IngressPolicy.prototype['ingressFrom'] = undefined;

/**
 * @member {module:model/IngressTo} ingressTo
 */
IngressPolicy.prototype['ingressTo'] = undefined;






export default IngressPolicy;

