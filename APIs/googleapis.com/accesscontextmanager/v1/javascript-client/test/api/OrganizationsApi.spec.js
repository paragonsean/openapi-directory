/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AccessContextManagerApi);
  }
}(this, function(expect, AccessContextManagerApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AccessContextManagerApi.OrganizationsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OrganizationsApi', function() {
    describe('accesscontextmanagerOrganizationsGcpUserAccessBindingsCreate', function() {
      it('should call accesscontextmanagerOrganizationsGcpUserAccessBindingsCreate successfully', function(done) {
        //uncomment below and update the code to test accesscontextmanagerOrganizationsGcpUserAccessBindingsCreate
        //instance.accesscontextmanagerOrganizationsGcpUserAccessBindingsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('accesscontextmanagerOrganizationsGcpUserAccessBindingsDelete', function() {
      it('should call accesscontextmanagerOrganizationsGcpUserAccessBindingsDelete successfully', function(done) {
        //uncomment below and update the code to test accesscontextmanagerOrganizationsGcpUserAccessBindingsDelete
        //instance.accesscontextmanagerOrganizationsGcpUserAccessBindingsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('accesscontextmanagerOrganizationsGcpUserAccessBindingsGet', function() {
      it('should call accesscontextmanagerOrganizationsGcpUserAccessBindingsGet successfully', function(done) {
        //uncomment below and update the code to test accesscontextmanagerOrganizationsGcpUserAccessBindingsGet
        //instance.accesscontextmanagerOrganizationsGcpUserAccessBindingsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('accesscontextmanagerOrganizationsGcpUserAccessBindingsList', function() {
      it('should call accesscontextmanagerOrganizationsGcpUserAccessBindingsList successfully', function(done) {
        //uncomment below and update the code to test accesscontextmanagerOrganizationsGcpUserAccessBindingsList
        //instance.accesscontextmanagerOrganizationsGcpUserAccessBindingsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('accesscontextmanagerOrganizationsGcpUserAccessBindingsPatch', function() {
      it('should call accesscontextmanagerOrganizationsGcpUserAccessBindingsPatch successfully', function(done) {
        //uncomment below and update the code to test accesscontextmanagerOrganizationsGcpUserAccessBindingsPatch
        //instance.accesscontextmanagerOrganizationsGcpUserAccessBindingsPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
