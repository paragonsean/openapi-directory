/*
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Restricts access to Cloud Console and Google Cloud APIs for a set of users using Context-Aware Access.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:36.086263-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GcpUserAccessBinding {
  public static final String SERIALIZED_NAME_ACCESS_LEVELS = "accessLevels";
  @SerializedName(SERIALIZED_NAME_ACCESS_LEVELS)
  private List<String> accessLevels = new ArrayList<>();

  public static final String SERIALIZED_NAME_DRY_RUN_ACCESS_LEVELS = "dryRunAccessLevels";
  @SerializedName(SERIALIZED_NAME_DRY_RUN_ACCESS_LEVELS)
  private List<String> dryRunAccessLevels = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_KEY = "groupKey";
  @SerializedName(SERIALIZED_NAME_GROUP_KEY)
  private String groupKey;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public GcpUserAccessBinding() {
  }

  public GcpUserAccessBinding accessLevels(List<String> accessLevels) {
    this.accessLevels = accessLevels;
    return this;
  }

  public GcpUserAccessBinding addAccessLevelsItem(String accessLevelsItem) {
    if (this.accessLevels == null) {
      this.accessLevels = new ArrayList<>();
    }
    this.accessLevels.add(accessLevelsItem);
    return this;
  }

  /**
   * Optional. Access level that a user must have to be granted access. Only one access level is supported, not multiple. This repeated field must have exactly one element. Example: \&quot;accessPolicies/9522/accessLevels/device_trusted\&quot;
   * @return accessLevels
   */
  @javax.annotation.Nullable
  public List<String> getAccessLevels() {
    return accessLevels;
  }

  public void setAccessLevels(List<String> accessLevels) {
    this.accessLevels = accessLevels;
  }


  public GcpUserAccessBinding dryRunAccessLevels(List<String> dryRunAccessLevels) {
    this.dryRunAccessLevels = dryRunAccessLevels;
    return this;
  }

  public GcpUserAccessBinding addDryRunAccessLevelsItem(String dryRunAccessLevelsItem) {
    if (this.dryRunAccessLevels == null) {
      this.dryRunAccessLevels = new ArrayList<>();
    }
    this.dryRunAccessLevels.add(dryRunAccessLevelsItem);
    return this;
  }

  /**
   * Optional. Dry run access level that will be evaluated but will not be enforced. The access denial based on dry run policy will be logged. Only one access level is supported, not multiple. This list must have exactly one element. Example: \&quot;accessPolicies/9522/accessLevels/device_trusted\&quot;
   * @return dryRunAccessLevels
   */
  @javax.annotation.Nullable
  public List<String> getDryRunAccessLevels() {
    return dryRunAccessLevels;
  }

  public void setDryRunAccessLevels(List<String> dryRunAccessLevels) {
    this.dryRunAccessLevels = dryRunAccessLevels;
  }


  public GcpUserAccessBinding groupKey(String groupKey) {
    this.groupKey = groupKey;
    return this;
  }

  /**
   * Required. Immutable. Google Group id whose members are subject to this binding&#39;s restrictions. See \&quot;id\&quot; in the [G Suite Directory API&#39;s Groups resource] (https://developers.google.com/admin-sdk/directory/v1/reference/groups#resource). If a group&#39;s email address/alias is changed, this resource will continue to point at the changed group. This field does not accept group email addresses or aliases. Example: \&quot;01d520gv4vjcrht\&quot;
   * @return groupKey
   */
  @javax.annotation.Nullable
  public String getGroupKey() {
    return groupKey;
  }

  public void setGroupKey(String groupKey) {
    this.groupKey = groupKey;
  }


  public GcpUserAccessBinding name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. Assigned by the server during creation. The last segment has an arbitrary length and has only URI unreserved characters (as defined by [RFC 3986 Section 2.3](https://tools.ietf.org/html/rfc3986#section-2.3)). Should not be specified by the client during creation. Example: \&quot;organizations/256/gcpUserAccessBindings/b3-BhcX_Ud5N\&quot;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GcpUserAccessBinding gcpUserAccessBinding = (GcpUserAccessBinding) o;
    return Objects.equals(this.accessLevels, gcpUserAccessBinding.accessLevels) &&
        Objects.equals(this.dryRunAccessLevels, gcpUserAccessBinding.dryRunAccessLevels) &&
        Objects.equals(this.groupKey, gcpUserAccessBinding.groupKey) &&
        Objects.equals(this.name, gcpUserAccessBinding.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessLevels, dryRunAccessLevels, groupKey, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GcpUserAccessBinding {\n");
    sb.append("    accessLevels: ").append(toIndentedString(accessLevels)).append("\n");
    sb.append("    dryRunAccessLevels: ").append(toIndentedString(dryRunAccessLevels)).append("\n");
    sb.append("    groupKey: ").append(toIndentedString(groupKey)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessLevels");
    openapiFields.add("dryRunAccessLevels");
    openapiFields.add("groupKey");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GcpUserAccessBinding
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GcpUserAccessBinding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GcpUserAccessBinding is not found in the empty JSON string", GcpUserAccessBinding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GcpUserAccessBinding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GcpUserAccessBinding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("accessLevels") != null && !jsonObj.get("accessLevels").isJsonNull() && !jsonObj.get("accessLevels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessLevels` to be an array in the JSON string but got `%s`", jsonObj.get("accessLevels").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dryRunAccessLevels") != null && !jsonObj.get("dryRunAccessLevels").isJsonNull() && !jsonObj.get("dryRunAccessLevels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dryRunAccessLevels` to be an array in the JSON string but got `%s`", jsonObj.get("dryRunAccessLevels").toString()));
      }
      if ((jsonObj.get("groupKey") != null && !jsonObj.get("groupKey").isJsonNull()) && !jsonObj.get("groupKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupKey").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GcpUserAccessBinding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GcpUserAccessBinding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GcpUserAccessBinding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GcpUserAccessBinding.class));

       return (TypeAdapter<T>) new TypeAdapter<GcpUserAccessBinding>() {
           @Override
           public void write(JsonWriter out, GcpUserAccessBinding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GcpUserAccessBinding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GcpUserAccessBinding given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GcpUserAccessBinding
   * @throws IOException if the JSON string is invalid with respect to GcpUserAccessBinding
   */
  public static GcpUserAccessBinding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GcpUserAccessBinding.class);
  }

  /**
   * Convert an instance of GcpUserAccessBinding to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

