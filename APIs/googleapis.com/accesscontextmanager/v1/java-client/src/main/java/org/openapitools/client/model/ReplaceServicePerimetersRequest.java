/*
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ServicePerimeter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request to replace all existing Service Perimeters in an Access Policy with the Service Perimeters provided. This is done atomically.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:36.086263-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplaceServicePerimetersRequest {
  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_SERVICE_PERIMETERS = "servicePerimeters";
  @SerializedName(SERIALIZED_NAME_SERVICE_PERIMETERS)
  private List<ServicePerimeter> servicePerimeters = new ArrayList<>();

  public ReplaceServicePerimetersRequest() {
  }

  public ReplaceServicePerimetersRequest etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Optional. The etag for the version of the Access Policy that this replace operation is to be performed on. If, at the time of replace, the etag for the Access Policy stored in Access Context Manager is different from the specified etag, then the replace operation will not be performed and the call will fail. This field is not required. If etag is not provided, the operation will be performed as if a valid etag is provided.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public ReplaceServicePerimetersRequest servicePerimeters(List<ServicePerimeter> servicePerimeters) {
    this.servicePerimeters = servicePerimeters;
    return this;
  }

  public ReplaceServicePerimetersRequest addServicePerimetersItem(ServicePerimeter servicePerimetersItem) {
    if (this.servicePerimeters == null) {
      this.servicePerimeters = new ArrayList<>();
    }
    this.servicePerimeters.add(servicePerimetersItem);
    return this;
  }

  /**
   * Required. The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.
   * @return servicePerimeters
   */
  @javax.annotation.Nullable
  public List<ServicePerimeter> getServicePerimeters() {
    return servicePerimeters;
  }

  public void setServicePerimeters(List<ServicePerimeter> servicePerimeters) {
    this.servicePerimeters = servicePerimeters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplaceServicePerimetersRequest replaceServicePerimetersRequest = (ReplaceServicePerimetersRequest) o;
    return Objects.equals(this.etag, replaceServicePerimetersRequest.etag) &&
        Objects.equals(this.servicePerimeters, replaceServicePerimetersRequest.servicePerimeters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(etag, servicePerimeters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplaceServicePerimetersRequest {\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    servicePerimeters: ").append(toIndentedString(servicePerimeters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("etag");
    openapiFields.add("servicePerimeters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplaceServicePerimetersRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplaceServicePerimetersRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplaceServicePerimetersRequest is not found in the empty JSON string", ReplaceServicePerimetersRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplaceServicePerimetersRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplaceServicePerimetersRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if (jsonObj.get("servicePerimeters") != null && !jsonObj.get("servicePerimeters").isJsonNull()) {
        JsonArray jsonArrayservicePerimeters = jsonObj.getAsJsonArray("servicePerimeters");
        if (jsonArrayservicePerimeters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("servicePerimeters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `servicePerimeters` to be an array in the JSON string but got `%s`", jsonObj.get("servicePerimeters").toString()));
          }

          // validate the optional field `servicePerimeters` (array)
          for (int i = 0; i < jsonArrayservicePerimeters.size(); i++) {
            ServicePerimeter.validateJsonElement(jsonArrayservicePerimeters.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplaceServicePerimetersRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplaceServicePerimetersRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplaceServicePerimetersRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplaceServicePerimetersRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplaceServicePerimetersRequest>() {
           @Override
           public void write(JsonWriter out, ReplaceServicePerimetersRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplaceServicePerimetersRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplaceServicePerimetersRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplaceServicePerimetersRequest
   * @throws IOException if the JSON string is invalid with respect to ReplaceServicePerimetersRequest
   */
  public static ReplaceServicePerimetersRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplaceServicePerimetersRequest.class);
  }

  /**
   * Convert an instance of ReplaceServicePerimetersRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

