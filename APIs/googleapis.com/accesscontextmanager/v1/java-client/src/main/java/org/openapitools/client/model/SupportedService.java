/*
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MethodSelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &#x60;SupportedService&#x60; specifies the VPC Service Controls and its properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:36.086263-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SupportedService {
  public static final String SERIALIZED_NAME_AVAILABLE_ON_RESTRICTED_VIP = "availableOnRestrictedVip";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ON_RESTRICTED_VIP)
  private Boolean availableOnRestrictedVip;

  public static final String SERIALIZED_NAME_KNOWN_LIMITATIONS = "knownLimitations";
  @SerializedName(SERIALIZED_NAME_KNOWN_LIMITATIONS)
  private Boolean knownLimitations;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The support stage of the service.
   */
  @JsonAdapter(SupportStageEnum.Adapter.class)
  public enum SupportStageEnum {
    LAUNCH_STAGE_UNSPECIFIED("LAUNCH_STAGE_UNSPECIFIED"),
    
    UNIMPLEMENTED("UNIMPLEMENTED"),
    
    PRELAUNCH("PRELAUNCH"),
    
    EARLY_ACCESS("EARLY_ACCESS"),
    
    ALPHA("ALPHA"),
    
    BETA("BETA"),
    
    GA("GA"),
    
    DEPRECATED("DEPRECATED");

    private String value;

    SupportStageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupportStageEnum fromValue(String value) {
      for (SupportStageEnum b : SupportStageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupportStageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportStageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportStageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SupportStageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SupportStageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUPPORT_STAGE = "supportStage";
  @SerializedName(SERIALIZED_NAME_SUPPORT_STAGE)
  private SupportStageEnum supportStage;

  public static final String SERIALIZED_NAME_SUPPORTED_METHODS = "supportedMethods";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_METHODS)
  private List<MethodSelector> supportedMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public SupportedService() {
  }

  public SupportedService availableOnRestrictedVip(Boolean availableOnRestrictedVip) {
    this.availableOnRestrictedVip = availableOnRestrictedVip;
    return this;
  }

  /**
   * True if the service is available on the restricted VIP. Services on the restricted VIP typically either support VPC Service Controls or are core infrastructure services required for the functioning of Google Cloud.
   * @return availableOnRestrictedVip
   */
  @javax.annotation.Nullable
  public Boolean getAvailableOnRestrictedVip() {
    return availableOnRestrictedVip;
  }

  public void setAvailableOnRestrictedVip(Boolean availableOnRestrictedVip) {
    this.availableOnRestrictedVip = availableOnRestrictedVip;
  }


  public SupportedService knownLimitations(Boolean knownLimitations) {
    this.knownLimitations = knownLimitations;
    return this;
  }

  /**
   * True if the service is supported with some limitations. Check [documentation](https://cloud.google.com/vpc-service-controls/docs/supported-products) for details.
   * @return knownLimitations
   */
  @javax.annotation.Nullable
  public Boolean getKnownLimitations() {
    return knownLimitations;
  }

  public void setKnownLimitations(Boolean knownLimitations) {
    this.knownLimitations = knownLimitations;
  }


  public SupportedService name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The service name or address of the supported service, such as &#x60;service.googleapis.com&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SupportedService supportStage(SupportStageEnum supportStage) {
    this.supportStage = supportStage;
    return this;
  }

  /**
   * The support stage of the service.
   * @return supportStage
   */
  @javax.annotation.Nullable
  public SupportStageEnum getSupportStage() {
    return supportStage;
  }

  public void setSupportStage(SupportStageEnum supportStage) {
    this.supportStage = supportStage;
  }


  public SupportedService supportedMethods(List<MethodSelector> supportedMethods) {
    this.supportedMethods = supportedMethods;
    return this;
  }

  public SupportedService addSupportedMethodsItem(MethodSelector supportedMethodsItem) {
    if (this.supportedMethods == null) {
      this.supportedMethods = new ArrayList<>();
    }
    this.supportedMethods.add(supportedMethodsItem);
    return this;
  }

  /**
   * The list of the supported methods. This field exists only in response to GetSupportedService
   * @return supportedMethods
   */
  @javax.annotation.Nullable
  public List<MethodSelector> getSupportedMethods() {
    return supportedMethods;
  }

  public void setSupportedMethods(List<MethodSelector> supportedMethods) {
    this.supportedMethods = supportedMethods;
  }


  public SupportedService title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The name of the supported product, such as &#39;Cloud Product API&#39;.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SupportedService supportedService = (SupportedService) o;
    return Objects.equals(this.availableOnRestrictedVip, supportedService.availableOnRestrictedVip) &&
        Objects.equals(this.knownLimitations, supportedService.knownLimitations) &&
        Objects.equals(this.name, supportedService.name) &&
        Objects.equals(this.supportStage, supportedService.supportStage) &&
        Objects.equals(this.supportedMethods, supportedService.supportedMethods) &&
        Objects.equals(this.title, supportedService.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableOnRestrictedVip, knownLimitations, name, supportStage, supportedMethods, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SupportedService {\n");
    sb.append("    availableOnRestrictedVip: ").append(toIndentedString(availableOnRestrictedVip)).append("\n");
    sb.append("    knownLimitations: ").append(toIndentedString(knownLimitations)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    supportStage: ").append(toIndentedString(supportStage)).append("\n");
    sb.append("    supportedMethods: ").append(toIndentedString(supportedMethods)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableOnRestrictedVip");
    openapiFields.add("knownLimitations");
    openapiFields.add("name");
    openapiFields.add("supportStage");
    openapiFields.add("supportedMethods");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SupportedService
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SupportedService.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SupportedService is not found in the empty JSON string", SupportedService.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SupportedService.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SupportedService` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("supportStage") != null && !jsonObj.get("supportStage").isJsonNull()) && !jsonObj.get("supportStage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportStage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportStage").toString()));
      }
      // validate the optional field `supportStage`
      if (jsonObj.get("supportStage") != null && !jsonObj.get("supportStage").isJsonNull()) {
        SupportStageEnum.validateJsonElement(jsonObj.get("supportStage"));
      }
      if (jsonObj.get("supportedMethods") != null && !jsonObj.get("supportedMethods").isJsonNull()) {
        JsonArray jsonArraysupportedMethods = jsonObj.getAsJsonArray("supportedMethods");
        if (jsonArraysupportedMethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("supportedMethods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `supportedMethods` to be an array in the JSON string but got `%s`", jsonObj.get("supportedMethods").toString()));
          }

          // validate the optional field `supportedMethods` (array)
          for (int i = 0; i < jsonArraysupportedMethods.size(); i++) {
            MethodSelector.validateJsonElement(jsonArraysupportedMethods.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SupportedService.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SupportedService' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SupportedService> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SupportedService.class));

       return (TypeAdapter<T>) new TypeAdapter<SupportedService>() {
           @Override
           public void write(JsonWriter out, SupportedService value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SupportedService read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SupportedService given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SupportedService
   * @throws IOException if the JSON string is invalid with respect to SupportedService
   */
  public static SupportedService fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SupportedService.class);
  }

  /**
   * Convert an instance of SupportedService to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

