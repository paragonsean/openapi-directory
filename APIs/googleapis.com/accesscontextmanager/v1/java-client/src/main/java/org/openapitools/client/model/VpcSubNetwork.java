/*
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sub-segment ranges inside of a VPC Network.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:36.086263-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VpcSubNetwork {
  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_VPC_IP_SUBNETWORKS = "vpcIpSubnetworks";
  @SerializedName(SERIALIZED_NAME_VPC_IP_SUBNETWORKS)
  private List<String> vpcIpSubnetworks = new ArrayList<>();

  public VpcSubNetwork() {
  }

  public VpcSubNetwork network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Required. Network name. If the network is not part of the organization, the &#x60;compute.network.get&#x60; permission must be granted to the caller. Format: &#x60;//compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NETWORK_NAME}&#x60; Example: &#x60;//compute.googleapis.com/projects/my-project/global/networks/network-1&#x60;
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public VpcSubNetwork vpcIpSubnetworks(List<String> vpcIpSubnetworks) {
    this.vpcIpSubnetworks = vpcIpSubnetworks;
    return this;
  }

  public VpcSubNetwork addVpcIpSubnetworksItem(String vpcIpSubnetworksItem) {
    if (this.vpcIpSubnetworks == null) {
      this.vpcIpSubnetworks = new ArrayList<>();
    }
    this.vpcIpSubnetworks.add(vpcIpSubnetworksItem);
    return this;
  }

  /**
   * CIDR block IP subnetwork specification. The IP address must be an IPv4 address and can be a public or private IP address. Note that for a CIDR IP address block, the specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered malformed. For example, \&quot;192.0.2.0/24\&quot; is accepted but \&quot;192.0.2.1/24\&quot; is not. If empty, all IP addresses are allowed.
   * @return vpcIpSubnetworks
   */
  @javax.annotation.Nullable
  public List<String> getVpcIpSubnetworks() {
    return vpcIpSubnetworks;
  }

  public void setVpcIpSubnetworks(List<String> vpcIpSubnetworks) {
    this.vpcIpSubnetworks = vpcIpSubnetworks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VpcSubNetwork vpcSubNetwork = (VpcSubNetwork) o;
    return Objects.equals(this.network, vpcSubNetwork.network) &&
        Objects.equals(this.vpcIpSubnetworks, vpcSubNetwork.vpcIpSubnetworks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(network, vpcIpSubnetworks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VpcSubNetwork {\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    vpcIpSubnetworks: ").append(toIndentedString(vpcIpSubnetworks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("network");
    openapiFields.add("vpcIpSubnetworks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VpcSubNetwork
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VpcSubNetwork.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VpcSubNetwork is not found in the empty JSON string", VpcSubNetwork.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VpcSubNetwork.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VpcSubNetwork` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vpcIpSubnetworks") != null && !jsonObj.get("vpcIpSubnetworks").isJsonNull() && !jsonObj.get("vpcIpSubnetworks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpcIpSubnetworks` to be an array in the JSON string but got `%s`", jsonObj.get("vpcIpSubnetworks").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VpcSubNetwork.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VpcSubNetwork' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VpcSubNetwork> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VpcSubNetwork.class));

       return (TypeAdapter<T>) new TypeAdapter<VpcSubNetwork>() {
           @Override
           public void write(JsonWriter out, VpcSubNetwork value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VpcSubNetwork read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VpcSubNetwork given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VpcSubNetwork
   * @throws IOException if the JSON string is invalid with respect to VpcSubNetwork
   */
  public static VpcSubNetwork fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VpcSubNetwork.class);
  }

  /**
   * Convert an instance of VpcSubNetwork to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

