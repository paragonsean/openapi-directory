/*
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A restriction on the OS type and version of devices making requests.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:36.086263-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OsConstraint {
  public static final String SERIALIZED_NAME_MINIMUM_VERSION = "minimumVersion";
  @SerializedName(SERIALIZED_NAME_MINIMUM_VERSION)
  private String minimumVersion;

  /**
   * Required. The allowed OS type.
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    OS_UNSPECIFIED("OS_UNSPECIFIED"),
    
    DESKTOP_MAC("DESKTOP_MAC"),
    
    DESKTOP_WINDOWS("DESKTOP_WINDOWS"),
    
    DESKTOP_LINUX("DESKTOP_LINUX"),
    
    DESKTOP_CHROME_OS("DESKTOP_CHROME_OS"),
    
    ANDROID("ANDROID"),
    
    IOS("IOS");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsTypeEnum fromValue(String value) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private OsTypeEnum osType;

  public static final String SERIALIZED_NAME_REQUIRE_VERIFIED_CHROME_OS = "requireVerifiedChromeOs";
  @SerializedName(SERIALIZED_NAME_REQUIRE_VERIFIED_CHROME_OS)
  private Boolean requireVerifiedChromeOs;

  public OsConstraint() {
  }

  public OsConstraint minimumVersion(String minimumVersion) {
    this.minimumVersion = minimumVersion;
    return this;
  }

  /**
   * The minimum allowed OS version. If not set, any version of this OS satisfies the constraint. Format: &#x60;\&quot;major.minor.patch\&quot;&#x60;. Examples: &#x60;\&quot;10.5.301\&quot;&#x60;, &#x60;\&quot;9.2.1\&quot;&#x60;.
   * @return minimumVersion
   */
  @javax.annotation.Nullable
  public String getMinimumVersion() {
    return minimumVersion;
  }

  public void setMinimumVersion(String minimumVersion) {
    this.minimumVersion = minimumVersion;
  }


  public OsConstraint osType(OsTypeEnum osType) {
    this.osType = osType;
    return this;
  }

  /**
   * Required. The allowed OS type.
   * @return osType
   */
  @javax.annotation.Nullable
  public OsTypeEnum getOsType() {
    return osType;
  }

  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }


  public OsConstraint requireVerifiedChromeOs(Boolean requireVerifiedChromeOs) {
    this.requireVerifiedChromeOs = requireVerifiedChromeOs;
    return this;
  }

  /**
   * Only allows requests from devices with a verified Chrome OS. Verifications includes requirements that the device is enterprise-managed, conformant to domain policies, and the caller has permission to call the API targeted by the request.
   * @return requireVerifiedChromeOs
   */
  @javax.annotation.Nullable
  public Boolean getRequireVerifiedChromeOs() {
    return requireVerifiedChromeOs;
  }

  public void setRequireVerifiedChromeOs(Boolean requireVerifiedChromeOs) {
    this.requireVerifiedChromeOs = requireVerifiedChromeOs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OsConstraint osConstraint = (OsConstraint) o;
    return Objects.equals(this.minimumVersion, osConstraint.minimumVersion) &&
        Objects.equals(this.osType, osConstraint.osType) &&
        Objects.equals(this.requireVerifiedChromeOs, osConstraint.requireVerifiedChromeOs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minimumVersion, osType, requireVerifiedChromeOs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OsConstraint {\n");
    sb.append("    minimumVersion: ").append(toIndentedString(minimumVersion)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    requireVerifiedChromeOs: ").append(toIndentedString(requireVerifiedChromeOs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("minimumVersion");
    openapiFields.add("osType");
    openapiFields.add("requireVerifiedChromeOs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OsConstraint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OsConstraint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OsConstraint is not found in the empty JSON string", OsConstraint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OsConstraint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OsConstraint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("minimumVersion") != null && !jsonObj.get("minimumVersion").isJsonNull()) && !jsonObj.get("minimumVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimumVersion").toString()));
      }
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      // validate the optional field `osType`
      if (jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) {
        OsTypeEnum.validateJsonElement(jsonObj.get("osType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OsConstraint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OsConstraint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OsConstraint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OsConstraint.class));

       return (TypeAdapter<T>) new TypeAdapter<OsConstraint>() {
           @Override
           public void write(JsonWriter out, OsConstraint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OsConstraint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OsConstraint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OsConstraint
   * @throws IOException if the JSON string is invalid with respect to OsConstraint
   */
  public static OsConstraint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OsConstraint.class);
  }

  /**
   * Convert an instance of OsConstraint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

