/*
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EgressPolicy;
import org.openapitools.client.model.IngressPolicy;
import org.openapitools.client.model.VpcAccessibleServices;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &#x60;ServicePerimeterConfig&#x60; specifies a set of Google Cloud resources that describe specific Service Perimeter configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:36.086263-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServicePerimeterConfig {
  public static final String SERIALIZED_NAME_ACCESS_LEVELS = "accessLevels";
  @SerializedName(SERIALIZED_NAME_ACCESS_LEVELS)
  private List<String> accessLevels = new ArrayList<>();

  public static final String SERIALIZED_NAME_EGRESS_POLICIES = "egressPolicies";
  @SerializedName(SERIALIZED_NAME_EGRESS_POLICIES)
  private List<EgressPolicy> egressPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_INGRESS_POLICIES = "ingressPolicies";
  @SerializedName(SERIALIZED_NAME_INGRESS_POLICIES)
  private List<IngressPolicy> ingressPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<String> resources = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESTRICTED_SERVICES = "restrictedServices";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_SERVICES)
  private List<String> restrictedServices = new ArrayList<>();

  public static final String SERIALIZED_NAME_VPC_ACCESSIBLE_SERVICES = "vpcAccessibleServices";
  @SerializedName(SERIALIZED_NAME_VPC_ACCESSIBLE_SERVICES)
  private VpcAccessibleServices vpcAccessibleServices;

  public ServicePerimeterConfig() {
  }

  public ServicePerimeterConfig accessLevels(List<String> accessLevels) {
    this.accessLevels = accessLevels;
    return this;
  }

  public ServicePerimeterConfig addAccessLevelsItem(String accessLevelsItem) {
    if (this.accessLevels == null) {
      this.accessLevels = new ArrayList<>();
    }
    this.accessLevels.add(accessLevelsItem);
    return this;
  }

  /**
   * A list of &#x60;AccessLevel&#x60; resource names that allow resources within the &#x60;ServicePerimeter&#x60; to be accessed from the internet. &#x60;AccessLevels&#x60; listed must be in the same policy as this &#x60;ServicePerimeter&#x60;. Referencing a nonexistent &#x60;AccessLevel&#x60; is a syntax error. If no &#x60;AccessLevel&#x60; names are listed, resources within the perimeter can only be accessed via Google Cloud calls with request origins within the perimeter. Example: &#x60;\&quot;accessPolicies/MY_POLICY/accessLevels/MY_LEVEL\&quot;&#x60;. For Service Perimeter Bridge, must be empty.
   * @return accessLevels
   */
  @javax.annotation.Nullable
  public List<String> getAccessLevels() {
    return accessLevels;
  }

  public void setAccessLevels(List<String> accessLevels) {
    this.accessLevels = accessLevels;
  }


  public ServicePerimeterConfig egressPolicies(List<EgressPolicy> egressPolicies) {
    this.egressPolicies = egressPolicies;
    return this;
  }

  public ServicePerimeterConfig addEgressPoliciesItem(EgressPolicy egressPoliciesItem) {
    if (this.egressPolicies == null) {
      this.egressPolicies = new ArrayList<>();
    }
    this.egressPolicies.add(egressPoliciesItem);
    return this;
  }

  /**
   * List of EgressPolicies to apply to the perimeter. A perimeter may have multiple EgressPolicies, each of which is evaluated separately. Access is granted if any EgressPolicy grants it. Must be empty for a perimeter bridge.
   * @return egressPolicies
   */
  @javax.annotation.Nullable
  public List<EgressPolicy> getEgressPolicies() {
    return egressPolicies;
  }

  public void setEgressPolicies(List<EgressPolicy> egressPolicies) {
    this.egressPolicies = egressPolicies;
  }


  public ServicePerimeterConfig ingressPolicies(List<IngressPolicy> ingressPolicies) {
    this.ingressPolicies = ingressPolicies;
    return this;
  }

  public ServicePerimeterConfig addIngressPoliciesItem(IngressPolicy ingressPoliciesItem) {
    if (this.ingressPolicies == null) {
      this.ingressPolicies = new ArrayList<>();
    }
    this.ingressPolicies.add(ingressPoliciesItem);
    return this;
  }

  /**
   * List of IngressPolicies to apply to the perimeter. A perimeter may have multiple IngressPolicies, each of which is evaluated separately. Access is granted if any Ingress Policy grants it. Must be empty for a perimeter bridge.
   * @return ingressPolicies
   */
  @javax.annotation.Nullable
  public List<IngressPolicy> getIngressPolicies() {
    return ingressPolicies;
  }

  public void setIngressPolicies(List<IngressPolicy> ingressPolicies) {
    this.ingressPolicies = ingressPolicies;
  }


  public ServicePerimeterConfig resources(List<String> resources) {
    this.resources = resources;
    return this;
  }

  public ServicePerimeterConfig addResourcesItem(String resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

  /**
   * A list of Google Cloud resources that are inside of the service perimeter. Currently only projects and VPCs are allowed. Project format: &#x60;projects/{project_number}&#x60; VPC network format: &#x60;//compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NAME}&#x60;.
   * @return resources
   */
  @javax.annotation.Nullable
  public List<String> getResources() {
    return resources;
  }

  public void setResources(List<String> resources) {
    this.resources = resources;
  }


  public ServicePerimeterConfig restrictedServices(List<String> restrictedServices) {
    this.restrictedServices = restrictedServices;
    return this;
  }

  public ServicePerimeterConfig addRestrictedServicesItem(String restrictedServicesItem) {
    if (this.restrictedServices == null) {
      this.restrictedServices = new ArrayList<>();
    }
    this.restrictedServices.add(restrictedServicesItem);
    return this;
  }

  /**
   * Google Cloud services that are subject to the Service Perimeter restrictions. For example, if &#x60;storage.googleapis.com&#x60; is specified, access to the storage buckets inside the perimeter must meet the perimeter&#39;s access restrictions.
   * @return restrictedServices
   */
  @javax.annotation.Nullable
  public List<String> getRestrictedServices() {
    return restrictedServices;
  }

  public void setRestrictedServices(List<String> restrictedServices) {
    this.restrictedServices = restrictedServices;
  }


  public ServicePerimeterConfig vpcAccessibleServices(VpcAccessibleServices vpcAccessibleServices) {
    this.vpcAccessibleServices = vpcAccessibleServices;
    return this;
  }

  /**
   * Get vpcAccessibleServices
   * @return vpcAccessibleServices
   */
  @javax.annotation.Nullable
  public VpcAccessibleServices getVpcAccessibleServices() {
    return vpcAccessibleServices;
  }

  public void setVpcAccessibleServices(VpcAccessibleServices vpcAccessibleServices) {
    this.vpcAccessibleServices = vpcAccessibleServices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServicePerimeterConfig servicePerimeterConfig = (ServicePerimeterConfig) o;
    return Objects.equals(this.accessLevels, servicePerimeterConfig.accessLevels) &&
        Objects.equals(this.egressPolicies, servicePerimeterConfig.egressPolicies) &&
        Objects.equals(this.ingressPolicies, servicePerimeterConfig.ingressPolicies) &&
        Objects.equals(this.resources, servicePerimeterConfig.resources) &&
        Objects.equals(this.restrictedServices, servicePerimeterConfig.restrictedServices) &&
        Objects.equals(this.vpcAccessibleServices, servicePerimeterConfig.vpcAccessibleServices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessLevels, egressPolicies, ingressPolicies, resources, restrictedServices, vpcAccessibleServices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServicePerimeterConfig {\n");
    sb.append("    accessLevels: ").append(toIndentedString(accessLevels)).append("\n");
    sb.append("    egressPolicies: ").append(toIndentedString(egressPolicies)).append("\n");
    sb.append("    ingressPolicies: ").append(toIndentedString(ingressPolicies)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    restrictedServices: ").append(toIndentedString(restrictedServices)).append("\n");
    sb.append("    vpcAccessibleServices: ").append(toIndentedString(vpcAccessibleServices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessLevels");
    openapiFields.add("egressPolicies");
    openapiFields.add("ingressPolicies");
    openapiFields.add("resources");
    openapiFields.add("restrictedServices");
    openapiFields.add("vpcAccessibleServices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServicePerimeterConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServicePerimeterConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServicePerimeterConfig is not found in the empty JSON string", ServicePerimeterConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServicePerimeterConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServicePerimeterConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("accessLevels") != null && !jsonObj.get("accessLevels").isJsonNull() && !jsonObj.get("accessLevels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessLevels` to be an array in the JSON string but got `%s`", jsonObj.get("accessLevels").toString()));
      }
      if (jsonObj.get("egressPolicies") != null && !jsonObj.get("egressPolicies").isJsonNull()) {
        JsonArray jsonArrayegressPolicies = jsonObj.getAsJsonArray("egressPolicies");
        if (jsonArrayegressPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("egressPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `egressPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("egressPolicies").toString()));
          }

          // validate the optional field `egressPolicies` (array)
          for (int i = 0; i < jsonArrayegressPolicies.size(); i++) {
            EgressPolicy.validateJsonElement(jsonArrayegressPolicies.get(i));
          };
        }
      }
      if (jsonObj.get("ingressPolicies") != null && !jsonObj.get("ingressPolicies").isJsonNull()) {
        JsonArray jsonArrayingressPolicies = jsonObj.getAsJsonArray("ingressPolicies");
        if (jsonArrayingressPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ingressPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ingressPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("ingressPolicies").toString()));
          }

          // validate the optional field `ingressPolicies` (array)
          for (int i = 0; i < jsonArrayingressPolicies.size(); i++) {
            IngressPolicy.validateJsonElement(jsonArrayingressPolicies.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull() && !jsonObj.get("resources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("restrictedServices") != null && !jsonObj.get("restrictedServices").isJsonNull() && !jsonObj.get("restrictedServices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `restrictedServices` to be an array in the JSON string but got `%s`", jsonObj.get("restrictedServices").toString()));
      }
      // validate the optional field `vpcAccessibleServices`
      if (jsonObj.get("vpcAccessibleServices") != null && !jsonObj.get("vpcAccessibleServices").isJsonNull()) {
        VpcAccessibleServices.validateJsonElement(jsonObj.get("vpcAccessibleServices"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServicePerimeterConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServicePerimeterConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServicePerimeterConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServicePerimeterConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ServicePerimeterConfig>() {
           @Override
           public void write(JsonWriter out, ServicePerimeterConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServicePerimeterConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServicePerimeterConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServicePerimeterConfig
   * @throws IOException if the JSON string is invalid with respect to ServicePerimeterConfig
   */
  public static ServicePerimeterConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServicePerimeterConfig.class);
  }

  /**
   * Convert an instance of ServicePerimeterConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

