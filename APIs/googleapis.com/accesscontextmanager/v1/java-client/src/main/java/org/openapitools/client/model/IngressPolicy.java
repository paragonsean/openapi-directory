/*
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IngressFrom;
import org.openapitools.client.model.IngressTo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Policy for ingress into ServicePerimeter. IngressPolicies match requests based on &#x60;ingress_from&#x60; and &#x60;ingress_to&#x60; stanzas. For an ingress policy to match, both the &#x60;ingress_from&#x60; and &#x60;ingress_to&#x60; stanzas must be matched. If an IngressPolicy matches a request, the request is allowed through the perimeter boundary from outside the perimeter. For example, access from the internet can be allowed either based on an AccessLevel or, for traffic hosted on Google Cloud, the project of the source network. For access from private networks, using the project of the hosting network is required. Individual ingress policies can be limited by restricting which services and/or actions they match using the &#x60;ingress_to&#x60; field.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:36.086263-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IngressPolicy {
  public static final String SERIALIZED_NAME_INGRESS_FROM = "ingressFrom";
  @SerializedName(SERIALIZED_NAME_INGRESS_FROM)
  private IngressFrom ingressFrom;

  public static final String SERIALIZED_NAME_INGRESS_TO = "ingressTo";
  @SerializedName(SERIALIZED_NAME_INGRESS_TO)
  private IngressTo ingressTo;

  public IngressPolicy() {
  }

  public IngressPolicy ingressFrom(IngressFrom ingressFrom) {
    this.ingressFrom = ingressFrom;
    return this;
  }

  /**
   * Get ingressFrom
   * @return ingressFrom
   */
  @javax.annotation.Nullable
  public IngressFrom getIngressFrom() {
    return ingressFrom;
  }

  public void setIngressFrom(IngressFrom ingressFrom) {
    this.ingressFrom = ingressFrom;
  }


  public IngressPolicy ingressTo(IngressTo ingressTo) {
    this.ingressTo = ingressTo;
    return this;
  }

  /**
   * Get ingressTo
   * @return ingressTo
   */
  @javax.annotation.Nullable
  public IngressTo getIngressTo() {
    return ingressTo;
  }

  public void setIngressTo(IngressTo ingressTo) {
    this.ingressTo = ingressTo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IngressPolicy ingressPolicy = (IngressPolicy) o;
    return Objects.equals(this.ingressFrom, ingressPolicy.ingressFrom) &&
        Objects.equals(this.ingressTo, ingressPolicy.ingressTo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ingressFrom, ingressTo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IngressPolicy {\n");
    sb.append("    ingressFrom: ").append(toIndentedString(ingressFrom)).append("\n");
    sb.append("    ingressTo: ").append(toIndentedString(ingressTo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ingressFrom");
    openapiFields.add("ingressTo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IngressPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IngressPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IngressPolicy is not found in the empty JSON string", IngressPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IngressPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IngressPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ingressFrom`
      if (jsonObj.get("ingressFrom") != null && !jsonObj.get("ingressFrom").isJsonNull()) {
        IngressFrom.validateJsonElement(jsonObj.get("ingressFrom"));
      }
      // validate the optional field `ingressTo`
      if (jsonObj.get("ingressTo") != null && !jsonObj.get("ingressTo").isJsonNull()) {
        IngressTo.validateJsonElement(jsonObj.get("ingressTo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IngressPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IngressPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IngressPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IngressPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<IngressPolicy>() {
           @Override
           public void write(JsonWriter out, IngressPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IngressPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IngressPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IngressPolicy
   * @throws IOException if the JSON string is invalid with respect to IngressPolicy
   */
  public static IngressPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IngressPolicy.class);
  }

  /**
   * Convert an instance of IngressPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

