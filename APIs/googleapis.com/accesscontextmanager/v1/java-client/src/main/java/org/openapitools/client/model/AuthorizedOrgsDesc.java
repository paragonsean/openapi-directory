/*
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &#x60;AuthorizedOrgsDesc&#x60; contains data for an organization&#39;s authorization policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:36.086263-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuthorizedOrgsDesc {
  /**
   * The asset type of this authorized orgs desc. Valid values are &#x60;ASSET_TYPE_DEVICE&#x60;, and &#x60;ASSET_TYPE_CREDENTIAL_STRENGTH&#x60;.
   */
  @JsonAdapter(AssetTypeEnum.Adapter.class)
  public enum AssetTypeEnum {
    UNSPECIFIED("ASSET_TYPE_UNSPECIFIED"),
    
    DEVICE("ASSET_TYPE_DEVICE"),
    
    CREDENTIAL_STRENGTH("ASSET_TYPE_CREDENTIAL_STRENGTH");

    private String value;

    AssetTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssetTypeEnum fromValue(String value) {
      for (AssetTypeEnum b : AssetTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssetTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssetTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSET_TYPE = "assetType";
  @SerializedName(SERIALIZED_NAME_ASSET_TYPE)
  private AssetTypeEnum assetType;

  /**
   * The direction of the authorization relationship between this organization and the organizations listed in the &#x60;orgs&#x60; field. The valid values for this field include the following: &#x60;AUTHORIZATION_DIRECTION_FROM&#x60;: Allows this organization to evaluate traffic in the organizations listed in the &#x60;orgs&#x60; field. &#x60;AUTHORIZATION_DIRECTION_TO&#x60;: Allows the organizations listed in the &#x60;orgs&#x60; field to evaluate the traffic in this organization. For the authorization relationship to take effect, all of the organizations must authorize and specify the appropriate relationship direction. For example, if organization A authorized organization B and C to evaluate its traffic, by specifying &#x60;AUTHORIZATION_DIRECTION_TO&#x60; as the authorization direction, organizations B and C must specify &#x60;AUTHORIZATION_DIRECTION_FROM&#x60; as the authorization direction in their &#x60;AuthorizedOrgsDesc&#x60; resource.
   */
  @JsonAdapter(AuthorizationDirectionEnum.Adapter.class)
  public enum AuthorizationDirectionEnum {
    UNSPECIFIED("AUTHORIZATION_DIRECTION_UNSPECIFIED"),
    
    TO("AUTHORIZATION_DIRECTION_TO"),
    
    FROM("AUTHORIZATION_DIRECTION_FROM");

    private String value;

    AuthorizationDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorizationDirectionEnum fromValue(String value) {
      for (AuthorizationDirectionEnum b : AuthorizationDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthorizationDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorizationDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorizationDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthorizationDirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthorizationDirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHORIZATION_DIRECTION = "authorizationDirection";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_DIRECTION)
  private AuthorizationDirectionEnum authorizationDirection;

  /**
   * A granular control type for authorization levels. Valid value is &#x60;AUTHORIZATION_TYPE_TRUST&#x60;.
   */
  @JsonAdapter(AuthorizationTypeEnum.Adapter.class)
  public enum AuthorizationTypeEnum {
    UNSPECIFIED("AUTHORIZATION_TYPE_UNSPECIFIED"),
    
    TRUST("AUTHORIZATION_TYPE_TRUST");

    private String value;

    AuthorizationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorizationTypeEnum fromValue(String value) {
      for (AuthorizationTypeEnum b : AuthorizationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthorizationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorizationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorizationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthorizationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthorizationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHORIZATION_TYPE = "authorizationType";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_TYPE)
  private AuthorizationTypeEnum authorizationType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGS = "orgs";
  @SerializedName(SERIALIZED_NAME_ORGS)
  private List<String> orgs = new ArrayList<>();

  public AuthorizedOrgsDesc() {
  }

  public AuthorizedOrgsDesc assetType(AssetTypeEnum assetType) {
    this.assetType = assetType;
    return this;
  }

  /**
   * The asset type of this authorized orgs desc. Valid values are &#x60;ASSET_TYPE_DEVICE&#x60;, and &#x60;ASSET_TYPE_CREDENTIAL_STRENGTH&#x60;.
   * @return assetType
   */
  @javax.annotation.Nullable
  public AssetTypeEnum getAssetType() {
    return assetType;
  }

  public void setAssetType(AssetTypeEnum assetType) {
    this.assetType = assetType;
  }


  public AuthorizedOrgsDesc authorizationDirection(AuthorizationDirectionEnum authorizationDirection) {
    this.authorizationDirection = authorizationDirection;
    return this;
  }

  /**
   * The direction of the authorization relationship between this organization and the organizations listed in the &#x60;orgs&#x60; field. The valid values for this field include the following: &#x60;AUTHORIZATION_DIRECTION_FROM&#x60;: Allows this organization to evaluate traffic in the organizations listed in the &#x60;orgs&#x60; field. &#x60;AUTHORIZATION_DIRECTION_TO&#x60;: Allows the organizations listed in the &#x60;orgs&#x60; field to evaluate the traffic in this organization. For the authorization relationship to take effect, all of the organizations must authorize and specify the appropriate relationship direction. For example, if organization A authorized organization B and C to evaluate its traffic, by specifying &#x60;AUTHORIZATION_DIRECTION_TO&#x60; as the authorization direction, organizations B and C must specify &#x60;AUTHORIZATION_DIRECTION_FROM&#x60; as the authorization direction in their &#x60;AuthorizedOrgsDesc&#x60; resource.
   * @return authorizationDirection
   */
  @javax.annotation.Nullable
  public AuthorizationDirectionEnum getAuthorizationDirection() {
    return authorizationDirection;
  }

  public void setAuthorizationDirection(AuthorizationDirectionEnum authorizationDirection) {
    this.authorizationDirection = authorizationDirection;
  }


  public AuthorizedOrgsDesc authorizationType(AuthorizationTypeEnum authorizationType) {
    this.authorizationType = authorizationType;
    return this;
  }

  /**
   * A granular control type for authorization levels. Valid value is &#x60;AUTHORIZATION_TYPE_TRUST&#x60;.
   * @return authorizationType
   */
  @javax.annotation.Nullable
  public AuthorizationTypeEnum getAuthorizationType() {
    return authorizationType;
  }

  public void setAuthorizationType(AuthorizationTypeEnum authorizationType) {
    this.authorizationType = authorizationType;
  }


  public AuthorizedOrgsDesc name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Resource name for the &#x60;AuthorizedOrgsDesc&#x60;. Format: &#x60;accessPolicies/{access_policy}/authorizedOrgsDescs/{authorized_orgs_desc}&#x60;. The &#x60;authorized_orgs_desc&#x60; component must begin with a letter, followed by alphanumeric characters or &#x60;_&#x60;. After you create an &#x60;AuthorizedOrgsDesc&#x60;, you cannot change its &#x60;name&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AuthorizedOrgsDesc orgs(List<String> orgs) {
    this.orgs = orgs;
    return this;
  }

  public AuthorizedOrgsDesc addOrgsItem(String orgsItem) {
    if (this.orgs == null) {
      this.orgs = new ArrayList<>();
    }
    this.orgs.add(orgsItem);
    return this;
  }

  /**
   * The list of organization ids in this AuthorizedOrgsDesc. Format: &#x60;organizations/&#x60; Example: &#x60;organizations/123456&#x60;
   * @return orgs
   */
  @javax.annotation.Nullable
  public List<String> getOrgs() {
    return orgs;
  }

  public void setOrgs(List<String> orgs) {
    this.orgs = orgs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthorizedOrgsDesc authorizedOrgsDesc = (AuthorizedOrgsDesc) o;
    return Objects.equals(this.assetType, authorizedOrgsDesc.assetType) &&
        Objects.equals(this.authorizationDirection, authorizedOrgsDesc.authorizationDirection) &&
        Objects.equals(this.authorizationType, authorizedOrgsDesc.authorizationType) &&
        Objects.equals(this.name, authorizedOrgsDesc.name) &&
        Objects.equals(this.orgs, authorizedOrgsDesc.orgs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetType, authorizationDirection, authorizationType, name, orgs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthorizedOrgsDesc {\n");
    sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
    sb.append("    authorizationDirection: ").append(toIndentedString(authorizationDirection)).append("\n");
    sb.append("    authorizationType: ").append(toIndentedString(authorizationType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orgs: ").append(toIndentedString(orgs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assetType");
    openapiFields.add("authorizationDirection");
    openapiFields.add("authorizationType");
    openapiFields.add("name");
    openapiFields.add("orgs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthorizedOrgsDesc
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthorizedOrgsDesc.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthorizedOrgsDesc is not found in the empty JSON string", AuthorizedOrgsDesc.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthorizedOrgsDesc.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthorizedOrgsDesc` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assetType") != null && !jsonObj.get("assetType").isJsonNull()) && !jsonObj.get("assetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetType").toString()));
      }
      // validate the optional field `assetType`
      if (jsonObj.get("assetType") != null && !jsonObj.get("assetType").isJsonNull()) {
        AssetTypeEnum.validateJsonElement(jsonObj.get("assetType"));
      }
      if ((jsonObj.get("authorizationDirection") != null && !jsonObj.get("authorizationDirection").isJsonNull()) && !jsonObj.get("authorizationDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationDirection").toString()));
      }
      // validate the optional field `authorizationDirection`
      if (jsonObj.get("authorizationDirection") != null && !jsonObj.get("authorizationDirection").isJsonNull()) {
        AuthorizationDirectionEnum.validateJsonElement(jsonObj.get("authorizationDirection"));
      }
      if ((jsonObj.get("authorizationType") != null && !jsonObj.get("authorizationType").isJsonNull()) && !jsonObj.get("authorizationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationType").toString()));
      }
      // validate the optional field `authorizationType`
      if (jsonObj.get("authorizationType") != null && !jsonObj.get("authorizationType").isJsonNull()) {
        AuthorizationTypeEnum.validateJsonElement(jsonObj.get("authorizationType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("orgs") != null && !jsonObj.get("orgs").isJsonNull() && !jsonObj.get("orgs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgs` to be an array in the JSON string but got `%s`", jsonObj.get("orgs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthorizedOrgsDesc.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthorizedOrgsDesc' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthorizedOrgsDesc> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthorizedOrgsDesc.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthorizedOrgsDesc>() {
           @Override
           public void write(JsonWriter out, AuthorizedOrgsDesc value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthorizedOrgsDesc read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthorizedOrgsDesc given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthorizedOrgsDesc
   * @throws IOException if the JSON string is invalid with respect to AuthorizedOrgsDesc
   */
  public static AuthorizedOrgsDesc fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthorizedOrgsDesc.class);
  }

  /**
   * Convert an instance of AuthorizedOrgsDesc to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

