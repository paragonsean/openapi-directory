/*
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IngressSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the conditions under which an IngressPolicy matches a request. Conditions are based on information about the source of the request. The request must satisfy what is defined in &#x60;sources&#x60; AND identity related fields in order to match.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:36.086263-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IngressFrom {
  public static final String SERIALIZED_NAME_IDENTITIES = "identities";
  @SerializedName(SERIALIZED_NAME_IDENTITIES)
  private List<String> identities = new ArrayList<>();

  /**
   * Specifies the type of identities that are allowed access from outside the perimeter. If left unspecified, then members of &#x60;identities&#x60; field will be allowed access.
   */
  @JsonAdapter(IdentityTypeEnum.Adapter.class)
  public enum IdentityTypeEnum {
    IDENTITY_TYPE_UNSPECIFIED("IDENTITY_TYPE_UNSPECIFIED"),
    
    ANY_IDENTITY("ANY_IDENTITY"),
    
    ANY_USER_ACCOUNT("ANY_USER_ACCOUNT"),
    
    ANY_SERVICE_ACCOUNT("ANY_SERVICE_ACCOUNT");

    private String value;

    IdentityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IdentityTypeEnum fromValue(String value) {
      for (IdentityTypeEnum b : IdentityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IdentityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IdentityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IdentityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IdentityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IdentityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IDENTITY_TYPE = "identityType";
  @SerializedName(SERIALIZED_NAME_IDENTITY_TYPE)
  private IdentityTypeEnum identityType;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<IngressSource> sources = new ArrayList<>();

  public IngressFrom() {
  }

  public IngressFrom identities(List<String> identities) {
    this.identities = identities;
    return this;
  }

  public IngressFrom addIdentitiesItem(String identitiesItem) {
    if (this.identities == null) {
      this.identities = new ArrayList<>();
    }
    this.identities.add(identitiesItem);
    return this;
  }

  /**
   * A list of identities that are allowed access through this ingress policy, in the format of &#x60;user:{email_id}&#x60; or &#x60;serviceAccount:{email_id}&#x60;.
   * @return identities
   */
  @javax.annotation.Nullable
  public List<String> getIdentities() {
    return identities;
  }

  public void setIdentities(List<String> identities) {
    this.identities = identities;
  }


  public IngressFrom identityType(IdentityTypeEnum identityType) {
    this.identityType = identityType;
    return this;
  }

  /**
   * Specifies the type of identities that are allowed access from outside the perimeter. If left unspecified, then members of &#x60;identities&#x60; field will be allowed access.
   * @return identityType
   */
  @javax.annotation.Nullable
  public IdentityTypeEnum getIdentityType() {
    return identityType;
  }

  public void setIdentityType(IdentityTypeEnum identityType) {
    this.identityType = identityType;
  }


  public IngressFrom sources(List<IngressSource> sources) {
    this.sources = sources;
    return this;
  }

  public IngressFrom addSourcesItem(IngressSource sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * Sources that this IngressPolicy authorizes access from.
   * @return sources
   */
  @javax.annotation.Nullable
  public List<IngressSource> getSources() {
    return sources;
  }

  public void setSources(List<IngressSource> sources) {
    this.sources = sources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IngressFrom ingressFrom = (IngressFrom) o;
    return Objects.equals(this.identities, ingressFrom.identities) &&
        Objects.equals(this.identityType, ingressFrom.identityType) &&
        Objects.equals(this.sources, ingressFrom.sources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identities, identityType, sources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IngressFrom {\n");
    sb.append("    identities: ").append(toIndentedString(identities)).append("\n");
    sb.append("    identityType: ").append(toIndentedString(identityType)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("identities");
    openapiFields.add("identityType");
    openapiFields.add("sources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IngressFrom
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IngressFrom.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IngressFrom is not found in the empty JSON string", IngressFrom.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IngressFrom.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IngressFrom` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("identities") != null && !jsonObj.get("identities").isJsonNull() && !jsonObj.get("identities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `identities` to be an array in the JSON string but got `%s`", jsonObj.get("identities").toString()));
      }
      if ((jsonObj.get("identityType") != null && !jsonObj.get("identityType").isJsonNull()) && !jsonObj.get("identityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identityType").toString()));
      }
      // validate the optional field `identityType`
      if (jsonObj.get("identityType") != null && !jsonObj.get("identityType").isJsonNull()) {
        IdentityTypeEnum.validateJsonElement(jsonObj.get("identityType"));
      }
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull()) {
        JsonArray jsonArraysources = jsonObj.getAsJsonArray("sources");
        if (jsonArraysources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
          }

          // validate the optional field `sources` (array)
          for (int i = 0; i < jsonArraysources.size(); i++) {
            IngressSource.validateJsonElement(jsonArraysources.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IngressFrom.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IngressFrom' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IngressFrom> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IngressFrom.class));

       return (TypeAdapter<T>) new TypeAdapter<IngressFrom>() {
           @Override
           public void write(JsonWriter out, IngressFrom value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IngressFrom read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IngressFrom given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IngressFrom
   * @throws IOException if the JSON string is invalid with respect to IngressFrom
   */
  public static IngressFrom fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IngressFrom.class);
  }

  /**
   * Convert an instance of IngressFrom to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

