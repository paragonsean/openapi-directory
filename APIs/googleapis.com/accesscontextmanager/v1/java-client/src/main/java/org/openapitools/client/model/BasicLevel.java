/*
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Condition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &#x60;BasicLevel&#x60; is an &#x60;AccessLevel&#x60; using a set of recommended features.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:36.086263-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BasicLevel {
  /**
   * How the &#x60;conditions&#x60; list should be combined to determine if a request is granted this &#x60;AccessLevel&#x60;. If AND is used, each &#x60;Condition&#x60; in &#x60;conditions&#x60; must be satisfied for the &#x60;AccessLevel&#x60; to be applied. If OR is used, at least one &#x60;Condition&#x60; in &#x60;conditions&#x60; must be satisfied for the &#x60;AccessLevel&#x60; to be applied. Default behavior is AND.
   */
  @JsonAdapter(CombiningFunctionEnum.Adapter.class)
  public enum CombiningFunctionEnum {
    AND("AND"),
    
    OR("OR");

    private String value;

    CombiningFunctionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CombiningFunctionEnum fromValue(String value) {
      for (CombiningFunctionEnum b : CombiningFunctionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CombiningFunctionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CombiningFunctionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CombiningFunctionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CombiningFunctionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CombiningFunctionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMBINING_FUNCTION = "combiningFunction";
  @SerializedName(SERIALIZED_NAME_COMBINING_FUNCTION)
  private CombiningFunctionEnum combiningFunction;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<Condition> conditions = new ArrayList<>();

  public BasicLevel() {
  }

  public BasicLevel combiningFunction(CombiningFunctionEnum combiningFunction) {
    this.combiningFunction = combiningFunction;
    return this;
  }

  /**
   * How the &#x60;conditions&#x60; list should be combined to determine if a request is granted this &#x60;AccessLevel&#x60;. If AND is used, each &#x60;Condition&#x60; in &#x60;conditions&#x60; must be satisfied for the &#x60;AccessLevel&#x60; to be applied. If OR is used, at least one &#x60;Condition&#x60; in &#x60;conditions&#x60; must be satisfied for the &#x60;AccessLevel&#x60; to be applied. Default behavior is AND.
   * @return combiningFunction
   */
  @javax.annotation.Nullable
  public CombiningFunctionEnum getCombiningFunction() {
    return combiningFunction;
  }

  public void setCombiningFunction(CombiningFunctionEnum combiningFunction) {
    this.combiningFunction = combiningFunction;
  }


  public BasicLevel conditions(List<Condition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public BasicLevel addConditionsItem(Condition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Required. A list of requirements for the &#x60;AccessLevel&#x60; to be granted.
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<Condition> getConditions() {
    return conditions;
  }

  public void setConditions(List<Condition> conditions) {
    this.conditions = conditions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BasicLevel basicLevel = (BasicLevel) o;
    return Objects.equals(this.combiningFunction, basicLevel.combiningFunction) &&
        Objects.equals(this.conditions, basicLevel.conditions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(combiningFunction, conditions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasicLevel {\n");
    sb.append("    combiningFunction: ").append(toIndentedString(combiningFunction)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("combiningFunction");
    openapiFields.add("conditions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BasicLevel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BasicLevel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BasicLevel is not found in the empty JSON string", BasicLevel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BasicLevel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BasicLevel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("combiningFunction") != null && !jsonObj.get("combiningFunction").isJsonNull()) && !jsonObj.get("combiningFunction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `combiningFunction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("combiningFunction").toString()));
      }
      // validate the optional field `combiningFunction`
      if (jsonObj.get("combiningFunction") != null && !jsonObj.get("combiningFunction").isJsonNull()) {
        CombiningFunctionEnum.validateJsonElement(jsonObj.get("combiningFunction"));
      }
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            Condition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BasicLevel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BasicLevel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BasicLevel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BasicLevel.class));

       return (TypeAdapter<T>) new TypeAdapter<BasicLevel>() {
           @Override
           public void write(JsonWriter out, BasicLevel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BasicLevel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BasicLevel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BasicLevel
   * @throws IOException if the JSON string is invalid with respect to BasicLevel
   */
  public static BasicLevel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BasicLevel.class);
  }

  /**
   * Convert an instance of BasicLevel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

