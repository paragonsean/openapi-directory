/*
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessLevel;
import org.openapitools.client.model.AccessPolicy;
import org.openapitools.client.model.AuthorizedOrgsDesc;
import org.openapitools.client.model.CommitServicePerimetersRequest;
import org.openapitools.client.model.GetIamPolicyRequest;
import org.openapitools.client.model.ListAccessLevelsResponse;
import org.openapitools.client.model.ListAccessPoliciesResponse;
import org.openapitools.client.model.ListAuthorizedOrgsDescsResponse;
import org.openapitools.client.model.ListServicePerimetersResponse;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.ReplaceAccessLevelsRequest;
import org.openapitools.client.model.ReplaceServicePerimetersRequest;
import org.openapitools.client.model.ServicePerimeter;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccessPoliciesApi
 */
@Disabled
public class AccessPoliciesApiTest {

    private final AccessPoliciesApi api = new AccessPoliciesApi();

    /**
     * Creates an access level. The long-running operation from this RPC has a successful status after the access level propagates to long-lasting storage. If access levels contain errors, an error response is returned for the first error encountered.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesAccessLevelsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AccessLevel accessLevel = null;
        Operation response = api.accesscontextmanagerAccessPoliciesAccessLevelsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, accessLevel);
        // TODO: test validations
    }

    /**
     * Lists all access levels for an access policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesAccessLevelsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String accessLevelFormat = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAccessLevelsResponse response = api.accesscontextmanagerAccessPoliciesAccessLevelsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, accessLevelFormat, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Replaces all existing access levels in an access policy with the access levels provided. This is done atomically. The long-running operation from this RPC has a successful status after all replacements propagate to long-lasting storage. If the replacement contains errors, an error response is returned for the first error encountered. Upon error, the replacement is cancelled, and existing access levels are not affected. The Operation.response field contains ReplaceAccessLevelsResponse. Removing access levels contained in existing service perimeters result in an error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesAccessLevelsReplaceAllTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReplaceAccessLevelsRequest replaceAccessLevelsRequest = null;
        Operation response = api.accesscontextmanagerAccessPoliciesAccessLevelsReplaceAll(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, replaceAccessLevelsRequest);
        // TODO: test validations
    }

    /**
     * Creates an authorized orgs desc. The long-running operation from this RPC has a successful status after the authorized orgs desc propagates to long-lasting storage. If a authorized orgs desc contains errors, an error response is returned for the first error encountered. The name of this &#x60;AuthorizedOrgsDesc&#x60; will be assigned during creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesAuthorizedOrgsDescsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AuthorizedOrgsDesc authorizedOrgsDesc = null;
        Operation response = api.accesscontextmanagerAccessPoliciesAuthorizedOrgsDescsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, authorizedOrgsDesc);
        // TODO: test validations
    }

    /**
     * Lists all authorized orgs descs for an access policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesAuthorizedOrgsDescsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAuthorizedOrgsDescsResponse response = api.accesscontextmanagerAccessPoliciesAuthorizedOrgsDescsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates an access policy. This method fails if the organization already has an access policy. The long-running operation has a successful status after the access policy propagates to long-lasting storage. Syntactic and basic semantic errors are returned in &#x60;metadata&#x60; as a BadRequest proto.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AccessPolicy accessPolicy = null;
        Operation response = api.accesscontextmanagerAccessPoliciesCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, accessPolicy);
        // TODO: test validations
    }

    /**
     * Gets the IAM policy for the specified Access Context Manager access policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetIamPolicyRequest getIamPolicyRequest = null;
        Policy response = api.accesscontextmanagerAccessPoliciesGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, getIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Lists all access policies in an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String parent = null;
        ListAccessPoliciesResponse response = api.accesscontextmanagerAccessPoliciesList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, parent);
        // TODO: test validations
    }

    /**
     * Commits the dry-run specification for all the service perimeters in an access policy. A commit operation on a service perimeter involves copying its &#x60;spec&#x60; field to the &#x60;status&#x60; field of the service perimeter. Only service perimeters with &#x60;use_explicit_dry_run_spec&#x60; field set to true are affected by a commit operation. The long-running operation from this RPC has a successful status after the dry-run specifications for all the service perimeters have been committed. If a commit fails, it causes the long-running operation to return an error response and the entire commit operation is cancelled. When successful, the Operation.response field contains CommitServicePerimetersResponse. The &#x60;dry_run&#x60; and the &#x60;spec&#x60; fields are cleared after a successful commit operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesServicePerimetersCommitTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CommitServicePerimetersRequest commitServicePerimetersRequest = null;
        Operation response = api.accesscontextmanagerAccessPoliciesServicePerimetersCommit(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, commitServicePerimetersRequest);
        // TODO: test validations
    }

    /**
     * Creates a service perimeter. The long-running operation from this RPC has a successful status after the service perimeter propagates to long-lasting storage. If a service perimeter contains errors, an error response is returned for the first error encountered.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesServicePerimetersCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ServicePerimeter servicePerimeter = null;
        Operation response = api.accesscontextmanagerAccessPoliciesServicePerimetersCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, servicePerimeter);
        // TODO: test validations
    }

    /**
     * Lists all service perimeters for an access policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesServicePerimetersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListServicePerimetersResponse response = api.accesscontextmanagerAccessPoliciesServicePerimetersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Replace all existing service perimeters in an access policy with the service perimeters provided. This is done atomically. The long-running operation from this RPC has a successful status after all replacements propagate to long-lasting storage. Replacements containing errors result in an error response for the first error encountered. Upon an error, replacement are cancelled and existing service perimeters are not affected. The Operation.response field contains ReplaceServicePerimetersResponse.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesServicePerimetersReplaceAllTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReplaceServicePerimetersRequest replaceServicePerimetersRequest = null;
        Operation response = api.accesscontextmanagerAccessPoliciesServicePerimetersReplaceAll(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, replaceServicePerimetersRequest);
        // TODO: test validations
    }

    /**
     * Returns the IAM permissions that the caller has on the specified Access Context Manager resource. The resource can be an AccessPolicy, AccessLevel, or ServicePerimeter. This method does not support other resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesServicePerimetersTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.accesscontextmanagerAccessPoliciesServicePerimetersTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Sets the IAM policy for the specified Access Context Manager access policy. This method replaces the existing IAM policy on the access policy. The IAM policy controls the set of users who can perform specific operations on the Access Context Manager access policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.accesscontextmanagerAccessPoliciesSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

}
