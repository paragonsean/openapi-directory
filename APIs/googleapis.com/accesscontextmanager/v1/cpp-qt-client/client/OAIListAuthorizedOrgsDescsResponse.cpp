/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAuthorizedOrgsDescsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAuthorizedOrgsDescsResponse::OAIListAuthorizedOrgsDescsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAuthorizedOrgsDescsResponse::OAIListAuthorizedOrgsDescsResponse() {
    this->initializeModel();
}

OAIListAuthorizedOrgsDescsResponse::~OAIListAuthorizedOrgsDescsResponse() {}

void OAIListAuthorizedOrgsDescsResponse::initializeModel() {

    m_authorized_orgs_descs_isSet = false;
    m_authorized_orgs_descs_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListAuthorizedOrgsDescsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAuthorizedOrgsDescsResponse::fromJsonObject(QJsonObject json) {

    m_authorized_orgs_descs_isValid = ::OpenAPI::fromJsonValue(m_authorized_orgs_descs, json[QString("authorizedOrgsDescs")]);
    m_authorized_orgs_descs_isSet = !json[QString("authorizedOrgsDescs")].isNull() && m_authorized_orgs_descs_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListAuthorizedOrgsDescsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAuthorizedOrgsDescsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_authorized_orgs_descs.size() > 0) {
        obj.insert(QString("authorizedOrgsDescs"), ::OpenAPI::toJsonValue(m_authorized_orgs_descs));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIAuthorizedOrgsDesc> OAIListAuthorizedOrgsDescsResponse::getAuthorizedOrgsDescs() const {
    return m_authorized_orgs_descs;
}
void OAIListAuthorizedOrgsDescsResponse::setAuthorizedOrgsDescs(const QList<OAIAuthorizedOrgsDesc> &authorized_orgs_descs) {
    m_authorized_orgs_descs = authorized_orgs_descs;
    m_authorized_orgs_descs_isSet = true;
}

bool OAIListAuthorizedOrgsDescsResponse::is_authorized_orgs_descs_Set() const{
    return m_authorized_orgs_descs_isSet;
}

bool OAIListAuthorizedOrgsDescsResponse::is_authorized_orgs_descs_Valid() const{
    return m_authorized_orgs_descs_isValid;
}

QString OAIListAuthorizedOrgsDescsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListAuthorizedOrgsDescsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListAuthorizedOrgsDescsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListAuthorizedOrgsDescsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListAuthorizedOrgsDescsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorized_orgs_descs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAuthorizedOrgsDescsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
