/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessPolicy::OAIAccessPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessPolicy::OAIAccessPolicy() {
    this->initializeModel();
}

OAIAccessPolicy::~OAIAccessPolicy() {}

void OAIAccessPolicy::initializeModel() {

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIAccessPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessPolicy::fromJsonObject(QJsonObject json) {

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIAccessPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIAccessPolicy::getEtag() const {
    return m_etag;
}
void OAIAccessPolicy::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIAccessPolicy::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIAccessPolicy::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIAccessPolicy::getName() const {
    return m_name;
}
void OAIAccessPolicy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccessPolicy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccessPolicy::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAccessPolicy::getParent() const {
    return m_parent;
}
void OAIAccessPolicy::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIAccessPolicy::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIAccessPolicy::is_parent_Valid() const{
    return m_parent_isValid;
}

QList<QString> OAIAccessPolicy::getScopes() const {
    return m_scopes;
}
void OAIAccessPolicy::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIAccessPolicy::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIAccessPolicy::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QString OAIAccessPolicy::getTitle() const {
    return m_title;
}
void OAIAccessPolicy::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAccessPolicy::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAccessPolicy::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIAccessPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
