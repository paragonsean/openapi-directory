/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDevicePolicy.h
 *
 * &#x60;DevicePolicy&#x60; specifies device specific restrictions necessary to acquire a given access level. A &#x60;DevicePolicy&#x60; specifies requirements for requests from devices to be granted access levels, it does not do any enforcement on the device. &#x60;DevicePolicy&#x60; acts as an AND over all specified fields, and each repeated field is an OR over its elements. Any unset fields are ignored. For example, if the proto is { os_type : DESKTOP_WINDOWS, os_type : DESKTOP_LINUX, encryption_status: ENCRYPTED}, then the DevicePolicy will be true for requests originating from encrypted Linux desktops and encrypted Windows desktops.
 */

#ifndef OAIDevicePolicy_H
#define OAIDevicePolicy_H

#include <QJsonObject>

#include "OAIOsConstraint.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOsConstraint;

class OAIDevicePolicy : public OAIObject {
public:
    OAIDevicePolicy();
    OAIDevicePolicy(QString json);
    ~OAIDevicePolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAllowedDeviceManagementLevels() const;
    void setAllowedDeviceManagementLevels(const QList<QString> &allowed_device_management_levels);
    bool is_allowed_device_management_levels_Set() const;
    bool is_allowed_device_management_levels_Valid() const;

    QList<QString> getAllowedEncryptionStatuses() const;
    void setAllowedEncryptionStatuses(const QList<QString> &allowed_encryption_statuses);
    bool is_allowed_encryption_statuses_Set() const;
    bool is_allowed_encryption_statuses_Valid() const;

    QList<OAIOsConstraint> getOsConstraints() const;
    void setOsConstraints(const QList<OAIOsConstraint> &os_constraints);
    bool is_os_constraints_Set() const;
    bool is_os_constraints_Valid() const;

    bool isRequireAdminApproval() const;
    void setRequireAdminApproval(const bool &require_admin_approval);
    bool is_require_admin_approval_Set() const;
    bool is_require_admin_approval_Valid() const;

    bool isRequireCorpOwned() const;
    void setRequireCorpOwned(const bool &require_corp_owned);
    bool is_require_corp_owned_Set() const;
    bool is_require_corp_owned_Valid() const;

    bool isRequireScreenlock() const;
    void setRequireScreenlock(const bool &require_screenlock);
    bool is_require_screenlock_Set() const;
    bool is_require_screenlock_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_allowed_device_management_levels;
    bool m_allowed_device_management_levels_isSet;
    bool m_allowed_device_management_levels_isValid;

    QList<QString> m_allowed_encryption_statuses;
    bool m_allowed_encryption_statuses_isSet;
    bool m_allowed_encryption_statuses_isValid;

    QList<OAIOsConstraint> m_os_constraints;
    bool m_os_constraints_isSet;
    bool m_os_constraints_isValid;

    bool m_require_admin_approval;
    bool m_require_admin_approval_isSet;
    bool m_require_admin_approval_isValid;

    bool m_require_corp_owned;
    bool m_require_corp_owned_isSet;
    bool m_require_corp_owned_isValid;

    bool m_require_screenlock;
    bool m_require_screenlock_isSet;
    bool m_require_screenlock_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDevicePolicy)

#endif // OAIDevicePolicy_H
