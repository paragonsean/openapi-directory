/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccessPoliciesApi_H
#define OAI_OAIAccessPoliciesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessLevel.h"
#include "OAIAccessPolicy.h"
#include "OAIAuthorizedOrgsDesc.h"
#include "OAICommitServicePerimetersRequest.h"
#include "OAIGetIamPolicyRequest.h"
#include "OAIListAccessLevelsResponse.h"
#include "OAIListAccessPoliciesResponse.h"
#include "OAIListAuthorizedOrgsDescsResponse.h"
#include "OAIListServicePerimetersResponse.h"
#include "OAIOperation.h"
#include "OAIPolicy.h"
#include "OAIReplaceAccessLevelsRequest.h"
#include "OAIReplaceServicePerimetersRequest.h"
#include "OAIServicePerimeter.h"
#include "OAISetIamPolicyRequest.h"
#include "OAITestIamPermissionsRequest.h"
#include "OAITestIamPermissionsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccessPoliciesApi : public QObject {
    Q_OBJECT

public:
    OAIAccessPoliciesApi(const int timeOut = 0);
    ~OAIAccessPoliciesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_access_level OAIAccessLevel [optional]
    */
    virtual void accesscontextmanager_accessPolicies_accessLevels_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAccessLevel> &oai_access_level = ::OpenAPI::OptionalParam<OAIAccessLevel>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  access_level_format QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void accesscontextmanager_accessPolicies_accessLevels_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_level_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_replace_access_levels_request OAIReplaceAccessLevelsRequest [optional]
    */
    virtual void accesscontextmanager_accessPolicies_accessLevels_replaceAll(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIReplaceAccessLevelsRequest> &oai_replace_access_levels_request = ::OpenAPI::OptionalParam<OAIReplaceAccessLevelsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_authorized_orgs_desc OAIAuthorizedOrgsDesc [optional]
    */
    virtual void accesscontextmanager_accessPolicies_authorizedOrgsDescs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAuthorizedOrgsDesc> &oai_authorized_orgs_desc = ::OpenAPI::OptionalParam<OAIAuthorizedOrgsDesc>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void accesscontextmanager_accessPolicies_authorizedOrgsDescs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_access_policy OAIAccessPolicy [optional]
    */
    virtual void accesscontextmanager_accessPolicies_create(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAccessPolicy> &oai_access_policy = ::OpenAPI::OptionalParam<OAIAccessPolicy>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_get_iam_policy_request OAIGetIamPolicyRequest [optional]
    */
    virtual void accesscontextmanager_accessPolicies_getIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetIamPolicyRequest> &oai_get_iam_policy_request = ::OpenAPI::OptionalParam<OAIGetIamPolicyRequest>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  parent QString [optional]
    */
    virtual void accesscontextmanager_accessPolicies_list(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_commit_service_perimeters_request OAICommitServicePerimetersRequest [optional]
    */
    virtual void accesscontextmanager_accessPolicies_servicePerimeters_commit(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICommitServicePerimetersRequest> &oai_commit_service_perimeters_request = ::OpenAPI::OptionalParam<OAICommitServicePerimetersRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_service_perimeter OAIServicePerimeter [optional]
    */
    virtual void accesscontextmanager_accessPolicies_servicePerimeters_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIServicePerimeter> &oai_service_perimeter = ::OpenAPI::OptionalParam<OAIServicePerimeter>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void accesscontextmanager_accessPolicies_servicePerimeters_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_replace_service_perimeters_request OAIReplaceServicePerimetersRequest [optional]
    */
    virtual void accesscontextmanager_accessPolicies_servicePerimeters_replaceAll(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIReplaceServicePerimetersRequest> &oai_replace_service_perimeters_request = ::OpenAPI::OptionalParam<OAIReplaceServicePerimetersRequest>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_test_iam_permissions_request OAITestIamPermissionsRequest [optional]
    */
    virtual void accesscontextmanager_accessPolicies_servicePerimeters_testIamPermissions(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITestIamPermissionsRequest> &oai_test_iam_permissions_request = ::OpenAPI::OptionalParam<OAITestIamPermissionsRequest>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_set_iam_policy_request OAISetIamPolicyRequest [optional]
    */
    virtual void accesscontextmanager_accessPolicies_setIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetIamPolicyRequest> &oai_set_iam_policy_request = ::OpenAPI::OptionalParam<OAISetIamPolicyRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accesscontextmanager_accessPolicies_accessLevels_createCallback(OAIHttpRequestWorker *worker);
    void accesscontextmanager_accessPolicies_accessLevels_listCallback(OAIHttpRequestWorker *worker);
    void accesscontextmanager_accessPolicies_accessLevels_replaceAllCallback(OAIHttpRequestWorker *worker);
    void accesscontextmanager_accessPolicies_authorizedOrgsDescs_createCallback(OAIHttpRequestWorker *worker);
    void accesscontextmanager_accessPolicies_authorizedOrgsDescs_listCallback(OAIHttpRequestWorker *worker);
    void accesscontextmanager_accessPolicies_createCallback(OAIHttpRequestWorker *worker);
    void accesscontextmanager_accessPolicies_getIamPolicyCallback(OAIHttpRequestWorker *worker);
    void accesscontextmanager_accessPolicies_listCallback(OAIHttpRequestWorker *worker);
    void accesscontextmanager_accessPolicies_servicePerimeters_commitCallback(OAIHttpRequestWorker *worker);
    void accesscontextmanager_accessPolicies_servicePerimeters_createCallback(OAIHttpRequestWorker *worker);
    void accesscontextmanager_accessPolicies_servicePerimeters_listCallback(OAIHttpRequestWorker *worker);
    void accesscontextmanager_accessPolicies_servicePerimeters_replaceAllCallback(OAIHttpRequestWorker *worker);
    void accesscontextmanager_accessPolicies_servicePerimeters_testIamPermissionsCallback(OAIHttpRequestWorker *worker);
    void accesscontextmanager_accessPolicies_setIamPolicyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accesscontextmanager_accessPolicies_accessLevels_createSignal(OAIOperation summary);
    void accesscontextmanager_accessPolicies_accessLevels_listSignal(OAIListAccessLevelsResponse summary);
    void accesscontextmanager_accessPolicies_accessLevels_replaceAllSignal(OAIOperation summary);
    void accesscontextmanager_accessPolicies_authorizedOrgsDescs_createSignal(OAIOperation summary);
    void accesscontextmanager_accessPolicies_authorizedOrgsDescs_listSignal(OAIListAuthorizedOrgsDescsResponse summary);
    void accesscontextmanager_accessPolicies_createSignal(OAIOperation summary);
    void accesscontextmanager_accessPolicies_getIamPolicySignal(OAIPolicy summary);
    void accesscontextmanager_accessPolicies_listSignal(OAIListAccessPoliciesResponse summary);
    void accesscontextmanager_accessPolicies_servicePerimeters_commitSignal(OAIOperation summary);
    void accesscontextmanager_accessPolicies_servicePerimeters_createSignal(OAIOperation summary);
    void accesscontextmanager_accessPolicies_servicePerimeters_listSignal(OAIListServicePerimetersResponse summary);
    void accesscontextmanager_accessPolicies_servicePerimeters_replaceAllSignal(OAIOperation summary);
    void accesscontextmanager_accessPolicies_servicePerimeters_testIamPermissionsSignal(OAITestIamPermissionsResponse summary);
    void accesscontextmanager_accessPolicies_setIamPolicySignal(OAIPolicy summary);


    void accesscontextmanager_accessPolicies_accessLevels_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void accesscontextmanager_accessPolicies_accessLevels_listSignalFull(OAIHttpRequestWorker *worker, OAIListAccessLevelsResponse summary);
    void accesscontextmanager_accessPolicies_accessLevels_replaceAllSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void accesscontextmanager_accessPolicies_authorizedOrgsDescs_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void accesscontextmanager_accessPolicies_authorizedOrgsDescs_listSignalFull(OAIHttpRequestWorker *worker, OAIListAuthorizedOrgsDescsResponse summary);
    void accesscontextmanager_accessPolicies_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void accesscontextmanager_accessPolicies_getIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIPolicy summary);
    void accesscontextmanager_accessPolicies_listSignalFull(OAIHttpRequestWorker *worker, OAIListAccessPoliciesResponse summary);
    void accesscontextmanager_accessPolicies_servicePerimeters_commitSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void accesscontextmanager_accessPolicies_servicePerimeters_createSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void accesscontextmanager_accessPolicies_servicePerimeters_listSignalFull(OAIHttpRequestWorker *worker, OAIListServicePerimetersResponse summary);
    void accesscontextmanager_accessPolicies_servicePerimeters_replaceAllSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void accesscontextmanager_accessPolicies_servicePerimeters_testIamPermissionsSignalFull(OAIHttpRequestWorker *worker, OAITestIamPermissionsResponse summary);
    void accesscontextmanager_accessPolicies_setIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIPolicy summary);

    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_accessLevels_createSignalError() instead")
    void accesscontextmanager_accessPolicies_accessLevels_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_accessLevels_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_accessLevels_listSignalError() instead")
    void accesscontextmanager_accessPolicies_accessLevels_listSignalE(OAIListAccessLevelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_accessLevels_listSignalError(OAIListAccessLevelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_accessLevels_replaceAllSignalError() instead")
    void accesscontextmanager_accessPolicies_accessLevels_replaceAllSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_accessLevels_replaceAllSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_authorizedOrgsDescs_createSignalError() instead")
    void accesscontextmanager_accessPolicies_authorizedOrgsDescs_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_authorizedOrgsDescs_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_authorizedOrgsDescs_listSignalError() instead")
    void accesscontextmanager_accessPolicies_authorizedOrgsDescs_listSignalE(OAIListAuthorizedOrgsDescsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_authorizedOrgsDescs_listSignalError(OAIListAuthorizedOrgsDescsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_createSignalError() instead")
    void accesscontextmanager_accessPolicies_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_getIamPolicySignalError() instead")
    void accesscontextmanager_accessPolicies_getIamPolicySignalE(OAIPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_getIamPolicySignalError(OAIPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_listSignalError() instead")
    void accesscontextmanager_accessPolicies_listSignalE(OAIListAccessPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_listSignalError(OAIListAccessPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_servicePerimeters_commitSignalError() instead")
    void accesscontextmanager_accessPolicies_servicePerimeters_commitSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_servicePerimeters_commitSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_servicePerimeters_createSignalError() instead")
    void accesscontextmanager_accessPolicies_servicePerimeters_createSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_servicePerimeters_createSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_servicePerimeters_listSignalError() instead")
    void accesscontextmanager_accessPolicies_servicePerimeters_listSignalE(OAIListServicePerimetersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_servicePerimeters_listSignalError(OAIListServicePerimetersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_servicePerimeters_replaceAllSignalError() instead")
    void accesscontextmanager_accessPolicies_servicePerimeters_replaceAllSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_servicePerimeters_replaceAllSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_servicePerimeters_testIamPermissionsSignalError() instead")
    void accesscontextmanager_accessPolicies_servicePerimeters_testIamPermissionsSignalE(OAITestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_servicePerimeters_testIamPermissionsSignalError(OAITestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_setIamPolicySignalError() instead")
    void accesscontextmanager_accessPolicies_setIamPolicySignalE(OAIPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_setIamPolicySignalError(OAIPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_accessLevels_createSignalErrorFull() instead")
    void accesscontextmanager_accessPolicies_accessLevels_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_accessLevels_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_accessLevels_listSignalErrorFull() instead")
    void accesscontextmanager_accessPolicies_accessLevels_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_accessLevels_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_accessLevels_replaceAllSignalErrorFull() instead")
    void accesscontextmanager_accessPolicies_accessLevels_replaceAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_accessLevels_replaceAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_authorizedOrgsDescs_createSignalErrorFull() instead")
    void accesscontextmanager_accessPolicies_authorizedOrgsDescs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_authorizedOrgsDescs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_authorizedOrgsDescs_listSignalErrorFull() instead")
    void accesscontextmanager_accessPolicies_authorizedOrgsDescs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_authorizedOrgsDescs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_createSignalErrorFull() instead")
    void accesscontextmanager_accessPolicies_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_getIamPolicySignalErrorFull() instead")
    void accesscontextmanager_accessPolicies_getIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_getIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_listSignalErrorFull() instead")
    void accesscontextmanager_accessPolicies_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_servicePerimeters_commitSignalErrorFull() instead")
    void accesscontextmanager_accessPolicies_servicePerimeters_commitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_servicePerimeters_commitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_servicePerimeters_createSignalErrorFull() instead")
    void accesscontextmanager_accessPolicies_servicePerimeters_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_servicePerimeters_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_servicePerimeters_listSignalErrorFull() instead")
    void accesscontextmanager_accessPolicies_servicePerimeters_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_servicePerimeters_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_servicePerimeters_replaceAllSignalErrorFull() instead")
    void accesscontextmanager_accessPolicies_servicePerimeters_replaceAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_servicePerimeters_replaceAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_servicePerimeters_testIamPermissionsSignalErrorFull() instead")
    void accesscontextmanager_accessPolicies_servicePerimeters_testIamPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_servicePerimeters_testIamPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accesscontextmanager_accessPolicies_setIamPolicySignalErrorFull() instead")
    void accesscontextmanager_accessPolicies_setIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accesscontextmanager_accessPolicies_setIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
