/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBasicLevel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBasicLevel::OAIBasicLevel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBasicLevel::OAIBasicLevel() {
    this->initializeModel();
}

OAIBasicLevel::~OAIBasicLevel() {}

void OAIBasicLevel::initializeModel() {

    m_combining_function_isSet = false;
    m_combining_function_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;
}

void OAIBasicLevel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBasicLevel::fromJsonObject(QJsonObject json) {

    m_combining_function_isValid = ::OpenAPI::fromJsonValue(m_combining_function, json[QString("combiningFunction")]);
    m_combining_function_isSet = !json[QString("combiningFunction")].isNull() && m_combining_function_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;
}

QString OAIBasicLevel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBasicLevel::asJsonObject() const {
    QJsonObject obj;
    if (m_combining_function_isSet) {
        obj.insert(QString("combiningFunction"), ::OpenAPI::toJsonValue(m_combining_function));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    return obj;
}

QString OAIBasicLevel::getCombiningFunction() const {
    return m_combining_function;
}
void OAIBasicLevel::setCombiningFunction(const QString &combining_function) {
    m_combining_function = combining_function;
    m_combining_function_isSet = true;
}

bool OAIBasicLevel::is_combining_function_Set() const{
    return m_combining_function_isSet;
}

bool OAIBasicLevel::is_combining_function_Valid() const{
    return m_combining_function_isValid;
}

QList<OAICondition> OAIBasicLevel::getConditions() const {
    return m_conditions;
}
void OAIBasicLevel::setConditions(const QList<OAICondition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIBasicLevel::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIBasicLevel::is_conditions_Valid() const{
    return m_conditions_isValid;
}

bool OAIBasicLevel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_combining_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBasicLevel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
