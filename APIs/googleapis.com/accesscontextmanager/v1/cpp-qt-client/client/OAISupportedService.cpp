/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupportedService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupportedService::OAISupportedService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupportedService::OAISupportedService() {
    this->initializeModel();
}

OAISupportedService::~OAISupportedService() {}

void OAISupportedService::initializeModel() {

    m_available_on_restricted_vip_isSet = false;
    m_available_on_restricted_vip_isValid = false;

    m_known_limitations_isSet = false;
    m_known_limitations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_support_stage_isSet = false;
    m_support_stage_isValid = false;

    m_supported_methods_isSet = false;
    m_supported_methods_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAISupportedService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupportedService::fromJsonObject(QJsonObject json) {

    m_available_on_restricted_vip_isValid = ::OpenAPI::fromJsonValue(m_available_on_restricted_vip, json[QString("availableOnRestrictedVip")]);
    m_available_on_restricted_vip_isSet = !json[QString("availableOnRestrictedVip")].isNull() && m_available_on_restricted_vip_isValid;

    m_known_limitations_isValid = ::OpenAPI::fromJsonValue(m_known_limitations, json[QString("knownLimitations")]);
    m_known_limitations_isSet = !json[QString("knownLimitations")].isNull() && m_known_limitations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_support_stage_isValid = ::OpenAPI::fromJsonValue(m_support_stage, json[QString("supportStage")]);
    m_support_stage_isSet = !json[QString("supportStage")].isNull() && m_support_stage_isValid;

    m_supported_methods_isValid = ::OpenAPI::fromJsonValue(m_supported_methods, json[QString("supportedMethods")]);
    m_supported_methods_isSet = !json[QString("supportedMethods")].isNull() && m_supported_methods_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAISupportedService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupportedService::asJsonObject() const {
    QJsonObject obj;
    if (m_available_on_restricted_vip_isSet) {
        obj.insert(QString("availableOnRestrictedVip"), ::OpenAPI::toJsonValue(m_available_on_restricted_vip));
    }
    if (m_known_limitations_isSet) {
        obj.insert(QString("knownLimitations"), ::OpenAPI::toJsonValue(m_known_limitations));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_support_stage_isSet) {
        obj.insert(QString("supportStage"), ::OpenAPI::toJsonValue(m_support_stage));
    }
    if (m_supported_methods.size() > 0) {
        obj.insert(QString("supportedMethods"), ::OpenAPI::toJsonValue(m_supported_methods));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

bool OAISupportedService::isAvailableOnRestrictedVip() const {
    return m_available_on_restricted_vip;
}
void OAISupportedService::setAvailableOnRestrictedVip(const bool &available_on_restricted_vip) {
    m_available_on_restricted_vip = available_on_restricted_vip;
    m_available_on_restricted_vip_isSet = true;
}

bool OAISupportedService::is_available_on_restricted_vip_Set() const{
    return m_available_on_restricted_vip_isSet;
}

bool OAISupportedService::is_available_on_restricted_vip_Valid() const{
    return m_available_on_restricted_vip_isValid;
}

bool OAISupportedService::isKnownLimitations() const {
    return m_known_limitations;
}
void OAISupportedService::setKnownLimitations(const bool &known_limitations) {
    m_known_limitations = known_limitations;
    m_known_limitations_isSet = true;
}

bool OAISupportedService::is_known_limitations_Set() const{
    return m_known_limitations_isSet;
}

bool OAISupportedService::is_known_limitations_Valid() const{
    return m_known_limitations_isValid;
}

QString OAISupportedService::getName() const {
    return m_name;
}
void OAISupportedService::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISupportedService::is_name_Set() const{
    return m_name_isSet;
}

bool OAISupportedService::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISupportedService::getSupportStage() const {
    return m_support_stage;
}
void OAISupportedService::setSupportStage(const QString &support_stage) {
    m_support_stage = support_stage;
    m_support_stage_isSet = true;
}

bool OAISupportedService::is_support_stage_Set() const{
    return m_support_stage_isSet;
}

bool OAISupportedService::is_support_stage_Valid() const{
    return m_support_stage_isValid;
}

QList<OAIMethodSelector> OAISupportedService::getSupportedMethods() const {
    return m_supported_methods;
}
void OAISupportedService::setSupportedMethods(const QList<OAIMethodSelector> &supported_methods) {
    m_supported_methods = supported_methods;
    m_supported_methods_isSet = true;
}

bool OAISupportedService::is_supported_methods_Set() const{
    return m_supported_methods_isSet;
}

bool OAISupportedService::is_supported_methods_Valid() const{
    return m_supported_methods_isValid;
}

QString OAISupportedService::getTitle() const {
    return m_title;
}
void OAISupportedService::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISupportedService::is_title_Set() const{
    return m_title_isSet;
}

bool OAISupportedService::is_title_Valid() const{
    return m_title_isValid;
}

bool OAISupportedService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_on_restricted_vip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_known_limitations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupportedService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
