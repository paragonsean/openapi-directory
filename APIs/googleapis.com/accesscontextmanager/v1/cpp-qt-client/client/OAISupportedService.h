/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISupportedService.h
 *
 * &#x60;SupportedService&#x60; specifies the VPC Service Controls and its properties.
 */

#ifndef OAISupportedService_H
#define OAISupportedService_H

#include <QJsonObject>

#include "OAIMethodSelector.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMethodSelector;

class OAISupportedService : public OAIObject {
public:
    OAISupportedService();
    OAISupportedService(QString json);
    ~OAISupportedService() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAvailableOnRestrictedVip() const;
    void setAvailableOnRestrictedVip(const bool &available_on_restricted_vip);
    bool is_available_on_restricted_vip_Set() const;
    bool is_available_on_restricted_vip_Valid() const;

    bool isKnownLimitations() const;
    void setKnownLimitations(const bool &known_limitations);
    bool is_known_limitations_Set() const;
    bool is_known_limitations_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getSupportStage() const;
    void setSupportStage(const QString &support_stage);
    bool is_support_stage_Set() const;
    bool is_support_stage_Valid() const;

    QList<OAIMethodSelector> getSupportedMethods() const;
    void setSupportedMethods(const QList<OAIMethodSelector> &supported_methods);
    bool is_supported_methods_Set() const;
    bool is_supported_methods_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_available_on_restricted_vip;
    bool m_available_on_restricted_vip_isSet;
    bool m_available_on_restricted_vip_isValid;

    bool m_known_limitations;
    bool m_known_limitations_isSet;
    bool m_known_limitations_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_support_stage;
    bool m_support_stage_isSet;
    bool m_support_stage_isValid;

    QList<OAIMethodSelector> m_supported_methods;
    bool m_supported_methods_isSet;
    bool m_supported_methods_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISupportedService)

#endif // OAISupportedService_H
