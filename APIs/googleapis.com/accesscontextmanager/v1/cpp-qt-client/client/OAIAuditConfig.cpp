/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditConfig::OAIAuditConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditConfig::OAIAuditConfig() {
    this->initializeModel();
}

OAIAuditConfig::~OAIAuditConfig() {}

void OAIAuditConfig::initializeModel() {

    m_audit_log_configs_isSet = false;
    m_audit_log_configs_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;
}

void OAIAuditConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditConfig::fromJsonObject(QJsonObject json) {

    m_audit_log_configs_isValid = ::OpenAPI::fromJsonValue(m_audit_log_configs, json[QString("auditLogConfigs")]);
    m_audit_log_configs_isSet = !json[QString("auditLogConfigs")].isNull() && m_audit_log_configs_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;
}

QString OAIAuditConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_audit_log_configs.size() > 0) {
        obj.insert(QString("auditLogConfigs"), ::OpenAPI::toJsonValue(m_audit_log_configs));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    return obj;
}

QList<OAIAuditLogConfig> OAIAuditConfig::getAuditLogConfigs() const {
    return m_audit_log_configs;
}
void OAIAuditConfig::setAuditLogConfigs(const QList<OAIAuditLogConfig> &audit_log_configs) {
    m_audit_log_configs = audit_log_configs;
    m_audit_log_configs_isSet = true;
}

bool OAIAuditConfig::is_audit_log_configs_Set() const{
    return m_audit_log_configs_isSet;
}

bool OAIAuditConfig::is_audit_log_configs_Valid() const{
    return m_audit_log_configs_isValid;
}

QString OAIAuditConfig::getService() const {
    return m_service;
}
void OAIAuditConfig::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIAuditConfig::is_service_Set() const{
    return m_service_isSet;
}

bool OAIAuditConfig::is_service_Valid() const{
    return m_service_isValid;
}

bool OAIAuditConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audit_log_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
