/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizedOrgsDesc.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizedOrgsDesc::OAIAuthorizedOrgsDesc(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizedOrgsDesc::OAIAuthorizedOrgsDesc() {
    this->initializeModel();
}

OAIAuthorizedOrgsDesc::~OAIAuthorizedOrgsDesc() {}

void OAIAuthorizedOrgsDesc::initializeModel() {

    m_asset_type_isSet = false;
    m_asset_type_isValid = false;

    m_authorization_direction_isSet = false;
    m_authorization_direction_isValid = false;

    m_authorization_type_isSet = false;
    m_authorization_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_orgs_isSet = false;
    m_orgs_isValid = false;
}

void OAIAuthorizedOrgsDesc::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizedOrgsDesc::fromJsonObject(QJsonObject json) {

    m_asset_type_isValid = ::OpenAPI::fromJsonValue(m_asset_type, json[QString("assetType")]);
    m_asset_type_isSet = !json[QString("assetType")].isNull() && m_asset_type_isValid;

    m_authorization_direction_isValid = ::OpenAPI::fromJsonValue(m_authorization_direction, json[QString("authorizationDirection")]);
    m_authorization_direction_isSet = !json[QString("authorizationDirection")].isNull() && m_authorization_direction_isValid;

    m_authorization_type_isValid = ::OpenAPI::fromJsonValue(m_authorization_type, json[QString("authorizationType")]);
    m_authorization_type_isSet = !json[QString("authorizationType")].isNull() && m_authorization_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_orgs_isValid = ::OpenAPI::fromJsonValue(m_orgs, json[QString("orgs")]);
    m_orgs_isSet = !json[QString("orgs")].isNull() && m_orgs_isValid;
}

QString OAIAuthorizedOrgsDesc::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizedOrgsDesc::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_type_isSet) {
        obj.insert(QString("assetType"), ::OpenAPI::toJsonValue(m_asset_type));
    }
    if (m_authorization_direction_isSet) {
        obj.insert(QString("authorizationDirection"), ::OpenAPI::toJsonValue(m_authorization_direction));
    }
    if (m_authorization_type_isSet) {
        obj.insert(QString("authorizationType"), ::OpenAPI::toJsonValue(m_authorization_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_orgs.size() > 0) {
        obj.insert(QString("orgs"), ::OpenAPI::toJsonValue(m_orgs));
    }
    return obj;
}

QString OAIAuthorizedOrgsDesc::getAssetType() const {
    return m_asset_type;
}
void OAIAuthorizedOrgsDesc::setAssetType(const QString &asset_type) {
    m_asset_type = asset_type;
    m_asset_type_isSet = true;
}

bool OAIAuthorizedOrgsDesc::is_asset_type_Set() const{
    return m_asset_type_isSet;
}

bool OAIAuthorizedOrgsDesc::is_asset_type_Valid() const{
    return m_asset_type_isValid;
}

QString OAIAuthorizedOrgsDesc::getAuthorizationDirection() const {
    return m_authorization_direction;
}
void OAIAuthorizedOrgsDesc::setAuthorizationDirection(const QString &authorization_direction) {
    m_authorization_direction = authorization_direction;
    m_authorization_direction_isSet = true;
}

bool OAIAuthorizedOrgsDesc::is_authorization_direction_Set() const{
    return m_authorization_direction_isSet;
}

bool OAIAuthorizedOrgsDesc::is_authorization_direction_Valid() const{
    return m_authorization_direction_isValid;
}

QString OAIAuthorizedOrgsDesc::getAuthorizationType() const {
    return m_authorization_type;
}
void OAIAuthorizedOrgsDesc::setAuthorizationType(const QString &authorization_type) {
    m_authorization_type = authorization_type;
    m_authorization_type_isSet = true;
}

bool OAIAuthorizedOrgsDesc::is_authorization_type_Set() const{
    return m_authorization_type_isSet;
}

bool OAIAuthorizedOrgsDesc::is_authorization_type_Valid() const{
    return m_authorization_type_isValid;
}

QString OAIAuthorizedOrgsDesc::getName() const {
    return m_name;
}
void OAIAuthorizedOrgsDesc::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAuthorizedOrgsDesc::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAuthorizedOrgsDesc::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIAuthorizedOrgsDesc::getOrgs() const {
    return m_orgs;
}
void OAIAuthorizedOrgsDesc::setOrgs(const QList<QString> &orgs) {
    m_orgs = orgs;
    m_orgs_isSet = true;
}

bool OAIAuthorizedOrgsDesc::is_orgs_Set() const{
    return m_orgs_isSet;
}

bool OAIAuthorizedOrgsDesc::is_orgs_Valid() const{
    return m_orgs_isValid;
}

bool OAIAuthorizedOrgsDesc::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orgs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizedOrgsDesc::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
