/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevicePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevicePolicy::OAIDevicePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevicePolicy::OAIDevicePolicy() {
    this->initializeModel();
}

OAIDevicePolicy::~OAIDevicePolicy() {}

void OAIDevicePolicy::initializeModel() {

    m_allowed_device_management_levels_isSet = false;
    m_allowed_device_management_levels_isValid = false;

    m_allowed_encryption_statuses_isSet = false;
    m_allowed_encryption_statuses_isValid = false;

    m_os_constraints_isSet = false;
    m_os_constraints_isValid = false;

    m_require_admin_approval_isSet = false;
    m_require_admin_approval_isValid = false;

    m_require_corp_owned_isSet = false;
    m_require_corp_owned_isValid = false;

    m_require_screenlock_isSet = false;
    m_require_screenlock_isValid = false;
}

void OAIDevicePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDevicePolicy::fromJsonObject(QJsonObject json) {

    m_allowed_device_management_levels_isValid = ::OpenAPI::fromJsonValue(m_allowed_device_management_levels, json[QString("allowedDeviceManagementLevels")]);
    m_allowed_device_management_levels_isSet = !json[QString("allowedDeviceManagementLevels")].isNull() && m_allowed_device_management_levels_isValid;

    m_allowed_encryption_statuses_isValid = ::OpenAPI::fromJsonValue(m_allowed_encryption_statuses, json[QString("allowedEncryptionStatuses")]);
    m_allowed_encryption_statuses_isSet = !json[QString("allowedEncryptionStatuses")].isNull() && m_allowed_encryption_statuses_isValid;

    m_os_constraints_isValid = ::OpenAPI::fromJsonValue(m_os_constraints, json[QString("osConstraints")]);
    m_os_constraints_isSet = !json[QString("osConstraints")].isNull() && m_os_constraints_isValid;

    m_require_admin_approval_isValid = ::OpenAPI::fromJsonValue(m_require_admin_approval, json[QString("requireAdminApproval")]);
    m_require_admin_approval_isSet = !json[QString("requireAdminApproval")].isNull() && m_require_admin_approval_isValid;

    m_require_corp_owned_isValid = ::OpenAPI::fromJsonValue(m_require_corp_owned, json[QString("requireCorpOwned")]);
    m_require_corp_owned_isSet = !json[QString("requireCorpOwned")].isNull() && m_require_corp_owned_isValid;

    m_require_screenlock_isValid = ::OpenAPI::fromJsonValue(m_require_screenlock, json[QString("requireScreenlock")]);
    m_require_screenlock_isSet = !json[QString("requireScreenlock")].isNull() && m_require_screenlock_isValid;
}

QString OAIDevicePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDevicePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_device_management_levels.size() > 0) {
        obj.insert(QString("allowedDeviceManagementLevels"), ::OpenAPI::toJsonValue(m_allowed_device_management_levels));
    }
    if (m_allowed_encryption_statuses.size() > 0) {
        obj.insert(QString("allowedEncryptionStatuses"), ::OpenAPI::toJsonValue(m_allowed_encryption_statuses));
    }
    if (m_os_constraints.size() > 0) {
        obj.insert(QString("osConstraints"), ::OpenAPI::toJsonValue(m_os_constraints));
    }
    if (m_require_admin_approval_isSet) {
        obj.insert(QString("requireAdminApproval"), ::OpenAPI::toJsonValue(m_require_admin_approval));
    }
    if (m_require_corp_owned_isSet) {
        obj.insert(QString("requireCorpOwned"), ::OpenAPI::toJsonValue(m_require_corp_owned));
    }
    if (m_require_screenlock_isSet) {
        obj.insert(QString("requireScreenlock"), ::OpenAPI::toJsonValue(m_require_screenlock));
    }
    return obj;
}

QList<QString> OAIDevicePolicy::getAllowedDeviceManagementLevels() const {
    return m_allowed_device_management_levels;
}
void OAIDevicePolicy::setAllowedDeviceManagementLevels(const QList<QString> &allowed_device_management_levels) {
    m_allowed_device_management_levels = allowed_device_management_levels;
    m_allowed_device_management_levels_isSet = true;
}

bool OAIDevicePolicy::is_allowed_device_management_levels_Set() const{
    return m_allowed_device_management_levels_isSet;
}

bool OAIDevicePolicy::is_allowed_device_management_levels_Valid() const{
    return m_allowed_device_management_levels_isValid;
}

QList<QString> OAIDevicePolicy::getAllowedEncryptionStatuses() const {
    return m_allowed_encryption_statuses;
}
void OAIDevicePolicy::setAllowedEncryptionStatuses(const QList<QString> &allowed_encryption_statuses) {
    m_allowed_encryption_statuses = allowed_encryption_statuses;
    m_allowed_encryption_statuses_isSet = true;
}

bool OAIDevicePolicy::is_allowed_encryption_statuses_Set() const{
    return m_allowed_encryption_statuses_isSet;
}

bool OAIDevicePolicy::is_allowed_encryption_statuses_Valid() const{
    return m_allowed_encryption_statuses_isValid;
}

QList<OAIOsConstraint> OAIDevicePolicy::getOsConstraints() const {
    return m_os_constraints;
}
void OAIDevicePolicy::setOsConstraints(const QList<OAIOsConstraint> &os_constraints) {
    m_os_constraints = os_constraints;
    m_os_constraints_isSet = true;
}

bool OAIDevicePolicy::is_os_constraints_Set() const{
    return m_os_constraints_isSet;
}

bool OAIDevicePolicy::is_os_constraints_Valid() const{
    return m_os_constraints_isValid;
}

bool OAIDevicePolicy::isRequireAdminApproval() const {
    return m_require_admin_approval;
}
void OAIDevicePolicy::setRequireAdminApproval(const bool &require_admin_approval) {
    m_require_admin_approval = require_admin_approval;
    m_require_admin_approval_isSet = true;
}

bool OAIDevicePolicy::is_require_admin_approval_Set() const{
    return m_require_admin_approval_isSet;
}

bool OAIDevicePolicy::is_require_admin_approval_Valid() const{
    return m_require_admin_approval_isValid;
}

bool OAIDevicePolicy::isRequireCorpOwned() const {
    return m_require_corp_owned;
}
void OAIDevicePolicy::setRequireCorpOwned(const bool &require_corp_owned) {
    m_require_corp_owned = require_corp_owned;
    m_require_corp_owned_isSet = true;
}

bool OAIDevicePolicy::is_require_corp_owned_Set() const{
    return m_require_corp_owned_isSet;
}

bool OAIDevicePolicy::is_require_corp_owned_Valid() const{
    return m_require_corp_owned_isValid;
}

bool OAIDevicePolicy::isRequireScreenlock() const {
    return m_require_screenlock;
}
void OAIDevicePolicy::setRequireScreenlock(const bool &require_screenlock) {
    m_require_screenlock = require_screenlock;
    m_require_screenlock_isSet = true;
}

bool OAIDevicePolicy::is_require_screenlock_Set() const{
    return m_require_screenlock_isSet;
}

bool OAIDevicePolicy::is_require_screenlock_Valid() const{
    return m_require_screenlock_isValid;
}

bool OAIDevicePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_device_management_levels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_encryption_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_constraints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_admin_approval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_corp_owned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_screenlock_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDevicePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
