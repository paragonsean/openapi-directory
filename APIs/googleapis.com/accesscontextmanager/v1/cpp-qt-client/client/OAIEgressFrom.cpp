/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEgressFrom.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEgressFrom::OAIEgressFrom(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEgressFrom::OAIEgressFrom() {
    this->initializeModel();
}

OAIEgressFrom::~OAIEgressFrom() {}

void OAIEgressFrom::initializeModel() {

    m_identities_isSet = false;
    m_identities_isValid = false;

    m_identity_type_isSet = false;
    m_identity_type_isValid = false;

    m_source_restriction_isSet = false;
    m_source_restriction_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAIEgressFrom::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEgressFrom::fromJsonObject(QJsonObject json) {

    m_identities_isValid = ::OpenAPI::fromJsonValue(m_identities, json[QString("identities")]);
    m_identities_isSet = !json[QString("identities")].isNull() && m_identities_isValid;

    m_identity_type_isValid = ::OpenAPI::fromJsonValue(m_identity_type, json[QString("identityType")]);
    m_identity_type_isSet = !json[QString("identityType")].isNull() && m_identity_type_isValid;

    m_source_restriction_isValid = ::OpenAPI::fromJsonValue(m_source_restriction, json[QString("sourceRestriction")]);
    m_source_restriction_isSet = !json[QString("sourceRestriction")].isNull() && m_source_restriction_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAIEgressFrom::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEgressFrom::asJsonObject() const {
    QJsonObject obj;
    if (m_identities.size() > 0) {
        obj.insert(QString("identities"), ::OpenAPI::toJsonValue(m_identities));
    }
    if (m_identity_type_isSet) {
        obj.insert(QString("identityType"), ::OpenAPI::toJsonValue(m_identity_type));
    }
    if (m_source_restriction_isSet) {
        obj.insert(QString("sourceRestriction"), ::OpenAPI::toJsonValue(m_source_restriction));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

QList<QString> OAIEgressFrom::getIdentities() const {
    return m_identities;
}
void OAIEgressFrom::setIdentities(const QList<QString> &identities) {
    m_identities = identities;
    m_identities_isSet = true;
}

bool OAIEgressFrom::is_identities_Set() const{
    return m_identities_isSet;
}

bool OAIEgressFrom::is_identities_Valid() const{
    return m_identities_isValid;
}

QString OAIEgressFrom::getIdentityType() const {
    return m_identity_type;
}
void OAIEgressFrom::setIdentityType(const QString &identity_type) {
    m_identity_type = identity_type;
    m_identity_type_isSet = true;
}

bool OAIEgressFrom::is_identity_type_Set() const{
    return m_identity_type_isSet;
}

bool OAIEgressFrom::is_identity_type_Valid() const{
    return m_identity_type_isValid;
}

QString OAIEgressFrom::getSourceRestriction() const {
    return m_source_restriction;
}
void OAIEgressFrom::setSourceRestriction(const QString &source_restriction) {
    m_source_restriction = source_restriction;
    m_source_restriction_isSet = true;
}

bool OAIEgressFrom::is_source_restriction_Set() const{
    return m_source_restriction_isSet;
}

bool OAIEgressFrom::is_source_restriction_Valid() const{
    return m_source_restriction_isValid;
}

QList<OAIEgressSource> OAIEgressFrom::getSources() const {
    return m_sources;
}
void OAIEgressFrom::setSources(const QList<OAIEgressSource> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIEgressFrom::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIEgressFrom::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAIEgressFrom::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_restriction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEgressFrom::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
