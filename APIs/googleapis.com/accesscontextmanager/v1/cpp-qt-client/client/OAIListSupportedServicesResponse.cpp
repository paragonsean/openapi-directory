/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListSupportedServicesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListSupportedServicesResponse::OAIListSupportedServicesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListSupportedServicesResponse::OAIListSupportedServicesResponse() {
    this->initializeModel();
}

OAIListSupportedServicesResponse::~OAIListSupportedServicesResponse() {}

void OAIListSupportedServicesResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_supported_services_isSet = false;
    m_supported_services_isValid = false;
}

void OAIListSupportedServicesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListSupportedServicesResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_supported_services_isValid = ::OpenAPI::fromJsonValue(m_supported_services, json[QString("supportedServices")]);
    m_supported_services_isSet = !json[QString("supportedServices")].isNull() && m_supported_services_isValid;
}

QString OAIListSupportedServicesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListSupportedServicesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_supported_services.size() > 0) {
        obj.insert(QString("supportedServices"), ::OpenAPI::toJsonValue(m_supported_services));
    }
    return obj;
}

QString OAIListSupportedServicesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListSupportedServicesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListSupportedServicesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListSupportedServicesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAISupportedService> OAIListSupportedServicesResponse::getSupportedServices() const {
    return m_supported_services;
}
void OAIListSupportedServicesResponse::setSupportedServices(const QList<OAISupportedService> &supported_services) {
    m_supported_services = supported_services;
    m_supported_services_isSet = true;
}

bool OAIListSupportedServicesResponse::is_supported_services_Set() const{
    return m_supported_services_isSet;
}

bool OAIListSupportedServicesResponse::is_supported_services_Valid() const{
    return m_supported_services_isValid;
}

bool OAIListSupportedServicesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListSupportedServicesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
