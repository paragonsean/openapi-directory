/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServicePerimeter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServicePerimeter::OAIServicePerimeter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServicePerimeter::OAIServicePerimeter() {
    this->initializeModel();
}

OAIServicePerimeter::~OAIServicePerimeter() {}

void OAIServicePerimeter::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_perimeter_type_isSet = false;
    m_perimeter_type_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_use_explicit_dry_run_spec_isSet = false;
    m_use_explicit_dry_run_spec_isValid = false;
}

void OAIServicePerimeter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServicePerimeter::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_perimeter_type_isValid = ::OpenAPI::fromJsonValue(m_perimeter_type, json[QString("perimeterType")]);
    m_perimeter_type_isSet = !json[QString("perimeterType")].isNull() && m_perimeter_type_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_use_explicit_dry_run_spec_isValid = ::OpenAPI::fromJsonValue(m_use_explicit_dry_run_spec, json[QString("useExplicitDryRunSpec")]);
    m_use_explicit_dry_run_spec_isSet = !json[QString("useExplicitDryRunSpec")].isNull() && m_use_explicit_dry_run_spec_isValid;
}

QString OAIServicePerimeter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServicePerimeter::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_perimeter_type_isSet) {
        obj.insert(QString("perimeterType"), ::OpenAPI::toJsonValue(m_perimeter_type));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_use_explicit_dry_run_spec_isSet) {
        obj.insert(QString("useExplicitDryRunSpec"), ::OpenAPI::toJsonValue(m_use_explicit_dry_run_spec));
    }
    return obj;
}

QString OAIServicePerimeter::getDescription() const {
    return m_description;
}
void OAIServicePerimeter::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIServicePerimeter::is_description_Set() const{
    return m_description_isSet;
}

bool OAIServicePerimeter::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIServicePerimeter::getName() const {
    return m_name;
}
void OAIServicePerimeter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServicePerimeter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServicePerimeter::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIServicePerimeter::getPerimeterType() const {
    return m_perimeter_type;
}
void OAIServicePerimeter::setPerimeterType(const QString &perimeter_type) {
    m_perimeter_type = perimeter_type;
    m_perimeter_type_isSet = true;
}

bool OAIServicePerimeter::is_perimeter_type_Set() const{
    return m_perimeter_type_isSet;
}

bool OAIServicePerimeter::is_perimeter_type_Valid() const{
    return m_perimeter_type_isValid;
}

OAIServicePerimeterConfig OAIServicePerimeter::getSpec() const {
    return m_spec;
}
void OAIServicePerimeter::setSpec(const OAIServicePerimeterConfig &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIServicePerimeter::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIServicePerimeter::is_spec_Valid() const{
    return m_spec_isValid;
}

OAIServicePerimeterConfig OAIServicePerimeter::getStatus() const {
    return m_status;
}
void OAIServicePerimeter::setStatus(const OAIServicePerimeterConfig &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIServicePerimeter::is_status_Set() const{
    return m_status_isSet;
}

bool OAIServicePerimeter::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIServicePerimeter::getTitle() const {
    return m_title;
}
void OAIServicePerimeter::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIServicePerimeter::is_title_Set() const{
    return m_title_isSet;
}

bool OAIServicePerimeter::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIServicePerimeter::isUseExplicitDryRunSpec() const {
    return m_use_explicit_dry_run_spec;
}
void OAIServicePerimeter::setUseExplicitDryRunSpec(const bool &use_explicit_dry_run_spec) {
    m_use_explicit_dry_run_spec = use_explicit_dry_run_spec;
    m_use_explicit_dry_run_spec_isSet = true;
}

bool OAIServicePerimeter::is_use_explicit_dry_run_spec_Set() const{
    return m_use_explicit_dry_run_spec_isSet;
}

bool OAIServicePerimeter::is_use_explicit_dry_run_spec_Valid() const{
    return m_use_explicit_dry_run_spec_isValid;
}

bool OAIServicePerimeter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perimeter_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_explicit_dry_run_spec_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServicePerimeter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
