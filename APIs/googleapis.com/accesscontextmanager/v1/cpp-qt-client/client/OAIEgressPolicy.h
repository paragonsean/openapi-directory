/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEgressPolicy.h
 *
 * Policy for egress from perimeter. EgressPolicies match requests based on &#x60;egress_from&#x60; and &#x60;egress_to&#x60; stanzas. For an EgressPolicy to match, both &#x60;egress_from&#x60; and &#x60;egress_to&#x60; stanzas must be matched. If an EgressPolicy matches a request, the request is allowed to span the ServicePerimeter boundary. For example, an EgressPolicy can be used to allow VMs on networks within the ServicePerimeter to access a defined set of projects outside the perimeter in certain contexts (e.g. to read data from a Cloud Storage bucket or query against a BigQuery dataset). EgressPolicies are concerned with the *resources* that a request relates as well as the API services and API actions being used. They do not related to the direction of data movement. More detailed documentation for this concept can be found in the descriptions of EgressFrom and EgressTo.
 */

#ifndef OAIEgressPolicy_H
#define OAIEgressPolicy_H

#include <QJsonObject>

#include "OAIEgressFrom.h"
#include "OAIEgressTo.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEgressFrom;
class OAIEgressTo;

class OAIEgressPolicy : public OAIObject {
public:
    OAIEgressPolicy();
    OAIEgressPolicy(QString json);
    ~OAIEgressPolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIEgressFrom getEgressFrom() const;
    void setEgressFrom(const OAIEgressFrom &egress_from);
    bool is_egress_from_Set() const;
    bool is_egress_from_Valid() const;

    OAIEgressTo getEgressTo() const;
    void setEgressTo(const OAIEgressTo &egress_to);
    bool is_egress_to_Set() const;
    bool is_egress_to_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIEgressFrom m_egress_from;
    bool m_egress_from_isSet;
    bool m_egress_from_isValid;

    OAIEgressTo m_egress_to;
    bool m_egress_to_isSet;
    bool m_egress_to_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEgressPolicy)

#endif // OAIEgressPolicy_H
