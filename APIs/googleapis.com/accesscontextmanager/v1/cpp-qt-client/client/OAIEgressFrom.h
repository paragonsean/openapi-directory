/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEgressFrom.h
 *
 * Defines the conditions under which an EgressPolicy matches a request. Conditions based on information about the source of the request. Note that if the destination of the request is also protected by a ServicePerimeter, then that ServicePerimeter must have an IngressPolicy which allows access in order for this request to succeed.
 */

#ifndef OAIEgressFrom_H
#define OAIEgressFrom_H

#include <QJsonObject>

#include "OAIEgressSource.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEgressSource;

class OAIEgressFrom : public OAIObject {
public:
    OAIEgressFrom();
    OAIEgressFrom(QString json);
    ~OAIEgressFrom() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getIdentities() const;
    void setIdentities(const QList<QString> &identities);
    bool is_identities_Set() const;
    bool is_identities_Valid() const;

    QString getIdentityType() const;
    void setIdentityType(const QString &identity_type);
    bool is_identity_type_Set() const;
    bool is_identity_type_Valid() const;

    QString getSourceRestriction() const;
    void setSourceRestriction(const QString &source_restriction);
    bool is_source_restriction_Set() const;
    bool is_source_restriction_Valid() const;

    QList<OAIEgressSource> getSources() const;
    void setSources(const QList<OAIEgressSource> &sources);
    bool is_sources_Set() const;
    bool is_sources_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_identities;
    bool m_identities_isSet;
    bool m_identities_isValid;

    QString m_identity_type;
    bool m_identity_type_isSet;
    bool m_identity_type_isValid;

    QString m_source_restriction;
    bool m_source_restriction_isSet;
    bool m_source_restriction_isValid;

    QList<OAIEgressSource> m_sources;
    bool m_sources_isSet;
    bool m_sources_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEgressFrom)

#endif // OAIEgressFrom_H
