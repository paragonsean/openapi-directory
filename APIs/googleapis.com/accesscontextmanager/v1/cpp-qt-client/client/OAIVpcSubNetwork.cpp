/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpcSubNetwork.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpcSubNetwork::OAIVpcSubNetwork(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpcSubNetwork::OAIVpcSubNetwork() {
    this->initializeModel();
}

OAIVpcSubNetwork::~OAIVpcSubNetwork() {}

void OAIVpcSubNetwork::initializeModel() {

    m_network_isSet = false;
    m_network_isValid = false;

    m_vpc_ip_subnetworks_isSet = false;
    m_vpc_ip_subnetworks_isValid = false;
}

void OAIVpcSubNetwork::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpcSubNetwork::fromJsonObject(QJsonObject json) {

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_vpc_ip_subnetworks_isValid = ::OpenAPI::fromJsonValue(m_vpc_ip_subnetworks, json[QString("vpcIpSubnetworks")]);
    m_vpc_ip_subnetworks_isSet = !json[QString("vpcIpSubnetworks")].isNull() && m_vpc_ip_subnetworks_isValid;
}

QString OAIVpcSubNetwork::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpcSubNetwork::asJsonObject() const {
    QJsonObject obj;
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_vpc_ip_subnetworks.size() > 0) {
        obj.insert(QString("vpcIpSubnetworks"), ::OpenAPI::toJsonValue(m_vpc_ip_subnetworks));
    }
    return obj;
}

QString OAIVpcSubNetwork::getNetwork() const {
    return m_network;
}
void OAIVpcSubNetwork::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIVpcSubNetwork::is_network_Set() const{
    return m_network_isSet;
}

bool OAIVpcSubNetwork::is_network_Valid() const{
    return m_network_isValid;
}

QList<QString> OAIVpcSubNetwork::getVpcIpSubnetworks() const {
    return m_vpc_ip_subnetworks;
}
void OAIVpcSubNetwork::setVpcIpSubnetworks(const QList<QString> &vpc_ip_subnetworks) {
    m_vpc_ip_subnetworks = vpc_ip_subnetworks;
    m_vpc_ip_subnetworks_isSet = true;
}

bool OAIVpcSubNetwork::is_vpc_ip_subnetworks_Set() const{
    return m_vpc_ip_subnetworks_isSet;
}

bool OAIVpcSubNetwork::is_vpc_ip_subnetworks_Valid() const{
    return m_vpc_ip_subnetworks_isValid;
}

bool OAIVpcSubNetwork::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_ip_subnetworks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpcSubNetwork::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
