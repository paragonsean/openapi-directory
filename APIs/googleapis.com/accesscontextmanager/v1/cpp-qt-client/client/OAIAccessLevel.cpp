/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessLevel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessLevel::OAIAccessLevel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessLevel::OAIAccessLevel() {
    this->initializeModel();
}

OAIAccessLevel::~OAIAccessLevel() {}

void OAIAccessLevel::initializeModel() {

    m_basic_isSet = false;
    m_basic_isValid = false;

    m_custom_isSet = false;
    m_custom_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIAccessLevel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessLevel::fromJsonObject(QJsonObject json) {

    m_basic_isValid = ::OpenAPI::fromJsonValue(m_basic, json[QString("basic")]);
    m_basic_isSet = !json[QString("basic")].isNull() && m_basic_isValid;

    m_custom_isValid = ::OpenAPI::fromJsonValue(m_custom, json[QString("custom")]);
    m_custom_isSet = !json[QString("custom")].isNull() && m_custom_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIAccessLevel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessLevel::asJsonObject() const {
    QJsonObject obj;
    if (m_basic.isSet()) {
        obj.insert(QString("basic"), ::OpenAPI::toJsonValue(m_basic));
    }
    if (m_custom.isSet()) {
        obj.insert(QString("custom"), ::OpenAPI::toJsonValue(m_custom));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAIBasicLevel OAIAccessLevel::getBasic() const {
    return m_basic;
}
void OAIAccessLevel::setBasic(const OAIBasicLevel &basic) {
    m_basic = basic;
    m_basic_isSet = true;
}

bool OAIAccessLevel::is_basic_Set() const{
    return m_basic_isSet;
}

bool OAIAccessLevel::is_basic_Valid() const{
    return m_basic_isValid;
}

OAICustomLevel OAIAccessLevel::getCustom() const {
    return m_custom;
}
void OAIAccessLevel::setCustom(const OAICustomLevel &custom) {
    m_custom = custom;
    m_custom_isSet = true;
}

bool OAIAccessLevel::is_custom_Set() const{
    return m_custom_isSet;
}

bool OAIAccessLevel::is_custom_Valid() const{
    return m_custom_isValid;
}

QString OAIAccessLevel::getDescription() const {
    return m_description;
}
void OAIAccessLevel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAccessLevel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAccessLevel::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAccessLevel::getName() const {
    return m_name;
}
void OAIAccessLevel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccessLevel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccessLevel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAccessLevel::getTitle() const {
    return m_title;
}
void OAIAccessLevel::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAccessLevel::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAccessLevel::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIAccessLevel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_basic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessLevel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
