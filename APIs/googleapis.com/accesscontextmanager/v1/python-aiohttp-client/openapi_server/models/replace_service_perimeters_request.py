# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_perimeter import ServicePerimeter
from openapi_server import util


class ReplaceServicePerimetersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, etag: str=None, service_perimeters: List[ServicePerimeter]=None):
        """ReplaceServicePerimetersRequest - a model defined in OpenAPI

        :param etag: The etag of this ReplaceServicePerimetersRequest.
        :param service_perimeters: The service_perimeters of this ReplaceServicePerimetersRequest.
        """
        self.openapi_types = {
            'etag': str,
            'service_perimeters': List[ServicePerimeter]
        }

        self.attribute_map = {
            'etag': 'etag',
            'service_perimeters': 'servicePerimeters'
        }

        self._etag = etag
        self._service_perimeters = service_perimeters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplaceServicePerimetersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplaceServicePerimetersRequest of this ReplaceServicePerimetersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def etag(self):
        """Gets the etag of this ReplaceServicePerimetersRequest.

        Optional. The etag for the version of the Access Policy that this replace operation is to be performed on. If, at the time of replace, the etag for the Access Policy stored in Access Context Manager is different from the specified etag, then the replace operation will not be performed and the call will fail. This field is not required. If etag is not provided, the operation will be performed as if a valid etag is provided.

        :return: The etag of this ReplaceServicePerimetersRequest.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ReplaceServicePerimetersRequest.

        Optional. The etag for the version of the Access Policy that this replace operation is to be performed on. If, at the time of replace, the etag for the Access Policy stored in Access Context Manager is different from the specified etag, then the replace operation will not be performed and the call will fail. This field is not required. If etag is not provided, the operation will be performed as if a valid etag is provided.

        :param etag: The etag of this ReplaceServicePerimetersRequest.
        :type etag: str
        """

        self._etag = etag

    @property
    def service_perimeters(self):
        """Gets the service_perimeters of this ReplaceServicePerimetersRequest.

        Required. The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.

        :return: The service_perimeters of this ReplaceServicePerimetersRequest.
        :rtype: List[ServicePerimeter]
        """
        return self._service_perimeters

    @service_perimeters.setter
    def service_perimeters(self, service_perimeters):
        """Sets the service_perimeters of this ReplaceServicePerimetersRequest.

        Required. The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.

        :param service_perimeters: The service_perimeters of this ReplaceServicePerimetersRequest.
        :type service_perimeters: List[ServicePerimeter]
        """

        self._service_perimeters = service_perimeters
