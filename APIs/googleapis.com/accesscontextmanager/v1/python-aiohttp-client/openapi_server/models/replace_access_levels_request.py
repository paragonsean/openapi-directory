# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_level import AccessLevel
from openapi_server import util


class ReplaceAccessLevelsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_levels: List[AccessLevel]=None, etag: str=None):
        """ReplaceAccessLevelsRequest - a model defined in OpenAPI

        :param access_levels: The access_levels of this ReplaceAccessLevelsRequest.
        :param etag: The etag of this ReplaceAccessLevelsRequest.
        """
        self.openapi_types = {
            'access_levels': List[AccessLevel],
            'etag': str
        }

        self.attribute_map = {
            'access_levels': 'accessLevels',
            'etag': 'etag'
        }

        self._access_levels = access_levels
        self._etag = etag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplaceAccessLevelsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplaceAccessLevelsRequest of this ReplaceAccessLevelsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_levels(self):
        """Gets the access_levels of this ReplaceAccessLevelsRequest.

        Required. The desired Access Levels that should replace all existing Access Levels in the Access Policy.

        :return: The access_levels of this ReplaceAccessLevelsRequest.
        :rtype: List[AccessLevel]
        """
        return self._access_levels

    @access_levels.setter
    def access_levels(self, access_levels):
        """Sets the access_levels of this ReplaceAccessLevelsRequest.

        Required. The desired Access Levels that should replace all existing Access Levels in the Access Policy.

        :param access_levels: The access_levels of this ReplaceAccessLevelsRequest.
        :type access_levels: List[AccessLevel]
        """

        self._access_levels = access_levels

    @property
    def etag(self):
        """Gets the etag of this ReplaceAccessLevelsRequest.

        Optional. The etag for the version of the Access Policy that this replace operation is to be performed on. If, at the time of replace, the etag for the Access Policy stored in Access Context Manager is different from the specified etag, then the replace operation will not be performed and the call will fail. This field is not required. If etag is not provided, the operation will be performed as if a valid etag is provided.

        :return: The etag of this ReplaceAccessLevelsRequest.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ReplaceAccessLevelsRequest.

        Optional. The etag for the version of the Access Policy that this replace operation is to be performed on. If, at the time of replace, the etag for the Access Policy stored in Access Context Manager is different from the specified etag, then the replace operation will not be performed and the call will fail. This field is not required. If etag is not provided, the operation will be performed as if a valid etag is provided.

        :param etag: The etag of this ReplaceAccessLevelsRequest.
        :type etag: str
        """

        self._etag = etag
