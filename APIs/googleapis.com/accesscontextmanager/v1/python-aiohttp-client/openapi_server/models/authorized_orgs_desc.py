# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthorizedOrgsDesc(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_type: str=None, authorization_direction: str=None, authorization_type: str=None, name: str=None, orgs: List[str]=None):
        """AuthorizedOrgsDesc - a model defined in OpenAPI

        :param asset_type: The asset_type of this AuthorizedOrgsDesc.
        :param authorization_direction: The authorization_direction of this AuthorizedOrgsDesc.
        :param authorization_type: The authorization_type of this AuthorizedOrgsDesc.
        :param name: The name of this AuthorizedOrgsDesc.
        :param orgs: The orgs of this AuthorizedOrgsDesc.
        """
        self.openapi_types = {
            'asset_type': str,
            'authorization_direction': str,
            'authorization_type': str,
            'name': str,
            'orgs': List[str]
        }

        self.attribute_map = {
            'asset_type': 'assetType',
            'authorization_direction': 'authorizationDirection',
            'authorization_type': 'authorizationType',
            'name': 'name',
            'orgs': 'orgs'
        }

        self._asset_type = asset_type
        self._authorization_direction = authorization_direction
        self._authorization_type = authorization_type
        self._name = name
        self._orgs = orgs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorizedOrgsDesc':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthorizedOrgsDesc of this AuthorizedOrgsDesc.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_type(self):
        """Gets the asset_type of this AuthorizedOrgsDesc.

        The asset type of this authorized orgs desc. Valid values are `ASSET_TYPE_DEVICE`, and `ASSET_TYPE_CREDENTIAL_STRENGTH`.

        :return: The asset_type of this AuthorizedOrgsDesc.
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this AuthorizedOrgsDesc.

        The asset type of this authorized orgs desc. Valid values are `ASSET_TYPE_DEVICE`, and `ASSET_TYPE_CREDENTIAL_STRENGTH`.

        :param asset_type: The asset_type of this AuthorizedOrgsDesc.
        :type asset_type: str
        """
        allowed_values = ["ASSET_TYPE_UNSPECIFIED", "ASSET_TYPE_DEVICE", "ASSET_TYPE_CREDENTIAL_STRENGTH"]  # noqa: E501
        if asset_type not in allowed_values:
            raise ValueError(
                "Invalid value for `asset_type` ({0}), must be one of {1}"
                .format(asset_type, allowed_values)
            )

        self._asset_type = asset_type

    @property
    def authorization_direction(self):
        """Gets the authorization_direction of this AuthorizedOrgsDesc.

        The direction of the authorization relationship between this organization and the organizations listed in the `orgs` field. The valid values for this field include the following: `AUTHORIZATION_DIRECTION_FROM`: Allows this organization to evaluate traffic in the organizations listed in the `orgs` field. `AUTHORIZATION_DIRECTION_TO`: Allows the organizations listed in the `orgs` field to evaluate the traffic in this organization. For the authorization relationship to take effect, all of the organizations must authorize and specify the appropriate relationship direction. For example, if organization A authorized organization B and C to evaluate its traffic, by specifying `AUTHORIZATION_DIRECTION_TO` as the authorization direction, organizations B and C must specify `AUTHORIZATION_DIRECTION_FROM` as the authorization direction in their `AuthorizedOrgsDesc` resource.

        :return: The authorization_direction of this AuthorizedOrgsDesc.
        :rtype: str
        """
        return self._authorization_direction

    @authorization_direction.setter
    def authorization_direction(self, authorization_direction):
        """Sets the authorization_direction of this AuthorizedOrgsDesc.

        The direction of the authorization relationship between this organization and the organizations listed in the `orgs` field. The valid values for this field include the following: `AUTHORIZATION_DIRECTION_FROM`: Allows this organization to evaluate traffic in the organizations listed in the `orgs` field. `AUTHORIZATION_DIRECTION_TO`: Allows the organizations listed in the `orgs` field to evaluate the traffic in this organization. For the authorization relationship to take effect, all of the organizations must authorize and specify the appropriate relationship direction. For example, if organization A authorized organization B and C to evaluate its traffic, by specifying `AUTHORIZATION_DIRECTION_TO` as the authorization direction, organizations B and C must specify `AUTHORIZATION_DIRECTION_FROM` as the authorization direction in their `AuthorizedOrgsDesc` resource.

        :param authorization_direction: The authorization_direction of this AuthorizedOrgsDesc.
        :type authorization_direction: str
        """
        allowed_values = ["AUTHORIZATION_DIRECTION_UNSPECIFIED", "AUTHORIZATION_DIRECTION_TO", "AUTHORIZATION_DIRECTION_FROM"]  # noqa: E501
        if authorization_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `authorization_direction` ({0}), must be one of {1}"
                .format(authorization_direction, allowed_values)
            )

        self._authorization_direction = authorization_direction

    @property
    def authorization_type(self):
        """Gets the authorization_type of this AuthorizedOrgsDesc.

        A granular control type for authorization levels. Valid value is `AUTHORIZATION_TYPE_TRUST`.

        :return: The authorization_type of this AuthorizedOrgsDesc.
        :rtype: str
        """
        return self._authorization_type

    @authorization_type.setter
    def authorization_type(self, authorization_type):
        """Sets the authorization_type of this AuthorizedOrgsDesc.

        A granular control type for authorization levels. Valid value is `AUTHORIZATION_TYPE_TRUST`.

        :param authorization_type: The authorization_type of this AuthorizedOrgsDesc.
        :type authorization_type: str
        """
        allowed_values = ["AUTHORIZATION_TYPE_UNSPECIFIED", "AUTHORIZATION_TYPE_TRUST"]  # noqa: E501
        if authorization_type not in allowed_values:
            raise ValueError(
                "Invalid value for `authorization_type` ({0}), must be one of {1}"
                .format(authorization_type, allowed_values)
            )

        self._authorization_type = authorization_type

    @property
    def name(self):
        """Gets the name of this AuthorizedOrgsDesc.

        Resource name for the `AuthorizedOrgsDesc`. Format: `accessPolicies/{access_policy}/authorizedOrgsDescs/{authorized_orgs_desc}`. The `authorized_orgs_desc` component must begin with a letter, followed by alphanumeric characters or `_`. After you create an `AuthorizedOrgsDesc`, you cannot change its `name`.

        :return: The name of this AuthorizedOrgsDesc.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthorizedOrgsDesc.

        Resource name for the `AuthorizedOrgsDesc`. Format: `accessPolicies/{access_policy}/authorizedOrgsDescs/{authorized_orgs_desc}`. The `authorized_orgs_desc` component must begin with a letter, followed by alphanumeric characters or `_`. After you create an `AuthorizedOrgsDesc`, you cannot change its `name`.

        :param name: The name of this AuthorizedOrgsDesc.
        :type name: str
        """

        self._name = name

    @property
    def orgs(self):
        """Gets the orgs of this AuthorizedOrgsDesc.

        The list of organization ids in this AuthorizedOrgsDesc. Format: `organizations/` Example: `organizations/123456`

        :return: The orgs of this AuthorizedOrgsDesc.
        :rtype: List[str]
        """
        return self._orgs

    @orgs.setter
    def orgs(self, orgs):
        """Sets the orgs of this AuthorizedOrgsDesc.

        The list of organization ids in this AuthorizedOrgsDesc. Format: `organizations/` Example: `organizations/123456`

        :param orgs: The orgs of this AuthorizedOrgsDesc.
        :type orgs: List[str]
        """

        self._orgs = orgs
