# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.egress_policy import EgressPolicy
from openapi_server.models.ingress_policy import IngressPolicy
from openapi_server.models.vpc_accessible_services import VpcAccessibleServices
from openapi_server import util


class ServicePerimeterConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_levels: List[str]=None, egress_policies: List[EgressPolicy]=None, ingress_policies: List[IngressPolicy]=None, resources: List[str]=None, restricted_services: List[str]=None, vpc_accessible_services: VpcAccessibleServices=None):
        """ServicePerimeterConfig - a model defined in OpenAPI

        :param access_levels: The access_levels of this ServicePerimeterConfig.
        :param egress_policies: The egress_policies of this ServicePerimeterConfig.
        :param ingress_policies: The ingress_policies of this ServicePerimeterConfig.
        :param resources: The resources of this ServicePerimeterConfig.
        :param restricted_services: The restricted_services of this ServicePerimeterConfig.
        :param vpc_accessible_services: The vpc_accessible_services of this ServicePerimeterConfig.
        """
        self.openapi_types = {
            'access_levels': List[str],
            'egress_policies': List[EgressPolicy],
            'ingress_policies': List[IngressPolicy],
            'resources': List[str],
            'restricted_services': List[str],
            'vpc_accessible_services': VpcAccessibleServices
        }

        self.attribute_map = {
            'access_levels': 'accessLevels',
            'egress_policies': 'egressPolicies',
            'ingress_policies': 'ingressPolicies',
            'resources': 'resources',
            'restricted_services': 'restrictedServices',
            'vpc_accessible_services': 'vpcAccessibleServices'
        }

        self._access_levels = access_levels
        self._egress_policies = egress_policies
        self._ingress_policies = ingress_policies
        self._resources = resources
        self._restricted_services = restricted_services
        self._vpc_accessible_services = vpc_accessible_services

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServicePerimeterConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServicePerimeterConfig of this ServicePerimeterConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_levels(self):
        """Gets the access_levels of this ServicePerimeterConfig.

        A list of `AccessLevel` resource names that allow resources within the `ServicePerimeter` to be accessed from the internet. `AccessLevels` listed must be in the same policy as this `ServicePerimeter`. Referencing a nonexistent `AccessLevel` is a syntax error. If no `AccessLevel` names are listed, resources within the perimeter can only be accessed via Google Cloud calls with request origins within the perimeter. Example: `\"accessPolicies/MY_POLICY/accessLevels/MY_LEVEL\"`. For Service Perimeter Bridge, must be empty.

        :return: The access_levels of this ServicePerimeterConfig.
        :rtype: List[str]
        """
        return self._access_levels

    @access_levels.setter
    def access_levels(self, access_levels):
        """Sets the access_levels of this ServicePerimeterConfig.

        A list of `AccessLevel` resource names that allow resources within the `ServicePerimeter` to be accessed from the internet. `AccessLevels` listed must be in the same policy as this `ServicePerimeter`. Referencing a nonexistent `AccessLevel` is a syntax error. If no `AccessLevel` names are listed, resources within the perimeter can only be accessed via Google Cloud calls with request origins within the perimeter. Example: `\"accessPolicies/MY_POLICY/accessLevels/MY_LEVEL\"`. For Service Perimeter Bridge, must be empty.

        :param access_levels: The access_levels of this ServicePerimeterConfig.
        :type access_levels: List[str]
        """

        self._access_levels = access_levels

    @property
    def egress_policies(self):
        """Gets the egress_policies of this ServicePerimeterConfig.

        List of EgressPolicies to apply to the perimeter. A perimeter may have multiple EgressPolicies, each of which is evaluated separately. Access is granted if any EgressPolicy grants it. Must be empty for a perimeter bridge.

        :return: The egress_policies of this ServicePerimeterConfig.
        :rtype: List[EgressPolicy]
        """
        return self._egress_policies

    @egress_policies.setter
    def egress_policies(self, egress_policies):
        """Sets the egress_policies of this ServicePerimeterConfig.

        List of EgressPolicies to apply to the perimeter. A perimeter may have multiple EgressPolicies, each of which is evaluated separately. Access is granted if any EgressPolicy grants it. Must be empty for a perimeter bridge.

        :param egress_policies: The egress_policies of this ServicePerimeterConfig.
        :type egress_policies: List[EgressPolicy]
        """

        self._egress_policies = egress_policies

    @property
    def ingress_policies(self):
        """Gets the ingress_policies of this ServicePerimeterConfig.

        List of IngressPolicies to apply to the perimeter. A perimeter may have multiple IngressPolicies, each of which is evaluated separately. Access is granted if any Ingress Policy grants it. Must be empty for a perimeter bridge.

        :return: The ingress_policies of this ServicePerimeterConfig.
        :rtype: List[IngressPolicy]
        """
        return self._ingress_policies

    @ingress_policies.setter
    def ingress_policies(self, ingress_policies):
        """Sets the ingress_policies of this ServicePerimeterConfig.

        List of IngressPolicies to apply to the perimeter. A perimeter may have multiple IngressPolicies, each of which is evaluated separately. Access is granted if any Ingress Policy grants it. Must be empty for a perimeter bridge.

        :param ingress_policies: The ingress_policies of this ServicePerimeterConfig.
        :type ingress_policies: List[IngressPolicy]
        """

        self._ingress_policies = ingress_policies

    @property
    def resources(self):
        """Gets the resources of this ServicePerimeterConfig.

        A list of Google Cloud resources that are inside of the service perimeter. Currently only projects and VPCs are allowed. Project format: `projects/{project_number}` VPC network format: `//compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NAME}`.

        :return: The resources of this ServicePerimeterConfig.
        :rtype: List[str]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ServicePerimeterConfig.

        A list of Google Cloud resources that are inside of the service perimeter. Currently only projects and VPCs are allowed. Project format: `projects/{project_number}` VPC network format: `//compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NAME}`.

        :param resources: The resources of this ServicePerimeterConfig.
        :type resources: List[str]
        """

        self._resources = resources

    @property
    def restricted_services(self):
        """Gets the restricted_services of this ServicePerimeterConfig.

        Google Cloud services that are subject to the Service Perimeter restrictions. For example, if `storage.googleapis.com` is specified, access to the storage buckets inside the perimeter must meet the perimeter's access restrictions.

        :return: The restricted_services of this ServicePerimeterConfig.
        :rtype: List[str]
        """
        return self._restricted_services

    @restricted_services.setter
    def restricted_services(self, restricted_services):
        """Sets the restricted_services of this ServicePerimeterConfig.

        Google Cloud services that are subject to the Service Perimeter restrictions. For example, if `storage.googleapis.com` is specified, access to the storage buckets inside the perimeter must meet the perimeter's access restrictions.

        :param restricted_services: The restricted_services of this ServicePerimeterConfig.
        :type restricted_services: List[str]
        """

        self._restricted_services = restricted_services

    @property
    def vpc_accessible_services(self):
        """Gets the vpc_accessible_services of this ServicePerimeterConfig.


        :return: The vpc_accessible_services of this ServicePerimeterConfig.
        :rtype: VpcAccessibleServices
        """
        return self._vpc_accessible_services

    @vpc_accessible_services.setter
    def vpc_accessible_services(self, vpc_accessible_services):
        """Sets the vpc_accessible_services of this ServicePerimeterConfig.


        :param vpc_accessible_services: The vpc_accessible_services of this ServicePerimeterConfig.
        :type vpc_accessible_services: VpcAccessibleServices
        """

        self._vpc_accessible_services = vpc_accessible_services
