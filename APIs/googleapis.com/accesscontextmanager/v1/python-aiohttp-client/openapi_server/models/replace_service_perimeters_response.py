# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_perimeter import ServicePerimeter
from openapi_server import util


class ReplaceServicePerimetersResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_perimeters: List[ServicePerimeter]=None):
        """ReplaceServicePerimetersResponse - a model defined in OpenAPI

        :param service_perimeters: The service_perimeters of this ReplaceServicePerimetersResponse.
        """
        self.openapi_types = {
            'service_perimeters': List[ServicePerimeter]
        }

        self.attribute_map = {
            'service_perimeters': 'servicePerimeters'
        }

        self._service_perimeters = service_perimeters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplaceServicePerimetersResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplaceServicePerimetersResponse of this ReplaceServicePerimetersResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_perimeters(self):
        """Gets the service_perimeters of this ReplaceServicePerimetersResponse.

        List of the Service Perimeter instances.

        :return: The service_perimeters of this ReplaceServicePerimetersResponse.
        :rtype: List[ServicePerimeter]
        """
        return self._service_perimeters

    @service_perimeters.setter
    def service_perimeters(self, service_perimeters):
        """Sets the service_perimeters of this ReplaceServicePerimetersResponse.

        List of the Service Perimeter instances.

        :param service_perimeters: The service_perimeters of this ReplaceServicePerimetersResponse.
        :type service_perimeters: List[ServicePerimeter]
        """

        self._service_perimeters = service_perimeters
