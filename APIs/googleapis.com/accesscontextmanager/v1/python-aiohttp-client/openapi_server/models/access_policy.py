# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, etag: str=None, name: str=None, parent: str=None, scopes: List[str]=None, title: str=None):
        """AccessPolicy - a model defined in OpenAPI

        :param etag: The etag of this AccessPolicy.
        :param name: The name of this AccessPolicy.
        :param parent: The parent of this AccessPolicy.
        :param scopes: The scopes of this AccessPolicy.
        :param title: The title of this AccessPolicy.
        """
        self.openapi_types = {
            'etag': str,
            'name': str,
            'parent': str,
            'scopes': List[str],
            'title': str
        }

        self.attribute_map = {
            'etag': 'etag',
            'name': 'name',
            'parent': 'parent',
            'scopes': 'scopes',
            'title': 'title'
        }

        self._etag = etag
        self._name = name
        self._parent = parent
        self._scopes = scopes
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessPolicy of this AccessPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def etag(self):
        """Gets the etag of this AccessPolicy.

        Output only. An opaque identifier for the current version of the `AccessPolicy`. This will always be a strongly validated etag, meaning that two Access Polices will be identical if and only if their etags are identical. Clients should not expect this to be in any specific format.

        :return: The etag of this AccessPolicy.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this AccessPolicy.

        Output only. An opaque identifier for the current version of the `AccessPolicy`. This will always be a strongly validated etag, meaning that two Access Polices will be identical if and only if their etags are identical. Clients should not expect this to be in any specific format.

        :param etag: The etag of this AccessPolicy.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this AccessPolicy.

        Output only. Resource name of the `AccessPolicy`. Format: `accessPolicies/{access_policy}`

        :return: The name of this AccessPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccessPolicy.

        Output only. Resource name of the `AccessPolicy`. Format: `accessPolicies/{access_policy}`

        :param name: The name of this AccessPolicy.
        :type name: str
        """

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this AccessPolicy.

        Required. The parent of this `AccessPolicy` in the Cloud Resource Hierarchy. Currently immutable once created. Format: `organizations/{organization_id}`

        :return: The parent of this AccessPolicy.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this AccessPolicy.

        Required. The parent of this `AccessPolicy` in the Cloud Resource Hierarchy. Currently immutable once created. Format: `organizations/{organization_id}`

        :param parent: The parent of this AccessPolicy.
        :type parent: str
        """

        self._parent = parent

    @property
    def scopes(self):
        """Gets the scopes of this AccessPolicy.

        The scopes of the AccessPolicy. Scopes define which resources a policy can restrict and where its resources can be referenced. For example, policy A with `scopes=[\"folders/123\"]` has the following behavior: - ServicePerimeter can only restrict projects within `folders/123`. - ServicePerimeter within policy A can only reference access levels defined within policy A. - Only one policy can include a given scope; thus, attempting to create a second policy which includes `folders/123` will result in an error. If no scopes are provided, then any resource within the organization can be restricted. Scopes cannot be modified after a policy is created. Policies can only have a single scope. Format: list of `folders/{folder_number}` or `projects/{project_number}`

        :return: The scopes of this AccessPolicy.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this AccessPolicy.

        The scopes of the AccessPolicy. Scopes define which resources a policy can restrict and where its resources can be referenced. For example, policy A with `scopes=[\"folders/123\"]` has the following behavior: - ServicePerimeter can only restrict projects within `folders/123`. - ServicePerimeter within policy A can only reference access levels defined within policy A. - Only one policy can include a given scope; thus, attempting to create a second policy which includes `folders/123` will result in an error. If no scopes are provided, then any resource within the organization can be restricted. Scopes cannot be modified after a policy is created. Policies can only have a single scope. Format: list of `folders/{folder_number}` or `projects/{project_number}`

        :param scopes: The scopes of this AccessPolicy.
        :type scopes: List[str]
        """

        self._scopes = scopes

    @property
    def title(self):
        """Gets the title of this AccessPolicy.

        Required. Human readable title. Does not affect behavior.

        :return: The title of this AccessPolicy.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AccessPolicy.

        Required. Human readable title. Does not affect behavior.

        :param title: The title of this AccessPolicy.
        :type title: str
        """

        self._title = title
