# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.method_selector import MethodSelector
from openapi_server import util


class SupportedService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_on_restricted_vip: bool=None, known_limitations: bool=None, name: str=None, support_stage: str=None, supported_methods: List[MethodSelector]=None, title: str=None):
        """SupportedService - a model defined in OpenAPI

        :param available_on_restricted_vip: The available_on_restricted_vip of this SupportedService.
        :param known_limitations: The known_limitations of this SupportedService.
        :param name: The name of this SupportedService.
        :param support_stage: The support_stage of this SupportedService.
        :param supported_methods: The supported_methods of this SupportedService.
        :param title: The title of this SupportedService.
        """
        self.openapi_types = {
            'available_on_restricted_vip': bool,
            'known_limitations': bool,
            'name': str,
            'support_stage': str,
            'supported_methods': List[MethodSelector],
            'title': str
        }

        self.attribute_map = {
            'available_on_restricted_vip': 'availableOnRestrictedVip',
            'known_limitations': 'knownLimitations',
            'name': 'name',
            'support_stage': 'supportStage',
            'supported_methods': 'supportedMethods',
            'title': 'title'
        }

        self._available_on_restricted_vip = available_on_restricted_vip
        self._known_limitations = known_limitations
        self._name = name
        self._support_stage = support_stage
        self._supported_methods = supported_methods
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SupportedService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SupportedService of this SupportedService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_on_restricted_vip(self):
        """Gets the available_on_restricted_vip of this SupportedService.

        True if the service is available on the restricted VIP. Services on the restricted VIP typically either support VPC Service Controls or are core infrastructure services required for the functioning of Google Cloud.

        :return: The available_on_restricted_vip of this SupportedService.
        :rtype: bool
        """
        return self._available_on_restricted_vip

    @available_on_restricted_vip.setter
    def available_on_restricted_vip(self, available_on_restricted_vip):
        """Sets the available_on_restricted_vip of this SupportedService.

        True if the service is available on the restricted VIP. Services on the restricted VIP typically either support VPC Service Controls or are core infrastructure services required for the functioning of Google Cloud.

        :param available_on_restricted_vip: The available_on_restricted_vip of this SupportedService.
        :type available_on_restricted_vip: bool
        """

        self._available_on_restricted_vip = available_on_restricted_vip

    @property
    def known_limitations(self):
        """Gets the known_limitations of this SupportedService.

        True if the service is supported with some limitations. Check [documentation](https://cloud.google.com/vpc-service-controls/docs/supported-products) for details.

        :return: The known_limitations of this SupportedService.
        :rtype: bool
        """
        return self._known_limitations

    @known_limitations.setter
    def known_limitations(self, known_limitations):
        """Sets the known_limitations of this SupportedService.

        True if the service is supported with some limitations. Check [documentation](https://cloud.google.com/vpc-service-controls/docs/supported-products) for details.

        :param known_limitations: The known_limitations of this SupportedService.
        :type known_limitations: bool
        """

        self._known_limitations = known_limitations

    @property
    def name(self):
        """Gets the name of this SupportedService.

        The service name or address of the supported service, such as `service.googleapis.com`.

        :return: The name of this SupportedService.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SupportedService.

        The service name or address of the supported service, such as `service.googleapis.com`.

        :param name: The name of this SupportedService.
        :type name: str
        """

        self._name = name

    @property
    def support_stage(self):
        """Gets the support_stage of this SupportedService.

        The support stage of the service.

        :return: The support_stage of this SupportedService.
        :rtype: str
        """
        return self._support_stage

    @support_stage.setter
    def support_stage(self, support_stage):
        """Sets the support_stage of this SupportedService.

        The support stage of the service.

        :param support_stage: The support_stage of this SupportedService.
        :type support_stage: str
        """
        allowed_values = ["LAUNCH_STAGE_UNSPECIFIED", "UNIMPLEMENTED", "PRELAUNCH", "EARLY_ACCESS", "ALPHA", "BETA", "GA", "DEPRECATED"]  # noqa: E501
        if support_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `support_stage` ({0}), must be one of {1}"
                .format(support_stage, allowed_values)
            )

        self._support_stage = support_stage

    @property
    def supported_methods(self):
        """Gets the supported_methods of this SupportedService.

        The list of the supported methods. This field exists only in response to GetSupportedService

        :return: The supported_methods of this SupportedService.
        :rtype: List[MethodSelector]
        """
        return self._supported_methods

    @supported_methods.setter
    def supported_methods(self, supported_methods):
        """Sets the supported_methods of this SupportedService.

        The list of the supported methods. This field exists only in response to GetSupportedService

        :param supported_methods: The supported_methods of this SupportedService.
        :type supported_methods: List[MethodSelector]
        """

        self._supported_methods = supported_methods

    @property
    def title(self):
        """Gets the title of this SupportedService.

        The name of the supported product, such as 'Cloud Product API'.

        :return: The title of this SupportedService.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SupportedService.

        The name of the supported product, such as 'Cloud Product API'.

        :param title: The title of this SupportedService.
        :type title: str
        """

        self._title = title
