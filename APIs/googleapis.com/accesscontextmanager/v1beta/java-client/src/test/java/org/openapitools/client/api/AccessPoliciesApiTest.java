/*
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessLevel;
import org.openapitools.client.model.AccessPolicy;
import org.openapitools.client.model.ListAccessLevelsResponse;
import org.openapitools.client.model.ListAccessPoliciesResponse;
import org.openapitools.client.model.ListServicePerimetersResponse;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.ServicePerimeter;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccessPoliciesApi
 */
@Disabled
public class AccessPoliciesApiTest {

    private final AccessPoliciesApi api = new AccessPoliciesApi();

    /**
     * Create an Access Level. The longrunning operation from this RPC will have a successful status once the Access Level has propagated to long-lasting storage. Access Levels containing errors will result in an error response for the first error encountered.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesAccessLevelsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AccessLevel accessLevel = null;
        Operation response = api.accesscontextmanagerAccessPoliciesAccessLevelsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, accessLevel);
        // TODO: test validations
    }

    /**
     * List all Access Levels for an access policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesAccessLevelsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String accessLevelFormat = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAccessLevelsResponse response = api.accesscontextmanagerAccessPoliciesAccessLevelsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, accessLevelFormat, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Create an &#x60;AccessPolicy&#x60;. Fails if this organization already has a &#x60;AccessPolicy&#x60;. The longrunning Operation will have a successful status once the &#x60;AccessPolicy&#x60; has propagated to long-lasting storage. Syntactic and basic semantic errors will be returned in &#x60;metadata&#x60; as a BadRequest proto.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AccessPolicy accessPolicy = null;
        Operation response = api.accesscontextmanagerAccessPoliciesCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, accessPolicy);
        // TODO: test validations
    }

    /**
     * List all AccessPolicies under a container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String parent = null;
        ListAccessPoliciesResponse response = api.accesscontextmanagerAccessPoliciesList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, parent);
        // TODO: test validations
    }

    /**
     * Create a Service Perimeter. The longrunning operation from this RPC will have a successful status once the Service Perimeter has propagated to long-lasting storage. Service Perimeters containing errors will result in an error response for the first error encountered.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesServicePerimetersCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ServicePerimeter servicePerimeter = null;
        Operation response = api.accesscontextmanagerAccessPoliciesServicePerimetersCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, servicePerimeter);
        // TODO: test validations
    }

    /**
     * Delete a Service Perimeter by resource name. The longrunning operation from this RPC will have a successful status once the Service Perimeter has been removed from long-lasting storage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesServicePerimetersDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Operation response = api.accesscontextmanagerAccessPoliciesServicePerimetersDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * List all Service Perimeters for an access policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesServicePerimetersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListServicePerimetersResponse response = api.accesscontextmanagerAccessPoliciesServicePerimetersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Update a Service Perimeter. The longrunning operation from this RPC will have a successful status once the changes to the Service Perimeter have propagated to long-lasting storage. Service Perimeter containing errors will result in an error response for the first error encountered.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accesscontextmanagerAccessPoliciesServicePerimetersPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        ServicePerimeter servicePerimeter = null;
        Operation response = api.accesscontextmanagerAccessPoliciesServicePerimetersPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, servicePerimeter);
        // TODO: test validations
    }

}
