# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_policy import DevicePolicy
from openapi_server import util


class Condition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_policy: DevicePolicy=None, ip_subnetworks: List[str]=None, members: List[str]=None, negate: bool=None, regions: List[str]=None, required_access_levels: List[str]=None):
        """Condition - a model defined in OpenAPI

        :param device_policy: The device_policy of this Condition.
        :param ip_subnetworks: The ip_subnetworks of this Condition.
        :param members: The members of this Condition.
        :param negate: The negate of this Condition.
        :param regions: The regions of this Condition.
        :param required_access_levels: The required_access_levels of this Condition.
        """
        self.openapi_types = {
            'device_policy': DevicePolicy,
            'ip_subnetworks': List[str],
            'members': List[str],
            'negate': bool,
            'regions': List[str],
            'required_access_levels': List[str]
        }

        self.attribute_map = {
            'device_policy': 'devicePolicy',
            'ip_subnetworks': 'ipSubnetworks',
            'members': 'members',
            'negate': 'negate',
            'regions': 'regions',
            'required_access_levels': 'requiredAccessLevels'
        }

        self._device_policy = device_policy
        self._ip_subnetworks = ip_subnetworks
        self._members = members
        self._negate = negate
        self._regions = regions
        self._required_access_levels = required_access_levels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Condition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Condition of this Condition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_policy(self):
        """Gets the device_policy of this Condition.


        :return: The device_policy of this Condition.
        :rtype: DevicePolicy
        """
        return self._device_policy

    @device_policy.setter
    def device_policy(self, device_policy):
        """Sets the device_policy of this Condition.


        :param device_policy: The device_policy of this Condition.
        :type device_policy: DevicePolicy
        """

        self._device_policy = device_policy

    @property
    def ip_subnetworks(self):
        """Gets the ip_subnetworks of this Condition.

        CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a CIDR IP address block, the specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered malformed. For example, \"192.0.2.0/24\" is accepted but \"192.0.2.1/24\" is not. Similarly, for IPv6, \"2001:db8::/32\" is accepted whereas \"2001:db8::1/32\" is not. The originating IP of a request must be in one of the listed subnets in order for this Condition to be true. If empty, all IP addresses are allowed.

        :return: The ip_subnetworks of this Condition.
        :rtype: List[str]
        """
        return self._ip_subnetworks

    @ip_subnetworks.setter
    def ip_subnetworks(self, ip_subnetworks):
        """Sets the ip_subnetworks of this Condition.

        CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a CIDR IP address block, the specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered malformed. For example, \"192.0.2.0/24\" is accepted but \"192.0.2.1/24\" is not. Similarly, for IPv6, \"2001:db8::/32\" is accepted whereas \"2001:db8::1/32\" is not. The originating IP of a request must be in one of the listed subnets in order for this Condition to be true. If empty, all IP addresses are allowed.

        :param ip_subnetworks: The ip_subnetworks of this Condition.
        :type ip_subnetworks: List[str]
        """

        self._ip_subnetworks = ip_subnetworks

    @property
    def members(self):
        """Gets the members of this Condition.

        The request must be made by one of the provided user or service accounts. Groups are not supported. Syntax: `user:{emailid}` `serviceAccount:{emailid}` If not specified, a request may come from any user.

        :return: The members of this Condition.
        :rtype: List[str]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Condition.

        The request must be made by one of the provided user or service accounts. Groups are not supported. Syntax: `user:{emailid}` `serviceAccount:{emailid}` If not specified, a request may come from any user.

        :param members: The members of this Condition.
        :type members: List[str]
        """

        self._members = members

    @property
    def negate(self):
        """Gets the negate of this Condition.

        Whether to negate the Condition. If true, the Condition becomes a NAND over its non-empty fields. Any non-empty field criteria evaluating to false will result in the Condition to be satisfied. Defaults to false.

        :return: The negate of this Condition.
        :rtype: bool
        """
        return self._negate

    @negate.setter
    def negate(self, negate):
        """Sets the negate of this Condition.

        Whether to negate the Condition. If true, the Condition becomes a NAND over its non-empty fields. Any non-empty field criteria evaluating to false will result in the Condition to be satisfied. Defaults to false.

        :param negate: The negate of this Condition.
        :type negate: bool
        """

        self._negate = negate

    @property
    def regions(self):
        """Gets the regions of this Condition.

        The request must originate from one of the provided countries/regions. Must be valid ISO 3166-1 alpha-2 codes.

        :return: The regions of this Condition.
        :rtype: List[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this Condition.

        The request must originate from one of the provided countries/regions. Must be valid ISO 3166-1 alpha-2 codes.

        :param regions: The regions of this Condition.
        :type regions: List[str]
        """

        self._regions = regions

    @property
    def required_access_levels(self):
        """Gets the required_access_levels of this Condition.

        A list of other access levels defined in the same `Policy`, referenced by resource name. Referencing an `AccessLevel` which does not exist is an error. All access levels listed must be granted for the Condition to be true. Example: \"`accessPolicies/MY_POLICY/accessLevels/LEVEL_NAME\"`

        :return: The required_access_levels of this Condition.
        :rtype: List[str]
        """
        return self._required_access_levels

    @required_access_levels.setter
    def required_access_levels(self, required_access_levels):
        """Sets the required_access_levels of this Condition.

        A list of other access levels defined in the same `Policy`, referenced by resource name. Referencing an `AccessLevel` which does not exist is an error. All access levels listed must be granted for the Condition to be true. Example: \"`accessPolicies/MY_POLICY/accessLevels/LEVEL_NAME\"`

        :param required_access_levels: The required_access_levels of this Condition.
        :type required_access_levels: List[str]
        """

        self._required_access_levels = required_access_levels
