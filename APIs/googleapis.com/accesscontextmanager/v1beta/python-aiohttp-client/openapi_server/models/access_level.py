# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.basic_level import BasicLevel
from openapi_server.models.custom_level import CustomLevel
from openapi_server import util


class AccessLevel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, basic: BasicLevel=None, custom: CustomLevel=None, description: str=None, name: str=None, title: str=None):
        """AccessLevel - a model defined in OpenAPI

        :param basic: The basic of this AccessLevel.
        :param custom: The custom of this AccessLevel.
        :param description: The description of this AccessLevel.
        :param name: The name of this AccessLevel.
        :param title: The title of this AccessLevel.
        """
        self.openapi_types = {
            'basic': BasicLevel,
            'custom': CustomLevel,
            'description': str,
            'name': str,
            'title': str
        }

        self.attribute_map = {
            'basic': 'basic',
            'custom': 'custom',
            'description': 'description',
            'name': 'name',
            'title': 'title'
        }

        self._basic = basic
        self._custom = custom
        self._description = description
        self._name = name
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessLevel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessLevel of this AccessLevel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def basic(self):
        """Gets the basic of this AccessLevel.


        :return: The basic of this AccessLevel.
        :rtype: BasicLevel
        """
        return self._basic

    @basic.setter
    def basic(self, basic):
        """Sets the basic of this AccessLevel.


        :param basic: The basic of this AccessLevel.
        :type basic: BasicLevel
        """

        self._basic = basic

    @property
    def custom(self):
        """Gets the custom of this AccessLevel.


        :return: The custom of this AccessLevel.
        :rtype: CustomLevel
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this AccessLevel.


        :param custom: The custom of this AccessLevel.
        :type custom: CustomLevel
        """

        self._custom = custom

    @property
    def description(self):
        """Gets the description of this AccessLevel.

        Description of the `AccessLevel` and its use. Does not affect behavior.

        :return: The description of this AccessLevel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccessLevel.

        Description of the `AccessLevel` and its use. Does not affect behavior.

        :param description: The description of this AccessLevel.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this AccessLevel.

        Resource name for the `AccessLevel`. Format: `accessPolicies/{access_policy}/accessLevels/{access_level}`. The `access_level` component must begin with a letter, followed by alphanumeric characters or `_`. Its maximum length is 50 characters. After you create an `AccessLevel`, you cannot change its `name`.

        :return: The name of this AccessLevel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccessLevel.

        Resource name for the `AccessLevel`. Format: `accessPolicies/{access_policy}/accessLevels/{access_level}`. The `access_level` component must begin with a letter, followed by alphanumeric characters or `_`. Its maximum length is 50 characters. After you create an `AccessLevel`, you cannot change its `name`.

        :param name: The name of this AccessLevel.
        :type name: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this AccessLevel.

        Human readable title. Must be unique within the Policy.

        :return: The title of this AccessLevel.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AccessLevel.

        Human readable title. Must be unique within the Policy.

        :param title: The title of this AccessLevel.
        :type title: str
        """

        self._title = title
