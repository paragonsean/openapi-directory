# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_perimeter_config import ServicePerimeterConfig
from openapi_server import util


class ServicePerimeter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, perimeter_type: str=None, status: ServicePerimeterConfig=None, title: str=None):
        """ServicePerimeter - a model defined in OpenAPI

        :param description: The description of this ServicePerimeter.
        :param name: The name of this ServicePerimeter.
        :param perimeter_type: The perimeter_type of this ServicePerimeter.
        :param status: The status of this ServicePerimeter.
        :param title: The title of this ServicePerimeter.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'perimeter_type': str,
            'status': ServicePerimeterConfig,
            'title': str
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'perimeter_type': 'perimeterType',
            'status': 'status',
            'title': 'title'
        }

        self._description = description
        self._name = name
        self._perimeter_type = perimeter_type
        self._status = status
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServicePerimeter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServicePerimeter of this ServicePerimeter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ServicePerimeter.

        Description of the `ServicePerimeter` and its use. Does not affect behavior.

        :return: The description of this ServicePerimeter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServicePerimeter.

        Description of the `ServicePerimeter` and its use. Does not affect behavior.

        :param description: The description of this ServicePerimeter.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this ServicePerimeter.

        Resource name for the `ServicePerimeter`. Format: `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`. The `service_perimeter` component must begin with a letter, followed by alphanumeric characters or `_`. After you create a `ServicePerimeter`, you cannot change its `name`.

        :return: The name of this ServicePerimeter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServicePerimeter.

        Resource name for the `ServicePerimeter`. Format: `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`. The `service_perimeter` component must begin with a letter, followed by alphanumeric characters or `_`. After you create a `ServicePerimeter`, you cannot change its `name`.

        :param name: The name of this ServicePerimeter.
        :type name: str
        """

        self._name = name

    @property
    def perimeter_type(self):
        """Gets the perimeter_type of this ServicePerimeter.

        Perimeter type indicator. A single project is allowed to be a member of single regular perimeter, but multiple service perimeter bridges. A project cannot be a included in a perimeter bridge without being included in regular perimeter. For perimeter bridges, restricted/unrestricted service lists as well as access lists must be empty.

        :return: The perimeter_type of this ServicePerimeter.
        :rtype: str
        """
        return self._perimeter_type

    @perimeter_type.setter
    def perimeter_type(self, perimeter_type):
        """Sets the perimeter_type of this ServicePerimeter.

        Perimeter type indicator. A single project is allowed to be a member of single regular perimeter, but multiple service perimeter bridges. A project cannot be a included in a perimeter bridge without being included in regular perimeter. For perimeter bridges, restricted/unrestricted service lists as well as access lists must be empty.

        :param perimeter_type: The perimeter_type of this ServicePerimeter.
        :type perimeter_type: str
        """
        allowed_values = ["PERIMETER_TYPE_REGULAR", "PERIMETER_TYPE_BRIDGE"]  # noqa: E501
        if perimeter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `perimeter_type` ({0}), must be one of {1}"
                .format(perimeter_type, allowed_values)
            )

        self._perimeter_type = perimeter_type

    @property
    def status(self):
        """Gets the status of this ServicePerimeter.


        :return: The status of this ServicePerimeter.
        :rtype: ServicePerimeterConfig
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServicePerimeter.


        :param status: The status of this ServicePerimeter.
        :type status: ServicePerimeterConfig
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this ServicePerimeter.

        Human readable title. Must be unique within the Policy.

        :return: The title of this ServicePerimeter.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ServicePerimeter.

        Human readable title. Must be unique within the Policy.

        :param title: The title of this ServicePerimeter.
        :type title: str
        """

        self._title = title
