/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServicePerimeterConfig from './ServicePerimeterConfig';

/**
 * The ServicePerimeter model module.
 * @module model/ServicePerimeter
 * @version v1beta
 */
class ServicePerimeter {
    /**
     * Constructs a new <code>ServicePerimeter</code>.
     * &#x60;ServicePerimeter&#x60; describes a set of Google Cloud resources which can freely import and export data amongst themselves, but not export outside of the &#x60;ServicePerimeter&#x60;. If a request with a source within this &#x60;ServicePerimeter&#x60; has a target outside of the &#x60;ServicePerimeter&#x60;, the request will be blocked. Otherwise the request is allowed. There are two types of Service Perimeter - Regular and Bridge. Regular Service Perimeters cannot overlap, a single Google Cloud project can only belong to a single regular Service Perimeter. Service Perimeter Bridges can contain only Google Cloud projects as members, a single Google Cloud project may belong to multiple Service Perimeter Bridges.
     * @alias module:model/ServicePerimeter
     */
    constructor() { 
        
        ServicePerimeter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServicePerimeter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServicePerimeter} obj Optional instance to populate.
     * @return {module:model/ServicePerimeter} The populated <code>ServicePerimeter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServicePerimeter();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('perimeterType')) {
                obj['perimeterType'] = ApiClient.convertToType(data['perimeterType'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ServicePerimeterConfig.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServicePerimeter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServicePerimeter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['perimeterType'] && !(typeof data['perimeterType'] === 'string' || data['perimeterType'] instanceof String)) {
            throw new Error("Expected the field `perimeterType` to be a primitive type in the JSON string but got " + data['perimeterType']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ServicePerimeterConfig.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * Description of the `ServicePerimeter` and its use. Does not affect behavior.
 * @member {String} description
 */
ServicePerimeter.prototype['description'] = undefined;

/**
 * Resource name for the `ServicePerimeter`. Format: `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`. The `service_perimeter` component must begin with a letter, followed by alphanumeric characters or `_`. After you create a `ServicePerimeter`, you cannot change its `name`.
 * @member {String} name
 */
ServicePerimeter.prototype['name'] = undefined;

/**
 * Perimeter type indicator. A single project is allowed to be a member of single regular perimeter, but multiple service perimeter bridges. A project cannot be a included in a perimeter bridge without being included in regular perimeter. For perimeter bridges, restricted/unrestricted service lists as well as access lists must be empty.
 * @member {module:model/ServicePerimeter.PerimeterTypeEnum} perimeterType
 */
ServicePerimeter.prototype['perimeterType'] = undefined;

/**
 * @member {module:model/ServicePerimeterConfig} status
 */
ServicePerimeter.prototype['status'] = undefined;

/**
 * Human readable title. Must be unique within the Policy.
 * @member {String} title
 */
ServicePerimeter.prototype['title'] = undefined;





/**
 * Allowed values for the <code>perimeterType</code> property.
 * @enum {String}
 * @readonly
 */
ServicePerimeter['PerimeterTypeEnum'] = {

    /**
     * value: "PERIMETER_TYPE_REGULAR"
     * @const
     */
    "REGULAR": "PERIMETER_TYPE_REGULAR",

    /**
     * value: "PERIMETER_TYPE_BRIDGE"
     * @const
     */
    "BRIDGE": "PERIMETER_TYPE_BRIDGE"
};



export default ServicePerimeter;

