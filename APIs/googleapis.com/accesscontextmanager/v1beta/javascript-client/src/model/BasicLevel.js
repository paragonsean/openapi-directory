/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Condition from './Condition';

/**
 * The BasicLevel model module.
 * @module model/BasicLevel
 * @version v1beta
 */
class BasicLevel {
    /**
     * Constructs a new <code>BasicLevel</code>.
     * &#x60;BasicLevel&#x60; is an &#x60;AccessLevel&#x60; using a set of recommended features.
     * @alias module:model/BasicLevel
     */
    constructor() { 
        
        BasicLevel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BasicLevel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BasicLevel} obj Optional instance to populate.
     * @return {module:model/BasicLevel} The populated <code>BasicLevel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BasicLevel();

            if (data.hasOwnProperty('combiningFunction')) {
                obj['combiningFunction'] = ApiClient.convertToType(data['combiningFunction'], 'String');
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [Condition]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BasicLevel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BasicLevel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['combiningFunction'] && !(typeof data['combiningFunction'] === 'string' || data['combiningFunction'] instanceof String)) {
            throw new Error("Expected the field `combiningFunction` to be a primitive type in the JSON string but got " + data['combiningFunction']);
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                Condition.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * How the `conditions` list should be combined to determine if a request is granted this `AccessLevel`. If AND is used, each `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. If OR is used, at least one `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. Default behavior is AND.
 * @member {module:model/BasicLevel.CombiningFunctionEnum} combiningFunction
 */
BasicLevel.prototype['combiningFunction'] = undefined;

/**
 * Required. A list of requirements for the `AccessLevel` to be granted.
 * @member {Array.<module:model/Condition>} conditions
 */
BasicLevel.prototype['conditions'] = undefined;





/**
 * Allowed values for the <code>combiningFunction</code> property.
 * @enum {String}
 * @readonly
 */
BasicLevel['CombiningFunctionEnum'] = {

    /**
     * value: "AND"
     * @const
     */
    "AND": "AND",

    /**
     * value: "OR"
     * @const
     */
    "OR": "OR"
};



export default BasicLevel;

