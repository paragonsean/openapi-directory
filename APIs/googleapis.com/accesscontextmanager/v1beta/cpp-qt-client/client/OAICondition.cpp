/**
 * Access Context Manager API
 * An API for setting attribute based access control to requests to Google Cloud services.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICondition::OAICondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICondition::OAICondition() {
    this->initializeModel();
}

OAICondition::~OAICondition() {}

void OAICondition::initializeModel() {

    m_device_policy_isSet = false;
    m_device_policy_isValid = false;

    m_ip_subnetworks_isSet = false;
    m_ip_subnetworks_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_negate_isSet = false;
    m_negate_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_required_access_levels_isSet = false;
    m_required_access_levels_isValid = false;
}

void OAICondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICondition::fromJsonObject(QJsonObject json) {

    m_device_policy_isValid = ::OpenAPI::fromJsonValue(m_device_policy, json[QString("devicePolicy")]);
    m_device_policy_isSet = !json[QString("devicePolicy")].isNull() && m_device_policy_isValid;

    m_ip_subnetworks_isValid = ::OpenAPI::fromJsonValue(m_ip_subnetworks, json[QString("ipSubnetworks")]);
    m_ip_subnetworks_isSet = !json[QString("ipSubnetworks")].isNull() && m_ip_subnetworks_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_negate_isValid = ::OpenAPI::fromJsonValue(m_negate, json[QString("negate")]);
    m_negate_isSet = !json[QString("negate")].isNull() && m_negate_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("regions")]);
    m_regions_isSet = !json[QString("regions")].isNull() && m_regions_isValid;

    m_required_access_levels_isValid = ::OpenAPI::fromJsonValue(m_required_access_levels, json[QString("requiredAccessLevels")]);
    m_required_access_levels_isSet = !json[QString("requiredAccessLevels")].isNull() && m_required_access_levels_isValid;
}

QString OAICondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICondition::asJsonObject() const {
    QJsonObject obj;
    if (m_device_policy.isSet()) {
        obj.insert(QString("devicePolicy"), ::OpenAPI::toJsonValue(m_device_policy));
    }
    if (m_ip_subnetworks.size() > 0) {
        obj.insert(QString("ipSubnetworks"), ::OpenAPI::toJsonValue(m_ip_subnetworks));
    }
    if (m_members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_negate_isSet) {
        obj.insert(QString("negate"), ::OpenAPI::toJsonValue(m_negate));
    }
    if (m_regions.size() > 0) {
        obj.insert(QString("regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_required_access_levels.size() > 0) {
        obj.insert(QString("requiredAccessLevels"), ::OpenAPI::toJsonValue(m_required_access_levels));
    }
    return obj;
}

OAIDevicePolicy OAICondition::getDevicePolicy() const {
    return m_device_policy;
}
void OAICondition::setDevicePolicy(const OAIDevicePolicy &device_policy) {
    m_device_policy = device_policy;
    m_device_policy_isSet = true;
}

bool OAICondition::is_device_policy_Set() const{
    return m_device_policy_isSet;
}

bool OAICondition::is_device_policy_Valid() const{
    return m_device_policy_isValid;
}

QList<QString> OAICondition::getIpSubnetworks() const {
    return m_ip_subnetworks;
}
void OAICondition::setIpSubnetworks(const QList<QString> &ip_subnetworks) {
    m_ip_subnetworks = ip_subnetworks;
    m_ip_subnetworks_isSet = true;
}

bool OAICondition::is_ip_subnetworks_Set() const{
    return m_ip_subnetworks_isSet;
}

bool OAICondition::is_ip_subnetworks_Valid() const{
    return m_ip_subnetworks_isValid;
}

QList<QString> OAICondition::getMembers() const {
    return m_members;
}
void OAICondition::setMembers(const QList<QString> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAICondition::is_members_Set() const{
    return m_members_isSet;
}

bool OAICondition::is_members_Valid() const{
    return m_members_isValid;
}

bool OAICondition::isNegate() const {
    return m_negate;
}
void OAICondition::setNegate(const bool &negate) {
    m_negate = negate;
    m_negate_isSet = true;
}

bool OAICondition::is_negate_Set() const{
    return m_negate_isSet;
}

bool OAICondition::is_negate_Valid() const{
    return m_negate_isValid;
}

QList<QString> OAICondition::getRegions() const {
    return m_regions;
}
void OAICondition::setRegions(const QList<QString> &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAICondition::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAICondition::is_regions_Valid() const{
    return m_regions_isValid;
}

QList<QString> OAICondition::getRequiredAccessLevels() const {
    return m_required_access_levels;
}
void OAICondition::setRequiredAccessLevels(const QList<QString> &required_access_levels) {
    m_required_access_levels = required_access_levels;
    m_required_access_levels_isSet = true;
}

bool OAICondition::is_required_access_levels_Set() const{
    return m_required_access_levels_isSet;
}

bool OAICondition::is_required_access_levels_Valid() const{
    return m_required_access_levels_isValid;
}

bool OAICondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_subnetworks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_negate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_access_levels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
