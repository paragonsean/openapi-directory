/**
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuthorizationAttemptInfo model module.
 * @module model/AuthorizationAttemptInfo
 * @version v1
 */
class AuthorizationAttemptInfo {
    /**
     * Constructs a new <code>AuthorizationAttemptInfo</code>.
     * State of the latest attempt to authorize a domain for certificate issuance.
     * @alias module:model/AuthorizationAttemptInfo
     */
    constructor() { 
        
        AuthorizationAttemptInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuthorizationAttemptInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthorizationAttemptInfo} obj Optional instance to populate.
     * @return {module:model/AuthorizationAttemptInfo} The populated <code>AuthorizationAttemptInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthorizationAttemptInfo();

            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('failureReason')) {
                obj['failureReason'] = ApiClient.convertToType(data['failureReason'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthorizationAttemptInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthorizationAttemptInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['details'] && !(typeof data['details'] === 'string' || data['details'] instanceof String)) {
            throw new Error("Expected the field `details` to be a primitive type in the JSON string but got " + data['details']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['failureReason'] && !(typeof data['failureReason'] === 'string' || data['failureReason'] instanceof String)) {
            throw new Error("Expected the field `failureReason` to be a primitive type in the JSON string but got " + data['failureReason']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Output only. Human readable explanation for reaching the state. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use FailureReason enum.
 * @member {String} details
 */
AuthorizationAttemptInfo.prototype['details'] = undefined;

/**
 * Domain name of the authorization attempt.
 * @member {String} domain
 */
AuthorizationAttemptInfo.prototype['domain'] = undefined;

/**
 * Output only. Reason for failure of the authorization attempt for the domain.
 * @member {module:model/AuthorizationAttemptInfo.FailureReasonEnum} failureReason
 */
AuthorizationAttemptInfo.prototype['failureReason'] = undefined;

/**
 * Output only. State of the domain for managed certificate issuance.
 * @member {module:model/AuthorizationAttemptInfo.StateEnum} state
 */
AuthorizationAttemptInfo.prototype['state'] = undefined;





/**
 * Allowed values for the <code>failureReason</code> property.
 * @enum {String}
 * @readonly
 */
AuthorizationAttemptInfo['FailureReasonEnum'] = {

    /**
     * value: "FAILURE_REASON_UNSPECIFIED"
     * @const
     */
    "FAILURE_REASON_UNSPECIFIED": "FAILURE_REASON_UNSPECIFIED",

    /**
     * value: "CONFIG"
     * @const
     */
    "CONFIG": "CONFIG",

    /**
     * value: "CAA"
     * @const
     */
    "CAA": "CAA",

    /**
     * value: "RATE_LIMITED"
     * @const
     */
    "RATE_LIMITED": "RATE_LIMITED"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
AuthorizationAttemptInfo['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "AUTHORIZING"
     * @const
     */
    "AUTHORIZING": "AUTHORIZING",

    /**
     * value: "AUTHORIZED"
     * @const
     */
    "AUTHORIZED": "AUTHORIZED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default AuthorizationAttemptInfo;

