/**
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DnsResourceRecord from './DnsResourceRecord';

/**
 * The DnsAuthorization model module.
 * @module model/DnsAuthorization
 * @version v1
 */
class DnsAuthorization {
    /**
     * Constructs a new <code>DnsAuthorization</code>.
     * A DnsAuthorization resource describes a way to perform domain authorization for certificate issuance.
     * @alias module:model/DnsAuthorization
     */
    constructor() { 
        
        DnsAuthorization.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DnsAuthorization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DnsAuthorization} obj Optional instance to populate.
     * @return {module:model/DnsAuthorization} The populated <code>DnsAuthorization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DnsAuthorization();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dnsResourceRecord')) {
                obj['dnsResourceRecord'] = DnsResourceRecord.constructFromObject(data['dnsResourceRecord']);
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DnsAuthorization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DnsAuthorization</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `dnsResourceRecord`
        if (data['dnsResourceRecord']) { // data not null
          DnsResourceRecord.validateJSON(data['dnsResourceRecord']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The creation timestamp of a DnsAuthorization.
 * @member {String} createTime
 */
DnsAuthorization.prototype['createTime'] = undefined;

/**
 * One or more paragraphs of text description of a DnsAuthorization.
 * @member {String} description
 */
DnsAuthorization.prototype['description'] = undefined;

/**
 * @member {module:model/DnsResourceRecord} dnsResourceRecord
 */
DnsAuthorization.prototype['dnsResourceRecord'] = undefined;

/**
 * Required. Immutable. A domain that is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g. authorization for `example.com` can be used to issue certificates for `example.com` and `*.example.com`.
 * @member {String} domain
 */
DnsAuthorization.prototype['domain'] = undefined;

/**
 * Set of labels associated with a DnsAuthorization.
 * @member {Object.<String, String>} labels
 */
DnsAuthorization.prototype['labels'] = undefined;

/**
 * A user-defined name of the dns authorization. DnsAuthorization names must be unique globally and match pattern `projects/_*_/locations/_*_/dnsAuthorizations/_*`.
 * @member {String} name
 */
DnsAuthorization.prototype['name'] = undefined;

/**
 * Immutable. Type of DnsAuthorization. If unset during resource creation the following default will be used: - in location global: FIXED_RECORD.
 * @member {module:model/DnsAuthorization.TypeEnum} type
 */
DnsAuthorization.prototype['type'] = undefined;

/**
 * Output only. The last update timestamp of a DnsAuthorization.
 * @member {String} updateTime
 */
DnsAuthorization.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DnsAuthorization['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "FIXED_RECORD"
     * @const
     */
    "FIXED_RECORD": "FIXED_RECORD",

    /**
     * value: "PER_PROJECT_RECORD"
     * @const
     */
    "PER_PROJECT_RECORD": "PER_PROJECT_RECORD"
};



export default DnsAuthorization;

