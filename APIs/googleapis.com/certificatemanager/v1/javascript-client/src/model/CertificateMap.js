/**
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GclbTarget from './GclbTarget';

/**
 * The CertificateMap model module.
 * @module model/CertificateMap
 * @version v1
 */
class CertificateMap {
    /**
     * Constructs a new <code>CertificateMap</code>.
     * Defines a collection of certificate configurations.
     * @alias module:model/CertificateMap
     */
    constructor() { 
        
        CertificateMap.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateMap</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateMap} obj Optional instance to populate.
     * @return {module:model/CertificateMap} The populated <code>CertificateMap</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateMap();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('gclbTargets')) {
                obj['gclbTargets'] = ApiClient.convertToType(data['gclbTargets'], [GclbTarget]);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateMap</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateMap</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['gclbTargets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['gclbTargets'])) {
                throw new Error("Expected the field `gclbTargets` to be an array in the JSON data but got " + data['gclbTargets']);
            }
            // validate the optional field `gclbTargets` (array)
            for (const item of data['gclbTargets']) {
                GclbTarget.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The creation timestamp of a Certificate Map.
 * @member {String} createTime
 */
CertificateMap.prototype['createTime'] = undefined;

/**
 * One or more paragraphs of text description of a certificate map.
 * @member {String} description
 */
CertificateMap.prototype['description'] = undefined;

/**
 * Output only. A list of GCLB targets that use this Certificate Map. A Target Proxy is only present on this list if it's attached to a Forwarding Rule.
 * @member {Array.<module:model/GclbTarget>} gclbTargets
 */
CertificateMap.prototype['gclbTargets'] = undefined;

/**
 * Set of labels associated with a Certificate Map.
 * @member {Object.<String, String>} labels
 */
CertificateMap.prototype['labels'] = undefined;

/**
 * A user-defined name of the Certificate Map. Certificate Map names must be unique globally and match pattern `projects/_*_/locations/_*_/certificateMaps/_*`.
 * @member {String} name
 */
CertificateMap.prototype['name'] = undefined;

/**
 * Output only. The update timestamp of a Certificate Map.
 * @member {String} updateTime
 */
CertificateMap.prototype['updateTime'] = undefined;






export default CertificateMap;

