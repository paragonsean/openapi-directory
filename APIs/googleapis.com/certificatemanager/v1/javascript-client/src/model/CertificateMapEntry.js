/**
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CertificateMapEntry model module.
 * @module model/CertificateMapEntry
 * @version v1
 */
class CertificateMapEntry {
    /**
     * Constructs a new <code>CertificateMapEntry</code>.
     * Defines a certificate map entry.
     * @alias module:model/CertificateMapEntry
     */
    constructor() { 
        
        CertificateMapEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateMapEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateMapEntry} obj Optional instance to populate.
     * @return {module:model/CertificateMapEntry} The populated <code>CertificateMapEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateMapEntry();

            if (data.hasOwnProperty('certificates')) {
                obj['certificates'] = ApiClient.convertToType(data['certificates'], ['String']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('hostname')) {
                obj['hostname'] = ApiClient.convertToType(data['hostname'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('matcher')) {
                obj['matcher'] = ApiClient.convertToType(data['matcher'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateMapEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateMapEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['certificates'])) {
            throw new Error("Expected the field `certificates` to be an array in the JSON data but got " + data['certificates']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['hostname'] && !(typeof data['hostname'] === 'string' || data['hostname'] instanceof String)) {
            throw new Error("Expected the field `hostname` to be a primitive type in the JSON string but got " + data['hostname']);
        }
        // ensure the json data is a string
        if (data['matcher'] && !(typeof data['matcher'] === 'string' || data['matcher'] instanceof String)) {
            throw new Error("Expected the field `matcher` to be a primitive type in the JSON string but got " + data['matcher']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * A set of Certificates defines for the given `hostname`. There can be defined up to four certificates in each Certificate Map Entry. Each certificate must match pattern `projects/_*_/locations/_*_/certificates/_*`.
 * @member {Array.<String>} certificates
 */
CertificateMapEntry.prototype['certificates'] = undefined;

/**
 * Output only. The creation timestamp of a Certificate Map Entry.
 * @member {String} createTime
 */
CertificateMapEntry.prototype['createTime'] = undefined;

/**
 * One or more paragraphs of text description of a certificate map entry.
 * @member {String} description
 */
CertificateMapEntry.prototype['description'] = undefined;

/**
 * A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
 * @member {String} hostname
 */
CertificateMapEntry.prototype['hostname'] = undefined;

/**
 * Set of labels associated with a Certificate Map Entry.
 * @member {Object.<String, String>} labels
 */
CertificateMapEntry.prototype['labels'] = undefined;

/**
 * A predefined matcher for particular cases, other than SNI selection.
 * @member {module:model/CertificateMapEntry.MatcherEnum} matcher
 */
CertificateMapEntry.prototype['matcher'] = undefined;

/**
 * A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/_*_/locations/_*_/certificateMaps/_*_/certificateMapEntries/_*`.
 * @member {String} name
 */
CertificateMapEntry.prototype['name'] = undefined;

/**
 * Output only. A serving state of this Certificate Map Entry.
 * @member {module:model/CertificateMapEntry.StateEnum} state
 */
CertificateMapEntry.prototype['state'] = undefined;

/**
 * Output only. The update timestamp of a Certificate Map Entry.
 * @member {String} updateTime
 */
CertificateMapEntry.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>matcher</code> property.
 * @enum {String}
 * @readonly
 */
CertificateMapEntry['MatcherEnum'] = {

    /**
     * value: "MATCHER_UNSPECIFIED"
     * @const
     */
    "MATCHER_UNSPECIFIED": "MATCHER_UNSPECIFIED",

    /**
     * value: "PRIMARY"
     * @const
     */
    "PRIMARY": "PRIMARY"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
CertificateMapEntry['StateEnum'] = {

    /**
     * value: "SERVING_STATE_UNSPECIFIED"
     * @const
     */
    "SERVING_STATE_UNSPECIFIED": "SERVING_STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING"
};



export default CertificateMapEntry;

