/**
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TrustStore from './TrustStore';

/**
 * The TrustConfig model module.
 * @module model/TrustConfig
 * @version v1
 */
class TrustConfig {
    /**
     * Constructs a new <code>TrustConfig</code>.
     * Defines a trust config.
     * @alias module:model/TrustConfig
     */
    constructor() { 
        
        TrustConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TrustConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrustConfig} obj Optional instance to populate.
     * @return {module:model/TrustConfig} The populated <code>TrustConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrustConfig();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('trustStores')) {
                obj['trustStores'] = ApiClient.convertToType(data['trustStores'], [TrustStore]);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrustConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrustConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['trustStores']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trustStores'])) {
                throw new Error("Expected the field `trustStores` to be an array in the JSON data but got " + data['trustStores']);
            }
            // validate the optional field `trustStores` (array)
            for (const item of data['trustStores']) {
                TrustStore.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The creation timestamp of a TrustConfig.
 * @member {String} createTime
 */
TrustConfig.prototype['createTime'] = undefined;

/**
 * One or more paragraphs of text description of a TrustConfig.
 * @member {String} description
 */
TrustConfig.prototype['description'] = undefined;

/**
 * This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
 * @member {String} etag
 */
TrustConfig.prototype['etag'] = undefined;

/**
 * Set of labels associated with a TrustConfig.
 * @member {Object.<String, String>} labels
 */
TrustConfig.prototype['labels'] = undefined;

/**
 * A user-defined name of the trust config. TrustConfig names must be unique globally and match pattern `projects/_*_/locations/_*_/trustConfigs/_*`.
 * @member {String} name
 */
TrustConfig.prototype['name'] = undefined;

/**
 * Set of trust stores to perform validation against. This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation. Only one TrustStore specified is currently allowed.
 * @member {Array.<module:model/TrustStore>} trustStores
 */
TrustConfig.prototype['trustStores'] = undefined;

/**
 * Output only. The last update timestamp of a TrustConfig.
 * @member {String} updateTime
 */
TrustConfig.prototype['updateTime'] = undefined;






export default TrustConfig;

