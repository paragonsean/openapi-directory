/**
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateAuthorityConfig from './CertificateAuthorityConfig';

/**
 * The CertificateIssuanceConfig model module.
 * @module model/CertificateIssuanceConfig
 * @version v1
 */
class CertificateIssuanceConfig {
    /**
     * Constructs a new <code>CertificateIssuanceConfig</code>.
     * CertificateIssuanceConfig specifies how to issue and manage a certificate.
     * @alias module:model/CertificateIssuanceConfig
     */
    constructor() { 
        
        CertificateIssuanceConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateIssuanceConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateIssuanceConfig} obj Optional instance to populate.
     * @return {module:model/CertificateIssuanceConfig} The populated <code>CertificateIssuanceConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateIssuanceConfig();

            if (data.hasOwnProperty('certificateAuthorityConfig')) {
                obj['certificateAuthorityConfig'] = CertificateAuthorityConfig.constructFromObject(data['certificateAuthorityConfig']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('keyAlgorithm')) {
                obj['keyAlgorithm'] = ApiClient.convertToType(data['keyAlgorithm'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('lifetime')) {
                obj['lifetime'] = ApiClient.convertToType(data['lifetime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rotationWindowPercentage')) {
                obj['rotationWindowPercentage'] = ApiClient.convertToType(data['rotationWindowPercentage'], 'Number');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateIssuanceConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateIssuanceConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `certificateAuthorityConfig`
        if (data['certificateAuthorityConfig']) { // data not null
          CertificateAuthorityConfig.validateJSON(data['certificateAuthorityConfig']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['keyAlgorithm'] && !(typeof data['keyAlgorithm'] === 'string' || data['keyAlgorithm'] instanceof String)) {
            throw new Error("Expected the field `keyAlgorithm` to be a primitive type in the JSON string but got " + data['keyAlgorithm']);
        }
        // ensure the json data is a string
        if (data['lifetime'] && !(typeof data['lifetime'] === 'string' || data['lifetime'] instanceof String)) {
            throw new Error("Expected the field `lifetime` to be a primitive type in the JSON string but got " + data['lifetime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/CertificateAuthorityConfig} certificateAuthorityConfig
 */
CertificateIssuanceConfig.prototype['certificateAuthorityConfig'] = undefined;

/**
 * Output only. The creation timestamp of a CertificateIssuanceConfig.
 * @member {String} createTime
 */
CertificateIssuanceConfig.prototype['createTime'] = undefined;

/**
 * One or more paragraphs of text description of a CertificateIssuanceConfig.
 * @member {String} description
 */
CertificateIssuanceConfig.prototype['description'] = undefined;

/**
 * Required. The key algorithm to use when generating the private key.
 * @member {module:model/CertificateIssuanceConfig.KeyAlgorithmEnum} keyAlgorithm
 */
CertificateIssuanceConfig.prototype['keyAlgorithm'] = undefined;

/**
 * Set of labels associated with a CertificateIssuanceConfig.
 * @member {Object.<String, String>} labels
 */
CertificateIssuanceConfig.prototype['labels'] = undefined;

/**
 * Required. Workload certificate lifetime requested.
 * @member {String} lifetime
 */
CertificateIssuanceConfig.prototype['lifetime'] = undefined;

/**
 * A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally and match pattern `projects/_*_/locations/_*_/certificateIssuanceConfigs/_*`.
 * @member {String} name
 */
CertificateIssuanceConfig.prototype['name'] = undefined;

/**
 * Required. Specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be a number between 1-99, inclusive.
 * @member {Number} rotationWindowPercentage
 */
CertificateIssuanceConfig.prototype['rotationWindowPercentage'] = undefined;

/**
 * Output only. The last update timestamp of a CertificateIssuanceConfig.
 * @member {String} updateTime
 */
CertificateIssuanceConfig.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>keyAlgorithm</code> property.
 * @enum {String}
 * @readonly
 */
CertificateIssuanceConfig['KeyAlgorithmEnum'] = {

    /**
     * value: "KEY_ALGORITHM_UNSPECIFIED"
     * @const
     */
    "KEY_ALGORITHM_UNSPECIFIED": "KEY_ALGORITHM_UNSPECIFIED",

    /**
     * value: "RSA_2048"
     * @const
     */
    "RSA_2048": "RSA_2048",

    /**
     * value: "ECDSA_P256"
     * @const
     */
    "ECDSA_P256": "ECDSA_P256"
};



export default CertificateIssuanceConfig;

