/**
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IntermediateCA from './IntermediateCA';
import TrustAnchor from './TrustAnchor';

/**
 * The TrustStore model module.
 * @module model/TrustStore
 * @version v1
 */
class TrustStore {
    /**
     * Constructs a new <code>TrustStore</code>.
     * Defines a trust store.
     * @alias module:model/TrustStore
     */
    constructor() { 
        
        TrustStore.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TrustStore</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrustStore} obj Optional instance to populate.
     * @return {module:model/TrustStore} The populated <code>TrustStore</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrustStore();

            if (data.hasOwnProperty('intermediateCas')) {
                obj['intermediateCas'] = ApiClient.convertToType(data['intermediateCas'], [IntermediateCA]);
            }
            if (data.hasOwnProperty('trustAnchors')) {
                obj['trustAnchors'] = ApiClient.convertToType(data['trustAnchors'], [TrustAnchor]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrustStore</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrustStore</code>.
     */
    static validateJSON(data) {
        if (data['intermediateCas']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['intermediateCas'])) {
                throw new Error("Expected the field `intermediateCas` to be an array in the JSON data but got " + data['intermediateCas']);
            }
            // validate the optional field `intermediateCas` (array)
            for (const item of data['intermediateCas']) {
                IntermediateCA.validateJSON(item);
            };
        }
        if (data['trustAnchors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trustAnchors'])) {
                throw new Error("Expected the field `trustAnchors` to be an array in the JSON data but got " + data['trustAnchors']);
            }
            // validate the optional field `trustAnchors` (array)
            for (const item of data['trustAnchors']) {
                TrustAnchor.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Set of intermediate CA certificates used for the path building phase of chain validation. The field is currently not supported if TrustConfig is used for the workload certificate feature.
 * @member {Array.<module:model/IntermediateCA>} intermediateCas
 */
TrustStore.prototype['intermediateCas'] = undefined;

/**
 * List of Trust Anchors to be used while performing validation against a given TrustStore.
 * @member {Array.<module:model/TrustAnchor>} trustAnchors
 */
TrustStore.prototype['trustAnchors'] = undefined;






export default TrustStore;

