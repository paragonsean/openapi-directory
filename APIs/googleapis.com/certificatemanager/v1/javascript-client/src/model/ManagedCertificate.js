/**
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthorizationAttemptInfo from './AuthorizationAttemptInfo';
import ProvisioningIssue from './ProvisioningIssue';

/**
 * The ManagedCertificate model module.
 * @module model/ManagedCertificate
 * @version v1
 */
class ManagedCertificate {
    /**
     * Constructs a new <code>ManagedCertificate</code>.
     * Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it&#39;s authorized to do so.
     * @alias module:model/ManagedCertificate
     */
    constructor() { 
        
        ManagedCertificate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManagedCertificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagedCertificate} obj Optional instance to populate.
     * @return {module:model/ManagedCertificate} The populated <code>ManagedCertificate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagedCertificate();

            if (data.hasOwnProperty('authorizationAttemptInfo')) {
                obj['authorizationAttemptInfo'] = ApiClient.convertToType(data['authorizationAttemptInfo'], [AuthorizationAttemptInfo]);
            }
            if (data.hasOwnProperty('dnsAuthorizations')) {
                obj['dnsAuthorizations'] = ApiClient.convertToType(data['dnsAuthorizations'], ['String']);
            }
            if (data.hasOwnProperty('domains')) {
                obj['domains'] = ApiClient.convertToType(data['domains'], ['String']);
            }
            if (data.hasOwnProperty('issuanceConfig')) {
                obj['issuanceConfig'] = ApiClient.convertToType(data['issuanceConfig'], 'String');
            }
            if (data.hasOwnProperty('provisioningIssue')) {
                obj['provisioningIssue'] = ProvisioningIssue.constructFromObject(data['provisioningIssue']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagedCertificate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagedCertificate</code>.
     */
    static validateJSON(data) {
        if (data['authorizationAttemptInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authorizationAttemptInfo'])) {
                throw new Error("Expected the field `authorizationAttemptInfo` to be an array in the JSON data but got " + data['authorizationAttemptInfo']);
            }
            // validate the optional field `authorizationAttemptInfo` (array)
            for (const item of data['authorizationAttemptInfo']) {
                AuthorizationAttemptInfo.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dnsAuthorizations'])) {
            throw new Error("Expected the field `dnsAuthorizations` to be an array in the JSON data but got " + data['dnsAuthorizations']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['domains'])) {
            throw new Error("Expected the field `domains` to be an array in the JSON data but got " + data['domains']);
        }
        // ensure the json data is a string
        if (data['issuanceConfig'] && !(typeof data['issuanceConfig'] === 'string' || data['issuanceConfig'] instanceof String)) {
            throw new Error("Expected the field `issuanceConfig` to be a primitive type in the JSON string but got " + data['issuanceConfig']);
        }
        // validate the optional field `provisioningIssue`
        if (data['provisioningIssue']) { // data not null
          ProvisioningIssue.validateJSON(data['provisioningIssue']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Output only. Detailed state of the latest authorization attempt for each domain specified for managed certificate resource.
 * @member {Array.<module:model/AuthorizationAttemptInfo>} authorizationAttemptInfo
 */
ManagedCertificate.prototype['authorizationAttemptInfo'] = undefined;

/**
 * Immutable. Authorizations that will be used for performing domain authorization.
 * @member {Array.<String>} dnsAuthorizations
 */
ManagedCertificate.prototype['dnsAuthorizations'] = undefined;

/**
 * Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
 * @member {Array.<String>} domains
 */
ManagedCertificate.prototype['domains'] = undefined;

/**
 * Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format `projects/_*_/locations/_*_/certificateIssuanceConfigs/_*`. If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
 * @member {String} issuanceConfig
 */
ManagedCertificate.prototype['issuanceConfig'] = undefined;

/**
 * @member {module:model/ProvisioningIssue} provisioningIssue
 */
ManagedCertificate.prototype['provisioningIssue'] = undefined;

/**
 * Output only. State of the managed certificate resource.
 * @member {module:model/ManagedCertificate.StateEnum} state
 */
ManagedCertificate.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ManagedCertificate['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PROVISIONING"
     * @const
     */
    "PROVISIONING": "PROVISIONING",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE"
};



export default ManagedCertificate;

