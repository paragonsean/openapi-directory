/**
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProvisioningIssue model module.
 * @module model/ProvisioningIssue
 * @version v1
 */
class ProvisioningIssue {
    /**
     * Constructs a new <code>ProvisioningIssue</code>.
     * Information about issues with provisioning a Managed Certificate.
     * @alias module:model/ProvisioningIssue
     */
    constructor() { 
        
        ProvisioningIssue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProvisioningIssue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProvisioningIssue} obj Optional instance to populate.
     * @return {module:model/ProvisioningIssue} The populated <code>ProvisioningIssue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProvisioningIssue();

            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProvisioningIssue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProvisioningIssue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['details'] && !(typeof data['details'] === 'string' || data['details'] instanceof String)) {
            throw new Error("Expected the field `details` to be a primitive type in the JSON string but got " + data['details']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }

        return true;
    }


}



/**
 * Output only. Human readable explanation about the issue. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use Reason enum.
 * @member {String} details
 */
ProvisioningIssue.prototype['details'] = undefined;

/**
 * Output only. Reason for provisioning failures.
 * @member {module:model/ProvisioningIssue.ReasonEnum} reason
 */
ProvisioningIssue.prototype['reason'] = undefined;





/**
 * Allowed values for the <code>reason</code> property.
 * @enum {String}
 * @readonly
 */
ProvisioningIssue['ReasonEnum'] = {

    /**
     * value: "REASON_UNSPECIFIED"
     * @const
     */
    "REASON_UNSPECIFIED": "REASON_UNSPECIFIED",

    /**
     * value: "AUTHORIZATION_ISSUE"
     * @const
     */
    "AUTHORIZATION_ISSUE": "AUTHORIZATION_ISSUE",

    /**
     * value: "RATE_LIMITED"
     * @const
     */
    "RATE_LIMITED": "RATE_LIMITED"
};



export default ProvisioningIssue;

