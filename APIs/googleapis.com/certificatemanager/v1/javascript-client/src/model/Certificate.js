/**
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ManagedCertificate from './ManagedCertificate';
import SelfManagedCertificate from './SelfManagedCertificate';

/**
 * The Certificate model module.
 * @module model/Certificate
 * @version v1
 */
class Certificate {
    /**
     * Constructs a new <code>Certificate</code>.
     * Defines TLS certificate.
     * @alias module:model/Certificate
     */
    constructor() { 
        
        Certificate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Certificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Certificate} obj Optional instance to populate.
     * @return {module:model/Certificate} The populated <code>Certificate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Certificate();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('managed')) {
                obj['managed'] = ManagedCertificate.constructFromObject(data['managed']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pemCertificate')) {
                obj['pemCertificate'] = ApiClient.convertToType(data['pemCertificate'], 'String');
            }
            if (data.hasOwnProperty('sanDnsnames')) {
                obj['sanDnsnames'] = ApiClient.convertToType(data['sanDnsnames'], ['String']);
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('selfManaged')) {
                obj['selfManaged'] = SelfManagedCertificate.constructFromObject(data['selfManaged']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Certificate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Certificate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // validate the optional field `managed`
        if (data['managed']) { // data not null
          ManagedCertificate.validateJSON(data['managed']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['pemCertificate'] && !(typeof data['pemCertificate'] === 'string' || data['pemCertificate'] instanceof String)) {
            throw new Error("Expected the field `pemCertificate` to be a primitive type in the JSON string but got " + data['pemCertificate']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sanDnsnames'])) {
            throw new Error("Expected the field `sanDnsnames` to be an array in the JSON data but got " + data['sanDnsnames']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // validate the optional field `selfManaged`
        if (data['selfManaged']) { // data not null
          SelfManagedCertificate.validateJSON(data['selfManaged']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The creation timestamp of a Certificate.
 * @member {String} createTime
 */
Certificate.prototype['createTime'] = undefined;

/**
 * One or more paragraphs of text description of a certificate.
 * @member {String} description
 */
Certificate.prototype['description'] = undefined;

/**
 * Output only. The expiry timestamp of a Certificate.
 * @member {String} expireTime
 */
Certificate.prototype['expireTime'] = undefined;

/**
 * Set of labels associated with a Certificate.
 * @member {Object.<String, String>} labels
 */
Certificate.prototype['labels'] = undefined;

/**
 * @member {module:model/ManagedCertificate} managed
 */
Certificate.prototype['managed'] = undefined;

/**
 * A user-defined name of the certificate. Certificate names must be unique globally and match pattern `projects/_*_/locations/_*_/certificates/_*`.
 * @member {String} name
 */
Certificate.prototype['name'] = undefined;

/**
 * Output only. The PEM-encoded certificate chain.
 * @member {String} pemCertificate
 */
Certificate.prototype['pemCertificate'] = undefined;

/**
 * Output only. The list of Subject Alternative Names of dnsName type defined in the certificate (see RFC 5280 4.2.1.6). Managed certificates that haven't been provisioned yet have this field populated with a value of the managed.domains field.
 * @member {Array.<String>} sanDnsnames
 */
Certificate.prototype['sanDnsnames'] = undefined;

/**
 * Immutable. The scope of the certificate.
 * @member {module:model/Certificate.ScopeEnum} scope
 */
Certificate.prototype['scope'] = undefined;

/**
 * @member {module:model/SelfManagedCertificate} selfManaged
 */
Certificate.prototype['selfManaged'] = undefined;

/**
 * Output only. The last update timestamp of a Certificate.
 * @member {String} updateTime
 */
Certificate.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>scope</code> property.
 * @enum {String}
 * @readonly
 */
Certificate['ScopeEnum'] = {

    /**
     * value: "DEFAULT"
     * @const
     */
    "DEFAULT": "DEFAULT",

    /**
     * value: "EDGE_CACHE"
     * @const
     */
    "EDGE_CACHE": "EDGE_CACHE",

    /**
     * value: "ALL_REGIONS"
     * @const
     */
    "ALL_REGIONS": "ALL_REGIONS"
};



export default Certificate;

