# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.managed_certificate import ManagedCertificate
from openapi_server.models.self_managed_certificate import SelfManagedCertificate
from openapi_server import util


class Certificate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, expire_time: str=None, labels: Dict[str, str]=None, managed: ManagedCertificate=None, name: str=None, pem_certificate: str=None, san_dnsnames: List[str]=None, scope: str=None, self_managed: SelfManagedCertificate=None, update_time: str=None):
        """Certificate - a model defined in OpenAPI

        :param create_time: The create_time of this Certificate.
        :param description: The description of this Certificate.
        :param expire_time: The expire_time of this Certificate.
        :param labels: The labels of this Certificate.
        :param managed: The managed of this Certificate.
        :param name: The name of this Certificate.
        :param pem_certificate: The pem_certificate of this Certificate.
        :param san_dnsnames: The san_dnsnames of this Certificate.
        :param scope: The scope of this Certificate.
        :param self_managed: The self_managed of this Certificate.
        :param update_time: The update_time of this Certificate.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'expire_time': str,
            'labels': Dict[str, str],
            'managed': ManagedCertificate,
            'name': str,
            'pem_certificate': str,
            'san_dnsnames': List[str],
            'scope': str,
            'self_managed': SelfManagedCertificate,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'expire_time': 'expireTime',
            'labels': 'labels',
            'managed': 'managed',
            'name': 'name',
            'pem_certificate': 'pemCertificate',
            'san_dnsnames': 'sanDnsnames',
            'scope': 'scope',
            'self_managed': 'selfManaged',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._expire_time = expire_time
        self._labels = labels
        self._managed = managed
        self._name = name
        self._pem_certificate = pem_certificate
        self._san_dnsnames = san_dnsnames
        self._scope = scope
        self._self_managed = self_managed
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Certificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Certificate of this Certificate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Certificate.

        Output only. The creation timestamp of a Certificate.

        :return: The create_time of this Certificate.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Certificate.

        Output only. The creation timestamp of a Certificate.

        :param create_time: The create_time of this Certificate.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Certificate.

        One or more paragraphs of text description of a certificate.

        :return: The description of this Certificate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Certificate.

        One or more paragraphs of text description of a certificate.

        :param description: The description of this Certificate.
        :type description: str
        """

        self._description = description

    @property
    def expire_time(self):
        """Gets the expire_time of this Certificate.

        Output only. The expiry timestamp of a Certificate.

        :return: The expire_time of this Certificate.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this Certificate.

        Output only. The expiry timestamp of a Certificate.

        :param expire_time: The expire_time of this Certificate.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def labels(self):
        """Gets the labels of this Certificate.

        Set of labels associated with a Certificate.

        :return: The labels of this Certificate.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Certificate.

        Set of labels associated with a Certificate.

        :param labels: The labels of this Certificate.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def managed(self):
        """Gets the managed of this Certificate.


        :return: The managed of this Certificate.
        :rtype: ManagedCertificate
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this Certificate.


        :param managed: The managed of this Certificate.
        :type managed: ManagedCertificate
        """

        self._managed = managed

    @property
    def name(self):
        """Gets the name of this Certificate.

        A user-defined name of the certificate. Certificate names must be unique globally and match pattern `projects/*/locations/*/certificates/*`.

        :return: The name of this Certificate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Certificate.

        A user-defined name of the certificate. Certificate names must be unique globally and match pattern `projects/*/locations/*/certificates/*`.

        :param name: The name of this Certificate.
        :type name: str
        """

        self._name = name

    @property
    def pem_certificate(self):
        """Gets the pem_certificate of this Certificate.

        Output only. The PEM-encoded certificate chain.

        :return: The pem_certificate of this Certificate.
        :rtype: str
        """
        return self._pem_certificate

    @pem_certificate.setter
    def pem_certificate(self, pem_certificate):
        """Sets the pem_certificate of this Certificate.

        Output only. The PEM-encoded certificate chain.

        :param pem_certificate: The pem_certificate of this Certificate.
        :type pem_certificate: str
        """

        self._pem_certificate = pem_certificate

    @property
    def san_dnsnames(self):
        """Gets the san_dnsnames of this Certificate.

        Output only. The list of Subject Alternative Names of dnsName type defined in the certificate (see RFC 5280 4.2.1.6). Managed certificates that haven't been provisioned yet have this field populated with a value of the managed.domains field.

        :return: The san_dnsnames of this Certificate.
        :rtype: List[str]
        """
        return self._san_dnsnames

    @san_dnsnames.setter
    def san_dnsnames(self, san_dnsnames):
        """Sets the san_dnsnames of this Certificate.

        Output only. The list of Subject Alternative Names of dnsName type defined in the certificate (see RFC 5280 4.2.1.6). Managed certificates that haven't been provisioned yet have this field populated with a value of the managed.domains field.

        :param san_dnsnames: The san_dnsnames of this Certificate.
        :type san_dnsnames: List[str]
        """

        self._san_dnsnames = san_dnsnames

    @property
    def scope(self):
        """Gets the scope of this Certificate.

        Immutable. The scope of the certificate.

        :return: The scope of this Certificate.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Certificate.

        Immutable. The scope of the certificate.

        :param scope: The scope of this Certificate.
        :type scope: str
        """
        allowed_values = ["DEFAULT", "EDGE_CACHE", "ALL_REGIONS"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def self_managed(self):
        """Gets the self_managed of this Certificate.


        :return: The self_managed of this Certificate.
        :rtype: SelfManagedCertificate
        """
        return self._self_managed

    @self_managed.setter
    def self_managed(self, self_managed):
        """Sets the self_managed of this Certificate.


        :param self_managed: The self_managed of this Certificate.
        :type self_managed: SelfManagedCertificate
        """

        self._self_managed = self_managed

    @property
    def update_time(self):
        """Gets the update_time of this Certificate.

        Output only. The last update timestamp of a Certificate.

        :return: The update_time of this Certificate.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Certificate.

        Output only. The last update timestamp of a Certificate.

        :param update_time: The update_time of this Certificate.
        :type update_time: str
        """

        self._update_time = update_time
