# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CertificateMapEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificates: List[str]=None, create_time: str=None, description: str=None, hostname: str=None, labels: Dict[str, str]=None, matcher: str=None, name: str=None, state: str=None, update_time: str=None):
        """CertificateMapEntry - a model defined in OpenAPI

        :param certificates: The certificates of this CertificateMapEntry.
        :param create_time: The create_time of this CertificateMapEntry.
        :param description: The description of this CertificateMapEntry.
        :param hostname: The hostname of this CertificateMapEntry.
        :param labels: The labels of this CertificateMapEntry.
        :param matcher: The matcher of this CertificateMapEntry.
        :param name: The name of this CertificateMapEntry.
        :param state: The state of this CertificateMapEntry.
        :param update_time: The update_time of this CertificateMapEntry.
        """
        self.openapi_types = {
            'certificates': List[str],
            'create_time': str,
            'description': str,
            'hostname': str,
            'labels': Dict[str, str],
            'matcher': str,
            'name': str,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'certificates': 'certificates',
            'create_time': 'createTime',
            'description': 'description',
            'hostname': 'hostname',
            'labels': 'labels',
            'matcher': 'matcher',
            'name': 'name',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._certificates = certificates
        self._create_time = create_time
        self._description = description
        self._hostname = hostname
        self._labels = labels
        self._matcher = matcher
        self._name = name
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateMapEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateMapEntry of this CertificateMapEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificates(self):
        """Gets the certificates of this CertificateMapEntry.

        A set of Certificates defines for the given `hostname`. There can be defined up to four certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*/locations/*/certificates/*`.

        :return: The certificates of this CertificateMapEntry.
        :rtype: List[str]
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this CertificateMapEntry.

        A set of Certificates defines for the given `hostname`. There can be defined up to four certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*/locations/*/certificates/*`.

        :param certificates: The certificates of this CertificateMapEntry.
        :type certificates: List[str]
        """

        self._certificates = certificates

    @property
    def create_time(self):
        """Gets the create_time of this CertificateMapEntry.

        Output only. The creation timestamp of a Certificate Map Entry.

        :return: The create_time of this CertificateMapEntry.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CertificateMapEntry.

        Output only. The creation timestamp of a Certificate Map Entry.

        :param create_time: The create_time of this CertificateMapEntry.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this CertificateMapEntry.

        One or more paragraphs of text description of a certificate map entry.

        :return: The description of this CertificateMapEntry.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CertificateMapEntry.

        One or more paragraphs of text description of a certificate map entry.

        :param description: The description of this CertificateMapEntry.
        :type description: str
        """

        self._description = description

    @property
    def hostname(self):
        """Gets the hostname of this CertificateMapEntry.

        A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.

        :return: The hostname of this CertificateMapEntry.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this CertificateMapEntry.

        A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.

        :param hostname: The hostname of this CertificateMapEntry.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def labels(self):
        """Gets the labels of this CertificateMapEntry.

        Set of labels associated with a Certificate Map Entry.

        :return: The labels of this CertificateMapEntry.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CertificateMapEntry.

        Set of labels associated with a Certificate Map Entry.

        :param labels: The labels of this CertificateMapEntry.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def matcher(self):
        """Gets the matcher of this CertificateMapEntry.

        A predefined matcher for particular cases, other than SNI selection.

        :return: The matcher of this CertificateMapEntry.
        :rtype: str
        """
        return self._matcher

    @matcher.setter
    def matcher(self, matcher):
        """Sets the matcher of this CertificateMapEntry.

        A predefined matcher for particular cases, other than SNI selection.

        :param matcher: The matcher of this CertificateMapEntry.
        :type matcher: str
        """
        allowed_values = ["MATCHER_UNSPECIFIED", "PRIMARY"]  # noqa: E501
        if matcher not in allowed_values:
            raise ValueError(
                "Invalid value for `matcher` ({0}), must be one of {1}"
                .format(matcher, allowed_values)
            )

        self._matcher = matcher

    @property
    def name(self):
        """Gets the name of this CertificateMapEntry.

        A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*/certificateMapEntries/*`.

        :return: The name of this CertificateMapEntry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CertificateMapEntry.

        A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*/certificateMapEntries/*`.

        :param name: The name of this CertificateMapEntry.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this CertificateMapEntry.

        Output only. A serving state of this Certificate Map Entry.

        :return: The state of this CertificateMapEntry.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CertificateMapEntry.

        Output only. A serving state of this Certificate Map Entry.

        :param state: The state of this CertificateMapEntry.
        :type state: str
        """
        allowed_values = ["SERVING_STATE_UNSPECIFIED", "ACTIVE", "PENDING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this CertificateMapEntry.

        Output only. The update timestamp of a Certificate Map Entry.

        :return: The update_time of this CertificateMapEntry.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this CertificateMapEntry.

        Output only. The update timestamp of a Certificate Map Entry.

        :param update_time: The update_time of this CertificateMapEntry.
        :type update_time: str
        """

        self._update_time = update_time
