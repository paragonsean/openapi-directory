# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_authority_config import CertificateAuthorityConfig
from openapi_server import util


class CertificateIssuanceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_authority_config: CertificateAuthorityConfig=None, create_time: str=None, description: str=None, key_algorithm: str=None, labels: Dict[str, str]=None, lifetime: str=None, name: str=None, rotation_window_percentage: int=None, update_time: str=None):
        """CertificateIssuanceConfig - a model defined in OpenAPI

        :param certificate_authority_config: The certificate_authority_config of this CertificateIssuanceConfig.
        :param create_time: The create_time of this CertificateIssuanceConfig.
        :param description: The description of this CertificateIssuanceConfig.
        :param key_algorithm: The key_algorithm of this CertificateIssuanceConfig.
        :param labels: The labels of this CertificateIssuanceConfig.
        :param lifetime: The lifetime of this CertificateIssuanceConfig.
        :param name: The name of this CertificateIssuanceConfig.
        :param rotation_window_percentage: The rotation_window_percentage of this CertificateIssuanceConfig.
        :param update_time: The update_time of this CertificateIssuanceConfig.
        """
        self.openapi_types = {
            'certificate_authority_config': CertificateAuthorityConfig,
            'create_time': str,
            'description': str,
            'key_algorithm': str,
            'labels': Dict[str, str],
            'lifetime': str,
            'name': str,
            'rotation_window_percentage': int,
            'update_time': str
        }

        self.attribute_map = {
            'certificate_authority_config': 'certificateAuthorityConfig',
            'create_time': 'createTime',
            'description': 'description',
            'key_algorithm': 'keyAlgorithm',
            'labels': 'labels',
            'lifetime': 'lifetime',
            'name': 'name',
            'rotation_window_percentage': 'rotationWindowPercentage',
            'update_time': 'updateTime'
        }

        self._certificate_authority_config = certificate_authority_config
        self._create_time = create_time
        self._description = description
        self._key_algorithm = key_algorithm
        self._labels = labels
        self._lifetime = lifetime
        self._name = name
        self._rotation_window_percentage = rotation_window_percentage
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateIssuanceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateIssuanceConfig of this CertificateIssuanceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_authority_config(self):
        """Gets the certificate_authority_config of this CertificateIssuanceConfig.


        :return: The certificate_authority_config of this CertificateIssuanceConfig.
        :rtype: CertificateAuthorityConfig
        """
        return self._certificate_authority_config

    @certificate_authority_config.setter
    def certificate_authority_config(self, certificate_authority_config):
        """Sets the certificate_authority_config of this CertificateIssuanceConfig.


        :param certificate_authority_config: The certificate_authority_config of this CertificateIssuanceConfig.
        :type certificate_authority_config: CertificateAuthorityConfig
        """

        self._certificate_authority_config = certificate_authority_config

    @property
    def create_time(self):
        """Gets the create_time of this CertificateIssuanceConfig.

        Output only. The creation timestamp of a CertificateIssuanceConfig.

        :return: The create_time of this CertificateIssuanceConfig.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CertificateIssuanceConfig.

        Output only. The creation timestamp of a CertificateIssuanceConfig.

        :param create_time: The create_time of this CertificateIssuanceConfig.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this CertificateIssuanceConfig.

        One or more paragraphs of text description of a CertificateIssuanceConfig.

        :return: The description of this CertificateIssuanceConfig.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CertificateIssuanceConfig.

        One or more paragraphs of text description of a CertificateIssuanceConfig.

        :param description: The description of this CertificateIssuanceConfig.
        :type description: str
        """

        self._description = description

    @property
    def key_algorithm(self):
        """Gets the key_algorithm of this CertificateIssuanceConfig.

        Required. The key algorithm to use when generating the private key.

        :return: The key_algorithm of this CertificateIssuanceConfig.
        :rtype: str
        """
        return self._key_algorithm

    @key_algorithm.setter
    def key_algorithm(self, key_algorithm):
        """Sets the key_algorithm of this CertificateIssuanceConfig.

        Required. The key algorithm to use when generating the private key.

        :param key_algorithm: The key_algorithm of this CertificateIssuanceConfig.
        :type key_algorithm: str
        """
        allowed_values = ["KEY_ALGORITHM_UNSPECIFIED", "RSA_2048", "ECDSA_P256"]  # noqa: E501
        if key_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `key_algorithm` ({0}), must be one of {1}"
                .format(key_algorithm, allowed_values)
            )

        self._key_algorithm = key_algorithm

    @property
    def labels(self):
        """Gets the labels of this CertificateIssuanceConfig.

        Set of labels associated with a CertificateIssuanceConfig.

        :return: The labels of this CertificateIssuanceConfig.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CertificateIssuanceConfig.

        Set of labels associated with a CertificateIssuanceConfig.

        :param labels: The labels of this CertificateIssuanceConfig.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def lifetime(self):
        """Gets the lifetime of this CertificateIssuanceConfig.

        Required. Workload certificate lifetime requested.

        :return: The lifetime of this CertificateIssuanceConfig.
        :rtype: str
        """
        return self._lifetime

    @lifetime.setter
    def lifetime(self, lifetime):
        """Sets the lifetime of this CertificateIssuanceConfig.

        Required. Workload certificate lifetime requested.

        :param lifetime: The lifetime of this CertificateIssuanceConfig.
        :type lifetime: str
        """

        self._lifetime = lifetime

    @property
    def name(self):
        """Gets the name of this CertificateIssuanceConfig.

        A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally and match pattern `projects/*/locations/*/certificateIssuanceConfigs/*`.

        :return: The name of this CertificateIssuanceConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CertificateIssuanceConfig.

        A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally and match pattern `projects/*/locations/*/certificateIssuanceConfigs/*`.

        :param name: The name of this CertificateIssuanceConfig.
        :type name: str
        """

        self._name = name

    @property
    def rotation_window_percentage(self):
        """Gets the rotation_window_percentage of this CertificateIssuanceConfig.

        Required. Specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be a number between 1-99, inclusive.

        :return: The rotation_window_percentage of this CertificateIssuanceConfig.
        :rtype: int
        """
        return self._rotation_window_percentage

    @rotation_window_percentage.setter
    def rotation_window_percentage(self, rotation_window_percentage):
        """Sets the rotation_window_percentage of this CertificateIssuanceConfig.

        Required. Specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be a number between 1-99, inclusive.

        :param rotation_window_percentage: The rotation_window_percentage of this CertificateIssuanceConfig.
        :type rotation_window_percentage: int
        """

        self._rotation_window_percentage = rotation_window_percentage

    @property
    def update_time(self):
        """Gets the update_time of this CertificateIssuanceConfig.

        Output only. The last update timestamp of a CertificateIssuanceConfig.

        :return: The update_time of this CertificateIssuanceConfig.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this CertificateIssuanceConfig.

        Output only. The last update timestamp of a CertificateIssuanceConfig.

        :param update_time: The update_time of this CertificateIssuanceConfig.
        :type update_time: str
        """

        self._update_time = update_time
