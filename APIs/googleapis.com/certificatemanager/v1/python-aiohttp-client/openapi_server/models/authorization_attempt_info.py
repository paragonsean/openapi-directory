# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthorizationAttemptInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: str=None, domain: str=None, failure_reason: str=None, state: str=None):
        """AuthorizationAttemptInfo - a model defined in OpenAPI

        :param details: The details of this AuthorizationAttemptInfo.
        :param domain: The domain of this AuthorizationAttemptInfo.
        :param failure_reason: The failure_reason of this AuthorizationAttemptInfo.
        :param state: The state of this AuthorizationAttemptInfo.
        """
        self.openapi_types = {
            'details': str,
            'domain': str,
            'failure_reason': str,
            'state': str
        }

        self.attribute_map = {
            'details': 'details',
            'domain': 'domain',
            'failure_reason': 'failureReason',
            'state': 'state'
        }

        self._details = details
        self._domain = domain
        self._failure_reason = failure_reason
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorizationAttemptInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthorizationAttemptInfo of this AuthorizationAttemptInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this AuthorizationAttemptInfo.

        Output only. Human readable explanation for reaching the state. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use FailureReason enum.

        :return: The details of this AuthorizationAttemptInfo.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this AuthorizationAttemptInfo.

        Output only. Human readable explanation for reaching the state. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use FailureReason enum.

        :param details: The details of this AuthorizationAttemptInfo.
        :type details: str
        """

        self._details = details

    @property
    def domain(self):
        """Gets the domain of this AuthorizationAttemptInfo.

        Domain name of the authorization attempt.

        :return: The domain of this AuthorizationAttemptInfo.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this AuthorizationAttemptInfo.

        Domain name of the authorization attempt.

        :param domain: The domain of this AuthorizationAttemptInfo.
        :type domain: str
        """

        self._domain = domain

    @property
    def failure_reason(self):
        """Gets the failure_reason of this AuthorizationAttemptInfo.

        Output only. Reason for failure of the authorization attempt for the domain.

        :return: The failure_reason of this AuthorizationAttemptInfo.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this AuthorizationAttemptInfo.

        Output only. Reason for failure of the authorization attempt for the domain.

        :param failure_reason: The failure_reason of this AuthorizationAttemptInfo.
        :type failure_reason: str
        """
        allowed_values = ["FAILURE_REASON_UNSPECIFIED", "CONFIG", "CAA", "RATE_LIMITED"]  # noqa: E501
        if failure_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `failure_reason` ({0}), must be one of {1}"
                .format(failure_reason, allowed_values)
            )

        self._failure_reason = failure_reason

    @property
    def state(self):
        """Gets the state of this AuthorizationAttemptInfo.

        Output only. State of the domain for managed certificate issuance.

        :return: The state of this AuthorizationAttemptInfo.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AuthorizationAttemptInfo.

        Output only. State of the domain for managed certificate issuance.

        :param state: The state of this AuthorizationAttemptInfo.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "AUTHORIZING", "AUTHORIZED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
