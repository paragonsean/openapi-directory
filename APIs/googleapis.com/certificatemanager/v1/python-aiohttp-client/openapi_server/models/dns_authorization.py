# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dns_resource_record import DnsResourceRecord
from openapi_server import util


class DnsAuthorization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, dns_resource_record: DnsResourceRecord=None, domain: str=None, labels: Dict[str, str]=None, name: str=None, type: str=None, update_time: str=None):
        """DnsAuthorization - a model defined in OpenAPI

        :param create_time: The create_time of this DnsAuthorization.
        :param description: The description of this DnsAuthorization.
        :param dns_resource_record: The dns_resource_record of this DnsAuthorization.
        :param domain: The domain of this DnsAuthorization.
        :param labels: The labels of this DnsAuthorization.
        :param name: The name of this DnsAuthorization.
        :param type: The type of this DnsAuthorization.
        :param update_time: The update_time of this DnsAuthorization.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'dns_resource_record': DnsResourceRecord,
            'domain': str,
            'labels': Dict[str, str],
            'name': str,
            'type': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'dns_resource_record': 'dnsResourceRecord',
            'domain': 'domain',
            'labels': 'labels',
            'name': 'name',
            'type': 'type',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._dns_resource_record = dns_resource_record
        self._domain = domain
        self._labels = labels
        self._name = name
        self._type = type
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DnsAuthorization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DnsAuthorization of this DnsAuthorization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this DnsAuthorization.

        Output only. The creation timestamp of a DnsAuthorization.

        :return: The create_time of this DnsAuthorization.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this DnsAuthorization.

        Output only. The creation timestamp of a DnsAuthorization.

        :param create_time: The create_time of this DnsAuthorization.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this DnsAuthorization.

        One or more paragraphs of text description of a DnsAuthorization.

        :return: The description of this DnsAuthorization.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DnsAuthorization.

        One or more paragraphs of text description of a DnsAuthorization.

        :param description: The description of this DnsAuthorization.
        :type description: str
        """

        self._description = description

    @property
    def dns_resource_record(self):
        """Gets the dns_resource_record of this DnsAuthorization.


        :return: The dns_resource_record of this DnsAuthorization.
        :rtype: DnsResourceRecord
        """
        return self._dns_resource_record

    @dns_resource_record.setter
    def dns_resource_record(self, dns_resource_record):
        """Sets the dns_resource_record of this DnsAuthorization.


        :param dns_resource_record: The dns_resource_record of this DnsAuthorization.
        :type dns_resource_record: DnsResourceRecord
        """

        self._dns_resource_record = dns_resource_record

    @property
    def domain(self):
        """Gets the domain of this DnsAuthorization.

        Required. Immutable. A domain that is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g. authorization for `example.com` can be used to issue certificates for `example.com` and `*.example.com`.

        :return: The domain of this DnsAuthorization.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DnsAuthorization.

        Required. Immutable. A domain that is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g. authorization for `example.com` can be used to issue certificates for `example.com` and `*.example.com`.

        :param domain: The domain of this DnsAuthorization.
        :type domain: str
        """

        self._domain = domain

    @property
    def labels(self):
        """Gets the labels of this DnsAuthorization.

        Set of labels associated with a DnsAuthorization.

        :return: The labels of this DnsAuthorization.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DnsAuthorization.

        Set of labels associated with a DnsAuthorization.

        :param labels: The labels of this DnsAuthorization.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this DnsAuthorization.

        A user-defined name of the dns authorization. DnsAuthorization names must be unique globally and match pattern `projects/*/locations/*/dnsAuthorizations/*`.

        :return: The name of this DnsAuthorization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DnsAuthorization.

        A user-defined name of the dns authorization. DnsAuthorization names must be unique globally and match pattern `projects/*/locations/*/dnsAuthorizations/*`.

        :param name: The name of this DnsAuthorization.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this DnsAuthorization.

        Immutable. Type of DnsAuthorization. If unset during resource creation the following default will be used: - in location global: FIXED_RECORD.

        :return: The type of this DnsAuthorization.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DnsAuthorization.

        Immutable. Type of DnsAuthorization. If unset during resource creation the following default will be used: - in location global: FIXED_RECORD.

        :param type: The type of this DnsAuthorization.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "FIXED_RECORD", "PER_PROJECT_RECORD"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this DnsAuthorization.

        Output only. The last update timestamp of a DnsAuthorization.

        :return: The update_time of this DnsAuthorization.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this DnsAuthorization.

        Output only. The last update timestamp of a DnsAuthorization.

        :param update_time: The update_time of this DnsAuthorization.
        :type update_time: str
        """

        self._update_time = update_time
