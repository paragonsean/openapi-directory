# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authorization_attempt_info import AuthorizationAttemptInfo
from openapi_server.models.provisioning_issue import ProvisioningIssue
from openapi_server import util


class ManagedCertificate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_attempt_info: List[AuthorizationAttemptInfo]=None, dns_authorizations: List[str]=None, domains: List[str]=None, issuance_config: str=None, provisioning_issue: ProvisioningIssue=None, state: str=None):
        """ManagedCertificate - a model defined in OpenAPI

        :param authorization_attempt_info: The authorization_attempt_info of this ManagedCertificate.
        :param dns_authorizations: The dns_authorizations of this ManagedCertificate.
        :param domains: The domains of this ManagedCertificate.
        :param issuance_config: The issuance_config of this ManagedCertificate.
        :param provisioning_issue: The provisioning_issue of this ManagedCertificate.
        :param state: The state of this ManagedCertificate.
        """
        self.openapi_types = {
            'authorization_attempt_info': List[AuthorizationAttemptInfo],
            'dns_authorizations': List[str],
            'domains': List[str],
            'issuance_config': str,
            'provisioning_issue': ProvisioningIssue,
            'state': str
        }

        self.attribute_map = {
            'authorization_attempt_info': 'authorizationAttemptInfo',
            'dns_authorizations': 'dnsAuthorizations',
            'domains': 'domains',
            'issuance_config': 'issuanceConfig',
            'provisioning_issue': 'provisioningIssue',
            'state': 'state'
        }

        self._authorization_attempt_info = authorization_attempt_info
        self._dns_authorizations = dns_authorizations
        self._domains = domains
        self._issuance_config = issuance_config
        self._provisioning_issue = provisioning_issue
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedCertificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedCertificate of this ManagedCertificate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_attempt_info(self):
        """Gets the authorization_attempt_info of this ManagedCertificate.

        Output only. Detailed state of the latest authorization attempt for each domain specified for managed certificate resource.

        :return: The authorization_attempt_info of this ManagedCertificate.
        :rtype: List[AuthorizationAttemptInfo]
        """
        return self._authorization_attempt_info

    @authorization_attempt_info.setter
    def authorization_attempt_info(self, authorization_attempt_info):
        """Sets the authorization_attempt_info of this ManagedCertificate.

        Output only. Detailed state of the latest authorization attempt for each domain specified for managed certificate resource.

        :param authorization_attempt_info: The authorization_attempt_info of this ManagedCertificate.
        :type authorization_attempt_info: List[AuthorizationAttemptInfo]
        """

        self._authorization_attempt_info = authorization_attempt_info

    @property
    def dns_authorizations(self):
        """Gets the dns_authorizations of this ManagedCertificate.

        Immutable. Authorizations that will be used for performing domain authorization.

        :return: The dns_authorizations of this ManagedCertificate.
        :rtype: List[str]
        """
        return self._dns_authorizations

    @dns_authorizations.setter
    def dns_authorizations(self, dns_authorizations):
        """Sets the dns_authorizations of this ManagedCertificate.

        Immutable. Authorizations that will be used for performing domain authorization.

        :param dns_authorizations: The dns_authorizations of this ManagedCertificate.
        :type dns_authorizations: List[str]
        """

        self._dns_authorizations = dns_authorizations

    @property
    def domains(self):
        """Gets the domains of this ManagedCertificate.

        Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.

        :return: The domains of this ManagedCertificate.
        :rtype: List[str]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this ManagedCertificate.

        Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.

        :param domains: The domains of this ManagedCertificate.
        :type domains: List[str]
        """

        self._domains = domains

    @property
    def issuance_config(self):
        """Gets the issuance_config of this ManagedCertificate.

        Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format `projects/*/locations/*/certificateIssuanceConfigs/*`. If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.

        :return: The issuance_config of this ManagedCertificate.
        :rtype: str
        """
        return self._issuance_config

    @issuance_config.setter
    def issuance_config(self, issuance_config):
        """Sets the issuance_config of this ManagedCertificate.

        Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format `projects/*/locations/*/certificateIssuanceConfigs/*`. If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.

        :param issuance_config: The issuance_config of this ManagedCertificate.
        :type issuance_config: str
        """

        self._issuance_config = issuance_config

    @property
    def provisioning_issue(self):
        """Gets the provisioning_issue of this ManagedCertificate.


        :return: The provisioning_issue of this ManagedCertificate.
        :rtype: ProvisioningIssue
        """
        return self._provisioning_issue

    @provisioning_issue.setter
    def provisioning_issue(self, provisioning_issue):
        """Sets the provisioning_issue of this ManagedCertificate.


        :param provisioning_issue: The provisioning_issue of this ManagedCertificate.
        :type provisioning_issue: ProvisioningIssue
        """

        self._provisioning_issue = provisioning_issue

    @property
    def state(self):
        """Gets the state of this ManagedCertificate.

        Output only. State of the managed certificate resource.

        :return: The state of this ManagedCertificate.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ManagedCertificate.

        Output only. State of the managed certificate resource.

        :param state: The state of this ManagedCertificate.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PROVISIONING", "FAILED", "ACTIVE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
