# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.trust_store import TrustStore
from openapi_server import util


class TrustConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, etag: str=None, labels: Dict[str, str]=None, name: str=None, trust_stores: List[TrustStore]=None, update_time: str=None):
        """TrustConfig - a model defined in OpenAPI

        :param create_time: The create_time of this TrustConfig.
        :param description: The description of this TrustConfig.
        :param etag: The etag of this TrustConfig.
        :param labels: The labels of this TrustConfig.
        :param name: The name of this TrustConfig.
        :param trust_stores: The trust_stores of this TrustConfig.
        :param update_time: The update_time of this TrustConfig.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'etag': str,
            'labels': Dict[str, str],
            'name': str,
            'trust_stores': List[TrustStore],
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'etag': 'etag',
            'labels': 'labels',
            'name': 'name',
            'trust_stores': 'trustStores',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._etag = etag
        self._labels = labels
        self._name = name
        self._trust_stores = trust_stores
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrustConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrustConfig of this TrustConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this TrustConfig.

        Output only. The creation timestamp of a TrustConfig.

        :return: The create_time of this TrustConfig.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this TrustConfig.

        Output only. The creation timestamp of a TrustConfig.

        :param create_time: The create_time of this TrustConfig.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this TrustConfig.

        One or more paragraphs of text description of a TrustConfig.

        :return: The description of this TrustConfig.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TrustConfig.

        One or more paragraphs of text description of a TrustConfig.

        :param description: The description of this TrustConfig.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this TrustConfig.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this TrustConfig.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TrustConfig.

        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this TrustConfig.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this TrustConfig.

        Set of labels associated with a TrustConfig.

        :return: The labels of this TrustConfig.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this TrustConfig.

        Set of labels associated with a TrustConfig.

        :param labels: The labels of this TrustConfig.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this TrustConfig.

        A user-defined name of the trust config. TrustConfig names must be unique globally and match pattern `projects/*/locations/*/trustConfigs/*`.

        :return: The name of this TrustConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrustConfig.

        A user-defined name of the trust config. TrustConfig names must be unique globally and match pattern `projects/*/locations/*/trustConfigs/*`.

        :param name: The name of this TrustConfig.
        :type name: str
        """

        self._name = name

    @property
    def trust_stores(self):
        """Gets the trust_stores of this TrustConfig.

        Set of trust stores to perform validation against. This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation. Only one TrustStore specified is currently allowed.

        :return: The trust_stores of this TrustConfig.
        :rtype: List[TrustStore]
        """
        return self._trust_stores

    @trust_stores.setter
    def trust_stores(self, trust_stores):
        """Sets the trust_stores of this TrustConfig.

        Set of trust stores to perform validation against. This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation. Only one TrustStore specified is currently allowed.

        :param trust_stores: The trust_stores of this TrustConfig.
        :type trust_stores: List[TrustStore]
        """

        self._trust_stores = trust_stores

    @property
    def update_time(self):
        """Gets the update_time of this TrustConfig.

        Output only. The last update timestamp of a TrustConfig.

        :return: The update_time of this TrustConfig.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this TrustConfig.

        Output only. The last update timestamp of a TrustConfig.

        :param update_time: The update_time of this TrustConfig.
        :type update_time: str
        """

        self._update_time = update_time
