# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gclb_target import GclbTarget
from openapi_server import util


class CertificateMap(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, gclb_targets: List[GclbTarget]=None, labels: Dict[str, str]=None, name: str=None, update_time: str=None):
        """CertificateMap - a model defined in OpenAPI

        :param create_time: The create_time of this CertificateMap.
        :param description: The description of this CertificateMap.
        :param gclb_targets: The gclb_targets of this CertificateMap.
        :param labels: The labels of this CertificateMap.
        :param name: The name of this CertificateMap.
        :param update_time: The update_time of this CertificateMap.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'gclb_targets': List[GclbTarget],
            'labels': Dict[str, str],
            'name': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'gclb_targets': 'gclbTargets',
            'labels': 'labels',
            'name': 'name',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._gclb_targets = gclb_targets
        self._labels = labels
        self._name = name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateMap':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateMap of this CertificateMap.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this CertificateMap.

        Output only. The creation timestamp of a Certificate Map.

        :return: The create_time of this CertificateMap.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CertificateMap.

        Output only. The creation timestamp of a Certificate Map.

        :param create_time: The create_time of this CertificateMap.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this CertificateMap.

        One or more paragraphs of text description of a certificate map.

        :return: The description of this CertificateMap.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CertificateMap.

        One or more paragraphs of text description of a certificate map.

        :param description: The description of this CertificateMap.
        :type description: str
        """

        self._description = description

    @property
    def gclb_targets(self):
        """Gets the gclb_targets of this CertificateMap.

        Output only. A list of GCLB targets that use this Certificate Map. A Target Proxy is only present on this list if it's attached to a Forwarding Rule.

        :return: The gclb_targets of this CertificateMap.
        :rtype: List[GclbTarget]
        """
        return self._gclb_targets

    @gclb_targets.setter
    def gclb_targets(self, gclb_targets):
        """Sets the gclb_targets of this CertificateMap.

        Output only. A list of GCLB targets that use this Certificate Map. A Target Proxy is only present on this list if it's attached to a Forwarding Rule.

        :param gclb_targets: The gclb_targets of this CertificateMap.
        :type gclb_targets: List[GclbTarget]
        """

        self._gclb_targets = gclb_targets

    @property
    def labels(self):
        """Gets the labels of this CertificateMap.

        Set of labels associated with a Certificate Map.

        :return: The labels of this CertificateMap.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CertificateMap.

        Set of labels associated with a Certificate Map.

        :param labels: The labels of this CertificateMap.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this CertificateMap.

        A user-defined name of the Certificate Map. Certificate Map names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*`.

        :return: The name of this CertificateMap.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CertificateMap.

        A user-defined name of the Certificate Map. Certificate Map names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*`.

        :param name: The name of this CertificateMap.
        :type name: str
        """

        self._name = name

    @property
    def update_time(self):
        """Gets the update_time of this CertificateMap.

        Output only. The update timestamp of a Certificate Map.

        :return: The update_time of this CertificateMap.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this CertificateMap.

        Output only. The update timestamp of a Certificate Map.

        :param update_time: The update_time of this CertificateMap.
        :type update_time: str
        """

        self._update_time = update_time
