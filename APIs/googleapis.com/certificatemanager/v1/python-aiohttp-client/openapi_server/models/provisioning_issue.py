# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProvisioningIssue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: str=None, reason: str=None):
        """ProvisioningIssue - a model defined in OpenAPI

        :param details: The details of this ProvisioningIssue.
        :param reason: The reason of this ProvisioningIssue.
        """
        self.openapi_types = {
            'details': str,
            'reason': str
        }

        self.attribute_map = {
            'details': 'details',
            'reason': 'reason'
        }

        self._details = details
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProvisioningIssue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProvisioningIssue of this ProvisioningIssue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this ProvisioningIssue.

        Output only. Human readable explanation about the issue. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use Reason enum.

        :return: The details of this ProvisioningIssue.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ProvisioningIssue.

        Output only. Human readable explanation about the issue. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use Reason enum.

        :param details: The details of this ProvisioningIssue.
        :type details: str
        """

        self._details = details

    @property
    def reason(self):
        """Gets the reason of this ProvisioningIssue.

        Output only. Reason for provisioning failures.

        :return: The reason of this ProvisioningIssue.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ProvisioningIssue.

        Output only. Reason for provisioning failures.

        :param reason: The reason of this ProvisioningIssue.
        :type reason: str
        """
        allowed_values = ["REASON_UNSPECIFIED", "AUTHORIZATION_ISSUE", "RATE_LIMITED"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason
