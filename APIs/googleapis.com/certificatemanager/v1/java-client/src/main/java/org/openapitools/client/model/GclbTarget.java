/*
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a Target Proxy that uses this Certificate Map.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:01.675631-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GclbTarget {
  public static final String SERIALIZED_NAME_IP_CONFIGS = "ipConfigs";
  @SerializedName(SERIALIZED_NAME_IP_CONFIGS)
  private List<IpConfig> ipConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_HTTPS_PROXY = "targetHttpsProxy";
  @SerializedName(SERIALIZED_NAME_TARGET_HTTPS_PROXY)
  private String targetHttpsProxy;

  public static final String SERIALIZED_NAME_TARGET_SSL_PROXY = "targetSslProxy";
  @SerializedName(SERIALIZED_NAME_TARGET_SSL_PROXY)
  private String targetSslProxy;

  public GclbTarget() {
  }

  public GclbTarget(
     List<IpConfig> ipConfigs, 
     String targetHttpsProxy, 
     String targetSslProxy
  ) {
    this();
    this.ipConfigs = ipConfigs;
    this.targetHttpsProxy = targetHttpsProxy;
    this.targetSslProxy = targetSslProxy;
  }

  /**
   * Output only. IP configurations for this Target Proxy where the Certificate Map is serving.
   * @return ipConfigs
   */
  @javax.annotation.Nullable
  public List<IpConfig> getIpConfigs() {
    return ipConfigs;
  }



  /**
   * Output only. This field returns the resource name in the following format: &#x60;//compute.googleapis.com/projects/_*_/global/targetHttpsProxies/_*&#x60;.
   * @return targetHttpsProxy
   */
  @javax.annotation.Nullable
  public String getTargetHttpsProxy() {
    return targetHttpsProxy;
  }



  /**
   * Output only. This field returns the resource name in the following format: &#x60;//compute.googleapis.com/projects/_*_/global/targetSslProxies/_*&#x60;.
   * @return targetSslProxy
   */
  @javax.annotation.Nullable
  public String getTargetSslProxy() {
    return targetSslProxy;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GclbTarget gclbTarget = (GclbTarget) o;
    return Objects.equals(this.ipConfigs, gclbTarget.ipConfigs) &&
        Objects.equals(this.targetHttpsProxy, gclbTarget.targetHttpsProxy) &&
        Objects.equals(this.targetSslProxy, gclbTarget.targetSslProxy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipConfigs, targetHttpsProxy, targetSslProxy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GclbTarget {\n");
    sb.append("    ipConfigs: ").append(toIndentedString(ipConfigs)).append("\n");
    sb.append("    targetHttpsProxy: ").append(toIndentedString(targetHttpsProxy)).append("\n");
    sb.append("    targetSslProxy: ").append(toIndentedString(targetSslProxy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ipConfigs");
    openapiFields.add("targetHttpsProxy");
    openapiFields.add("targetSslProxy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GclbTarget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GclbTarget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GclbTarget is not found in the empty JSON string", GclbTarget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GclbTarget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GclbTarget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ipConfigs") != null && !jsonObj.get("ipConfigs").isJsonNull()) {
        JsonArray jsonArrayipConfigs = jsonObj.getAsJsonArray("ipConfigs");
        if (jsonArrayipConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ipConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ipConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("ipConfigs").toString()));
          }

          // validate the optional field `ipConfigs` (array)
          for (int i = 0; i < jsonArrayipConfigs.size(); i++) {
            IpConfig.validateJsonElement(jsonArrayipConfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("targetHttpsProxy") != null && !jsonObj.get("targetHttpsProxy").isJsonNull()) && !jsonObj.get("targetHttpsProxy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetHttpsProxy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetHttpsProxy").toString()));
      }
      if ((jsonObj.get("targetSslProxy") != null && !jsonObj.get("targetSslProxy").isJsonNull()) && !jsonObj.get("targetSslProxy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetSslProxy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetSslProxy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GclbTarget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GclbTarget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GclbTarget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GclbTarget.class));

       return (TypeAdapter<T>) new TypeAdapter<GclbTarget>() {
           @Override
           public void write(JsonWriter out, GclbTarget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GclbTarget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GclbTarget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GclbTarget
   * @throws IOException if the JSON string is invalid with respect to GclbTarget
   */
  public static GclbTarget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GclbTarget.class);
  }

  /**
   * Convert an instance of GclbTarget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

