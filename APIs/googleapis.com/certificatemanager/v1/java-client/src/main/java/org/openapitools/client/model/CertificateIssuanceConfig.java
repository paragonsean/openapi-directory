/*
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CertificateAuthorityConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CertificateIssuanceConfig specifies how to issue and manage a certificate.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:01.675631-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateIssuanceConfig {
  public static final String SERIALIZED_NAME_CERTIFICATE_AUTHORITY_CONFIG = "certificateAuthorityConfig";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_AUTHORITY_CONFIG)
  private CertificateAuthorityConfig certificateAuthorityConfig;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Required. The key algorithm to use when generating the private key.
   */
  @JsonAdapter(KeyAlgorithmEnum.Adapter.class)
  public enum KeyAlgorithmEnum {
    KEY_ALGORITHM_UNSPECIFIED("KEY_ALGORITHM_UNSPECIFIED"),
    
    RSA_2048("RSA_2048"),
    
    ECDSA_P256("ECDSA_P256");

    private String value;

    KeyAlgorithmEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyAlgorithmEnum fromValue(String value) {
      for (KeyAlgorithmEnum b : KeyAlgorithmEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeyAlgorithmEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyAlgorithmEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyAlgorithmEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeyAlgorithmEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KeyAlgorithmEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KEY_ALGORITHM = "keyAlgorithm";
  @SerializedName(SERIALIZED_NAME_KEY_ALGORITHM)
  private KeyAlgorithmEnum keyAlgorithm;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LIFETIME = "lifetime";
  @SerializedName(SERIALIZED_NAME_LIFETIME)
  private String lifetime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROTATION_WINDOW_PERCENTAGE = "rotationWindowPercentage";
  @SerializedName(SERIALIZED_NAME_ROTATION_WINDOW_PERCENTAGE)
  private Integer rotationWindowPercentage;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public CertificateIssuanceConfig() {
  }

  public CertificateIssuanceConfig(
     String createTime, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.updateTime = updateTime;
  }

  public CertificateIssuanceConfig certificateAuthorityConfig(CertificateAuthorityConfig certificateAuthorityConfig) {
    this.certificateAuthorityConfig = certificateAuthorityConfig;
    return this;
  }

  /**
   * Get certificateAuthorityConfig
   * @return certificateAuthorityConfig
   */
  @javax.annotation.Nullable
  public CertificateAuthorityConfig getCertificateAuthorityConfig() {
    return certificateAuthorityConfig;
  }

  public void setCertificateAuthorityConfig(CertificateAuthorityConfig certificateAuthorityConfig) {
    this.certificateAuthorityConfig = certificateAuthorityConfig;
  }


  /**
   * Output only. The creation timestamp of a CertificateIssuanceConfig.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public CertificateIssuanceConfig description(String description) {
    this.description = description;
    return this;
  }

  /**
   * One or more paragraphs of text description of a CertificateIssuanceConfig.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CertificateIssuanceConfig keyAlgorithm(KeyAlgorithmEnum keyAlgorithm) {
    this.keyAlgorithm = keyAlgorithm;
    return this;
  }

  /**
   * Required. The key algorithm to use when generating the private key.
   * @return keyAlgorithm
   */
  @javax.annotation.Nullable
  public KeyAlgorithmEnum getKeyAlgorithm() {
    return keyAlgorithm;
  }

  public void setKeyAlgorithm(KeyAlgorithmEnum keyAlgorithm) {
    this.keyAlgorithm = keyAlgorithm;
  }


  public CertificateIssuanceConfig labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public CertificateIssuanceConfig putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Set of labels associated with a CertificateIssuanceConfig.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public CertificateIssuanceConfig lifetime(String lifetime) {
    this.lifetime = lifetime;
    return this;
  }

  /**
   * Required. Workload certificate lifetime requested.
   * @return lifetime
   */
  @javax.annotation.Nullable
  public String getLifetime() {
    return lifetime;
  }

  public void setLifetime(String lifetime) {
    this.lifetime = lifetime;
  }


  public CertificateIssuanceConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally and match pattern &#x60;projects/_*_/locations/_*_/certificateIssuanceConfigs/_*&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CertificateIssuanceConfig rotationWindowPercentage(Integer rotationWindowPercentage) {
    this.rotationWindowPercentage = rotationWindowPercentage;
    return this;
  }

  /**
   * Required. Specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be a number between 1-99, inclusive.
   * @return rotationWindowPercentage
   */
  @javax.annotation.Nullable
  public Integer getRotationWindowPercentage() {
    return rotationWindowPercentage;
  }

  public void setRotationWindowPercentage(Integer rotationWindowPercentage) {
    this.rotationWindowPercentage = rotationWindowPercentage;
  }


  /**
   * Output only. The last update timestamp of a CertificateIssuanceConfig.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateIssuanceConfig certificateIssuanceConfig = (CertificateIssuanceConfig) o;
    return Objects.equals(this.certificateAuthorityConfig, certificateIssuanceConfig.certificateAuthorityConfig) &&
        Objects.equals(this.createTime, certificateIssuanceConfig.createTime) &&
        Objects.equals(this.description, certificateIssuanceConfig.description) &&
        Objects.equals(this.keyAlgorithm, certificateIssuanceConfig.keyAlgorithm) &&
        Objects.equals(this.labels, certificateIssuanceConfig.labels) &&
        Objects.equals(this.lifetime, certificateIssuanceConfig.lifetime) &&
        Objects.equals(this.name, certificateIssuanceConfig.name) &&
        Objects.equals(this.rotationWindowPercentage, certificateIssuanceConfig.rotationWindowPercentage) &&
        Objects.equals(this.updateTime, certificateIssuanceConfig.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateAuthorityConfig, createTime, description, keyAlgorithm, labels, lifetime, name, rotationWindowPercentage, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateIssuanceConfig {\n");
    sb.append("    certificateAuthorityConfig: ").append(toIndentedString(certificateAuthorityConfig)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    keyAlgorithm: ").append(toIndentedString(keyAlgorithm)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    lifetime: ").append(toIndentedString(lifetime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rotationWindowPercentage: ").append(toIndentedString(rotationWindowPercentage)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificateAuthorityConfig");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("keyAlgorithm");
    openapiFields.add("labels");
    openapiFields.add("lifetime");
    openapiFields.add("name");
    openapiFields.add("rotationWindowPercentage");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateIssuanceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateIssuanceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateIssuanceConfig is not found in the empty JSON string", CertificateIssuanceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateIssuanceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateIssuanceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `certificateAuthorityConfig`
      if (jsonObj.get("certificateAuthorityConfig") != null && !jsonObj.get("certificateAuthorityConfig").isJsonNull()) {
        CertificateAuthorityConfig.validateJsonElement(jsonObj.get("certificateAuthorityConfig"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("keyAlgorithm") != null && !jsonObj.get("keyAlgorithm").isJsonNull()) && !jsonObj.get("keyAlgorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyAlgorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyAlgorithm").toString()));
      }
      // validate the optional field `keyAlgorithm`
      if (jsonObj.get("keyAlgorithm") != null && !jsonObj.get("keyAlgorithm").isJsonNull()) {
        KeyAlgorithmEnum.validateJsonElement(jsonObj.get("keyAlgorithm"));
      }
      if ((jsonObj.get("lifetime") != null && !jsonObj.get("lifetime").isJsonNull()) && !jsonObj.get("lifetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lifetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lifetime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateIssuanceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateIssuanceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateIssuanceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateIssuanceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateIssuanceConfig>() {
           @Override
           public void write(JsonWriter out, CertificateIssuanceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateIssuanceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateIssuanceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateIssuanceConfig
   * @throws IOException if the JSON string is invalid with respect to CertificateIssuanceConfig
   */
  public static CertificateIssuanceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateIssuanceConfig.class);
  }

  /**
   * Convert an instance of CertificateIssuanceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

