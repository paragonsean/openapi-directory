/*
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthorizationAttemptInfo;
import org.openapitools.client.model.ProvisioningIssue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it&#39;s authorized to do so.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:01.675631-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManagedCertificate {
  public static final String SERIALIZED_NAME_AUTHORIZATION_ATTEMPT_INFO = "authorizationAttemptInfo";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_ATTEMPT_INFO)
  private List<AuthorizationAttemptInfo> authorizationAttemptInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_DNS_AUTHORIZATIONS = "dnsAuthorizations";
  @SerializedName(SERIALIZED_NAME_DNS_AUTHORIZATIONS)
  private List<String> dnsAuthorizations = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOMAINS = "domains";
  @SerializedName(SERIALIZED_NAME_DOMAINS)
  private List<String> domains = new ArrayList<>();

  public static final String SERIALIZED_NAME_ISSUANCE_CONFIG = "issuanceConfig";
  @SerializedName(SERIALIZED_NAME_ISSUANCE_CONFIG)
  private String issuanceConfig;

  public static final String SERIALIZED_NAME_PROVISIONING_ISSUE = "provisioningIssue";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_ISSUE)
  private ProvisioningIssue provisioningIssue;

  /**
   * Output only. State of the managed certificate resource.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    PROVISIONING("PROVISIONING"),
    
    FAILED("FAILED"),
    
    ACTIVE("ACTIVE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public ManagedCertificate() {
  }

  public ManagedCertificate(
     List<AuthorizationAttemptInfo> authorizationAttemptInfo, 
     StateEnum state
  ) {
    this();
    this.authorizationAttemptInfo = authorizationAttemptInfo;
    this.state = state;
  }

  /**
   * Output only. Detailed state of the latest authorization attempt for each domain specified for managed certificate resource.
   * @return authorizationAttemptInfo
   */
  @javax.annotation.Nullable
  public List<AuthorizationAttemptInfo> getAuthorizationAttemptInfo() {
    return authorizationAttemptInfo;
  }



  public ManagedCertificate dnsAuthorizations(List<String> dnsAuthorizations) {
    this.dnsAuthorizations = dnsAuthorizations;
    return this;
  }

  public ManagedCertificate addDnsAuthorizationsItem(String dnsAuthorizationsItem) {
    if (this.dnsAuthorizations == null) {
      this.dnsAuthorizations = new ArrayList<>();
    }
    this.dnsAuthorizations.add(dnsAuthorizationsItem);
    return this;
  }

  /**
   * Immutable. Authorizations that will be used for performing domain authorization.
   * @return dnsAuthorizations
   */
  @javax.annotation.Nullable
  public List<String> getDnsAuthorizations() {
    return dnsAuthorizations;
  }

  public void setDnsAuthorizations(List<String> dnsAuthorizations) {
    this.dnsAuthorizations = dnsAuthorizations;
  }


  public ManagedCertificate domains(List<String> domains) {
    this.domains = domains;
    return this;
  }

  public ManagedCertificate addDomainsItem(String domainsItem) {
    if (this.domains == null) {
      this.domains = new ArrayList<>();
    }
    this.domains.add(domainsItem);
    return this;
  }

  /**
   * Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
   * @return domains
   */
  @javax.annotation.Nullable
  public List<String> getDomains() {
    return domains;
  }

  public void setDomains(List<String> domains) {
    this.domains = domains;
  }


  public ManagedCertificate issuanceConfig(String issuanceConfig) {
    this.issuanceConfig = issuanceConfig;
    return this;
  }

  /**
   * Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format &#x60;projects/_*_/locations/_*_/certificateIssuanceConfigs/_*&#x60;. If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
   * @return issuanceConfig
   */
  @javax.annotation.Nullable
  public String getIssuanceConfig() {
    return issuanceConfig;
  }

  public void setIssuanceConfig(String issuanceConfig) {
    this.issuanceConfig = issuanceConfig;
  }


  public ManagedCertificate provisioningIssue(ProvisioningIssue provisioningIssue) {
    this.provisioningIssue = provisioningIssue;
    return this;
  }

  /**
   * Get provisioningIssue
   * @return provisioningIssue
   */
  @javax.annotation.Nullable
  public ProvisioningIssue getProvisioningIssue() {
    return provisioningIssue;
  }

  public void setProvisioningIssue(ProvisioningIssue provisioningIssue) {
    this.provisioningIssue = provisioningIssue;
  }


  /**
   * Output only. State of the managed certificate resource.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedCertificate managedCertificate = (ManagedCertificate) o;
    return Objects.equals(this.authorizationAttemptInfo, managedCertificate.authorizationAttemptInfo) &&
        Objects.equals(this.dnsAuthorizations, managedCertificate.dnsAuthorizations) &&
        Objects.equals(this.domains, managedCertificate.domains) &&
        Objects.equals(this.issuanceConfig, managedCertificate.issuanceConfig) &&
        Objects.equals(this.provisioningIssue, managedCertificate.provisioningIssue) &&
        Objects.equals(this.state, managedCertificate.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationAttemptInfo, dnsAuthorizations, domains, issuanceConfig, provisioningIssue, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedCertificate {\n");
    sb.append("    authorizationAttemptInfo: ").append(toIndentedString(authorizationAttemptInfo)).append("\n");
    sb.append("    dnsAuthorizations: ").append(toIndentedString(dnsAuthorizations)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    issuanceConfig: ").append(toIndentedString(issuanceConfig)).append("\n");
    sb.append("    provisioningIssue: ").append(toIndentedString(provisioningIssue)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizationAttemptInfo");
    openapiFields.add("dnsAuthorizations");
    openapiFields.add("domains");
    openapiFields.add("issuanceConfig");
    openapiFields.add("provisioningIssue");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagedCertificate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagedCertificate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagedCertificate is not found in the empty JSON string", ManagedCertificate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagedCertificate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagedCertificate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("authorizationAttemptInfo") != null && !jsonObj.get("authorizationAttemptInfo").isJsonNull()) {
        JsonArray jsonArrayauthorizationAttemptInfo = jsonObj.getAsJsonArray("authorizationAttemptInfo");
        if (jsonArrayauthorizationAttemptInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authorizationAttemptInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authorizationAttemptInfo` to be an array in the JSON string but got `%s`", jsonObj.get("authorizationAttemptInfo").toString()));
          }

          // validate the optional field `authorizationAttemptInfo` (array)
          for (int i = 0; i < jsonArrayauthorizationAttemptInfo.size(); i++) {
            AuthorizationAttemptInfo.validateJsonElement(jsonArrayauthorizationAttemptInfo.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dnsAuthorizations") != null && !jsonObj.get("dnsAuthorizations").isJsonNull() && !jsonObj.get("dnsAuthorizations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsAuthorizations` to be an array in the JSON string but got `%s`", jsonObj.get("dnsAuthorizations").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("domains") != null && !jsonObj.get("domains").isJsonNull() && !jsonObj.get("domains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `domains` to be an array in the JSON string but got `%s`", jsonObj.get("domains").toString()));
      }
      if ((jsonObj.get("issuanceConfig") != null && !jsonObj.get("issuanceConfig").isJsonNull()) && !jsonObj.get("issuanceConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuanceConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuanceConfig").toString()));
      }
      // validate the optional field `provisioningIssue`
      if (jsonObj.get("provisioningIssue") != null && !jsonObj.get("provisioningIssue").isJsonNull()) {
        ProvisioningIssue.validateJsonElement(jsonObj.get("provisioningIssue"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagedCertificate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagedCertificate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagedCertificate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagedCertificate.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagedCertificate>() {
           @Override
           public void write(JsonWriter out, ManagedCertificate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagedCertificate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagedCertificate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagedCertificate
   * @throws IOException if the JSON string is invalid with respect to ManagedCertificate
   */
  public static ManagedCertificate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagedCertificate.class);
  }

  /**
   * Convert an instance of ManagedCertificate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

