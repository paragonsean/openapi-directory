/*
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a certificate map entry.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:01.675631-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateMapEntry {
  public static final String SERIALIZED_NAME_CERTIFICATES = "certificates";
  @SerializedName(SERIALIZED_NAME_CERTIFICATES)
  private List<String> certificates = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  /**
   * A predefined matcher for particular cases, other than SNI selection.
   */
  @JsonAdapter(MatcherEnum.Adapter.class)
  public enum MatcherEnum {
    MATCHER_UNSPECIFIED("MATCHER_UNSPECIFIED"),
    
    PRIMARY("PRIMARY");

    private String value;

    MatcherEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatcherEnum fromValue(String value) {
      for (MatcherEnum b : MatcherEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MatcherEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatcherEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatcherEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatcherEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MatcherEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MATCHER = "matcher";
  @SerializedName(SERIALIZED_NAME_MATCHER)
  private MatcherEnum matcher;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Output only. A serving state of this Certificate Map Entry.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    SERVING_STATE_UNSPECIFIED("SERVING_STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    PENDING("PENDING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public CertificateMapEntry() {
  }

  public CertificateMapEntry(
     String createTime, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.state = state;
    this.updateTime = updateTime;
  }

  public CertificateMapEntry certificates(List<String> certificates) {
    this.certificates = certificates;
    return this;
  }

  public CertificateMapEntry addCertificatesItem(String certificatesItem) {
    if (this.certificates == null) {
      this.certificates = new ArrayList<>();
    }
    this.certificates.add(certificatesItem);
    return this;
  }

  /**
   * A set of Certificates defines for the given &#x60;hostname&#x60;. There can be defined up to four certificates in each Certificate Map Entry. Each certificate must match pattern &#x60;projects/_*_/locations/_*_/certificates/_*&#x60;.
   * @return certificates
   */
  @javax.annotation.Nullable
  public List<String> getCertificates() {
    return certificates;
  }

  public void setCertificates(List<String> certificates) {
    this.certificates = certificates;
  }


  /**
   * Output only. The creation timestamp of a Certificate Map Entry.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public CertificateMapEntry description(String description) {
    this.description = description;
    return this;
  }

  /**
   * One or more paragraphs of text description of a certificate map entry.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CertificateMapEntry hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * A Hostname (FQDN, e.g. &#x60;example.com&#x60;) or a wildcard hostname expression (&#x60;*.example.com&#x60;) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public CertificateMapEntry labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public CertificateMapEntry putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Set of labels associated with a Certificate Map Entry.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public CertificateMapEntry matcher(MatcherEnum matcher) {
    this.matcher = matcher;
    return this;
  }

  /**
   * A predefined matcher for particular cases, other than SNI selection.
   * @return matcher
   */
  @javax.annotation.Nullable
  public MatcherEnum getMatcher() {
    return matcher;
  }

  public void setMatcher(MatcherEnum matcher) {
    this.matcher = matcher;
  }


  public CertificateMapEntry name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern &#x60;projects/_*_/locations/_*_/certificateMaps/_*_/certificateMapEntries/_*&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. A serving state of this Certificate Map Entry.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The update timestamp of a Certificate Map Entry.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateMapEntry certificateMapEntry = (CertificateMapEntry) o;
    return Objects.equals(this.certificates, certificateMapEntry.certificates) &&
        Objects.equals(this.createTime, certificateMapEntry.createTime) &&
        Objects.equals(this.description, certificateMapEntry.description) &&
        Objects.equals(this.hostname, certificateMapEntry.hostname) &&
        Objects.equals(this.labels, certificateMapEntry.labels) &&
        Objects.equals(this.matcher, certificateMapEntry.matcher) &&
        Objects.equals(this.name, certificateMapEntry.name) &&
        Objects.equals(this.state, certificateMapEntry.state) &&
        Objects.equals(this.updateTime, certificateMapEntry.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificates, createTime, description, hostname, labels, matcher, name, state, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateMapEntry {\n");
    sb.append("    certificates: ").append(toIndentedString(certificates)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    matcher: ").append(toIndentedString(matcher)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificates");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("hostname");
    openapiFields.add("labels");
    openapiFields.add("matcher");
    openapiFields.add("name");
    openapiFields.add("state");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateMapEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateMapEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateMapEntry is not found in the empty JSON string", CertificateMapEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateMapEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateMapEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("certificates") != null && !jsonObj.get("certificates").isJsonNull() && !jsonObj.get("certificates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificates` to be an array in the JSON string but got `%s`", jsonObj.get("certificates").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("matcher") != null && !jsonObj.get("matcher").isJsonNull()) && !jsonObj.get("matcher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matcher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matcher").toString()));
      }
      // validate the optional field `matcher`
      if (jsonObj.get("matcher") != null && !jsonObj.get("matcher").isJsonNull()) {
        MatcherEnum.validateJsonElement(jsonObj.get("matcher"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateMapEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateMapEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateMapEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateMapEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateMapEntry>() {
           @Override
           public void write(JsonWriter out, CertificateMapEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateMapEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateMapEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateMapEntry
   * @throws IOException if the JSON string is invalid with respect to CertificateMapEntry
   */
  public static CertificateMapEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateMapEntry.class);
  }

  /**
   * Convert an instance of CertificateMapEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

