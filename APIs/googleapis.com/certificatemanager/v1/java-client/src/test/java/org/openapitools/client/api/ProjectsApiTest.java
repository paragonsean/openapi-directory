/*
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Certificate;
import org.openapitools.client.model.CertificateIssuanceConfig;
import org.openapitools.client.model.CertificateMap;
import org.openapitools.client.model.CertificateMapEntry;
import org.openapitools.client.model.DnsAuthorization;
import org.openapitools.client.model.ListCertificateIssuanceConfigsResponse;
import org.openapitools.client.model.ListCertificateMapEntriesResponse;
import org.openapitools.client.model.ListCertificateMapsResponse;
import org.openapitools.client.model.ListCertificatesResponse;
import org.openapitools.client.model.ListDnsAuthorizationsResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.ListTrustConfigsResponse;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.TrustConfig;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates a new CertificateIssuanceConfig in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatemanagerProjectsLocationsCertificateIssuanceConfigsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String certificateIssuanceConfigId = null;
        CertificateIssuanceConfig certificateIssuanceConfig = null;
        Operation response = api.certificatemanagerProjectsLocationsCertificateIssuanceConfigsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, certificateIssuanceConfigId, certificateIssuanceConfig);
        // TODO: test validations
    }

    /**
     * Lists CertificateIssuanceConfigs in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatemanagerProjectsLocationsCertificateIssuanceConfigsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCertificateIssuanceConfigsResponse response = api.certificatemanagerProjectsLocationsCertificateIssuanceConfigsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new CertificateMapEntry in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String certificateMapEntryId = null;
        CertificateMapEntry certificateMapEntry = null;
        Operation response = api.certificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, certificateMapEntryId, certificateMapEntry);
        // TODO: test validations
    }

    /**
     * Lists CertificateMapEntries in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCertificateMapEntriesResponse response = api.certificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new CertificateMap in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatemanagerProjectsLocationsCertificateMapsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String certificateMapId = null;
        CertificateMap certificateMap = null;
        Operation response = api.certificatemanagerProjectsLocationsCertificateMapsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, certificateMapId, certificateMap);
        // TODO: test validations
    }

    /**
     * Lists CertificateMaps in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatemanagerProjectsLocationsCertificateMapsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCertificateMapsResponse response = api.certificatemanagerProjectsLocationsCertificateMapsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new Certificate in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatemanagerProjectsLocationsCertificatesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String certificateId = null;
        Certificate certificate = null;
        Operation response = api.certificatemanagerProjectsLocationsCertificatesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, certificateId, certificate);
        // TODO: test validations
    }

    /**
     * Lists Certificates in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatemanagerProjectsLocationsCertificatesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCertificatesResponse response = api.certificatemanagerProjectsLocationsCertificatesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new DnsAuthorization in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatemanagerProjectsLocationsDnsAuthorizationsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String dnsAuthorizationId = null;
        DnsAuthorization dnsAuthorization = null;
        Operation response = api.certificatemanagerProjectsLocationsDnsAuthorizationsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dnsAuthorizationId, dnsAuthorization);
        // TODO: test validations
    }

    /**
     * Lists DnsAuthorizations in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatemanagerProjectsLocationsDnsAuthorizationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListDnsAuthorizationsResponse response = api.certificatemanagerProjectsLocationsDnsAuthorizationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatemanagerProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.certificatemanagerProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatemanagerProjectsLocationsOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.certificatemanagerProjectsLocationsOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatemanagerProjectsLocationsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOperationsResponse response = api.certificatemanagerProjectsLocationsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new TrustConfig in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatemanagerProjectsLocationsTrustConfigsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String trustConfigId = null;
        TrustConfig trustConfig = null;
        Operation response = api.certificatemanagerProjectsLocationsTrustConfigsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, trustConfigId, trustConfig);
        // TODO: test validations
    }

    /**
     * Deletes a single TrustConfig.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatemanagerProjectsLocationsTrustConfigsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String etag = null;
        Operation response = api.certificatemanagerProjectsLocationsTrustConfigsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, etag);
        // TODO: test validations
    }

    /**
     * Gets details of a single TrustConfig.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatemanagerProjectsLocationsTrustConfigsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TrustConfig response = api.certificatemanagerProjectsLocationsTrustConfigsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists TrustConfigs in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatemanagerProjectsLocationsTrustConfigsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListTrustConfigsResponse response = api.certificatemanagerProjectsLocationsTrustConfigsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a TrustConfig.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatemanagerProjectsLocationsTrustConfigsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        TrustConfig trustConfig = null;
        Operation response = api.certificatemanagerProjectsLocationsTrustConfigsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, trustConfig);
        // TODO: test validations
    }

}
