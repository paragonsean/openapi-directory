/**
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGclbTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGclbTarget::OAIGclbTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGclbTarget::OAIGclbTarget() {
    this->initializeModel();
}

OAIGclbTarget::~OAIGclbTarget() {}

void OAIGclbTarget::initializeModel() {

    m_ip_configs_isSet = false;
    m_ip_configs_isValid = false;

    m_target_https_proxy_isSet = false;
    m_target_https_proxy_isValid = false;

    m_target_ssl_proxy_isSet = false;
    m_target_ssl_proxy_isValid = false;
}

void OAIGclbTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGclbTarget::fromJsonObject(QJsonObject json) {

    m_ip_configs_isValid = ::OpenAPI::fromJsonValue(m_ip_configs, json[QString("ipConfigs")]);
    m_ip_configs_isSet = !json[QString("ipConfigs")].isNull() && m_ip_configs_isValid;

    m_target_https_proxy_isValid = ::OpenAPI::fromJsonValue(m_target_https_proxy, json[QString("targetHttpsProxy")]);
    m_target_https_proxy_isSet = !json[QString("targetHttpsProxy")].isNull() && m_target_https_proxy_isValid;

    m_target_ssl_proxy_isValid = ::OpenAPI::fromJsonValue(m_target_ssl_proxy, json[QString("targetSslProxy")]);
    m_target_ssl_proxy_isSet = !json[QString("targetSslProxy")].isNull() && m_target_ssl_proxy_isValid;
}

QString OAIGclbTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGclbTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_configs.size() > 0) {
        obj.insert(QString("ipConfigs"), ::OpenAPI::toJsonValue(m_ip_configs));
    }
    if (m_target_https_proxy_isSet) {
        obj.insert(QString("targetHttpsProxy"), ::OpenAPI::toJsonValue(m_target_https_proxy));
    }
    if (m_target_ssl_proxy_isSet) {
        obj.insert(QString("targetSslProxy"), ::OpenAPI::toJsonValue(m_target_ssl_proxy));
    }
    return obj;
}

QList<OAIIpConfig> OAIGclbTarget::getIpConfigs() const {
    return m_ip_configs;
}
void OAIGclbTarget::setIpConfigs(const QList<OAIIpConfig> &ip_configs) {
    m_ip_configs = ip_configs;
    m_ip_configs_isSet = true;
}

bool OAIGclbTarget::is_ip_configs_Set() const{
    return m_ip_configs_isSet;
}

bool OAIGclbTarget::is_ip_configs_Valid() const{
    return m_ip_configs_isValid;
}

QString OAIGclbTarget::getTargetHttpsProxy() const {
    return m_target_https_proxy;
}
void OAIGclbTarget::setTargetHttpsProxy(const QString &target_https_proxy) {
    m_target_https_proxy = target_https_proxy;
    m_target_https_proxy_isSet = true;
}

bool OAIGclbTarget::is_target_https_proxy_Set() const{
    return m_target_https_proxy_isSet;
}

bool OAIGclbTarget::is_target_https_proxy_Valid() const{
    return m_target_https_proxy_isValid;
}

QString OAIGclbTarget::getTargetSslProxy() const {
    return m_target_ssl_proxy;
}
void OAIGclbTarget::setTargetSslProxy(const QString &target_ssl_proxy) {
    m_target_ssl_proxy = target_ssl_proxy;
    m_target_ssl_proxy_isSet = true;
}

bool OAIGclbTarget::is_target_ssl_proxy_Set() const{
    return m_target_ssl_proxy_isSet;
}

bool OAIGclbTarget::is_target_ssl_proxy_Valid() const{
    return m_target_ssl_proxy_isValid;
}

bool OAIGclbTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_https_proxy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_ssl_proxy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGclbTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
