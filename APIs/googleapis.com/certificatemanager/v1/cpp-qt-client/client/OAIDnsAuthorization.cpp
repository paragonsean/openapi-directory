/**
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnsAuthorization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnsAuthorization::OAIDnsAuthorization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnsAuthorization::OAIDnsAuthorization() {
    this->initializeModel();
}

OAIDnsAuthorization::~OAIDnsAuthorization() {}

void OAIDnsAuthorization::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_dns_resource_record_isSet = false;
    m_dns_resource_record_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIDnsAuthorization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnsAuthorization::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_dns_resource_record_isValid = ::OpenAPI::fromJsonValue(m_dns_resource_record, json[QString("dnsResourceRecord")]);
    m_dns_resource_record_isSet = !json[QString("dnsResourceRecord")].isNull() && m_dns_resource_record_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIDnsAuthorization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnsAuthorization::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dns_resource_record.isSet()) {
        obj.insert(QString("dnsResourceRecord"), ::OpenAPI::toJsonValue(m_dns_resource_record));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIDnsAuthorization::getCreateTime() const {
    return m_create_time;
}
void OAIDnsAuthorization::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIDnsAuthorization::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIDnsAuthorization::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIDnsAuthorization::getDescription() const {
    return m_description;
}
void OAIDnsAuthorization::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDnsAuthorization::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDnsAuthorization::is_description_Valid() const{
    return m_description_isValid;
}

OAIDnsResourceRecord OAIDnsAuthorization::getDnsResourceRecord() const {
    return m_dns_resource_record;
}
void OAIDnsAuthorization::setDnsResourceRecord(const OAIDnsResourceRecord &dns_resource_record) {
    m_dns_resource_record = dns_resource_record;
    m_dns_resource_record_isSet = true;
}

bool OAIDnsAuthorization::is_dns_resource_record_Set() const{
    return m_dns_resource_record_isSet;
}

bool OAIDnsAuthorization::is_dns_resource_record_Valid() const{
    return m_dns_resource_record_isValid;
}

QString OAIDnsAuthorization::getDomain() const {
    return m_domain;
}
void OAIDnsAuthorization::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIDnsAuthorization::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIDnsAuthorization::is_domain_Valid() const{
    return m_domain_isValid;
}

QMap<QString, QString> OAIDnsAuthorization::getLabels() const {
    return m_labels;
}
void OAIDnsAuthorization::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIDnsAuthorization::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIDnsAuthorization::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIDnsAuthorization::getName() const {
    return m_name;
}
void OAIDnsAuthorization::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDnsAuthorization::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDnsAuthorization::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDnsAuthorization::getType() const {
    return m_type;
}
void OAIDnsAuthorization::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDnsAuthorization::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDnsAuthorization::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDnsAuthorization::getUpdateTime() const {
    return m_update_time;
}
void OAIDnsAuthorization::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIDnsAuthorization::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIDnsAuthorization::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIDnsAuthorization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_resource_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnsAuthorization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
