/**
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationAttemptInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationAttemptInfo::OAIAuthorizationAttemptInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationAttemptInfo::OAIAuthorizationAttemptInfo() {
    this->initializeModel();
}

OAIAuthorizationAttemptInfo::~OAIAuthorizationAttemptInfo() {}

void OAIAuthorizationAttemptInfo::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIAuthorizationAttemptInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationAttemptInfo::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIAuthorizationAttemptInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationAttemptInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIAuthorizationAttemptInfo::getDetails() const {
    return m_details;
}
void OAIAuthorizationAttemptInfo::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIAuthorizationAttemptInfo::is_details_Set() const{
    return m_details_isSet;
}

bool OAIAuthorizationAttemptInfo::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIAuthorizationAttemptInfo::getDomain() const {
    return m_domain;
}
void OAIAuthorizationAttemptInfo::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIAuthorizationAttemptInfo::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIAuthorizationAttemptInfo::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIAuthorizationAttemptInfo::getFailureReason() const {
    return m_failure_reason;
}
void OAIAuthorizationAttemptInfo::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIAuthorizationAttemptInfo::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIAuthorizationAttemptInfo::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIAuthorizationAttemptInfo::getState() const {
    return m_state;
}
void OAIAuthorizationAttemptInfo::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAuthorizationAttemptInfo::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAuthorizationAttemptInfo::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIAuthorizationAttemptInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationAttemptInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
