/**
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIManagedCertificate.h
 *
 * Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it&#39;s authorized to do so.
 */

#ifndef OAIManagedCertificate_H
#define OAIManagedCertificate_H

#include <QJsonObject>

#include "OAIAuthorizationAttemptInfo.h"
#include "OAIProvisioningIssue.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAuthorizationAttemptInfo;
class OAIProvisioningIssue;

class OAIManagedCertificate : public OAIObject {
public:
    OAIManagedCertificate();
    OAIManagedCertificate(QString json);
    ~OAIManagedCertificate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAuthorizationAttemptInfo> getAuthorizationAttemptInfo() const;
    void setAuthorizationAttemptInfo(const QList<OAIAuthorizationAttemptInfo> &authorization_attempt_info);
    bool is_authorization_attempt_info_Set() const;
    bool is_authorization_attempt_info_Valid() const;

    QList<QString> getDnsAuthorizations() const;
    void setDnsAuthorizations(const QList<QString> &dns_authorizations);
    bool is_dns_authorizations_Set() const;
    bool is_dns_authorizations_Valid() const;

    QList<QString> getDomains() const;
    void setDomains(const QList<QString> &domains);
    bool is_domains_Set() const;
    bool is_domains_Valid() const;

    QString getIssuanceConfig() const;
    void setIssuanceConfig(const QString &issuance_config);
    bool is_issuance_config_Set() const;
    bool is_issuance_config_Valid() const;

    OAIProvisioningIssue getProvisioningIssue() const;
    void setProvisioningIssue(const OAIProvisioningIssue &provisioning_issue);
    bool is_provisioning_issue_Set() const;
    bool is_provisioning_issue_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAuthorizationAttemptInfo> m_authorization_attempt_info;
    bool m_authorization_attempt_info_isSet;
    bool m_authorization_attempt_info_isValid;

    QList<QString> m_dns_authorizations;
    bool m_dns_authorizations_isSet;
    bool m_dns_authorizations_isValid;

    QList<QString> m_domains;
    bool m_domains_isSet;
    bool m_domains_isValid;

    QString m_issuance_config;
    bool m_issuance_config_isSet;
    bool m_issuance_config_isValid;

    OAIProvisioningIssue m_provisioning_issue;
    bool m_provisioning_issue_isSet;
    bool m_provisioning_issue_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIManagedCertificate)

#endif // OAIManagedCertificate_H
