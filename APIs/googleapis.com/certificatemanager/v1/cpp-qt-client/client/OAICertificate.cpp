/**
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificate::OAICertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificate::OAICertificate() {
    this->initializeModel();
}

OAICertificate::~OAICertificate() {}

void OAICertificate::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_managed_isSet = false;
    m_managed_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pem_certificate_isSet = false;
    m_pem_certificate_isValid = false;

    m_san_dnsnames_isSet = false;
    m_san_dnsnames_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_self_managed_isSet = false;
    m_self_managed_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAICertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificate::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_managed_isValid = ::OpenAPI::fromJsonValue(m_managed, json[QString("managed")]);
    m_managed_isSet = !json[QString("managed")].isNull() && m_managed_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pem_certificate_isValid = ::OpenAPI::fromJsonValue(m_pem_certificate, json[QString("pemCertificate")]);
    m_pem_certificate_isSet = !json[QString("pemCertificate")].isNull() && m_pem_certificate_isValid;

    m_san_dnsnames_isValid = ::OpenAPI::fromJsonValue(m_san_dnsnames, json[QString("sanDnsnames")]);
    m_san_dnsnames_isSet = !json[QString("sanDnsnames")].isNull() && m_san_dnsnames_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_self_managed_isValid = ::OpenAPI::fromJsonValue(m_self_managed, json[QString("selfManaged")]);
    m_self_managed_isSet = !json[QString("selfManaged")].isNull() && m_self_managed_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAICertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_managed.isSet()) {
        obj.insert(QString("managed"), ::OpenAPI::toJsonValue(m_managed));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pem_certificate_isSet) {
        obj.insert(QString("pemCertificate"), ::OpenAPI::toJsonValue(m_pem_certificate));
    }
    if (m_san_dnsnames.size() > 0) {
        obj.insert(QString("sanDnsnames"), ::OpenAPI::toJsonValue(m_san_dnsnames));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_self_managed.isSet()) {
        obj.insert(QString("selfManaged"), ::OpenAPI::toJsonValue(m_self_managed));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAICertificate::getCreateTime() const {
    return m_create_time;
}
void OAICertificate::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICertificate::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICertificate::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAICertificate::getDescription() const {
    return m_description;
}
void OAICertificate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICertificate::is_description_Set() const{
    return m_description_isSet;
}

bool OAICertificate::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICertificate::getExpireTime() const {
    return m_expire_time;
}
void OAICertificate::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAICertificate::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAICertificate::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QMap<QString, QString> OAICertificate::getLabels() const {
    return m_labels;
}
void OAICertificate::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICertificate::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICertificate::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIManagedCertificate OAICertificate::getManaged() const {
    return m_managed;
}
void OAICertificate::setManaged(const OAIManagedCertificate &managed) {
    m_managed = managed;
    m_managed_isSet = true;
}

bool OAICertificate::is_managed_Set() const{
    return m_managed_isSet;
}

bool OAICertificate::is_managed_Valid() const{
    return m_managed_isValid;
}

QString OAICertificate::getName() const {
    return m_name;
}
void OAICertificate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICertificate::is_name_Set() const{
    return m_name_isSet;
}

bool OAICertificate::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICertificate::getPemCertificate() const {
    return m_pem_certificate;
}
void OAICertificate::setPemCertificate(const QString &pem_certificate) {
    m_pem_certificate = pem_certificate;
    m_pem_certificate_isSet = true;
}

bool OAICertificate::is_pem_certificate_Set() const{
    return m_pem_certificate_isSet;
}

bool OAICertificate::is_pem_certificate_Valid() const{
    return m_pem_certificate_isValid;
}

QList<QString> OAICertificate::getSanDnsnames() const {
    return m_san_dnsnames;
}
void OAICertificate::setSanDnsnames(const QList<QString> &san_dnsnames) {
    m_san_dnsnames = san_dnsnames;
    m_san_dnsnames_isSet = true;
}

bool OAICertificate::is_san_dnsnames_Set() const{
    return m_san_dnsnames_isSet;
}

bool OAICertificate::is_san_dnsnames_Valid() const{
    return m_san_dnsnames_isValid;
}

QString OAICertificate::getScope() const {
    return m_scope;
}
void OAICertificate::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAICertificate::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAICertificate::is_scope_Valid() const{
    return m_scope_isValid;
}

OAISelfManagedCertificate OAICertificate::getSelfManaged() const {
    return m_self_managed;
}
void OAICertificate::setSelfManaged(const OAISelfManagedCertificate &self_managed) {
    m_self_managed = self_managed;
    m_self_managed_isSet = true;
}

bool OAICertificate::is_self_managed_Set() const{
    return m_self_managed_isSet;
}

bool OAICertificate::is_self_managed_Valid() const{
    return m_self_managed_isValid;
}

QString OAICertificate::getUpdateTime() const {
    return m_update_time;
}
void OAICertificate::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAICertificate::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAICertificate::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAICertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pem_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_san_dnsnames.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_managed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
