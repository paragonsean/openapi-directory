/**
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateIssuanceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateIssuanceConfig::OAICertificateIssuanceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateIssuanceConfig::OAICertificateIssuanceConfig() {
    this->initializeModel();
}

OAICertificateIssuanceConfig::~OAICertificateIssuanceConfig() {}

void OAICertificateIssuanceConfig::initializeModel() {

    m_certificate_authority_config_isSet = false;
    m_certificate_authority_config_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_key_algorithm_isSet = false;
    m_key_algorithm_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_lifetime_isSet = false;
    m_lifetime_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rotation_window_percentage_isSet = false;
    m_rotation_window_percentage_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAICertificateIssuanceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateIssuanceConfig::fromJsonObject(QJsonObject json) {

    m_certificate_authority_config_isValid = ::OpenAPI::fromJsonValue(m_certificate_authority_config, json[QString("certificateAuthorityConfig")]);
    m_certificate_authority_config_isSet = !json[QString("certificateAuthorityConfig")].isNull() && m_certificate_authority_config_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_key_algorithm_isValid = ::OpenAPI::fromJsonValue(m_key_algorithm, json[QString("keyAlgorithm")]);
    m_key_algorithm_isSet = !json[QString("keyAlgorithm")].isNull() && m_key_algorithm_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_lifetime_isValid = ::OpenAPI::fromJsonValue(m_lifetime, json[QString("lifetime")]);
    m_lifetime_isSet = !json[QString("lifetime")].isNull() && m_lifetime_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rotation_window_percentage_isValid = ::OpenAPI::fromJsonValue(m_rotation_window_percentage, json[QString("rotationWindowPercentage")]);
    m_rotation_window_percentage_isSet = !json[QString("rotationWindowPercentage")].isNull() && m_rotation_window_percentage_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAICertificateIssuanceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateIssuanceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_authority_config.isSet()) {
        obj.insert(QString("certificateAuthorityConfig"), ::OpenAPI::toJsonValue(m_certificate_authority_config));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_key_algorithm_isSet) {
        obj.insert(QString("keyAlgorithm"), ::OpenAPI::toJsonValue(m_key_algorithm));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_lifetime_isSet) {
        obj.insert(QString("lifetime"), ::OpenAPI::toJsonValue(m_lifetime));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rotation_window_percentage_isSet) {
        obj.insert(QString("rotationWindowPercentage"), ::OpenAPI::toJsonValue(m_rotation_window_percentage));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAICertificateAuthorityConfig OAICertificateIssuanceConfig::getCertificateAuthorityConfig() const {
    return m_certificate_authority_config;
}
void OAICertificateIssuanceConfig::setCertificateAuthorityConfig(const OAICertificateAuthorityConfig &certificate_authority_config) {
    m_certificate_authority_config = certificate_authority_config;
    m_certificate_authority_config_isSet = true;
}

bool OAICertificateIssuanceConfig::is_certificate_authority_config_Set() const{
    return m_certificate_authority_config_isSet;
}

bool OAICertificateIssuanceConfig::is_certificate_authority_config_Valid() const{
    return m_certificate_authority_config_isValid;
}

QString OAICertificateIssuanceConfig::getCreateTime() const {
    return m_create_time;
}
void OAICertificateIssuanceConfig::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICertificateIssuanceConfig::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICertificateIssuanceConfig::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAICertificateIssuanceConfig::getDescription() const {
    return m_description;
}
void OAICertificateIssuanceConfig::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICertificateIssuanceConfig::is_description_Set() const{
    return m_description_isSet;
}

bool OAICertificateIssuanceConfig::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICertificateIssuanceConfig::getKeyAlgorithm() const {
    return m_key_algorithm;
}
void OAICertificateIssuanceConfig::setKeyAlgorithm(const QString &key_algorithm) {
    m_key_algorithm = key_algorithm;
    m_key_algorithm_isSet = true;
}

bool OAICertificateIssuanceConfig::is_key_algorithm_Set() const{
    return m_key_algorithm_isSet;
}

bool OAICertificateIssuanceConfig::is_key_algorithm_Valid() const{
    return m_key_algorithm_isValid;
}

QMap<QString, QString> OAICertificateIssuanceConfig::getLabels() const {
    return m_labels;
}
void OAICertificateIssuanceConfig::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICertificateIssuanceConfig::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICertificateIssuanceConfig::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAICertificateIssuanceConfig::getLifetime() const {
    return m_lifetime;
}
void OAICertificateIssuanceConfig::setLifetime(const QString &lifetime) {
    m_lifetime = lifetime;
    m_lifetime_isSet = true;
}

bool OAICertificateIssuanceConfig::is_lifetime_Set() const{
    return m_lifetime_isSet;
}

bool OAICertificateIssuanceConfig::is_lifetime_Valid() const{
    return m_lifetime_isValid;
}

QString OAICertificateIssuanceConfig::getName() const {
    return m_name;
}
void OAICertificateIssuanceConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICertificateIssuanceConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAICertificateIssuanceConfig::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICertificateIssuanceConfig::getRotationWindowPercentage() const {
    return m_rotation_window_percentage;
}
void OAICertificateIssuanceConfig::setRotationWindowPercentage(const qint32 &rotation_window_percentage) {
    m_rotation_window_percentage = rotation_window_percentage;
    m_rotation_window_percentage_isSet = true;
}

bool OAICertificateIssuanceConfig::is_rotation_window_percentage_Set() const{
    return m_rotation_window_percentage_isSet;
}

bool OAICertificateIssuanceConfig::is_rotation_window_percentage_Valid() const{
    return m_rotation_window_percentage_isValid;
}

QString OAICertificateIssuanceConfig::getUpdateTime() const {
    return m_update_time;
}
void OAICertificateIssuanceConfig::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAICertificateIssuanceConfig::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAICertificateIssuanceConfig::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAICertificateIssuanceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_authority_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotation_window_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateIssuanceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
