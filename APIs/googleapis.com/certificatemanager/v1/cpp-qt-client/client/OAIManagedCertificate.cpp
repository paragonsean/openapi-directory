/**
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedCertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedCertificate::OAIManagedCertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedCertificate::OAIManagedCertificate() {
    this->initializeModel();
}

OAIManagedCertificate::~OAIManagedCertificate() {}

void OAIManagedCertificate::initializeModel() {

    m_authorization_attempt_info_isSet = false;
    m_authorization_attempt_info_isValid = false;

    m_dns_authorizations_isSet = false;
    m_dns_authorizations_isValid = false;

    m_domains_isSet = false;
    m_domains_isValid = false;

    m_issuance_config_isSet = false;
    m_issuance_config_isValid = false;

    m_provisioning_issue_isSet = false;
    m_provisioning_issue_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIManagedCertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedCertificate::fromJsonObject(QJsonObject json) {

    m_authorization_attempt_info_isValid = ::OpenAPI::fromJsonValue(m_authorization_attempt_info, json[QString("authorizationAttemptInfo")]);
    m_authorization_attempt_info_isSet = !json[QString("authorizationAttemptInfo")].isNull() && m_authorization_attempt_info_isValid;

    m_dns_authorizations_isValid = ::OpenAPI::fromJsonValue(m_dns_authorizations, json[QString("dnsAuthorizations")]);
    m_dns_authorizations_isSet = !json[QString("dnsAuthorizations")].isNull() && m_dns_authorizations_isValid;

    m_domains_isValid = ::OpenAPI::fromJsonValue(m_domains, json[QString("domains")]);
    m_domains_isSet = !json[QString("domains")].isNull() && m_domains_isValid;

    m_issuance_config_isValid = ::OpenAPI::fromJsonValue(m_issuance_config, json[QString("issuanceConfig")]);
    m_issuance_config_isSet = !json[QString("issuanceConfig")].isNull() && m_issuance_config_isValid;

    m_provisioning_issue_isValid = ::OpenAPI::fromJsonValue(m_provisioning_issue, json[QString("provisioningIssue")]);
    m_provisioning_issue_isSet = !json[QString("provisioningIssue")].isNull() && m_provisioning_issue_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIManagedCertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedCertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_attempt_info.size() > 0) {
        obj.insert(QString("authorizationAttemptInfo"), ::OpenAPI::toJsonValue(m_authorization_attempt_info));
    }
    if (m_dns_authorizations.size() > 0) {
        obj.insert(QString("dnsAuthorizations"), ::OpenAPI::toJsonValue(m_dns_authorizations));
    }
    if (m_domains.size() > 0) {
        obj.insert(QString("domains"), ::OpenAPI::toJsonValue(m_domains));
    }
    if (m_issuance_config_isSet) {
        obj.insert(QString("issuanceConfig"), ::OpenAPI::toJsonValue(m_issuance_config));
    }
    if (m_provisioning_issue.isSet()) {
        obj.insert(QString("provisioningIssue"), ::OpenAPI::toJsonValue(m_provisioning_issue));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QList<OAIAuthorizationAttemptInfo> OAIManagedCertificate::getAuthorizationAttemptInfo() const {
    return m_authorization_attempt_info;
}
void OAIManagedCertificate::setAuthorizationAttemptInfo(const QList<OAIAuthorizationAttemptInfo> &authorization_attempt_info) {
    m_authorization_attempt_info = authorization_attempt_info;
    m_authorization_attempt_info_isSet = true;
}

bool OAIManagedCertificate::is_authorization_attempt_info_Set() const{
    return m_authorization_attempt_info_isSet;
}

bool OAIManagedCertificate::is_authorization_attempt_info_Valid() const{
    return m_authorization_attempt_info_isValid;
}

QList<QString> OAIManagedCertificate::getDnsAuthorizations() const {
    return m_dns_authorizations;
}
void OAIManagedCertificate::setDnsAuthorizations(const QList<QString> &dns_authorizations) {
    m_dns_authorizations = dns_authorizations;
    m_dns_authorizations_isSet = true;
}

bool OAIManagedCertificate::is_dns_authorizations_Set() const{
    return m_dns_authorizations_isSet;
}

bool OAIManagedCertificate::is_dns_authorizations_Valid() const{
    return m_dns_authorizations_isValid;
}

QList<QString> OAIManagedCertificate::getDomains() const {
    return m_domains;
}
void OAIManagedCertificate::setDomains(const QList<QString> &domains) {
    m_domains = domains;
    m_domains_isSet = true;
}

bool OAIManagedCertificate::is_domains_Set() const{
    return m_domains_isSet;
}

bool OAIManagedCertificate::is_domains_Valid() const{
    return m_domains_isValid;
}

QString OAIManagedCertificate::getIssuanceConfig() const {
    return m_issuance_config;
}
void OAIManagedCertificate::setIssuanceConfig(const QString &issuance_config) {
    m_issuance_config = issuance_config;
    m_issuance_config_isSet = true;
}

bool OAIManagedCertificate::is_issuance_config_Set() const{
    return m_issuance_config_isSet;
}

bool OAIManagedCertificate::is_issuance_config_Valid() const{
    return m_issuance_config_isValid;
}

OAIProvisioningIssue OAIManagedCertificate::getProvisioningIssue() const {
    return m_provisioning_issue;
}
void OAIManagedCertificate::setProvisioningIssue(const OAIProvisioningIssue &provisioning_issue) {
    m_provisioning_issue = provisioning_issue;
    m_provisioning_issue_isSet = true;
}

bool OAIManagedCertificate::is_provisioning_issue_Set() const{
    return m_provisioning_issue_isSet;
}

bool OAIManagedCertificate::is_provisioning_issue_Valid() const{
    return m_provisioning_issue_isValid;
}

QString OAIManagedCertificate::getState() const {
    return m_state;
}
void OAIManagedCertificate::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIManagedCertificate::is_state_Set() const{
    return m_state_isSet;
}

bool OAIManagedCertificate::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIManagedCertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_attempt_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_authorizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuance_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_issue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedCertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
