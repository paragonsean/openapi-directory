/**
 * Certificate Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateMapEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateMapEntry::OAICertificateMapEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateMapEntry::OAICertificateMapEntry() {
    this->initializeModel();
}

OAICertificateMapEntry::~OAICertificateMapEntry() {}

void OAICertificateMapEntry::initializeModel() {

    m_certificates_isSet = false;
    m_certificates_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_matcher_isSet = false;
    m_matcher_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAICertificateMapEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateMapEntry::fromJsonObject(QJsonObject json) {

    m_certificates_isValid = ::OpenAPI::fromJsonValue(m_certificates, json[QString("certificates")]);
    m_certificates_isSet = !json[QString("certificates")].isNull() && m_certificates_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_matcher_isValid = ::OpenAPI::fromJsonValue(m_matcher, json[QString("matcher")]);
    m_matcher_isSet = !json[QString("matcher")].isNull() && m_matcher_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAICertificateMapEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateMapEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_certificates.size() > 0) {
        obj.insert(QString("certificates"), ::OpenAPI::toJsonValue(m_certificates));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_matcher_isSet) {
        obj.insert(QString("matcher"), ::OpenAPI::toJsonValue(m_matcher));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QList<QString> OAICertificateMapEntry::getCertificates() const {
    return m_certificates;
}
void OAICertificateMapEntry::setCertificates(const QList<QString> &certificates) {
    m_certificates = certificates;
    m_certificates_isSet = true;
}

bool OAICertificateMapEntry::is_certificates_Set() const{
    return m_certificates_isSet;
}

bool OAICertificateMapEntry::is_certificates_Valid() const{
    return m_certificates_isValid;
}

QString OAICertificateMapEntry::getCreateTime() const {
    return m_create_time;
}
void OAICertificateMapEntry::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICertificateMapEntry::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICertificateMapEntry::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAICertificateMapEntry::getDescription() const {
    return m_description;
}
void OAICertificateMapEntry::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICertificateMapEntry::is_description_Set() const{
    return m_description_isSet;
}

bool OAICertificateMapEntry::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICertificateMapEntry::getHostname() const {
    return m_hostname;
}
void OAICertificateMapEntry::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAICertificateMapEntry::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAICertificateMapEntry::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QMap<QString, QString> OAICertificateMapEntry::getLabels() const {
    return m_labels;
}
void OAICertificateMapEntry::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICertificateMapEntry::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICertificateMapEntry::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAICertificateMapEntry::getMatcher() const {
    return m_matcher;
}
void OAICertificateMapEntry::setMatcher(const QString &matcher) {
    m_matcher = matcher;
    m_matcher_isSet = true;
}

bool OAICertificateMapEntry::is_matcher_Set() const{
    return m_matcher_isSet;
}

bool OAICertificateMapEntry::is_matcher_Valid() const{
    return m_matcher_isValid;
}

QString OAICertificateMapEntry::getName() const {
    return m_name;
}
void OAICertificateMapEntry::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICertificateMapEntry::is_name_Set() const{
    return m_name_isSet;
}

bool OAICertificateMapEntry::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICertificateMapEntry::getState() const {
    return m_state;
}
void OAICertificateMapEntry::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICertificateMapEntry::is_state_Set() const{
    return m_state_isSet;
}

bool OAICertificateMapEntry::is_state_Valid() const{
    return m_state_isValid;
}

QString OAICertificateMapEntry::getUpdateTime() const {
    return m_update_time;
}
void OAICertificateMapEntry::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAICertificateMapEntry::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAICertificateMapEntry::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAICertificateMapEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_matcher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateMapEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
