/**
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig::OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig::OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig() {
    this->initializeModel();
}

OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig::~OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig() {}

void OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig::initializeModel() {

    m_annotation_spec_set_configs_isSet = false;
    m_annotation_spec_set_configs_isValid = false;

    m_apply_shot_detection_isSet = false;
    m_apply_shot_detection_isValid = false;
}

void OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig::fromJsonObject(QJsonObject json) {

    m_annotation_spec_set_configs_isValid = ::OpenAPI::fromJsonValue(m_annotation_spec_set_configs, json[QString("annotationSpecSetConfigs")]);
    m_annotation_spec_set_configs_isSet = !json[QString("annotationSpecSetConfigs")].isNull() && m_annotation_spec_set_configs_isValid;

    m_apply_shot_detection_isValid = ::OpenAPI::fromJsonValue(m_apply_shot_detection, json[QString("applyShotDetection")]);
    m_apply_shot_detection_isSet = !json[QString("applyShotDetection")].isNull() && m_apply_shot_detection_isValid;
}

QString OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_spec_set_configs.size() > 0) {
        obj.insert(QString("annotationSpecSetConfigs"), ::OpenAPI::toJsonValue(m_annotation_spec_set_configs));
    }
    if (m_apply_shot_detection_isSet) {
        obj.insert(QString("applyShotDetection"), ::OpenAPI::toJsonValue(m_apply_shot_detection));
    }
    return obj;
}

QList<OAIGoogleCloudDatalabelingV1beta1AnnotationSpecSetConfig> OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig::getAnnotationSpecSetConfigs() const {
    return m_annotation_spec_set_configs;
}
void OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig::setAnnotationSpecSetConfigs(const QList<OAIGoogleCloudDatalabelingV1beta1AnnotationSpecSetConfig> &annotation_spec_set_configs) {
    m_annotation_spec_set_configs = annotation_spec_set_configs;
    m_annotation_spec_set_configs_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig::is_annotation_spec_set_configs_Set() const{
    return m_annotation_spec_set_configs_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig::is_annotation_spec_set_configs_Valid() const{
    return m_annotation_spec_set_configs_isValid;
}

bool OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig::isApplyShotDetection() const {
    return m_apply_shot_detection;
}
void OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig::setApplyShotDetection(const bool &apply_shot_detection) {
    m_apply_shot_detection = apply_shot_detection;
    m_apply_shot_detection_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig::is_apply_shot_detection_Set() const{
    return m_apply_shot_detection_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig::is_apply_shot_detection_Valid() const{
    return m_apply_shot_detection_isValid;
}

bool OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_spec_set_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_apply_shot_detection_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatalabelingV1beta1VideoClassificationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
