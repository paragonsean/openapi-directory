/**
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatalabelingV1beta1ImagePayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatalabelingV1beta1ImagePayload::OAIGoogleCloudDatalabelingV1beta1ImagePayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatalabelingV1beta1ImagePayload::OAIGoogleCloudDatalabelingV1beta1ImagePayload() {
    this->initializeModel();
}

OAIGoogleCloudDatalabelingV1beta1ImagePayload::~OAIGoogleCloudDatalabelingV1beta1ImagePayload() {}

void OAIGoogleCloudDatalabelingV1beta1ImagePayload::initializeModel() {

    m_image_thumbnail_isSet = false;
    m_image_thumbnail_isValid = false;

    m_image_uri_isSet = false;
    m_image_uri_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_signed_uri_isSet = false;
    m_signed_uri_isValid = false;
}

void OAIGoogleCloudDatalabelingV1beta1ImagePayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatalabelingV1beta1ImagePayload::fromJsonObject(QJsonObject json) {

    m_image_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_image_thumbnail, json[QString("imageThumbnail")]);
    m_image_thumbnail_isSet = !json[QString("imageThumbnail")].isNull() && m_image_thumbnail_isValid;

    m_image_uri_isValid = ::OpenAPI::fromJsonValue(m_image_uri, json[QString("imageUri")]);
    m_image_uri_isSet = !json[QString("imageUri")].isNull() && m_image_uri_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_signed_uri_isValid = ::OpenAPI::fromJsonValue(m_signed_uri, json[QString("signedUri")]);
    m_signed_uri_isSet = !json[QString("signedUri")].isNull() && m_signed_uri_isValid;
}

QString OAIGoogleCloudDatalabelingV1beta1ImagePayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatalabelingV1beta1ImagePayload::asJsonObject() const {
    QJsonObject obj;
    if (m_image_thumbnail_isSet) {
        obj.insert(QString("imageThumbnail"), ::OpenAPI::toJsonValue(m_image_thumbnail));
    }
    if (m_image_uri_isSet) {
        obj.insert(QString("imageUri"), ::OpenAPI::toJsonValue(m_image_uri));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_signed_uri_isSet) {
        obj.insert(QString("signedUri"), ::OpenAPI::toJsonValue(m_signed_uri));
    }
    return obj;
}

QByteArray OAIGoogleCloudDatalabelingV1beta1ImagePayload::getImageThumbnail() const {
    return m_image_thumbnail;
}
void OAIGoogleCloudDatalabelingV1beta1ImagePayload::setImageThumbnail(const QByteArray &image_thumbnail) {
    m_image_thumbnail = image_thumbnail;
    m_image_thumbnail_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1ImagePayload::is_image_thumbnail_Set() const{
    return m_image_thumbnail_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1ImagePayload::is_image_thumbnail_Valid() const{
    return m_image_thumbnail_isValid;
}

QString OAIGoogleCloudDatalabelingV1beta1ImagePayload::getImageUri() const {
    return m_image_uri;
}
void OAIGoogleCloudDatalabelingV1beta1ImagePayload::setImageUri(const QString &image_uri) {
    m_image_uri = image_uri;
    m_image_uri_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1ImagePayload::is_image_uri_Set() const{
    return m_image_uri_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1ImagePayload::is_image_uri_Valid() const{
    return m_image_uri_isValid;
}

QString OAIGoogleCloudDatalabelingV1beta1ImagePayload::getMimeType() const {
    return m_mime_type;
}
void OAIGoogleCloudDatalabelingV1beta1ImagePayload::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1ImagePayload::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1ImagePayload::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIGoogleCloudDatalabelingV1beta1ImagePayload::getSignedUri() const {
    return m_signed_uri;
}
void OAIGoogleCloudDatalabelingV1beta1ImagePayload::setSignedUri(const QString &signed_uri) {
    m_signed_uri = signed_uri;
    m_signed_uri_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1ImagePayload::is_signed_uri_Set() const{
    return m_signed_uri_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1ImagePayload::is_signed_uri_Valid() const{
    return m_signed_uri_isValid;
}

bool OAIGoogleCloudDatalabelingV1beta1ImagePayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_thumbnail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatalabelingV1beta1ImagePayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
