/**
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame() {
    this->initializeModel();
}

OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::~OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame() {}

void OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::initializeModel() {

    m_bounding_poly_isSet = false;
    m_bounding_poly_isValid = false;

    m_normalized_bounding_poly_isSet = false;
    m_normalized_bounding_poly_isValid = false;

    m_time_offset_isSet = false;
    m_time_offset_isValid = false;
}

void OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::fromJsonObject(QJsonObject json) {

    m_bounding_poly_isValid = ::OpenAPI::fromJsonValue(m_bounding_poly, json[QString("boundingPoly")]);
    m_bounding_poly_isSet = !json[QString("boundingPoly")].isNull() && m_bounding_poly_isValid;

    m_normalized_bounding_poly_isValid = ::OpenAPI::fromJsonValue(m_normalized_bounding_poly, json[QString("normalizedBoundingPoly")]);
    m_normalized_bounding_poly_isSet = !json[QString("normalizedBoundingPoly")].isNull() && m_normalized_bounding_poly_isValid;

    m_time_offset_isValid = ::OpenAPI::fromJsonValue(m_time_offset, json[QString("timeOffset")]);
    m_time_offset_isSet = !json[QString("timeOffset")].isNull() && m_time_offset_isValid;
}

QString OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::asJsonObject() const {
    QJsonObject obj;
    if (m_bounding_poly.isSet()) {
        obj.insert(QString("boundingPoly"), ::OpenAPI::toJsonValue(m_bounding_poly));
    }
    if (m_normalized_bounding_poly.isSet()) {
        obj.insert(QString("normalizedBoundingPoly"), ::OpenAPI::toJsonValue(m_normalized_bounding_poly));
    }
    if (m_time_offset_isSet) {
        obj.insert(QString("timeOffset"), ::OpenAPI::toJsonValue(m_time_offset));
    }
    return obj;
}

OAIGoogleCloudDatalabelingV1beta1BoundingPoly OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::getBoundingPoly() const {
    return m_bounding_poly;
}
void OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::setBoundingPoly(const OAIGoogleCloudDatalabelingV1beta1BoundingPoly &bounding_poly) {
    m_bounding_poly = bounding_poly;
    m_bounding_poly_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::is_bounding_poly_Set() const{
    return m_bounding_poly_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::is_bounding_poly_Valid() const{
    return m_bounding_poly_isValid;
}

OAIGoogleCloudDatalabelingV1beta1NormalizedBoundingPoly OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::getNormalizedBoundingPoly() const {
    return m_normalized_bounding_poly;
}
void OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::setNormalizedBoundingPoly(const OAIGoogleCloudDatalabelingV1beta1NormalizedBoundingPoly &normalized_bounding_poly) {
    m_normalized_bounding_poly = normalized_bounding_poly;
    m_normalized_bounding_poly_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::is_normalized_bounding_poly_Set() const{
    return m_normalized_bounding_poly_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::is_normalized_bounding_poly_Valid() const{
    return m_normalized_bounding_poly_isValid;
}

QString OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::getTimeOffset() const {
    return m_time_offset;
}
void OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::setTimeOffset(const QString &time_offset) {
    m_time_offset = time_offset;
    m_time_offset_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::is_time_offset_Set() const{
    return m_time_offset_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::is_time_offset_Valid() const{
    return m_time_offset_isValid;
}

bool OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounding_poly.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_normalized_bounding_poly.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatalabelingV1beta1ObjectTrackingFrame::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
