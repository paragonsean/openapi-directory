/**
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatalabelingV1beta1Attempt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatalabelingV1beta1Attempt::OAIGoogleCloudDatalabelingV1beta1Attempt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatalabelingV1beta1Attempt::OAIGoogleCloudDatalabelingV1beta1Attempt() {
    this->initializeModel();
}

OAIGoogleCloudDatalabelingV1beta1Attempt::~OAIGoogleCloudDatalabelingV1beta1Attempt() {}

void OAIGoogleCloudDatalabelingV1beta1Attempt::initializeModel() {

    m_attempt_time_isSet = false;
    m_attempt_time_isValid = false;

    m_partial_failures_isSet = false;
    m_partial_failures_isValid = false;
}

void OAIGoogleCloudDatalabelingV1beta1Attempt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatalabelingV1beta1Attempt::fromJsonObject(QJsonObject json) {

    m_attempt_time_isValid = ::OpenAPI::fromJsonValue(m_attempt_time, json[QString("attemptTime")]);
    m_attempt_time_isSet = !json[QString("attemptTime")].isNull() && m_attempt_time_isValid;

    m_partial_failures_isValid = ::OpenAPI::fromJsonValue(m_partial_failures, json[QString("partialFailures")]);
    m_partial_failures_isSet = !json[QString("partialFailures")].isNull() && m_partial_failures_isValid;
}

QString OAIGoogleCloudDatalabelingV1beta1Attempt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatalabelingV1beta1Attempt::asJsonObject() const {
    QJsonObject obj;
    if (m_attempt_time_isSet) {
        obj.insert(QString("attemptTime"), ::OpenAPI::toJsonValue(m_attempt_time));
    }
    if (m_partial_failures.size() > 0) {
        obj.insert(QString("partialFailures"), ::OpenAPI::toJsonValue(m_partial_failures));
    }
    return obj;
}

QString OAIGoogleCloudDatalabelingV1beta1Attempt::getAttemptTime() const {
    return m_attempt_time;
}
void OAIGoogleCloudDatalabelingV1beta1Attempt::setAttemptTime(const QString &attempt_time) {
    m_attempt_time = attempt_time;
    m_attempt_time_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1Attempt::is_attempt_time_Set() const{
    return m_attempt_time_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1Attempt::is_attempt_time_Valid() const{
    return m_attempt_time_isValid;
}

QList<OAIGoogleRpcStatus> OAIGoogleCloudDatalabelingV1beta1Attempt::getPartialFailures() const {
    return m_partial_failures;
}
void OAIGoogleCloudDatalabelingV1beta1Attempt::setPartialFailures(const QList<OAIGoogleRpcStatus> &partial_failures) {
    m_partial_failures = partial_failures;
    m_partial_failures_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1Attempt::is_partial_failures_Set() const{
    return m_partial_failures_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1Attempt::is_partial_failures_Valid() const{
    return m_partial_failures_isValid;
}

bool OAIGoogleCloudDatalabelingV1beta1Attempt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attempt_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_failures.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatalabelingV1beta1Attempt::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
