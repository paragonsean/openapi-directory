/**
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatalabelingV1beta1InputConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatalabelingV1beta1InputConfig::OAIGoogleCloudDatalabelingV1beta1InputConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatalabelingV1beta1InputConfig::OAIGoogleCloudDatalabelingV1beta1InputConfig() {
    this->initializeModel();
}

OAIGoogleCloudDatalabelingV1beta1InputConfig::~OAIGoogleCloudDatalabelingV1beta1InputConfig() {}

void OAIGoogleCloudDatalabelingV1beta1InputConfig::initializeModel() {

    m_annotation_type_isSet = false;
    m_annotation_type_isValid = false;

    m_bigquery_source_isSet = false;
    m_bigquery_source_isValid = false;

    m_classification_metadata_isSet = false;
    m_classification_metadata_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_gcs_source_isSet = false;
    m_gcs_source_isValid = false;

    m_text_metadata_isSet = false;
    m_text_metadata_isValid = false;
}

void OAIGoogleCloudDatalabelingV1beta1InputConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatalabelingV1beta1InputConfig::fromJsonObject(QJsonObject json) {

    m_annotation_type_isValid = ::OpenAPI::fromJsonValue(m_annotation_type, json[QString("annotationType")]);
    m_annotation_type_isSet = !json[QString("annotationType")].isNull() && m_annotation_type_isValid;

    m_bigquery_source_isValid = ::OpenAPI::fromJsonValue(m_bigquery_source, json[QString("bigquerySource")]);
    m_bigquery_source_isSet = !json[QString("bigquerySource")].isNull() && m_bigquery_source_isValid;

    m_classification_metadata_isValid = ::OpenAPI::fromJsonValue(m_classification_metadata, json[QString("classificationMetadata")]);
    m_classification_metadata_isSet = !json[QString("classificationMetadata")].isNull() && m_classification_metadata_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_gcs_source_isValid = ::OpenAPI::fromJsonValue(m_gcs_source, json[QString("gcsSource")]);
    m_gcs_source_isSet = !json[QString("gcsSource")].isNull() && m_gcs_source_isValid;

    m_text_metadata_isValid = ::OpenAPI::fromJsonValue(m_text_metadata, json[QString("textMetadata")]);
    m_text_metadata_isSet = !json[QString("textMetadata")].isNull() && m_text_metadata_isValid;
}

QString OAIGoogleCloudDatalabelingV1beta1InputConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatalabelingV1beta1InputConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_type_isSet) {
        obj.insert(QString("annotationType"), ::OpenAPI::toJsonValue(m_annotation_type));
    }
    if (m_bigquery_source.isSet()) {
        obj.insert(QString("bigquerySource"), ::OpenAPI::toJsonValue(m_bigquery_source));
    }
    if (m_classification_metadata.isSet()) {
        obj.insert(QString("classificationMetadata"), ::OpenAPI::toJsonValue(m_classification_metadata));
    }
    if (m_data_type_isSet) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_gcs_source.isSet()) {
        obj.insert(QString("gcsSource"), ::OpenAPI::toJsonValue(m_gcs_source));
    }
    if (m_text_metadata.isSet()) {
        obj.insert(QString("textMetadata"), ::OpenAPI::toJsonValue(m_text_metadata));
    }
    return obj;
}

QString OAIGoogleCloudDatalabelingV1beta1InputConfig::getAnnotationType() const {
    return m_annotation_type;
}
void OAIGoogleCloudDatalabelingV1beta1InputConfig::setAnnotationType(const QString &annotation_type) {
    m_annotation_type = annotation_type;
    m_annotation_type_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1InputConfig::is_annotation_type_Set() const{
    return m_annotation_type_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1InputConfig::is_annotation_type_Valid() const{
    return m_annotation_type_isValid;
}

OAIGoogleCloudDatalabelingV1beta1BigQuerySource OAIGoogleCloudDatalabelingV1beta1InputConfig::getBigquerySource() const {
    return m_bigquery_source;
}
void OAIGoogleCloudDatalabelingV1beta1InputConfig::setBigquerySource(const OAIGoogleCloudDatalabelingV1beta1BigQuerySource &bigquery_source) {
    m_bigquery_source = bigquery_source;
    m_bigquery_source_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1InputConfig::is_bigquery_source_Set() const{
    return m_bigquery_source_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1InputConfig::is_bigquery_source_Valid() const{
    return m_bigquery_source_isValid;
}

OAIGoogleCloudDatalabelingV1beta1ClassificationMetadata OAIGoogleCloudDatalabelingV1beta1InputConfig::getClassificationMetadata() const {
    return m_classification_metadata;
}
void OAIGoogleCloudDatalabelingV1beta1InputConfig::setClassificationMetadata(const OAIGoogleCloudDatalabelingV1beta1ClassificationMetadata &classification_metadata) {
    m_classification_metadata = classification_metadata;
    m_classification_metadata_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1InputConfig::is_classification_metadata_Set() const{
    return m_classification_metadata_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1InputConfig::is_classification_metadata_Valid() const{
    return m_classification_metadata_isValid;
}

QString OAIGoogleCloudDatalabelingV1beta1InputConfig::getDataType() const {
    return m_data_type;
}
void OAIGoogleCloudDatalabelingV1beta1InputConfig::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1InputConfig::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1InputConfig::is_data_type_Valid() const{
    return m_data_type_isValid;
}

OAIGoogleCloudDatalabelingV1beta1GcsSource OAIGoogleCloudDatalabelingV1beta1InputConfig::getGcsSource() const {
    return m_gcs_source;
}
void OAIGoogleCloudDatalabelingV1beta1InputConfig::setGcsSource(const OAIGoogleCloudDatalabelingV1beta1GcsSource &gcs_source) {
    m_gcs_source = gcs_source;
    m_gcs_source_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1InputConfig::is_gcs_source_Set() const{
    return m_gcs_source_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1InputConfig::is_gcs_source_Valid() const{
    return m_gcs_source_isValid;
}

OAIGoogleCloudDatalabelingV1beta1TextMetadata OAIGoogleCloudDatalabelingV1beta1InputConfig::getTextMetadata() const {
    return m_text_metadata;
}
void OAIGoogleCloudDatalabelingV1beta1InputConfig::setTextMetadata(const OAIGoogleCloudDatalabelingV1beta1TextMetadata &text_metadata) {
    m_text_metadata = text_metadata;
    m_text_metadata_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1InputConfig::is_text_metadata_Set() const{
    return m_text_metadata_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1InputConfig::is_text_metadata_Valid() const{
    return m_text_metadata_isValid;
}

bool OAIGoogleCloudDatalabelingV1beta1InputConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bigquery_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatalabelingV1beta1InputConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
