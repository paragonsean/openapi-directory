/**
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation() {
    this->initializeModel();
}

OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::~OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation() {}

void OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::initializeModel() {

    m_annotation_colors_isSet = false;
    m_annotation_colors_isValid = false;

    m_image_bytes_isSet = false;
    m_image_bytes_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;
}

void OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::fromJsonObject(QJsonObject json) {

    m_annotation_colors_isValid = ::OpenAPI::fromJsonValue(m_annotation_colors, json[QString("annotationColors")]);
    m_annotation_colors_isSet = !json[QString("annotationColors")].isNull() && m_annotation_colors_isValid;

    m_image_bytes_isValid = ::OpenAPI::fromJsonValue(m_image_bytes, json[QString("imageBytes")]);
    m_image_bytes_isSet = !json[QString("imageBytes")].isNull() && m_image_bytes_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;
}

QString OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_colors.size() > 0) {
        obj.insert(QString("annotationColors"), ::OpenAPI::toJsonValue(m_annotation_colors));
    }
    if (m_image_bytes_isSet) {
        obj.insert(QString("imageBytes"), ::OpenAPI::toJsonValue(m_image_bytes));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    return obj;
}

QMap<QString, OAIGoogleCloudDatalabelingV1beta1AnnotationSpec> OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::getAnnotationColors() const {
    return m_annotation_colors;
}
void OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::setAnnotationColors(const QMap<QString, OAIGoogleCloudDatalabelingV1beta1AnnotationSpec> &annotation_colors) {
    m_annotation_colors = annotation_colors;
    m_annotation_colors_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::is_annotation_colors_Set() const{
    return m_annotation_colors_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::is_annotation_colors_Valid() const{
    return m_annotation_colors_isValid;
}

QByteArray OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::getImageBytes() const {
    return m_image_bytes;
}
void OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::setImageBytes(const QByteArray &image_bytes) {
    m_image_bytes = image_bytes;
    m_image_bytes_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::is_image_bytes_Set() const{
    return m_image_bytes_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::is_image_bytes_Valid() const{
    return m_image_bytes_isValid;
}

QString OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::getMimeType() const {
    return m_mime_type;
}
void OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

bool OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_colors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
