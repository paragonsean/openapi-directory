/**
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig() {
    this->initializeModel();
}

OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::~OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig() {}

void OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::initializeModel() {

    m_bigquery_import_keys_isSet = false;
    m_bigquery_import_keys_isValid = false;

    m_bounding_poly_config_isSet = false;
    m_bounding_poly_config_isValid = false;

    m_evaluation_config_isSet = false;
    m_evaluation_config_isValid = false;

    m_evaluation_job_alert_config_isSet = false;
    m_evaluation_job_alert_config_isValid = false;

    m_example_count_isSet = false;
    m_example_count_isValid = false;

    m_example_sample_percentage_isSet = false;
    m_example_sample_percentage_isValid = false;

    m_human_annotation_config_isSet = false;
    m_human_annotation_config_isValid = false;

    m_image_classification_config_isSet = false;
    m_image_classification_config_isValid = false;

    m_input_config_isSet = false;
    m_input_config_isValid = false;

    m_text_classification_config_isSet = false;
    m_text_classification_config_isValid = false;
}

void OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::fromJsonObject(QJsonObject json) {

    m_bigquery_import_keys_isValid = ::OpenAPI::fromJsonValue(m_bigquery_import_keys, json[QString("bigqueryImportKeys")]);
    m_bigquery_import_keys_isSet = !json[QString("bigqueryImportKeys")].isNull() && m_bigquery_import_keys_isValid;

    m_bounding_poly_config_isValid = ::OpenAPI::fromJsonValue(m_bounding_poly_config, json[QString("boundingPolyConfig")]);
    m_bounding_poly_config_isSet = !json[QString("boundingPolyConfig")].isNull() && m_bounding_poly_config_isValid;

    m_evaluation_config_isValid = ::OpenAPI::fromJsonValue(m_evaluation_config, json[QString("evaluationConfig")]);
    m_evaluation_config_isSet = !json[QString("evaluationConfig")].isNull() && m_evaluation_config_isValid;

    m_evaluation_job_alert_config_isValid = ::OpenAPI::fromJsonValue(m_evaluation_job_alert_config, json[QString("evaluationJobAlertConfig")]);
    m_evaluation_job_alert_config_isSet = !json[QString("evaluationJobAlertConfig")].isNull() && m_evaluation_job_alert_config_isValid;

    m_example_count_isValid = ::OpenAPI::fromJsonValue(m_example_count, json[QString("exampleCount")]);
    m_example_count_isSet = !json[QString("exampleCount")].isNull() && m_example_count_isValid;

    m_example_sample_percentage_isValid = ::OpenAPI::fromJsonValue(m_example_sample_percentage, json[QString("exampleSamplePercentage")]);
    m_example_sample_percentage_isSet = !json[QString("exampleSamplePercentage")].isNull() && m_example_sample_percentage_isValid;

    m_human_annotation_config_isValid = ::OpenAPI::fromJsonValue(m_human_annotation_config, json[QString("humanAnnotationConfig")]);
    m_human_annotation_config_isSet = !json[QString("humanAnnotationConfig")].isNull() && m_human_annotation_config_isValid;

    m_image_classification_config_isValid = ::OpenAPI::fromJsonValue(m_image_classification_config, json[QString("imageClassificationConfig")]);
    m_image_classification_config_isSet = !json[QString("imageClassificationConfig")].isNull() && m_image_classification_config_isValid;

    m_input_config_isValid = ::OpenAPI::fromJsonValue(m_input_config, json[QString("inputConfig")]);
    m_input_config_isSet = !json[QString("inputConfig")].isNull() && m_input_config_isValid;

    m_text_classification_config_isValid = ::OpenAPI::fromJsonValue(m_text_classification_config, json[QString("textClassificationConfig")]);
    m_text_classification_config_isSet = !json[QString("textClassificationConfig")].isNull() && m_text_classification_config_isValid;
}

QString OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_bigquery_import_keys.size() > 0) {
        obj.insert(QString("bigqueryImportKeys"), ::OpenAPI::toJsonValue(m_bigquery_import_keys));
    }
    if (m_bounding_poly_config.isSet()) {
        obj.insert(QString("boundingPolyConfig"), ::OpenAPI::toJsonValue(m_bounding_poly_config));
    }
    if (m_evaluation_config.isSet()) {
        obj.insert(QString("evaluationConfig"), ::OpenAPI::toJsonValue(m_evaluation_config));
    }
    if (m_evaluation_job_alert_config.isSet()) {
        obj.insert(QString("evaluationJobAlertConfig"), ::OpenAPI::toJsonValue(m_evaluation_job_alert_config));
    }
    if (m_example_count_isSet) {
        obj.insert(QString("exampleCount"), ::OpenAPI::toJsonValue(m_example_count));
    }
    if (m_example_sample_percentage_isSet) {
        obj.insert(QString("exampleSamplePercentage"), ::OpenAPI::toJsonValue(m_example_sample_percentage));
    }
    if (m_human_annotation_config.isSet()) {
        obj.insert(QString("humanAnnotationConfig"), ::OpenAPI::toJsonValue(m_human_annotation_config));
    }
    if (m_image_classification_config.isSet()) {
        obj.insert(QString("imageClassificationConfig"), ::OpenAPI::toJsonValue(m_image_classification_config));
    }
    if (m_input_config.isSet()) {
        obj.insert(QString("inputConfig"), ::OpenAPI::toJsonValue(m_input_config));
    }
    if (m_text_classification_config.isSet()) {
        obj.insert(QString("textClassificationConfig"), ::OpenAPI::toJsonValue(m_text_classification_config));
    }
    return obj;
}

QMap<QString, QString> OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::getBigqueryImportKeys() const {
    return m_bigquery_import_keys;
}
void OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::setBigqueryImportKeys(const QMap<QString, QString> &bigquery_import_keys) {
    m_bigquery_import_keys = bigquery_import_keys;
    m_bigquery_import_keys_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_bigquery_import_keys_Set() const{
    return m_bigquery_import_keys_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_bigquery_import_keys_Valid() const{
    return m_bigquery_import_keys_isValid;
}

OAIGoogleCloudDatalabelingV1beta1BoundingPolyConfig OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::getBoundingPolyConfig() const {
    return m_bounding_poly_config;
}
void OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::setBoundingPolyConfig(const OAIGoogleCloudDatalabelingV1beta1BoundingPolyConfig &bounding_poly_config) {
    m_bounding_poly_config = bounding_poly_config;
    m_bounding_poly_config_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_bounding_poly_config_Set() const{
    return m_bounding_poly_config_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_bounding_poly_config_Valid() const{
    return m_bounding_poly_config_isValid;
}

OAIGoogleCloudDatalabelingV1beta1EvaluationConfig OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::getEvaluationConfig() const {
    return m_evaluation_config;
}
void OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::setEvaluationConfig(const OAIGoogleCloudDatalabelingV1beta1EvaluationConfig &evaluation_config) {
    m_evaluation_config = evaluation_config;
    m_evaluation_config_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_evaluation_config_Set() const{
    return m_evaluation_config_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_evaluation_config_Valid() const{
    return m_evaluation_config_isValid;
}

OAIGoogleCloudDatalabelingV1beta1EvaluationJobAlertConfig OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::getEvaluationJobAlertConfig() const {
    return m_evaluation_job_alert_config;
}
void OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::setEvaluationJobAlertConfig(const OAIGoogleCloudDatalabelingV1beta1EvaluationJobAlertConfig &evaluation_job_alert_config) {
    m_evaluation_job_alert_config = evaluation_job_alert_config;
    m_evaluation_job_alert_config_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_evaluation_job_alert_config_Set() const{
    return m_evaluation_job_alert_config_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_evaluation_job_alert_config_Valid() const{
    return m_evaluation_job_alert_config_isValid;
}

qint32 OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::getExampleCount() const {
    return m_example_count;
}
void OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::setExampleCount(const qint32 &example_count) {
    m_example_count = example_count;
    m_example_count_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_example_count_Set() const{
    return m_example_count_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_example_count_Valid() const{
    return m_example_count_isValid;
}

double OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::getExampleSamplePercentage() const {
    return m_example_sample_percentage;
}
void OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::setExampleSamplePercentage(const double &example_sample_percentage) {
    m_example_sample_percentage = example_sample_percentage;
    m_example_sample_percentage_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_example_sample_percentage_Set() const{
    return m_example_sample_percentage_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_example_sample_percentage_Valid() const{
    return m_example_sample_percentage_isValid;
}

OAIGoogleCloudDatalabelingV1beta1HumanAnnotationConfig OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::getHumanAnnotationConfig() const {
    return m_human_annotation_config;
}
void OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::setHumanAnnotationConfig(const OAIGoogleCloudDatalabelingV1beta1HumanAnnotationConfig &human_annotation_config) {
    m_human_annotation_config = human_annotation_config;
    m_human_annotation_config_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_human_annotation_config_Set() const{
    return m_human_annotation_config_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_human_annotation_config_Valid() const{
    return m_human_annotation_config_isValid;
}

OAIGoogleCloudDatalabelingV1beta1ImageClassificationConfig OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::getImageClassificationConfig() const {
    return m_image_classification_config;
}
void OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::setImageClassificationConfig(const OAIGoogleCloudDatalabelingV1beta1ImageClassificationConfig &image_classification_config) {
    m_image_classification_config = image_classification_config;
    m_image_classification_config_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_image_classification_config_Set() const{
    return m_image_classification_config_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_image_classification_config_Valid() const{
    return m_image_classification_config_isValid;
}

OAIGoogleCloudDatalabelingV1beta1InputConfig OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::getInputConfig() const {
    return m_input_config;
}
void OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::setInputConfig(const OAIGoogleCloudDatalabelingV1beta1InputConfig &input_config) {
    m_input_config = input_config;
    m_input_config_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_input_config_Set() const{
    return m_input_config_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_input_config_Valid() const{
    return m_input_config_isValid;
}

OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::getTextClassificationConfig() const {
    return m_text_classification_config;
}
void OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::setTextClassificationConfig(const OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig &text_classification_config) {
    m_text_classification_config = text_classification_config;
    m_text_classification_config_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_text_classification_config_Set() const{
    return m_text_classification_config_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::is_text_classification_config_Valid() const{
    return m_text_classification_config_isValid;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bigquery_import_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounding_poly_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_job_alert_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_example_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_example_sample_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_human_annotation_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_classification_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_classification_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatalabelingV1beta1EvaluationJobConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
