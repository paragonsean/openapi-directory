/**
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatalabelingV1beta1OperatorMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::OAIGoogleCloudDatalabelingV1beta1OperatorMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::OAIGoogleCloudDatalabelingV1beta1OperatorMetadata() {
    this->initializeModel();
}

OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::~OAIGoogleCloudDatalabelingV1beta1OperatorMetadata() {}

void OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_label_votes_isSet = false;
    m_label_votes_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_total_votes_isSet = false;
    m_total_votes_isValid = false;
}

void OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_label_votes_isValid = ::OpenAPI::fromJsonValue(m_label_votes, json[QString("labelVotes")]);
    m_label_votes_isSet = !json[QString("labelVotes")].isNull() && m_label_votes_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_total_votes_isValid = ::OpenAPI::fromJsonValue(m_total_votes, json[QString("totalVotes")]);
    m_total_votes_isSet = !json[QString("totalVotes")].isNull() && m_total_votes_isValid;
}

QString OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_comments.size() > 0) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_label_votes_isSet) {
        obj.insert(QString("labelVotes"), ::OpenAPI::toJsonValue(m_label_votes));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_total_votes_isSet) {
        obj.insert(QString("totalVotes"), ::OpenAPI::toJsonValue(m_total_votes));
    }
    return obj;
}

QList<QString> OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::getComments() const {
    return m_comments;
}
void OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::setComments(const QList<QString> &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::is_comments_Valid() const{
    return m_comments_isValid;
}

qint32 OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::getLabelVotes() const {
    return m_label_votes;
}
void OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::setLabelVotes(const qint32 &label_votes) {
    m_label_votes = label_votes;
    m_label_votes_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::is_label_votes_Set() const{
    return m_label_votes_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::is_label_votes_Valid() const{
    return m_label_votes_isValid;
}

float OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::getScore() const {
    return m_score;
}
void OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::is_score_Set() const{
    return m_score_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::is_score_Valid() const{
    return m_score_isValid;
}

qint32 OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::getTotalVotes() const {
    return m_total_votes;
}
void OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::setTotalVotes(const qint32 &total_votes) {
    m_total_votes = total_votes;
    m_total_votes_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::is_total_votes_Set() const{
    return m_total_votes_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::is_total_votes_Valid() const{
    return m_total_votes_isValid;
}

bool OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_votes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_votes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatalabelingV1beta1OperatorMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
