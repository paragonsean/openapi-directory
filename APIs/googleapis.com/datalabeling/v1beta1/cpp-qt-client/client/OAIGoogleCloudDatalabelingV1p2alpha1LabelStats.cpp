/**
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatalabelingV1p2alpha1LabelStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatalabelingV1p2alpha1LabelStats::OAIGoogleCloudDatalabelingV1p2alpha1LabelStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatalabelingV1p2alpha1LabelStats::OAIGoogleCloudDatalabelingV1p2alpha1LabelStats() {
    this->initializeModel();
}

OAIGoogleCloudDatalabelingV1p2alpha1LabelStats::~OAIGoogleCloudDatalabelingV1p2alpha1LabelStats() {}

void OAIGoogleCloudDatalabelingV1p2alpha1LabelStats::initializeModel() {

    m_example_count_isSet = false;
    m_example_count_isValid = false;
}

void OAIGoogleCloudDatalabelingV1p2alpha1LabelStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatalabelingV1p2alpha1LabelStats::fromJsonObject(QJsonObject json) {

    m_example_count_isValid = ::OpenAPI::fromJsonValue(m_example_count, json[QString("exampleCount")]);
    m_example_count_isSet = !json[QString("exampleCount")].isNull() && m_example_count_isValid;
}

QString OAIGoogleCloudDatalabelingV1p2alpha1LabelStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatalabelingV1p2alpha1LabelStats::asJsonObject() const {
    QJsonObject obj;
    if (m_example_count.size() > 0) {
        obj.insert(QString("exampleCount"), ::OpenAPI::toJsonValue(m_example_count));
    }
    return obj;
}

QMap<QString, QString> OAIGoogleCloudDatalabelingV1p2alpha1LabelStats::getExampleCount() const {
    return m_example_count;
}
void OAIGoogleCloudDatalabelingV1p2alpha1LabelStats::setExampleCount(const QMap<QString, QString> &example_count) {
    m_example_count = example_count;
    m_example_count_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1p2alpha1LabelStats::is_example_count_Set() const{
    return m_example_count_isSet;
}

bool OAIGoogleCloudDatalabelingV1p2alpha1LabelStats::is_example_count_Valid() const{
    return m_example_count_isValid;
}

bool OAIGoogleCloudDatalabelingV1p2alpha1LabelStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_example_count.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatalabelingV1p2alpha1LabelStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
