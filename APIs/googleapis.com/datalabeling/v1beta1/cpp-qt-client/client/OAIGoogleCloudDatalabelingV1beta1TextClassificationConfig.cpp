/**
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig() {
    this->initializeModel();
}

OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::~OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig() {}

void OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::initializeModel() {

    m_allow_multi_label_isSet = false;
    m_allow_multi_label_isValid = false;

    m_annotation_spec_set_isSet = false;
    m_annotation_spec_set_isValid = false;

    m_sentiment_config_isSet = false;
    m_sentiment_config_isValid = false;
}

void OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::fromJsonObject(QJsonObject json) {

    m_allow_multi_label_isValid = ::OpenAPI::fromJsonValue(m_allow_multi_label, json[QString("allowMultiLabel")]);
    m_allow_multi_label_isSet = !json[QString("allowMultiLabel")].isNull() && m_allow_multi_label_isValid;

    m_annotation_spec_set_isValid = ::OpenAPI::fromJsonValue(m_annotation_spec_set, json[QString("annotationSpecSet")]);
    m_annotation_spec_set_isSet = !json[QString("annotationSpecSet")].isNull() && m_annotation_spec_set_isValid;

    m_sentiment_config_isValid = ::OpenAPI::fromJsonValue(m_sentiment_config, json[QString("sentimentConfig")]);
    m_sentiment_config_isSet = !json[QString("sentimentConfig")].isNull() && m_sentiment_config_isValid;
}

QString OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_multi_label_isSet) {
        obj.insert(QString("allowMultiLabel"), ::OpenAPI::toJsonValue(m_allow_multi_label));
    }
    if (m_annotation_spec_set_isSet) {
        obj.insert(QString("annotationSpecSet"), ::OpenAPI::toJsonValue(m_annotation_spec_set));
    }
    if (m_sentiment_config.isSet()) {
        obj.insert(QString("sentimentConfig"), ::OpenAPI::toJsonValue(m_sentiment_config));
    }
    return obj;
}

bool OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::isAllowMultiLabel() const {
    return m_allow_multi_label;
}
void OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::setAllowMultiLabel(const bool &allow_multi_label) {
    m_allow_multi_label = allow_multi_label;
    m_allow_multi_label_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::is_allow_multi_label_Set() const{
    return m_allow_multi_label_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::is_allow_multi_label_Valid() const{
    return m_allow_multi_label_isValid;
}

QString OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::getAnnotationSpecSet() const {
    return m_annotation_spec_set;
}
void OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::setAnnotationSpecSet(const QString &annotation_spec_set) {
    m_annotation_spec_set = annotation_spec_set;
    m_annotation_spec_set_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::is_annotation_spec_set_Set() const{
    return m_annotation_spec_set_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::is_annotation_spec_set_Valid() const{
    return m_annotation_spec_set_isValid;
}

OAIGoogleCloudDatalabelingV1beta1SentimentConfig OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::getSentimentConfig() const {
    return m_sentiment_config;
}
void OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::setSentimentConfig(const OAIGoogleCloudDatalabelingV1beta1SentimentConfig &sentiment_config) {
    m_sentiment_config = sentiment_config;
    m_sentiment_config_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::is_sentiment_config_Set() const{
    return m_sentiment_config_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::is_sentiment_config_Valid() const{
    return m_sentiment_config_isValid;
}

bool OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_multi_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotation_spec_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatalabelingV1beta1TextClassificationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
