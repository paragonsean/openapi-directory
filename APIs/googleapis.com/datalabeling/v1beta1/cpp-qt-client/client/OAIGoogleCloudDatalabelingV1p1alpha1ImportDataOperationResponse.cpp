/**
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse() {
    this->initializeModel();
}

OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::~OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse() {}

void OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::initializeModel() {

    m_dataset_isSet = false;
    m_dataset_isValid = false;

    m_import_count_isSet = false;
    m_import_count_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::fromJsonObject(QJsonObject json) {

    m_dataset_isValid = ::OpenAPI::fromJsonValue(m_dataset, json[QString("dataset")]);
    m_dataset_isSet = !json[QString("dataset")].isNull() && m_dataset_isValid;

    m_import_count_isValid = ::OpenAPI::fromJsonValue(m_import_count, json[QString("importCount")]);
    m_import_count_isSet = !json[QString("importCount")].isNull() && m_import_count_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("totalCount")]);
    m_total_count_isSet = !json[QString("totalCount")].isNull() && m_total_count_isValid;
}

QString OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_isSet) {
        obj.insert(QString("dataset"), ::OpenAPI::toJsonValue(m_dataset));
    }
    if (m_import_count_isSet) {
        obj.insert(QString("importCount"), ::OpenAPI::toJsonValue(m_import_count));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("totalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

QString OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::getDataset() const {
    return m_dataset;
}
void OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::setDataset(const QString &dataset) {
    m_dataset = dataset;
    m_dataset_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::is_dataset_Set() const{
    return m_dataset_isSet;
}

bool OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::is_dataset_Valid() const{
    return m_dataset_isValid;
}

qint32 OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::getImportCount() const {
    return m_import_count;
}
void OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::setImportCount(const qint32 &import_count) {
    m_import_count = import_count;
    m_import_count_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::is_import_count_Set() const{
    return m_import_count_isSet;
}

bool OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::is_import_count_Valid() const{
    return m_import_count_isValid;
}

qint32 OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::getTotalCount() const {
    return m_total_count;
}
void OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatalabelingV1p1alpha1ImportDataOperationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
