/**
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig() {
    this->initializeModel();
}

OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::~OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig() {}

void OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::initializeModel() {

    m_annotation_spec_set_isSet = false;
    m_annotation_spec_set_isValid = false;

    m_clip_length_isSet = false;
    m_clip_length_isValid = false;

    m_overlap_length_isSet = false;
    m_overlap_length_isValid = false;
}

void OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::fromJsonObject(QJsonObject json) {

    m_annotation_spec_set_isValid = ::OpenAPI::fromJsonValue(m_annotation_spec_set, json[QString("annotationSpecSet")]);
    m_annotation_spec_set_isSet = !json[QString("annotationSpecSet")].isNull() && m_annotation_spec_set_isValid;

    m_clip_length_isValid = ::OpenAPI::fromJsonValue(m_clip_length, json[QString("clipLength")]);
    m_clip_length_isSet = !json[QString("clipLength")].isNull() && m_clip_length_isValid;

    m_overlap_length_isValid = ::OpenAPI::fromJsonValue(m_overlap_length, json[QString("overlapLength")]);
    m_overlap_length_isSet = !json[QString("overlapLength")].isNull() && m_overlap_length_isValid;
}

QString OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_spec_set_isSet) {
        obj.insert(QString("annotationSpecSet"), ::OpenAPI::toJsonValue(m_annotation_spec_set));
    }
    if (m_clip_length_isSet) {
        obj.insert(QString("clipLength"), ::OpenAPI::toJsonValue(m_clip_length));
    }
    if (m_overlap_length_isSet) {
        obj.insert(QString("overlapLength"), ::OpenAPI::toJsonValue(m_overlap_length));
    }
    return obj;
}

QString OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::getAnnotationSpecSet() const {
    return m_annotation_spec_set;
}
void OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::setAnnotationSpecSet(const QString &annotation_spec_set) {
    m_annotation_spec_set = annotation_spec_set;
    m_annotation_spec_set_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::is_annotation_spec_set_Set() const{
    return m_annotation_spec_set_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::is_annotation_spec_set_Valid() const{
    return m_annotation_spec_set_isValid;
}

qint32 OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::getClipLength() const {
    return m_clip_length;
}
void OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::setClipLength(const qint32 &clip_length) {
    m_clip_length = clip_length;
    m_clip_length_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::is_clip_length_Set() const{
    return m_clip_length_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::is_clip_length_Valid() const{
    return m_clip_length_isValid;
}

qint32 OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::getOverlapLength() const {
    return m_overlap_length;
}
void OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::setOverlapLength(const qint32 &overlap_length) {
    m_overlap_length = overlap_length;
    m_overlap_length_isSet = true;
}

bool OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::is_overlap_length_Set() const{
    return m_overlap_length_isSet;
}

bool OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::is_overlap_length_Valid() const{
    return m_overlap_length_isValid;
}

bool OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_spec_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clip_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overlap_length_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDatalabelingV1beta1ObjectTrackingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
