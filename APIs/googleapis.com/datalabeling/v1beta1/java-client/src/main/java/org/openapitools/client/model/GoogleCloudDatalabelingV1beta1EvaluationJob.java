/*
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1Attempt;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1EvaluationJobConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines an evaluation job that runs periodically to generate Evaluations. [Creating an evaluation job](/ml-engine/docs/continuous-evaluation/create-job) is the starting point for using continuous evaluation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:41.492869-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatalabelingV1beta1EvaluationJob {
  public static final String SERIALIZED_NAME_ANNOTATION_SPEC_SET = "annotationSpecSet";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_SPEC_SET)
  private String annotationSpecSet;

  public static final String SERIALIZED_NAME_ATTEMPTS = "attempts";
  @SerializedName(SERIALIZED_NAME_ATTEMPTS)
  private List<GoogleCloudDatalabelingV1beta1Attempt> attempts = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVALUATION_JOB_CONFIG = "evaluationJobConfig";
  @SerializedName(SERIALIZED_NAME_EVALUATION_JOB_CONFIG)
  private GoogleCloudDatalabelingV1beta1EvaluationJobConfig evaluationJobConfig;

  public static final String SERIALIZED_NAME_LABEL_MISSING_GROUND_TRUTH = "labelMissingGroundTruth";
  @SerializedName(SERIALIZED_NAME_LABEL_MISSING_GROUND_TRUTH)
  private Boolean labelMissingGroundTruth;

  public static final String SERIALIZED_NAME_MODEL_VERSION = "modelVersion";
  @SerializedName(SERIALIZED_NAME_MODEL_VERSION)
  private String modelVersion;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private String schedule;

  /**
   * Output only. Describes the current state of the job.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    SCHEDULED("SCHEDULED"),
    
    RUNNING("RUNNING"),
    
    PAUSED("PAUSED"),
    
    STOPPED("STOPPED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public GoogleCloudDatalabelingV1beta1EvaluationJob() {
  }

  public GoogleCloudDatalabelingV1beta1EvaluationJob annotationSpecSet(String annotationSpecSet) {
    this.annotationSpecSet = annotationSpecSet;
    return this;
  }

  /**
   * Required. Name of the AnnotationSpecSet describing all the labels that your machine learning model outputs. You must create this resource before you create an evaluation job and provide its name in the following format: \&quot;projects/{project_id}/annotationSpecSets/{annotation_spec_set_id}\&quot;
   * @return annotationSpecSet
   */
  @javax.annotation.Nullable
  public String getAnnotationSpecSet() {
    return annotationSpecSet;
  }

  public void setAnnotationSpecSet(String annotationSpecSet) {
    this.annotationSpecSet = annotationSpecSet;
  }


  public GoogleCloudDatalabelingV1beta1EvaluationJob attempts(List<GoogleCloudDatalabelingV1beta1Attempt> attempts) {
    this.attempts = attempts;
    return this;
  }

  public GoogleCloudDatalabelingV1beta1EvaluationJob addAttemptsItem(GoogleCloudDatalabelingV1beta1Attempt attemptsItem) {
    if (this.attempts == null) {
      this.attempts = new ArrayList<>();
    }
    this.attempts.add(attemptsItem);
    return this;
  }

  /**
   * Output only. Every time the evaluation job runs and an error occurs, the failed attempt is appended to this array.
   * @return attempts
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDatalabelingV1beta1Attempt> getAttempts() {
    return attempts;
  }

  public void setAttempts(List<GoogleCloudDatalabelingV1beta1Attempt> attempts) {
    this.attempts = attempts;
  }


  public GoogleCloudDatalabelingV1beta1EvaluationJob createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. Timestamp of when this evaluation job was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public GoogleCloudDatalabelingV1beta1EvaluationJob description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Required. Description of the job. The description can be up to 25,000 characters long.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudDatalabelingV1beta1EvaluationJob evaluationJobConfig(GoogleCloudDatalabelingV1beta1EvaluationJobConfig evaluationJobConfig) {
    this.evaluationJobConfig = evaluationJobConfig;
    return this;
  }

  /**
   * Get evaluationJobConfig
   * @return evaluationJobConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDatalabelingV1beta1EvaluationJobConfig getEvaluationJobConfig() {
    return evaluationJobConfig;
  }

  public void setEvaluationJobConfig(GoogleCloudDatalabelingV1beta1EvaluationJobConfig evaluationJobConfig) {
    this.evaluationJobConfig = evaluationJobConfig;
  }


  public GoogleCloudDatalabelingV1beta1EvaluationJob labelMissingGroundTruth(Boolean labelMissingGroundTruth) {
    this.labelMissingGroundTruth = labelMissingGroundTruth;
    return this;
  }

  /**
   * Required. Whether you want Data Labeling Service to provide ground truth labels for prediction input. If you want the service to assign human labelers to annotate your data, set this to &#x60;true&#x60;. If you want to provide your own ground truth labels in the evaluation job&#39;s BigQuery table, set this to &#x60;false&#x60;.
   * @return labelMissingGroundTruth
   */
  @javax.annotation.Nullable
  public Boolean getLabelMissingGroundTruth() {
    return labelMissingGroundTruth;
  }

  public void setLabelMissingGroundTruth(Boolean labelMissingGroundTruth) {
    this.labelMissingGroundTruth = labelMissingGroundTruth;
  }


  public GoogleCloudDatalabelingV1beta1EvaluationJob modelVersion(String modelVersion) {
    this.modelVersion = modelVersion;
    return this;
  }

  /**
   * Required. The [AI Platform Prediction model version](/ml-engine/docs/prediction-overview) to be evaluated. Prediction input and output is sampled from this model version. When creating an evaluation job, specify the model version in the following format: \&quot;projects/{project_id}/models/{model_name}/versions/{version_name}\&quot; There can only be one evaluation job per model version.
   * @return modelVersion
   */
  @javax.annotation.Nullable
  public String getModelVersion() {
    return modelVersion;
  }

  public void setModelVersion(String modelVersion) {
    this.modelVersion = modelVersion;
  }


  public GoogleCloudDatalabelingV1beta1EvaluationJob name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. After you create a job, Data Labeling Service assigns a name to the job with the following format: \&quot;projects/{project_id}/evaluationJobs/ {evaluation_job_id}\&quot;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDatalabelingV1beta1EvaluationJob schedule(String schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Required. Describes the interval at which the job runs. This interval must be at least 1 day, and it is rounded to the nearest day. For example, if you specify a 50-hour interval, the job runs every 2 days. You can provide the schedule in [crontab format](/scheduler/docs/configuring/cron-job-schedules) or in an [English-like format](/appengine/docs/standard/python/config/cronref#schedule_format). Regardless of what you specify, the job will run at 10:00 AM UTC. Only the interval from this schedule is used, not the specific time of day.
   * @return schedule
   */
  @javax.annotation.Nullable
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }


  public GoogleCloudDatalabelingV1beta1EvaluationJob state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. Describes the current state of the job.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatalabelingV1beta1EvaluationJob googleCloudDatalabelingV1beta1EvaluationJob = (GoogleCloudDatalabelingV1beta1EvaluationJob) o;
    return Objects.equals(this.annotationSpecSet, googleCloudDatalabelingV1beta1EvaluationJob.annotationSpecSet) &&
        Objects.equals(this.attempts, googleCloudDatalabelingV1beta1EvaluationJob.attempts) &&
        Objects.equals(this.createTime, googleCloudDatalabelingV1beta1EvaluationJob.createTime) &&
        Objects.equals(this.description, googleCloudDatalabelingV1beta1EvaluationJob.description) &&
        Objects.equals(this.evaluationJobConfig, googleCloudDatalabelingV1beta1EvaluationJob.evaluationJobConfig) &&
        Objects.equals(this.labelMissingGroundTruth, googleCloudDatalabelingV1beta1EvaluationJob.labelMissingGroundTruth) &&
        Objects.equals(this.modelVersion, googleCloudDatalabelingV1beta1EvaluationJob.modelVersion) &&
        Objects.equals(this.name, googleCloudDatalabelingV1beta1EvaluationJob.name) &&
        Objects.equals(this.schedule, googleCloudDatalabelingV1beta1EvaluationJob.schedule) &&
        Objects.equals(this.state, googleCloudDatalabelingV1beta1EvaluationJob.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationSpecSet, attempts, createTime, description, evaluationJobConfig, labelMissingGroundTruth, modelVersion, name, schedule, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatalabelingV1beta1EvaluationJob {\n");
    sb.append("    annotationSpecSet: ").append(toIndentedString(annotationSpecSet)).append("\n");
    sb.append("    attempts: ").append(toIndentedString(attempts)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    evaluationJobConfig: ").append(toIndentedString(evaluationJobConfig)).append("\n");
    sb.append("    labelMissingGroundTruth: ").append(toIndentedString(labelMissingGroundTruth)).append("\n");
    sb.append("    modelVersion: ").append(toIndentedString(modelVersion)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotationSpecSet");
    openapiFields.add("attempts");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("evaluationJobConfig");
    openapiFields.add("labelMissingGroundTruth");
    openapiFields.add("modelVersion");
    openapiFields.add("name");
    openapiFields.add("schedule");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatalabelingV1beta1EvaluationJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatalabelingV1beta1EvaluationJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatalabelingV1beta1EvaluationJob is not found in the empty JSON string", GoogleCloudDatalabelingV1beta1EvaluationJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatalabelingV1beta1EvaluationJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatalabelingV1beta1EvaluationJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("annotationSpecSet") != null && !jsonObj.get("annotationSpecSet").isJsonNull()) && !jsonObj.get("annotationSpecSet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationSpecSet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotationSpecSet").toString()));
      }
      if (jsonObj.get("attempts") != null && !jsonObj.get("attempts").isJsonNull()) {
        JsonArray jsonArrayattempts = jsonObj.getAsJsonArray("attempts");
        if (jsonArrayattempts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attempts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attempts` to be an array in the JSON string but got `%s`", jsonObj.get("attempts").toString()));
          }

          // validate the optional field `attempts` (array)
          for (int i = 0; i < jsonArrayattempts.size(); i++) {
            GoogleCloudDatalabelingV1beta1Attempt.validateJsonElement(jsonArrayattempts.get(i));
          };
        }
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `evaluationJobConfig`
      if (jsonObj.get("evaluationJobConfig") != null && !jsonObj.get("evaluationJobConfig").isJsonNull()) {
        GoogleCloudDatalabelingV1beta1EvaluationJobConfig.validateJsonElement(jsonObj.get("evaluationJobConfig"));
      }
      if ((jsonObj.get("modelVersion") != null && !jsonObj.get("modelVersion").isJsonNull()) && !jsonObj.get("modelVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelVersion").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) && !jsonObj.get("schedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatalabelingV1beta1EvaluationJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatalabelingV1beta1EvaluationJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatalabelingV1beta1EvaluationJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatalabelingV1beta1EvaluationJob.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatalabelingV1beta1EvaluationJob>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatalabelingV1beta1EvaluationJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatalabelingV1beta1EvaluationJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatalabelingV1beta1EvaluationJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatalabelingV1beta1EvaluationJob
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatalabelingV1beta1EvaluationJob
   */
  public static GoogleCloudDatalabelingV1beta1EvaluationJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatalabelingV1beta1EvaluationJob.class);
  }

  /**
   * Convert an instance of GoogleCloudDatalabelingV1beta1EvaluationJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

