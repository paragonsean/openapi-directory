/*
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1VideoThumbnail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container of information of a video.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:41.492869-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatalabelingV1beta1VideoPayload {
  public static final String SERIALIZED_NAME_FRAME_RATE = "frameRate";
  @SerializedName(SERIALIZED_NAME_FRAME_RATE)
  private Float frameRate;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_SIGNED_URI = "signedUri";
  @SerializedName(SERIALIZED_NAME_SIGNED_URI)
  private String signedUri;

  public static final String SERIALIZED_NAME_VIDEO_THUMBNAILS = "videoThumbnails";
  @SerializedName(SERIALIZED_NAME_VIDEO_THUMBNAILS)
  private List<GoogleCloudDatalabelingV1beta1VideoThumbnail> videoThumbnails = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIDEO_URI = "videoUri";
  @SerializedName(SERIALIZED_NAME_VIDEO_URI)
  private String videoUri;

  public GoogleCloudDatalabelingV1beta1VideoPayload() {
  }

  public GoogleCloudDatalabelingV1beta1VideoPayload frameRate(Float frameRate) {
    this.frameRate = frameRate;
    return this;
  }

  /**
   * FPS of the video.
   * @return frameRate
   */
  @javax.annotation.Nullable
  public Float getFrameRate() {
    return frameRate;
  }

  public void setFrameRate(Float frameRate) {
    this.frameRate = frameRate;
  }


  public GoogleCloudDatalabelingV1beta1VideoPayload mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * Video format.
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public GoogleCloudDatalabelingV1beta1VideoPayload signedUri(String signedUri) {
    this.signedUri = signedUri;
    return this;
  }

  /**
   * Signed uri of the video file in the service bucket.
   * @return signedUri
   */
  @javax.annotation.Nullable
  public String getSignedUri() {
    return signedUri;
  }

  public void setSignedUri(String signedUri) {
    this.signedUri = signedUri;
  }


  public GoogleCloudDatalabelingV1beta1VideoPayload videoThumbnails(List<GoogleCloudDatalabelingV1beta1VideoThumbnail> videoThumbnails) {
    this.videoThumbnails = videoThumbnails;
    return this;
  }

  public GoogleCloudDatalabelingV1beta1VideoPayload addVideoThumbnailsItem(GoogleCloudDatalabelingV1beta1VideoThumbnail videoThumbnailsItem) {
    if (this.videoThumbnails == null) {
      this.videoThumbnails = new ArrayList<>();
    }
    this.videoThumbnails.add(videoThumbnailsItem);
    return this;
  }

  /**
   * The list of video thumbnails.
   * @return videoThumbnails
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDatalabelingV1beta1VideoThumbnail> getVideoThumbnails() {
    return videoThumbnails;
  }

  public void setVideoThumbnails(List<GoogleCloudDatalabelingV1beta1VideoThumbnail> videoThumbnails) {
    this.videoThumbnails = videoThumbnails;
  }


  public GoogleCloudDatalabelingV1beta1VideoPayload videoUri(String videoUri) {
    this.videoUri = videoUri;
    return this;
  }

  /**
   * Video uri from the user bucket.
   * @return videoUri
   */
  @javax.annotation.Nullable
  public String getVideoUri() {
    return videoUri;
  }

  public void setVideoUri(String videoUri) {
    this.videoUri = videoUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatalabelingV1beta1VideoPayload googleCloudDatalabelingV1beta1VideoPayload = (GoogleCloudDatalabelingV1beta1VideoPayload) o;
    return Objects.equals(this.frameRate, googleCloudDatalabelingV1beta1VideoPayload.frameRate) &&
        Objects.equals(this.mimeType, googleCloudDatalabelingV1beta1VideoPayload.mimeType) &&
        Objects.equals(this.signedUri, googleCloudDatalabelingV1beta1VideoPayload.signedUri) &&
        Objects.equals(this.videoThumbnails, googleCloudDatalabelingV1beta1VideoPayload.videoThumbnails) &&
        Objects.equals(this.videoUri, googleCloudDatalabelingV1beta1VideoPayload.videoUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(frameRate, mimeType, signedUri, videoThumbnails, videoUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatalabelingV1beta1VideoPayload {\n");
    sb.append("    frameRate: ").append(toIndentedString(frameRate)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    signedUri: ").append(toIndentedString(signedUri)).append("\n");
    sb.append("    videoThumbnails: ").append(toIndentedString(videoThumbnails)).append("\n");
    sb.append("    videoUri: ").append(toIndentedString(videoUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("frameRate");
    openapiFields.add("mimeType");
    openapiFields.add("signedUri");
    openapiFields.add("videoThumbnails");
    openapiFields.add("videoUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatalabelingV1beta1VideoPayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatalabelingV1beta1VideoPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatalabelingV1beta1VideoPayload is not found in the empty JSON string", GoogleCloudDatalabelingV1beta1VideoPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatalabelingV1beta1VideoPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatalabelingV1beta1VideoPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonNull()) && !jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
      if ((jsonObj.get("signedUri") != null && !jsonObj.get("signedUri").isJsonNull()) && !jsonObj.get("signedUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signedUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signedUri").toString()));
      }
      if (jsonObj.get("videoThumbnails") != null && !jsonObj.get("videoThumbnails").isJsonNull()) {
        JsonArray jsonArrayvideoThumbnails = jsonObj.getAsJsonArray("videoThumbnails");
        if (jsonArrayvideoThumbnails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("videoThumbnails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `videoThumbnails` to be an array in the JSON string but got `%s`", jsonObj.get("videoThumbnails").toString()));
          }

          // validate the optional field `videoThumbnails` (array)
          for (int i = 0; i < jsonArrayvideoThumbnails.size(); i++) {
            GoogleCloudDatalabelingV1beta1VideoThumbnail.validateJsonElement(jsonArrayvideoThumbnails.get(i));
          };
        }
      }
      if ((jsonObj.get("videoUri") != null && !jsonObj.get("videoUri").isJsonNull()) && !jsonObj.get("videoUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatalabelingV1beta1VideoPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatalabelingV1beta1VideoPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatalabelingV1beta1VideoPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatalabelingV1beta1VideoPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatalabelingV1beta1VideoPayload>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatalabelingV1beta1VideoPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatalabelingV1beta1VideoPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatalabelingV1beta1VideoPayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatalabelingV1beta1VideoPayload
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatalabelingV1beta1VideoPayload
   */
  public static GoogleCloudDatalabelingV1beta1VideoPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatalabelingV1beta1VideoPayload.class);
  }

  /**
   * Convert an instance of GoogleCloudDatalabelingV1beta1VideoPayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

