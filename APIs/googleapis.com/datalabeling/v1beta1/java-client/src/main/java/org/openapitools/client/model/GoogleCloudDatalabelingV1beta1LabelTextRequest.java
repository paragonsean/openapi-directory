/*
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1HumanAnnotationConfig;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1TextClassificationConfig;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1TextEntityExtractionConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for LabelText.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:41.492869-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatalabelingV1beta1LabelTextRequest {
  public static final String SERIALIZED_NAME_BASIC_CONFIG = "basicConfig";
  @SerializedName(SERIALIZED_NAME_BASIC_CONFIG)
  private GoogleCloudDatalabelingV1beta1HumanAnnotationConfig basicConfig;

  /**
   * Required. The type of text labeling task.
   */
  @JsonAdapter(FeatureEnum.Adapter.class)
  public enum FeatureEnum {
    FEATURE_UNSPECIFIED("FEATURE_UNSPECIFIED"),
    
    TEXT_CLASSIFICATION("TEXT_CLASSIFICATION"),
    
    TEXT_ENTITY_EXTRACTION("TEXT_ENTITY_EXTRACTION");

    private String value;

    FeatureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeatureEnum fromValue(String value) {
      for (FeatureEnum b : FeatureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeatureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeatureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeatureEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeatureEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeatureEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEATURE = "feature";
  @SerializedName(SERIALIZED_NAME_FEATURE)
  private FeatureEnum feature;

  public static final String SERIALIZED_NAME_TEXT_CLASSIFICATION_CONFIG = "textClassificationConfig";
  @SerializedName(SERIALIZED_NAME_TEXT_CLASSIFICATION_CONFIG)
  private GoogleCloudDatalabelingV1beta1TextClassificationConfig textClassificationConfig;

  public static final String SERIALIZED_NAME_TEXT_ENTITY_EXTRACTION_CONFIG = "textEntityExtractionConfig";
  @SerializedName(SERIALIZED_NAME_TEXT_ENTITY_EXTRACTION_CONFIG)
  private GoogleCloudDatalabelingV1beta1TextEntityExtractionConfig textEntityExtractionConfig;

  public GoogleCloudDatalabelingV1beta1LabelTextRequest() {
  }

  public GoogleCloudDatalabelingV1beta1LabelTextRequest basicConfig(GoogleCloudDatalabelingV1beta1HumanAnnotationConfig basicConfig) {
    this.basicConfig = basicConfig;
    return this;
  }

  /**
   * Get basicConfig
   * @return basicConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDatalabelingV1beta1HumanAnnotationConfig getBasicConfig() {
    return basicConfig;
  }

  public void setBasicConfig(GoogleCloudDatalabelingV1beta1HumanAnnotationConfig basicConfig) {
    this.basicConfig = basicConfig;
  }


  public GoogleCloudDatalabelingV1beta1LabelTextRequest feature(FeatureEnum feature) {
    this.feature = feature;
    return this;
  }

  /**
   * Required. The type of text labeling task.
   * @return feature
   */
  @javax.annotation.Nullable
  public FeatureEnum getFeature() {
    return feature;
  }

  public void setFeature(FeatureEnum feature) {
    this.feature = feature;
  }


  public GoogleCloudDatalabelingV1beta1LabelTextRequest textClassificationConfig(GoogleCloudDatalabelingV1beta1TextClassificationConfig textClassificationConfig) {
    this.textClassificationConfig = textClassificationConfig;
    return this;
  }

  /**
   * Get textClassificationConfig
   * @return textClassificationConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDatalabelingV1beta1TextClassificationConfig getTextClassificationConfig() {
    return textClassificationConfig;
  }

  public void setTextClassificationConfig(GoogleCloudDatalabelingV1beta1TextClassificationConfig textClassificationConfig) {
    this.textClassificationConfig = textClassificationConfig;
  }


  public GoogleCloudDatalabelingV1beta1LabelTextRequest textEntityExtractionConfig(GoogleCloudDatalabelingV1beta1TextEntityExtractionConfig textEntityExtractionConfig) {
    this.textEntityExtractionConfig = textEntityExtractionConfig;
    return this;
  }

  /**
   * Get textEntityExtractionConfig
   * @return textEntityExtractionConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDatalabelingV1beta1TextEntityExtractionConfig getTextEntityExtractionConfig() {
    return textEntityExtractionConfig;
  }

  public void setTextEntityExtractionConfig(GoogleCloudDatalabelingV1beta1TextEntityExtractionConfig textEntityExtractionConfig) {
    this.textEntityExtractionConfig = textEntityExtractionConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatalabelingV1beta1LabelTextRequest googleCloudDatalabelingV1beta1LabelTextRequest = (GoogleCloudDatalabelingV1beta1LabelTextRequest) o;
    return Objects.equals(this.basicConfig, googleCloudDatalabelingV1beta1LabelTextRequest.basicConfig) &&
        Objects.equals(this.feature, googleCloudDatalabelingV1beta1LabelTextRequest.feature) &&
        Objects.equals(this.textClassificationConfig, googleCloudDatalabelingV1beta1LabelTextRequest.textClassificationConfig) &&
        Objects.equals(this.textEntityExtractionConfig, googleCloudDatalabelingV1beta1LabelTextRequest.textEntityExtractionConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basicConfig, feature, textClassificationConfig, textEntityExtractionConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatalabelingV1beta1LabelTextRequest {\n");
    sb.append("    basicConfig: ").append(toIndentedString(basicConfig)).append("\n");
    sb.append("    feature: ").append(toIndentedString(feature)).append("\n");
    sb.append("    textClassificationConfig: ").append(toIndentedString(textClassificationConfig)).append("\n");
    sb.append("    textEntityExtractionConfig: ").append(toIndentedString(textEntityExtractionConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("basicConfig");
    openapiFields.add("feature");
    openapiFields.add("textClassificationConfig");
    openapiFields.add("textEntityExtractionConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatalabelingV1beta1LabelTextRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatalabelingV1beta1LabelTextRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatalabelingV1beta1LabelTextRequest is not found in the empty JSON string", GoogleCloudDatalabelingV1beta1LabelTextRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatalabelingV1beta1LabelTextRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatalabelingV1beta1LabelTextRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `basicConfig`
      if (jsonObj.get("basicConfig") != null && !jsonObj.get("basicConfig").isJsonNull()) {
        GoogleCloudDatalabelingV1beta1HumanAnnotationConfig.validateJsonElement(jsonObj.get("basicConfig"));
      }
      if ((jsonObj.get("feature") != null && !jsonObj.get("feature").isJsonNull()) && !jsonObj.get("feature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feature").toString()));
      }
      // validate the optional field `feature`
      if (jsonObj.get("feature") != null && !jsonObj.get("feature").isJsonNull()) {
        FeatureEnum.validateJsonElement(jsonObj.get("feature"));
      }
      // validate the optional field `textClassificationConfig`
      if (jsonObj.get("textClassificationConfig") != null && !jsonObj.get("textClassificationConfig").isJsonNull()) {
        GoogleCloudDatalabelingV1beta1TextClassificationConfig.validateJsonElement(jsonObj.get("textClassificationConfig"));
      }
      // validate the optional field `textEntityExtractionConfig`
      if (jsonObj.get("textEntityExtractionConfig") != null && !jsonObj.get("textEntityExtractionConfig").isJsonNull()) {
        GoogleCloudDatalabelingV1beta1TextEntityExtractionConfig.validateJsonElement(jsonObj.get("textEntityExtractionConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatalabelingV1beta1LabelTextRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatalabelingV1beta1LabelTextRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatalabelingV1beta1LabelTextRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatalabelingV1beta1LabelTextRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatalabelingV1beta1LabelTextRequest>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatalabelingV1beta1LabelTextRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatalabelingV1beta1LabelTextRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatalabelingV1beta1LabelTextRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatalabelingV1beta1LabelTextRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatalabelingV1beta1LabelTextRequest
   */
  public static GoogleCloudDatalabelingV1beta1LabelTextRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatalabelingV1beta1LabelTextRequest.class);
  }

  /**
   * Convert an instance of GoogleCloudDatalabelingV1beta1LabelTextRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

