/*
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1EvaluationConfig;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1EvaluationMetrics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an evaluation between a machine learning model&#39;s predictions and ground truth labels. Created when an EvaluationJob runs successfully.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:41.492869-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatalabelingV1beta1Evaluation {
  /**
   * Output only. Type of task that the model version being evaluated performs, as defined in the evaluationJobConfig.inputConfig.annotationType field of the evaluation job that created this evaluation.
   */
  @JsonAdapter(AnnotationTypeEnum.Adapter.class)
  public enum AnnotationTypeEnum {
    ANNOTATION_TYPE_UNSPECIFIED("ANNOTATION_TYPE_UNSPECIFIED"),
    
    IMAGE_CLASSIFICATION_ANNOTATION("IMAGE_CLASSIFICATION_ANNOTATION"),
    
    IMAGE_BOUNDING_BOX_ANNOTATION("IMAGE_BOUNDING_BOX_ANNOTATION"),
    
    IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION("IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION"),
    
    IMAGE_BOUNDING_POLY_ANNOTATION("IMAGE_BOUNDING_POLY_ANNOTATION"),
    
    IMAGE_POLYLINE_ANNOTATION("IMAGE_POLYLINE_ANNOTATION"),
    
    IMAGE_SEGMENTATION_ANNOTATION("IMAGE_SEGMENTATION_ANNOTATION"),
    
    VIDEO_SHOTS_CLASSIFICATION_ANNOTATION("VIDEO_SHOTS_CLASSIFICATION_ANNOTATION"),
    
    VIDEO_OBJECT_TRACKING_ANNOTATION("VIDEO_OBJECT_TRACKING_ANNOTATION"),
    
    VIDEO_OBJECT_DETECTION_ANNOTATION("VIDEO_OBJECT_DETECTION_ANNOTATION"),
    
    VIDEO_EVENT_ANNOTATION("VIDEO_EVENT_ANNOTATION"),
    
    TEXT_CLASSIFICATION_ANNOTATION("TEXT_CLASSIFICATION_ANNOTATION"),
    
    TEXT_ENTITY_EXTRACTION_ANNOTATION("TEXT_ENTITY_EXTRACTION_ANNOTATION"),
    
    GENERAL_CLASSIFICATION_ANNOTATION("GENERAL_CLASSIFICATION_ANNOTATION");

    private String value;

    AnnotationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnnotationTypeEnum fromValue(String value) {
      for (AnnotationTypeEnum b : AnnotationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnnotationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnnotationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnnotationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnnotationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnnotationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANNOTATION_TYPE = "annotationType";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_TYPE)
  private AnnotationTypeEnum annotationType;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private GoogleCloudDatalabelingV1beta1EvaluationConfig config;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_EVALUATED_ITEM_COUNT = "evaluatedItemCount";
  @SerializedName(SERIALIZED_NAME_EVALUATED_ITEM_COUNT)
  private String evaluatedItemCount;

  public static final String SERIALIZED_NAME_EVALUATION_JOB_RUN_TIME = "evaluationJobRunTime";
  @SerializedName(SERIALIZED_NAME_EVALUATION_JOB_RUN_TIME)
  private String evaluationJobRunTime;

  public static final String SERIALIZED_NAME_EVALUATION_METRICS = "evaluationMetrics";
  @SerializedName(SERIALIZED_NAME_EVALUATION_METRICS)
  private GoogleCloudDatalabelingV1beta1EvaluationMetrics evaluationMetrics;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public GoogleCloudDatalabelingV1beta1Evaluation() {
  }

  public GoogleCloudDatalabelingV1beta1Evaluation annotationType(AnnotationTypeEnum annotationType) {
    this.annotationType = annotationType;
    return this;
  }

  /**
   * Output only. Type of task that the model version being evaluated performs, as defined in the evaluationJobConfig.inputConfig.annotationType field of the evaluation job that created this evaluation.
   * @return annotationType
   */
  @javax.annotation.Nullable
  public AnnotationTypeEnum getAnnotationType() {
    return annotationType;
  }

  public void setAnnotationType(AnnotationTypeEnum annotationType) {
    this.annotationType = annotationType;
  }


  public GoogleCloudDatalabelingV1beta1Evaluation config(GoogleCloudDatalabelingV1beta1EvaluationConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public GoogleCloudDatalabelingV1beta1EvaluationConfig getConfig() {
    return config;
  }

  public void setConfig(GoogleCloudDatalabelingV1beta1EvaluationConfig config) {
    this.config = config;
  }


  public GoogleCloudDatalabelingV1beta1Evaluation createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. Timestamp for when this evaluation was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public GoogleCloudDatalabelingV1beta1Evaluation evaluatedItemCount(String evaluatedItemCount) {
    this.evaluatedItemCount = evaluatedItemCount;
    return this;
  }

  /**
   * Output only. The number of items in the ground truth dataset that were used for this evaluation. Only populated when the evaulation is for certain AnnotationTypes.
   * @return evaluatedItemCount
   */
  @javax.annotation.Nullable
  public String getEvaluatedItemCount() {
    return evaluatedItemCount;
  }

  public void setEvaluatedItemCount(String evaluatedItemCount) {
    this.evaluatedItemCount = evaluatedItemCount;
  }


  public GoogleCloudDatalabelingV1beta1Evaluation evaluationJobRunTime(String evaluationJobRunTime) {
    this.evaluationJobRunTime = evaluationJobRunTime;
    return this;
  }

  /**
   * Output only. Timestamp for when the evaluation job that created this evaluation ran.
   * @return evaluationJobRunTime
   */
  @javax.annotation.Nullable
  public String getEvaluationJobRunTime() {
    return evaluationJobRunTime;
  }

  public void setEvaluationJobRunTime(String evaluationJobRunTime) {
    this.evaluationJobRunTime = evaluationJobRunTime;
  }


  public GoogleCloudDatalabelingV1beta1Evaluation evaluationMetrics(GoogleCloudDatalabelingV1beta1EvaluationMetrics evaluationMetrics) {
    this.evaluationMetrics = evaluationMetrics;
    return this;
  }

  /**
   * Get evaluationMetrics
   * @return evaluationMetrics
   */
  @javax.annotation.Nullable
  public GoogleCloudDatalabelingV1beta1EvaluationMetrics getEvaluationMetrics() {
    return evaluationMetrics;
  }

  public void setEvaluationMetrics(GoogleCloudDatalabelingV1beta1EvaluationMetrics evaluationMetrics) {
    this.evaluationMetrics = evaluationMetrics;
  }


  public GoogleCloudDatalabelingV1beta1Evaluation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. Resource name of an evaluation. The name has the following format: \&quot;projects/{project_id}/datasets/{dataset_id}/evaluations/ {evaluation_id}&#39;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatalabelingV1beta1Evaluation googleCloudDatalabelingV1beta1Evaluation = (GoogleCloudDatalabelingV1beta1Evaluation) o;
    return Objects.equals(this.annotationType, googleCloudDatalabelingV1beta1Evaluation.annotationType) &&
        Objects.equals(this.config, googleCloudDatalabelingV1beta1Evaluation.config) &&
        Objects.equals(this.createTime, googleCloudDatalabelingV1beta1Evaluation.createTime) &&
        Objects.equals(this.evaluatedItemCount, googleCloudDatalabelingV1beta1Evaluation.evaluatedItemCount) &&
        Objects.equals(this.evaluationJobRunTime, googleCloudDatalabelingV1beta1Evaluation.evaluationJobRunTime) &&
        Objects.equals(this.evaluationMetrics, googleCloudDatalabelingV1beta1Evaluation.evaluationMetrics) &&
        Objects.equals(this.name, googleCloudDatalabelingV1beta1Evaluation.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationType, config, createTime, evaluatedItemCount, evaluationJobRunTime, evaluationMetrics, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatalabelingV1beta1Evaluation {\n");
    sb.append("    annotationType: ").append(toIndentedString(annotationType)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    evaluatedItemCount: ").append(toIndentedString(evaluatedItemCount)).append("\n");
    sb.append("    evaluationJobRunTime: ").append(toIndentedString(evaluationJobRunTime)).append("\n");
    sb.append("    evaluationMetrics: ").append(toIndentedString(evaluationMetrics)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotationType");
    openapiFields.add("config");
    openapiFields.add("createTime");
    openapiFields.add("evaluatedItemCount");
    openapiFields.add("evaluationJobRunTime");
    openapiFields.add("evaluationMetrics");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatalabelingV1beta1Evaluation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatalabelingV1beta1Evaluation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatalabelingV1beta1Evaluation is not found in the empty JSON string", GoogleCloudDatalabelingV1beta1Evaluation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatalabelingV1beta1Evaluation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatalabelingV1beta1Evaluation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("annotationType") != null && !jsonObj.get("annotationType").isJsonNull()) && !jsonObj.get("annotationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotationType").toString()));
      }
      // validate the optional field `annotationType`
      if (jsonObj.get("annotationType") != null && !jsonObj.get("annotationType").isJsonNull()) {
        AnnotationTypeEnum.validateJsonElement(jsonObj.get("annotationType"));
      }
      // validate the optional field `config`
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) {
        GoogleCloudDatalabelingV1beta1EvaluationConfig.validateJsonElement(jsonObj.get("config"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("evaluatedItemCount") != null && !jsonObj.get("evaluatedItemCount").isJsonNull()) && !jsonObj.get("evaluatedItemCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluatedItemCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluatedItemCount").toString()));
      }
      if ((jsonObj.get("evaluationJobRunTime") != null && !jsonObj.get("evaluationJobRunTime").isJsonNull()) && !jsonObj.get("evaluationJobRunTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationJobRunTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationJobRunTime").toString()));
      }
      // validate the optional field `evaluationMetrics`
      if (jsonObj.get("evaluationMetrics") != null && !jsonObj.get("evaluationMetrics").isJsonNull()) {
        GoogleCloudDatalabelingV1beta1EvaluationMetrics.validateJsonElement(jsonObj.get("evaluationMetrics"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatalabelingV1beta1Evaluation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatalabelingV1beta1Evaluation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatalabelingV1beta1Evaluation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatalabelingV1beta1Evaluation.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatalabelingV1beta1Evaluation>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatalabelingV1beta1Evaluation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatalabelingV1beta1Evaluation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatalabelingV1beta1Evaluation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatalabelingV1beta1Evaluation
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatalabelingV1beta1Evaluation
   */
  public static GoogleCloudDatalabelingV1beta1Evaluation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatalabelingV1beta1Evaluation.class);
  }

  /**
   * Convert an instance of GoogleCloudDatalabelingV1beta1Evaluation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

