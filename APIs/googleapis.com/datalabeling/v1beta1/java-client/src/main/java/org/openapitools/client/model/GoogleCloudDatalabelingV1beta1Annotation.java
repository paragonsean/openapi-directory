/*
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1AnnotationMetadata;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1AnnotationValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Annotation for Example. Each example may have one or more annotations. For example in image classification problem, each image might have one or more labels. We call labels binded with this image an Annotation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:41.492869-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatalabelingV1beta1Annotation {
  public static final String SERIALIZED_NAME_ANNOTATION_METADATA = "annotationMetadata";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_METADATA)
  private GoogleCloudDatalabelingV1beta1AnnotationMetadata annotationMetadata;

  /**
   * Output only. Sentiment for this annotation.
   */
  @JsonAdapter(AnnotationSentimentEnum.Adapter.class)
  public enum AnnotationSentimentEnum {
    ANNOTATION_SENTIMENT_UNSPECIFIED("ANNOTATION_SENTIMENT_UNSPECIFIED"),
    
    NEGATIVE("NEGATIVE"),
    
    POSITIVE("POSITIVE");

    private String value;

    AnnotationSentimentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnnotationSentimentEnum fromValue(String value) {
      for (AnnotationSentimentEnum b : AnnotationSentimentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnnotationSentimentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnnotationSentimentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnnotationSentimentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnnotationSentimentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnnotationSentimentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANNOTATION_SENTIMENT = "annotationSentiment";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_SENTIMENT)
  private AnnotationSentimentEnum annotationSentiment;

  /**
   * Output only. The source of the annotation.
   */
  @JsonAdapter(AnnotationSourceEnum.Adapter.class)
  public enum AnnotationSourceEnum {
    ANNOTATION_SOURCE_UNSPECIFIED("ANNOTATION_SOURCE_UNSPECIFIED"),
    
    OPERATOR("OPERATOR");

    private String value;

    AnnotationSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnnotationSourceEnum fromValue(String value) {
      for (AnnotationSourceEnum b : AnnotationSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnnotationSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnnotationSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnnotationSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnnotationSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnnotationSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANNOTATION_SOURCE = "annotationSource";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_SOURCE)
  private AnnotationSourceEnum annotationSource;

  public static final String SERIALIZED_NAME_ANNOTATION_VALUE = "annotationValue";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_VALUE)
  private GoogleCloudDatalabelingV1beta1AnnotationValue annotationValue;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public GoogleCloudDatalabelingV1beta1Annotation() {
  }

  public GoogleCloudDatalabelingV1beta1Annotation annotationMetadata(GoogleCloudDatalabelingV1beta1AnnotationMetadata annotationMetadata) {
    this.annotationMetadata = annotationMetadata;
    return this;
  }

  /**
   * Get annotationMetadata
   * @return annotationMetadata
   */
  @javax.annotation.Nullable
  public GoogleCloudDatalabelingV1beta1AnnotationMetadata getAnnotationMetadata() {
    return annotationMetadata;
  }

  public void setAnnotationMetadata(GoogleCloudDatalabelingV1beta1AnnotationMetadata annotationMetadata) {
    this.annotationMetadata = annotationMetadata;
  }


  public GoogleCloudDatalabelingV1beta1Annotation annotationSentiment(AnnotationSentimentEnum annotationSentiment) {
    this.annotationSentiment = annotationSentiment;
    return this;
  }

  /**
   * Output only. Sentiment for this annotation.
   * @return annotationSentiment
   */
  @javax.annotation.Nullable
  public AnnotationSentimentEnum getAnnotationSentiment() {
    return annotationSentiment;
  }

  public void setAnnotationSentiment(AnnotationSentimentEnum annotationSentiment) {
    this.annotationSentiment = annotationSentiment;
  }


  public GoogleCloudDatalabelingV1beta1Annotation annotationSource(AnnotationSourceEnum annotationSource) {
    this.annotationSource = annotationSource;
    return this;
  }

  /**
   * Output only. The source of the annotation.
   * @return annotationSource
   */
  @javax.annotation.Nullable
  public AnnotationSourceEnum getAnnotationSource() {
    return annotationSource;
  }

  public void setAnnotationSource(AnnotationSourceEnum annotationSource) {
    this.annotationSource = annotationSource;
  }


  public GoogleCloudDatalabelingV1beta1Annotation annotationValue(GoogleCloudDatalabelingV1beta1AnnotationValue annotationValue) {
    this.annotationValue = annotationValue;
    return this;
  }

  /**
   * Get annotationValue
   * @return annotationValue
   */
  @javax.annotation.Nullable
  public GoogleCloudDatalabelingV1beta1AnnotationValue getAnnotationValue() {
    return annotationValue;
  }

  public void setAnnotationValue(GoogleCloudDatalabelingV1beta1AnnotationValue annotationValue) {
    this.annotationValue = annotationValue;
  }


  public GoogleCloudDatalabelingV1beta1Annotation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. Unique name of this annotation, format is: projects/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset}/examples/{example_id}/annotations/{annotation_id}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatalabelingV1beta1Annotation googleCloudDatalabelingV1beta1Annotation = (GoogleCloudDatalabelingV1beta1Annotation) o;
    return Objects.equals(this.annotationMetadata, googleCloudDatalabelingV1beta1Annotation.annotationMetadata) &&
        Objects.equals(this.annotationSentiment, googleCloudDatalabelingV1beta1Annotation.annotationSentiment) &&
        Objects.equals(this.annotationSource, googleCloudDatalabelingV1beta1Annotation.annotationSource) &&
        Objects.equals(this.annotationValue, googleCloudDatalabelingV1beta1Annotation.annotationValue) &&
        Objects.equals(this.name, googleCloudDatalabelingV1beta1Annotation.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationMetadata, annotationSentiment, annotationSource, annotationValue, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatalabelingV1beta1Annotation {\n");
    sb.append("    annotationMetadata: ").append(toIndentedString(annotationMetadata)).append("\n");
    sb.append("    annotationSentiment: ").append(toIndentedString(annotationSentiment)).append("\n");
    sb.append("    annotationSource: ").append(toIndentedString(annotationSource)).append("\n");
    sb.append("    annotationValue: ").append(toIndentedString(annotationValue)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotationMetadata");
    openapiFields.add("annotationSentiment");
    openapiFields.add("annotationSource");
    openapiFields.add("annotationValue");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatalabelingV1beta1Annotation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatalabelingV1beta1Annotation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatalabelingV1beta1Annotation is not found in the empty JSON string", GoogleCloudDatalabelingV1beta1Annotation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatalabelingV1beta1Annotation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatalabelingV1beta1Annotation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `annotationMetadata`
      if (jsonObj.get("annotationMetadata") != null && !jsonObj.get("annotationMetadata").isJsonNull()) {
        GoogleCloudDatalabelingV1beta1AnnotationMetadata.validateJsonElement(jsonObj.get("annotationMetadata"));
      }
      if ((jsonObj.get("annotationSentiment") != null && !jsonObj.get("annotationSentiment").isJsonNull()) && !jsonObj.get("annotationSentiment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationSentiment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotationSentiment").toString()));
      }
      // validate the optional field `annotationSentiment`
      if (jsonObj.get("annotationSentiment") != null && !jsonObj.get("annotationSentiment").isJsonNull()) {
        AnnotationSentimentEnum.validateJsonElement(jsonObj.get("annotationSentiment"));
      }
      if ((jsonObj.get("annotationSource") != null && !jsonObj.get("annotationSource").isJsonNull()) && !jsonObj.get("annotationSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotationSource").toString()));
      }
      // validate the optional field `annotationSource`
      if (jsonObj.get("annotationSource") != null && !jsonObj.get("annotationSource").isJsonNull()) {
        AnnotationSourceEnum.validateJsonElement(jsonObj.get("annotationSource"));
      }
      // validate the optional field `annotationValue`
      if (jsonObj.get("annotationValue") != null && !jsonObj.get("annotationValue").isJsonNull()) {
        GoogleCloudDatalabelingV1beta1AnnotationValue.validateJsonElement(jsonObj.get("annotationValue"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatalabelingV1beta1Annotation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatalabelingV1beta1Annotation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatalabelingV1beta1Annotation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatalabelingV1beta1Annotation.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatalabelingV1beta1Annotation>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatalabelingV1beta1Annotation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatalabelingV1beta1Annotation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatalabelingV1beta1Annotation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatalabelingV1beta1Annotation
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatalabelingV1beta1Annotation
   */
  public static GoogleCloudDatalabelingV1beta1Annotation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatalabelingV1beta1Annotation.class);
  }

  /**
   * Convert an instance of GoogleCloudDatalabelingV1beta1Annotation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

