/*
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1CsvInstruction;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1PdfInstruction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Instruction of how to perform the labeling task for human operators. Currently only PDF instruction is supported.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:41.492869-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatalabelingV1beta1Instruction {
  public static final String SERIALIZED_NAME_BLOCKING_RESOURCES = "blockingResources";
  @SerializedName(SERIALIZED_NAME_BLOCKING_RESOURCES)
  private List<String> blockingResources = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CSV_INSTRUCTION = "csvInstruction";
  @SerializedName(SERIALIZED_NAME_CSV_INSTRUCTION)
  private GoogleCloudDatalabelingV1beta1CsvInstruction csvInstruction;

  /**
   * Required. The data type of this instruction.
   */
  @JsonAdapter(DataTypeEnum.Adapter.class)
  public enum DataTypeEnum {
    DATA_TYPE_UNSPECIFIED("DATA_TYPE_UNSPECIFIED"),
    
    IMAGE("IMAGE"),
    
    VIDEO("VIDEO"),
    
    TEXT("TEXT"),
    
    GENERAL_DATA("GENERAL_DATA");

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataTypeEnum fromValue(String value) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private DataTypeEnum dataType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PDF_INSTRUCTION = "pdfInstruction";
  @SerializedName(SERIALIZED_NAME_PDF_INSTRUCTION)
  private GoogleCloudDatalabelingV1beta1PdfInstruction pdfInstruction;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public GoogleCloudDatalabelingV1beta1Instruction() {
  }

  public GoogleCloudDatalabelingV1beta1Instruction blockingResources(List<String> blockingResources) {
    this.blockingResources = blockingResources;
    return this;
  }

  public GoogleCloudDatalabelingV1beta1Instruction addBlockingResourcesItem(String blockingResourcesItem) {
    if (this.blockingResources == null) {
      this.blockingResources = new ArrayList<>();
    }
    this.blockingResources.add(blockingResourcesItem);
    return this;
  }

  /**
   * Output only. The names of any related resources that are blocking changes to the instruction.
   * @return blockingResources
   */
  @javax.annotation.Nullable
  public List<String> getBlockingResources() {
    return blockingResources;
  }

  public void setBlockingResources(List<String> blockingResources) {
    this.blockingResources = blockingResources;
  }


  public GoogleCloudDatalabelingV1beta1Instruction createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. Creation time of instruction.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public GoogleCloudDatalabelingV1beta1Instruction csvInstruction(GoogleCloudDatalabelingV1beta1CsvInstruction csvInstruction) {
    this.csvInstruction = csvInstruction;
    return this;
  }

  /**
   * Get csvInstruction
   * @return csvInstruction
   */
  @javax.annotation.Nullable
  public GoogleCloudDatalabelingV1beta1CsvInstruction getCsvInstruction() {
    return csvInstruction;
  }

  public void setCsvInstruction(GoogleCloudDatalabelingV1beta1CsvInstruction csvInstruction) {
    this.csvInstruction = csvInstruction;
  }


  public GoogleCloudDatalabelingV1beta1Instruction dataType(DataTypeEnum dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Required. The data type of this instruction.
   * @return dataType
   */
  @javax.annotation.Nullable
  public DataTypeEnum getDataType() {
    return dataType;
  }

  public void setDataType(DataTypeEnum dataType) {
    this.dataType = dataType;
  }


  public GoogleCloudDatalabelingV1beta1Instruction description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. User-provided description of the instruction. The description can be up to 10000 characters long.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudDatalabelingV1beta1Instruction displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The display name of the instruction. Maximum of 64 characters.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDatalabelingV1beta1Instruction name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. Instruction resource name, format: projects/{project_id}/instructions/{instruction_id}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDatalabelingV1beta1Instruction pdfInstruction(GoogleCloudDatalabelingV1beta1PdfInstruction pdfInstruction) {
    this.pdfInstruction = pdfInstruction;
    return this;
  }

  /**
   * Get pdfInstruction
   * @return pdfInstruction
   */
  @javax.annotation.Nullable
  public GoogleCloudDatalabelingV1beta1PdfInstruction getPdfInstruction() {
    return pdfInstruction;
  }

  public void setPdfInstruction(GoogleCloudDatalabelingV1beta1PdfInstruction pdfInstruction) {
    this.pdfInstruction = pdfInstruction;
  }


  public GoogleCloudDatalabelingV1beta1Instruction updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Output only. Last update time of instruction.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatalabelingV1beta1Instruction googleCloudDatalabelingV1beta1Instruction = (GoogleCloudDatalabelingV1beta1Instruction) o;
    return Objects.equals(this.blockingResources, googleCloudDatalabelingV1beta1Instruction.blockingResources) &&
        Objects.equals(this.createTime, googleCloudDatalabelingV1beta1Instruction.createTime) &&
        Objects.equals(this.csvInstruction, googleCloudDatalabelingV1beta1Instruction.csvInstruction) &&
        Objects.equals(this.dataType, googleCloudDatalabelingV1beta1Instruction.dataType) &&
        Objects.equals(this.description, googleCloudDatalabelingV1beta1Instruction.description) &&
        Objects.equals(this.displayName, googleCloudDatalabelingV1beta1Instruction.displayName) &&
        Objects.equals(this.name, googleCloudDatalabelingV1beta1Instruction.name) &&
        Objects.equals(this.pdfInstruction, googleCloudDatalabelingV1beta1Instruction.pdfInstruction) &&
        Objects.equals(this.updateTime, googleCloudDatalabelingV1beta1Instruction.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockingResources, createTime, csvInstruction, dataType, description, displayName, name, pdfInstruction, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatalabelingV1beta1Instruction {\n");
    sb.append("    blockingResources: ").append(toIndentedString(blockingResources)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    csvInstruction: ").append(toIndentedString(csvInstruction)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pdfInstruction: ").append(toIndentedString(pdfInstruction)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blockingResources");
    openapiFields.add("createTime");
    openapiFields.add("csvInstruction");
    openapiFields.add("dataType");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("name");
    openapiFields.add("pdfInstruction");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatalabelingV1beta1Instruction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatalabelingV1beta1Instruction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatalabelingV1beta1Instruction is not found in the empty JSON string", GoogleCloudDatalabelingV1beta1Instruction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatalabelingV1beta1Instruction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatalabelingV1beta1Instruction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("blockingResources") != null && !jsonObj.get("blockingResources").isJsonNull() && !jsonObj.get("blockingResources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockingResources` to be an array in the JSON string but got `%s`", jsonObj.get("blockingResources").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `csvInstruction`
      if (jsonObj.get("csvInstruction") != null && !jsonObj.get("csvInstruction").isJsonNull()) {
        GoogleCloudDatalabelingV1beta1CsvInstruction.validateJsonElement(jsonObj.get("csvInstruction"));
      }
      if ((jsonObj.get("dataType") != null && !jsonObj.get("dataType").isJsonNull()) && !jsonObj.get("dataType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataType").toString()));
      }
      // validate the optional field `dataType`
      if (jsonObj.get("dataType") != null && !jsonObj.get("dataType").isJsonNull()) {
        DataTypeEnum.validateJsonElement(jsonObj.get("dataType"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `pdfInstruction`
      if (jsonObj.get("pdfInstruction") != null && !jsonObj.get("pdfInstruction").isJsonNull()) {
        GoogleCloudDatalabelingV1beta1PdfInstruction.validateJsonElement(jsonObj.get("pdfInstruction"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatalabelingV1beta1Instruction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatalabelingV1beta1Instruction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatalabelingV1beta1Instruction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatalabelingV1beta1Instruction.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatalabelingV1beta1Instruction>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatalabelingV1beta1Instruction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatalabelingV1beta1Instruction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatalabelingV1beta1Instruction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatalabelingV1beta1Instruction
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatalabelingV1beta1Instruction
   */
  public static GoogleCloudDatalabelingV1beta1Instruction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatalabelingV1beta1Instruction.class);
  }

  /**
   * Convert an instance of GoogleCloudDatalabelingV1beta1Instruction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

