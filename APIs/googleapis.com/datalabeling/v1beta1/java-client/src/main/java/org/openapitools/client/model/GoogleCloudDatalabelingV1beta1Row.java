/*
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1AnnotationSpec;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1ConfusionMatrixEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A row in the confusion matrix. Each entry in this row has the same ground truth label.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:41.492869-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatalabelingV1beta1Row {
  public static final String SERIALIZED_NAME_ANNOTATION_SPEC = "annotationSpec";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_SPEC)
  private GoogleCloudDatalabelingV1beta1AnnotationSpec annotationSpec;

  public static final String SERIALIZED_NAME_ENTRIES = "entries";
  @SerializedName(SERIALIZED_NAME_ENTRIES)
  private List<GoogleCloudDatalabelingV1beta1ConfusionMatrixEntry> entries = new ArrayList<>();

  public GoogleCloudDatalabelingV1beta1Row() {
  }

  public GoogleCloudDatalabelingV1beta1Row annotationSpec(GoogleCloudDatalabelingV1beta1AnnotationSpec annotationSpec) {
    this.annotationSpec = annotationSpec;
    return this;
  }

  /**
   * Get annotationSpec
   * @return annotationSpec
   */
  @javax.annotation.Nullable
  public GoogleCloudDatalabelingV1beta1AnnotationSpec getAnnotationSpec() {
    return annotationSpec;
  }

  public void setAnnotationSpec(GoogleCloudDatalabelingV1beta1AnnotationSpec annotationSpec) {
    this.annotationSpec = annotationSpec;
  }


  public GoogleCloudDatalabelingV1beta1Row entries(List<GoogleCloudDatalabelingV1beta1ConfusionMatrixEntry> entries) {
    this.entries = entries;
    return this;
  }

  public GoogleCloudDatalabelingV1beta1Row addEntriesItem(GoogleCloudDatalabelingV1beta1ConfusionMatrixEntry entriesItem) {
    if (this.entries == null) {
      this.entries = new ArrayList<>();
    }
    this.entries.add(entriesItem);
    return this;
  }

  /**
   * A list of the confusion matrix entries. One entry for each possible predicted label.
   * @return entries
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDatalabelingV1beta1ConfusionMatrixEntry> getEntries() {
    return entries;
  }

  public void setEntries(List<GoogleCloudDatalabelingV1beta1ConfusionMatrixEntry> entries) {
    this.entries = entries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatalabelingV1beta1Row googleCloudDatalabelingV1beta1Row = (GoogleCloudDatalabelingV1beta1Row) o;
    return Objects.equals(this.annotationSpec, googleCloudDatalabelingV1beta1Row.annotationSpec) &&
        Objects.equals(this.entries, googleCloudDatalabelingV1beta1Row.entries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationSpec, entries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatalabelingV1beta1Row {\n");
    sb.append("    annotationSpec: ").append(toIndentedString(annotationSpec)).append("\n");
    sb.append("    entries: ").append(toIndentedString(entries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotationSpec");
    openapiFields.add("entries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatalabelingV1beta1Row
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatalabelingV1beta1Row.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatalabelingV1beta1Row is not found in the empty JSON string", GoogleCloudDatalabelingV1beta1Row.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatalabelingV1beta1Row.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatalabelingV1beta1Row` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `annotationSpec`
      if (jsonObj.get("annotationSpec") != null && !jsonObj.get("annotationSpec").isJsonNull()) {
        GoogleCloudDatalabelingV1beta1AnnotationSpec.validateJsonElement(jsonObj.get("annotationSpec"));
      }
      if (jsonObj.get("entries") != null && !jsonObj.get("entries").isJsonNull()) {
        JsonArray jsonArrayentries = jsonObj.getAsJsonArray("entries");
        if (jsonArrayentries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entries` to be an array in the JSON string but got `%s`", jsonObj.get("entries").toString()));
          }

          // validate the optional field `entries` (array)
          for (int i = 0; i < jsonArrayentries.size(); i++) {
            GoogleCloudDatalabelingV1beta1ConfusionMatrixEntry.validateJsonElement(jsonArrayentries.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatalabelingV1beta1Row.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatalabelingV1beta1Row' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatalabelingV1beta1Row> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatalabelingV1beta1Row.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatalabelingV1beta1Row>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatalabelingV1beta1Row value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatalabelingV1beta1Row read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatalabelingV1beta1Row given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatalabelingV1beta1Row
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatalabelingV1beta1Row
   */
  public static GoogleCloudDatalabelingV1beta1Row fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatalabelingV1beta1Row.class);
  }

  /**
   * Convert an instance of GoogleCloudDatalabelingV1beta1Row to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

