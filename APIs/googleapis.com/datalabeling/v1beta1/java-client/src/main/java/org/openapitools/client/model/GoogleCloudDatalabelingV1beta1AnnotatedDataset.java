/*
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1AnnotatedDatasetMetadata;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1LabelStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AnnotatedDataset is a set holding annotations for data in a Dataset. Each labeling task will generate an AnnotatedDataset under the Dataset that the task is requested for.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:41.492869-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatalabelingV1beta1AnnotatedDataset {
  /**
   * Output only. Source of the annotation.
   */
  @JsonAdapter(AnnotationSourceEnum.Adapter.class)
  public enum AnnotationSourceEnum {
    ANNOTATION_SOURCE_UNSPECIFIED("ANNOTATION_SOURCE_UNSPECIFIED"),
    
    OPERATOR("OPERATOR");

    private String value;

    AnnotationSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnnotationSourceEnum fromValue(String value) {
      for (AnnotationSourceEnum b : AnnotationSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnnotationSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnnotationSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnnotationSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnnotationSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnnotationSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANNOTATION_SOURCE = "annotationSource";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_SOURCE)
  private AnnotationSourceEnum annotationSource;

  /**
   * Output only. Type of the annotation. It is specified when starting labeling task.
   */
  @JsonAdapter(AnnotationTypeEnum.Adapter.class)
  public enum AnnotationTypeEnum {
    ANNOTATION_TYPE_UNSPECIFIED("ANNOTATION_TYPE_UNSPECIFIED"),
    
    IMAGE_CLASSIFICATION_ANNOTATION("IMAGE_CLASSIFICATION_ANNOTATION"),
    
    IMAGE_BOUNDING_BOX_ANNOTATION("IMAGE_BOUNDING_BOX_ANNOTATION"),
    
    IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION("IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION"),
    
    IMAGE_BOUNDING_POLY_ANNOTATION("IMAGE_BOUNDING_POLY_ANNOTATION"),
    
    IMAGE_POLYLINE_ANNOTATION("IMAGE_POLYLINE_ANNOTATION"),
    
    IMAGE_SEGMENTATION_ANNOTATION("IMAGE_SEGMENTATION_ANNOTATION"),
    
    VIDEO_SHOTS_CLASSIFICATION_ANNOTATION("VIDEO_SHOTS_CLASSIFICATION_ANNOTATION"),
    
    VIDEO_OBJECT_TRACKING_ANNOTATION("VIDEO_OBJECT_TRACKING_ANNOTATION"),
    
    VIDEO_OBJECT_DETECTION_ANNOTATION("VIDEO_OBJECT_DETECTION_ANNOTATION"),
    
    VIDEO_EVENT_ANNOTATION("VIDEO_EVENT_ANNOTATION"),
    
    TEXT_CLASSIFICATION_ANNOTATION("TEXT_CLASSIFICATION_ANNOTATION"),
    
    TEXT_ENTITY_EXTRACTION_ANNOTATION("TEXT_ENTITY_EXTRACTION_ANNOTATION"),
    
    GENERAL_CLASSIFICATION_ANNOTATION("GENERAL_CLASSIFICATION_ANNOTATION");

    private String value;

    AnnotationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnnotationTypeEnum fromValue(String value) {
      for (AnnotationTypeEnum b : AnnotationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnnotationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnnotationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnnotationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnnotationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnnotationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANNOTATION_TYPE = "annotationType";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_TYPE)
  private AnnotationTypeEnum annotationType;

  public static final String SERIALIZED_NAME_BLOCKING_RESOURCES = "blockingResources";
  @SerializedName(SERIALIZED_NAME_BLOCKING_RESOURCES)
  private List<String> blockingResources = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPLETED_EXAMPLE_COUNT = "completedExampleCount";
  @SerializedName(SERIALIZED_NAME_COMPLETED_EXAMPLE_COUNT)
  private String completedExampleCount;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXAMPLE_COUNT = "exampleCount";
  @SerializedName(SERIALIZED_NAME_EXAMPLE_COUNT)
  private String exampleCount;

  public static final String SERIALIZED_NAME_LABEL_STATS = "labelStats";
  @SerializedName(SERIALIZED_NAME_LABEL_STATS)
  private GoogleCloudDatalabelingV1beta1LabelStats labelStats;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private GoogleCloudDatalabelingV1beta1AnnotatedDatasetMetadata metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public GoogleCloudDatalabelingV1beta1AnnotatedDataset() {
  }

  public GoogleCloudDatalabelingV1beta1AnnotatedDataset annotationSource(AnnotationSourceEnum annotationSource) {
    this.annotationSource = annotationSource;
    return this;
  }

  /**
   * Output only. Source of the annotation.
   * @return annotationSource
   */
  @javax.annotation.Nullable
  public AnnotationSourceEnum getAnnotationSource() {
    return annotationSource;
  }

  public void setAnnotationSource(AnnotationSourceEnum annotationSource) {
    this.annotationSource = annotationSource;
  }


  public GoogleCloudDatalabelingV1beta1AnnotatedDataset annotationType(AnnotationTypeEnum annotationType) {
    this.annotationType = annotationType;
    return this;
  }

  /**
   * Output only. Type of the annotation. It is specified when starting labeling task.
   * @return annotationType
   */
  @javax.annotation.Nullable
  public AnnotationTypeEnum getAnnotationType() {
    return annotationType;
  }

  public void setAnnotationType(AnnotationTypeEnum annotationType) {
    this.annotationType = annotationType;
  }


  public GoogleCloudDatalabelingV1beta1AnnotatedDataset blockingResources(List<String> blockingResources) {
    this.blockingResources = blockingResources;
    return this;
  }

  public GoogleCloudDatalabelingV1beta1AnnotatedDataset addBlockingResourcesItem(String blockingResourcesItem) {
    if (this.blockingResources == null) {
      this.blockingResources = new ArrayList<>();
    }
    this.blockingResources.add(blockingResourcesItem);
    return this;
  }

  /**
   * Output only. The names of any related resources that are blocking changes to the annotated dataset.
   * @return blockingResources
   */
  @javax.annotation.Nullable
  public List<String> getBlockingResources() {
    return blockingResources;
  }

  public void setBlockingResources(List<String> blockingResources) {
    this.blockingResources = blockingResources;
  }


  public GoogleCloudDatalabelingV1beta1AnnotatedDataset completedExampleCount(String completedExampleCount) {
    this.completedExampleCount = completedExampleCount;
    return this;
  }

  /**
   * Output only. Number of examples that have annotation in the annotated dataset.
   * @return completedExampleCount
   */
  @javax.annotation.Nullable
  public String getCompletedExampleCount() {
    return completedExampleCount;
  }

  public void setCompletedExampleCount(String completedExampleCount) {
    this.completedExampleCount = completedExampleCount;
  }


  public GoogleCloudDatalabelingV1beta1AnnotatedDataset createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. Time the AnnotatedDataset was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public GoogleCloudDatalabelingV1beta1AnnotatedDataset description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Output only. The description of the AnnotatedDataset. It is specified in HumanAnnotationConfig when user starts a labeling task. Maximum of 10000 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudDatalabelingV1beta1AnnotatedDataset displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Output only. The display name of the AnnotatedDataset. It is specified in HumanAnnotationConfig when user starts a labeling task. Maximum of 64 characters.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDatalabelingV1beta1AnnotatedDataset exampleCount(String exampleCount) {
    this.exampleCount = exampleCount;
    return this;
  }

  /**
   * Output only. Number of examples in the annotated dataset.
   * @return exampleCount
   */
  @javax.annotation.Nullable
  public String getExampleCount() {
    return exampleCount;
  }

  public void setExampleCount(String exampleCount) {
    this.exampleCount = exampleCount;
  }


  public GoogleCloudDatalabelingV1beta1AnnotatedDataset labelStats(GoogleCloudDatalabelingV1beta1LabelStats labelStats) {
    this.labelStats = labelStats;
    return this;
  }

  /**
   * Get labelStats
   * @return labelStats
   */
  @javax.annotation.Nullable
  public GoogleCloudDatalabelingV1beta1LabelStats getLabelStats() {
    return labelStats;
  }

  public void setLabelStats(GoogleCloudDatalabelingV1beta1LabelStats labelStats) {
    this.labelStats = labelStats;
  }


  public GoogleCloudDatalabelingV1beta1AnnotatedDataset metadata(GoogleCloudDatalabelingV1beta1AnnotatedDatasetMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public GoogleCloudDatalabelingV1beta1AnnotatedDatasetMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(GoogleCloudDatalabelingV1beta1AnnotatedDatasetMetadata metadata) {
    this.metadata = metadata;
  }


  public GoogleCloudDatalabelingV1beta1AnnotatedDataset name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. AnnotatedDataset resource name in format of: projects/{project_id}/datasets/{dataset_id}/annotatedDatasets/ {annotated_dataset_id}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatalabelingV1beta1AnnotatedDataset googleCloudDatalabelingV1beta1AnnotatedDataset = (GoogleCloudDatalabelingV1beta1AnnotatedDataset) o;
    return Objects.equals(this.annotationSource, googleCloudDatalabelingV1beta1AnnotatedDataset.annotationSource) &&
        Objects.equals(this.annotationType, googleCloudDatalabelingV1beta1AnnotatedDataset.annotationType) &&
        Objects.equals(this.blockingResources, googleCloudDatalabelingV1beta1AnnotatedDataset.blockingResources) &&
        Objects.equals(this.completedExampleCount, googleCloudDatalabelingV1beta1AnnotatedDataset.completedExampleCount) &&
        Objects.equals(this.createTime, googleCloudDatalabelingV1beta1AnnotatedDataset.createTime) &&
        Objects.equals(this.description, googleCloudDatalabelingV1beta1AnnotatedDataset.description) &&
        Objects.equals(this.displayName, googleCloudDatalabelingV1beta1AnnotatedDataset.displayName) &&
        Objects.equals(this.exampleCount, googleCloudDatalabelingV1beta1AnnotatedDataset.exampleCount) &&
        Objects.equals(this.labelStats, googleCloudDatalabelingV1beta1AnnotatedDataset.labelStats) &&
        Objects.equals(this.metadata, googleCloudDatalabelingV1beta1AnnotatedDataset.metadata) &&
        Objects.equals(this.name, googleCloudDatalabelingV1beta1AnnotatedDataset.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationSource, annotationType, blockingResources, completedExampleCount, createTime, description, displayName, exampleCount, labelStats, metadata, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatalabelingV1beta1AnnotatedDataset {\n");
    sb.append("    annotationSource: ").append(toIndentedString(annotationSource)).append("\n");
    sb.append("    annotationType: ").append(toIndentedString(annotationType)).append("\n");
    sb.append("    blockingResources: ").append(toIndentedString(blockingResources)).append("\n");
    sb.append("    completedExampleCount: ").append(toIndentedString(completedExampleCount)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    exampleCount: ").append(toIndentedString(exampleCount)).append("\n");
    sb.append("    labelStats: ").append(toIndentedString(labelStats)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotationSource");
    openapiFields.add("annotationType");
    openapiFields.add("blockingResources");
    openapiFields.add("completedExampleCount");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("exampleCount");
    openapiFields.add("labelStats");
    openapiFields.add("metadata");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatalabelingV1beta1AnnotatedDataset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatalabelingV1beta1AnnotatedDataset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatalabelingV1beta1AnnotatedDataset is not found in the empty JSON string", GoogleCloudDatalabelingV1beta1AnnotatedDataset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatalabelingV1beta1AnnotatedDataset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatalabelingV1beta1AnnotatedDataset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("annotationSource") != null && !jsonObj.get("annotationSource").isJsonNull()) && !jsonObj.get("annotationSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotationSource").toString()));
      }
      // validate the optional field `annotationSource`
      if (jsonObj.get("annotationSource") != null && !jsonObj.get("annotationSource").isJsonNull()) {
        AnnotationSourceEnum.validateJsonElement(jsonObj.get("annotationSource"));
      }
      if ((jsonObj.get("annotationType") != null && !jsonObj.get("annotationType").isJsonNull()) && !jsonObj.get("annotationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotationType").toString()));
      }
      // validate the optional field `annotationType`
      if (jsonObj.get("annotationType") != null && !jsonObj.get("annotationType").isJsonNull()) {
        AnnotationTypeEnum.validateJsonElement(jsonObj.get("annotationType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("blockingResources") != null && !jsonObj.get("blockingResources").isJsonNull() && !jsonObj.get("blockingResources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockingResources` to be an array in the JSON string but got `%s`", jsonObj.get("blockingResources").toString()));
      }
      if ((jsonObj.get("completedExampleCount") != null && !jsonObj.get("completedExampleCount").isJsonNull()) && !jsonObj.get("completedExampleCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completedExampleCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completedExampleCount").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("exampleCount") != null && !jsonObj.get("exampleCount").isJsonNull()) && !jsonObj.get("exampleCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exampleCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exampleCount").toString()));
      }
      // validate the optional field `labelStats`
      if (jsonObj.get("labelStats") != null && !jsonObj.get("labelStats").isJsonNull()) {
        GoogleCloudDatalabelingV1beta1LabelStats.validateJsonElement(jsonObj.get("labelStats"));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        GoogleCloudDatalabelingV1beta1AnnotatedDatasetMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatalabelingV1beta1AnnotatedDataset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatalabelingV1beta1AnnotatedDataset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatalabelingV1beta1AnnotatedDataset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatalabelingV1beta1AnnotatedDataset.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatalabelingV1beta1AnnotatedDataset>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatalabelingV1beta1AnnotatedDataset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatalabelingV1beta1AnnotatedDataset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatalabelingV1beta1AnnotatedDataset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatalabelingV1beta1AnnotatedDataset
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatalabelingV1beta1AnnotatedDataset
   */
  public static GoogleCloudDatalabelingV1beta1AnnotatedDataset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatalabelingV1beta1AnnotatedDataset.class);
  }

  /**
   * Convert an instance of GoogleCloudDatalabelingV1beta1AnnotatedDataset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

