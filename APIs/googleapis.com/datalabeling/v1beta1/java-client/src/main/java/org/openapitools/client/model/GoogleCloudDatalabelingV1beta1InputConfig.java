/*
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1BigQuerySource;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1ClassificationMetadata;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1GcsSource;
import org.openapitools.client.model.GoogleCloudDatalabelingV1beta1TextMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration of input data, including data type, location, etc.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:41.492869-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDatalabelingV1beta1InputConfig {
  /**
   * Optional. The type of annotation to be performed on this data. You must specify this field if you are using this InputConfig in an EvaluationJob.
   */
  @JsonAdapter(AnnotationTypeEnum.Adapter.class)
  public enum AnnotationTypeEnum {
    ANNOTATION_TYPE_UNSPECIFIED("ANNOTATION_TYPE_UNSPECIFIED"),
    
    IMAGE_CLASSIFICATION_ANNOTATION("IMAGE_CLASSIFICATION_ANNOTATION"),
    
    IMAGE_BOUNDING_BOX_ANNOTATION("IMAGE_BOUNDING_BOX_ANNOTATION"),
    
    IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION("IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION"),
    
    IMAGE_BOUNDING_POLY_ANNOTATION("IMAGE_BOUNDING_POLY_ANNOTATION"),
    
    IMAGE_POLYLINE_ANNOTATION("IMAGE_POLYLINE_ANNOTATION"),
    
    IMAGE_SEGMENTATION_ANNOTATION("IMAGE_SEGMENTATION_ANNOTATION"),
    
    VIDEO_SHOTS_CLASSIFICATION_ANNOTATION("VIDEO_SHOTS_CLASSIFICATION_ANNOTATION"),
    
    VIDEO_OBJECT_TRACKING_ANNOTATION("VIDEO_OBJECT_TRACKING_ANNOTATION"),
    
    VIDEO_OBJECT_DETECTION_ANNOTATION("VIDEO_OBJECT_DETECTION_ANNOTATION"),
    
    VIDEO_EVENT_ANNOTATION("VIDEO_EVENT_ANNOTATION"),
    
    TEXT_CLASSIFICATION_ANNOTATION("TEXT_CLASSIFICATION_ANNOTATION"),
    
    TEXT_ENTITY_EXTRACTION_ANNOTATION("TEXT_ENTITY_EXTRACTION_ANNOTATION"),
    
    GENERAL_CLASSIFICATION_ANNOTATION("GENERAL_CLASSIFICATION_ANNOTATION");

    private String value;

    AnnotationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnnotationTypeEnum fromValue(String value) {
      for (AnnotationTypeEnum b : AnnotationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnnotationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnnotationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnnotationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnnotationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnnotationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANNOTATION_TYPE = "annotationType";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_TYPE)
  private AnnotationTypeEnum annotationType;

  public static final String SERIALIZED_NAME_BIGQUERY_SOURCE = "bigquerySource";
  @SerializedName(SERIALIZED_NAME_BIGQUERY_SOURCE)
  private GoogleCloudDatalabelingV1beta1BigQuerySource bigquerySource;

  public static final String SERIALIZED_NAME_CLASSIFICATION_METADATA = "classificationMetadata";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION_METADATA)
  private GoogleCloudDatalabelingV1beta1ClassificationMetadata classificationMetadata;

  /**
   * Required. Data type must be specifed when user tries to import data.
   */
  @JsonAdapter(DataTypeEnum.Adapter.class)
  public enum DataTypeEnum {
    DATA_TYPE_UNSPECIFIED("DATA_TYPE_UNSPECIFIED"),
    
    IMAGE("IMAGE"),
    
    VIDEO("VIDEO"),
    
    TEXT("TEXT"),
    
    GENERAL_DATA("GENERAL_DATA");

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataTypeEnum fromValue(String value) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private DataTypeEnum dataType;

  public static final String SERIALIZED_NAME_GCS_SOURCE = "gcsSource";
  @SerializedName(SERIALIZED_NAME_GCS_SOURCE)
  private GoogleCloudDatalabelingV1beta1GcsSource gcsSource;

  public static final String SERIALIZED_NAME_TEXT_METADATA = "textMetadata";
  @SerializedName(SERIALIZED_NAME_TEXT_METADATA)
  private GoogleCloudDatalabelingV1beta1TextMetadata textMetadata;

  public GoogleCloudDatalabelingV1beta1InputConfig() {
  }

  public GoogleCloudDatalabelingV1beta1InputConfig annotationType(AnnotationTypeEnum annotationType) {
    this.annotationType = annotationType;
    return this;
  }

  /**
   * Optional. The type of annotation to be performed on this data. You must specify this field if you are using this InputConfig in an EvaluationJob.
   * @return annotationType
   */
  @javax.annotation.Nullable
  public AnnotationTypeEnum getAnnotationType() {
    return annotationType;
  }

  public void setAnnotationType(AnnotationTypeEnum annotationType) {
    this.annotationType = annotationType;
  }


  public GoogleCloudDatalabelingV1beta1InputConfig bigquerySource(GoogleCloudDatalabelingV1beta1BigQuerySource bigquerySource) {
    this.bigquerySource = bigquerySource;
    return this;
  }

  /**
   * Get bigquerySource
   * @return bigquerySource
   */
  @javax.annotation.Nullable
  public GoogleCloudDatalabelingV1beta1BigQuerySource getBigquerySource() {
    return bigquerySource;
  }

  public void setBigquerySource(GoogleCloudDatalabelingV1beta1BigQuerySource bigquerySource) {
    this.bigquerySource = bigquerySource;
  }


  public GoogleCloudDatalabelingV1beta1InputConfig classificationMetadata(GoogleCloudDatalabelingV1beta1ClassificationMetadata classificationMetadata) {
    this.classificationMetadata = classificationMetadata;
    return this;
  }

  /**
   * Get classificationMetadata
   * @return classificationMetadata
   */
  @javax.annotation.Nullable
  public GoogleCloudDatalabelingV1beta1ClassificationMetadata getClassificationMetadata() {
    return classificationMetadata;
  }

  public void setClassificationMetadata(GoogleCloudDatalabelingV1beta1ClassificationMetadata classificationMetadata) {
    this.classificationMetadata = classificationMetadata;
  }


  public GoogleCloudDatalabelingV1beta1InputConfig dataType(DataTypeEnum dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Required. Data type must be specifed when user tries to import data.
   * @return dataType
   */
  @javax.annotation.Nullable
  public DataTypeEnum getDataType() {
    return dataType;
  }

  public void setDataType(DataTypeEnum dataType) {
    this.dataType = dataType;
  }


  public GoogleCloudDatalabelingV1beta1InputConfig gcsSource(GoogleCloudDatalabelingV1beta1GcsSource gcsSource) {
    this.gcsSource = gcsSource;
    return this;
  }

  /**
   * Get gcsSource
   * @return gcsSource
   */
  @javax.annotation.Nullable
  public GoogleCloudDatalabelingV1beta1GcsSource getGcsSource() {
    return gcsSource;
  }

  public void setGcsSource(GoogleCloudDatalabelingV1beta1GcsSource gcsSource) {
    this.gcsSource = gcsSource;
  }


  public GoogleCloudDatalabelingV1beta1InputConfig textMetadata(GoogleCloudDatalabelingV1beta1TextMetadata textMetadata) {
    this.textMetadata = textMetadata;
    return this;
  }

  /**
   * Get textMetadata
   * @return textMetadata
   */
  @javax.annotation.Nullable
  public GoogleCloudDatalabelingV1beta1TextMetadata getTextMetadata() {
    return textMetadata;
  }

  public void setTextMetadata(GoogleCloudDatalabelingV1beta1TextMetadata textMetadata) {
    this.textMetadata = textMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDatalabelingV1beta1InputConfig googleCloudDatalabelingV1beta1InputConfig = (GoogleCloudDatalabelingV1beta1InputConfig) o;
    return Objects.equals(this.annotationType, googleCloudDatalabelingV1beta1InputConfig.annotationType) &&
        Objects.equals(this.bigquerySource, googleCloudDatalabelingV1beta1InputConfig.bigquerySource) &&
        Objects.equals(this.classificationMetadata, googleCloudDatalabelingV1beta1InputConfig.classificationMetadata) &&
        Objects.equals(this.dataType, googleCloudDatalabelingV1beta1InputConfig.dataType) &&
        Objects.equals(this.gcsSource, googleCloudDatalabelingV1beta1InputConfig.gcsSource) &&
        Objects.equals(this.textMetadata, googleCloudDatalabelingV1beta1InputConfig.textMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationType, bigquerySource, classificationMetadata, dataType, gcsSource, textMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDatalabelingV1beta1InputConfig {\n");
    sb.append("    annotationType: ").append(toIndentedString(annotationType)).append("\n");
    sb.append("    bigquerySource: ").append(toIndentedString(bigquerySource)).append("\n");
    sb.append("    classificationMetadata: ").append(toIndentedString(classificationMetadata)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    gcsSource: ").append(toIndentedString(gcsSource)).append("\n");
    sb.append("    textMetadata: ").append(toIndentedString(textMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotationType");
    openapiFields.add("bigquerySource");
    openapiFields.add("classificationMetadata");
    openapiFields.add("dataType");
    openapiFields.add("gcsSource");
    openapiFields.add("textMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDatalabelingV1beta1InputConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDatalabelingV1beta1InputConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDatalabelingV1beta1InputConfig is not found in the empty JSON string", GoogleCloudDatalabelingV1beta1InputConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDatalabelingV1beta1InputConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDatalabelingV1beta1InputConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("annotationType") != null && !jsonObj.get("annotationType").isJsonNull()) && !jsonObj.get("annotationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotationType").toString()));
      }
      // validate the optional field `annotationType`
      if (jsonObj.get("annotationType") != null && !jsonObj.get("annotationType").isJsonNull()) {
        AnnotationTypeEnum.validateJsonElement(jsonObj.get("annotationType"));
      }
      // validate the optional field `bigquerySource`
      if (jsonObj.get("bigquerySource") != null && !jsonObj.get("bigquerySource").isJsonNull()) {
        GoogleCloudDatalabelingV1beta1BigQuerySource.validateJsonElement(jsonObj.get("bigquerySource"));
      }
      // validate the optional field `classificationMetadata`
      if (jsonObj.get("classificationMetadata") != null && !jsonObj.get("classificationMetadata").isJsonNull()) {
        GoogleCloudDatalabelingV1beta1ClassificationMetadata.validateJsonElement(jsonObj.get("classificationMetadata"));
      }
      if ((jsonObj.get("dataType") != null && !jsonObj.get("dataType").isJsonNull()) && !jsonObj.get("dataType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataType").toString()));
      }
      // validate the optional field `dataType`
      if (jsonObj.get("dataType") != null && !jsonObj.get("dataType").isJsonNull()) {
        DataTypeEnum.validateJsonElement(jsonObj.get("dataType"));
      }
      // validate the optional field `gcsSource`
      if (jsonObj.get("gcsSource") != null && !jsonObj.get("gcsSource").isJsonNull()) {
        GoogleCloudDatalabelingV1beta1GcsSource.validateJsonElement(jsonObj.get("gcsSource"));
      }
      // validate the optional field `textMetadata`
      if (jsonObj.get("textMetadata") != null && !jsonObj.get("textMetadata").isJsonNull()) {
        GoogleCloudDatalabelingV1beta1TextMetadata.validateJsonElement(jsonObj.get("textMetadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDatalabelingV1beta1InputConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDatalabelingV1beta1InputConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDatalabelingV1beta1InputConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDatalabelingV1beta1InputConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDatalabelingV1beta1InputConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDatalabelingV1beta1InputConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDatalabelingV1beta1InputConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDatalabelingV1beta1InputConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDatalabelingV1beta1InputConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDatalabelingV1beta1InputConfig
   */
  public static GoogleCloudDatalabelingV1beta1InputConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDatalabelingV1beta1InputConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudDatalabelingV1beta1InputConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

