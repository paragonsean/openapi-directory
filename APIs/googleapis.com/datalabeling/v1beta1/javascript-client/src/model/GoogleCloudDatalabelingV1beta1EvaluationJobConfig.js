/**
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDatalabelingV1beta1BoundingPolyConfig from './GoogleCloudDatalabelingV1beta1BoundingPolyConfig';
import GoogleCloudDatalabelingV1beta1EvaluationConfig from './GoogleCloudDatalabelingV1beta1EvaluationConfig';
import GoogleCloudDatalabelingV1beta1EvaluationJobAlertConfig from './GoogleCloudDatalabelingV1beta1EvaluationJobAlertConfig';
import GoogleCloudDatalabelingV1beta1HumanAnnotationConfig from './GoogleCloudDatalabelingV1beta1HumanAnnotationConfig';
import GoogleCloudDatalabelingV1beta1ImageClassificationConfig from './GoogleCloudDatalabelingV1beta1ImageClassificationConfig';
import GoogleCloudDatalabelingV1beta1InputConfig from './GoogleCloudDatalabelingV1beta1InputConfig';
import GoogleCloudDatalabelingV1beta1TextClassificationConfig from './GoogleCloudDatalabelingV1beta1TextClassificationConfig';

/**
 * The GoogleCloudDatalabelingV1beta1EvaluationJobConfig model module.
 * @module model/GoogleCloudDatalabelingV1beta1EvaluationJobConfig
 * @version v1beta1
 */
class GoogleCloudDatalabelingV1beta1EvaluationJobConfig {
    /**
     * Constructs a new <code>GoogleCloudDatalabelingV1beta1EvaluationJobConfig</code>.
     * Configures specific details of how a continuous evaluation job works. Provide this configuration when you create an EvaluationJob.
     * @alias module:model/GoogleCloudDatalabelingV1beta1EvaluationJobConfig
     */
    constructor() { 
        
        GoogleCloudDatalabelingV1beta1EvaluationJobConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDatalabelingV1beta1EvaluationJobConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDatalabelingV1beta1EvaluationJobConfig} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDatalabelingV1beta1EvaluationJobConfig} The populated <code>GoogleCloudDatalabelingV1beta1EvaluationJobConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDatalabelingV1beta1EvaluationJobConfig();

            if (data.hasOwnProperty('bigqueryImportKeys')) {
                obj['bigqueryImportKeys'] = ApiClient.convertToType(data['bigqueryImportKeys'], {'String': 'String'});
            }
            if (data.hasOwnProperty('boundingPolyConfig')) {
                obj['boundingPolyConfig'] = GoogleCloudDatalabelingV1beta1BoundingPolyConfig.constructFromObject(data['boundingPolyConfig']);
            }
            if (data.hasOwnProperty('evaluationConfig')) {
                obj['evaluationConfig'] = GoogleCloudDatalabelingV1beta1EvaluationConfig.constructFromObject(data['evaluationConfig']);
            }
            if (data.hasOwnProperty('evaluationJobAlertConfig')) {
                obj['evaluationJobAlertConfig'] = GoogleCloudDatalabelingV1beta1EvaluationJobAlertConfig.constructFromObject(data['evaluationJobAlertConfig']);
            }
            if (data.hasOwnProperty('exampleCount')) {
                obj['exampleCount'] = ApiClient.convertToType(data['exampleCount'], 'Number');
            }
            if (data.hasOwnProperty('exampleSamplePercentage')) {
                obj['exampleSamplePercentage'] = ApiClient.convertToType(data['exampleSamplePercentage'], 'Number');
            }
            if (data.hasOwnProperty('humanAnnotationConfig')) {
                obj['humanAnnotationConfig'] = GoogleCloudDatalabelingV1beta1HumanAnnotationConfig.constructFromObject(data['humanAnnotationConfig']);
            }
            if (data.hasOwnProperty('imageClassificationConfig')) {
                obj['imageClassificationConfig'] = GoogleCloudDatalabelingV1beta1ImageClassificationConfig.constructFromObject(data['imageClassificationConfig']);
            }
            if (data.hasOwnProperty('inputConfig')) {
                obj['inputConfig'] = GoogleCloudDatalabelingV1beta1InputConfig.constructFromObject(data['inputConfig']);
            }
            if (data.hasOwnProperty('textClassificationConfig')) {
                obj['textClassificationConfig'] = GoogleCloudDatalabelingV1beta1TextClassificationConfig.constructFromObject(data['textClassificationConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDatalabelingV1beta1EvaluationJobConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDatalabelingV1beta1EvaluationJobConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `boundingPolyConfig`
        if (data['boundingPolyConfig']) { // data not null
          GoogleCloudDatalabelingV1beta1BoundingPolyConfig.validateJSON(data['boundingPolyConfig']);
        }
        // validate the optional field `evaluationConfig`
        if (data['evaluationConfig']) { // data not null
          GoogleCloudDatalabelingV1beta1EvaluationConfig.validateJSON(data['evaluationConfig']);
        }
        // validate the optional field `evaluationJobAlertConfig`
        if (data['evaluationJobAlertConfig']) { // data not null
          GoogleCloudDatalabelingV1beta1EvaluationJobAlertConfig.validateJSON(data['evaluationJobAlertConfig']);
        }
        // validate the optional field `humanAnnotationConfig`
        if (data['humanAnnotationConfig']) { // data not null
          GoogleCloudDatalabelingV1beta1HumanAnnotationConfig.validateJSON(data['humanAnnotationConfig']);
        }
        // validate the optional field `imageClassificationConfig`
        if (data['imageClassificationConfig']) { // data not null
          GoogleCloudDatalabelingV1beta1ImageClassificationConfig.validateJSON(data['imageClassificationConfig']);
        }
        // validate the optional field `inputConfig`
        if (data['inputConfig']) { // data not null
          GoogleCloudDatalabelingV1beta1InputConfig.validateJSON(data['inputConfig']);
        }
        // validate the optional field `textClassificationConfig`
        if (data['textClassificationConfig']) { // data not null
          GoogleCloudDatalabelingV1beta1TextClassificationConfig.validateJSON(data['textClassificationConfig']);
        }

        return true;
    }


}



/**
 * Required. Prediction keys that tell Data Labeling Service where to find the data for evaluation in your BigQuery table. When the service samples prediction input and output from your model version and saves it to BigQuery, the data gets stored as JSON strings in the BigQuery table. These keys tell Data Labeling Service how to parse the JSON. You can provide the following entries in this field: * `data_json_key`: the data key for prediction input. You must provide either this key or `reference_json_key`. * `reference_json_key`: the data reference key for prediction input. You must provide either this key or `data_json_key`. * `label_json_key`: the label key for prediction output. Required. * `label_score_json_key`: the score key for prediction output. Required. * `bounding_box_json_key`: the bounding box key for prediction output. Required if your model version perform image object detection. Learn [how to configure prediction keys](/ml-engine/docs/continuous-evaluation/create-job#prediction-keys).
 * @member {Object.<String, String>} bigqueryImportKeys
 */
GoogleCloudDatalabelingV1beta1EvaluationJobConfig.prototype['bigqueryImportKeys'] = undefined;

/**
 * @member {module:model/GoogleCloudDatalabelingV1beta1BoundingPolyConfig} boundingPolyConfig
 */
GoogleCloudDatalabelingV1beta1EvaluationJobConfig.prototype['boundingPolyConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudDatalabelingV1beta1EvaluationConfig} evaluationConfig
 */
GoogleCloudDatalabelingV1beta1EvaluationJobConfig.prototype['evaluationConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudDatalabelingV1beta1EvaluationJobAlertConfig} evaluationJobAlertConfig
 */
GoogleCloudDatalabelingV1beta1EvaluationJobConfig.prototype['evaluationJobAlertConfig'] = undefined;

/**
 * Required. The maximum number of predictions to sample and save to BigQuery during each evaluation interval. This limit overrides `example_sample_percentage`: even if the service has not sampled enough predictions to fulfill `example_sample_perecentage` during an interval, it stops sampling predictions when it meets this limit.
 * @member {Number} exampleCount
 */
GoogleCloudDatalabelingV1beta1EvaluationJobConfig.prototype['exampleCount'] = undefined;

/**
 * Required. Fraction of predictions to sample and save to BigQuery during each evaluation interval. For example, 0.1 means 10% of predictions served by your model version get saved to BigQuery.
 * @member {Number} exampleSamplePercentage
 */
GoogleCloudDatalabelingV1beta1EvaluationJobConfig.prototype['exampleSamplePercentage'] = undefined;

/**
 * @member {module:model/GoogleCloudDatalabelingV1beta1HumanAnnotationConfig} humanAnnotationConfig
 */
GoogleCloudDatalabelingV1beta1EvaluationJobConfig.prototype['humanAnnotationConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudDatalabelingV1beta1ImageClassificationConfig} imageClassificationConfig
 */
GoogleCloudDatalabelingV1beta1EvaluationJobConfig.prototype['imageClassificationConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudDatalabelingV1beta1InputConfig} inputConfig
 */
GoogleCloudDatalabelingV1beta1EvaluationJobConfig.prototype['inputConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudDatalabelingV1beta1TextClassificationConfig} textClassificationConfig
 */
GoogleCloudDatalabelingV1beta1EvaluationJobConfig.prototype['textClassificationConfig'] = undefined;






export default GoogleCloudDatalabelingV1beta1EvaluationJobConfig;

