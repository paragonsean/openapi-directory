/**
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDatalabelingV1beta1CsvInstruction from './GoogleCloudDatalabelingV1beta1CsvInstruction';
import GoogleCloudDatalabelingV1beta1PdfInstruction from './GoogleCloudDatalabelingV1beta1PdfInstruction';

/**
 * The GoogleCloudDatalabelingV1beta1Instruction model module.
 * @module model/GoogleCloudDatalabelingV1beta1Instruction
 * @version v1beta1
 */
class GoogleCloudDatalabelingV1beta1Instruction {
    /**
     * Constructs a new <code>GoogleCloudDatalabelingV1beta1Instruction</code>.
     * Instruction of how to perform the labeling task for human operators. Currently only PDF instruction is supported.
     * @alias module:model/GoogleCloudDatalabelingV1beta1Instruction
     */
    constructor() { 
        
        GoogleCloudDatalabelingV1beta1Instruction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDatalabelingV1beta1Instruction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDatalabelingV1beta1Instruction} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDatalabelingV1beta1Instruction} The populated <code>GoogleCloudDatalabelingV1beta1Instruction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDatalabelingV1beta1Instruction();

            if (data.hasOwnProperty('blockingResources')) {
                obj['blockingResources'] = ApiClient.convertToType(data['blockingResources'], ['String']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('csvInstruction')) {
                obj['csvInstruction'] = GoogleCloudDatalabelingV1beta1CsvInstruction.constructFromObject(data['csvInstruction']);
            }
            if (data.hasOwnProperty('dataType')) {
                obj['dataType'] = ApiClient.convertToType(data['dataType'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pdfInstruction')) {
                obj['pdfInstruction'] = GoogleCloudDatalabelingV1beta1PdfInstruction.constructFromObject(data['pdfInstruction']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDatalabelingV1beta1Instruction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDatalabelingV1beta1Instruction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['blockingResources'])) {
            throw new Error("Expected the field `blockingResources` to be an array in the JSON data but got " + data['blockingResources']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `csvInstruction`
        if (data['csvInstruction']) { // data not null
          GoogleCloudDatalabelingV1beta1CsvInstruction.validateJSON(data['csvInstruction']);
        }
        // ensure the json data is a string
        if (data['dataType'] && !(typeof data['dataType'] === 'string' || data['dataType'] instanceof String)) {
            throw new Error("Expected the field `dataType` to be a primitive type in the JSON string but got " + data['dataType']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `pdfInstruction`
        if (data['pdfInstruction']) { // data not null
          GoogleCloudDatalabelingV1beta1PdfInstruction.validateJSON(data['pdfInstruction']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The names of any related resources that are blocking changes to the instruction.
 * @member {Array.<String>} blockingResources
 */
GoogleCloudDatalabelingV1beta1Instruction.prototype['blockingResources'] = undefined;

/**
 * Output only. Creation time of instruction.
 * @member {String} createTime
 */
GoogleCloudDatalabelingV1beta1Instruction.prototype['createTime'] = undefined;

/**
 * @member {module:model/GoogleCloudDatalabelingV1beta1CsvInstruction} csvInstruction
 */
GoogleCloudDatalabelingV1beta1Instruction.prototype['csvInstruction'] = undefined;

/**
 * Required. The data type of this instruction.
 * @member {module:model/GoogleCloudDatalabelingV1beta1Instruction.DataTypeEnum} dataType
 */
GoogleCloudDatalabelingV1beta1Instruction.prototype['dataType'] = undefined;

/**
 * Optional. User-provided description of the instruction. The description can be up to 10000 characters long.
 * @member {String} description
 */
GoogleCloudDatalabelingV1beta1Instruction.prototype['description'] = undefined;

/**
 * Required. The display name of the instruction. Maximum of 64 characters.
 * @member {String} displayName
 */
GoogleCloudDatalabelingV1beta1Instruction.prototype['displayName'] = undefined;

/**
 * Output only. Instruction resource name, format: projects/{project_id}/instructions/{instruction_id}
 * @member {String} name
 */
GoogleCloudDatalabelingV1beta1Instruction.prototype['name'] = undefined;

/**
 * @member {module:model/GoogleCloudDatalabelingV1beta1PdfInstruction} pdfInstruction
 */
GoogleCloudDatalabelingV1beta1Instruction.prototype['pdfInstruction'] = undefined;

/**
 * Output only. Last update time of instruction.
 * @member {String} updateTime
 */
GoogleCloudDatalabelingV1beta1Instruction.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>dataType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDatalabelingV1beta1Instruction['DataTypeEnum'] = {

    /**
     * value: "DATA_TYPE_UNSPECIFIED"
     * @const
     */
    "DATA_TYPE_UNSPECIFIED": "DATA_TYPE_UNSPECIFIED",

    /**
     * value: "IMAGE"
     * @const
     */
    "IMAGE": "IMAGE",

    /**
     * value: "VIDEO"
     * @const
     */
    "VIDEO": "VIDEO",

    /**
     * value: "TEXT"
     * @const
     */
    "TEXT": "TEXT",

    /**
     * value: "GENERAL_DATA"
     * @const
     */
    "GENERAL_DATA": "GENERAL_DATA"
};



export default GoogleCloudDatalabelingV1beta1Instruction;

