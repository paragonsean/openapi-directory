/**
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDatalabelingV1beta1AnnotationMetadata from './GoogleCloudDatalabelingV1beta1AnnotationMetadata';
import GoogleCloudDatalabelingV1beta1AnnotationValue from './GoogleCloudDatalabelingV1beta1AnnotationValue';

/**
 * The GoogleCloudDatalabelingV1beta1Annotation model module.
 * @module model/GoogleCloudDatalabelingV1beta1Annotation
 * @version v1beta1
 */
class GoogleCloudDatalabelingV1beta1Annotation {
    /**
     * Constructs a new <code>GoogleCloudDatalabelingV1beta1Annotation</code>.
     * Annotation for Example. Each example may have one or more annotations. For example in image classification problem, each image might have one or more labels. We call labels binded with this image an Annotation.
     * @alias module:model/GoogleCloudDatalabelingV1beta1Annotation
     */
    constructor() { 
        
        GoogleCloudDatalabelingV1beta1Annotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDatalabelingV1beta1Annotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDatalabelingV1beta1Annotation} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDatalabelingV1beta1Annotation} The populated <code>GoogleCloudDatalabelingV1beta1Annotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDatalabelingV1beta1Annotation();

            if (data.hasOwnProperty('annotationMetadata')) {
                obj['annotationMetadata'] = GoogleCloudDatalabelingV1beta1AnnotationMetadata.constructFromObject(data['annotationMetadata']);
            }
            if (data.hasOwnProperty('annotationSentiment')) {
                obj['annotationSentiment'] = ApiClient.convertToType(data['annotationSentiment'], 'String');
            }
            if (data.hasOwnProperty('annotationSource')) {
                obj['annotationSource'] = ApiClient.convertToType(data['annotationSource'], 'String');
            }
            if (data.hasOwnProperty('annotationValue')) {
                obj['annotationValue'] = GoogleCloudDatalabelingV1beta1AnnotationValue.constructFromObject(data['annotationValue']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDatalabelingV1beta1Annotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDatalabelingV1beta1Annotation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `annotationMetadata`
        if (data['annotationMetadata']) { // data not null
          GoogleCloudDatalabelingV1beta1AnnotationMetadata.validateJSON(data['annotationMetadata']);
        }
        // ensure the json data is a string
        if (data['annotationSentiment'] && !(typeof data['annotationSentiment'] === 'string' || data['annotationSentiment'] instanceof String)) {
            throw new Error("Expected the field `annotationSentiment` to be a primitive type in the JSON string but got " + data['annotationSentiment']);
        }
        // ensure the json data is a string
        if (data['annotationSource'] && !(typeof data['annotationSource'] === 'string' || data['annotationSource'] instanceof String)) {
            throw new Error("Expected the field `annotationSource` to be a primitive type in the JSON string but got " + data['annotationSource']);
        }
        // validate the optional field `annotationValue`
        if (data['annotationValue']) { // data not null
          GoogleCloudDatalabelingV1beta1AnnotationValue.validateJSON(data['annotationValue']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudDatalabelingV1beta1AnnotationMetadata} annotationMetadata
 */
GoogleCloudDatalabelingV1beta1Annotation.prototype['annotationMetadata'] = undefined;

/**
 * Output only. Sentiment for this annotation.
 * @member {module:model/GoogleCloudDatalabelingV1beta1Annotation.AnnotationSentimentEnum} annotationSentiment
 */
GoogleCloudDatalabelingV1beta1Annotation.prototype['annotationSentiment'] = undefined;

/**
 * Output only. The source of the annotation.
 * @member {module:model/GoogleCloudDatalabelingV1beta1Annotation.AnnotationSourceEnum} annotationSource
 */
GoogleCloudDatalabelingV1beta1Annotation.prototype['annotationSource'] = undefined;

/**
 * @member {module:model/GoogleCloudDatalabelingV1beta1AnnotationValue} annotationValue
 */
GoogleCloudDatalabelingV1beta1Annotation.prototype['annotationValue'] = undefined;

/**
 * Output only. Unique name of this annotation, format is: projects/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset}/examples/{example_id}/annotations/{annotation_id}
 * @member {String} name
 */
GoogleCloudDatalabelingV1beta1Annotation.prototype['name'] = undefined;





/**
 * Allowed values for the <code>annotationSentiment</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDatalabelingV1beta1Annotation['AnnotationSentimentEnum'] = {

    /**
     * value: "ANNOTATION_SENTIMENT_UNSPECIFIED"
     * @const
     */
    "ANNOTATION_SENTIMENT_UNSPECIFIED": "ANNOTATION_SENTIMENT_UNSPECIFIED",

    /**
     * value: "NEGATIVE"
     * @const
     */
    "NEGATIVE": "NEGATIVE",

    /**
     * value: "POSITIVE"
     * @const
     */
    "POSITIVE": "POSITIVE"
};


/**
 * Allowed values for the <code>annotationSource</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDatalabelingV1beta1Annotation['AnnotationSourceEnum'] = {

    /**
     * value: "ANNOTATION_SOURCE_UNSPECIFIED"
     * @const
     */
    "ANNOTATION_SOURCE_UNSPECIFIED": "ANNOTATION_SOURCE_UNSPECIFIED",

    /**
     * value: "OPERATOR"
     * @const
     */
    "OPERATOR": "OPERATOR"
};



export default GoogleCloudDatalabelingV1beta1Annotation;

