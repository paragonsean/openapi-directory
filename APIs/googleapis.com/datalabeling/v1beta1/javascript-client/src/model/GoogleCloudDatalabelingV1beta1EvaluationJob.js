/**
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDatalabelingV1beta1Attempt from './GoogleCloudDatalabelingV1beta1Attempt';
import GoogleCloudDatalabelingV1beta1EvaluationJobConfig from './GoogleCloudDatalabelingV1beta1EvaluationJobConfig';

/**
 * The GoogleCloudDatalabelingV1beta1EvaluationJob model module.
 * @module model/GoogleCloudDatalabelingV1beta1EvaluationJob
 * @version v1beta1
 */
class GoogleCloudDatalabelingV1beta1EvaluationJob {
    /**
     * Constructs a new <code>GoogleCloudDatalabelingV1beta1EvaluationJob</code>.
     * Defines an evaluation job that runs periodically to generate Evaluations. [Creating an evaluation job](/ml-engine/docs/continuous-evaluation/create-job) is the starting point for using continuous evaluation.
     * @alias module:model/GoogleCloudDatalabelingV1beta1EvaluationJob
     */
    constructor() { 
        
        GoogleCloudDatalabelingV1beta1EvaluationJob.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDatalabelingV1beta1EvaluationJob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDatalabelingV1beta1EvaluationJob} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDatalabelingV1beta1EvaluationJob} The populated <code>GoogleCloudDatalabelingV1beta1EvaluationJob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDatalabelingV1beta1EvaluationJob();

            if (data.hasOwnProperty('annotationSpecSet')) {
                obj['annotationSpecSet'] = ApiClient.convertToType(data['annotationSpecSet'], 'String');
            }
            if (data.hasOwnProperty('attempts')) {
                obj['attempts'] = ApiClient.convertToType(data['attempts'], [GoogleCloudDatalabelingV1beta1Attempt]);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('evaluationJobConfig')) {
                obj['evaluationJobConfig'] = GoogleCloudDatalabelingV1beta1EvaluationJobConfig.constructFromObject(data['evaluationJobConfig']);
            }
            if (data.hasOwnProperty('labelMissingGroundTruth')) {
                obj['labelMissingGroundTruth'] = ApiClient.convertToType(data['labelMissingGroundTruth'], 'Boolean');
            }
            if (data.hasOwnProperty('modelVersion')) {
                obj['modelVersion'] = ApiClient.convertToType(data['modelVersion'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = ApiClient.convertToType(data['schedule'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDatalabelingV1beta1EvaluationJob</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDatalabelingV1beta1EvaluationJob</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['annotationSpecSet'] && !(typeof data['annotationSpecSet'] === 'string' || data['annotationSpecSet'] instanceof String)) {
            throw new Error("Expected the field `annotationSpecSet` to be a primitive type in the JSON string but got " + data['annotationSpecSet']);
        }
        if (data['attempts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attempts'])) {
                throw new Error("Expected the field `attempts` to be an array in the JSON data but got " + data['attempts']);
            }
            // validate the optional field `attempts` (array)
            for (const item of data['attempts']) {
                GoogleCloudDatalabelingV1beta1Attempt.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `evaluationJobConfig`
        if (data['evaluationJobConfig']) { // data not null
          GoogleCloudDatalabelingV1beta1EvaluationJobConfig.validateJSON(data['evaluationJobConfig']);
        }
        // ensure the json data is a string
        if (data['modelVersion'] && !(typeof data['modelVersion'] === 'string' || data['modelVersion'] instanceof String)) {
            throw new Error("Expected the field `modelVersion` to be a primitive type in the JSON string but got " + data['modelVersion']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['schedule'] && !(typeof data['schedule'] === 'string' || data['schedule'] instanceof String)) {
            throw new Error("Expected the field `schedule` to be a primitive type in the JSON string but got " + data['schedule']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Required. Name of the AnnotationSpecSet describing all the labels that your machine learning model outputs. You must create this resource before you create an evaluation job and provide its name in the following format: \"projects/{project_id}/annotationSpecSets/{annotation_spec_set_id}\"
 * @member {String} annotationSpecSet
 */
GoogleCloudDatalabelingV1beta1EvaluationJob.prototype['annotationSpecSet'] = undefined;

/**
 * Output only. Every time the evaluation job runs and an error occurs, the failed attempt is appended to this array.
 * @member {Array.<module:model/GoogleCloudDatalabelingV1beta1Attempt>} attempts
 */
GoogleCloudDatalabelingV1beta1EvaluationJob.prototype['attempts'] = undefined;

/**
 * Output only. Timestamp of when this evaluation job was created.
 * @member {String} createTime
 */
GoogleCloudDatalabelingV1beta1EvaluationJob.prototype['createTime'] = undefined;

/**
 * Required. Description of the job. The description can be up to 25,000 characters long.
 * @member {String} description
 */
GoogleCloudDatalabelingV1beta1EvaluationJob.prototype['description'] = undefined;

/**
 * @member {module:model/GoogleCloudDatalabelingV1beta1EvaluationJobConfig} evaluationJobConfig
 */
GoogleCloudDatalabelingV1beta1EvaluationJob.prototype['evaluationJobConfig'] = undefined;

/**
 * Required. Whether you want Data Labeling Service to provide ground truth labels for prediction input. If you want the service to assign human labelers to annotate your data, set this to `true`. If you want to provide your own ground truth labels in the evaluation job's BigQuery table, set this to `false`.
 * @member {Boolean} labelMissingGroundTruth
 */
GoogleCloudDatalabelingV1beta1EvaluationJob.prototype['labelMissingGroundTruth'] = undefined;

/**
 * Required. The [AI Platform Prediction model version](/ml-engine/docs/prediction-overview) to be evaluated. Prediction input and output is sampled from this model version. When creating an evaluation job, specify the model version in the following format: \"projects/{project_id}/models/{model_name}/versions/{version_name}\" There can only be one evaluation job per model version.
 * @member {String} modelVersion
 */
GoogleCloudDatalabelingV1beta1EvaluationJob.prototype['modelVersion'] = undefined;

/**
 * Output only. After you create a job, Data Labeling Service assigns a name to the job with the following format: \"projects/{project_id}/evaluationJobs/ {evaluation_job_id}\"
 * @member {String} name
 */
GoogleCloudDatalabelingV1beta1EvaluationJob.prototype['name'] = undefined;

/**
 * Required. Describes the interval at which the job runs. This interval must be at least 1 day, and it is rounded to the nearest day. For example, if you specify a 50-hour interval, the job runs every 2 days. You can provide the schedule in [crontab format](/scheduler/docs/configuring/cron-job-schedules) or in an [English-like format](/appengine/docs/standard/python/config/cronref#schedule_format). Regardless of what you specify, the job will run at 10:00 AM UTC. Only the interval from this schedule is used, not the specific time of day.
 * @member {String} schedule
 */
GoogleCloudDatalabelingV1beta1EvaluationJob.prototype['schedule'] = undefined;

/**
 * Output only. Describes the current state of the job.
 * @member {module:model/GoogleCloudDatalabelingV1beta1EvaluationJob.StateEnum} state
 */
GoogleCloudDatalabelingV1beta1EvaluationJob.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDatalabelingV1beta1EvaluationJob['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "SCHEDULED"
     * @const
     */
    "SCHEDULED": "SCHEDULED",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "PAUSED"
     * @const
     */
    "PAUSED": "PAUSED",

    /**
     * value: "STOPPED"
     * @const
     */
    "STOPPED": "STOPPED"
};



export default GoogleCloudDatalabelingV1beta1EvaluationJob;

