/**
 * Data Labeling API
 * Public API for Google Cloud AI Data Labeling Service.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudDatalabelingV1beta1HumanAnnotationConfig model module.
 * @module model/GoogleCloudDatalabelingV1beta1HumanAnnotationConfig
 * @version v1beta1
 */
class GoogleCloudDatalabelingV1beta1HumanAnnotationConfig {
    /**
     * Constructs a new <code>GoogleCloudDatalabelingV1beta1HumanAnnotationConfig</code>.
     * Configuration for how human labeling task should be done.
     * @alias module:model/GoogleCloudDatalabelingV1beta1HumanAnnotationConfig
     */
    constructor() { 
        
        GoogleCloudDatalabelingV1beta1HumanAnnotationConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDatalabelingV1beta1HumanAnnotationConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDatalabelingV1beta1HumanAnnotationConfig} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDatalabelingV1beta1HumanAnnotationConfig} The populated <code>GoogleCloudDatalabelingV1beta1HumanAnnotationConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDatalabelingV1beta1HumanAnnotationConfig();

            if (data.hasOwnProperty('annotatedDatasetDescription')) {
                obj['annotatedDatasetDescription'] = ApiClient.convertToType(data['annotatedDatasetDescription'], 'String');
            }
            if (data.hasOwnProperty('annotatedDatasetDisplayName')) {
                obj['annotatedDatasetDisplayName'] = ApiClient.convertToType(data['annotatedDatasetDisplayName'], 'String');
            }
            if (data.hasOwnProperty('contributorEmails')) {
                obj['contributorEmails'] = ApiClient.convertToType(data['contributorEmails'], ['String']);
            }
            if (data.hasOwnProperty('instruction')) {
                obj['instruction'] = ApiClient.convertToType(data['instruction'], 'String');
            }
            if (data.hasOwnProperty('labelGroup')) {
                obj['labelGroup'] = ApiClient.convertToType(data['labelGroup'], 'String');
            }
            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('questionDuration')) {
                obj['questionDuration'] = ApiClient.convertToType(data['questionDuration'], 'String');
            }
            if (data.hasOwnProperty('replicaCount')) {
                obj['replicaCount'] = ApiClient.convertToType(data['replicaCount'], 'Number');
            }
            if (data.hasOwnProperty('userEmailAddress')) {
                obj['userEmailAddress'] = ApiClient.convertToType(data['userEmailAddress'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDatalabelingV1beta1HumanAnnotationConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDatalabelingV1beta1HumanAnnotationConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['annotatedDatasetDescription'] && !(typeof data['annotatedDatasetDescription'] === 'string' || data['annotatedDatasetDescription'] instanceof String)) {
            throw new Error("Expected the field `annotatedDatasetDescription` to be a primitive type in the JSON string but got " + data['annotatedDatasetDescription']);
        }
        // ensure the json data is a string
        if (data['annotatedDatasetDisplayName'] && !(typeof data['annotatedDatasetDisplayName'] === 'string' || data['annotatedDatasetDisplayName'] instanceof String)) {
            throw new Error("Expected the field `annotatedDatasetDisplayName` to be a primitive type in the JSON string but got " + data['annotatedDatasetDisplayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['contributorEmails'])) {
            throw new Error("Expected the field `contributorEmails` to be an array in the JSON data but got " + data['contributorEmails']);
        }
        // ensure the json data is a string
        if (data['instruction'] && !(typeof data['instruction'] === 'string' || data['instruction'] instanceof String)) {
            throw new Error("Expected the field `instruction` to be a primitive type in the JSON string but got " + data['instruction']);
        }
        // ensure the json data is a string
        if (data['labelGroup'] && !(typeof data['labelGroup'] === 'string' || data['labelGroup'] instanceof String)) {
            throw new Error("Expected the field `labelGroup` to be a primitive type in the JSON string but got " + data['labelGroup']);
        }
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        // ensure the json data is a string
        if (data['questionDuration'] && !(typeof data['questionDuration'] === 'string' || data['questionDuration'] instanceof String)) {
            throw new Error("Expected the field `questionDuration` to be a primitive type in the JSON string but got " + data['questionDuration']);
        }
        // ensure the json data is a string
        if (data['userEmailAddress'] && !(typeof data['userEmailAddress'] === 'string' || data['userEmailAddress'] instanceof String)) {
            throw new Error("Expected the field `userEmailAddress` to be a primitive type in the JSON string but got " + data['userEmailAddress']);
        }

        return true;
    }


}



/**
 * Optional. A human-readable description for AnnotatedDataset. The description can be up to 10000 characters long.
 * @member {String} annotatedDatasetDescription
 */
GoogleCloudDatalabelingV1beta1HumanAnnotationConfig.prototype['annotatedDatasetDescription'] = undefined;

/**
 * Required. A human-readable name for AnnotatedDataset defined by users. Maximum of 64 characters .
 * @member {String} annotatedDatasetDisplayName
 */
GoogleCloudDatalabelingV1beta1HumanAnnotationConfig.prototype['annotatedDatasetDisplayName'] = undefined;

/**
 * Optional. If you want your own labeling contributors to manage and work on this labeling request, you can set these contributors here. We will give them access to the question types in crowdcompute. Note that these emails must be registered in crowdcompute worker UI: https://crowd-compute.appspot.com/
 * @member {Array.<String>} contributorEmails
 */
GoogleCloudDatalabelingV1beta1HumanAnnotationConfig.prototype['contributorEmails'] = undefined;

/**
 * Required. Instruction resource name.
 * @member {String} instruction
 */
GoogleCloudDatalabelingV1beta1HumanAnnotationConfig.prototype['instruction'] = undefined;

/**
 * Optional. A human-readable label used to logically group labeling tasks. This string must match the regular expression `[a-zA-Z\\\\d_-]{0,128}`.
 * @member {String} labelGroup
 */
GoogleCloudDatalabelingV1beta1HumanAnnotationConfig.prototype['labelGroup'] = undefined;

/**
 * Optional. The Language of this question, as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). Default value is en-US. Only need to set this when task is language related. For example, French text classification.
 * @member {String} languageCode
 */
GoogleCloudDatalabelingV1beta1HumanAnnotationConfig.prototype['languageCode'] = undefined;

/**
 * Optional. Maximum duration for contributors to answer a question. Maximum is 3600 seconds. Default is 3600 seconds.
 * @member {String} questionDuration
 */
GoogleCloudDatalabelingV1beta1HumanAnnotationConfig.prototype['questionDuration'] = undefined;

/**
 * Optional. Replication of questions. Each question will be sent to up to this number of contributors to label. Aggregated answers will be returned. Default is set to 1. For image related labeling, valid values are 1, 3, 5.
 * @member {Number} replicaCount
 */
GoogleCloudDatalabelingV1beta1HumanAnnotationConfig.prototype['replicaCount'] = undefined;

/**
 * Email of the user who started the labeling task and should be notified by email. If empty no notification will be sent.
 * @member {String} userEmailAddress
 */
GoogleCloudDatalabelingV1beta1HumanAnnotationConfig.prototype['userEmailAddress'] = undefined;






export default GoogleCloudDatalabelingV1beta1HumanAnnotationConfig;

