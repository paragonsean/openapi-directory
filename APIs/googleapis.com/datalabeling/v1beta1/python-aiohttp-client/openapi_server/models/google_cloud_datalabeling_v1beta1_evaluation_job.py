# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datalabeling_v1beta1_attempt import GoogleCloudDatalabelingV1beta1Attempt
from openapi_server.models.google_cloud_datalabeling_v1beta1_evaluation_job_config import GoogleCloudDatalabelingV1beta1EvaluationJobConfig
from openapi_server import util


class GoogleCloudDatalabelingV1beta1EvaluationJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_spec_set: str=None, attempts: List[GoogleCloudDatalabelingV1beta1Attempt]=None, create_time: str=None, description: str=None, evaluation_job_config: GoogleCloudDatalabelingV1beta1EvaluationJobConfig=None, label_missing_ground_truth: bool=None, model_version: str=None, name: str=None, schedule: str=None, state: str=None):
        """GoogleCloudDatalabelingV1beta1EvaluationJob - a model defined in OpenAPI

        :param annotation_spec_set: The annotation_spec_set of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :param attempts: The attempts of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :param create_time: The create_time of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :param description: The description of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :param evaluation_job_config: The evaluation_job_config of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :param label_missing_ground_truth: The label_missing_ground_truth of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :param model_version: The model_version of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :param name: The name of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :param schedule: The schedule of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :param state: The state of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        """
        self.openapi_types = {
            'annotation_spec_set': str,
            'attempts': List[GoogleCloudDatalabelingV1beta1Attempt],
            'create_time': str,
            'description': str,
            'evaluation_job_config': GoogleCloudDatalabelingV1beta1EvaluationJobConfig,
            'label_missing_ground_truth': bool,
            'model_version': str,
            'name': str,
            'schedule': str,
            'state': str
        }

        self.attribute_map = {
            'annotation_spec_set': 'annotationSpecSet',
            'attempts': 'attempts',
            'create_time': 'createTime',
            'description': 'description',
            'evaluation_job_config': 'evaluationJobConfig',
            'label_missing_ground_truth': 'labelMissingGroundTruth',
            'model_version': 'modelVersion',
            'name': 'name',
            'schedule': 'schedule',
            'state': 'state'
        }

        self._annotation_spec_set = annotation_spec_set
        self._attempts = attempts
        self._create_time = create_time
        self._description = description
        self._evaluation_job_config = evaluation_job_config
        self._label_missing_ground_truth = label_missing_ground_truth
        self._model_version = model_version
        self._name = name
        self._schedule = schedule
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatalabelingV1beta1EvaluationJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatalabelingV1beta1EvaluationJob of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_spec_set(self):
        """Gets the annotation_spec_set of this GoogleCloudDatalabelingV1beta1EvaluationJob.

        Required. Name of the AnnotationSpecSet describing all the labels that your machine learning model outputs. You must create this resource before you create an evaluation job and provide its name in the following format: \"projects/{project_id}/annotationSpecSets/{annotation_spec_set_id}\"

        :return: The annotation_spec_set of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :rtype: str
        """
        return self._annotation_spec_set

    @annotation_spec_set.setter
    def annotation_spec_set(self, annotation_spec_set):
        """Sets the annotation_spec_set of this GoogleCloudDatalabelingV1beta1EvaluationJob.

        Required. Name of the AnnotationSpecSet describing all the labels that your machine learning model outputs. You must create this resource before you create an evaluation job and provide its name in the following format: \"projects/{project_id}/annotationSpecSets/{annotation_spec_set_id}\"

        :param annotation_spec_set: The annotation_spec_set of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :type annotation_spec_set: str
        """

        self._annotation_spec_set = annotation_spec_set

    @property
    def attempts(self):
        """Gets the attempts of this GoogleCloudDatalabelingV1beta1EvaluationJob.

        Output only. Every time the evaluation job runs and an error occurs, the failed attempt is appended to this array.

        :return: The attempts of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :rtype: List[GoogleCloudDatalabelingV1beta1Attempt]
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts):
        """Sets the attempts of this GoogleCloudDatalabelingV1beta1EvaluationJob.

        Output only. Every time the evaluation job runs and an error occurs, the failed attempt is appended to this array.

        :param attempts: The attempts of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :type attempts: List[GoogleCloudDatalabelingV1beta1Attempt]
        """

        self._attempts = attempts

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudDatalabelingV1beta1EvaluationJob.

        Output only. Timestamp of when this evaluation job was created.

        :return: The create_time of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudDatalabelingV1beta1EvaluationJob.

        Output only. Timestamp of when this evaluation job was created.

        :param create_time: The create_time of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this GoogleCloudDatalabelingV1beta1EvaluationJob.

        Required. Description of the job. The description can be up to 25,000 characters long.

        :return: The description of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudDatalabelingV1beta1EvaluationJob.

        Required. Description of the job. The description can be up to 25,000 characters long.

        :param description: The description of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :type description: str
        """

        self._description = description

    @property
    def evaluation_job_config(self):
        """Gets the evaluation_job_config of this GoogleCloudDatalabelingV1beta1EvaluationJob.


        :return: The evaluation_job_config of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :rtype: GoogleCloudDatalabelingV1beta1EvaluationJobConfig
        """
        return self._evaluation_job_config

    @evaluation_job_config.setter
    def evaluation_job_config(self, evaluation_job_config):
        """Sets the evaluation_job_config of this GoogleCloudDatalabelingV1beta1EvaluationJob.


        :param evaluation_job_config: The evaluation_job_config of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :type evaluation_job_config: GoogleCloudDatalabelingV1beta1EvaluationJobConfig
        """

        self._evaluation_job_config = evaluation_job_config

    @property
    def label_missing_ground_truth(self):
        """Gets the label_missing_ground_truth of this GoogleCloudDatalabelingV1beta1EvaluationJob.

        Required. Whether you want Data Labeling Service to provide ground truth labels for prediction input. If you want the service to assign human labelers to annotate your data, set this to `true`. If you want to provide your own ground truth labels in the evaluation job's BigQuery table, set this to `false`.

        :return: The label_missing_ground_truth of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :rtype: bool
        """
        return self._label_missing_ground_truth

    @label_missing_ground_truth.setter
    def label_missing_ground_truth(self, label_missing_ground_truth):
        """Sets the label_missing_ground_truth of this GoogleCloudDatalabelingV1beta1EvaluationJob.

        Required. Whether you want Data Labeling Service to provide ground truth labels for prediction input. If you want the service to assign human labelers to annotate your data, set this to `true`. If you want to provide your own ground truth labels in the evaluation job's BigQuery table, set this to `false`.

        :param label_missing_ground_truth: The label_missing_ground_truth of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :type label_missing_ground_truth: bool
        """

        self._label_missing_ground_truth = label_missing_ground_truth

    @property
    def model_version(self):
        """Gets the model_version of this GoogleCloudDatalabelingV1beta1EvaluationJob.

        Required. The [AI Platform Prediction model version](/ml-engine/docs/prediction-overview) to be evaluated. Prediction input and output is sampled from this model version. When creating an evaluation job, specify the model version in the following format: \"projects/{project_id}/models/{model_name}/versions/{version_name}\" There can only be one evaluation job per model version.

        :return: The model_version of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :rtype: str
        """
        return self._model_version

    @model_version.setter
    def model_version(self, model_version):
        """Sets the model_version of this GoogleCloudDatalabelingV1beta1EvaluationJob.

        Required. The [AI Platform Prediction model version](/ml-engine/docs/prediction-overview) to be evaluated. Prediction input and output is sampled from this model version. When creating an evaluation job, specify the model version in the following format: \"projects/{project_id}/models/{model_name}/versions/{version_name}\" There can only be one evaluation job per model version.

        :param model_version: The model_version of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :type model_version: str
        """

        self._model_version = model_version

    @property
    def name(self):
        """Gets the name of this GoogleCloudDatalabelingV1beta1EvaluationJob.

        Output only. After you create a job, Data Labeling Service assigns a name to the job with the following format: \"projects/{project_id}/evaluationJobs/ {evaluation_job_id}\"

        :return: The name of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDatalabelingV1beta1EvaluationJob.

        Output only. After you create a job, Data Labeling Service assigns a name to the job with the following format: \"projects/{project_id}/evaluationJobs/ {evaluation_job_id}\"

        :param name: The name of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :type name: str
        """

        self._name = name

    @property
    def schedule(self):
        """Gets the schedule of this GoogleCloudDatalabelingV1beta1EvaluationJob.

        Required. Describes the interval at which the job runs. This interval must be at least 1 day, and it is rounded to the nearest day. For example, if you specify a 50-hour interval, the job runs every 2 days. You can provide the schedule in [crontab format](/scheduler/docs/configuring/cron-job-schedules) or in an [English-like format](/appengine/docs/standard/python/config/cronref#schedule_format). Regardless of what you specify, the job will run at 10:00 AM UTC. Only the interval from this schedule is used, not the specific time of day.

        :return: The schedule of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this GoogleCloudDatalabelingV1beta1EvaluationJob.

        Required. Describes the interval at which the job runs. This interval must be at least 1 day, and it is rounded to the nearest day. For example, if you specify a 50-hour interval, the job runs every 2 days. You can provide the schedule in [crontab format](/scheduler/docs/configuring/cron-job-schedules) or in an [English-like format](/appengine/docs/standard/python/config/cronref#schedule_format). Regardless of what you specify, the job will run at 10:00 AM UTC. Only the interval from this schedule is used, not the specific time of day.

        :param schedule: The schedule of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :type schedule: str
        """

        self._schedule = schedule

    @property
    def state(self):
        """Gets the state of this GoogleCloudDatalabelingV1beta1EvaluationJob.

        Output only. Describes the current state of the job.

        :return: The state of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudDatalabelingV1beta1EvaluationJob.

        Output only. Describes the current state of the job.

        :param state: The state of this GoogleCloudDatalabelingV1beta1EvaluationJob.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "SCHEDULED", "RUNNING", "PAUSED", "STOPPED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
