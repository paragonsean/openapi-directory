# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datalabeling_v1beta1_bounding_poly_config import GoogleCloudDatalabelingV1beta1BoundingPolyConfig
from openapi_server.models.google_cloud_datalabeling_v1beta1_evaluation_config import GoogleCloudDatalabelingV1beta1EvaluationConfig
from openapi_server.models.google_cloud_datalabeling_v1beta1_evaluation_job_alert_config import GoogleCloudDatalabelingV1beta1EvaluationJobAlertConfig
from openapi_server.models.google_cloud_datalabeling_v1beta1_human_annotation_config import GoogleCloudDatalabelingV1beta1HumanAnnotationConfig
from openapi_server.models.google_cloud_datalabeling_v1beta1_image_classification_config import GoogleCloudDatalabelingV1beta1ImageClassificationConfig
from openapi_server.models.google_cloud_datalabeling_v1beta1_input_config import GoogleCloudDatalabelingV1beta1InputConfig
from openapi_server.models.google_cloud_datalabeling_v1beta1_text_classification_config import GoogleCloudDatalabelingV1beta1TextClassificationConfig
from openapi_server import util


class GoogleCloudDatalabelingV1beta1EvaluationJobConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bigquery_import_keys: Dict[str, str]=None, bounding_poly_config: GoogleCloudDatalabelingV1beta1BoundingPolyConfig=None, evaluation_config: GoogleCloudDatalabelingV1beta1EvaluationConfig=None, evaluation_job_alert_config: GoogleCloudDatalabelingV1beta1EvaluationJobAlertConfig=None, example_count: int=None, example_sample_percentage: float=None, human_annotation_config: GoogleCloudDatalabelingV1beta1HumanAnnotationConfig=None, image_classification_config: GoogleCloudDatalabelingV1beta1ImageClassificationConfig=None, input_config: GoogleCloudDatalabelingV1beta1InputConfig=None, text_classification_config: GoogleCloudDatalabelingV1beta1TextClassificationConfig=None):
        """GoogleCloudDatalabelingV1beta1EvaluationJobConfig - a model defined in OpenAPI

        :param bigquery_import_keys: The bigquery_import_keys of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :param bounding_poly_config: The bounding_poly_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :param evaluation_config: The evaluation_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :param evaluation_job_alert_config: The evaluation_job_alert_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :param example_count: The example_count of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :param example_sample_percentage: The example_sample_percentage of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :param human_annotation_config: The human_annotation_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :param image_classification_config: The image_classification_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :param input_config: The input_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :param text_classification_config: The text_classification_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        """
        self.openapi_types = {
            'bigquery_import_keys': Dict[str, str],
            'bounding_poly_config': GoogleCloudDatalabelingV1beta1BoundingPolyConfig,
            'evaluation_config': GoogleCloudDatalabelingV1beta1EvaluationConfig,
            'evaluation_job_alert_config': GoogleCloudDatalabelingV1beta1EvaluationJobAlertConfig,
            'example_count': int,
            'example_sample_percentage': float,
            'human_annotation_config': GoogleCloudDatalabelingV1beta1HumanAnnotationConfig,
            'image_classification_config': GoogleCloudDatalabelingV1beta1ImageClassificationConfig,
            'input_config': GoogleCloudDatalabelingV1beta1InputConfig,
            'text_classification_config': GoogleCloudDatalabelingV1beta1TextClassificationConfig
        }

        self.attribute_map = {
            'bigquery_import_keys': 'bigqueryImportKeys',
            'bounding_poly_config': 'boundingPolyConfig',
            'evaluation_config': 'evaluationConfig',
            'evaluation_job_alert_config': 'evaluationJobAlertConfig',
            'example_count': 'exampleCount',
            'example_sample_percentage': 'exampleSamplePercentage',
            'human_annotation_config': 'humanAnnotationConfig',
            'image_classification_config': 'imageClassificationConfig',
            'input_config': 'inputConfig',
            'text_classification_config': 'textClassificationConfig'
        }

        self._bigquery_import_keys = bigquery_import_keys
        self._bounding_poly_config = bounding_poly_config
        self._evaluation_config = evaluation_config
        self._evaluation_job_alert_config = evaluation_job_alert_config
        self._example_count = example_count
        self._example_sample_percentage = example_sample_percentage
        self._human_annotation_config = human_annotation_config
        self._image_classification_config = image_classification_config
        self._input_config = input_config
        self._text_classification_config = text_classification_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatalabelingV1beta1EvaluationJobConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatalabelingV1beta1EvaluationJobConfig of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bigquery_import_keys(self):
        """Gets the bigquery_import_keys of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.

        Required. Prediction keys that tell Data Labeling Service where to find the data for evaluation in your BigQuery table. When the service samples prediction input and output from your model version and saves it to BigQuery, the data gets stored as JSON strings in the BigQuery table. These keys tell Data Labeling Service how to parse the JSON. You can provide the following entries in this field: * `data_json_key`: the data key for prediction input. You must provide either this key or `reference_json_key`. * `reference_json_key`: the data reference key for prediction input. You must provide either this key or `data_json_key`. * `label_json_key`: the label key for prediction output. Required. * `label_score_json_key`: the score key for prediction output. Required. * `bounding_box_json_key`: the bounding box key for prediction output. Required if your model version perform image object detection. Learn [how to configure prediction keys](/ml-engine/docs/continuous-evaluation/create-job#prediction-keys).

        :return: The bigquery_import_keys of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :rtype: Dict[str, str]
        """
        return self._bigquery_import_keys

    @bigquery_import_keys.setter
    def bigquery_import_keys(self, bigquery_import_keys):
        """Sets the bigquery_import_keys of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.

        Required. Prediction keys that tell Data Labeling Service where to find the data for evaluation in your BigQuery table. When the service samples prediction input and output from your model version and saves it to BigQuery, the data gets stored as JSON strings in the BigQuery table. These keys tell Data Labeling Service how to parse the JSON. You can provide the following entries in this field: * `data_json_key`: the data key for prediction input. You must provide either this key or `reference_json_key`. * `reference_json_key`: the data reference key for prediction input. You must provide either this key or `data_json_key`. * `label_json_key`: the label key for prediction output. Required. * `label_score_json_key`: the score key for prediction output. Required. * `bounding_box_json_key`: the bounding box key for prediction output. Required if your model version perform image object detection. Learn [how to configure prediction keys](/ml-engine/docs/continuous-evaluation/create-job#prediction-keys).

        :param bigquery_import_keys: The bigquery_import_keys of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :type bigquery_import_keys: Dict[str, str]
        """

        self._bigquery_import_keys = bigquery_import_keys

    @property
    def bounding_poly_config(self):
        """Gets the bounding_poly_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.


        :return: The bounding_poly_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :rtype: GoogleCloudDatalabelingV1beta1BoundingPolyConfig
        """
        return self._bounding_poly_config

    @bounding_poly_config.setter
    def bounding_poly_config(self, bounding_poly_config):
        """Sets the bounding_poly_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.


        :param bounding_poly_config: The bounding_poly_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :type bounding_poly_config: GoogleCloudDatalabelingV1beta1BoundingPolyConfig
        """

        self._bounding_poly_config = bounding_poly_config

    @property
    def evaluation_config(self):
        """Gets the evaluation_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.


        :return: The evaluation_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :rtype: GoogleCloudDatalabelingV1beta1EvaluationConfig
        """
        return self._evaluation_config

    @evaluation_config.setter
    def evaluation_config(self, evaluation_config):
        """Sets the evaluation_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.


        :param evaluation_config: The evaluation_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :type evaluation_config: GoogleCloudDatalabelingV1beta1EvaluationConfig
        """

        self._evaluation_config = evaluation_config

    @property
    def evaluation_job_alert_config(self):
        """Gets the evaluation_job_alert_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.


        :return: The evaluation_job_alert_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :rtype: GoogleCloudDatalabelingV1beta1EvaluationJobAlertConfig
        """
        return self._evaluation_job_alert_config

    @evaluation_job_alert_config.setter
    def evaluation_job_alert_config(self, evaluation_job_alert_config):
        """Sets the evaluation_job_alert_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.


        :param evaluation_job_alert_config: The evaluation_job_alert_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :type evaluation_job_alert_config: GoogleCloudDatalabelingV1beta1EvaluationJobAlertConfig
        """

        self._evaluation_job_alert_config = evaluation_job_alert_config

    @property
    def example_count(self):
        """Gets the example_count of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.

        Required. The maximum number of predictions to sample and save to BigQuery during each evaluation interval. This limit overrides `example_sample_percentage`: even if the service has not sampled enough predictions to fulfill `example_sample_perecentage` during an interval, it stops sampling predictions when it meets this limit.

        :return: The example_count of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :rtype: int
        """
        return self._example_count

    @example_count.setter
    def example_count(self, example_count):
        """Sets the example_count of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.

        Required. The maximum number of predictions to sample and save to BigQuery during each evaluation interval. This limit overrides `example_sample_percentage`: even if the service has not sampled enough predictions to fulfill `example_sample_perecentage` during an interval, it stops sampling predictions when it meets this limit.

        :param example_count: The example_count of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :type example_count: int
        """

        self._example_count = example_count

    @property
    def example_sample_percentage(self):
        """Gets the example_sample_percentage of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.

        Required. Fraction of predictions to sample and save to BigQuery during each evaluation interval. For example, 0.1 means 10% of predictions served by your model version get saved to BigQuery.

        :return: The example_sample_percentage of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :rtype: float
        """
        return self._example_sample_percentage

    @example_sample_percentage.setter
    def example_sample_percentage(self, example_sample_percentage):
        """Sets the example_sample_percentage of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.

        Required. Fraction of predictions to sample and save to BigQuery during each evaluation interval. For example, 0.1 means 10% of predictions served by your model version get saved to BigQuery.

        :param example_sample_percentage: The example_sample_percentage of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :type example_sample_percentage: float
        """

        self._example_sample_percentage = example_sample_percentage

    @property
    def human_annotation_config(self):
        """Gets the human_annotation_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.


        :return: The human_annotation_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :rtype: GoogleCloudDatalabelingV1beta1HumanAnnotationConfig
        """
        return self._human_annotation_config

    @human_annotation_config.setter
    def human_annotation_config(self, human_annotation_config):
        """Sets the human_annotation_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.


        :param human_annotation_config: The human_annotation_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :type human_annotation_config: GoogleCloudDatalabelingV1beta1HumanAnnotationConfig
        """

        self._human_annotation_config = human_annotation_config

    @property
    def image_classification_config(self):
        """Gets the image_classification_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.


        :return: The image_classification_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :rtype: GoogleCloudDatalabelingV1beta1ImageClassificationConfig
        """
        return self._image_classification_config

    @image_classification_config.setter
    def image_classification_config(self, image_classification_config):
        """Sets the image_classification_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.


        :param image_classification_config: The image_classification_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :type image_classification_config: GoogleCloudDatalabelingV1beta1ImageClassificationConfig
        """

        self._image_classification_config = image_classification_config

    @property
    def input_config(self):
        """Gets the input_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.


        :return: The input_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :rtype: GoogleCloudDatalabelingV1beta1InputConfig
        """
        return self._input_config

    @input_config.setter
    def input_config(self, input_config):
        """Sets the input_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.


        :param input_config: The input_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :type input_config: GoogleCloudDatalabelingV1beta1InputConfig
        """

        self._input_config = input_config

    @property
    def text_classification_config(self):
        """Gets the text_classification_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.


        :return: The text_classification_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :rtype: GoogleCloudDatalabelingV1beta1TextClassificationConfig
        """
        return self._text_classification_config

    @text_classification_config.setter
    def text_classification_config(self, text_classification_config):
        """Sets the text_classification_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.


        :param text_classification_config: The text_classification_config of this GoogleCloudDatalabelingV1beta1EvaluationJobConfig.
        :type text_classification_config: GoogleCloudDatalabelingV1beta1TextClassificationConfig
        """

        self._text_classification_config = text_classification_config
