# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datalabeling_v1beta1_annotation_spec import GoogleCloudDatalabelingV1beta1AnnotationSpec
from openapi_server import util


class GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_colors: Dict[str, GoogleCloudDatalabelingV1beta1AnnotationSpec]=None, image_bytes: str=None, mime_type: str=None):
        """GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation - a model defined in OpenAPI

        :param annotation_colors: The annotation_colors of this GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation.
        :param image_bytes: The image_bytes of this GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation.
        :param mime_type: The mime_type of this GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation.
        """
        self.openapi_types = {
            'annotation_colors': Dict[str, GoogleCloudDatalabelingV1beta1AnnotationSpec],
            'image_bytes': str,
            'mime_type': str
        }

        self.attribute_map = {
            'annotation_colors': 'annotationColors',
            'image_bytes': 'imageBytes',
            'mime_type': 'mimeType'
        }

        self._annotation_colors = annotation_colors
        self._image_bytes = image_bytes
        self._mime_type = mime_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation of this GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_colors(self):
        """Gets the annotation_colors of this GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation.

        The mapping between rgb color and annotation spec. The key is the rgb color represented in format of rgb(0, 0, 0). The value is the AnnotationSpec.

        :return: The annotation_colors of this GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation.
        :rtype: Dict[str, GoogleCloudDatalabelingV1beta1AnnotationSpec]
        """
        return self._annotation_colors

    @annotation_colors.setter
    def annotation_colors(self, annotation_colors):
        """Sets the annotation_colors of this GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation.

        The mapping between rgb color and annotation spec. The key is the rgb color represented in format of rgb(0, 0, 0). The value is the AnnotationSpec.

        :param annotation_colors: The annotation_colors of this GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation.
        :type annotation_colors: Dict[str, GoogleCloudDatalabelingV1beta1AnnotationSpec]
        """

        self._annotation_colors = annotation_colors

    @property
    def image_bytes(self):
        """Gets the image_bytes of this GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation.

        A byte string of a full image's color map.

        :return: The image_bytes of this GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation.
        :rtype: str
        """
        return self._image_bytes

    @image_bytes.setter
    def image_bytes(self, image_bytes):
        """Sets the image_bytes of this GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation.

        A byte string of a full image's color map.

        :param image_bytes: The image_bytes of this GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation.
        :type image_bytes: str
        """

        self._image_bytes = image_bytes

    @property
    def mime_type(self):
        """Gets the mime_type of this GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation.

        Image format.

        :return: The mime_type of this GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation.

        Image format.

        :param mime_type: The mime_type of this GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation.
        :type mime_type: str
        """

        self._mime_type = mime_type
