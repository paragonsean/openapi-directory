# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datalabeling_v1beta1_bounding_poly_config import GoogleCloudDatalabelingV1beta1BoundingPolyConfig
from openapi_server.models.google_cloud_datalabeling_v1beta1_human_annotation_config import GoogleCloudDatalabelingV1beta1HumanAnnotationConfig
from openapi_server.models.google_cloud_datalabeling_v1beta1_image_classification_config import GoogleCloudDatalabelingV1beta1ImageClassificationConfig
from openapi_server.models.google_cloud_datalabeling_v1beta1_polyline_config import GoogleCloudDatalabelingV1beta1PolylineConfig
from openapi_server.models.google_cloud_datalabeling_v1beta1_segmentation_config import GoogleCloudDatalabelingV1beta1SegmentationConfig
from openapi_server import util


class GoogleCloudDatalabelingV1beta1LabelImageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, basic_config: GoogleCloudDatalabelingV1beta1HumanAnnotationConfig=None, bounding_poly_config: GoogleCloudDatalabelingV1beta1BoundingPolyConfig=None, feature: str=None, image_classification_config: GoogleCloudDatalabelingV1beta1ImageClassificationConfig=None, polyline_config: GoogleCloudDatalabelingV1beta1PolylineConfig=None, segmentation_config: GoogleCloudDatalabelingV1beta1SegmentationConfig=None):
        """GoogleCloudDatalabelingV1beta1LabelImageRequest - a model defined in OpenAPI

        :param basic_config: The basic_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        :param bounding_poly_config: The bounding_poly_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        :param feature: The feature of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        :param image_classification_config: The image_classification_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        :param polyline_config: The polyline_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        :param segmentation_config: The segmentation_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        """
        self.openapi_types = {
            'basic_config': GoogleCloudDatalabelingV1beta1HumanAnnotationConfig,
            'bounding_poly_config': GoogleCloudDatalabelingV1beta1BoundingPolyConfig,
            'feature': str,
            'image_classification_config': GoogleCloudDatalabelingV1beta1ImageClassificationConfig,
            'polyline_config': GoogleCloudDatalabelingV1beta1PolylineConfig,
            'segmentation_config': GoogleCloudDatalabelingV1beta1SegmentationConfig
        }

        self.attribute_map = {
            'basic_config': 'basicConfig',
            'bounding_poly_config': 'boundingPolyConfig',
            'feature': 'feature',
            'image_classification_config': 'imageClassificationConfig',
            'polyline_config': 'polylineConfig',
            'segmentation_config': 'segmentationConfig'
        }

        self._basic_config = basic_config
        self._bounding_poly_config = bounding_poly_config
        self._feature = feature
        self._image_classification_config = image_classification_config
        self._polyline_config = polyline_config
        self._segmentation_config = segmentation_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatalabelingV1beta1LabelImageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatalabelingV1beta1LabelImageRequest of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def basic_config(self):
        """Gets the basic_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.


        :return: The basic_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        :rtype: GoogleCloudDatalabelingV1beta1HumanAnnotationConfig
        """
        return self._basic_config

    @basic_config.setter
    def basic_config(self, basic_config):
        """Sets the basic_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.


        :param basic_config: The basic_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        :type basic_config: GoogleCloudDatalabelingV1beta1HumanAnnotationConfig
        """

        self._basic_config = basic_config

    @property
    def bounding_poly_config(self):
        """Gets the bounding_poly_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.


        :return: The bounding_poly_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        :rtype: GoogleCloudDatalabelingV1beta1BoundingPolyConfig
        """
        return self._bounding_poly_config

    @bounding_poly_config.setter
    def bounding_poly_config(self, bounding_poly_config):
        """Sets the bounding_poly_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.


        :param bounding_poly_config: The bounding_poly_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        :type bounding_poly_config: GoogleCloudDatalabelingV1beta1BoundingPolyConfig
        """

        self._bounding_poly_config = bounding_poly_config

    @property
    def feature(self):
        """Gets the feature of this GoogleCloudDatalabelingV1beta1LabelImageRequest.

        Required. The type of image labeling task.

        :return: The feature of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        :rtype: str
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """Sets the feature of this GoogleCloudDatalabelingV1beta1LabelImageRequest.

        Required. The type of image labeling task.

        :param feature: The feature of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        :type feature: str
        """
        allowed_values = ["FEATURE_UNSPECIFIED", "CLASSIFICATION", "BOUNDING_BOX", "ORIENTED_BOUNDING_BOX", "BOUNDING_POLY", "POLYLINE", "SEGMENTATION"]  # noqa: E501
        if feature not in allowed_values:
            raise ValueError(
                "Invalid value for `feature` ({0}), must be one of {1}"
                .format(feature, allowed_values)
            )

        self._feature = feature

    @property
    def image_classification_config(self):
        """Gets the image_classification_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.


        :return: The image_classification_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        :rtype: GoogleCloudDatalabelingV1beta1ImageClassificationConfig
        """
        return self._image_classification_config

    @image_classification_config.setter
    def image_classification_config(self, image_classification_config):
        """Sets the image_classification_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.


        :param image_classification_config: The image_classification_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        :type image_classification_config: GoogleCloudDatalabelingV1beta1ImageClassificationConfig
        """

        self._image_classification_config = image_classification_config

    @property
    def polyline_config(self):
        """Gets the polyline_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.


        :return: The polyline_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        :rtype: GoogleCloudDatalabelingV1beta1PolylineConfig
        """
        return self._polyline_config

    @polyline_config.setter
    def polyline_config(self, polyline_config):
        """Sets the polyline_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.


        :param polyline_config: The polyline_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        :type polyline_config: GoogleCloudDatalabelingV1beta1PolylineConfig
        """

        self._polyline_config = polyline_config

    @property
    def segmentation_config(self):
        """Gets the segmentation_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.


        :return: The segmentation_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        :rtype: GoogleCloudDatalabelingV1beta1SegmentationConfig
        """
        return self._segmentation_config

    @segmentation_config.setter
    def segmentation_config(self, segmentation_config):
        """Sets the segmentation_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.


        :param segmentation_config: The segmentation_config of this GoogleCloudDatalabelingV1beta1LabelImageRequest.
        :type segmentation_config: GoogleCloudDatalabelingV1beta1SegmentationConfig
        """

        self._segmentation_config = segmentation_config
