# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotated_dataset_description: str=None, annotated_dataset_display_name: str=None, contributor_emails: List[str]=None, instruction: str=None, label_group: str=None, language_code: str=None, question_duration: str=None, replica_count: int=None, user_email_address: str=None):
        """GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig - a model defined in OpenAPI

        :param annotated_dataset_description: The annotated_dataset_description of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :param annotated_dataset_display_name: The annotated_dataset_display_name of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :param contributor_emails: The contributor_emails of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :param instruction: The instruction of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :param label_group: The label_group of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :param language_code: The language_code of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :param question_duration: The question_duration of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :param replica_count: The replica_count of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :param user_email_address: The user_email_address of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        """
        self.openapi_types = {
            'annotated_dataset_description': str,
            'annotated_dataset_display_name': str,
            'contributor_emails': List[str],
            'instruction': str,
            'label_group': str,
            'language_code': str,
            'question_duration': str,
            'replica_count': int,
            'user_email_address': str
        }

        self.attribute_map = {
            'annotated_dataset_description': 'annotatedDatasetDescription',
            'annotated_dataset_display_name': 'annotatedDatasetDisplayName',
            'contributor_emails': 'contributorEmails',
            'instruction': 'instruction',
            'label_group': 'labelGroup',
            'language_code': 'languageCode',
            'question_duration': 'questionDuration',
            'replica_count': 'replicaCount',
            'user_email_address': 'userEmailAddress'
        }

        self._annotated_dataset_description = annotated_dataset_description
        self._annotated_dataset_display_name = annotated_dataset_display_name
        self._contributor_emails = contributor_emails
        self._instruction = instruction
        self._label_group = label_group
        self._language_code = language_code
        self._question_duration = question_duration
        self._replica_count = replica_count
        self._user_email_address = user_email_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotated_dataset_description(self):
        """Gets the annotated_dataset_description of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.

        Optional. A human-readable description for AnnotatedDataset. The description can be up to 10000 characters long.

        :return: The annotated_dataset_description of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :rtype: str
        """
        return self._annotated_dataset_description

    @annotated_dataset_description.setter
    def annotated_dataset_description(self, annotated_dataset_description):
        """Sets the annotated_dataset_description of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.

        Optional. A human-readable description for AnnotatedDataset. The description can be up to 10000 characters long.

        :param annotated_dataset_description: The annotated_dataset_description of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :type annotated_dataset_description: str
        """

        self._annotated_dataset_description = annotated_dataset_description

    @property
    def annotated_dataset_display_name(self):
        """Gets the annotated_dataset_display_name of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.

        Required. A human-readable name for AnnotatedDataset defined by users. Maximum of 64 characters .

        :return: The annotated_dataset_display_name of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :rtype: str
        """
        return self._annotated_dataset_display_name

    @annotated_dataset_display_name.setter
    def annotated_dataset_display_name(self, annotated_dataset_display_name):
        """Sets the annotated_dataset_display_name of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.

        Required. A human-readable name for AnnotatedDataset defined by users. Maximum of 64 characters .

        :param annotated_dataset_display_name: The annotated_dataset_display_name of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :type annotated_dataset_display_name: str
        """

        self._annotated_dataset_display_name = annotated_dataset_display_name

    @property
    def contributor_emails(self):
        """Gets the contributor_emails of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.

        Optional. If you want your own labeling contributors to manage and work on this labeling request, you can set these contributors here. We will give them access to the question types in crowdcompute. Note that these emails must be registered in crowdcompute worker UI: https://crowd-compute.appspot.com/

        :return: The contributor_emails of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :rtype: List[str]
        """
        return self._contributor_emails

    @contributor_emails.setter
    def contributor_emails(self, contributor_emails):
        """Sets the contributor_emails of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.

        Optional. If you want your own labeling contributors to manage and work on this labeling request, you can set these contributors here. We will give them access to the question types in crowdcompute. Note that these emails must be registered in crowdcompute worker UI: https://crowd-compute.appspot.com/

        :param contributor_emails: The contributor_emails of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :type contributor_emails: List[str]
        """

        self._contributor_emails = contributor_emails

    @property
    def instruction(self):
        """Gets the instruction of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.

        Required. Instruction resource name.

        :return: The instruction of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :rtype: str
        """
        return self._instruction

    @instruction.setter
    def instruction(self, instruction):
        """Sets the instruction of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.

        Required. Instruction resource name.

        :param instruction: The instruction of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :type instruction: str
        """

        self._instruction = instruction

    @property
    def label_group(self):
        """Gets the label_group of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.

        Optional. A human-readable label used to logically group labeling tasks. This string must match the regular expression `[a-zA-Z\\\\d_-]{0,128}`.

        :return: The label_group of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :rtype: str
        """
        return self._label_group

    @label_group.setter
    def label_group(self, label_group):
        """Sets the label_group of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.

        Optional. A human-readable label used to logically group labeling tasks. This string must match the regular expression `[a-zA-Z\\\\d_-]{0,128}`.

        :param label_group: The label_group of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :type label_group: str
        """

        self._label_group = label_group

    @property
    def language_code(self):
        """Gets the language_code of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.

        Optional. The Language of this question, as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). Default value is en-US. Only need to set this when task is language related. For example, French text classification.

        :return: The language_code of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.

        Optional. The Language of this question, as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). Default value is en-US. Only need to set this when task is language related. For example, French text classification.

        :param language_code: The language_code of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def question_duration(self):
        """Gets the question_duration of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.

        Optional. Maximum duration for contributors to answer a question. Maximum is 3600 seconds. Default is 3600 seconds.

        :return: The question_duration of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :rtype: str
        """
        return self._question_duration

    @question_duration.setter
    def question_duration(self, question_duration):
        """Sets the question_duration of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.

        Optional. Maximum duration for contributors to answer a question. Maximum is 3600 seconds. Default is 3600 seconds.

        :param question_duration: The question_duration of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :type question_duration: str
        """

        self._question_duration = question_duration

    @property
    def replica_count(self):
        """Gets the replica_count of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.

        Optional. Replication of questions. Each question will be sent to up to this number of contributors to label. Aggregated answers will be returned. Default is set to 1. For image related labeling, valid values are 1, 3, 5.

        :return: The replica_count of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :rtype: int
        """
        return self._replica_count

    @replica_count.setter
    def replica_count(self, replica_count):
        """Sets the replica_count of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.

        Optional. Replication of questions. Each question will be sent to up to this number of contributors to label. Aggregated answers will be returned. Default is set to 1. For image related labeling, valid values are 1, 3, 5.

        :param replica_count: The replica_count of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :type replica_count: int
        """

        self._replica_count = replica_count

    @property
    def user_email_address(self):
        """Gets the user_email_address of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.

        Email of the user who started the labeling task and should be notified by email. If empty no notification will be sent.

        :return: The user_email_address of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :rtype: str
        """
        return self._user_email_address

    @user_email_address.setter
    def user_email_address(self, user_email_address):
        """Sets the user_email_address of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.

        Email of the user who started the labeling task and should be notified by email. If empty no notification will be sent.

        :param user_email_address: The user_email_address of this GoogleCloudDatalabelingV1alpha1HumanAnnotationConfig.
        :type user_email_address: str
        """

        self._user_email_address = user_email_address
