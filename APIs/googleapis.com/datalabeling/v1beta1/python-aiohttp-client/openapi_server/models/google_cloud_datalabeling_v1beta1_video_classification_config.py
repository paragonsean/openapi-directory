# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datalabeling_v1beta1_annotation_spec_set_config import GoogleCloudDatalabelingV1beta1AnnotationSpecSetConfig
from openapi_server import util


class GoogleCloudDatalabelingV1beta1VideoClassificationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_spec_set_configs: List[GoogleCloudDatalabelingV1beta1AnnotationSpecSetConfig]=None, apply_shot_detection: bool=None):
        """GoogleCloudDatalabelingV1beta1VideoClassificationConfig - a model defined in OpenAPI

        :param annotation_spec_set_configs: The annotation_spec_set_configs of this GoogleCloudDatalabelingV1beta1VideoClassificationConfig.
        :param apply_shot_detection: The apply_shot_detection of this GoogleCloudDatalabelingV1beta1VideoClassificationConfig.
        """
        self.openapi_types = {
            'annotation_spec_set_configs': List[GoogleCloudDatalabelingV1beta1AnnotationSpecSetConfig],
            'apply_shot_detection': bool
        }

        self.attribute_map = {
            'annotation_spec_set_configs': 'annotationSpecSetConfigs',
            'apply_shot_detection': 'applyShotDetection'
        }

        self._annotation_spec_set_configs = annotation_spec_set_configs
        self._apply_shot_detection = apply_shot_detection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatalabelingV1beta1VideoClassificationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatalabelingV1beta1VideoClassificationConfig of this GoogleCloudDatalabelingV1beta1VideoClassificationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_spec_set_configs(self):
        """Gets the annotation_spec_set_configs of this GoogleCloudDatalabelingV1beta1VideoClassificationConfig.

        Required. The list of annotation spec set configs. Since watching a video clip takes much longer time than an image, we support label with multiple AnnotationSpecSet at the same time. Labels in each AnnotationSpecSet will be shown in a group to contributors. Contributors can select one or more (depending on whether to allow multi label) from each group.

        :return: The annotation_spec_set_configs of this GoogleCloudDatalabelingV1beta1VideoClassificationConfig.
        :rtype: List[GoogleCloudDatalabelingV1beta1AnnotationSpecSetConfig]
        """
        return self._annotation_spec_set_configs

    @annotation_spec_set_configs.setter
    def annotation_spec_set_configs(self, annotation_spec_set_configs):
        """Sets the annotation_spec_set_configs of this GoogleCloudDatalabelingV1beta1VideoClassificationConfig.

        Required. The list of annotation spec set configs. Since watching a video clip takes much longer time than an image, we support label with multiple AnnotationSpecSet at the same time. Labels in each AnnotationSpecSet will be shown in a group to contributors. Contributors can select one or more (depending on whether to allow multi label) from each group.

        :param annotation_spec_set_configs: The annotation_spec_set_configs of this GoogleCloudDatalabelingV1beta1VideoClassificationConfig.
        :type annotation_spec_set_configs: List[GoogleCloudDatalabelingV1beta1AnnotationSpecSetConfig]
        """

        self._annotation_spec_set_configs = annotation_spec_set_configs

    @property
    def apply_shot_detection(self):
        """Gets the apply_shot_detection of this GoogleCloudDatalabelingV1beta1VideoClassificationConfig.

        Optional. Option to apply shot detection on the video.

        :return: The apply_shot_detection of this GoogleCloudDatalabelingV1beta1VideoClassificationConfig.
        :rtype: bool
        """
        return self._apply_shot_detection

    @apply_shot_detection.setter
    def apply_shot_detection(self, apply_shot_detection):
        """Sets the apply_shot_detection of this GoogleCloudDatalabelingV1beta1VideoClassificationConfig.

        Optional. Option to apply shot detection on the video.

        :param apply_shot_detection: The apply_shot_detection of this GoogleCloudDatalabelingV1beta1VideoClassificationConfig.
        :type apply_shot_detection: bool
        """

        self._apply_shot_detection = apply_shot_detection
