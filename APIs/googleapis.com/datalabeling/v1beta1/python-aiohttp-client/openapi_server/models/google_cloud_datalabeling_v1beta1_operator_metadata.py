# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDatalabelingV1beta1OperatorMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: List[str]=None, label_votes: int=None, score: float=None, total_votes: int=None):
        """GoogleCloudDatalabelingV1beta1OperatorMetadata - a model defined in OpenAPI

        :param comments: The comments of this GoogleCloudDatalabelingV1beta1OperatorMetadata.
        :param label_votes: The label_votes of this GoogleCloudDatalabelingV1beta1OperatorMetadata.
        :param score: The score of this GoogleCloudDatalabelingV1beta1OperatorMetadata.
        :param total_votes: The total_votes of this GoogleCloudDatalabelingV1beta1OperatorMetadata.
        """
        self.openapi_types = {
            'comments': List[str],
            'label_votes': int,
            'score': float,
            'total_votes': int
        }

        self.attribute_map = {
            'comments': 'comments',
            'label_votes': 'labelVotes',
            'score': 'score',
            'total_votes': 'totalVotes'
        }

        self._comments = comments
        self._label_votes = label_votes
        self._score = score
        self._total_votes = total_votes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatalabelingV1beta1OperatorMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatalabelingV1beta1OperatorMetadata of this GoogleCloudDatalabelingV1beta1OperatorMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this GoogleCloudDatalabelingV1beta1OperatorMetadata.

        Comments from contributors.

        :return: The comments of this GoogleCloudDatalabelingV1beta1OperatorMetadata.
        :rtype: List[str]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this GoogleCloudDatalabelingV1beta1OperatorMetadata.

        Comments from contributors.

        :param comments: The comments of this GoogleCloudDatalabelingV1beta1OperatorMetadata.
        :type comments: List[str]
        """

        self._comments = comments

    @property
    def label_votes(self):
        """Gets the label_votes of this GoogleCloudDatalabelingV1beta1OperatorMetadata.

        The total number of contributors that choose this label.

        :return: The label_votes of this GoogleCloudDatalabelingV1beta1OperatorMetadata.
        :rtype: int
        """
        return self._label_votes

    @label_votes.setter
    def label_votes(self, label_votes):
        """Sets the label_votes of this GoogleCloudDatalabelingV1beta1OperatorMetadata.

        The total number of contributors that choose this label.

        :param label_votes: The label_votes of this GoogleCloudDatalabelingV1beta1OperatorMetadata.
        :type label_votes: int
        """

        self._label_votes = label_votes

    @property
    def score(self):
        """Gets the score of this GoogleCloudDatalabelingV1beta1OperatorMetadata.

        Confidence score corresponding to a label. For examle, if 3 contributors have answered the question and 2 of them agree on the final label, the confidence score will be 0.67 (2/3).

        :return: The score of this GoogleCloudDatalabelingV1beta1OperatorMetadata.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this GoogleCloudDatalabelingV1beta1OperatorMetadata.

        Confidence score corresponding to a label. For examle, if 3 contributors have answered the question and 2 of them agree on the final label, the confidence score will be 0.67 (2/3).

        :param score: The score of this GoogleCloudDatalabelingV1beta1OperatorMetadata.
        :type score: float
        """

        self._score = score

    @property
    def total_votes(self):
        """Gets the total_votes of this GoogleCloudDatalabelingV1beta1OperatorMetadata.

        The total number of contributors that answer this question.

        :return: The total_votes of this GoogleCloudDatalabelingV1beta1OperatorMetadata.
        :rtype: int
        """
        return self._total_votes

    @total_votes.setter
    def total_votes(self, total_votes):
        """Sets the total_votes of this GoogleCloudDatalabelingV1beta1OperatorMetadata.

        The total number of contributors that answer this question.

        :param total_votes: The total_votes of this GoogleCloudDatalabelingV1beta1OperatorMetadata.
        :type total_votes: int
        """

        self._total_votes = total_votes
