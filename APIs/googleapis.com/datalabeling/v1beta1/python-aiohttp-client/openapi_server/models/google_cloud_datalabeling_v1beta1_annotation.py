# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datalabeling_v1beta1_annotation_metadata import GoogleCloudDatalabelingV1beta1AnnotationMetadata
from openapi_server.models.google_cloud_datalabeling_v1beta1_annotation_value import GoogleCloudDatalabelingV1beta1AnnotationValue
from openapi_server import util


class GoogleCloudDatalabelingV1beta1Annotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_metadata: GoogleCloudDatalabelingV1beta1AnnotationMetadata=None, annotation_sentiment: str=None, annotation_source: str=None, annotation_value: GoogleCloudDatalabelingV1beta1AnnotationValue=None, name: str=None):
        """GoogleCloudDatalabelingV1beta1Annotation - a model defined in OpenAPI

        :param annotation_metadata: The annotation_metadata of this GoogleCloudDatalabelingV1beta1Annotation.
        :param annotation_sentiment: The annotation_sentiment of this GoogleCloudDatalabelingV1beta1Annotation.
        :param annotation_source: The annotation_source of this GoogleCloudDatalabelingV1beta1Annotation.
        :param annotation_value: The annotation_value of this GoogleCloudDatalabelingV1beta1Annotation.
        :param name: The name of this GoogleCloudDatalabelingV1beta1Annotation.
        """
        self.openapi_types = {
            'annotation_metadata': GoogleCloudDatalabelingV1beta1AnnotationMetadata,
            'annotation_sentiment': str,
            'annotation_source': str,
            'annotation_value': GoogleCloudDatalabelingV1beta1AnnotationValue,
            'name': str
        }

        self.attribute_map = {
            'annotation_metadata': 'annotationMetadata',
            'annotation_sentiment': 'annotationSentiment',
            'annotation_source': 'annotationSource',
            'annotation_value': 'annotationValue',
            'name': 'name'
        }

        self._annotation_metadata = annotation_metadata
        self._annotation_sentiment = annotation_sentiment
        self._annotation_source = annotation_source
        self._annotation_value = annotation_value
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatalabelingV1beta1Annotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatalabelingV1beta1Annotation of this GoogleCloudDatalabelingV1beta1Annotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_metadata(self):
        """Gets the annotation_metadata of this GoogleCloudDatalabelingV1beta1Annotation.


        :return: The annotation_metadata of this GoogleCloudDatalabelingV1beta1Annotation.
        :rtype: GoogleCloudDatalabelingV1beta1AnnotationMetadata
        """
        return self._annotation_metadata

    @annotation_metadata.setter
    def annotation_metadata(self, annotation_metadata):
        """Sets the annotation_metadata of this GoogleCloudDatalabelingV1beta1Annotation.


        :param annotation_metadata: The annotation_metadata of this GoogleCloudDatalabelingV1beta1Annotation.
        :type annotation_metadata: GoogleCloudDatalabelingV1beta1AnnotationMetadata
        """

        self._annotation_metadata = annotation_metadata

    @property
    def annotation_sentiment(self):
        """Gets the annotation_sentiment of this GoogleCloudDatalabelingV1beta1Annotation.

        Output only. Sentiment for this annotation.

        :return: The annotation_sentiment of this GoogleCloudDatalabelingV1beta1Annotation.
        :rtype: str
        """
        return self._annotation_sentiment

    @annotation_sentiment.setter
    def annotation_sentiment(self, annotation_sentiment):
        """Sets the annotation_sentiment of this GoogleCloudDatalabelingV1beta1Annotation.

        Output only. Sentiment for this annotation.

        :param annotation_sentiment: The annotation_sentiment of this GoogleCloudDatalabelingV1beta1Annotation.
        :type annotation_sentiment: str
        """
        allowed_values = ["ANNOTATION_SENTIMENT_UNSPECIFIED", "NEGATIVE", "POSITIVE"]  # noqa: E501
        if annotation_sentiment not in allowed_values:
            raise ValueError(
                "Invalid value for `annotation_sentiment` ({0}), must be one of {1}"
                .format(annotation_sentiment, allowed_values)
            )

        self._annotation_sentiment = annotation_sentiment

    @property
    def annotation_source(self):
        """Gets the annotation_source of this GoogleCloudDatalabelingV1beta1Annotation.

        Output only. The source of the annotation.

        :return: The annotation_source of this GoogleCloudDatalabelingV1beta1Annotation.
        :rtype: str
        """
        return self._annotation_source

    @annotation_source.setter
    def annotation_source(self, annotation_source):
        """Sets the annotation_source of this GoogleCloudDatalabelingV1beta1Annotation.

        Output only. The source of the annotation.

        :param annotation_source: The annotation_source of this GoogleCloudDatalabelingV1beta1Annotation.
        :type annotation_source: str
        """
        allowed_values = ["ANNOTATION_SOURCE_UNSPECIFIED", "OPERATOR"]  # noqa: E501
        if annotation_source not in allowed_values:
            raise ValueError(
                "Invalid value for `annotation_source` ({0}), must be one of {1}"
                .format(annotation_source, allowed_values)
            )

        self._annotation_source = annotation_source

    @property
    def annotation_value(self):
        """Gets the annotation_value of this GoogleCloudDatalabelingV1beta1Annotation.


        :return: The annotation_value of this GoogleCloudDatalabelingV1beta1Annotation.
        :rtype: GoogleCloudDatalabelingV1beta1AnnotationValue
        """
        return self._annotation_value

    @annotation_value.setter
    def annotation_value(self, annotation_value):
        """Sets the annotation_value of this GoogleCloudDatalabelingV1beta1Annotation.


        :param annotation_value: The annotation_value of this GoogleCloudDatalabelingV1beta1Annotation.
        :type annotation_value: GoogleCloudDatalabelingV1beta1AnnotationValue
        """

        self._annotation_value = annotation_value

    @property
    def name(self):
        """Gets the name of this GoogleCloudDatalabelingV1beta1Annotation.

        Output only. Unique name of this annotation, format is: projects/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset}/examples/{example_id}/annotations/{annotation_id}

        :return: The name of this GoogleCloudDatalabelingV1beta1Annotation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDatalabelingV1beta1Annotation.

        Output only. Unique name of this annotation, format is: projects/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset}/examples/{example_id}/annotations/{annotation_id}

        :param name: The name of this GoogleCloudDatalabelingV1beta1Annotation.
        :type name: str
        """

        self._name = name
