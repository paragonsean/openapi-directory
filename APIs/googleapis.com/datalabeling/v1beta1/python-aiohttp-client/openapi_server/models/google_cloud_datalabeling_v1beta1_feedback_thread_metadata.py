# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, last_update_time: str=None, status: str=None, thumbnail: str=None):
        """GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata - a model defined in OpenAPI

        :param create_time: The create_time of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.
        :param last_update_time: The last_update_time of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.
        :param status: The status of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.
        :param thumbnail: The thumbnail of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.
        """
        self.openapi_types = {
            'create_time': str,
            'last_update_time': str,
            'status': str,
            'thumbnail': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'last_update_time': 'lastUpdateTime',
            'status': 'status',
            'thumbnail': 'thumbnail'
        }

        self._create_time = create_time
        self._last_update_time = last_update_time
        self._status = status
        self._thumbnail = thumbnail

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.

        When the thread is created

        :return: The create_time of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.

        When the thread is created

        :param create_time: The create_time of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def last_update_time(self):
        """Gets the last_update_time of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.

        When the thread is last updated.

        :return: The last_update_time of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.
        :rtype: str
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.

        When the thread is last updated.

        :param last_update_time: The last_update_time of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.
        :type last_update_time: str
        """

        self._last_update_time = last_update_time

    @property
    def status(self):
        """Gets the status of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.


        :return: The status of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.


        :param status: The status of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.
        :type status: str
        """
        allowed_values = ["FEEDBACK_THREAD_STATUS_UNSPECIFIED", "NEW", "REPLIED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def thumbnail(self):
        """Gets the thumbnail of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.

        An image thumbnail of this thread.

        :return: The thumbnail of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.

        An image thumbnail of this thread.

        :param thumbnail: The thumbnail of this GoogleCloudDatalabelingV1beta1FeedbackThreadMetadata.
        :type thumbnail: str
        """

        self._thumbnail = thumbnail
