# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_datalabeling_v1beta1_big_query_source import GoogleCloudDatalabelingV1beta1BigQuerySource
from openapi_server.models.google_cloud_datalabeling_v1beta1_classification_metadata import GoogleCloudDatalabelingV1beta1ClassificationMetadata
from openapi_server.models.google_cloud_datalabeling_v1beta1_gcs_source import GoogleCloudDatalabelingV1beta1GcsSource
from openapi_server.models.google_cloud_datalabeling_v1beta1_text_metadata import GoogleCloudDatalabelingV1beta1TextMetadata
from openapi_server import util


class GoogleCloudDatalabelingV1beta1InputConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_type: str=None, bigquery_source: GoogleCloudDatalabelingV1beta1BigQuerySource=None, classification_metadata: GoogleCloudDatalabelingV1beta1ClassificationMetadata=None, data_type: str=None, gcs_source: GoogleCloudDatalabelingV1beta1GcsSource=None, text_metadata: GoogleCloudDatalabelingV1beta1TextMetadata=None):
        """GoogleCloudDatalabelingV1beta1InputConfig - a model defined in OpenAPI

        :param annotation_type: The annotation_type of this GoogleCloudDatalabelingV1beta1InputConfig.
        :param bigquery_source: The bigquery_source of this GoogleCloudDatalabelingV1beta1InputConfig.
        :param classification_metadata: The classification_metadata of this GoogleCloudDatalabelingV1beta1InputConfig.
        :param data_type: The data_type of this GoogleCloudDatalabelingV1beta1InputConfig.
        :param gcs_source: The gcs_source of this GoogleCloudDatalabelingV1beta1InputConfig.
        :param text_metadata: The text_metadata of this GoogleCloudDatalabelingV1beta1InputConfig.
        """
        self.openapi_types = {
            'annotation_type': str,
            'bigquery_source': GoogleCloudDatalabelingV1beta1BigQuerySource,
            'classification_metadata': GoogleCloudDatalabelingV1beta1ClassificationMetadata,
            'data_type': str,
            'gcs_source': GoogleCloudDatalabelingV1beta1GcsSource,
            'text_metadata': GoogleCloudDatalabelingV1beta1TextMetadata
        }

        self.attribute_map = {
            'annotation_type': 'annotationType',
            'bigquery_source': 'bigquerySource',
            'classification_metadata': 'classificationMetadata',
            'data_type': 'dataType',
            'gcs_source': 'gcsSource',
            'text_metadata': 'textMetadata'
        }

        self._annotation_type = annotation_type
        self._bigquery_source = bigquery_source
        self._classification_metadata = classification_metadata
        self._data_type = data_type
        self._gcs_source = gcs_source
        self._text_metadata = text_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDatalabelingV1beta1InputConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDatalabelingV1beta1InputConfig of this GoogleCloudDatalabelingV1beta1InputConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_type(self):
        """Gets the annotation_type of this GoogleCloudDatalabelingV1beta1InputConfig.

        Optional. The type of annotation to be performed on this data. You must specify this field if you are using this InputConfig in an EvaluationJob.

        :return: The annotation_type of this GoogleCloudDatalabelingV1beta1InputConfig.
        :rtype: str
        """
        return self._annotation_type

    @annotation_type.setter
    def annotation_type(self, annotation_type):
        """Sets the annotation_type of this GoogleCloudDatalabelingV1beta1InputConfig.

        Optional. The type of annotation to be performed on this data. You must specify this field if you are using this InputConfig in an EvaluationJob.

        :param annotation_type: The annotation_type of this GoogleCloudDatalabelingV1beta1InputConfig.
        :type annotation_type: str
        """
        allowed_values = ["ANNOTATION_TYPE_UNSPECIFIED", "IMAGE_CLASSIFICATION_ANNOTATION", "IMAGE_BOUNDING_BOX_ANNOTATION", "IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION", "IMAGE_BOUNDING_POLY_ANNOTATION", "IMAGE_POLYLINE_ANNOTATION", "IMAGE_SEGMENTATION_ANNOTATION", "VIDEO_SHOTS_CLASSIFICATION_ANNOTATION", "VIDEO_OBJECT_TRACKING_ANNOTATION", "VIDEO_OBJECT_DETECTION_ANNOTATION", "VIDEO_EVENT_ANNOTATION", "TEXT_CLASSIFICATION_ANNOTATION", "TEXT_ENTITY_EXTRACTION_ANNOTATION", "GENERAL_CLASSIFICATION_ANNOTATION"]  # noqa: E501
        if annotation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `annotation_type` ({0}), must be one of {1}"
                .format(annotation_type, allowed_values)
            )

        self._annotation_type = annotation_type

    @property
    def bigquery_source(self):
        """Gets the bigquery_source of this GoogleCloudDatalabelingV1beta1InputConfig.


        :return: The bigquery_source of this GoogleCloudDatalabelingV1beta1InputConfig.
        :rtype: GoogleCloudDatalabelingV1beta1BigQuerySource
        """
        return self._bigquery_source

    @bigquery_source.setter
    def bigquery_source(self, bigquery_source):
        """Sets the bigquery_source of this GoogleCloudDatalabelingV1beta1InputConfig.


        :param bigquery_source: The bigquery_source of this GoogleCloudDatalabelingV1beta1InputConfig.
        :type bigquery_source: GoogleCloudDatalabelingV1beta1BigQuerySource
        """

        self._bigquery_source = bigquery_source

    @property
    def classification_metadata(self):
        """Gets the classification_metadata of this GoogleCloudDatalabelingV1beta1InputConfig.


        :return: The classification_metadata of this GoogleCloudDatalabelingV1beta1InputConfig.
        :rtype: GoogleCloudDatalabelingV1beta1ClassificationMetadata
        """
        return self._classification_metadata

    @classification_metadata.setter
    def classification_metadata(self, classification_metadata):
        """Sets the classification_metadata of this GoogleCloudDatalabelingV1beta1InputConfig.


        :param classification_metadata: The classification_metadata of this GoogleCloudDatalabelingV1beta1InputConfig.
        :type classification_metadata: GoogleCloudDatalabelingV1beta1ClassificationMetadata
        """

        self._classification_metadata = classification_metadata

    @property
    def data_type(self):
        """Gets the data_type of this GoogleCloudDatalabelingV1beta1InputConfig.

        Required. Data type must be specifed when user tries to import data.

        :return: The data_type of this GoogleCloudDatalabelingV1beta1InputConfig.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this GoogleCloudDatalabelingV1beta1InputConfig.

        Required. Data type must be specifed when user tries to import data.

        :param data_type: The data_type of this GoogleCloudDatalabelingV1beta1InputConfig.
        :type data_type: str
        """
        allowed_values = ["DATA_TYPE_UNSPECIFIED", "IMAGE", "VIDEO", "TEXT", "GENERAL_DATA"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def gcs_source(self):
        """Gets the gcs_source of this GoogleCloudDatalabelingV1beta1InputConfig.


        :return: The gcs_source of this GoogleCloudDatalabelingV1beta1InputConfig.
        :rtype: GoogleCloudDatalabelingV1beta1GcsSource
        """
        return self._gcs_source

    @gcs_source.setter
    def gcs_source(self, gcs_source):
        """Sets the gcs_source of this GoogleCloudDatalabelingV1beta1InputConfig.


        :param gcs_source: The gcs_source of this GoogleCloudDatalabelingV1beta1InputConfig.
        :type gcs_source: GoogleCloudDatalabelingV1beta1GcsSource
        """

        self._gcs_source = gcs_source

    @property
    def text_metadata(self):
        """Gets the text_metadata of this GoogleCloudDatalabelingV1beta1InputConfig.


        :return: The text_metadata of this GoogleCloudDatalabelingV1beta1InputConfig.
        :rtype: GoogleCloudDatalabelingV1beta1TextMetadata
        """
        return self._text_metadata

    @text_metadata.setter
    def text_metadata(self, text_metadata):
        """Sets the text_metadata of this GoogleCloudDatalabelingV1beta1InputConfig.


        :param text_metadata: The text_metadata of this GoogleCloudDatalabelingV1beta1InputConfig.
        :type text_metadata: GoogleCloudDatalabelingV1beta1TextMetadata
        """

        self._text_metadata = text_metadata
