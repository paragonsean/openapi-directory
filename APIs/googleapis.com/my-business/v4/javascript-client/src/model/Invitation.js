/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';
import TargetLocation from './TargetLocation';

/**
 * The Invitation model module.
 * @module model/Invitation
 * @version v4
 */
class Invitation {
    /**
     * Constructs a new <code>Invitation</code>.
     * Output only. Represents a pending invitation.
     * @alias module:model/Invitation
     */
    constructor() { 
        
        Invitation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Invitation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Invitation} obj Optional instance to populate.
     * @return {module:model/Invitation} The populated <code>Invitation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Invitation();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('targetAccount')) {
                obj['targetAccount'] = Account.constructFromObject(data['targetAccount']);
            }
            if (data.hasOwnProperty('targetLocation')) {
                obj['targetLocation'] = TargetLocation.constructFromObject(data['targetLocation']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Invitation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Invitation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // validate the optional field `targetAccount`
        if (data['targetAccount']) { // data not null
          Account.validateJSON(data['targetAccount']);
        }
        // validate the optional field `targetLocation`
        if (data['targetLocation']) { // data not null
          TargetLocation.validateJSON(data['targetLocation']);
        }

        return true;
    }


}



/**
 * The resource name for the invitation.
 * @member {String} name
 */
Invitation.prototype['name'] = undefined;

/**
 * The invited role on the account.
 * @member {module:model/Invitation.RoleEnum} role
 */
Invitation.prototype['role'] = undefined;

/**
 * @member {module:model/Account} targetAccount
 */
Invitation.prototype['targetAccount'] = undefined;

/**
 * @member {module:model/TargetLocation} targetLocation
 */
Invitation.prototype['targetLocation'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
Invitation['RoleEnum'] = {

    /**
     * value: "ADMIN_ROLE_UNSPECIFIED"
     * @const
     */
    "ADMIN_ROLE_UNSPECIFIED": "ADMIN_ROLE_UNSPECIFIED",

    /**
     * value: "OWNER"
     * @const
     */
    "OWNER": "OWNER",

    /**
     * value: "CO_OWNER"
     * @const
     */
    "CO_OWNER": "CO_OWNER",

    /**
     * value: "MANAGER"
     * @const
     */
    "MANAGER": "MANAGER",

    /**
     * value: "COMMUNITY_MANAGER"
     * @const
     */
    "COMMUNITY_MANAGER": "COMMUNITY_MANAGER"
};



export default Invitation;

