/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attribution from './Attribution';
import Dimensions from './Dimensions';
import LocationAssociation from './LocationAssociation';
import MediaInsights from './MediaInsights';
import MediaItemDataRef from './MediaItemDataRef';

/**
 * The MediaItem model module.
 * @module model/MediaItem
 * @version v4
 */
class MediaItem {
    /**
     * Constructs a new <code>MediaItem</code>.
     * A single media item.
     * @alias module:model/MediaItem
     */
    constructor() { 
        
        MediaItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediaItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaItem} obj Optional instance to populate.
     * @return {module:model/MediaItem} The populated <code>MediaItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaItem();

            if (data.hasOwnProperty('attribution')) {
                obj['attribution'] = Attribution.constructFromObject(data['attribution']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('dataRef')) {
                obj['dataRef'] = MediaItemDataRef.constructFromObject(data['dataRef']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = Dimensions.constructFromObject(data['dimensions']);
            }
            if (data.hasOwnProperty('googleUrl')) {
                obj['googleUrl'] = ApiClient.convertToType(data['googleUrl'], 'String');
            }
            if (data.hasOwnProperty('insights')) {
                obj['insights'] = MediaInsights.constructFromObject(data['insights']);
            }
            if (data.hasOwnProperty('locationAssociation')) {
                obj['locationAssociation'] = LocationAssociation.constructFromObject(data['locationAssociation']);
            }
            if (data.hasOwnProperty('mediaFormat')) {
                obj['mediaFormat'] = ApiClient.convertToType(data['mediaFormat'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sourceUrl')) {
                obj['sourceUrl'] = ApiClient.convertToType(data['sourceUrl'], 'String');
            }
            if (data.hasOwnProperty('thumbnailUrl')) {
                obj['thumbnailUrl'] = ApiClient.convertToType(data['thumbnailUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaItem</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attribution`
        if (data['attribution']) { // data not null
          Attribution.validateJSON(data['attribution']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `dataRef`
        if (data['dataRef']) { // data not null
          MediaItemDataRef.validateJSON(data['dataRef']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `dimensions`
        if (data['dimensions']) { // data not null
          Dimensions.validateJSON(data['dimensions']);
        }
        // ensure the json data is a string
        if (data['googleUrl'] && !(typeof data['googleUrl'] === 'string' || data['googleUrl'] instanceof String)) {
            throw new Error("Expected the field `googleUrl` to be a primitive type in the JSON string but got " + data['googleUrl']);
        }
        // validate the optional field `insights`
        if (data['insights']) { // data not null
          MediaInsights.validateJSON(data['insights']);
        }
        // validate the optional field `locationAssociation`
        if (data['locationAssociation']) { // data not null
          LocationAssociation.validateJSON(data['locationAssociation']);
        }
        // ensure the json data is a string
        if (data['mediaFormat'] && !(typeof data['mediaFormat'] === 'string' || data['mediaFormat'] instanceof String)) {
            throw new Error("Expected the field `mediaFormat` to be a primitive type in the JSON string but got " + data['mediaFormat']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['sourceUrl'] && !(typeof data['sourceUrl'] === 'string' || data['sourceUrl'] instanceof String)) {
            throw new Error("Expected the field `sourceUrl` to be a primitive type in the JSON string but got " + data['sourceUrl']);
        }
        // ensure the json data is a string
        if (data['thumbnailUrl'] && !(typeof data['thumbnailUrl'] === 'string' || data['thumbnailUrl'] instanceof String)) {
            throw new Error("Expected the field `thumbnailUrl` to be a primitive type in the JSON string but got " + data['thumbnailUrl']);
        }

        return true;
    }


}



/**
 * @member {module:model/Attribution} attribution
 */
MediaItem.prototype['attribution'] = undefined;

/**
 * Output only. Creation time of this media item.
 * @member {String} createTime
 */
MediaItem.prototype['createTime'] = undefined;

/**
 * @member {module:model/MediaItemDataRef} dataRef
 */
MediaItem.prototype['dataRef'] = undefined;

/**
 * Description for this media item. Descriptions cannot be modified through the Google My Business API, but can be set when creating a new media item that is not a cover photo.
 * @member {String} description
 */
MediaItem.prototype['description'] = undefined;

/**
 * @member {module:model/Dimensions} dimensions
 */
MediaItem.prototype['dimensions'] = undefined;

/**
 * Output only. Google-hosted URL for this media item. This URL is not static since it may change over time. For video this will be a preview image with an overlaid play icon.
 * @member {String} googleUrl
 */
MediaItem.prototype['googleUrl'] = undefined;

/**
 * @member {module:model/MediaInsights} insights
 */
MediaItem.prototype['insights'] = undefined;

/**
 * @member {module:model/LocationAssociation} locationAssociation
 */
MediaItem.prototype['locationAssociation'] = undefined;

/**
 * The format of this media item. Must be set when the media item is created, and is read-only on all other requests. Cannot be updated.
 * @member {module:model/MediaItem.MediaFormatEnum} mediaFormat
 */
MediaItem.prototype['mediaFormat'] = undefined;

/**
 * The resource name for this media item. `accounts/{account_id}/locations/{location_id}/media/{media_key}`
 * @member {String} name
 */
MediaItem.prototype['name'] = undefined;

/**
 * A publicly accessible URL where the media item can be retrieved from. When creating one of this or data_ref must be set to specify the source of the media item. If `source_url` was used when creating a media item, it will be populated with that source URL when the media item is retrieved. This field cannot be updated.
 * @member {String} sourceUrl
 */
MediaItem.prototype['sourceUrl'] = undefined;

/**
 * Output only. Where provided, the URL of a thumbnail image for this media item.
 * @member {String} thumbnailUrl
 */
MediaItem.prototype['thumbnailUrl'] = undefined;





/**
 * Allowed values for the <code>mediaFormat</code> property.
 * @enum {String}
 * @readonly
 */
MediaItem['MediaFormatEnum'] = {

    /**
     * value: "MEDIA_FORMAT_UNSPECIFIED"
     * @const
     */
    "MEDIA_FORMAT_UNSPECIFIED": "MEDIA_FORMAT_UNSPECIFIED",

    /**
     * value: "PHOTO"
     * @const
     */
    "PHOTO": "PHOTO",

    /**
     * value: "VIDEO"
     * @const
     */
    "VIDEO": "VIDEO"
};



export default MediaItem;

