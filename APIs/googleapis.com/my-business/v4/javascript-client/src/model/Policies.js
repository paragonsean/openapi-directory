/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaymentOptions from './PaymentOptions';
import TimeOfDay from './TimeOfDay';

/**
 * The Policies model module.
 * @module model/Policies
 * @version v4
 */
class Policies {
    /**
     * Constructs a new <code>Policies</code>.
     * Property rules that impact guests.
     * @alias module:model/Policies
     */
    constructor() { 
        
        Policies.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Policies</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Policies} obj Optional instance to populate.
     * @return {module:model/Policies} The populated <code>Policies</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Policies();

            if (data.hasOwnProperty('allInclusiveAvailable')) {
                obj['allInclusiveAvailable'] = ApiClient.convertToType(data['allInclusiveAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('allInclusiveAvailableException')) {
                obj['allInclusiveAvailableException'] = ApiClient.convertToType(data['allInclusiveAvailableException'], 'String');
            }
            if (data.hasOwnProperty('allInclusiveOnly')) {
                obj['allInclusiveOnly'] = ApiClient.convertToType(data['allInclusiveOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('allInclusiveOnlyException')) {
                obj['allInclusiveOnlyException'] = ApiClient.convertToType(data['allInclusiveOnlyException'], 'String');
            }
            if (data.hasOwnProperty('checkinTime')) {
                obj['checkinTime'] = TimeOfDay.constructFromObject(data['checkinTime']);
            }
            if (data.hasOwnProperty('checkinTimeException')) {
                obj['checkinTimeException'] = ApiClient.convertToType(data['checkinTimeException'], 'String');
            }
            if (data.hasOwnProperty('checkoutTime')) {
                obj['checkoutTime'] = TimeOfDay.constructFromObject(data['checkoutTime']);
            }
            if (data.hasOwnProperty('checkoutTimeException')) {
                obj['checkoutTimeException'] = ApiClient.convertToType(data['checkoutTimeException'], 'String');
            }
            if (data.hasOwnProperty('kidsStayFree')) {
                obj['kidsStayFree'] = ApiClient.convertToType(data['kidsStayFree'], 'Boolean');
            }
            if (data.hasOwnProperty('kidsStayFreeException')) {
                obj['kidsStayFreeException'] = ApiClient.convertToType(data['kidsStayFreeException'], 'String');
            }
            if (data.hasOwnProperty('maxChildAge')) {
                obj['maxChildAge'] = ApiClient.convertToType(data['maxChildAge'], 'Number');
            }
            if (data.hasOwnProperty('maxChildAgeException')) {
                obj['maxChildAgeException'] = ApiClient.convertToType(data['maxChildAgeException'], 'String');
            }
            if (data.hasOwnProperty('maxKidsStayFreeCount')) {
                obj['maxKidsStayFreeCount'] = ApiClient.convertToType(data['maxKidsStayFreeCount'], 'Number');
            }
            if (data.hasOwnProperty('maxKidsStayFreeCountException')) {
                obj['maxKidsStayFreeCountException'] = ApiClient.convertToType(data['maxKidsStayFreeCountException'], 'String');
            }
            if (data.hasOwnProperty('paymentOptions')) {
                obj['paymentOptions'] = PaymentOptions.constructFromObject(data['paymentOptions']);
            }
            if (data.hasOwnProperty('smokeFreeProperty')) {
                obj['smokeFreeProperty'] = ApiClient.convertToType(data['smokeFreeProperty'], 'Boolean');
            }
            if (data.hasOwnProperty('smokeFreePropertyException')) {
                obj['smokeFreePropertyException'] = ApiClient.convertToType(data['smokeFreePropertyException'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Policies</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Policies</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allInclusiveAvailableException'] && !(typeof data['allInclusiveAvailableException'] === 'string' || data['allInclusiveAvailableException'] instanceof String)) {
            throw new Error("Expected the field `allInclusiveAvailableException` to be a primitive type in the JSON string but got " + data['allInclusiveAvailableException']);
        }
        // ensure the json data is a string
        if (data['allInclusiveOnlyException'] && !(typeof data['allInclusiveOnlyException'] === 'string' || data['allInclusiveOnlyException'] instanceof String)) {
            throw new Error("Expected the field `allInclusiveOnlyException` to be a primitive type in the JSON string but got " + data['allInclusiveOnlyException']);
        }
        // validate the optional field `checkinTime`
        if (data['checkinTime']) { // data not null
          TimeOfDay.validateJSON(data['checkinTime']);
        }
        // ensure the json data is a string
        if (data['checkinTimeException'] && !(typeof data['checkinTimeException'] === 'string' || data['checkinTimeException'] instanceof String)) {
            throw new Error("Expected the field `checkinTimeException` to be a primitive type in the JSON string but got " + data['checkinTimeException']);
        }
        // validate the optional field `checkoutTime`
        if (data['checkoutTime']) { // data not null
          TimeOfDay.validateJSON(data['checkoutTime']);
        }
        // ensure the json data is a string
        if (data['checkoutTimeException'] && !(typeof data['checkoutTimeException'] === 'string' || data['checkoutTimeException'] instanceof String)) {
            throw new Error("Expected the field `checkoutTimeException` to be a primitive type in the JSON string but got " + data['checkoutTimeException']);
        }
        // ensure the json data is a string
        if (data['kidsStayFreeException'] && !(typeof data['kidsStayFreeException'] === 'string' || data['kidsStayFreeException'] instanceof String)) {
            throw new Error("Expected the field `kidsStayFreeException` to be a primitive type in the JSON string but got " + data['kidsStayFreeException']);
        }
        // ensure the json data is a string
        if (data['maxChildAgeException'] && !(typeof data['maxChildAgeException'] === 'string' || data['maxChildAgeException'] instanceof String)) {
            throw new Error("Expected the field `maxChildAgeException` to be a primitive type in the JSON string but got " + data['maxChildAgeException']);
        }
        // ensure the json data is a string
        if (data['maxKidsStayFreeCountException'] && !(typeof data['maxKidsStayFreeCountException'] === 'string' || data['maxKidsStayFreeCountException'] instanceof String)) {
            throw new Error("Expected the field `maxKidsStayFreeCountException` to be a primitive type in the JSON string but got " + data['maxKidsStayFreeCountException']);
        }
        // validate the optional field `paymentOptions`
        if (data['paymentOptions']) { // data not null
          PaymentOptions.validateJSON(data['paymentOptions']);
        }
        // ensure the json data is a string
        if (data['smokeFreePropertyException'] && !(typeof data['smokeFreePropertyException'] === 'string' || data['smokeFreePropertyException'] instanceof String)) {
            throw new Error("Expected the field `smokeFreePropertyException` to be a primitive type in the JSON string but got " + data['smokeFreePropertyException']);
        }

        return true;
    }


}



/**
 * All inclusive available. The hotel offers a rate option that includes the cost of the room, meals, activities, and other amenities that might otherwise be charged separately.
 * @member {Boolean} allInclusiveAvailable
 */
Policies.prototype['allInclusiveAvailable'] = undefined;

/**
 * All inclusive available exception.
 * @member {module:model/Policies.AllInclusiveAvailableExceptionEnum} allInclusiveAvailableException
 */
Policies.prototype['allInclusiveAvailableException'] = undefined;

/**
 * All inclusive only. The only rate option offered by the hotel is a rate that includes the cost of the room, meals, activities and other amenities that might otherwise be charged separately.
 * @member {Boolean} allInclusiveOnly
 */
Policies.prototype['allInclusiveOnly'] = undefined;

/**
 * All inclusive only exception.
 * @member {module:model/Policies.AllInclusiveOnlyExceptionEnum} allInclusiveOnlyException
 */
Policies.prototype['allInclusiveOnlyException'] = undefined;

/**
 * @member {module:model/TimeOfDay} checkinTime
 */
Policies.prototype['checkinTime'] = undefined;

/**
 * Check-in time exception.
 * @member {module:model/Policies.CheckinTimeExceptionEnum} checkinTimeException
 */
Policies.prototype['checkinTimeException'] = undefined;

/**
 * @member {module:model/TimeOfDay} checkoutTime
 */
Policies.prototype['checkoutTime'] = undefined;

/**
 * Check-out time exception.
 * @member {module:model/Policies.CheckoutTimeExceptionEnum} checkoutTimeException
 */
Policies.prototype['checkoutTimeException'] = undefined;

/**
 * Kids stay free. The children of guests are allowed to stay in the room/suite of a parent or adult without an additional fee. The policy may or may not stipulate a limit of the child's age or the overall number of children allowed.
 * @member {Boolean} kidsStayFree
 */
Policies.prototype['kidsStayFree'] = undefined;

/**
 * Kids stay free exception.
 * @member {module:model/Policies.KidsStayFreeExceptionEnum} kidsStayFreeException
 */
Policies.prototype['kidsStayFreeException'] = undefined;

/**
 * Max child age. The hotel allows children up to a certain age to stay in the room/suite of a parent or adult without an additional fee.
 * @member {Number} maxChildAge
 */
Policies.prototype['maxChildAge'] = undefined;

/**
 * Max child age exception.
 * @member {module:model/Policies.MaxChildAgeExceptionEnum} maxChildAgeException
 */
Policies.prototype['maxChildAgeException'] = undefined;

/**
 * Max kids stay free count. The hotel allows a specific, defined number of children to stay in the room/suite of a parent or adult without an additional fee.
 * @member {Number} maxKidsStayFreeCount
 */
Policies.prototype['maxKidsStayFreeCount'] = undefined;

/**
 * Max kids stay free count exception.
 * @member {module:model/Policies.MaxKidsStayFreeCountExceptionEnum} maxKidsStayFreeCountException
 */
Policies.prototype['maxKidsStayFreeCountException'] = undefined;

/**
 * @member {module:model/PaymentOptions} paymentOptions
 */
Policies.prototype['paymentOptions'] = undefined;

/**
 * Smoke free property. Smoking is not allowed inside the building, on balconies, or in outside spaces. Hotels that offer a designated area for guests to smoke are not considered smoke-free properties.
 * @member {Boolean} smokeFreeProperty
 */
Policies.prototype['smokeFreeProperty'] = undefined;

/**
 * Smoke free property exception.
 * @member {module:model/Policies.SmokeFreePropertyExceptionEnum} smokeFreePropertyException
 */
Policies.prototype['smokeFreePropertyException'] = undefined;





/**
 * Allowed values for the <code>allInclusiveAvailableException</code> property.
 * @enum {String}
 * @readonly
 */
Policies['AllInclusiveAvailableExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>allInclusiveOnlyException</code> property.
 * @enum {String}
 * @readonly
 */
Policies['AllInclusiveOnlyExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>checkinTimeException</code> property.
 * @enum {String}
 * @readonly
 */
Policies['CheckinTimeExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>checkoutTimeException</code> property.
 * @enum {String}
 * @readonly
 */
Policies['CheckoutTimeExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>kidsStayFreeException</code> property.
 * @enum {String}
 * @readonly
 */
Policies['KidsStayFreeExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>maxChildAgeException</code> property.
 * @enum {String}
 * @readonly
 */
Policies['MaxChildAgeExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>maxKidsStayFreeCountException</code> property.
 * @enum {String}
 * @readonly
 */
Policies['MaxKidsStayFreeCountExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>smokeFreePropertyException</code> property.
 * @enum {String}
 * @readonly
 */
Policies['SmokeFreePropertyExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};



export default Policies;

