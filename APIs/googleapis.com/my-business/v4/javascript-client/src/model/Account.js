/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountState from './AccountState';
import OrganizationInfo from './OrganizationInfo';

/**
 * The Account model module.
 * @module model/Account
 * @version v4
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * An account is a container for your business&#39;s locations. If you are the only user who manages locations for your business, you can use your personal Google Account. To share management of locations with multiple users, [create a business account] (https://support.google.com/business/answer/6085339?ref_topic&#x3D;6085325).
     * @alias module:model/Account
     */
    constructor() { 
        
        Account.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('accountName')) {
                obj['accountName'] = ApiClient.convertToType(data['accountName'], 'String');
            }
            if (data.hasOwnProperty('accountNumber')) {
                obj['accountNumber'] = ApiClient.convertToType(data['accountNumber'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('organizationInfo')) {
                obj['organizationInfo'] = OrganizationInfo.constructFromObject(data['organizationInfo']);
            }
            if (data.hasOwnProperty('permissionLevel')) {
                obj['permissionLevel'] = ApiClient.convertToType(data['permissionLevel'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = AccountState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountName'] && !(typeof data['accountName'] === 'string' || data['accountName'] instanceof String)) {
            throw new Error("Expected the field `accountName` to be a primitive type in the JSON string but got " + data['accountName']);
        }
        // ensure the json data is a string
        if (data['accountNumber'] && !(typeof data['accountNumber'] === 'string' || data['accountNumber'] instanceof String)) {
            throw new Error("Expected the field `accountNumber` to be a primitive type in the JSON string but got " + data['accountNumber']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `organizationInfo`
        if (data['organizationInfo']) { // data not null
          OrganizationInfo.validateJSON(data['organizationInfo']);
        }
        // ensure the json data is a string
        if (data['permissionLevel'] && !(typeof data['permissionLevel'] === 'string' || data['permissionLevel'] instanceof String)) {
            throw new Error("Expected the field `permissionLevel` to be a primitive type in the JSON string but got " + data['permissionLevel']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          AccountState.validateJSON(data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The name of the account. *Note:* For an account with AccountType `PERSONAL`, this is the first and last name of the user account.
 * @member {String} accountName
 */
Account.prototype['accountName'] = undefined;

/**
 * Account reference number if provisioned.
 * @member {String} accountNumber
 */
Account.prototype['accountNumber'] = undefined;

/**
 * The resource name, in the format `accounts/{account_id}`.
 * @member {String} name
 */
Account.prototype['name'] = undefined;

/**
 * @member {module:model/OrganizationInfo} organizationInfo
 */
Account.prototype['organizationInfo'] = undefined;

/**
 * Output only. Specifies the PermissionLevel the caller has for this account.
 * @member {module:model/Account.PermissionLevelEnum} permissionLevel
 */
Account.prototype['permissionLevel'] = undefined;

/**
 * Output only. Specifies the AccountRole the caller has for this account.
 * @member {module:model/Account.RoleEnum} role
 */
Account.prototype['role'] = undefined;

/**
 * @member {module:model/AccountState} state
 */
Account.prototype['state'] = undefined;

/**
 * Output only. Specifies the AccountType of this account.
 * @member {module:model/Account.TypeEnum} type
 */
Account.prototype['type'] = undefined;





/**
 * Allowed values for the <code>permissionLevel</code> property.
 * @enum {String}
 * @readonly
 */
Account['PermissionLevelEnum'] = {

    /**
     * value: "PERMISSION_LEVEL_UNSPECIFIED"
     * @const
     */
    "PERMISSION_LEVEL_UNSPECIFIED": "PERMISSION_LEVEL_UNSPECIFIED",

    /**
     * value: "OWNER_LEVEL"
     * @const
     */
    "OWNER_LEVEL": "OWNER_LEVEL",

    /**
     * value: "MEMBER_LEVEL"
     * @const
     */
    "MEMBER_LEVEL": "MEMBER_LEVEL"
};


/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
Account['RoleEnum'] = {

    /**
     * value: "ACCOUNT_ROLE_UNSPECIFIED"
     * @const
     */
    "ACCOUNT_ROLE_UNSPECIFIED": "ACCOUNT_ROLE_UNSPECIFIED",

    /**
     * value: "OWNER"
     * @const
     */
    "OWNER": "OWNER",

    /**
     * value: "CO_OWNER"
     * @const
     */
    "CO_OWNER": "CO_OWNER",

    /**
     * value: "MANAGER"
     * @const
     */
    "MANAGER": "MANAGER",

    /**
     * value: "COMMUNITY_MANAGER"
     * @const
     */
    "COMMUNITY_MANAGER": "COMMUNITY_MANAGER"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Account['TypeEnum'] = {

    /**
     * value: "ACCOUNT_TYPE_UNSPECIFIED"
     * @const
     */
    "ACCOUNT_TYPE_UNSPECIFIED": "ACCOUNT_TYPE_UNSPECIFIED",

    /**
     * value: "PERSONAL"
     * @const
     */
    "PERSONAL": "PERSONAL",

    /**
     * value: "LOCATION_GROUP"
     * @const
     */
    "LOCATION_GROUP": "LOCATION_GROUP",

    /**
     * value: "USER_GROUP"
     * @const
     */
    "USER_GROUP": "USER_GROUP",

    /**
     * value: "ORGANIZATION"
     * @const
     */
    "ORGANIZATION": "ORGANIZATION"
};



export default Account;

