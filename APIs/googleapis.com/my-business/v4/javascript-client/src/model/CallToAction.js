/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CallToAction model module.
 * @module model/CallToAction
 * @version v4
 */
class CallToAction {
    /**
     * Constructs a new <code>CallToAction</code>.
     * An action that is performed when the user clicks through the post
     * @alias module:model/CallToAction
     */
    constructor() { 
        
        CallToAction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CallToAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CallToAction} obj Optional instance to populate.
     * @return {module:model/CallToAction} The populated <code>CallToAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CallToAction();

            if (data.hasOwnProperty('actionType')) {
                obj['actionType'] = ApiClient.convertToType(data['actionType'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CallToAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CallToAction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actionType'] && !(typeof data['actionType'] === 'string' || data['actionType'] instanceof String)) {
            throw new Error("Expected the field `actionType` to be a primitive type in the JSON string but got " + data['actionType']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The type of action that will be performed.
 * @member {module:model/CallToAction.ActionTypeEnum} actionType
 */
CallToAction.prototype['actionType'] = undefined;

/**
 * The URL the user will be directed to upon clicking. This field should be left unset for Call CTA.
 * @member {String} url
 */
CallToAction.prototype['url'] = undefined;





/**
 * Allowed values for the <code>actionType</code> property.
 * @enum {String}
 * @readonly
 */
CallToAction['ActionTypeEnum'] = {

    /**
     * value: "ACTION_TYPE_UNSPECIFIED"
     * @const
     */
    "ACTION_TYPE_UNSPECIFIED": "ACTION_TYPE_UNSPECIFIED",

    /**
     * value: "BOOK"
     * @const
     */
    "BOOK": "BOOK",

    /**
     * value: "ORDER"
     * @const
     */
    "ORDER": "ORDER",

    /**
     * value: "SHOP"
     * @const
     */
    "SHOP": "SHOP",

    /**
     * value: "LEARN_MORE"
     * @const
     */
    "LEARN_MORE": "LEARN_MORE",

    /**
     * value: "SIGN_UP"
     * @const
     */
    "SIGN_UP": "SIGN_UP",

    /**
     * value: "GET_OFFER"
     * @const
     */
    "GET_OFFER": "GET_OFFER",

    /**
     * value: "CALL"
     * @const
     */
    "CALL": "CALL"
};



export default CallToAction;

