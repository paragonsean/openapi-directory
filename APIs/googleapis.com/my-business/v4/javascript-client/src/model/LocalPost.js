/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CallToAction from './CallToAction';
import LocalPostEvent from './LocalPostEvent';
import LocalPostOffer from './LocalPostOffer';
import MediaItem from './MediaItem';

/**
 * The LocalPost model module.
 * @module model/LocalPost
 * @version v4
 */
class LocalPost {
    /**
     * Constructs a new <code>LocalPost</code>.
     * Represents a [local post](https://support.google.com/business/answer/7662907) for a location.
     * @alias module:model/LocalPost
     */
    constructor() { 
        
        LocalPost.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocalPost</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocalPost} obj Optional instance to populate.
     * @return {module:model/LocalPost} The populated <code>LocalPost</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocalPost();

            if (data.hasOwnProperty('alertType')) {
                obj['alertType'] = ApiClient.convertToType(data['alertType'], 'String');
            }
            if (data.hasOwnProperty('callToAction')) {
                obj['callToAction'] = CallToAction.constructFromObject(data['callToAction']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('event')) {
                obj['event'] = LocalPostEvent.constructFromObject(data['event']);
            }
            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('media')) {
                obj['media'] = ApiClient.convertToType(data['media'], [MediaItem]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('offer')) {
                obj['offer'] = LocalPostOffer.constructFromObject(data['offer']);
            }
            if (data.hasOwnProperty('searchUrl')) {
                obj['searchUrl'] = ApiClient.convertToType(data['searchUrl'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('topicType')) {
                obj['topicType'] = ApiClient.convertToType(data['topicType'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocalPost</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocalPost</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alertType'] && !(typeof data['alertType'] === 'string' || data['alertType'] instanceof String)) {
            throw new Error("Expected the field `alertType` to be a primitive type in the JSON string but got " + data['alertType']);
        }
        // validate the optional field `callToAction`
        if (data['callToAction']) { // data not null
          CallToAction.validateJSON(data['callToAction']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `event`
        if (data['event']) { // data not null
          LocalPostEvent.validateJSON(data['event']);
        }
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        if (data['media']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['media'])) {
                throw new Error("Expected the field `media` to be an array in the JSON data but got " + data['media']);
            }
            // validate the optional field `media` (array)
            for (const item of data['media']) {
                MediaItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `offer`
        if (data['offer']) { // data not null
          LocalPostOffer.validateJSON(data['offer']);
        }
        // ensure the json data is a string
        if (data['searchUrl'] && !(typeof data['searchUrl'] === 'string' || data['searchUrl'] instanceof String)) {
            throw new Error("Expected the field `searchUrl` to be a primitive type in the JSON string but got " + data['searchUrl']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        // ensure the json data is a string
        if (data['topicType'] && !(typeof data['topicType'] === 'string' || data['topicType'] instanceof String)) {
            throw new Error("Expected the field `topicType` to be a primitive type in the JSON string but got " + data['topicType']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * The type of alert the post is created for. This field is only applicable for posts of topic_type Alert, and behaves as a sub-type of Alerts.
 * @member {module:model/LocalPost.AlertTypeEnum} alertType
 */
LocalPost.prototype['alertType'] = undefined;

/**
 * @member {module:model/CallToAction} callToAction
 */
LocalPost.prototype['callToAction'] = undefined;

/**
 * Output only. Time of the creation of the post.
 * @member {String} createTime
 */
LocalPost.prototype['createTime'] = undefined;

/**
 * @member {module:model/LocalPostEvent} event
 */
LocalPost.prototype['event'] = undefined;

/**
 * The language of the local post.
 * @member {String} languageCode
 */
LocalPost.prototype['languageCode'] = undefined;

/**
 * The media associated with the post. source_url is the only supported data field for a LocalPost MediaItem.
 * @member {Array.<module:model/MediaItem>} media
 */
LocalPost.prototype['media'] = undefined;

/**
 * Output only. Google identifier for this local post in the form: `accounts/{account_id}/locations/{location_id}/localPosts/{local_post_id}`
 * @member {String} name
 */
LocalPost.prototype['name'] = undefined;

/**
 * @member {module:model/LocalPostOffer} offer
 */
LocalPost.prototype['offer'] = undefined;

/**
 * Output only. The link to the local post in Google search. This link can be used to share the post via social media, email, text, etc.
 * @member {String} searchUrl
 */
LocalPost.prototype['searchUrl'] = undefined;

/**
 * Output only. The state of the post, indicating what part of its lifecycle it is in.
 * @member {module:model/LocalPost.StateEnum} state
 */
LocalPost.prototype['state'] = undefined;

/**
 * Description/body of the local post.
 * @member {String} summary
 */
LocalPost.prototype['summary'] = undefined;

/**
 * Required. The topic type of the post: standard, event, offer, or alert.
 * @member {module:model/LocalPost.TopicTypeEnum} topicType
 */
LocalPost.prototype['topicType'] = undefined;

/**
 * Output only. Time of the last modification of the post made by the user.
 * @member {String} updateTime
 */
LocalPost.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>alertType</code> property.
 * @enum {String}
 * @readonly
 */
LocalPost['AlertTypeEnum'] = {

    /**
     * value: "ALERT_TYPE_UNSPECIFIED"
     * @const
     */
    "ALERT_TYPE_UNSPECIFIED": "ALERT_TYPE_UNSPECIFIED",

    /**
     * value: "COVID_19"
     * @const
     */
    "COVID_19": "COVID_19"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
LocalPost['StateEnum'] = {

    /**
     * value: "LOCAL_POST_STATE_UNSPECIFIED"
     * @const
     */
    "LOCAL_POST_STATE_UNSPECIFIED": "LOCAL_POST_STATE_UNSPECIFIED",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED",

    /**
     * value: "LIVE"
     * @const
     */
    "LIVE": "LIVE",

    /**
     * value: "PROCESSING"
     * @const
     */
    "PROCESSING": "PROCESSING"
};


/**
 * Allowed values for the <code>topicType</code> property.
 * @enum {String}
 * @readonly
 */
LocalPost['TopicTypeEnum'] = {

    /**
     * value: "LOCAL_POST_TOPIC_TYPE_UNSPECIFIED"
     * @const
     */
    "LOCAL_POST_TOPIC_TYPE_UNSPECIFIED": "LOCAL_POST_TOPIC_TYPE_UNSPECIFIED",

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD",

    /**
     * value: "EVENT"
     * @const
     */
    "EVENT": "EVENT",

    /**
     * value: "OFFER"
     * @const
     */
    "OFFER": "OFFER",

    /**
     * value: "ALERT"
     * @const
     */
    "ALERT": "ALERT"
};



export default LocalPost;

