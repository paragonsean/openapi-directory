/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LivingAreaFeatures model module.
 * @module model/LivingAreaFeatures
 * @version v4
 */
class LivingAreaFeatures {
    /**
     * Constructs a new <code>LivingAreaFeatures</code>.
     * Features in the living area.
     * @alias module:model/LivingAreaFeatures
     */
    constructor() { 
        
        LivingAreaFeatures.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LivingAreaFeatures</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LivingAreaFeatures} obj Optional instance to populate.
     * @return {module:model/LivingAreaFeatures} The populated <code>LivingAreaFeatures</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LivingAreaFeatures();

            if (data.hasOwnProperty('airConditioning')) {
                obj['airConditioning'] = ApiClient.convertToType(data['airConditioning'], 'Boolean');
            }
            if (data.hasOwnProperty('airConditioningException')) {
                obj['airConditioningException'] = ApiClient.convertToType(data['airConditioningException'], 'String');
            }
            if (data.hasOwnProperty('bathtub')) {
                obj['bathtub'] = ApiClient.convertToType(data['bathtub'], 'Boolean');
            }
            if (data.hasOwnProperty('bathtubException')) {
                obj['bathtubException'] = ApiClient.convertToType(data['bathtubException'], 'String');
            }
            if (data.hasOwnProperty('bidet')) {
                obj['bidet'] = ApiClient.convertToType(data['bidet'], 'Boolean');
            }
            if (data.hasOwnProperty('bidetException')) {
                obj['bidetException'] = ApiClient.convertToType(data['bidetException'], 'String');
            }
            if (data.hasOwnProperty('dryer')) {
                obj['dryer'] = ApiClient.convertToType(data['dryer'], 'Boolean');
            }
            if (data.hasOwnProperty('dryerException')) {
                obj['dryerException'] = ApiClient.convertToType(data['dryerException'], 'String');
            }
            if (data.hasOwnProperty('electronicRoomKey')) {
                obj['electronicRoomKey'] = ApiClient.convertToType(data['electronicRoomKey'], 'Boolean');
            }
            if (data.hasOwnProperty('electronicRoomKeyException')) {
                obj['electronicRoomKeyException'] = ApiClient.convertToType(data['electronicRoomKeyException'], 'String');
            }
            if (data.hasOwnProperty('fireplace')) {
                obj['fireplace'] = ApiClient.convertToType(data['fireplace'], 'Boolean');
            }
            if (data.hasOwnProperty('fireplaceException')) {
                obj['fireplaceException'] = ApiClient.convertToType(data['fireplaceException'], 'String');
            }
            if (data.hasOwnProperty('hairdryer')) {
                obj['hairdryer'] = ApiClient.convertToType(data['hairdryer'], 'Boolean');
            }
            if (data.hasOwnProperty('hairdryerException')) {
                obj['hairdryerException'] = ApiClient.convertToType(data['hairdryerException'], 'String');
            }
            if (data.hasOwnProperty('heating')) {
                obj['heating'] = ApiClient.convertToType(data['heating'], 'Boolean');
            }
            if (data.hasOwnProperty('heatingException')) {
                obj['heatingException'] = ApiClient.convertToType(data['heatingException'], 'String');
            }
            if (data.hasOwnProperty('inunitSafe')) {
                obj['inunitSafe'] = ApiClient.convertToType(data['inunitSafe'], 'Boolean');
            }
            if (data.hasOwnProperty('inunitSafeException')) {
                obj['inunitSafeException'] = ApiClient.convertToType(data['inunitSafeException'], 'String');
            }
            if (data.hasOwnProperty('inunitWifiAvailable')) {
                obj['inunitWifiAvailable'] = ApiClient.convertToType(data['inunitWifiAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('inunitWifiAvailableException')) {
                obj['inunitWifiAvailableException'] = ApiClient.convertToType(data['inunitWifiAvailableException'], 'String');
            }
            if (data.hasOwnProperty('ironingEquipment')) {
                obj['ironingEquipment'] = ApiClient.convertToType(data['ironingEquipment'], 'Boolean');
            }
            if (data.hasOwnProperty('ironingEquipmentException')) {
                obj['ironingEquipmentException'] = ApiClient.convertToType(data['ironingEquipmentException'], 'String');
            }
            if (data.hasOwnProperty('payPerViewMovies')) {
                obj['payPerViewMovies'] = ApiClient.convertToType(data['payPerViewMovies'], 'Boolean');
            }
            if (data.hasOwnProperty('payPerViewMoviesException')) {
                obj['payPerViewMoviesException'] = ApiClient.convertToType(data['payPerViewMoviesException'], 'String');
            }
            if (data.hasOwnProperty('privateBathroom')) {
                obj['privateBathroom'] = ApiClient.convertToType(data['privateBathroom'], 'Boolean');
            }
            if (data.hasOwnProperty('privateBathroomException')) {
                obj['privateBathroomException'] = ApiClient.convertToType(data['privateBathroomException'], 'String');
            }
            if (data.hasOwnProperty('shower')) {
                obj['shower'] = ApiClient.convertToType(data['shower'], 'Boolean');
            }
            if (data.hasOwnProperty('showerException')) {
                obj['showerException'] = ApiClient.convertToType(data['showerException'], 'String');
            }
            if (data.hasOwnProperty('toilet')) {
                obj['toilet'] = ApiClient.convertToType(data['toilet'], 'Boolean');
            }
            if (data.hasOwnProperty('toiletException')) {
                obj['toiletException'] = ApiClient.convertToType(data['toiletException'], 'String');
            }
            if (data.hasOwnProperty('tv')) {
                obj['tv'] = ApiClient.convertToType(data['tv'], 'Boolean');
            }
            if (data.hasOwnProperty('tvCasting')) {
                obj['tvCasting'] = ApiClient.convertToType(data['tvCasting'], 'Boolean');
            }
            if (data.hasOwnProperty('tvCastingException')) {
                obj['tvCastingException'] = ApiClient.convertToType(data['tvCastingException'], 'String');
            }
            if (data.hasOwnProperty('tvException')) {
                obj['tvException'] = ApiClient.convertToType(data['tvException'], 'String');
            }
            if (data.hasOwnProperty('tvStreaming')) {
                obj['tvStreaming'] = ApiClient.convertToType(data['tvStreaming'], 'Boolean');
            }
            if (data.hasOwnProperty('tvStreamingException')) {
                obj['tvStreamingException'] = ApiClient.convertToType(data['tvStreamingException'], 'String');
            }
            if (data.hasOwnProperty('universalPowerAdapters')) {
                obj['universalPowerAdapters'] = ApiClient.convertToType(data['universalPowerAdapters'], 'Boolean');
            }
            if (data.hasOwnProperty('universalPowerAdaptersException')) {
                obj['universalPowerAdaptersException'] = ApiClient.convertToType(data['universalPowerAdaptersException'], 'String');
            }
            if (data.hasOwnProperty('washer')) {
                obj['washer'] = ApiClient.convertToType(data['washer'], 'Boolean');
            }
            if (data.hasOwnProperty('washerException')) {
                obj['washerException'] = ApiClient.convertToType(data['washerException'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LivingAreaFeatures</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LivingAreaFeatures</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['airConditioningException'] && !(typeof data['airConditioningException'] === 'string' || data['airConditioningException'] instanceof String)) {
            throw new Error("Expected the field `airConditioningException` to be a primitive type in the JSON string but got " + data['airConditioningException']);
        }
        // ensure the json data is a string
        if (data['bathtubException'] && !(typeof data['bathtubException'] === 'string' || data['bathtubException'] instanceof String)) {
            throw new Error("Expected the field `bathtubException` to be a primitive type in the JSON string but got " + data['bathtubException']);
        }
        // ensure the json data is a string
        if (data['bidetException'] && !(typeof data['bidetException'] === 'string' || data['bidetException'] instanceof String)) {
            throw new Error("Expected the field `bidetException` to be a primitive type in the JSON string but got " + data['bidetException']);
        }
        // ensure the json data is a string
        if (data['dryerException'] && !(typeof data['dryerException'] === 'string' || data['dryerException'] instanceof String)) {
            throw new Error("Expected the field `dryerException` to be a primitive type in the JSON string but got " + data['dryerException']);
        }
        // ensure the json data is a string
        if (data['electronicRoomKeyException'] && !(typeof data['electronicRoomKeyException'] === 'string' || data['electronicRoomKeyException'] instanceof String)) {
            throw new Error("Expected the field `electronicRoomKeyException` to be a primitive type in the JSON string but got " + data['electronicRoomKeyException']);
        }
        // ensure the json data is a string
        if (data['fireplaceException'] && !(typeof data['fireplaceException'] === 'string' || data['fireplaceException'] instanceof String)) {
            throw new Error("Expected the field `fireplaceException` to be a primitive type in the JSON string but got " + data['fireplaceException']);
        }
        // ensure the json data is a string
        if (data['hairdryerException'] && !(typeof data['hairdryerException'] === 'string' || data['hairdryerException'] instanceof String)) {
            throw new Error("Expected the field `hairdryerException` to be a primitive type in the JSON string but got " + data['hairdryerException']);
        }
        // ensure the json data is a string
        if (data['heatingException'] && !(typeof data['heatingException'] === 'string' || data['heatingException'] instanceof String)) {
            throw new Error("Expected the field `heatingException` to be a primitive type in the JSON string but got " + data['heatingException']);
        }
        // ensure the json data is a string
        if (data['inunitSafeException'] && !(typeof data['inunitSafeException'] === 'string' || data['inunitSafeException'] instanceof String)) {
            throw new Error("Expected the field `inunitSafeException` to be a primitive type in the JSON string but got " + data['inunitSafeException']);
        }
        // ensure the json data is a string
        if (data['inunitWifiAvailableException'] && !(typeof data['inunitWifiAvailableException'] === 'string' || data['inunitWifiAvailableException'] instanceof String)) {
            throw new Error("Expected the field `inunitWifiAvailableException` to be a primitive type in the JSON string but got " + data['inunitWifiAvailableException']);
        }
        // ensure the json data is a string
        if (data['ironingEquipmentException'] && !(typeof data['ironingEquipmentException'] === 'string' || data['ironingEquipmentException'] instanceof String)) {
            throw new Error("Expected the field `ironingEquipmentException` to be a primitive type in the JSON string but got " + data['ironingEquipmentException']);
        }
        // ensure the json data is a string
        if (data['payPerViewMoviesException'] && !(typeof data['payPerViewMoviesException'] === 'string' || data['payPerViewMoviesException'] instanceof String)) {
            throw new Error("Expected the field `payPerViewMoviesException` to be a primitive type in the JSON string but got " + data['payPerViewMoviesException']);
        }
        // ensure the json data is a string
        if (data['privateBathroomException'] && !(typeof data['privateBathroomException'] === 'string' || data['privateBathroomException'] instanceof String)) {
            throw new Error("Expected the field `privateBathroomException` to be a primitive type in the JSON string but got " + data['privateBathroomException']);
        }
        // ensure the json data is a string
        if (data['showerException'] && !(typeof data['showerException'] === 'string' || data['showerException'] instanceof String)) {
            throw new Error("Expected the field `showerException` to be a primitive type in the JSON string but got " + data['showerException']);
        }
        // ensure the json data is a string
        if (data['toiletException'] && !(typeof data['toiletException'] === 'string' || data['toiletException'] instanceof String)) {
            throw new Error("Expected the field `toiletException` to be a primitive type in the JSON string but got " + data['toiletException']);
        }
        // ensure the json data is a string
        if (data['tvCastingException'] && !(typeof data['tvCastingException'] === 'string' || data['tvCastingException'] instanceof String)) {
            throw new Error("Expected the field `tvCastingException` to be a primitive type in the JSON string but got " + data['tvCastingException']);
        }
        // ensure the json data is a string
        if (data['tvException'] && !(typeof data['tvException'] === 'string' || data['tvException'] instanceof String)) {
            throw new Error("Expected the field `tvException` to be a primitive type in the JSON string but got " + data['tvException']);
        }
        // ensure the json data is a string
        if (data['tvStreamingException'] && !(typeof data['tvStreamingException'] === 'string' || data['tvStreamingException'] instanceof String)) {
            throw new Error("Expected the field `tvStreamingException` to be a primitive type in the JSON string but got " + data['tvStreamingException']);
        }
        // ensure the json data is a string
        if (data['universalPowerAdaptersException'] && !(typeof data['universalPowerAdaptersException'] === 'string' || data['universalPowerAdaptersException'] instanceof String)) {
            throw new Error("Expected the field `universalPowerAdaptersException` to be a primitive type in the JSON string but got " + data['universalPowerAdaptersException']);
        }
        // ensure the json data is a string
        if (data['washerException'] && !(typeof data['washerException'] === 'string' || data['washerException'] instanceof String)) {
            throw new Error("Expected the field `washerException` to be a primitive type in the JSON string but got " + data['washerException']);
        }

        return true;
    }


}



/**
 * Air conditioning. An electrical machine used to cool the temperature of the guestroom.
 * @member {Boolean} airConditioning
 */
LivingAreaFeatures.prototype['airConditioning'] = undefined;

/**
 * Air conditioning exception.
 * @member {module:model/LivingAreaFeatures.AirConditioningExceptionEnum} airConditioningException
 */
LivingAreaFeatures.prototype['airConditioningException'] = undefined;

/**
 * Bathtub. A fixed plumbing feature set on the floor and consisting of a large container that accommodates the body of an adult for the purpose of seated bathing. Includes knobs or fixtures to control the temperature of the water, a faucet through which the water flows, and a drain that can be closed for filling and opened for draining.
 * @member {Boolean} bathtub
 */
LivingAreaFeatures.prototype['bathtub'] = undefined;

/**
 * Bathtub exception.
 * @member {module:model/LivingAreaFeatures.BathtubExceptionEnum} bathtubException
 */
LivingAreaFeatures.prototype['bathtubException'] = undefined;

/**
 * Bidet. A plumbing fixture attached to a toilet or a low, fixed sink designed for the purpose of washing after toilet use.
 * @member {Boolean} bidet
 */
LivingAreaFeatures.prototype['bidet'] = undefined;

/**
 * Bidet exception.
 * @member {module:model/LivingAreaFeatures.BidetExceptionEnum} bidetException
 */
LivingAreaFeatures.prototype['bidetException'] = undefined;

/**
 * Dryer. An electrical machine designed to dry clothing.
 * @member {Boolean} dryer
 */
LivingAreaFeatures.prototype['dryer'] = undefined;

/**
 * Dryer exception.
 * @member {module:model/LivingAreaFeatures.DryerExceptionEnum} dryerException
 */
LivingAreaFeatures.prototype['dryerException'] = undefined;

/**
 * Electronic room key. A card coded by the check-in computer that is read by the lock on the hotel guestroom door to allow for entry.
 * @member {Boolean} electronicRoomKey
 */
LivingAreaFeatures.prototype['electronicRoomKey'] = undefined;

/**
 * Electronic room key exception.
 * @member {module:model/LivingAreaFeatures.ElectronicRoomKeyExceptionEnum} electronicRoomKeyException
 */
LivingAreaFeatures.prototype['electronicRoomKeyException'] = undefined;

/**
 * Fireplace. A framed opening (aka hearth) at the base of a chimney in which logs or an electrical fire feature are burned to provide a relaxing ambiance or to heat the room. Often made of bricks or stone.
 * @member {Boolean} fireplace
 */
LivingAreaFeatures.prototype['fireplace'] = undefined;

/**
 * Fireplace exception.
 * @member {module:model/LivingAreaFeatures.FireplaceExceptionEnum} fireplaceException
 */
LivingAreaFeatures.prototype['fireplaceException'] = undefined;

/**
 * Hairdryer. A handheld electric appliance that blows temperature-controlled air for the purpose of drying wet hair. Can be mounted to a bathroom wall or a freestanding device stored in the guestroom's bathroom or closet.
 * @member {Boolean} hairdryer
 */
LivingAreaFeatures.prototype['hairdryer'] = undefined;

/**
 * Hairdryer exception.
 * @member {module:model/LivingAreaFeatures.HairdryerExceptionEnum} hairdryerException
 */
LivingAreaFeatures.prototype['hairdryerException'] = undefined;

/**
 * Heating. An electrical machine used to warm the temperature of the guestroom.
 * @member {Boolean} heating
 */
LivingAreaFeatures.prototype['heating'] = undefined;

/**
 * Heating exception.
 * @member {module:model/LivingAreaFeatures.HeatingExceptionEnum} heatingException
 */
LivingAreaFeatures.prototype['heatingException'] = undefined;

/**
 * In-unit safe. A strong fireproof cabinet with a programmable lock, used for the protected storage of valuables in a guestroom. Often built into a closet.
 * @member {Boolean} inunitSafe
 */
LivingAreaFeatures.prototype['inunitSafe'] = undefined;

/**
 * In-unit safe exception.
 * @member {module:model/LivingAreaFeatures.InunitSafeExceptionEnum} inunitSafeException
 */
LivingAreaFeatures.prototype['inunitSafeException'] = undefined;

/**
 * In-unit Wifi available. Guests can wirelessly connect to the Internet in the guestroom. Can be free or for a fee.
 * @member {Boolean} inunitWifiAvailable
 */
LivingAreaFeatures.prototype['inunitWifiAvailable'] = undefined;

/**
 * In-unit Wifi available exception.
 * @member {module:model/LivingAreaFeatures.InunitWifiAvailableExceptionEnum} inunitWifiAvailableException
 */
LivingAreaFeatures.prototype['inunitWifiAvailableException'] = undefined;

/**
 * Ironing equipment. A device, usually with a flat metal base, that is heated to smooth, finish, or press clothes and a flat, padded, cloth-covered surface on which the clothes are worked.
 * @member {Boolean} ironingEquipment
 */
LivingAreaFeatures.prototype['ironingEquipment'] = undefined;

/**
 * Ironing equipment exception.
 * @member {module:model/LivingAreaFeatures.IroningEquipmentExceptionEnum} ironingEquipmentException
 */
LivingAreaFeatures.prototype['ironingEquipmentException'] = undefined;

/**
 * Pay per view movies. Televisions with channels that offer films that can be viewed for a fee, and have an interface to allow the viewer to accept the terms and approve payment.
 * @member {Boolean} payPerViewMovies
 */
LivingAreaFeatures.prototype['payPerViewMovies'] = undefined;

/**
 * Pay per view movies exception.
 * @member {module:model/LivingAreaFeatures.PayPerViewMoviesExceptionEnum} payPerViewMoviesException
 */
LivingAreaFeatures.prototype['payPerViewMoviesException'] = undefined;

/**
 * Private bathroom. A bathroom designated for the express use of the guests staying in a specific guestroom.
 * @member {Boolean} privateBathroom
 */
LivingAreaFeatures.prototype['privateBathroom'] = undefined;

/**
 * Private bathroom exception.
 * @member {module:model/LivingAreaFeatures.PrivateBathroomExceptionEnum} privateBathroomException
 */
LivingAreaFeatures.prototype['privateBathroomException'] = undefined;

/**
 * Shower. A fixed plumbing fixture for standing bathing that features a tall spray spout or faucet through which water flows, a knob or knobs that control the water's temperature, and a drain in the floor.
 * @member {Boolean} shower
 */
LivingAreaFeatures.prototype['shower'] = undefined;

/**
 * Shower exception.
 * @member {module:model/LivingAreaFeatures.ShowerExceptionEnum} showerException
 */
LivingAreaFeatures.prototype['showerException'] = undefined;

/**
 * Toilet. A fixed bathroom feature connected to a sewer or septic system and consisting of a water-flushed bowl with a seat, as well as a device that elicites the water-flushing action. Used for the process and disposal of human waste.
 * @member {Boolean} toilet
 */
LivingAreaFeatures.prototype['toilet'] = undefined;

/**
 * Toilet exception.
 * @member {module:model/LivingAreaFeatures.ToiletExceptionEnum} toiletException
 */
LivingAreaFeatures.prototype['toiletException'] = undefined;

/**
 * TV. A television is available in the guestroom.
 * @member {Boolean} tv
 */
LivingAreaFeatures.prototype['tv'] = undefined;

/**
 * TV casting. A television equipped with a device through which the video entertainment accessed on a personal computer, phone or tablet can be wirelessly delivered to and viewed on the guestroom's television.
 * @member {Boolean} tvCasting
 */
LivingAreaFeatures.prototype['tvCasting'] = undefined;

/**
 * TV exception.
 * @member {module:model/LivingAreaFeatures.TvCastingExceptionEnum} tvCastingException
 */
LivingAreaFeatures.prototype['tvCastingException'] = undefined;

/**
 * TV exception.
 * @member {module:model/LivingAreaFeatures.TvExceptionEnum} tvException
 */
LivingAreaFeatures.prototype['tvException'] = undefined;

/**
 * TV streaming. Televisions that embed a range of web-based apps to allow for watching media from those apps.
 * @member {Boolean} tvStreaming
 */
LivingAreaFeatures.prototype['tvStreaming'] = undefined;

/**
 * TV streaming exception.
 * @member {module:model/LivingAreaFeatures.TvStreamingExceptionEnum} tvStreamingException
 */
LivingAreaFeatures.prototype['tvStreamingException'] = undefined;

/**
 * Universal power adapters. A power supply for electronic devices which plugs into a wall for the purpose of converting AC to a single DC voltage. Also know as AC adapter or charger.
 * @member {Boolean} universalPowerAdapters
 */
LivingAreaFeatures.prototype['universalPowerAdapters'] = undefined;

/**
 * Universal power adapters exception.
 * @member {module:model/LivingAreaFeatures.UniversalPowerAdaptersExceptionEnum} universalPowerAdaptersException
 */
LivingAreaFeatures.prototype['universalPowerAdaptersException'] = undefined;

/**
 * Washer. An electrical machine connected to a running water source designed to launder clothing.
 * @member {Boolean} washer
 */
LivingAreaFeatures.prototype['washer'] = undefined;

/**
 * Washer exception.
 * @member {module:model/LivingAreaFeatures.WasherExceptionEnum} washerException
 */
LivingAreaFeatures.prototype['washerException'] = undefined;





/**
 * Allowed values for the <code>airConditioningException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['AirConditioningExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>bathtubException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['BathtubExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>bidetException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['BidetExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>dryerException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['DryerExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>electronicRoomKeyException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['ElectronicRoomKeyExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>fireplaceException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['FireplaceExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>hairdryerException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['HairdryerExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>heatingException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['HeatingExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>inunitSafeException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['InunitSafeExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>inunitWifiAvailableException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['InunitWifiAvailableExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>ironingEquipmentException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['IroningEquipmentExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>payPerViewMoviesException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['PayPerViewMoviesExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>privateBathroomException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['PrivateBathroomExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>showerException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['ShowerExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>toiletException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['ToiletExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>tvCastingException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['TvCastingExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>tvException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['TvExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>tvStreamingException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['TvStreamingExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>universalPowerAdaptersException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['UniversalPowerAdaptersExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>washerException</code> property.
 * @enum {String}
 * @readonly
 */
LivingAreaFeatures['WasherExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};



export default LivingAreaFeatures;

