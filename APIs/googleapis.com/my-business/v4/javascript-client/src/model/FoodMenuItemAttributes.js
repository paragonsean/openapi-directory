/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Ingredient from './Ingredient';
import Money from './Money';
import NutritionFacts from './NutritionFacts';
import PortionSize from './PortionSize';

/**
 * The FoodMenuItemAttributes model module.
 * @module model/FoodMenuItemAttributes
 * @version v4
 */
class FoodMenuItemAttributes {
    /**
     * Constructs a new <code>FoodMenuItemAttributes</code>.
     * Attributes of a food item/dish.
     * @alias module:model/FoodMenuItemAttributes
     */
    constructor() { 
        
        FoodMenuItemAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FoodMenuItemAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FoodMenuItemAttributes} obj Optional instance to populate.
     * @return {module:model/FoodMenuItemAttributes} The populated <code>FoodMenuItemAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FoodMenuItemAttributes();

            if (data.hasOwnProperty('allergen')) {
                obj['allergen'] = ApiClient.convertToType(data['allergen'], ['String']);
            }
            if (data.hasOwnProperty('dietaryRestriction')) {
                obj['dietaryRestriction'] = ApiClient.convertToType(data['dietaryRestriction'], ['String']);
            }
            if (data.hasOwnProperty('ingredients')) {
                obj['ingredients'] = ApiClient.convertToType(data['ingredients'], [Ingredient]);
            }
            if (data.hasOwnProperty('mediaKeys')) {
                obj['mediaKeys'] = ApiClient.convertToType(data['mediaKeys'], ['String']);
            }
            if (data.hasOwnProperty('nutritionFacts')) {
                obj['nutritionFacts'] = NutritionFacts.constructFromObject(data['nutritionFacts']);
            }
            if (data.hasOwnProperty('portionSize')) {
                obj['portionSize'] = PortionSize.constructFromObject(data['portionSize']);
            }
            if (data.hasOwnProperty('preparationMethods')) {
                obj['preparationMethods'] = ApiClient.convertToType(data['preparationMethods'], ['String']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = Money.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('servesNumPeople')) {
                obj['servesNumPeople'] = ApiClient.convertToType(data['servesNumPeople'], 'Number');
            }
            if (data.hasOwnProperty('spiciness')) {
                obj['spiciness'] = ApiClient.convertToType(data['spiciness'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FoodMenuItemAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FoodMenuItemAttributes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allergen'])) {
            throw new Error("Expected the field `allergen` to be an array in the JSON data but got " + data['allergen']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dietaryRestriction'])) {
            throw new Error("Expected the field `dietaryRestriction` to be an array in the JSON data but got " + data['dietaryRestriction']);
        }
        if (data['ingredients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ingredients'])) {
                throw new Error("Expected the field `ingredients` to be an array in the JSON data but got " + data['ingredients']);
            }
            // validate the optional field `ingredients` (array)
            for (const item of data['ingredients']) {
                Ingredient.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mediaKeys'])) {
            throw new Error("Expected the field `mediaKeys` to be an array in the JSON data but got " + data['mediaKeys']);
        }
        // validate the optional field `nutritionFacts`
        if (data['nutritionFacts']) { // data not null
          NutritionFacts.validateJSON(data['nutritionFacts']);
        }
        // validate the optional field `portionSize`
        if (data['portionSize']) { // data not null
          PortionSize.validateJSON(data['portionSize']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['preparationMethods'])) {
            throw new Error("Expected the field `preparationMethods` to be an array in the JSON data but got " + data['preparationMethods']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          Money.validateJSON(data['price']);
        }
        // ensure the json data is a string
        if (data['spiciness'] && !(typeof data['spiciness'] === 'string' || data['spiciness'] instanceof String)) {
            throw new Error("Expected the field `spiciness` to be a primitive type in the JSON string but got " + data['spiciness']);
        }

        return true;
    }


}



/**
 * Optional. Allergens associated with the food dish. It is highly recommended to provide this field.
 * @member {Array.<module:model/FoodMenuItemAttributes.AllergenEnum>} allergen
 */
FoodMenuItemAttributes.prototype['allergen'] = undefined;

/**
 * Optional. Dietary information of the food dish. It is highly recommended to provide this field.
 * @member {Array.<module:model/FoodMenuItemAttributes.DietaryRestrictionEnum>} dietaryRestriction
 */
FoodMenuItemAttributes.prototype['dietaryRestriction'] = undefined;

/**
 * Optional. Ingredients of the food dish option.
 * @member {Array.<module:model/Ingredient>} ingredients
 */
FoodMenuItemAttributes.prototype['ingredients'] = undefined;

/**
 * Optional. The media keys of the media associated with the dish. Only photo media is supported. When there are multiple photos associated, the first photo is considered as the preferred photo.
 * @member {Array.<String>} mediaKeys
 */
FoodMenuItemAttributes.prototype['mediaKeys'] = undefined;

/**
 * @member {module:model/NutritionFacts} nutritionFacts
 */
FoodMenuItemAttributes.prototype['nutritionFacts'] = undefined;

/**
 * @member {module:model/PortionSize} portionSize
 */
FoodMenuItemAttributes.prototype['portionSize'] = undefined;

/**
 * Optional. Methods on how the food dish option is prepared.
 * @member {Array.<module:model/FoodMenuItemAttributes.PreparationMethodsEnum>} preparationMethods
 */
FoodMenuItemAttributes.prototype['preparationMethods'] = undefined;

/**
 * @member {module:model/Money} price
 */
FoodMenuItemAttributes.prototype['price'] = undefined;

/**
 * Optional. Number of people can be served by this food dish option.
 * @member {Number} servesNumPeople
 */
FoodMenuItemAttributes.prototype['servesNumPeople'] = undefined;

/**
 * Optional. Spiciness level of the food dish.
 * @member {module:model/FoodMenuItemAttributes.SpicinessEnum} spiciness
 */
FoodMenuItemAttributes.prototype['spiciness'] = undefined;





/**
 * Allowed values for the <code>allergen</code> property.
 * @enum {String}
 * @readonly
 */
FoodMenuItemAttributes['AllergenEnum'] = {

    /**
     * value: "ALLERGEN_UNSPECIFIED"
     * @const
     */
    "ALLERGEN_UNSPECIFIED": "ALLERGEN_UNSPECIFIED",

    /**
     * value: "DAIRY"
     * @const
     */
    "DAIRY": "DAIRY",

    /**
     * value: "EGG"
     * @const
     */
    "EGG": "EGG",

    /**
     * value: "FISH"
     * @const
     */
    "FISH": "FISH",

    /**
     * value: "PEANUT"
     * @const
     */
    "PEANUT": "PEANUT",

    /**
     * value: "SHELLFISH"
     * @const
     */
    "SHELLFISH": "SHELLFISH",

    /**
     * value: "SOY"
     * @const
     */
    "SOY": "SOY",

    /**
     * value: "TREE_NUT"
     * @const
     */
    "TREE_NUT": "TREE_NUT",

    /**
     * value: "WHEAT"
     * @const
     */
    "WHEAT": "WHEAT"
};


/**
 * Allowed values for the <code>dietaryRestriction</code> property.
 * @enum {String}
 * @readonly
 */
FoodMenuItemAttributes['DietaryRestrictionEnum'] = {

    /**
     * value: "DIETARY_RESTRICTION_UNSPECIFIED"
     * @const
     */
    "DIETARY_RESTRICTION_UNSPECIFIED": "DIETARY_RESTRICTION_UNSPECIFIED",

    /**
     * value: "HALAL"
     * @const
     */
    "HALAL": "HALAL",

    /**
     * value: "KOSHER"
     * @const
     */
    "KOSHER": "KOSHER",

    /**
     * value: "ORGANIC"
     * @const
     */
    "ORGANIC": "ORGANIC",

    /**
     * value: "VEGAN"
     * @const
     */
    "VEGAN": "VEGAN",

    /**
     * value: "VEGETARIAN"
     * @const
     */
    "VEGETARIAN": "VEGETARIAN"
};


/**
 * Allowed values for the <code>preparationMethods</code> property.
 * @enum {String}
 * @readonly
 */
FoodMenuItemAttributes['PreparationMethodsEnum'] = {

    /**
     * value: "PREPARATION_METHOD_UNSPECIFIED"
     * @const
     */
    "PREPARATION_METHOD_UNSPECIFIED": "PREPARATION_METHOD_UNSPECIFIED",

    /**
     * value: "BAKED"
     * @const
     */
    "BAKED": "BAKED",

    /**
     * value: "BARBECUED"
     * @const
     */
    "BARBECUED": "BARBECUED",

    /**
     * value: "BASTED"
     * @const
     */
    "BASTED": "BASTED",

    /**
     * value: "BLANCHED"
     * @const
     */
    "BLANCHED": "BLANCHED",

    /**
     * value: "BOILED"
     * @const
     */
    "BOILED": "BOILED",

    /**
     * value: "BRAISED"
     * @const
     */
    "BRAISED": "BRAISED",

    /**
     * value: "CODDLED"
     * @const
     */
    "CODDLED": "CODDLED",

    /**
     * value: "FERMENTED"
     * @const
     */
    "FERMENTED": "FERMENTED",

    /**
     * value: "FRIED"
     * @const
     */
    "FRIED": "FRIED",

    /**
     * value: "GRILLED"
     * @const
     */
    "GRILLED": "GRILLED",

    /**
     * value: "KNEADED"
     * @const
     */
    "KNEADED": "KNEADED",

    /**
     * value: "MARINATED"
     * @const
     */
    "MARINATED": "MARINATED",

    /**
     * value: "PAN_FRIED"
     * @const
     */
    "PAN_FRIED": "PAN_FRIED",

    /**
     * value: "PICKLED"
     * @const
     */
    "PICKLED": "PICKLED",

    /**
     * value: "PRESSURE_COOKED"
     * @const
     */
    "PRESSURE_COOKED": "PRESSURE_COOKED",

    /**
     * value: "ROASTED"
     * @const
     */
    "ROASTED": "ROASTED",

    /**
     * value: "SAUTEED"
     * @const
     */
    "SAUTEED": "SAUTEED",

    /**
     * value: "SEARED"
     * @const
     */
    "SEARED": "SEARED",

    /**
     * value: "SIMMERED"
     * @const
     */
    "SIMMERED": "SIMMERED",

    /**
     * value: "SMOKED"
     * @const
     */
    "SMOKED": "SMOKED",

    /**
     * value: "STEAMED"
     * @const
     */
    "STEAMED": "STEAMED",

    /**
     * value: "STEEPED"
     * @const
     */
    "STEEPED": "STEEPED",

    /**
     * value: "STIR_FRIED"
     * @const
     */
    "STIR_FRIED": "STIR_FRIED",

    /**
     * value: "OTHER_METHOD"
     * @const
     */
    "OTHER_METHOD": "OTHER_METHOD"
};


/**
 * Allowed values for the <code>spiciness</code> property.
 * @enum {String}
 * @readonly
 */
FoodMenuItemAttributes['SpicinessEnum'] = {

    /**
     * value: "SPICINESS_UNSPECIFIED"
     * @const
     */
    "SPICINESS_UNSPECIFIED": "SPICINESS_UNSPECIFIED",

    /**
     * value: "MILD"
     * @const
     */
    "MILD": "MILD",

    /**
     * value: "MEDIUM"
     * @const
     */
    "MEDIUM": "MEDIUM",

    /**
     * value: "HOT"
     * @const
     */
    "HOT": "HOT"
};



export default FoodMenuItemAttributes;

