/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Author from './Author';

/**
 * The Answer model module.
 * @module model/Answer
 * @version v4
 */
class Answer {
    /**
     * Constructs a new <code>Answer</code>.
     * Represents an answer to a question
     * @alias module:model/Answer
     */
    constructor() { 
        
        Answer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Answer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Answer} obj Optional instance to populate.
     * @return {module:model/Answer} The populated <code>Answer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Answer();

            if (data.hasOwnProperty('author')) {
                obj['author'] = Author.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('upvoteCount')) {
                obj['upvoteCount'] = ApiClient.convertToType(data['upvoteCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Answer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Answer</code>.
     */
    static validateJSON(data) {
        // validate the optional field `author`
        if (data['author']) { // data not null
          Author.validateJSON(data['author']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/Author} author
 */
Answer.prototype['author'] = undefined;

/**
 * Output only. The timestamp for when the answer was written.
 * @member {String} createTime
 */
Answer.prototype['createTime'] = undefined;

/**
 * Output only. The unique name for the answer accounts/_*_/locations/_*_/questions/_*_/answers/_*
 * @member {String} name
 */
Answer.prototype['name'] = undefined;

/**
 * The text of the answer. It should contain at least one non-whitespace character. The maximum length is 4096 characters.
 * @member {String} text
 */
Answer.prototype['text'] = undefined;

/**
 * Output only. The timestamp for when the answer was last modified.
 * @member {String} updateTime
 */
Answer.prototype['updateTime'] = undefined;

/**
 * Output only. The number of upvotes for the answer.
 * @member {Number} upvoteCount
 */
Answer.prototype['upvoteCount'] = undefined;






export default Answer;

