/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Item from './Item';
import Label from './Label';

/**
 * The Section model module.
 * @module model/Section
 * @version v4
 */
class Section {
    /**
     * Constructs a new <code>Section</code>.
     * A section of the price list containing one or more items.
     * @alias module:model/Section
     */
    constructor() { 
        
        Section.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Section</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Section} obj Optional instance to populate.
     * @return {module:model/Section} The populated <code>Section</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Section();

            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [Item]);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [Label]);
            }
            if (data.hasOwnProperty('sectionId')) {
                obj['sectionId'] = ApiClient.convertToType(data['sectionId'], 'String');
            }
            if (data.hasOwnProperty('sectionType')) {
                obj['sectionType'] = ApiClient.convertToType(data['sectionType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Section</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Section</code>.
     */
    static validateJSON(data) {
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                Item.validateJSON(item);
            };
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                Label.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sectionId'] && !(typeof data['sectionId'] === 'string' || data['sectionId'] instanceof String)) {
            throw new Error("Expected the field `sectionId` to be a primitive type in the JSON string but got " + data['sectionId']);
        }
        // ensure the json data is a string
        if (data['sectionType'] && !(typeof data['sectionType'] === 'string' || data['sectionType'] instanceof String)) {
            throw new Error("Expected the field `sectionType` to be a primitive type in the JSON string but got " + data['sectionType']);
        }

        return true;
    }


}



/**
 * Items that are contained within this section of the price list.
 * @member {Array.<module:model/Item>} items
 */
Section.prototype['items'] = undefined;

/**
 * Required. Language-tagged labels for the section. We recommend that section names and descriptions be 140 characters or less. At least one set of labels is required.
 * @member {Array.<module:model/Label>} labels
 */
Section.prototype['labels'] = undefined;

/**
 * Required. ID for the section. Price list, section, and item IDs cannot be duplicated within this Location.
 * @member {String} sectionId
 */
Section.prototype['sectionId'] = undefined;

/**
 * Optional. Type of the current price list section. Default value is FOOD.
 * @member {module:model/Section.SectionTypeEnum} sectionType
 */
Section.prototype['sectionType'] = undefined;





/**
 * Allowed values for the <code>sectionType</code> property.
 * @enum {String}
 * @readonly
 */
Section['SectionTypeEnum'] = {

    /**
     * value: "SECTION_TYPE_UNSPECIFIED"
     * @const
     */
    "SECTION_TYPE_UNSPECIFIED": "SECTION_TYPE_UNSPECIFIED",

    /**
     * value: "FOOD"
     * @const
     */
    "FOOD": "FOOD",

    /**
     * value: "SERVICES"
     * @const
     */
    "SERVICES": "SERVICES"
};



export default Section;

