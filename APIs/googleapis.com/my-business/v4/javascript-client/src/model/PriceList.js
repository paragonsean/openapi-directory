/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Label from './Label';
import Section from './Section';

/**
 * The PriceList model module.
 * @module model/PriceList
 * @version v4
 */
class PriceList {
    /**
     * Constructs a new <code>PriceList</code>.
     * A list of item price information. Price lists are structured as one or more price lists, each containing one or more sections with one or more items. For example, food price lists may represent breakfast/lunch/dinner menus, with sections for burgers/steak/seafood.
     * @alias module:model/PriceList
     */
    constructor() { 
        
        PriceList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PriceList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PriceList} obj Optional instance to populate.
     * @return {module:model/PriceList} The populated <code>PriceList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PriceList();

            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [Label]);
            }
            if (data.hasOwnProperty('priceListId')) {
                obj['priceListId'] = ApiClient.convertToType(data['priceListId'], 'String');
            }
            if (data.hasOwnProperty('sections')) {
                obj['sections'] = ApiClient.convertToType(data['sections'], [Section]);
            }
            if (data.hasOwnProperty('sourceUrl')) {
                obj['sourceUrl'] = ApiClient.convertToType(data['sourceUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PriceList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PriceList</code>.
     */
    static validateJSON(data) {
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                Label.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['priceListId'] && !(typeof data['priceListId'] === 'string' || data['priceListId'] instanceof String)) {
            throw new Error("Expected the field `priceListId` to be a primitive type in the JSON string but got " + data['priceListId']);
        }
        if (data['sections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sections'])) {
                throw new Error("Expected the field `sections` to be an array in the JSON data but got " + data['sections']);
            }
            // validate the optional field `sections` (array)
            for (const item of data['sections']) {
                Section.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sourceUrl'] && !(typeof data['sourceUrl'] === 'string' || data['sourceUrl'] instanceof String)) {
            throw new Error("Expected the field `sourceUrl` to be a primitive type in the JSON string but got " + data['sourceUrl']);
        }

        return true;
    }


}



/**
 * Required. Language-tagged labels for the price list.
 * @member {Array.<module:model/Label>} labels
 */
PriceList.prototype['labels'] = undefined;

/**
 * Required. ID for the price list. Price list, section, and item IDs cannot be duplicated within this Location.
 * @member {String} priceListId
 */
PriceList.prototype['priceListId'] = undefined;

/**
 * Required. Sections for this price list. Each price list must contain at least one section.
 * @member {Array.<module:model/Section>} sections
 */
PriceList.prototype['sections'] = undefined;

/**
 * Optional source URL of where the price list was retrieved from. For example, this could be the URL of the page that was automatically scraped to populate the menu information.
 * @member {String} sourceUrl
 */
PriceList.prototype['sourceUrl'] = undefined;






export default PriceList;

