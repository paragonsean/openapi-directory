/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CaloriesFact from './CaloriesFact';
import NutritionFact from './NutritionFact';

/**
 * The NutritionFacts model module.
 * @module model/NutritionFacts
 * @version v4
 */
class NutritionFacts {
    /**
     * Constructs a new <code>NutritionFacts</code>.
     * This message represents nutrition facts for a food dish.
     * @alias module:model/NutritionFacts
     */
    constructor() { 
        
        NutritionFacts.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NutritionFacts</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NutritionFacts} obj Optional instance to populate.
     * @return {module:model/NutritionFacts} The populated <code>NutritionFacts</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NutritionFacts();

            if (data.hasOwnProperty('calories')) {
                obj['calories'] = CaloriesFact.constructFromObject(data['calories']);
            }
            if (data.hasOwnProperty('cholesterol')) {
                obj['cholesterol'] = NutritionFact.constructFromObject(data['cholesterol']);
            }
            if (data.hasOwnProperty('protein')) {
                obj['protein'] = NutritionFact.constructFromObject(data['protein']);
            }
            if (data.hasOwnProperty('sodium')) {
                obj['sodium'] = NutritionFact.constructFromObject(data['sodium']);
            }
            if (data.hasOwnProperty('totalCarbohydrate')) {
                obj['totalCarbohydrate'] = NutritionFact.constructFromObject(data['totalCarbohydrate']);
            }
            if (data.hasOwnProperty('totalFat')) {
                obj['totalFat'] = NutritionFact.constructFromObject(data['totalFat']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NutritionFacts</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NutritionFacts</code>.
     */
    static validateJSON(data) {
        // validate the optional field `calories`
        if (data['calories']) { // data not null
          CaloriesFact.validateJSON(data['calories']);
        }
        // validate the optional field `cholesterol`
        if (data['cholesterol']) { // data not null
          NutritionFact.validateJSON(data['cholesterol']);
        }
        // validate the optional field `protein`
        if (data['protein']) { // data not null
          NutritionFact.validateJSON(data['protein']);
        }
        // validate the optional field `sodium`
        if (data['sodium']) { // data not null
          NutritionFact.validateJSON(data['sodium']);
        }
        // validate the optional field `totalCarbohydrate`
        if (data['totalCarbohydrate']) { // data not null
          NutritionFact.validateJSON(data['totalCarbohydrate']);
        }
        // validate the optional field `totalFat`
        if (data['totalFat']) { // data not null
          NutritionFact.validateJSON(data['totalFat']);
        }

        return true;
    }


}



/**
 * @member {module:model/CaloriesFact} calories
 */
NutritionFacts.prototype['calories'] = undefined;

/**
 * @member {module:model/NutritionFact} cholesterol
 */
NutritionFacts.prototype['cholesterol'] = undefined;

/**
 * @member {module:model/NutritionFact} protein
 */
NutritionFacts.prototype['protein'] = undefined;

/**
 * @member {module:model/NutritionFact} sodium
 */
NutritionFacts.prototype['sodium'] = undefined;

/**
 * @member {module:model/NutritionFact} totalCarbohydrate
 */
NutritionFacts.prototype['totalCarbohydrate'] = undefined;

/**
 * @member {module:model/NutritionFact} totalFat
 */
NutritionFacts.prototype['totalFat'] = undefined;






export default NutritionFacts;

