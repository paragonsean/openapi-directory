/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FoodMenuSection from './FoodMenuSection';
import MenuLabel from './MenuLabel';

/**
 * The FoodMenu model module.
 * @module model/FoodMenu
 * @version v4
 */
class FoodMenu {
    /**
     * Constructs a new <code>FoodMenu</code>.
     * Menu of a business that serves food dishes.
     * @alias module:model/FoodMenu
     */
    constructor() { 
        
        FoodMenu.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FoodMenu</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FoodMenu} obj Optional instance to populate.
     * @return {module:model/FoodMenu} The populated <code>FoodMenu</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FoodMenu();

            if (data.hasOwnProperty('cuisines')) {
                obj['cuisines'] = ApiClient.convertToType(data['cuisines'], ['String']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [MenuLabel]);
            }
            if (data.hasOwnProperty('sections')) {
                obj['sections'] = ApiClient.convertToType(data['sections'], [FoodMenuSection]);
            }
            if (data.hasOwnProperty('sourceUrl')) {
                obj['sourceUrl'] = ApiClient.convertToType(data['sourceUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FoodMenu</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FoodMenu</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['cuisines'])) {
            throw new Error("Expected the field `cuisines` to be an array in the JSON data but got " + data['cuisines']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                MenuLabel.validateJSON(item);
            };
        }
        if (data['sections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sections'])) {
                throw new Error("Expected the field `sections` to be an array in the JSON data but got " + data['sections']);
            }
            // validate the optional field `sections` (array)
            for (const item of data['sections']) {
                FoodMenuSection.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sourceUrl'] && !(typeof data['sourceUrl'] === 'string' || data['sourceUrl'] instanceof String)) {
            throw new Error("Expected the field `sourceUrl` to be a primitive type in the JSON string but got " + data['sourceUrl']);
        }

        return true;
    }


}



/**
 * Optional. Cuisine information for the food menu. It is highly recommended to provide this field.
 * @member {Array.<module:model/FoodMenu.CuisinesEnum>} cuisines
 */
FoodMenu.prototype['cuisines'] = undefined;

/**
 * Required. Language-tagged labels for the menu. E.g. \"menu\", \"lunch special\". Display names should be 140 characters or less, with descriptions 1,000 characters or less. At least one set of labels is required.
 * @member {Array.<module:model/MenuLabel>} labels
 */
FoodMenu.prototype['labels'] = undefined;

/**
 * Required. Sections of the menu.
 * @member {Array.<module:model/FoodMenuSection>} sections
 */
FoodMenu.prototype['sections'] = undefined;

/**
 * Optional. Source URL of menu if there is a webpage to go to.
 * @member {String} sourceUrl
 */
FoodMenu.prototype['sourceUrl'] = undefined;





/**
 * Allowed values for the <code>cuisines</code> property.
 * @enum {String}
 * @readonly
 */
FoodMenu['CuisinesEnum'] = {

    /**
     * value: "CUISINE_UNSPECIFIED"
     * @const
     */
    "CUISINE_UNSPECIFIED": "CUISINE_UNSPECIFIED",

    /**
     * value: "AMERICAN"
     * @const
     */
    "AMERICAN": "AMERICAN",

    /**
     * value: "ASIAN"
     * @const
     */
    "ASIAN": "ASIAN",

    /**
     * value: "BRAZILIAN"
     * @const
     */
    "BRAZILIAN": "BRAZILIAN",

    /**
     * value: "BREAK_FAST"
     * @const
     */
    "BREAK_FAST": "BREAK_FAST",

    /**
     * value: "BRUNCH"
     * @const
     */
    "BRUNCH": "BRUNCH",

    /**
     * value: "CHICKEN"
     * @const
     */
    "CHICKEN": "CHICKEN",

    /**
     * value: "CHINESE"
     * @const
     */
    "CHINESE": "CHINESE",

    /**
     * value: "FAMILY"
     * @const
     */
    "FAMILY": "FAMILY",

    /**
     * value: "FAST_FOOD"
     * @const
     */
    "FAST_FOOD": "FAST_FOOD",

    /**
     * value: "FRENCH"
     * @const
     */
    "FRENCH": "FRENCH",

    /**
     * value: "GREEK"
     * @const
     */
    "GREEK": "GREEK",

    /**
     * value: "GERMAN"
     * @const
     */
    "GERMAN": "GERMAN",

    /**
     * value: "HAMBURGER"
     * @const
     */
    "HAMBURGER": "HAMBURGER",

    /**
     * value: "INDIAN"
     * @const
     */
    "INDIAN": "INDIAN",

    /**
     * value: "INDONESIAN"
     * @const
     */
    "INDONESIAN": "INDONESIAN",

    /**
     * value: "ITALIAN"
     * @const
     */
    "ITALIAN": "ITALIAN",

    /**
     * value: "JAPANESE"
     * @const
     */
    "JAPANESE": "JAPANESE",

    /**
     * value: "KOREAN"
     * @const
     */
    "KOREAN": "KOREAN",

    /**
     * value: "LATIN_AMERICAN"
     * @const
     */
    "LATIN_AMERICAN": "LATIN_AMERICAN",

    /**
     * value: "MEDITERRANEAN"
     * @const
     */
    "MEDITERRANEAN": "MEDITERRANEAN",

    /**
     * value: "MEXICAN"
     * @const
     */
    "MEXICAN": "MEXICAN",

    /**
     * value: "PAKISTANI"
     * @const
     */
    "PAKISTANI": "PAKISTANI",

    /**
     * value: "PIZZA"
     * @const
     */
    "PIZZA": "PIZZA",

    /**
     * value: "SEAFOOD"
     * @const
     */
    "SEAFOOD": "SEAFOOD",

    /**
     * value: "SPANISH"
     * @const
     */
    "SPANISH": "SPANISH",

    /**
     * value: "SUSHI"
     * @const
     */
    "SUSHI": "SUSHI",

    /**
     * value: "THAI"
     * @const
     */
    "THAI": "THAI",

    /**
     * value: "TURKISH"
     * @const
     */
    "TURKISH": "TURKISH",

    /**
     * value: "VEGETARIAN"
     * @const
     */
    "VEGETARIAN": "VEGETARIAN",

    /**
     * value: "VIETNAMESE"
     * @const
     */
    "VIETNAMESE": "VIETNAMESE",

    /**
     * value: "OTHER_CUISINE"
     * @const
     */
    "OTHER_CUISINE": "OTHER_CUISINE"
};



export default FoodMenu;

