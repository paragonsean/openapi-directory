/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FoodMenuItemAttributes from './FoodMenuItemAttributes';
import MenuLabel from './MenuLabel';

/**
 * The FoodMenuItemOption model module.
 * @module model/FoodMenuItemOption
 * @version v4
 */
class FoodMenuItemOption {
    /**
     * Constructs a new <code>FoodMenuItemOption</code>.
     * Option of an Item. It requires an explicit user selection.
     * @alias module:model/FoodMenuItemOption
     */
    constructor() { 
        
        FoodMenuItemOption.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FoodMenuItemOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FoodMenuItemOption} obj Optional instance to populate.
     * @return {module:model/FoodMenuItemOption} The populated <code>FoodMenuItemOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FoodMenuItemOption();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = FoodMenuItemAttributes.constructFromObject(data['attributes']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [MenuLabel]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FoodMenuItemOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FoodMenuItemOption</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          FoodMenuItemAttributes.validateJSON(data['attributes']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                MenuLabel.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/FoodMenuItemAttributes} attributes
 */
FoodMenuItemOption.prototype['attributes'] = undefined;

/**
 * Required. Language tagged labels for this menu item option. E.g.: \"beef pad thai\", \"veggie pad thai\", \"small pizza\", \"large pizza\". Display names should be 140 characters or less, with descriptions 1,000 characters or less. At least one set of labels is required.
 * @member {Array.<module:model/MenuLabel>} labels
 */
FoodMenuItemOption.prototype['labels'] = undefined;






export default FoodMenuItemOption;

