/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PaymentOptions model module.
 * @module model/PaymentOptions
 * @version v4
 */
class PaymentOptions {
    /**
     * Constructs a new <code>PaymentOptions</code>.
     * Forms of payment accepted at the property.
     * @alias module:model/PaymentOptions
     */
    constructor() { 
        
        PaymentOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentOptions} obj Optional instance to populate.
     * @return {module:model/PaymentOptions} The populated <code>PaymentOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentOptions();

            if (data.hasOwnProperty('cash')) {
                obj['cash'] = ApiClient.convertToType(data['cash'], 'Boolean');
            }
            if (data.hasOwnProperty('cashException')) {
                obj['cashException'] = ApiClient.convertToType(data['cashException'], 'String');
            }
            if (data.hasOwnProperty('cheque')) {
                obj['cheque'] = ApiClient.convertToType(data['cheque'], 'Boolean');
            }
            if (data.hasOwnProperty('chequeException')) {
                obj['chequeException'] = ApiClient.convertToType(data['chequeException'], 'String');
            }
            if (data.hasOwnProperty('creditCard')) {
                obj['creditCard'] = ApiClient.convertToType(data['creditCard'], 'Boolean');
            }
            if (data.hasOwnProperty('creditCardException')) {
                obj['creditCardException'] = ApiClient.convertToType(data['creditCardException'], 'String');
            }
            if (data.hasOwnProperty('debitCard')) {
                obj['debitCard'] = ApiClient.convertToType(data['debitCard'], 'Boolean');
            }
            if (data.hasOwnProperty('debitCardException')) {
                obj['debitCardException'] = ApiClient.convertToType(data['debitCardException'], 'String');
            }
            if (data.hasOwnProperty('mobileNfc')) {
                obj['mobileNfc'] = ApiClient.convertToType(data['mobileNfc'], 'Boolean');
            }
            if (data.hasOwnProperty('mobileNfcException')) {
                obj['mobileNfcException'] = ApiClient.convertToType(data['mobileNfcException'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cashException'] && !(typeof data['cashException'] === 'string' || data['cashException'] instanceof String)) {
            throw new Error("Expected the field `cashException` to be a primitive type in the JSON string but got " + data['cashException']);
        }
        // ensure the json data is a string
        if (data['chequeException'] && !(typeof data['chequeException'] === 'string' || data['chequeException'] instanceof String)) {
            throw new Error("Expected the field `chequeException` to be a primitive type in the JSON string but got " + data['chequeException']);
        }
        // ensure the json data is a string
        if (data['creditCardException'] && !(typeof data['creditCardException'] === 'string' || data['creditCardException'] instanceof String)) {
            throw new Error("Expected the field `creditCardException` to be a primitive type in the JSON string but got " + data['creditCardException']);
        }
        // ensure the json data is a string
        if (data['debitCardException'] && !(typeof data['debitCardException'] === 'string' || data['debitCardException'] instanceof String)) {
            throw new Error("Expected the field `debitCardException` to be a primitive type in the JSON string but got " + data['debitCardException']);
        }
        // ensure the json data is a string
        if (data['mobileNfcException'] && !(typeof data['mobileNfcException'] === 'string' || data['mobileNfcException'] instanceof String)) {
            throw new Error("Expected the field `mobileNfcException` to be a primitive type in the JSON string but got " + data['mobileNfcException']);
        }

        return true;
    }


}



/**
 * Cash. The hotel accepts payment by paper/coin currency.
 * @member {Boolean} cash
 */
PaymentOptions.prototype['cash'] = undefined;

/**
 * Cash exception.
 * @member {module:model/PaymentOptions.CashExceptionEnum} cashException
 */
PaymentOptions.prototype['cashException'] = undefined;

/**
 * Cheque. The hotel accepts a printed document issued by the guest's bank in the guest's name as a form of payment.
 * @member {Boolean} cheque
 */
PaymentOptions.prototype['cheque'] = undefined;

/**
 * Cheque exception.
 * @member {module:model/PaymentOptions.ChequeExceptionEnum} chequeException
 */
PaymentOptions.prototype['chequeException'] = undefined;

/**
 * Credit card. The hotel accepts payment by a card issued by a bank or credit card company. Also known as charge card, debit card, bank card, or charge plate.
 * @member {Boolean} creditCard
 */
PaymentOptions.prototype['creditCard'] = undefined;

/**
 * Credit card exception.
 * @member {module:model/PaymentOptions.CreditCardExceptionEnum} creditCardException
 */
PaymentOptions.prototype['creditCardException'] = undefined;

/**
 * Debit card. The hotel accepts a bank-issued card that immediately deducts the charged funds from the guest's bank account upon processing.
 * @member {Boolean} debitCard
 */
PaymentOptions.prototype['debitCard'] = undefined;

/**
 * Debit card exception.
 * @member {module:model/PaymentOptions.DebitCardExceptionEnum} debitCardException
 */
PaymentOptions.prototype['debitCardException'] = undefined;

/**
 * Mobile nfc. The hotel has the compatible computer hardware terminal that reads and charges a payment app on the guest's smartphone without requiring the two devices to make physical contact. Also known as Apple Pay, Google Pay, Samsung Pay.
 * @member {Boolean} mobileNfc
 */
PaymentOptions.prototype['mobileNfc'] = undefined;

/**
 * Mobile nfc exception.
 * @member {module:model/PaymentOptions.MobileNfcExceptionEnum} mobileNfcException
 */
PaymentOptions.prototype['mobileNfcException'] = undefined;





/**
 * Allowed values for the <code>cashException</code> property.
 * @enum {String}
 * @readonly
 */
PaymentOptions['CashExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>chequeException</code> property.
 * @enum {String}
 * @readonly
 */
PaymentOptions['ChequeExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>creditCardException</code> property.
 * @enum {String}
 * @readonly
 */
PaymentOptions['CreditCardExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>debitCardException</code> property.
 * @enum {String}
 * @readonly
 */
PaymentOptions['DebitCardExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};


/**
 * Allowed values for the <code>mobileNfcException</code> property.
 * @enum {String}
 * @readonly
 */
PaymentOptions['MobileNfcExceptionEnum'] = {

    /**
     * value: "EXCEPTION_UNSPECIFIED"
     * @const
     */
    "EXCEPTION_UNSPECIFIED": "EXCEPTION_UNSPECIFIED",

    /**
     * value: "UNDER_CONSTRUCTION"
     * @const
     */
    "UNDER_CONSTRUCTION": "UNDER_CONSTRUCTION",

    /**
     * value: "DEPENDENT_ON_SEASON"
     * @const
     */
    "DEPENDENT_ON_SEASON": "DEPENDENT_ON_SEASON",

    /**
     * value: "DEPENDENT_ON_DAY_OF_WEEK"
     * @const
     */
    "DEPENDENT_ON_DAY_OF_WEEK": "DEPENDENT_ON_DAY_OF_WEEK"
};



export default PaymentOptions;

