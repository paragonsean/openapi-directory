/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MoreHoursType from './MoreHoursType';
import ServiceType from './ServiceType';

/**
 * The Category model module.
 * @module model/Category
 * @version v4
 */
class Category {
    /**
     * Constructs a new <code>Category</code>.
     * A category describing what this business is (not what it does). For a list of valid category IDs, and the mappings to their human-readable names, see [categories.list](https://developers.google.com/my-business/reference/rest/v4/categories/list).
     * @alias module:model/Category
     */
    constructor() { 
        
        Category.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Category</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Category} obj Optional instance to populate.
     * @return {module:model/Category} The populated <code>Category</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Category();

            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('moreHoursTypes')) {
                obj['moreHoursTypes'] = ApiClient.convertToType(data['moreHoursTypes'], [MoreHoursType]);
            }
            if (data.hasOwnProperty('serviceTypes')) {
                obj['serviceTypes'] = ApiClient.convertToType(data['serviceTypes'], [ServiceType]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Category</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Category</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['categoryId'] && !(typeof data['categoryId'] === 'string' || data['categoryId'] instanceof String)) {
            throw new Error("Expected the field `categoryId` to be a primitive type in the JSON string but got " + data['categoryId']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['moreHoursTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['moreHoursTypes'])) {
                throw new Error("Expected the field `moreHoursTypes` to be an array in the JSON data but got " + data['moreHoursTypes']);
            }
            // validate the optional field `moreHoursTypes` (array)
            for (const item of data['moreHoursTypes']) {
                MoreHoursType.validateJSON(item);
            };
        }
        if (data['serviceTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['serviceTypes'])) {
                throw new Error("Expected the field `serviceTypes` to be an array in the JSON data but got " + data['serviceTypes']);
            }
            // validate the optional field `serviceTypes` (array)
            for (const item of data['serviceTypes']) {
                ServiceType.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @OutputOnly. A stable ID (provided by Google) for this category. The `category_id` must be specified when modifying the category (when creating or updating a location).
 * @member {String} categoryId
 */
Category.prototype['categoryId'] = undefined;

/**
 * @OutputOnly. The human-readable name of the category. This is set when reading the location. When modifying the location, `category_id` must be set.
 * @member {String} displayName
 */
Category.prototype['displayName'] = undefined;

/**
 * Output only. More hours types that are available for this business category.
 * @member {Array.<module:model/MoreHoursType>} moreHoursTypes
 */
Category.prototype['moreHoursTypes'] = undefined;

/**
 * @OutputOnly. A list of all the service types that are available for this business category.
 * @member {Array.<module:model/ServiceType>} serviceTypes
 */
Category.prototype['serviceTypes'] = undefined;






export default Category;

