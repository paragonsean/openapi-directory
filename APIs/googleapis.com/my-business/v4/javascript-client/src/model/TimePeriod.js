/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TimePeriod model module.
 * @module model/TimePeriod
 * @version v4
 */
class TimePeriod {
    /**
     * Constructs a new <code>TimePeriod</code>.
     * Represents a span of time that the business is open, starting on the specified open day/time and closing on the specified close day/time. The closing time must occur after the opening time, for example later in the same day, or on a subsequent day.
     * @alias module:model/TimePeriod
     */
    constructor() { 
        
        TimePeriod.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimePeriod</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimePeriod} obj Optional instance to populate.
     * @return {module:model/TimePeriod} The populated <code>TimePeriod</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimePeriod();

            if (data.hasOwnProperty('closeDay')) {
                obj['closeDay'] = ApiClient.convertToType(data['closeDay'], 'String');
            }
            if (data.hasOwnProperty('closeTime')) {
                obj['closeTime'] = ApiClient.convertToType(data['closeTime'], 'String');
            }
            if (data.hasOwnProperty('openDay')) {
                obj['openDay'] = ApiClient.convertToType(data['openDay'], 'String');
            }
            if (data.hasOwnProperty('openTime')) {
                obj['openTime'] = ApiClient.convertToType(data['openTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimePeriod</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimePeriod</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['closeDay'] && !(typeof data['closeDay'] === 'string' || data['closeDay'] instanceof String)) {
            throw new Error("Expected the field `closeDay` to be a primitive type in the JSON string but got " + data['closeDay']);
        }
        // ensure the json data is a string
        if (data['closeTime'] && !(typeof data['closeTime'] === 'string' || data['closeTime'] instanceof String)) {
            throw new Error("Expected the field `closeTime` to be a primitive type in the JSON string but got " + data['closeTime']);
        }
        // ensure the json data is a string
        if (data['openDay'] && !(typeof data['openDay'] === 'string' || data['openDay'] instanceof String)) {
            throw new Error("Expected the field `openDay` to be a primitive type in the JSON string but got " + data['openDay']);
        }
        // ensure the json data is a string
        if (data['openTime'] && !(typeof data['openTime'] === 'string' || data['openTime'] instanceof String)) {
            throw new Error("Expected the field `openTime` to be a primitive type in the JSON string but got " + data['openTime']);
        }

        return true;
    }


}



/**
 * Indicates the day of the week this period ends on.
 * @member {module:model/TimePeriod.CloseDayEnum} closeDay
 */
TimePeriod.prototype['closeDay'] = undefined;

/**
 * Time in 24hr ISO 8601 extended format (hh:mm). Valid values are 00:00-24:00, where 24:00 represents midnight at the end of the specified day field.
 * @member {String} closeTime
 */
TimePeriod.prototype['closeTime'] = undefined;

/**
 * Indicates the day of the week this period starts on.
 * @member {module:model/TimePeriod.OpenDayEnum} openDay
 */
TimePeriod.prototype['openDay'] = undefined;

/**
 * Time in 24hr ISO 8601 extended format (hh:mm). Valid values are 00:00-24:00, where 24:00 represents midnight at the end of the specified day field.
 * @member {String} openTime
 */
TimePeriod.prototype['openTime'] = undefined;





/**
 * Allowed values for the <code>closeDay</code> property.
 * @enum {String}
 * @readonly
 */
TimePeriod['CloseDayEnum'] = {

    /**
     * value: "DAY_OF_WEEK_UNSPECIFIED"
     * @const
     */
    "DAY_OF_WEEK_UNSPECIFIED": "DAY_OF_WEEK_UNSPECIFIED",

    /**
     * value: "MONDAY"
     * @const
     */
    "MONDAY": "MONDAY",

    /**
     * value: "TUESDAY"
     * @const
     */
    "TUESDAY": "TUESDAY",

    /**
     * value: "WEDNESDAY"
     * @const
     */
    "WEDNESDAY": "WEDNESDAY",

    /**
     * value: "THURSDAY"
     * @const
     */
    "THURSDAY": "THURSDAY",

    /**
     * value: "FRIDAY"
     * @const
     */
    "FRIDAY": "FRIDAY",

    /**
     * value: "SATURDAY"
     * @const
     */
    "SATURDAY": "SATURDAY",

    /**
     * value: "SUNDAY"
     * @const
     */
    "SUNDAY": "SUNDAY"
};


/**
 * Allowed values for the <code>openDay</code> property.
 * @enum {String}
 * @readonly
 */
TimePeriod['OpenDayEnum'] = {

    /**
     * value: "DAY_OF_WEEK_UNSPECIFIED"
     * @const
     */
    "DAY_OF_WEEK_UNSPECIFIED": "DAY_OF_WEEK_UNSPECIFIED",

    /**
     * value: "MONDAY"
     * @const
     */
    "MONDAY": "MONDAY",

    /**
     * value: "TUESDAY"
     * @const
     */
    "TUESDAY": "TUESDAY",

    /**
     * value: "WEDNESDAY"
     * @const
     */
    "WEDNESDAY": "WEDNESDAY",

    /**
     * value: "THURSDAY"
     * @const
     */
    "THURSDAY": "THURSDAY",

    /**
     * value: "FRIDAY"
     * @const
     */
    "FRIDAY": "FRIDAY",

    /**
     * value: "SATURDAY"
     * @const
     */
    "SATURDAY": "SATURDAY",

    /**
     * value: "SUNDAY"
     * @const
     */
    "SUNDAY": "SUNDAY"
};



export default TimePeriod;

