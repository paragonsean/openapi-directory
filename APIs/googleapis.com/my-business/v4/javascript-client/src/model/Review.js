/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReviewReply from './ReviewReply';
import Reviewer from './Reviewer';

/**
 * The Review model module.
 * @module model/Review
 * @version v4
 */
class Review {
    /**
     * Constructs a new <code>Review</code>.
     * Output only. Represents a review for a location.
     * @alias module:model/Review
     */
    constructor() { 
        
        Review.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Review</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Review} obj Optional instance to populate.
     * @return {module:model/Review} The populated <code>Review</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Review();

            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('reviewId')) {
                obj['reviewId'] = ApiClient.convertToType(data['reviewId'], 'String');
            }
            if (data.hasOwnProperty('reviewReply')) {
                obj['reviewReply'] = ReviewReply.constructFromObject(data['reviewReply']);
            }
            if (data.hasOwnProperty('reviewer')) {
                obj['reviewer'] = Reviewer.constructFromObject(data['reviewer']);
            }
            if (data.hasOwnProperty('starRating')) {
                obj['starRating'] = ApiClient.convertToType(data['starRating'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Review</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Review</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['reviewId'] && !(typeof data['reviewId'] === 'string' || data['reviewId'] instanceof String)) {
            throw new Error("Expected the field `reviewId` to be a primitive type in the JSON string but got " + data['reviewId']);
        }
        // validate the optional field `reviewReply`
        if (data['reviewReply']) { // data not null
          ReviewReply.validateJSON(data['reviewReply']);
        }
        // validate the optional field `reviewer`
        if (data['reviewer']) { // data not null
          Reviewer.validateJSON(data['reviewer']);
        }
        // ensure the json data is a string
        if (data['starRating'] && !(typeof data['starRating'] === 'string' || data['starRating'] instanceof String)) {
            throw new Error("Expected the field `starRating` to be a primitive type in the JSON string but got " + data['starRating']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * The body of the review as plain text with markups.
 * @member {String} comment
 */
Review.prototype['comment'] = undefined;

/**
 * The timestamp for when the review was written.
 * @member {String} createTime
 */
Review.prototype['createTime'] = undefined;

/**
 * The resource name. For Review it is of the form `accounts/{account_id}/locations/{location_id}/reviews/{review_id}`
 * @member {String} name
 */
Review.prototype['name'] = undefined;

/**
 * The encrypted unique identifier.
 * @member {String} reviewId
 */
Review.prototype['reviewId'] = undefined;

/**
 * @member {module:model/ReviewReply} reviewReply
 */
Review.prototype['reviewReply'] = undefined;

/**
 * @member {module:model/Reviewer} reviewer
 */
Review.prototype['reviewer'] = undefined;

/**
 * The star rating of the review.
 * @member {module:model/Review.StarRatingEnum} starRating
 */
Review.prototype['starRating'] = undefined;

/**
 * The timestamp for when the review was last modified.
 * @member {String} updateTime
 */
Review.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>starRating</code> property.
 * @enum {String}
 * @readonly
 */
Review['StarRatingEnum'] = {

    /**
     * value: "STAR_RATING_UNSPECIFIED"
     * @const
     */
    "STAR_RATING_UNSPECIFIED": "STAR_RATING_UNSPECIFIED",

    /**
     * value: "ONE"
     * @const
     */
    "ONE": "ONE",

    /**
     * value: "TWO"
     * @const
     */
    "TWO": "TWO",

    /**
     * value: "THREE"
     * @const
     */
    "THREE": "THREE",

    /**
     * value: "FOUR"
     * @const
     */
    "FOUR": "FOUR",

    /**
     * value: "FIVE"
     * @const
     */
    "FIVE": "FIVE"
};



export default Review;

