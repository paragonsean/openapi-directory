/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILanguagesSpoken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILanguagesSpoken::OAILanguagesSpoken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILanguagesSpoken::OAILanguagesSpoken() {
    this->initializeModel();
}

OAILanguagesSpoken::~OAILanguagesSpoken() {}

void OAILanguagesSpoken::initializeModel() {

    m_arabic_spoken_isSet = false;
    m_arabic_spoken_isValid = false;

    m_arabic_spoken_exception_isSet = false;
    m_arabic_spoken_exception_isValid = false;

    m_cantonese_spoken_isSet = false;
    m_cantonese_spoken_isValid = false;

    m_cantonese_spoken_exception_isSet = false;
    m_cantonese_spoken_exception_isValid = false;

    m_dutch_spoken_isSet = false;
    m_dutch_spoken_isValid = false;

    m_dutch_spoken_exception_isSet = false;
    m_dutch_spoken_exception_isValid = false;

    m_english_spoken_isSet = false;
    m_english_spoken_isValid = false;

    m_english_spoken_exception_isSet = false;
    m_english_spoken_exception_isValid = false;

    m_filipino_spoken_isSet = false;
    m_filipino_spoken_isValid = false;

    m_filipino_spoken_exception_isSet = false;
    m_filipino_spoken_exception_isValid = false;

    m_french_spoken_isSet = false;
    m_french_spoken_isValid = false;

    m_french_spoken_exception_isSet = false;
    m_french_spoken_exception_isValid = false;

    m_german_spoken_isSet = false;
    m_german_spoken_isValid = false;

    m_german_spoken_exception_isSet = false;
    m_german_spoken_exception_isValid = false;

    m_hindi_spoken_isSet = false;
    m_hindi_spoken_isValid = false;

    m_hindi_spoken_exception_isSet = false;
    m_hindi_spoken_exception_isValid = false;

    m_indonesian_spoken_isSet = false;
    m_indonesian_spoken_isValid = false;

    m_indonesian_spoken_exception_isSet = false;
    m_indonesian_spoken_exception_isValid = false;

    m_italian_spoken_isSet = false;
    m_italian_spoken_isValid = false;

    m_italian_spoken_exception_isSet = false;
    m_italian_spoken_exception_isValid = false;

    m_japanese_spoken_isSet = false;
    m_japanese_spoken_isValid = false;

    m_japanese_spoken_exception_isSet = false;
    m_japanese_spoken_exception_isValid = false;

    m_korean_spoken_isSet = false;
    m_korean_spoken_isValid = false;

    m_korean_spoken_exception_isSet = false;
    m_korean_spoken_exception_isValid = false;

    m_mandarin_spoken_isSet = false;
    m_mandarin_spoken_isValid = false;

    m_mandarin_spoken_exception_isSet = false;
    m_mandarin_spoken_exception_isValid = false;

    m_portuguese_spoken_isSet = false;
    m_portuguese_spoken_isValid = false;

    m_portuguese_spoken_exception_isSet = false;
    m_portuguese_spoken_exception_isValid = false;

    m_russian_spoken_isSet = false;
    m_russian_spoken_isValid = false;

    m_russian_spoken_exception_isSet = false;
    m_russian_spoken_exception_isValid = false;

    m_spanish_spoken_isSet = false;
    m_spanish_spoken_isValid = false;

    m_spanish_spoken_exception_isSet = false;
    m_spanish_spoken_exception_isValid = false;

    m_vietnamese_spoken_isSet = false;
    m_vietnamese_spoken_isValid = false;

    m_vietnamese_spoken_exception_isSet = false;
    m_vietnamese_spoken_exception_isValid = false;
}

void OAILanguagesSpoken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILanguagesSpoken::fromJsonObject(QJsonObject json) {

    m_arabic_spoken_isValid = ::OpenAPI::fromJsonValue(m_arabic_spoken, json[QString("arabicSpoken")]);
    m_arabic_spoken_isSet = !json[QString("arabicSpoken")].isNull() && m_arabic_spoken_isValid;

    m_arabic_spoken_exception_isValid = ::OpenAPI::fromJsonValue(m_arabic_spoken_exception, json[QString("arabicSpokenException")]);
    m_arabic_spoken_exception_isSet = !json[QString("arabicSpokenException")].isNull() && m_arabic_spoken_exception_isValid;

    m_cantonese_spoken_isValid = ::OpenAPI::fromJsonValue(m_cantonese_spoken, json[QString("cantoneseSpoken")]);
    m_cantonese_spoken_isSet = !json[QString("cantoneseSpoken")].isNull() && m_cantonese_spoken_isValid;

    m_cantonese_spoken_exception_isValid = ::OpenAPI::fromJsonValue(m_cantonese_spoken_exception, json[QString("cantoneseSpokenException")]);
    m_cantonese_spoken_exception_isSet = !json[QString("cantoneseSpokenException")].isNull() && m_cantonese_spoken_exception_isValid;

    m_dutch_spoken_isValid = ::OpenAPI::fromJsonValue(m_dutch_spoken, json[QString("dutchSpoken")]);
    m_dutch_spoken_isSet = !json[QString("dutchSpoken")].isNull() && m_dutch_spoken_isValid;

    m_dutch_spoken_exception_isValid = ::OpenAPI::fromJsonValue(m_dutch_spoken_exception, json[QString("dutchSpokenException")]);
    m_dutch_spoken_exception_isSet = !json[QString("dutchSpokenException")].isNull() && m_dutch_spoken_exception_isValid;

    m_english_spoken_isValid = ::OpenAPI::fromJsonValue(m_english_spoken, json[QString("englishSpoken")]);
    m_english_spoken_isSet = !json[QString("englishSpoken")].isNull() && m_english_spoken_isValid;

    m_english_spoken_exception_isValid = ::OpenAPI::fromJsonValue(m_english_spoken_exception, json[QString("englishSpokenException")]);
    m_english_spoken_exception_isSet = !json[QString("englishSpokenException")].isNull() && m_english_spoken_exception_isValid;

    m_filipino_spoken_isValid = ::OpenAPI::fromJsonValue(m_filipino_spoken, json[QString("filipinoSpoken")]);
    m_filipino_spoken_isSet = !json[QString("filipinoSpoken")].isNull() && m_filipino_spoken_isValid;

    m_filipino_spoken_exception_isValid = ::OpenAPI::fromJsonValue(m_filipino_spoken_exception, json[QString("filipinoSpokenException")]);
    m_filipino_spoken_exception_isSet = !json[QString("filipinoSpokenException")].isNull() && m_filipino_spoken_exception_isValid;

    m_french_spoken_isValid = ::OpenAPI::fromJsonValue(m_french_spoken, json[QString("frenchSpoken")]);
    m_french_spoken_isSet = !json[QString("frenchSpoken")].isNull() && m_french_spoken_isValid;

    m_french_spoken_exception_isValid = ::OpenAPI::fromJsonValue(m_french_spoken_exception, json[QString("frenchSpokenException")]);
    m_french_spoken_exception_isSet = !json[QString("frenchSpokenException")].isNull() && m_french_spoken_exception_isValid;

    m_german_spoken_isValid = ::OpenAPI::fromJsonValue(m_german_spoken, json[QString("germanSpoken")]);
    m_german_spoken_isSet = !json[QString("germanSpoken")].isNull() && m_german_spoken_isValid;

    m_german_spoken_exception_isValid = ::OpenAPI::fromJsonValue(m_german_spoken_exception, json[QString("germanSpokenException")]);
    m_german_spoken_exception_isSet = !json[QString("germanSpokenException")].isNull() && m_german_spoken_exception_isValid;

    m_hindi_spoken_isValid = ::OpenAPI::fromJsonValue(m_hindi_spoken, json[QString("hindiSpoken")]);
    m_hindi_spoken_isSet = !json[QString("hindiSpoken")].isNull() && m_hindi_spoken_isValid;

    m_hindi_spoken_exception_isValid = ::OpenAPI::fromJsonValue(m_hindi_spoken_exception, json[QString("hindiSpokenException")]);
    m_hindi_spoken_exception_isSet = !json[QString("hindiSpokenException")].isNull() && m_hindi_spoken_exception_isValid;

    m_indonesian_spoken_isValid = ::OpenAPI::fromJsonValue(m_indonesian_spoken, json[QString("indonesianSpoken")]);
    m_indonesian_spoken_isSet = !json[QString("indonesianSpoken")].isNull() && m_indonesian_spoken_isValid;

    m_indonesian_spoken_exception_isValid = ::OpenAPI::fromJsonValue(m_indonesian_spoken_exception, json[QString("indonesianSpokenException")]);
    m_indonesian_spoken_exception_isSet = !json[QString("indonesianSpokenException")].isNull() && m_indonesian_spoken_exception_isValid;

    m_italian_spoken_isValid = ::OpenAPI::fromJsonValue(m_italian_spoken, json[QString("italianSpoken")]);
    m_italian_spoken_isSet = !json[QString("italianSpoken")].isNull() && m_italian_spoken_isValid;

    m_italian_spoken_exception_isValid = ::OpenAPI::fromJsonValue(m_italian_spoken_exception, json[QString("italianSpokenException")]);
    m_italian_spoken_exception_isSet = !json[QString("italianSpokenException")].isNull() && m_italian_spoken_exception_isValid;

    m_japanese_spoken_isValid = ::OpenAPI::fromJsonValue(m_japanese_spoken, json[QString("japaneseSpoken")]);
    m_japanese_spoken_isSet = !json[QString("japaneseSpoken")].isNull() && m_japanese_spoken_isValid;

    m_japanese_spoken_exception_isValid = ::OpenAPI::fromJsonValue(m_japanese_spoken_exception, json[QString("japaneseSpokenException")]);
    m_japanese_spoken_exception_isSet = !json[QString("japaneseSpokenException")].isNull() && m_japanese_spoken_exception_isValid;

    m_korean_spoken_isValid = ::OpenAPI::fromJsonValue(m_korean_spoken, json[QString("koreanSpoken")]);
    m_korean_spoken_isSet = !json[QString("koreanSpoken")].isNull() && m_korean_spoken_isValid;

    m_korean_spoken_exception_isValid = ::OpenAPI::fromJsonValue(m_korean_spoken_exception, json[QString("koreanSpokenException")]);
    m_korean_spoken_exception_isSet = !json[QString("koreanSpokenException")].isNull() && m_korean_spoken_exception_isValid;

    m_mandarin_spoken_isValid = ::OpenAPI::fromJsonValue(m_mandarin_spoken, json[QString("mandarinSpoken")]);
    m_mandarin_spoken_isSet = !json[QString("mandarinSpoken")].isNull() && m_mandarin_spoken_isValid;

    m_mandarin_spoken_exception_isValid = ::OpenAPI::fromJsonValue(m_mandarin_spoken_exception, json[QString("mandarinSpokenException")]);
    m_mandarin_spoken_exception_isSet = !json[QString("mandarinSpokenException")].isNull() && m_mandarin_spoken_exception_isValid;

    m_portuguese_spoken_isValid = ::OpenAPI::fromJsonValue(m_portuguese_spoken, json[QString("portugueseSpoken")]);
    m_portuguese_spoken_isSet = !json[QString("portugueseSpoken")].isNull() && m_portuguese_spoken_isValid;

    m_portuguese_spoken_exception_isValid = ::OpenAPI::fromJsonValue(m_portuguese_spoken_exception, json[QString("portugueseSpokenException")]);
    m_portuguese_spoken_exception_isSet = !json[QString("portugueseSpokenException")].isNull() && m_portuguese_spoken_exception_isValid;

    m_russian_spoken_isValid = ::OpenAPI::fromJsonValue(m_russian_spoken, json[QString("russianSpoken")]);
    m_russian_spoken_isSet = !json[QString("russianSpoken")].isNull() && m_russian_spoken_isValid;

    m_russian_spoken_exception_isValid = ::OpenAPI::fromJsonValue(m_russian_spoken_exception, json[QString("russianSpokenException")]);
    m_russian_spoken_exception_isSet = !json[QString("russianSpokenException")].isNull() && m_russian_spoken_exception_isValid;

    m_spanish_spoken_isValid = ::OpenAPI::fromJsonValue(m_spanish_spoken, json[QString("spanishSpoken")]);
    m_spanish_spoken_isSet = !json[QString("spanishSpoken")].isNull() && m_spanish_spoken_isValid;

    m_spanish_spoken_exception_isValid = ::OpenAPI::fromJsonValue(m_spanish_spoken_exception, json[QString("spanishSpokenException")]);
    m_spanish_spoken_exception_isSet = !json[QString("spanishSpokenException")].isNull() && m_spanish_spoken_exception_isValid;

    m_vietnamese_spoken_isValid = ::OpenAPI::fromJsonValue(m_vietnamese_spoken, json[QString("vietnameseSpoken")]);
    m_vietnamese_spoken_isSet = !json[QString("vietnameseSpoken")].isNull() && m_vietnamese_spoken_isValid;

    m_vietnamese_spoken_exception_isValid = ::OpenAPI::fromJsonValue(m_vietnamese_spoken_exception, json[QString("vietnameseSpokenException")]);
    m_vietnamese_spoken_exception_isSet = !json[QString("vietnameseSpokenException")].isNull() && m_vietnamese_spoken_exception_isValid;
}

QString OAILanguagesSpoken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILanguagesSpoken::asJsonObject() const {
    QJsonObject obj;
    if (m_arabic_spoken_isSet) {
        obj.insert(QString("arabicSpoken"), ::OpenAPI::toJsonValue(m_arabic_spoken));
    }
    if (m_arabic_spoken_exception_isSet) {
        obj.insert(QString("arabicSpokenException"), ::OpenAPI::toJsonValue(m_arabic_spoken_exception));
    }
    if (m_cantonese_spoken_isSet) {
        obj.insert(QString("cantoneseSpoken"), ::OpenAPI::toJsonValue(m_cantonese_spoken));
    }
    if (m_cantonese_spoken_exception_isSet) {
        obj.insert(QString("cantoneseSpokenException"), ::OpenAPI::toJsonValue(m_cantonese_spoken_exception));
    }
    if (m_dutch_spoken_isSet) {
        obj.insert(QString("dutchSpoken"), ::OpenAPI::toJsonValue(m_dutch_spoken));
    }
    if (m_dutch_spoken_exception_isSet) {
        obj.insert(QString("dutchSpokenException"), ::OpenAPI::toJsonValue(m_dutch_spoken_exception));
    }
    if (m_english_spoken_isSet) {
        obj.insert(QString("englishSpoken"), ::OpenAPI::toJsonValue(m_english_spoken));
    }
    if (m_english_spoken_exception_isSet) {
        obj.insert(QString("englishSpokenException"), ::OpenAPI::toJsonValue(m_english_spoken_exception));
    }
    if (m_filipino_spoken_isSet) {
        obj.insert(QString("filipinoSpoken"), ::OpenAPI::toJsonValue(m_filipino_spoken));
    }
    if (m_filipino_spoken_exception_isSet) {
        obj.insert(QString("filipinoSpokenException"), ::OpenAPI::toJsonValue(m_filipino_spoken_exception));
    }
    if (m_french_spoken_isSet) {
        obj.insert(QString("frenchSpoken"), ::OpenAPI::toJsonValue(m_french_spoken));
    }
    if (m_french_spoken_exception_isSet) {
        obj.insert(QString("frenchSpokenException"), ::OpenAPI::toJsonValue(m_french_spoken_exception));
    }
    if (m_german_spoken_isSet) {
        obj.insert(QString("germanSpoken"), ::OpenAPI::toJsonValue(m_german_spoken));
    }
    if (m_german_spoken_exception_isSet) {
        obj.insert(QString("germanSpokenException"), ::OpenAPI::toJsonValue(m_german_spoken_exception));
    }
    if (m_hindi_spoken_isSet) {
        obj.insert(QString("hindiSpoken"), ::OpenAPI::toJsonValue(m_hindi_spoken));
    }
    if (m_hindi_spoken_exception_isSet) {
        obj.insert(QString("hindiSpokenException"), ::OpenAPI::toJsonValue(m_hindi_spoken_exception));
    }
    if (m_indonesian_spoken_isSet) {
        obj.insert(QString("indonesianSpoken"), ::OpenAPI::toJsonValue(m_indonesian_spoken));
    }
    if (m_indonesian_spoken_exception_isSet) {
        obj.insert(QString("indonesianSpokenException"), ::OpenAPI::toJsonValue(m_indonesian_spoken_exception));
    }
    if (m_italian_spoken_isSet) {
        obj.insert(QString("italianSpoken"), ::OpenAPI::toJsonValue(m_italian_spoken));
    }
    if (m_italian_spoken_exception_isSet) {
        obj.insert(QString("italianSpokenException"), ::OpenAPI::toJsonValue(m_italian_spoken_exception));
    }
    if (m_japanese_spoken_isSet) {
        obj.insert(QString("japaneseSpoken"), ::OpenAPI::toJsonValue(m_japanese_spoken));
    }
    if (m_japanese_spoken_exception_isSet) {
        obj.insert(QString("japaneseSpokenException"), ::OpenAPI::toJsonValue(m_japanese_spoken_exception));
    }
    if (m_korean_spoken_isSet) {
        obj.insert(QString("koreanSpoken"), ::OpenAPI::toJsonValue(m_korean_spoken));
    }
    if (m_korean_spoken_exception_isSet) {
        obj.insert(QString("koreanSpokenException"), ::OpenAPI::toJsonValue(m_korean_spoken_exception));
    }
    if (m_mandarin_spoken_isSet) {
        obj.insert(QString("mandarinSpoken"), ::OpenAPI::toJsonValue(m_mandarin_spoken));
    }
    if (m_mandarin_spoken_exception_isSet) {
        obj.insert(QString("mandarinSpokenException"), ::OpenAPI::toJsonValue(m_mandarin_spoken_exception));
    }
    if (m_portuguese_spoken_isSet) {
        obj.insert(QString("portugueseSpoken"), ::OpenAPI::toJsonValue(m_portuguese_spoken));
    }
    if (m_portuguese_spoken_exception_isSet) {
        obj.insert(QString("portugueseSpokenException"), ::OpenAPI::toJsonValue(m_portuguese_spoken_exception));
    }
    if (m_russian_spoken_isSet) {
        obj.insert(QString("russianSpoken"), ::OpenAPI::toJsonValue(m_russian_spoken));
    }
    if (m_russian_spoken_exception_isSet) {
        obj.insert(QString("russianSpokenException"), ::OpenAPI::toJsonValue(m_russian_spoken_exception));
    }
    if (m_spanish_spoken_isSet) {
        obj.insert(QString("spanishSpoken"), ::OpenAPI::toJsonValue(m_spanish_spoken));
    }
    if (m_spanish_spoken_exception_isSet) {
        obj.insert(QString("spanishSpokenException"), ::OpenAPI::toJsonValue(m_spanish_spoken_exception));
    }
    if (m_vietnamese_spoken_isSet) {
        obj.insert(QString("vietnameseSpoken"), ::OpenAPI::toJsonValue(m_vietnamese_spoken));
    }
    if (m_vietnamese_spoken_exception_isSet) {
        obj.insert(QString("vietnameseSpokenException"), ::OpenAPI::toJsonValue(m_vietnamese_spoken_exception));
    }
    return obj;
}

bool OAILanguagesSpoken::isArabicSpoken() const {
    return m_arabic_spoken;
}
void OAILanguagesSpoken::setArabicSpoken(const bool &arabic_spoken) {
    m_arabic_spoken = arabic_spoken;
    m_arabic_spoken_isSet = true;
}

bool OAILanguagesSpoken::is_arabic_spoken_Set() const{
    return m_arabic_spoken_isSet;
}

bool OAILanguagesSpoken::is_arabic_spoken_Valid() const{
    return m_arabic_spoken_isValid;
}

QString OAILanguagesSpoken::getArabicSpokenException() const {
    return m_arabic_spoken_exception;
}
void OAILanguagesSpoken::setArabicSpokenException(const QString &arabic_spoken_exception) {
    m_arabic_spoken_exception = arabic_spoken_exception;
    m_arabic_spoken_exception_isSet = true;
}

bool OAILanguagesSpoken::is_arabic_spoken_exception_Set() const{
    return m_arabic_spoken_exception_isSet;
}

bool OAILanguagesSpoken::is_arabic_spoken_exception_Valid() const{
    return m_arabic_spoken_exception_isValid;
}

bool OAILanguagesSpoken::isCantoneseSpoken() const {
    return m_cantonese_spoken;
}
void OAILanguagesSpoken::setCantoneseSpoken(const bool &cantonese_spoken) {
    m_cantonese_spoken = cantonese_spoken;
    m_cantonese_spoken_isSet = true;
}

bool OAILanguagesSpoken::is_cantonese_spoken_Set() const{
    return m_cantonese_spoken_isSet;
}

bool OAILanguagesSpoken::is_cantonese_spoken_Valid() const{
    return m_cantonese_spoken_isValid;
}

QString OAILanguagesSpoken::getCantoneseSpokenException() const {
    return m_cantonese_spoken_exception;
}
void OAILanguagesSpoken::setCantoneseSpokenException(const QString &cantonese_spoken_exception) {
    m_cantonese_spoken_exception = cantonese_spoken_exception;
    m_cantonese_spoken_exception_isSet = true;
}

bool OAILanguagesSpoken::is_cantonese_spoken_exception_Set() const{
    return m_cantonese_spoken_exception_isSet;
}

bool OAILanguagesSpoken::is_cantonese_spoken_exception_Valid() const{
    return m_cantonese_spoken_exception_isValid;
}

bool OAILanguagesSpoken::isDutchSpoken() const {
    return m_dutch_spoken;
}
void OAILanguagesSpoken::setDutchSpoken(const bool &dutch_spoken) {
    m_dutch_spoken = dutch_spoken;
    m_dutch_spoken_isSet = true;
}

bool OAILanguagesSpoken::is_dutch_spoken_Set() const{
    return m_dutch_spoken_isSet;
}

bool OAILanguagesSpoken::is_dutch_spoken_Valid() const{
    return m_dutch_spoken_isValid;
}

QString OAILanguagesSpoken::getDutchSpokenException() const {
    return m_dutch_spoken_exception;
}
void OAILanguagesSpoken::setDutchSpokenException(const QString &dutch_spoken_exception) {
    m_dutch_spoken_exception = dutch_spoken_exception;
    m_dutch_spoken_exception_isSet = true;
}

bool OAILanguagesSpoken::is_dutch_spoken_exception_Set() const{
    return m_dutch_spoken_exception_isSet;
}

bool OAILanguagesSpoken::is_dutch_spoken_exception_Valid() const{
    return m_dutch_spoken_exception_isValid;
}

bool OAILanguagesSpoken::isEnglishSpoken() const {
    return m_english_spoken;
}
void OAILanguagesSpoken::setEnglishSpoken(const bool &english_spoken) {
    m_english_spoken = english_spoken;
    m_english_spoken_isSet = true;
}

bool OAILanguagesSpoken::is_english_spoken_Set() const{
    return m_english_spoken_isSet;
}

bool OAILanguagesSpoken::is_english_spoken_Valid() const{
    return m_english_spoken_isValid;
}

QString OAILanguagesSpoken::getEnglishSpokenException() const {
    return m_english_spoken_exception;
}
void OAILanguagesSpoken::setEnglishSpokenException(const QString &english_spoken_exception) {
    m_english_spoken_exception = english_spoken_exception;
    m_english_spoken_exception_isSet = true;
}

bool OAILanguagesSpoken::is_english_spoken_exception_Set() const{
    return m_english_spoken_exception_isSet;
}

bool OAILanguagesSpoken::is_english_spoken_exception_Valid() const{
    return m_english_spoken_exception_isValid;
}

bool OAILanguagesSpoken::isFilipinoSpoken() const {
    return m_filipino_spoken;
}
void OAILanguagesSpoken::setFilipinoSpoken(const bool &filipino_spoken) {
    m_filipino_spoken = filipino_spoken;
    m_filipino_spoken_isSet = true;
}

bool OAILanguagesSpoken::is_filipino_spoken_Set() const{
    return m_filipino_spoken_isSet;
}

bool OAILanguagesSpoken::is_filipino_spoken_Valid() const{
    return m_filipino_spoken_isValid;
}

QString OAILanguagesSpoken::getFilipinoSpokenException() const {
    return m_filipino_spoken_exception;
}
void OAILanguagesSpoken::setFilipinoSpokenException(const QString &filipino_spoken_exception) {
    m_filipino_spoken_exception = filipino_spoken_exception;
    m_filipino_spoken_exception_isSet = true;
}

bool OAILanguagesSpoken::is_filipino_spoken_exception_Set() const{
    return m_filipino_spoken_exception_isSet;
}

bool OAILanguagesSpoken::is_filipino_spoken_exception_Valid() const{
    return m_filipino_spoken_exception_isValid;
}

bool OAILanguagesSpoken::isFrenchSpoken() const {
    return m_french_spoken;
}
void OAILanguagesSpoken::setFrenchSpoken(const bool &french_spoken) {
    m_french_spoken = french_spoken;
    m_french_spoken_isSet = true;
}

bool OAILanguagesSpoken::is_french_spoken_Set() const{
    return m_french_spoken_isSet;
}

bool OAILanguagesSpoken::is_french_spoken_Valid() const{
    return m_french_spoken_isValid;
}

QString OAILanguagesSpoken::getFrenchSpokenException() const {
    return m_french_spoken_exception;
}
void OAILanguagesSpoken::setFrenchSpokenException(const QString &french_spoken_exception) {
    m_french_spoken_exception = french_spoken_exception;
    m_french_spoken_exception_isSet = true;
}

bool OAILanguagesSpoken::is_french_spoken_exception_Set() const{
    return m_french_spoken_exception_isSet;
}

bool OAILanguagesSpoken::is_french_spoken_exception_Valid() const{
    return m_french_spoken_exception_isValid;
}

bool OAILanguagesSpoken::isGermanSpoken() const {
    return m_german_spoken;
}
void OAILanguagesSpoken::setGermanSpoken(const bool &german_spoken) {
    m_german_spoken = german_spoken;
    m_german_spoken_isSet = true;
}

bool OAILanguagesSpoken::is_german_spoken_Set() const{
    return m_german_spoken_isSet;
}

bool OAILanguagesSpoken::is_german_spoken_Valid() const{
    return m_german_spoken_isValid;
}

QString OAILanguagesSpoken::getGermanSpokenException() const {
    return m_german_spoken_exception;
}
void OAILanguagesSpoken::setGermanSpokenException(const QString &german_spoken_exception) {
    m_german_spoken_exception = german_spoken_exception;
    m_german_spoken_exception_isSet = true;
}

bool OAILanguagesSpoken::is_german_spoken_exception_Set() const{
    return m_german_spoken_exception_isSet;
}

bool OAILanguagesSpoken::is_german_spoken_exception_Valid() const{
    return m_german_spoken_exception_isValid;
}

bool OAILanguagesSpoken::isHindiSpoken() const {
    return m_hindi_spoken;
}
void OAILanguagesSpoken::setHindiSpoken(const bool &hindi_spoken) {
    m_hindi_spoken = hindi_spoken;
    m_hindi_spoken_isSet = true;
}

bool OAILanguagesSpoken::is_hindi_spoken_Set() const{
    return m_hindi_spoken_isSet;
}

bool OAILanguagesSpoken::is_hindi_spoken_Valid() const{
    return m_hindi_spoken_isValid;
}

QString OAILanguagesSpoken::getHindiSpokenException() const {
    return m_hindi_spoken_exception;
}
void OAILanguagesSpoken::setHindiSpokenException(const QString &hindi_spoken_exception) {
    m_hindi_spoken_exception = hindi_spoken_exception;
    m_hindi_spoken_exception_isSet = true;
}

bool OAILanguagesSpoken::is_hindi_spoken_exception_Set() const{
    return m_hindi_spoken_exception_isSet;
}

bool OAILanguagesSpoken::is_hindi_spoken_exception_Valid() const{
    return m_hindi_spoken_exception_isValid;
}

bool OAILanguagesSpoken::isIndonesianSpoken() const {
    return m_indonesian_spoken;
}
void OAILanguagesSpoken::setIndonesianSpoken(const bool &indonesian_spoken) {
    m_indonesian_spoken = indonesian_spoken;
    m_indonesian_spoken_isSet = true;
}

bool OAILanguagesSpoken::is_indonesian_spoken_Set() const{
    return m_indonesian_spoken_isSet;
}

bool OAILanguagesSpoken::is_indonesian_spoken_Valid() const{
    return m_indonesian_spoken_isValid;
}

QString OAILanguagesSpoken::getIndonesianSpokenException() const {
    return m_indonesian_spoken_exception;
}
void OAILanguagesSpoken::setIndonesianSpokenException(const QString &indonesian_spoken_exception) {
    m_indonesian_spoken_exception = indonesian_spoken_exception;
    m_indonesian_spoken_exception_isSet = true;
}

bool OAILanguagesSpoken::is_indonesian_spoken_exception_Set() const{
    return m_indonesian_spoken_exception_isSet;
}

bool OAILanguagesSpoken::is_indonesian_spoken_exception_Valid() const{
    return m_indonesian_spoken_exception_isValid;
}

bool OAILanguagesSpoken::isItalianSpoken() const {
    return m_italian_spoken;
}
void OAILanguagesSpoken::setItalianSpoken(const bool &italian_spoken) {
    m_italian_spoken = italian_spoken;
    m_italian_spoken_isSet = true;
}

bool OAILanguagesSpoken::is_italian_spoken_Set() const{
    return m_italian_spoken_isSet;
}

bool OAILanguagesSpoken::is_italian_spoken_Valid() const{
    return m_italian_spoken_isValid;
}

QString OAILanguagesSpoken::getItalianSpokenException() const {
    return m_italian_spoken_exception;
}
void OAILanguagesSpoken::setItalianSpokenException(const QString &italian_spoken_exception) {
    m_italian_spoken_exception = italian_spoken_exception;
    m_italian_spoken_exception_isSet = true;
}

bool OAILanguagesSpoken::is_italian_spoken_exception_Set() const{
    return m_italian_spoken_exception_isSet;
}

bool OAILanguagesSpoken::is_italian_spoken_exception_Valid() const{
    return m_italian_spoken_exception_isValid;
}

bool OAILanguagesSpoken::isJapaneseSpoken() const {
    return m_japanese_spoken;
}
void OAILanguagesSpoken::setJapaneseSpoken(const bool &japanese_spoken) {
    m_japanese_spoken = japanese_spoken;
    m_japanese_spoken_isSet = true;
}

bool OAILanguagesSpoken::is_japanese_spoken_Set() const{
    return m_japanese_spoken_isSet;
}

bool OAILanguagesSpoken::is_japanese_spoken_Valid() const{
    return m_japanese_spoken_isValid;
}

QString OAILanguagesSpoken::getJapaneseSpokenException() const {
    return m_japanese_spoken_exception;
}
void OAILanguagesSpoken::setJapaneseSpokenException(const QString &japanese_spoken_exception) {
    m_japanese_spoken_exception = japanese_spoken_exception;
    m_japanese_spoken_exception_isSet = true;
}

bool OAILanguagesSpoken::is_japanese_spoken_exception_Set() const{
    return m_japanese_spoken_exception_isSet;
}

bool OAILanguagesSpoken::is_japanese_spoken_exception_Valid() const{
    return m_japanese_spoken_exception_isValid;
}

bool OAILanguagesSpoken::isKoreanSpoken() const {
    return m_korean_spoken;
}
void OAILanguagesSpoken::setKoreanSpoken(const bool &korean_spoken) {
    m_korean_spoken = korean_spoken;
    m_korean_spoken_isSet = true;
}

bool OAILanguagesSpoken::is_korean_spoken_Set() const{
    return m_korean_spoken_isSet;
}

bool OAILanguagesSpoken::is_korean_spoken_Valid() const{
    return m_korean_spoken_isValid;
}

QString OAILanguagesSpoken::getKoreanSpokenException() const {
    return m_korean_spoken_exception;
}
void OAILanguagesSpoken::setKoreanSpokenException(const QString &korean_spoken_exception) {
    m_korean_spoken_exception = korean_spoken_exception;
    m_korean_spoken_exception_isSet = true;
}

bool OAILanguagesSpoken::is_korean_spoken_exception_Set() const{
    return m_korean_spoken_exception_isSet;
}

bool OAILanguagesSpoken::is_korean_spoken_exception_Valid() const{
    return m_korean_spoken_exception_isValid;
}

bool OAILanguagesSpoken::isMandarinSpoken() const {
    return m_mandarin_spoken;
}
void OAILanguagesSpoken::setMandarinSpoken(const bool &mandarin_spoken) {
    m_mandarin_spoken = mandarin_spoken;
    m_mandarin_spoken_isSet = true;
}

bool OAILanguagesSpoken::is_mandarin_spoken_Set() const{
    return m_mandarin_spoken_isSet;
}

bool OAILanguagesSpoken::is_mandarin_spoken_Valid() const{
    return m_mandarin_spoken_isValid;
}

QString OAILanguagesSpoken::getMandarinSpokenException() const {
    return m_mandarin_spoken_exception;
}
void OAILanguagesSpoken::setMandarinSpokenException(const QString &mandarin_spoken_exception) {
    m_mandarin_spoken_exception = mandarin_spoken_exception;
    m_mandarin_spoken_exception_isSet = true;
}

bool OAILanguagesSpoken::is_mandarin_spoken_exception_Set() const{
    return m_mandarin_spoken_exception_isSet;
}

bool OAILanguagesSpoken::is_mandarin_spoken_exception_Valid() const{
    return m_mandarin_spoken_exception_isValid;
}

bool OAILanguagesSpoken::isPortugueseSpoken() const {
    return m_portuguese_spoken;
}
void OAILanguagesSpoken::setPortugueseSpoken(const bool &portuguese_spoken) {
    m_portuguese_spoken = portuguese_spoken;
    m_portuguese_spoken_isSet = true;
}

bool OAILanguagesSpoken::is_portuguese_spoken_Set() const{
    return m_portuguese_spoken_isSet;
}

bool OAILanguagesSpoken::is_portuguese_spoken_Valid() const{
    return m_portuguese_spoken_isValid;
}

QString OAILanguagesSpoken::getPortugueseSpokenException() const {
    return m_portuguese_spoken_exception;
}
void OAILanguagesSpoken::setPortugueseSpokenException(const QString &portuguese_spoken_exception) {
    m_portuguese_spoken_exception = portuguese_spoken_exception;
    m_portuguese_spoken_exception_isSet = true;
}

bool OAILanguagesSpoken::is_portuguese_spoken_exception_Set() const{
    return m_portuguese_spoken_exception_isSet;
}

bool OAILanguagesSpoken::is_portuguese_spoken_exception_Valid() const{
    return m_portuguese_spoken_exception_isValid;
}

bool OAILanguagesSpoken::isRussianSpoken() const {
    return m_russian_spoken;
}
void OAILanguagesSpoken::setRussianSpoken(const bool &russian_spoken) {
    m_russian_spoken = russian_spoken;
    m_russian_spoken_isSet = true;
}

bool OAILanguagesSpoken::is_russian_spoken_Set() const{
    return m_russian_spoken_isSet;
}

bool OAILanguagesSpoken::is_russian_spoken_Valid() const{
    return m_russian_spoken_isValid;
}

QString OAILanguagesSpoken::getRussianSpokenException() const {
    return m_russian_spoken_exception;
}
void OAILanguagesSpoken::setRussianSpokenException(const QString &russian_spoken_exception) {
    m_russian_spoken_exception = russian_spoken_exception;
    m_russian_spoken_exception_isSet = true;
}

bool OAILanguagesSpoken::is_russian_spoken_exception_Set() const{
    return m_russian_spoken_exception_isSet;
}

bool OAILanguagesSpoken::is_russian_spoken_exception_Valid() const{
    return m_russian_spoken_exception_isValid;
}

bool OAILanguagesSpoken::isSpanishSpoken() const {
    return m_spanish_spoken;
}
void OAILanguagesSpoken::setSpanishSpoken(const bool &spanish_spoken) {
    m_spanish_spoken = spanish_spoken;
    m_spanish_spoken_isSet = true;
}

bool OAILanguagesSpoken::is_spanish_spoken_Set() const{
    return m_spanish_spoken_isSet;
}

bool OAILanguagesSpoken::is_spanish_spoken_Valid() const{
    return m_spanish_spoken_isValid;
}

QString OAILanguagesSpoken::getSpanishSpokenException() const {
    return m_spanish_spoken_exception;
}
void OAILanguagesSpoken::setSpanishSpokenException(const QString &spanish_spoken_exception) {
    m_spanish_spoken_exception = spanish_spoken_exception;
    m_spanish_spoken_exception_isSet = true;
}

bool OAILanguagesSpoken::is_spanish_spoken_exception_Set() const{
    return m_spanish_spoken_exception_isSet;
}

bool OAILanguagesSpoken::is_spanish_spoken_exception_Valid() const{
    return m_spanish_spoken_exception_isValid;
}

bool OAILanguagesSpoken::isVietnameseSpoken() const {
    return m_vietnamese_spoken;
}
void OAILanguagesSpoken::setVietnameseSpoken(const bool &vietnamese_spoken) {
    m_vietnamese_spoken = vietnamese_spoken;
    m_vietnamese_spoken_isSet = true;
}

bool OAILanguagesSpoken::is_vietnamese_spoken_Set() const{
    return m_vietnamese_spoken_isSet;
}

bool OAILanguagesSpoken::is_vietnamese_spoken_Valid() const{
    return m_vietnamese_spoken_isValid;
}

QString OAILanguagesSpoken::getVietnameseSpokenException() const {
    return m_vietnamese_spoken_exception;
}
void OAILanguagesSpoken::setVietnameseSpokenException(const QString &vietnamese_spoken_exception) {
    m_vietnamese_spoken_exception = vietnamese_spoken_exception;
    m_vietnamese_spoken_exception_isSet = true;
}

bool OAILanguagesSpoken::is_vietnamese_spoken_exception_Set() const{
    return m_vietnamese_spoken_exception_isSet;
}

bool OAILanguagesSpoken::is_vietnamese_spoken_exception_Valid() const{
    return m_vietnamese_spoken_exception_isValid;
}

bool OAILanguagesSpoken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arabic_spoken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arabic_spoken_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cantonese_spoken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cantonese_spoken_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dutch_spoken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dutch_spoken_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_english_spoken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_english_spoken_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filipino_spoken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filipino_spoken_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_french_spoken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_french_spoken_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_german_spoken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_german_spoken_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hindi_spoken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hindi_spoken_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indonesian_spoken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indonesian_spoken_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_italian_spoken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_italian_spoken_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_japanese_spoken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_japanese_spoken_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_korean_spoken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_korean_spoken_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandarin_spoken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandarin_spoken_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portuguese_spoken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portuguese_spoken_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_russian_spoken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_russian_spoken_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spanish_spoken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spanish_spoken_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vietnamese_spoken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vietnamese_spoken_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILanguagesSpoken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
