/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINutritionFacts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINutritionFacts::OAINutritionFacts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINutritionFacts::OAINutritionFacts() {
    this->initializeModel();
}

OAINutritionFacts::~OAINutritionFacts() {}

void OAINutritionFacts::initializeModel() {

    m_calories_isSet = false;
    m_calories_isValid = false;

    m_cholesterol_isSet = false;
    m_cholesterol_isValid = false;

    m_protein_isSet = false;
    m_protein_isValid = false;

    m_sodium_isSet = false;
    m_sodium_isValid = false;

    m_total_carbohydrate_isSet = false;
    m_total_carbohydrate_isValid = false;

    m_total_fat_isSet = false;
    m_total_fat_isValid = false;
}

void OAINutritionFacts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINutritionFacts::fromJsonObject(QJsonObject json) {

    m_calories_isValid = ::OpenAPI::fromJsonValue(m_calories, json[QString("calories")]);
    m_calories_isSet = !json[QString("calories")].isNull() && m_calories_isValid;

    m_cholesterol_isValid = ::OpenAPI::fromJsonValue(m_cholesterol, json[QString("cholesterol")]);
    m_cholesterol_isSet = !json[QString("cholesterol")].isNull() && m_cholesterol_isValid;

    m_protein_isValid = ::OpenAPI::fromJsonValue(m_protein, json[QString("protein")]);
    m_protein_isSet = !json[QString("protein")].isNull() && m_protein_isValid;

    m_sodium_isValid = ::OpenAPI::fromJsonValue(m_sodium, json[QString("sodium")]);
    m_sodium_isSet = !json[QString("sodium")].isNull() && m_sodium_isValid;

    m_total_carbohydrate_isValid = ::OpenAPI::fromJsonValue(m_total_carbohydrate, json[QString("totalCarbohydrate")]);
    m_total_carbohydrate_isSet = !json[QString("totalCarbohydrate")].isNull() && m_total_carbohydrate_isValid;

    m_total_fat_isValid = ::OpenAPI::fromJsonValue(m_total_fat, json[QString("totalFat")]);
    m_total_fat_isSet = !json[QString("totalFat")].isNull() && m_total_fat_isValid;
}

QString OAINutritionFacts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINutritionFacts::asJsonObject() const {
    QJsonObject obj;
    if (m_calories.isSet()) {
        obj.insert(QString("calories"), ::OpenAPI::toJsonValue(m_calories));
    }
    if (m_cholesterol.isSet()) {
        obj.insert(QString("cholesterol"), ::OpenAPI::toJsonValue(m_cholesterol));
    }
    if (m_protein.isSet()) {
        obj.insert(QString("protein"), ::OpenAPI::toJsonValue(m_protein));
    }
    if (m_sodium.isSet()) {
        obj.insert(QString("sodium"), ::OpenAPI::toJsonValue(m_sodium));
    }
    if (m_total_carbohydrate.isSet()) {
        obj.insert(QString("totalCarbohydrate"), ::OpenAPI::toJsonValue(m_total_carbohydrate));
    }
    if (m_total_fat.isSet()) {
        obj.insert(QString("totalFat"), ::OpenAPI::toJsonValue(m_total_fat));
    }
    return obj;
}

OAICaloriesFact OAINutritionFacts::getCalories() const {
    return m_calories;
}
void OAINutritionFacts::setCalories(const OAICaloriesFact &calories) {
    m_calories = calories;
    m_calories_isSet = true;
}

bool OAINutritionFacts::is_calories_Set() const{
    return m_calories_isSet;
}

bool OAINutritionFacts::is_calories_Valid() const{
    return m_calories_isValid;
}

OAINutritionFact OAINutritionFacts::getCholesterol() const {
    return m_cholesterol;
}
void OAINutritionFacts::setCholesterol(const OAINutritionFact &cholesterol) {
    m_cholesterol = cholesterol;
    m_cholesterol_isSet = true;
}

bool OAINutritionFacts::is_cholesterol_Set() const{
    return m_cholesterol_isSet;
}

bool OAINutritionFacts::is_cholesterol_Valid() const{
    return m_cholesterol_isValid;
}

OAINutritionFact OAINutritionFacts::getProtein() const {
    return m_protein;
}
void OAINutritionFacts::setProtein(const OAINutritionFact &protein) {
    m_protein = protein;
    m_protein_isSet = true;
}

bool OAINutritionFacts::is_protein_Set() const{
    return m_protein_isSet;
}

bool OAINutritionFacts::is_protein_Valid() const{
    return m_protein_isValid;
}

OAINutritionFact OAINutritionFacts::getSodium() const {
    return m_sodium;
}
void OAINutritionFacts::setSodium(const OAINutritionFact &sodium) {
    m_sodium = sodium;
    m_sodium_isSet = true;
}

bool OAINutritionFacts::is_sodium_Set() const{
    return m_sodium_isSet;
}

bool OAINutritionFacts::is_sodium_Valid() const{
    return m_sodium_isValid;
}

OAINutritionFact OAINutritionFacts::getTotalCarbohydrate() const {
    return m_total_carbohydrate;
}
void OAINutritionFacts::setTotalCarbohydrate(const OAINutritionFact &total_carbohydrate) {
    m_total_carbohydrate = total_carbohydrate;
    m_total_carbohydrate_isSet = true;
}

bool OAINutritionFacts::is_total_carbohydrate_Set() const{
    return m_total_carbohydrate_isSet;
}

bool OAINutritionFacts::is_total_carbohydrate_Valid() const{
    return m_total_carbohydrate_isValid;
}

OAINutritionFact OAINutritionFacts::getTotalFat() const {
    return m_total_fat;
}
void OAINutritionFacts::setTotalFat(const OAINutritionFact &total_fat) {
    m_total_fat = total_fat;
    m_total_fat_isSet = true;
}

bool OAINutritionFacts::is_total_fat_Set() const{
    return m_total_fat_isSet;
}

bool OAINutritionFacts::is_total_fat_Valid() const{
    return m_total_fat_isValid;
}

bool OAINutritionFacts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cholesterol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protein.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sodium.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_carbohydrate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_fat.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINutritionFacts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
