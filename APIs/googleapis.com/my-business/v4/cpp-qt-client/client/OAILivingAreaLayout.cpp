/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILivingAreaLayout.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILivingAreaLayout::OAILivingAreaLayout(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILivingAreaLayout::OAILivingAreaLayout() {
    this->initializeModel();
}

OAILivingAreaLayout::~OAILivingAreaLayout() {}

void OAILivingAreaLayout::initializeModel() {

    m_balcony_isSet = false;
    m_balcony_isValid = false;

    m_balcony_exception_isSet = false;
    m_balcony_exception_isValid = false;

    m_living_area_sq_meters_isSet = false;
    m_living_area_sq_meters_isValid = false;

    m_living_area_sq_meters_exception_isSet = false;
    m_living_area_sq_meters_exception_isValid = false;

    m_loft_isSet = false;
    m_loft_isValid = false;

    m_loft_exception_isSet = false;
    m_loft_exception_isValid = false;

    m_non_smoking_isSet = false;
    m_non_smoking_isValid = false;

    m_non_smoking_exception_isSet = false;
    m_non_smoking_exception_isValid = false;

    m_patio_isSet = false;
    m_patio_isValid = false;

    m_patio_exception_isSet = false;
    m_patio_exception_isValid = false;

    m_stairs_isSet = false;
    m_stairs_isValid = false;

    m_stairs_exception_isSet = false;
    m_stairs_exception_isValid = false;
}

void OAILivingAreaLayout::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILivingAreaLayout::fromJsonObject(QJsonObject json) {

    m_balcony_isValid = ::OpenAPI::fromJsonValue(m_balcony, json[QString("balcony")]);
    m_balcony_isSet = !json[QString("balcony")].isNull() && m_balcony_isValid;

    m_balcony_exception_isValid = ::OpenAPI::fromJsonValue(m_balcony_exception, json[QString("balconyException")]);
    m_balcony_exception_isSet = !json[QString("balconyException")].isNull() && m_balcony_exception_isValid;

    m_living_area_sq_meters_isValid = ::OpenAPI::fromJsonValue(m_living_area_sq_meters, json[QString("livingAreaSqMeters")]);
    m_living_area_sq_meters_isSet = !json[QString("livingAreaSqMeters")].isNull() && m_living_area_sq_meters_isValid;

    m_living_area_sq_meters_exception_isValid = ::OpenAPI::fromJsonValue(m_living_area_sq_meters_exception, json[QString("livingAreaSqMetersException")]);
    m_living_area_sq_meters_exception_isSet = !json[QString("livingAreaSqMetersException")].isNull() && m_living_area_sq_meters_exception_isValid;

    m_loft_isValid = ::OpenAPI::fromJsonValue(m_loft, json[QString("loft")]);
    m_loft_isSet = !json[QString("loft")].isNull() && m_loft_isValid;

    m_loft_exception_isValid = ::OpenAPI::fromJsonValue(m_loft_exception, json[QString("loftException")]);
    m_loft_exception_isSet = !json[QString("loftException")].isNull() && m_loft_exception_isValid;

    m_non_smoking_isValid = ::OpenAPI::fromJsonValue(m_non_smoking, json[QString("nonSmoking")]);
    m_non_smoking_isSet = !json[QString("nonSmoking")].isNull() && m_non_smoking_isValid;

    m_non_smoking_exception_isValid = ::OpenAPI::fromJsonValue(m_non_smoking_exception, json[QString("nonSmokingException")]);
    m_non_smoking_exception_isSet = !json[QString("nonSmokingException")].isNull() && m_non_smoking_exception_isValid;

    m_patio_isValid = ::OpenAPI::fromJsonValue(m_patio, json[QString("patio")]);
    m_patio_isSet = !json[QString("patio")].isNull() && m_patio_isValid;

    m_patio_exception_isValid = ::OpenAPI::fromJsonValue(m_patio_exception, json[QString("patioException")]);
    m_patio_exception_isSet = !json[QString("patioException")].isNull() && m_patio_exception_isValid;

    m_stairs_isValid = ::OpenAPI::fromJsonValue(m_stairs, json[QString("stairs")]);
    m_stairs_isSet = !json[QString("stairs")].isNull() && m_stairs_isValid;

    m_stairs_exception_isValid = ::OpenAPI::fromJsonValue(m_stairs_exception, json[QString("stairsException")]);
    m_stairs_exception_isSet = !json[QString("stairsException")].isNull() && m_stairs_exception_isValid;
}

QString OAILivingAreaLayout::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILivingAreaLayout::asJsonObject() const {
    QJsonObject obj;
    if (m_balcony_isSet) {
        obj.insert(QString("balcony"), ::OpenAPI::toJsonValue(m_balcony));
    }
    if (m_balcony_exception_isSet) {
        obj.insert(QString("balconyException"), ::OpenAPI::toJsonValue(m_balcony_exception));
    }
    if (m_living_area_sq_meters_isSet) {
        obj.insert(QString("livingAreaSqMeters"), ::OpenAPI::toJsonValue(m_living_area_sq_meters));
    }
    if (m_living_area_sq_meters_exception_isSet) {
        obj.insert(QString("livingAreaSqMetersException"), ::OpenAPI::toJsonValue(m_living_area_sq_meters_exception));
    }
    if (m_loft_isSet) {
        obj.insert(QString("loft"), ::OpenAPI::toJsonValue(m_loft));
    }
    if (m_loft_exception_isSet) {
        obj.insert(QString("loftException"), ::OpenAPI::toJsonValue(m_loft_exception));
    }
    if (m_non_smoking_isSet) {
        obj.insert(QString("nonSmoking"), ::OpenAPI::toJsonValue(m_non_smoking));
    }
    if (m_non_smoking_exception_isSet) {
        obj.insert(QString("nonSmokingException"), ::OpenAPI::toJsonValue(m_non_smoking_exception));
    }
    if (m_patio_isSet) {
        obj.insert(QString("patio"), ::OpenAPI::toJsonValue(m_patio));
    }
    if (m_patio_exception_isSet) {
        obj.insert(QString("patioException"), ::OpenAPI::toJsonValue(m_patio_exception));
    }
    if (m_stairs_isSet) {
        obj.insert(QString("stairs"), ::OpenAPI::toJsonValue(m_stairs));
    }
    if (m_stairs_exception_isSet) {
        obj.insert(QString("stairsException"), ::OpenAPI::toJsonValue(m_stairs_exception));
    }
    return obj;
}

bool OAILivingAreaLayout::isBalcony() const {
    return m_balcony;
}
void OAILivingAreaLayout::setBalcony(const bool &balcony) {
    m_balcony = balcony;
    m_balcony_isSet = true;
}

bool OAILivingAreaLayout::is_balcony_Set() const{
    return m_balcony_isSet;
}

bool OAILivingAreaLayout::is_balcony_Valid() const{
    return m_balcony_isValid;
}

QString OAILivingAreaLayout::getBalconyException() const {
    return m_balcony_exception;
}
void OAILivingAreaLayout::setBalconyException(const QString &balcony_exception) {
    m_balcony_exception = balcony_exception;
    m_balcony_exception_isSet = true;
}

bool OAILivingAreaLayout::is_balcony_exception_Set() const{
    return m_balcony_exception_isSet;
}

bool OAILivingAreaLayout::is_balcony_exception_Valid() const{
    return m_balcony_exception_isValid;
}

float OAILivingAreaLayout::getLivingAreaSqMeters() const {
    return m_living_area_sq_meters;
}
void OAILivingAreaLayout::setLivingAreaSqMeters(const float &living_area_sq_meters) {
    m_living_area_sq_meters = living_area_sq_meters;
    m_living_area_sq_meters_isSet = true;
}

bool OAILivingAreaLayout::is_living_area_sq_meters_Set() const{
    return m_living_area_sq_meters_isSet;
}

bool OAILivingAreaLayout::is_living_area_sq_meters_Valid() const{
    return m_living_area_sq_meters_isValid;
}

QString OAILivingAreaLayout::getLivingAreaSqMetersException() const {
    return m_living_area_sq_meters_exception;
}
void OAILivingAreaLayout::setLivingAreaSqMetersException(const QString &living_area_sq_meters_exception) {
    m_living_area_sq_meters_exception = living_area_sq_meters_exception;
    m_living_area_sq_meters_exception_isSet = true;
}

bool OAILivingAreaLayout::is_living_area_sq_meters_exception_Set() const{
    return m_living_area_sq_meters_exception_isSet;
}

bool OAILivingAreaLayout::is_living_area_sq_meters_exception_Valid() const{
    return m_living_area_sq_meters_exception_isValid;
}

bool OAILivingAreaLayout::isLoft() const {
    return m_loft;
}
void OAILivingAreaLayout::setLoft(const bool &loft) {
    m_loft = loft;
    m_loft_isSet = true;
}

bool OAILivingAreaLayout::is_loft_Set() const{
    return m_loft_isSet;
}

bool OAILivingAreaLayout::is_loft_Valid() const{
    return m_loft_isValid;
}

QString OAILivingAreaLayout::getLoftException() const {
    return m_loft_exception;
}
void OAILivingAreaLayout::setLoftException(const QString &loft_exception) {
    m_loft_exception = loft_exception;
    m_loft_exception_isSet = true;
}

bool OAILivingAreaLayout::is_loft_exception_Set() const{
    return m_loft_exception_isSet;
}

bool OAILivingAreaLayout::is_loft_exception_Valid() const{
    return m_loft_exception_isValid;
}

bool OAILivingAreaLayout::isNonSmoking() const {
    return m_non_smoking;
}
void OAILivingAreaLayout::setNonSmoking(const bool &non_smoking) {
    m_non_smoking = non_smoking;
    m_non_smoking_isSet = true;
}

bool OAILivingAreaLayout::is_non_smoking_Set() const{
    return m_non_smoking_isSet;
}

bool OAILivingAreaLayout::is_non_smoking_Valid() const{
    return m_non_smoking_isValid;
}

QString OAILivingAreaLayout::getNonSmokingException() const {
    return m_non_smoking_exception;
}
void OAILivingAreaLayout::setNonSmokingException(const QString &non_smoking_exception) {
    m_non_smoking_exception = non_smoking_exception;
    m_non_smoking_exception_isSet = true;
}

bool OAILivingAreaLayout::is_non_smoking_exception_Set() const{
    return m_non_smoking_exception_isSet;
}

bool OAILivingAreaLayout::is_non_smoking_exception_Valid() const{
    return m_non_smoking_exception_isValid;
}

bool OAILivingAreaLayout::isPatio() const {
    return m_patio;
}
void OAILivingAreaLayout::setPatio(const bool &patio) {
    m_patio = patio;
    m_patio_isSet = true;
}

bool OAILivingAreaLayout::is_patio_Set() const{
    return m_patio_isSet;
}

bool OAILivingAreaLayout::is_patio_Valid() const{
    return m_patio_isValid;
}

QString OAILivingAreaLayout::getPatioException() const {
    return m_patio_exception;
}
void OAILivingAreaLayout::setPatioException(const QString &patio_exception) {
    m_patio_exception = patio_exception;
    m_patio_exception_isSet = true;
}

bool OAILivingAreaLayout::is_patio_exception_Set() const{
    return m_patio_exception_isSet;
}

bool OAILivingAreaLayout::is_patio_exception_Valid() const{
    return m_patio_exception_isValid;
}

bool OAILivingAreaLayout::isStairs() const {
    return m_stairs;
}
void OAILivingAreaLayout::setStairs(const bool &stairs) {
    m_stairs = stairs;
    m_stairs_isSet = true;
}

bool OAILivingAreaLayout::is_stairs_Set() const{
    return m_stairs_isSet;
}

bool OAILivingAreaLayout::is_stairs_Valid() const{
    return m_stairs_isValid;
}

QString OAILivingAreaLayout::getStairsException() const {
    return m_stairs_exception;
}
void OAILivingAreaLayout::setStairsException(const QString &stairs_exception) {
    m_stairs_exception = stairs_exception;
    m_stairs_exception_isSet = true;
}

bool OAILivingAreaLayout::is_stairs_exception_Set() const{
    return m_stairs_exception_isSet;
}

bool OAILivingAreaLayout::is_stairs_exception_Valid() const{
    return m_stairs_exception_isValid;
}

bool OAILivingAreaLayout::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balcony_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balcony_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_living_area_sq_meters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_living_area_sq_meters_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loft_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_smoking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_smoking_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patio_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stairs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stairs_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILivingAreaLayout::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
