/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportGoogleLocationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportGoogleLocationRequest::OAIReportGoogleLocationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportGoogleLocationRequest::OAIReportGoogleLocationRequest() {
    this->initializeModel();
}

OAIReportGoogleLocationRequest::~OAIReportGoogleLocationRequest() {}

void OAIReportGoogleLocationRequest::initializeModel() {

    m_location_group_name_isSet = false;
    m_location_group_name_isValid = false;

    m_report_reason_bad_location_isSet = false;
    m_report_reason_bad_location_isValid = false;

    m_report_reason_bad_recommendation_isSet = false;
    m_report_reason_bad_recommendation_isValid = false;

    m_report_reason_elaboration_isSet = false;
    m_report_reason_elaboration_isValid = false;

    m_report_reason_language_code_isSet = false;
    m_report_reason_language_code_isValid = false;
}

void OAIReportGoogleLocationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportGoogleLocationRequest::fromJsonObject(QJsonObject json) {

    m_location_group_name_isValid = ::OpenAPI::fromJsonValue(m_location_group_name, json[QString("locationGroupName")]);
    m_location_group_name_isSet = !json[QString("locationGroupName")].isNull() && m_location_group_name_isValid;

    m_report_reason_bad_location_isValid = ::OpenAPI::fromJsonValue(m_report_reason_bad_location, json[QString("reportReasonBadLocation")]);
    m_report_reason_bad_location_isSet = !json[QString("reportReasonBadLocation")].isNull() && m_report_reason_bad_location_isValid;

    m_report_reason_bad_recommendation_isValid = ::OpenAPI::fromJsonValue(m_report_reason_bad_recommendation, json[QString("reportReasonBadRecommendation")]);
    m_report_reason_bad_recommendation_isSet = !json[QString("reportReasonBadRecommendation")].isNull() && m_report_reason_bad_recommendation_isValid;

    m_report_reason_elaboration_isValid = ::OpenAPI::fromJsonValue(m_report_reason_elaboration, json[QString("reportReasonElaboration")]);
    m_report_reason_elaboration_isSet = !json[QString("reportReasonElaboration")].isNull() && m_report_reason_elaboration_isValid;

    m_report_reason_language_code_isValid = ::OpenAPI::fromJsonValue(m_report_reason_language_code, json[QString("reportReasonLanguageCode")]);
    m_report_reason_language_code_isSet = !json[QString("reportReasonLanguageCode")].isNull() && m_report_reason_language_code_isValid;
}

QString OAIReportGoogleLocationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportGoogleLocationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_location_group_name_isSet) {
        obj.insert(QString("locationGroupName"), ::OpenAPI::toJsonValue(m_location_group_name));
    }
    if (m_report_reason_bad_location_isSet) {
        obj.insert(QString("reportReasonBadLocation"), ::OpenAPI::toJsonValue(m_report_reason_bad_location));
    }
    if (m_report_reason_bad_recommendation_isSet) {
        obj.insert(QString("reportReasonBadRecommendation"), ::OpenAPI::toJsonValue(m_report_reason_bad_recommendation));
    }
    if (m_report_reason_elaboration_isSet) {
        obj.insert(QString("reportReasonElaboration"), ::OpenAPI::toJsonValue(m_report_reason_elaboration));
    }
    if (m_report_reason_language_code_isSet) {
        obj.insert(QString("reportReasonLanguageCode"), ::OpenAPI::toJsonValue(m_report_reason_language_code));
    }
    return obj;
}

QString OAIReportGoogleLocationRequest::getLocationGroupName() const {
    return m_location_group_name;
}
void OAIReportGoogleLocationRequest::setLocationGroupName(const QString &location_group_name) {
    m_location_group_name = location_group_name;
    m_location_group_name_isSet = true;
}

bool OAIReportGoogleLocationRequest::is_location_group_name_Set() const{
    return m_location_group_name_isSet;
}

bool OAIReportGoogleLocationRequest::is_location_group_name_Valid() const{
    return m_location_group_name_isValid;
}

QString OAIReportGoogleLocationRequest::getReportReasonBadLocation() const {
    return m_report_reason_bad_location;
}
void OAIReportGoogleLocationRequest::setReportReasonBadLocation(const QString &report_reason_bad_location) {
    m_report_reason_bad_location = report_reason_bad_location;
    m_report_reason_bad_location_isSet = true;
}

bool OAIReportGoogleLocationRequest::is_report_reason_bad_location_Set() const{
    return m_report_reason_bad_location_isSet;
}

bool OAIReportGoogleLocationRequest::is_report_reason_bad_location_Valid() const{
    return m_report_reason_bad_location_isValid;
}

QString OAIReportGoogleLocationRequest::getReportReasonBadRecommendation() const {
    return m_report_reason_bad_recommendation;
}
void OAIReportGoogleLocationRequest::setReportReasonBadRecommendation(const QString &report_reason_bad_recommendation) {
    m_report_reason_bad_recommendation = report_reason_bad_recommendation;
    m_report_reason_bad_recommendation_isSet = true;
}

bool OAIReportGoogleLocationRequest::is_report_reason_bad_recommendation_Set() const{
    return m_report_reason_bad_recommendation_isSet;
}

bool OAIReportGoogleLocationRequest::is_report_reason_bad_recommendation_Valid() const{
    return m_report_reason_bad_recommendation_isValid;
}

QString OAIReportGoogleLocationRequest::getReportReasonElaboration() const {
    return m_report_reason_elaboration;
}
void OAIReportGoogleLocationRequest::setReportReasonElaboration(const QString &report_reason_elaboration) {
    m_report_reason_elaboration = report_reason_elaboration;
    m_report_reason_elaboration_isSet = true;
}

bool OAIReportGoogleLocationRequest::is_report_reason_elaboration_Set() const{
    return m_report_reason_elaboration_isSet;
}

bool OAIReportGoogleLocationRequest::is_report_reason_elaboration_Valid() const{
    return m_report_reason_elaboration_isValid;
}

QString OAIReportGoogleLocationRequest::getReportReasonLanguageCode() const {
    return m_report_reason_language_code;
}
void OAIReportGoogleLocationRequest::setReportReasonLanguageCode(const QString &report_reason_language_code) {
    m_report_reason_language_code = report_reason_language_code;
    m_report_reason_language_code_isSet = true;
}

bool OAIReportGoogleLocationRequest::is_report_reason_language_code_Set() const{
    return m_report_reason_language_code_isSet;
}

bool OAIReportGoogleLocationRequest::is_report_reason_language_code_Valid() const{
    return m_report_reason_language_code_isValid;
}

bool OAIReportGoogleLocationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_reason_bad_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_reason_bad_recommendation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_reason_elaboration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_reason_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportGoogleLocationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
