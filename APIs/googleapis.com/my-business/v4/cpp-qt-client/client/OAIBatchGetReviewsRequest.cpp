/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetReviewsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetReviewsRequest::OAIBatchGetReviewsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetReviewsRequest::OAIBatchGetReviewsRequest() {
    this->initializeModel();
}

OAIBatchGetReviewsRequest::~OAIBatchGetReviewsRequest() {}

void OAIBatchGetReviewsRequest::initializeModel() {

    m_ignore_rating_only_reviews_isSet = false;
    m_ignore_rating_only_reviews_isValid = false;

    m_location_names_isSet = false;
    m_location_names_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;
}

void OAIBatchGetReviewsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetReviewsRequest::fromJsonObject(QJsonObject json) {

    m_ignore_rating_only_reviews_isValid = ::OpenAPI::fromJsonValue(m_ignore_rating_only_reviews, json[QString("ignoreRatingOnlyReviews")]);
    m_ignore_rating_only_reviews_isSet = !json[QString("ignoreRatingOnlyReviews")].isNull() && m_ignore_rating_only_reviews_isValid;

    m_location_names_isValid = ::OpenAPI::fromJsonValue(m_location_names, json[QString("locationNames")]);
    m_location_names_isSet = !json[QString("locationNames")].isNull() && m_location_names_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;
}

QString OAIBatchGetReviewsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetReviewsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_ignore_rating_only_reviews_isSet) {
        obj.insert(QString("ignoreRatingOnlyReviews"), ::OpenAPI::toJsonValue(m_ignore_rating_only_reviews));
    }
    if (m_location_names.size() > 0) {
        obj.insert(QString("locationNames"), ::OpenAPI::toJsonValue(m_location_names));
    }
    if (m_order_by_isSet) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    return obj;
}

bool OAIBatchGetReviewsRequest::isIgnoreRatingOnlyReviews() const {
    return m_ignore_rating_only_reviews;
}
void OAIBatchGetReviewsRequest::setIgnoreRatingOnlyReviews(const bool &ignore_rating_only_reviews) {
    m_ignore_rating_only_reviews = ignore_rating_only_reviews;
    m_ignore_rating_only_reviews_isSet = true;
}

bool OAIBatchGetReviewsRequest::is_ignore_rating_only_reviews_Set() const{
    return m_ignore_rating_only_reviews_isSet;
}

bool OAIBatchGetReviewsRequest::is_ignore_rating_only_reviews_Valid() const{
    return m_ignore_rating_only_reviews_isValid;
}

QList<QString> OAIBatchGetReviewsRequest::getLocationNames() const {
    return m_location_names;
}
void OAIBatchGetReviewsRequest::setLocationNames(const QList<QString> &location_names) {
    m_location_names = location_names;
    m_location_names_isSet = true;
}

bool OAIBatchGetReviewsRequest::is_location_names_Set() const{
    return m_location_names_isSet;
}

bool OAIBatchGetReviewsRequest::is_location_names_Valid() const{
    return m_location_names_isValid;
}

QString OAIBatchGetReviewsRequest::getOrderBy() const {
    return m_order_by;
}
void OAIBatchGetReviewsRequest::setOrderBy(const QString &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIBatchGetReviewsRequest::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIBatchGetReviewsRequest::is_order_by_Valid() const{
    return m_order_by_isValid;
}

qint32 OAIBatchGetReviewsRequest::getPageSize() const {
    return m_page_size;
}
void OAIBatchGetReviewsRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIBatchGetReviewsRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIBatchGetReviewsRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIBatchGetReviewsRequest::getPageToken() const {
    return m_page_token;
}
void OAIBatchGetReviewsRequest::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIBatchGetReviewsRequest::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIBatchGetReviewsRequest::is_page_token_Valid() const{
    return m_page_token_isValid;
}

bool OAIBatchGetReviewsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ignore_rating_only_reviews_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetReviewsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
