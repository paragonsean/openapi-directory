/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostalAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostalAddress::OAIPostalAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostalAddress::OAIPostalAddress() {
    this->initializeModel();
}

OAIPostalAddress::~OAIPostalAddress() {}

void OAIPostalAddress::initializeModel() {

    m_address_lines_isSet = false;
    m_address_lines_isValid = false;

    m_administrative_area_isSet = false;
    m_administrative_area_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_locality_isSet = false;
    m_locality_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_region_code_isSet = false;
    m_region_code_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_sorting_code_isSet = false;
    m_sorting_code_isValid = false;

    m_sublocality_isSet = false;
    m_sublocality_isValid = false;
}

void OAIPostalAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostalAddress::fromJsonObject(QJsonObject json) {

    m_address_lines_isValid = ::OpenAPI::fromJsonValue(m_address_lines, json[QString("addressLines")]);
    m_address_lines_isSet = !json[QString("addressLines")].isNull() && m_address_lines_isValid;

    m_administrative_area_isValid = ::OpenAPI::fromJsonValue(m_administrative_area, json[QString("administrativeArea")]);
    m_administrative_area_isSet = !json[QString("administrativeArea")].isNull() && m_administrative_area_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_locality_isValid = ::OpenAPI::fromJsonValue(m_locality, json[QString("locality")]);
    m_locality_isSet = !json[QString("locality")].isNull() && m_locality_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_region_code_isValid = ::OpenAPI::fromJsonValue(m_region_code, json[QString("regionCode")]);
    m_region_code_isSet = !json[QString("regionCode")].isNull() && m_region_code_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_sorting_code_isValid = ::OpenAPI::fromJsonValue(m_sorting_code, json[QString("sortingCode")]);
    m_sorting_code_isSet = !json[QString("sortingCode")].isNull() && m_sorting_code_isValid;

    m_sublocality_isValid = ::OpenAPI::fromJsonValue(m_sublocality, json[QString("sublocality")]);
    m_sublocality_isSet = !json[QString("sublocality")].isNull() && m_sublocality_isValid;
}

QString OAIPostalAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostalAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address_lines.size() > 0) {
        obj.insert(QString("addressLines"), ::OpenAPI::toJsonValue(m_address_lines));
    }
    if (m_administrative_area_isSet) {
        obj.insert(QString("administrativeArea"), ::OpenAPI::toJsonValue(m_administrative_area));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_locality_isSet) {
        obj.insert(QString("locality"), ::OpenAPI::toJsonValue(m_locality));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_recipients.size() > 0) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_region_code_isSet) {
        obj.insert(QString("regionCode"), ::OpenAPI::toJsonValue(m_region_code));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_sorting_code_isSet) {
        obj.insert(QString("sortingCode"), ::OpenAPI::toJsonValue(m_sorting_code));
    }
    if (m_sublocality_isSet) {
        obj.insert(QString("sublocality"), ::OpenAPI::toJsonValue(m_sublocality));
    }
    return obj;
}

QList<QString> OAIPostalAddress::getAddressLines() const {
    return m_address_lines;
}
void OAIPostalAddress::setAddressLines(const QList<QString> &address_lines) {
    m_address_lines = address_lines;
    m_address_lines_isSet = true;
}

bool OAIPostalAddress::is_address_lines_Set() const{
    return m_address_lines_isSet;
}

bool OAIPostalAddress::is_address_lines_Valid() const{
    return m_address_lines_isValid;
}

QString OAIPostalAddress::getAdministrativeArea() const {
    return m_administrative_area;
}
void OAIPostalAddress::setAdministrativeArea(const QString &administrative_area) {
    m_administrative_area = administrative_area;
    m_administrative_area_isSet = true;
}

bool OAIPostalAddress::is_administrative_area_Set() const{
    return m_administrative_area_isSet;
}

bool OAIPostalAddress::is_administrative_area_Valid() const{
    return m_administrative_area_isValid;
}

QString OAIPostalAddress::getLanguageCode() const {
    return m_language_code;
}
void OAIPostalAddress::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIPostalAddress::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIPostalAddress::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIPostalAddress::getLocality() const {
    return m_locality;
}
void OAIPostalAddress::setLocality(const QString &locality) {
    m_locality = locality;
    m_locality_isSet = true;
}

bool OAIPostalAddress::is_locality_Set() const{
    return m_locality_isSet;
}

bool OAIPostalAddress::is_locality_Valid() const{
    return m_locality_isValid;
}

QString OAIPostalAddress::getOrganization() const {
    return m_organization;
}
void OAIPostalAddress::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIPostalAddress::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIPostalAddress::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIPostalAddress::getPostalCode() const {
    return m_postal_code;
}
void OAIPostalAddress::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIPostalAddress::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIPostalAddress::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QList<QString> OAIPostalAddress::getRecipients() const {
    return m_recipients;
}
void OAIPostalAddress::setRecipients(const QList<QString> &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAIPostalAddress::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAIPostalAddress::is_recipients_Valid() const{
    return m_recipients_isValid;
}

QString OAIPostalAddress::getRegionCode() const {
    return m_region_code;
}
void OAIPostalAddress::setRegionCode(const QString &region_code) {
    m_region_code = region_code;
    m_region_code_isSet = true;
}

bool OAIPostalAddress::is_region_code_Set() const{
    return m_region_code_isSet;
}

bool OAIPostalAddress::is_region_code_Valid() const{
    return m_region_code_isValid;
}

qint32 OAIPostalAddress::getRevision() const {
    return m_revision;
}
void OAIPostalAddress::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIPostalAddress::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIPostalAddress::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIPostalAddress::getSortingCode() const {
    return m_sorting_code;
}
void OAIPostalAddress::setSortingCode(const QString &sorting_code) {
    m_sorting_code = sorting_code;
    m_sorting_code_isSet = true;
}

bool OAIPostalAddress::is_sorting_code_Set() const{
    return m_sorting_code_isSet;
}

bool OAIPostalAddress::is_sorting_code_Valid() const{
    return m_sorting_code_isValid;
}

QString OAIPostalAddress::getSublocality() const {
    return m_sublocality;
}
void OAIPostalAddress::setSublocality(const QString &sublocality) {
    m_sublocality = sublocality;
    m_sublocality_isSet = true;
}

bool OAIPostalAddress::is_sublocality_Set() const{
    return m_sublocality_isSet;
}

bool OAIPostalAddress::is_sublocality_Valid() const{
    return m_sublocality_isValid;
}

bool OAIPostalAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_administrative_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sorting_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sublocality_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostalAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
