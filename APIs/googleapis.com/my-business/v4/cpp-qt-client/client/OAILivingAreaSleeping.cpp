/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILivingAreaSleeping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILivingAreaSleeping::OAILivingAreaSleeping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILivingAreaSleeping::OAILivingAreaSleeping() {
    this->initializeModel();
}

OAILivingAreaSleeping::~OAILivingAreaSleeping() {}

void OAILivingAreaSleeping::initializeModel() {

    m_beds_count_isSet = false;
    m_beds_count_isValid = false;

    m_beds_count_exception_isSet = false;
    m_beds_count_exception_isValid = false;

    m_bunk_beds_count_isSet = false;
    m_bunk_beds_count_isValid = false;

    m_bunk_beds_count_exception_isSet = false;
    m_bunk_beds_count_exception_isValid = false;

    m_cribs_count_isSet = false;
    m_cribs_count_isValid = false;

    m_cribs_count_exception_isSet = false;
    m_cribs_count_exception_isValid = false;

    m_double_beds_count_isSet = false;
    m_double_beds_count_isValid = false;

    m_double_beds_count_exception_isSet = false;
    m_double_beds_count_exception_isValid = false;

    m_feather_pillows_isSet = false;
    m_feather_pillows_isValid = false;

    m_feather_pillows_exception_isSet = false;
    m_feather_pillows_exception_isValid = false;

    m_hypoallergenic_bedding_isSet = false;
    m_hypoallergenic_bedding_isValid = false;

    m_hypoallergenic_bedding_exception_isSet = false;
    m_hypoallergenic_bedding_exception_isValid = false;

    m_king_beds_count_isSet = false;
    m_king_beds_count_isValid = false;

    m_king_beds_count_exception_isSet = false;
    m_king_beds_count_exception_isValid = false;

    m_memory_foam_pillows_isSet = false;
    m_memory_foam_pillows_isValid = false;

    m_memory_foam_pillows_exception_isSet = false;
    m_memory_foam_pillows_exception_isValid = false;

    m_other_beds_count_isSet = false;
    m_other_beds_count_isValid = false;

    m_other_beds_count_exception_isSet = false;
    m_other_beds_count_exception_isValid = false;

    m_queen_beds_count_isSet = false;
    m_queen_beds_count_isValid = false;

    m_queen_beds_count_exception_isSet = false;
    m_queen_beds_count_exception_isValid = false;

    m_roll_away_beds_count_isSet = false;
    m_roll_away_beds_count_isValid = false;

    m_roll_away_beds_count_exception_isSet = false;
    m_roll_away_beds_count_exception_isValid = false;

    m_single_or_twin_beds_count_isSet = false;
    m_single_or_twin_beds_count_isValid = false;

    m_single_or_twin_beds_count_exception_isSet = false;
    m_single_or_twin_beds_count_exception_isValid = false;

    m_sofa_beds_count_isSet = false;
    m_sofa_beds_count_isValid = false;

    m_sofa_beds_count_exception_isSet = false;
    m_sofa_beds_count_exception_isValid = false;

    m_synthetic_pillows_isSet = false;
    m_synthetic_pillows_isValid = false;

    m_synthetic_pillows_exception_isSet = false;
    m_synthetic_pillows_exception_isValid = false;
}

void OAILivingAreaSleeping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILivingAreaSleeping::fromJsonObject(QJsonObject json) {

    m_beds_count_isValid = ::OpenAPI::fromJsonValue(m_beds_count, json[QString("bedsCount")]);
    m_beds_count_isSet = !json[QString("bedsCount")].isNull() && m_beds_count_isValid;

    m_beds_count_exception_isValid = ::OpenAPI::fromJsonValue(m_beds_count_exception, json[QString("bedsCountException")]);
    m_beds_count_exception_isSet = !json[QString("bedsCountException")].isNull() && m_beds_count_exception_isValid;

    m_bunk_beds_count_isValid = ::OpenAPI::fromJsonValue(m_bunk_beds_count, json[QString("bunkBedsCount")]);
    m_bunk_beds_count_isSet = !json[QString("bunkBedsCount")].isNull() && m_bunk_beds_count_isValid;

    m_bunk_beds_count_exception_isValid = ::OpenAPI::fromJsonValue(m_bunk_beds_count_exception, json[QString("bunkBedsCountException")]);
    m_bunk_beds_count_exception_isSet = !json[QString("bunkBedsCountException")].isNull() && m_bunk_beds_count_exception_isValid;

    m_cribs_count_isValid = ::OpenAPI::fromJsonValue(m_cribs_count, json[QString("cribsCount")]);
    m_cribs_count_isSet = !json[QString("cribsCount")].isNull() && m_cribs_count_isValid;

    m_cribs_count_exception_isValid = ::OpenAPI::fromJsonValue(m_cribs_count_exception, json[QString("cribsCountException")]);
    m_cribs_count_exception_isSet = !json[QString("cribsCountException")].isNull() && m_cribs_count_exception_isValid;

    m_double_beds_count_isValid = ::OpenAPI::fromJsonValue(m_double_beds_count, json[QString("doubleBedsCount")]);
    m_double_beds_count_isSet = !json[QString("doubleBedsCount")].isNull() && m_double_beds_count_isValid;

    m_double_beds_count_exception_isValid = ::OpenAPI::fromJsonValue(m_double_beds_count_exception, json[QString("doubleBedsCountException")]);
    m_double_beds_count_exception_isSet = !json[QString("doubleBedsCountException")].isNull() && m_double_beds_count_exception_isValid;

    m_feather_pillows_isValid = ::OpenAPI::fromJsonValue(m_feather_pillows, json[QString("featherPillows")]);
    m_feather_pillows_isSet = !json[QString("featherPillows")].isNull() && m_feather_pillows_isValid;

    m_feather_pillows_exception_isValid = ::OpenAPI::fromJsonValue(m_feather_pillows_exception, json[QString("featherPillowsException")]);
    m_feather_pillows_exception_isSet = !json[QString("featherPillowsException")].isNull() && m_feather_pillows_exception_isValid;

    m_hypoallergenic_bedding_isValid = ::OpenAPI::fromJsonValue(m_hypoallergenic_bedding, json[QString("hypoallergenicBedding")]);
    m_hypoallergenic_bedding_isSet = !json[QString("hypoallergenicBedding")].isNull() && m_hypoallergenic_bedding_isValid;

    m_hypoallergenic_bedding_exception_isValid = ::OpenAPI::fromJsonValue(m_hypoallergenic_bedding_exception, json[QString("hypoallergenicBeddingException")]);
    m_hypoallergenic_bedding_exception_isSet = !json[QString("hypoallergenicBeddingException")].isNull() && m_hypoallergenic_bedding_exception_isValid;

    m_king_beds_count_isValid = ::OpenAPI::fromJsonValue(m_king_beds_count, json[QString("kingBedsCount")]);
    m_king_beds_count_isSet = !json[QString("kingBedsCount")].isNull() && m_king_beds_count_isValid;

    m_king_beds_count_exception_isValid = ::OpenAPI::fromJsonValue(m_king_beds_count_exception, json[QString("kingBedsCountException")]);
    m_king_beds_count_exception_isSet = !json[QString("kingBedsCountException")].isNull() && m_king_beds_count_exception_isValid;

    m_memory_foam_pillows_isValid = ::OpenAPI::fromJsonValue(m_memory_foam_pillows, json[QString("memoryFoamPillows")]);
    m_memory_foam_pillows_isSet = !json[QString("memoryFoamPillows")].isNull() && m_memory_foam_pillows_isValid;

    m_memory_foam_pillows_exception_isValid = ::OpenAPI::fromJsonValue(m_memory_foam_pillows_exception, json[QString("memoryFoamPillowsException")]);
    m_memory_foam_pillows_exception_isSet = !json[QString("memoryFoamPillowsException")].isNull() && m_memory_foam_pillows_exception_isValid;

    m_other_beds_count_isValid = ::OpenAPI::fromJsonValue(m_other_beds_count, json[QString("otherBedsCount")]);
    m_other_beds_count_isSet = !json[QString("otherBedsCount")].isNull() && m_other_beds_count_isValid;

    m_other_beds_count_exception_isValid = ::OpenAPI::fromJsonValue(m_other_beds_count_exception, json[QString("otherBedsCountException")]);
    m_other_beds_count_exception_isSet = !json[QString("otherBedsCountException")].isNull() && m_other_beds_count_exception_isValid;

    m_queen_beds_count_isValid = ::OpenAPI::fromJsonValue(m_queen_beds_count, json[QString("queenBedsCount")]);
    m_queen_beds_count_isSet = !json[QString("queenBedsCount")].isNull() && m_queen_beds_count_isValid;

    m_queen_beds_count_exception_isValid = ::OpenAPI::fromJsonValue(m_queen_beds_count_exception, json[QString("queenBedsCountException")]);
    m_queen_beds_count_exception_isSet = !json[QString("queenBedsCountException")].isNull() && m_queen_beds_count_exception_isValid;

    m_roll_away_beds_count_isValid = ::OpenAPI::fromJsonValue(m_roll_away_beds_count, json[QString("rollAwayBedsCount")]);
    m_roll_away_beds_count_isSet = !json[QString("rollAwayBedsCount")].isNull() && m_roll_away_beds_count_isValid;

    m_roll_away_beds_count_exception_isValid = ::OpenAPI::fromJsonValue(m_roll_away_beds_count_exception, json[QString("rollAwayBedsCountException")]);
    m_roll_away_beds_count_exception_isSet = !json[QString("rollAwayBedsCountException")].isNull() && m_roll_away_beds_count_exception_isValid;

    m_single_or_twin_beds_count_isValid = ::OpenAPI::fromJsonValue(m_single_or_twin_beds_count, json[QString("singleOrTwinBedsCount")]);
    m_single_or_twin_beds_count_isSet = !json[QString("singleOrTwinBedsCount")].isNull() && m_single_or_twin_beds_count_isValid;

    m_single_or_twin_beds_count_exception_isValid = ::OpenAPI::fromJsonValue(m_single_or_twin_beds_count_exception, json[QString("singleOrTwinBedsCountException")]);
    m_single_or_twin_beds_count_exception_isSet = !json[QString("singleOrTwinBedsCountException")].isNull() && m_single_or_twin_beds_count_exception_isValid;

    m_sofa_beds_count_isValid = ::OpenAPI::fromJsonValue(m_sofa_beds_count, json[QString("sofaBedsCount")]);
    m_sofa_beds_count_isSet = !json[QString("sofaBedsCount")].isNull() && m_sofa_beds_count_isValid;

    m_sofa_beds_count_exception_isValid = ::OpenAPI::fromJsonValue(m_sofa_beds_count_exception, json[QString("sofaBedsCountException")]);
    m_sofa_beds_count_exception_isSet = !json[QString("sofaBedsCountException")].isNull() && m_sofa_beds_count_exception_isValid;

    m_synthetic_pillows_isValid = ::OpenAPI::fromJsonValue(m_synthetic_pillows, json[QString("syntheticPillows")]);
    m_synthetic_pillows_isSet = !json[QString("syntheticPillows")].isNull() && m_synthetic_pillows_isValid;

    m_synthetic_pillows_exception_isValid = ::OpenAPI::fromJsonValue(m_synthetic_pillows_exception, json[QString("syntheticPillowsException")]);
    m_synthetic_pillows_exception_isSet = !json[QString("syntheticPillowsException")].isNull() && m_synthetic_pillows_exception_isValid;
}

QString OAILivingAreaSleeping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILivingAreaSleeping::asJsonObject() const {
    QJsonObject obj;
    if (m_beds_count_isSet) {
        obj.insert(QString("bedsCount"), ::OpenAPI::toJsonValue(m_beds_count));
    }
    if (m_beds_count_exception_isSet) {
        obj.insert(QString("bedsCountException"), ::OpenAPI::toJsonValue(m_beds_count_exception));
    }
    if (m_bunk_beds_count_isSet) {
        obj.insert(QString("bunkBedsCount"), ::OpenAPI::toJsonValue(m_bunk_beds_count));
    }
    if (m_bunk_beds_count_exception_isSet) {
        obj.insert(QString("bunkBedsCountException"), ::OpenAPI::toJsonValue(m_bunk_beds_count_exception));
    }
    if (m_cribs_count_isSet) {
        obj.insert(QString("cribsCount"), ::OpenAPI::toJsonValue(m_cribs_count));
    }
    if (m_cribs_count_exception_isSet) {
        obj.insert(QString("cribsCountException"), ::OpenAPI::toJsonValue(m_cribs_count_exception));
    }
    if (m_double_beds_count_isSet) {
        obj.insert(QString("doubleBedsCount"), ::OpenAPI::toJsonValue(m_double_beds_count));
    }
    if (m_double_beds_count_exception_isSet) {
        obj.insert(QString("doubleBedsCountException"), ::OpenAPI::toJsonValue(m_double_beds_count_exception));
    }
    if (m_feather_pillows_isSet) {
        obj.insert(QString("featherPillows"), ::OpenAPI::toJsonValue(m_feather_pillows));
    }
    if (m_feather_pillows_exception_isSet) {
        obj.insert(QString("featherPillowsException"), ::OpenAPI::toJsonValue(m_feather_pillows_exception));
    }
    if (m_hypoallergenic_bedding_isSet) {
        obj.insert(QString("hypoallergenicBedding"), ::OpenAPI::toJsonValue(m_hypoallergenic_bedding));
    }
    if (m_hypoallergenic_bedding_exception_isSet) {
        obj.insert(QString("hypoallergenicBeddingException"), ::OpenAPI::toJsonValue(m_hypoallergenic_bedding_exception));
    }
    if (m_king_beds_count_isSet) {
        obj.insert(QString("kingBedsCount"), ::OpenAPI::toJsonValue(m_king_beds_count));
    }
    if (m_king_beds_count_exception_isSet) {
        obj.insert(QString("kingBedsCountException"), ::OpenAPI::toJsonValue(m_king_beds_count_exception));
    }
    if (m_memory_foam_pillows_isSet) {
        obj.insert(QString("memoryFoamPillows"), ::OpenAPI::toJsonValue(m_memory_foam_pillows));
    }
    if (m_memory_foam_pillows_exception_isSet) {
        obj.insert(QString("memoryFoamPillowsException"), ::OpenAPI::toJsonValue(m_memory_foam_pillows_exception));
    }
    if (m_other_beds_count_isSet) {
        obj.insert(QString("otherBedsCount"), ::OpenAPI::toJsonValue(m_other_beds_count));
    }
    if (m_other_beds_count_exception_isSet) {
        obj.insert(QString("otherBedsCountException"), ::OpenAPI::toJsonValue(m_other_beds_count_exception));
    }
    if (m_queen_beds_count_isSet) {
        obj.insert(QString("queenBedsCount"), ::OpenAPI::toJsonValue(m_queen_beds_count));
    }
    if (m_queen_beds_count_exception_isSet) {
        obj.insert(QString("queenBedsCountException"), ::OpenAPI::toJsonValue(m_queen_beds_count_exception));
    }
    if (m_roll_away_beds_count_isSet) {
        obj.insert(QString("rollAwayBedsCount"), ::OpenAPI::toJsonValue(m_roll_away_beds_count));
    }
    if (m_roll_away_beds_count_exception_isSet) {
        obj.insert(QString("rollAwayBedsCountException"), ::OpenAPI::toJsonValue(m_roll_away_beds_count_exception));
    }
    if (m_single_or_twin_beds_count_isSet) {
        obj.insert(QString("singleOrTwinBedsCount"), ::OpenAPI::toJsonValue(m_single_or_twin_beds_count));
    }
    if (m_single_or_twin_beds_count_exception_isSet) {
        obj.insert(QString("singleOrTwinBedsCountException"), ::OpenAPI::toJsonValue(m_single_or_twin_beds_count_exception));
    }
    if (m_sofa_beds_count_isSet) {
        obj.insert(QString("sofaBedsCount"), ::OpenAPI::toJsonValue(m_sofa_beds_count));
    }
    if (m_sofa_beds_count_exception_isSet) {
        obj.insert(QString("sofaBedsCountException"), ::OpenAPI::toJsonValue(m_sofa_beds_count_exception));
    }
    if (m_synthetic_pillows_isSet) {
        obj.insert(QString("syntheticPillows"), ::OpenAPI::toJsonValue(m_synthetic_pillows));
    }
    if (m_synthetic_pillows_exception_isSet) {
        obj.insert(QString("syntheticPillowsException"), ::OpenAPI::toJsonValue(m_synthetic_pillows_exception));
    }
    return obj;
}

qint32 OAILivingAreaSleeping::getBedsCount() const {
    return m_beds_count;
}
void OAILivingAreaSleeping::setBedsCount(const qint32 &beds_count) {
    m_beds_count = beds_count;
    m_beds_count_isSet = true;
}

bool OAILivingAreaSleeping::is_beds_count_Set() const{
    return m_beds_count_isSet;
}

bool OAILivingAreaSleeping::is_beds_count_Valid() const{
    return m_beds_count_isValid;
}

QString OAILivingAreaSleeping::getBedsCountException() const {
    return m_beds_count_exception;
}
void OAILivingAreaSleeping::setBedsCountException(const QString &beds_count_exception) {
    m_beds_count_exception = beds_count_exception;
    m_beds_count_exception_isSet = true;
}

bool OAILivingAreaSleeping::is_beds_count_exception_Set() const{
    return m_beds_count_exception_isSet;
}

bool OAILivingAreaSleeping::is_beds_count_exception_Valid() const{
    return m_beds_count_exception_isValid;
}

qint32 OAILivingAreaSleeping::getBunkBedsCount() const {
    return m_bunk_beds_count;
}
void OAILivingAreaSleeping::setBunkBedsCount(const qint32 &bunk_beds_count) {
    m_bunk_beds_count = bunk_beds_count;
    m_bunk_beds_count_isSet = true;
}

bool OAILivingAreaSleeping::is_bunk_beds_count_Set() const{
    return m_bunk_beds_count_isSet;
}

bool OAILivingAreaSleeping::is_bunk_beds_count_Valid() const{
    return m_bunk_beds_count_isValid;
}

QString OAILivingAreaSleeping::getBunkBedsCountException() const {
    return m_bunk_beds_count_exception;
}
void OAILivingAreaSleeping::setBunkBedsCountException(const QString &bunk_beds_count_exception) {
    m_bunk_beds_count_exception = bunk_beds_count_exception;
    m_bunk_beds_count_exception_isSet = true;
}

bool OAILivingAreaSleeping::is_bunk_beds_count_exception_Set() const{
    return m_bunk_beds_count_exception_isSet;
}

bool OAILivingAreaSleeping::is_bunk_beds_count_exception_Valid() const{
    return m_bunk_beds_count_exception_isValid;
}

qint32 OAILivingAreaSleeping::getCribsCount() const {
    return m_cribs_count;
}
void OAILivingAreaSleeping::setCribsCount(const qint32 &cribs_count) {
    m_cribs_count = cribs_count;
    m_cribs_count_isSet = true;
}

bool OAILivingAreaSleeping::is_cribs_count_Set() const{
    return m_cribs_count_isSet;
}

bool OAILivingAreaSleeping::is_cribs_count_Valid() const{
    return m_cribs_count_isValid;
}

QString OAILivingAreaSleeping::getCribsCountException() const {
    return m_cribs_count_exception;
}
void OAILivingAreaSleeping::setCribsCountException(const QString &cribs_count_exception) {
    m_cribs_count_exception = cribs_count_exception;
    m_cribs_count_exception_isSet = true;
}

bool OAILivingAreaSleeping::is_cribs_count_exception_Set() const{
    return m_cribs_count_exception_isSet;
}

bool OAILivingAreaSleeping::is_cribs_count_exception_Valid() const{
    return m_cribs_count_exception_isValid;
}

qint32 OAILivingAreaSleeping::getDoubleBedsCount() const {
    return m_double_beds_count;
}
void OAILivingAreaSleeping::setDoubleBedsCount(const qint32 &double_beds_count) {
    m_double_beds_count = double_beds_count;
    m_double_beds_count_isSet = true;
}

bool OAILivingAreaSleeping::is_double_beds_count_Set() const{
    return m_double_beds_count_isSet;
}

bool OAILivingAreaSleeping::is_double_beds_count_Valid() const{
    return m_double_beds_count_isValid;
}

QString OAILivingAreaSleeping::getDoubleBedsCountException() const {
    return m_double_beds_count_exception;
}
void OAILivingAreaSleeping::setDoubleBedsCountException(const QString &double_beds_count_exception) {
    m_double_beds_count_exception = double_beds_count_exception;
    m_double_beds_count_exception_isSet = true;
}

bool OAILivingAreaSleeping::is_double_beds_count_exception_Set() const{
    return m_double_beds_count_exception_isSet;
}

bool OAILivingAreaSleeping::is_double_beds_count_exception_Valid() const{
    return m_double_beds_count_exception_isValid;
}

bool OAILivingAreaSleeping::isFeatherPillows() const {
    return m_feather_pillows;
}
void OAILivingAreaSleeping::setFeatherPillows(const bool &feather_pillows) {
    m_feather_pillows = feather_pillows;
    m_feather_pillows_isSet = true;
}

bool OAILivingAreaSleeping::is_feather_pillows_Set() const{
    return m_feather_pillows_isSet;
}

bool OAILivingAreaSleeping::is_feather_pillows_Valid() const{
    return m_feather_pillows_isValid;
}

QString OAILivingAreaSleeping::getFeatherPillowsException() const {
    return m_feather_pillows_exception;
}
void OAILivingAreaSleeping::setFeatherPillowsException(const QString &feather_pillows_exception) {
    m_feather_pillows_exception = feather_pillows_exception;
    m_feather_pillows_exception_isSet = true;
}

bool OAILivingAreaSleeping::is_feather_pillows_exception_Set() const{
    return m_feather_pillows_exception_isSet;
}

bool OAILivingAreaSleeping::is_feather_pillows_exception_Valid() const{
    return m_feather_pillows_exception_isValid;
}

bool OAILivingAreaSleeping::isHypoallergenicBedding() const {
    return m_hypoallergenic_bedding;
}
void OAILivingAreaSleeping::setHypoallergenicBedding(const bool &hypoallergenic_bedding) {
    m_hypoallergenic_bedding = hypoallergenic_bedding;
    m_hypoallergenic_bedding_isSet = true;
}

bool OAILivingAreaSleeping::is_hypoallergenic_bedding_Set() const{
    return m_hypoallergenic_bedding_isSet;
}

bool OAILivingAreaSleeping::is_hypoallergenic_bedding_Valid() const{
    return m_hypoallergenic_bedding_isValid;
}

QString OAILivingAreaSleeping::getHypoallergenicBeddingException() const {
    return m_hypoallergenic_bedding_exception;
}
void OAILivingAreaSleeping::setHypoallergenicBeddingException(const QString &hypoallergenic_bedding_exception) {
    m_hypoallergenic_bedding_exception = hypoallergenic_bedding_exception;
    m_hypoallergenic_bedding_exception_isSet = true;
}

bool OAILivingAreaSleeping::is_hypoallergenic_bedding_exception_Set() const{
    return m_hypoallergenic_bedding_exception_isSet;
}

bool OAILivingAreaSleeping::is_hypoallergenic_bedding_exception_Valid() const{
    return m_hypoallergenic_bedding_exception_isValid;
}

qint32 OAILivingAreaSleeping::getKingBedsCount() const {
    return m_king_beds_count;
}
void OAILivingAreaSleeping::setKingBedsCount(const qint32 &king_beds_count) {
    m_king_beds_count = king_beds_count;
    m_king_beds_count_isSet = true;
}

bool OAILivingAreaSleeping::is_king_beds_count_Set() const{
    return m_king_beds_count_isSet;
}

bool OAILivingAreaSleeping::is_king_beds_count_Valid() const{
    return m_king_beds_count_isValid;
}

QString OAILivingAreaSleeping::getKingBedsCountException() const {
    return m_king_beds_count_exception;
}
void OAILivingAreaSleeping::setKingBedsCountException(const QString &king_beds_count_exception) {
    m_king_beds_count_exception = king_beds_count_exception;
    m_king_beds_count_exception_isSet = true;
}

bool OAILivingAreaSleeping::is_king_beds_count_exception_Set() const{
    return m_king_beds_count_exception_isSet;
}

bool OAILivingAreaSleeping::is_king_beds_count_exception_Valid() const{
    return m_king_beds_count_exception_isValid;
}

bool OAILivingAreaSleeping::isMemoryFoamPillows() const {
    return m_memory_foam_pillows;
}
void OAILivingAreaSleeping::setMemoryFoamPillows(const bool &memory_foam_pillows) {
    m_memory_foam_pillows = memory_foam_pillows;
    m_memory_foam_pillows_isSet = true;
}

bool OAILivingAreaSleeping::is_memory_foam_pillows_Set() const{
    return m_memory_foam_pillows_isSet;
}

bool OAILivingAreaSleeping::is_memory_foam_pillows_Valid() const{
    return m_memory_foam_pillows_isValid;
}

QString OAILivingAreaSleeping::getMemoryFoamPillowsException() const {
    return m_memory_foam_pillows_exception;
}
void OAILivingAreaSleeping::setMemoryFoamPillowsException(const QString &memory_foam_pillows_exception) {
    m_memory_foam_pillows_exception = memory_foam_pillows_exception;
    m_memory_foam_pillows_exception_isSet = true;
}

bool OAILivingAreaSleeping::is_memory_foam_pillows_exception_Set() const{
    return m_memory_foam_pillows_exception_isSet;
}

bool OAILivingAreaSleeping::is_memory_foam_pillows_exception_Valid() const{
    return m_memory_foam_pillows_exception_isValid;
}

qint32 OAILivingAreaSleeping::getOtherBedsCount() const {
    return m_other_beds_count;
}
void OAILivingAreaSleeping::setOtherBedsCount(const qint32 &other_beds_count) {
    m_other_beds_count = other_beds_count;
    m_other_beds_count_isSet = true;
}

bool OAILivingAreaSleeping::is_other_beds_count_Set() const{
    return m_other_beds_count_isSet;
}

bool OAILivingAreaSleeping::is_other_beds_count_Valid() const{
    return m_other_beds_count_isValid;
}

QString OAILivingAreaSleeping::getOtherBedsCountException() const {
    return m_other_beds_count_exception;
}
void OAILivingAreaSleeping::setOtherBedsCountException(const QString &other_beds_count_exception) {
    m_other_beds_count_exception = other_beds_count_exception;
    m_other_beds_count_exception_isSet = true;
}

bool OAILivingAreaSleeping::is_other_beds_count_exception_Set() const{
    return m_other_beds_count_exception_isSet;
}

bool OAILivingAreaSleeping::is_other_beds_count_exception_Valid() const{
    return m_other_beds_count_exception_isValid;
}

qint32 OAILivingAreaSleeping::getQueenBedsCount() const {
    return m_queen_beds_count;
}
void OAILivingAreaSleeping::setQueenBedsCount(const qint32 &queen_beds_count) {
    m_queen_beds_count = queen_beds_count;
    m_queen_beds_count_isSet = true;
}

bool OAILivingAreaSleeping::is_queen_beds_count_Set() const{
    return m_queen_beds_count_isSet;
}

bool OAILivingAreaSleeping::is_queen_beds_count_Valid() const{
    return m_queen_beds_count_isValid;
}

QString OAILivingAreaSleeping::getQueenBedsCountException() const {
    return m_queen_beds_count_exception;
}
void OAILivingAreaSleeping::setQueenBedsCountException(const QString &queen_beds_count_exception) {
    m_queen_beds_count_exception = queen_beds_count_exception;
    m_queen_beds_count_exception_isSet = true;
}

bool OAILivingAreaSleeping::is_queen_beds_count_exception_Set() const{
    return m_queen_beds_count_exception_isSet;
}

bool OAILivingAreaSleeping::is_queen_beds_count_exception_Valid() const{
    return m_queen_beds_count_exception_isValid;
}

qint32 OAILivingAreaSleeping::getRollAwayBedsCount() const {
    return m_roll_away_beds_count;
}
void OAILivingAreaSleeping::setRollAwayBedsCount(const qint32 &roll_away_beds_count) {
    m_roll_away_beds_count = roll_away_beds_count;
    m_roll_away_beds_count_isSet = true;
}

bool OAILivingAreaSleeping::is_roll_away_beds_count_Set() const{
    return m_roll_away_beds_count_isSet;
}

bool OAILivingAreaSleeping::is_roll_away_beds_count_Valid() const{
    return m_roll_away_beds_count_isValid;
}

QString OAILivingAreaSleeping::getRollAwayBedsCountException() const {
    return m_roll_away_beds_count_exception;
}
void OAILivingAreaSleeping::setRollAwayBedsCountException(const QString &roll_away_beds_count_exception) {
    m_roll_away_beds_count_exception = roll_away_beds_count_exception;
    m_roll_away_beds_count_exception_isSet = true;
}

bool OAILivingAreaSleeping::is_roll_away_beds_count_exception_Set() const{
    return m_roll_away_beds_count_exception_isSet;
}

bool OAILivingAreaSleeping::is_roll_away_beds_count_exception_Valid() const{
    return m_roll_away_beds_count_exception_isValid;
}

qint32 OAILivingAreaSleeping::getSingleOrTwinBedsCount() const {
    return m_single_or_twin_beds_count;
}
void OAILivingAreaSleeping::setSingleOrTwinBedsCount(const qint32 &single_or_twin_beds_count) {
    m_single_or_twin_beds_count = single_or_twin_beds_count;
    m_single_or_twin_beds_count_isSet = true;
}

bool OAILivingAreaSleeping::is_single_or_twin_beds_count_Set() const{
    return m_single_or_twin_beds_count_isSet;
}

bool OAILivingAreaSleeping::is_single_or_twin_beds_count_Valid() const{
    return m_single_or_twin_beds_count_isValid;
}

QString OAILivingAreaSleeping::getSingleOrTwinBedsCountException() const {
    return m_single_or_twin_beds_count_exception;
}
void OAILivingAreaSleeping::setSingleOrTwinBedsCountException(const QString &single_or_twin_beds_count_exception) {
    m_single_or_twin_beds_count_exception = single_or_twin_beds_count_exception;
    m_single_or_twin_beds_count_exception_isSet = true;
}

bool OAILivingAreaSleeping::is_single_or_twin_beds_count_exception_Set() const{
    return m_single_or_twin_beds_count_exception_isSet;
}

bool OAILivingAreaSleeping::is_single_or_twin_beds_count_exception_Valid() const{
    return m_single_or_twin_beds_count_exception_isValid;
}

qint32 OAILivingAreaSleeping::getSofaBedsCount() const {
    return m_sofa_beds_count;
}
void OAILivingAreaSleeping::setSofaBedsCount(const qint32 &sofa_beds_count) {
    m_sofa_beds_count = sofa_beds_count;
    m_sofa_beds_count_isSet = true;
}

bool OAILivingAreaSleeping::is_sofa_beds_count_Set() const{
    return m_sofa_beds_count_isSet;
}

bool OAILivingAreaSleeping::is_sofa_beds_count_Valid() const{
    return m_sofa_beds_count_isValid;
}

QString OAILivingAreaSleeping::getSofaBedsCountException() const {
    return m_sofa_beds_count_exception;
}
void OAILivingAreaSleeping::setSofaBedsCountException(const QString &sofa_beds_count_exception) {
    m_sofa_beds_count_exception = sofa_beds_count_exception;
    m_sofa_beds_count_exception_isSet = true;
}

bool OAILivingAreaSleeping::is_sofa_beds_count_exception_Set() const{
    return m_sofa_beds_count_exception_isSet;
}

bool OAILivingAreaSleeping::is_sofa_beds_count_exception_Valid() const{
    return m_sofa_beds_count_exception_isValid;
}

bool OAILivingAreaSleeping::isSyntheticPillows() const {
    return m_synthetic_pillows;
}
void OAILivingAreaSleeping::setSyntheticPillows(const bool &synthetic_pillows) {
    m_synthetic_pillows = synthetic_pillows;
    m_synthetic_pillows_isSet = true;
}

bool OAILivingAreaSleeping::is_synthetic_pillows_Set() const{
    return m_synthetic_pillows_isSet;
}

bool OAILivingAreaSleeping::is_synthetic_pillows_Valid() const{
    return m_synthetic_pillows_isValid;
}

QString OAILivingAreaSleeping::getSyntheticPillowsException() const {
    return m_synthetic_pillows_exception;
}
void OAILivingAreaSleeping::setSyntheticPillowsException(const QString &synthetic_pillows_exception) {
    m_synthetic_pillows_exception = synthetic_pillows_exception;
    m_synthetic_pillows_exception_isSet = true;
}

bool OAILivingAreaSleeping::is_synthetic_pillows_exception_Set() const{
    return m_synthetic_pillows_exception_isSet;
}

bool OAILivingAreaSleeping::is_synthetic_pillows_exception_Valid() const{
    return m_synthetic_pillows_exception_isValid;
}

bool OAILivingAreaSleeping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beds_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beds_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bunk_beds_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bunk_beds_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cribs_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cribs_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_beds_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_beds_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feather_pillows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feather_pillows_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hypoallergenic_bedding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hypoallergenic_bedding_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_king_beds_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_king_beds_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_foam_pillows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_foam_pillows_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_beds_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_beds_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queen_beds_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queen_beds_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roll_away_beds_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roll_away_beds_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_or_twin_beds_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_or_twin_beds_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sofa_beds_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sofa_beds_count_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synthetic_pillows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synthetic_pillows_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILivingAreaSleeping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
