/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParking.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParking::OAIParking(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParking::OAIParking() {
    this->initializeModel();
}

OAIParking::~OAIParking() {}

void OAIParking::initializeModel() {

    m_electric_car_charging_stations_isSet = false;
    m_electric_car_charging_stations_isValid = false;

    m_electric_car_charging_stations_exception_isSet = false;
    m_electric_car_charging_stations_exception_isValid = false;

    m_free_parking_isSet = false;
    m_free_parking_isValid = false;

    m_free_parking_exception_isSet = false;
    m_free_parking_exception_isValid = false;

    m_free_self_parking_isSet = false;
    m_free_self_parking_isValid = false;

    m_free_self_parking_exception_isSet = false;
    m_free_self_parking_exception_isValid = false;

    m_free_valet_parking_isSet = false;
    m_free_valet_parking_isValid = false;

    m_free_valet_parking_exception_isSet = false;
    m_free_valet_parking_exception_isValid = false;

    m_parking_available_isSet = false;
    m_parking_available_isValid = false;

    m_parking_available_exception_isSet = false;
    m_parking_available_exception_isValid = false;

    m_self_parking_available_isSet = false;
    m_self_parking_available_isValid = false;

    m_self_parking_available_exception_isSet = false;
    m_self_parking_available_exception_isValid = false;

    m_valet_parking_available_isSet = false;
    m_valet_parking_available_isValid = false;

    m_valet_parking_available_exception_isSet = false;
    m_valet_parking_available_exception_isValid = false;
}

void OAIParking::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParking::fromJsonObject(QJsonObject json) {

    m_electric_car_charging_stations_isValid = ::OpenAPI::fromJsonValue(m_electric_car_charging_stations, json[QString("electricCarChargingStations")]);
    m_electric_car_charging_stations_isSet = !json[QString("electricCarChargingStations")].isNull() && m_electric_car_charging_stations_isValid;

    m_electric_car_charging_stations_exception_isValid = ::OpenAPI::fromJsonValue(m_electric_car_charging_stations_exception, json[QString("electricCarChargingStationsException")]);
    m_electric_car_charging_stations_exception_isSet = !json[QString("electricCarChargingStationsException")].isNull() && m_electric_car_charging_stations_exception_isValid;

    m_free_parking_isValid = ::OpenAPI::fromJsonValue(m_free_parking, json[QString("freeParking")]);
    m_free_parking_isSet = !json[QString("freeParking")].isNull() && m_free_parking_isValid;

    m_free_parking_exception_isValid = ::OpenAPI::fromJsonValue(m_free_parking_exception, json[QString("freeParkingException")]);
    m_free_parking_exception_isSet = !json[QString("freeParkingException")].isNull() && m_free_parking_exception_isValid;

    m_free_self_parking_isValid = ::OpenAPI::fromJsonValue(m_free_self_parking, json[QString("freeSelfParking")]);
    m_free_self_parking_isSet = !json[QString("freeSelfParking")].isNull() && m_free_self_parking_isValid;

    m_free_self_parking_exception_isValid = ::OpenAPI::fromJsonValue(m_free_self_parking_exception, json[QString("freeSelfParkingException")]);
    m_free_self_parking_exception_isSet = !json[QString("freeSelfParkingException")].isNull() && m_free_self_parking_exception_isValid;

    m_free_valet_parking_isValid = ::OpenAPI::fromJsonValue(m_free_valet_parking, json[QString("freeValetParking")]);
    m_free_valet_parking_isSet = !json[QString("freeValetParking")].isNull() && m_free_valet_parking_isValid;

    m_free_valet_parking_exception_isValid = ::OpenAPI::fromJsonValue(m_free_valet_parking_exception, json[QString("freeValetParkingException")]);
    m_free_valet_parking_exception_isSet = !json[QString("freeValetParkingException")].isNull() && m_free_valet_parking_exception_isValid;

    m_parking_available_isValid = ::OpenAPI::fromJsonValue(m_parking_available, json[QString("parkingAvailable")]);
    m_parking_available_isSet = !json[QString("parkingAvailable")].isNull() && m_parking_available_isValid;

    m_parking_available_exception_isValid = ::OpenAPI::fromJsonValue(m_parking_available_exception, json[QString("parkingAvailableException")]);
    m_parking_available_exception_isSet = !json[QString("parkingAvailableException")].isNull() && m_parking_available_exception_isValid;

    m_self_parking_available_isValid = ::OpenAPI::fromJsonValue(m_self_parking_available, json[QString("selfParkingAvailable")]);
    m_self_parking_available_isSet = !json[QString("selfParkingAvailable")].isNull() && m_self_parking_available_isValid;

    m_self_parking_available_exception_isValid = ::OpenAPI::fromJsonValue(m_self_parking_available_exception, json[QString("selfParkingAvailableException")]);
    m_self_parking_available_exception_isSet = !json[QString("selfParkingAvailableException")].isNull() && m_self_parking_available_exception_isValid;

    m_valet_parking_available_isValid = ::OpenAPI::fromJsonValue(m_valet_parking_available, json[QString("valetParkingAvailable")]);
    m_valet_parking_available_isSet = !json[QString("valetParkingAvailable")].isNull() && m_valet_parking_available_isValid;

    m_valet_parking_available_exception_isValid = ::OpenAPI::fromJsonValue(m_valet_parking_available_exception, json[QString("valetParkingAvailableException")]);
    m_valet_parking_available_exception_isSet = !json[QString("valetParkingAvailableException")].isNull() && m_valet_parking_available_exception_isValid;
}

QString OAIParking::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParking::asJsonObject() const {
    QJsonObject obj;
    if (m_electric_car_charging_stations_isSet) {
        obj.insert(QString("electricCarChargingStations"), ::OpenAPI::toJsonValue(m_electric_car_charging_stations));
    }
    if (m_electric_car_charging_stations_exception_isSet) {
        obj.insert(QString("electricCarChargingStationsException"), ::OpenAPI::toJsonValue(m_electric_car_charging_stations_exception));
    }
    if (m_free_parking_isSet) {
        obj.insert(QString("freeParking"), ::OpenAPI::toJsonValue(m_free_parking));
    }
    if (m_free_parking_exception_isSet) {
        obj.insert(QString("freeParkingException"), ::OpenAPI::toJsonValue(m_free_parking_exception));
    }
    if (m_free_self_parking_isSet) {
        obj.insert(QString("freeSelfParking"), ::OpenAPI::toJsonValue(m_free_self_parking));
    }
    if (m_free_self_parking_exception_isSet) {
        obj.insert(QString("freeSelfParkingException"), ::OpenAPI::toJsonValue(m_free_self_parking_exception));
    }
    if (m_free_valet_parking_isSet) {
        obj.insert(QString("freeValetParking"), ::OpenAPI::toJsonValue(m_free_valet_parking));
    }
    if (m_free_valet_parking_exception_isSet) {
        obj.insert(QString("freeValetParkingException"), ::OpenAPI::toJsonValue(m_free_valet_parking_exception));
    }
    if (m_parking_available_isSet) {
        obj.insert(QString("parkingAvailable"), ::OpenAPI::toJsonValue(m_parking_available));
    }
    if (m_parking_available_exception_isSet) {
        obj.insert(QString("parkingAvailableException"), ::OpenAPI::toJsonValue(m_parking_available_exception));
    }
    if (m_self_parking_available_isSet) {
        obj.insert(QString("selfParkingAvailable"), ::OpenAPI::toJsonValue(m_self_parking_available));
    }
    if (m_self_parking_available_exception_isSet) {
        obj.insert(QString("selfParkingAvailableException"), ::OpenAPI::toJsonValue(m_self_parking_available_exception));
    }
    if (m_valet_parking_available_isSet) {
        obj.insert(QString("valetParkingAvailable"), ::OpenAPI::toJsonValue(m_valet_parking_available));
    }
    if (m_valet_parking_available_exception_isSet) {
        obj.insert(QString("valetParkingAvailableException"), ::OpenAPI::toJsonValue(m_valet_parking_available_exception));
    }
    return obj;
}

bool OAIParking::isElectricCarChargingStations() const {
    return m_electric_car_charging_stations;
}
void OAIParking::setElectricCarChargingStations(const bool &electric_car_charging_stations) {
    m_electric_car_charging_stations = electric_car_charging_stations;
    m_electric_car_charging_stations_isSet = true;
}

bool OAIParking::is_electric_car_charging_stations_Set() const{
    return m_electric_car_charging_stations_isSet;
}

bool OAIParking::is_electric_car_charging_stations_Valid() const{
    return m_electric_car_charging_stations_isValid;
}

QString OAIParking::getElectricCarChargingStationsException() const {
    return m_electric_car_charging_stations_exception;
}
void OAIParking::setElectricCarChargingStationsException(const QString &electric_car_charging_stations_exception) {
    m_electric_car_charging_stations_exception = electric_car_charging_stations_exception;
    m_electric_car_charging_stations_exception_isSet = true;
}

bool OAIParking::is_electric_car_charging_stations_exception_Set() const{
    return m_electric_car_charging_stations_exception_isSet;
}

bool OAIParking::is_electric_car_charging_stations_exception_Valid() const{
    return m_electric_car_charging_stations_exception_isValid;
}

bool OAIParking::isFreeParking() const {
    return m_free_parking;
}
void OAIParking::setFreeParking(const bool &free_parking) {
    m_free_parking = free_parking;
    m_free_parking_isSet = true;
}

bool OAIParking::is_free_parking_Set() const{
    return m_free_parking_isSet;
}

bool OAIParking::is_free_parking_Valid() const{
    return m_free_parking_isValid;
}

QString OAIParking::getFreeParkingException() const {
    return m_free_parking_exception;
}
void OAIParking::setFreeParkingException(const QString &free_parking_exception) {
    m_free_parking_exception = free_parking_exception;
    m_free_parking_exception_isSet = true;
}

bool OAIParking::is_free_parking_exception_Set() const{
    return m_free_parking_exception_isSet;
}

bool OAIParking::is_free_parking_exception_Valid() const{
    return m_free_parking_exception_isValid;
}

bool OAIParking::isFreeSelfParking() const {
    return m_free_self_parking;
}
void OAIParking::setFreeSelfParking(const bool &free_self_parking) {
    m_free_self_parking = free_self_parking;
    m_free_self_parking_isSet = true;
}

bool OAIParking::is_free_self_parking_Set() const{
    return m_free_self_parking_isSet;
}

bool OAIParking::is_free_self_parking_Valid() const{
    return m_free_self_parking_isValid;
}

QString OAIParking::getFreeSelfParkingException() const {
    return m_free_self_parking_exception;
}
void OAIParking::setFreeSelfParkingException(const QString &free_self_parking_exception) {
    m_free_self_parking_exception = free_self_parking_exception;
    m_free_self_parking_exception_isSet = true;
}

bool OAIParking::is_free_self_parking_exception_Set() const{
    return m_free_self_parking_exception_isSet;
}

bool OAIParking::is_free_self_parking_exception_Valid() const{
    return m_free_self_parking_exception_isValid;
}

bool OAIParking::isFreeValetParking() const {
    return m_free_valet_parking;
}
void OAIParking::setFreeValetParking(const bool &free_valet_parking) {
    m_free_valet_parking = free_valet_parking;
    m_free_valet_parking_isSet = true;
}

bool OAIParking::is_free_valet_parking_Set() const{
    return m_free_valet_parking_isSet;
}

bool OAIParking::is_free_valet_parking_Valid() const{
    return m_free_valet_parking_isValid;
}

QString OAIParking::getFreeValetParkingException() const {
    return m_free_valet_parking_exception;
}
void OAIParking::setFreeValetParkingException(const QString &free_valet_parking_exception) {
    m_free_valet_parking_exception = free_valet_parking_exception;
    m_free_valet_parking_exception_isSet = true;
}

bool OAIParking::is_free_valet_parking_exception_Set() const{
    return m_free_valet_parking_exception_isSet;
}

bool OAIParking::is_free_valet_parking_exception_Valid() const{
    return m_free_valet_parking_exception_isValid;
}

bool OAIParking::isParkingAvailable() const {
    return m_parking_available;
}
void OAIParking::setParkingAvailable(const bool &parking_available) {
    m_parking_available = parking_available;
    m_parking_available_isSet = true;
}

bool OAIParking::is_parking_available_Set() const{
    return m_parking_available_isSet;
}

bool OAIParking::is_parking_available_Valid() const{
    return m_parking_available_isValid;
}

QString OAIParking::getParkingAvailableException() const {
    return m_parking_available_exception;
}
void OAIParking::setParkingAvailableException(const QString &parking_available_exception) {
    m_parking_available_exception = parking_available_exception;
    m_parking_available_exception_isSet = true;
}

bool OAIParking::is_parking_available_exception_Set() const{
    return m_parking_available_exception_isSet;
}

bool OAIParking::is_parking_available_exception_Valid() const{
    return m_parking_available_exception_isValid;
}

bool OAIParking::isSelfParkingAvailable() const {
    return m_self_parking_available;
}
void OAIParking::setSelfParkingAvailable(const bool &self_parking_available) {
    m_self_parking_available = self_parking_available;
    m_self_parking_available_isSet = true;
}

bool OAIParking::is_self_parking_available_Set() const{
    return m_self_parking_available_isSet;
}

bool OAIParking::is_self_parking_available_Valid() const{
    return m_self_parking_available_isValid;
}

QString OAIParking::getSelfParkingAvailableException() const {
    return m_self_parking_available_exception;
}
void OAIParking::setSelfParkingAvailableException(const QString &self_parking_available_exception) {
    m_self_parking_available_exception = self_parking_available_exception;
    m_self_parking_available_exception_isSet = true;
}

bool OAIParking::is_self_parking_available_exception_Set() const{
    return m_self_parking_available_exception_isSet;
}

bool OAIParking::is_self_parking_available_exception_Valid() const{
    return m_self_parking_available_exception_isValid;
}

bool OAIParking::isValetParkingAvailable() const {
    return m_valet_parking_available;
}
void OAIParking::setValetParkingAvailable(const bool &valet_parking_available) {
    m_valet_parking_available = valet_parking_available;
    m_valet_parking_available_isSet = true;
}

bool OAIParking::is_valet_parking_available_Set() const{
    return m_valet_parking_available_isSet;
}

bool OAIParking::is_valet_parking_available_Valid() const{
    return m_valet_parking_available_isValid;
}

QString OAIParking::getValetParkingAvailableException() const {
    return m_valet_parking_available_exception;
}
void OAIParking::setValetParkingAvailableException(const QString &valet_parking_available_exception) {
    m_valet_parking_available_exception = valet_parking_available_exception;
    m_valet_parking_available_exception_isSet = true;
}

bool OAIParking::is_valet_parking_available_exception_Set() const{
    return m_valet_parking_available_exception_isSet;
}

bool OAIParking::is_valet_parking_available_exception_Valid() const{
    return m_valet_parking_available_exception_isValid;
}

bool OAIParking::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_electric_car_charging_stations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_electric_car_charging_stations_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_parking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_parking_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_self_parking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_self_parking_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_valet_parking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_valet_parking_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parking_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parking_available_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_parking_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_parking_available_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valet_parking_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valet_parking_available_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParking::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
