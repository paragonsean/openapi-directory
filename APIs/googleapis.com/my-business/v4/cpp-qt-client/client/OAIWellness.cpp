/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWellness.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWellness::OAIWellness(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWellness::OAIWellness() {
    this->initializeModel();
}

OAIWellness::~OAIWellness() {}

void OAIWellness::initializeModel() {

    m_doctor_on_call_isSet = false;
    m_doctor_on_call_isValid = false;

    m_doctor_on_call_exception_isSet = false;
    m_doctor_on_call_exception_isValid = false;

    m_elliptical_machine_isSet = false;
    m_elliptical_machine_isValid = false;

    m_elliptical_machine_exception_isSet = false;
    m_elliptical_machine_exception_isValid = false;

    m_fitness_center_isSet = false;
    m_fitness_center_isValid = false;

    m_fitness_center_exception_isSet = false;
    m_fitness_center_exception_isValid = false;

    m_free_fitness_center_isSet = false;
    m_free_fitness_center_isValid = false;

    m_free_fitness_center_exception_isSet = false;
    m_free_fitness_center_exception_isValid = false;

    m_free_weights_isSet = false;
    m_free_weights_isValid = false;

    m_free_weights_exception_isSet = false;
    m_free_weights_exception_isValid = false;

    m_massage_isSet = false;
    m_massage_isValid = false;

    m_massage_exception_isSet = false;
    m_massage_exception_isValid = false;

    m_salon_isSet = false;
    m_salon_isValid = false;

    m_salon_exception_isSet = false;
    m_salon_exception_isValid = false;

    m_sauna_isSet = false;
    m_sauna_isValid = false;

    m_sauna_exception_isSet = false;
    m_sauna_exception_isValid = false;

    m_spa_isSet = false;
    m_spa_isValid = false;

    m_spa_exception_isSet = false;
    m_spa_exception_isValid = false;

    m_treadmill_isSet = false;
    m_treadmill_isValid = false;

    m_treadmill_exception_isSet = false;
    m_treadmill_exception_isValid = false;

    m_weight_machine_isSet = false;
    m_weight_machine_isValid = false;

    m_weight_machine_exception_isSet = false;
    m_weight_machine_exception_isValid = false;
}

void OAIWellness::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWellness::fromJsonObject(QJsonObject json) {

    m_doctor_on_call_isValid = ::OpenAPI::fromJsonValue(m_doctor_on_call, json[QString("doctorOnCall")]);
    m_doctor_on_call_isSet = !json[QString("doctorOnCall")].isNull() && m_doctor_on_call_isValid;

    m_doctor_on_call_exception_isValid = ::OpenAPI::fromJsonValue(m_doctor_on_call_exception, json[QString("doctorOnCallException")]);
    m_doctor_on_call_exception_isSet = !json[QString("doctorOnCallException")].isNull() && m_doctor_on_call_exception_isValid;

    m_elliptical_machine_isValid = ::OpenAPI::fromJsonValue(m_elliptical_machine, json[QString("ellipticalMachine")]);
    m_elliptical_machine_isSet = !json[QString("ellipticalMachine")].isNull() && m_elliptical_machine_isValid;

    m_elliptical_machine_exception_isValid = ::OpenAPI::fromJsonValue(m_elliptical_machine_exception, json[QString("ellipticalMachineException")]);
    m_elliptical_machine_exception_isSet = !json[QString("ellipticalMachineException")].isNull() && m_elliptical_machine_exception_isValid;

    m_fitness_center_isValid = ::OpenAPI::fromJsonValue(m_fitness_center, json[QString("fitnessCenter")]);
    m_fitness_center_isSet = !json[QString("fitnessCenter")].isNull() && m_fitness_center_isValid;

    m_fitness_center_exception_isValid = ::OpenAPI::fromJsonValue(m_fitness_center_exception, json[QString("fitnessCenterException")]);
    m_fitness_center_exception_isSet = !json[QString("fitnessCenterException")].isNull() && m_fitness_center_exception_isValid;

    m_free_fitness_center_isValid = ::OpenAPI::fromJsonValue(m_free_fitness_center, json[QString("freeFitnessCenter")]);
    m_free_fitness_center_isSet = !json[QString("freeFitnessCenter")].isNull() && m_free_fitness_center_isValid;

    m_free_fitness_center_exception_isValid = ::OpenAPI::fromJsonValue(m_free_fitness_center_exception, json[QString("freeFitnessCenterException")]);
    m_free_fitness_center_exception_isSet = !json[QString("freeFitnessCenterException")].isNull() && m_free_fitness_center_exception_isValid;

    m_free_weights_isValid = ::OpenAPI::fromJsonValue(m_free_weights, json[QString("freeWeights")]);
    m_free_weights_isSet = !json[QString("freeWeights")].isNull() && m_free_weights_isValid;

    m_free_weights_exception_isValid = ::OpenAPI::fromJsonValue(m_free_weights_exception, json[QString("freeWeightsException")]);
    m_free_weights_exception_isSet = !json[QString("freeWeightsException")].isNull() && m_free_weights_exception_isValid;

    m_massage_isValid = ::OpenAPI::fromJsonValue(m_massage, json[QString("massage")]);
    m_massage_isSet = !json[QString("massage")].isNull() && m_massage_isValid;

    m_massage_exception_isValid = ::OpenAPI::fromJsonValue(m_massage_exception, json[QString("massageException")]);
    m_massage_exception_isSet = !json[QString("massageException")].isNull() && m_massage_exception_isValid;

    m_salon_isValid = ::OpenAPI::fromJsonValue(m_salon, json[QString("salon")]);
    m_salon_isSet = !json[QString("salon")].isNull() && m_salon_isValid;

    m_salon_exception_isValid = ::OpenAPI::fromJsonValue(m_salon_exception, json[QString("salonException")]);
    m_salon_exception_isSet = !json[QString("salonException")].isNull() && m_salon_exception_isValid;

    m_sauna_isValid = ::OpenAPI::fromJsonValue(m_sauna, json[QString("sauna")]);
    m_sauna_isSet = !json[QString("sauna")].isNull() && m_sauna_isValid;

    m_sauna_exception_isValid = ::OpenAPI::fromJsonValue(m_sauna_exception, json[QString("saunaException")]);
    m_sauna_exception_isSet = !json[QString("saunaException")].isNull() && m_sauna_exception_isValid;

    m_spa_isValid = ::OpenAPI::fromJsonValue(m_spa, json[QString("spa")]);
    m_spa_isSet = !json[QString("spa")].isNull() && m_spa_isValid;

    m_spa_exception_isValid = ::OpenAPI::fromJsonValue(m_spa_exception, json[QString("spaException")]);
    m_spa_exception_isSet = !json[QString("spaException")].isNull() && m_spa_exception_isValid;

    m_treadmill_isValid = ::OpenAPI::fromJsonValue(m_treadmill, json[QString("treadmill")]);
    m_treadmill_isSet = !json[QString("treadmill")].isNull() && m_treadmill_isValid;

    m_treadmill_exception_isValid = ::OpenAPI::fromJsonValue(m_treadmill_exception, json[QString("treadmillException")]);
    m_treadmill_exception_isSet = !json[QString("treadmillException")].isNull() && m_treadmill_exception_isValid;

    m_weight_machine_isValid = ::OpenAPI::fromJsonValue(m_weight_machine, json[QString("weightMachine")]);
    m_weight_machine_isSet = !json[QString("weightMachine")].isNull() && m_weight_machine_isValid;

    m_weight_machine_exception_isValid = ::OpenAPI::fromJsonValue(m_weight_machine_exception, json[QString("weightMachineException")]);
    m_weight_machine_exception_isSet = !json[QString("weightMachineException")].isNull() && m_weight_machine_exception_isValid;
}

QString OAIWellness::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWellness::asJsonObject() const {
    QJsonObject obj;
    if (m_doctor_on_call_isSet) {
        obj.insert(QString("doctorOnCall"), ::OpenAPI::toJsonValue(m_doctor_on_call));
    }
    if (m_doctor_on_call_exception_isSet) {
        obj.insert(QString("doctorOnCallException"), ::OpenAPI::toJsonValue(m_doctor_on_call_exception));
    }
    if (m_elliptical_machine_isSet) {
        obj.insert(QString("ellipticalMachine"), ::OpenAPI::toJsonValue(m_elliptical_machine));
    }
    if (m_elliptical_machine_exception_isSet) {
        obj.insert(QString("ellipticalMachineException"), ::OpenAPI::toJsonValue(m_elliptical_machine_exception));
    }
    if (m_fitness_center_isSet) {
        obj.insert(QString("fitnessCenter"), ::OpenAPI::toJsonValue(m_fitness_center));
    }
    if (m_fitness_center_exception_isSet) {
        obj.insert(QString("fitnessCenterException"), ::OpenAPI::toJsonValue(m_fitness_center_exception));
    }
    if (m_free_fitness_center_isSet) {
        obj.insert(QString("freeFitnessCenter"), ::OpenAPI::toJsonValue(m_free_fitness_center));
    }
    if (m_free_fitness_center_exception_isSet) {
        obj.insert(QString("freeFitnessCenterException"), ::OpenAPI::toJsonValue(m_free_fitness_center_exception));
    }
    if (m_free_weights_isSet) {
        obj.insert(QString("freeWeights"), ::OpenAPI::toJsonValue(m_free_weights));
    }
    if (m_free_weights_exception_isSet) {
        obj.insert(QString("freeWeightsException"), ::OpenAPI::toJsonValue(m_free_weights_exception));
    }
    if (m_massage_isSet) {
        obj.insert(QString("massage"), ::OpenAPI::toJsonValue(m_massage));
    }
    if (m_massage_exception_isSet) {
        obj.insert(QString("massageException"), ::OpenAPI::toJsonValue(m_massage_exception));
    }
    if (m_salon_isSet) {
        obj.insert(QString("salon"), ::OpenAPI::toJsonValue(m_salon));
    }
    if (m_salon_exception_isSet) {
        obj.insert(QString("salonException"), ::OpenAPI::toJsonValue(m_salon_exception));
    }
    if (m_sauna_isSet) {
        obj.insert(QString("sauna"), ::OpenAPI::toJsonValue(m_sauna));
    }
    if (m_sauna_exception_isSet) {
        obj.insert(QString("saunaException"), ::OpenAPI::toJsonValue(m_sauna_exception));
    }
    if (m_spa_isSet) {
        obj.insert(QString("spa"), ::OpenAPI::toJsonValue(m_spa));
    }
    if (m_spa_exception_isSet) {
        obj.insert(QString("spaException"), ::OpenAPI::toJsonValue(m_spa_exception));
    }
    if (m_treadmill_isSet) {
        obj.insert(QString("treadmill"), ::OpenAPI::toJsonValue(m_treadmill));
    }
    if (m_treadmill_exception_isSet) {
        obj.insert(QString("treadmillException"), ::OpenAPI::toJsonValue(m_treadmill_exception));
    }
    if (m_weight_machine_isSet) {
        obj.insert(QString("weightMachine"), ::OpenAPI::toJsonValue(m_weight_machine));
    }
    if (m_weight_machine_exception_isSet) {
        obj.insert(QString("weightMachineException"), ::OpenAPI::toJsonValue(m_weight_machine_exception));
    }
    return obj;
}

bool OAIWellness::isDoctorOnCall() const {
    return m_doctor_on_call;
}
void OAIWellness::setDoctorOnCall(const bool &doctor_on_call) {
    m_doctor_on_call = doctor_on_call;
    m_doctor_on_call_isSet = true;
}

bool OAIWellness::is_doctor_on_call_Set() const{
    return m_doctor_on_call_isSet;
}

bool OAIWellness::is_doctor_on_call_Valid() const{
    return m_doctor_on_call_isValid;
}

QString OAIWellness::getDoctorOnCallException() const {
    return m_doctor_on_call_exception;
}
void OAIWellness::setDoctorOnCallException(const QString &doctor_on_call_exception) {
    m_doctor_on_call_exception = doctor_on_call_exception;
    m_doctor_on_call_exception_isSet = true;
}

bool OAIWellness::is_doctor_on_call_exception_Set() const{
    return m_doctor_on_call_exception_isSet;
}

bool OAIWellness::is_doctor_on_call_exception_Valid() const{
    return m_doctor_on_call_exception_isValid;
}

bool OAIWellness::isEllipticalMachine() const {
    return m_elliptical_machine;
}
void OAIWellness::setEllipticalMachine(const bool &elliptical_machine) {
    m_elliptical_machine = elliptical_machine;
    m_elliptical_machine_isSet = true;
}

bool OAIWellness::is_elliptical_machine_Set() const{
    return m_elliptical_machine_isSet;
}

bool OAIWellness::is_elliptical_machine_Valid() const{
    return m_elliptical_machine_isValid;
}

QString OAIWellness::getEllipticalMachineException() const {
    return m_elliptical_machine_exception;
}
void OAIWellness::setEllipticalMachineException(const QString &elliptical_machine_exception) {
    m_elliptical_machine_exception = elliptical_machine_exception;
    m_elliptical_machine_exception_isSet = true;
}

bool OAIWellness::is_elliptical_machine_exception_Set() const{
    return m_elliptical_machine_exception_isSet;
}

bool OAIWellness::is_elliptical_machine_exception_Valid() const{
    return m_elliptical_machine_exception_isValid;
}

bool OAIWellness::isFitnessCenter() const {
    return m_fitness_center;
}
void OAIWellness::setFitnessCenter(const bool &fitness_center) {
    m_fitness_center = fitness_center;
    m_fitness_center_isSet = true;
}

bool OAIWellness::is_fitness_center_Set() const{
    return m_fitness_center_isSet;
}

bool OAIWellness::is_fitness_center_Valid() const{
    return m_fitness_center_isValid;
}

QString OAIWellness::getFitnessCenterException() const {
    return m_fitness_center_exception;
}
void OAIWellness::setFitnessCenterException(const QString &fitness_center_exception) {
    m_fitness_center_exception = fitness_center_exception;
    m_fitness_center_exception_isSet = true;
}

bool OAIWellness::is_fitness_center_exception_Set() const{
    return m_fitness_center_exception_isSet;
}

bool OAIWellness::is_fitness_center_exception_Valid() const{
    return m_fitness_center_exception_isValid;
}

bool OAIWellness::isFreeFitnessCenter() const {
    return m_free_fitness_center;
}
void OAIWellness::setFreeFitnessCenter(const bool &free_fitness_center) {
    m_free_fitness_center = free_fitness_center;
    m_free_fitness_center_isSet = true;
}

bool OAIWellness::is_free_fitness_center_Set() const{
    return m_free_fitness_center_isSet;
}

bool OAIWellness::is_free_fitness_center_Valid() const{
    return m_free_fitness_center_isValid;
}

QString OAIWellness::getFreeFitnessCenterException() const {
    return m_free_fitness_center_exception;
}
void OAIWellness::setFreeFitnessCenterException(const QString &free_fitness_center_exception) {
    m_free_fitness_center_exception = free_fitness_center_exception;
    m_free_fitness_center_exception_isSet = true;
}

bool OAIWellness::is_free_fitness_center_exception_Set() const{
    return m_free_fitness_center_exception_isSet;
}

bool OAIWellness::is_free_fitness_center_exception_Valid() const{
    return m_free_fitness_center_exception_isValid;
}

bool OAIWellness::isFreeWeights() const {
    return m_free_weights;
}
void OAIWellness::setFreeWeights(const bool &free_weights) {
    m_free_weights = free_weights;
    m_free_weights_isSet = true;
}

bool OAIWellness::is_free_weights_Set() const{
    return m_free_weights_isSet;
}

bool OAIWellness::is_free_weights_Valid() const{
    return m_free_weights_isValid;
}

QString OAIWellness::getFreeWeightsException() const {
    return m_free_weights_exception;
}
void OAIWellness::setFreeWeightsException(const QString &free_weights_exception) {
    m_free_weights_exception = free_weights_exception;
    m_free_weights_exception_isSet = true;
}

bool OAIWellness::is_free_weights_exception_Set() const{
    return m_free_weights_exception_isSet;
}

bool OAIWellness::is_free_weights_exception_Valid() const{
    return m_free_weights_exception_isValid;
}

bool OAIWellness::isMassage() const {
    return m_massage;
}
void OAIWellness::setMassage(const bool &massage) {
    m_massage = massage;
    m_massage_isSet = true;
}

bool OAIWellness::is_massage_Set() const{
    return m_massage_isSet;
}

bool OAIWellness::is_massage_Valid() const{
    return m_massage_isValid;
}

QString OAIWellness::getMassageException() const {
    return m_massage_exception;
}
void OAIWellness::setMassageException(const QString &massage_exception) {
    m_massage_exception = massage_exception;
    m_massage_exception_isSet = true;
}

bool OAIWellness::is_massage_exception_Set() const{
    return m_massage_exception_isSet;
}

bool OAIWellness::is_massage_exception_Valid() const{
    return m_massage_exception_isValid;
}

bool OAIWellness::isSalon() const {
    return m_salon;
}
void OAIWellness::setSalon(const bool &salon) {
    m_salon = salon;
    m_salon_isSet = true;
}

bool OAIWellness::is_salon_Set() const{
    return m_salon_isSet;
}

bool OAIWellness::is_salon_Valid() const{
    return m_salon_isValid;
}

QString OAIWellness::getSalonException() const {
    return m_salon_exception;
}
void OAIWellness::setSalonException(const QString &salon_exception) {
    m_salon_exception = salon_exception;
    m_salon_exception_isSet = true;
}

bool OAIWellness::is_salon_exception_Set() const{
    return m_salon_exception_isSet;
}

bool OAIWellness::is_salon_exception_Valid() const{
    return m_salon_exception_isValid;
}

bool OAIWellness::isSauna() const {
    return m_sauna;
}
void OAIWellness::setSauna(const bool &sauna) {
    m_sauna = sauna;
    m_sauna_isSet = true;
}

bool OAIWellness::is_sauna_Set() const{
    return m_sauna_isSet;
}

bool OAIWellness::is_sauna_Valid() const{
    return m_sauna_isValid;
}

QString OAIWellness::getSaunaException() const {
    return m_sauna_exception;
}
void OAIWellness::setSaunaException(const QString &sauna_exception) {
    m_sauna_exception = sauna_exception;
    m_sauna_exception_isSet = true;
}

bool OAIWellness::is_sauna_exception_Set() const{
    return m_sauna_exception_isSet;
}

bool OAIWellness::is_sauna_exception_Valid() const{
    return m_sauna_exception_isValid;
}

bool OAIWellness::isSpa() const {
    return m_spa;
}
void OAIWellness::setSpa(const bool &spa) {
    m_spa = spa;
    m_spa_isSet = true;
}

bool OAIWellness::is_spa_Set() const{
    return m_spa_isSet;
}

bool OAIWellness::is_spa_Valid() const{
    return m_spa_isValid;
}

QString OAIWellness::getSpaException() const {
    return m_spa_exception;
}
void OAIWellness::setSpaException(const QString &spa_exception) {
    m_spa_exception = spa_exception;
    m_spa_exception_isSet = true;
}

bool OAIWellness::is_spa_exception_Set() const{
    return m_spa_exception_isSet;
}

bool OAIWellness::is_spa_exception_Valid() const{
    return m_spa_exception_isValid;
}

bool OAIWellness::isTreadmill() const {
    return m_treadmill;
}
void OAIWellness::setTreadmill(const bool &treadmill) {
    m_treadmill = treadmill;
    m_treadmill_isSet = true;
}

bool OAIWellness::is_treadmill_Set() const{
    return m_treadmill_isSet;
}

bool OAIWellness::is_treadmill_Valid() const{
    return m_treadmill_isValid;
}

QString OAIWellness::getTreadmillException() const {
    return m_treadmill_exception;
}
void OAIWellness::setTreadmillException(const QString &treadmill_exception) {
    m_treadmill_exception = treadmill_exception;
    m_treadmill_exception_isSet = true;
}

bool OAIWellness::is_treadmill_exception_Set() const{
    return m_treadmill_exception_isSet;
}

bool OAIWellness::is_treadmill_exception_Valid() const{
    return m_treadmill_exception_isValid;
}

bool OAIWellness::isWeightMachine() const {
    return m_weight_machine;
}
void OAIWellness::setWeightMachine(const bool &weight_machine) {
    m_weight_machine = weight_machine;
    m_weight_machine_isSet = true;
}

bool OAIWellness::is_weight_machine_Set() const{
    return m_weight_machine_isSet;
}

bool OAIWellness::is_weight_machine_Valid() const{
    return m_weight_machine_isValid;
}

QString OAIWellness::getWeightMachineException() const {
    return m_weight_machine_exception;
}
void OAIWellness::setWeightMachineException(const QString &weight_machine_exception) {
    m_weight_machine_exception = weight_machine_exception;
    m_weight_machine_exception_isSet = true;
}

bool OAIWellness::is_weight_machine_exception_Set() const{
    return m_weight_machine_exception_isSet;
}

bool OAIWellness::is_weight_machine_exception_Valid() const{
    return m_weight_machine_exception_isValid;
}

bool OAIWellness::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_doctor_on_call_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doctor_on_call_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elliptical_machine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elliptical_machine_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fitness_center_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fitness_center_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_fitness_center_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_fitness_center_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_weights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_weights_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_massage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_massage_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_salon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_salon_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sauna_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sauna_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spa_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treadmill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treadmill_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_machine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_machine_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWellness::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
