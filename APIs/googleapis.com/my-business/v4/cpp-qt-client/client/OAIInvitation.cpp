/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvitation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvitation::OAIInvitation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvitation::OAIInvitation() {
    this->initializeModel();
}

OAIInvitation::~OAIInvitation() {}

void OAIInvitation::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_target_account_isSet = false;
    m_target_account_isValid = false;

    m_target_location_isSet = false;
    m_target_location_isValid = false;
}

void OAIInvitation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvitation::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_target_account_isValid = ::OpenAPI::fromJsonValue(m_target_account, json[QString("targetAccount")]);
    m_target_account_isSet = !json[QString("targetAccount")].isNull() && m_target_account_isValid;

    m_target_location_isValid = ::OpenAPI::fromJsonValue(m_target_location, json[QString("targetLocation")]);
    m_target_location_isSet = !json[QString("targetLocation")].isNull() && m_target_location_isValid;
}

QString OAIInvitation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvitation::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_target_account.isSet()) {
        obj.insert(QString("targetAccount"), ::OpenAPI::toJsonValue(m_target_account));
    }
    if (m_target_location.isSet()) {
        obj.insert(QString("targetLocation"), ::OpenAPI::toJsonValue(m_target_location));
    }
    return obj;
}

QString OAIInvitation::getName() const {
    return m_name;
}
void OAIInvitation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInvitation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInvitation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInvitation::getRole() const {
    return m_role;
}
void OAIInvitation::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIInvitation::is_role_Set() const{
    return m_role_isSet;
}

bool OAIInvitation::is_role_Valid() const{
    return m_role_isValid;
}

OAIAccount OAIInvitation::getTargetAccount() const {
    return m_target_account;
}
void OAIInvitation::setTargetAccount(const OAIAccount &target_account) {
    m_target_account = target_account;
    m_target_account_isSet = true;
}

bool OAIInvitation::is_target_account_Set() const{
    return m_target_account_isSet;
}

bool OAIInvitation::is_target_account_Valid() const{
    return m_target_account_isValid;
}

OAITargetLocation OAIInvitation::getTargetLocation() const {
    return m_target_location;
}
void OAIInvitation::setTargetLocation(const OAITargetLocation &target_location) {
    m_target_location = target_location;
    m_target_location_isSet = true;
}

bool OAIInvitation::is_target_location_Set() const{
    return m_target_location_isSet;
}

bool OAIInvitation::is_target_location_Valid() const{
    return m_target_location_isValid;
}

bool OAIInvitation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvitation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
