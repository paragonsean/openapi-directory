/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDuplicate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDuplicate::OAIDuplicate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDuplicate::OAIDuplicate() {
    this->initializeModel();
}

OAIDuplicate::~OAIDuplicate() {}

void OAIDuplicate::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_location_name_isSet = false;
    m_location_name_isValid = false;

    m_place_id_isSet = false;
    m_place_id_isValid = false;
}

void OAIDuplicate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDuplicate::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_location_name_isValid = ::OpenAPI::fromJsonValue(m_location_name, json[QString("locationName")]);
    m_location_name_isSet = !json[QString("locationName")].isNull() && m_location_name_isValid;

    m_place_id_isValid = ::OpenAPI::fromJsonValue(m_place_id, json[QString("placeId")]);
    m_place_id_isSet = !json[QString("placeId")].isNull() && m_place_id_isValid;
}

QString OAIDuplicate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDuplicate::asJsonObject() const {
    QJsonObject obj;
    if (m_access_isSet) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_location_name_isSet) {
        obj.insert(QString("locationName"), ::OpenAPI::toJsonValue(m_location_name));
    }
    if (m_place_id_isSet) {
        obj.insert(QString("placeId"), ::OpenAPI::toJsonValue(m_place_id));
    }
    return obj;
}

QString OAIDuplicate::getAccess() const {
    return m_access;
}
void OAIDuplicate::setAccess(const QString &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIDuplicate::is_access_Set() const{
    return m_access_isSet;
}

bool OAIDuplicate::is_access_Valid() const{
    return m_access_isValid;
}

QString OAIDuplicate::getLocationName() const {
    return m_location_name;
}
void OAIDuplicate::setLocationName(const QString &location_name) {
    m_location_name = location_name;
    m_location_name_isSet = true;
}

bool OAIDuplicate::is_location_name_Set() const{
    return m_location_name_isSet;
}

bool OAIDuplicate::is_location_name_Valid() const{
    return m_location_name_isValid;
}

QString OAIDuplicate::getPlaceId() const {
    return m_place_id;
}
void OAIDuplicate::setPlaceId(const QString &place_id) {
    m_place_id = place_id;
    m_place_id_isSet = true;
}

bool OAIDuplicate::is_place_id_Set() const{
    return m_place_id_isSet;
}

bool OAIDuplicate::is_place_id_Valid() const{
    return m_place_id_isValid;
}

bool OAIDuplicate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDuplicate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
