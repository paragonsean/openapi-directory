/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFetchVerificationOptionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFetchVerificationOptionsRequest::OAIFetchVerificationOptionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFetchVerificationOptionsRequest::OAIFetchVerificationOptionsRequest() {
    this->initializeModel();
}

OAIFetchVerificationOptionsRequest::~OAIFetchVerificationOptionsRequest() {}

void OAIFetchVerificationOptionsRequest::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;
}

void OAIFetchVerificationOptionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFetchVerificationOptionsRequest::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;
}

QString OAIFetchVerificationOptionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFetchVerificationOptionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    return obj;
}

OAIServiceBusinessContext OAIFetchVerificationOptionsRequest::getContext() const {
    return m_context;
}
void OAIFetchVerificationOptionsRequest::setContext(const OAIServiceBusinessContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIFetchVerificationOptionsRequest::is_context_Set() const{
    return m_context_isSet;
}

bool OAIFetchVerificationOptionsRequest::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIFetchVerificationOptionsRequest::getLanguageCode() const {
    return m_language_code;
}
void OAIFetchVerificationOptionsRequest::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIFetchVerificationOptionsRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIFetchVerificationOptionsRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

bool OAIFetchVerificationOptionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFetchVerificationOptionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
