/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILivingAreaEating.h
 *
 * Information about eating features in the living area.
 */

#ifndef OAILivingAreaEating_H
#define OAILivingAreaEating_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILivingAreaEating : public OAIObject {
public:
    OAILivingAreaEating();
    OAILivingAreaEating(QString json);
    ~OAILivingAreaEating() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCoffeeMaker() const;
    void setCoffeeMaker(const bool &coffee_maker);
    bool is_coffee_maker_Set() const;
    bool is_coffee_maker_Valid() const;

    QString getCoffeeMakerException() const;
    void setCoffeeMakerException(const QString &coffee_maker_exception);
    bool is_coffee_maker_exception_Set() const;
    bool is_coffee_maker_exception_Valid() const;

    bool isCookware() const;
    void setCookware(const bool &cookware);
    bool is_cookware_Set() const;
    bool is_cookware_Valid() const;

    QString getCookwareException() const;
    void setCookwareException(const QString &cookware_exception);
    bool is_cookware_exception_Set() const;
    bool is_cookware_exception_Valid() const;

    bool isDishwasher() const;
    void setDishwasher(const bool &dishwasher);
    bool is_dishwasher_Set() const;
    bool is_dishwasher_Valid() const;

    QString getDishwasherException() const;
    void setDishwasherException(const QString &dishwasher_exception);
    bool is_dishwasher_exception_Set() const;
    bool is_dishwasher_exception_Valid() const;

    bool isIndoorGrill() const;
    void setIndoorGrill(const bool &indoor_grill);
    bool is_indoor_grill_Set() const;
    bool is_indoor_grill_Valid() const;

    QString getIndoorGrillException() const;
    void setIndoorGrillException(const QString &indoor_grill_exception);
    bool is_indoor_grill_exception_Set() const;
    bool is_indoor_grill_exception_Valid() const;

    bool isKettle() const;
    void setKettle(const bool &kettle);
    bool is_kettle_Set() const;
    bool is_kettle_Valid() const;

    QString getKettleException() const;
    void setKettleException(const QString &kettle_exception);
    bool is_kettle_exception_Set() const;
    bool is_kettle_exception_Valid() const;

    bool isKitchenAvailable() const;
    void setKitchenAvailable(const bool &kitchen_available);
    bool is_kitchen_available_Set() const;
    bool is_kitchen_available_Valid() const;

    QString getKitchenAvailableException() const;
    void setKitchenAvailableException(const QString &kitchen_available_exception);
    bool is_kitchen_available_exception_Set() const;
    bool is_kitchen_available_exception_Valid() const;

    bool isMicrowave() const;
    void setMicrowave(const bool &microwave);
    bool is_microwave_Set() const;
    bool is_microwave_Valid() const;

    QString getMicrowaveException() const;
    void setMicrowaveException(const QString &microwave_exception);
    bool is_microwave_exception_Set() const;
    bool is_microwave_exception_Valid() const;

    bool isMinibar() const;
    void setMinibar(const bool &minibar);
    bool is_minibar_Set() const;
    bool is_minibar_Valid() const;

    QString getMinibarException() const;
    void setMinibarException(const QString &minibar_exception);
    bool is_minibar_exception_Set() const;
    bool is_minibar_exception_Valid() const;

    bool isOutdoorGrill() const;
    void setOutdoorGrill(const bool &outdoor_grill);
    bool is_outdoor_grill_Set() const;
    bool is_outdoor_grill_Valid() const;

    QString getOutdoorGrillException() const;
    void setOutdoorGrillException(const QString &outdoor_grill_exception);
    bool is_outdoor_grill_exception_Set() const;
    bool is_outdoor_grill_exception_Valid() const;

    bool isOven() const;
    void setOven(const bool &oven);
    bool is_oven_Set() const;
    bool is_oven_Valid() const;

    QString getOvenException() const;
    void setOvenException(const QString &oven_exception);
    bool is_oven_exception_Set() const;
    bool is_oven_exception_Valid() const;

    bool isRefrigerator() const;
    void setRefrigerator(const bool &refrigerator);
    bool is_refrigerator_Set() const;
    bool is_refrigerator_Valid() const;

    QString getRefrigeratorException() const;
    void setRefrigeratorException(const QString &refrigerator_exception);
    bool is_refrigerator_exception_Set() const;
    bool is_refrigerator_exception_Valid() const;

    bool isSink() const;
    void setSink(const bool &sink);
    bool is_sink_Set() const;
    bool is_sink_Valid() const;

    QString getSinkException() const;
    void setSinkException(const QString &sink_exception);
    bool is_sink_exception_Set() const;
    bool is_sink_exception_Valid() const;

    bool isSnackbar() const;
    void setSnackbar(const bool &snackbar);
    bool is_snackbar_Set() const;
    bool is_snackbar_Valid() const;

    QString getSnackbarException() const;
    void setSnackbarException(const QString &snackbar_exception);
    bool is_snackbar_exception_Set() const;
    bool is_snackbar_exception_Valid() const;

    bool isStove() const;
    void setStove(const bool &stove);
    bool is_stove_Set() const;
    bool is_stove_Valid() const;

    QString getStoveException() const;
    void setStoveException(const QString &stove_exception);
    bool is_stove_exception_Set() const;
    bool is_stove_exception_Valid() const;

    bool isTeaStation() const;
    void setTeaStation(const bool &tea_station);
    bool is_tea_station_Set() const;
    bool is_tea_station_Valid() const;

    QString getTeaStationException() const;
    void setTeaStationException(const QString &tea_station_exception);
    bool is_tea_station_exception_Set() const;
    bool is_tea_station_exception_Valid() const;

    bool isToaster() const;
    void setToaster(const bool &toaster);
    bool is_toaster_Set() const;
    bool is_toaster_Valid() const;

    QString getToasterException() const;
    void setToasterException(const QString &toaster_exception);
    bool is_toaster_exception_Set() const;
    bool is_toaster_exception_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_coffee_maker;
    bool m_coffee_maker_isSet;
    bool m_coffee_maker_isValid;

    QString m_coffee_maker_exception;
    bool m_coffee_maker_exception_isSet;
    bool m_coffee_maker_exception_isValid;

    bool m_cookware;
    bool m_cookware_isSet;
    bool m_cookware_isValid;

    QString m_cookware_exception;
    bool m_cookware_exception_isSet;
    bool m_cookware_exception_isValid;

    bool m_dishwasher;
    bool m_dishwasher_isSet;
    bool m_dishwasher_isValid;

    QString m_dishwasher_exception;
    bool m_dishwasher_exception_isSet;
    bool m_dishwasher_exception_isValid;

    bool m_indoor_grill;
    bool m_indoor_grill_isSet;
    bool m_indoor_grill_isValid;

    QString m_indoor_grill_exception;
    bool m_indoor_grill_exception_isSet;
    bool m_indoor_grill_exception_isValid;

    bool m_kettle;
    bool m_kettle_isSet;
    bool m_kettle_isValid;

    QString m_kettle_exception;
    bool m_kettle_exception_isSet;
    bool m_kettle_exception_isValid;

    bool m_kitchen_available;
    bool m_kitchen_available_isSet;
    bool m_kitchen_available_isValid;

    QString m_kitchen_available_exception;
    bool m_kitchen_available_exception_isSet;
    bool m_kitchen_available_exception_isValid;

    bool m_microwave;
    bool m_microwave_isSet;
    bool m_microwave_isValid;

    QString m_microwave_exception;
    bool m_microwave_exception_isSet;
    bool m_microwave_exception_isValid;

    bool m_minibar;
    bool m_minibar_isSet;
    bool m_minibar_isValid;

    QString m_minibar_exception;
    bool m_minibar_exception_isSet;
    bool m_minibar_exception_isValid;

    bool m_outdoor_grill;
    bool m_outdoor_grill_isSet;
    bool m_outdoor_grill_isValid;

    QString m_outdoor_grill_exception;
    bool m_outdoor_grill_exception_isSet;
    bool m_outdoor_grill_exception_isValid;

    bool m_oven;
    bool m_oven_isSet;
    bool m_oven_isValid;

    QString m_oven_exception;
    bool m_oven_exception_isSet;
    bool m_oven_exception_isValid;

    bool m_refrigerator;
    bool m_refrigerator_isSet;
    bool m_refrigerator_isValid;

    QString m_refrigerator_exception;
    bool m_refrigerator_exception_isSet;
    bool m_refrigerator_exception_isValid;

    bool m_sink;
    bool m_sink_isSet;
    bool m_sink_isValid;

    QString m_sink_exception;
    bool m_sink_exception_isSet;
    bool m_sink_exception_isValid;

    bool m_snackbar;
    bool m_snackbar_isSet;
    bool m_snackbar_isValid;

    QString m_snackbar_exception;
    bool m_snackbar_exception_isSet;
    bool m_snackbar_exception_isValid;

    bool m_stove;
    bool m_stove_isSet;
    bool m_stove_isValid;

    QString m_stove_exception;
    bool m_stove_exception_isSet;
    bool m_stove_exception_isValid;

    bool m_tea_station;
    bool m_tea_station_isSet;
    bool m_tea_station_isValid;

    QString m_tea_station_exception;
    bool m_tea_station_exception_isSet;
    bool m_tea_station_exception_isValid;

    bool m_toaster;
    bool m_toaster_isSet;
    bool m_toaster_isValid;

    QString m_toaster_exception;
    bool m_toaster_exception_isSet;
    bool m_toaster_exception_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILivingAreaEating)

#endif // OAILivingAreaEating_H
