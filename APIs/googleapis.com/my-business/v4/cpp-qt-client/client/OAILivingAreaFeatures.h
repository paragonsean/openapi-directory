/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILivingAreaFeatures.h
 *
 * Features in the living area.
 */

#ifndef OAILivingAreaFeatures_H
#define OAILivingAreaFeatures_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILivingAreaFeatures : public OAIObject {
public:
    OAILivingAreaFeatures();
    OAILivingAreaFeatures(QString json);
    ~OAILivingAreaFeatures() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAirConditioning() const;
    void setAirConditioning(const bool &air_conditioning);
    bool is_air_conditioning_Set() const;
    bool is_air_conditioning_Valid() const;

    QString getAirConditioningException() const;
    void setAirConditioningException(const QString &air_conditioning_exception);
    bool is_air_conditioning_exception_Set() const;
    bool is_air_conditioning_exception_Valid() const;

    bool isBathtub() const;
    void setBathtub(const bool &bathtub);
    bool is_bathtub_Set() const;
    bool is_bathtub_Valid() const;

    QString getBathtubException() const;
    void setBathtubException(const QString &bathtub_exception);
    bool is_bathtub_exception_Set() const;
    bool is_bathtub_exception_Valid() const;

    bool isBidet() const;
    void setBidet(const bool &bidet);
    bool is_bidet_Set() const;
    bool is_bidet_Valid() const;

    QString getBidetException() const;
    void setBidetException(const QString &bidet_exception);
    bool is_bidet_exception_Set() const;
    bool is_bidet_exception_Valid() const;

    bool isDryer() const;
    void setDryer(const bool &dryer);
    bool is_dryer_Set() const;
    bool is_dryer_Valid() const;

    QString getDryerException() const;
    void setDryerException(const QString &dryer_exception);
    bool is_dryer_exception_Set() const;
    bool is_dryer_exception_Valid() const;

    bool isElectronicRoomKey() const;
    void setElectronicRoomKey(const bool &electronic_room_key);
    bool is_electronic_room_key_Set() const;
    bool is_electronic_room_key_Valid() const;

    QString getElectronicRoomKeyException() const;
    void setElectronicRoomKeyException(const QString &electronic_room_key_exception);
    bool is_electronic_room_key_exception_Set() const;
    bool is_electronic_room_key_exception_Valid() const;

    bool isFireplace() const;
    void setFireplace(const bool &fireplace);
    bool is_fireplace_Set() const;
    bool is_fireplace_Valid() const;

    QString getFireplaceException() const;
    void setFireplaceException(const QString &fireplace_exception);
    bool is_fireplace_exception_Set() const;
    bool is_fireplace_exception_Valid() const;

    bool isHairdryer() const;
    void setHairdryer(const bool &hairdryer);
    bool is_hairdryer_Set() const;
    bool is_hairdryer_Valid() const;

    QString getHairdryerException() const;
    void setHairdryerException(const QString &hairdryer_exception);
    bool is_hairdryer_exception_Set() const;
    bool is_hairdryer_exception_Valid() const;

    bool isHeating() const;
    void setHeating(const bool &heating);
    bool is_heating_Set() const;
    bool is_heating_Valid() const;

    QString getHeatingException() const;
    void setHeatingException(const QString &heating_exception);
    bool is_heating_exception_Set() const;
    bool is_heating_exception_Valid() const;

    bool isInunitSafe() const;
    void setInunitSafe(const bool &inunit_safe);
    bool is_inunit_safe_Set() const;
    bool is_inunit_safe_Valid() const;

    QString getInunitSafeException() const;
    void setInunitSafeException(const QString &inunit_safe_exception);
    bool is_inunit_safe_exception_Set() const;
    bool is_inunit_safe_exception_Valid() const;

    bool isInunitWifiAvailable() const;
    void setInunitWifiAvailable(const bool &inunit_wifi_available);
    bool is_inunit_wifi_available_Set() const;
    bool is_inunit_wifi_available_Valid() const;

    QString getInunitWifiAvailableException() const;
    void setInunitWifiAvailableException(const QString &inunit_wifi_available_exception);
    bool is_inunit_wifi_available_exception_Set() const;
    bool is_inunit_wifi_available_exception_Valid() const;

    bool isIroningEquipment() const;
    void setIroningEquipment(const bool &ironing_equipment);
    bool is_ironing_equipment_Set() const;
    bool is_ironing_equipment_Valid() const;

    QString getIroningEquipmentException() const;
    void setIroningEquipmentException(const QString &ironing_equipment_exception);
    bool is_ironing_equipment_exception_Set() const;
    bool is_ironing_equipment_exception_Valid() const;

    bool isPayPerViewMovies() const;
    void setPayPerViewMovies(const bool &pay_per_view_movies);
    bool is_pay_per_view_movies_Set() const;
    bool is_pay_per_view_movies_Valid() const;

    QString getPayPerViewMoviesException() const;
    void setPayPerViewMoviesException(const QString &pay_per_view_movies_exception);
    bool is_pay_per_view_movies_exception_Set() const;
    bool is_pay_per_view_movies_exception_Valid() const;

    bool isPrivateBathroom() const;
    void setPrivateBathroom(const bool &private_bathroom);
    bool is_private_bathroom_Set() const;
    bool is_private_bathroom_Valid() const;

    QString getPrivateBathroomException() const;
    void setPrivateBathroomException(const QString &private_bathroom_exception);
    bool is_private_bathroom_exception_Set() const;
    bool is_private_bathroom_exception_Valid() const;

    bool isShower() const;
    void setShower(const bool &shower);
    bool is_shower_Set() const;
    bool is_shower_Valid() const;

    QString getShowerException() const;
    void setShowerException(const QString &shower_exception);
    bool is_shower_exception_Set() const;
    bool is_shower_exception_Valid() const;

    bool isToilet() const;
    void setToilet(const bool &toilet);
    bool is_toilet_Set() const;
    bool is_toilet_Valid() const;

    QString getToiletException() const;
    void setToiletException(const QString &toilet_exception);
    bool is_toilet_exception_Set() const;
    bool is_toilet_exception_Valid() const;

    bool isTv() const;
    void setTv(const bool &tv);
    bool is_tv_Set() const;
    bool is_tv_Valid() const;

    bool isTvCasting() const;
    void setTvCasting(const bool &tv_casting);
    bool is_tv_casting_Set() const;
    bool is_tv_casting_Valid() const;

    QString getTvCastingException() const;
    void setTvCastingException(const QString &tv_casting_exception);
    bool is_tv_casting_exception_Set() const;
    bool is_tv_casting_exception_Valid() const;

    QString getTvException() const;
    void setTvException(const QString &tv_exception);
    bool is_tv_exception_Set() const;
    bool is_tv_exception_Valid() const;

    bool isTvStreaming() const;
    void setTvStreaming(const bool &tv_streaming);
    bool is_tv_streaming_Set() const;
    bool is_tv_streaming_Valid() const;

    QString getTvStreamingException() const;
    void setTvStreamingException(const QString &tv_streaming_exception);
    bool is_tv_streaming_exception_Set() const;
    bool is_tv_streaming_exception_Valid() const;

    bool isUniversalPowerAdapters() const;
    void setUniversalPowerAdapters(const bool &universal_power_adapters);
    bool is_universal_power_adapters_Set() const;
    bool is_universal_power_adapters_Valid() const;

    QString getUniversalPowerAdaptersException() const;
    void setUniversalPowerAdaptersException(const QString &universal_power_adapters_exception);
    bool is_universal_power_adapters_exception_Set() const;
    bool is_universal_power_adapters_exception_Valid() const;

    bool isWasher() const;
    void setWasher(const bool &washer);
    bool is_washer_Set() const;
    bool is_washer_Valid() const;

    QString getWasherException() const;
    void setWasherException(const QString &washer_exception);
    bool is_washer_exception_Set() const;
    bool is_washer_exception_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_air_conditioning;
    bool m_air_conditioning_isSet;
    bool m_air_conditioning_isValid;

    QString m_air_conditioning_exception;
    bool m_air_conditioning_exception_isSet;
    bool m_air_conditioning_exception_isValid;

    bool m_bathtub;
    bool m_bathtub_isSet;
    bool m_bathtub_isValid;

    QString m_bathtub_exception;
    bool m_bathtub_exception_isSet;
    bool m_bathtub_exception_isValid;

    bool m_bidet;
    bool m_bidet_isSet;
    bool m_bidet_isValid;

    QString m_bidet_exception;
    bool m_bidet_exception_isSet;
    bool m_bidet_exception_isValid;

    bool m_dryer;
    bool m_dryer_isSet;
    bool m_dryer_isValid;

    QString m_dryer_exception;
    bool m_dryer_exception_isSet;
    bool m_dryer_exception_isValid;

    bool m_electronic_room_key;
    bool m_electronic_room_key_isSet;
    bool m_electronic_room_key_isValid;

    QString m_electronic_room_key_exception;
    bool m_electronic_room_key_exception_isSet;
    bool m_electronic_room_key_exception_isValid;

    bool m_fireplace;
    bool m_fireplace_isSet;
    bool m_fireplace_isValid;

    QString m_fireplace_exception;
    bool m_fireplace_exception_isSet;
    bool m_fireplace_exception_isValid;

    bool m_hairdryer;
    bool m_hairdryer_isSet;
    bool m_hairdryer_isValid;

    QString m_hairdryer_exception;
    bool m_hairdryer_exception_isSet;
    bool m_hairdryer_exception_isValid;

    bool m_heating;
    bool m_heating_isSet;
    bool m_heating_isValid;

    QString m_heating_exception;
    bool m_heating_exception_isSet;
    bool m_heating_exception_isValid;

    bool m_inunit_safe;
    bool m_inunit_safe_isSet;
    bool m_inunit_safe_isValid;

    QString m_inunit_safe_exception;
    bool m_inunit_safe_exception_isSet;
    bool m_inunit_safe_exception_isValid;

    bool m_inunit_wifi_available;
    bool m_inunit_wifi_available_isSet;
    bool m_inunit_wifi_available_isValid;

    QString m_inunit_wifi_available_exception;
    bool m_inunit_wifi_available_exception_isSet;
    bool m_inunit_wifi_available_exception_isValid;

    bool m_ironing_equipment;
    bool m_ironing_equipment_isSet;
    bool m_ironing_equipment_isValid;

    QString m_ironing_equipment_exception;
    bool m_ironing_equipment_exception_isSet;
    bool m_ironing_equipment_exception_isValid;

    bool m_pay_per_view_movies;
    bool m_pay_per_view_movies_isSet;
    bool m_pay_per_view_movies_isValid;

    QString m_pay_per_view_movies_exception;
    bool m_pay_per_view_movies_exception_isSet;
    bool m_pay_per_view_movies_exception_isValid;

    bool m_private_bathroom;
    bool m_private_bathroom_isSet;
    bool m_private_bathroom_isValid;

    QString m_private_bathroom_exception;
    bool m_private_bathroom_exception_isSet;
    bool m_private_bathroom_exception_isValid;

    bool m_shower;
    bool m_shower_isSet;
    bool m_shower_isValid;

    QString m_shower_exception;
    bool m_shower_exception_isSet;
    bool m_shower_exception_isValid;

    bool m_toilet;
    bool m_toilet_isSet;
    bool m_toilet_isValid;

    QString m_toilet_exception;
    bool m_toilet_exception_isSet;
    bool m_toilet_exception_isValid;

    bool m_tv;
    bool m_tv_isSet;
    bool m_tv_isValid;

    bool m_tv_casting;
    bool m_tv_casting_isSet;
    bool m_tv_casting_isValid;

    QString m_tv_casting_exception;
    bool m_tv_casting_exception_isSet;
    bool m_tv_casting_exception_isValid;

    QString m_tv_exception;
    bool m_tv_exception_isSet;
    bool m_tv_exception_isValid;

    bool m_tv_streaming;
    bool m_tv_streaming_isSet;
    bool m_tv_streaming_isValid;

    QString m_tv_streaming_exception;
    bool m_tv_streaming_exception_isSet;
    bool m_tv_streaming_exception_isValid;

    bool m_universal_power_adapters;
    bool m_universal_power_adapters_isSet;
    bool m_universal_power_adapters_isValid;

    QString m_universal_power_adapters_exception;
    bool m_universal_power_adapters_exception_isSet;
    bool m_universal_power_adapters_exception_isValid;

    bool m_washer;
    bool m_washer_isSet;
    bool m_washer_isValid;

    QString m_washer_exception;
    bool m_washer_exception_isSet;
    bool m_washer_exception_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILivingAreaFeatures)

#endif // OAILivingAreaFeatures_H
