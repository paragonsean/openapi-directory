/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_info_isSet = false;
    m_organization_info_isValid = false;

    m_permission_level_isSet = false;
    m_permission_level_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_info_isValid = ::OpenAPI::fromJsonValue(m_organization_info, json[QString("organizationInfo")]);
    m_organization_info_isSet = !json[QString("organizationInfo")].isNull() && m_organization_info_isValid;

    m_permission_level_isValid = ::OpenAPI::fromJsonValue(m_permission_level, json[QString("permissionLevel")]);
    m_permission_level_isSet = !json[QString("permissionLevel")].isNull() && m_permission_level_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_account_number_isSet) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_info.isSet()) {
        obj.insert(QString("organizationInfo"), ::OpenAPI::toJsonValue(m_organization_info));
    }
    if (m_permission_level_isSet) {
        obj.insert(QString("permissionLevel"), ::OpenAPI::toJsonValue(m_permission_level));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAccount::getAccountName() const {
    return m_account_name;
}
void OAIAccount::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIAccount::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIAccount::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIAccount::getAccountNumber() const {
    return m_account_number;
}
void OAIAccount::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIAccount::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIAccount::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QString OAIAccount::getName() const {
    return m_name;
}
void OAIAccount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccount::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccount::is_name_Valid() const{
    return m_name_isValid;
}

OAIOrganizationInfo OAIAccount::getOrganizationInfo() const {
    return m_organization_info;
}
void OAIAccount::setOrganizationInfo(const OAIOrganizationInfo &organization_info) {
    m_organization_info = organization_info;
    m_organization_info_isSet = true;
}

bool OAIAccount::is_organization_info_Set() const{
    return m_organization_info_isSet;
}

bool OAIAccount::is_organization_info_Valid() const{
    return m_organization_info_isValid;
}

QString OAIAccount::getPermissionLevel() const {
    return m_permission_level;
}
void OAIAccount::setPermissionLevel(const QString &permission_level) {
    m_permission_level = permission_level;
    m_permission_level_isSet = true;
}

bool OAIAccount::is_permission_level_Set() const{
    return m_permission_level_isSet;
}

bool OAIAccount::is_permission_level_Valid() const{
    return m_permission_level_isValid;
}

QString OAIAccount::getRole() const {
    return m_role;
}
void OAIAccount::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIAccount::is_role_Set() const{
    return m_role_isSet;
}

bool OAIAccount::is_role_Valid() const{
    return m_role_isValid;
}

OAIAccountState OAIAccount::getState() const {
    return m_state;
}
void OAIAccount::setState(const OAIAccountState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAccount::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAccount::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAccount::getType() const {
    return m_type;
}
void OAIAccount::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAccount::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAccount::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
