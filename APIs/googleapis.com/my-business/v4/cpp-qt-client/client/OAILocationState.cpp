/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationState::OAILocationState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationState::OAILocationState() {
    this->initializeModel();
}

OAILocationState::~OAILocationState() {}

void OAILocationState::initializeModel() {

    m_can_delete_isSet = false;
    m_can_delete_isValid = false;

    m_can_have_food_menus_isSet = false;
    m_can_have_food_menus_isValid = false;

    m_can_modify_service_list_isSet = false;
    m_can_modify_service_list_isValid = false;

    m_can_operate_health_data_isSet = false;
    m_can_operate_health_data_isValid = false;

    m_can_operate_lodging_data_isSet = false;
    m_can_operate_lodging_data_isValid = false;

    m_can_update_isSet = false;
    m_can_update_isValid = false;

    m_has_pending_edits_isSet = false;
    m_has_pending_edits_isValid = false;

    m_has_pending_verification_isSet = false;
    m_has_pending_verification_isValid = false;

    m_is_disabled_isSet = false;
    m_is_disabled_isValid = false;

    m_is_disconnected_isSet = false;
    m_is_disconnected_isValid = false;

    m_is_duplicate_isSet = false;
    m_is_duplicate_isValid = false;

    m_is_google_updated_isSet = false;
    m_is_google_updated_isValid = false;

    m_is_local_post_api_disabled_isSet = false;
    m_is_local_post_api_disabled_isValid = false;

    m_is_pending_review_isSet = false;
    m_is_pending_review_isValid = false;

    m_is_published_isSet = false;
    m_is_published_isValid = false;

    m_is_suspended_isSet = false;
    m_is_suspended_isValid = false;

    m_is_verified_isSet = false;
    m_is_verified_isValid = false;

    m_needs_reverification_isSet = false;
    m_needs_reverification_isValid = false;
}

void OAILocationState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocationState::fromJsonObject(QJsonObject json) {

    m_can_delete_isValid = ::OpenAPI::fromJsonValue(m_can_delete, json[QString("canDelete")]);
    m_can_delete_isSet = !json[QString("canDelete")].isNull() && m_can_delete_isValid;

    m_can_have_food_menus_isValid = ::OpenAPI::fromJsonValue(m_can_have_food_menus, json[QString("canHaveFoodMenus")]);
    m_can_have_food_menus_isSet = !json[QString("canHaveFoodMenus")].isNull() && m_can_have_food_menus_isValid;

    m_can_modify_service_list_isValid = ::OpenAPI::fromJsonValue(m_can_modify_service_list, json[QString("canModifyServiceList")]);
    m_can_modify_service_list_isSet = !json[QString("canModifyServiceList")].isNull() && m_can_modify_service_list_isValid;

    m_can_operate_health_data_isValid = ::OpenAPI::fromJsonValue(m_can_operate_health_data, json[QString("canOperateHealthData")]);
    m_can_operate_health_data_isSet = !json[QString("canOperateHealthData")].isNull() && m_can_operate_health_data_isValid;

    m_can_operate_lodging_data_isValid = ::OpenAPI::fromJsonValue(m_can_operate_lodging_data, json[QString("canOperateLodgingData")]);
    m_can_operate_lodging_data_isSet = !json[QString("canOperateLodgingData")].isNull() && m_can_operate_lodging_data_isValid;

    m_can_update_isValid = ::OpenAPI::fromJsonValue(m_can_update, json[QString("canUpdate")]);
    m_can_update_isSet = !json[QString("canUpdate")].isNull() && m_can_update_isValid;

    m_has_pending_edits_isValid = ::OpenAPI::fromJsonValue(m_has_pending_edits, json[QString("hasPendingEdits")]);
    m_has_pending_edits_isSet = !json[QString("hasPendingEdits")].isNull() && m_has_pending_edits_isValid;

    m_has_pending_verification_isValid = ::OpenAPI::fromJsonValue(m_has_pending_verification, json[QString("hasPendingVerification")]);
    m_has_pending_verification_isSet = !json[QString("hasPendingVerification")].isNull() && m_has_pending_verification_isValid;

    m_is_disabled_isValid = ::OpenAPI::fromJsonValue(m_is_disabled, json[QString("isDisabled")]);
    m_is_disabled_isSet = !json[QString("isDisabled")].isNull() && m_is_disabled_isValid;

    m_is_disconnected_isValid = ::OpenAPI::fromJsonValue(m_is_disconnected, json[QString("isDisconnected")]);
    m_is_disconnected_isSet = !json[QString("isDisconnected")].isNull() && m_is_disconnected_isValid;

    m_is_duplicate_isValid = ::OpenAPI::fromJsonValue(m_is_duplicate, json[QString("isDuplicate")]);
    m_is_duplicate_isSet = !json[QString("isDuplicate")].isNull() && m_is_duplicate_isValid;

    m_is_google_updated_isValid = ::OpenAPI::fromJsonValue(m_is_google_updated, json[QString("isGoogleUpdated")]);
    m_is_google_updated_isSet = !json[QString("isGoogleUpdated")].isNull() && m_is_google_updated_isValid;

    m_is_local_post_api_disabled_isValid = ::OpenAPI::fromJsonValue(m_is_local_post_api_disabled, json[QString("isLocalPostApiDisabled")]);
    m_is_local_post_api_disabled_isSet = !json[QString("isLocalPostApiDisabled")].isNull() && m_is_local_post_api_disabled_isValid;

    m_is_pending_review_isValid = ::OpenAPI::fromJsonValue(m_is_pending_review, json[QString("isPendingReview")]);
    m_is_pending_review_isSet = !json[QString("isPendingReview")].isNull() && m_is_pending_review_isValid;

    m_is_published_isValid = ::OpenAPI::fromJsonValue(m_is_published, json[QString("isPublished")]);
    m_is_published_isSet = !json[QString("isPublished")].isNull() && m_is_published_isValid;

    m_is_suspended_isValid = ::OpenAPI::fromJsonValue(m_is_suspended, json[QString("isSuspended")]);
    m_is_suspended_isSet = !json[QString("isSuspended")].isNull() && m_is_suspended_isValid;

    m_is_verified_isValid = ::OpenAPI::fromJsonValue(m_is_verified, json[QString("isVerified")]);
    m_is_verified_isSet = !json[QString("isVerified")].isNull() && m_is_verified_isValid;

    m_needs_reverification_isValid = ::OpenAPI::fromJsonValue(m_needs_reverification, json[QString("needsReverification")]);
    m_needs_reverification_isSet = !json[QString("needsReverification")].isNull() && m_needs_reverification_isValid;
}

QString OAILocationState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocationState::asJsonObject() const {
    QJsonObject obj;
    if (m_can_delete_isSet) {
        obj.insert(QString("canDelete"), ::OpenAPI::toJsonValue(m_can_delete));
    }
    if (m_can_have_food_menus_isSet) {
        obj.insert(QString("canHaveFoodMenus"), ::OpenAPI::toJsonValue(m_can_have_food_menus));
    }
    if (m_can_modify_service_list_isSet) {
        obj.insert(QString("canModifyServiceList"), ::OpenAPI::toJsonValue(m_can_modify_service_list));
    }
    if (m_can_operate_health_data_isSet) {
        obj.insert(QString("canOperateHealthData"), ::OpenAPI::toJsonValue(m_can_operate_health_data));
    }
    if (m_can_operate_lodging_data_isSet) {
        obj.insert(QString("canOperateLodgingData"), ::OpenAPI::toJsonValue(m_can_operate_lodging_data));
    }
    if (m_can_update_isSet) {
        obj.insert(QString("canUpdate"), ::OpenAPI::toJsonValue(m_can_update));
    }
    if (m_has_pending_edits_isSet) {
        obj.insert(QString("hasPendingEdits"), ::OpenAPI::toJsonValue(m_has_pending_edits));
    }
    if (m_has_pending_verification_isSet) {
        obj.insert(QString("hasPendingVerification"), ::OpenAPI::toJsonValue(m_has_pending_verification));
    }
    if (m_is_disabled_isSet) {
        obj.insert(QString("isDisabled"), ::OpenAPI::toJsonValue(m_is_disabled));
    }
    if (m_is_disconnected_isSet) {
        obj.insert(QString("isDisconnected"), ::OpenAPI::toJsonValue(m_is_disconnected));
    }
    if (m_is_duplicate_isSet) {
        obj.insert(QString("isDuplicate"), ::OpenAPI::toJsonValue(m_is_duplicate));
    }
    if (m_is_google_updated_isSet) {
        obj.insert(QString("isGoogleUpdated"), ::OpenAPI::toJsonValue(m_is_google_updated));
    }
    if (m_is_local_post_api_disabled_isSet) {
        obj.insert(QString("isLocalPostApiDisabled"), ::OpenAPI::toJsonValue(m_is_local_post_api_disabled));
    }
    if (m_is_pending_review_isSet) {
        obj.insert(QString("isPendingReview"), ::OpenAPI::toJsonValue(m_is_pending_review));
    }
    if (m_is_published_isSet) {
        obj.insert(QString("isPublished"), ::OpenAPI::toJsonValue(m_is_published));
    }
    if (m_is_suspended_isSet) {
        obj.insert(QString("isSuspended"), ::OpenAPI::toJsonValue(m_is_suspended));
    }
    if (m_is_verified_isSet) {
        obj.insert(QString("isVerified"), ::OpenAPI::toJsonValue(m_is_verified));
    }
    if (m_needs_reverification_isSet) {
        obj.insert(QString("needsReverification"), ::OpenAPI::toJsonValue(m_needs_reverification));
    }
    return obj;
}

bool OAILocationState::isCanDelete() const {
    return m_can_delete;
}
void OAILocationState::setCanDelete(const bool &can_delete) {
    m_can_delete = can_delete;
    m_can_delete_isSet = true;
}

bool OAILocationState::is_can_delete_Set() const{
    return m_can_delete_isSet;
}

bool OAILocationState::is_can_delete_Valid() const{
    return m_can_delete_isValid;
}

bool OAILocationState::isCanHaveFoodMenus() const {
    return m_can_have_food_menus;
}
void OAILocationState::setCanHaveFoodMenus(const bool &can_have_food_menus) {
    m_can_have_food_menus = can_have_food_menus;
    m_can_have_food_menus_isSet = true;
}

bool OAILocationState::is_can_have_food_menus_Set() const{
    return m_can_have_food_menus_isSet;
}

bool OAILocationState::is_can_have_food_menus_Valid() const{
    return m_can_have_food_menus_isValid;
}

bool OAILocationState::isCanModifyServiceList() const {
    return m_can_modify_service_list;
}
void OAILocationState::setCanModifyServiceList(const bool &can_modify_service_list) {
    m_can_modify_service_list = can_modify_service_list;
    m_can_modify_service_list_isSet = true;
}

bool OAILocationState::is_can_modify_service_list_Set() const{
    return m_can_modify_service_list_isSet;
}

bool OAILocationState::is_can_modify_service_list_Valid() const{
    return m_can_modify_service_list_isValid;
}

bool OAILocationState::isCanOperateHealthData() const {
    return m_can_operate_health_data;
}
void OAILocationState::setCanOperateHealthData(const bool &can_operate_health_data) {
    m_can_operate_health_data = can_operate_health_data;
    m_can_operate_health_data_isSet = true;
}

bool OAILocationState::is_can_operate_health_data_Set() const{
    return m_can_operate_health_data_isSet;
}

bool OAILocationState::is_can_operate_health_data_Valid() const{
    return m_can_operate_health_data_isValid;
}

bool OAILocationState::isCanOperateLodgingData() const {
    return m_can_operate_lodging_data;
}
void OAILocationState::setCanOperateLodgingData(const bool &can_operate_lodging_data) {
    m_can_operate_lodging_data = can_operate_lodging_data;
    m_can_operate_lodging_data_isSet = true;
}

bool OAILocationState::is_can_operate_lodging_data_Set() const{
    return m_can_operate_lodging_data_isSet;
}

bool OAILocationState::is_can_operate_lodging_data_Valid() const{
    return m_can_operate_lodging_data_isValid;
}

bool OAILocationState::isCanUpdate() const {
    return m_can_update;
}
void OAILocationState::setCanUpdate(const bool &can_update) {
    m_can_update = can_update;
    m_can_update_isSet = true;
}

bool OAILocationState::is_can_update_Set() const{
    return m_can_update_isSet;
}

bool OAILocationState::is_can_update_Valid() const{
    return m_can_update_isValid;
}

bool OAILocationState::isHasPendingEdits() const {
    return m_has_pending_edits;
}
void OAILocationState::setHasPendingEdits(const bool &has_pending_edits) {
    m_has_pending_edits = has_pending_edits;
    m_has_pending_edits_isSet = true;
}

bool OAILocationState::is_has_pending_edits_Set() const{
    return m_has_pending_edits_isSet;
}

bool OAILocationState::is_has_pending_edits_Valid() const{
    return m_has_pending_edits_isValid;
}

bool OAILocationState::isHasPendingVerification() const {
    return m_has_pending_verification;
}
void OAILocationState::setHasPendingVerification(const bool &has_pending_verification) {
    m_has_pending_verification = has_pending_verification;
    m_has_pending_verification_isSet = true;
}

bool OAILocationState::is_has_pending_verification_Set() const{
    return m_has_pending_verification_isSet;
}

bool OAILocationState::is_has_pending_verification_Valid() const{
    return m_has_pending_verification_isValid;
}

bool OAILocationState::isIsDisabled() const {
    return m_is_disabled;
}
void OAILocationState::setIsDisabled(const bool &is_disabled) {
    m_is_disabled = is_disabled;
    m_is_disabled_isSet = true;
}

bool OAILocationState::is_is_disabled_Set() const{
    return m_is_disabled_isSet;
}

bool OAILocationState::is_is_disabled_Valid() const{
    return m_is_disabled_isValid;
}

bool OAILocationState::isIsDisconnected() const {
    return m_is_disconnected;
}
void OAILocationState::setIsDisconnected(const bool &is_disconnected) {
    m_is_disconnected = is_disconnected;
    m_is_disconnected_isSet = true;
}

bool OAILocationState::is_is_disconnected_Set() const{
    return m_is_disconnected_isSet;
}

bool OAILocationState::is_is_disconnected_Valid() const{
    return m_is_disconnected_isValid;
}

bool OAILocationState::isIsDuplicate() const {
    return m_is_duplicate;
}
void OAILocationState::setIsDuplicate(const bool &is_duplicate) {
    m_is_duplicate = is_duplicate;
    m_is_duplicate_isSet = true;
}

bool OAILocationState::is_is_duplicate_Set() const{
    return m_is_duplicate_isSet;
}

bool OAILocationState::is_is_duplicate_Valid() const{
    return m_is_duplicate_isValid;
}

bool OAILocationState::isIsGoogleUpdated() const {
    return m_is_google_updated;
}
void OAILocationState::setIsGoogleUpdated(const bool &is_google_updated) {
    m_is_google_updated = is_google_updated;
    m_is_google_updated_isSet = true;
}

bool OAILocationState::is_is_google_updated_Set() const{
    return m_is_google_updated_isSet;
}

bool OAILocationState::is_is_google_updated_Valid() const{
    return m_is_google_updated_isValid;
}

bool OAILocationState::isIsLocalPostApiDisabled() const {
    return m_is_local_post_api_disabled;
}
void OAILocationState::setIsLocalPostApiDisabled(const bool &is_local_post_api_disabled) {
    m_is_local_post_api_disabled = is_local_post_api_disabled;
    m_is_local_post_api_disabled_isSet = true;
}

bool OAILocationState::is_is_local_post_api_disabled_Set() const{
    return m_is_local_post_api_disabled_isSet;
}

bool OAILocationState::is_is_local_post_api_disabled_Valid() const{
    return m_is_local_post_api_disabled_isValid;
}

bool OAILocationState::isIsPendingReview() const {
    return m_is_pending_review;
}
void OAILocationState::setIsPendingReview(const bool &is_pending_review) {
    m_is_pending_review = is_pending_review;
    m_is_pending_review_isSet = true;
}

bool OAILocationState::is_is_pending_review_Set() const{
    return m_is_pending_review_isSet;
}

bool OAILocationState::is_is_pending_review_Valid() const{
    return m_is_pending_review_isValid;
}

bool OAILocationState::isIsPublished() const {
    return m_is_published;
}
void OAILocationState::setIsPublished(const bool &is_published) {
    m_is_published = is_published;
    m_is_published_isSet = true;
}

bool OAILocationState::is_is_published_Set() const{
    return m_is_published_isSet;
}

bool OAILocationState::is_is_published_Valid() const{
    return m_is_published_isValid;
}

bool OAILocationState::isIsSuspended() const {
    return m_is_suspended;
}
void OAILocationState::setIsSuspended(const bool &is_suspended) {
    m_is_suspended = is_suspended;
    m_is_suspended_isSet = true;
}

bool OAILocationState::is_is_suspended_Set() const{
    return m_is_suspended_isSet;
}

bool OAILocationState::is_is_suspended_Valid() const{
    return m_is_suspended_isValid;
}

bool OAILocationState::isIsVerified() const {
    return m_is_verified;
}
void OAILocationState::setIsVerified(const bool &is_verified) {
    m_is_verified = is_verified;
    m_is_verified_isSet = true;
}

bool OAILocationState::is_is_verified_Set() const{
    return m_is_verified_isSet;
}

bool OAILocationState::is_is_verified_Valid() const{
    return m_is_verified_isValid;
}

bool OAILocationState::isNeedsReverification() const {
    return m_needs_reverification;
}
void OAILocationState::setNeedsReverification(const bool &needs_reverification) {
    m_needs_reverification = needs_reverification;
    m_needs_reverification_isSet = true;
}

bool OAILocationState::is_needs_reverification_Set() const{
    return m_needs_reverification_isSet;
}

bool OAILocationState::is_needs_reverification_Valid() const{
    return m_needs_reverification_isValid;
}

bool OAILocationState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_have_food_menus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_modify_service_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_operate_health_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_operate_lodging_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_pending_edits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_pending_verification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_disconnected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_duplicate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_google_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_local_post_api_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_pending_review_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_suspended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_needs_reverification_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocationState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
