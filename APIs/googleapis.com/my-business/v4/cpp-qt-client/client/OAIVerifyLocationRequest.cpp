/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerifyLocationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerifyLocationRequest::OAIVerifyLocationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerifyLocationRequest::OAIVerifyLocationRequest() {
    this->initializeModel();
}

OAIVerifyLocationRequest::~OAIVerifyLocationRequest() {}

void OAIVerifyLocationRequest::initializeModel() {

    m_address_input_isSet = false;
    m_address_input_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_email_input_isSet = false;
    m_email_input_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_phone_input_isSet = false;
    m_phone_input_isValid = false;
}

void OAIVerifyLocationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerifyLocationRequest::fromJsonObject(QJsonObject json) {

    m_address_input_isValid = ::OpenAPI::fromJsonValue(m_address_input, json[QString("addressInput")]);
    m_address_input_isSet = !json[QString("addressInput")].isNull() && m_address_input_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_email_input_isValid = ::OpenAPI::fromJsonValue(m_email_input, json[QString("emailInput")]);
    m_email_input_isSet = !json[QString("emailInput")].isNull() && m_email_input_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_phone_input_isValid = ::OpenAPI::fromJsonValue(m_phone_input, json[QString("phoneInput")]);
    m_phone_input_isSet = !json[QString("phoneInput")].isNull() && m_phone_input_isValid;
}

QString OAIVerifyLocationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerifyLocationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_address_input.isSet()) {
        obj.insert(QString("addressInput"), ::OpenAPI::toJsonValue(m_address_input));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_email_input.isSet()) {
        obj.insert(QString("emailInput"), ::OpenAPI::toJsonValue(m_email_input));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_phone_input.isSet()) {
        obj.insert(QString("phoneInput"), ::OpenAPI::toJsonValue(m_phone_input));
    }
    return obj;
}

OAIAddressInput OAIVerifyLocationRequest::getAddressInput() const {
    return m_address_input;
}
void OAIVerifyLocationRequest::setAddressInput(const OAIAddressInput &address_input) {
    m_address_input = address_input;
    m_address_input_isSet = true;
}

bool OAIVerifyLocationRequest::is_address_input_Set() const{
    return m_address_input_isSet;
}

bool OAIVerifyLocationRequest::is_address_input_Valid() const{
    return m_address_input_isValid;
}

OAIServiceBusinessContext OAIVerifyLocationRequest::getContext() const {
    return m_context;
}
void OAIVerifyLocationRequest::setContext(const OAIServiceBusinessContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIVerifyLocationRequest::is_context_Set() const{
    return m_context_isSet;
}

bool OAIVerifyLocationRequest::is_context_Valid() const{
    return m_context_isValid;
}

OAIEmailInput OAIVerifyLocationRequest::getEmailInput() const {
    return m_email_input;
}
void OAIVerifyLocationRequest::setEmailInput(const OAIEmailInput &email_input) {
    m_email_input = email_input;
    m_email_input_isSet = true;
}

bool OAIVerifyLocationRequest::is_email_input_Set() const{
    return m_email_input_isSet;
}

bool OAIVerifyLocationRequest::is_email_input_Valid() const{
    return m_email_input_isValid;
}

QString OAIVerifyLocationRequest::getLanguageCode() const {
    return m_language_code;
}
void OAIVerifyLocationRequest::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIVerifyLocationRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIVerifyLocationRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIVerifyLocationRequest::getMethod() const {
    return m_method;
}
void OAIVerifyLocationRequest::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIVerifyLocationRequest::is_method_Set() const{
    return m_method_isSet;
}

bool OAIVerifyLocationRequest::is_method_Valid() const{
    return m_method_isValid;
}

OAIPhoneInput OAIVerifyLocationRequest::getPhoneInput() const {
    return m_phone_input;
}
void OAIVerifyLocationRequest::setPhoneInput(const OAIPhoneInput &phone_input) {
    m_phone_input = phone_input;
    m_phone_input_isSet = true;
}

bool OAIVerifyLocationRequest::is_phone_input_Set() const{
    return m_phone_input_isSet;
}

bool OAIVerifyLocationRequest::is_phone_input_Valid() const{
    return m_phone_input_isValid;
}

bool OAIVerifyLocationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_input.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerifyLocationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
