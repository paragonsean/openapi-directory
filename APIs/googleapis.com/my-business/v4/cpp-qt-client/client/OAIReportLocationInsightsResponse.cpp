/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportLocationInsightsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportLocationInsightsResponse::OAIReportLocationInsightsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportLocationInsightsResponse::OAIReportLocationInsightsResponse() {
    this->initializeModel();
}

OAIReportLocationInsightsResponse::~OAIReportLocationInsightsResponse() {}

void OAIReportLocationInsightsResponse::initializeModel() {

    m_location_driving_direction_metrics_isSet = false;
    m_location_driving_direction_metrics_isValid = false;

    m_location_metrics_isSet = false;
    m_location_metrics_isValid = false;
}

void OAIReportLocationInsightsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportLocationInsightsResponse::fromJsonObject(QJsonObject json) {

    m_location_driving_direction_metrics_isValid = ::OpenAPI::fromJsonValue(m_location_driving_direction_metrics, json[QString("locationDrivingDirectionMetrics")]);
    m_location_driving_direction_metrics_isSet = !json[QString("locationDrivingDirectionMetrics")].isNull() && m_location_driving_direction_metrics_isValid;

    m_location_metrics_isValid = ::OpenAPI::fromJsonValue(m_location_metrics, json[QString("locationMetrics")]);
    m_location_metrics_isSet = !json[QString("locationMetrics")].isNull() && m_location_metrics_isValid;
}

QString OAIReportLocationInsightsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportLocationInsightsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_location_driving_direction_metrics.size() > 0) {
        obj.insert(QString("locationDrivingDirectionMetrics"), ::OpenAPI::toJsonValue(m_location_driving_direction_metrics));
    }
    if (m_location_metrics.size() > 0) {
        obj.insert(QString("locationMetrics"), ::OpenAPI::toJsonValue(m_location_metrics));
    }
    return obj;
}

QList<OAILocationDrivingDirectionMetrics> OAIReportLocationInsightsResponse::getLocationDrivingDirectionMetrics() const {
    return m_location_driving_direction_metrics;
}
void OAIReportLocationInsightsResponse::setLocationDrivingDirectionMetrics(const QList<OAILocationDrivingDirectionMetrics> &location_driving_direction_metrics) {
    m_location_driving_direction_metrics = location_driving_direction_metrics;
    m_location_driving_direction_metrics_isSet = true;
}

bool OAIReportLocationInsightsResponse::is_location_driving_direction_metrics_Set() const{
    return m_location_driving_direction_metrics_isSet;
}

bool OAIReportLocationInsightsResponse::is_location_driving_direction_metrics_Valid() const{
    return m_location_driving_direction_metrics_isValid;
}

QList<OAILocationMetrics> OAIReportLocationInsightsResponse::getLocationMetrics() const {
    return m_location_metrics;
}
void OAIReportLocationInsightsResponse::setLocationMetrics(const QList<OAILocationMetrics> &location_metrics) {
    m_location_metrics = location_metrics;
    m_location_metrics_isSet = true;
}

bool OAIReportLocationInsightsResponse::is_location_metrics_Set() const{
    return m_location_metrics_isSet;
}

bool OAIReportLocationInsightsResponse::is_location_metrics_Valid() const{
    return m_location_metrics_isValid;
}

bool OAIReportLocationInsightsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_driving_direction_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportLocationInsightsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
