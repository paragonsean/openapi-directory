/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportLocationInsightsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportLocationInsightsRequest::OAIReportLocationInsightsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportLocationInsightsRequest::OAIReportLocationInsightsRequest() {
    this->initializeModel();
}

OAIReportLocationInsightsRequest::~OAIReportLocationInsightsRequest() {}

void OAIReportLocationInsightsRequest::initializeModel() {

    m_basic_request_isSet = false;
    m_basic_request_isValid = false;

    m_driving_directions_request_isSet = false;
    m_driving_directions_request_isValid = false;

    m_location_names_isSet = false;
    m_location_names_isValid = false;
}

void OAIReportLocationInsightsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportLocationInsightsRequest::fromJsonObject(QJsonObject json) {

    m_basic_request_isValid = ::OpenAPI::fromJsonValue(m_basic_request, json[QString("basicRequest")]);
    m_basic_request_isSet = !json[QString("basicRequest")].isNull() && m_basic_request_isValid;

    m_driving_directions_request_isValid = ::OpenAPI::fromJsonValue(m_driving_directions_request, json[QString("drivingDirectionsRequest")]);
    m_driving_directions_request_isSet = !json[QString("drivingDirectionsRequest")].isNull() && m_driving_directions_request_isValid;

    m_location_names_isValid = ::OpenAPI::fromJsonValue(m_location_names, json[QString("locationNames")]);
    m_location_names_isSet = !json[QString("locationNames")].isNull() && m_location_names_isValid;
}

QString OAIReportLocationInsightsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportLocationInsightsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_basic_request.isSet()) {
        obj.insert(QString("basicRequest"), ::OpenAPI::toJsonValue(m_basic_request));
    }
    if (m_driving_directions_request.isSet()) {
        obj.insert(QString("drivingDirectionsRequest"), ::OpenAPI::toJsonValue(m_driving_directions_request));
    }
    if (m_location_names.size() > 0) {
        obj.insert(QString("locationNames"), ::OpenAPI::toJsonValue(m_location_names));
    }
    return obj;
}

OAIBasicMetricsRequest OAIReportLocationInsightsRequest::getBasicRequest() const {
    return m_basic_request;
}
void OAIReportLocationInsightsRequest::setBasicRequest(const OAIBasicMetricsRequest &basic_request) {
    m_basic_request = basic_request;
    m_basic_request_isSet = true;
}

bool OAIReportLocationInsightsRequest::is_basic_request_Set() const{
    return m_basic_request_isSet;
}

bool OAIReportLocationInsightsRequest::is_basic_request_Valid() const{
    return m_basic_request_isValid;
}

OAIDrivingDirectionMetricsRequest OAIReportLocationInsightsRequest::getDrivingDirectionsRequest() const {
    return m_driving_directions_request;
}
void OAIReportLocationInsightsRequest::setDrivingDirectionsRequest(const OAIDrivingDirectionMetricsRequest &driving_directions_request) {
    m_driving_directions_request = driving_directions_request;
    m_driving_directions_request_isSet = true;
}

bool OAIReportLocationInsightsRequest::is_driving_directions_request_Set() const{
    return m_driving_directions_request_isSet;
}

bool OAIReportLocationInsightsRequest::is_driving_directions_request_Valid() const{
    return m_driving_directions_request_isValid;
}

QList<QString> OAIReportLocationInsightsRequest::getLocationNames() const {
    return m_location_names;
}
void OAIReportLocationInsightsRequest::setLocationNames(const QList<QString> &location_names) {
    m_location_names = location_names;
    m_location_names_isSet = true;
}

bool OAIReportLocationInsightsRequest::is_location_names_Set() const{
    return m_location_names_isSet;
}

bool OAIReportLocationInsightsRequest::is_location_names_Valid() const{
    return m_location_names_isValid;
}

bool OAIReportLocationInsightsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_basic_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_driving_directions_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportLocationInsightsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
