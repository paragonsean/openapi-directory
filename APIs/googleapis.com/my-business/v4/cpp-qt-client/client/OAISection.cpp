/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISection::OAISection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISection::OAISection() {
    this->initializeModel();
}

OAISection::~OAISection() {}

void OAISection::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_section_id_isSet = false;
    m_section_id_isValid = false;

    m_section_type_isSet = false;
    m_section_type_isValid = false;
}

void OAISection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISection::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_section_id_isValid = ::OpenAPI::fromJsonValue(m_section_id, json[QString("sectionId")]);
    m_section_id_isSet = !json[QString("sectionId")].isNull() && m_section_id_isValid;

    m_section_type_isValid = ::OpenAPI::fromJsonValue(m_section_type, json[QString("sectionType")]);
    m_section_type_isSet = !json[QString("sectionType")].isNull() && m_section_type_isValid;
}

QString OAISection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISection::asJsonObject() const {
    QJsonObject obj;
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_section_id_isSet) {
        obj.insert(QString("sectionId"), ::OpenAPI::toJsonValue(m_section_id));
    }
    if (m_section_type_isSet) {
        obj.insert(QString("sectionType"), ::OpenAPI::toJsonValue(m_section_type));
    }
    return obj;
}

QList<OAIItem> OAISection::getItems() const {
    return m_items;
}
void OAISection::setItems(const QList<OAIItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAISection::is_items_Set() const{
    return m_items_isSet;
}

bool OAISection::is_items_Valid() const{
    return m_items_isValid;
}

QList<OAILabel> OAISection::getLabels() const {
    return m_labels;
}
void OAISection::setLabels(const QList<OAILabel> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAISection::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAISection::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAISection::getSectionId() const {
    return m_section_id;
}
void OAISection::setSectionId(const QString &section_id) {
    m_section_id = section_id;
    m_section_id_isSet = true;
}

bool OAISection::is_section_id_Set() const{
    return m_section_id_isSet;
}

bool OAISection::is_section_id_Valid() const{
    return m_section_id_isValid;
}

QString OAISection::getSectionType() const {
    return m_section_type;
}
void OAISection::setSectionType(const QString &section_type) {
    m_section_type = section_type;
    m_section_type_isSet = true;
}

bool OAISection::is_section_type_Set() const{
    return m_section_type_isSet;
}

bool OAISection::is_section_type_Valid() const{
    return m_section_type_isValid;
}

bool OAISection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
