/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_ad_words_location_extensions_isSet = false;
    m_ad_words_location_extensions_isValid = false;

    m_additional_categories_isSet = false;
    m_additional_categories_isValid = false;

    m_additional_phones_isSet = false;
    m_additional_phones_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_latlng_isSet = false;
    m_latlng_isValid = false;

    m_location_key_isSet = false;
    m_location_key_isValid = false;

    m_location_name_isSet = false;
    m_location_name_isValid = false;

    m_location_state_isSet = false;
    m_location_state_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_more_hours_isSet = false;
    m_more_hours_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_open_info_isSet = false;
    m_open_info_isValid = false;

    m_price_lists_isSet = false;
    m_price_lists_isValid = false;

    m_primary_category_isSet = false;
    m_primary_category_isValid = false;

    m_primary_phone_isSet = false;
    m_primary_phone_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_regular_hours_isSet = false;
    m_regular_hours_isValid = false;

    m_relationship_data_isSet = false;
    m_relationship_data_isValid = false;

    m_service_area_isSet = false;
    m_service_area_isValid = false;

    m_special_hours_isSet = false;
    m_special_hours_isValid = false;

    m_store_code_isSet = false;
    m_store_code_isValid = false;

    m_website_url_isSet = false;
    m_website_url_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    m_ad_words_location_extensions_isValid = ::OpenAPI::fromJsonValue(m_ad_words_location_extensions, json[QString("adWordsLocationExtensions")]);
    m_ad_words_location_extensions_isSet = !json[QString("adWordsLocationExtensions")].isNull() && m_ad_words_location_extensions_isValid;

    m_additional_categories_isValid = ::OpenAPI::fromJsonValue(m_additional_categories, json[QString("additionalCategories")]);
    m_additional_categories_isSet = !json[QString("additionalCategories")].isNull() && m_additional_categories_isValid;

    m_additional_phones_isValid = ::OpenAPI::fromJsonValue(m_additional_phones, json[QString("additionalPhones")]);
    m_additional_phones_isSet = !json[QString("additionalPhones")].isNull() && m_additional_phones_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_latlng_isValid = ::OpenAPI::fromJsonValue(m_latlng, json[QString("latlng")]);
    m_latlng_isSet = !json[QString("latlng")].isNull() && m_latlng_isValid;

    m_location_key_isValid = ::OpenAPI::fromJsonValue(m_location_key, json[QString("locationKey")]);
    m_location_key_isSet = !json[QString("locationKey")].isNull() && m_location_key_isValid;

    m_location_name_isValid = ::OpenAPI::fromJsonValue(m_location_name, json[QString("locationName")]);
    m_location_name_isSet = !json[QString("locationName")].isNull() && m_location_name_isValid;

    m_location_state_isValid = ::OpenAPI::fromJsonValue(m_location_state, json[QString("locationState")]);
    m_location_state_isSet = !json[QString("locationState")].isNull() && m_location_state_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_more_hours_isValid = ::OpenAPI::fromJsonValue(m_more_hours, json[QString("moreHours")]);
    m_more_hours_isSet = !json[QString("moreHours")].isNull() && m_more_hours_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_open_info_isValid = ::OpenAPI::fromJsonValue(m_open_info, json[QString("openInfo")]);
    m_open_info_isSet = !json[QString("openInfo")].isNull() && m_open_info_isValid;

    m_price_lists_isValid = ::OpenAPI::fromJsonValue(m_price_lists, json[QString("priceLists")]);
    m_price_lists_isSet = !json[QString("priceLists")].isNull() && m_price_lists_isValid;

    m_primary_category_isValid = ::OpenAPI::fromJsonValue(m_primary_category, json[QString("primaryCategory")]);
    m_primary_category_isSet = !json[QString("primaryCategory")].isNull() && m_primary_category_isValid;

    m_primary_phone_isValid = ::OpenAPI::fromJsonValue(m_primary_phone, json[QString("primaryPhone")]);
    m_primary_phone_isSet = !json[QString("primaryPhone")].isNull() && m_primary_phone_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;

    m_regular_hours_isValid = ::OpenAPI::fromJsonValue(m_regular_hours, json[QString("regularHours")]);
    m_regular_hours_isSet = !json[QString("regularHours")].isNull() && m_regular_hours_isValid;

    m_relationship_data_isValid = ::OpenAPI::fromJsonValue(m_relationship_data, json[QString("relationshipData")]);
    m_relationship_data_isSet = !json[QString("relationshipData")].isNull() && m_relationship_data_isValid;

    m_service_area_isValid = ::OpenAPI::fromJsonValue(m_service_area, json[QString("serviceArea")]);
    m_service_area_isSet = !json[QString("serviceArea")].isNull() && m_service_area_isValid;

    m_special_hours_isValid = ::OpenAPI::fromJsonValue(m_special_hours, json[QString("specialHours")]);
    m_special_hours_isSet = !json[QString("specialHours")].isNull() && m_special_hours_isValid;

    m_store_code_isValid = ::OpenAPI::fromJsonValue(m_store_code, json[QString("storeCode")]);
    m_store_code_isSet = !json[QString("storeCode")].isNull() && m_store_code_isValid;

    m_website_url_isValid = ::OpenAPI::fromJsonValue(m_website_url, json[QString("websiteUrl")]);
    m_website_url_isSet = !json[QString("websiteUrl")].isNull() && m_website_url_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_words_location_extensions.isSet()) {
        obj.insert(QString("adWordsLocationExtensions"), ::OpenAPI::toJsonValue(m_ad_words_location_extensions));
    }
    if (m_additional_categories.size() > 0) {
        obj.insert(QString("additionalCategories"), ::OpenAPI::toJsonValue(m_additional_categories));
    }
    if (m_additional_phones.size() > 0) {
        obj.insert(QString("additionalPhones"), ::OpenAPI::toJsonValue(m_additional_phones));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_latlng.isSet()) {
        obj.insert(QString("latlng"), ::OpenAPI::toJsonValue(m_latlng));
    }
    if (m_location_key.isSet()) {
        obj.insert(QString("locationKey"), ::OpenAPI::toJsonValue(m_location_key));
    }
    if (m_location_name_isSet) {
        obj.insert(QString("locationName"), ::OpenAPI::toJsonValue(m_location_name));
    }
    if (m_location_state.isSet()) {
        obj.insert(QString("locationState"), ::OpenAPI::toJsonValue(m_location_state));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_more_hours.size() > 0) {
        obj.insert(QString("moreHours"), ::OpenAPI::toJsonValue(m_more_hours));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_open_info.isSet()) {
        obj.insert(QString("openInfo"), ::OpenAPI::toJsonValue(m_open_info));
    }
    if (m_price_lists.size() > 0) {
        obj.insert(QString("priceLists"), ::OpenAPI::toJsonValue(m_price_lists));
    }
    if (m_primary_category.isSet()) {
        obj.insert(QString("primaryCategory"), ::OpenAPI::toJsonValue(m_primary_category));
    }
    if (m_primary_phone_isSet) {
        obj.insert(QString("primaryPhone"), ::OpenAPI::toJsonValue(m_primary_phone));
    }
    if (m_profile.isSet()) {
        obj.insert(QString("profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    if (m_regular_hours.isSet()) {
        obj.insert(QString("regularHours"), ::OpenAPI::toJsonValue(m_regular_hours));
    }
    if (m_relationship_data.isSet()) {
        obj.insert(QString("relationshipData"), ::OpenAPI::toJsonValue(m_relationship_data));
    }
    if (m_service_area.isSet()) {
        obj.insert(QString("serviceArea"), ::OpenAPI::toJsonValue(m_service_area));
    }
    if (m_special_hours.isSet()) {
        obj.insert(QString("specialHours"), ::OpenAPI::toJsonValue(m_special_hours));
    }
    if (m_store_code_isSet) {
        obj.insert(QString("storeCode"), ::OpenAPI::toJsonValue(m_store_code));
    }
    if (m_website_url_isSet) {
        obj.insert(QString("websiteUrl"), ::OpenAPI::toJsonValue(m_website_url));
    }
    return obj;
}

OAIAdWordsLocationExtensions OAILocation::getAdWordsLocationExtensions() const {
    return m_ad_words_location_extensions;
}
void OAILocation::setAdWordsLocationExtensions(const OAIAdWordsLocationExtensions &ad_words_location_extensions) {
    m_ad_words_location_extensions = ad_words_location_extensions;
    m_ad_words_location_extensions_isSet = true;
}

bool OAILocation::is_ad_words_location_extensions_Set() const{
    return m_ad_words_location_extensions_isSet;
}

bool OAILocation::is_ad_words_location_extensions_Valid() const{
    return m_ad_words_location_extensions_isValid;
}

QList<OAICategory> OAILocation::getAdditionalCategories() const {
    return m_additional_categories;
}
void OAILocation::setAdditionalCategories(const QList<OAICategory> &additional_categories) {
    m_additional_categories = additional_categories;
    m_additional_categories_isSet = true;
}

bool OAILocation::is_additional_categories_Set() const{
    return m_additional_categories_isSet;
}

bool OAILocation::is_additional_categories_Valid() const{
    return m_additional_categories_isValid;
}

QList<QString> OAILocation::getAdditionalPhones() const {
    return m_additional_phones;
}
void OAILocation::setAdditionalPhones(const QList<QString> &additional_phones) {
    m_additional_phones = additional_phones;
    m_additional_phones_isSet = true;
}

bool OAILocation::is_additional_phones_Set() const{
    return m_additional_phones_isSet;
}

bool OAILocation::is_additional_phones_Valid() const{
    return m_additional_phones_isValid;
}

OAIPostalAddress OAILocation::getAddress() const {
    return m_address;
}
void OAILocation::setAddress(const OAIPostalAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAILocation::is_address_Set() const{
    return m_address_isSet;
}

bool OAILocation::is_address_Valid() const{
    return m_address_isValid;
}

QList<OAIAttribute> OAILocation::getAttributes() const {
    return m_attributes;
}
void OAILocation::setAttributes(const QList<OAIAttribute> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAILocation::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAILocation::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList<QString> OAILocation::getLabels() const {
    return m_labels;
}
void OAILocation::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAILocation::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAILocation::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAILocation::getLanguageCode() const {
    return m_language_code;
}
void OAILocation::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAILocation::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAILocation::is_language_code_Valid() const{
    return m_language_code_isValid;
}

OAILatLng OAILocation::getLatlng() const {
    return m_latlng;
}
void OAILocation::setLatlng(const OAILatLng &latlng) {
    m_latlng = latlng;
    m_latlng_isSet = true;
}

bool OAILocation::is_latlng_Set() const{
    return m_latlng_isSet;
}

bool OAILocation::is_latlng_Valid() const{
    return m_latlng_isValid;
}

OAILocationKey OAILocation::getLocationKey() const {
    return m_location_key;
}
void OAILocation::setLocationKey(const OAILocationKey &location_key) {
    m_location_key = location_key;
    m_location_key_isSet = true;
}

bool OAILocation::is_location_key_Set() const{
    return m_location_key_isSet;
}

bool OAILocation::is_location_key_Valid() const{
    return m_location_key_isValid;
}

QString OAILocation::getLocationName() const {
    return m_location_name;
}
void OAILocation::setLocationName(const QString &location_name) {
    m_location_name = location_name;
    m_location_name_isSet = true;
}

bool OAILocation::is_location_name_Set() const{
    return m_location_name_isSet;
}

bool OAILocation::is_location_name_Valid() const{
    return m_location_name_isValid;
}

OAILocationState OAILocation::getLocationState() const {
    return m_location_state;
}
void OAILocation::setLocationState(const OAILocationState &location_state) {
    m_location_state = location_state;
    m_location_state_isSet = true;
}

bool OAILocation::is_location_state_Set() const{
    return m_location_state_isSet;
}

bool OAILocation::is_location_state_Valid() const{
    return m_location_state_isValid;
}

OAIMetadata OAILocation::getMetadata() const {
    return m_metadata;
}
void OAILocation::setMetadata(const OAIMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAILocation::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAILocation::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIMoreHours> OAILocation::getMoreHours() const {
    return m_more_hours;
}
void OAILocation::setMoreHours(const QList<OAIMoreHours> &more_hours) {
    m_more_hours = more_hours;
    m_more_hours_isSet = true;
}

bool OAILocation::is_more_hours_Set() const{
    return m_more_hours_isSet;
}

bool OAILocation::is_more_hours_Valid() const{
    return m_more_hours_isValid;
}

QString OAILocation::getName() const {
    return m_name;
}
void OAILocation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILocation::is_name_Set() const{
    return m_name_isSet;
}

bool OAILocation::is_name_Valid() const{
    return m_name_isValid;
}

OAIOpenInfo OAILocation::getOpenInfo() const {
    return m_open_info;
}
void OAILocation::setOpenInfo(const OAIOpenInfo &open_info) {
    m_open_info = open_info;
    m_open_info_isSet = true;
}

bool OAILocation::is_open_info_Set() const{
    return m_open_info_isSet;
}

bool OAILocation::is_open_info_Valid() const{
    return m_open_info_isValid;
}

QList<OAIPriceList> OAILocation::getPriceLists() const {
    return m_price_lists;
}
void OAILocation::setPriceLists(const QList<OAIPriceList> &price_lists) {
    m_price_lists = price_lists;
    m_price_lists_isSet = true;
}

bool OAILocation::is_price_lists_Set() const{
    return m_price_lists_isSet;
}

bool OAILocation::is_price_lists_Valid() const{
    return m_price_lists_isValid;
}

OAICategory OAILocation::getPrimaryCategory() const {
    return m_primary_category;
}
void OAILocation::setPrimaryCategory(const OAICategory &primary_category) {
    m_primary_category = primary_category;
    m_primary_category_isSet = true;
}

bool OAILocation::is_primary_category_Set() const{
    return m_primary_category_isSet;
}

bool OAILocation::is_primary_category_Valid() const{
    return m_primary_category_isValid;
}

QString OAILocation::getPrimaryPhone() const {
    return m_primary_phone;
}
void OAILocation::setPrimaryPhone(const QString &primary_phone) {
    m_primary_phone = primary_phone;
    m_primary_phone_isSet = true;
}

bool OAILocation::is_primary_phone_Set() const{
    return m_primary_phone_isSet;
}

bool OAILocation::is_primary_phone_Valid() const{
    return m_primary_phone_isValid;
}

OAIProfile OAILocation::getProfile() const {
    return m_profile;
}
void OAILocation::setProfile(const OAIProfile &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAILocation::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAILocation::is_profile_Valid() const{
    return m_profile_isValid;
}

OAIBusinessHours OAILocation::getRegularHours() const {
    return m_regular_hours;
}
void OAILocation::setRegularHours(const OAIBusinessHours &regular_hours) {
    m_regular_hours = regular_hours;
    m_regular_hours_isSet = true;
}

bool OAILocation::is_regular_hours_Set() const{
    return m_regular_hours_isSet;
}

bool OAILocation::is_regular_hours_Valid() const{
    return m_regular_hours_isValid;
}

OAIRelationshipData OAILocation::getRelationshipData() const {
    return m_relationship_data;
}
void OAILocation::setRelationshipData(const OAIRelationshipData &relationship_data) {
    m_relationship_data = relationship_data;
    m_relationship_data_isSet = true;
}

bool OAILocation::is_relationship_data_Set() const{
    return m_relationship_data_isSet;
}

bool OAILocation::is_relationship_data_Valid() const{
    return m_relationship_data_isValid;
}

OAIServiceAreaBusiness OAILocation::getServiceArea() const {
    return m_service_area;
}
void OAILocation::setServiceArea(const OAIServiceAreaBusiness &service_area) {
    m_service_area = service_area;
    m_service_area_isSet = true;
}

bool OAILocation::is_service_area_Set() const{
    return m_service_area_isSet;
}

bool OAILocation::is_service_area_Valid() const{
    return m_service_area_isValid;
}

OAISpecialHours OAILocation::getSpecialHours() const {
    return m_special_hours;
}
void OAILocation::setSpecialHours(const OAISpecialHours &special_hours) {
    m_special_hours = special_hours;
    m_special_hours_isSet = true;
}

bool OAILocation::is_special_hours_Set() const{
    return m_special_hours_isSet;
}

bool OAILocation::is_special_hours_Valid() const{
    return m_special_hours_isValid;
}

QString OAILocation::getStoreCode() const {
    return m_store_code;
}
void OAILocation::setStoreCode(const QString &store_code) {
    m_store_code = store_code;
    m_store_code_isSet = true;
}

bool OAILocation::is_store_code_Set() const{
    return m_store_code_isSet;
}

bool OAILocation::is_store_code_Valid() const{
    return m_store_code_isValid;
}

QString OAILocation::getWebsiteUrl() const {
    return m_website_url;
}
void OAILocation::setWebsiteUrl(const QString &website_url) {
    m_website_url = website_url;
    m_website_url_isSet = true;
}

bool OAILocation::is_website_url_Set() const{
    return m_website_url_isSet;
}

bool OAILocation::is_website_url_Valid() const{
    return m_website_url_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_words_location_extensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_phones.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latlng.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_hours.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_lists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regular_hours.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_area.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_hours.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
