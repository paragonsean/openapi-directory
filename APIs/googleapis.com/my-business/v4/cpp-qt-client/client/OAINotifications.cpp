/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotifications.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotifications::OAINotifications(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotifications::OAINotifications() {
    this->initializeModel();
}

OAINotifications::~OAINotifications() {}

void OAINotifications::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_types_isSet = false;
    m_notification_types_isValid = false;

    m_topic_name_isSet = false;
    m_topic_name_isValid = false;
}

void OAINotifications::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotifications::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_types_isValid = ::OpenAPI::fromJsonValue(m_notification_types, json[QString("notificationTypes")]);
    m_notification_types_isSet = !json[QString("notificationTypes")].isNull() && m_notification_types_isValid;

    m_topic_name_isValid = ::OpenAPI::fromJsonValue(m_topic_name, json[QString("topicName")]);
    m_topic_name_isSet = !json[QString("topicName")].isNull() && m_topic_name_isValid;
}

QString OAINotifications::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotifications::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification_types.size() > 0) {
        obj.insert(QString("notificationTypes"), ::OpenAPI::toJsonValue(m_notification_types));
    }
    if (m_topic_name_isSet) {
        obj.insert(QString("topicName"), ::OpenAPI::toJsonValue(m_topic_name));
    }
    return obj;
}

QString OAINotifications::getName() const {
    return m_name;
}
void OAINotifications::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINotifications::is_name_Set() const{
    return m_name_isSet;
}

bool OAINotifications::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAINotifications::getNotificationTypes() const {
    return m_notification_types;
}
void OAINotifications::setNotificationTypes(const QList<QString> &notification_types) {
    m_notification_types = notification_types;
    m_notification_types_isSet = true;
}

bool OAINotifications::is_notification_types_Set() const{
    return m_notification_types_isSet;
}

bool OAINotifications::is_notification_types_Valid() const{
    return m_notification_types_isValid;
}

QString OAINotifications::getTopicName() const {
    return m_topic_name;
}
void OAINotifications::setTopicName(const QString &topic_name) {
    m_topic_name = topic_name;
    m_topic_name_isSet = true;
}

bool OAINotifications::is_topic_name_Set() const{
    return m_topic_name_isSet;
}

bool OAINotifications::is_topic_name_Valid() const{
    return m_topic_name_isValid;
}

bool OAINotifications::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotifications::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
