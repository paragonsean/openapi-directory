/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILanguagesSpoken.h
 *
 * Languages spoken by at least one staff member.
 */

#ifndef OAILanguagesSpoken_H
#define OAILanguagesSpoken_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILanguagesSpoken : public OAIObject {
public:
    OAILanguagesSpoken();
    OAILanguagesSpoken(QString json);
    ~OAILanguagesSpoken() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isArabicSpoken() const;
    void setArabicSpoken(const bool &arabic_spoken);
    bool is_arabic_spoken_Set() const;
    bool is_arabic_spoken_Valid() const;

    QString getArabicSpokenException() const;
    void setArabicSpokenException(const QString &arabic_spoken_exception);
    bool is_arabic_spoken_exception_Set() const;
    bool is_arabic_spoken_exception_Valid() const;

    bool isCantoneseSpoken() const;
    void setCantoneseSpoken(const bool &cantonese_spoken);
    bool is_cantonese_spoken_Set() const;
    bool is_cantonese_spoken_Valid() const;

    QString getCantoneseSpokenException() const;
    void setCantoneseSpokenException(const QString &cantonese_spoken_exception);
    bool is_cantonese_spoken_exception_Set() const;
    bool is_cantonese_spoken_exception_Valid() const;

    bool isDutchSpoken() const;
    void setDutchSpoken(const bool &dutch_spoken);
    bool is_dutch_spoken_Set() const;
    bool is_dutch_spoken_Valid() const;

    QString getDutchSpokenException() const;
    void setDutchSpokenException(const QString &dutch_spoken_exception);
    bool is_dutch_spoken_exception_Set() const;
    bool is_dutch_spoken_exception_Valid() const;

    bool isEnglishSpoken() const;
    void setEnglishSpoken(const bool &english_spoken);
    bool is_english_spoken_Set() const;
    bool is_english_spoken_Valid() const;

    QString getEnglishSpokenException() const;
    void setEnglishSpokenException(const QString &english_spoken_exception);
    bool is_english_spoken_exception_Set() const;
    bool is_english_spoken_exception_Valid() const;

    bool isFilipinoSpoken() const;
    void setFilipinoSpoken(const bool &filipino_spoken);
    bool is_filipino_spoken_Set() const;
    bool is_filipino_spoken_Valid() const;

    QString getFilipinoSpokenException() const;
    void setFilipinoSpokenException(const QString &filipino_spoken_exception);
    bool is_filipino_spoken_exception_Set() const;
    bool is_filipino_spoken_exception_Valid() const;

    bool isFrenchSpoken() const;
    void setFrenchSpoken(const bool &french_spoken);
    bool is_french_spoken_Set() const;
    bool is_french_spoken_Valid() const;

    QString getFrenchSpokenException() const;
    void setFrenchSpokenException(const QString &french_spoken_exception);
    bool is_french_spoken_exception_Set() const;
    bool is_french_spoken_exception_Valid() const;

    bool isGermanSpoken() const;
    void setGermanSpoken(const bool &german_spoken);
    bool is_german_spoken_Set() const;
    bool is_german_spoken_Valid() const;

    QString getGermanSpokenException() const;
    void setGermanSpokenException(const QString &german_spoken_exception);
    bool is_german_spoken_exception_Set() const;
    bool is_german_spoken_exception_Valid() const;

    bool isHindiSpoken() const;
    void setHindiSpoken(const bool &hindi_spoken);
    bool is_hindi_spoken_Set() const;
    bool is_hindi_spoken_Valid() const;

    QString getHindiSpokenException() const;
    void setHindiSpokenException(const QString &hindi_spoken_exception);
    bool is_hindi_spoken_exception_Set() const;
    bool is_hindi_spoken_exception_Valid() const;

    bool isIndonesianSpoken() const;
    void setIndonesianSpoken(const bool &indonesian_spoken);
    bool is_indonesian_spoken_Set() const;
    bool is_indonesian_spoken_Valid() const;

    QString getIndonesianSpokenException() const;
    void setIndonesianSpokenException(const QString &indonesian_spoken_exception);
    bool is_indonesian_spoken_exception_Set() const;
    bool is_indonesian_spoken_exception_Valid() const;

    bool isItalianSpoken() const;
    void setItalianSpoken(const bool &italian_spoken);
    bool is_italian_spoken_Set() const;
    bool is_italian_spoken_Valid() const;

    QString getItalianSpokenException() const;
    void setItalianSpokenException(const QString &italian_spoken_exception);
    bool is_italian_spoken_exception_Set() const;
    bool is_italian_spoken_exception_Valid() const;

    bool isJapaneseSpoken() const;
    void setJapaneseSpoken(const bool &japanese_spoken);
    bool is_japanese_spoken_Set() const;
    bool is_japanese_spoken_Valid() const;

    QString getJapaneseSpokenException() const;
    void setJapaneseSpokenException(const QString &japanese_spoken_exception);
    bool is_japanese_spoken_exception_Set() const;
    bool is_japanese_spoken_exception_Valid() const;

    bool isKoreanSpoken() const;
    void setKoreanSpoken(const bool &korean_spoken);
    bool is_korean_spoken_Set() const;
    bool is_korean_spoken_Valid() const;

    QString getKoreanSpokenException() const;
    void setKoreanSpokenException(const QString &korean_spoken_exception);
    bool is_korean_spoken_exception_Set() const;
    bool is_korean_spoken_exception_Valid() const;

    bool isMandarinSpoken() const;
    void setMandarinSpoken(const bool &mandarin_spoken);
    bool is_mandarin_spoken_Set() const;
    bool is_mandarin_spoken_Valid() const;

    QString getMandarinSpokenException() const;
    void setMandarinSpokenException(const QString &mandarin_spoken_exception);
    bool is_mandarin_spoken_exception_Set() const;
    bool is_mandarin_spoken_exception_Valid() const;

    bool isPortugueseSpoken() const;
    void setPortugueseSpoken(const bool &portuguese_spoken);
    bool is_portuguese_spoken_Set() const;
    bool is_portuguese_spoken_Valid() const;

    QString getPortugueseSpokenException() const;
    void setPortugueseSpokenException(const QString &portuguese_spoken_exception);
    bool is_portuguese_spoken_exception_Set() const;
    bool is_portuguese_spoken_exception_Valid() const;

    bool isRussianSpoken() const;
    void setRussianSpoken(const bool &russian_spoken);
    bool is_russian_spoken_Set() const;
    bool is_russian_spoken_Valid() const;

    QString getRussianSpokenException() const;
    void setRussianSpokenException(const QString &russian_spoken_exception);
    bool is_russian_spoken_exception_Set() const;
    bool is_russian_spoken_exception_Valid() const;

    bool isSpanishSpoken() const;
    void setSpanishSpoken(const bool &spanish_spoken);
    bool is_spanish_spoken_Set() const;
    bool is_spanish_spoken_Valid() const;

    QString getSpanishSpokenException() const;
    void setSpanishSpokenException(const QString &spanish_spoken_exception);
    bool is_spanish_spoken_exception_Set() const;
    bool is_spanish_spoken_exception_Valid() const;

    bool isVietnameseSpoken() const;
    void setVietnameseSpoken(const bool &vietnamese_spoken);
    bool is_vietnamese_spoken_Set() const;
    bool is_vietnamese_spoken_Valid() const;

    QString getVietnameseSpokenException() const;
    void setVietnameseSpokenException(const QString &vietnamese_spoken_exception);
    bool is_vietnamese_spoken_exception_Set() const;
    bool is_vietnamese_spoken_exception_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_arabic_spoken;
    bool m_arabic_spoken_isSet;
    bool m_arabic_spoken_isValid;

    QString m_arabic_spoken_exception;
    bool m_arabic_spoken_exception_isSet;
    bool m_arabic_spoken_exception_isValid;

    bool m_cantonese_spoken;
    bool m_cantonese_spoken_isSet;
    bool m_cantonese_spoken_isValid;

    QString m_cantonese_spoken_exception;
    bool m_cantonese_spoken_exception_isSet;
    bool m_cantonese_spoken_exception_isValid;

    bool m_dutch_spoken;
    bool m_dutch_spoken_isSet;
    bool m_dutch_spoken_isValid;

    QString m_dutch_spoken_exception;
    bool m_dutch_spoken_exception_isSet;
    bool m_dutch_spoken_exception_isValid;

    bool m_english_spoken;
    bool m_english_spoken_isSet;
    bool m_english_spoken_isValid;

    QString m_english_spoken_exception;
    bool m_english_spoken_exception_isSet;
    bool m_english_spoken_exception_isValid;

    bool m_filipino_spoken;
    bool m_filipino_spoken_isSet;
    bool m_filipino_spoken_isValid;

    QString m_filipino_spoken_exception;
    bool m_filipino_spoken_exception_isSet;
    bool m_filipino_spoken_exception_isValid;

    bool m_french_spoken;
    bool m_french_spoken_isSet;
    bool m_french_spoken_isValid;

    QString m_french_spoken_exception;
    bool m_french_spoken_exception_isSet;
    bool m_french_spoken_exception_isValid;

    bool m_german_spoken;
    bool m_german_spoken_isSet;
    bool m_german_spoken_isValid;

    QString m_german_spoken_exception;
    bool m_german_spoken_exception_isSet;
    bool m_german_spoken_exception_isValid;

    bool m_hindi_spoken;
    bool m_hindi_spoken_isSet;
    bool m_hindi_spoken_isValid;

    QString m_hindi_spoken_exception;
    bool m_hindi_spoken_exception_isSet;
    bool m_hindi_spoken_exception_isValid;

    bool m_indonesian_spoken;
    bool m_indonesian_spoken_isSet;
    bool m_indonesian_spoken_isValid;

    QString m_indonesian_spoken_exception;
    bool m_indonesian_spoken_exception_isSet;
    bool m_indonesian_spoken_exception_isValid;

    bool m_italian_spoken;
    bool m_italian_spoken_isSet;
    bool m_italian_spoken_isValid;

    QString m_italian_spoken_exception;
    bool m_italian_spoken_exception_isSet;
    bool m_italian_spoken_exception_isValid;

    bool m_japanese_spoken;
    bool m_japanese_spoken_isSet;
    bool m_japanese_spoken_isValid;

    QString m_japanese_spoken_exception;
    bool m_japanese_spoken_exception_isSet;
    bool m_japanese_spoken_exception_isValid;

    bool m_korean_spoken;
    bool m_korean_spoken_isSet;
    bool m_korean_spoken_isValid;

    QString m_korean_spoken_exception;
    bool m_korean_spoken_exception_isSet;
    bool m_korean_spoken_exception_isValid;

    bool m_mandarin_spoken;
    bool m_mandarin_spoken_isSet;
    bool m_mandarin_spoken_isValid;

    QString m_mandarin_spoken_exception;
    bool m_mandarin_spoken_exception_isSet;
    bool m_mandarin_spoken_exception_isValid;

    bool m_portuguese_spoken;
    bool m_portuguese_spoken_isSet;
    bool m_portuguese_spoken_isValid;

    QString m_portuguese_spoken_exception;
    bool m_portuguese_spoken_exception_isSet;
    bool m_portuguese_spoken_exception_isValid;

    bool m_russian_spoken;
    bool m_russian_spoken_isSet;
    bool m_russian_spoken_isValid;

    QString m_russian_spoken_exception;
    bool m_russian_spoken_exception_isSet;
    bool m_russian_spoken_exception_isValid;

    bool m_spanish_spoken;
    bool m_spanish_spoken_isSet;
    bool m_spanish_spoken_isValid;

    QString m_spanish_spoken_exception;
    bool m_spanish_spoken_exception_isSet;
    bool m_spanish_spoken_exception_isValid;

    bool m_vietnamese_spoken;
    bool m_vietnamese_spoken_isSet;
    bool m_vietnamese_spoken_isValid;

    QString m_vietnamese_spoken_exception;
    bool m_vietnamese_spoken_exception_isSet;
    bool m_vietnamese_spoken_exception_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILanguagesSpoken)

#endif // OAILanguagesSpoken_H
