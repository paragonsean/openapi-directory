/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationKey::OAILocationKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationKey::OAILocationKey() {
    this->initializeModel();
}

OAILocationKey::~OAILocationKey() {}

void OAILocationKey::initializeModel() {

    m_explicit_no_place_id_isSet = false;
    m_explicit_no_place_id_isValid = false;

    m_place_id_isSet = false;
    m_place_id_isValid = false;

    m_plus_page_id_isSet = false;
    m_plus_page_id_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAILocationKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocationKey::fromJsonObject(QJsonObject json) {

    m_explicit_no_place_id_isValid = ::OpenAPI::fromJsonValue(m_explicit_no_place_id, json[QString("explicitNoPlaceId")]);
    m_explicit_no_place_id_isSet = !json[QString("explicitNoPlaceId")].isNull() && m_explicit_no_place_id_isValid;

    m_place_id_isValid = ::OpenAPI::fromJsonValue(m_place_id, json[QString("placeId")]);
    m_place_id_isSet = !json[QString("placeId")].isNull() && m_place_id_isValid;

    m_plus_page_id_isValid = ::OpenAPI::fromJsonValue(m_plus_page_id, json[QString("plusPageId")]);
    m_plus_page_id_isSet = !json[QString("plusPageId")].isNull() && m_plus_page_id_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;
}

QString OAILocationKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocationKey::asJsonObject() const {
    QJsonObject obj;
    if (m_explicit_no_place_id_isSet) {
        obj.insert(QString("explicitNoPlaceId"), ::OpenAPI::toJsonValue(m_explicit_no_place_id));
    }
    if (m_place_id_isSet) {
        obj.insert(QString("placeId"), ::OpenAPI::toJsonValue(m_place_id));
    }
    if (m_plus_page_id_isSet) {
        obj.insert(QString("plusPageId"), ::OpenAPI::toJsonValue(m_plus_page_id));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

bool OAILocationKey::isExplicitNoPlaceId() const {
    return m_explicit_no_place_id;
}
void OAILocationKey::setExplicitNoPlaceId(const bool &explicit_no_place_id) {
    m_explicit_no_place_id = explicit_no_place_id;
    m_explicit_no_place_id_isSet = true;
}

bool OAILocationKey::is_explicit_no_place_id_Set() const{
    return m_explicit_no_place_id_isSet;
}

bool OAILocationKey::is_explicit_no_place_id_Valid() const{
    return m_explicit_no_place_id_isValid;
}

QString OAILocationKey::getPlaceId() const {
    return m_place_id;
}
void OAILocationKey::setPlaceId(const QString &place_id) {
    m_place_id = place_id;
    m_place_id_isSet = true;
}

bool OAILocationKey::is_place_id_Set() const{
    return m_place_id_isSet;
}

bool OAILocationKey::is_place_id_Valid() const{
    return m_place_id_isValid;
}

QString OAILocationKey::getPlusPageId() const {
    return m_plus_page_id;
}
void OAILocationKey::setPlusPageId(const QString &plus_page_id) {
    m_plus_page_id = plus_page_id;
    m_plus_page_id_isSet = true;
}

bool OAILocationKey::is_plus_page_id_Set() const{
    return m_plus_page_id_isSet;
}

bool OAILocationKey::is_plus_page_id_Valid() const{
    return m_plus_page_id_isValid;
}

QString OAILocationKey::getRequestId() const {
    return m_request_id;
}
void OAILocationKey::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAILocationKey::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAILocationKey::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAILocationKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_explicit_no_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plus_page_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocationKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
