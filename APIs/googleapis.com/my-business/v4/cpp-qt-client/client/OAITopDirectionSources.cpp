/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopDirectionSources.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopDirectionSources::OAITopDirectionSources(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopDirectionSources::OAITopDirectionSources() {
    this->initializeModel();
}

OAITopDirectionSources::~OAITopDirectionSources() {}

void OAITopDirectionSources::initializeModel() {

    m_day_count_isSet = false;
    m_day_count_isValid = false;

    m_region_counts_isSet = false;
    m_region_counts_isValid = false;
}

void OAITopDirectionSources::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopDirectionSources::fromJsonObject(QJsonObject json) {

    m_day_count_isValid = ::OpenAPI::fromJsonValue(m_day_count, json[QString("dayCount")]);
    m_day_count_isSet = !json[QString("dayCount")].isNull() && m_day_count_isValid;

    m_region_counts_isValid = ::OpenAPI::fromJsonValue(m_region_counts, json[QString("regionCounts")]);
    m_region_counts_isSet = !json[QString("regionCounts")].isNull() && m_region_counts_isValid;
}

QString OAITopDirectionSources::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopDirectionSources::asJsonObject() const {
    QJsonObject obj;
    if (m_day_count_isSet) {
        obj.insert(QString("dayCount"), ::OpenAPI::toJsonValue(m_day_count));
    }
    if (m_region_counts.size() > 0) {
        obj.insert(QString("regionCounts"), ::OpenAPI::toJsonValue(m_region_counts));
    }
    return obj;
}

qint32 OAITopDirectionSources::getDayCount() const {
    return m_day_count;
}
void OAITopDirectionSources::setDayCount(const qint32 &day_count) {
    m_day_count = day_count;
    m_day_count_isSet = true;
}

bool OAITopDirectionSources::is_day_count_Set() const{
    return m_day_count_isSet;
}

bool OAITopDirectionSources::is_day_count_Valid() const{
    return m_day_count_isValid;
}

QList<OAIRegionCount> OAITopDirectionSources::getRegionCounts() const {
    return m_region_counts;
}
void OAITopDirectionSources::setRegionCounts(const QList<OAIRegionCount> &region_counts) {
    m_region_counts = region_counts;
    m_region_counts_isSet = true;
}

bool OAITopDirectionSources::is_region_counts_Set() const{
    return m_region_counts_isSet;
}

bool OAITopDirectionSources::is_region_counts_Valid() const{
    return m_region_counts_isValid;
}

bool OAITopDirectionSources::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopDirectionSources::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
