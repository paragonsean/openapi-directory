/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationDrivingDirectionMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationDrivingDirectionMetrics::OAILocationDrivingDirectionMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationDrivingDirectionMetrics::OAILocationDrivingDirectionMetrics() {
    this->initializeModel();
}

OAILocationDrivingDirectionMetrics::~OAILocationDrivingDirectionMetrics() {}

void OAILocationDrivingDirectionMetrics::initializeModel() {

    m_location_name_isSet = false;
    m_location_name_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_top_direction_sources_isSet = false;
    m_top_direction_sources_isValid = false;
}

void OAILocationDrivingDirectionMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocationDrivingDirectionMetrics::fromJsonObject(QJsonObject json) {

    m_location_name_isValid = ::OpenAPI::fromJsonValue(m_location_name, json[QString("locationName")]);
    m_location_name_isSet = !json[QString("locationName")].isNull() && m_location_name_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_top_direction_sources_isValid = ::OpenAPI::fromJsonValue(m_top_direction_sources, json[QString("topDirectionSources")]);
    m_top_direction_sources_isSet = !json[QString("topDirectionSources")].isNull() && m_top_direction_sources_isValid;
}

QString OAILocationDrivingDirectionMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocationDrivingDirectionMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_location_name_isSet) {
        obj.insert(QString("locationName"), ::OpenAPI::toJsonValue(m_location_name));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_top_direction_sources.size() > 0) {
        obj.insert(QString("topDirectionSources"), ::OpenAPI::toJsonValue(m_top_direction_sources));
    }
    return obj;
}

QString OAILocationDrivingDirectionMetrics::getLocationName() const {
    return m_location_name;
}
void OAILocationDrivingDirectionMetrics::setLocationName(const QString &location_name) {
    m_location_name = location_name;
    m_location_name_isSet = true;
}

bool OAILocationDrivingDirectionMetrics::is_location_name_Set() const{
    return m_location_name_isSet;
}

bool OAILocationDrivingDirectionMetrics::is_location_name_Valid() const{
    return m_location_name_isValid;
}

QString OAILocationDrivingDirectionMetrics::getTimeZone() const {
    return m_time_zone;
}
void OAILocationDrivingDirectionMetrics::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAILocationDrivingDirectionMetrics::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAILocationDrivingDirectionMetrics::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QList<OAITopDirectionSources> OAILocationDrivingDirectionMetrics::getTopDirectionSources() const {
    return m_top_direction_sources;
}
void OAILocationDrivingDirectionMetrics::setTopDirectionSources(const QList<OAITopDirectionSources> &top_direction_sources) {
    m_top_direction_sources = top_direction_sources;
    m_top_direction_sources_isSet = true;
}

bool OAILocationDrivingDirectionMetrics::is_top_direction_sources_Set() const{
    return m_top_direction_sources_isSet;
}

bool OAILocationDrivingDirectionMetrics::is_top_direction_sources_Valid() const{
    return m_top_direction_sources_isValid;
}

bool OAILocationDrivingDirectionMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_direction_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocationDrivingDirectionMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
