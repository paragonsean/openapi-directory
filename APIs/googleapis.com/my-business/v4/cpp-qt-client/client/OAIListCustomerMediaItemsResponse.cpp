/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCustomerMediaItemsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCustomerMediaItemsResponse::OAIListCustomerMediaItemsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCustomerMediaItemsResponse::OAIListCustomerMediaItemsResponse() {
    this->initializeModel();
}

OAIListCustomerMediaItemsResponse::~OAIListCustomerMediaItemsResponse() {}

void OAIListCustomerMediaItemsResponse::initializeModel() {

    m_media_items_isSet = false;
    m_media_items_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_total_media_item_count_isSet = false;
    m_total_media_item_count_isValid = false;
}

void OAIListCustomerMediaItemsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCustomerMediaItemsResponse::fromJsonObject(QJsonObject json) {

    m_media_items_isValid = ::OpenAPI::fromJsonValue(m_media_items, json[QString("mediaItems")]);
    m_media_items_isSet = !json[QString("mediaItems")].isNull() && m_media_items_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_total_media_item_count_isValid = ::OpenAPI::fromJsonValue(m_total_media_item_count, json[QString("totalMediaItemCount")]);
    m_total_media_item_count_isSet = !json[QString("totalMediaItemCount")].isNull() && m_total_media_item_count_isValid;
}

QString OAIListCustomerMediaItemsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCustomerMediaItemsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_media_items.size() > 0) {
        obj.insert(QString("mediaItems"), ::OpenAPI::toJsonValue(m_media_items));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_total_media_item_count_isSet) {
        obj.insert(QString("totalMediaItemCount"), ::OpenAPI::toJsonValue(m_total_media_item_count));
    }
    return obj;
}

QList<OAIMediaItem> OAIListCustomerMediaItemsResponse::getMediaItems() const {
    return m_media_items;
}
void OAIListCustomerMediaItemsResponse::setMediaItems(const QList<OAIMediaItem> &media_items) {
    m_media_items = media_items;
    m_media_items_isSet = true;
}

bool OAIListCustomerMediaItemsResponse::is_media_items_Set() const{
    return m_media_items_isSet;
}

bool OAIListCustomerMediaItemsResponse::is_media_items_Valid() const{
    return m_media_items_isValid;
}

QString OAIListCustomerMediaItemsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListCustomerMediaItemsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListCustomerMediaItemsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListCustomerMediaItemsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

qint32 OAIListCustomerMediaItemsResponse::getTotalMediaItemCount() const {
    return m_total_media_item_count;
}
void OAIListCustomerMediaItemsResponse::setTotalMediaItemCount(const qint32 &total_media_item_count) {
    m_total_media_item_count = total_media_item_count;
    m_total_media_item_count_isSet = true;
}

bool OAIListCustomerMediaItemsResponse::is_total_media_item_count_Set() const{
    return m_total_media_item_count_isSet;
}

bool OAIListCustomerMediaItemsResponse::is_total_media_item_count_Valid() const{
    return m_total_media_item_count_isValid;
}

bool OAIListCustomerMediaItemsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_media_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCustomerMediaItemsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
