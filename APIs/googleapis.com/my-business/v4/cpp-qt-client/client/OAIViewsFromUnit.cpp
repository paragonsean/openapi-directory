/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIViewsFromUnit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIViewsFromUnit::OAIViewsFromUnit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIViewsFromUnit::OAIViewsFromUnit() {
    this->initializeModel();
}

OAIViewsFromUnit::~OAIViewsFromUnit() {}

void OAIViewsFromUnit::initializeModel() {

    m_beach_view_isSet = false;
    m_beach_view_isValid = false;

    m_beach_view_exception_isSet = false;
    m_beach_view_exception_isValid = false;

    m_city_view_isSet = false;
    m_city_view_isValid = false;

    m_city_view_exception_isSet = false;
    m_city_view_exception_isValid = false;

    m_garden_view_isSet = false;
    m_garden_view_isValid = false;

    m_garden_view_exception_isSet = false;
    m_garden_view_exception_isValid = false;

    m_lake_view_isSet = false;
    m_lake_view_isValid = false;

    m_lake_view_exception_isSet = false;
    m_lake_view_exception_isValid = false;

    m_landmark_view_isSet = false;
    m_landmark_view_isValid = false;

    m_landmark_view_exception_isSet = false;
    m_landmark_view_exception_isValid = false;

    m_ocean_view_isSet = false;
    m_ocean_view_isValid = false;

    m_ocean_view_exception_isSet = false;
    m_ocean_view_exception_isValid = false;

    m_pool_view_isSet = false;
    m_pool_view_isValid = false;

    m_pool_view_exception_isSet = false;
    m_pool_view_exception_isValid = false;

    m_valley_view_isSet = false;
    m_valley_view_isValid = false;

    m_valley_view_exception_isSet = false;
    m_valley_view_exception_isValid = false;
}

void OAIViewsFromUnit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIViewsFromUnit::fromJsonObject(QJsonObject json) {

    m_beach_view_isValid = ::OpenAPI::fromJsonValue(m_beach_view, json[QString("beachView")]);
    m_beach_view_isSet = !json[QString("beachView")].isNull() && m_beach_view_isValid;

    m_beach_view_exception_isValid = ::OpenAPI::fromJsonValue(m_beach_view_exception, json[QString("beachViewException")]);
    m_beach_view_exception_isSet = !json[QString("beachViewException")].isNull() && m_beach_view_exception_isValid;

    m_city_view_isValid = ::OpenAPI::fromJsonValue(m_city_view, json[QString("cityView")]);
    m_city_view_isSet = !json[QString("cityView")].isNull() && m_city_view_isValid;

    m_city_view_exception_isValid = ::OpenAPI::fromJsonValue(m_city_view_exception, json[QString("cityViewException")]);
    m_city_view_exception_isSet = !json[QString("cityViewException")].isNull() && m_city_view_exception_isValid;

    m_garden_view_isValid = ::OpenAPI::fromJsonValue(m_garden_view, json[QString("gardenView")]);
    m_garden_view_isSet = !json[QString("gardenView")].isNull() && m_garden_view_isValid;

    m_garden_view_exception_isValid = ::OpenAPI::fromJsonValue(m_garden_view_exception, json[QString("gardenViewException")]);
    m_garden_view_exception_isSet = !json[QString("gardenViewException")].isNull() && m_garden_view_exception_isValid;

    m_lake_view_isValid = ::OpenAPI::fromJsonValue(m_lake_view, json[QString("lakeView")]);
    m_lake_view_isSet = !json[QString("lakeView")].isNull() && m_lake_view_isValid;

    m_lake_view_exception_isValid = ::OpenAPI::fromJsonValue(m_lake_view_exception, json[QString("lakeViewException")]);
    m_lake_view_exception_isSet = !json[QString("lakeViewException")].isNull() && m_lake_view_exception_isValid;

    m_landmark_view_isValid = ::OpenAPI::fromJsonValue(m_landmark_view, json[QString("landmarkView")]);
    m_landmark_view_isSet = !json[QString("landmarkView")].isNull() && m_landmark_view_isValid;

    m_landmark_view_exception_isValid = ::OpenAPI::fromJsonValue(m_landmark_view_exception, json[QString("landmarkViewException")]);
    m_landmark_view_exception_isSet = !json[QString("landmarkViewException")].isNull() && m_landmark_view_exception_isValid;

    m_ocean_view_isValid = ::OpenAPI::fromJsonValue(m_ocean_view, json[QString("oceanView")]);
    m_ocean_view_isSet = !json[QString("oceanView")].isNull() && m_ocean_view_isValid;

    m_ocean_view_exception_isValid = ::OpenAPI::fromJsonValue(m_ocean_view_exception, json[QString("oceanViewException")]);
    m_ocean_view_exception_isSet = !json[QString("oceanViewException")].isNull() && m_ocean_view_exception_isValid;

    m_pool_view_isValid = ::OpenAPI::fromJsonValue(m_pool_view, json[QString("poolView")]);
    m_pool_view_isSet = !json[QString("poolView")].isNull() && m_pool_view_isValid;

    m_pool_view_exception_isValid = ::OpenAPI::fromJsonValue(m_pool_view_exception, json[QString("poolViewException")]);
    m_pool_view_exception_isSet = !json[QString("poolViewException")].isNull() && m_pool_view_exception_isValid;

    m_valley_view_isValid = ::OpenAPI::fromJsonValue(m_valley_view, json[QString("valleyView")]);
    m_valley_view_isSet = !json[QString("valleyView")].isNull() && m_valley_view_isValid;

    m_valley_view_exception_isValid = ::OpenAPI::fromJsonValue(m_valley_view_exception, json[QString("valleyViewException")]);
    m_valley_view_exception_isSet = !json[QString("valleyViewException")].isNull() && m_valley_view_exception_isValid;
}

QString OAIViewsFromUnit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIViewsFromUnit::asJsonObject() const {
    QJsonObject obj;
    if (m_beach_view_isSet) {
        obj.insert(QString("beachView"), ::OpenAPI::toJsonValue(m_beach_view));
    }
    if (m_beach_view_exception_isSet) {
        obj.insert(QString("beachViewException"), ::OpenAPI::toJsonValue(m_beach_view_exception));
    }
    if (m_city_view_isSet) {
        obj.insert(QString("cityView"), ::OpenAPI::toJsonValue(m_city_view));
    }
    if (m_city_view_exception_isSet) {
        obj.insert(QString("cityViewException"), ::OpenAPI::toJsonValue(m_city_view_exception));
    }
    if (m_garden_view_isSet) {
        obj.insert(QString("gardenView"), ::OpenAPI::toJsonValue(m_garden_view));
    }
    if (m_garden_view_exception_isSet) {
        obj.insert(QString("gardenViewException"), ::OpenAPI::toJsonValue(m_garden_view_exception));
    }
    if (m_lake_view_isSet) {
        obj.insert(QString("lakeView"), ::OpenAPI::toJsonValue(m_lake_view));
    }
    if (m_lake_view_exception_isSet) {
        obj.insert(QString("lakeViewException"), ::OpenAPI::toJsonValue(m_lake_view_exception));
    }
    if (m_landmark_view_isSet) {
        obj.insert(QString("landmarkView"), ::OpenAPI::toJsonValue(m_landmark_view));
    }
    if (m_landmark_view_exception_isSet) {
        obj.insert(QString("landmarkViewException"), ::OpenAPI::toJsonValue(m_landmark_view_exception));
    }
    if (m_ocean_view_isSet) {
        obj.insert(QString("oceanView"), ::OpenAPI::toJsonValue(m_ocean_view));
    }
    if (m_ocean_view_exception_isSet) {
        obj.insert(QString("oceanViewException"), ::OpenAPI::toJsonValue(m_ocean_view_exception));
    }
    if (m_pool_view_isSet) {
        obj.insert(QString("poolView"), ::OpenAPI::toJsonValue(m_pool_view));
    }
    if (m_pool_view_exception_isSet) {
        obj.insert(QString("poolViewException"), ::OpenAPI::toJsonValue(m_pool_view_exception));
    }
    if (m_valley_view_isSet) {
        obj.insert(QString("valleyView"), ::OpenAPI::toJsonValue(m_valley_view));
    }
    if (m_valley_view_exception_isSet) {
        obj.insert(QString("valleyViewException"), ::OpenAPI::toJsonValue(m_valley_view_exception));
    }
    return obj;
}

bool OAIViewsFromUnit::isBeachView() const {
    return m_beach_view;
}
void OAIViewsFromUnit::setBeachView(const bool &beach_view) {
    m_beach_view = beach_view;
    m_beach_view_isSet = true;
}

bool OAIViewsFromUnit::is_beach_view_Set() const{
    return m_beach_view_isSet;
}

bool OAIViewsFromUnit::is_beach_view_Valid() const{
    return m_beach_view_isValid;
}

QString OAIViewsFromUnit::getBeachViewException() const {
    return m_beach_view_exception;
}
void OAIViewsFromUnit::setBeachViewException(const QString &beach_view_exception) {
    m_beach_view_exception = beach_view_exception;
    m_beach_view_exception_isSet = true;
}

bool OAIViewsFromUnit::is_beach_view_exception_Set() const{
    return m_beach_view_exception_isSet;
}

bool OAIViewsFromUnit::is_beach_view_exception_Valid() const{
    return m_beach_view_exception_isValid;
}

bool OAIViewsFromUnit::isCityView() const {
    return m_city_view;
}
void OAIViewsFromUnit::setCityView(const bool &city_view) {
    m_city_view = city_view;
    m_city_view_isSet = true;
}

bool OAIViewsFromUnit::is_city_view_Set() const{
    return m_city_view_isSet;
}

bool OAIViewsFromUnit::is_city_view_Valid() const{
    return m_city_view_isValid;
}

QString OAIViewsFromUnit::getCityViewException() const {
    return m_city_view_exception;
}
void OAIViewsFromUnit::setCityViewException(const QString &city_view_exception) {
    m_city_view_exception = city_view_exception;
    m_city_view_exception_isSet = true;
}

bool OAIViewsFromUnit::is_city_view_exception_Set() const{
    return m_city_view_exception_isSet;
}

bool OAIViewsFromUnit::is_city_view_exception_Valid() const{
    return m_city_view_exception_isValid;
}

bool OAIViewsFromUnit::isGardenView() const {
    return m_garden_view;
}
void OAIViewsFromUnit::setGardenView(const bool &garden_view) {
    m_garden_view = garden_view;
    m_garden_view_isSet = true;
}

bool OAIViewsFromUnit::is_garden_view_Set() const{
    return m_garden_view_isSet;
}

bool OAIViewsFromUnit::is_garden_view_Valid() const{
    return m_garden_view_isValid;
}

QString OAIViewsFromUnit::getGardenViewException() const {
    return m_garden_view_exception;
}
void OAIViewsFromUnit::setGardenViewException(const QString &garden_view_exception) {
    m_garden_view_exception = garden_view_exception;
    m_garden_view_exception_isSet = true;
}

bool OAIViewsFromUnit::is_garden_view_exception_Set() const{
    return m_garden_view_exception_isSet;
}

bool OAIViewsFromUnit::is_garden_view_exception_Valid() const{
    return m_garden_view_exception_isValid;
}

bool OAIViewsFromUnit::isLakeView() const {
    return m_lake_view;
}
void OAIViewsFromUnit::setLakeView(const bool &lake_view) {
    m_lake_view = lake_view;
    m_lake_view_isSet = true;
}

bool OAIViewsFromUnit::is_lake_view_Set() const{
    return m_lake_view_isSet;
}

bool OAIViewsFromUnit::is_lake_view_Valid() const{
    return m_lake_view_isValid;
}

QString OAIViewsFromUnit::getLakeViewException() const {
    return m_lake_view_exception;
}
void OAIViewsFromUnit::setLakeViewException(const QString &lake_view_exception) {
    m_lake_view_exception = lake_view_exception;
    m_lake_view_exception_isSet = true;
}

bool OAIViewsFromUnit::is_lake_view_exception_Set() const{
    return m_lake_view_exception_isSet;
}

bool OAIViewsFromUnit::is_lake_view_exception_Valid() const{
    return m_lake_view_exception_isValid;
}

bool OAIViewsFromUnit::isLandmarkView() const {
    return m_landmark_view;
}
void OAIViewsFromUnit::setLandmarkView(const bool &landmark_view) {
    m_landmark_view = landmark_view;
    m_landmark_view_isSet = true;
}

bool OAIViewsFromUnit::is_landmark_view_Set() const{
    return m_landmark_view_isSet;
}

bool OAIViewsFromUnit::is_landmark_view_Valid() const{
    return m_landmark_view_isValid;
}

QString OAIViewsFromUnit::getLandmarkViewException() const {
    return m_landmark_view_exception;
}
void OAIViewsFromUnit::setLandmarkViewException(const QString &landmark_view_exception) {
    m_landmark_view_exception = landmark_view_exception;
    m_landmark_view_exception_isSet = true;
}

bool OAIViewsFromUnit::is_landmark_view_exception_Set() const{
    return m_landmark_view_exception_isSet;
}

bool OAIViewsFromUnit::is_landmark_view_exception_Valid() const{
    return m_landmark_view_exception_isValid;
}

bool OAIViewsFromUnit::isOceanView() const {
    return m_ocean_view;
}
void OAIViewsFromUnit::setOceanView(const bool &ocean_view) {
    m_ocean_view = ocean_view;
    m_ocean_view_isSet = true;
}

bool OAIViewsFromUnit::is_ocean_view_Set() const{
    return m_ocean_view_isSet;
}

bool OAIViewsFromUnit::is_ocean_view_Valid() const{
    return m_ocean_view_isValid;
}

QString OAIViewsFromUnit::getOceanViewException() const {
    return m_ocean_view_exception;
}
void OAIViewsFromUnit::setOceanViewException(const QString &ocean_view_exception) {
    m_ocean_view_exception = ocean_view_exception;
    m_ocean_view_exception_isSet = true;
}

bool OAIViewsFromUnit::is_ocean_view_exception_Set() const{
    return m_ocean_view_exception_isSet;
}

bool OAIViewsFromUnit::is_ocean_view_exception_Valid() const{
    return m_ocean_view_exception_isValid;
}

bool OAIViewsFromUnit::isPoolView() const {
    return m_pool_view;
}
void OAIViewsFromUnit::setPoolView(const bool &pool_view) {
    m_pool_view = pool_view;
    m_pool_view_isSet = true;
}

bool OAIViewsFromUnit::is_pool_view_Set() const{
    return m_pool_view_isSet;
}

bool OAIViewsFromUnit::is_pool_view_Valid() const{
    return m_pool_view_isValid;
}

QString OAIViewsFromUnit::getPoolViewException() const {
    return m_pool_view_exception;
}
void OAIViewsFromUnit::setPoolViewException(const QString &pool_view_exception) {
    m_pool_view_exception = pool_view_exception;
    m_pool_view_exception_isSet = true;
}

bool OAIViewsFromUnit::is_pool_view_exception_Set() const{
    return m_pool_view_exception_isSet;
}

bool OAIViewsFromUnit::is_pool_view_exception_Valid() const{
    return m_pool_view_exception_isValid;
}

bool OAIViewsFromUnit::isValleyView() const {
    return m_valley_view;
}
void OAIViewsFromUnit::setValleyView(const bool &valley_view) {
    m_valley_view = valley_view;
    m_valley_view_isSet = true;
}

bool OAIViewsFromUnit::is_valley_view_Set() const{
    return m_valley_view_isSet;
}

bool OAIViewsFromUnit::is_valley_view_Valid() const{
    return m_valley_view_isValid;
}

QString OAIViewsFromUnit::getValleyViewException() const {
    return m_valley_view_exception;
}
void OAIViewsFromUnit::setValleyViewException(const QString &valley_view_exception) {
    m_valley_view_exception = valley_view_exception;
    m_valley_view_exception_isSet = true;
}

bool OAIViewsFromUnit::is_valley_view_exception_Set() const{
    return m_valley_view_exception_isSet;
}

bool OAIViewsFromUnit::is_valley_view_exception_Valid() const{
    return m_valley_view_exception_isValid;
}

bool OAIViewsFromUnit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beach_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beach_view_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_view_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_garden_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_garden_view_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lake_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lake_view_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_landmark_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_landmark_view_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ocean_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ocean_view_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pool_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pool_view_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valley_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valley_view_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIViewsFromUnit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
