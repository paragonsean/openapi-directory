/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhysicalDistancing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhysicalDistancing::OAIPhysicalDistancing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhysicalDistancing::OAIPhysicalDistancing() {
    this->initializeModel();
}

OAIPhysicalDistancing::~OAIPhysicalDistancing() {}

void OAIPhysicalDistancing::initializeModel() {

    m_common_areas_physical_distancing_arranged_isSet = false;
    m_common_areas_physical_distancing_arranged_isValid = false;

    m_common_areas_physical_distancing_arranged_exception_isSet = false;
    m_common_areas_physical_distancing_arranged_exception_isValid = false;

    m_physical_distancing_required_isSet = false;
    m_physical_distancing_required_isValid = false;

    m_physical_distancing_required_exception_isSet = false;
    m_physical_distancing_required_exception_isValid = false;

    m_safety_dividers_isSet = false;
    m_safety_dividers_isValid = false;

    m_safety_dividers_exception_isSet = false;
    m_safety_dividers_exception_isValid = false;

    m_shared_areas_limited_occupancy_isSet = false;
    m_shared_areas_limited_occupancy_isValid = false;

    m_shared_areas_limited_occupancy_exception_isSet = false;
    m_shared_areas_limited_occupancy_exception_isValid = false;

    m_wellness_areas_have_private_spaces_isSet = false;
    m_wellness_areas_have_private_spaces_isValid = false;

    m_wellness_areas_have_private_spaces_exception_isSet = false;
    m_wellness_areas_have_private_spaces_exception_isValid = false;
}

void OAIPhysicalDistancing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhysicalDistancing::fromJsonObject(QJsonObject json) {

    m_common_areas_physical_distancing_arranged_isValid = ::OpenAPI::fromJsonValue(m_common_areas_physical_distancing_arranged, json[QString("commonAreasPhysicalDistancingArranged")]);
    m_common_areas_physical_distancing_arranged_isSet = !json[QString("commonAreasPhysicalDistancingArranged")].isNull() && m_common_areas_physical_distancing_arranged_isValid;

    m_common_areas_physical_distancing_arranged_exception_isValid = ::OpenAPI::fromJsonValue(m_common_areas_physical_distancing_arranged_exception, json[QString("commonAreasPhysicalDistancingArrangedException")]);
    m_common_areas_physical_distancing_arranged_exception_isSet = !json[QString("commonAreasPhysicalDistancingArrangedException")].isNull() && m_common_areas_physical_distancing_arranged_exception_isValid;

    m_physical_distancing_required_isValid = ::OpenAPI::fromJsonValue(m_physical_distancing_required, json[QString("physicalDistancingRequired")]);
    m_physical_distancing_required_isSet = !json[QString("physicalDistancingRequired")].isNull() && m_physical_distancing_required_isValid;

    m_physical_distancing_required_exception_isValid = ::OpenAPI::fromJsonValue(m_physical_distancing_required_exception, json[QString("physicalDistancingRequiredException")]);
    m_physical_distancing_required_exception_isSet = !json[QString("physicalDistancingRequiredException")].isNull() && m_physical_distancing_required_exception_isValid;

    m_safety_dividers_isValid = ::OpenAPI::fromJsonValue(m_safety_dividers, json[QString("safetyDividers")]);
    m_safety_dividers_isSet = !json[QString("safetyDividers")].isNull() && m_safety_dividers_isValid;

    m_safety_dividers_exception_isValid = ::OpenAPI::fromJsonValue(m_safety_dividers_exception, json[QString("safetyDividersException")]);
    m_safety_dividers_exception_isSet = !json[QString("safetyDividersException")].isNull() && m_safety_dividers_exception_isValid;

    m_shared_areas_limited_occupancy_isValid = ::OpenAPI::fromJsonValue(m_shared_areas_limited_occupancy, json[QString("sharedAreasLimitedOccupancy")]);
    m_shared_areas_limited_occupancy_isSet = !json[QString("sharedAreasLimitedOccupancy")].isNull() && m_shared_areas_limited_occupancy_isValid;

    m_shared_areas_limited_occupancy_exception_isValid = ::OpenAPI::fromJsonValue(m_shared_areas_limited_occupancy_exception, json[QString("sharedAreasLimitedOccupancyException")]);
    m_shared_areas_limited_occupancy_exception_isSet = !json[QString("sharedAreasLimitedOccupancyException")].isNull() && m_shared_areas_limited_occupancy_exception_isValid;

    m_wellness_areas_have_private_spaces_isValid = ::OpenAPI::fromJsonValue(m_wellness_areas_have_private_spaces, json[QString("wellnessAreasHavePrivateSpaces")]);
    m_wellness_areas_have_private_spaces_isSet = !json[QString("wellnessAreasHavePrivateSpaces")].isNull() && m_wellness_areas_have_private_spaces_isValid;

    m_wellness_areas_have_private_spaces_exception_isValid = ::OpenAPI::fromJsonValue(m_wellness_areas_have_private_spaces_exception, json[QString("wellnessAreasHavePrivateSpacesException")]);
    m_wellness_areas_have_private_spaces_exception_isSet = !json[QString("wellnessAreasHavePrivateSpacesException")].isNull() && m_wellness_areas_have_private_spaces_exception_isValid;
}

QString OAIPhysicalDistancing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhysicalDistancing::asJsonObject() const {
    QJsonObject obj;
    if (m_common_areas_physical_distancing_arranged_isSet) {
        obj.insert(QString("commonAreasPhysicalDistancingArranged"), ::OpenAPI::toJsonValue(m_common_areas_physical_distancing_arranged));
    }
    if (m_common_areas_physical_distancing_arranged_exception_isSet) {
        obj.insert(QString("commonAreasPhysicalDistancingArrangedException"), ::OpenAPI::toJsonValue(m_common_areas_physical_distancing_arranged_exception));
    }
    if (m_physical_distancing_required_isSet) {
        obj.insert(QString("physicalDistancingRequired"), ::OpenAPI::toJsonValue(m_physical_distancing_required));
    }
    if (m_physical_distancing_required_exception_isSet) {
        obj.insert(QString("physicalDistancingRequiredException"), ::OpenAPI::toJsonValue(m_physical_distancing_required_exception));
    }
    if (m_safety_dividers_isSet) {
        obj.insert(QString("safetyDividers"), ::OpenAPI::toJsonValue(m_safety_dividers));
    }
    if (m_safety_dividers_exception_isSet) {
        obj.insert(QString("safetyDividersException"), ::OpenAPI::toJsonValue(m_safety_dividers_exception));
    }
    if (m_shared_areas_limited_occupancy_isSet) {
        obj.insert(QString("sharedAreasLimitedOccupancy"), ::OpenAPI::toJsonValue(m_shared_areas_limited_occupancy));
    }
    if (m_shared_areas_limited_occupancy_exception_isSet) {
        obj.insert(QString("sharedAreasLimitedOccupancyException"), ::OpenAPI::toJsonValue(m_shared_areas_limited_occupancy_exception));
    }
    if (m_wellness_areas_have_private_spaces_isSet) {
        obj.insert(QString("wellnessAreasHavePrivateSpaces"), ::OpenAPI::toJsonValue(m_wellness_areas_have_private_spaces));
    }
    if (m_wellness_areas_have_private_spaces_exception_isSet) {
        obj.insert(QString("wellnessAreasHavePrivateSpacesException"), ::OpenAPI::toJsonValue(m_wellness_areas_have_private_spaces_exception));
    }
    return obj;
}

bool OAIPhysicalDistancing::isCommonAreasPhysicalDistancingArranged() const {
    return m_common_areas_physical_distancing_arranged;
}
void OAIPhysicalDistancing::setCommonAreasPhysicalDistancingArranged(const bool &common_areas_physical_distancing_arranged) {
    m_common_areas_physical_distancing_arranged = common_areas_physical_distancing_arranged;
    m_common_areas_physical_distancing_arranged_isSet = true;
}

bool OAIPhysicalDistancing::is_common_areas_physical_distancing_arranged_Set() const{
    return m_common_areas_physical_distancing_arranged_isSet;
}

bool OAIPhysicalDistancing::is_common_areas_physical_distancing_arranged_Valid() const{
    return m_common_areas_physical_distancing_arranged_isValid;
}

QString OAIPhysicalDistancing::getCommonAreasPhysicalDistancingArrangedException() const {
    return m_common_areas_physical_distancing_arranged_exception;
}
void OAIPhysicalDistancing::setCommonAreasPhysicalDistancingArrangedException(const QString &common_areas_physical_distancing_arranged_exception) {
    m_common_areas_physical_distancing_arranged_exception = common_areas_physical_distancing_arranged_exception;
    m_common_areas_physical_distancing_arranged_exception_isSet = true;
}

bool OAIPhysicalDistancing::is_common_areas_physical_distancing_arranged_exception_Set() const{
    return m_common_areas_physical_distancing_arranged_exception_isSet;
}

bool OAIPhysicalDistancing::is_common_areas_physical_distancing_arranged_exception_Valid() const{
    return m_common_areas_physical_distancing_arranged_exception_isValid;
}

bool OAIPhysicalDistancing::isPhysicalDistancingRequired() const {
    return m_physical_distancing_required;
}
void OAIPhysicalDistancing::setPhysicalDistancingRequired(const bool &physical_distancing_required) {
    m_physical_distancing_required = physical_distancing_required;
    m_physical_distancing_required_isSet = true;
}

bool OAIPhysicalDistancing::is_physical_distancing_required_Set() const{
    return m_physical_distancing_required_isSet;
}

bool OAIPhysicalDistancing::is_physical_distancing_required_Valid() const{
    return m_physical_distancing_required_isValid;
}

QString OAIPhysicalDistancing::getPhysicalDistancingRequiredException() const {
    return m_physical_distancing_required_exception;
}
void OAIPhysicalDistancing::setPhysicalDistancingRequiredException(const QString &physical_distancing_required_exception) {
    m_physical_distancing_required_exception = physical_distancing_required_exception;
    m_physical_distancing_required_exception_isSet = true;
}

bool OAIPhysicalDistancing::is_physical_distancing_required_exception_Set() const{
    return m_physical_distancing_required_exception_isSet;
}

bool OAIPhysicalDistancing::is_physical_distancing_required_exception_Valid() const{
    return m_physical_distancing_required_exception_isValid;
}

bool OAIPhysicalDistancing::isSafetyDividers() const {
    return m_safety_dividers;
}
void OAIPhysicalDistancing::setSafetyDividers(const bool &safety_dividers) {
    m_safety_dividers = safety_dividers;
    m_safety_dividers_isSet = true;
}

bool OAIPhysicalDistancing::is_safety_dividers_Set() const{
    return m_safety_dividers_isSet;
}

bool OAIPhysicalDistancing::is_safety_dividers_Valid() const{
    return m_safety_dividers_isValid;
}

QString OAIPhysicalDistancing::getSafetyDividersException() const {
    return m_safety_dividers_exception;
}
void OAIPhysicalDistancing::setSafetyDividersException(const QString &safety_dividers_exception) {
    m_safety_dividers_exception = safety_dividers_exception;
    m_safety_dividers_exception_isSet = true;
}

bool OAIPhysicalDistancing::is_safety_dividers_exception_Set() const{
    return m_safety_dividers_exception_isSet;
}

bool OAIPhysicalDistancing::is_safety_dividers_exception_Valid() const{
    return m_safety_dividers_exception_isValid;
}

bool OAIPhysicalDistancing::isSharedAreasLimitedOccupancy() const {
    return m_shared_areas_limited_occupancy;
}
void OAIPhysicalDistancing::setSharedAreasLimitedOccupancy(const bool &shared_areas_limited_occupancy) {
    m_shared_areas_limited_occupancy = shared_areas_limited_occupancy;
    m_shared_areas_limited_occupancy_isSet = true;
}

bool OAIPhysicalDistancing::is_shared_areas_limited_occupancy_Set() const{
    return m_shared_areas_limited_occupancy_isSet;
}

bool OAIPhysicalDistancing::is_shared_areas_limited_occupancy_Valid() const{
    return m_shared_areas_limited_occupancy_isValid;
}

QString OAIPhysicalDistancing::getSharedAreasLimitedOccupancyException() const {
    return m_shared_areas_limited_occupancy_exception;
}
void OAIPhysicalDistancing::setSharedAreasLimitedOccupancyException(const QString &shared_areas_limited_occupancy_exception) {
    m_shared_areas_limited_occupancy_exception = shared_areas_limited_occupancy_exception;
    m_shared_areas_limited_occupancy_exception_isSet = true;
}

bool OAIPhysicalDistancing::is_shared_areas_limited_occupancy_exception_Set() const{
    return m_shared_areas_limited_occupancy_exception_isSet;
}

bool OAIPhysicalDistancing::is_shared_areas_limited_occupancy_exception_Valid() const{
    return m_shared_areas_limited_occupancy_exception_isValid;
}

bool OAIPhysicalDistancing::isWellnessAreasHavePrivateSpaces() const {
    return m_wellness_areas_have_private_spaces;
}
void OAIPhysicalDistancing::setWellnessAreasHavePrivateSpaces(const bool &wellness_areas_have_private_spaces) {
    m_wellness_areas_have_private_spaces = wellness_areas_have_private_spaces;
    m_wellness_areas_have_private_spaces_isSet = true;
}

bool OAIPhysicalDistancing::is_wellness_areas_have_private_spaces_Set() const{
    return m_wellness_areas_have_private_spaces_isSet;
}

bool OAIPhysicalDistancing::is_wellness_areas_have_private_spaces_Valid() const{
    return m_wellness_areas_have_private_spaces_isValid;
}

QString OAIPhysicalDistancing::getWellnessAreasHavePrivateSpacesException() const {
    return m_wellness_areas_have_private_spaces_exception;
}
void OAIPhysicalDistancing::setWellnessAreasHavePrivateSpacesException(const QString &wellness_areas_have_private_spaces_exception) {
    m_wellness_areas_have_private_spaces_exception = wellness_areas_have_private_spaces_exception;
    m_wellness_areas_have_private_spaces_exception_isSet = true;
}

bool OAIPhysicalDistancing::is_wellness_areas_have_private_spaces_exception_Set() const{
    return m_wellness_areas_have_private_spaces_exception_isSet;
}

bool OAIPhysicalDistancing::is_wellness_areas_have_private_spaces_exception_Valid() const{
    return m_wellness_areas_have_private_spaces_exception_isValid;
}

bool OAIPhysicalDistancing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common_areas_physical_distancing_arranged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_areas_physical_distancing_arranged_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_distancing_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_distancing_required_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safety_dividers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safety_dividers_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_areas_limited_occupancy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_areas_limited_occupancy_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wellness_areas_have_private_spaces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wellness_areas_have_private_spaces_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhysicalDistancing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
