/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimensionalMetricValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimensionalMetricValue::OAIDimensionalMetricValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimensionalMetricValue::OAIDimensionalMetricValue() {
    this->initializeModel();
}

OAIDimensionalMetricValue::~OAIDimensionalMetricValue() {}

void OAIDimensionalMetricValue::initializeModel() {

    m_metric_option_isSet = false;
    m_metric_option_isValid = false;

    m_time_dimension_isSet = false;
    m_time_dimension_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIDimensionalMetricValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimensionalMetricValue::fromJsonObject(QJsonObject json) {

    m_metric_option_isValid = ::OpenAPI::fromJsonValue(m_metric_option, json[QString("metricOption")]);
    m_metric_option_isSet = !json[QString("metricOption")].isNull() && m_metric_option_isValid;

    m_time_dimension_isValid = ::OpenAPI::fromJsonValue(m_time_dimension, json[QString("timeDimension")]);
    m_time_dimension_isSet = !json[QString("timeDimension")].isNull() && m_time_dimension_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIDimensionalMetricValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimensionalMetricValue::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_option_isSet) {
        obj.insert(QString("metricOption"), ::OpenAPI::toJsonValue(m_metric_option));
    }
    if (m_time_dimension.isSet()) {
        obj.insert(QString("timeDimension"), ::OpenAPI::toJsonValue(m_time_dimension));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIDimensionalMetricValue::getMetricOption() const {
    return m_metric_option;
}
void OAIDimensionalMetricValue::setMetricOption(const QString &metric_option) {
    m_metric_option = metric_option;
    m_metric_option_isSet = true;
}

bool OAIDimensionalMetricValue::is_metric_option_Set() const{
    return m_metric_option_isSet;
}

bool OAIDimensionalMetricValue::is_metric_option_Valid() const{
    return m_metric_option_isValid;
}

OAITimeDimension OAIDimensionalMetricValue::getTimeDimension() const {
    return m_time_dimension;
}
void OAIDimensionalMetricValue::setTimeDimension(const OAITimeDimension &time_dimension) {
    m_time_dimension = time_dimension;
    m_time_dimension_isSet = true;
}

bool OAIDimensionalMetricValue::is_time_dimension_Set() const{
    return m_time_dimension_isSet;
}

bool OAIDimensionalMetricValue::is_time_dimension_Valid() const{
    return m_time_dimension_isValid;
}

QString OAIDimensionalMetricValue::getValue() const {
    return m_value;
}
void OAIDimensionalMetricValue::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDimensionalMetricValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDimensionalMetricValue::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIDimensionalMetricValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimensionalMetricValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
