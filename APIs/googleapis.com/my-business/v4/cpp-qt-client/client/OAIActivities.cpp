/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivities.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivities::OAIActivities(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivities::OAIActivities() {
    this->initializeModel();
}

OAIActivities::~OAIActivities() {}

void OAIActivities::initializeModel() {

    m_beach_access_isSet = false;
    m_beach_access_isValid = false;

    m_beach_access_exception_isSet = false;
    m_beach_access_exception_isValid = false;

    m_beach_front_isSet = false;
    m_beach_front_isValid = false;

    m_beach_front_exception_isSet = false;
    m_beach_front_exception_isValid = false;

    m_bicycle_rental_isSet = false;
    m_bicycle_rental_isValid = false;

    m_bicycle_rental_exception_isSet = false;
    m_bicycle_rental_exception_isValid = false;

    m_boutique_stores_isSet = false;
    m_boutique_stores_isValid = false;

    m_boutique_stores_exception_isSet = false;
    m_boutique_stores_exception_isValid = false;

    m_casino_isSet = false;
    m_casino_isValid = false;

    m_casino_exception_isSet = false;
    m_casino_exception_isValid = false;

    m_free_bicycle_rental_isSet = false;
    m_free_bicycle_rental_isValid = false;

    m_free_bicycle_rental_exception_isSet = false;
    m_free_bicycle_rental_exception_isValid = false;

    m_free_watercraft_rental_isSet = false;
    m_free_watercraft_rental_isValid = false;

    m_free_watercraft_rental_exception_isSet = false;
    m_free_watercraft_rental_exception_isValid = false;

    m_game_room_isSet = false;
    m_game_room_isValid = false;

    m_game_room_exception_isSet = false;
    m_game_room_exception_isValid = false;

    m_golf_isSet = false;
    m_golf_isValid = false;

    m_golf_exception_isSet = false;
    m_golf_exception_isValid = false;

    m_horseback_riding_isSet = false;
    m_horseback_riding_isValid = false;

    m_horseback_riding_exception_isSet = false;
    m_horseback_riding_exception_isValid = false;

    m_nightclub_isSet = false;
    m_nightclub_isValid = false;

    m_nightclub_exception_isSet = false;
    m_nightclub_exception_isValid = false;

    m_private_beach_isSet = false;
    m_private_beach_isValid = false;

    m_private_beach_exception_isSet = false;
    m_private_beach_exception_isValid = false;

    m_scuba_isSet = false;
    m_scuba_isValid = false;

    m_scuba_exception_isSet = false;
    m_scuba_exception_isValid = false;

    m_snorkeling_isSet = false;
    m_snorkeling_isValid = false;

    m_snorkeling_exception_isSet = false;
    m_snorkeling_exception_isValid = false;

    m_tennis_isSet = false;
    m_tennis_isValid = false;

    m_tennis_exception_isSet = false;
    m_tennis_exception_isValid = false;

    m_water_skiing_isSet = false;
    m_water_skiing_isValid = false;

    m_water_skiing_exception_isSet = false;
    m_water_skiing_exception_isValid = false;

    m_watercraft_rental_isSet = false;
    m_watercraft_rental_isValid = false;

    m_watercraft_rental_exception_isSet = false;
    m_watercraft_rental_exception_isValid = false;
}

void OAIActivities::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivities::fromJsonObject(QJsonObject json) {

    m_beach_access_isValid = ::OpenAPI::fromJsonValue(m_beach_access, json[QString("beachAccess")]);
    m_beach_access_isSet = !json[QString("beachAccess")].isNull() && m_beach_access_isValid;

    m_beach_access_exception_isValid = ::OpenAPI::fromJsonValue(m_beach_access_exception, json[QString("beachAccessException")]);
    m_beach_access_exception_isSet = !json[QString("beachAccessException")].isNull() && m_beach_access_exception_isValid;

    m_beach_front_isValid = ::OpenAPI::fromJsonValue(m_beach_front, json[QString("beachFront")]);
    m_beach_front_isSet = !json[QString("beachFront")].isNull() && m_beach_front_isValid;

    m_beach_front_exception_isValid = ::OpenAPI::fromJsonValue(m_beach_front_exception, json[QString("beachFrontException")]);
    m_beach_front_exception_isSet = !json[QString("beachFrontException")].isNull() && m_beach_front_exception_isValid;

    m_bicycle_rental_isValid = ::OpenAPI::fromJsonValue(m_bicycle_rental, json[QString("bicycleRental")]);
    m_bicycle_rental_isSet = !json[QString("bicycleRental")].isNull() && m_bicycle_rental_isValid;

    m_bicycle_rental_exception_isValid = ::OpenAPI::fromJsonValue(m_bicycle_rental_exception, json[QString("bicycleRentalException")]);
    m_bicycle_rental_exception_isSet = !json[QString("bicycleRentalException")].isNull() && m_bicycle_rental_exception_isValid;

    m_boutique_stores_isValid = ::OpenAPI::fromJsonValue(m_boutique_stores, json[QString("boutiqueStores")]);
    m_boutique_stores_isSet = !json[QString("boutiqueStores")].isNull() && m_boutique_stores_isValid;

    m_boutique_stores_exception_isValid = ::OpenAPI::fromJsonValue(m_boutique_stores_exception, json[QString("boutiqueStoresException")]);
    m_boutique_stores_exception_isSet = !json[QString("boutiqueStoresException")].isNull() && m_boutique_stores_exception_isValid;

    m_casino_isValid = ::OpenAPI::fromJsonValue(m_casino, json[QString("casino")]);
    m_casino_isSet = !json[QString("casino")].isNull() && m_casino_isValid;

    m_casino_exception_isValid = ::OpenAPI::fromJsonValue(m_casino_exception, json[QString("casinoException")]);
    m_casino_exception_isSet = !json[QString("casinoException")].isNull() && m_casino_exception_isValid;

    m_free_bicycle_rental_isValid = ::OpenAPI::fromJsonValue(m_free_bicycle_rental, json[QString("freeBicycleRental")]);
    m_free_bicycle_rental_isSet = !json[QString("freeBicycleRental")].isNull() && m_free_bicycle_rental_isValid;

    m_free_bicycle_rental_exception_isValid = ::OpenAPI::fromJsonValue(m_free_bicycle_rental_exception, json[QString("freeBicycleRentalException")]);
    m_free_bicycle_rental_exception_isSet = !json[QString("freeBicycleRentalException")].isNull() && m_free_bicycle_rental_exception_isValid;

    m_free_watercraft_rental_isValid = ::OpenAPI::fromJsonValue(m_free_watercraft_rental, json[QString("freeWatercraftRental")]);
    m_free_watercraft_rental_isSet = !json[QString("freeWatercraftRental")].isNull() && m_free_watercraft_rental_isValid;

    m_free_watercraft_rental_exception_isValid = ::OpenAPI::fromJsonValue(m_free_watercraft_rental_exception, json[QString("freeWatercraftRentalException")]);
    m_free_watercraft_rental_exception_isSet = !json[QString("freeWatercraftRentalException")].isNull() && m_free_watercraft_rental_exception_isValid;

    m_game_room_isValid = ::OpenAPI::fromJsonValue(m_game_room, json[QString("gameRoom")]);
    m_game_room_isSet = !json[QString("gameRoom")].isNull() && m_game_room_isValid;

    m_game_room_exception_isValid = ::OpenAPI::fromJsonValue(m_game_room_exception, json[QString("gameRoomException")]);
    m_game_room_exception_isSet = !json[QString("gameRoomException")].isNull() && m_game_room_exception_isValid;

    m_golf_isValid = ::OpenAPI::fromJsonValue(m_golf, json[QString("golf")]);
    m_golf_isSet = !json[QString("golf")].isNull() && m_golf_isValid;

    m_golf_exception_isValid = ::OpenAPI::fromJsonValue(m_golf_exception, json[QString("golfException")]);
    m_golf_exception_isSet = !json[QString("golfException")].isNull() && m_golf_exception_isValid;

    m_horseback_riding_isValid = ::OpenAPI::fromJsonValue(m_horseback_riding, json[QString("horsebackRiding")]);
    m_horseback_riding_isSet = !json[QString("horsebackRiding")].isNull() && m_horseback_riding_isValid;

    m_horseback_riding_exception_isValid = ::OpenAPI::fromJsonValue(m_horseback_riding_exception, json[QString("horsebackRidingException")]);
    m_horseback_riding_exception_isSet = !json[QString("horsebackRidingException")].isNull() && m_horseback_riding_exception_isValid;

    m_nightclub_isValid = ::OpenAPI::fromJsonValue(m_nightclub, json[QString("nightclub")]);
    m_nightclub_isSet = !json[QString("nightclub")].isNull() && m_nightclub_isValid;

    m_nightclub_exception_isValid = ::OpenAPI::fromJsonValue(m_nightclub_exception, json[QString("nightclubException")]);
    m_nightclub_exception_isSet = !json[QString("nightclubException")].isNull() && m_nightclub_exception_isValid;

    m_private_beach_isValid = ::OpenAPI::fromJsonValue(m_private_beach, json[QString("privateBeach")]);
    m_private_beach_isSet = !json[QString("privateBeach")].isNull() && m_private_beach_isValid;

    m_private_beach_exception_isValid = ::OpenAPI::fromJsonValue(m_private_beach_exception, json[QString("privateBeachException")]);
    m_private_beach_exception_isSet = !json[QString("privateBeachException")].isNull() && m_private_beach_exception_isValid;

    m_scuba_isValid = ::OpenAPI::fromJsonValue(m_scuba, json[QString("scuba")]);
    m_scuba_isSet = !json[QString("scuba")].isNull() && m_scuba_isValid;

    m_scuba_exception_isValid = ::OpenAPI::fromJsonValue(m_scuba_exception, json[QString("scubaException")]);
    m_scuba_exception_isSet = !json[QString("scubaException")].isNull() && m_scuba_exception_isValid;

    m_snorkeling_isValid = ::OpenAPI::fromJsonValue(m_snorkeling, json[QString("snorkeling")]);
    m_snorkeling_isSet = !json[QString("snorkeling")].isNull() && m_snorkeling_isValid;

    m_snorkeling_exception_isValid = ::OpenAPI::fromJsonValue(m_snorkeling_exception, json[QString("snorkelingException")]);
    m_snorkeling_exception_isSet = !json[QString("snorkelingException")].isNull() && m_snorkeling_exception_isValid;

    m_tennis_isValid = ::OpenAPI::fromJsonValue(m_tennis, json[QString("tennis")]);
    m_tennis_isSet = !json[QString("tennis")].isNull() && m_tennis_isValid;

    m_tennis_exception_isValid = ::OpenAPI::fromJsonValue(m_tennis_exception, json[QString("tennisException")]);
    m_tennis_exception_isSet = !json[QString("tennisException")].isNull() && m_tennis_exception_isValid;

    m_water_skiing_isValid = ::OpenAPI::fromJsonValue(m_water_skiing, json[QString("waterSkiing")]);
    m_water_skiing_isSet = !json[QString("waterSkiing")].isNull() && m_water_skiing_isValid;

    m_water_skiing_exception_isValid = ::OpenAPI::fromJsonValue(m_water_skiing_exception, json[QString("waterSkiingException")]);
    m_water_skiing_exception_isSet = !json[QString("waterSkiingException")].isNull() && m_water_skiing_exception_isValid;

    m_watercraft_rental_isValid = ::OpenAPI::fromJsonValue(m_watercraft_rental, json[QString("watercraftRental")]);
    m_watercraft_rental_isSet = !json[QString("watercraftRental")].isNull() && m_watercraft_rental_isValid;

    m_watercraft_rental_exception_isValid = ::OpenAPI::fromJsonValue(m_watercraft_rental_exception, json[QString("watercraftRentalException")]);
    m_watercraft_rental_exception_isSet = !json[QString("watercraftRentalException")].isNull() && m_watercraft_rental_exception_isValid;
}

QString OAIActivities::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivities::asJsonObject() const {
    QJsonObject obj;
    if (m_beach_access_isSet) {
        obj.insert(QString("beachAccess"), ::OpenAPI::toJsonValue(m_beach_access));
    }
    if (m_beach_access_exception_isSet) {
        obj.insert(QString("beachAccessException"), ::OpenAPI::toJsonValue(m_beach_access_exception));
    }
    if (m_beach_front_isSet) {
        obj.insert(QString("beachFront"), ::OpenAPI::toJsonValue(m_beach_front));
    }
    if (m_beach_front_exception_isSet) {
        obj.insert(QString("beachFrontException"), ::OpenAPI::toJsonValue(m_beach_front_exception));
    }
    if (m_bicycle_rental_isSet) {
        obj.insert(QString("bicycleRental"), ::OpenAPI::toJsonValue(m_bicycle_rental));
    }
    if (m_bicycle_rental_exception_isSet) {
        obj.insert(QString("bicycleRentalException"), ::OpenAPI::toJsonValue(m_bicycle_rental_exception));
    }
    if (m_boutique_stores_isSet) {
        obj.insert(QString("boutiqueStores"), ::OpenAPI::toJsonValue(m_boutique_stores));
    }
    if (m_boutique_stores_exception_isSet) {
        obj.insert(QString("boutiqueStoresException"), ::OpenAPI::toJsonValue(m_boutique_stores_exception));
    }
    if (m_casino_isSet) {
        obj.insert(QString("casino"), ::OpenAPI::toJsonValue(m_casino));
    }
    if (m_casino_exception_isSet) {
        obj.insert(QString("casinoException"), ::OpenAPI::toJsonValue(m_casino_exception));
    }
    if (m_free_bicycle_rental_isSet) {
        obj.insert(QString("freeBicycleRental"), ::OpenAPI::toJsonValue(m_free_bicycle_rental));
    }
    if (m_free_bicycle_rental_exception_isSet) {
        obj.insert(QString("freeBicycleRentalException"), ::OpenAPI::toJsonValue(m_free_bicycle_rental_exception));
    }
    if (m_free_watercraft_rental_isSet) {
        obj.insert(QString("freeWatercraftRental"), ::OpenAPI::toJsonValue(m_free_watercraft_rental));
    }
    if (m_free_watercraft_rental_exception_isSet) {
        obj.insert(QString("freeWatercraftRentalException"), ::OpenAPI::toJsonValue(m_free_watercraft_rental_exception));
    }
    if (m_game_room_isSet) {
        obj.insert(QString("gameRoom"), ::OpenAPI::toJsonValue(m_game_room));
    }
    if (m_game_room_exception_isSet) {
        obj.insert(QString("gameRoomException"), ::OpenAPI::toJsonValue(m_game_room_exception));
    }
    if (m_golf_isSet) {
        obj.insert(QString("golf"), ::OpenAPI::toJsonValue(m_golf));
    }
    if (m_golf_exception_isSet) {
        obj.insert(QString("golfException"), ::OpenAPI::toJsonValue(m_golf_exception));
    }
    if (m_horseback_riding_isSet) {
        obj.insert(QString("horsebackRiding"), ::OpenAPI::toJsonValue(m_horseback_riding));
    }
    if (m_horseback_riding_exception_isSet) {
        obj.insert(QString("horsebackRidingException"), ::OpenAPI::toJsonValue(m_horseback_riding_exception));
    }
    if (m_nightclub_isSet) {
        obj.insert(QString("nightclub"), ::OpenAPI::toJsonValue(m_nightclub));
    }
    if (m_nightclub_exception_isSet) {
        obj.insert(QString("nightclubException"), ::OpenAPI::toJsonValue(m_nightclub_exception));
    }
    if (m_private_beach_isSet) {
        obj.insert(QString("privateBeach"), ::OpenAPI::toJsonValue(m_private_beach));
    }
    if (m_private_beach_exception_isSet) {
        obj.insert(QString("privateBeachException"), ::OpenAPI::toJsonValue(m_private_beach_exception));
    }
    if (m_scuba_isSet) {
        obj.insert(QString("scuba"), ::OpenAPI::toJsonValue(m_scuba));
    }
    if (m_scuba_exception_isSet) {
        obj.insert(QString("scubaException"), ::OpenAPI::toJsonValue(m_scuba_exception));
    }
    if (m_snorkeling_isSet) {
        obj.insert(QString("snorkeling"), ::OpenAPI::toJsonValue(m_snorkeling));
    }
    if (m_snorkeling_exception_isSet) {
        obj.insert(QString("snorkelingException"), ::OpenAPI::toJsonValue(m_snorkeling_exception));
    }
    if (m_tennis_isSet) {
        obj.insert(QString("tennis"), ::OpenAPI::toJsonValue(m_tennis));
    }
    if (m_tennis_exception_isSet) {
        obj.insert(QString("tennisException"), ::OpenAPI::toJsonValue(m_tennis_exception));
    }
    if (m_water_skiing_isSet) {
        obj.insert(QString("waterSkiing"), ::OpenAPI::toJsonValue(m_water_skiing));
    }
    if (m_water_skiing_exception_isSet) {
        obj.insert(QString("waterSkiingException"), ::OpenAPI::toJsonValue(m_water_skiing_exception));
    }
    if (m_watercraft_rental_isSet) {
        obj.insert(QString("watercraftRental"), ::OpenAPI::toJsonValue(m_watercraft_rental));
    }
    if (m_watercraft_rental_exception_isSet) {
        obj.insert(QString("watercraftRentalException"), ::OpenAPI::toJsonValue(m_watercraft_rental_exception));
    }
    return obj;
}

bool OAIActivities::isBeachAccess() const {
    return m_beach_access;
}
void OAIActivities::setBeachAccess(const bool &beach_access) {
    m_beach_access = beach_access;
    m_beach_access_isSet = true;
}

bool OAIActivities::is_beach_access_Set() const{
    return m_beach_access_isSet;
}

bool OAIActivities::is_beach_access_Valid() const{
    return m_beach_access_isValid;
}

QString OAIActivities::getBeachAccessException() const {
    return m_beach_access_exception;
}
void OAIActivities::setBeachAccessException(const QString &beach_access_exception) {
    m_beach_access_exception = beach_access_exception;
    m_beach_access_exception_isSet = true;
}

bool OAIActivities::is_beach_access_exception_Set() const{
    return m_beach_access_exception_isSet;
}

bool OAIActivities::is_beach_access_exception_Valid() const{
    return m_beach_access_exception_isValid;
}

bool OAIActivities::isBeachFront() const {
    return m_beach_front;
}
void OAIActivities::setBeachFront(const bool &beach_front) {
    m_beach_front = beach_front;
    m_beach_front_isSet = true;
}

bool OAIActivities::is_beach_front_Set() const{
    return m_beach_front_isSet;
}

bool OAIActivities::is_beach_front_Valid() const{
    return m_beach_front_isValid;
}

QString OAIActivities::getBeachFrontException() const {
    return m_beach_front_exception;
}
void OAIActivities::setBeachFrontException(const QString &beach_front_exception) {
    m_beach_front_exception = beach_front_exception;
    m_beach_front_exception_isSet = true;
}

bool OAIActivities::is_beach_front_exception_Set() const{
    return m_beach_front_exception_isSet;
}

bool OAIActivities::is_beach_front_exception_Valid() const{
    return m_beach_front_exception_isValid;
}

bool OAIActivities::isBicycleRental() const {
    return m_bicycle_rental;
}
void OAIActivities::setBicycleRental(const bool &bicycle_rental) {
    m_bicycle_rental = bicycle_rental;
    m_bicycle_rental_isSet = true;
}

bool OAIActivities::is_bicycle_rental_Set() const{
    return m_bicycle_rental_isSet;
}

bool OAIActivities::is_bicycle_rental_Valid() const{
    return m_bicycle_rental_isValid;
}

QString OAIActivities::getBicycleRentalException() const {
    return m_bicycle_rental_exception;
}
void OAIActivities::setBicycleRentalException(const QString &bicycle_rental_exception) {
    m_bicycle_rental_exception = bicycle_rental_exception;
    m_bicycle_rental_exception_isSet = true;
}

bool OAIActivities::is_bicycle_rental_exception_Set() const{
    return m_bicycle_rental_exception_isSet;
}

bool OAIActivities::is_bicycle_rental_exception_Valid() const{
    return m_bicycle_rental_exception_isValid;
}

bool OAIActivities::isBoutiqueStores() const {
    return m_boutique_stores;
}
void OAIActivities::setBoutiqueStores(const bool &boutique_stores) {
    m_boutique_stores = boutique_stores;
    m_boutique_stores_isSet = true;
}

bool OAIActivities::is_boutique_stores_Set() const{
    return m_boutique_stores_isSet;
}

bool OAIActivities::is_boutique_stores_Valid() const{
    return m_boutique_stores_isValid;
}

QString OAIActivities::getBoutiqueStoresException() const {
    return m_boutique_stores_exception;
}
void OAIActivities::setBoutiqueStoresException(const QString &boutique_stores_exception) {
    m_boutique_stores_exception = boutique_stores_exception;
    m_boutique_stores_exception_isSet = true;
}

bool OAIActivities::is_boutique_stores_exception_Set() const{
    return m_boutique_stores_exception_isSet;
}

bool OAIActivities::is_boutique_stores_exception_Valid() const{
    return m_boutique_stores_exception_isValid;
}

bool OAIActivities::isCasino() const {
    return m_casino;
}
void OAIActivities::setCasino(const bool &casino) {
    m_casino = casino;
    m_casino_isSet = true;
}

bool OAIActivities::is_casino_Set() const{
    return m_casino_isSet;
}

bool OAIActivities::is_casino_Valid() const{
    return m_casino_isValid;
}

QString OAIActivities::getCasinoException() const {
    return m_casino_exception;
}
void OAIActivities::setCasinoException(const QString &casino_exception) {
    m_casino_exception = casino_exception;
    m_casino_exception_isSet = true;
}

bool OAIActivities::is_casino_exception_Set() const{
    return m_casino_exception_isSet;
}

bool OAIActivities::is_casino_exception_Valid() const{
    return m_casino_exception_isValid;
}

bool OAIActivities::isFreeBicycleRental() const {
    return m_free_bicycle_rental;
}
void OAIActivities::setFreeBicycleRental(const bool &free_bicycle_rental) {
    m_free_bicycle_rental = free_bicycle_rental;
    m_free_bicycle_rental_isSet = true;
}

bool OAIActivities::is_free_bicycle_rental_Set() const{
    return m_free_bicycle_rental_isSet;
}

bool OAIActivities::is_free_bicycle_rental_Valid() const{
    return m_free_bicycle_rental_isValid;
}

QString OAIActivities::getFreeBicycleRentalException() const {
    return m_free_bicycle_rental_exception;
}
void OAIActivities::setFreeBicycleRentalException(const QString &free_bicycle_rental_exception) {
    m_free_bicycle_rental_exception = free_bicycle_rental_exception;
    m_free_bicycle_rental_exception_isSet = true;
}

bool OAIActivities::is_free_bicycle_rental_exception_Set() const{
    return m_free_bicycle_rental_exception_isSet;
}

bool OAIActivities::is_free_bicycle_rental_exception_Valid() const{
    return m_free_bicycle_rental_exception_isValid;
}

bool OAIActivities::isFreeWatercraftRental() const {
    return m_free_watercraft_rental;
}
void OAIActivities::setFreeWatercraftRental(const bool &free_watercraft_rental) {
    m_free_watercraft_rental = free_watercraft_rental;
    m_free_watercraft_rental_isSet = true;
}

bool OAIActivities::is_free_watercraft_rental_Set() const{
    return m_free_watercraft_rental_isSet;
}

bool OAIActivities::is_free_watercraft_rental_Valid() const{
    return m_free_watercraft_rental_isValid;
}

QString OAIActivities::getFreeWatercraftRentalException() const {
    return m_free_watercraft_rental_exception;
}
void OAIActivities::setFreeWatercraftRentalException(const QString &free_watercraft_rental_exception) {
    m_free_watercraft_rental_exception = free_watercraft_rental_exception;
    m_free_watercraft_rental_exception_isSet = true;
}

bool OAIActivities::is_free_watercraft_rental_exception_Set() const{
    return m_free_watercraft_rental_exception_isSet;
}

bool OAIActivities::is_free_watercraft_rental_exception_Valid() const{
    return m_free_watercraft_rental_exception_isValid;
}

bool OAIActivities::isGameRoom() const {
    return m_game_room;
}
void OAIActivities::setGameRoom(const bool &game_room) {
    m_game_room = game_room;
    m_game_room_isSet = true;
}

bool OAIActivities::is_game_room_Set() const{
    return m_game_room_isSet;
}

bool OAIActivities::is_game_room_Valid() const{
    return m_game_room_isValid;
}

QString OAIActivities::getGameRoomException() const {
    return m_game_room_exception;
}
void OAIActivities::setGameRoomException(const QString &game_room_exception) {
    m_game_room_exception = game_room_exception;
    m_game_room_exception_isSet = true;
}

bool OAIActivities::is_game_room_exception_Set() const{
    return m_game_room_exception_isSet;
}

bool OAIActivities::is_game_room_exception_Valid() const{
    return m_game_room_exception_isValid;
}

bool OAIActivities::isGolf() const {
    return m_golf;
}
void OAIActivities::setGolf(const bool &golf) {
    m_golf = golf;
    m_golf_isSet = true;
}

bool OAIActivities::is_golf_Set() const{
    return m_golf_isSet;
}

bool OAIActivities::is_golf_Valid() const{
    return m_golf_isValid;
}

QString OAIActivities::getGolfException() const {
    return m_golf_exception;
}
void OAIActivities::setGolfException(const QString &golf_exception) {
    m_golf_exception = golf_exception;
    m_golf_exception_isSet = true;
}

bool OAIActivities::is_golf_exception_Set() const{
    return m_golf_exception_isSet;
}

bool OAIActivities::is_golf_exception_Valid() const{
    return m_golf_exception_isValid;
}

bool OAIActivities::isHorsebackRiding() const {
    return m_horseback_riding;
}
void OAIActivities::setHorsebackRiding(const bool &horseback_riding) {
    m_horseback_riding = horseback_riding;
    m_horseback_riding_isSet = true;
}

bool OAIActivities::is_horseback_riding_Set() const{
    return m_horseback_riding_isSet;
}

bool OAIActivities::is_horseback_riding_Valid() const{
    return m_horseback_riding_isValid;
}

QString OAIActivities::getHorsebackRidingException() const {
    return m_horseback_riding_exception;
}
void OAIActivities::setHorsebackRidingException(const QString &horseback_riding_exception) {
    m_horseback_riding_exception = horseback_riding_exception;
    m_horseback_riding_exception_isSet = true;
}

bool OAIActivities::is_horseback_riding_exception_Set() const{
    return m_horseback_riding_exception_isSet;
}

bool OAIActivities::is_horseback_riding_exception_Valid() const{
    return m_horseback_riding_exception_isValid;
}

bool OAIActivities::isNightclub() const {
    return m_nightclub;
}
void OAIActivities::setNightclub(const bool &nightclub) {
    m_nightclub = nightclub;
    m_nightclub_isSet = true;
}

bool OAIActivities::is_nightclub_Set() const{
    return m_nightclub_isSet;
}

bool OAIActivities::is_nightclub_Valid() const{
    return m_nightclub_isValid;
}

QString OAIActivities::getNightclubException() const {
    return m_nightclub_exception;
}
void OAIActivities::setNightclubException(const QString &nightclub_exception) {
    m_nightclub_exception = nightclub_exception;
    m_nightclub_exception_isSet = true;
}

bool OAIActivities::is_nightclub_exception_Set() const{
    return m_nightclub_exception_isSet;
}

bool OAIActivities::is_nightclub_exception_Valid() const{
    return m_nightclub_exception_isValid;
}

bool OAIActivities::isPrivateBeach() const {
    return m_private_beach;
}
void OAIActivities::setPrivateBeach(const bool &private_beach) {
    m_private_beach = private_beach;
    m_private_beach_isSet = true;
}

bool OAIActivities::is_private_beach_Set() const{
    return m_private_beach_isSet;
}

bool OAIActivities::is_private_beach_Valid() const{
    return m_private_beach_isValid;
}

QString OAIActivities::getPrivateBeachException() const {
    return m_private_beach_exception;
}
void OAIActivities::setPrivateBeachException(const QString &private_beach_exception) {
    m_private_beach_exception = private_beach_exception;
    m_private_beach_exception_isSet = true;
}

bool OAIActivities::is_private_beach_exception_Set() const{
    return m_private_beach_exception_isSet;
}

bool OAIActivities::is_private_beach_exception_Valid() const{
    return m_private_beach_exception_isValid;
}

bool OAIActivities::isScuba() const {
    return m_scuba;
}
void OAIActivities::setScuba(const bool &scuba) {
    m_scuba = scuba;
    m_scuba_isSet = true;
}

bool OAIActivities::is_scuba_Set() const{
    return m_scuba_isSet;
}

bool OAIActivities::is_scuba_Valid() const{
    return m_scuba_isValid;
}

QString OAIActivities::getScubaException() const {
    return m_scuba_exception;
}
void OAIActivities::setScubaException(const QString &scuba_exception) {
    m_scuba_exception = scuba_exception;
    m_scuba_exception_isSet = true;
}

bool OAIActivities::is_scuba_exception_Set() const{
    return m_scuba_exception_isSet;
}

bool OAIActivities::is_scuba_exception_Valid() const{
    return m_scuba_exception_isValid;
}

bool OAIActivities::isSnorkeling() const {
    return m_snorkeling;
}
void OAIActivities::setSnorkeling(const bool &snorkeling) {
    m_snorkeling = snorkeling;
    m_snorkeling_isSet = true;
}

bool OAIActivities::is_snorkeling_Set() const{
    return m_snorkeling_isSet;
}

bool OAIActivities::is_snorkeling_Valid() const{
    return m_snorkeling_isValid;
}

QString OAIActivities::getSnorkelingException() const {
    return m_snorkeling_exception;
}
void OAIActivities::setSnorkelingException(const QString &snorkeling_exception) {
    m_snorkeling_exception = snorkeling_exception;
    m_snorkeling_exception_isSet = true;
}

bool OAIActivities::is_snorkeling_exception_Set() const{
    return m_snorkeling_exception_isSet;
}

bool OAIActivities::is_snorkeling_exception_Valid() const{
    return m_snorkeling_exception_isValid;
}

bool OAIActivities::isTennis() const {
    return m_tennis;
}
void OAIActivities::setTennis(const bool &tennis) {
    m_tennis = tennis;
    m_tennis_isSet = true;
}

bool OAIActivities::is_tennis_Set() const{
    return m_tennis_isSet;
}

bool OAIActivities::is_tennis_Valid() const{
    return m_tennis_isValid;
}

QString OAIActivities::getTennisException() const {
    return m_tennis_exception;
}
void OAIActivities::setTennisException(const QString &tennis_exception) {
    m_tennis_exception = tennis_exception;
    m_tennis_exception_isSet = true;
}

bool OAIActivities::is_tennis_exception_Set() const{
    return m_tennis_exception_isSet;
}

bool OAIActivities::is_tennis_exception_Valid() const{
    return m_tennis_exception_isValid;
}

bool OAIActivities::isWaterSkiing() const {
    return m_water_skiing;
}
void OAIActivities::setWaterSkiing(const bool &water_skiing) {
    m_water_skiing = water_skiing;
    m_water_skiing_isSet = true;
}

bool OAIActivities::is_water_skiing_Set() const{
    return m_water_skiing_isSet;
}

bool OAIActivities::is_water_skiing_Valid() const{
    return m_water_skiing_isValid;
}

QString OAIActivities::getWaterSkiingException() const {
    return m_water_skiing_exception;
}
void OAIActivities::setWaterSkiingException(const QString &water_skiing_exception) {
    m_water_skiing_exception = water_skiing_exception;
    m_water_skiing_exception_isSet = true;
}

bool OAIActivities::is_water_skiing_exception_Set() const{
    return m_water_skiing_exception_isSet;
}

bool OAIActivities::is_water_skiing_exception_Valid() const{
    return m_water_skiing_exception_isValid;
}

bool OAIActivities::isWatercraftRental() const {
    return m_watercraft_rental;
}
void OAIActivities::setWatercraftRental(const bool &watercraft_rental) {
    m_watercraft_rental = watercraft_rental;
    m_watercraft_rental_isSet = true;
}

bool OAIActivities::is_watercraft_rental_Set() const{
    return m_watercraft_rental_isSet;
}

bool OAIActivities::is_watercraft_rental_Valid() const{
    return m_watercraft_rental_isValid;
}

QString OAIActivities::getWatercraftRentalException() const {
    return m_watercraft_rental_exception;
}
void OAIActivities::setWatercraftRentalException(const QString &watercraft_rental_exception) {
    m_watercraft_rental_exception = watercraft_rental_exception;
    m_watercraft_rental_exception_isSet = true;
}

bool OAIActivities::is_watercraft_rental_exception_Set() const{
    return m_watercraft_rental_exception_isSet;
}

bool OAIActivities::is_watercraft_rental_exception_Valid() const{
    return m_watercraft_rental_exception_isValid;
}

bool OAIActivities::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beach_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beach_access_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beach_front_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beach_front_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bicycle_rental_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bicycle_rental_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boutique_stores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boutique_stores_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_casino_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_casino_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_bicycle_rental_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_bicycle_rental_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_watercraft_rental_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_watercraft_rental_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_room_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_room_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_golf_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_golf_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_horseback_riding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_horseback_riding_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nightclub_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nightclub_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_beach_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_beach_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scuba_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scuba_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snorkeling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snorkeling_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tennis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tennis_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_skiing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_water_skiing_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watercraft_rental_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watercraft_rental_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivities::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
