/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILivingAreaSleeping.h
 *
 * Information about sleeping features in the living area.
 */

#ifndef OAILivingAreaSleeping_H
#define OAILivingAreaSleeping_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILivingAreaSleeping : public OAIObject {
public:
    OAILivingAreaSleeping();
    OAILivingAreaSleeping(QString json);
    ~OAILivingAreaSleeping() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBedsCount() const;
    void setBedsCount(const qint32 &beds_count);
    bool is_beds_count_Set() const;
    bool is_beds_count_Valid() const;

    QString getBedsCountException() const;
    void setBedsCountException(const QString &beds_count_exception);
    bool is_beds_count_exception_Set() const;
    bool is_beds_count_exception_Valid() const;

    qint32 getBunkBedsCount() const;
    void setBunkBedsCount(const qint32 &bunk_beds_count);
    bool is_bunk_beds_count_Set() const;
    bool is_bunk_beds_count_Valid() const;

    QString getBunkBedsCountException() const;
    void setBunkBedsCountException(const QString &bunk_beds_count_exception);
    bool is_bunk_beds_count_exception_Set() const;
    bool is_bunk_beds_count_exception_Valid() const;

    qint32 getCribsCount() const;
    void setCribsCount(const qint32 &cribs_count);
    bool is_cribs_count_Set() const;
    bool is_cribs_count_Valid() const;

    QString getCribsCountException() const;
    void setCribsCountException(const QString &cribs_count_exception);
    bool is_cribs_count_exception_Set() const;
    bool is_cribs_count_exception_Valid() const;

    qint32 getDoubleBedsCount() const;
    void setDoubleBedsCount(const qint32 &double_beds_count);
    bool is_double_beds_count_Set() const;
    bool is_double_beds_count_Valid() const;

    QString getDoubleBedsCountException() const;
    void setDoubleBedsCountException(const QString &double_beds_count_exception);
    bool is_double_beds_count_exception_Set() const;
    bool is_double_beds_count_exception_Valid() const;

    bool isFeatherPillows() const;
    void setFeatherPillows(const bool &feather_pillows);
    bool is_feather_pillows_Set() const;
    bool is_feather_pillows_Valid() const;

    QString getFeatherPillowsException() const;
    void setFeatherPillowsException(const QString &feather_pillows_exception);
    bool is_feather_pillows_exception_Set() const;
    bool is_feather_pillows_exception_Valid() const;

    bool isHypoallergenicBedding() const;
    void setHypoallergenicBedding(const bool &hypoallergenic_bedding);
    bool is_hypoallergenic_bedding_Set() const;
    bool is_hypoallergenic_bedding_Valid() const;

    QString getHypoallergenicBeddingException() const;
    void setHypoallergenicBeddingException(const QString &hypoallergenic_bedding_exception);
    bool is_hypoallergenic_bedding_exception_Set() const;
    bool is_hypoallergenic_bedding_exception_Valid() const;

    qint32 getKingBedsCount() const;
    void setKingBedsCount(const qint32 &king_beds_count);
    bool is_king_beds_count_Set() const;
    bool is_king_beds_count_Valid() const;

    QString getKingBedsCountException() const;
    void setKingBedsCountException(const QString &king_beds_count_exception);
    bool is_king_beds_count_exception_Set() const;
    bool is_king_beds_count_exception_Valid() const;

    bool isMemoryFoamPillows() const;
    void setMemoryFoamPillows(const bool &memory_foam_pillows);
    bool is_memory_foam_pillows_Set() const;
    bool is_memory_foam_pillows_Valid() const;

    QString getMemoryFoamPillowsException() const;
    void setMemoryFoamPillowsException(const QString &memory_foam_pillows_exception);
    bool is_memory_foam_pillows_exception_Set() const;
    bool is_memory_foam_pillows_exception_Valid() const;

    qint32 getOtherBedsCount() const;
    void setOtherBedsCount(const qint32 &other_beds_count);
    bool is_other_beds_count_Set() const;
    bool is_other_beds_count_Valid() const;

    QString getOtherBedsCountException() const;
    void setOtherBedsCountException(const QString &other_beds_count_exception);
    bool is_other_beds_count_exception_Set() const;
    bool is_other_beds_count_exception_Valid() const;

    qint32 getQueenBedsCount() const;
    void setQueenBedsCount(const qint32 &queen_beds_count);
    bool is_queen_beds_count_Set() const;
    bool is_queen_beds_count_Valid() const;

    QString getQueenBedsCountException() const;
    void setQueenBedsCountException(const QString &queen_beds_count_exception);
    bool is_queen_beds_count_exception_Set() const;
    bool is_queen_beds_count_exception_Valid() const;

    qint32 getRollAwayBedsCount() const;
    void setRollAwayBedsCount(const qint32 &roll_away_beds_count);
    bool is_roll_away_beds_count_Set() const;
    bool is_roll_away_beds_count_Valid() const;

    QString getRollAwayBedsCountException() const;
    void setRollAwayBedsCountException(const QString &roll_away_beds_count_exception);
    bool is_roll_away_beds_count_exception_Set() const;
    bool is_roll_away_beds_count_exception_Valid() const;

    qint32 getSingleOrTwinBedsCount() const;
    void setSingleOrTwinBedsCount(const qint32 &single_or_twin_beds_count);
    bool is_single_or_twin_beds_count_Set() const;
    bool is_single_or_twin_beds_count_Valid() const;

    QString getSingleOrTwinBedsCountException() const;
    void setSingleOrTwinBedsCountException(const QString &single_or_twin_beds_count_exception);
    bool is_single_or_twin_beds_count_exception_Set() const;
    bool is_single_or_twin_beds_count_exception_Valid() const;

    qint32 getSofaBedsCount() const;
    void setSofaBedsCount(const qint32 &sofa_beds_count);
    bool is_sofa_beds_count_Set() const;
    bool is_sofa_beds_count_Valid() const;

    QString getSofaBedsCountException() const;
    void setSofaBedsCountException(const QString &sofa_beds_count_exception);
    bool is_sofa_beds_count_exception_Set() const;
    bool is_sofa_beds_count_exception_Valid() const;

    bool isSyntheticPillows() const;
    void setSyntheticPillows(const bool &synthetic_pillows);
    bool is_synthetic_pillows_Set() const;
    bool is_synthetic_pillows_Valid() const;

    QString getSyntheticPillowsException() const;
    void setSyntheticPillowsException(const QString &synthetic_pillows_exception);
    bool is_synthetic_pillows_exception_Set() const;
    bool is_synthetic_pillows_exception_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_beds_count;
    bool m_beds_count_isSet;
    bool m_beds_count_isValid;

    QString m_beds_count_exception;
    bool m_beds_count_exception_isSet;
    bool m_beds_count_exception_isValid;

    qint32 m_bunk_beds_count;
    bool m_bunk_beds_count_isSet;
    bool m_bunk_beds_count_isValid;

    QString m_bunk_beds_count_exception;
    bool m_bunk_beds_count_exception_isSet;
    bool m_bunk_beds_count_exception_isValid;

    qint32 m_cribs_count;
    bool m_cribs_count_isSet;
    bool m_cribs_count_isValid;

    QString m_cribs_count_exception;
    bool m_cribs_count_exception_isSet;
    bool m_cribs_count_exception_isValid;

    qint32 m_double_beds_count;
    bool m_double_beds_count_isSet;
    bool m_double_beds_count_isValid;

    QString m_double_beds_count_exception;
    bool m_double_beds_count_exception_isSet;
    bool m_double_beds_count_exception_isValid;

    bool m_feather_pillows;
    bool m_feather_pillows_isSet;
    bool m_feather_pillows_isValid;

    QString m_feather_pillows_exception;
    bool m_feather_pillows_exception_isSet;
    bool m_feather_pillows_exception_isValid;

    bool m_hypoallergenic_bedding;
    bool m_hypoallergenic_bedding_isSet;
    bool m_hypoallergenic_bedding_isValid;

    QString m_hypoallergenic_bedding_exception;
    bool m_hypoallergenic_bedding_exception_isSet;
    bool m_hypoallergenic_bedding_exception_isValid;

    qint32 m_king_beds_count;
    bool m_king_beds_count_isSet;
    bool m_king_beds_count_isValid;

    QString m_king_beds_count_exception;
    bool m_king_beds_count_exception_isSet;
    bool m_king_beds_count_exception_isValid;

    bool m_memory_foam_pillows;
    bool m_memory_foam_pillows_isSet;
    bool m_memory_foam_pillows_isValid;

    QString m_memory_foam_pillows_exception;
    bool m_memory_foam_pillows_exception_isSet;
    bool m_memory_foam_pillows_exception_isValid;

    qint32 m_other_beds_count;
    bool m_other_beds_count_isSet;
    bool m_other_beds_count_isValid;

    QString m_other_beds_count_exception;
    bool m_other_beds_count_exception_isSet;
    bool m_other_beds_count_exception_isValid;

    qint32 m_queen_beds_count;
    bool m_queen_beds_count_isSet;
    bool m_queen_beds_count_isValid;

    QString m_queen_beds_count_exception;
    bool m_queen_beds_count_exception_isSet;
    bool m_queen_beds_count_exception_isValid;

    qint32 m_roll_away_beds_count;
    bool m_roll_away_beds_count_isSet;
    bool m_roll_away_beds_count_isValid;

    QString m_roll_away_beds_count_exception;
    bool m_roll_away_beds_count_exception_isSet;
    bool m_roll_away_beds_count_exception_isValid;

    qint32 m_single_or_twin_beds_count;
    bool m_single_or_twin_beds_count_isSet;
    bool m_single_or_twin_beds_count_isValid;

    QString m_single_or_twin_beds_count_exception;
    bool m_single_or_twin_beds_count_exception_isSet;
    bool m_single_or_twin_beds_count_exception_isValid;

    qint32 m_sofa_beds_count;
    bool m_sofa_beds_count_isSet;
    bool m_sofa_beds_count_isValid;

    QString m_sofa_beds_count_exception;
    bool m_sofa_beds_count_exception_isSet;
    bool m_sofa_beds_count_exception_isValid;

    bool m_synthetic_pillows;
    bool m_synthetic_pillows_isSet;
    bool m_synthetic_pillows_isValid;

    QString m_synthetic_pillows_exception;
    bool m_synthetic_pillows_exception_isSet;
    bool m_synthetic_pillows_exception_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILivingAreaSleeping)

#endif // OAILivingAreaSleeping_H
