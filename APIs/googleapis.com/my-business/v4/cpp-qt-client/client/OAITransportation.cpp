/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransportation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransportation::OAITransportation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransportation::OAITransportation() {
    this->initializeModel();
}

OAITransportation::~OAITransportation() {}

void OAITransportation::initializeModel() {

    m_airport_shuttle_isSet = false;
    m_airport_shuttle_isValid = false;

    m_airport_shuttle_exception_isSet = false;
    m_airport_shuttle_exception_isValid = false;

    m_car_rental_on_property_isSet = false;
    m_car_rental_on_property_isValid = false;

    m_car_rental_on_property_exception_isSet = false;
    m_car_rental_on_property_exception_isValid = false;

    m_free_airport_shuttle_isSet = false;
    m_free_airport_shuttle_isValid = false;

    m_free_airport_shuttle_exception_isSet = false;
    m_free_airport_shuttle_exception_isValid = false;

    m_free_private_car_service_isSet = false;
    m_free_private_car_service_isValid = false;

    m_free_private_car_service_exception_isSet = false;
    m_free_private_car_service_exception_isValid = false;

    m_local_shuttle_isSet = false;
    m_local_shuttle_isValid = false;

    m_local_shuttle_exception_isSet = false;
    m_local_shuttle_exception_isValid = false;

    m_private_car_service_isSet = false;
    m_private_car_service_isValid = false;

    m_private_car_service_exception_isSet = false;
    m_private_car_service_exception_isValid = false;

    m_transfer_isSet = false;
    m_transfer_isValid = false;

    m_transfer_exception_isSet = false;
    m_transfer_exception_isValid = false;
}

void OAITransportation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransportation::fromJsonObject(QJsonObject json) {

    m_airport_shuttle_isValid = ::OpenAPI::fromJsonValue(m_airport_shuttle, json[QString("airportShuttle")]);
    m_airport_shuttle_isSet = !json[QString("airportShuttle")].isNull() && m_airport_shuttle_isValid;

    m_airport_shuttle_exception_isValid = ::OpenAPI::fromJsonValue(m_airport_shuttle_exception, json[QString("airportShuttleException")]);
    m_airport_shuttle_exception_isSet = !json[QString("airportShuttleException")].isNull() && m_airport_shuttle_exception_isValid;

    m_car_rental_on_property_isValid = ::OpenAPI::fromJsonValue(m_car_rental_on_property, json[QString("carRentalOnProperty")]);
    m_car_rental_on_property_isSet = !json[QString("carRentalOnProperty")].isNull() && m_car_rental_on_property_isValid;

    m_car_rental_on_property_exception_isValid = ::OpenAPI::fromJsonValue(m_car_rental_on_property_exception, json[QString("carRentalOnPropertyException")]);
    m_car_rental_on_property_exception_isSet = !json[QString("carRentalOnPropertyException")].isNull() && m_car_rental_on_property_exception_isValid;

    m_free_airport_shuttle_isValid = ::OpenAPI::fromJsonValue(m_free_airport_shuttle, json[QString("freeAirportShuttle")]);
    m_free_airport_shuttle_isSet = !json[QString("freeAirportShuttle")].isNull() && m_free_airport_shuttle_isValid;

    m_free_airport_shuttle_exception_isValid = ::OpenAPI::fromJsonValue(m_free_airport_shuttle_exception, json[QString("freeAirportShuttleException")]);
    m_free_airport_shuttle_exception_isSet = !json[QString("freeAirportShuttleException")].isNull() && m_free_airport_shuttle_exception_isValid;

    m_free_private_car_service_isValid = ::OpenAPI::fromJsonValue(m_free_private_car_service, json[QString("freePrivateCarService")]);
    m_free_private_car_service_isSet = !json[QString("freePrivateCarService")].isNull() && m_free_private_car_service_isValid;

    m_free_private_car_service_exception_isValid = ::OpenAPI::fromJsonValue(m_free_private_car_service_exception, json[QString("freePrivateCarServiceException")]);
    m_free_private_car_service_exception_isSet = !json[QString("freePrivateCarServiceException")].isNull() && m_free_private_car_service_exception_isValid;

    m_local_shuttle_isValid = ::OpenAPI::fromJsonValue(m_local_shuttle, json[QString("localShuttle")]);
    m_local_shuttle_isSet = !json[QString("localShuttle")].isNull() && m_local_shuttle_isValid;

    m_local_shuttle_exception_isValid = ::OpenAPI::fromJsonValue(m_local_shuttle_exception, json[QString("localShuttleException")]);
    m_local_shuttle_exception_isSet = !json[QString("localShuttleException")].isNull() && m_local_shuttle_exception_isValid;

    m_private_car_service_isValid = ::OpenAPI::fromJsonValue(m_private_car_service, json[QString("privateCarService")]);
    m_private_car_service_isSet = !json[QString("privateCarService")].isNull() && m_private_car_service_isValid;

    m_private_car_service_exception_isValid = ::OpenAPI::fromJsonValue(m_private_car_service_exception, json[QString("privateCarServiceException")]);
    m_private_car_service_exception_isSet = !json[QString("privateCarServiceException")].isNull() && m_private_car_service_exception_isValid;

    m_transfer_isValid = ::OpenAPI::fromJsonValue(m_transfer, json[QString("transfer")]);
    m_transfer_isSet = !json[QString("transfer")].isNull() && m_transfer_isValid;

    m_transfer_exception_isValid = ::OpenAPI::fromJsonValue(m_transfer_exception, json[QString("transferException")]);
    m_transfer_exception_isSet = !json[QString("transferException")].isNull() && m_transfer_exception_isValid;
}

QString OAITransportation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransportation::asJsonObject() const {
    QJsonObject obj;
    if (m_airport_shuttle_isSet) {
        obj.insert(QString("airportShuttle"), ::OpenAPI::toJsonValue(m_airport_shuttle));
    }
    if (m_airport_shuttle_exception_isSet) {
        obj.insert(QString("airportShuttleException"), ::OpenAPI::toJsonValue(m_airport_shuttle_exception));
    }
    if (m_car_rental_on_property_isSet) {
        obj.insert(QString("carRentalOnProperty"), ::OpenAPI::toJsonValue(m_car_rental_on_property));
    }
    if (m_car_rental_on_property_exception_isSet) {
        obj.insert(QString("carRentalOnPropertyException"), ::OpenAPI::toJsonValue(m_car_rental_on_property_exception));
    }
    if (m_free_airport_shuttle_isSet) {
        obj.insert(QString("freeAirportShuttle"), ::OpenAPI::toJsonValue(m_free_airport_shuttle));
    }
    if (m_free_airport_shuttle_exception_isSet) {
        obj.insert(QString("freeAirportShuttleException"), ::OpenAPI::toJsonValue(m_free_airport_shuttle_exception));
    }
    if (m_free_private_car_service_isSet) {
        obj.insert(QString("freePrivateCarService"), ::OpenAPI::toJsonValue(m_free_private_car_service));
    }
    if (m_free_private_car_service_exception_isSet) {
        obj.insert(QString("freePrivateCarServiceException"), ::OpenAPI::toJsonValue(m_free_private_car_service_exception));
    }
    if (m_local_shuttle_isSet) {
        obj.insert(QString("localShuttle"), ::OpenAPI::toJsonValue(m_local_shuttle));
    }
    if (m_local_shuttle_exception_isSet) {
        obj.insert(QString("localShuttleException"), ::OpenAPI::toJsonValue(m_local_shuttle_exception));
    }
    if (m_private_car_service_isSet) {
        obj.insert(QString("privateCarService"), ::OpenAPI::toJsonValue(m_private_car_service));
    }
    if (m_private_car_service_exception_isSet) {
        obj.insert(QString("privateCarServiceException"), ::OpenAPI::toJsonValue(m_private_car_service_exception));
    }
    if (m_transfer_isSet) {
        obj.insert(QString("transfer"), ::OpenAPI::toJsonValue(m_transfer));
    }
    if (m_transfer_exception_isSet) {
        obj.insert(QString("transferException"), ::OpenAPI::toJsonValue(m_transfer_exception));
    }
    return obj;
}

bool OAITransportation::isAirportShuttle() const {
    return m_airport_shuttle;
}
void OAITransportation::setAirportShuttle(const bool &airport_shuttle) {
    m_airport_shuttle = airport_shuttle;
    m_airport_shuttle_isSet = true;
}

bool OAITransportation::is_airport_shuttle_Set() const{
    return m_airport_shuttle_isSet;
}

bool OAITransportation::is_airport_shuttle_Valid() const{
    return m_airport_shuttle_isValid;
}

QString OAITransportation::getAirportShuttleException() const {
    return m_airport_shuttle_exception;
}
void OAITransportation::setAirportShuttleException(const QString &airport_shuttle_exception) {
    m_airport_shuttle_exception = airport_shuttle_exception;
    m_airport_shuttle_exception_isSet = true;
}

bool OAITransportation::is_airport_shuttle_exception_Set() const{
    return m_airport_shuttle_exception_isSet;
}

bool OAITransportation::is_airport_shuttle_exception_Valid() const{
    return m_airport_shuttle_exception_isValid;
}

bool OAITransportation::isCarRentalOnProperty() const {
    return m_car_rental_on_property;
}
void OAITransportation::setCarRentalOnProperty(const bool &car_rental_on_property) {
    m_car_rental_on_property = car_rental_on_property;
    m_car_rental_on_property_isSet = true;
}

bool OAITransportation::is_car_rental_on_property_Set() const{
    return m_car_rental_on_property_isSet;
}

bool OAITransportation::is_car_rental_on_property_Valid() const{
    return m_car_rental_on_property_isValid;
}

QString OAITransportation::getCarRentalOnPropertyException() const {
    return m_car_rental_on_property_exception;
}
void OAITransportation::setCarRentalOnPropertyException(const QString &car_rental_on_property_exception) {
    m_car_rental_on_property_exception = car_rental_on_property_exception;
    m_car_rental_on_property_exception_isSet = true;
}

bool OAITransportation::is_car_rental_on_property_exception_Set() const{
    return m_car_rental_on_property_exception_isSet;
}

bool OAITransportation::is_car_rental_on_property_exception_Valid() const{
    return m_car_rental_on_property_exception_isValid;
}

bool OAITransportation::isFreeAirportShuttle() const {
    return m_free_airport_shuttle;
}
void OAITransportation::setFreeAirportShuttle(const bool &free_airport_shuttle) {
    m_free_airport_shuttle = free_airport_shuttle;
    m_free_airport_shuttle_isSet = true;
}

bool OAITransportation::is_free_airport_shuttle_Set() const{
    return m_free_airport_shuttle_isSet;
}

bool OAITransportation::is_free_airport_shuttle_Valid() const{
    return m_free_airport_shuttle_isValid;
}

QString OAITransportation::getFreeAirportShuttleException() const {
    return m_free_airport_shuttle_exception;
}
void OAITransportation::setFreeAirportShuttleException(const QString &free_airport_shuttle_exception) {
    m_free_airport_shuttle_exception = free_airport_shuttle_exception;
    m_free_airport_shuttle_exception_isSet = true;
}

bool OAITransportation::is_free_airport_shuttle_exception_Set() const{
    return m_free_airport_shuttle_exception_isSet;
}

bool OAITransportation::is_free_airport_shuttle_exception_Valid() const{
    return m_free_airport_shuttle_exception_isValid;
}

bool OAITransportation::isFreePrivateCarService() const {
    return m_free_private_car_service;
}
void OAITransportation::setFreePrivateCarService(const bool &free_private_car_service) {
    m_free_private_car_service = free_private_car_service;
    m_free_private_car_service_isSet = true;
}

bool OAITransportation::is_free_private_car_service_Set() const{
    return m_free_private_car_service_isSet;
}

bool OAITransportation::is_free_private_car_service_Valid() const{
    return m_free_private_car_service_isValid;
}

QString OAITransportation::getFreePrivateCarServiceException() const {
    return m_free_private_car_service_exception;
}
void OAITransportation::setFreePrivateCarServiceException(const QString &free_private_car_service_exception) {
    m_free_private_car_service_exception = free_private_car_service_exception;
    m_free_private_car_service_exception_isSet = true;
}

bool OAITransportation::is_free_private_car_service_exception_Set() const{
    return m_free_private_car_service_exception_isSet;
}

bool OAITransportation::is_free_private_car_service_exception_Valid() const{
    return m_free_private_car_service_exception_isValid;
}

bool OAITransportation::isLocalShuttle() const {
    return m_local_shuttle;
}
void OAITransportation::setLocalShuttle(const bool &local_shuttle) {
    m_local_shuttle = local_shuttle;
    m_local_shuttle_isSet = true;
}

bool OAITransportation::is_local_shuttle_Set() const{
    return m_local_shuttle_isSet;
}

bool OAITransportation::is_local_shuttle_Valid() const{
    return m_local_shuttle_isValid;
}

QString OAITransportation::getLocalShuttleException() const {
    return m_local_shuttle_exception;
}
void OAITransportation::setLocalShuttleException(const QString &local_shuttle_exception) {
    m_local_shuttle_exception = local_shuttle_exception;
    m_local_shuttle_exception_isSet = true;
}

bool OAITransportation::is_local_shuttle_exception_Set() const{
    return m_local_shuttle_exception_isSet;
}

bool OAITransportation::is_local_shuttle_exception_Valid() const{
    return m_local_shuttle_exception_isValid;
}

bool OAITransportation::isPrivateCarService() const {
    return m_private_car_service;
}
void OAITransportation::setPrivateCarService(const bool &private_car_service) {
    m_private_car_service = private_car_service;
    m_private_car_service_isSet = true;
}

bool OAITransportation::is_private_car_service_Set() const{
    return m_private_car_service_isSet;
}

bool OAITransportation::is_private_car_service_Valid() const{
    return m_private_car_service_isValid;
}

QString OAITransportation::getPrivateCarServiceException() const {
    return m_private_car_service_exception;
}
void OAITransportation::setPrivateCarServiceException(const QString &private_car_service_exception) {
    m_private_car_service_exception = private_car_service_exception;
    m_private_car_service_exception_isSet = true;
}

bool OAITransportation::is_private_car_service_exception_Set() const{
    return m_private_car_service_exception_isSet;
}

bool OAITransportation::is_private_car_service_exception_Valid() const{
    return m_private_car_service_exception_isValid;
}

bool OAITransportation::isTransfer() const {
    return m_transfer;
}
void OAITransportation::setTransfer(const bool &transfer) {
    m_transfer = transfer;
    m_transfer_isSet = true;
}

bool OAITransportation::is_transfer_Set() const{
    return m_transfer_isSet;
}

bool OAITransportation::is_transfer_Valid() const{
    return m_transfer_isValid;
}

QString OAITransportation::getTransferException() const {
    return m_transfer_exception;
}
void OAITransportation::setTransferException(const QString &transfer_exception) {
    m_transfer_exception = transfer_exception;
    m_transfer_exception_isSet = true;
}

bool OAITransportation::is_transfer_exception_Set() const{
    return m_transfer_exception_isSet;
}

bool OAITransportation::is_transfer_exception_Valid() const{
    return m_transfer_exception_isValid;
}

bool OAITransportation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_airport_shuttle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airport_shuttle_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_on_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_on_property_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_airport_shuttle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_airport_shuttle_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_private_car_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_private_car_service_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_shuttle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_shuttle_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_car_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_car_service_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransportation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
