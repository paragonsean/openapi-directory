/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILodging.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILodging::OAILodging(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILodging::OAILodging() {
    this->initializeModel();
}

OAILodging::~OAILodging() {}

void OAILodging::initializeModel() {

    m_accessibility_isSet = false;
    m_accessibility_isValid = false;

    m_activities_isSet = false;
    m_activities_isValid = false;

    m_all_units_isSet = false;
    m_all_units_isValid = false;

    m_business_isSet = false;
    m_business_isValid = false;

    m_common_living_area_isSet = false;
    m_common_living_area_isValid = false;

    m_connectivity_isSet = false;
    m_connectivity_isValid = false;

    m_families_isSet = false;
    m_families_isValid = false;

    m_food_and_drink_isSet = false;
    m_food_and_drink_isValid = false;

    m_guest_units_isSet = false;
    m_guest_units_isValid = false;

    m_health_and_safety_isSet = false;
    m_health_and_safety_isValid = false;

    m_housekeeping_isSet = false;
    m_housekeeping_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parking_isSet = false;
    m_parking_isValid = false;

    m_pets_isSet = false;
    m_pets_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;

    m_pools_isSet = false;
    m_pools_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_some_units_isSet = false;
    m_some_units_isValid = false;

    m_transportation_isSet = false;
    m_transportation_isValid = false;

    m_wellness_isSet = false;
    m_wellness_isValid = false;
}

void OAILodging::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILodging::fromJsonObject(QJsonObject json) {

    m_accessibility_isValid = ::OpenAPI::fromJsonValue(m_accessibility, json[QString("accessibility")]);
    m_accessibility_isSet = !json[QString("accessibility")].isNull() && m_accessibility_isValid;

    m_activities_isValid = ::OpenAPI::fromJsonValue(m_activities, json[QString("activities")]);
    m_activities_isSet = !json[QString("activities")].isNull() && m_activities_isValid;

    m_all_units_isValid = ::OpenAPI::fromJsonValue(m_all_units, json[QString("allUnits")]);
    m_all_units_isSet = !json[QString("allUnits")].isNull() && m_all_units_isValid;

    m_business_isValid = ::OpenAPI::fromJsonValue(m_business, json[QString("business")]);
    m_business_isSet = !json[QString("business")].isNull() && m_business_isValid;

    m_common_living_area_isValid = ::OpenAPI::fromJsonValue(m_common_living_area, json[QString("commonLivingArea")]);
    m_common_living_area_isSet = !json[QString("commonLivingArea")].isNull() && m_common_living_area_isValid;

    m_connectivity_isValid = ::OpenAPI::fromJsonValue(m_connectivity, json[QString("connectivity")]);
    m_connectivity_isSet = !json[QString("connectivity")].isNull() && m_connectivity_isValid;

    m_families_isValid = ::OpenAPI::fromJsonValue(m_families, json[QString("families")]);
    m_families_isSet = !json[QString("families")].isNull() && m_families_isValid;

    m_food_and_drink_isValid = ::OpenAPI::fromJsonValue(m_food_and_drink, json[QString("foodAndDrink")]);
    m_food_and_drink_isSet = !json[QString("foodAndDrink")].isNull() && m_food_and_drink_isValid;

    m_guest_units_isValid = ::OpenAPI::fromJsonValue(m_guest_units, json[QString("guestUnits")]);
    m_guest_units_isSet = !json[QString("guestUnits")].isNull() && m_guest_units_isValid;

    m_health_and_safety_isValid = ::OpenAPI::fromJsonValue(m_health_and_safety, json[QString("healthAndSafety")]);
    m_health_and_safety_isSet = !json[QString("healthAndSafety")].isNull() && m_health_and_safety_isValid;

    m_housekeeping_isValid = ::OpenAPI::fromJsonValue(m_housekeeping, json[QString("housekeeping")]);
    m_housekeeping_isSet = !json[QString("housekeeping")].isNull() && m_housekeeping_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parking_isValid = ::OpenAPI::fromJsonValue(m_parking, json[QString("parking")]);
    m_parking_isSet = !json[QString("parking")].isNull() && m_parking_isValid;

    m_pets_isValid = ::OpenAPI::fromJsonValue(m_pets, json[QString("pets")]);
    m_pets_isSet = !json[QString("pets")].isNull() && m_pets_isValid;

    m_policies_isValid = ::OpenAPI::fromJsonValue(m_policies, json[QString("policies")]);
    m_policies_isSet = !json[QString("policies")].isNull() && m_policies_isValid;

    m_pools_isValid = ::OpenAPI::fromJsonValue(m_pools, json[QString("pools")]);
    m_pools_isSet = !json[QString("pools")].isNull() && m_pools_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_some_units_isValid = ::OpenAPI::fromJsonValue(m_some_units, json[QString("someUnits")]);
    m_some_units_isSet = !json[QString("someUnits")].isNull() && m_some_units_isValid;

    m_transportation_isValid = ::OpenAPI::fromJsonValue(m_transportation, json[QString("transportation")]);
    m_transportation_isSet = !json[QString("transportation")].isNull() && m_transportation_isValid;

    m_wellness_isValid = ::OpenAPI::fromJsonValue(m_wellness, json[QString("wellness")]);
    m_wellness_isSet = !json[QString("wellness")].isNull() && m_wellness_isValid;
}

QString OAILodging::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILodging::asJsonObject() const {
    QJsonObject obj;
    if (m_accessibility.isSet()) {
        obj.insert(QString("accessibility"), ::OpenAPI::toJsonValue(m_accessibility));
    }
    if (m_activities.isSet()) {
        obj.insert(QString("activities"), ::OpenAPI::toJsonValue(m_activities));
    }
    if (m_all_units.isSet()) {
        obj.insert(QString("allUnits"), ::OpenAPI::toJsonValue(m_all_units));
    }
    if (m_business.isSet()) {
        obj.insert(QString("business"), ::OpenAPI::toJsonValue(m_business));
    }
    if (m_common_living_area.isSet()) {
        obj.insert(QString("commonLivingArea"), ::OpenAPI::toJsonValue(m_common_living_area));
    }
    if (m_connectivity.isSet()) {
        obj.insert(QString("connectivity"), ::OpenAPI::toJsonValue(m_connectivity));
    }
    if (m_families.isSet()) {
        obj.insert(QString("families"), ::OpenAPI::toJsonValue(m_families));
    }
    if (m_food_and_drink.isSet()) {
        obj.insert(QString("foodAndDrink"), ::OpenAPI::toJsonValue(m_food_and_drink));
    }
    if (m_guest_units.size() > 0) {
        obj.insert(QString("guestUnits"), ::OpenAPI::toJsonValue(m_guest_units));
    }
    if (m_health_and_safety.isSet()) {
        obj.insert(QString("healthAndSafety"), ::OpenAPI::toJsonValue(m_health_and_safety));
    }
    if (m_housekeeping.isSet()) {
        obj.insert(QString("housekeeping"), ::OpenAPI::toJsonValue(m_housekeeping));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parking.isSet()) {
        obj.insert(QString("parking"), ::OpenAPI::toJsonValue(m_parking));
    }
    if (m_pets.isSet()) {
        obj.insert(QString("pets"), ::OpenAPI::toJsonValue(m_pets));
    }
    if (m_policies.isSet()) {
        obj.insert(QString("policies"), ::OpenAPI::toJsonValue(m_policies));
    }
    if (m_pools.isSet()) {
        obj.insert(QString("pools"), ::OpenAPI::toJsonValue(m_pools));
    }
    if (m_property.isSet()) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    if (m_services.isSet()) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_some_units.isSet()) {
        obj.insert(QString("someUnits"), ::OpenAPI::toJsonValue(m_some_units));
    }
    if (m_transportation.isSet()) {
        obj.insert(QString("transportation"), ::OpenAPI::toJsonValue(m_transportation));
    }
    if (m_wellness.isSet()) {
        obj.insert(QString("wellness"), ::OpenAPI::toJsonValue(m_wellness));
    }
    return obj;
}

OAIAccessibility OAILodging::getAccessibility() const {
    return m_accessibility;
}
void OAILodging::setAccessibility(const OAIAccessibility &accessibility) {
    m_accessibility = accessibility;
    m_accessibility_isSet = true;
}

bool OAILodging::is_accessibility_Set() const{
    return m_accessibility_isSet;
}

bool OAILodging::is_accessibility_Valid() const{
    return m_accessibility_isValid;
}

OAIActivities OAILodging::getActivities() const {
    return m_activities;
}
void OAILodging::setActivities(const OAIActivities &activities) {
    m_activities = activities;
    m_activities_isSet = true;
}

bool OAILodging::is_activities_Set() const{
    return m_activities_isSet;
}

bool OAILodging::is_activities_Valid() const{
    return m_activities_isValid;
}

OAIGuestUnitFeatures OAILodging::getAllUnits() const {
    return m_all_units;
}
void OAILodging::setAllUnits(const OAIGuestUnitFeatures &all_units) {
    m_all_units = all_units;
    m_all_units_isSet = true;
}

bool OAILodging::is_all_units_Set() const{
    return m_all_units_isSet;
}

bool OAILodging::is_all_units_Valid() const{
    return m_all_units_isValid;
}

OAIBusiness OAILodging::getBusiness() const {
    return m_business;
}
void OAILodging::setBusiness(const OAIBusiness &business) {
    m_business = business;
    m_business_isSet = true;
}

bool OAILodging::is_business_Set() const{
    return m_business_isSet;
}

bool OAILodging::is_business_Valid() const{
    return m_business_isValid;
}

OAILivingArea OAILodging::getCommonLivingArea() const {
    return m_common_living_area;
}
void OAILodging::setCommonLivingArea(const OAILivingArea &common_living_area) {
    m_common_living_area = common_living_area;
    m_common_living_area_isSet = true;
}

bool OAILodging::is_common_living_area_Set() const{
    return m_common_living_area_isSet;
}

bool OAILodging::is_common_living_area_Valid() const{
    return m_common_living_area_isValid;
}

OAIConnectivity OAILodging::getConnectivity() const {
    return m_connectivity;
}
void OAILodging::setConnectivity(const OAIConnectivity &connectivity) {
    m_connectivity = connectivity;
    m_connectivity_isSet = true;
}

bool OAILodging::is_connectivity_Set() const{
    return m_connectivity_isSet;
}

bool OAILodging::is_connectivity_Valid() const{
    return m_connectivity_isValid;
}

OAIFamilies OAILodging::getFamilies() const {
    return m_families;
}
void OAILodging::setFamilies(const OAIFamilies &families) {
    m_families = families;
    m_families_isSet = true;
}

bool OAILodging::is_families_Set() const{
    return m_families_isSet;
}

bool OAILodging::is_families_Valid() const{
    return m_families_isValid;
}

OAIFoodAndDrink OAILodging::getFoodAndDrink() const {
    return m_food_and_drink;
}
void OAILodging::setFoodAndDrink(const OAIFoodAndDrink &food_and_drink) {
    m_food_and_drink = food_and_drink;
    m_food_and_drink_isSet = true;
}

bool OAILodging::is_food_and_drink_Set() const{
    return m_food_and_drink_isSet;
}

bool OAILodging::is_food_and_drink_Valid() const{
    return m_food_and_drink_isValid;
}

QList<OAIGuestUnitType> OAILodging::getGuestUnits() const {
    return m_guest_units;
}
void OAILodging::setGuestUnits(const QList<OAIGuestUnitType> &guest_units) {
    m_guest_units = guest_units;
    m_guest_units_isSet = true;
}

bool OAILodging::is_guest_units_Set() const{
    return m_guest_units_isSet;
}

bool OAILodging::is_guest_units_Valid() const{
    return m_guest_units_isValid;
}

OAIHealthAndSafety OAILodging::getHealthAndSafety() const {
    return m_health_and_safety;
}
void OAILodging::setHealthAndSafety(const OAIHealthAndSafety &health_and_safety) {
    m_health_and_safety = health_and_safety;
    m_health_and_safety_isSet = true;
}

bool OAILodging::is_health_and_safety_Set() const{
    return m_health_and_safety_isSet;
}

bool OAILodging::is_health_and_safety_Valid() const{
    return m_health_and_safety_isValid;
}

OAIHousekeeping OAILodging::getHousekeeping() const {
    return m_housekeeping;
}
void OAILodging::setHousekeeping(const OAIHousekeeping &housekeeping) {
    m_housekeeping = housekeeping;
    m_housekeeping_isSet = true;
}

bool OAILodging::is_housekeeping_Set() const{
    return m_housekeeping_isSet;
}

bool OAILodging::is_housekeeping_Valid() const{
    return m_housekeeping_isValid;
}

OAILodgingMetadata OAILodging::getMetadata() const {
    return m_metadata;
}
void OAILodging::setMetadata(const OAILodgingMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAILodging::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAILodging::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAILodging::getName() const {
    return m_name;
}
void OAILodging::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILodging::is_name_Set() const{
    return m_name_isSet;
}

bool OAILodging::is_name_Valid() const{
    return m_name_isValid;
}

OAIParking OAILodging::getParking() const {
    return m_parking;
}
void OAILodging::setParking(const OAIParking &parking) {
    m_parking = parking;
    m_parking_isSet = true;
}

bool OAILodging::is_parking_Set() const{
    return m_parking_isSet;
}

bool OAILodging::is_parking_Valid() const{
    return m_parking_isValid;
}

OAIPets OAILodging::getPets() const {
    return m_pets;
}
void OAILodging::setPets(const OAIPets &pets) {
    m_pets = pets;
    m_pets_isSet = true;
}

bool OAILodging::is_pets_Set() const{
    return m_pets_isSet;
}

bool OAILodging::is_pets_Valid() const{
    return m_pets_isValid;
}

OAIPolicies OAILodging::getPolicies() const {
    return m_policies;
}
void OAILodging::setPolicies(const OAIPolicies &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAILodging::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAILodging::is_policies_Valid() const{
    return m_policies_isValid;
}

OAIPools OAILodging::getPools() const {
    return m_pools;
}
void OAILodging::setPools(const OAIPools &pools) {
    m_pools = pools;
    m_pools_isSet = true;
}

bool OAILodging::is_pools_Set() const{
    return m_pools_isSet;
}

bool OAILodging::is_pools_Valid() const{
    return m_pools_isValid;
}

OAIProperty OAILodging::getProperty() const {
    return m_property;
}
void OAILodging::setProperty(const OAIProperty &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAILodging::is_property_Set() const{
    return m_property_isSet;
}

bool OAILodging::is_property_Valid() const{
    return m_property_isValid;
}

OAIServices OAILodging::getServices() const {
    return m_services;
}
void OAILodging::setServices(const OAIServices &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAILodging::is_services_Set() const{
    return m_services_isSet;
}

bool OAILodging::is_services_Valid() const{
    return m_services_isValid;
}

OAIGuestUnitFeatures OAILodging::getSomeUnits() const {
    return m_some_units;
}
void OAILodging::setSomeUnits(const OAIGuestUnitFeatures &some_units) {
    m_some_units = some_units;
    m_some_units_isSet = true;
}

bool OAILodging::is_some_units_Set() const{
    return m_some_units_isSet;
}

bool OAILodging::is_some_units_Valid() const{
    return m_some_units_isValid;
}

OAITransportation OAILodging::getTransportation() const {
    return m_transportation;
}
void OAILodging::setTransportation(const OAITransportation &transportation) {
    m_transportation = transportation;
    m_transportation_isSet = true;
}

bool OAILodging::is_transportation_Set() const{
    return m_transportation_isSet;
}

bool OAILodging::is_transportation_Valid() const{
    return m_transportation_isValid;
}

OAIWellness OAILodging::getWellness() const {
    return m_wellness;
}
void OAILodging::setWellness(const OAIWellness &wellness) {
    m_wellness = wellness;
    m_wellness_isSet = true;
}

bool OAILodging::is_wellness_Set() const{
    return m_wellness_isSet;
}

bool OAILodging::is_wellness_Valid() const{
    return m_wellness_isValid;
}

bool OAILodging::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_units.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_business.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_living_area.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectivity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_families.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_food_and_drink.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_units.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_and_safety.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_housekeeping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parking.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pools.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_property.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_some_units.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transportation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wellness.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILodging::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
