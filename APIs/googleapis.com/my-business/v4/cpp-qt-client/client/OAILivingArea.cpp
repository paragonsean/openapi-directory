/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILivingArea.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILivingArea::OAILivingArea(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILivingArea::OAILivingArea() {
    this->initializeModel();
}

OAILivingArea::~OAILivingArea() {}

void OAILivingArea::initializeModel() {

    m_accessibility_isSet = false;
    m_accessibility_isValid = false;

    m_eating_isSet = false;
    m_eating_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_layout_isSet = false;
    m_layout_isValid = false;

    m_sleeping_isSet = false;
    m_sleeping_isValid = false;
}

void OAILivingArea::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILivingArea::fromJsonObject(QJsonObject json) {

    m_accessibility_isValid = ::OpenAPI::fromJsonValue(m_accessibility, json[QString("accessibility")]);
    m_accessibility_isSet = !json[QString("accessibility")].isNull() && m_accessibility_isValid;

    m_eating_isValid = ::OpenAPI::fromJsonValue(m_eating, json[QString("eating")]);
    m_eating_isSet = !json[QString("eating")].isNull() && m_eating_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_layout_isValid = ::OpenAPI::fromJsonValue(m_layout, json[QString("layout")]);
    m_layout_isSet = !json[QString("layout")].isNull() && m_layout_isValid;

    m_sleeping_isValid = ::OpenAPI::fromJsonValue(m_sleeping, json[QString("sleeping")]);
    m_sleeping_isSet = !json[QString("sleeping")].isNull() && m_sleeping_isValid;
}

QString OAILivingArea::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILivingArea::asJsonObject() const {
    QJsonObject obj;
    if (m_accessibility.isSet()) {
        obj.insert(QString("accessibility"), ::OpenAPI::toJsonValue(m_accessibility));
    }
    if (m_eating.isSet()) {
        obj.insert(QString("eating"), ::OpenAPI::toJsonValue(m_eating));
    }
    if (m_features.isSet()) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_layout.isSet()) {
        obj.insert(QString("layout"), ::OpenAPI::toJsonValue(m_layout));
    }
    if (m_sleeping.isSet()) {
        obj.insert(QString("sleeping"), ::OpenAPI::toJsonValue(m_sleeping));
    }
    return obj;
}

OAILivingAreaAccessibility OAILivingArea::getAccessibility() const {
    return m_accessibility;
}
void OAILivingArea::setAccessibility(const OAILivingAreaAccessibility &accessibility) {
    m_accessibility = accessibility;
    m_accessibility_isSet = true;
}

bool OAILivingArea::is_accessibility_Set() const{
    return m_accessibility_isSet;
}

bool OAILivingArea::is_accessibility_Valid() const{
    return m_accessibility_isValid;
}

OAILivingAreaEating OAILivingArea::getEating() const {
    return m_eating;
}
void OAILivingArea::setEating(const OAILivingAreaEating &eating) {
    m_eating = eating;
    m_eating_isSet = true;
}

bool OAILivingArea::is_eating_Set() const{
    return m_eating_isSet;
}

bool OAILivingArea::is_eating_Valid() const{
    return m_eating_isValid;
}

OAILivingAreaFeatures OAILivingArea::getFeatures() const {
    return m_features;
}
void OAILivingArea::setFeatures(const OAILivingAreaFeatures &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAILivingArea::is_features_Set() const{
    return m_features_isSet;
}

bool OAILivingArea::is_features_Valid() const{
    return m_features_isValid;
}

OAILivingAreaLayout OAILivingArea::getLayout() const {
    return m_layout;
}
void OAILivingArea::setLayout(const OAILivingAreaLayout &layout) {
    m_layout = layout;
    m_layout_isSet = true;
}

bool OAILivingArea::is_layout_Set() const{
    return m_layout_isSet;
}

bool OAILivingArea::is_layout_Valid() const{
    return m_layout_isValid;
}

OAILivingAreaSleeping OAILivingArea::getSleeping() const {
    return m_sleeping;
}
void OAILivingArea::setSleeping(const OAILivingAreaSleeping &sleeping) {
    m_sleeping = sleeping;
    m_sleeping_isSet = true;
}

bool OAILivingArea::is_sleeping_Set() const{
    return m_sleeping_isSet;
}

bool OAILivingArea::is_sleeping_Valid() const{
    return m_sleeping_isValid;
}

bool OAILivingArea::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_features.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sleeping.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILivingArea::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
