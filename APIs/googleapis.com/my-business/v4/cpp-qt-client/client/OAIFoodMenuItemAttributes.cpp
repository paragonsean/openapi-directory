/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFoodMenuItemAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFoodMenuItemAttributes::OAIFoodMenuItemAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFoodMenuItemAttributes::OAIFoodMenuItemAttributes() {
    this->initializeModel();
}

OAIFoodMenuItemAttributes::~OAIFoodMenuItemAttributes() {}

void OAIFoodMenuItemAttributes::initializeModel() {

    m_allergen_isSet = false;
    m_allergen_isValid = false;

    m_dietary_restriction_isSet = false;
    m_dietary_restriction_isValid = false;

    m_ingredients_isSet = false;
    m_ingredients_isValid = false;

    m_media_keys_isSet = false;
    m_media_keys_isValid = false;

    m_nutrition_facts_isSet = false;
    m_nutrition_facts_isValid = false;

    m_portion_size_isSet = false;
    m_portion_size_isValid = false;

    m_preparation_methods_isSet = false;
    m_preparation_methods_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_serves_num_people_isSet = false;
    m_serves_num_people_isValid = false;

    m_spiciness_isSet = false;
    m_spiciness_isValid = false;
}

void OAIFoodMenuItemAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFoodMenuItemAttributes::fromJsonObject(QJsonObject json) {

    m_allergen_isValid = ::OpenAPI::fromJsonValue(m_allergen, json[QString("allergen")]);
    m_allergen_isSet = !json[QString("allergen")].isNull() && m_allergen_isValid;

    m_dietary_restriction_isValid = ::OpenAPI::fromJsonValue(m_dietary_restriction, json[QString("dietaryRestriction")]);
    m_dietary_restriction_isSet = !json[QString("dietaryRestriction")].isNull() && m_dietary_restriction_isValid;

    m_ingredients_isValid = ::OpenAPI::fromJsonValue(m_ingredients, json[QString("ingredients")]);
    m_ingredients_isSet = !json[QString("ingredients")].isNull() && m_ingredients_isValid;

    m_media_keys_isValid = ::OpenAPI::fromJsonValue(m_media_keys, json[QString("mediaKeys")]);
    m_media_keys_isSet = !json[QString("mediaKeys")].isNull() && m_media_keys_isValid;

    m_nutrition_facts_isValid = ::OpenAPI::fromJsonValue(m_nutrition_facts, json[QString("nutritionFacts")]);
    m_nutrition_facts_isSet = !json[QString("nutritionFacts")].isNull() && m_nutrition_facts_isValid;

    m_portion_size_isValid = ::OpenAPI::fromJsonValue(m_portion_size, json[QString("portionSize")]);
    m_portion_size_isSet = !json[QString("portionSize")].isNull() && m_portion_size_isValid;

    m_preparation_methods_isValid = ::OpenAPI::fromJsonValue(m_preparation_methods, json[QString("preparationMethods")]);
    m_preparation_methods_isSet = !json[QString("preparationMethods")].isNull() && m_preparation_methods_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_serves_num_people_isValid = ::OpenAPI::fromJsonValue(m_serves_num_people, json[QString("servesNumPeople")]);
    m_serves_num_people_isSet = !json[QString("servesNumPeople")].isNull() && m_serves_num_people_isValid;

    m_spiciness_isValid = ::OpenAPI::fromJsonValue(m_spiciness, json[QString("spiciness")]);
    m_spiciness_isSet = !json[QString("spiciness")].isNull() && m_spiciness_isValid;
}

QString OAIFoodMenuItemAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFoodMenuItemAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_allergen.size() > 0) {
        obj.insert(QString("allergen"), ::OpenAPI::toJsonValue(m_allergen));
    }
    if (m_dietary_restriction.size() > 0) {
        obj.insert(QString("dietaryRestriction"), ::OpenAPI::toJsonValue(m_dietary_restriction));
    }
    if (m_ingredients.size() > 0) {
        obj.insert(QString("ingredients"), ::OpenAPI::toJsonValue(m_ingredients));
    }
    if (m_media_keys.size() > 0) {
        obj.insert(QString("mediaKeys"), ::OpenAPI::toJsonValue(m_media_keys));
    }
    if (m_nutrition_facts.isSet()) {
        obj.insert(QString("nutritionFacts"), ::OpenAPI::toJsonValue(m_nutrition_facts));
    }
    if (m_portion_size.isSet()) {
        obj.insert(QString("portionSize"), ::OpenAPI::toJsonValue(m_portion_size));
    }
    if (m_preparation_methods.size() > 0) {
        obj.insert(QString("preparationMethods"), ::OpenAPI::toJsonValue(m_preparation_methods));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_serves_num_people_isSet) {
        obj.insert(QString("servesNumPeople"), ::OpenAPI::toJsonValue(m_serves_num_people));
    }
    if (m_spiciness_isSet) {
        obj.insert(QString("spiciness"), ::OpenAPI::toJsonValue(m_spiciness));
    }
    return obj;
}

QList<QString> OAIFoodMenuItemAttributes::getAllergen() const {
    return m_allergen;
}
void OAIFoodMenuItemAttributes::setAllergen(const QList<QString> &allergen) {
    m_allergen = allergen;
    m_allergen_isSet = true;
}

bool OAIFoodMenuItemAttributes::is_allergen_Set() const{
    return m_allergen_isSet;
}

bool OAIFoodMenuItemAttributes::is_allergen_Valid() const{
    return m_allergen_isValid;
}

QList<QString> OAIFoodMenuItemAttributes::getDietaryRestriction() const {
    return m_dietary_restriction;
}
void OAIFoodMenuItemAttributes::setDietaryRestriction(const QList<QString> &dietary_restriction) {
    m_dietary_restriction = dietary_restriction;
    m_dietary_restriction_isSet = true;
}

bool OAIFoodMenuItemAttributes::is_dietary_restriction_Set() const{
    return m_dietary_restriction_isSet;
}

bool OAIFoodMenuItemAttributes::is_dietary_restriction_Valid() const{
    return m_dietary_restriction_isValid;
}

QList<OAIIngredient> OAIFoodMenuItemAttributes::getIngredients() const {
    return m_ingredients;
}
void OAIFoodMenuItemAttributes::setIngredients(const QList<OAIIngredient> &ingredients) {
    m_ingredients = ingredients;
    m_ingredients_isSet = true;
}

bool OAIFoodMenuItemAttributes::is_ingredients_Set() const{
    return m_ingredients_isSet;
}

bool OAIFoodMenuItemAttributes::is_ingredients_Valid() const{
    return m_ingredients_isValid;
}

QList<QString> OAIFoodMenuItemAttributes::getMediaKeys() const {
    return m_media_keys;
}
void OAIFoodMenuItemAttributes::setMediaKeys(const QList<QString> &media_keys) {
    m_media_keys = media_keys;
    m_media_keys_isSet = true;
}

bool OAIFoodMenuItemAttributes::is_media_keys_Set() const{
    return m_media_keys_isSet;
}

bool OAIFoodMenuItemAttributes::is_media_keys_Valid() const{
    return m_media_keys_isValid;
}

OAINutritionFacts OAIFoodMenuItemAttributes::getNutritionFacts() const {
    return m_nutrition_facts;
}
void OAIFoodMenuItemAttributes::setNutritionFacts(const OAINutritionFacts &nutrition_facts) {
    m_nutrition_facts = nutrition_facts;
    m_nutrition_facts_isSet = true;
}

bool OAIFoodMenuItemAttributes::is_nutrition_facts_Set() const{
    return m_nutrition_facts_isSet;
}

bool OAIFoodMenuItemAttributes::is_nutrition_facts_Valid() const{
    return m_nutrition_facts_isValid;
}

OAIPortionSize OAIFoodMenuItemAttributes::getPortionSize() const {
    return m_portion_size;
}
void OAIFoodMenuItemAttributes::setPortionSize(const OAIPortionSize &portion_size) {
    m_portion_size = portion_size;
    m_portion_size_isSet = true;
}

bool OAIFoodMenuItemAttributes::is_portion_size_Set() const{
    return m_portion_size_isSet;
}

bool OAIFoodMenuItemAttributes::is_portion_size_Valid() const{
    return m_portion_size_isValid;
}

QList<QString> OAIFoodMenuItemAttributes::getPreparationMethods() const {
    return m_preparation_methods;
}
void OAIFoodMenuItemAttributes::setPreparationMethods(const QList<QString> &preparation_methods) {
    m_preparation_methods = preparation_methods;
    m_preparation_methods_isSet = true;
}

bool OAIFoodMenuItemAttributes::is_preparation_methods_Set() const{
    return m_preparation_methods_isSet;
}

bool OAIFoodMenuItemAttributes::is_preparation_methods_Valid() const{
    return m_preparation_methods_isValid;
}

OAIMoney OAIFoodMenuItemAttributes::getPrice() const {
    return m_price;
}
void OAIFoodMenuItemAttributes::setPrice(const OAIMoney &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIFoodMenuItemAttributes::is_price_Set() const{
    return m_price_isSet;
}

bool OAIFoodMenuItemAttributes::is_price_Valid() const{
    return m_price_isValid;
}

qint32 OAIFoodMenuItemAttributes::getServesNumPeople() const {
    return m_serves_num_people;
}
void OAIFoodMenuItemAttributes::setServesNumPeople(const qint32 &serves_num_people) {
    m_serves_num_people = serves_num_people;
    m_serves_num_people_isSet = true;
}

bool OAIFoodMenuItemAttributes::is_serves_num_people_Set() const{
    return m_serves_num_people_isSet;
}

bool OAIFoodMenuItemAttributes::is_serves_num_people_Valid() const{
    return m_serves_num_people_isValid;
}

QString OAIFoodMenuItemAttributes::getSpiciness() const {
    return m_spiciness;
}
void OAIFoodMenuItemAttributes::setSpiciness(const QString &spiciness) {
    m_spiciness = spiciness;
    m_spiciness_isSet = true;
}

bool OAIFoodMenuItemAttributes::is_spiciness_Set() const{
    return m_spiciness_isSet;
}

bool OAIFoodMenuItemAttributes::is_spiciness_Valid() const{
    return m_spiciness_isValid;
}

bool OAIFoodMenuItemAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allergen.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dietary_restriction.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingredients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nutrition_facts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_portion_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preparation_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_serves_num_people_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spiciness_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFoodMenuItemAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
