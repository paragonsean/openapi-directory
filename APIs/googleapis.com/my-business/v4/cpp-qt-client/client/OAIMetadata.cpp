/**
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadata::OAIMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadata::OAIMetadata() {
    this->initializeModel();
}

OAIMetadata::~OAIMetadata() {}

void OAIMetadata::initializeModel() {

    m_duplicate_isSet = false;
    m_duplicate_isValid = false;

    m_maps_url_isSet = false;
    m_maps_url_isValid = false;

    m_new_review_url_isSet = false;
    m_new_review_url_isValid = false;
}

void OAIMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetadata::fromJsonObject(QJsonObject json) {

    m_duplicate_isValid = ::OpenAPI::fromJsonValue(m_duplicate, json[QString("duplicate")]);
    m_duplicate_isSet = !json[QString("duplicate")].isNull() && m_duplicate_isValid;

    m_maps_url_isValid = ::OpenAPI::fromJsonValue(m_maps_url, json[QString("mapsUrl")]);
    m_maps_url_isSet = !json[QString("mapsUrl")].isNull() && m_maps_url_isValid;

    m_new_review_url_isValid = ::OpenAPI::fromJsonValue(m_new_review_url, json[QString("newReviewUrl")]);
    m_new_review_url_isSet = !json[QString("newReviewUrl")].isNull() && m_new_review_url_isValid;
}

QString OAIMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_duplicate.isSet()) {
        obj.insert(QString("duplicate"), ::OpenAPI::toJsonValue(m_duplicate));
    }
    if (m_maps_url_isSet) {
        obj.insert(QString("mapsUrl"), ::OpenAPI::toJsonValue(m_maps_url));
    }
    if (m_new_review_url_isSet) {
        obj.insert(QString("newReviewUrl"), ::OpenAPI::toJsonValue(m_new_review_url));
    }
    return obj;
}

OAIDuplicate OAIMetadata::getDuplicate() const {
    return m_duplicate;
}
void OAIMetadata::setDuplicate(const OAIDuplicate &duplicate) {
    m_duplicate = duplicate;
    m_duplicate_isSet = true;
}

bool OAIMetadata::is_duplicate_Set() const{
    return m_duplicate_isSet;
}

bool OAIMetadata::is_duplicate_Valid() const{
    return m_duplicate_isValid;
}

QString OAIMetadata::getMapsUrl() const {
    return m_maps_url;
}
void OAIMetadata::setMapsUrl(const QString &maps_url) {
    m_maps_url = maps_url;
    m_maps_url_isSet = true;
}

bool OAIMetadata::is_maps_url_Set() const{
    return m_maps_url_isSet;
}

bool OAIMetadata::is_maps_url_Valid() const{
    return m_maps_url_isValid;
}

QString OAIMetadata::getNewReviewUrl() const {
    return m_new_review_url;
}
void OAIMetadata::setNewReviewUrl(const QString &new_review_url) {
    m_new_review_url = new_review_url;
    m_new_review_url_isSet = true;
}

bool OAIMetadata::is_new_review_url_Set() const{
    return m_new_review_url_isSet;
}

bool OAIMetadata::is_new_review_url_Valid() const{
    return m_new_review_url_isValid;
}

bool OAIMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duplicate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maps_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_review_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
