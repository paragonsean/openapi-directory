/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.Admin;
import org.openapitools.client.model.Answer;
import org.openapitools.client.model.AssociateLocationRequest;
import org.openapitools.client.model.BatchGetLocationsRequest;
import org.openapitools.client.model.BatchGetLocationsResponse;
import org.openapitools.client.model.BatchGetReviewsRequest;
import org.openapitools.client.model.BatchGetReviewsResponse;
import org.openapitools.client.model.CompleteVerificationRequest;
import org.openapitools.client.model.CompleteVerificationResponse;
import org.openapitools.client.model.FetchVerificationOptionsRequest;
import org.openapitools.client.model.FetchVerificationOptionsResponse;
import org.openapitools.client.model.FindMatchingLocationsRequest;
import org.openapitools.client.model.FindMatchingLocationsResponse;
import org.openapitools.client.model.GetGoogleUpdatedLodgingResponse;
import org.openapitools.client.model.GoogleUpdatedLocation;
import org.openapitools.client.model.ListAccountsResponse;
import org.openapitools.client.model.ListAnswersResponse;
import org.openapitools.client.model.ListCustomerMediaItemsResponse;
import org.openapitools.client.model.ListInsuranceNetworksResponse;
import org.openapitools.client.model.ListInvitationsResponse;
import org.openapitools.client.model.ListLocalPostsResponse;
import org.openapitools.client.model.ListLocationAdminsResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.ListMediaItemsResponse;
import org.openapitools.client.model.ListQuestionsResponse;
import org.openapitools.client.model.ListRecommendedGoogleLocationsResponse;
import org.openapitools.client.model.ListReviewsResponse;
import org.openapitools.client.model.ListVerificationsResponse;
import org.openapitools.client.model.LocalPost;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.MediaItem;
import org.openapitools.client.model.MediaItemDataRef;
import org.openapitools.client.model.Notifications;
import org.openapitools.client.model.Question;
import org.openapitools.client.model.ReportLocalPostInsightsRequest;
import org.openapitools.client.model.ReportLocalPostInsightsResponse;
import org.openapitools.client.model.ReportLocationInsightsRequest;
import org.openapitools.client.model.ReportLocationInsightsResponse;
import org.openapitools.client.model.ReviewReply;
import org.openapitools.client.model.TransferLocationRequest;
import org.openapitools.client.model.UpsertAnswerRequest;
import org.openapitools.client.model.VerifyLocationRequest;
import org.openapitools.client.model.VerifyLocationResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Creates an account with the specified name and type under the given parent. - Personal accounts and Organizations cannot be created. - User Groups cannot be created with a Personal account as primary owner. - Location Groups cannot be created with a primary owner of a Personal account if the Personal account is in an Organization. - Location Groups cannot own Location Groups. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String primaryOwner = null;
        Account account = null;
        Account response = api.mybusinessAccountsCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, primaryOwner, account);
        // TODO: test validations
    }

    /**
     * Generates an account number for this account. The account number is not provisioned when an account is created. Use this request to create an account number when it is required.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsGenerateAccountNumberTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Account response = api.mybusinessAccountsGenerateAccountNumber(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Accepts the specified invitation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsInvitationsAcceptTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.mybusinessAccountsInvitationsAccept(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Declines the specified invitation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsInvitationsDeclineTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.mybusinessAccountsInvitationsDecline(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists pending invitations for the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsInvitationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String targetType = null;
        ListInvitationsResponse response = api.mybusinessAccountsInvitationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, targetType);
        // TODO: test validations
    }

    /**
     * Lists all of the accounts for the authenticated user. This includes all accounts that the user owns, as well as any accounts for which the user has management rights.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String name = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAccountsResponse response = api.mybusinessAccountsList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, name, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List all the GoogleLocations that have been recommended to the specified Business Profile account. Recommendations are provided for personal accounts and location groups only, requests for all other account types will result in an error. The recommendations for location groups are based on the locations in that group. The recommendations for personal accounts are based on all of the locations that the user has access to on Business Profile (which includes locations they can access through location groups), and is a superset of all recommendations generated for the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsListRecommendGoogleLocationsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListRecommendedGoogleLocationsResponse response = api.mybusinessAccountsListRecommendGoogleLocations(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Invites the specified user to become an administrator for the specified location. The invitee must accept the invitation in order to be granted access to the location. See AcceptInvitation to programmatically accept an invitation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsAdminsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Admin admin = null;
        Admin response = api.mybusinessAccountsLocationsAdminsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, admin);
        // TODO: test validations
    }

    /**
     * Lists all of the admins for the specified location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsAdminsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListLocationAdminsResponse response = api.mybusinessAccountsLocationsAdminsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Associates a location to a place ID. Any previous association is overwritten. This operation is only valid if the location is unverified. The association must be valid, that is, it appears in the list of &#x60;FindMatchingLocations&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsAssociateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AssociateLocationRequest associateLocationRequest = null;
        Object response = api.mybusinessAccountsLocationsAssociate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, associateLocationRequest);
        // TODO: test validations
    }

    /**
     * Gets all of the specified locations in the given account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsBatchGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchGetLocationsRequest batchGetLocationsRequest = null;
        BatchGetLocationsResponse response = api.mybusinessAccountsLocationsBatchGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchGetLocationsRequest);
        // TODO: test validations
    }

    /**
     * Returns the paginated list of reviews for all specified locations. This operation is only valid if the specified locations are verified. *Note:* Reviews are limited to a batch size of 200 &#x60;location_names&#x60; per call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsBatchGetReviewsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchGetReviewsRequest batchGetReviewsRequest = null;
        BatchGetReviewsResponse response = api.mybusinessAccountsLocationsBatchGetReviews(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchGetReviewsRequest);
        // TODO: test validations
    }

    /**
     * Clears an association between a location and its place ID. This operation is only valid if the location is unverified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsClearAssociationTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.mybusinessAccountsLocationsClearAssociation(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Creates a new location owned by the specified account, and returns it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        Boolean validateOnly = null;
        Location location = null;
        Location response = api.mybusinessAccountsLocationsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, validateOnly, location);
        // TODO: test validations
    }

    /**
     * Reports all eligible verification options for a location in a specific language.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsFetchVerificationOptionsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        FetchVerificationOptionsRequest fetchVerificationOptionsRequest = null;
        FetchVerificationOptionsResponse response = api.mybusinessAccountsLocationsFetchVerificationOptions(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fetchVerificationOptionsRequest);
        // TODO: test validations
    }

    /**
     * Finds all of the possible locations that are a match to the specified location. This operation is only valid if the location is unverified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsFindMatchesTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        FindMatchingLocationsRequest findMatchingLocationsRequest = null;
        FindMatchingLocationsResponse response = api.mybusinessAccountsLocationsFindMatches(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, findMatchingLocationsRequest);
        // TODO: test validations
    }

    /**
     * Gets the Google-updated version of the specified location. Returns &#x60;NOT_FOUND&#x60; if the location does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsGetGoogleUpdatedTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleUpdatedLocation response = api.mybusinessAccountsLocationsGetGoogleUpdated(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns a list of all insurance networks supported by Google.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsInsuranceNetworksListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String languageCode = null;
        Integer pageSize = null;
        String pageToken = null;
        ListInsuranceNetworksResponse response = api.mybusinessAccountsLocationsInsuranceNetworksList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, languageCode, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists the locations for the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String languageCode = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.mybusinessAccountsLocationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, languageCode, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new local post associated with the specified location, and returns it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsLocalPostsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LocalPost localPost = null;
        LocalPost response = api.mybusinessAccountsLocationsLocalPostsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, localPost);
        // TODO: test validations
    }

    /**
     * Returns a list of local posts associated with a location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsLocalPostsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocalPostsResponse response = api.mybusinessAccountsLocationsLocalPostsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Returns insights for a set of local posts associated with a single listing. Which metrics and how they are reported are options specified in the request proto. *Note:* Insight reports are limited to 100 &#x60;local_post_names&#x60; per call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsLocalPostsReportInsightsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReportLocalPostInsightsRequest reportLocalPostInsightsRequest = null;
        ReportLocalPostInsightsResponse response = api.mybusinessAccountsLocationsLocalPostsReportInsights(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, reportLocalPostInsightsRequest);
        // TODO: test validations
    }

    /**
     * Returns the Google updated Lodging of a specific location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsLodgingGetGoogleUpdatedTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String readMask = null;
        GetGoogleUpdatedLodgingResponse response = api.mybusinessAccountsLocationsLodgingGetGoogleUpdated(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, readMask);
        // TODO: test validations
    }

    /**
     * Creates a new media item for the location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsMediaCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        MediaItem mediaItem = null;
        MediaItem response = api.mybusinessAccountsLocationsMediaCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, mediaItem);
        // TODO: test validations
    }

    /**
     * Returns a list of media items associated with a location that have been contributed by customers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsMediaCustomersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCustomerMediaItemsResponse response = api.mybusinessAccountsLocationsMediaCustomersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Returns a list of media items associated with a location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsMediaListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListMediaItemsResponse response = api.mybusinessAccountsLocationsMediaList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Generates a &#x60;MediaItemDataRef&#x60; for media item uploading.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsMediaStartUploadTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        MediaItemDataRef response = api.mybusinessAccountsLocationsMediaStartUpload(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Deletes the answer written by the current user to a question.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsQuestionsAnswersDeleteTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.mybusinessAccountsLocationsQuestionsAnswersDelete(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns the paginated list of answers for a specified question.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsQuestionsAnswersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAnswersResponse response = api.mybusinessAccountsLocationsQuestionsAnswersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates an answer or updates the existing answer written by the user for the specified question. A user can only create one answer per question.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsQuestionsAnswersUpsertTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UpsertAnswerRequest upsertAnswerRequest = null;
        Answer response = api.mybusinessAccountsLocationsQuestionsAnswersUpsert(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, upsertAnswerRequest);
        // TODO: test validations
    }

    /**
     * Adds a question for the specified location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsQuestionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Question question = null;
        Question response = api.mybusinessAccountsLocationsQuestionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, question);
        // TODO: test validations
    }

    /**
     * Deletes a specific question written by the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsQuestionsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.mybusinessAccountsLocationsQuestionsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns the paginated list of questions and some of its answers for a specified location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsQuestionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer answersPerQuestion = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListQuestionsResponse response = api.mybusinessAccountsLocationsQuestionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, answersPerQuestion, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a specific question written by the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsQuestionsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Question question = null;
        Question response = api.mybusinessAccountsLocationsQuestionsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, question);
        // TODO: test validations
    }

    /**
     * Returns a report containing insights on one or more metrics by location. *Note:* Insight reports are limited to a batch size of 10 &#x60;location_names&#x60; per call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsReportInsightsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReportLocationInsightsRequest reportLocationInsightsRequest = null;
        ReportLocationInsightsResponse response = api.mybusinessAccountsLocationsReportInsights(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, reportLocationInsightsRequest);
        // TODO: test validations
    }

    /**
     * Deletes the response to the specified review. This operation is only valid if the specified location is verified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsReviewsDeleteReplyTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.mybusinessAccountsLocationsReviewsDeleteReply(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns the paginated list of reviews for the specified location. This operation is only valid if the specified location is verified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsReviewsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListReviewsResponse response = api.mybusinessAccountsLocationsReviewsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the reply to the specified review. A reply is created if one does not exist. This operation is only valid if the specified location is verified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsReviewsUpdateReplyTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReviewReply reviewReply = null;
        ReviewReply response = api.mybusinessAccountsLocationsReviewsUpdateReply(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, reviewReply);
        // TODO: test validations
    }

    /**
     * Moves a location from an account that the user owns to another account that the same user administers. The user must be an owner of the account the location is currently associated with and must also be at least a manager of the destination account. Returns the Location with its new resource name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsTransferTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TransferLocationRequest transferLocationRequest = null;
        Location response = api.mybusinessAccountsLocationsTransfer(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, transferLocationRequest);
        // TODO: test validations
    }

    /**
     * Completes a &#x60;PENDING&#x60; verification. It is only necessary for non &#x60;AUTO&#x60; verification methods. &#x60;AUTO&#x60; verification request is instantly &#x60;VERIFIED&#x60; upon creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsVerificationsCompleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CompleteVerificationRequest completeVerificationRequest = null;
        CompleteVerificationResponse response = api.mybusinessAccountsLocationsVerificationsComplete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, completeVerificationRequest);
        // TODO: test validations
    }

    /**
     * List verifications of a location, ordered by create time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsVerificationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListVerificationsResponse response = api.mybusinessAccountsLocationsVerificationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Starts the verification process for a location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsLocationsVerifyTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        VerifyLocationRequest verifyLocationRequest = null;
        VerifyLocationResponse response = api.mybusinessAccountsLocationsVerify(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, verifyLocationRequest);
        // TODO: test validations
    }

    /**
     * Sets the pubsub notification settings for the account informing Business Profile which topic to send pubsub notifications for: - New reviews for locations administered by the account. - Updated reviews for locations administered by the account. - New &#x60;GoogleUpdates&#x60; for locations administered by the account. An account will only have one notification settings resource, and only one pubsub topic can be set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessAccountsUpdateNotificationsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Notifications notifications = null;
        Notifications response = api.mybusinessAccountsUpdateNotifications(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, notifications);
        // TODO: test validations
    }

}
