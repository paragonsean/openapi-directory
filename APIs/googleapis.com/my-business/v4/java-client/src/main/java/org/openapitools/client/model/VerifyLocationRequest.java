/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AddressInput;
import org.openapitools.client.model.EmailInput;
import org.openapitools.client.model.PhoneInput;
import org.openapitools.client.model.ServiceBusinessContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for Verifications.VerifyLocation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VerifyLocationRequest {
  public static final String SERIALIZED_NAME_ADDRESS_INPUT = "addressInput";
  @SerializedName(SERIALIZED_NAME_ADDRESS_INPUT)
  private AddressInput addressInput;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private ServiceBusinessContext context;

  public static final String SERIALIZED_NAME_EMAIL_INPUT = "emailInput";
  @SerializedName(SERIALIZED_NAME_EMAIL_INPUT)
  private EmailInput emailInput;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  /**
   * Verification method.
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    VERIFICATION_METHOD_UNSPECIFIED("VERIFICATION_METHOD_UNSPECIFIED"),
    
    ADDRESS("ADDRESS"),
    
    EMAIL("EMAIL"),
    
    PHONE_CALL("PHONE_CALL"),
    
    SMS("SMS"),
    
    AUTO("AUTO");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private MethodEnum method;

  public static final String SERIALIZED_NAME_PHONE_INPUT = "phoneInput";
  @SerializedName(SERIALIZED_NAME_PHONE_INPUT)
  private PhoneInput phoneInput;

  public VerifyLocationRequest() {
  }

  public VerifyLocationRequest addressInput(AddressInput addressInput) {
    this.addressInput = addressInput;
    return this;
  }

  /**
   * Get addressInput
   * @return addressInput
   */
  @javax.annotation.Nullable
  public AddressInput getAddressInput() {
    return addressInput;
  }

  public void setAddressInput(AddressInput addressInput) {
    this.addressInput = addressInput;
  }


  public VerifyLocationRequest context(ServiceBusinessContext context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public ServiceBusinessContext getContext() {
    return context;
  }

  public void setContext(ServiceBusinessContext context) {
    this.context = context;
  }


  public VerifyLocationRequest emailInput(EmailInput emailInput) {
    this.emailInput = emailInput;
    return this;
  }

  /**
   * Get emailInput
   * @return emailInput
   */
  @javax.annotation.Nullable
  public EmailInput getEmailInput() {
    return emailInput;
  }

  public void setEmailInput(EmailInput emailInput) {
    this.emailInput = emailInput;
  }


  public VerifyLocationRequest languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * The BCP 47 language code representing the language that is to be used for the verification process.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public VerifyLocationRequest method(MethodEnum method) {
    this.method = method;
    return this;
  }

  /**
   * Verification method.
   * @return method
   */
  @javax.annotation.Nullable
  public MethodEnum getMethod() {
    return method;
  }

  public void setMethod(MethodEnum method) {
    this.method = method;
  }


  public VerifyLocationRequest phoneInput(PhoneInput phoneInput) {
    this.phoneInput = phoneInput;
    return this;
  }

  /**
   * Get phoneInput
   * @return phoneInput
   */
  @javax.annotation.Nullable
  public PhoneInput getPhoneInput() {
    return phoneInput;
  }

  public void setPhoneInput(PhoneInput phoneInput) {
    this.phoneInput = phoneInput;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyLocationRequest verifyLocationRequest = (VerifyLocationRequest) o;
    return Objects.equals(this.addressInput, verifyLocationRequest.addressInput) &&
        Objects.equals(this.context, verifyLocationRequest.context) &&
        Objects.equals(this.emailInput, verifyLocationRequest.emailInput) &&
        Objects.equals(this.languageCode, verifyLocationRequest.languageCode) &&
        Objects.equals(this.method, verifyLocationRequest.method) &&
        Objects.equals(this.phoneInput, verifyLocationRequest.phoneInput);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressInput, context, emailInput, languageCode, method, phoneInput);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyLocationRequest {\n");
    sb.append("    addressInput: ").append(toIndentedString(addressInput)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    emailInput: ").append(toIndentedString(emailInput)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    phoneInput: ").append(toIndentedString(phoneInput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressInput");
    openapiFields.add("context");
    openapiFields.add("emailInput");
    openapiFields.add("languageCode");
    openapiFields.add("method");
    openapiFields.add("phoneInput");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerifyLocationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerifyLocationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerifyLocationRequest is not found in the empty JSON string", VerifyLocationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VerifyLocationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerifyLocationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `addressInput`
      if (jsonObj.get("addressInput") != null && !jsonObj.get("addressInput").isJsonNull()) {
        AddressInput.validateJsonElement(jsonObj.get("addressInput"));
      }
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        ServiceBusinessContext.validateJsonElement(jsonObj.get("context"));
      }
      // validate the optional field `emailInput`
      if (jsonObj.get("emailInput") != null && !jsonObj.get("emailInput").isJsonNull()) {
        EmailInput.validateJsonElement(jsonObj.get("emailInput"));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      // validate the optional field `method`
      if (jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) {
        MethodEnum.validateJsonElement(jsonObj.get("method"));
      }
      // validate the optional field `phoneInput`
      if (jsonObj.get("phoneInput") != null && !jsonObj.get("phoneInput").isJsonNull()) {
        PhoneInput.validateJsonElement(jsonObj.get("phoneInput"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerifyLocationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerifyLocationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerifyLocationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerifyLocationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<VerifyLocationRequest>() {
           @Override
           public void write(JsonWriter out, VerifyLocationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerifyLocationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VerifyLocationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerifyLocationRequest
   * @throws IOException if the JSON string is invalid with respect to VerifyLocationRequest
   */
  public static VerifyLocationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerifyLocationRequest.class);
  }

  /**
   * Convert an instance of VerifyLocationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

