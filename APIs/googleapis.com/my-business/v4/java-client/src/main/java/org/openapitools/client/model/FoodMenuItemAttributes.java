/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Ingredient;
import org.openapitools.client.model.Money;
import org.openapitools.client.model.NutritionFacts;
import org.openapitools.client.model.PortionSize;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Attributes of a food item/dish.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FoodMenuItemAttributes {
  /**
   * Gets or Sets allergen
   */
  @JsonAdapter(AllergenEnum.Adapter.class)
  public enum AllergenEnum {
    ALLERGEN_UNSPECIFIED("ALLERGEN_UNSPECIFIED"),
    
    DAIRY("DAIRY"),
    
    EGG("EGG"),
    
    FISH("FISH"),
    
    PEANUT("PEANUT"),
    
    SHELLFISH("SHELLFISH"),
    
    SOY("SOY"),
    
    TREE_NUT("TREE_NUT"),
    
    WHEAT("WHEAT");

    private String value;

    AllergenEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllergenEnum fromValue(String value) {
      for (AllergenEnum b : AllergenEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllergenEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllergenEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllergenEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllergenEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllergenEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALLERGEN = "allergen";
  @SerializedName(SERIALIZED_NAME_ALLERGEN)
  private List<AllergenEnum> allergen = new ArrayList<>();

  /**
   * Gets or Sets dietaryRestriction
   */
  @JsonAdapter(DietaryRestrictionEnum.Adapter.class)
  public enum DietaryRestrictionEnum {
    DIETARY_RESTRICTION_UNSPECIFIED("DIETARY_RESTRICTION_UNSPECIFIED"),
    
    HALAL("HALAL"),
    
    KOSHER("KOSHER"),
    
    ORGANIC("ORGANIC"),
    
    VEGAN("VEGAN"),
    
    VEGETARIAN("VEGETARIAN");

    private String value;

    DietaryRestrictionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DietaryRestrictionEnum fromValue(String value) {
      for (DietaryRestrictionEnum b : DietaryRestrictionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DietaryRestrictionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DietaryRestrictionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DietaryRestrictionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DietaryRestrictionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DietaryRestrictionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIETARY_RESTRICTION = "dietaryRestriction";
  @SerializedName(SERIALIZED_NAME_DIETARY_RESTRICTION)
  private List<DietaryRestrictionEnum> dietaryRestriction = new ArrayList<>();

  public static final String SERIALIZED_NAME_INGREDIENTS = "ingredients";
  @SerializedName(SERIALIZED_NAME_INGREDIENTS)
  private List<Ingredient> ingredients = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEDIA_KEYS = "mediaKeys";
  @SerializedName(SERIALIZED_NAME_MEDIA_KEYS)
  private List<String> mediaKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUTRITION_FACTS = "nutritionFacts";
  @SerializedName(SERIALIZED_NAME_NUTRITION_FACTS)
  private NutritionFacts nutritionFacts;

  public static final String SERIALIZED_NAME_PORTION_SIZE = "portionSize";
  @SerializedName(SERIALIZED_NAME_PORTION_SIZE)
  private PortionSize portionSize;

  /**
   * Gets or Sets preparationMethods
   */
  @JsonAdapter(PreparationMethodsEnum.Adapter.class)
  public enum PreparationMethodsEnum {
    PREPARATION_METHOD_UNSPECIFIED("PREPARATION_METHOD_UNSPECIFIED"),
    
    BAKED("BAKED"),
    
    BARBECUED("BARBECUED"),
    
    BASTED("BASTED"),
    
    BLANCHED("BLANCHED"),
    
    BOILED("BOILED"),
    
    BRAISED("BRAISED"),
    
    CODDLED("CODDLED"),
    
    FERMENTED("FERMENTED"),
    
    FRIED("FRIED"),
    
    GRILLED("GRILLED"),
    
    KNEADED("KNEADED"),
    
    MARINATED("MARINATED"),
    
    PAN_FRIED("PAN_FRIED"),
    
    PICKLED("PICKLED"),
    
    PRESSURE_COOKED("PRESSURE_COOKED"),
    
    ROASTED("ROASTED"),
    
    SAUTEED("SAUTEED"),
    
    SEARED("SEARED"),
    
    SIMMERED("SIMMERED"),
    
    SMOKED("SMOKED"),
    
    STEAMED("STEAMED"),
    
    STEEPED("STEEPED"),
    
    STIR_FRIED("STIR_FRIED"),
    
    OTHER_METHOD("OTHER_METHOD");

    private String value;

    PreparationMethodsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PreparationMethodsEnum fromValue(String value) {
      for (PreparationMethodsEnum b : PreparationMethodsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PreparationMethodsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PreparationMethodsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PreparationMethodsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PreparationMethodsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PreparationMethodsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PREPARATION_METHODS = "preparationMethods";
  @SerializedName(SERIALIZED_NAME_PREPARATION_METHODS)
  private List<PreparationMethodsEnum> preparationMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Money price;

  public static final String SERIALIZED_NAME_SERVES_NUM_PEOPLE = "servesNumPeople";
  @SerializedName(SERIALIZED_NAME_SERVES_NUM_PEOPLE)
  private Integer servesNumPeople;

  /**
   * Optional. Spiciness level of the food dish.
   */
  @JsonAdapter(SpicinessEnum.Adapter.class)
  public enum SpicinessEnum {
    SPICINESS_UNSPECIFIED("SPICINESS_UNSPECIFIED"),
    
    MILD("MILD"),
    
    MEDIUM("MEDIUM"),
    
    HOT("HOT");

    private String value;

    SpicinessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SpicinessEnum fromValue(String value) {
      for (SpicinessEnum b : SpicinessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SpicinessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SpicinessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SpicinessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SpicinessEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SpicinessEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPICINESS = "spiciness";
  @SerializedName(SERIALIZED_NAME_SPICINESS)
  private SpicinessEnum spiciness;

  public FoodMenuItemAttributes() {
  }

  public FoodMenuItemAttributes allergen(List<AllergenEnum> allergen) {
    this.allergen = allergen;
    return this;
  }

  public FoodMenuItemAttributes addAllergenItem(AllergenEnum allergenItem) {
    if (this.allergen == null) {
      this.allergen = new ArrayList<>();
    }
    this.allergen.add(allergenItem);
    return this;
  }

  /**
   * Optional. Allergens associated with the food dish. It is highly recommended to provide this field.
   * @return allergen
   */
  @javax.annotation.Nullable
  public List<AllergenEnum> getAllergen() {
    return allergen;
  }

  public void setAllergen(List<AllergenEnum> allergen) {
    this.allergen = allergen;
  }


  public FoodMenuItemAttributes dietaryRestriction(List<DietaryRestrictionEnum> dietaryRestriction) {
    this.dietaryRestriction = dietaryRestriction;
    return this;
  }

  public FoodMenuItemAttributes addDietaryRestrictionItem(DietaryRestrictionEnum dietaryRestrictionItem) {
    if (this.dietaryRestriction == null) {
      this.dietaryRestriction = new ArrayList<>();
    }
    this.dietaryRestriction.add(dietaryRestrictionItem);
    return this;
  }

  /**
   * Optional. Dietary information of the food dish. It is highly recommended to provide this field.
   * @return dietaryRestriction
   */
  @javax.annotation.Nullable
  public List<DietaryRestrictionEnum> getDietaryRestriction() {
    return dietaryRestriction;
  }

  public void setDietaryRestriction(List<DietaryRestrictionEnum> dietaryRestriction) {
    this.dietaryRestriction = dietaryRestriction;
  }


  public FoodMenuItemAttributes ingredients(List<Ingredient> ingredients) {
    this.ingredients = ingredients;
    return this;
  }

  public FoodMenuItemAttributes addIngredientsItem(Ingredient ingredientsItem) {
    if (this.ingredients == null) {
      this.ingredients = new ArrayList<>();
    }
    this.ingredients.add(ingredientsItem);
    return this;
  }

  /**
   * Optional. Ingredients of the food dish option.
   * @return ingredients
   */
  @javax.annotation.Nullable
  public List<Ingredient> getIngredients() {
    return ingredients;
  }

  public void setIngredients(List<Ingredient> ingredients) {
    this.ingredients = ingredients;
  }


  public FoodMenuItemAttributes mediaKeys(List<String> mediaKeys) {
    this.mediaKeys = mediaKeys;
    return this;
  }

  public FoodMenuItemAttributes addMediaKeysItem(String mediaKeysItem) {
    if (this.mediaKeys == null) {
      this.mediaKeys = new ArrayList<>();
    }
    this.mediaKeys.add(mediaKeysItem);
    return this;
  }

  /**
   * Optional. The media keys of the media associated with the dish. Only photo media is supported. When there are multiple photos associated, the first photo is considered as the preferred photo.
   * @return mediaKeys
   */
  @javax.annotation.Nullable
  public List<String> getMediaKeys() {
    return mediaKeys;
  }

  public void setMediaKeys(List<String> mediaKeys) {
    this.mediaKeys = mediaKeys;
  }


  public FoodMenuItemAttributes nutritionFacts(NutritionFacts nutritionFacts) {
    this.nutritionFacts = nutritionFacts;
    return this;
  }

  /**
   * Get nutritionFacts
   * @return nutritionFacts
   */
  @javax.annotation.Nullable
  public NutritionFacts getNutritionFacts() {
    return nutritionFacts;
  }

  public void setNutritionFacts(NutritionFacts nutritionFacts) {
    this.nutritionFacts = nutritionFacts;
  }


  public FoodMenuItemAttributes portionSize(PortionSize portionSize) {
    this.portionSize = portionSize;
    return this;
  }

  /**
   * Get portionSize
   * @return portionSize
   */
  @javax.annotation.Nullable
  public PortionSize getPortionSize() {
    return portionSize;
  }

  public void setPortionSize(PortionSize portionSize) {
    this.portionSize = portionSize;
  }


  public FoodMenuItemAttributes preparationMethods(List<PreparationMethodsEnum> preparationMethods) {
    this.preparationMethods = preparationMethods;
    return this;
  }

  public FoodMenuItemAttributes addPreparationMethodsItem(PreparationMethodsEnum preparationMethodsItem) {
    if (this.preparationMethods == null) {
      this.preparationMethods = new ArrayList<>();
    }
    this.preparationMethods.add(preparationMethodsItem);
    return this;
  }

  /**
   * Optional. Methods on how the food dish option is prepared.
   * @return preparationMethods
   */
  @javax.annotation.Nullable
  public List<PreparationMethodsEnum> getPreparationMethods() {
    return preparationMethods;
  }

  public void setPreparationMethods(List<PreparationMethodsEnum> preparationMethods) {
    this.preparationMethods = preparationMethods;
  }


  public FoodMenuItemAttributes price(Money price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public Money getPrice() {
    return price;
  }

  public void setPrice(Money price) {
    this.price = price;
  }


  public FoodMenuItemAttributes servesNumPeople(Integer servesNumPeople) {
    this.servesNumPeople = servesNumPeople;
    return this;
  }

  /**
   * Optional. Number of people can be served by this food dish option.
   * @return servesNumPeople
   */
  @javax.annotation.Nullable
  public Integer getServesNumPeople() {
    return servesNumPeople;
  }

  public void setServesNumPeople(Integer servesNumPeople) {
    this.servesNumPeople = servesNumPeople;
  }


  public FoodMenuItemAttributes spiciness(SpicinessEnum spiciness) {
    this.spiciness = spiciness;
    return this;
  }

  /**
   * Optional. Spiciness level of the food dish.
   * @return spiciness
   */
  @javax.annotation.Nullable
  public SpicinessEnum getSpiciness() {
    return spiciness;
  }

  public void setSpiciness(SpicinessEnum spiciness) {
    this.spiciness = spiciness;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FoodMenuItemAttributes foodMenuItemAttributes = (FoodMenuItemAttributes) o;
    return Objects.equals(this.allergen, foodMenuItemAttributes.allergen) &&
        Objects.equals(this.dietaryRestriction, foodMenuItemAttributes.dietaryRestriction) &&
        Objects.equals(this.ingredients, foodMenuItemAttributes.ingredients) &&
        Objects.equals(this.mediaKeys, foodMenuItemAttributes.mediaKeys) &&
        Objects.equals(this.nutritionFacts, foodMenuItemAttributes.nutritionFacts) &&
        Objects.equals(this.portionSize, foodMenuItemAttributes.portionSize) &&
        Objects.equals(this.preparationMethods, foodMenuItemAttributes.preparationMethods) &&
        Objects.equals(this.price, foodMenuItemAttributes.price) &&
        Objects.equals(this.servesNumPeople, foodMenuItemAttributes.servesNumPeople) &&
        Objects.equals(this.spiciness, foodMenuItemAttributes.spiciness);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allergen, dietaryRestriction, ingredients, mediaKeys, nutritionFacts, portionSize, preparationMethods, price, servesNumPeople, spiciness);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FoodMenuItemAttributes {\n");
    sb.append("    allergen: ").append(toIndentedString(allergen)).append("\n");
    sb.append("    dietaryRestriction: ").append(toIndentedString(dietaryRestriction)).append("\n");
    sb.append("    ingredients: ").append(toIndentedString(ingredients)).append("\n");
    sb.append("    mediaKeys: ").append(toIndentedString(mediaKeys)).append("\n");
    sb.append("    nutritionFacts: ").append(toIndentedString(nutritionFacts)).append("\n");
    sb.append("    portionSize: ").append(toIndentedString(portionSize)).append("\n");
    sb.append("    preparationMethods: ").append(toIndentedString(preparationMethods)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    servesNumPeople: ").append(toIndentedString(servesNumPeople)).append("\n");
    sb.append("    spiciness: ").append(toIndentedString(spiciness)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allergen");
    openapiFields.add("dietaryRestriction");
    openapiFields.add("ingredients");
    openapiFields.add("mediaKeys");
    openapiFields.add("nutritionFacts");
    openapiFields.add("portionSize");
    openapiFields.add("preparationMethods");
    openapiFields.add("price");
    openapiFields.add("servesNumPeople");
    openapiFields.add("spiciness");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FoodMenuItemAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FoodMenuItemAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FoodMenuItemAttributes is not found in the empty JSON string", FoodMenuItemAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FoodMenuItemAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FoodMenuItemAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allergen") != null && !jsonObj.get("allergen").isJsonNull() && !jsonObj.get("allergen").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allergen` to be an array in the JSON string but got `%s`", jsonObj.get("allergen").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dietaryRestriction") != null && !jsonObj.get("dietaryRestriction").isJsonNull() && !jsonObj.get("dietaryRestriction").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dietaryRestriction` to be an array in the JSON string but got `%s`", jsonObj.get("dietaryRestriction").toString()));
      }
      if (jsonObj.get("ingredients") != null && !jsonObj.get("ingredients").isJsonNull()) {
        JsonArray jsonArrayingredients = jsonObj.getAsJsonArray("ingredients");
        if (jsonArrayingredients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ingredients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ingredients` to be an array in the JSON string but got `%s`", jsonObj.get("ingredients").toString()));
          }

          // validate the optional field `ingredients` (array)
          for (int i = 0; i < jsonArrayingredients.size(); i++) {
            Ingredient.validateJsonElement(jsonArrayingredients.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mediaKeys") != null && !jsonObj.get("mediaKeys").isJsonNull() && !jsonObj.get("mediaKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaKeys` to be an array in the JSON string but got `%s`", jsonObj.get("mediaKeys").toString()));
      }
      // validate the optional field `nutritionFacts`
      if (jsonObj.get("nutritionFacts") != null && !jsonObj.get("nutritionFacts").isJsonNull()) {
        NutritionFacts.validateJsonElement(jsonObj.get("nutritionFacts"));
      }
      // validate the optional field `portionSize`
      if (jsonObj.get("portionSize") != null && !jsonObj.get("portionSize").isJsonNull()) {
        PortionSize.validateJsonElement(jsonObj.get("portionSize"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("preparationMethods") != null && !jsonObj.get("preparationMethods").isJsonNull() && !jsonObj.get("preparationMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `preparationMethods` to be an array in the JSON string but got `%s`", jsonObj.get("preparationMethods").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("price"));
      }
      if ((jsonObj.get("spiciness") != null && !jsonObj.get("spiciness").isJsonNull()) && !jsonObj.get("spiciness").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spiciness` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spiciness").toString()));
      }
      // validate the optional field `spiciness`
      if (jsonObj.get("spiciness") != null && !jsonObj.get("spiciness").isJsonNull()) {
        SpicinessEnum.validateJsonElement(jsonObj.get("spiciness"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FoodMenuItemAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FoodMenuItemAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FoodMenuItemAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FoodMenuItemAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<FoodMenuItemAttributes>() {
           @Override
           public void write(JsonWriter out, FoodMenuItemAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FoodMenuItemAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FoodMenuItemAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FoodMenuItemAttributes
   * @throws IOException if the JSON string is invalid with respect to FoodMenuItemAttributes
   */
  public static FoodMenuItemAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FoodMenuItemAttributes.class);
  }

  /**
   * Convert an instance of FoodMenuItemAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

