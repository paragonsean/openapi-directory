/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Places;
import org.openapitools.client.model.PointRadius;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Service area businesses provide their service at the customer&#39;s location (for example, a locksmith or plumber).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceAreaBusiness {
  /**
   * Indicates the type of the service area business.
   */
  @JsonAdapter(BusinessTypeEnum.Adapter.class)
  public enum BusinessTypeEnum {
    BUSINESS_TYPE_UNSPECIFIED("BUSINESS_TYPE_UNSPECIFIED"),
    
    CUSTOMER_LOCATION_ONLY("CUSTOMER_LOCATION_ONLY"),
    
    CUSTOMER_AND_BUSINESS_LOCATION("CUSTOMER_AND_BUSINESS_LOCATION");

    private String value;

    BusinessTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BusinessTypeEnum fromValue(String value) {
      for (BusinessTypeEnum b : BusinessTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BusinessTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BusinessTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BusinessTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BusinessTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BusinessTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUSINESS_TYPE = "businessType";
  @SerializedName(SERIALIZED_NAME_BUSINESS_TYPE)
  private BusinessTypeEnum businessType;

  public static final String SERIALIZED_NAME_PLACES = "places";
  @SerializedName(SERIALIZED_NAME_PLACES)
  private Places places;

  public static final String SERIALIZED_NAME_RADIUS = "radius";
  @SerializedName(SERIALIZED_NAME_RADIUS)
  private PointRadius radius;

  public ServiceAreaBusiness() {
  }

  public ServiceAreaBusiness businessType(BusinessTypeEnum businessType) {
    this.businessType = businessType;
    return this;
  }

  /**
   * Indicates the type of the service area business.
   * @return businessType
   */
  @javax.annotation.Nullable
  public BusinessTypeEnum getBusinessType() {
    return businessType;
  }

  public void setBusinessType(BusinessTypeEnum businessType) {
    this.businessType = businessType;
  }


  public ServiceAreaBusiness places(Places places) {
    this.places = places;
    return this;
  }

  /**
   * Get places
   * @return places
   */
  @javax.annotation.Nullable
  public Places getPlaces() {
    return places;
  }

  public void setPlaces(Places places) {
    this.places = places;
  }


  public ServiceAreaBusiness radius(PointRadius radius) {
    this.radius = radius;
    return this;
  }

  /**
   * Get radius
   * @return radius
   */
  @javax.annotation.Nullable
  public PointRadius getRadius() {
    return radius;
  }

  public void setRadius(PointRadius radius) {
    this.radius = radius;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceAreaBusiness serviceAreaBusiness = (ServiceAreaBusiness) o;
    return Objects.equals(this.businessType, serviceAreaBusiness.businessType) &&
        Objects.equals(this.places, serviceAreaBusiness.places) &&
        Objects.equals(this.radius, serviceAreaBusiness.radius);
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessType, places, radius);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceAreaBusiness {\n");
    sb.append("    businessType: ").append(toIndentedString(businessType)).append("\n");
    sb.append("    places: ").append(toIndentedString(places)).append("\n");
    sb.append("    radius: ").append(toIndentedString(radius)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("businessType");
    openapiFields.add("places");
    openapiFields.add("radius");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceAreaBusiness
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceAreaBusiness.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceAreaBusiness is not found in the empty JSON string", ServiceAreaBusiness.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceAreaBusiness.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceAreaBusiness` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("businessType") != null && !jsonObj.get("businessType").isJsonNull()) && !jsonObj.get("businessType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessType").toString()));
      }
      // validate the optional field `businessType`
      if (jsonObj.get("businessType") != null && !jsonObj.get("businessType").isJsonNull()) {
        BusinessTypeEnum.validateJsonElement(jsonObj.get("businessType"));
      }
      // validate the optional field `places`
      if (jsonObj.get("places") != null && !jsonObj.get("places").isJsonNull()) {
        Places.validateJsonElement(jsonObj.get("places"));
      }
      // validate the optional field `radius`
      if (jsonObj.get("radius") != null && !jsonObj.get("radius").isJsonNull()) {
        PointRadius.validateJsonElement(jsonObj.get("radius"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceAreaBusiness.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceAreaBusiness' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceAreaBusiness> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceAreaBusiness.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceAreaBusiness>() {
           @Override
           public void write(JsonWriter out, ServiceAreaBusiness value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceAreaBusiness read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceAreaBusiness given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceAreaBusiness
   * @throws IOException if the JSON string is invalid with respect to ServiceAreaBusiness
   */
  public static ServiceAreaBusiness fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceAreaBusiness.class);
  }

  /**
   * Convert an instance of ServiceAreaBusiness to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

