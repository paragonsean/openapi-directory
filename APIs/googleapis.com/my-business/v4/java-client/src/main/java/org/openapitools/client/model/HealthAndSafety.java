/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EnhancedCleaning;
import org.openapitools.client.model.IncreasedFoodSafety;
import org.openapitools.client.model.MinimizedContact;
import org.openapitools.client.model.PersonalProtection;
import org.openapitools.client.model.PhysicalDistancing;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Health and safety measures implemented by the hotel during COVID-19.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HealthAndSafety {
  public static final String SERIALIZED_NAME_ENHANCED_CLEANING = "enhancedCleaning";
  @SerializedName(SERIALIZED_NAME_ENHANCED_CLEANING)
  private EnhancedCleaning enhancedCleaning;

  public static final String SERIALIZED_NAME_INCREASED_FOOD_SAFETY = "increasedFoodSafety";
  @SerializedName(SERIALIZED_NAME_INCREASED_FOOD_SAFETY)
  private IncreasedFoodSafety increasedFoodSafety;

  public static final String SERIALIZED_NAME_MINIMIZED_CONTACT = "minimizedContact";
  @SerializedName(SERIALIZED_NAME_MINIMIZED_CONTACT)
  private MinimizedContact minimizedContact;

  public static final String SERIALIZED_NAME_PERSONAL_PROTECTION = "personalProtection";
  @SerializedName(SERIALIZED_NAME_PERSONAL_PROTECTION)
  private PersonalProtection personalProtection;

  public static final String SERIALIZED_NAME_PHYSICAL_DISTANCING = "physicalDistancing";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_DISTANCING)
  private PhysicalDistancing physicalDistancing;

  public HealthAndSafety() {
  }

  public HealthAndSafety enhancedCleaning(EnhancedCleaning enhancedCleaning) {
    this.enhancedCleaning = enhancedCleaning;
    return this;
  }

  /**
   * Get enhancedCleaning
   * @return enhancedCleaning
   */
  @javax.annotation.Nullable
  public EnhancedCleaning getEnhancedCleaning() {
    return enhancedCleaning;
  }

  public void setEnhancedCleaning(EnhancedCleaning enhancedCleaning) {
    this.enhancedCleaning = enhancedCleaning;
  }


  public HealthAndSafety increasedFoodSafety(IncreasedFoodSafety increasedFoodSafety) {
    this.increasedFoodSafety = increasedFoodSafety;
    return this;
  }

  /**
   * Get increasedFoodSafety
   * @return increasedFoodSafety
   */
  @javax.annotation.Nullable
  public IncreasedFoodSafety getIncreasedFoodSafety() {
    return increasedFoodSafety;
  }

  public void setIncreasedFoodSafety(IncreasedFoodSafety increasedFoodSafety) {
    this.increasedFoodSafety = increasedFoodSafety;
  }


  public HealthAndSafety minimizedContact(MinimizedContact minimizedContact) {
    this.minimizedContact = minimizedContact;
    return this;
  }

  /**
   * Get minimizedContact
   * @return minimizedContact
   */
  @javax.annotation.Nullable
  public MinimizedContact getMinimizedContact() {
    return minimizedContact;
  }

  public void setMinimizedContact(MinimizedContact minimizedContact) {
    this.minimizedContact = minimizedContact;
  }


  public HealthAndSafety personalProtection(PersonalProtection personalProtection) {
    this.personalProtection = personalProtection;
    return this;
  }

  /**
   * Get personalProtection
   * @return personalProtection
   */
  @javax.annotation.Nullable
  public PersonalProtection getPersonalProtection() {
    return personalProtection;
  }

  public void setPersonalProtection(PersonalProtection personalProtection) {
    this.personalProtection = personalProtection;
  }


  public HealthAndSafety physicalDistancing(PhysicalDistancing physicalDistancing) {
    this.physicalDistancing = physicalDistancing;
    return this;
  }

  /**
   * Get physicalDistancing
   * @return physicalDistancing
   */
  @javax.annotation.Nullable
  public PhysicalDistancing getPhysicalDistancing() {
    return physicalDistancing;
  }

  public void setPhysicalDistancing(PhysicalDistancing physicalDistancing) {
    this.physicalDistancing = physicalDistancing;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthAndSafety healthAndSafety = (HealthAndSafety) o;
    return Objects.equals(this.enhancedCleaning, healthAndSafety.enhancedCleaning) &&
        Objects.equals(this.increasedFoodSafety, healthAndSafety.increasedFoodSafety) &&
        Objects.equals(this.minimizedContact, healthAndSafety.minimizedContact) &&
        Objects.equals(this.personalProtection, healthAndSafety.personalProtection) &&
        Objects.equals(this.physicalDistancing, healthAndSafety.physicalDistancing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enhancedCleaning, increasedFoodSafety, minimizedContact, personalProtection, physicalDistancing);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthAndSafety {\n");
    sb.append("    enhancedCleaning: ").append(toIndentedString(enhancedCleaning)).append("\n");
    sb.append("    increasedFoodSafety: ").append(toIndentedString(increasedFoodSafety)).append("\n");
    sb.append("    minimizedContact: ").append(toIndentedString(minimizedContact)).append("\n");
    sb.append("    personalProtection: ").append(toIndentedString(personalProtection)).append("\n");
    sb.append("    physicalDistancing: ").append(toIndentedString(physicalDistancing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enhancedCleaning");
    openapiFields.add("increasedFoodSafety");
    openapiFields.add("minimizedContact");
    openapiFields.add("personalProtection");
    openapiFields.add("physicalDistancing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HealthAndSafety
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HealthAndSafety.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HealthAndSafety is not found in the empty JSON string", HealthAndSafety.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HealthAndSafety.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HealthAndSafety` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `enhancedCleaning`
      if (jsonObj.get("enhancedCleaning") != null && !jsonObj.get("enhancedCleaning").isJsonNull()) {
        EnhancedCleaning.validateJsonElement(jsonObj.get("enhancedCleaning"));
      }
      // validate the optional field `increasedFoodSafety`
      if (jsonObj.get("increasedFoodSafety") != null && !jsonObj.get("increasedFoodSafety").isJsonNull()) {
        IncreasedFoodSafety.validateJsonElement(jsonObj.get("increasedFoodSafety"));
      }
      // validate the optional field `minimizedContact`
      if (jsonObj.get("minimizedContact") != null && !jsonObj.get("minimizedContact").isJsonNull()) {
        MinimizedContact.validateJsonElement(jsonObj.get("minimizedContact"));
      }
      // validate the optional field `personalProtection`
      if (jsonObj.get("personalProtection") != null && !jsonObj.get("personalProtection").isJsonNull()) {
        PersonalProtection.validateJsonElement(jsonObj.get("personalProtection"));
      }
      // validate the optional field `physicalDistancing`
      if (jsonObj.get("physicalDistancing") != null && !jsonObj.get("physicalDistancing").isJsonNull()) {
        PhysicalDistancing.validateJsonElement(jsonObj.get("physicalDistancing"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HealthAndSafety.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HealthAndSafety' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HealthAndSafety> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HealthAndSafety.class));

       return (TypeAdapter<T>) new TypeAdapter<HealthAndSafety>() {
           @Override
           public void write(JsonWriter out, HealthAndSafety value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HealthAndSafety read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HealthAndSafety given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HealthAndSafety
   * @throws IOException if the JSON string is invalid with respect to HealthAndSafety
   */
  public static HealthAndSafety fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HealthAndSafety.class);
  }

  /**
   * Convert an instance of HealthAndSafety to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

