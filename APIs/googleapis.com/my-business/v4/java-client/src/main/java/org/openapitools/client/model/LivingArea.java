/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LivingAreaAccessibility;
import org.openapitools.client.model.LivingAreaEating;
import org.openapitools.client.model.LivingAreaFeatures;
import org.openapitools.client.model.LivingAreaLayout;
import org.openapitools.client.model.LivingAreaSleeping;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An individual room, such as kitchen, bathroom, bedroom, within a bookable guest unit.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LivingArea {
  public static final String SERIALIZED_NAME_ACCESSIBILITY = "accessibility";
  @SerializedName(SERIALIZED_NAME_ACCESSIBILITY)
  private LivingAreaAccessibility accessibility;

  public static final String SERIALIZED_NAME_EATING = "eating";
  @SerializedName(SERIALIZED_NAME_EATING)
  private LivingAreaEating eating;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private LivingAreaFeatures features;

  public static final String SERIALIZED_NAME_LAYOUT = "layout";
  @SerializedName(SERIALIZED_NAME_LAYOUT)
  private LivingAreaLayout layout;

  public static final String SERIALIZED_NAME_SLEEPING = "sleeping";
  @SerializedName(SERIALIZED_NAME_SLEEPING)
  private LivingAreaSleeping sleeping;

  public LivingArea() {
  }

  public LivingArea accessibility(LivingAreaAccessibility accessibility) {
    this.accessibility = accessibility;
    return this;
  }

  /**
   * Get accessibility
   * @return accessibility
   */
  @javax.annotation.Nullable
  public LivingAreaAccessibility getAccessibility() {
    return accessibility;
  }

  public void setAccessibility(LivingAreaAccessibility accessibility) {
    this.accessibility = accessibility;
  }


  public LivingArea eating(LivingAreaEating eating) {
    this.eating = eating;
    return this;
  }

  /**
   * Get eating
   * @return eating
   */
  @javax.annotation.Nullable
  public LivingAreaEating getEating() {
    return eating;
  }

  public void setEating(LivingAreaEating eating) {
    this.eating = eating;
  }


  public LivingArea features(LivingAreaFeatures features) {
    this.features = features;
    return this;
  }

  /**
   * Get features
   * @return features
   */
  @javax.annotation.Nullable
  public LivingAreaFeatures getFeatures() {
    return features;
  }

  public void setFeatures(LivingAreaFeatures features) {
    this.features = features;
  }


  public LivingArea layout(LivingAreaLayout layout) {
    this.layout = layout;
    return this;
  }

  /**
   * Get layout
   * @return layout
   */
  @javax.annotation.Nullable
  public LivingAreaLayout getLayout() {
    return layout;
  }

  public void setLayout(LivingAreaLayout layout) {
    this.layout = layout;
  }


  public LivingArea sleeping(LivingAreaSleeping sleeping) {
    this.sleeping = sleeping;
    return this;
  }

  /**
   * Get sleeping
   * @return sleeping
   */
  @javax.annotation.Nullable
  public LivingAreaSleeping getSleeping() {
    return sleeping;
  }

  public void setSleeping(LivingAreaSleeping sleeping) {
    this.sleeping = sleeping;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LivingArea livingArea = (LivingArea) o;
    return Objects.equals(this.accessibility, livingArea.accessibility) &&
        Objects.equals(this.eating, livingArea.eating) &&
        Objects.equals(this.features, livingArea.features) &&
        Objects.equals(this.layout, livingArea.layout) &&
        Objects.equals(this.sleeping, livingArea.sleeping);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessibility, eating, features, layout, sleeping);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LivingArea {\n");
    sb.append("    accessibility: ").append(toIndentedString(accessibility)).append("\n");
    sb.append("    eating: ").append(toIndentedString(eating)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    sleeping: ").append(toIndentedString(sleeping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessibility");
    openapiFields.add("eating");
    openapiFields.add("features");
    openapiFields.add("layout");
    openapiFields.add("sleeping");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LivingArea
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LivingArea.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LivingArea is not found in the empty JSON string", LivingArea.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LivingArea.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LivingArea` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessibility`
      if (jsonObj.get("accessibility") != null && !jsonObj.get("accessibility").isJsonNull()) {
        LivingAreaAccessibility.validateJsonElement(jsonObj.get("accessibility"));
      }
      // validate the optional field `eating`
      if (jsonObj.get("eating") != null && !jsonObj.get("eating").isJsonNull()) {
        LivingAreaEating.validateJsonElement(jsonObj.get("eating"));
      }
      // validate the optional field `features`
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) {
        LivingAreaFeatures.validateJsonElement(jsonObj.get("features"));
      }
      // validate the optional field `layout`
      if (jsonObj.get("layout") != null && !jsonObj.get("layout").isJsonNull()) {
        LivingAreaLayout.validateJsonElement(jsonObj.get("layout"));
      }
      // validate the optional field `sleeping`
      if (jsonObj.get("sleeping") != null && !jsonObj.get("sleeping").isJsonNull()) {
        LivingAreaSleeping.validateJsonElement(jsonObj.get("sleeping"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LivingArea.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LivingArea' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LivingArea> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LivingArea.class));

       return (TypeAdapter<T>) new TypeAdapter<LivingArea>() {
           @Override
           public void write(JsonWriter out, LivingArea value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LivingArea read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LivingArea given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LivingArea
   * @throws IOException if the JSON string is invalid with respect to LivingArea
   */
  public static LivingArea fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LivingArea.class);
  }

  /**
   * Convert an instance of LivingArea to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

