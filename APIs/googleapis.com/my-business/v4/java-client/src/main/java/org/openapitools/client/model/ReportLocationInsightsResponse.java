/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LocationDrivingDirectionMetrics;
import org.openapitools.client.model.LocationMetrics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for &#x60;Insights.ReportLocationInsights&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportLocationInsightsResponse {
  public static final String SERIALIZED_NAME_LOCATION_DRIVING_DIRECTION_METRICS = "locationDrivingDirectionMetrics";
  @SerializedName(SERIALIZED_NAME_LOCATION_DRIVING_DIRECTION_METRICS)
  private List<LocationDrivingDirectionMetrics> locationDrivingDirectionMetrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION_METRICS = "locationMetrics";
  @SerializedName(SERIALIZED_NAME_LOCATION_METRICS)
  private List<LocationMetrics> locationMetrics = new ArrayList<>();

  public ReportLocationInsightsResponse() {
  }

  public ReportLocationInsightsResponse locationDrivingDirectionMetrics(List<LocationDrivingDirectionMetrics> locationDrivingDirectionMetrics) {
    this.locationDrivingDirectionMetrics = locationDrivingDirectionMetrics;
    return this;
  }

  public ReportLocationInsightsResponse addLocationDrivingDirectionMetricsItem(LocationDrivingDirectionMetrics locationDrivingDirectionMetricsItem) {
    if (this.locationDrivingDirectionMetrics == null) {
      this.locationDrivingDirectionMetrics = new ArrayList<>();
    }
    this.locationDrivingDirectionMetrics.add(locationDrivingDirectionMetricsItem);
    return this;
  }

  /**
   * A collection of values for driving direction-related metrics.
   * @return locationDrivingDirectionMetrics
   */
  @javax.annotation.Nullable
  public List<LocationDrivingDirectionMetrics> getLocationDrivingDirectionMetrics() {
    return locationDrivingDirectionMetrics;
  }

  public void setLocationDrivingDirectionMetrics(List<LocationDrivingDirectionMetrics> locationDrivingDirectionMetrics) {
    this.locationDrivingDirectionMetrics = locationDrivingDirectionMetrics;
  }


  public ReportLocationInsightsResponse locationMetrics(List<LocationMetrics> locationMetrics) {
    this.locationMetrics = locationMetrics;
    return this;
  }

  public ReportLocationInsightsResponse addLocationMetricsItem(LocationMetrics locationMetricsItem) {
    if (this.locationMetrics == null) {
      this.locationMetrics = new ArrayList<>();
    }
    this.locationMetrics.add(locationMetricsItem);
    return this;
  }

  /**
   * A collection of metric values by location.
   * @return locationMetrics
   */
  @javax.annotation.Nullable
  public List<LocationMetrics> getLocationMetrics() {
    return locationMetrics;
  }

  public void setLocationMetrics(List<LocationMetrics> locationMetrics) {
    this.locationMetrics = locationMetrics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportLocationInsightsResponse reportLocationInsightsResponse = (ReportLocationInsightsResponse) o;
    return Objects.equals(this.locationDrivingDirectionMetrics, reportLocationInsightsResponse.locationDrivingDirectionMetrics) &&
        Objects.equals(this.locationMetrics, reportLocationInsightsResponse.locationMetrics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationDrivingDirectionMetrics, locationMetrics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportLocationInsightsResponse {\n");
    sb.append("    locationDrivingDirectionMetrics: ").append(toIndentedString(locationDrivingDirectionMetrics)).append("\n");
    sb.append("    locationMetrics: ").append(toIndentedString(locationMetrics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("locationDrivingDirectionMetrics");
    openapiFields.add("locationMetrics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportLocationInsightsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportLocationInsightsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportLocationInsightsResponse is not found in the empty JSON string", ReportLocationInsightsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportLocationInsightsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportLocationInsightsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("locationDrivingDirectionMetrics") != null && !jsonObj.get("locationDrivingDirectionMetrics").isJsonNull()) {
        JsonArray jsonArraylocationDrivingDirectionMetrics = jsonObj.getAsJsonArray("locationDrivingDirectionMetrics");
        if (jsonArraylocationDrivingDirectionMetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locationDrivingDirectionMetrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locationDrivingDirectionMetrics` to be an array in the JSON string but got `%s`", jsonObj.get("locationDrivingDirectionMetrics").toString()));
          }

          // validate the optional field `locationDrivingDirectionMetrics` (array)
          for (int i = 0; i < jsonArraylocationDrivingDirectionMetrics.size(); i++) {
            LocationDrivingDirectionMetrics.validateJsonElement(jsonArraylocationDrivingDirectionMetrics.get(i));
          };
        }
      }
      if (jsonObj.get("locationMetrics") != null && !jsonObj.get("locationMetrics").isJsonNull()) {
        JsonArray jsonArraylocationMetrics = jsonObj.getAsJsonArray("locationMetrics");
        if (jsonArraylocationMetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locationMetrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locationMetrics` to be an array in the JSON string but got `%s`", jsonObj.get("locationMetrics").toString()));
          }

          // validate the optional field `locationMetrics` (array)
          for (int i = 0; i < jsonArraylocationMetrics.size(); i++) {
            LocationMetrics.validateJsonElement(jsonArraylocationMetrics.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportLocationInsightsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportLocationInsightsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportLocationInsightsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportLocationInsightsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportLocationInsightsResponse>() {
           @Override
           public void write(JsonWriter out, ReportLocationInsightsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportLocationInsightsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportLocationInsightsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportLocationInsightsResponse
   * @throws IOException if the JSON string is invalid with respect to ReportLocationInsightsResponse
   */
  public static ReportLocationInsightsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportLocationInsightsResponse.class);
  }

  /**
   * Convert an instance of ReportLocationInsightsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

