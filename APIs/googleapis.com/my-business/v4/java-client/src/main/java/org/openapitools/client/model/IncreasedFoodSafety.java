/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Increased food safety measures implemented by the hotel during COVID-19.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IncreasedFoodSafety {
  public static final String SERIALIZED_NAME_DINING_AREAS_ADDITIONAL_SANITATION = "diningAreasAdditionalSanitation";
  @SerializedName(SERIALIZED_NAME_DINING_AREAS_ADDITIONAL_SANITATION)
  private Boolean diningAreasAdditionalSanitation;

  /**
   * Dining areas additional sanitation exception.
   */
  @JsonAdapter(DiningAreasAdditionalSanitationExceptionEnum.Adapter.class)
  public enum DiningAreasAdditionalSanitationExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    DiningAreasAdditionalSanitationExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DiningAreasAdditionalSanitationExceptionEnum fromValue(String value) {
      for (DiningAreasAdditionalSanitationExceptionEnum b : DiningAreasAdditionalSanitationExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DiningAreasAdditionalSanitationExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DiningAreasAdditionalSanitationExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DiningAreasAdditionalSanitationExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DiningAreasAdditionalSanitationExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DiningAreasAdditionalSanitationExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DINING_AREAS_ADDITIONAL_SANITATION_EXCEPTION = "diningAreasAdditionalSanitationException";
  @SerializedName(SERIALIZED_NAME_DINING_AREAS_ADDITIONAL_SANITATION_EXCEPTION)
  private DiningAreasAdditionalSanitationExceptionEnum diningAreasAdditionalSanitationException;

  public static final String SERIALIZED_NAME_DISPOSABLE_FLATWARE = "disposableFlatware";
  @SerializedName(SERIALIZED_NAME_DISPOSABLE_FLATWARE)
  private Boolean disposableFlatware;

  /**
   * Disposable flatware exception.
   */
  @JsonAdapter(DisposableFlatwareExceptionEnum.Adapter.class)
  public enum DisposableFlatwareExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    DisposableFlatwareExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisposableFlatwareExceptionEnum fromValue(String value) {
      for (DisposableFlatwareExceptionEnum b : DisposableFlatwareExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DisposableFlatwareExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DisposableFlatwareExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DisposableFlatwareExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DisposableFlatwareExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DisposableFlatwareExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISPOSABLE_FLATWARE_EXCEPTION = "disposableFlatwareException";
  @SerializedName(SERIALIZED_NAME_DISPOSABLE_FLATWARE_EXCEPTION)
  private DisposableFlatwareExceptionEnum disposableFlatwareException;

  public static final String SERIALIZED_NAME_FOOD_PREPARATION_AND_SERVING_ADDITIONAL_SAFETY = "foodPreparationAndServingAdditionalSafety";
  @SerializedName(SERIALIZED_NAME_FOOD_PREPARATION_AND_SERVING_ADDITIONAL_SAFETY)
  private Boolean foodPreparationAndServingAdditionalSafety;

  /**
   * Food preparation and serving additional safety exception.
   */
  @JsonAdapter(FoodPreparationAndServingAdditionalSafetyExceptionEnum.Adapter.class)
  public enum FoodPreparationAndServingAdditionalSafetyExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FoodPreparationAndServingAdditionalSafetyExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FoodPreparationAndServingAdditionalSafetyExceptionEnum fromValue(String value) {
      for (FoodPreparationAndServingAdditionalSafetyExceptionEnum b : FoodPreparationAndServingAdditionalSafetyExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FoodPreparationAndServingAdditionalSafetyExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FoodPreparationAndServingAdditionalSafetyExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FoodPreparationAndServingAdditionalSafetyExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FoodPreparationAndServingAdditionalSafetyExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FoodPreparationAndServingAdditionalSafetyExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FOOD_PREPARATION_AND_SERVING_ADDITIONAL_SAFETY_EXCEPTION = "foodPreparationAndServingAdditionalSafetyException";
  @SerializedName(SERIALIZED_NAME_FOOD_PREPARATION_AND_SERVING_ADDITIONAL_SAFETY_EXCEPTION)
  private FoodPreparationAndServingAdditionalSafetyExceptionEnum foodPreparationAndServingAdditionalSafetyException;

  public static final String SERIALIZED_NAME_INDIVIDUAL_PACKAGED_MEALS = "individualPackagedMeals";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_PACKAGED_MEALS)
  private Boolean individualPackagedMeals;

  /**
   * Individual packaged meals exception.
   */
  @JsonAdapter(IndividualPackagedMealsExceptionEnum.Adapter.class)
  public enum IndividualPackagedMealsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    IndividualPackagedMealsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndividualPackagedMealsExceptionEnum fromValue(String value) {
      for (IndividualPackagedMealsExceptionEnum b : IndividualPackagedMealsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndividualPackagedMealsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndividualPackagedMealsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndividualPackagedMealsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndividualPackagedMealsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndividualPackagedMealsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDIVIDUAL_PACKAGED_MEALS_EXCEPTION = "individualPackagedMealsException";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_PACKAGED_MEALS_EXCEPTION)
  private IndividualPackagedMealsExceptionEnum individualPackagedMealsException;

  public static final String SERIALIZED_NAME_SINGLE_USE_FOOD_MENUS = "singleUseFoodMenus";
  @SerializedName(SERIALIZED_NAME_SINGLE_USE_FOOD_MENUS)
  private Boolean singleUseFoodMenus;

  /**
   * Single use food menus exception.
   */
  @JsonAdapter(SingleUseFoodMenusExceptionEnum.Adapter.class)
  public enum SingleUseFoodMenusExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SingleUseFoodMenusExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SingleUseFoodMenusExceptionEnum fromValue(String value) {
      for (SingleUseFoodMenusExceptionEnum b : SingleUseFoodMenusExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SingleUseFoodMenusExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SingleUseFoodMenusExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SingleUseFoodMenusExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SingleUseFoodMenusExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SingleUseFoodMenusExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SINGLE_USE_FOOD_MENUS_EXCEPTION = "singleUseFoodMenusException";
  @SerializedName(SERIALIZED_NAME_SINGLE_USE_FOOD_MENUS_EXCEPTION)
  private SingleUseFoodMenusExceptionEnum singleUseFoodMenusException;

  public IncreasedFoodSafety() {
  }

  public IncreasedFoodSafety diningAreasAdditionalSanitation(Boolean diningAreasAdditionalSanitation) {
    this.diningAreasAdditionalSanitation = diningAreasAdditionalSanitation;
    return this;
  }

  /**
   * Additional sanitation in dining areas.
   * @return diningAreasAdditionalSanitation
   */
  @javax.annotation.Nullable
  public Boolean getDiningAreasAdditionalSanitation() {
    return diningAreasAdditionalSanitation;
  }

  public void setDiningAreasAdditionalSanitation(Boolean diningAreasAdditionalSanitation) {
    this.diningAreasAdditionalSanitation = diningAreasAdditionalSanitation;
  }


  public IncreasedFoodSafety diningAreasAdditionalSanitationException(DiningAreasAdditionalSanitationExceptionEnum diningAreasAdditionalSanitationException) {
    this.diningAreasAdditionalSanitationException = diningAreasAdditionalSanitationException;
    return this;
  }

  /**
   * Dining areas additional sanitation exception.
   * @return diningAreasAdditionalSanitationException
   */
  @javax.annotation.Nullable
  public DiningAreasAdditionalSanitationExceptionEnum getDiningAreasAdditionalSanitationException() {
    return diningAreasAdditionalSanitationException;
  }

  public void setDiningAreasAdditionalSanitationException(DiningAreasAdditionalSanitationExceptionEnum diningAreasAdditionalSanitationException) {
    this.diningAreasAdditionalSanitationException = diningAreasAdditionalSanitationException;
  }


  public IncreasedFoodSafety disposableFlatware(Boolean disposableFlatware) {
    this.disposableFlatware = disposableFlatware;
    return this;
  }

  /**
   * Disposable flatware.
   * @return disposableFlatware
   */
  @javax.annotation.Nullable
  public Boolean getDisposableFlatware() {
    return disposableFlatware;
  }

  public void setDisposableFlatware(Boolean disposableFlatware) {
    this.disposableFlatware = disposableFlatware;
  }


  public IncreasedFoodSafety disposableFlatwareException(DisposableFlatwareExceptionEnum disposableFlatwareException) {
    this.disposableFlatwareException = disposableFlatwareException;
    return this;
  }

  /**
   * Disposable flatware exception.
   * @return disposableFlatwareException
   */
  @javax.annotation.Nullable
  public DisposableFlatwareExceptionEnum getDisposableFlatwareException() {
    return disposableFlatwareException;
  }

  public void setDisposableFlatwareException(DisposableFlatwareExceptionEnum disposableFlatwareException) {
    this.disposableFlatwareException = disposableFlatwareException;
  }


  public IncreasedFoodSafety foodPreparationAndServingAdditionalSafety(Boolean foodPreparationAndServingAdditionalSafety) {
    this.foodPreparationAndServingAdditionalSafety = foodPreparationAndServingAdditionalSafety;
    return this;
  }

  /**
   * Additional safety measures during food prep and serving.
   * @return foodPreparationAndServingAdditionalSafety
   */
  @javax.annotation.Nullable
  public Boolean getFoodPreparationAndServingAdditionalSafety() {
    return foodPreparationAndServingAdditionalSafety;
  }

  public void setFoodPreparationAndServingAdditionalSafety(Boolean foodPreparationAndServingAdditionalSafety) {
    this.foodPreparationAndServingAdditionalSafety = foodPreparationAndServingAdditionalSafety;
  }


  public IncreasedFoodSafety foodPreparationAndServingAdditionalSafetyException(FoodPreparationAndServingAdditionalSafetyExceptionEnum foodPreparationAndServingAdditionalSafetyException) {
    this.foodPreparationAndServingAdditionalSafetyException = foodPreparationAndServingAdditionalSafetyException;
    return this;
  }

  /**
   * Food preparation and serving additional safety exception.
   * @return foodPreparationAndServingAdditionalSafetyException
   */
  @javax.annotation.Nullable
  public FoodPreparationAndServingAdditionalSafetyExceptionEnum getFoodPreparationAndServingAdditionalSafetyException() {
    return foodPreparationAndServingAdditionalSafetyException;
  }

  public void setFoodPreparationAndServingAdditionalSafetyException(FoodPreparationAndServingAdditionalSafetyExceptionEnum foodPreparationAndServingAdditionalSafetyException) {
    this.foodPreparationAndServingAdditionalSafetyException = foodPreparationAndServingAdditionalSafetyException;
  }


  public IncreasedFoodSafety individualPackagedMeals(Boolean individualPackagedMeals) {
    this.individualPackagedMeals = individualPackagedMeals;
    return this;
  }

  /**
   * Individually-packaged meals.
   * @return individualPackagedMeals
   */
  @javax.annotation.Nullable
  public Boolean getIndividualPackagedMeals() {
    return individualPackagedMeals;
  }

  public void setIndividualPackagedMeals(Boolean individualPackagedMeals) {
    this.individualPackagedMeals = individualPackagedMeals;
  }


  public IncreasedFoodSafety individualPackagedMealsException(IndividualPackagedMealsExceptionEnum individualPackagedMealsException) {
    this.individualPackagedMealsException = individualPackagedMealsException;
    return this;
  }

  /**
   * Individual packaged meals exception.
   * @return individualPackagedMealsException
   */
  @javax.annotation.Nullable
  public IndividualPackagedMealsExceptionEnum getIndividualPackagedMealsException() {
    return individualPackagedMealsException;
  }

  public void setIndividualPackagedMealsException(IndividualPackagedMealsExceptionEnum individualPackagedMealsException) {
    this.individualPackagedMealsException = individualPackagedMealsException;
  }


  public IncreasedFoodSafety singleUseFoodMenus(Boolean singleUseFoodMenus) {
    this.singleUseFoodMenus = singleUseFoodMenus;
    return this;
  }

  /**
   * Single-use menus.
   * @return singleUseFoodMenus
   */
  @javax.annotation.Nullable
  public Boolean getSingleUseFoodMenus() {
    return singleUseFoodMenus;
  }

  public void setSingleUseFoodMenus(Boolean singleUseFoodMenus) {
    this.singleUseFoodMenus = singleUseFoodMenus;
  }


  public IncreasedFoodSafety singleUseFoodMenusException(SingleUseFoodMenusExceptionEnum singleUseFoodMenusException) {
    this.singleUseFoodMenusException = singleUseFoodMenusException;
    return this;
  }

  /**
   * Single use food menus exception.
   * @return singleUseFoodMenusException
   */
  @javax.annotation.Nullable
  public SingleUseFoodMenusExceptionEnum getSingleUseFoodMenusException() {
    return singleUseFoodMenusException;
  }

  public void setSingleUseFoodMenusException(SingleUseFoodMenusExceptionEnum singleUseFoodMenusException) {
    this.singleUseFoodMenusException = singleUseFoodMenusException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IncreasedFoodSafety increasedFoodSafety = (IncreasedFoodSafety) o;
    return Objects.equals(this.diningAreasAdditionalSanitation, increasedFoodSafety.diningAreasAdditionalSanitation) &&
        Objects.equals(this.diningAreasAdditionalSanitationException, increasedFoodSafety.diningAreasAdditionalSanitationException) &&
        Objects.equals(this.disposableFlatware, increasedFoodSafety.disposableFlatware) &&
        Objects.equals(this.disposableFlatwareException, increasedFoodSafety.disposableFlatwareException) &&
        Objects.equals(this.foodPreparationAndServingAdditionalSafety, increasedFoodSafety.foodPreparationAndServingAdditionalSafety) &&
        Objects.equals(this.foodPreparationAndServingAdditionalSafetyException, increasedFoodSafety.foodPreparationAndServingAdditionalSafetyException) &&
        Objects.equals(this.individualPackagedMeals, increasedFoodSafety.individualPackagedMeals) &&
        Objects.equals(this.individualPackagedMealsException, increasedFoodSafety.individualPackagedMealsException) &&
        Objects.equals(this.singleUseFoodMenus, increasedFoodSafety.singleUseFoodMenus) &&
        Objects.equals(this.singleUseFoodMenusException, increasedFoodSafety.singleUseFoodMenusException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diningAreasAdditionalSanitation, diningAreasAdditionalSanitationException, disposableFlatware, disposableFlatwareException, foodPreparationAndServingAdditionalSafety, foodPreparationAndServingAdditionalSafetyException, individualPackagedMeals, individualPackagedMealsException, singleUseFoodMenus, singleUseFoodMenusException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IncreasedFoodSafety {\n");
    sb.append("    diningAreasAdditionalSanitation: ").append(toIndentedString(diningAreasAdditionalSanitation)).append("\n");
    sb.append("    diningAreasAdditionalSanitationException: ").append(toIndentedString(diningAreasAdditionalSanitationException)).append("\n");
    sb.append("    disposableFlatware: ").append(toIndentedString(disposableFlatware)).append("\n");
    sb.append("    disposableFlatwareException: ").append(toIndentedString(disposableFlatwareException)).append("\n");
    sb.append("    foodPreparationAndServingAdditionalSafety: ").append(toIndentedString(foodPreparationAndServingAdditionalSafety)).append("\n");
    sb.append("    foodPreparationAndServingAdditionalSafetyException: ").append(toIndentedString(foodPreparationAndServingAdditionalSafetyException)).append("\n");
    sb.append("    individualPackagedMeals: ").append(toIndentedString(individualPackagedMeals)).append("\n");
    sb.append("    individualPackagedMealsException: ").append(toIndentedString(individualPackagedMealsException)).append("\n");
    sb.append("    singleUseFoodMenus: ").append(toIndentedString(singleUseFoodMenus)).append("\n");
    sb.append("    singleUseFoodMenusException: ").append(toIndentedString(singleUseFoodMenusException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("diningAreasAdditionalSanitation");
    openapiFields.add("diningAreasAdditionalSanitationException");
    openapiFields.add("disposableFlatware");
    openapiFields.add("disposableFlatwareException");
    openapiFields.add("foodPreparationAndServingAdditionalSafety");
    openapiFields.add("foodPreparationAndServingAdditionalSafetyException");
    openapiFields.add("individualPackagedMeals");
    openapiFields.add("individualPackagedMealsException");
    openapiFields.add("singleUseFoodMenus");
    openapiFields.add("singleUseFoodMenusException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IncreasedFoodSafety
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IncreasedFoodSafety.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IncreasedFoodSafety is not found in the empty JSON string", IncreasedFoodSafety.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IncreasedFoodSafety.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IncreasedFoodSafety` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("diningAreasAdditionalSanitationException") != null && !jsonObj.get("diningAreasAdditionalSanitationException").isJsonNull()) && !jsonObj.get("diningAreasAdditionalSanitationException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diningAreasAdditionalSanitationException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diningAreasAdditionalSanitationException").toString()));
      }
      // validate the optional field `diningAreasAdditionalSanitationException`
      if (jsonObj.get("diningAreasAdditionalSanitationException") != null && !jsonObj.get("diningAreasAdditionalSanitationException").isJsonNull()) {
        DiningAreasAdditionalSanitationExceptionEnum.validateJsonElement(jsonObj.get("diningAreasAdditionalSanitationException"));
      }
      if ((jsonObj.get("disposableFlatwareException") != null && !jsonObj.get("disposableFlatwareException").isJsonNull()) && !jsonObj.get("disposableFlatwareException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disposableFlatwareException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disposableFlatwareException").toString()));
      }
      // validate the optional field `disposableFlatwareException`
      if (jsonObj.get("disposableFlatwareException") != null && !jsonObj.get("disposableFlatwareException").isJsonNull()) {
        DisposableFlatwareExceptionEnum.validateJsonElement(jsonObj.get("disposableFlatwareException"));
      }
      if ((jsonObj.get("foodPreparationAndServingAdditionalSafetyException") != null && !jsonObj.get("foodPreparationAndServingAdditionalSafetyException").isJsonNull()) && !jsonObj.get("foodPreparationAndServingAdditionalSafetyException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foodPreparationAndServingAdditionalSafetyException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foodPreparationAndServingAdditionalSafetyException").toString()));
      }
      // validate the optional field `foodPreparationAndServingAdditionalSafetyException`
      if (jsonObj.get("foodPreparationAndServingAdditionalSafetyException") != null && !jsonObj.get("foodPreparationAndServingAdditionalSafetyException").isJsonNull()) {
        FoodPreparationAndServingAdditionalSafetyExceptionEnum.validateJsonElement(jsonObj.get("foodPreparationAndServingAdditionalSafetyException"));
      }
      if ((jsonObj.get("individualPackagedMealsException") != null && !jsonObj.get("individualPackagedMealsException").isJsonNull()) && !jsonObj.get("individualPackagedMealsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `individualPackagedMealsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("individualPackagedMealsException").toString()));
      }
      // validate the optional field `individualPackagedMealsException`
      if (jsonObj.get("individualPackagedMealsException") != null && !jsonObj.get("individualPackagedMealsException").isJsonNull()) {
        IndividualPackagedMealsExceptionEnum.validateJsonElement(jsonObj.get("individualPackagedMealsException"));
      }
      if ((jsonObj.get("singleUseFoodMenusException") != null && !jsonObj.get("singleUseFoodMenusException").isJsonNull()) && !jsonObj.get("singleUseFoodMenusException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `singleUseFoodMenusException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("singleUseFoodMenusException").toString()));
      }
      // validate the optional field `singleUseFoodMenusException`
      if (jsonObj.get("singleUseFoodMenusException") != null && !jsonObj.get("singleUseFoodMenusException").isJsonNull()) {
        SingleUseFoodMenusExceptionEnum.validateJsonElement(jsonObj.get("singleUseFoodMenusException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IncreasedFoodSafety.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IncreasedFoodSafety' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IncreasedFoodSafety> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IncreasedFoodSafety.class));

       return (TypeAdapter<T>) new TypeAdapter<IncreasedFoodSafety>() {
           @Override
           public void write(JsonWriter out, IncreasedFoodSafety value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IncreasedFoodSafety read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IncreasedFoodSafety given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IncreasedFoodSafety
   * @throws IOException if the JSON string is invalid with respect to IncreasedFoodSafety
   */
  public static IncreasedFoodSafety fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IncreasedFoodSafety.class);
  }

  /**
   * Convert an instance of IncreasedFoodSafety to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

