/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LocalPostMetrics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for Insights.ReportLocalPostInsights
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportLocalPostInsightsResponse {
  public static final String SERIALIZED_NAME_LOCAL_POST_METRICS = "localPostMetrics";
  @SerializedName(SERIALIZED_NAME_LOCAL_POST_METRICS)
  private List<LocalPostMetrics> localPostMetrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public ReportLocalPostInsightsResponse() {
  }

  public ReportLocalPostInsightsResponse localPostMetrics(List<LocalPostMetrics> localPostMetrics) {
    this.localPostMetrics = localPostMetrics;
    return this;
  }

  public ReportLocalPostInsightsResponse addLocalPostMetricsItem(LocalPostMetrics localPostMetricsItem) {
    if (this.localPostMetrics == null) {
      this.localPostMetrics = new ArrayList<>();
    }
    this.localPostMetrics.add(localPostMetricsItem);
    return this;
  }

  /**
   * One entry per requested post corresponding to this location.
   * @return localPostMetrics
   */
  @javax.annotation.Nullable
  public List<LocalPostMetrics> getLocalPostMetrics() {
    return localPostMetrics;
  }

  public void setLocalPostMetrics(List<LocalPostMetrics> localPostMetrics) {
    this.localPostMetrics = localPostMetrics;
  }


  public ReportLocalPostInsightsResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ReportLocalPostInsightsResponse timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Time zone (IANA timezone IDs, eg, &#39;Europe/London&#39;) of the location.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportLocalPostInsightsResponse reportLocalPostInsightsResponse = (ReportLocalPostInsightsResponse) o;
    return Objects.equals(this.localPostMetrics, reportLocalPostInsightsResponse.localPostMetrics) &&
        Objects.equals(this.name, reportLocalPostInsightsResponse.name) &&
        Objects.equals(this.timeZone, reportLocalPostInsightsResponse.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localPostMetrics, name, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportLocalPostInsightsResponse {\n");
    sb.append("    localPostMetrics: ").append(toIndentedString(localPostMetrics)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("localPostMetrics");
    openapiFields.add("name");
    openapiFields.add("timeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportLocalPostInsightsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportLocalPostInsightsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportLocalPostInsightsResponse is not found in the empty JSON string", ReportLocalPostInsightsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportLocalPostInsightsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportLocalPostInsightsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("localPostMetrics") != null && !jsonObj.get("localPostMetrics").isJsonNull()) {
        JsonArray jsonArraylocalPostMetrics = jsonObj.getAsJsonArray("localPostMetrics");
        if (jsonArraylocalPostMetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("localPostMetrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `localPostMetrics` to be an array in the JSON string but got `%s`", jsonObj.get("localPostMetrics").toString()));
          }

          // validate the optional field `localPostMetrics` (array)
          for (int i = 0; i < jsonArraylocalPostMetrics.size(); i++) {
            LocalPostMetrics.validateJsonElement(jsonArraylocalPostMetrics.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportLocalPostInsightsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportLocalPostInsightsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportLocalPostInsightsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportLocalPostInsightsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportLocalPostInsightsResponse>() {
           @Override
           public void write(JsonWriter out, ReportLocalPostInsightsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportLocalPostInsightsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportLocalPostInsightsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportLocalPostInsightsResponse
   * @throws IOException if the JSON string is invalid with respect to ReportLocalPostInsightsResponse
   */
  public static ReportLocalPostInsightsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportLocalPostInsightsResponse.class);
  }

  /**
   * Convert an instance of ReportLocalPostInsightsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

