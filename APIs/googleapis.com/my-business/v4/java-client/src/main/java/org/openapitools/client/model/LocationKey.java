/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Alternate/surrogate key references for a location.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LocationKey {
  public static final String SERIALIZED_NAME_EXPLICIT_NO_PLACE_ID = "explicitNoPlaceId";
  @SerializedName(SERIALIZED_NAME_EXPLICIT_NO_PLACE_ID)
  private Boolean explicitNoPlaceId;

  public static final String SERIALIZED_NAME_PLACE_ID = "placeId";
  @SerializedName(SERIALIZED_NAME_PLACE_ID)
  private String placeId;

  public static final String SERIALIZED_NAME_PLUS_PAGE_ID = "plusPageId";
  @SerializedName(SERIALIZED_NAME_PLUS_PAGE_ID)
  private String plusPageId;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public LocationKey() {
  }

  public LocationKey explicitNoPlaceId(Boolean explicitNoPlaceId) {
    this.explicitNoPlaceId = explicitNoPlaceId;
    return this;
  }

  /**
   * Output only. A value of true indicates that an unset place ID is deliberate, which is different from no association being made yet.
   * @return explicitNoPlaceId
   */
  @javax.annotation.Nullable
  public Boolean getExplicitNoPlaceId() {
    return explicitNoPlaceId;
  }

  public void setExplicitNoPlaceId(Boolean explicitNoPlaceId) {
    this.explicitNoPlaceId = explicitNoPlaceId;
  }


  public LocationKey placeId(String placeId) {
    this.placeId = placeId;
    return this;
  }

  /**
   * If this location has been verified and is connected to/appears on Google Maps, this field is populated with the place ID for the location. This ID can be used in various Places APIs. If this location is unverified, this field may be populated if the location has been associated with a place that appears on Google Maps. This field can be set during Create calls, but not for Update. The additional &#x60;explicit_no_place_id&#x60; bool qualifies whether an unset place ID is deliberate or not.
   * @return placeId
   */
  @javax.annotation.Nullable
  public String getPlaceId() {
    return placeId;
  }

  public void setPlaceId(String placeId) {
    this.placeId = placeId;
  }


  public LocationKey plusPageId(String plusPageId) {
    this.plusPageId = plusPageId;
    return this;
  }

  /**
   * Output only. If this location has a Google+ page associated with it, this is populated with the Google+ page ID for this location.
   * @return plusPageId
   */
  @javax.annotation.Nullable
  public String getPlusPageId() {
    return plusPageId;
  }

  public void setPlusPageId(String plusPageId) {
    this.plusPageId = plusPageId;
  }


  public LocationKey requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Output only. The &#x60;request_id&#x60; used to create this location. May be empty if this location was created outside of the Google My Business API or Business Profile Locations.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocationKey locationKey = (LocationKey) o;
    return Objects.equals(this.explicitNoPlaceId, locationKey.explicitNoPlaceId) &&
        Objects.equals(this.placeId, locationKey.placeId) &&
        Objects.equals(this.plusPageId, locationKey.plusPageId) &&
        Objects.equals(this.requestId, locationKey.requestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(explicitNoPlaceId, placeId, plusPageId, requestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocationKey {\n");
    sb.append("    explicitNoPlaceId: ").append(toIndentedString(explicitNoPlaceId)).append("\n");
    sb.append("    placeId: ").append(toIndentedString(placeId)).append("\n");
    sb.append("    plusPageId: ").append(toIndentedString(plusPageId)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("explicitNoPlaceId");
    openapiFields.add("placeId");
    openapiFields.add("plusPageId");
    openapiFields.add("requestId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LocationKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LocationKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LocationKey is not found in the empty JSON string", LocationKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LocationKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LocationKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("placeId") != null && !jsonObj.get("placeId").isJsonNull()) && !jsonObj.get("placeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeId").toString()));
      }
      if ((jsonObj.get("plusPageId") != null && !jsonObj.get("plusPageId").isJsonNull()) && !jsonObj.get("plusPageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plusPageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plusPageId").toString()));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LocationKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LocationKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LocationKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LocationKey.class));

       return (TypeAdapter<T>) new TypeAdapter<LocationKey>() {
           @Override
           public void write(JsonWriter out, LocationKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LocationKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LocationKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LocationKey
   * @throws IOException if the JSON string is invalid with respect to LocationKey
   */
  public static LocationKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LocationKey.class);
  }

  /**
   * Convert an instance of LocationKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

