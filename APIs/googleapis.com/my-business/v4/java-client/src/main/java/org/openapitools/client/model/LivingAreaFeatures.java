/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Features in the living area.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LivingAreaFeatures {
  public static final String SERIALIZED_NAME_AIR_CONDITIONING = "airConditioning";
  @SerializedName(SERIALIZED_NAME_AIR_CONDITIONING)
  private Boolean airConditioning;

  /**
   * Air conditioning exception.
   */
  @JsonAdapter(AirConditioningExceptionEnum.Adapter.class)
  public enum AirConditioningExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    AirConditioningExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AirConditioningExceptionEnum fromValue(String value) {
      for (AirConditioningExceptionEnum b : AirConditioningExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AirConditioningExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AirConditioningExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AirConditioningExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AirConditioningExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AirConditioningExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AIR_CONDITIONING_EXCEPTION = "airConditioningException";
  @SerializedName(SERIALIZED_NAME_AIR_CONDITIONING_EXCEPTION)
  private AirConditioningExceptionEnum airConditioningException;

  public static final String SERIALIZED_NAME_BATHTUB = "bathtub";
  @SerializedName(SERIALIZED_NAME_BATHTUB)
  private Boolean bathtub;

  /**
   * Bathtub exception.
   */
  @JsonAdapter(BathtubExceptionEnum.Adapter.class)
  public enum BathtubExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BathtubExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BathtubExceptionEnum fromValue(String value) {
      for (BathtubExceptionEnum b : BathtubExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BathtubExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BathtubExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BathtubExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BathtubExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BathtubExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BATHTUB_EXCEPTION = "bathtubException";
  @SerializedName(SERIALIZED_NAME_BATHTUB_EXCEPTION)
  private BathtubExceptionEnum bathtubException;

  public static final String SERIALIZED_NAME_BIDET = "bidet";
  @SerializedName(SERIALIZED_NAME_BIDET)
  private Boolean bidet;

  /**
   * Bidet exception.
   */
  @JsonAdapter(BidetExceptionEnum.Adapter.class)
  public enum BidetExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BidetExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BidetExceptionEnum fromValue(String value) {
      for (BidetExceptionEnum b : BidetExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BidetExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BidetExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BidetExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BidetExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BidetExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BIDET_EXCEPTION = "bidetException";
  @SerializedName(SERIALIZED_NAME_BIDET_EXCEPTION)
  private BidetExceptionEnum bidetException;

  public static final String SERIALIZED_NAME_DRYER = "dryer";
  @SerializedName(SERIALIZED_NAME_DRYER)
  private Boolean dryer;

  /**
   * Dryer exception.
   */
  @JsonAdapter(DryerExceptionEnum.Adapter.class)
  public enum DryerExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    DryerExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DryerExceptionEnum fromValue(String value) {
      for (DryerExceptionEnum b : DryerExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DryerExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DryerExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DryerExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DryerExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DryerExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DRYER_EXCEPTION = "dryerException";
  @SerializedName(SERIALIZED_NAME_DRYER_EXCEPTION)
  private DryerExceptionEnum dryerException;

  public static final String SERIALIZED_NAME_ELECTRONIC_ROOM_KEY = "electronicRoomKey";
  @SerializedName(SERIALIZED_NAME_ELECTRONIC_ROOM_KEY)
  private Boolean electronicRoomKey;

  /**
   * Electronic room key exception.
   */
  @JsonAdapter(ElectronicRoomKeyExceptionEnum.Adapter.class)
  public enum ElectronicRoomKeyExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ElectronicRoomKeyExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ElectronicRoomKeyExceptionEnum fromValue(String value) {
      for (ElectronicRoomKeyExceptionEnum b : ElectronicRoomKeyExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ElectronicRoomKeyExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ElectronicRoomKeyExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ElectronicRoomKeyExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ElectronicRoomKeyExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ElectronicRoomKeyExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ELECTRONIC_ROOM_KEY_EXCEPTION = "electronicRoomKeyException";
  @SerializedName(SERIALIZED_NAME_ELECTRONIC_ROOM_KEY_EXCEPTION)
  private ElectronicRoomKeyExceptionEnum electronicRoomKeyException;

  public static final String SERIALIZED_NAME_FIREPLACE = "fireplace";
  @SerializedName(SERIALIZED_NAME_FIREPLACE)
  private Boolean fireplace;

  /**
   * Fireplace exception.
   */
  @JsonAdapter(FireplaceExceptionEnum.Adapter.class)
  public enum FireplaceExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FireplaceExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FireplaceExceptionEnum fromValue(String value) {
      for (FireplaceExceptionEnum b : FireplaceExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FireplaceExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FireplaceExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FireplaceExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FireplaceExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FireplaceExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FIREPLACE_EXCEPTION = "fireplaceException";
  @SerializedName(SERIALIZED_NAME_FIREPLACE_EXCEPTION)
  private FireplaceExceptionEnum fireplaceException;

  public static final String SERIALIZED_NAME_HAIRDRYER = "hairdryer";
  @SerializedName(SERIALIZED_NAME_HAIRDRYER)
  private Boolean hairdryer;

  /**
   * Hairdryer exception.
   */
  @JsonAdapter(HairdryerExceptionEnum.Adapter.class)
  public enum HairdryerExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    HairdryerExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HairdryerExceptionEnum fromValue(String value) {
      for (HairdryerExceptionEnum b : HairdryerExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HairdryerExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HairdryerExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HairdryerExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HairdryerExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HairdryerExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HAIRDRYER_EXCEPTION = "hairdryerException";
  @SerializedName(SERIALIZED_NAME_HAIRDRYER_EXCEPTION)
  private HairdryerExceptionEnum hairdryerException;

  public static final String SERIALIZED_NAME_HEATING = "heating";
  @SerializedName(SERIALIZED_NAME_HEATING)
  private Boolean heating;

  /**
   * Heating exception.
   */
  @JsonAdapter(HeatingExceptionEnum.Adapter.class)
  public enum HeatingExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    HeatingExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HeatingExceptionEnum fromValue(String value) {
      for (HeatingExceptionEnum b : HeatingExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HeatingExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HeatingExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HeatingExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HeatingExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HeatingExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEATING_EXCEPTION = "heatingException";
  @SerializedName(SERIALIZED_NAME_HEATING_EXCEPTION)
  private HeatingExceptionEnum heatingException;

  public static final String SERIALIZED_NAME_INUNIT_SAFE = "inunitSafe";
  @SerializedName(SERIALIZED_NAME_INUNIT_SAFE)
  private Boolean inunitSafe;

  /**
   * In-unit safe exception.
   */
  @JsonAdapter(InunitSafeExceptionEnum.Adapter.class)
  public enum InunitSafeExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    InunitSafeExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InunitSafeExceptionEnum fromValue(String value) {
      for (InunitSafeExceptionEnum b : InunitSafeExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InunitSafeExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InunitSafeExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InunitSafeExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InunitSafeExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InunitSafeExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INUNIT_SAFE_EXCEPTION = "inunitSafeException";
  @SerializedName(SERIALIZED_NAME_INUNIT_SAFE_EXCEPTION)
  private InunitSafeExceptionEnum inunitSafeException;

  public static final String SERIALIZED_NAME_INUNIT_WIFI_AVAILABLE = "inunitWifiAvailable";
  @SerializedName(SERIALIZED_NAME_INUNIT_WIFI_AVAILABLE)
  private Boolean inunitWifiAvailable;

  /**
   * In-unit Wifi available exception.
   */
  @JsonAdapter(InunitWifiAvailableExceptionEnum.Adapter.class)
  public enum InunitWifiAvailableExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    InunitWifiAvailableExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InunitWifiAvailableExceptionEnum fromValue(String value) {
      for (InunitWifiAvailableExceptionEnum b : InunitWifiAvailableExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InunitWifiAvailableExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InunitWifiAvailableExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InunitWifiAvailableExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InunitWifiAvailableExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InunitWifiAvailableExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INUNIT_WIFI_AVAILABLE_EXCEPTION = "inunitWifiAvailableException";
  @SerializedName(SERIALIZED_NAME_INUNIT_WIFI_AVAILABLE_EXCEPTION)
  private InunitWifiAvailableExceptionEnum inunitWifiAvailableException;

  public static final String SERIALIZED_NAME_IRONING_EQUIPMENT = "ironingEquipment";
  @SerializedName(SERIALIZED_NAME_IRONING_EQUIPMENT)
  private Boolean ironingEquipment;

  /**
   * Ironing equipment exception.
   */
  @JsonAdapter(IroningEquipmentExceptionEnum.Adapter.class)
  public enum IroningEquipmentExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    IroningEquipmentExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IroningEquipmentExceptionEnum fromValue(String value) {
      for (IroningEquipmentExceptionEnum b : IroningEquipmentExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IroningEquipmentExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IroningEquipmentExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IroningEquipmentExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IroningEquipmentExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IroningEquipmentExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IRONING_EQUIPMENT_EXCEPTION = "ironingEquipmentException";
  @SerializedName(SERIALIZED_NAME_IRONING_EQUIPMENT_EXCEPTION)
  private IroningEquipmentExceptionEnum ironingEquipmentException;

  public static final String SERIALIZED_NAME_PAY_PER_VIEW_MOVIES = "payPerViewMovies";
  @SerializedName(SERIALIZED_NAME_PAY_PER_VIEW_MOVIES)
  private Boolean payPerViewMovies;

  /**
   * Pay per view movies exception.
   */
  @JsonAdapter(PayPerViewMoviesExceptionEnum.Adapter.class)
  public enum PayPerViewMoviesExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    PayPerViewMoviesExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayPerViewMoviesExceptionEnum fromValue(String value) {
      for (PayPerViewMoviesExceptionEnum b : PayPerViewMoviesExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayPerViewMoviesExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayPerViewMoviesExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayPerViewMoviesExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayPerViewMoviesExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PayPerViewMoviesExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAY_PER_VIEW_MOVIES_EXCEPTION = "payPerViewMoviesException";
  @SerializedName(SERIALIZED_NAME_PAY_PER_VIEW_MOVIES_EXCEPTION)
  private PayPerViewMoviesExceptionEnum payPerViewMoviesException;

  public static final String SERIALIZED_NAME_PRIVATE_BATHROOM = "privateBathroom";
  @SerializedName(SERIALIZED_NAME_PRIVATE_BATHROOM)
  private Boolean privateBathroom;

  /**
   * Private bathroom exception.
   */
  @JsonAdapter(PrivateBathroomExceptionEnum.Adapter.class)
  public enum PrivateBathroomExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    PrivateBathroomExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivateBathroomExceptionEnum fromValue(String value) {
      for (PrivateBathroomExceptionEnum b : PrivateBathroomExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrivateBathroomExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivateBathroomExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivateBathroomExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrivateBathroomExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PrivateBathroomExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRIVATE_BATHROOM_EXCEPTION = "privateBathroomException";
  @SerializedName(SERIALIZED_NAME_PRIVATE_BATHROOM_EXCEPTION)
  private PrivateBathroomExceptionEnum privateBathroomException;

  public static final String SERIALIZED_NAME_SHOWER = "shower";
  @SerializedName(SERIALIZED_NAME_SHOWER)
  private Boolean shower;

  /**
   * Shower exception.
   */
  @JsonAdapter(ShowerExceptionEnum.Adapter.class)
  public enum ShowerExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ShowerExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShowerExceptionEnum fromValue(String value) {
      for (ShowerExceptionEnum b : ShowerExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShowerExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShowerExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShowerExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShowerExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShowerExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHOWER_EXCEPTION = "showerException";
  @SerializedName(SERIALIZED_NAME_SHOWER_EXCEPTION)
  private ShowerExceptionEnum showerException;

  public static final String SERIALIZED_NAME_TOILET = "toilet";
  @SerializedName(SERIALIZED_NAME_TOILET)
  private Boolean toilet;

  /**
   * Toilet exception.
   */
  @JsonAdapter(ToiletExceptionEnum.Adapter.class)
  public enum ToiletExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ToiletExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ToiletExceptionEnum fromValue(String value) {
      for (ToiletExceptionEnum b : ToiletExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ToiletExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ToiletExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ToiletExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ToiletExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ToiletExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TOILET_EXCEPTION = "toiletException";
  @SerializedName(SERIALIZED_NAME_TOILET_EXCEPTION)
  private ToiletExceptionEnum toiletException;

  public static final String SERIALIZED_NAME_TV = "tv";
  @SerializedName(SERIALIZED_NAME_TV)
  private Boolean tv;

  public static final String SERIALIZED_NAME_TV_CASTING = "tvCasting";
  @SerializedName(SERIALIZED_NAME_TV_CASTING)
  private Boolean tvCasting;

  /**
   * TV exception.
   */
  @JsonAdapter(TvCastingExceptionEnum.Adapter.class)
  public enum TvCastingExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    TvCastingExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TvCastingExceptionEnum fromValue(String value) {
      for (TvCastingExceptionEnum b : TvCastingExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TvCastingExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TvCastingExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TvCastingExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TvCastingExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TvCastingExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TV_CASTING_EXCEPTION = "tvCastingException";
  @SerializedName(SERIALIZED_NAME_TV_CASTING_EXCEPTION)
  private TvCastingExceptionEnum tvCastingException;

  /**
   * TV exception.
   */
  @JsonAdapter(TvExceptionEnum.Adapter.class)
  public enum TvExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    TvExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TvExceptionEnum fromValue(String value) {
      for (TvExceptionEnum b : TvExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TvExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TvExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TvExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TvExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TvExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TV_EXCEPTION = "tvException";
  @SerializedName(SERIALIZED_NAME_TV_EXCEPTION)
  private TvExceptionEnum tvException;

  public static final String SERIALIZED_NAME_TV_STREAMING = "tvStreaming";
  @SerializedName(SERIALIZED_NAME_TV_STREAMING)
  private Boolean tvStreaming;

  /**
   * TV streaming exception.
   */
  @JsonAdapter(TvStreamingExceptionEnum.Adapter.class)
  public enum TvStreamingExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    TvStreamingExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TvStreamingExceptionEnum fromValue(String value) {
      for (TvStreamingExceptionEnum b : TvStreamingExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TvStreamingExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TvStreamingExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TvStreamingExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TvStreamingExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TvStreamingExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TV_STREAMING_EXCEPTION = "tvStreamingException";
  @SerializedName(SERIALIZED_NAME_TV_STREAMING_EXCEPTION)
  private TvStreamingExceptionEnum tvStreamingException;

  public static final String SERIALIZED_NAME_UNIVERSAL_POWER_ADAPTERS = "universalPowerAdapters";
  @SerializedName(SERIALIZED_NAME_UNIVERSAL_POWER_ADAPTERS)
  private Boolean universalPowerAdapters;

  /**
   * Universal power adapters exception.
   */
  @JsonAdapter(UniversalPowerAdaptersExceptionEnum.Adapter.class)
  public enum UniversalPowerAdaptersExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    UniversalPowerAdaptersExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UniversalPowerAdaptersExceptionEnum fromValue(String value) {
      for (UniversalPowerAdaptersExceptionEnum b : UniversalPowerAdaptersExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UniversalPowerAdaptersExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UniversalPowerAdaptersExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UniversalPowerAdaptersExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UniversalPowerAdaptersExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UniversalPowerAdaptersExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNIVERSAL_POWER_ADAPTERS_EXCEPTION = "universalPowerAdaptersException";
  @SerializedName(SERIALIZED_NAME_UNIVERSAL_POWER_ADAPTERS_EXCEPTION)
  private UniversalPowerAdaptersExceptionEnum universalPowerAdaptersException;

  public static final String SERIALIZED_NAME_WASHER = "washer";
  @SerializedName(SERIALIZED_NAME_WASHER)
  private Boolean washer;

  /**
   * Washer exception.
   */
  @JsonAdapter(WasherExceptionEnum.Adapter.class)
  public enum WasherExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    WasherExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WasherExceptionEnum fromValue(String value) {
      for (WasherExceptionEnum b : WasherExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WasherExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WasherExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WasherExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WasherExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WasherExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WASHER_EXCEPTION = "washerException";
  @SerializedName(SERIALIZED_NAME_WASHER_EXCEPTION)
  private WasherExceptionEnum washerException;

  public LivingAreaFeatures() {
  }

  public LivingAreaFeatures airConditioning(Boolean airConditioning) {
    this.airConditioning = airConditioning;
    return this;
  }

  /**
   * Air conditioning. An electrical machine used to cool the temperature of the guestroom.
   * @return airConditioning
   */
  @javax.annotation.Nullable
  public Boolean getAirConditioning() {
    return airConditioning;
  }

  public void setAirConditioning(Boolean airConditioning) {
    this.airConditioning = airConditioning;
  }


  public LivingAreaFeatures airConditioningException(AirConditioningExceptionEnum airConditioningException) {
    this.airConditioningException = airConditioningException;
    return this;
  }

  /**
   * Air conditioning exception.
   * @return airConditioningException
   */
  @javax.annotation.Nullable
  public AirConditioningExceptionEnum getAirConditioningException() {
    return airConditioningException;
  }

  public void setAirConditioningException(AirConditioningExceptionEnum airConditioningException) {
    this.airConditioningException = airConditioningException;
  }


  public LivingAreaFeatures bathtub(Boolean bathtub) {
    this.bathtub = bathtub;
    return this;
  }

  /**
   * Bathtub. A fixed plumbing feature set on the floor and consisting of a large container that accommodates the body of an adult for the purpose of seated bathing. Includes knobs or fixtures to control the temperature of the water, a faucet through which the water flows, and a drain that can be closed for filling and opened for draining.
   * @return bathtub
   */
  @javax.annotation.Nullable
  public Boolean getBathtub() {
    return bathtub;
  }

  public void setBathtub(Boolean bathtub) {
    this.bathtub = bathtub;
  }


  public LivingAreaFeatures bathtubException(BathtubExceptionEnum bathtubException) {
    this.bathtubException = bathtubException;
    return this;
  }

  /**
   * Bathtub exception.
   * @return bathtubException
   */
  @javax.annotation.Nullable
  public BathtubExceptionEnum getBathtubException() {
    return bathtubException;
  }

  public void setBathtubException(BathtubExceptionEnum bathtubException) {
    this.bathtubException = bathtubException;
  }


  public LivingAreaFeatures bidet(Boolean bidet) {
    this.bidet = bidet;
    return this;
  }

  /**
   * Bidet. A plumbing fixture attached to a toilet or a low, fixed sink designed for the purpose of washing after toilet use.
   * @return bidet
   */
  @javax.annotation.Nullable
  public Boolean getBidet() {
    return bidet;
  }

  public void setBidet(Boolean bidet) {
    this.bidet = bidet;
  }


  public LivingAreaFeatures bidetException(BidetExceptionEnum bidetException) {
    this.bidetException = bidetException;
    return this;
  }

  /**
   * Bidet exception.
   * @return bidetException
   */
  @javax.annotation.Nullable
  public BidetExceptionEnum getBidetException() {
    return bidetException;
  }

  public void setBidetException(BidetExceptionEnum bidetException) {
    this.bidetException = bidetException;
  }


  public LivingAreaFeatures dryer(Boolean dryer) {
    this.dryer = dryer;
    return this;
  }

  /**
   * Dryer. An electrical machine designed to dry clothing.
   * @return dryer
   */
  @javax.annotation.Nullable
  public Boolean getDryer() {
    return dryer;
  }

  public void setDryer(Boolean dryer) {
    this.dryer = dryer;
  }


  public LivingAreaFeatures dryerException(DryerExceptionEnum dryerException) {
    this.dryerException = dryerException;
    return this;
  }

  /**
   * Dryer exception.
   * @return dryerException
   */
  @javax.annotation.Nullable
  public DryerExceptionEnum getDryerException() {
    return dryerException;
  }

  public void setDryerException(DryerExceptionEnum dryerException) {
    this.dryerException = dryerException;
  }


  public LivingAreaFeatures electronicRoomKey(Boolean electronicRoomKey) {
    this.electronicRoomKey = electronicRoomKey;
    return this;
  }

  /**
   * Electronic room key. A card coded by the check-in computer that is read by the lock on the hotel guestroom door to allow for entry.
   * @return electronicRoomKey
   */
  @javax.annotation.Nullable
  public Boolean getElectronicRoomKey() {
    return electronicRoomKey;
  }

  public void setElectronicRoomKey(Boolean electronicRoomKey) {
    this.electronicRoomKey = electronicRoomKey;
  }


  public LivingAreaFeatures electronicRoomKeyException(ElectronicRoomKeyExceptionEnum electronicRoomKeyException) {
    this.electronicRoomKeyException = electronicRoomKeyException;
    return this;
  }

  /**
   * Electronic room key exception.
   * @return electronicRoomKeyException
   */
  @javax.annotation.Nullable
  public ElectronicRoomKeyExceptionEnum getElectronicRoomKeyException() {
    return electronicRoomKeyException;
  }

  public void setElectronicRoomKeyException(ElectronicRoomKeyExceptionEnum electronicRoomKeyException) {
    this.electronicRoomKeyException = electronicRoomKeyException;
  }


  public LivingAreaFeatures fireplace(Boolean fireplace) {
    this.fireplace = fireplace;
    return this;
  }

  /**
   * Fireplace. A framed opening (aka hearth) at the base of a chimney in which logs or an electrical fire feature are burned to provide a relaxing ambiance or to heat the room. Often made of bricks or stone.
   * @return fireplace
   */
  @javax.annotation.Nullable
  public Boolean getFireplace() {
    return fireplace;
  }

  public void setFireplace(Boolean fireplace) {
    this.fireplace = fireplace;
  }


  public LivingAreaFeatures fireplaceException(FireplaceExceptionEnum fireplaceException) {
    this.fireplaceException = fireplaceException;
    return this;
  }

  /**
   * Fireplace exception.
   * @return fireplaceException
   */
  @javax.annotation.Nullable
  public FireplaceExceptionEnum getFireplaceException() {
    return fireplaceException;
  }

  public void setFireplaceException(FireplaceExceptionEnum fireplaceException) {
    this.fireplaceException = fireplaceException;
  }


  public LivingAreaFeatures hairdryer(Boolean hairdryer) {
    this.hairdryer = hairdryer;
    return this;
  }

  /**
   * Hairdryer. A handheld electric appliance that blows temperature-controlled air for the purpose of drying wet hair. Can be mounted to a bathroom wall or a freestanding device stored in the guestroom&#39;s bathroom or closet.
   * @return hairdryer
   */
  @javax.annotation.Nullable
  public Boolean getHairdryer() {
    return hairdryer;
  }

  public void setHairdryer(Boolean hairdryer) {
    this.hairdryer = hairdryer;
  }


  public LivingAreaFeatures hairdryerException(HairdryerExceptionEnum hairdryerException) {
    this.hairdryerException = hairdryerException;
    return this;
  }

  /**
   * Hairdryer exception.
   * @return hairdryerException
   */
  @javax.annotation.Nullable
  public HairdryerExceptionEnum getHairdryerException() {
    return hairdryerException;
  }

  public void setHairdryerException(HairdryerExceptionEnum hairdryerException) {
    this.hairdryerException = hairdryerException;
  }


  public LivingAreaFeatures heating(Boolean heating) {
    this.heating = heating;
    return this;
  }

  /**
   * Heating. An electrical machine used to warm the temperature of the guestroom.
   * @return heating
   */
  @javax.annotation.Nullable
  public Boolean getHeating() {
    return heating;
  }

  public void setHeating(Boolean heating) {
    this.heating = heating;
  }


  public LivingAreaFeatures heatingException(HeatingExceptionEnum heatingException) {
    this.heatingException = heatingException;
    return this;
  }

  /**
   * Heating exception.
   * @return heatingException
   */
  @javax.annotation.Nullable
  public HeatingExceptionEnum getHeatingException() {
    return heatingException;
  }

  public void setHeatingException(HeatingExceptionEnum heatingException) {
    this.heatingException = heatingException;
  }


  public LivingAreaFeatures inunitSafe(Boolean inunitSafe) {
    this.inunitSafe = inunitSafe;
    return this;
  }

  /**
   * In-unit safe. A strong fireproof cabinet with a programmable lock, used for the protected storage of valuables in a guestroom. Often built into a closet.
   * @return inunitSafe
   */
  @javax.annotation.Nullable
  public Boolean getInunitSafe() {
    return inunitSafe;
  }

  public void setInunitSafe(Boolean inunitSafe) {
    this.inunitSafe = inunitSafe;
  }


  public LivingAreaFeatures inunitSafeException(InunitSafeExceptionEnum inunitSafeException) {
    this.inunitSafeException = inunitSafeException;
    return this;
  }

  /**
   * In-unit safe exception.
   * @return inunitSafeException
   */
  @javax.annotation.Nullable
  public InunitSafeExceptionEnum getInunitSafeException() {
    return inunitSafeException;
  }

  public void setInunitSafeException(InunitSafeExceptionEnum inunitSafeException) {
    this.inunitSafeException = inunitSafeException;
  }


  public LivingAreaFeatures inunitWifiAvailable(Boolean inunitWifiAvailable) {
    this.inunitWifiAvailable = inunitWifiAvailable;
    return this;
  }

  /**
   * In-unit Wifi available. Guests can wirelessly connect to the Internet in the guestroom. Can be free or for a fee.
   * @return inunitWifiAvailable
   */
  @javax.annotation.Nullable
  public Boolean getInunitWifiAvailable() {
    return inunitWifiAvailable;
  }

  public void setInunitWifiAvailable(Boolean inunitWifiAvailable) {
    this.inunitWifiAvailable = inunitWifiAvailable;
  }


  public LivingAreaFeatures inunitWifiAvailableException(InunitWifiAvailableExceptionEnum inunitWifiAvailableException) {
    this.inunitWifiAvailableException = inunitWifiAvailableException;
    return this;
  }

  /**
   * In-unit Wifi available exception.
   * @return inunitWifiAvailableException
   */
  @javax.annotation.Nullable
  public InunitWifiAvailableExceptionEnum getInunitWifiAvailableException() {
    return inunitWifiAvailableException;
  }

  public void setInunitWifiAvailableException(InunitWifiAvailableExceptionEnum inunitWifiAvailableException) {
    this.inunitWifiAvailableException = inunitWifiAvailableException;
  }


  public LivingAreaFeatures ironingEquipment(Boolean ironingEquipment) {
    this.ironingEquipment = ironingEquipment;
    return this;
  }

  /**
   * Ironing equipment. A device, usually with a flat metal base, that is heated to smooth, finish, or press clothes and a flat, padded, cloth-covered surface on which the clothes are worked.
   * @return ironingEquipment
   */
  @javax.annotation.Nullable
  public Boolean getIroningEquipment() {
    return ironingEquipment;
  }

  public void setIroningEquipment(Boolean ironingEquipment) {
    this.ironingEquipment = ironingEquipment;
  }


  public LivingAreaFeatures ironingEquipmentException(IroningEquipmentExceptionEnum ironingEquipmentException) {
    this.ironingEquipmentException = ironingEquipmentException;
    return this;
  }

  /**
   * Ironing equipment exception.
   * @return ironingEquipmentException
   */
  @javax.annotation.Nullable
  public IroningEquipmentExceptionEnum getIroningEquipmentException() {
    return ironingEquipmentException;
  }

  public void setIroningEquipmentException(IroningEquipmentExceptionEnum ironingEquipmentException) {
    this.ironingEquipmentException = ironingEquipmentException;
  }


  public LivingAreaFeatures payPerViewMovies(Boolean payPerViewMovies) {
    this.payPerViewMovies = payPerViewMovies;
    return this;
  }

  /**
   * Pay per view movies. Televisions with channels that offer films that can be viewed for a fee, and have an interface to allow the viewer to accept the terms and approve payment.
   * @return payPerViewMovies
   */
  @javax.annotation.Nullable
  public Boolean getPayPerViewMovies() {
    return payPerViewMovies;
  }

  public void setPayPerViewMovies(Boolean payPerViewMovies) {
    this.payPerViewMovies = payPerViewMovies;
  }


  public LivingAreaFeatures payPerViewMoviesException(PayPerViewMoviesExceptionEnum payPerViewMoviesException) {
    this.payPerViewMoviesException = payPerViewMoviesException;
    return this;
  }

  /**
   * Pay per view movies exception.
   * @return payPerViewMoviesException
   */
  @javax.annotation.Nullable
  public PayPerViewMoviesExceptionEnum getPayPerViewMoviesException() {
    return payPerViewMoviesException;
  }

  public void setPayPerViewMoviesException(PayPerViewMoviesExceptionEnum payPerViewMoviesException) {
    this.payPerViewMoviesException = payPerViewMoviesException;
  }


  public LivingAreaFeatures privateBathroom(Boolean privateBathroom) {
    this.privateBathroom = privateBathroom;
    return this;
  }

  /**
   * Private bathroom. A bathroom designated for the express use of the guests staying in a specific guestroom.
   * @return privateBathroom
   */
  @javax.annotation.Nullable
  public Boolean getPrivateBathroom() {
    return privateBathroom;
  }

  public void setPrivateBathroom(Boolean privateBathroom) {
    this.privateBathroom = privateBathroom;
  }


  public LivingAreaFeatures privateBathroomException(PrivateBathroomExceptionEnum privateBathroomException) {
    this.privateBathroomException = privateBathroomException;
    return this;
  }

  /**
   * Private bathroom exception.
   * @return privateBathroomException
   */
  @javax.annotation.Nullable
  public PrivateBathroomExceptionEnum getPrivateBathroomException() {
    return privateBathroomException;
  }

  public void setPrivateBathroomException(PrivateBathroomExceptionEnum privateBathroomException) {
    this.privateBathroomException = privateBathroomException;
  }


  public LivingAreaFeatures shower(Boolean shower) {
    this.shower = shower;
    return this;
  }

  /**
   * Shower. A fixed plumbing fixture for standing bathing that features a tall spray spout or faucet through which water flows, a knob or knobs that control the water&#39;s temperature, and a drain in the floor.
   * @return shower
   */
  @javax.annotation.Nullable
  public Boolean getShower() {
    return shower;
  }

  public void setShower(Boolean shower) {
    this.shower = shower;
  }


  public LivingAreaFeatures showerException(ShowerExceptionEnum showerException) {
    this.showerException = showerException;
    return this;
  }

  /**
   * Shower exception.
   * @return showerException
   */
  @javax.annotation.Nullable
  public ShowerExceptionEnum getShowerException() {
    return showerException;
  }

  public void setShowerException(ShowerExceptionEnum showerException) {
    this.showerException = showerException;
  }


  public LivingAreaFeatures toilet(Boolean toilet) {
    this.toilet = toilet;
    return this;
  }

  /**
   * Toilet. A fixed bathroom feature connected to a sewer or septic system and consisting of a water-flushed bowl with a seat, as well as a device that elicites the water-flushing action. Used for the process and disposal of human waste.
   * @return toilet
   */
  @javax.annotation.Nullable
  public Boolean getToilet() {
    return toilet;
  }

  public void setToilet(Boolean toilet) {
    this.toilet = toilet;
  }


  public LivingAreaFeatures toiletException(ToiletExceptionEnum toiletException) {
    this.toiletException = toiletException;
    return this;
  }

  /**
   * Toilet exception.
   * @return toiletException
   */
  @javax.annotation.Nullable
  public ToiletExceptionEnum getToiletException() {
    return toiletException;
  }

  public void setToiletException(ToiletExceptionEnum toiletException) {
    this.toiletException = toiletException;
  }


  public LivingAreaFeatures tv(Boolean tv) {
    this.tv = tv;
    return this;
  }

  /**
   * TV. A television is available in the guestroom.
   * @return tv
   */
  @javax.annotation.Nullable
  public Boolean getTv() {
    return tv;
  }

  public void setTv(Boolean tv) {
    this.tv = tv;
  }


  public LivingAreaFeatures tvCasting(Boolean tvCasting) {
    this.tvCasting = tvCasting;
    return this;
  }

  /**
   * TV casting. A television equipped with a device through which the video entertainment accessed on a personal computer, phone or tablet can be wirelessly delivered to and viewed on the guestroom&#39;s television.
   * @return tvCasting
   */
  @javax.annotation.Nullable
  public Boolean getTvCasting() {
    return tvCasting;
  }

  public void setTvCasting(Boolean tvCasting) {
    this.tvCasting = tvCasting;
  }


  public LivingAreaFeatures tvCastingException(TvCastingExceptionEnum tvCastingException) {
    this.tvCastingException = tvCastingException;
    return this;
  }

  /**
   * TV exception.
   * @return tvCastingException
   */
  @javax.annotation.Nullable
  public TvCastingExceptionEnum getTvCastingException() {
    return tvCastingException;
  }

  public void setTvCastingException(TvCastingExceptionEnum tvCastingException) {
    this.tvCastingException = tvCastingException;
  }


  public LivingAreaFeatures tvException(TvExceptionEnum tvException) {
    this.tvException = tvException;
    return this;
  }

  /**
   * TV exception.
   * @return tvException
   */
  @javax.annotation.Nullable
  public TvExceptionEnum getTvException() {
    return tvException;
  }

  public void setTvException(TvExceptionEnum tvException) {
    this.tvException = tvException;
  }


  public LivingAreaFeatures tvStreaming(Boolean tvStreaming) {
    this.tvStreaming = tvStreaming;
    return this;
  }

  /**
   * TV streaming. Televisions that embed a range of web-based apps to allow for watching media from those apps.
   * @return tvStreaming
   */
  @javax.annotation.Nullable
  public Boolean getTvStreaming() {
    return tvStreaming;
  }

  public void setTvStreaming(Boolean tvStreaming) {
    this.tvStreaming = tvStreaming;
  }


  public LivingAreaFeatures tvStreamingException(TvStreamingExceptionEnum tvStreamingException) {
    this.tvStreamingException = tvStreamingException;
    return this;
  }

  /**
   * TV streaming exception.
   * @return tvStreamingException
   */
  @javax.annotation.Nullable
  public TvStreamingExceptionEnum getTvStreamingException() {
    return tvStreamingException;
  }

  public void setTvStreamingException(TvStreamingExceptionEnum tvStreamingException) {
    this.tvStreamingException = tvStreamingException;
  }


  public LivingAreaFeatures universalPowerAdapters(Boolean universalPowerAdapters) {
    this.universalPowerAdapters = universalPowerAdapters;
    return this;
  }

  /**
   * Universal power adapters. A power supply for electronic devices which plugs into a wall for the purpose of converting AC to a single DC voltage. Also know as AC adapter or charger.
   * @return universalPowerAdapters
   */
  @javax.annotation.Nullable
  public Boolean getUniversalPowerAdapters() {
    return universalPowerAdapters;
  }

  public void setUniversalPowerAdapters(Boolean universalPowerAdapters) {
    this.universalPowerAdapters = universalPowerAdapters;
  }


  public LivingAreaFeatures universalPowerAdaptersException(UniversalPowerAdaptersExceptionEnum universalPowerAdaptersException) {
    this.universalPowerAdaptersException = universalPowerAdaptersException;
    return this;
  }

  /**
   * Universal power adapters exception.
   * @return universalPowerAdaptersException
   */
  @javax.annotation.Nullable
  public UniversalPowerAdaptersExceptionEnum getUniversalPowerAdaptersException() {
    return universalPowerAdaptersException;
  }

  public void setUniversalPowerAdaptersException(UniversalPowerAdaptersExceptionEnum universalPowerAdaptersException) {
    this.universalPowerAdaptersException = universalPowerAdaptersException;
  }


  public LivingAreaFeatures washer(Boolean washer) {
    this.washer = washer;
    return this;
  }

  /**
   * Washer. An electrical machine connected to a running water source designed to launder clothing.
   * @return washer
   */
  @javax.annotation.Nullable
  public Boolean getWasher() {
    return washer;
  }

  public void setWasher(Boolean washer) {
    this.washer = washer;
  }


  public LivingAreaFeatures washerException(WasherExceptionEnum washerException) {
    this.washerException = washerException;
    return this;
  }

  /**
   * Washer exception.
   * @return washerException
   */
  @javax.annotation.Nullable
  public WasherExceptionEnum getWasherException() {
    return washerException;
  }

  public void setWasherException(WasherExceptionEnum washerException) {
    this.washerException = washerException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LivingAreaFeatures livingAreaFeatures = (LivingAreaFeatures) o;
    return Objects.equals(this.airConditioning, livingAreaFeatures.airConditioning) &&
        Objects.equals(this.airConditioningException, livingAreaFeatures.airConditioningException) &&
        Objects.equals(this.bathtub, livingAreaFeatures.bathtub) &&
        Objects.equals(this.bathtubException, livingAreaFeatures.bathtubException) &&
        Objects.equals(this.bidet, livingAreaFeatures.bidet) &&
        Objects.equals(this.bidetException, livingAreaFeatures.bidetException) &&
        Objects.equals(this.dryer, livingAreaFeatures.dryer) &&
        Objects.equals(this.dryerException, livingAreaFeatures.dryerException) &&
        Objects.equals(this.electronicRoomKey, livingAreaFeatures.electronicRoomKey) &&
        Objects.equals(this.electronicRoomKeyException, livingAreaFeatures.electronicRoomKeyException) &&
        Objects.equals(this.fireplace, livingAreaFeatures.fireplace) &&
        Objects.equals(this.fireplaceException, livingAreaFeatures.fireplaceException) &&
        Objects.equals(this.hairdryer, livingAreaFeatures.hairdryer) &&
        Objects.equals(this.hairdryerException, livingAreaFeatures.hairdryerException) &&
        Objects.equals(this.heating, livingAreaFeatures.heating) &&
        Objects.equals(this.heatingException, livingAreaFeatures.heatingException) &&
        Objects.equals(this.inunitSafe, livingAreaFeatures.inunitSafe) &&
        Objects.equals(this.inunitSafeException, livingAreaFeatures.inunitSafeException) &&
        Objects.equals(this.inunitWifiAvailable, livingAreaFeatures.inunitWifiAvailable) &&
        Objects.equals(this.inunitWifiAvailableException, livingAreaFeatures.inunitWifiAvailableException) &&
        Objects.equals(this.ironingEquipment, livingAreaFeatures.ironingEquipment) &&
        Objects.equals(this.ironingEquipmentException, livingAreaFeatures.ironingEquipmentException) &&
        Objects.equals(this.payPerViewMovies, livingAreaFeatures.payPerViewMovies) &&
        Objects.equals(this.payPerViewMoviesException, livingAreaFeatures.payPerViewMoviesException) &&
        Objects.equals(this.privateBathroom, livingAreaFeatures.privateBathroom) &&
        Objects.equals(this.privateBathroomException, livingAreaFeatures.privateBathroomException) &&
        Objects.equals(this.shower, livingAreaFeatures.shower) &&
        Objects.equals(this.showerException, livingAreaFeatures.showerException) &&
        Objects.equals(this.toilet, livingAreaFeatures.toilet) &&
        Objects.equals(this.toiletException, livingAreaFeatures.toiletException) &&
        Objects.equals(this.tv, livingAreaFeatures.tv) &&
        Objects.equals(this.tvCasting, livingAreaFeatures.tvCasting) &&
        Objects.equals(this.tvCastingException, livingAreaFeatures.tvCastingException) &&
        Objects.equals(this.tvException, livingAreaFeatures.tvException) &&
        Objects.equals(this.tvStreaming, livingAreaFeatures.tvStreaming) &&
        Objects.equals(this.tvStreamingException, livingAreaFeatures.tvStreamingException) &&
        Objects.equals(this.universalPowerAdapters, livingAreaFeatures.universalPowerAdapters) &&
        Objects.equals(this.universalPowerAdaptersException, livingAreaFeatures.universalPowerAdaptersException) &&
        Objects.equals(this.washer, livingAreaFeatures.washer) &&
        Objects.equals(this.washerException, livingAreaFeatures.washerException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(airConditioning, airConditioningException, bathtub, bathtubException, bidet, bidetException, dryer, dryerException, electronicRoomKey, electronicRoomKeyException, fireplace, fireplaceException, hairdryer, hairdryerException, heating, heatingException, inunitSafe, inunitSafeException, inunitWifiAvailable, inunitWifiAvailableException, ironingEquipment, ironingEquipmentException, payPerViewMovies, payPerViewMoviesException, privateBathroom, privateBathroomException, shower, showerException, toilet, toiletException, tv, tvCasting, tvCastingException, tvException, tvStreaming, tvStreamingException, universalPowerAdapters, universalPowerAdaptersException, washer, washerException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LivingAreaFeatures {\n");
    sb.append("    airConditioning: ").append(toIndentedString(airConditioning)).append("\n");
    sb.append("    airConditioningException: ").append(toIndentedString(airConditioningException)).append("\n");
    sb.append("    bathtub: ").append(toIndentedString(bathtub)).append("\n");
    sb.append("    bathtubException: ").append(toIndentedString(bathtubException)).append("\n");
    sb.append("    bidet: ").append(toIndentedString(bidet)).append("\n");
    sb.append("    bidetException: ").append(toIndentedString(bidetException)).append("\n");
    sb.append("    dryer: ").append(toIndentedString(dryer)).append("\n");
    sb.append("    dryerException: ").append(toIndentedString(dryerException)).append("\n");
    sb.append("    electronicRoomKey: ").append(toIndentedString(electronicRoomKey)).append("\n");
    sb.append("    electronicRoomKeyException: ").append(toIndentedString(electronicRoomKeyException)).append("\n");
    sb.append("    fireplace: ").append(toIndentedString(fireplace)).append("\n");
    sb.append("    fireplaceException: ").append(toIndentedString(fireplaceException)).append("\n");
    sb.append("    hairdryer: ").append(toIndentedString(hairdryer)).append("\n");
    sb.append("    hairdryerException: ").append(toIndentedString(hairdryerException)).append("\n");
    sb.append("    heating: ").append(toIndentedString(heating)).append("\n");
    sb.append("    heatingException: ").append(toIndentedString(heatingException)).append("\n");
    sb.append("    inunitSafe: ").append(toIndentedString(inunitSafe)).append("\n");
    sb.append("    inunitSafeException: ").append(toIndentedString(inunitSafeException)).append("\n");
    sb.append("    inunitWifiAvailable: ").append(toIndentedString(inunitWifiAvailable)).append("\n");
    sb.append("    inunitWifiAvailableException: ").append(toIndentedString(inunitWifiAvailableException)).append("\n");
    sb.append("    ironingEquipment: ").append(toIndentedString(ironingEquipment)).append("\n");
    sb.append("    ironingEquipmentException: ").append(toIndentedString(ironingEquipmentException)).append("\n");
    sb.append("    payPerViewMovies: ").append(toIndentedString(payPerViewMovies)).append("\n");
    sb.append("    payPerViewMoviesException: ").append(toIndentedString(payPerViewMoviesException)).append("\n");
    sb.append("    privateBathroom: ").append(toIndentedString(privateBathroom)).append("\n");
    sb.append("    privateBathroomException: ").append(toIndentedString(privateBathroomException)).append("\n");
    sb.append("    shower: ").append(toIndentedString(shower)).append("\n");
    sb.append("    showerException: ").append(toIndentedString(showerException)).append("\n");
    sb.append("    toilet: ").append(toIndentedString(toilet)).append("\n");
    sb.append("    toiletException: ").append(toIndentedString(toiletException)).append("\n");
    sb.append("    tv: ").append(toIndentedString(tv)).append("\n");
    sb.append("    tvCasting: ").append(toIndentedString(tvCasting)).append("\n");
    sb.append("    tvCastingException: ").append(toIndentedString(tvCastingException)).append("\n");
    sb.append("    tvException: ").append(toIndentedString(tvException)).append("\n");
    sb.append("    tvStreaming: ").append(toIndentedString(tvStreaming)).append("\n");
    sb.append("    tvStreamingException: ").append(toIndentedString(tvStreamingException)).append("\n");
    sb.append("    universalPowerAdapters: ").append(toIndentedString(universalPowerAdapters)).append("\n");
    sb.append("    universalPowerAdaptersException: ").append(toIndentedString(universalPowerAdaptersException)).append("\n");
    sb.append("    washer: ").append(toIndentedString(washer)).append("\n");
    sb.append("    washerException: ").append(toIndentedString(washerException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("airConditioning");
    openapiFields.add("airConditioningException");
    openapiFields.add("bathtub");
    openapiFields.add("bathtubException");
    openapiFields.add("bidet");
    openapiFields.add("bidetException");
    openapiFields.add("dryer");
    openapiFields.add("dryerException");
    openapiFields.add("electronicRoomKey");
    openapiFields.add("electronicRoomKeyException");
    openapiFields.add("fireplace");
    openapiFields.add("fireplaceException");
    openapiFields.add("hairdryer");
    openapiFields.add("hairdryerException");
    openapiFields.add("heating");
    openapiFields.add("heatingException");
    openapiFields.add("inunitSafe");
    openapiFields.add("inunitSafeException");
    openapiFields.add("inunitWifiAvailable");
    openapiFields.add("inunitWifiAvailableException");
    openapiFields.add("ironingEquipment");
    openapiFields.add("ironingEquipmentException");
    openapiFields.add("payPerViewMovies");
    openapiFields.add("payPerViewMoviesException");
    openapiFields.add("privateBathroom");
    openapiFields.add("privateBathroomException");
    openapiFields.add("shower");
    openapiFields.add("showerException");
    openapiFields.add("toilet");
    openapiFields.add("toiletException");
    openapiFields.add("tv");
    openapiFields.add("tvCasting");
    openapiFields.add("tvCastingException");
    openapiFields.add("tvException");
    openapiFields.add("tvStreaming");
    openapiFields.add("tvStreamingException");
    openapiFields.add("universalPowerAdapters");
    openapiFields.add("universalPowerAdaptersException");
    openapiFields.add("washer");
    openapiFields.add("washerException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LivingAreaFeatures
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LivingAreaFeatures.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LivingAreaFeatures is not found in the empty JSON string", LivingAreaFeatures.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LivingAreaFeatures.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LivingAreaFeatures` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("airConditioningException") != null && !jsonObj.get("airConditioningException").isJsonNull()) && !jsonObj.get("airConditioningException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `airConditioningException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("airConditioningException").toString()));
      }
      // validate the optional field `airConditioningException`
      if (jsonObj.get("airConditioningException") != null && !jsonObj.get("airConditioningException").isJsonNull()) {
        AirConditioningExceptionEnum.validateJsonElement(jsonObj.get("airConditioningException"));
      }
      if ((jsonObj.get("bathtubException") != null && !jsonObj.get("bathtubException").isJsonNull()) && !jsonObj.get("bathtubException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bathtubException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bathtubException").toString()));
      }
      // validate the optional field `bathtubException`
      if (jsonObj.get("bathtubException") != null && !jsonObj.get("bathtubException").isJsonNull()) {
        BathtubExceptionEnum.validateJsonElement(jsonObj.get("bathtubException"));
      }
      if ((jsonObj.get("bidetException") != null && !jsonObj.get("bidetException").isJsonNull()) && !jsonObj.get("bidetException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bidetException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bidetException").toString()));
      }
      // validate the optional field `bidetException`
      if (jsonObj.get("bidetException") != null && !jsonObj.get("bidetException").isJsonNull()) {
        BidetExceptionEnum.validateJsonElement(jsonObj.get("bidetException"));
      }
      if ((jsonObj.get("dryerException") != null && !jsonObj.get("dryerException").isJsonNull()) && !jsonObj.get("dryerException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dryerException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dryerException").toString()));
      }
      // validate the optional field `dryerException`
      if (jsonObj.get("dryerException") != null && !jsonObj.get("dryerException").isJsonNull()) {
        DryerExceptionEnum.validateJsonElement(jsonObj.get("dryerException"));
      }
      if ((jsonObj.get("electronicRoomKeyException") != null && !jsonObj.get("electronicRoomKeyException").isJsonNull()) && !jsonObj.get("electronicRoomKeyException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `electronicRoomKeyException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("electronicRoomKeyException").toString()));
      }
      // validate the optional field `electronicRoomKeyException`
      if (jsonObj.get("electronicRoomKeyException") != null && !jsonObj.get("electronicRoomKeyException").isJsonNull()) {
        ElectronicRoomKeyExceptionEnum.validateJsonElement(jsonObj.get("electronicRoomKeyException"));
      }
      if ((jsonObj.get("fireplaceException") != null && !jsonObj.get("fireplaceException").isJsonNull()) && !jsonObj.get("fireplaceException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fireplaceException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fireplaceException").toString()));
      }
      // validate the optional field `fireplaceException`
      if (jsonObj.get("fireplaceException") != null && !jsonObj.get("fireplaceException").isJsonNull()) {
        FireplaceExceptionEnum.validateJsonElement(jsonObj.get("fireplaceException"));
      }
      if ((jsonObj.get("hairdryerException") != null && !jsonObj.get("hairdryerException").isJsonNull()) && !jsonObj.get("hairdryerException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hairdryerException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hairdryerException").toString()));
      }
      // validate the optional field `hairdryerException`
      if (jsonObj.get("hairdryerException") != null && !jsonObj.get("hairdryerException").isJsonNull()) {
        HairdryerExceptionEnum.validateJsonElement(jsonObj.get("hairdryerException"));
      }
      if ((jsonObj.get("heatingException") != null && !jsonObj.get("heatingException").isJsonNull()) && !jsonObj.get("heatingException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `heatingException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("heatingException").toString()));
      }
      // validate the optional field `heatingException`
      if (jsonObj.get("heatingException") != null && !jsonObj.get("heatingException").isJsonNull()) {
        HeatingExceptionEnum.validateJsonElement(jsonObj.get("heatingException"));
      }
      if ((jsonObj.get("inunitSafeException") != null && !jsonObj.get("inunitSafeException").isJsonNull()) && !jsonObj.get("inunitSafeException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inunitSafeException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inunitSafeException").toString()));
      }
      // validate the optional field `inunitSafeException`
      if (jsonObj.get("inunitSafeException") != null && !jsonObj.get("inunitSafeException").isJsonNull()) {
        InunitSafeExceptionEnum.validateJsonElement(jsonObj.get("inunitSafeException"));
      }
      if ((jsonObj.get("inunitWifiAvailableException") != null && !jsonObj.get("inunitWifiAvailableException").isJsonNull()) && !jsonObj.get("inunitWifiAvailableException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inunitWifiAvailableException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inunitWifiAvailableException").toString()));
      }
      // validate the optional field `inunitWifiAvailableException`
      if (jsonObj.get("inunitWifiAvailableException") != null && !jsonObj.get("inunitWifiAvailableException").isJsonNull()) {
        InunitWifiAvailableExceptionEnum.validateJsonElement(jsonObj.get("inunitWifiAvailableException"));
      }
      if ((jsonObj.get("ironingEquipmentException") != null && !jsonObj.get("ironingEquipmentException").isJsonNull()) && !jsonObj.get("ironingEquipmentException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ironingEquipmentException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ironingEquipmentException").toString()));
      }
      // validate the optional field `ironingEquipmentException`
      if (jsonObj.get("ironingEquipmentException") != null && !jsonObj.get("ironingEquipmentException").isJsonNull()) {
        IroningEquipmentExceptionEnum.validateJsonElement(jsonObj.get("ironingEquipmentException"));
      }
      if ((jsonObj.get("payPerViewMoviesException") != null && !jsonObj.get("payPerViewMoviesException").isJsonNull()) && !jsonObj.get("payPerViewMoviesException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payPerViewMoviesException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payPerViewMoviesException").toString()));
      }
      // validate the optional field `payPerViewMoviesException`
      if (jsonObj.get("payPerViewMoviesException") != null && !jsonObj.get("payPerViewMoviesException").isJsonNull()) {
        PayPerViewMoviesExceptionEnum.validateJsonElement(jsonObj.get("payPerViewMoviesException"));
      }
      if ((jsonObj.get("privateBathroomException") != null && !jsonObj.get("privateBathroomException").isJsonNull()) && !jsonObj.get("privateBathroomException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateBathroomException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateBathroomException").toString()));
      }
      // validate the optional field `privateBathroomException`
      if (jsonObj.get("privateBathroomException") != null && !jsonObj.get("privateBathroomException").isJsonNull()) {
        PrivateBathroomExceptionEnum.validateJsonElement(jsonObj.get("privateBathroomException"));
      }
      if ((jsonObj.get("showerException") != null && !jsonObj.get("showerException").isJsonNull()) && !jsonObj.get("showerException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `showerException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("showerException").toString()));
      }
      // validate the optional field `showerException`
      if (jsonObj.get("showerException") != null && !jsonObj.get("showerException").isJsonNull()) {
        ShowerExceptionEnum.validateJsonElement(jsonObj.get("showerException"));
      }
      if ((jsonObj.get("toiletException") != null && !jsonObj.get("toiletException").isJsonNull()) && !jsonObj.get("toiletException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toiletException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toiletException").toString()));
      }
      // validate the optional field `toiletException`
      if (jsonObj.get("toiletException") != null && !jsonObj.get("toiletException").isJsonNull()) {
        ToiletExceptionEnum.validateJsonElement(jsonObj.get("toiletException"));
      }
      if ((jsonObj.get("tvCastingException") != null && !jsonObj.get("tvCastingException").isJsonNull()) && !jsonObj.get("tvCastingException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tvCastingException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tvCastingException").toString()));
      }
      // validate the optional field `tvCastingException`
      if (jsonObj.get("tvCastingException") != null && !jsonObj.get("tvCastingException").isJsonNull()) {
        TvCastingExceptionEnum.validateJsonElement(jsonObj.get("tvCastingException"));
      }
      if ((jsonObj.get("tvException") != null && !jsonObj.get("tvException").isJsonNull()) && !jsonObj.get("tvException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tvException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tvException").toString()));
      }
      // validate the optional field `tvException`
      if (jsonObj.get("tvException") != null && !jsonObj.get("tvException").isJsonNull()) {
        TvExceptionEnum.validateJsonElement(jsonObj.get("tvException"));
      }
      if ((jsonObj.get("tvStreamingException") != null && !jsonObj.get("tvStreamingException").isJsonNull()) && !jsonObj.get("tvStreamingException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tvStreamingException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tvStreamingException").toString()));
      }
      // validate the optional field `tvStreamingException`
      if (jsonObj.get("tvStreamingException") != null && !jsonObj.get("tvStreamingException").isJsonNull()) {
        TvStreamingExceptionEnum.validateJsonElement(jsonObj.get("tvStreamingException"));
      }
      if ((jsonObj.get("universalPowerAdaptersException") != null && !jsonObj.get("universalPowerAdaptersException").isJsonNull()) && !jsonObj.get("universalPowerAdaptersException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `universalPowerAdaptersException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("universalPowerAdaptersException").toString()));
      }
      // validate the optional field `universalPowerAdaptersException`
      if (jsonObj.get("universalPowerAdaptersException") != null && !jsonObj.get("universalPowerAdaptersException").isJsonNull()) {
        UniversalPowerAdaptersExceptionEnum.validateJsonElement(jsonObj.get("universalPowerAdaptersException"));
      }
      if ((jsonObj.get("washerException") != null && !jsonObj.get("washerException").isJsonNull()) && !jsonObj.get("washerException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `washerException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("washerException").toString()));
      }
      // validate the optional field `washerException`
      if (jsonObj.get("washerException") != null && !jsonObj.get("washerException").isJsonNull()) {
        WasherExceptionEnum.validateJsonElement(jsonObj.get("washerException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LivingAreaFeatures.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LivingAreaFeatures' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LivingAreaFeatures> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LivingAreaFeatures.class));

       return (TypeAdapter<T>) new TypeAdapter<LivingAreaFeatures>() {
           @Override
           public void write(JsonWriter out, LivingAreaFeatures value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LivingAreaFeatures read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LivingAreaFeatures given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LivingAreaFeatures
   * @throws IOException if the JSON string is invalid with respect to LivingAreaFeatures
   */
  public static LivingAreaFeatures fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LivingAreaFeatures.class);
  }

  /**
   * Convert an instance of LivingAreaFeatures to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

