/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LivingArea;
import org.openapitools.client.model.ViewsFromUnit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Features and available amenities in the guest unit.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GuestUnitFeatures {
  public static final String SERIALIZED_NAME_BUNGALOW_OR_VILLA = "bungalowOrVilla";
  @SerializedName(SERIALIZED_NAME_BUNGALOW_OR_VILLA)
  private Boolean bungalowOrVilla;

  /**
   * Bungalow or villa exception.
   */
  @JsonAdapter(BungalowOrVillaExceptionEnum.Adapter.class)
  public enum BungalowOrVillaExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BungalowOrVillaExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BungalowOrVillaExceptionEnum fromValue(String value) {
      for (BungalowOrVillaExceptionEnum b : BungalowOrVillaExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BungalowOrVillaExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BungalowOrVillaExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BungalowOrVillaExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BungalowOrVillaExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BungalowOrVillaExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUNGALOW_OR_VILLA_EXCEPTION = "bungalowOrVillaException";
  @SerializedName(SERIALIZED_NAME_BUNGALOW_OR_VILLA_EXCEPTION)
  private BungalowOrVillaExceptionEnum bungalowOrVillaException;

  public static final String SERIALIZED_NAME_CONNECTING_UNIT_AVAILABLE = "connectingUnitAvailable";
  @SerializedName(SERIALIZED_NAME_CONNECTING_UNIT_AVAILABLE)
  private Boolean connectingUnitAvailable;

  /**
   * Connecting unit available exception.
   */
  @JsonAdapter(ConnectingUnitAvailableExceptionEnum.Adapter.class)
  public enum ConnectingUnitAvailableExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ConnectingUnitAvailableExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectingUnitAvailableExceptionEnum fromValue(String value) {
      for (ConnectingUnitAvailableExceptionEnum b : ConnectingUnitAvailableExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectingUnitAvailableExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectingUnitAvailableExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectingUnitAvailableExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectingUnitAvailableExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectingUnitAvailableExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTING_UNIT_AVAILABLE_EXCEPTION = "connectingUnitAvailableException";
  @SerializedName(SERIALIZED_NAME_CONNECTING_UNIT_AVAILABLE_EXCEPTION)
  private ConnectingUnitAvailableExceptionEnum connectingUnitAvailableException;

  public static final String SERIALIZED_NAME_EXECUTIVE_FLOOR = "executiveFloor";
  @SerializedName(SERIALIZED_NAME_EXECUTIVE_FLOOR)
  private Boolean executiveFloor;

  /**
   * Executive floor exception.
   */
  @JsonAdapter(ExecutiveFloorExceptionEnum.Adapter.class)
  public enum ExecutiveFloorExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ExecutiveFloorExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExecutiveFloorExceptionEnum fromValue(String value) {
      for (ExecutiveFloorExceptionEnum b : ExecutiveFloorExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExecutiveFloorExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExecutiveFloorExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExecutiveFloorExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExecutiveFloorExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExecutiveFloorExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXECUTIVE_FLOOR_EXCEPTION = "executiveFloorException";
  @SerializedName(SERIALIZED_NAME_EXECUTIVE_FLOOR_EXCEPTION)
  private ExecutiveFloorExceptionEnum executiveFloorException;

  public static final String SERIALIZED_NAME_MAX_ADULT_OCCUPANTS_COUNT = "maxAdultOccupantsCount";
  @SerializedName(SERIALIZED_NAME_MAX_ADULT_OCCUPANTS_COUNT)
  private Integer maxAdultOccupantsCount;

  /**
   * Max adult occupants count exception.
   */
  @JsonAdapter(MaxAdultOccupantsCountExceptionEnum.Adapter.class)
  public enum MaxAdultOccupantsCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    MaxAdultOccupantsCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaxAdultOccupantsCountExceptionEnum fromValue(String value) {
      for (MaxAdultOccupantsCountExceptionEnum b : MaxAdultOccupantsCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaxAdultOccupantsCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaxAdultOccupantsCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaxAdultOccupantsCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaxAdultOccupantsCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MaxAdultOccupantsCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAX_ADULT_OCCUPANTS_COUNT_EXCEPTION = "maxAdultOccupantsCountException";
  @SerializedName(SERIALIZED_NAME_MAX_ADULT_OCCUPANTS_COUNT_EXCEPTION)
  private MaxAdultOccupantsCountExceptionEnum maxAdultOccupantsCountException;

  public static final String SERIALIZED_NAME_MAX_CHILD_OCCUPANTS_COUNT = "maxChildOccupantsCount";
  @SerializedName(SERIALIZED_NAME_MAX_CHILD_OCCUPANTS_COUNT)
  private Integer maxChildOccupantsCount;

  /**
   * Max child occupants count exception.
   */
  @JsonAdapter(MaxChildOccupantsCountExceptionEnum.Adapter.class)
  public enum MaxChildOccupantsCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    MaxChildOccupantsCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaxChildOccupantsCountExceptionEnum fromValue(String value) {
      for (MaxChildOccupantsCountExceptionEnum b : MaxChildOccupantsCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaxChildOccupantsCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaxChildOccupantsCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaxChildOccupantsCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaxChildOccupantsCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MaxChildOccupantsCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAX_CHILD_OCCUPANTS_COUNT_EXCEPTION = "maxChildOccupantsCountException";
  @SerializedName(SERIALIZED_NAME_MAX_CHILD_OCCUPANTS_COUNT_EXCEPTION)
  private MaxChildOccupantsCountExceptionEnum maxChildOccupantsCountException;

  public static final String SERIALIZED_NAME_MAX_OCCUPANTS_COUNT = "maxOccupantsCount";
  @SerializedName(SERIALIZED_NAME_MAX_OCCUPANTS_COUNT)
  private Integer maxOccupantsCount;

  /**
   * Max occupants count exception.
   */
  @JsonAdapter(MaxOccupantsCountExceptionEnum.Adapter.class)
  public enum MaxOccupantsCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    MaxOccupantsCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaxOccupantsCountExceptionEnum fromValue(String value) {
      for (MaxOccupantsCountExceptionEnum b : MaxOccupantsCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaxOccupantsCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaxOccupantsCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaxOccupantsCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaxOccupantsCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MaxOccupantsCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAX_OCCUPANTS_COUNT_EXCEPTION = "maxOccupantsCountException";
  @SerializedName(SERIALIZED_NAME_MAX_OCCUPANTS_COUNT_EXCEPTION)
  private MaxOccupantsCountExceptionEnum maxOccupantsCountException;

  public static final String SERIALIZED_NAME_PRIVATE_HOME = "privateHome";
  @SerializedName(SERIALIZED_NAME_PRIVATE_HOME)
  private Boolean privateHome;

  /**
   * Private home exception.
   */
  @JsonAdapter(PrivateHomeExceptionEnum.Adapter.class)
  public enum PrivateHomeExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    PrivateHomeExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivateHomeExceptionEnum fromValue(String value) {
      for (PrivateHomeExceptionEnum b : PrivateHomeExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrivateHomeExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivateHomeExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivateHomeExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrivateHomeExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PrivateHomeExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRIVATE_HOME_EXCEPTION = "privateHomeException";
  @SerializedName(SERIALIZED_NAME_PRIVATE_HOME_EXCEPTION)
  private PrivateHomeExceptionEnum privateHomeException;

  public static final String SERIALIZED_NAME_SUITE = "suite";
  @SerializedName(SERIALIZED_NAME_SUITE)
  private Boolean suite;

  /**
   * Suite exception.
   */
  @JsonAdapter(SuiteExceptionEnum.Adapter.class)
  public enum SuiteExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SuiteExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuiteExceptionEnum fromValue(String value) {
      for (SuiteExceptionEnum b : SuiteExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuiteExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuiteExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuiteExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuiteExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SuiteExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUITE_EXCEPTION = "suiteException";
  @SerializedName(SERIALIZED_NAME_SUITE_EXCEPTION)
  private SuiteExceptionEnum suiteException;

  /**
   * Tier. Classification of the unit based on available features/amenities. A non-standard tier is only permitted if at least one other unit type falls under the standard tier.
   */
  @JsonAdapter(TierEnum.Adapter.class)
  public enum TierEnum {
    UNIT_TIER_UNSPECIFIED("UNIT_TIER_UNSPECIFIED"),
    
    STANDARD_UNIT("STANDARD_UNIT"),
    
    DELUXE_UNIT("DELUXE_UNIT");

    private String value;

    TierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TierEnum fromValue(String value) {
      for (TierEnum b : TierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private TierEnum tier;

  /**
   * Tier exception.
   */
  @JsonAdapter(TierExceptionEnum.Adapter.class)
  public enum TierExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    TierExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TierExceptionEnum fromValue(String value) {
      for (TierExceptionEnum b : TierExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TierExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TierExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TierExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TierExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TierExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIER_EXCEPTION = "tierException";
  @SerializedName(SERIALIZED_NAME_TIER_EXCEPTION)
  private TierExceptionEnum tierException;

  public static final String SERIALIZED_NAME_TOTAL_LIVING_AREAS = "totalLivingAreas";
  @SerializedName(SERIALIZED_NAME_TOTAL_LIVING_AREAS)
  private LivingArea totalLivingAreas;

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private ViewsFromUnit views;

  public GuestUnitFeatures() {
  }

  public GuestUnitFeatures bungalowOrVilla(Boolean bungalowOrVilla) {
    this.bungalowOrVilla = bungalowOrVilla;
    return this;
  }

  /**
   * Bungalow or villa. An independent structure that is part of a hotel or resort that is rented to one party for a vacation stay. The hotel or resort may be completely comprised of bungalows or villas, or they may be one of several guestroom options. Guests in the bungalows or villas most often have the same, if not more, amenities and services offered to guests in other guestroom types.
   * @return bungalowOrVilla
   */
  @javax.annotation.Nullable
  public Boolean getBungalowOrVilla() {
    return bungalowOrVilla;
  }

  public void setBungalowOrVilla(Boolean bungalowOrVilla) {
    this.bungalowOrVilla = bungalowOrVilla;
  }


  public GuestUnitFeatures bungalowOrVillaException(BungalowOrVillaExceptionEnum bungalowOrVillaException) {
    this.bungalowOrVillaException = bungalowOrVillaException;
    return this;
  }

  /**
   * Bungalow or villa exception.
   * @return bungalowOrVillaException
   */
  @javax.annotation.Nullable
  public BungalowOrVillaExceptionEnum getBungalowOrVillaException() {
    return bungalowOrVillaException;
  }

  public void setBungalowOrVillaException(BungalowOrVillaExceptionEnum bungalowOrVillaException) {
    this.bungalowOrVillaException = bungalowOrVillaException;
  }


  public GuestUnitFeatures connectingUnitAvailable(Boolean connectingUnitAvailable) {
    this.connectingUnitAvailable = connectingUnitAvailable;
    return this;
  }

  /**
   * Connecting unit available. A guestroom type that features access to an adjacent guestroom for the purpose of booking both rooms. Most often used by families who need more than one room to accommodate the number of people in their group.
   * @return connectingUnitAvailable
   */
  @javax.annotation.Nullable
  public Boolean getConnectingUnitAvailable() {
    return connectingUnitAvailable;
  }

  public void setConnectingUnitAvailable(Boolean connectingUnitAvailable) {
    this.connectingUnitAvailable = connectingUnitAvailable;
  }


  public GuestUnitFeatures connectingUnitAvailableException(ConnectingUnitAvailableExceptionEnum connectingUnitAvailableException) {
    this.connectingUnitAvailableException = connectingUnitAvailableException;
    return this;
  }

  /**
   * Connecting unit available exception.
   * @return connectingUnitAvailableException
   */
  @javax.annotation.Nullable
  public ConnectingUnitAvailableExceptionEnum getConnectingUnitAvailableException() {
    return connectingUnitAvailableException;
  }

  public void setConnectingUnitAvailableException(ConnectingUnitAvailableExceptionEnum connectingUnitAvailableException) {
    this.connectingUnitAvailableException = connectingUnitAvailableException;
  }


  public GuestUnitFeatures executiveFloor(Boolean executiveFloor) {
    this.executiveFloor = executiveFloor;
    return this;
  }

  /**
   * Executive floor. A floor of the hotel where the guestrooms are only bookable by members of the hotel&#39;s frequent guest membership program. Benefits of this room class include access to a designated lounge which may or may not feature free breakfast, cocktails or other perks specific to members of the program.
   * @return executiveFloor
   */
  @javax.annotation.Nullable
  public Boolean getExecutiveFloor() {
    return executiveFloor;
  }

  public void setExecutiveFloor(Boolean executiveFloor) {
    this.executiveFloor = executiveFloor;
  }


  public GuestUnitFeatures executiveFloorException(ExecutiveFloorExceptionEnum executiveFloorException) {
    this.executiveFloorException = executiveFloorException;
    return this;
  }

  /**
   * Executive floor exception.
   * @return executiveFloorException
   */
  @javax.annotation.Nullable
  public ExecutiveFloorExceptionEnum getExecutiveFloorException() {
    return executiveFloorException;
  }

  public void setExecutiveFloorException(ExecutiveFloorExceptionEnum executiveFloorException) {
    this.executiveFloorException = executiveFloorException;
  }


  public GuestUnitFeatures maxAdultOccupantsCount(Integer maxAdultOccupantsCount) {
    this.maxAdultOccupantsCount = maxAdultOccupantsCount;
    return this;
  }

  /**
   * Max adult occupants count. The total number of adult guests allowed to stay overnight in the guestroom.
   * @return maxAdultOccupantsCount
   */
  @javax.annotation.Nullable
  public Integer getMaxAdultOccupantsCount() {
    return maxAdultOccupantsCount;
  }

  public void setMaxAdultOccupantsCount(Integer maxAdultOccupantsCount) {
    this.maxAdultOccupantsCount = maxAdultOccupantsCount;
  }


  public GuestUnitFeatures maxAdultOccupantsCountException(MaxAdultOccupantsCountExceptionEnum maxAdultOccupantsCountException) {
    this.maxAdultOccupantsCountException = maxAdultOccupantsCountException;
    return this;
  }

  /**
   * Max adult occupants count exception.
   * @return maxAdultOccupantsCountException
   */
  @javax.annotation.Nullable
  public MaxAdultOccupantsCountExceptionEnum getMaxAdultOccupantsCountException() {
    return maxAdultOccupantsCountException;
  }

  public void setMaxAdultOccupantsCountException(MaxAdultOccupantsCountExceptionEnum maxAdultOccupantsCountException) {
    this.maxAdultOccupantsCountException = maxAdultOccupantsCountException;
  }


  public GuestUnitFeatures maxChildOccupantsCount(Integer maxChildOccupantsCount) {
    this.maxChildOccupantsCount = maxChildOccupantsCount;
    return this;
  }

  /**
   * Max child occupants count. The total number of children allowed to stay overnight in the room.
   * @return maxChildOccupantsCount
   */
  @javax.annotation.Nullable
  public Integer getMaxChildOccupantsCount() {
    return maxChildOccupantsCount;
  }

  public void setMaxChildOccupantsCount(Integer maxChildOccupantsCount) {
    this.maxChildOccupantsCount = maxChildOccupantsCount;
  }


  public GuestUnitFeatures maxChildOccupantsCountException(MaxChildOccupantsCountExceptionEnum maxChildOccupantsCountException) {
    this.maxChildOccupantsCountException = maxChildOccupantsCountException;
    return this;
  }

  /**
   * Max child occupants count exception.
   * @return maxChildOccupantsCountException
   */
  @javax.annotation.Nullable
  public MaxChildOccupantsCountExceptionEnum getMaxChildOccupantsCountException() {
    return maxChildOccupantsCountException;
  }

  public void setMaxChildOccupantsCountException(MaxChildOccupantsCountExceptionEnum maxChildOccupantsCountException) {
    this.maxChildOccupantsCountException = maxChildOccupantsCountException;
  }


  public GuestUnitFeatures maxOccupantsCount(Integer maxOccupantsCount) {
    this.maxOccupantsCount = maxOccupantsCount;
    return this;
  }

  /**
   * Max occupants count. The total number of guests allowed to stay overnight in the guestroom.
   * @return maxOccupantsCount
   */
  @javax.annotation.Nullable
  public Integer getMaxOccupantsCount() {
    return maxOccupantsCount;
  }

  public void setMaxOccupantsCount(Integer maxOccupantsCount) {
    this.maxOccupantsCount = maxOccupantsCount;
  }


  public GuestUnitFeatures maxOccupantsCountException(MaxOccupantsCountExceptionEnum maxOccupantsCountException) {
    this.maxOccupantsCountException = maxOccupantsCountException;
    return this;
  }

  /**
   * Max occupants count exception.
   * @return maxOccupantsCountException
   */
  @javax.annotation.Nullable
  public MaxOccupantsCountExceptionEnum getMaxOccupantsCountException() {
    return maxOccupantsCountException;
  }

  public void setMaxOccupantsCountException(MaxOccupantsCountExceptionEnum maxOccupantsCountException) {
    this.maxOccupantsCountException = maxOccupantsCountException;
  }


  public GuestUnitFeatures privateHome(Boolean privateHome) {
    this.privateHome = privateHome;
    return this;
  }

  /**
   * Private home. A privately owned home (house, townhouse, apartment, cabin, bungalow etc) that may or not serve as the owner&#39;s residence, but is rented out in its entirety or by the room(s) to paying guest(s) for vacation stays. Not for lease-based, long-term residency.
   * @return privateHome
   */
  @javax.annotation.Nullable
  public Boolean getPrivateHome() {
    return privateHome;
  }

  public void setPrivateHome(Boolean privateHome) {
    this.privateHome = privateHome;
  }


  public GuestUnitFeatures privateHomeException(PrivateHomeExceptionEnum privateHomeException) {
    this.privateHomeException = privateHomeException;
    return this;
  }

  /**
   * Private home exception.
   * @return privateHomeException
   */
  @javax.annotation.Nullable
  public PrivateHomeExceptionEnum getPrivateHomeException() {
    return privateHomeException;
  }

  public void setPrivateHomeException(PrivateHomeExceptionEnum privateHomeException) {
    this.privateHomeException = privateHomeException;
  }


  public GuestUnitFeatures suite(Boolean suite) {
    this.suite = suite;
    return this;
  }

  /**
   * Suite. A guestroom category that implies both a bedroom area and a separate living area. There may or may not be full walls and doors separating the two areas, but regardless, they are very distinct. Does not mean a couch or chair in a bedroom.
   * @return suite
   */
  @javax.annotation.Nullable
  public Boolean getSuite() {
    return suite;
  }

  public void setSuite(Boolean suite) {
    this.suite = suite;
  }


  public GuestUnitFeatures suiteException(SuiteExceptionEnum suiteException) {
    this.suiteException = suiteException;
    return this;
  }

  /**
   * Suite exception.
   * @return suiteException
   */
  @javax.annotation.Nullable
  public SuiteExceptionEnum getSuiteException() {
    return suiteException;
  }

  public void setSuiteException(SuiteExceptionEnum suiteException) {
    this.suiteException = suiteException;
  }


  public GuestUnitFeatures tier(TierEnum tier) {
    this.tier = tier;
    return this;
  }

  /**
   * Tier. Classification of the unit based on available features/amenities. A non-standard tier is only permitted if at least one other unit type falls under the standard tier.
   * @return tier
   */
  @javax.annotation.Nullable
  public TierEnum getTier() {
    return tier;
  }

  public void setTier(TierEnum tier) {
    this.tier = tier;
  }


  public GuestUnitFeatures tierException(TierExceptionEnum tierException) {
    this.tierException = tierException;
    return this;
  }

  /**
   * Tier exception.
   * @return tierException
   */
  @javax.annotation.Nullable
  public TierExceptionEnum getTierException() {
    return tierException;
  }

  public void setTierException(TierExceptionEnum tierException) {
    this.tierException = tierException;
  }


  public GuestUnitFeatures totalLivingAreas(LivingArea totalLivingAreas) {
    this.totalLivingAreas = totalLivingAreas;
    return this;
  }

  /**
   * Get totalLivingAreas
   * @return totalLivingAreas
   */
  @javax.annotation.Nullable
  public LivingArea getTotalLivingAreas() {
    return totalLivingAreas;
  }

  public void setTotalLivingAreas(LivingArea totalLivingAreas) {
    this.totalLivingAreas = totalLivingAreas;
  }


  public GuestUnitFeatures views(ViewsFromUnit views) {
    this.views = views;
    return this;
  }

  /**
   * Get views
   * @return views
   */
  @javax.annotation.Nullable
  public ViewsFromUnit getViews() {
    return views;
  }

  public void setViews(ViewsFromUnit views) {
    this.views = views;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GuestUnitFeatures guestUnitFeatures = (GuestUnitFeatures) o;
    return Objects.equals(this.bungalowOrVilla, guestUnitFeatures.bungalowOrVilla) &&
        Objects.equals(this.bungalowOrVillaException, guestUnitFeatures.bungalowOrVillaException) &&
        Objects.equals(this.connectingUnitAvailable, guestUnitFeatures.connectingUnitAvailable) &&
        Objects.equals(this.connectingUnitAvailableException, guestUnitFeatures.connectingUnitAvailableException) &&
        Objects.equals(this.executiveFloor, guestUnitFeatures.executiveFloor) &&
        Objects.equals(this.executiveFloorException, guestUnitFeatures.executiveFloorException) &&
        Objects.equals(this.maxAdultOccupantsCount, guestUnitFeatures.maxAdultOccupantsCount) &&
        Objects.equals(this.maxAdultOccupantsCountException, guestUnitFeatures.maxAdultOccupantsCountException) &&
        Objects.equals(this.maxChildOccupantsCount, guestUnitFeatures.maxChildOccupantsCount) &&
        Objects.equals(this.maxChildOccupantsCountException, guestUnitFeatures.maxChildOccupantsCountException) &&
        Objects.equals(this.maxOccupantsCount, guestUnitFeatures.maxOccupantsCount) &&
        Objects.equals(this.maxOccupantsCountException, guestUnitFeatures.maxOccupantsCountException) &&
        Objects.equals(this.privateHome, guestUnitFeatures.privateHome) &&
        Objects.equals(this.privateHomeException, guestUnitFeatures.privateHomeException) &&
        Objects.equals(this.suite, guestUnitFeatures.suite) &&
        Objects.equals(this.suiteException, guestUnitFeatures.suiteException) &&
        Objects.equals(this.tier, guestUnitFeatures.tier) &&
        Objects.equals(this.tierException, guestUnitFeatures.tierException) &&
        Objects.equals(this.totalLivingAreas, guestUnitFeatures.totalLivingAreas) &&
        Objects.equals(this.views, guestUnitFeatures.views);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bungalowOrVilla, bungalowOrVillaException, connectingUnitAvailable, connectingUnitAvailableException, executiveFloor, executiveFloorException, maxAdultOccupantsCount, maxAdultOccupantsCountException, maxChildOccupantsCount, maxChildOccupantsCountException, maxOccupantsCount, maxOccupantsCountException, privateHome, privateHomeException, suite, suiteException, tier, tierException, totalLivingAreas, views);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GuestUnitFeatures {\n");
    sb.append("    bungalowOrVilla: ").append(toIndentedString(bungalowOrVilla)).append("\n");
    sb.append("    bungalowOrVillaException: ").append(toIndentedString(bungalowOrVillaException)).append("\n");
    sb.append("    connectingUnitAvailable: ").append(toIndentedString(connectingUnitAvailable)).append("\n");
    sb.append("    connectingUnitAvailableException: ").append(toIndentedString(connectingUnitAvailableException)).append("\n");
    sb.append("    executiveFloor: ").append(toIndentedString(executiveFloor)).append("\n");
    sb.append("    executiveFloorException: ").append(toIndentedString(executiveFloorException)).append("\n");
    sb.append("    maxAdultOccupantsCount: ").append(toIndentedString(maxAdultOccupantsCount)).append("\n");
    sb.append("    maxAdultOccupantsCountException: ").append(toIndentedString(maxAdultOccupantsCountException)).append("\n");
    sb.append("    maxChildOccupantsCount: ").append(toIndentedString(maxChildOccupantsCount)).append("\n");
    sb.append("    maxChildOccupantsCountException: ").append(toIndentedString(maxChildOccupantsCountException)).append("\n");
    sb.append("    maxOccupantsCount: ").append(toIndentedString(maxOccupantsCount)).append("\n");
    sb.append("    maxOccupantsCountException: ").append(toIndentedString(maxOccupantsCountException)).append("\n");
    sb.append("    privateHome: ").append(toIndentedString(privateHome)).append("\n");
    sb.append("    privateHomeException: ").append(toIndentedString(privateHomeException)).append("\n");
    sb.append("    suite: ").append(toIndentedString(suite)).append("\n");
    sb.append("    suiteException: ").append(toIndentedString(suiteException)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    tierException: ").append(toIndentedString(tierException)).append("\n");
    sb.append("    totalLivingAreas: ").append(toIndentedString(totalLivingAreas)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bungalowOrVilla");
    openapiFields.add("bungalowOrVillaException");
    openapiFields.add("connectingUnitAvailable");
    openapiFields.add("connectingUnitAvailableException");
    openapiFields.add("executiveFloor");
    openapiFields.add("executiveFloorException");
    openapiFields.add("maxAdultOccupantsCount");
    openapiFields.add("maxAdultOccupantsCountException");
    openapiFields.add("maxChildOccupantsCount");
    openapiFields.add("maxChildOccupantsCountException");
    openapiFields.add("maxOccupantsCount");
    openapiFields.add("maxOccupantsCountException");
    openapiFields.add("privateHome");
    openapiFields.add("privateHomeException");
    openapiFields.add("suite");
    openapiFields.add("suiteException");
    openapiFields.add("tier");
    openapiFields.add("tierException");
    openapiFields.add("totalLivingAreas");
    openapiFields.add("views");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GuestUnitFeatures
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GuestUnitFeatures.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GuestUnitFeatures is not found in the empty JSON string", GuestUnitFeatures.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GuestUnitFeatures.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GuestUnitFeatures` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bungalowOrVillaException") != null && !jsonObj.get("bungalowOrVillaException").isJsonNull()) && !jsonObj.get("bungalowOrVillaException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bungalowOrVillaException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bungalowOrVillaException").toString()));
      }
      // validate the optional field `bungalowOrVillaException`
      if (jsonObj.get("bungalowOrVillaException") != null && !jsonObj.get("bungalowOrVillaException").isJsonNull()) {
        BungalowOrVillaExceptionEnum.validateJsonElement(jsonObj.get("bungalowOrVillaException"));
      }
      if ((jsonObj.get("connectingUnitAvailableException") != null && !jsonObj.get("connectingUnitAvailableException").isJsonNull()) && !jsonObj.get("connectingUnitAvailableException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectingUnitAvailableException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectingUnitAvailableException").toString()));
      }
      // validate the optional field `connectingUnitAvailableException`
      if (jsonObj.get("connectingUnitAvailableException") != null && !jsonObj.get("connectingUnitAvailableException").isJsonNull()) {
        ConnectingUnitAvailableExceptionEnum.validateJsonElement(jsonObj.get("connectingUnitAvailableException"));
      }
      if ((jsonObj.get("executiveFloorException") != null && !jsonObj.get("executiveFloorException").isJsonNull()) && !jsonObj.get("executiveFloorException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executiveFloorException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executiveFloorException").toString()));
      }
      // validate the optional field `executiveFloorException`
      if (jsonObj.get("executiveFloorException") != null && !jsonObj.get("executiveFloorException").isJsonNull()) {
        ExecutiveFloorExceptionEnum.validateJsonElement(jsonObj.get("executiveFloorException"));
      }
      if ((jsonObj.get("maxAdultOccupantsCountException") != null && !jsonObj.get("maxAdultOccupantsCountException").isJsonNull()) && !jsonObj.get("maxAdultOccupantsCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxAdultOccupantsCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxAdultOccupantsCountException").toString()));
      }
      // validate the optional field `maxAdultOccupantsCountException`
      if (jsonObj.get("maxAdultOccupantsCountException") != null && !jsonObj.get("maxAdultOccupantsCountException").isJsonNull()) {
        MaxAdultOccupantsCountExceptionEnum.validateJsonElement(jsonObj.get("maxAdultOccupantsCountException"));
      }
      if ((jsonObj.get("maxChildOccupantsCountException") != null && !jsonObj.get("maxChildOccupantsCountException").isJsonNull()) && !jsonObj.get("maxChildOccupantsCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxChildOccupantsCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxChildOccupantsCountException").toString()));
      }
      // validate the optional field `maxChildOccupantsCountException`
      if (jsonObj.get("maxChildOccupantsCountException") != null && !jsonObj.get("maxChildOccupantsCountException").isJsonNull()) {
        MaxChildOccupantsCountExceptionEnum.validateJsonElement(jsonObj.get("maxChildOccupantsCountException"));
      }
      if ((jsonObj.get("maxOccupantsCountException") != null && !jsonObj.get("maxOccupantsCountException").isJsonNull()) && !jsonObj.get("maxOccupantsCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxOccupantsCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxOccupantsCountException").toString()));
      }
      // validate the optional field `maxOccupantsCountException`
      if (jsonObj.get("maxOccupantsCountException") != null && !jsonObj.get("maxOccupantsCountException").isJsonNull()) {
        MaxOccupantsCountExceptionEnum.validateJsonElement(jsonObj.get("maxOccupantsCountException"));
      }
      if ((jsonObj.get("privateHomeException") != null && !jsonObj.get("privateHomeException").isJsonNull()) && !jsonObj.get("privateHomeException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateHomeException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateHomeException").toString()));
      }
      // validate the optional field `privateHomeException`
      if (jsonObj.get("privateHomeException") != null && !jsonObj.get("privateHomeException").isJsonNull()) {
        PrivateHomeExceptionEnum.validateJsonElement(jsonObj.get("privateHomeException"));
      }
      if ((jsonObj.get("suiteException") != null && !jsonObj.get("suiteException").isJsonNull()) && !jsonObj.get("suiteException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suiteException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suiteException").toString()));
      }
      // validate the optional field `suiteException`
      if (jsonObj.get("suiteException") != null && !jsonObj.get("suiteException").isJsonNull()) {
        SuiteExceptionEnum.validateJsonElement(jsonObj.get("suiteException"));
      }
      if ((jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) && !jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
      // validate the optional field `tier`
      if (jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) {
        TierEnum.validateJsonElement(jsonObj.get("tier"));
      }
      if ((jsonObj.get("tierException") != null && !jsonObj.get("tierException").isJsonNull()) && !jsonObj.get("tierException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tierException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tierException").toString()));
      }
      // validate the optional field `tierException`
      if (jsonObj.get("tierException") != null && !jsonObj.get("tierException").isJsonNull()) {
        TierExceptionEnum.validateJsonElement(jsonObj.get("tierException"));
      }
      // validate the optional field `totalLivingAreas`
      if (jsonObj.get("totalLivingAreas") != null && !jsonObj.get("totalLivingAreas").isJsonNull()) {
        LivingArea.validateJsonElement(jsonObj.get("totalLivingAreas"));
      }
      // validate the optional field `views`
      if (jsonObj.get("views") != null && !jsonObj.get("views").isJsonNull()) {
        ViewsFromUnit.validateJsonElement(jsonObj.get("views"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GuestUnitFeatures.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GuestUnitFeatures' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GuestUnitFeatures> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GuestUnitFeatures.class));

       return (TypeAdapter<T>) new TypeAdapter<GuestUnitFeatures>() {
           @Override
           public void write(JsonWriter out, GuestUnitFeatures value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GuestUnitFeatures read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GuestUnitFeatures given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GuestUnitFeatures
   * @throws IOException if the JSON string is invalid with respect to GuestUnitFeatures
   */
  public static GuestUnitFeatures fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GuestUnitFeatures.class);
  }

  /**
   * Convert an instance of GuestUnitFeatures to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

