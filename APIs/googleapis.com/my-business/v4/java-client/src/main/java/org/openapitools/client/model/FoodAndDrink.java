/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Meals, snacks, and beverages available at the property.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FoodAndDrink {
  public static final String SERIALIZED_NAME_BAR = "bar";
  @SerializedName(SERIALIZED_NAME_BAR)
  private Boolean bar;

  /**
   * Bar exception.
   */
  @JsonAdapter(BarExceptionEnum.Adapter.class)
  public enum BarExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BarExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BarExceptionEnum fromValue(String value) {
      for (BarExceptionEnum b : BarExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BarExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BarExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BarExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BarExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BarExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BAR_EXCEPTION = "barException";
  @SerializedName(SERIALIZED_NAME_BAR_EXCEPTION)
  private BarExceptionEnum barException;

  public static final String SERIALIZED_NAME_BREAKFAST_AVAILABLE = "breakfastAvailable";
  @SerializedName(SERIALIZED_NAME_BREAKFAST_AVAILABLE)
  private Boolean breakfastAvailable;

  /**
   * Breakfast available exception.
   */
  @JsonAdapter(BreakfastAvailableExceptionEnum.Adapter.class)
  public enum BreakfastAvailableExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BreakfastAvailableExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BreakfastAvailableExceptionEnum fromValue(String value) {
      for (BreakfastAvailableExceptionEnum b : BreakfastAvailableExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BreakfastAvailableExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BreakfastAvailableExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BreakfastAvailableExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BreakfastAvailableExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BreakfastAvailableExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BREAKFAST_AVAILABLE_EXCEPTION = "breakfastAvailableException";
  @SerializedName(SERIALIZED_NAME_BREAKFAST_AVAILABLE_EXCEPTION)
  private BreakfastAvailableExceptionEnum breakfastAvailableException;

  public static final String SERIALIZED_NAME_BREAKFAST_BUFFET = "breakfastBuffet";
  @SerializedName(SERIALIZED_NAME_BREAKFAST_BUFFET)
  private Boolean breakfastBuffet;

  /**
   * Breakfast buffet exception.
   */
  @JsonAdapter(BreakfastBuffetExceptionEnum.Adapter.class)
  public enum BreakfastBuffetExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BreakfastBuffetExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BreakfastBuffetExceptionEnum fromValue(String value) {
      for (BreakfastBuffetExceptionEnum b : BreakfastBuffetExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BreakfastBuffetExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BreakfastBuffetExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BreakfastBuffetExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BreakfastBuffetExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BreakfastBuffetExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BREAKFAST_BUFFET_EXCEPTION = "breakfastBuffetException";
  @SerializedName(SERIALIZED_NAME_BREAKFAST_BUFFET_EXCEPTION)
  private BreakfastBuffetExceptionEnum breakfastBuffetException;

  public static final String SERIALIZED_NAME_BUFFET = "buffet";
  @SerializedName(SERIALIZED_NAME_BUFFET)
  private Boolean buffet;

  /**
   * Buffet exception.
   */
  @JsonAdapter(BuffetExceptionEnum.Adapter.class)
  public enum BuffetExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BuffetExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BuffetExceptionEnum fromValue(String value) {
      for (BuffetExceptionEnum b : BuffetExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BuffetExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BuffetExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BuffetExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BuffetExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BuffetExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUFFET_EXCEPTION = "buffetException";
  @SerializedName(SERIALIZED_NAME_BUFFET_EXCEPTION)
  private BuffetExceptionEnum buffetException;

  public static final String SERIALIZED_NAME_DINNER_BUFFET = "dinnerBuffet";
  @SerializedName(SERIALIZED_NAME_DINNER_BUFFET)
  private Boolean dinnerBuffet;

  /**
   * Dinner buffet exception.
   */
  @JsonAdapter(DinnerBuffetExceptionEnum.Adapter.class)
  public enum DinnerBuffetExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    DinnerBuffetExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DinnerBuffetExceptionEnum fromValue(String value) {
      for (DinnerBuffetExceptionEnum b : DinnerBuffetExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DinnerBuffetExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DinnerBuffetExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DinnerBuffetExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DinnerBuffetExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DinnerBuffetExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DINNER_BUFFET_EXCEPTION = "dinnerBuffetException";
  @SerializedName(SERIALIZED_NAME_DINNER_BUFFET_EXCEPTION)
  private DinnerBuffetExceptionEnum dinnerBuffetException;

  public static final String SERIALIZED_NAME_FREE_BREAKFAST = "freeBreakfast";
  @SerializedName(SERIALIZED_NAME_FREE_BREAKFAST)
  private Boolean freeBreakfast;

  /**
   * Free breakfast exception.
   */
  @JsonAdapter(FreeBreakfastExceptionEnum.Adapter.class)
  public enum FreeBreakfastExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FreeBreakfastExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FreeBreakfastExceptionEnum fromValue(String value) {
      for (FreeBreakfastExceptionEnum b : FreeBreakfastExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FreeBreakfastExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FreeBreakfastExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FreeBreakfastExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FreeBreakfastExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FreeBreakfastExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREE_BREAKFAST_EXCEPTION = "freeBreakfastException";
  @SerializedName(SERIALIZED_NAME_FREE_BREAKFAST_EXCEPTION)
  private FreeBreakfastExceptionEnum freeBreakfastException;

  public static final String SERIALIZED_NAME_RESTAURANT = "restaurant";
  @SerializedName(SERIALIZED_NAME_RESTAURANT)
  private Boolean restaurant;

  /**
   * Restaurant exception.
   */
  @JsonAdapter(RestaurantExceptionEnum.Adapter.class)
  public enum RestaurantExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    RestaurantExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RestaurantExceptionEnum fromValue(String value) {
      for (RestaurantExceptionEnum b : RestaurantExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RestaurantExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RestaurantExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RestaurantExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RestaurantExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RestaurantExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESTAURANT_EXCEPTION = "restaurantException";
  @SerializedName(SERIALIZED_NAME_RESTAURANT_EXCEPTION)
  private RestaurantExceptionEnum restaurantException;

  public static final String SERIALIZED_NAME_RESTAURANTS_COUNT = "restaurantsCount";
  @SerializedName(SERIALIZED_NAME_RESTAURANTS_COUNT)
  private Integer restaurantsCount;

  /**
   * Restaurants count exception.
   */
  @JsonAdapter(RestaurantsCountExceptionEnum.Adapter.class)
  public enum RestaurantsCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    RestaurantsCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RestaurantsCountExceptionEnum fromValue(String value) {
      for (RestaurantsCountExceptionEnum b : RestaurantsCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RestaurantsCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RestaurantsCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RestaurantsCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RestaurantsCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RestaurantsCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESTAURANTS_COUNT_EXCEPTION = "restaurantsCountException";
  @SerializedName(SERIALIZED_NAME_RESTAURANTS_COUNT_EXCEPTION)
  private RestaurantsCountExceptionEnum restaurantsCountException;

  public static final String SERIALIZED_NAME_ROOM_SERVICE = "roomService";
  @SerializedName(SERIALIZED_NAME_ROOM_SERVICE)
  private Boolean roomService;

  /**
   * Room service exception.
   */
  @JsonAdapter(RoomServiceExceptionEnum.Adapter.class)
  public enum RoomServiceExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    RoomServiceExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoomServiceExceptionEnum fromValue(String value) {
      for (RoomServiceExceptionEnum b : RoomServiceExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoomServiceExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoomServiceExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoomServiceExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoomServiceExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoomServiceExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROOM_SERVICE_EXCEPTION = "roomServiceException";
  @SerializedName(SERIALIZED_NAME_ROOM_SERVICE_EXCEPTION)
  private RoomServiceExceptionEnum roomServiceException;

  public static final String SERIALIZED_NAME_TABLE_SERVICE = "tableService";
  @SerializedName(SERIALIZED_NAME_TABLE_SERVICE)
  private Boolean tableService;

  /**
   * Table service exception.
   */
  @JsonAdapter(TableServiceExceptionEnum.Adapter.class)
  public enum TableServiceExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    TableServiceExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TableServiceExceptionEnum fromValue(String value) {
      for (TableServiceExceptionEnum b : TableServiceExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TableServiceExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TableServiceExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TableServiceExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TableServiceExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TableServiceExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TABLE_SERVICE_EXCEPTION = "tableServiceException";
  @SerializedName(SERIALIZED_NAME_TABLE_SERVICE_EXCEPTION)
  private TableServiceExceptionEnum tableServiceException;

  public static final String SERIALIZED_NAME_TWENTY_FOUR_HOUR_ROOM_SERVICE = "twentyFourHourRoomService";
  @SerializedName(SERIALIZED_NAME_TWENTY_FOUR_HOUR_ROOM_SERVICE)
  private Boolean twentyFourHourRoomService;

  /**
   * 24hr room service exception.
   */
  @JsonAdapter(TwentyFourHourRoomServiceExceptionEnum.Adapter.class)
  public enum TwentyFourHourRoomServiceExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    TwentyFourHourRoomServiceExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TwentyFourHourRoomServiceExceptionEnum fromValue(String value) {
      for (TwentyFourHourRoomServiceExceptionEnum b : TwentyFourHourRoomServiceExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TwentyFourHourRoomServiceExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TwentyFourHourRoomServiceExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TwentyFourHourRoomServiceExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TwentyFourHourRoomServiceExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TwentyFourHourRoomServiceExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TWENTY_FOUR_HOUR_ROOM_SERVICE_EXCEPTION = "twentyFourHourRoomServiceException";
  @SerializedName(SERIALIZED_NAME_TWENTY_FOUR_HOUR_ROOM_SERVICE_EXCEPTION)
  private TwentyFourHourRoomServiceExceptionEnum twentyFourHourRoomServiceException;

  public static final String SERIALIZED_NAME_VENDING_MACHINE = "vendingMachine";
  @SerializedName(SERIALIZED_NAME_VENDING_MACHINE)
  private Boolean vendingMachine;

  /**
   * Vending machine exception.
   */
  @JsonAdapter(VendingMachineExceptionEnum.Adapter.class)
  public enum VendingMachineExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    VendingMachineExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VendingMachineExceptionEnum fromValue(String value) {
      for (VendingMachineExceptionEnum b : VendingMachineExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VendingMachineExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VendingMachineExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VendingMachineExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VendingMachineExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VendingMachineExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VENDING_MACHINE_EXCEPTION = "vendingMachineException";
  @SerializedName(SERIALIZED_NAME_VENDING_MACHINE_EXCEPTION)
  private VendingMachineExceptionEnum vendingMachineException;

  public FoodAndDrink() {
  }

  public FoodAndDrink bar(Boolean bar) {
    this.bar = bar;
    return this;
  }

  /**
   * Bar. A designated room, lounge or area of an on-site restaurant with seating at a counter behind which a hotel staffer takes the guest&#39;s order and provides the requested alcoholic drink. Can be indoors or outdoors. Also known as Pub.
   * @return bar
   */
  @javax.annotation.Nullable
  public Boolean getBar() {
    return bar;
  }

  public void setBar(Boolean bar) {
    this.bar = bar;
  }


  public FoodAndDrink barException(BarExceptionEnum barException) {
    this.barException = barException;
    return this;
  }

  /**
   * Bar exception.
   * @return barException
   */
  @javax.annotation.Nullable
  public BarExceptionEnum getBarException() {
    return barException;
  }

  public void setBarException(BarExceptionEnum barException) {
    this.barException = barException;
  }


  public FoodAndDrink breakfastAvailable(Boolean breakfastAvailable) {
    this.breakfastAvailable = breakfastAvailable;
    return this;
  }

  /**
   * Breakfast available. The morning meal is offered to all guests. Can be free or for a fee.
   * @return breakfastAvailable
   */
  @javax.annotation.Nullable
  public Boolean getBreakfastAvailable() {
    return breakfastAvailable;
  }

  public void setBreakfastAvailable(Boolean breakfastAvailable) {
    this.breakfastAvailable = breakfastAvailable;
  }


  public FoodAndDrink breakfastAvailableException(BreakfastAvailableExceptionEnum breakfastAvailableException) {
    this.breakfastAvailableException = breakfastAvailableException;
    return this;
  }

  /**
   * Breakfast available exception.
   * @return breakfastAvailableException
   */
  @javax.annotation.Nullable
  public BreakfastAvailableExceptionEnum getBreakfastAvailableException() {
    return breakfastAvailableException;
  }

  public void setBreakfastAvailableException(BreakfastAvailableExceptionEnum breakfastAvailableException) {
    this.breakfastAvailableException = breakfastAvailableException;
  }


  public FoodAndDrink breakfastBuffet(Boolean breakfastBuffet) {
    this.breakfastBuffet = breakfastBuffet;
    return this;
  }

  /**
   * Breakfast buffet. Breakfast meal service where guests serve themselves from a variety of dishes/foods that are put out on a table.
   * @return breakfastBuffet
   */
  @javax.annotation.Nullable
  public Boolean getBreakfastBuffet() {
    return breakfastBuffet;
  }

  public void setBreakfastBuffet(Boolean breakfastBuffet) {
    this.breakfastBuffet = breakfastBuffet;
  }


  public FoodAndDrink breakfastBuffetException(BreakfastBuffetExceptionEnum breakfastBuffetException) {
    this.breakfastBuffetException = breakfastBuffetException;
    return this;
  }

  /**
   * Breakfast buffet exception.
   * @return breakfastBuffetException
   */
  @javax.annotation.Nullable
  public BreakfastBuffetExceptionEnum getBreakfastBuffetException() {
    return breakfastBuffetException;
  }

  public void setBreakfastBuffetException(BreakfastBuffetExceptionEnum breakfastBuffetException) {
    this.breakfastBuffetException = breakfastBuffetException;
  }


  public FoodAndDrink buffet(Boolean buffet) {
    this.buffet = buffet;
    return this;
  }

  /**
   * Buffet. A type of meal where guests serve themselves from a variety of dishes/foods that are put out on a table. Includes lunch and/or dinner meals. A breakfast-only buffet is not sufficient.
   * @return buffet
   */
  @javax.annotation.Nullable
  public Boolean getBuffet() {
    return buffet;
  }

  public void setBuffet(Boolean buffet) {
    this.buffet = buffet;
  }


  public FoodAndDrink buffetException(BuffetExceptionEnum buffetException) {
    this.buffetException = buffetException;
    return this;
  }

  /**
   * Buffet exception.
   * @return buffetException
   */
  @javax.annotation.Nullable
  public BuffetExceptionEnum getBuffetException() {
    return buffetException;
  }

  public void setBuffetException(BuffetExceptionEnum buffetException) {
    this.buffetException = buffetException;
  }


  public FoodAndDrink dinnerBuffet(Boolean dinnerBuffet) {
    this.dinnerBuffet = dinnerBuffet;
    return this;
  }

  /**
   * Dinner buffet. Dinner meal service where guests serve themselves from a variety of dishes/foods that are put out on a table.
   * @return dinnerBuffet
   */
  @javax.annotation.Nullable
  public Boolean getDinnerBuffet() {
    return dinnerBuffet;
  }

  public void setDinnerBuffet(Boolean dinnerBuffet) {
    this.dinnerBuffet = dinnerBuffet;
  }


  public FoodAndDrink dinnerBuffetException(DinnerBuffetExceptionEnum dinnerBuffetException) {
    this.dinnerBuffetException = dinnerBuffetException;
    return this;
  }

  /**
   * Dinner buffet exception.
   * @return dinnerBuffetException
   */
  @javax.annotation.Nullable
  public DinnerBuffetExceptionEnum getDinnerBuffetException() {
    return dinnerBuffetException;
  }

  public void setDinnerBuffetException(DinnerBuffetExceptionEnum dinnerBuffetException) {
    this.dinnerBuffetException = dinnerBuffetException;
  }


  public FoodAndDrink freeBreakfast(Boolean freeBreakfast) {
    this.freeBreakfast = freeBreakfast;
    return this;
  }

  /**
   * Free breakfast. Breakfast is offered for free to all guests. Does not apply if limited to certain room packages.
   * @return freeBreakfast
   */
  @javax.annotation.Nullable
  public Boolean getFreeBreakfast() {
    return freeBreakfast;
  }

  public void setFreeBreakfast(Boolean freeBreakfast) {
    this.freeBreakfast = freeBreakfast;
  }


  public FoodAndDrink freeBreakfastException(FreeBreakfastExceptionEnum freeBreakfastException) {
    this.freeBreakfastException = freeBreakfastException;
    return this;
  }

  /**
   * Free breakfast exception.
   * @return freeBreakfastException
   */
  @javax.annotation.Nullable
  public FreeBreakfastExceptionEnum getFreeBreakfastException() {
    return freeBreakfastException;
  }

  public void setFreeBreakfastException(FreeBreakfastExceptionEnum freeBreakfastException) {
    this.freeBreakfastException = freeBreakfastException;
  }


  public FoodAndDrink restaurant(Boolean restaurant) {
    this.restaurant = restaurant;
    return this;
  }

  /**
   * Restaurant. A business onsite at the hotel that is open to the public as well as guests, and offers meals and beverages to consume at tables or counters. May or may not include table service. Also known as cafe, buffet, eatery. A \&quot;breakfast room\&quot; where the hotel serves breakfast only to guests (not the general public) does not count as a restaurant.
   * @return restaurant
   */
  @javax.annotation.Nullable
  public Boolean getRestaurant() {
    return restaurant;
  }

  public void setRestaurant(Boolean restaurant) {
    this.restaurant = restaurant;
  }


  public FoodAndDrink restaurantException(RestaurantExceptionEnum restaurantException) {
    this.restaurantException = restaurantException;
    return this;
  }

  /**
   * Restaurant exception.
   * @return restaurantException
   */
  @javax.annotation.Nullable
  public RestaurantExceptionEnum getRestaurantException() {
    return restaurantException;
  }

  public void setRestaurantException(RestaurantExceptionEnum restaurantException) {
    this.restaurantException = restaurantException;
  }


  public FoodAndDrink restaurantsCount(Integer restaurantsCount) {
    this.restaurantsCount = restaurantsCount;
    return this;
  }

  /**
   * Restaurants count. The number of restaurants at the hotel.
   * @return restaurantsCount
   */
  @javax.annotation.Nullable
  public Integer getRestaurantsCount() {
    return restaurantsCount;
  }

  public void setRestaurantsCount(Integer restaurantsCount) {
    this.restaurantsCount = restaurantsCount;
  }


  public FoodAndDrink restaurantsCountException(RestaurantsCountExceptionEnum restaurantsCountException) {
    this.restaurantsCountException = restaurantsCountException;
    return this;
  }

  /**
   * Restaurants count exception.
   * @return restaurantsCountException
   */
  @javax.annotation.Nullable
  public RestaurantsCountExceptionEnum getRestaurantsCountException() {
    return restaurantsCountException;
  }

  public void setRestaurantsCountException(RestaurantsCountExceptionEnum restaurantsCountException) {
    this.restaurantsCountException = restaurantsCountException;
  }


  public FoodAndDrink roomService(Boolean roomService) {
    this.roomService = roomService;
    return this;
  }

  /**
   * Room service. A hotel staffer delivers meals prepared onsite to a guest&#39;s room as per their request. May or may not be available during specific hours. Services should be available to all guests (not based on rate/room booked/reward program, etc).
   * @return roomService
   */
  @javax.annotation.Nullable
  public Boolean getRoomService() {
    return roomService;
  }

  public void setRoomService(Boolean roomService) {
    this.roomService = roomService;
  }


  public FoodAndDrink roomServiceException(RoomServiceExceptionEnum roomServiceException) {
    this.roomServiceException = roomServiceException;
    return this;
  }

  /**
   * Room service exception.
   * @return roomServiceException
   */
  @javax.annotation.Nullable
  public RoomServiceExceptionEnum getRoomServiceException() {
    return roomServiceException;
  }

  public void setRoomServiceException(RoomServiceExceptionEnum roomServiceException) {
    this.roomServiceException = roomServiceException;
  }


  public FoodAndDrink tableService(Boolean tableService) {
    this.tableService = tableService;
    return this;
  }

  /**
   * Table service. A restaurant in which a staff member is assigned to a guest&#39;s table to take their order, deliver and clear away food, and deliver the bill, if applicable. Also known as sit-down restaurant.
   * @return tableService
   */
  @javax.annotation.Nullable
  public Boolean getTableService() {
    return tableService;
  }

  public void setTableService(Boolean tableService) {
    this.tableService = tableService;
  }


  public FoodAndDrink tableServiceException(TableServiceExceptionEnum tableServiceException) {
    this.tableServiceException = tableServiceException;
    return this;
  }

  /**
   * Table service exception.
   * @return tableServiceException
   */
  @javax.annotation.Nullable
  public TableServiceExceptionEnum getTableServiceException() {
    return tableServiceException;
  }

  public void setTableServiceException(TableServiceExceptionEnum tableServiceException) {
    this.tableServiceException = tableServiceException;
  }


  public FoodAndDrink twentyFourHourRoomService(Boolean twentyFourHourRoomService) {
    this.twentyFourHourRoomService = twentyFourHourRoomService;
    return this;
  }

  /**
   * 24hr room service. Room service is available 24 hours a day.
   * @return twentyFourHourRoomService
   */
  @javax.annotation.Nullable
  public Boolean getTwentyFourHourRoomService() {
    return twentyFourHourRoomService;
  }

  public void setTwentyFourHourRoomService(Boolean twentyFourHourRoomService) {
    this.twentyFourHourRoomService = twentyFourHourRoomService;
  }


  public FoodAndDrink twentyFourHourRoomServiceException(TwentyFourHourRoomServiceExceptionEnum twentyFourHourRoomServiceException) {
    this.twentyFourHourRoomServiceException = twentyFourHourRoomServiceException;
    return this;
  }

  /**
   * 24hr room service exception.
   * @return twentyFourHourRoomServiceException
   */
  @javax.annotation.Nullable
  public TwentyFourHourRoomServiceExceptionEnum getTwentyFourHourRoomServiceException() {
    return twentyFourHourRoomServiceException;
  }

  public void setTwentyFourHourRoomServiceException(TwentyFourHourRoomServiceExceptionEnum twentyFourHourRoomServiceException) {
    this.twentyFourHourRoomServiceException = twentyFourHourRoomServiceException;
  }


  public FoodAndDrink vendingMachine(Boolean vendingMachine) {
    this.vendingMachine = vendingMachine;
    return this;
  }

  /**
   * Vending machine. A glass-fronted mechanized cabinet displaying and dispensing snacks and beverages for purchase by coins, paper money and/or credit cards.
   * @return vendingMachine
   */
  @javax.annotation.Nullable
  public Boolean getVendingMachine() {
    return vendingMachine;
  }

  public void setVendingMachine(Boolean vendingMachine) {
    this.vendingMachine = vendingMachine;
  }


  public FoodAndDrink vendingMachineException(VendingMachineExceptionEnum vendingMachineException) {
    this.vendingMachineException = vendingMachineException;
    return this;
  }

  /**
   * Vending machine exception.
   * @return vendingMachineException
   */
  @javax.annotation.Nullable
  public VendingMachineExceptionEnum getVendingMachineException() {
    return vendingMachineException;
  }

  public void setVendingMachineException(VendingMachineExceptionEnum vendingMachineException) {
    this.vendingMachineException = vendingMachineException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FoodAndDrink foodAndDrink = (FoodAndDrink) o;
    return Objects.equals(this.bar, foodAndDrink.bar) &&
        Objects.equals(this.barException, foodAndDrink.barException) &&
        Objects.equals(this.breakfastAvailable, foodAndDrink.breakfastAvailable) &&
        Objects.equals(this.breakfastAvailableException, foodAndDrink.breakfastAvailableException) &&
        Objects.equals(this.breakfastBuffet, foodAndDrink.breakfastBuffet) &&
        Objects.equals(this.breakfastBuffetException, foodAndDrink.breakfastBuffetException) &&
        Objects.equals(this.buffet, foodAndDrink.buffet) &&
        Objects.equals(this.buffetException, foodAndDrink.buffetException) &&
        Objects.equals(this.dinnerBuffet, foodAndDrink.dinnerBuffet) &&
        Objects.equals(this.dinnerBuffetException, foodAndDrink.dinnerBuffetException) &&
        Objects.equals(this.freeBreakfast, foodAndDrink.freeBreakfast) &&
        Objects.equals(this.freeBreakfastException, foodAndDrink.freeBreakfastException) &&
        Objects.equals(this.restaurant, foodAndDrink.restaurant) &&
        Objects.equals(this.restaurantException, foodAndDrink.restaurantException) &&
        Objects.equals(this.restaurantsCount, foodAndDrink.restaurantsCount) &&
        Objects.equals(this.restaurantsCountException, foodAndDrink.restaurantsCountException) &&
        Objects.equals(this.roomService, foodAndDrink.roomService) &&
        Objects.equals(this.roomServiceException, foodAndDrink.roomServiceException) &&
        Objects.equals(this.tableService, foodAndDrink.tableService) &&
        Objects.equals(this.tableServiceException, foodAndDrink.tableServiceException) &&
        Objects.equals(this.twentyFourHourRoomService, foodAndDrink.twentyFourHourRoomService) &&
        Objects.equals(this.twentyFourHourRoomServiceException, foodAndDrink.twentyFourHourRoomServiceException) &&
        Objects.equals(this.vendingMachine, foodAndDrink.vendingMachine) &&
        Objects.equals(this.vendingMachineException, foodAndDrink.vendingMachineException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bar, barException, breakfastAvailable, breakfastAvailableException, breakfastBuffet, breakfastBuffetException, buffet, buffetException, dinnerBuffet, dinnerBuffetException, freeBreakfast, freeBreakfastException, restaurant, restaurantException, restaurantsCount, restaurantsCountException, roomService, roomServiceException, tableService, tableServiceException, twentyFourHourRoomService, twentyFourHourRoomServiceException, vendingMachine, vendingMachineException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FoodAndDrink {\n");
    sb.append("    bar: ").append(toIndentedString(bar)).append("\n");
    sb.append("    barException: ").append(toIndentedString(barException)).append("\n");
    sb.append("    breakfastAvailable: ").append(toIndentedString(breakfastAvailable)).append("\n");
    sb.append("    breakfastAvailableException: ").append(toIndentedString(breakfastAvailableException)).append("\n");
    sb.append("    breakfastBuffet: ").append(toIndentedString(breakfastBuffet)).append("\n");
    sb.append("    breakfastBuffetException: ").append(toIndentedString(breakfastBuffetException)).append("\n");
    sb.append("    buffet: ").append(toIndentedString(buffet)).append("\n");
    sb.append("    buffetException: ").append(toIndentedString(buffetException)).append("\n");
    sb.append("    dinnerBuffet: ").append(toIndentedString(dinnerBuffet)).append("\n");
    sb.append("    dinnerBuffetException: ").append(toIndentedString(dinnerBuffetException)).append("\n");
    sb.append("    freeBreakfast: ").append(toIndentedString(freeBreakfast)).append("\n");
    sb.append("    freeBreakfastException: ").append(toIndentedString(freeBreakfastException)).append("\n");
    sb.append("    restaurant: ").append(toIndentedString(restaurant)).append("\n");
    sb.append("    restaurantException: ").append(toIndentedString(restaurantException)).append("\n");
    sb.append("    restaurantsCount: ").append(toIndentedString(restaurantsCount)).append("\n");
    sb.append("    restaurantsCountException: ").append(toIndentedString(restaurantsCountException)).append("\n");
    sb.append("    roomService: ").append(toIndentedString(roomService)).append("\n");
    sb.append("    roomServiceException: ").append(toIndentedString(roomServiceException)).append("\n");
    sb.append("    tableService: ").append(toIndentedString(tableService)).append("\n");
    sb.append("    tableServiceException: ").append(toIndentedString(tableServiceException)).append("\n");
    sb.append("    twentyFourHourRoomService: ").append(toIndentedString(twentyFourHourRoomService)).append("\n");
    sb.append("    twentyFourHourRoomServiceException: ").append(toIndentedString(twentyFourHourRoomServiceException)).append("\n");
    sb.append("    vendingMachine: ").append(toIndentedString(vendingMachine)).append("\n");
    sb.append("    vendingMachineException: ").append(toIndentedString(vendingMachineException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bar");
    openapiFields.add("barException");
    openapiFields.add("breakfastAvailable");
    openapiFields.add("breakfastAvailableException");
    openapiFields.add("breakfastBuffet");
    openapiFields.add("breakfastBuffetException");
    openapiFields.add("buffet");
    openapiFields.add("buffetException");
    openapiFields.add("dinnerBuffet");
    openapiFields.add("dinnerBuffetException");
    openapiFields.add("freeBreakfast");
    openapiFields.add("freeBreakfastException");
    openapiFields.add("restaurant");
    openapiFields.add("restaurantException");
    openapiFields.add("restaurantsCount");
    openapiFields.add("restaurantsCountException");
    openapiFields.add("roomService");
    openapiFields.add("roomServiceException");
    openapiFields.add("tableService");
    openapiFields.add("tableServiceException");
    openapiFields.add("twentyFourHourRoomService");
    openapiFields.add("twentyFourHourRoomServiceException");
    openapiFields.add("vendingMachine");
    openapiFields.add("vendingMachineException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FoodAndDrink
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FoodAndDrink.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FoodAndDrink is not found in the empty JSON string", FoodAndDrink.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FoodAndDrink.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FoodAndDrink` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("barException") != null && !jsonObj.get("barException").isJsonNull()) && !jsonObj.get("barException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `barException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("barException").toString()));
      }
      // validate the optional field `barException`
      if (jsonObj.get("barException") != null && !jsonObj.get("barException").isJsonNull()) {
        BarExceptionEnum.validateJsonElement(jsonObj.get("barException"));
      }
      if ((jsonObj.get("breakfastAvailableException") != null && !jsonObj.get("breakfastAvailableException").isJsonNull()) && !jsonObj.get("breakfastAvailableException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `breakfastAvailableException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("breakfastAvailableException").toString()));
      }
      // validate the optional field `breakfastAvailableException`
      if (jsonObj.get("breakfastAvailableException") != null && !jsonObj.get("breakfastAvailableException").isJsonNull()) {
        BreakfastAvailableExceptionEnum.validateJsonElement(jsonObj.get("breakfastAvailableException"));
      }
      if ((jsonObj.get("breakfastBuffetException") != null && !jsonObj.get("breakfastBuffetException").isJsonNull()) && !jsonObj.get("breakfastBuffetException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `breakfastBuffetException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("breakfastBuffetException").toString()));
      }
      // validate the optional field `breakfastBuffetException`
      if (jsonObj.get("breakfastBuffetException") != null && !jsonObj.get("breakfastBuffetException").isJsonNull()) {
        BreakfastBuffetExceptionEnum.validateJsonElement(jsonObj.get("breakfastBuffetException"));
      }
      if ((jsonObj.get("buffetException") != null && !jsonObj.get("buffetException").isJsonNull()) && !jsonObj.get("buffetException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buffetException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buffetException").toString()));
      }
      // validate the optional field `buffetException`
      if (jsonObj.get("buffetException") != null && !jsonObj.get("buffetException").isJsonNull()) {
        BuffetExceptionEnum.validateJsonElement(jsonObj.get("buffetException"));
      }
      if ((jsonObj.get("dinnerBuffetException") != null && !jsonObj.get("dinnerBuffetException").isJsonNull()) && !jsonObj.get("dinnerBuffetException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dinnerBuffetException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dinnerBuffetException").toString()));
      }
      // validate the optional field `dinnerBuffetException`
      if (jsonObj.get("dinnerBuffetException") != null && !jsonObj.get("dinnerBuffetException").isJsonNull()) {
        DinnerBuffetExceptionEnum.validateJsonElement(jsonObj.get("dinnerBuffetException"));
      }
      if ((jsonObj.get("freeBreakfastException") != null && !jsonObj.get("freeBreakfastException").isJsonNull()) && !jsonObj.get("freeBreakfastException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeBreakfastException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeBreakfastException").toString()));
      }
      // validate the optional field `freeBreakfastException`
      if (jsonObj.get("freeBreakfastException") != null && !jsonObj.get("freeBreakfastException").isJsonNull()) {
        FreeBreakfastExceptionEnum.validateJsonElement(jsonObj.get("freeBreakfastException"));
      }
      if ((jsonObj.get("restaurantException") != null && !jsonObj.get("restaurantException").isJsonNull()) && !jsonObj.get("restaurantException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restaurantException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restaurantException").toString()));
      }
      // validate the optional field `restaurantException`
      if (jsonObj.get("restaurantException") != null && !jsonObj.get("restaurantException").isJsonNull()) {
        RestaurantExceptionEnum.validateJsonElement(jsonObj.get("restaurantException"));
      }
      if ((jsonObj.get("restaurantsCountException") != null && !jsonObj.get("restaurantsCountException").isJsonNull()) && !jsonObj.get("restaurantsCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restaurantsCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restaurantsCountException").toString()));
      }
      // validate the optional field `restaurantsCountException`
      if (jsonObj.get("restaurantsCountException") != null && !jsonObj.get("restaurantsCountException").isJsonNull()) {
        RestaurantsCountExceptionEnum.validateJsonElement(jsonObj.get("restaurantsCountException"));
      }
      if ((jsonObj.get("roomServiceException") != null && !jsonObj.get("roomServiceException").isJsonNull()) && !jsonObj.get("roomServiceException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roomServiceException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roomServiceException").toString()));
      }
      // validate the optional field `roomServiceException`
      if (jsonObj.get("roomServiceException") != null && !jsonObj.get("roomServiceException").isJsonNull()) {
        RoomServiceExceptionEnum.validateJsonElement(jsonObj.get("roomServiceException"));
      }
      if ((jsonObj.get("tableServiceException") != null && !jsonObj.get("tableServiceException").isJsonNull()) && !jsonObj.get("tableServiceException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableServiceException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableServiceException").toString()));
      }
      // validate the optional field `tableServiceException`
      if (jsonObj.get("tableServiceException") != null && !jsonObj.get("tableServiceException").isJsonNull()) {
        TableServiceExceptionEnum.validateJsonElement(jsonObj.get("tableServiceException"));
      }
      if ((jsonObj.get("twentyFourHourRoomServiceException") != null && !jsonObj.get("twentyFourHourRoomServiceException").isJsonNull()) && !jsonObj.get("twentyFourHourRoomServiceException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twentyFourHourRoomServiceException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twentyFourHourRoomServiceException").toString()));
      }
      // validate the optional field `twentyFourHourRoomServiceException`
      if (jsonObj.get("twentyFourHourRoomServiceException") != null && !jsonObj.get("twentyFourHourRoomServiceException").isJsonNull()) {
        TwentyFourHourRoomServiceExceptionEnum.validateJsonElement(jsonObj.get("twentyFourHourRoomServiceException"));
      }
      if ((jsonObj.get("vendingMachineException") != null && !jsonObj.get("vendingMachineException").isJsonNull()) && !jsonObj.get("vendingMachineException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendingMachineException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendingMachineException").toString()));
      }
      // validate the optional field `vendingMachineException`
      if (jsonObj.get("vendingMachineException") != null && !jsonObj.get("vendingMachineException").isJsonNull()) {
        VendingMachineExceptionEnum.validateJsonElement(jsonObj.get("vendingMachineException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FoodAndDrink.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FoodAndDrink' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FoodAndDrink> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FoodAndDrink.class));

       return (TypeAdapter<T>) new TypeAdapter<FoodAndDrink>() {
           @Override
           public void write(JsonWriter out, FoodAndDrink value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FoodAndDrink read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FoodAndDrink given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FoodAndDrink
   * @throws IOException if the JSON string is invalid with respect to FoodAndDrink
   */
  public static FoodAndDrink fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FoodAndDrink.class);
  }

  /**
   * Convert an instance of FoodAndDrink to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

