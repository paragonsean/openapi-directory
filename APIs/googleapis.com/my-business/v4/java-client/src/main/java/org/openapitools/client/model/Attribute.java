/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RepeatedEnumAttributeValue;
import org.openapitools.client.model.UrlAttributeValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A location attribute. Attributes provide additional information about a location. The attributes that can be set on a location may vary based on the properties of that location (for example, category). Available attributes are determined by Google and may be added and removed without API changes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attribute {
  public static final String SERIALIZED_NAME_ATTRIBUTE_ID = "attributeId";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_ID)
  private String attributeId;

  public static final String SERIALIZED_NAME_REPEATED_ENUM_VALUE = "repeatedEnumValue";
  @SerializedName(SERIALIZED_NAME_REPEATED_ENUM_VALUE)
  private RepeatedEnumAttributeValue repeatedEnumValue;

  public static final String SERIALIZED_NAME_URL_VALUES = "urlValues";
  @SerializedName(SERIALIZED_NAME_URL_VALUES)
  private List<UrlAttributeValue> urlValues = new ArrayList<>();

  /**
   * Output only. The type of value that this attribute contains. This should be used to determine how to interpret the value.
   */
  @JsonAdapter(ValueTypeEnum.Adapter.class)
  public enum ValueTypeEnum {
    ATTRIBUTE_VALUE_TYPE_UNSPECIFIED("ATTRIBUTE_VALUE_TYPE_UNSPECIFIED"),
    
    BOOL("BOOL"),
    
    ENUM("ENUM"),
    
    URL("URL"),
    
    REPEATED_ENUM("REPEATED_ENUM");

    private String value;

    ValueTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValueTypeEnum fromValue(String value) {
      for (ValueTypeEnum b : ValueTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValueTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValueTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValueTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValueTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValueTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALUE_TYPE = "valueType";
  @SerializedName(SERIALIZED_NAME_VALUE_TYPE)
  private ValueTypeEnum valueType;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<Object> values = new ArrayList<>();

  public Attribute() {
  }

  public Attribute attributeId(String attributeId) {
    this.attributeId = attributeId;
    return this;
  }

  /**
   * The ID of the attribute. Attribute IDs are provided by Google.
   * @return attributeId
   */
  @javax.annotation.Nullable
  public String getAttributeId() {
    return attributeId;
  }

  public void setAttributeId(String attributeId) {
    this.attributeId = attributeId;
  }


  public Attribute repeatedEnumValue(RepeatedEnumAttributeValue repeatedEnumValue) {
    this.repeatedEnumValue = repeatedEnumValue;
    return this;
  }

  /**
   * Get repeatedEnumValue
   * @return repeatedEnumValue
   */
  @javax.annotation.Nullable
  public RepeatedEnumAttributeValue getRepeatedEnumValue() {
    return repeatedEnumValue;
  }

  public void setRepeatedEnumValue(RepeatedEnumAttributeValue repeatedEnumValue) {
    this.repeatedEnumValue = repeatedEnumValue;
  }


  public Attribute urlValues(List<UrlAttributeValue> urlValues) {
    this.urlValues = urlValues;
    return this;
  }

  public Attribute addUrlValuesItem(UrlAttributeValue urlValuesItem) {
    if (this.urlValues == null) {
      this.urlValues = new ArrayList<>();
    }
    this.urlValues.add(urlValuesItem);
    return this;
  }

  /**
   * When the attribute value type is URL, this field contains the value(s) for this attribute, and the other values fields must be empty.
   * @return urlValues
   */
  @javax.annotation.Nullable
  public List<UrlAttributeValue> getUrlValues() {
    return urlValues;
  }

  public void setUrlValues(List<UrlAttributeValue> urlValues) {
    this.urlValues = urlValues;
  }


  public Attribute valueType(ValueTypeEnum valueType) {
    this.valueType = valueType;
    return this;
  }

  /**
   * Output only. The type of value that this attribute contains. This should be used to determine how to interpret the value.
   * @return valueType
   */
  @javax.annotation.Nullable
  public ValueTypeEnum getValueType() {
    return valueType;
  }

  public void setValueType(ValueTypeEnum valueType) {
    this.valueType = valueType;
  }


  public Attribute values(List<Object> values) {
    this.values = values;
    return this;
  }

  public Attribute addValuesItem(Object valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * The values for this attribute. The type of the values supplied must match that expected for that attribute; see [AttributeValueType](/my-business/reference/rest/v4/AttributeValueType). This is a repeated field where multiple attribute values may be provided. Attribute types only support one value.
   * @return values
   */
  @javax.annotation.Nullable
  public List<Object> getValues() {
    return values;
  }

  public void setValues(List<Object> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attribute attribute = (Attribute) o;
    return Objects.equals(this.attributeId, attribute.attributeId) &&
        Objects.equals(this.repeatedEnumValue, attribute.repeatedEnumValue) &&
        Objects.equals(this.urlValues, attribute.urlValues) &&
        Objects.equals(this.valueType, attribute.valueType) &&
        Objects.equals(this.values, attribute.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeId, repeatedEnumValue, urlValues, valueType, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attribute {\n");
    sb.append("    attributeId: ").append(toIndentedString(attributeId)).append("\n");
    sb.append("    repeatedEnumValue: ").append(toIndentedString(repeatedEnumValue)).append("\n");
    sb.append("    urlValues: ").append(toIndentedString(urlValues)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributeId");
    openapiFields.add("repeatedEnumValue");
    openapiFields.add("urlValues");
    openapiFields.add("valueType");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attribute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attribute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attribute is not found in the empty JSON string", Attribute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attribute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attribute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attributeId") != null && !jsonObj.get("attributeId").isJsonNull()) && !jsonObj.get("attributeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeId").toString()));
      }
      // validate the optional field `repeatedEnumValue`
      if (jsonObj.get("repeatedEnumValue") != null && !jsonObj.get("repeatedEnumValue").isJsonNull()) {
        RepeatedEnumAttributeValue.validateJsonElement(jsonObj.get("repeatedEnumValue"));
      }
      if (jsonObj.get("urlValues") != null && !jsonObj.get("urlValues").isJsonNull()) {
        JsonArray jsonArrayurlValues = jsonObj.getAsJsonArray("urlValues");
        if (jsonArrayurlValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("urlValues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `urlValues` to be an array in the JSON string but got `%s`", jsonObj.get("urlValues").toString()));
          }

          // validate the optional field `urlValues` (array)
          for (int i = 0; i < jsonArrayurlValues.size(); i++) {
            UrlAttributeValue.validateJsonElement(jsonArrayurlValues.get(i));
          };
        }
      }
      if ((jsonObj.get("valueType") != null && !jsonObj.get("valueType").isJsonNull()) && !jsonObj.get("valueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueType").toString()));
      }
      // validate the optional field `valueType`
      if (jsonObj.get("valueType") != null && !jsonObj.get("valueType").isJsonNull()) {
        ValueTypeEnum.validateJsonElement(jsonObj.get("valueType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull() && !jsonObj.get("values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attribute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attribute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attribute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attribute.class));

       return (TypeAdapter<T>) new TypeAdapter<Attribute>() {
           @Override
           public void write(JsonWriter out, Attribute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attribute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attribute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attribute
   * @throws IOException if the JSON string is invalid with respect to Attribute
   */
  public static Attribute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attribute.class);
  }

  /**
   * Convert an instance of Attribute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

