/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CaloriesFact;
import org.openapitools.client.model.NutritionFact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This message represents nutrition facts for a food dish.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NutritionFacts {
  public static final String SERIALIZED_NAME_CALORIES = "calories";
  @SerializedName(SERIALIZED_NAME_CALORIES)
  private CaloriesFact calories;

  public static final String SERIALIZED_NAME_CHOLESTEROL = "cholesterol";
  @SerializedName(SERIALIZED_NAME_CHOLESTEROL)
  private NutritionFact cholesterol;

  public static final String SERIALIZED_NAME_PROTEIN = "protein";
  @SerializedName(SERIALIZED_NAME_PROTEIN)
  private NutritionFact protein;

  public static final String SERIALIZED_NAME_SODIUM = "sodium";
  @SerializedName(SERIALIZED_NAME_SODIUM)
  private NutritionFact sodium;

  public static final String SERIALIZED_NAME_TOTAL_CARBOHYDRATE = "totalCarbohydrate";
  @SerializedName(SERIALIZED_NAME_TOTAL_CARBOHYDRATE)
  private NutritionFact totalCarbohydrate;

  public static final String SERIALIZED_NAME_TOTAL_FAT = "totalFat";
  @SerializedName(SERIALIZED_NAME_TOTAL_FAT)
  private NutritionFact totalFat;

  public NutritionFacts() {
  }

  public NutritionFacts calories(CaloriesFact calories) {
    this.calories = calories;
    return this;
  }

  /**
   * Get calories
   * @return calories
   */
  @javax.annotation.Nullable
  public CaloriesFact getCalories() {
    return calories;
  }

  public void setCalories(CaloriesFact calories) {
    this.calories = calories;
  }


  public NutritionFacts cholesterol(NutritionFact cholesterol) {
    this.cholesterol = cholesterol;
    return this;
  }

  /**
   * Get cholesterol
   * @return cholesterol
   */
  @javax.annotation.Nullable
  public NutritionFact getCholesterol() {
    return cholesterol;
  }

  public void setCholesterol(NutritionFact cholesterol) {
    this.cholesterol = cholesterol;
  }


  public NutritionFacts protein(NutritionFact protein) {
    this.protein = protein;
    return this;
  }

  /**
   * Get protein
   * @return protein
   */
  @javax.annotation.Nullable
  public NutritionFact getProtein() {
    return protein;
  }

  public void setProtein(NutritionFact protein) {
    this.protein = protein;
  }


  public NutritionFacts sodium(NutritionFact sodium) {
    this.sodium = sodium;
    return this;
  }

  /**
   * Get sodium
   * @return sodium
   */
  @javax.annotation.Nullable
  public NutritionFact getSodium() {
    return sodium;
  }

  public void setSodium(NutritionFact sodium) {
    this.sodium = sodium;
  }


  public NutritionFacts totalCarbohydrate(NutritionFact totalCarbohydrate) {
    this.totalCarbohydrate = totalCarbohydrate;
    return this;
  }

  /**
   * Get totalCarbohydrate
   * @return totalCarbohydrate
   */
  @javax.annotation.Nullable
  public NutritionFact getTotalCarbohydrate() {
    return totalCarbohydrate;
  }

  public void setTotalCarbohydrate(NutritionFact totalCarbohydrate) {
    this.totalCarbohydrate = totalCarbohydrate;
  }


  public NutritionFacts totalFat(NutritionFact totalFat) {
    this.totalFat = totalFat;
    return this;
  }

  /**
   * Get totalFat
   * @return totalFat
   */
  @javax.annotation.Nullable
  public NutritionFact getTotalFat() {
    return totalFat;
  }

  public void setTotalFat(NutritionFact totalFat) {
    this.totalFat = totalFat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NutritionFacts nutritionFacts = (NutritionFacts) o;
    return Objects.equals(this.calories, nutritionFacts.calories) &&
        Objects.equals(this.cholesterol, nutritionFacts.cholesterol) &&
        Objects.equals(this.protein, nutritionFacts.protein) &&
        Objects.equals(this.sodium, nutritionFacts.sodium) &&
        Objects.equals(this.totalCarbohydrate, nutritionFacts.totalCarbohydrate) &&
        Objects.equals(this.totalFat, nutritionFacts.totalFat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calories, cholesterol, protein, sodium, totalCarbohydrate, totalFat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NutritionFacts {\n");
    sb.append("    calories: ").append(toIndentedString(calories)).append("\n");
    sb.append("    cholesterol: ").append(toIndentedString(cholesterol)).append("\n");
    sb.append("    protein: ").append(toIndentedString(protein)).append("\n");
    sb.append("    sodium: ").append(toIndentedString(sodium)).append("\n");
    sb.append("    totalCarbohydrate: ").append(toIndentedString(totalCarbohydrate)).append("\n");
    sb.append("    totalFat: ").append(toIndentedString(totalFat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calories");
    openapiFields.add("cholesterol");
    openapiFields.add("protein");
    openapiFields.add("sodium");
    openapiFields.add("totalCarbohydrate");
    openapiFields.add("totalFat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NutritionFacts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NutritionFacts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NutritionFacts is not found in the empty JSON string", NutritionFacts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NutritionFacts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NutritionFacts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `calories`
      if (jsonObj.get("calories") != null && !jsonObj.get("calories").isJsonNull()) {
        CaloriesFact.validateJsonElement(jsonObj.get("calories"));
      }
      // validate the optional field `cholesterol`
      if (jsonObj.get("cholesterol") != null && !jsonObj.get("cholesterol").isJsonNull()) {
        NutritionFact.validateJsonElement(jsonObj.get("cholesterol"));
      }
      // validate the optional field `protein`
      if (jsonObj.get("protein") != null && !jsonObj.get("protein").isJsonNull()) {
        NutritionFact.validateJsonElement(jsonObj.get("protein"));
      }
      // validate the optional field `sodium`
      if (jsonObj.get("sodium") != null && !jsonObj.get("sodium").isJsonNull()) {
        NutritionFact.validateJsonElement(jsonObj.get("sodium"));
      }
      // validate the optional field `totalCarbohydrate`
      if (jsonObj.get("totalCarbohydrate") != null && !jsonObj.get("totalCarbohydrate").isJsonNull()) {
        NutritionFact.validateJsonElement(jsonObj.get("totalCarbohydrate"));
      }
      // validate the optional field `totalFat`
      if (jsonObj.get("totalFat") != null && !jsonObj.get("totalFat").isJsonNull()) {
        NutritionFact.validateJsonElement(jsonObj.get("totalFat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NutritionFacts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NutritionFacts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NutritionFacts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NutritionFacts.class));

       return (TypeAdapter<T>) new TypeAdapter<NutritionFacts>() {
           @Override
           public void write(JsonWriter out, NutritionFacts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NutritionFacts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NutritionFacts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NutritionFacts
   * @throws IOException if the JSON string is invalid with respect to NutritionFacts
   */
  public static NutritionFacts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NutritionFacts.class);
  }

  /**
   * Convert an instance of NutritionFacts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

