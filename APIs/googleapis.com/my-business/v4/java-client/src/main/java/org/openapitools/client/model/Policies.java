/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PaymentOptions;
import org.openapitools.client.model.TimeOfDay;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Property rules that impact guests.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Policies {
  public static final String SERIALIZED_NAME_ALL_INCLUSIVE_AVAILABLE = "allInclusiveAvailable";
  @SerializedName(SERIALIZED_NAME_ALL_INCLUSIVE_AVAILABLE)
  private Boolean allInclusiveAvailable;

  /**
   * All inclusive available exception.
   */
  @JsonAdapter(AllInclusiveAvailableExceptionEnum.Adapter.class)
  public enum AllInclusiveAvailableExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    AllInclusiveAvailableExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllInclusiveAvailableExceptionEnum fromValue(String value) {
      for (AllInclusiveAvailableExceptionEnum b : AllInclusiveAvailableExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllInclusiveAvailableExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllInclusiveAvailableExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllInclusiveAvailableExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllInclusiveAvailableExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllInclusiveAvailableExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALL_INCLUSIVE_AVAILABLE_EXCEPTION = "allInclusiveAvailableException";
  @SerializedName(SERIALIZED_NAME_ALL_INCLUSIVE_AVAILABLE_EXCEPTION)
  private AllInclusiveAvailableExceptionEnum allInclusiveAvailableException;

  public static final String SERIALIZED_NAME_ALL_INCLUSIVE_ONLY = "allInclusiveOnly";
  @SerializedName(SERIALIZED_NAME_ALL_INCLUSIVE_ONLY)
  private Boolean allInclusiveOnly;

  /**
   * All inclusive only exception.
   */
  @JsonAdapter(AllInclusiveOnlyExceptionEnum.Adapter.class)
  public enum AllInclusiveOnlyExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    AllInclusiveOnlyExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllInclusiveOnlyExceptionEnum fromValue(String value) {
      for (AllInclusiveOnlyExceptionEnum b : AllInclusiveOnlyExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllInclusiveOnlyExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllInclusiveOnlyExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllInclusiveOnlyExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllInclusiveOnlyExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllInclusiveOnlyExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALL_INCLUSIVE_ONLY_EXCEPTION = "allInclusiveOnlyException";
  @SerializedName(SERIALIZED_NAME_ALL_INCLUSIVE_ONLY_EXCEPTION)
  private AllInclusiveOnlyExceptionEnum allInclusiveOnlyException;

  public static final String SERIALIZED_NAME_CHECKIN_TIME = "checkinTime";
  @SerializedName(SERIALIZED_NAME_CHECKIN_TIME)
  private TimeOfDay checkinTime;

  /**
   * Check-in time exception.
   */
  @JsonAdapter(CheckinTimeExceptionEnum.Adapter.class)
  public enum CheckinTimeExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CheckinTimeExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CheckinTimeExceptionEnum fromValue(String value) {
      for (CheckinTimeExceptionEnum b : CheckinTimeExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CheckinTimeExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CheckinTimeExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CheckinTimeExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CheckinTimeExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CheckinTimeExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHECKIN_TIME_EXCEPTION = "checkinTimeException";
  @SerializedName(SERIALIZED_NAME_CHECKIN_TIME_EXCEPTION)
  private CheckinTimeExceptionEnum checkinTimeException;

  public static final String SERIALIZED_NAME_CHECKOUT_TIME = "checkoutTime";
  @SerializedName(SERIALIZED_NAME_CHECKOUT_TIME)
  private TimeOfDay checkoutTime;

  /**
   * Check-out time exception.
   */
  @JsonAdapter(CheckoutTimeExceptionEnum.Adapter.class)
  public enum CheckoutTimeExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CheckoutTimeExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CheckoutTimeExceptionEnum fromValue(String value) {
      for (CheckoutTimeExceptionEnum b : CheckoutTimeExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CheckoutTimeExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CheckoutTimeExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CheckoutTimeExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CheckoutTimeExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CheckoutTimeExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHECKOUT_TIME_EXCEPTION = "checkoutTimeException";
  @SerializedName(SERIALIZED_NAME_CHECKOUT_TIME_EXCEPTION)
  private CheckoutTimeExceptionEnum checkoutTimeException;

  public static final String SERIALIZED_NAME_KIDS_STAY_FREE = "kidsStayFree";
  @SerializedName(SERIALIZED_NAME_KIDS_STAY_FREE)
  private Boolean kidsStayFree;

  /**
   * Kids stay free exception.
   */
  @JsonAdapter(KidsStayFreeExceptionEnum.Adapter.class)
  public enum KidsStayFreeExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    KidsStayFreeExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KidsStayFreeExceptionEnum fromValue(String value) {
      for (KidsStayFreeExceptionEnum b : KidsStayFreeExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KidsStayFreeExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KidsStayFreeExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KidsStayFreeExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KidsStayFreeExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KidsStayFreeExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIDS_STAY_FREE_EXCEPTION = "kidsStayFreeException";
  @SerializedName(SERIALIZED_NAME_KIDS_STAY_FREE_EXCEPTION)
  private KidsStayFreeExceptionEnum kidsStayFreeException;

  public static final String SERIALIZED_NAME_MAX_CHILD_AGE = "maxChildAge";
  @SerializedName(SERIALIZED_NAME_MAX_CHILD_AGE)
  private Integer maxChildAge;

  /**
   * Max child age exception.
   */
  @JsonAdapter(MaxChildAgeExceptionEnum.Adapter.class)
  public enum MaxChildAgeExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    MaxChildAgeExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaxChildAgeExceptionEnum fromValue(String value) {
      for (MaxChildAgeExceptionEnum b : MaxChildAgeExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaxChildAgeExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaxChildAgeExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaxChildAgeExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaxChildAgeExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MaxChildAgeExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAX_CHILD_AGE_EXCEPTION = "maxChildAgeException";
  @SerializedName(SERIALIZED_NAME_MAX_CHILD_AGE_EXCEPTION)
  private MaxChildAgeExceptionEnum maxChildAgeException;

  public static final String SERIALIZED_NAME_MAX_KIDS_STAY_FREE_COUNT = "maxKidsStayFreeCount";
  @SerializedName(SERIALIZED_NAME_MAX_KIDS_STAY_FREE_COUNT)
  private Integer maxKidsStayFreeCount;

  /**
   * Max kids stay free count exception.
   */
  @JsonAdapter(MaxKidsStayFreeCountExceptionEnum.Adapter.class)
  public enum MaxKidsStayFreeCountExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    MaxKidsStayFreeCountExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaxKidsStayFreeCountExceptionEnum fromValue(String value) {
      for (MaxKidsStayFreeCountExceptionEnum b : MaxKidsStayFreeCountExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaxKidsStayFreeCountExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaxKidsStayFreeCountExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaxKidsStayFreeCountExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaxKidsStayFreeCountExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MaxKidsStayFreeCountExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAX_KIDS_STAY_FREE_COUNT_EXCEPTION = "maxKidsStayFreeCountException";
  @SerializedName(SERIALIZED_NAME_MAX_KIDS_STAY_FREE_COUNT_EXCEPTION)
  private MaxKidsStayFreeCountExceptionEnum maxKidsStayFreeCountException;

  public static final String SERIALIZED_NAME_PAYMENT_OPTIONS = "paymentOptions";
  @SerializedName(SERIALIZED_NAME_PAYMENT_OPTIONS)
  private PaymentOptions paymentOptions;

  public static final String SERIALIZED_NAME_SMOKE_FREE_PROPERTY = "smokeFreeProperty";
  @SerializedName(SERIALIZED_NAME_SMOKE_FREE_PROPERTY)
  private Boolean smokeFreeProperty;

  /**
   * Smoke free property exception.
   */
  @JsonAdapter(SmokeFreePropertyExceptionEnum.Adapter.class)
  public enum SmokeFreePropertyExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SmokeFreePropertyExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SmokeFreePropertyExceptionEnum fromValue(String value) {
      for (SmokeFreePropertyExceptionEnum b : SmokeFreePropertyExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SmokeFreePropertyExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SmokeFreePropertyExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SmokeFreePropertyExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SmokeFreePropertyExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SmokeFreePropertyExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SMOKE_FREE_PROPERTY_EXCEPTION = "smokeFreePropertyException";
  @SerializedName(SERIALIZED_NAME_SMOKE_FREE_PROPERTY_EXCEPTION)
  private SmokeFreePropertyExceptionEnum smokeFreePropertyException;

  public Policies() {
  }

  public Policies allInclusiveAvailable(Boolean allInclusiveAvailable) {
    this.allInclusiveAvailable = allInclusiveAvailable;
    return this;
  }

  /**
   * All inclusive available. The hotel offers a rate option that includes the cost of the room, meals, activities, and other amenities that might otherwise be charged separately.
   * @return allInclusiveAvailable
   */
  @javax.annotation.Nullable
  public Boolean getAllInclusiveAvailable() {
    return allInclusiveAvailable;
  }

  public void setAllInclusiveAvailable(Boolean allInclusiveAvailable) {
    this.allInclusiveAvailable = allInclusiveAvailable;
  }


  public Policies allInclusiveAvailableException(AllInclusiveAvailableExceptionEnum allInclusiveAvailableException) {
    this.allInclusiveAvailableException = allInclusiveAvailableException;
    return this;
  }

  /**
   * All inclusive available exception.
   * @return allInclusiveAvailableException
   */
  @javax.annotation.Nullable
  public AllInclusiveAvailableExceptionEnum getAllInclusiveAvailableException() {
    return allInclusiveAvailableException;
  }

  public void setAllInclusiveAvailableException(AllInclusiveAvailableExceptionEnum allInclusiveAvailableException) {
    this.allInclusiveAvailableException = allInclusiveAvailableException;
  }


  public Policies allInclusiveOnly(Boolean allInclusiveOnly) {
    this.allInclusiveOnly = allInclusiveOnly;
    return this;
  }

  /**
   * All inclusive only. The only rate option offered by the hotel is a rate that includes the cost of the room, meals, activities and other amenities that might otherwise be charged separately.
   * @return allInclusiveOnly
   */
  @javax.annotation.Nullable
  public Boolean getAllInclusiveOnly() {
    return allInclusiveOnly;
  }

  public void setAllInclusiveOnly(Boolean allInclusiveOnly) {
    this.allInclusiveOnly = allInclusiveOnly;
  }


  public Policies allInclusiveOnlyException(AllInclusiveOnlyExceptionEnum allInclusiveOnlyException) {
    this.allInclusiveOnlyException = allInclusiveOnlyException;
    return this;
  }

  /**
   * All inclusive only exception.
   * @return allInclusiveOnlyException
   */
  @javax.annotation.Nullable
  public AllInclusiveOnlyExceptionEnum getAllInclusiveOnlyException() {
    return allInclusiveOnlyException;
  }

  public void setAllInclusiveOnlyException(AllInclusiveOnlyExceptionEnum allInclusiveOnlyException) {
    this.allInclusiveOnlyException = allInclusiveOnlyException;
  }


  public Policies checkinTime(TimeOfDay checkinTime) {
    this.checkinTime = checkinTime;
    return this;
  }

  /**
   * Get checkinTime
   * @return checkinTime
   */
  @javax.annotation.Nullable
  public TimeOfDay getCheckinTime() {
    return checkinTime;
  }

  public void setCheckinTime(TimeOfDay checkinTime) {
    this.checkinTime = checkinTime;
  }


  public Policies checkinTimeException(CheckinTimeExceptionEnum checkinTimeException) {
    this.checkinTimeException = checkinTimeException;
    return this;
  }

  /**
   * Check-in time exception.
   * @return checkinTimeException
   */
  @javax.annotation.Nullable
  public CheckinTimeExceptionEnum getCheckinTimeException() {
    return checkinTimeException;
  }

  public void setCheckinTimeException(CheckinTimeExceptionEnum checkinTimeException) {
    this.checkinTimeException = checkinTimeException;
  }


  public Policies checkoutTime(TimeOfDay checkoutTime) {
    this.checkoutTime = checkoutTime;
    return this;
  }

  /**
   * Get checkoutTime
   * @return checkoutTime
   */
  @javax.annotation.Nullable
  public TimeOfDay getCheckoutTime() {
    return checkoutTime;
  }

  public void setCheckoutTime(TimeOfDay checkoutTime) {
    this.checkoutTime = checkoutTime;
  }


  public Policies checkoutTimeException(CheckoutTimeExceptionEnum checkoutTimeException) {
    this.checkoutTimeException = checkoutTimeException;
    return this;
  }

  /**
   * Check-out time exception.
   * @return checkoutTimeException
   */
  @javax.annotation.Nullable
  public CheckoutTimeExceptionEnum getCheckoutTimeException() {
    return checkoutTimeException;
  }

  public void setCheckoutTimeException(CheckoutTimeExceptionEnum checkoutTimeException) {
    this.checkoutTimeException = checkoutTimeException;
  }


  public Policies kidsStayFree(Boolean kidsStayFree) {
    this.kidsStayFree = kidsStayFree;
    return this;
  }

  /**
   * Kids stay free. The children of guests are allowed to stay in the room/suite of a parent or adult without an additional fee. The policy may or may not stipulate a limit of the child&#39;s age or the overall number of children allowed.
   * @return kidsStayFree
   */
  @javax.annotation.Nullable
  public Boolean getKidsStayFree() {
    return kidsStayFree;
  }

  public void setKidsStayFree(Boolean kidsStayFree) {
    this.kidsStayFree = kidsStayFree;
  }


  public Policies kidsStayFreeException(KidsStayFreeExceptionEnum kidsStayFreeException) {
    this.kidsStayFreeException = kidsStayFreeException;
    return this;
  }

  /**
   * Kids stay free exception.
   * @return kidsStayFreeException
   */
  @javax.annotation.Nullable
  public KidsStayFreeExceptionEnum getKidsStayFreeException() {
    return kidsStayFreeException;
  }

  public void setKidsStayFreeException(KidsStayFreeExceptionEnum kidsStayFreeException) {
    this.kidsStayFreeException = kidsStayFreeException;
  }


  public Policies maxChildAge(Integer maxChildAge) {
    this.maxChildAge = maxChildAge;
    return this;
  }

  /**
   * Max child age. The hotel allows children up to a certain age to stay in the room/suite of a parent or adult without an additional fee.
   * @return maxChildAge
   */
  @javax.annotation.Nullable
  public Integer getMaxChildAge() {
    return maxChildAge;
  }

  public void setMaxChildAge(Integer maxChildAge) {
    this.maxChildAge = maxChildAge;
  }


  public Policies maxChildAgeException(MaxChildAgeExceptionEnum maxChildAgeException) {
    this.maxChildAgeException = maxChildAgeException;
    return this;
  }

  /**
   * Max child age exception.
   * @return maxChildAgeException
   */
  @javax.annotation.Nullable
  public MaxChildAgeExceptionEnum getMaxChildAgeException() {
    return maxChildAgeException;
  }

  public void setMaxChildAgeException(MaxChildAgeExceptionEnum maxChildAgeException) {
    this.maxChildAgeException = maxChildAgeException;
  }


  public Policies maxKidsStayFreeCount(Integer maxKidsStayFreeCount) {
    this.maxKidsStayFreeCount = maxKidsStayFreeCount;
    return this;
  }

  /**
   * Max kids stay free count. The hotel allows a specific, defined number of children to stay in the room/suite of a parent or adult without an additional fee.
   * @return maxKidsStayFreeCount
   */
  @javax.annotation.Nullable
  public Integer getMaxKidsStayFreeCount() {
    return maxKidsStayFreeCount;
  }

  public void setMaxKidsStayFreeCount(Integer maxKidsStayFreeCount) {
    this.maxKidsStayFreeCount = maxKidsStayFreeCount;
  }


  public Policies maxKidsStayFreeCountException(MaxKidsStayFreeCountExceptionEnum maxKidsStayFreeCountException) {
    this.maxKidsStayFreeCountException = maxKidsStayFreeCountException;
    return this;
  }

  /**
   * Max kids stay free count exception.
   * @return maxKidsStayFreeCountException
   */
  @javax.annotation.Nullable
  public MaxKidsStayFreeCountExceptionEnum getMaxKidsStayFreeCountException() {
    return maxKidsStayFreeCountException;
  }

  public void setMaxKidsStayFreeCountException(MaxKidsStayFreeCountExceptionEnum maxKidsStayFreeCountException) {
    this.maxKidsStayFreeCountException = maxKidsStayFreeCountException;
  }


  public Policies paymentOptions(PaymentOptions paymentOptions) {
    this.paymentOptions = paymentOptions;
    return this;
  }

  /**
   * Get paymentOptions
   * @return paymentOptions
   */
  @javax.annotation.Nullable
  public PaymentOptions getPaymentOptions() {
    return paymentOptions;
  }

  public void setPaymentOptions(PaymentOptions paymentOptions) {
    this.paymentOptions = paymentOptions;
  }


  public Policies smokeFreeProperty(Boolean smokeFreeProperty) {
    this.smokeFreeProperty = smokeFreeProperty;
    return this;
  }

  /**
   * Smoke free property. Smoking is not allowed inside the building, on balconies, or in outside spaces. Hotels that offer a designated area for guests to smoke are not considered smoke-free properties.
   * @return smokeFreeProperty
   */
  @javax.annotation.Nullable
  public Boolean getSmokeFreeProperty() {
    return smokeFreeProperty;
  }

  public void setSmokeFreeProperty(Boolean smokeFreeProperty) {
    this.smokeFreeProperty = smokeFreeProperty;
  }


  public Policies smokeFreePropertyException(SmokeFreePropertyExceptionEnum smokeFreePropertyException) {
    this.smokeFreePropertyException = smokeFreePropertyException;
    return this;
  }

  /**
   * Smoke free property exception.
   * @return smokeFreePropertyException
   */
  @javax.annotation.Nullable
  public SmokeFreePropertyExceptionEnum getSmokeFreePropertyException() {
    return smokeFreePropertyException;
  }

  public void setSmokeFreePropertyException(SmokeFreePropertyExceptionEnum smokeFreePropertyException) {
    this.smokeFreePropertyException = smokeFreePropertyException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Policies policies = (Policies) o;
    return Objects.equals(this.allInclusiveAvailable, policies.allInclusiveAvailable) &&
        Objects.equals(this.allInclusiveAvailableException, policies.allInclusiveAvailableException) &&
        Objects.equals(this.allInclusiveOnly, policies.allInclusiveOnly) &&
        Objects.equals(this.allInclusiveOnlyException, policies.allInclusiveOnlyException) &&
        Objects.equals(this.checkinTime, policies.checkinTime) &&
        Objects.equals(this.checkinTimeException, policies.checkinTimeException) &&
        Objects.equals(this.checkoutTime, policies.checkoutTime) &&
        Objects.equals(this.checkoutTimeException, policies.checkoutTimeException) &&
        Objects.equals(this.kidsStayFree, policies.kidsStayFree) &&
        Objects.equals(this.kidsStayFreeException, policies.kidsStayFreeException) &&
        Objects.equals(this.maxChildAge, policies.maxChildAge) &&
        Objects.equals(this.maxChildAgeException, policies.maxChildAgeException) &&
        Objects.equals(this.maxKidsStayFreeCount, policies.maxKidsStayFreeCount) &&
        Objects.equals(this.maxKidsStayFreeCountException, policies.maxKidsStayFreeCountException) &&
        Objects.equals(this.paymentOptions, policies.paymentOptions) &&
        Objects.equals(this.smokeFreeProperty, policies.smokeFreeProperty) &&
        Objects.equals(this.smokeFreePropertyException, policies.smokeFreePropertyException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allInclusiveAvailable, allInclusiveAvailableException, allInclusiveOnly, allInclusiveOnlyException, checkinTime, checkinTimeException, checkoutTime, checkoutTimeException, kidsStayFree, kidsStayFreeException, maxChildAge, maxChildAgeException, maxKidsStayFreeCount, maxKidsStayFreeCountException, paymentOptions, smokeFreeProperty, smokeFreePropertyException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Policies {\n");
    sb.append("    allInclusiveAvailable: ").append(toIndentedString(allInclusiveAvailable)).append("\n");
    sb.append("    allInclusiveAvailableException: ").append(toIndentedString(allInclusiveAvailableException)).append("\n");
    sb.append("    allInclusiveOnly: ").append(toIndentedString(allInclusiveOnly)).append("\n");
    sb.append("    allInclusiveOnlyException: ").append(toIndentedString(allInclusiveOnlyException)).append("\n");
    sb.append("    checkinTime: ").append(toIndentedString(checkinTime)).append("\n");
    sb.append("    checkinTimeException: ").append(toIndentedString(checkinTimeException)).append("\n");
    sb.append("    checkoutTime: ").append(toIndentedString(checkoutTime)).append("\n");
    sb.append("    checkoutTimeException: ").append(toIndentedString(checkoutTimeException)).append("\n");
    sb.append("    kidsStayFree: ").append(toIndentedString(kidsStayFree)).append("\n");
    sb.append("    kidsStayFreeException: ").append(toIndentedString(kidsStayFreeException)).append("\n");
    sb.append("    maxChildAge: ").append(toIndentedString(maxChildAge)).append("\n");
    sb.append("    maxChildAgeException: ").append(toIndentedString(maxChildAgeException)).append("\n");
    sb.append("    maxKidsStayFreeCount: ").append(toIndentedString(maxKidsStayFreeCount)).append("\n");
    sb.append("    maxKidsStayFreeCountException: ").append(toIndentedString(maxKidsStayFreeCountException)).append("\n");
    sb.append("    paymentOptions: ").append(toIndentedString(paymentOptions)).append("\n");
    sb.append("    smokeFreeProperty: ").append(toIndentedString(smokeFreeProperty)).append("\n");
    sb.append("    smokeFreePropertyException: ").append(toIndentedString(smokeFreePropertyException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allInclusiveAvailable");
    openapiFields.add("allInclusiveAvailableException");
    openapiFields.add("allInclusiveOnly");
    openapiFields.add("allInclusiveOnlyException");
    openapiFields.add("checkinTime");
    openapiFields.add("checkinTimeException");
    openapiFields.add("checkoutTime");
    openapiFields.add("checkoutTimeException");
    openapiFields.add("kidsStayFree");
    openapiFields.add("kidsStayFreeException");
    openapiFields.add("maxChildAge");
    openapiFields.add("maxChildAgeException");
    openapiFields.add("maxKidsStayFreeCount");
    openapiFields.add("maxKidsStayFreeCountException");
    openapiFields.add("paymentOptions");
    openapiFields.add("smokeFreeProperty");
    openapiFields.add("smokeFreePropertyException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Policies
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Policies.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Policies is not found in the empty JSON string", Policies.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Policies.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Policies` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allInclusiveAvailableException") != null && !jsonObj.get("allInclusiveAvailableException").isJsonNull()) && !jsonObj.get("allInclusiveAvailableException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allInclusiveAvailableException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allInclusiveAvailableException").toString()));
      }
      // validate the optional field `allInclusiveAvailableException`
      if (jsonObj.get("allInclusiveAvailableException") != null && !jsonObj.get("allInclusiveAvailableException").isJsonNull()) {
        AllInclusiveAvailableExceptionEnum.validateJsonElement(jsonObj.get("allInclusiveAvailableException"));
      }
      if ((jsonObj.get("allInclusiveOnlyException") != null && !jsonObj.get("allInclusiveOnlyException").isJsonNull()) && !jsonObj.get("allInclusiveOnlyException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allInclusiveOnlyException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allInclusiveOnlyException").toString()));
      }
      // validate the optional field `allInclusiveOnlyException`
      if (jsonObj.get("allInclusiveOnlyException") != null && !jsonObj.get("allInclusiveOnlyException").isJsonNull()) {
        AllInclusiveOnlyExceptionEnum.validateJsonElement(jsonObj.get("allInclusiveOnlyException"));
      }
      // validate the optional field `checkinTime`
      if (jsonObj.get("checkinTime") != null && !jsonObj.get("checkinTime").isJsonNull()) {
        TimeOfDay.validateJsonElement(jsonObj.get("checkinTime"));
      }
      if ((jsonObj.get("checkinTimeException") != null && !jsonObj.get("checkinTimeException").isJsonNull()) && !jsonObj.get("checkinTimeException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkinTimeException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkinTimeException").toString()));
      }
      // validate the optional field `checkinTimeException`
      if (jsonObj.get("checkinTimeException") != null && !jsonObj.get("checkinTimeException").isJsonNull()) {
        CheckinTimeExceptionEnum.validateJsonElement(jsonObj.get("checkinTimeException"));
      }
      // validate the optional field `checkoutTime`
      if (jsonObj.get("checkoutTime") != null && !jsonObj.get("checkoutTime").isJsonNull()) {
        TimeOfDay.validateJsonElement(jsonObj.get("checkoutTime"));
      }
      if ((jsonObj.get("checkoutTimeException") != null && !jsonObj.get("checkoutTimeException").isJsonNull()) && !jsonObj.get("checkoutTimeException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkoutTimeException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkoutTimeException").toString()));
      }
      // validate the optional field `checkoutTimeException`
      if (jsonObj.get("checkoutTimeException") != null && !jsonObj.get("checkoutTimeException").isJsonNull()) {
        CheckoutTimeExceptionEnum.validateJsonElement(jsonObj.get("checkoutTimeException"));
      }
      if ((jsonObj.get("kidsStayFreeException") != null && !jsonObj.get("kidsStayFreeException").isJsonNull()) && !jsonObj.get("kidsStayFreeException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kidsStayFreeException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kidsStayFreeException").toString()));
      }
      // validate the optional field `kidsStayFreeException`
      if (jsonObj.get("kidsStayFreeException") != null && !jsonObj.get("kidsStayFreeException").isJsonNull()) {
        KidsStayFreeExceptionEnum.validateJsonElement(jsonObj.get("kidsStayFreeException"));
      }
      if ((jsonObj.get("maxChildAgeException") != null && !jsonObj.get("maxChildAgeException").isJsonNull()) && !jsonObj.get("maxChildAgeException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxChildAgeException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxChildAgeException").toString()));
      }
      // validate the optional field `maxChildAgeException`
      if (jsonObj.get("maxChildAgeException") != null && !jsonObj.get("maxChildAgeException").isJsonNull()) {
        MaxChildAgeExceptionEnum.validateJsonElement(jsonObj.get("maxChildAgeException"));
      }
      if ((jsonObj.get("maxKidsStayFreeCountException") != null && !jsonObj.get("maxKidsStayFreeCountException").isJsonNull()) && !jsonObj.get("maxKidsStayFreeCountException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxKidsStayFreeCountException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxKidsStayFreeCountException").toString()));
      }
      // validate the optional field `maxKidsStayFreeCountException`
      if (jsonObj.get("maxKidsStayFreeCountException") != null && !jsonObj.get("maxKidsStayFreeCountException").isJsonNull()) {
        MaxKidsStayFreeCountExceptionEnum.validateJsonElement(jsonObj.get("maxKidsStayFreeCountException"));
      }
      // validate the optional field `paymentOptions`
      if (jsonObj.get("paymentOptions") != null && !jsonObj.get("paymentOptions").isJsonNull()) {
        PaymentOptions.validateJsonElement(jsonObj.get("paymentOptions"));
      }
      if ((jsonObj.get("smokeFreePropertyException") != null && !jsonObj.get("smokeFreePropertyException").isJsonNull()) && !jsonObj.get("smokeFreePropertyException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smokeFreePropertyException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smokeFreePropertyException").toString()));
      }
      // validate the optional field `smokeFreePropertyException`
      if (jsonObj.get("smokeFreePropertyException") != null && !jsonObj.get("smokeFreePropertyException").isJsonNull()) {
        SmokeFreePropertyExceptionEnum.validateJsonElement(jsonObj.get("smokeFreePropertyException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Policies.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Policies' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Policies> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Policies.class));

       return (TypeAdapter<T>) new TypeAdapter<Policies>() {
           @Override
           public void write(JsonWriter out, Policies value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Policies read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Policies given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Policies
   * @throws IOException if the JSON string is invalid with respect to Policies
   */
  public static Policies fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Policies.class);
  }

  /**
   * Convert an instance of Policies to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

