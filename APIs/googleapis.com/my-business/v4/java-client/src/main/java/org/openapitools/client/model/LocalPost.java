/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CallToAction;
import org.openapitools.client.model.LocalPostEvent;
import org.openapitools.client.model.LocalPostOffer;
import org.openapitools.client.model.MediaItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a [local post](https://support.google.com/business/answer/7662907) for a location.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LocalPost {
  /**
   * The type of alert the post is created for. This field is only applicable for posts of topic_type Alert, and behaves as a sub-type of Alerts.
   */
  @JsonAdapter(AlertTypeEnum.Adapter.class)
  public enum AlertTypeEnum {
    ALERT_TYPE_UNSPECIFIED("ALERT_TYPE_UNSPECIFIED"),
    
    COVID_19("COVID_19");

    private String value;

    AlertTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlertTypeEnum fromValue(String value) {
      for (AlertTypeEnum b : AlertTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlertTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlertTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlertTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlertTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AlertTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALERT_TYPE = "alertType";
  @SerializedName(SERIALIZED_NAME_ALERT_TYPE)
  private AlertTypeEnum alertType;

  public static final String SERIALIZED_NAME_CALL_TO_ACTION = "callToAction";
  @SerializedName(SERIALIZED_NAME_CALL_TO_ACTION)
  private CallToAction callToAction;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private LocalPostEvent event;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private List<MediaItem> media = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OFFER = "offer";
  @SerializedName(SERIALIZED_NAME_OFFER)
  private LocalPostOffer offer;

  public static final String SERIALIZED_NAME_SEARCH_URL = "searchUrl";
  @SerializedName(SERIALIZED_NAME_SEARCH_URL)
  private String searchUrl;

  /**
   * Output only. The state of the post, indicating what part of its lifecycle it is in.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    LOCAL_POST_STATE_UNSPECIFIED("LOCAL_POST_STATE_UNSPECIFIED"),
    
    REJECTED("REJECTED"),
    
    LIVE("LIVE"),
    
    PROCESSING("PROCESSING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  /**
   * Required. The topic type of the post: standard, event, offer, or alert.
   */
  @JsonAdapter(TopicTypeEnum.Adapter.class)
  public enum TopicTypeEnum {
    LOCAL_POST_TOPIC_TYPE_UNSPECIFIED("LOCAL_POST_TOPIC_TYPE_UNSPECIFIED"),
    
    STANDARD("STANDARD"),
    
    EVENT("EVENT"),
    
    OFFER("OFFER"),
    
    ALERT("ALERT");

    private String value;

    TopicTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TopicTypeEnum fromValue(String value) {
      for (TopicTypeEnum b : TopicTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TopicTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TopicTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TopicTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TopicTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TopicTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TOPIC_TYPE = "topicType";
  @SerializedName(SERIALIZED_NAME_TOPIC_TYPE)
  private TopicTypeEnum topicType;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public LocalPost() {
  }

  public LocalPost alertType(AlertTypeEnum alertType) {
    this.alertType = alertType;
    return this;
  }

  /**
   * The type of alert the post is created for. This field is only applicable for posts of topic_type Alert, and behaves as a sub-type of Alerts.
   * @return alertType
   */
  @javax.annotation.Nullable
  public AlertTypeEnum getAlertType() {
    return alertType;
  }

  public void setAlertType(AlertTypeEnum alertType) {
    this.alertType = alertType;
  }


  public LocalPost callToAction(CallToAction callToAction) {
    this.callToAction = callToAction;
    return this;
  }

  /**
   * Get callToAction
   * @return callToAction
   */
  @javax.annotation.Nullable
  public CallToAction getCallToAction() {
    return callToAction;
  }

  public void setCallToAction(CallToAction callToAction) {
    this.callToAction = callToAction;
  }


  public LocalPost createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. Time of the creation of the post.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public LocalPost event(LocalPostEvent event) {
    this.event = event;
    return this;
  }

  /**
   * Get event
   * @return event
   */
  @javax.annotation.Nullable
  public LocalPostEvent getEvent() {
    return event;
  }

  public void setEvent(LocalPostEvent event) {
    this.event = event;
  }


  public LocalPost languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * The language of the local post.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public LocalPost media(List<MediaItem> media) {
    this.media = media;
    return this;
  }

  public LocalPost addMediaItem(MediaItem mediaItem) {
    if (this.media == null) {
      this.media = new ArrayList<>();
    }
    this.media.add(mediaItem);
    return this;
  }

  /**
   * The media associated with the post. source_url is the only supported data field for a LocalPost MediaItem.
   * @return media
   */
  @javax.annotation.Nullable
  public List<MediaItem> getMedia() {
    return media;
  }

  public void setMedia(List<MediaItem> media) {
    this.media = media;
  }


  public LocalPost name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. Google identifier for this local post in the form: &#x60;accounts/{account_id}/locations/{location_id}/localPosts/{local_post_id}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LocalPost offer(LocalPostOffer offer) {
    this.offer = offer;
    return this;
  }

  /**
   * Get offer
   * @return offer
   */
  @javax.annotation.Nullable
  public LocalPostOffer getOffer() {
    return offer;
  }

  public void setOffer(LocalPostOffer offer) {
    this.offer = offer;
  }


  public LocalPost searchUrl(String searchUrl) {
    this.searchUrl = searchUrl;
    return this;
  }

  /**
   * Output only. The link to the local post in Google search. This link can be used to share the post via social media, email, text, etc.
   * @return searchUrl
   */
  @javax.annotation.Nullable
  public String getSearchUrl() {
    return searchUrl;
  }

  public void setSearchUrl(String searchUrl) {
    this.searchUrl = searchUrl;
  }


  public LocalPost state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. The state of the post, indicating what part of its lifecycle it is in.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public LocalPost summary(String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Description/body of the local post.
   * @return summary
   */
  @javax.annotation.Nullable
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }


  public LocalPost topicType(TopicTypeEnum topicType) {
    this.topicType = topicType;
    return this;
  }

  /**
   * Required. The topic type of the post: standard, event, offer, or alert.
   * @return topicType
   */
  @javax.annotation.Nullable
  public TopicTypeEnum getTopicType() {
    return topicType;
  }

  public void setTopicType(TopicTypeEnum topicType) {
    this.topicType = topicType;
  }


  public LocalPost updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Output only. Time of the last modification of the post made by the user.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocalPost localPost = (LocalPost) o;
    return Objects.equals(this.alertType, localPost.alertType) &&
        Objects.equals(this.callToAction, localPost.callToAction) &&
        Objects.equals(this.createTime, localPost.createTime) &&
        Objects.equals(this.event, localPost.event) &&
        Objects.equals(this.languageCode, localPost.languageCode) &&
        Objects.equals(this.media, localPost.media) &&
        Objects.equals(this.name, localPost.name) &&
        Objects.equals(this.offer, localPost.offer) &&
        Objects.equals(this.searchUrl, localPost.searchUrl) &&
        Objects.equals(this.state, localPost.state) &&
        Objects.equals(this.summary, localPost.summary) &&
        Objects.equals(this.topicType, localPost.topicType) &&
        Objects.equals(this.updateTime, localPost.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertType, callToAction, createTime, event, languageCode, media, name, offer, searchUrl, state, summary, topicType, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocalPost {\n");
    sb.append("    alertType: ").append(toIndentedString(alertType)).append("\n");
    sb.append("    callToAction: ").append(toIndentedString(callToAction)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    offer: ").append(toIndentedString(offer)).append("\n");
    sb.append("    searchUrl: ").append(toIndentedString(searchUrl)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    topicType: ").append(toIndentedString(topicType)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alertType");
    openapiFields.add("callToAction");
    openapiFields.add("createTime");
    openapiFields.add("event");
    openapiFields.add("languageCode");
    openapiFields.add("media");
    openapiFields.add("name");
    openapiFields.add("offer");
    openapiFields.add("searchUrl");
    openapiFields.add("state");
    openapiFields.add("summary");
    openapiFields.add("topicType");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LocalPost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LocalPost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LocalPost is not found in the empty JSON string", LocalPost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LocalPost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LocalPost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alertType") != null && !jsonObj.get("alertType").isJsonNull()) && !jsonObj.get("alertType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertType").toString()));
      }
      // validate the optional field `alertType`
      if (jsonObj.get("alertType") != null && !jsonObj.get("alertType").isJsonNull()) {
        AlertTypeEnum.validateJsonElement(jsonObj.get("alertType"));
      }
      // validate the optional field `callToAction`
      if (jsonObj.get("callToAction") != null && !jsonObj.get("callToAction").isJsonNull()) {
        CallToAction.validateJsonElement(jsonObj.get("callToAction"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `event`
      if (jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) {
        LocalPostEvent.validateJsonElement(jsonObj.get("event"));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if (jsonObj.get("media") != null && !jsonObj.get("media").isJsonNull()) {
        JsonArray jsonArraymedia = jsonObj.getAsJsonArray("media");
        if (jsonArraymedia != null) {
          // ensure the json data is an array
          if (!jsonObj.get("media").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `media` to be an array in the JSON string but got `%s`", jsonObj.get("media").toString()));
          }

          // validate the optional field `media` (array)
          for (int i = 0; i < jsonArraymedia.size(); i++) {
            MediaItem.validateJsonElement(jsonArraymedia.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `offer`
      if (jsonObj.get("offer") != null && !jsonObj.get("offer").isJsonNull()) {
        LocalPostOffer.validateJsonElement(jsonObj.get("offer"));
      }
      if ((jsonObj.get("searchUrl") != null && !jsonObj.get("searchUrl").isJsonNull()) && !jsonObj.get("searchUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchUrl").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if ((jsonObj.get("topicType") != null && !jsonObj.get("topicType").isJsonNull()) && !jsonObj.get("topicType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topicType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topicType").toString()));
      }
      // validate the optional field `topicType`
      if (jsonObj.get("topicType") != null && !jsonObj.get("topicType").isJsonNull()) {
        TopicTypeEnum.validateJsonElement(jsonObj.get("topicType"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LocalPost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LocalPost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LocalPost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LocalPost.class));

       return (TypeAdapter<T>) new TypeAdapter<LocalPost>() {
           @Override
           public void write(JsonWriter out, LocalPost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LocalPost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LocalPost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LocalPost
   * @throws IOException if the JSON string is invalid with respect to LocalPost
   */
  public static LocalPost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LocalPost.class);
  }

  /**
   * Convert an instance of LocalPost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

