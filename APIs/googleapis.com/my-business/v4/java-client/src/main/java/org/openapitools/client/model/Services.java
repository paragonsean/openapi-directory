/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LanguagesSpoken;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Conveniences or help provided by the property to facilitate an easier, more comfortable stay.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Services {
  public static final String SERIALIZED_NAME_BAGGAGE_STORAGE = "baggageStorage";
  @SerializedName(SERIALIZED_NAME_BAGGAGE_STORAGE)
  private Boolean baggageStorage;

  /**
   * Baggage storage exception.
   */
  @JsonAdapter(BaggageStorageExceptionEnum.Adapter.class)
  public enum BaggageStorageExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BaggageStorageExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BaggageStorageExceptionEnum fromValue(String value) {
      for (BaggageStorageExceptionEnum b : BaggageStorageExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BaggageStorageExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BaggageStorageExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BaggageStorageExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BaggageStorageExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BaggageStorageExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BAGGAGE_STORAGE_EXCEPTION = "baggageStorageException";
  @SerializedName(SERIALIZED_NAME_BAGGAGE_STORAGE_EXCEPTION)
  private BaggageStorageExceptionEnum baggageStorageException;

  public static final String SERIALIZED_NAME_CONCIERGE = "concierge";
  @SerializedName(SERIALIZED_NAME_CONCIERGE)
  private Boolean concierge;

  /**
   * Concierge exception.
   */
  @JsonAdapter(ConciergeExceptionEnum.Adapter.class)
  public enum ConciergeExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ConciergeExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConciergeExceptionEnum fromValue(String value) {
      for (ConciergeExceptionEnum b : ConciergeExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConciergeExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConciergeExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConciergeExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConciergeExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConciergeExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONCIERGE_EXCEPTION = "conciergeException";
  @SerializedName(SERIALIZED_NAME_CONCIERGE_EXCEPTION)
  private ConciergeExceptionEnum conciergeException;

  public static final String SERIALIZED_NAME_CONVENIENCE_STORE = "convenienceStore";
  @SerializedName(SERIALIZED_NAME_CONVENIENCE_STORE)
  private Boolean convenienceStore;

  /**
   * Convenience store exception.
   */
  @JsonAdapter(ConvenienceStoreExceptionEnum.Adapter.class)
  public enum ConvenienceStoreExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ConvenienceStoreExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConvenienceStoreExceptionEnum fromValue(String value) {
      for (ConvenienceStoreExceptionEnum b : ConvenienceStoreExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConvenienceStoreExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConvenienceStoreExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConvenienceStoreExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConvenienceStoreExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConvenienceStoreExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONVENIENCE_STORE_EXCEPTION = "convenienceStoreException";
  @SerializedName(SERIALIZED_NAME_CONVENIENCE_STORE_EXCEPTION)
  private ConvenienceStoreExceptionEnum convenienceStoreException;

  public static final String SERIALIZED_NAME_CURRENCY_EXCHANGE = "currencyExchange";
  @SerializedName(SERIALIZED_NAME_CURRENCY_EXCHANGE)
  private Boolean currencyExchange;

  /**
   * Currency exchange exception.
   */
  @JsonAdapter(CurrencyExchangeExceptionEnum.Adapter.class)
  public enum CurrencyExchangeExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CurrencyExchangeExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyExchangeExceptionEnum fromValue(String value) {
      for (CurrencyExchangeExceptionEnum b : CurrencyExchangeExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyExchangeExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyExchangeExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyExchangeExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyExchangeExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrencyExchangeExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY_EXCHANGE_EXCEPTION = "currencyExchangeException";
  @SerializedName(SERIALIZED_NAME_CURRENCY_EXCHANGE_EXCEPTION)
  private CurrencyExchangeExceptionEnum currencyExchangeException;

  public static final String SERIALIZED_NAME_ELEVATOR = "elevator";
  @SerializedName(SERIALIZED_NAME_ELEVATOR)
  private Boolean elevator;

  /**
   * Elevator exception.
   */
  @JsonAdapter(ElevatorExceptionEnum.Adapter.class)
  public enum ElevatorExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ElevatorExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ElevatorExceptionEnum fromValue(String value) {
      for (ElevatorExceptionEnum b : ElevatorExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ElevatorExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ElevatorExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ElevatorExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ElevatorExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ElevatorExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ELEVATOR_EXCEPTION = "elevatorException";
  @SerializedName(SERIALIZED_NAME_ELEVATOR_EXCEPTION)
  private ElevatorExceptionEnum elevatorException;

  public static final String SERIALIZED_NAME_FRONT_DESK = "frontDesk";
  @SerializedName(SERIALIZED_NAME_FRONT_DESK)
  private Boolean frontDesk;

  /**
   * Front desk exception.
   */
  @JsonAdapter(FrontDeskExceptionEnum.Adapter.class)
  public enum FrontDeskExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FrontDeskExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FrontDeskExceptionEnum fromValue(String value) {
      for (FrontDeskExceptionEnum b : FrontDeskExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FrontDeskExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FrontDeskExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FrontDeskExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FrontDeskExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FrontDeskExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FRONT_DESK_EXCEPTION = "frontDeskException";
  @SerializedName(SERIALIZED_NAME_FRONT_DESK_EXCEPTION)
  private FrontDeskExceptionEnum frontDeskException;

  public static final String SERIALIZED_NAME_FULL_SERVICE_LAUNDRY = "fullServiceLaundry";
  @SerializedName(SERIALIZED_NAME_FULL_SERVICE_LAUNDRY)
  private Boolean fullServiceLaundry;

  /**
   * Full service laundry exception.
   */
  @JsonAdapter(FullServiceLaundryExceptionEnum.Adapter.class)
  public enum FullServiceLaundryExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FullServiceLaundryExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FullServiceLaundryExceptionEnum fromValue(String value) {
      for (FullServiceLaundryExceptionEnum b : FullServiceLaundryExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FullServiceLaundryExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FullServiceLaundryExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FullServiceLaundryExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FullServiceLaundryExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FullServiceLaundryExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FULL_SERVICE_LAUNDRY_EXCEPTION = "fullServiceLaundryException";
  @SerializedName(SERIALIZED_NAME_FULL_SERVICE_LAUNDRY_EXCEPTION)
  private FullServiceLaundryExceptionEnum fullServiceLaundryException;

  public static final String SERIALIZED_NAME_GIFT_SHOP = "giftShop";
  @SerializedName(SERIALIZED_NAME_GIFT_SHOP)
  private Boolean giftShop;

  /**
   * Gift shop exception.
   */
  @JsonAdapter(GiftShopExceptionEnum.Adapter.class)
  public enum GiftShopExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    GiftShopExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GiftShopExceptionEnum fromValue(String value) {
      for (GiftShopExceptionEnum b : GiftShopExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GiftShopExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GiftShopExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GiftShopExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GiftShopExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GiftShopExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GIFT_SHOP_EXCEPTION = "giftShopException";
  @SerializedName(SERIALIZED_NAME_GIFT_SHOP_EXCEPTION)
  private GiftShopExceptionEnum giftShopException;

  public static final String SERIALIZED_NAME_LANGUAGES_SPOKEN = "languagesSpoken";
  @SerializedName(SERIALIZED_NAME_LANGUAGES_SPOKEN)
  private LanguagesSpoken languagesSpoken;

  public static final String SERIALIZED_NAME_SELF_SERVICE_LAUNDRY = "selfServiceLaundry";
  @SerializedName(SERIALIZED_NAME_SELF_SERVICE_LAUNDRY)
  private Boolean selfServiceLaundry;

  /**
   * Self service laundry exception.
   */
  @JsonAdapter(SelfServiceLaundryExceptionEnum.Adapter.class)
  public enum SelfServiceLaundryExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SelfServiceLaundryExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SelfServiceLaundryExceptionEnum fromValue(String value) {
      for (SelfServiceLaundryExceptionEnum b : SelfServiceLaundryExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SelfServiceLaundryExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SelfServiceLaundryExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SelfServiceLaundryExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SelfServiceLaundryExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SelfServiceLaundryExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SELF_SERVICE_LAUNDRY_EXCEPTION = "selfServiceLaundryException";
  @SerializedName(SERIALIZED_NAME_SELF_SERVICE_LAUNDRY_EXCEPTION)
  private SelfServiceLaundryExceptionEnum selfServiceLaundryException;

  public static final String SERIALIZED_NAME_SOCIAL_HOUR = "socialHour";
  @SerializedName(SERIALIZED_NAME_SOCIAL_HOUR)
  private Boolean socialHour;

  /**
   * Social hour exception.
   */
  @JsonAdapter(SocialHourExceptionEnum.Adapter.class)
  public enum SocialHourExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SocialHourExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SocialHourExceptionEnum fromValue(String value) {
      for (SocialHourExceptionEnum b : SocialHourExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SocialHourExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SocialHourExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SocialHourExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SocialHourExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SocialHourExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOCIAL_HOUR_EXCEPTION = "socialHourException";
  @SerializedName(SERIALIZED_NAME_SOCIAL_HOUR_EXCEPTION)
  private SocialHourExceptionEnum socialHourException;

  public static final String SERIALIZED_NAME_TWENTY_FOUR_HOUR_FRONT_DESK = "twentyFourHourFrontDesk";
  @SerializedName(SERIALIZED_NAME_TWENTY_FOUR_HOUR_FRONT_DESK)
  private Boolean twentyFourHourFrontDesk;

  /**
   * 24hr front desk exception.
   */
  @JsonAdapter(TwentyFourHourFrontDeskExceptionEnum.Adapter.class)
  public enum TwentyFourHourFrontDeskExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    TwentyFourHourFrontDeskExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TwentyFourHourFrontDeskExceptionEnum fromValue(String value) {
      for (TwentyFourHourFrontDeskExceptionEnum b : TwentyFourHourFrontDeskExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TwentyFourHourFrontDeskExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TwentyFourHourFrontDeskExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TwentyFourHourFrontDeskExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TwentyFourHourFrontDeskExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TwentyFourHourFrontDeskExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TWENTY_FOUR_HOUR_FRONT_DESK_EXCEPTION = "twentyFourHourFrontDeskException";
  @SerializedName(SERIALIZED_NAME_TWENTY_FOUR_HOUR_FRONT_DESK_EXCEPTION)
  private TwentyFourHourFrontDeskExceptionEnum twentyFourHourFrontDeskException;

  public static final String SERIALIZED_NAME_WAKE_UP_CALLS = "wakeUpCalls";
  @SerializedName(SERIALIZED_NAME_WAKE_UP_CALLS)
  private Boolean wakeUpCalls;

  /**
   * Wake up calls exception.
   */
  @JsonAdapter(WakeUpCallsExceptionEnum.Adapter.class)
  public enum WakeUpCallsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    WakeUpCallsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WakeUpCallsExceptionEnum fromValue(String value) {
      for (WakeUpCallsExceptionEnum b : WakeUpCallsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WakeUpCallsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WakeUpCallsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WakeUpCallsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WakeUpCallsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WakeUpCallsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WAKE_UP_CALLS_EXCEPTION = "wakeUpCallsException";
  @SerializedName(SERIALIZED_NAME_WAKE_UP_CALLS_EXCEPTION)
  private WakeUpCallsExceptionEnum wakeUpCallsException;

  public Services() {
  }

  public Services baggageStorage(Boolean baggageStorage) {
    this.baggageStorage = baggageStorage;
    return this;
  }

  /**
   * Baggage storage. A provision for guests to leave their bags at the hotel when they arrive for their stay before the official check-in time. May or may not apply for guests who wish to leave their bags after check-out and before departing the locale. Also known as bag dropoff.
   * @return baggageStorage
   */
  @javax.annotation.Nullable
  public Boolean getBaggageStorage() {
    return baggageStorage;
  }

  public void setBaggageStorage(Boolean baggageStorage) {
    this.baggageStorage = baggageStorage;
  }


  public Services baggageStorageException(BaggageStorageExceptionEnum baggageStorageException) {
    this.baggageStorageException = baggageStorageException;
    return this;
  }

  /**
   * Baggage storage exception.
   * @return baggageStorageException
   */
  @javax.annotation.Nullable
  public BaggageStorageExceptionEnum getBaggageStorageException() {
    return baggageStorageException;
  }

  public void setBaggageStorageException(BaggageStorageExceptionEnum baggageStorageException) {
    this.baggageStorageException = baggageStorageException;
  }


  public Services concierge(Boolean concierge) {
    this.concierge = concierge;
    return this;
  }

  /**
   * Concierge. Hotel staff member(s) responsible for facilitating an easy, comfortable stay through making reservations for meals, sourcing theater tickets, arranging tours, finding a doctor, making recommendations, and answering questions.
   * @return concierge
   */
  @javax.annotation.Nullable
  public Boolean getConcierge() {
    return concierge;
  }

  public void setConcierge(Boolean concierge) {
    this.concierge = concierge;
  }


  public Services conciergeException(ConciergeExceptionEnum conciergeException) {
    this.conciergeException = conciergeException;
    return this;
  }

  /**
   * Concierge exception.
   * @return conciergeException
   */
  @javax.annotation.Nullable
  public ConciergeExceptionEnum getConciergeException() {
    return conciergeException;
  }

  public void setConciergeException(ConciergeExceptionEnum conciergeException) {
    this.conciergeException = conciergeException;
  }


  public Services convenienceStore(Boolean convenienceStore) {
    this.convenienceStore = convenienceStore;
    return this;
  }

  /**
   * Convenience store. A shop at the hotel primarily selling snacks, drinks, non-prescription medicines, health and beauty aids, magazines and newspapers.
   * @return convenienceStore
   */
  @javax.annotation.Nullable
  public Boolean getConvenienceStore() {
    return convenienceStore;
  }

  public void setConvenienceStore(Boolean convenienceStore) {
    this.convenienceStore = convenienceStore;
  }


  public Services convenienceStoreException(ConvenienceStoreExceptionEnum convenienceStoreException) {
    this.convenienceStoreException = convenienceStoreException;
    return this;
  }

  /**
   * Convenience store exception.
   * @return convenienceStoreException
   */
  @javax.annotation.Nullable
  public ConvenienceStoreExceptionEnum getConvenienceStoreException() {
    return convenienceStoreException;
  }

  public void setConvenienceStoreException(ConvenienceStoreExceptionEnum convenienceStoreException) {
    this.convenienceStoreException = convenienceStoreException;
  }


  public Services currencyExchange(Boolean currencyExchange) {
    this.currencyExchange = currencyExchange;
    return this;
  }

  /**
   * Currency exchange. A staff member or automated machine tasked with the transaction of providing the native currency of the hotel&#39;s locale in exchange for the foreign currency provided by a guest.
   * @return currencyExchange
   */
  @javax.annotation.Nullable
  public Boolean getCurrencyExchange() {
    return currencyExchange;
  }

  public void setCurrencyExchange(Boolean currencyExchange) {
    this.currencyExchange = currencyExchange;
  }


  public Services currencyExchangeException(CurrencyExchangeExceptionEnum currencyExchangeException) {
    this.currencyExchangeException = currencyExchangeException;
    return this;
  }

  /**
   * Currency exchange exception.
   * @return currencyExchangeException
   */
  @javax.annotation.Nullable
  public CurrencyExchangeExceptionEnum getCurrencyExchangeException() {
    return currencyExchangeException;
  }

  public void setCurrencyExchangeException(CurrencyExchangeExceptionEnum currencyExchangeException) {
    this.currencyExchangeException = currencyExchangeException;
  }


  public Services elevator(Boolean elevator) {
    this.elevator = elevator;
    return this;
  }

  /**
   * Elevator. A passenger elevator that transports guests from one story to another. Also known as lift.
   * @return elevator
   */
  @javax.annotation.Nullable
  public Boolean getElevator() {
    return elevator;
  }

  public void setElevator(Boolean elevator) {
    this.elevator = elevator;
  }


  public Services elevatorException(ElevatorExceptionEnum elevatorException) {
    this.elevatorException = elevatorException;
    return this;
  }

  /**
   * Elevator exception.
   * @return elevatorException
   */
  @javax.annotation.Nullable
  public ElevatorExceptionEnum getElevatorException() {
    return elevatorException;
  }

  public void setElevatorException(ElevatorExceptionEnum elevatorException) {
    this.elevatorException = elevatorException;
  }


  public Services frontDesk(Boolean frontDesk) {
    this.frontDesk = frontDesk;
    return this;
  }

  /**
   * Front desk. A counter or desk in the lobby or the immediate interior of the hotel where a member of the staff greets guests and processes the information related to their stay (including check-in and check-out). May or may not be manned and open 24/7.
   * @return frontDesk
   */
  @javax.annotation.Nullable
  public Boolean getFrontDesk() {
    return frontDesk;
  }

  public void setFrontDesk(Boolean frontDesk) {
    this.frontDesk = frontDesk;
  }


  public Services frontDeskException(FrontDeskExceptionEnum frontDeskException) {
    this.frontDeskException = frontDeskException;
    return this;
  }

  /**
   * Front desk exception.
   * @return frontDeskException
   */
  @javax.annotation.Nullable
  public FrontDeskExceptionEnum getFrontDeskException() {
    return frontDeskException;
  }

  public void setFrontDeskException(FrontDeskExceptionEnum frontDeskException) {
    this.frontDeskException = frontDeskException;
  }


  public Services fullServiceLaundry(Boolean fullServiceLaundry) {
    this.fullServiceLaundry = fullServiceLaundry;
    return this;
  }

  /**
   * Full service laundry. Laundry and dry cleaning facilitated and handled by the hotel on behalf of the guest. Does not include the provision for guests to do their own laundry in on-site machines.
   * @return fullServiceLaundry
   */
  @javax.annotation.Nullable
  public Boolean getFullServiceLaundry() {
    return fullServiceLaundry;
  }

  public void setFullServiceLaundry(Boolean fullServiceLaundry) {
    this.fullServiceLaundry = fullServiceLaundry;
  }


  public Services fullServiceLaundryException(FullServiceLaundryExceptionEnum fullServiceLaundryException) {
    this.fullServiceLaundryException = fullServiceLaundryException;
    return this;
  }

  /**
   * Full service laundry exception.
   * @return fullServiceLaundryException
   */
  @javax.annotation.Nullable
  public FullServiceLaundryExceptionEnum getFullServiceLaundryException() {
    return fullServiceLaundryException;
  }

  public void setFullServiceLaundryException(FullServiceLaundryExceptionEnum fullServiceLaundryException) {
    this.fullServiceLaundryException = fullServiceLaundryException;
  }


  public Services giftShop(Boolean giftShop) {
    this.giftShop = giftShop;
    return this;
  }

  /**
   * Gift shop. An on-site store primarily selling souvenirs, mementos and other gift items. May or may not also sell sundries, magazines and newspapers, clothing, or snacks.
   * @return giftShop
   */
  @javax.annotation.Nullable
  public Boolean getGiftShop() {
    return giftShop;
  }

  public void setGiftShop(Boolean giftShop) {
    this.giftShop = giftShop;
  }


  public Services giftShopException(GiftShopExceptionEnum giftShopException) {
    this.giftShopException = giftShopException;
    return this;
  }

  /**
   * Gift shop exception.
   * @return giftShopException
   */
  @javax.annotation.Nullable
  public GiftShopExceptionEnum getGiftShopException() {
    return giftShopException;
  }

  public void setGiftShopException(GiftShopExceptionEnum giftShopException) {
    this.giftShopException = giftShopException;
  }


  public Services languagesSpoken(LanguagesSpoken languagesSpoken) {
    this.languagesSpoken = languagesSpoken;
    return this;
  }

  /**
   * Get languagesSpoken
   * @return languagesSpoken
   */
  @javax.annotation.Nullable
  public LanguagesSpoken getLanguagesSpoken() {
    return languagesSpoken;
  }

  public void setLanguagesSpoken(LanguagesSpoken languagesSpoken) {
    this.languagesSpoken = languagesSpoken;
  }


  public Services selfServiceLaundry(Boolean selfServiceLaundry) {
    this.selfServiceLaundry = selfServiceLaundry;
    return this;
  }

  /**
   * Self service laundry. On-site clothes washers and dryers accessible to guests for the purpose of washing and drying their own clothes. May or may not require payment to use the machines.
   * @return selfServiceLaundry
   */
  @javax.annotation.Nullable
  public Boolean getSelfServiceLaundry() {
    return selfServiceLaundry;
  }

  public void setSelfServiceLaundry(Boolean selfServiceLaundry) {
    this.selfServiceLaundry = selfServiceLaundry;
  }


  public Services selfServiceLaundryException(SelfServiceLaundryExceptionEnum selfServiceLaundryException) {
    this.selfServiceLaundryException = selfServiceLaundryException;
    return this;
  }

  /**
   * Self service laundry exception.
   * @return selfServiceLaundryException
   */
  @javax.annotation.Nullable
  public SelfServiceLaundryExceptionEnum getSelfServiceLaundryException() {
    return selfServiceLaundryException;
  }

  public void setSelfServiceLaundryException(SelfServiceLaundryExceptionEnum selfServiceLaundryException) {
    this.selfServiceLaundryException = selfServiceLaundryException;
  }


  public Services socialHour(Boolean socialHour) {
    this.socialHour = socialHour;
    return this;
  }

  /**
   * Social hour. A reception with complimentary soft drinks, tea, coffee, wine and/or cocktails in the afternoon or evening. Can be hosted by hotel staff or guests may serve themselves. Also known as wine hour. The availability of coffee/tea in the lobby throughout the day does not constitute a social or wine hour.
   * @return socialHour
   */
  @javax.annotation.Nullable
  public Boolean getSocialHour() {
    return socialHour;
  }

  public void setSocialHour(Boolean socialHour) {
    this.socialHour = socialHour;
  }


  public Services socialHourException(SocialHourExceptionEnum socialHourException) {
    this.socialHourException = socialHourException;
    return this;
  }

  /**
   * Social hour exception.
   * @return socialHourException
   */
  @javax.annotation.Nullable
  public SocialHourExceptionEnum getSocialHourException() {
    return socialHourException;
  }

  public void setSocialHourException(SocialHourExceptionEnum socialHourException) {
    this.socialHourException = socialHourException;
  }


  public Services twentyFourHourFrontDesk(Boolean twentyFourHourFrontDesk) {
    this.twentyFourHourFrontDesk = twentyFourHourFrontDesk;
    return this;
  }

  /**
   * 24hr front desk. Front desk is staffed 24 hours a day.
   * @return twentyFourHourFrontDesk
   */
  @javax.annotation.Nullable
  public Boolean getTwentyFourHourFrontDesk() {
    return twentyFourHourFrontDesk;
  }

  public void setTwentyFourHourFrontDesk(Boolean twentyFourHourFrontDesk) {
    this.twentyFourHourFrontDesk = twentyFourHourFrontDesk;
  }


  public Services twentyFourHourFrontDeskException(TwentyFourHourFrontDeskExceptionEnum twentyFourHourFrontDeskException) {
    this.twentyFourHourFrontDeskException = twentyFourHourFrontDeskException;
    return this;
  }

  /**
   * 24hr front desk exception.
   * @return twentyFourHourFrontDeskException
   */
  @javax.annotation.Nullable
  public TwentyFourHourFrontDeskExceptionEnum getTwentyFourHourFrontDeskException() {
    return twentyFourHourFrontDeskException;
  }

  public void setTwentyFourHourFrontDeskException(TwentyFourHourFrontDeskExceptionEnum twentyFourHourFrontDeskException) {
    this.twentyFourHourFrontDeskException = twentyFourHourFrontDeskException;
  }


  public Services wakeUpCalls(Boolean wakeUpCalls) {
    this.wakeUpCalls = wakeUpCalls;
    return this;
  }

  /**
   * Wake up calls. By direction of the guest, a hotel staff member will phone the guest unit at the requested hour. Also known as morning call.
   * @return wakeUpCalls
   */
  @javax.annotation.Nullable
  public Boolean getWakeUpCalls() {
    return wakeUpCalls;
  }

  public void setWakeUpCalls(Boolean wakeUpCalls) {
    this.wakeUpCalls = wakeUpCalls;
  }


  public Services wakeUpCallsException(WakeUpCallsExceptionEnum wakeUpCallsException) {
    this.wakeUpCallsException = wakeUpCallsException;
    return this;
  }

  /**
   * Wake up calls exception.
   * @return wakeUpCallsException
   */
  @javax.annotation.Nullable
  public WakeUpCallsExceptionEnum getWakeUpCallsException() {
    return wakeUpCallsException;
  }

  public void setWakeUpCallsException(WakeUpCallsExceptionEnum wakeUpCallsException) {
    this.wakeUpCallsException = wakeUpCallsException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Services services = (Services) o;
    return Objects.equals(this.baggageStorage, services.baggageStorage) &&
        Objects.equals(this.baggageStorageException, services.baggageStorageException) &&
        Objects.equals(this.concierge, services.concierge) &&
        Objects.equals(this.conciergeException, services.conciergeException) &&
        Objects.equals(this.convenienceStore, services.convenienceStore) &&
        Objects.equals(this.convenienceStoreException, services.convenienceStoreException) &&
        Objects.equals(this.currencyExchange, services.currencyExchange) &&
        Objects.equals(this.currencyExchangeException, services.currencyExchangeException) &&
        Objects.equals(this.elevator, services.elevator) &&
        Objects.equals(this.elevatorException, services.elevatorException) &&
        Objects.equals(this.frontDesk, services.frontDesk) &&
        Objects.equals(this.frontDeskException, services.frontDeskException) &&
        Objects.equals(this.fullServiceLaundry, services.fullServiceLaundry) &&
        Objects.equals(this.fullServiceLaundryException, services.fullServiceLaundryException) &&
        Objects.equals(this.giftShop, services.giftShop) &&
        Objects.equals(this.giftShopException, services.giftShopException) &&
        Objects.equals(this.languagesSpoken, services.languagesSpoken) &&
        Objects.equals(this.selfServiceLaundry, services.selfServiceLaundry) &&
        Objects.equals(this.selfServiceLaundryException, services.selfServiceLaundryException) &&
        Objects.equals(this.socialHour, services.socialHour) &&
        Objects.equals(this.socialHourException, services.socialHourException) &&
        Objects.equals(this.twentyFourHourFrontDesk, services.twentyFourHourFrontDesk) &&
        Objects.equals(this.twentyFourHourFrontDeskException, services.twentyFourHourFrontDeskException) &&
        Objects.equals(this.wakeUpCalls, services.wakeUpCalls) &&
        Objects.equals(this.wakeUpCallsException, services.wakeUpCallsException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baggageStorage, baggageStorageException, concierge, conciergeException, convenienceStore, convenienceStoreException, currencyExchange, currencyExchangeException, elevator, elevatorException, frontDesk, frontDeskException, fullServiceLaundry, fullServiceLaundryException, giftShop, giftShopException, languagesSpoken, selfServiceLaundry, selfServiceLaundryException, socialHour, socialHourException, twentyFourHourFrontDesk, twentyFourHourFrontDeskException, wakeUpCalls, wakeUpCallsException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Services {\n");
    sb.append("    baggageStorage: ").append(toIndentedString(baggageStorage)).append("\n");
    sb.append("    baggageStorageException: ").append(toIndentedString(baggageStorageException)).append("\n");
    sb.append("    concierge: ").append(toIndentedString(concierge)).append("\n");
    sb.append("    conciergeException: ").append(toIndentedString(conciergeException)).append("\n");
    sb.append("    convenienceStore: ").append(toIndentedString(convenienceStore)).append("\n");
    sb.append("    convenienceStoreException: ").append(toIndentedString(convenienceStoreException)).append("\n");
    sb.append("    currencyExchange: ").append(toIndentedString(currencyExchange)).append("\n");
    sb.append("    currencyExchangeException: ").append(toIndentedString(currencyExchangeException)).append("\n");
    sb.append("    elevator: ").append(toIndentedString(elevator)).append("\n");
    sb.append("    elevatorException: ").append(toIndentedString(elevatorException)).append("\n");
    sb.append("    frontDesk: ").append(toIndentedString(frontDesk)).append("\n");
    sb.append("    frontDeskException: ").append(toIndentedString(frontDeskException)).append("\n");
    sb.append("    fullServiceLaundry: ").append(toIndentedString(fullServiceLaundry)).append("\n");
    sb.append("    fullServiceLaundryException: ").append(toIndentedString(fullServiceLaundryException)).append("\n");
    sb.append("    giftShop: ").append(toIndentedString(giftShop)).append("\n");
    sb.append("    giftShopException: ").append(toIndentedString(giftShopException)).append("\n");
    sb.append("    languagesSpoken: ").append(toIndentedString(languagesSpoken)).append("\n");
    sb.append("    selfServiceLaundry: ").append(toIndentedString(selfServiceLaundry)).append("\n");
    sb.append("    selfServiceLaundryException: ").append(toIndentedString(selfServiceLaundryException)).append("\n");
    sb.append("    socialHour: ").append(toIndentedString(socialHour)).append("\n");
    sb.append("    socialHourException: ").append(toIndentedString(socialHourException)).append("\n");
    sb.append("    twentyFourHourFrontDesk: ").append(toIndentedString(twentyFourHourFrontDesk)).append("\n");
    sb.append("    twentyFourHourFrontDeskException: ").append(toIndentedString(twentyFourHourFrontDeskException)).append("\n");
    sb.append("    wakeUpCalls: ").append(toIndentedString(wakeUpCalls)).append("\n");
    sb.append("    wakeUpCallsException: ").append(toIndentedString(wakeUpCallsException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baggageStorage");
    openapiFields.add("baggageStorageException");
    openapiFields.add("concierge");
    openapiFields.add("conciergeException");
    openapiFields.add("convenienceStore");
    openapiFields.add("convenienceStoreException");
    openapiFields.add("currencyExchange");
    openapiFields.add("currencyExchangeException");
    openapiFields.add("elevator");
    openapiFields.add("elevatorException");
    openapiFields.add("frontDesk");
    openapiFields.add("frontDeskException");
    openapiFields.add("fullServiceLaundry");
    openapiFields.add("fullServiceLaundryException");
    openapiFields.add("giftShop");
    openapiFields.add("giftShopException");
    openapiFields.add("languagesSpoken");
    openapiFields.add("selfServiceLaundry");
    openapiFields.add("selfServiceLaundryException");
    openapiFields.add("socialHour");
    openapiFields.add("socialHourException");
    openapiFields.add("twentyFourHourFrontDesk");
    openapiFields.add("twentyFourHourFrontDeskException");
    openapiFields.add("wakeUpCalls");
    openapiFields.add("wakeUpCallsException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Services
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Services.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Services is not found in the empty JSON string", Services.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Services.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Services` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("baggageStorageException") != null && !jsonObj.get("baggageStorageException").isJsonNull()) && !jsonObj.get("baggageStorageException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baggageStorageException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baggageStorageException").toString()));
      }
      // validate the optional field `baggageStorageException`
      if (jsonObj.get("baggageStorageException") != null && !jsonObj.get("baggageStorageException").isJsonNull()) {
        BaggageStorageExceptionEnum.validateJsonElement(jsonObj.get("baggageStorageException"));
      }
      if ((jsonObj.get("conciergeException") != null && !jsonObj.get("conciergeException").isJsonNull()) && !jsonObj.get("conciergeException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conciergeException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conciergeException").toString()));
      }
      // validate the optional field `conciergeException`
      if (jsonObj.get("conciergeException") != null && !jsonObj.get("conciergeException").isJsonNull()) {
        ConciergeExceptionEnum.validateJsonElement(jsonObj.get("conciergeException"));
      }
      if ((jsonObj.get("convenienceStoreException") != null && !jsonObj.get("convenienceStoreException").isJsonNull()) && !jsonObj.get("convenienceStoreException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `convenienceStoreException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("convenienceStoreException").toString()));
      }
      // validate the optional field `convenienceStoreException`
      if (jsonObj.get("convenienceStoreException") != null && !jsonObj.get("convenienceStoreException").isJsonNull()) {
        ConvenienceStoreExceptionEnum.validateJsonElement(jsonObj.get("convenienceStoreException"));
      }
      if ((jsonObj.get("currencyExchangeException") != null && !jsonObj.get("currencyExchangeException").isJsonNull()) && !jsonObj.get("currencyExchangeException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyExchangeException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyExchangeException").toString()));
      }
      // validate the optional field `currencyExchangeException`
      if (jsonObj.get("currencyExchangeException") != null && !jsonObj.get("currencyExchangeException").isJsonNull()) {
        CurrencyExchangeExceptionEnum.validateJsonElement(jsonObj.get("currencyExchangeException"));
      }
      if ((jsonObj.get("elevatorException") != null && !jsonObj.get("elevatorException").isJsonNull()) && !jsonObj.get("elevatorException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `elevatorException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("elevatorException").toString()));
      }
      // validate the optional field `elevatorException`
      if (jsonObj.get("elevatorException") != null && !jsonObj.get("elevatorException").isJsonNull()) {
        ElevatorExceptionEnum.validateJsonElement(jsonObj.get("elevatorException"));
      }
      if ((jsonObj.get("frontDeskException") != null && !jsonObj.get("frontDeskException").isJsonNull()) && !jsonObj.get("frontDeskException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frontDeskException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frontDeskException").toString()));
      }
      // validate the optional field `frontDeskException`
      if (jsonObj.get("frontDeskException") != null && !jsonObj.get("frontDeskException").isJsonNull()) {
        FrontDeskExceptionEnum.validateJsonElement(jsonObj.get("frontDeskException"));
      }
      if ((jsonObj.get("fullServiceLaundryException") != null && !jsonObj.get("fullServiceLaundryException").isJsonNull()) && !jsonObj.get("fullServiceLaundryException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullServiceLaundryException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullServiceLaundryException").toString()));
      }
      // validate the optional field `fullServiceLaundryException`
      if (jsonObj.get("fullServiceLaundryException") != null && !jsonObj.get("fullServiceLaundryException").isJsonNull()) {
        FullServiceLaundryExceptionEnum.validateJsonElement(jsonObj.get("fullServiceLaundryException"));
      }
      if ((jsonObj.get("giftShopException") != null && !jsonObj.get("giftShopException").isJsonNull()) && !jsonObj.get("giftShopException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `giftShopException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("giftShopException").toString()));
      }
      // validate the optional field `giftShopException`
      if (jsonObj.get("giftShopException") != null && !jsonObj.get("giftShopException").isJsonNull()) {
        GiftShopExceptionEnum.validateJsonElement(jsonObj.get("giftShopException"));
      }
      // validate the optional field `languagesSpoken`
      if (jsonObj.get("languagesSpoken") != null && !jsonObj.get("languagesSpoken").isJsonNull()) {
        LanguagesSpoken.validateJsonElement(jsonObj.get("languagesSpoken"));
      }
      if ((jsonObj.get("selfServiceLaundryException") != null && !jsonObj.get("selfServiceLaundryException").isJsonNull()) && !jsonObj.get("selfServiceLaundryException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfServiceLaundryException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfServiceLaundryException").toString()));
      }
      // validate the optional field `selfServiceLaundryException`
      if (jsonObj.get("selfServiceLaundryException") != null && !jsonObj.get("selfServiceLaundryException").isJsonNull()) {
        SelfServiceLaundryExceptionEnum.validateJsonElement(jsonObj.get("selfServiceLaundryException"));
      }
      if ((jsonObj.get("socialHourException") != null && !jsonObj.get("socialHourException").isJsonNull()) && !jsonObj.get("socialHourException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `socialHourException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("socialHourException").toString()));
      }
      // validate the optional field `socialHourException`
      if (jsonObj.get("socialHourException") != null && !jsonObj.get("socialHourException").isJsonNull()) {
        SocialHourExceptionEnum.validateJsonElement(jsonObj.get("socialHourException"));
      }
      if ((jsonObj.get("twentyFourHourFrontDeskException") != null && !jsonObj.get("twentyFourHourFrontDeskException").isJsonNull()) && !jsonObj.get("twentyFourHourFrontDeskException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twentyFourHourFrontDeskException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twentyFourHourFrontDeskException").toString()));
      }
      // validate the optional field `twentyFourHourFrontDeskException`
      if (jsonObj.get("twentyFourHourFrontDeskException") != null && !jsonObj.get("twentyFourHourFrontDeskException").isJsonNull()) {
        TwentyFourHourFrontDeskExceptionEnum.validateJsonElement(jsonObj.get("twentyFourHourFrontDeskException"));
      }
      if ((jsonObj.get("wakeUpCallsException") != null && !jsonObj.get("wakeUpCallsException").isJsonNull()) && !jsonObj.get("wakeUpCallsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wakeUpCallsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wakeUpCallsException").toString()));
      }
      // validate the optional field `wakeUpCallsException`
      if (jsonObj.get("wakeUpCallsException") != null && !jsonObj.get("wakeUpCallsException").isJsonNull()) {
        WakeUpCallsExceptionEnum.validateJsonElement(jsonObj.get("wakeUpCallsException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Services.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Services' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Services> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Services.class));

       return (TypeAdapter<T>) new TypeAdapter<Services>() {
           @Override
           public void write(JsonWriter out, Services value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Services read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Services given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Services
   * @throws IOException if the JSON string is invalid with respect to Services
   */
  public static Services fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Services.class);
  }

  /**
   * Convert an instance of Services to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

