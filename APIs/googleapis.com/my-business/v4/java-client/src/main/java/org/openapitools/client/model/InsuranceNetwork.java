/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single insurance network. Next id: 5
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InsuranceNetwork {
  public static final String SERIALIZED_NAME_NETWORK_ID = "networkId";
  @SerializedName(SERIALIZED_NAME_NETWORK_ID)
  private String networkId;

  public static final String SERIALIZED_NAME_NETWORK_NAMES = "networkNames";
  @SerializedName(SERIALIZED_NAME_NETWORK_NAMES)
  private Map<String, String> networkNames = new HashMap<>();

  public static final String SERIALIZED_NAME_PAYER_NAMES = "payerNames";
  @SerializedName(SERIALIZED_NAME_PAYER_NAMES)
  private Map<String, String> payerNames = new HashMap<>();

  /**
   * Output only. The state of this insurance network.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    NETWORK_STATE_UNSPECIFIED("NETWORK_STATE_UNSPECIFIED"),
    
    ACCEPTED("ACCEPTED"),
    
    PENDING_ADD("PENDING_ADD"),
    
    PENDING_DELETE("PENDING_DELETE"),
    
    NOT_ACCEPTED("NOT_ACCEPTED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public InsuranceNetwork() {
  }

  public InsuranceNetwork(
     Map<String, String> networkNames, 
     Map<String, String> payerNames, 
     StateEnum state
  ) {
    this();
    this.networkNames = networkNames;
    this.payerNames = payerNames;
    this.state = state;
  }

  public InsuranceNetwork networkId(String networkId) {
    this.networkId = networkId;
    return this;
  }

  /**
   * Required. The id of this insurance network generated by Google.
   * @return networkId
   */
  @javax.annotation.Nullable
  public String getNetworkId() {
    return networkId;
  }

  public void setNetworkId(String networkId) {
    this.networkId = networkId;
  }


  /**
   * Output only. A map of network display names in requested languages where the language is the key and localized display name is the value. The display name in English is set by default.
   * @return networkNames
   */
  @javax.annotation.Nullable
  public Map<String, String> getNetworkNames() {
    return networkNames;
  }



  /**
   * Output only. A map of payer display names in requested languages where the language is the key and localized display name is the value. The display name in English is set by default.
   * @return payerNames
   */
  @javax.annotation.Nullable
  public Map<String, String> getPayerNames() {
    return payerNames;
  }



  /**
   * Output only. The state of this insurance network.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsuranceNetwork insuranceNetwork = (InsuranceNetwork) o;
    return Objects.equals(this.networkId, insuranceNetwork.networkId) &&
        Objects.equals(this.networkNames, insuranceNetwork.networkNames) &&
        Objects.equals(this.payerNames, insuranceNetwork.payerNames) &&
        Objects.equals(this.state, insuranceNetwork.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(networkId, networkNames, payerNames, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsuranceNetwork {\n");
    sb.append("    networkId: ").append(toIndentedString(networkId)).append("\n");
    sb.append("    networkNames: ").append(toIndentedString(networkNames)).append("\n");
    sb.append("    payerNames: ").append(toIndentedString(payerNames)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("networkId");
    openapiFields.add("networkNames");
    openapiFields.add("payerNames");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InsuranceNetwork
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InsuranceNetwork.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InsuranceNetwork is not found in the empty JSON string", InsuranceNetwork.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InsuranceNetwork.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InsuranceNetwork` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("networkId") != null && !jsonObj.get("networkId").isJsonNull()) && !jsonObj.get("networkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InsuranceNetwork.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InsuranceNetwork' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InsuranceNetwork> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InsuranceNetwork.class));

       return (TypeAdapter<T>) new TypeAdapter<InsuranceNetwork>() {
           @Override
           public void write(JsonWriter out, InsuranceNetwork value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InsuranceNetwork read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InsuranceNetwork given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InsuranceNetwork
   * @throws IOException if the JSON string is invalid with respect to InsuranceNetwork
   */
  public static InsuranceNetwork fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InsuranceNetwork.class);
  }

  /**
   * Convert an instance of InsuranceNetwork to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

