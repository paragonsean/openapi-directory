/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FoodMenuSection;
import org.openapitools.client.model.MenuLabel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Menu of a business that serves food dishes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FoodMenu {
  /**
   * Gets or Sets cuisines
   */
  @JsonAdapter(CuisinesEnum.Adapter.class)
  public enum CuisinesEnum {
    CUISINE_UNSPECIFIED("CUISINE_UNSPECIFIED"),
    
    AMERICAN("AMERICAN"),
    
    ASIAN("ASIAN"),
    
    BRAZILIAN("BRAZILIAN"),
    
    BREAK_FAST("BREAK_FAST"),
    
    BRUNCH("BRUNCH"),
    
    CHICKEN("CHICKEN"),
    
    CHINESE("CHINESE"),
    
    FAMILY("FAMILY"),
    
    FAST_FOOD("FAST_FOOD"),
    
    FRENCH("FRENCH"),
    
    GREEK("GREEK"),
    
    GERMAN("GERMAN"),
    
    HAMBURGER("HAMBURGER"),
    
    INDIAN("INDIAN"),
    
    INDONESIAN("INDONESIAN"),
    
    ITALIAN("ITALIAN"),
    
    JAPANESE("JAPANESE"),
    
    KOREAN("KOREAN"),
    
    LATIN_AMERICAN("LATIN_AMERICAN"),
    
    MEDITERRANEAN("MEDITERRANEAN"),
    
    MEXICAN("MEXICAN"),
    
    PAKISTANI("PAKISTANI"),
    
    PIZZA("PIZZA"),
    
    SEAFOOD("SEAFOOD"),
    
    SPANISH("SPANISH"),
    
    SUSHI("SUSHI"),
    
    THAI("THAI"),
    
    TURKISH("TURKISH"),
    
    VEGETARIAN("VEGETARIAN"),
    
    VIETNAMESE("VIETNAMESE"),
    
    OTHER_CUISINE("OTHER_CUISINE");

    private String value;

    CuisinesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CuisinesEnum fromValue(String value) {
      for (CuisinesEnum b : CuisinesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CuisinesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CuisinesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CuisinesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CuisinesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CuisinesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CUISINES = "cuisines";
  @SerializedName(SERIALIZED_NAME_CUISINES)
  private List<CuisinesEnum> cuisines = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<MenuLabel> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECTIONS = "sections";
  @SerializedName(SERIALIZED_NAME_SECTIONS)
  private List<FoodMenuSection> sections = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_URL = "sourceUrl";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private String sourceUrl;

  public FoodMenu() {
  }

  public FoodMenu cuisines(List<CuisinesEnum> cuisines) {
    this.cuisines = cuisines;
    return this;
  }

  public FoodMenu addCuisinesItem(CuisinesEnum cuisinesItem) {
    if (this.cuisines == null) {
      this.cuisines = new ArrayList<>();
    }
    this.cuisines.add(cuisinesItem);
    return this;
  }

  /**
   * Optional. Cuisine information for the food menu. It is highly recommended to provide this field.
   * @return cuisines
   */
  @javax.annotation.Nullable
  public List<CuisinesEnum> getCuisines() {
    return cuisines;
  }

  public void setCuisines(List<CuisinesEnum> cuisines) {
    this.cuisines = cuisines;
  }


  public FoodMenu labels(List<MenuLabel> labels) {
    this.labels = labels;
    return this;
  }

  public FoodMenu addLabelsItem(MenuLabel labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Required. Language-tagged labels for the menu. E.g. \&quot;menu\&quot;, \&quot;lunch special\&quot;. Display names should be 140 characters or less, with descriptions 1,000 characters or less. At least one set of labels is required.
   * @return labels
   */
  @javax.annotation.Nullable
  public List<MenuLabel> getLabels() {
    return labels;
  }

  public void setLabels(List<MenuLabel> labels) {
    this.labels = labels;
  }


  public FoodMenu sections(List<FoodMenuSection> sections) {
    this.sections = sections;
    return this;
  }

  public FoodMenu addSectionsItem(FoodMenuSection sectionsItem) {
    if (this.sections == null) {
      this.sections = new ArrayList<>();
    }
    this.sections.add(sectionsItem);
    return this;
  }

  /**
   * Required. Sections of the menu.
   * @return sections
   */
  @javax.annotation.Nullable
  public List<FoodMenuSection> getSections() {
    return sections;
  }

  public void setSections(List<FoodMenuSection> sections) {
    this.sections = sections;
  }


  public FoodMenu sourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * Optional. Source URL of menu if there is a webpage to go to.
   * @return sourceUrl
   */
  @javax.annotation.Nullable
  public String getSourceUrl() {
    return sourceUrl;
  }

  public void setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FoodMenu foodMenu = (FoodMenu) o;
    return Objects.equals(this.cuisines, foodMenu.cuisines) &&
        Objects.equals(this.labels, foodMenu.labels) &&
        Objects.equals(this.sections, foodMenu.sections) &&
        Objects.equals(this.sourceUrl, foodMenu.sourceUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cuisines, labels, sections, sourceUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FoodMenu {\n");
    sb.append("    cuisines: ").append(toIndentedString(cuisines)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    sections: ").append(toIndentedString(sections)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cuisines");
    openapiFields.add("labels");
    openapiFields.add("sections");
    openapiFields.add("sourceUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FoodMenu
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FoodMenu.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FoodMenu is not found in the empty JSON string", FoodMenu.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FoodMenu.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FoodMenu` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("cuisines") != null && !jsonObj.get("cuisines").isJsonNull() && !jsonObj.get("cuisines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cuisines` to be an array in the JSON string but got `%s`", jsonObj.get("cuisines").toString()));
      }
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
        if (jsonArraylabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
          }

          // validate the optional field `labels` (array)
          for (int i = 0; i < jsonArraylabels.size(); i++) {
            MenuLabel.validateJsonElement(jsonArraylabels.get(i));
          };
        }
      }
      if (jsonObj.get("sections") != null && !jsonObj.get("sections").isJsonNull()) {
        JsonArray jsonArraysections = jsonObj.getAsJsonArray("sections");
        if (jsonArraysections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sections` to be an array in the JSON string but got `%s`", jsonObj.get("sections").toString()));
          }

          // validate the optional field `sections` (array)
          for (int i = 0; i < jsonArraysections.size(); i++) {
            FoodMenuSection.validateJsonElement(jsonArraysections.get(i));
          };
        }
      }
      if ((jsonObj.get("sourceUrl") != null && !jsonObj.get("sourceUrl").isJsonNull()) && !jsonObj.get("sourceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FoodMenu.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FoodMenu' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FoodMenu> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FoodMenu.class));

       return (TypeAdapter<T>) new TypeAdapter<FoodMenu>() {
           @Override
           public void write(JsonWriter out, FoodMenu value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FoodMenu read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FoodMenu given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FoodMenu
   * @throws IOException if the JSON string is invalid with respect to FoodMenu
   */
  public static FoodMenu fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FoodMenu.class);
  }

  /**
   * Convert an instance of FoodMenu to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

