/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MatchedLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for Locations.FindMatchingLocations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FindMatchingLocationsResponse {
  public static final String SERIALIZED_NAME_MATCH_TIME = "matchTime";
  @SerializedName(SERIALIZED_NAME_MATCH_TIME)
  private String matchTime;

  public static final String SERIALIZED_NAME_MATCHED_LOCATIONS = "matchedLocations";
  @SerializedName(SERIALIZED_NAME_MATCHED_LOCATIONS)
  private List<MatchedLocation> matchedLocations = new ArrayList<>();

  public FindMatchingLocationsResponse() {
  }

  public FindMatchingLocationsResponse matchTime(String matchTime) {
    this.matchTime = matchTime;
    return this;
  }

  /**
   * When the matching algorithm was last executed for this location.
   * @return matchTime
   */
  @javax.annotation.Nullable
  public String getMatchTime() {
    return matchTime;
  }

  public void setMatchTime(String matchTime) {
    this.matchTime = matchTime;
  }


  public FindMatchingLocationsResponse matchedLocations(List<MatchedLocation> matchedLocations) {
    this.matchedLocations = matchedLocations;
    return this;
  }

  public FindMatchingLocationsResponse addMatchedLocationsItem(MatchedLocation matchedLocationsItem) {
    if (this.matchedLocations == null) {
      this.matchedLocations = new ArrayList<>();
    }
    this.matchedLocations.add(matchedLocationsItem);
    return this;
  }

  /**
   * A collection of locations that are potential matches to the specified location, listed in order from best to least match. If there is an exact match, it will be in the first position.
   * @return matchedLocations
   */
  @javax.annotation.Nullable
  public List<MatchedLocation> getMatchedLocations() {
    return matchedLocations;
  }

  public void setMatchedLocations(List<MatchedLocation> matchedLocations) {
    this.matchedLocations = matchedLocations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FindMatchingLocationsResponse findMatchingLocationsResponse = (FindMatchingLocationsResponse) o;
    return Objects.equals(this.matchTime, findMatchingLocationsResponse.matchTime) &&
        Objects.equals(this.matchedLocations, findMatchingLocationsResponse.matchedLocations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(matchTime, matchedLocations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FindMatchingLocationsResponse {\n");
    sb.append("    matchTime: ").append(toIndentedString(matchTime)).append("\n");
    sb.append("    matchedLocations: ").append(toIndentedString(matchedLocations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("matchTime");
    openapiFields.add("matchedLocations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FindMatchingLocationsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FindMatchingLocationsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FindMatchingLocationsResponse is not found in the empty JSON string", FindMatchingLocationsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FindMatchingLocationsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FindMatchingLocationsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("matchTime") != null && !jsonObj.get("matchTime").isJsonNull()) && !jsonObj.get("matchTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchTime").toString()));
      }
      if (jsonObj.get("matchedLocations") != null && !jsonObj.get("matchedLocations").isJsonNull()) {
        JsonArray jsonArraymatchedLocations = jsonObj.getAsJsonArray("matchedLocations");
        if (jsonArraymatchedLocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("matchedLocations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `matchedLocations` to be an array in the JSON string but got `%s`", jsonObj.get("matchedLocations").toString()));
          }

          // validate the optional field `matchedLocations` (array)
          for (int i = 0; i < jsonArraymatchedLocations.size(); i++) {
            MatchedLocation.validateJsonElement(jsonArraymatchedLocations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FindMatchingLocationsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FindMatchingLocationsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FindMatchingLocationsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FindMatchingLocationsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<FindMatchingLocationsResponse>() {
           @Override
           public void write(JsonWriter out, FindMatchingLocationsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FindMatchingLocationsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FindMatchingLocationsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FindMatchingLocationsResponse
   * @throws IOException if the JSON string is invalid with respect to FindMatchingLocationsResponse
   */
  public static FindMatchingLocationsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FindMatchingLocationsResponse.class);
  }

  /**
   * Convert an instance of FindMatchingLocationsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

