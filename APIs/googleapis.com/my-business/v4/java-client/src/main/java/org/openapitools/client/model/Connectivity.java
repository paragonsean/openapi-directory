/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The ways in which the property provides guests with the ability to access the internet.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Connectivity {
  public static final String SERIALIZED_NAME_FREE_WIFI = "freeWifi";
  @SerializedName(SERIALIZED_NAME_FREE_WIFI)
  private Boolean freeWifi;

  /**
   * Free wifi exception.
   */
  @JsonAdapter(FreeWifiExceptionEnum.Adapter.class)
  public enum FreeWifiExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FreeWifiExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FreeWifiExceptionEnum fromValue(String value) {
      for (FreeWifiExceptionEnum b : FreeWifiExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FreeWifiExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FreeWifiExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FreeWifiExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FreeWifiExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FreeWifiExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FREE_WIFI_EXCEPTION = "freeWifiException";
  @SerializedName(SERIALIZED_NAME_FREE_WIFI_EXCEPTION)
  private FreeWifiExceptionEnum freeWifiException;

  public static final String SERIALIZED_NAME_PUBLIC_AREA_WIFI_AVAILABLE = "publicAreaWifiAvailable";
  @SerializedName(SERIALIZED_NAME_PUBLIC_AREA_WIFI_AVAILABLE)
  private Boolean publicAreaWifiAvailable;

  /**
   * Public area wifi available exception.
   */
  @JsonAdapter(PublicAreaWifiAvailableExceptionEnum.Adapter.class)
  public enum PublicAreaWifiAvailableExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    PublicAreaWifiAvailableExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PublicAreaWifiAvailableExceptionEnum fromValue(String value) {
      for (PublicAreaWifiAvailableExceptionEnum b : PublicAreaWifiAvailableExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PublicAreaWifiAvailableExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PublicAreaWifiAvailableExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PublicAreaWifiAvailableExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PublicAreaWifiAvailableExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PublicAreaWifiAvailableExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PUBLIC_AREA_WIFI_AVAILABLE_EXCEPTION = "publicAreaWifiAvailableException";
  @SerializedName(SERIALIZED_NAME_PUBLIC_AREA_WIFI_AVAILABLE_EXCEPTION)
  private PublicAreaWifiAvailableExceptionEnum publicAreaWifiAvailableException;

  public static final String SERIALIZED_NAME_PUBLIC_INTERNET_TERMINAL = "publicInternetTerminal";
  @SerializedName(SERIALIZED_NAME_PUBLIC_INTERNET_TERMINAL)
  private Boolean publicInternetTerminal;

  /**
   * Public internet terminal exception.
   */
  @JsonAdapter(PublicInternetTerminalExceptionEnum.Adapter.class)
  public enum PublicInternetTerminalExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    PublicInternetTerminalExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PublicInternetTerminalExceptionEnum fromValue(String value) {
      for (PublicInternetTerminalExceptionEnum b : PublicInternetTerminalExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PublicInternetTerminalExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PublicInternetTerminalExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PublicInternetTerminalExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PublicInternetTerminalExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PublicInternetTerminalExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PUBLIC_INTERNET_TERMINAL_EXCEPTION = "publicInternetTerminalException";
  @SerializedName(SERIALIZED_NAME_PUBLIC_INTERNET_TERMINAL_EXCEPTION)
  private PublicInternetTerminalExceptionEnum publicInternetTerminalException;

  public static final String SERIALIZED_NAME_WIFI_AVAILABLE = "wifiAvailable";
  @SerializedName(SERIALIZED_NAME_WIFI_AVAILABLE)
  private Boolean wifiAvailable;

  /**
   * Wifi available exception.
   */
  @JsonAdapter(WifiAvailableExceptionEnum.Adapter.class)
  public enum WifiAvailableExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    WifiAvailableExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WifiAvailableExceptionEnum fromValue(String value) {
      for (WifiAvailableExceptionEnum b : WifiAvailableExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WifiAvailableExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WifiAvailableExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WifiAvailableExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WifiAvailableExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WifiAvailableExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WIFI_AVAILABLE_EXCEPTION = "wifiAvailableException";
  @SerializedName(SERIALIZED_NAME_WIFI_AVAILABLE_EXCEPTION)
  private WifiAvailableExceptionEnum wifiAvailableException;

  public Connectivity() {
  }

  public Connectivity freeWifi(Boolean freeWifi) {
    this.freeWifi = freeWifi;
    return this;
  }

  /**
   * Free wifi. The hotel offers guests wifi for free.
   * @return freeWifi
   */
  @javax.annotation.Nullable
  public Boolean getFreeWifi() {
    return freeWifi;
  }

  public void setFreeWifi(Boolean freeWifi) {
    this.freeWifi = freeWifi;
  }


  public Connectivity freeWifiException(FreeWifiExceptionEnum freeWifiException) {
    this.freeWifiException = freeWifiException;
    return this;
  }

  /**
   * Free wifi exception.
   * @return freeWifiException
   */
  @javax.annotation.Nullable
  public FreeWifiExceptionEnum getFreeWifiException() {
    return freeWifiException;
  }

  public void setFreeWifiException(FreeWifiExceptionEnum freeWifiException) {
    this.freeWifiException = freeWifiException;
  }


  public Connectivity publicAreaWifiAvailable(Boolean publicAreaWifiAvailable) {
    this.publicAreaWifiAvailable = publicAreaWifiAvailable;
    return this;
  }

  /**
   * Public area wifi available. Guests have the ability to wirelessly connect to the internet in the areas of the hotel accessible to anyone. Can be free or for a fee.
   * @return publicAreaWifiAvailable
   */
  @javax.annotation.Nullable
  public Boolean getPublicAreaWifiAvailable() {
    return publicAreaWifiAvailable;
  }

  public void setPublicAreaWifiAvailable(Boolean publicAreaWifiAvailable) {
    this.publicAreaWifiAvailable = publicAreaWifiAvailable;
  }


  public Connectivity publicAreaWifiAvailableException(PublicAreaWifiAvailableExceptionEnum publicAreaWifiAvailableException) {
    this.publicAreaWifiAvailableException = publicAreaWifiAvailableException;
    return this;
  }

  /**
   * Public area wifi available exception.
   * @return publicAreaWifiAvailableException
   */
  @javax.annotation.Nullable
  public PublicAreaWifiAvailableExceptionEnum getPublicAreaWifiAvailableException() {
    return publicAreaWifiAvailableException;
  }

  public void setPublicAreaWifiAvailableException(PublicAreaWifiAvailableExceptionEnum publicAreaWifiAvailableException) {
    this.publicAreaWifiAvailableException = publicAreaWifiAvailableException;
  }


  public Connectivity publicInternetTerminal(Boolean publicInternetTerminal) {
    this.publicInternetTerminal = publicInternetTerminal;
    return this;
  }

  /**
   * Public internet terminal. An area of the hotel supplied with computers and designated for the purpose of providing guests with the ability to access the internet.
   * @return publicInternetTerminal
   */
  @javax.annotation.Nullable
  public Boolean getPublicInternetTerminal() {
    return publicInternetTerminal;
  }

  public void setPublicInternetTerminal(Boolean publicInternetTerminal) {
    this.publicInternetTerminal = publicInternetTerminal;
  }


  public Connectivity publicInternetTerminalException(PublicInternetTerminalExceptionEnum publicInternetTerminalException) {
    this.publicInternetTerminalException = publicInternetTerminalException;
    return this;
  }

  /**
   * Public internet terminal exception.
   * @return publicInternetTerminalException
   */
  @javax.annotation.Nullable
  public PublicInternetTerminalExceptionEnum getPublicInternetTerminalException() {
    return publicInternetTerminalException;
  }

  public void setPublicInternetTerminalException(PublicInternetTerminalExceptionEnum publicInternetTerminalException) {
    this.publicInternetTerminalException = publicInternetTerminalException;
  }


  public Connectivity wifiAvailable(Boolean wifiAvailable) {
    this.wifiAvailable = wifiAvailable;
    return this;
  }

  /**
   * Wifi available. The hotel provides the ability for guests to wirelessly connect to the internet. Can be in the public areas of the hotel and/or in the guest rooms. Can be free or for a fee.
   * @return wifiAvailable
   */
  @javax.annotation.Nullable
  public Boolean getWifiAvailable() {
    return wifiAvailable;
  }

  public void setWifiAvailable(Boolean wifiAvailable) {
    this.wifiAvailable = wifiAvailable;
  }


  public Connectivity wifiAvailableException(WifiAvailableExceptionEnum wifiAvailableException) {
    this.wifiAvailableException = wifiAvailableException;
    return this;
  }

  /**
   * Wifi available exception.
   * @return wifiAvailableException
   */
  @javax.annotation.Nullable
  public WifiAvailableExceptionEnum getWifiAvailableException() {
    return wifiAvailableException;
  }

  public void setWifiAvailableException(WifiAvailableExceptionEnum wifiAvailableException) {
    this.wifiAvailableException = wifiAvailableException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Connectivity connectivity = (Connectivity) o;
    return Objects.equals(this.freeWifi, connectivity.freeWifi) &&
        Objects.equals(this.freeWifiException, connectivity.freeWifiException) &&
        Objects.equals(this.publicAreaWifiAvailable, connectivity.publicAreaWifiAvailable) &&
        Objects.equals(this.publicAreaWifiAvailableException, connectivity.publicAreaWifiAvailableException) &&
        Objects.equals(this.publicInternetTerminal, connectivity.publicInternetTerminal) &&
        Objects.equals(this.publicInternetTerminalException, connectivity.publicInternetTerminalException) &&
        Objects.equals(this.wifiAvailable, connectivity.wifiAvailable) &&
        Objects.equals(this.wifiAvailableException, connectivity.wifiAvailableException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(freeWifi, freeWifiException, publicAreaWifiAvailable, publicAreaWifiAvailableException, publicInternetTerminal, publicInternetTerminalException, wifiAvailable, wifiAvailableException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Connectivity {\n");
    sb.append("    freeWifi: ").append(toIndentedString(freeWifi)).append("\n");
    sb.append("    freeWifiException: ").append(toIndentedString(freeWifiException)).append("\n");
    sb.append("    publicAreaWifiAvailable: ").append(toIndentedString(publicAreaWifiAvailable)).append("\n");
    sb.append("    publicAreaWifiAvailableException: ").append(toIndentedString(publicAreaWifiAvailableException)).append("\n");
    sb.append("    publicInternetTerminal: ").append(toIndentedString(publicInternetTerminal)).append("\n");
    sb.append("    publicInternetTerminalException: ").append(toIndentedString(publicInternetTerminalException)).append("\n");
    sb.append("    wifiAvailable: ").append(toIndentedString(wifiAvailable)).append("\n");
    sb.append("    wifiAvailableException: ").append(toIndentedString(wifiAvailableException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("freeWifi");
    openapiFields.add("freeWifiException");
    openapiFields.add("publicAreaWifiAvailable");
    openapiFields.add("publicAreaWifiAvailableException");
    openapiFields.add("publicInternetTerminal");
    openapiFields.add("publicInternetTerminalException");
    openapiFields.add("wifiAvailable");
    openapiFields.add("wifiAvailableException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Connectivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Connectivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Connectivity is not found in the empty JSON string", Connectivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Connectivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Connectivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("freeWifiException") != null && !jsonObj.get("freeWifiException").isJsonNull()) && !jsonObj.get("freeWifiException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeWifiException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeWifiException").toString()));
      }
      // validate the optional field `freeWifiException`
      if (jsonObj.get("freeWifiException") != null && !jsonObj.get("freeWifiException").isJsonNull()) {
        FreeWifiExceptionEnum.validateJsonElement(jsonObj.get("freeWifiException"));
      }
      if ((jsonObj.get("publicAreaWifiAvailableException") != null && !jsonObj.get("publicAreaWifiAvailableException").isJsonNull()) && !jsonObj.get("publicAreaWifiAvailableException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicAreaWifiAvailableException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicAreaWifiAvailableException").toString()));
      }
      // validate the optional field `publicAreaWifiAvailableException`
      if (jsonObj.get("publicAreaWifiAvailableException") != null && !jsonObj.get("publicAreaWifiAvailableException").isJsonNull()) {
        PublicAreaWifiAvailableExceptionEnum.validateJsonElement(jsonObj.get("publicAreaWifiAvailableException"));
      }
      if ((jsonObj.get("publicInternetTerminalException") != null && !jsonObj.get("publicInternetTerminalException").isJsonNull()) && !jsonObj.get("publicInternetTerminalException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicInternetTerminalException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicInternetTerminalException").toString()));
      }
      // validate the optional field `publicInternetTerminalException`
      if (jsonObj.get("publicInternetTerminalException") != null && !jsonObj.get("publicInternetTerminalException").isJsonNull()) {
        PublicInternetTerminalExceptionEnum.validateJsonElement(jsonObj.get("publicInternetTerminalException"));
      }
      if ((jsonObj.get("wifiAvailableException") != null && !jsonObj.get("wifiAvailableException").isJsonNull()) && !jsonObj.get("wifiAvailableException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wifiAvailableException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wifiAvailableException").toString()));
      }
      // validate the optional field `wifiAvailableException`
      if (jsonObj.get("wifiAvailableException") != null && !jsonObj.get("wifiAvailableException").isJsonNull()) {
        WifiAvailableExceptionEnum.validateJsonElement(jsonObj.get("wifiAvailableException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Connectivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Connectivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Connectivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Connectivity.class));

       return (TypeAdapter<T>) new TypeAdapter<Connectivity>() {
           @Override
           public void write(JsonWriter out, Connectivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Connectivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Connectivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Connectivity
   * @throws IOException if the JSON string is invalid with respect to Connectivity
   */
  public static Connectivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Connectivity.class);
  }

  /**
   * Convert an instance of Connectivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

