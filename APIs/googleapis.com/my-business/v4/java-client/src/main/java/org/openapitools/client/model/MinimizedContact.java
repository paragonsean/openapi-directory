/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Minimized contact measures implemented by the hotel during COVID-19.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MinimizedContact {
  public static final String SERIALIZED_NAME_CONTACTLESS_CHECKIN_CHECKOUT = "contactlessCheckinCheckout";
  @SerializedName(SERIALIZED_NAME_CONTACTLESS_CHECKIN_CHECKOUT)
  private Boolean contactlessCheckinCheckout;

  /**
   * Contactless check-in check-out exception.
   */
  @JsonAdapter(ContactlessCheckinCheckoutExceptionEnum.Adapter.class)
  public enum ContactlessCheckinCheckoutExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ContactlessCheckinCheckoutExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContactlessCheckinCheckoutExceptionEnum fromValue(String value) {
      for (ContactlessCheckinCheckoutExceptionEnum b : ContactlessCheckinCheckoutExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContactlessCheckinCheckoutExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContactlessCheckinCheckoutExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContactlessCheckinCheckoutExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContactlessCheckinCheckoutExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContactlessCheckinCheckoutExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTACTLESS_CHECKIN_CHECKOUT_EXCEPTION = "contactlessCheckinCheckoutException";
  @SerializedName(SERIALIZED_NAME_CONTACTLESS_CHECKIN_CHECKOUT_EXCEPTION)
  private ContactlessCheckinCheckoutExceptionEnum contactlessCheckinCheckoutException;

  public static final String SERIALIZED_NAME_DIGITAL_GUEST_ROOM_KEYS = "digitalGuestRoomKeys";
  @SerializedName(SERIALIZED_NAME_DIGITAL_GUEST_ROOM_KEYS)
  private Boolean digitalGuestRoomKeys;

  /**
   * Digital guest room keys exception.
   */
  @JsonAdapter(DigitalGuestRoomKeysExceptionEnum.Adapter.class)
  public enum DigitalGuestRoomKeysExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    DigitalGuestRoomKeysExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DigitalGuestRoomKeysExceptionEnum fromValue(String value) {
      for (DigitalGuestRoomKeysExceptionEnum b : DigitalGuestRoomKeysExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DigitalGuestRoomKeysExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DigitalGuestRoomKeysExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DigitalGuestRoomKeysExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DigitalGuestRoomKeysExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DigitalGuestRoomKeysExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIGITAL_GUEST_ROOM_KEYS_EXCEPTION = "digitalGuestRoomKeysException";
  @SerializedName(SERIALIZED_NAME_DIGITAL_GUEST_ROOM_KEYS_EXCEPTION)
  private DigitalGuestRoomKeysExceptionEnum digitalGuestRoomKeysException;

  public static final String SERIALIZED_NAME_HOUSEKEEPING_SCHEDULED_REQUEST_ONLY = "housekeepingScheduledRequestOnly";
  @SerializedName(SERIALIZED_NAME_HOUSEKEEPING_SCHEDULED_REQUEST_ONLY)
  private Boolean housekeepingScheduledRequestOnly;

  /**
   * Housekeeping scheduled request only exception.
   */
  @JsonAdapter(HousekeepingScheduledRequestOnlyExceptionEnum.Adapter.class)
  public enum HousekeepingScheduledRequestOnlyExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    HousekeepingScheduledRequestOnlyExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HousekeepingScheduledRequestOnlyExceptionEnum fromValue(String value) {
      for (HousekeepingScheduledRequestOnlyExceptionEnum b : HousekeepingScheduledRequestOnlyExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HousekeepingScheduledRequestOnlyExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HousekeepingScheduledRequestOnlyExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HousekeepingScheduledRequestOnlyExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HousekeepingScheduledRequestOnlyExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HousekeepingScheduledRequestOnlyExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOUSEKEEPING_SCHEDULED_REQUEST_ONLY_EXCEPTION = "housekeepingScheduledRequestOnlyException";
  @SerializedName(SERIALIZED_NAME_HOUSEKEEPING_SCHEDULED_REQUEST_ONLY_EXCEPTION)
  private HousekeepingScheduledRequestOnlyExceptionEnum housekeepingScheduledRequestOnlyException;

  public static final String SERIALIZED_NAME_NO_HIGH_TOUCH_ITEMS_COMMON_AREAS = "noHighTouchItemsCommonAreas";
  @SerializedName(SERIALIZED_NAME_NO_HIGH_TOUCH_ITEMS_COMMON_AREAS)
  private Boolean noHighTouchItemsCommonAreas;

  /**
   * No high touch items common areas exception.
   */
  @JsonAdapter(NoHighTouchItemsCommonAreasExceptionEnum.Adapter.class)
  public enum NoHighTouchItemsCommonAreasExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    NoHighTouchItemsCommonAreasExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NoHighTouchItemsCommonAreasExceptionEnum fromValue(String value) {
      for (NoHighTouchItemsCommonAreasExceptionEnum b : NoHighTouchItemsCommonAreasExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NoHighTouchItemsCommonAreasExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NoHighTouchItemsCommonAreasExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NoHighTouchItemsCommonAreasExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NoHighTouchItemsCommonAreasExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NoHighTouchItemsCommonAreasExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NO_HIGH_TOUCH_ITEMS_COMMON_AREAS_EXCEPTION = "noHighTouchItemsCommonAreasException";
  @SerializedName(SERIALIZED_NAME_NO_HIGH_TOUCH_ITEMS_COMMON_AREAS_EXCEPTION)
  private NoHighTouchItemsCommonAreasExceptionEnum noHighTouchItemsCommonAreasException;

  public static final String SERIALIZED_NAME_NO_HIGH_TOUCH_ITEMS_GUEST_ROOMS = "noHighTouchItemsGuestRooms";
  @SerializedName(SERIALIZED_NAME_NO_HIGH_TOUCH_ITEMS_GUEST_ROOMS)
  private Boolean noHighTouchItemsGuestRooms;

  /**
   * No high touch items guest rooms exception.
   */
  @JsonAdapter(NoHighTouchItemsGuestRoomsExceptionEnum.Adapter.class)
  public enum NoHighTouchItemsGuestRoomsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    NoHighTouchItemsGuestRoomsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NoHighTouchItemsGuestRoomsExceptionEnum fromValue(String value) {
      for (NoHighTouchItemsGuestRoomsExceptionEnum b : NoHighTouchItemsGuestRoomsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NoHighTouchItemsGuestRoomsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NoHighTouchItemsGuestRoomsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NoHighTouchItemsGuestRoomsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NoHighTouchItemsGuestRoomsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NoHighTouchItemsGuestRoomsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NO_HIGH_TOUCH_ITEMS_GUEST_ROOMS_EXCEPTION = "noHighTouchItemsGuestRoomsException";
  @SerializedName(SERIALIZED_NAME_NO_HIGH_TOUCH_ITEMS_GUEST_ROOMS_EXCEPTION)
  private NoHighTouchItemsGuestRoomsExceptionEnum noHighTouchItemsGuestRoomsException;

  public static final String SERIALIZED_NAME_PLASTIC_KEYCARDS_DISINFECTED = "plasticKeycardsDisinfected";
  @SerializedName(SERIALIZED_NAME_PLASTIC_KEYCARDS_DISINFECTED)
  private Boolean plasticKeycardsDisinfected;

  /**
   * Plastic keycards disinfected exception.
   */
  @JsonAdapter(PlasticKeycardsDisinfectedExceptionEnum.Adapter.class)
  public enum PlasticKeycardsDisinfectedExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    PlasticKeycardsDisinfectedExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlasticKeycardsDisinfectedExceptionEnum fromValue(String value) {
      for (PlasticKeycardsDisinfectedExceptionEnum b : PlasticKeycardsDisinfectedExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlasticKeycardsDisinfectedExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlasticKeycardsDisinfectedExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlasticKeycardsDisinfectedExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlasticKeycardsDisinfectedExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlasticKeycardsDisinfectedExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLASTIC_KEYCARDS_DISINFECTED_EXCEPTION = "plasticKeycardsDisinfectedException";
  @SerializedName(SERIALIZED_NAME_PLASTIC_KEYCARDS_DISINFECTED_EXCEPTION)
  private PlasticKeycardsDisinfectedExceptionEnum plasticKeycardsDisinfectedException;

  public static final String SERIALIZED_NAME_ROOM_BOOKINGS_BUFFER = "roomBookingsBuffer";
  @SerializedName(SERIALIZED_NAME_ROOM_BOOKINGS_BUFFER)
  private Boolean roomBookingsBuffer;

  /**
   * Room bookings buffer exception.
   */
  @JsonAdapter(RoomBookingsBufferExceptionEnum.Adapter.class)
  public enum RoomBookingsBufferExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    RoomBookingsBufferExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoomBookingsBufferExceptionEnum fromValue(String value) {
      for (RoomBookingsBufferExceptionEnum b : RoomBookingsBufferExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoomBookingsBufferExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoomBookingsBufferExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoomBookingsBufferExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoomBookingsBufferExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoomBookingsBufferExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROOM_BOOKINGS_BUFFER_EXCEPTION = "roomBookingsBufferException";
  @SerializedName(SERIALIZED_NAME_ROOM_BOOKINGS_BUFFER_EXCEPTION)
  private RoomBookingsBufferExceptionEnum roomBookingsBufferException;

  public MinimizedContact() {
  }

  public MinimizedContact contactlessCheckinCheckout(Boolean contactlessCheckinCheckout) {
    this.contactlessCheckinCheckout = contactlessCheckinCheckout;
    return this;
  }

  /**
   * No-contact check-in and check-out.
   * @return contactlessCheckinCheckout
   */
  @javax.annotation.Nullable
  public Boolean getContactlessCheckinCheckout() {
    return contactlessCheckinCheckout;
  }

  public void setContactlessCheckinCheckout(Boolean contactlessCheckinCheckout) {
    this.contactlessCheckinCheckout = contactlessCheckinCheckout;
  }


  public MinimizedContact contactlessCheckinCheckoutException(ContactlessCheckinCheckoutExceptionEnum contactlessCheckinCheckoutException) {
    this.contactlessCheckinCheckoutException = contactlessCheckinCheckoutException;
    return this;
  }

  /**
   * Contactless check-in check-out exception.
   * @return contactlessCheckinCheckoutException
   */
  @javax.annotation.Nullable
  public ContactlessCheckinCheckoutExceptionEnum getContactlessCheckinCheckoutException() {
    return contactlessCheckinCheckoutException;
  }

  public void setContactlessCheckinCheckoutException(ContactlessCheckinCheckoutExceptionEnum contactlessCheckinCheckoutException) {
    this.contactlessCheckinCheckoutException = contactlessCheckinCheckoutException;
  }


  public MinimizedContact digitalGuestRoomKeys(Boolean digitalGuestRoomKeys) {
    this.digitalGuestRoomKeys = digitalGuestRoomKeys;
    return this;
  }

  /**
   * Keyless mobile entry to guest rooms.
   * @return digitalGuestRoomKeys
   */
  @javax.annotation.Nullable
  public Boolean getDigitalGuestRoomKeys() {
    return digitalGuestRoomKeys;
  }

  public void setDigitalGuestRoomKeys(Boolean digitalGuestRoomKeys) {
    this.digitalGuestRoomKeys = digitalGuestRoomKeys;
  }


  public MinimizedContact digitalGuestRoomKeysException(DigitalGuestRoomKeysExceptionEnum digitalGuestRoomKeysException) {
    this.digitalGuestRoomKeysException = digitalGuestRoomKeysException;
    return this;
  }

  /**
   * Digital guest room keys exception.
   * @return digitalGuestRoomKeysException
   */
  @javax.annotation.Nullable
  public DigitalGuestRoomKeysExceptionEnum getDigitalGuestRoomKeysException() {
    return digitalGuestRoomKeysException;
  }

  public void setDigitalGuestRoomKeysException(DigitalGuestRoomKeysExceptionEnum digitalGuestRoomKeysException) {
    this.digitalGuestRoomKeysException = digitalGuestRoomKeysException;
  }


  public MinimizedContact housekeepingScheduledRequestOnly(Boolean housekeepingScheduledRequestOnly) {
    this.housekeepingScheduledRequestOnly = housekeepingScheduledRequestOnly;
    return this;
  }

  /**
   * Housekeeping scheduled by request only.
   * @return housekeepingScheduledRequestOnly
   */
  @javax.annotation.Nullable
  public Boolean getHousekeepingScheduledRequestOnly() {
    return housekeepingScheduledRequestOnly;
  }

  public void setHousekeepingScheduledRequestOnly(Boolean housekeepingScheduledRequestOnly) {
    this.housekeepingScheduledRequestOnly = housekeepingScheduledRequestOnly;
  }


  public MinimizedContact housekeepingScheduledRequestOnlyException(HousekeepingScheduledRequestOnlyExceptionEnum housekeepingScheduledRequestOnlyException) {
    this.housekeepingScheduledRequestOnlyException = housekeepingScheduledRequestOnlyException;
    return this;
  }

  /**
   * Housekeeping scheduled request only exception.
   * @return housekeepingScheduledRequestOnlyException
   */
  @javax.annotation.Nullable
  public HousekeepingScheduledRequestOnlyExceptionEnum getHousekeepingScheduledRequestOnlyException() {
    return housekeepingScheduledRequestOnlyException;
  }

  public void setHousekeepingScheduledRequestOnlyException(HousekeepingScheduledRequestOnlyExceptionEnum housekeepingScheduledRequestOnlyException) {
    this.housekeepingScheduledRequestOnlyException = housekeepingScheduledRequestOnlyException;
  }


  public MinimizedContact noHighTouchItemsCommonAreas(Boolean noHighTouchItemsCommonAreas) {
    this.noHighTouchItemsCommonAreas = noHighTouchItemsCommonAreas;
    return this;
  }

  /**
   * High-touch items, such as magazines, removed from common areas.
   * @return noHighTouchItemsCommonAreas
   */
  @javax.annotation.Nullable
  public Boolean getNoHighTouchItemsCommonAreas() {
    return noHighTouchItemsCommonAreas;
  }

  public void setNoHighTouchItemsCommonAreas(Boolean noHighTouchItemsCommonAreas) {
    this.noHighTouchItemsCommonAreas = noHighTouchItemsCommonAreas;
  }


  public MinimizedContact noHighTouchItemsCommonAreasException(NoHighTouchItemsCommonAreasExceptionEnum noHighTouchItemsCommonAreasException) {
    this.noHighTouchItemsCommonAreasException = noHighTouchItemsCommonAreasException;
    return this;
  }

  /**
   * No high touch items common areas exception.
   * @return noHighTouchItemsCommonAreasException
   */
  @javax.annotation.Nullable
  public NoHighTouchItemsCommonAreasExceptionEnum getNoHighTouchItemsCommonAreasException() {
    return noHighTouchItemsCommonAreasException;
  }

  public void setNoHighTouchItemsCommonAreasException(NoHighTouchItemsCommonAreasExceptionEnum noHighTouchItemsCommonAreasException) {
    this.noHighTouchItemsCommonAreasException = noHighTouchItemsCommonAreasException;
  }


  public MinimizedContact noHighTouchItemsGuestRooms(Boolean noHighTouchItemsGuestRooms) {
    this.noHighTouchItemsGuestRooms = noHighTouchItemsGuestRooms;
    return this;
  }

  /**
   * High-touch items, such as decorative pillows, removed from guest rooms.
   * @return noHighTouchItemsGuestRooms
   */
  @javax.annotation.Nullable
  public Boolean getNoHighTouchItemsGuestRooms() {
    return noHighTouchItemsGuestRooms;
  }

  public void setNoHighTouchItemsGuestRooms(Boolean noHighTouchItemsGuestRooms) {
    this.noHighTouchItemsGuestRooms = noHighTouchItemsGuestRooms;
  }


  public MinimizedContact noHighTouchItemsGuestRoomsException(NoHighTouchItemsGuestRoomsExceptionEnum noHighTouchItemsGuestRoomsException) {
    this.noHighTouchItemsGuestRoomsException = noHighTouchItemsGuestRoomsException;
    return this;
  }

  /**
   * No high touch items guest rooms exception.
   * @return noHighTouchItemsGuestRoomsException
   */
  @javax.annotation.Nullable
  public NoHighTouchItemsGuestRoomsExceptionEnum getNoHighTouchItemsGuestRoomsException() {
    return noHighTouchItemsGuestRoomsException;
  }

  public void setNoHighTouchItemsGuestRoomsException(NoHighTouchItemsGuestRoomsExceptionEnum noHighTouchItemsGuestRoomsException) {
    this.noHighTouchItemsGuestRoomsException = noHighTouchItemsGuestRoomsException;
  }


  public MinimizedContact plasticKeycardsDisinfected(Boolean plasticKeycardsDisinfected) {
    this.plasticKeycardsDisinfected = plasticKeycardsDisinfected;
    return this;
  }

  /**
   * Plastic key cards are disinfected or discarded.
   * @return plasticKeycardsDisinfected
   */
  @javax.annotation.Nullable
  public Boolean getPlasticKeycardsDisinfected() {
    return plasticKeycardsDisinfected;
  }

  public void setPlasticKeycardsDisinfected(Boolean plasticKeycardsDisinfected) {
    this.plasticKeycardsDisinfected = plasticKeycardsDisinfected;
  }


  public MinimizedContact plasticKeycardsDisinfectedException(PlasticKeycardsDisinfectedExceptionEnum plasticKeycardsDisinfectedException) {
    this.plasticKeycardsDisinfectedException = plasticKeycardsDisinfectedException;
    return this;
  }

  /**
   * Plastic keycards disinfected exception.
   * @return plasticKeycardsDisinfectedException
   */
  @javax.annotation.Nullable
  public PlasticKeycardsDisinfectedExceptionEnum getPlasticKeycardsDisinfectedException() {
    return plasticKeycardsDisinfectedException;
  }

  public void setPlasticKeycardsDisinfectedException(PlasticKeycardsDisinfectedExceptionEnum plasticKeycardsDisinfectedException) {
    this.plasticKeycardsDisinfectedException = plasticKeycardsDisinfectedException;
  }


  public MinimizedContact roomBookingsBuffer(Boolean roomBookingsBuffer) {
    this.roomBookingsBuffer = roomBookingsBuffer;
    return this;
  }

  /**
   * Buffer maintained between room bookings.
   * @return roomBookingsBuffer
   */
  @javax.annotation.Nullable
  public Boolean getRoomBookingsBuffer() {
    return roomBookingsBuffer;
  }

  public void setRoomBookingsBuffer(Boolean roomBookingsBuffer) {
    this.roomBookingsBuffer = roomBookingsBuffer;
  }


  public MinimizedContact roomBookingsBufferException(RoomBookingsBufferExceptionEnum roomBookingsBufferException) {
    this.roomBookingsBufferException = roomBookingsBufferException;
    return this;
  }

  /**
   * Room bookings buffer exception.
   * @return roomBookingsBufferException
   */
  @javax.annotation.Nullable
  public RoomBookingsBufferExceptionEnum getRoomBookingsBufferException() {
    return roomBookingsBufferException;
  }

  public void setRoomBookingsBufferException(RoomBookingsBufferExceptionEnum roomBookingsBufferException) {
    this.roomBookingsBufferException = roomBookingsBufferException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MinimizedContact minimizedContact = (MinimizedContact) o;
    return Objects.equals(this.contactlessCheckinCheckout, minimizedContact.contactlessCheckinCheckout) &&
        Objects.equals(this.contactlessCheckinCheckoutException, minimizedContact.contactlessCheckinCheckoutException) &&
        Objects.equals(this.digitalGuestRoomKeys, minimizedContact.digitalGuestRoomKeys) &&
        Objects.equals(this.digitalGuestRoomKeysException, minimizedContact.digitalGuestRoomKeysException) &&
        Objects.equals(this.housekeepingScheduledRequestOnly, minimizedContact.housekeepingScheduledRequestOnly) &&
        Objects.equals(this.housekeepingScheduledRequestOnlyException, minimizedContact.housekeepingScheduledRequestOnlyException) &&
        Objects.equals(this.noHighTouchItemsCommonAreas, minimizedContact.noHighTouchItemsCommonAreas) &&
        Objects.equals(this.noHighTouchItemsCommonAreasException, minimizedContact.noHighTouchItemsCommonAreasException) &&
        Objects.equals(this.noHighTouchItemsGuestRooms, minimizedContact.noHighTouchItemsGuestRooms) &&
        Objects.equals(this.noHighTouchItemsGuestRoomsException, minimizedContact.noHighTouchItemsGuestRoomsException) &&
        Objects.equals(this.plasticKeycardsDisinfected, minimizedContact.plasticKeycardsDisinfected) &&
        Objects.equals(this.plasticKeycardsDisinfectedException, minimizedContact.plasticKeycardsDisinfectedException) &&
        Objects.equals(this.roomBookingsBuffer, minimizedContact.roomBookingsBuffer) &&
        Objects.equals(this.roomBookingsBufferException, minimizedContact.roomBookingsBufferException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactlessCheckinCheckout, contactlessCheckinCheckoutException, digitalGuestRoomKeys, digitalGuestRoomKeysException, housekeepingScheduledRequestOnly, housekeepingScheduledRequestOnlyException, noHighTouchItemsCommonAreas, noHighTouchItemsCommonAreasException, noHighTouchItemsGuestRooms, noHighTouchItemsGuestRoomsException, plasticKeycardsDisinfected, plasticKeycardsDisinfectedException, roomBookingsBuffer, roomBookingsBufferException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MinimizedContact {\n");
    sb.append("    contactlessCheckinCheckout: ").append(toIndentedString(contactlessCheckinCheckout)).append("\n");
    sb.append("    contactlessCheckinCheckoutException: ").append(toIndentedString(contactlessCheckinCheckoutException)).append("\n");
    sb.append("    digitalGuestRoomKeys: ").append(toIndentedString(digitalGuestRoomKeys)).append("\n");
    sb.append("    digitalGuestRoomKeysException: ").append(toIndentedString(digitalGuestRoomKeysException)).append("\n");
    sb.append("    housekeepingScheduledRequestOnly: ").append(toIndentedString(housekeepingScheduledRequestOnly)).append("\n");
    sb.append("    housekeepingScheduledRequestOnlyException: ").append(toIndentedString(housekeepingScheduledRequestOnlyException)).append("\n");
    sb.append("    noHighTouchItemsCommonAreas: ").append(toIndentedString(noHighTouchItemsCommonAreas)).append("\n");
    sb.append("    noHighTouchItemsCommonAreasException: ").append(toIndentedString(noHighTouchItemsCommonAreasException)).append("\n");
    sb.append("    noHighTouchItemsGuestRooms: ").append(toIndentedString(noHighTouchItemsGuestRooms)).append("\n");
    sb.append("    noHighTouchItemsGuestRoomsException: ").append(toIndentedString(noHighTouchItemsGuestRoomsException)).append("\n");
    sb.append("    plasticKeycardsDisinfected: ").append(toIndentedString(plasticKeycardsDisinfected)).append("\n");
    sb.append("    plasticKeycardsDisinfectedException: ").append(toIndentedString(plasticKeycardsDisinfectedException)).append("\n");
    sb.append("    roomBookingsBuffer: ").append(toIndentedString(roomBookingsBuffer)).append("\n");
    sb.append("    roomBookingsBufferException: ").append(toIndentedString(roomBookingsBufferException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contactlessCheckinCheckout");
    openapiFields.add("contactlessCheckinCheckoutException");
    openapiFields.add("digitalGuestRoomKeys");
    openapiFields.add("digitalGuestRoomKeysException");
    openapiFields.add("housekeepingScheduledRequestOnly");
    openapiFields.add("housekeepingScheduledRequestOnlyException");
    openapiFields.add("noHighTouchItemsCommonAreas");
    openapiFields.add("noHighTouchItemsCommonAreasException");
    openapiFields.add("noHighTouchItemsGuestRooms");
    openapiFields.add("noHighTouchItemsGuestRoomsException");
    openapiFields.add("plasticKeycardsDisinfected");
    openapiFields.add("plasticKeycardsDisinfectedException");
    openapiFields.add("roomBookingsBuffer");
    openapiFields.add("roomBookingsBufferException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MinimizedContact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MinimizedContact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MinimizedContact is not found in the empty JSON string", MinimizedContact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MinimizedContact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MinimizedContact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contactlessCheckinCheckoutException") != null && !jsonObj.get("contactlessCheckinCheckoutException").isJsonNull()) && !jsonObj.get("contactlessCheckinCheckoutException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactlessCheckinCheckoutException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactlessCheckinCheckoutException").toString()));
      }
      // validate the optional field `contactlessCheckinCheckoutException`
      if (jsonObj.get("contactlessCheckinCheckoutException") != null && !jsonObj.get("contactlessCheckinCheckoutException").isJsonNull()) {
        ContactlessCheckinCheckoutExceptionEnum.validateJsonElement(jsonObj.get("contactlessCheckinCheckoutException"));
      }
      if ((jsonObj.get("digitalGuestRoomKeysException") != null && !jsonObj.get("digitalGuestRoomKeysException").isJsonNull()) && !jsonObj.get("digitalGuestRoomKeysException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digitalGuestRoomKeysException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digitalGuestRoomKeysException").toString()));
      }
      // validate the optional field `digitalGuestRoomKeysException`
      if (jsonObj.get("digitalGuestRoomKeysException") != null && !jsonObj.get("digitalGuestRoomKeysException").isJsonNull()) {
        DigitalGuestRoomKeysExceptionEnum.validateJsonElement(jsonObj.get("digitalGuestRoomKeysException"));
      }
      if ((jsonObj.get("housekeepingScheduledRequestOnlyException") != null && !jsonObj.get("housekeepingScheduledRequestOnlyException").isJsonNull()) && !jsonObj.get("housekeepingScheduledRequestOnlyException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `housekeepingScheduledRequestOnlyException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("housekeepingScheduledRequestOnlyException").toString()));
      }
      // validate the optional field `housekeepingScheduledRequestOnlyException`
      if (jsonObj.get("housekeepingScheduledRequestOnlyException") != null && !jsonObj.get("housekeepingScheduledRequestOnlyException").isJsonNull()) {
        HousekeepingScheduledRequestOnlyExceptionEnum.validateJsonElement(jsonObj.get("housekeepingScheduledRequestOnlyException"));
      }
      if ((jsonObj.get("noHighTouchItemsCommonAreasException") != null && !jsonObj.get("noHighTouchItemsCommonAreasException").isJsonNull()) && !jsonObj.get("noHighTouchItemsCommonAreasException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noHighTouchItemsCommonAreasException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noHighTouchItemsCommonAreasException").toString()));
      }
      // validate the optional field `noHighTouchItemsCommonAreasException`
      if (jsonObj.get("noHighTouchItemsCommonAreasException") != null && !jsonObj.get("noHighTouchItemsCommonAreasException").isJsonNull()) {
        NoHighTouchItemsCommonAreasExceptionEnum.validateJsonElement(jsonObj.get("noHighTouchItemsCommonAreasException"));
      }
      if ((jsonObj.get("noHighTouchItemsGuestRoomsException") != null && !jsonObj.get("noHighTouchItemsGuestRoomsException").isJsonNull()) && !jsonObj.get("noHighTouchItemsGuestRoomsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noHighTouchItemsGuestRoomsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noHighTouchItemsGuestRoomsException").toString()));
      }
      // validate the optional field `noHighTouchItemsGuestRoomsException`
      if (jsonObj.get("noHighTouchItemsGuestRoomsException") != null && !jsonObj.get("noHighTouchItemsGuestRoomsException").isJsonNull()) {
        NoHighTouchItemsGuestRoomsExceptionEnum.validateJsonElement(jsonObj.get("noHighTouchItemsGuestRoomsException"));
      }
      if ((jsonObj.get("plasticKeycardsDisinfectedException") != null && !jsonObj.get("plasticKeycardsDisinfectedException").isJsonNull()) && !jsonObj.get("plasticKeycardsDisinfectedException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plasticKeycardsDisinfectedException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plasticKeycardsDisinfectedException").toString()));
      }
      // validate the optional field `plasticKeycardsDisinfectedException`
      if (jsonObj.get("plasticKeycardsDisinfectedException") != null && !jsonObj.get("plasticKeycardsDisinfectedException").isJsonNull()) {
        PlasticKeycardsDisinfectedExceptionEnum.validateJsonElement(jsonObj.get("plasticKeycardsDisinfectedException"));
      }
      if ((jsonObj.get("roomBookingsBufferException") != null && !jsonObj.get("roomBookingsBufferException").isJsonNull()) && !jsonObj.get("roomBookingsBufferException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roomBookingsBufferException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roomBookingsBufferException").toString()));
      }
      // validate the optional field `roomBookingsBufferException`
      if (jsonObj.get("roomBookingsBufferException") != null && !jsonObj.get("roomBookingsBufferException").isJsonNull()) {
        RoomBookingsBufferExceptionEnum.validateJsonElement(jsonObj.get("roomBookingsBufferException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MinimizedContact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MinimizedContact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MinimizedContact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MinimizedContact.class));

       return (TypeAdapter<T>) new TypeAdapter<MinimizedContact>() {
           @Override
           public void write(JsonWriter out, MinimizedContact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MinimizedContact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MinimizedContact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MinimizedContact
   * @throws IOException if the JSON string is invalid with respect to MinimizedContact
   */
  public static MinimizedContact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MinimizedContact.class);
  }

  /**
   * Convert an instance of MinimizedContact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

