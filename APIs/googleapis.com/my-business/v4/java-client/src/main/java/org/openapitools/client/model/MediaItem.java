/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Attribution;
import org.openapitools.client.model.Dimensions;
import org.openapitools.client.model.LocationAssociation;
import org.openapitools.client.model.MediaInsights;
import org.openapitools.client.model.MediaItemDataRef;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single media item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediaItem {
  public static final String SERIALIZED_NAME_ATTRIBUTION = "attribution";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTION)
  private Attribution attribution;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DATA_REF = "dataRef";
  @SerializedName(SERIALIZED_NAME_DATA_REF)
  private MediaItemDataRef dataRef;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Dimensions dimensions;

  public static final String SERIALIZED_NAME_GOOGLE_URL = "googleUrl";
  @SerializedName(SERIALIZED_NAME_GOOGLE_URL)
  private String googleUrl;

  public static final String SERIALIZED_NAME_INSIGHTS = "insights";
  @SerializedName(SERIALIZED_NAME_INSIGHTS)
  private MediaInsights insights;

  public static final String SERIALIZED_NAME_LOCATION_ASSOCIATION = "locationAssociation";
  @SerializedName(SERIALIZED_NAME_LOCATION_ASSOCIATION)
  private LocationAssociation locationAssociation;

  /**
   * The format of this media item. Must be set when the media item is created, and is read-only on all other requests. Cannot be updated.
   */
  @JsonAdapter(MediaFormatEnum.Adapter.class)
  public enum MediaFormatEnum {
    MEDIA_FORMAT_UNSPECIFIED("MEDIA_FORMAT_UNSPECIFIED"),
    
    PHOTO("PHOTO"),
    
    VIDEO("VIDEO");

    private String value;

    MediaFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MediaFormatEnum fromValue(String value) {
      for (MediaFormatEnum b : MediaFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MediaFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MediaFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MediaFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MediaFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MediaFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEDIA_FORMAT = "mediaFormat";
  @SerializedName(SERIALIZED_NAME_MEDIA_FORMAT)
  private MediaFormatEnum mediaFormat;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE_URL = "sourceUrl";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private String sourceUrl;

  public static final String SERIALIZED_NAME_THUMBNAIL_URL = "thumbnailUrl";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_URL)
  private String thumbnailUrl;

  public MediaItem() {
  }

  public MediaItem attribution(Attribution attribution) {
    this.attribution = attribution;
    return this;
  }

  /**
   * Get attribution
   * @return attribution
   */
  @javax.annotation.Nullable
  public Attribution getAttribution() {
    return attribution;
  }

  public void setAttribution(Attribution attribution) {
    this.attribution = attribution;
  }


  public MediaItem createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. Creation time of this media item.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public MediaItem dataRef(MediaItemDataRef dataRef) {
    this.dataRef = dataRef;
    return this;
  }

  /**
   * Get dataRef
   * @return dataRef
   */
  @javax.annotation.Nullable
  public MediaItemDataRef getDataRef() {
    return dataRef;
  }

  public void setDataRef(MediaItemDataRef dataRef) {
    this.dataRef = dataRef;
  }


  public MediaItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description for this media item. Descriptions cannot be modified through the Google My Business API, but can be set when creating a new media item that is not a cover photo.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public MediaItem dimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public Dimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
  }


  public MediaItem googleUrl(String googleUrl) {
    this.googleUrl = googleUrl;
    return this;
  }

  /**
   * Output only. Google-hosted URL for this media item. This URL is not static since it may change over time. For video this will be a preview image with an overlaid play icon.
   * @return googleUrl
   */
  @javax.annotation.Nullable
  public String getGoogleUrl() {
    return googleUrl;
  }

  public void setGoogleUrl(String googleUrl) {
    this.googleUrl = googleUrl;
  }


  public MediaItem insights(MediaInsights insights) {
    this.insights = insights;
    return this;
  }

  /**
   * Get insights
   * @return insights
   */
  @javax.annotation.Nullable
  public MediaInsights getInsights() {
    return insights;
  }

  public void setInsights(MediaInsights insights) {
    this.insights = insights;
  }


  public MediaItem locationAssociation(LocationAssociation locationAssociation) {
    this.locationAssociation = locationAssociation;
    return this;
  }

  /**
   * Get locationAssociation
   * @return locationAssociation
   */
  @javax.annotation.Nullable
  public LocationAssociation getLocationAssociation() {
    return locationAssociation;
  }

  public void setLocationAssociation(LocationAssociation locationAssociation) {
    this.locationAssociation = locationAssociation;
  }


  public MediaItem mediaFormat(MediaFormatEnum mediaFormat) {
    this.mediaFormat = mediaFormat;
    return this;
  }

  /**
   * The format of this media item. Must be set when the media item is created, and is read-only on all other requests. Cannot be updated.
   * @return mediaFormat
   */
  @javax.annotation.Nullable
  public MediaFormatEnum getMediaFormat() {
    return mediaFormat;
  }

  public void setMediaFormat(MediaFormatEnum mediaFormat) {
    this.mediaFormat = mediaFormat;
  }


  public MediaItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name for this media item. &#x60;accounts/{account_id}/locations/{location_id}/media/{media_key}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MediaItem sourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * A publicly accessible URL where the media item can be retrieved from. When creating one of this or data_ref must be set to specify the source of the media item. If &#x60;source_url&#x60; was used when creating a media item, it will be populated with that source URL when the media item is retrieved. This field cannot be updated.
   * @return sourceUrl
   */
  @javax.annotation.Nullable
  public String getSourceUrl() {
    return sourceUrl;
  }

  public void setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
  }


  public MediaItem thumbnailUrl(String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
    return this;
  }

  /**
   * Output only. Where provided, the URL of a thumbnail image for this media item.
   * @return thumbnailUrl
   */
  @javax.annotation.Nullable
  public String getThumbnailUrl() {
    return thumbnailUrl;
  }

  public void setThumbnailUrl(String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaItem mediaItem = (MediaItem) o;
    return Objects.equals(this.attribution, mediaItem.attribution) &&
        Objects.equals(this.createTime, mediaItem.createTime) &&
        Objects.equals(this.dataRef, mediaItem.dataRef) &&
        Objects.equals(this.description, mediaItem.description) &&
        Objects.equals(this.dimensions, mediaItem.dimensions) &&
        Objects.equals(this.googleUrl, mediaItem.googleUrl) &&
        Objects.equals(this.insights, mediaItem.insights) &&
        Objects.equals(this.locationAssociation, mediaItem.locationAssociation) &&
        Objects.equals(this.mediaFormat, mediaItem.mediaFormat) &&
        Objects.equals(this.name, mediaItem.name) &&
        Objects.equals(this.sourceUrl, mediaItem.sourceUrl) &&
        Objects.equals(this.thumbnailUrl, mediaItem.thumbnailUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attribution, createTime, dataRef, description, dimensions, googleUrl, insights, locationAssociation, mediaFormat, name, sourceUrl, thumbnailUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaItem {\n");
    sb.append("    attribution: ").append(toIndentedString(attribution)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    dataRef: ").append(toIndentedString(dataRef)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    googleUrl: ").append(toIndentedString(googleUrl)).append("\n");
    sb.append("    insights: ").append(toIndentedString(insights)).append("\n");
    sb.append("    locationAssociation: ").append(toIndentedString(locationAssociation)).append("\n");
    sb.append("    mediaFormat: ").append(toIndentedString(mediaFormat)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    thumbnailUrl: ").append(toIndentedString(thumbnailUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attribution");
    openapiFields.add("createTime");
    openapiFields.add("dataRef");
    openapiFields.add("description");
    openapiFields.add("dimensions");
    openapiFields.add("googleUrl");
    openapiFields.add("insights");
    openapiFields.add("locationAssociation");
    openapiFields.add("mediaFormat");
    openapiFields.add("name");
    openapiFields.add("sourceUrl");
    openapiFields.add("thumbnailUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediaItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediaItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediaItem is not found in the empty JSON string", MediaItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediaItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediaItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attribution`
      if (jsonObj.get("attribution") != null && !jsonObj.get("attribution").isJsonNull()) {
        Attribution.validateJsonElement(jsonObj.get("attribution"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `dataRef`
      if (jsonObj.get("dataRef") != null && !jsonObj.get("dataRef").isJsonNull()) {
        MediaItemDataRef.validateJsonElement(jsonObj.get("dataRef"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `dimensions`
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        Dimensions.validateJsonElement(jsonObj.get("dimensions"));
      }
      if ((jsonObj.get("googleUrl") != null && !jsonObj.get("googleUrl").isJsonNull()) && !jsonObj.get("googleUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleUrl").toString()));
      }
      // validate the optional field `insights`
      if (jsonObj.get("insights") != null && !jsonObj.get("insights").isJsonNull()) {
        MediaInsights.validateJsonElement(jsonObj.get("insights"));
      }
      // validate the optional field `locationAssociation`
      if (jsonObj.get("locationAssociation") != null && !jsonObj.get("locationAssociation").isJsonNull()) {
        LocationAssociation.validateJsonElement(jsonObj.get("locationAssociation"));
      }
      if ((jsonObj.get("mediaFormat") != null && !jsonObj.get("mediaFormat").isJsonNull()) && !jsonObj.get("mediaFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediaFormat").toString()));
      }
      // validate the optional field `mediaFormat`
      if (jsonObj.get("mediaFormat") != null && !jsonObj.get("mediaFormat").isJsonNull()) {
        MediaFormatEnum.validateJsonElement(jsonObj.get("mediaFormat"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("sourceUrl") != null && !jsonObj.get("sourceUrl").isJsonNull()) && !jsonObj.get("sourceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceUrl").toString()));
      }
      if ((jsonObj.get("thumbnailUrl") != null && !jsonObj.get("thumbnailUrl").isJsonNull()) && !jsonObj.get("thumbnailUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnailUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnailUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediaItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediaItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediaItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediaItem.class));

       return (TypeAdapter<T>) new TypeAdapter<MediaItem>() {
           @Override
           public void write(JsonWriter out, MediaItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediaItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediaItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediaItem
   * @throws IOException if the JSON string is invalid with respect to MediaItem
   */
  public static MediaItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaItem.class);
  }

  /**
   * Convert an instance of MediaItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

