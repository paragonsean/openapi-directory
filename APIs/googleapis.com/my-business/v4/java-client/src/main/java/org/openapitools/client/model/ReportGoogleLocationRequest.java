/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for reporting a GoogleLocation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportGoogleLocationRequest {
  public static final String SERIALIZED_NAME_LOCATION_GROUP_NAME = "locationGroupName";
  @SerializedName(SERIALIZED_NAME_LOCATION_GROUP_NAME)
  private String locationGroupName;

  /**
   * The reason for which the user is reporting this location when the issue is with the location itself.
   */
  @JsonAdapter(ReportReasonBadLocationEnum.Adapter.class)
  public enum ReportReasonBadLocationEnum {
    BAD_LOCATION_REASON_UNSPECIFIED("BAD_LOCATION_REASON_UNSPECIFIED"),
    
    NOT_A_LOCATION("NOT_A_LOCATION"),
    
    PERMANENTLY_CLOSED("PERMANENTLY_CLOSED"),
    
    DOES_NOT_EXIST("DOES_NOT_EXIST"),
    
    SPAM("SPAM"),
    
    NOT_A_BUSINESS("NOT_A_BUSINESS"),
    
    MOVED("MOVED"),
    
    DUPLICATE("DUPLICATE");

    private String value;

    ReportReasonBadLocationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReportReasonBadLocationEnum fromValue(String value) {
      for (ReportReasonBadLocationEnum b : ReportReasonBadLocationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReportReasonBadLocationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReportReasonBadLocationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReportReasonBadLocationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReportReasonBadLocationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReportReasonBadLocationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPORT_REASON_BAD_LOCATION = "reportReasonBadLocation";
  @SerializedName(SERIALIZED_NAME_REPORT_REASON_BAD_LOCATION)
  private ReportReasonBadLocationEnum reportReasonBadLocation;

  /**
   * The reason for which the user is reporting this location when the issue is with the recommendation. This report is useful if the location has been recommended to the Business Profile account.
   */
  @JsonAdapter(ReportReasonBadRecommendationEnum.Adapter.class)
  public enum ReportReasonBadRecommendationEnum {
    BAD_RECOMMENDATION_REASON_UNSPECIFIED("BAD_RECOMMENDATION_REASON_UNSPECIFIED"),
    
    NOT_A_STORE_FRONT("NOT_A_STORE_FRONT"),
    
    NOT_PART_OF_SUGGESTED_CHAIN("NOT_PART_OF_SUGGESTED_CHAIN"),
    
    IRRELEVANT("IRRELEVANT");

    private String value;

    ReportReasonBadRecommendationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReportReasonBadRecommendationEnum fromValue(String value) {
      for (ReportReasonBadRecommendationEnum b : ReportReasonBadRecommendationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReportReasonBadRecommendationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReportReasonBadRecommendationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReportReasonBadRecommendationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReportReasonBadRecommendationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReportReasonBadRecommendationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPORT_REASON_BAD_RECOMMENDATION = "reportReasonBadRecommendation";
  @SerializedName(SERIALIZED_NAME_REPORT_REASON_BAD_RECOMMENDATION)
  private ReportReasonBadRecommendationEnum reportReasonBadRecommendation;

  public static final String SERIALIZED_NAME_REPORT_REASON_ELABORATION = "reportReasonElaboration";
  @SerializedName(SERIALIZED_NAME_REPORT_REASON_ELABORATION)
  private String reportReasonElaboration;

  public static final String SERIALIZED_NAME_REPORT_REASON_LANGUAGE_CODE = "reportReasonLanguageCode";
  @SerializedName(SERIALIZED_NAME_REPORT_REASON_LANGUAGE_CODE)
  private String reportReasonLanguageCode;

  public ReportGoogleLocationRequest() {
  }

  public ReportGoogleLocationRequest locationGroupName(String locationGroupName) {
    this.locationGroupName = locationGroupName;
    return this;
  }

  /**
   * Optional. The resource name of the location group that this Google Location is being reported for, in the format &#x60;accounts/{account_id}&#x60;.
   * @return locationGroupName
   */
  @javax.annotation.Nullable
  public String getLocationGroupName() {
    return locationGroupName;
  }

  public void setLocationGroupName(String locationGroupName) {
    this.locationGroupName = locationGroupName;
  }


  public ReportGoogleLocationRequest reportReasonBadLocation(ReportReasonBadLocationEnum reportReasonBadLocation) {
    this.reportReasonBadLocation = reportReasonBadLocation;
    return this;
  }

  /**
   * The reason for which the user is reporting this location when the issue is with the location itself.
   * @return reportReasonBadLocation
   */
  @javax.annotation.Nullable
  public ReportReasonBadLocationEnum getReportReasonBadLocation() {
    return reportReasonBadLocation;
  }

  public void setReportReasonBadLocation(ReportReasonBadLocationEnum reportReasonBadLocation) {
    this.reportReasonBadLocation = reportReasonBadLocation;
  }


  public ReportGoogleLocationRequest reportReasonBadRecommendation(ReportReasonBadRecommendationEnum reportReasonBadRecommendation) {
    this.reportReasonBadRecommendation = reportReasonBadRecommendation;
    return this;
  }

  /**
   * The reason for which the user is reporting this location when the issue is with the recommendation. This report is useful if the location has been recommended to the Business Profile account.
   * @return reportReasonBadRecommendation
   */
  @javax.annotation.Nullable
  public ReportReasonBadRecommendationEnum getReportReasonBadRecommendation() {
    return reportReasonBadRecommendation;
  }

  public void setReportReasonBadRecommendation(ReportReasonBadRecommendationEnum reportReasonBadRecommendation) {
    this.reportReasonBadRecommendation = reportReasonBadRecommendation;
  }


  public ReportGoogleLocationRequest reportReasonElaboration(String reportReasonElaboration) {
    this.reportReasonElaboration = reportReasonElaboration;
    return this;
  }

  /**
   * Optional. A text entry for elaborating on the reason for which the user is reporting this location. The maximum length is 512 characters.
   * @return reportReasonElaboration
   */
  @javax.annotation.Nullable
  public String getReportReasonElaboration() {
    return reportReasonElaboration;
  }

  public void setReportReasonElaboration(String reportReasonElaboration) {
    this.reportReasonElaboration = reportReasonElaboration;
  }


  public ReportGoogleLocationRequest reportReasonLanguageCode(String reportReasonLanguageCode) {
    this.reportReasonLanguageCode = reportReasonLanguageCode;
    return this;
  }

  /**
   * Optional. The BCP 47 code of language used in &#x60;report_reason_elaboration&#x60;.
   * @return reportReasonLanguageCode
   */
  @javax.annotation.Nullable
  public String getReportReasonLanguageCode() {
    return reportReasonLanguageCode;
  }

  public void setReportReasonLanguageCode(String reportReasonLanguageCode) {
    this.reportReasonLanguageCode = reportReasonLanguageCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportGoogleLocationRequest reportGoogleLocationRequest = (ReportGoogleLocationRequest) o;
    return Objects.equals(this.locationGroupName, reportGoogleLocationRequest.locationGroupName) &&
        Objects.equals(this.reportReasonBadLocation, reportGoogleLocationRequest.reportReasonBadLocation) &&
        Objects.equals(this.reportReasonBadRecommendation, reportGoogleLocationRequest.reportReasonBadRecommendation) &&
        Objects.equals(this.reportReasonElaboration, reportGoogleLocationRequest.reportReasonElaboration) &&
        Objects.equals(this.reportReasonLanguageCode, reportGoogleLocationRequest.reportReasonLanguageCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationGroupName, reportReasonBadLocation, reportReasonBadRecommendation, reportReasonElaboration, reportReasonLanguageCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportGoogleLocationRequest {\n");
    sb.append("    locationGroupName: ").append(toIndentedString(locationGroupName)).append("\n");
    sb.append("    reportReasonBadLocation: ").append(toIndentedString(reportReasonBadLocation)).append("\n");
    sb.append("    reportReasonBadRecommendation: ").append(toIndentedString(reportReasonBadRecommendation)).append("\n");
    sb.append("    reportReasonElaboration: ").append(toIndentedString(reportReasonElaboration)).append("\n");
    sb.append("    reportReasonLanguageCode: ").append(toIndentedString(reportReasonLanguageCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("locationGroupName");
    openapiFields.add("reportReasonBadLocation");
    openapiFields.add("reportReasonBadRecommendation");
    openapiFields.add("reportReasonElaboration");
    openapiFields.add("reportReasonLanguageCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportGoogleLocationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportGoogleLocationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportGoogleLocationRequest is not found in the empty JSON string", ReportGoogleLocationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportGoogleLocationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportGoogleLocationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("locationGroupName") != null && !jsonObj.get("locationGroupName").isJsonNull()) && !jsonObj.get("locationGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationGroupName").toString()));
      }
      if ((jsonObj.get("reportReasonBadLocation") != null && !jsonObj.get("reportReasonBadLocation").isJsonNull()) && !jsonObj.get("reportReasonBadLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportReasonBadLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportReasonBadLocation").toString()));
      }
      // validate the optional field `reportReasonBadLocation`
      if (jsonObj.get("reportReasonBadLocation") != null && !jsonObj.get("reportReasonBadLocation").isJsonNull()) {
        ReportReasonBadLocationEnum.validateJsonElement(jsonObj.get("reportReasonBadLocation"));
      }
      if ((jsonObj.get("reportReasonBadRecommendation") != null && !jsonObj.get("reportReasonBadRecommendation").isJsonNull()) && !jsonObj.get("reportReasonBadRecommendation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportReasonBadRecommendation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportReasonBadRecommendation").toString()));
      }
      // validate the optional field `reportReasonBadRecommendation`
      if (jsonObj.get("reportReasonBadRecommendation") != null && !jsonObj.get("reportReasonBadRecommendation").isJsonNull()) {
        ReportReasonBadRecommendationEnum.validateJsonElement(jsonObj.get("reportReasonBadRecommendation"));
      }
      if ((jsonObj.get("reportReasonElaboration") != null && !jsonObj.get("reportReasonElaboration").isJsonNull()) && !jsonObj.get("reportReasonElaboration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportReasonElaboration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportReasonElaboration").toString()));
      }
      if ((jsonObj.get("reportReasonLanguageCode") != null && !jsonObj.get("reportReasonLanguageCode").isJsonNull()) && !jsonObj.get("reportReasonLanguageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportReasonLanguageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportReasonLanguageCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportGoogleLocationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportGoogleLocationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportGoogleLocationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportGoogleLocationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportGoogleLocationRequest>() {
           @Override
           public void write(JsonWriter out, ReportGoogleLocationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportGoogleLocationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportGoogleLocationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportGoogleLocationRequest
   * @throws IOException if the JSON string is invalid with respect to ReportGoogleLocationRequest
   */
  public static ReportGoogleLocationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportGoogleLocationRequest.class);
  }

  /**
   * Convert an instance of ReportGoogleLocationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

