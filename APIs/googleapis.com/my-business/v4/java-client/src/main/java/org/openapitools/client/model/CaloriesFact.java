/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This message denotes calories information with an upper bound and lower bound range. Lower amount must be specified. Both lower and upper amounts are non-negative numbers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CaloriesFact {
  public static final String SERIALIZED_NAME_LOWER_AMOUNT = "lowerAmount";
  @SerializedName(SERIALIZED_NAME_LOWER_AMOUNT)
  private Integer lowerAmount;

  /**
   * Required. Unit of the given calories information.
   */
  @JsonAdapter(UnitEnum.Adapter.class)
  public enum UnitEnum {
    ENERGY_UNIT_UNSPECIFIED("ENERGY_UNIT_UNSPECIFIED"),
    
    CALORIE("CALORIE"),
    
    JOULE("JOULE");

    private String value;

    UnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitEnum fromValue(String value) {
      for (UnitEnum b : UnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private UnitEnum unit;

  public static final String SERIALIZED_NAME_UPPER_AMOUNT = "upperAmount";
  @SerializedName(SERIALIZED_NAME_UPPER_AMOUNT)
  private Integer upperAmount;

  public CaloriesFact() {
  }

  public CaloriesFact lowerAmount(Integer lowerAmount) {
    this.lowerAmount = lowerAmount;
    return this;
  }

  /**
   * Required. Lower amount of calories
   * @return lowerAmount
   */
  @javax.annotation.Nullable
  public Integer getLowerAmount() {
    return lowerAmount;
  }

  public void setLowerAmount(Integer lowerAmount) {
    this.lowerAmount = lowerAmount;
  }


  public CaloriesFact unit(UnitEnum unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Required. Unit of the given calories information.
   * @return unit
   */
  @javax.annotation.Nullable
  public UnitEnum getUnit() {
    return unit;
  }

  public void setUnit(UnitEnum unit) {
    this.unit = unit;
  }


  public CaloriesFact upperAmount(Integer upperAmount) {
    this.upperAmount = upperAmount;
    return this;
  }

  /**
   * Optional. Upper amount of calories
   * @return upperAmount
   */
  @javax.annotation.Nullable
  public Integer getUpperAmount() {
    return upperAmount;
  }

  public void setUpperAmount(Integer upperAmount) {
    this.upperAmount = upperAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CaloriesFact caloriesFact = (CaloriesFact) o;
    return Objects.equals(this.lowerAmount, caloriesFact.lowerAmount) &&
        Objects.equals(this.unit, caloriesFact.unit) &&
        Objects.equals(this.upperAmount, caloriesFact.upperAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lowerAmount, unit, upperAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CaloriesFact {\n");
    sb.append("    lowerAmount: ").append(toIndentedString(lowerAmount)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    upperAmount: ").append(toIndentedString(upperAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lowerAmount");
    openapiFields.add("unit");
    openapiFields.add("upperAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CaloriesFact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CaloriesFact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CaloriesFact is not found in the empty JSON string", CaloriesFact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CaloriesFact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CaloriesFact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      // validate the optional field `unit`
      if (jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) {
        UnitEnum.validateJsonElement(jsonObj.get("unit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CaloriesFact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CaloriesFact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CaloriesFact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CaloriesFact.class));

       return (TypeAdapter<T>) new TypeAdapter<CaloriesFact>() {
           @Override
           public void write(JsonWriter out, CaloriesFact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CaloriesFact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CaloriesFact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CaloriesFact
   * @throws IOException if the JSON string is invalid with respect to CaloriesFact
   */
  public static CaloriesFact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CaloriesFact.class);
  }

  /**
   * Convert an instance of CaloriesFact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

