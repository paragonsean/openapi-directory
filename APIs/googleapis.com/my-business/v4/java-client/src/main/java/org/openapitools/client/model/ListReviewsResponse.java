/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Review;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for Reviews.ListReviews.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListReviewsResponse {
  public static final String SERIALIZED_NAME_AVERAGE_RATING = "averageRating";
  @SerializedName(SERIALIZED_NAME_AVERAGE_RATING)
  private Double averageRating;

  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "nextPageToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  private String nextPageToken;

  public static final String SERIALIZED_NAME_REVIEWS = "reviews";
  @SerializedName(SERIALIZED_NAME_REVIEWS)
  private List<Review> reviews = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_REVIEW_COUNT = "totalReviewCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_REVIEW_COUNT)
  private Integer totalReviewCount;

  public ListReviewsResponse() {
  }

  public ListReviewsResponse averageRating(Double averageRating) {
    this.averageRating = averageRating;
    return this;
  }

  /**
   * The average star rating of all reviews for this location on a scale of 1 to 5, where 5 is the highest rating.
   * @return averageRating
   */
  @javax.annotation.Nullable
  public Double getAverageRating() {
    return averageRating;
  }

  public void setAverageRating(Double averageRating) {
    this.averageRating = averageRating;
  }


  public ListReviewsResponse nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    return this;
  }

  /**
   * If the number of reviews exceeded the requested page size, this field is populated with a token to fetch the next page of reviews on a subsequent call to ListReviews. If there are no more reviews, this field is not present in the response.
   * @return nextPageToken
   */
  @javax.annotation.Nullable
  public String getNextPageToken() {
    return nextPageToken;
  }

  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }


  public ListReviewsResponse reviews(List<Review> reviews) {
    this.reviews = reviews;
    return this;
  }

  public ListReviewsResponse addReviewsItem(Review reviewsItem) {
    if (this.reviews == null) {
      this.reviews = new ArrayList<>();
    }
    this.reviews.add(reviewsItem);
    return this;
  }

  /**
   * The reviews.
   * @return reviews
   */
  @javax.annotation.Nullable
  public List<Review> getReviews() {
    return reviews;
  }

  public void setReviews(List<Review> reviews) {
    this.reviews = reviews;
  }


  public ListReviewsResponse totalReviewCount(Integer totalReviewCount) {
    this.totalReviewCount = totalReviewCount;
    return this;
  }

  /**
   * The total number of reviews for this location.
   * @return totalReviewCount
   */
  @javax.annotation.Nullable
  public Integer getTotalReviewCount() {
    return totalReviewCount;
  }

  public void setTotalReviewCount(Integer totalReviewCount) {
    this.totalReviewCount = totalReviewCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListReviewsResponse listReviewsResponse = (ListReviewsResponse) o;
    return Objects.equals(this.averageRating, listReviewsResponse.averageRating) &&
        Objects.equals(this.nextPageToken, listReviewsResponse.nextPageToken) &&
        Objects.equals(this.reviews, listReviewsResponse.reviews) &&
        Objects.equals(this.totalReviewCount, listReviewsResponse.totalReviewCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageRating, nextPageToken, reviews, totalReviewCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListReviewsResponse {\n");
    sb.append("    averageRating: ").append(toIndentedString(averageRating)).append("\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("    reviews: ").append(toIndentedString(reviews)).append("\n");
    sb.append("    totalReviewCount: ").append(toIndentedString(totalReviewCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("averageRating");
    openapiFields.add("nextPageToken");
    openapiFields.add("reviews");
    openapiFields.add("totalReviewCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListReviewsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListReviewsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListReviewsResponse is not found in the empty JSON string", ListReviewsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListReviewsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListReviewsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nextPageToken") != null && !jsonObj.get("nextPageToken").isJsonNull()) && !jsonObj.get("nextPageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPageToken").toString()));
      }
      if (jsonObj.get("reviews") != null && !jsonObj.get("reviews").isJsonNull()) {
        JsonArray jsonArrayreviews = jsonObj.getAsJsonArray("reviews");
        if (jsonArrayreviews != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reviews").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reviews` to be an array in the JSON string but got `%s`", jsonObj.get("reviews").toString()));
          }

          // validate the optional field `reviews` (array)
          for (int i = 0; i < jsonArrayreviews.size(); i++) {
            Review.validateJsonElement(jsonArrayreviews.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListReviewsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListReviewsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListReviewsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListReviewsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListReviewsResponse>() {
           @Override
           public void write(JsonWriter out, ListReviewsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListReviewsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListReviewsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListReviewsResponse
   * @throws IOException if the JSON string is invalid with respect to ListReviewsResponse
   */
  public static ListReviewsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListReviewsResponse.class);
  }

  /**
   * Convert an instance of ListReviewsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

