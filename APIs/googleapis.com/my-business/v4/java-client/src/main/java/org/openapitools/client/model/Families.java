/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Services and amenities for families and young guests.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Families {
  public static final String SERIALIZED_NAME_BABYSITTING = "babysitting";
  @SerializedName(SERIALIZED_NAME_BABYSITTING)
  private Boolean babysitting;

  /**
   * Babysitting exception.
   */
  @JsonAdapter(BabysittingExceptionEnum.Adapter.class)
  public enum BabysittingExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    BabysittingExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BabysittingExceptionEnum fromValue(String value) {
      for (BabysittingExceptionEnum b : BabysittingExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BabysittingExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BabysittingExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BabysittingExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BabysittingExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BabysittingExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BABYSITTING_EXCEPTION = "babysittingException";
  @SerializedName(SERIALIZED_NAME_BABYSITTING_EXCEPTION)
  private BabysittingExceptionEnum babysittingException;

  public static final String SERIALIZED_NAME_KIDS_ACTIVITIES = "kidsActivities";
  @SerializedName(SERIALIZED_NAME_KIDS_ACTIVITIES)
  private Boolean kidsActivities;

  /**
   * Kids activities exception.
   */
  @JsonAdapter(KidsActivitiesExceptionEnum.Adapter.class)
  public enum KidsActivitiesExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    KidsActivitiesExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KidsActivitiesExceptionEnum fromValue(String value) {
      for (KidsActivitiesExceptionEnum b : KidsActivitiesExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KidsActivitiesExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KidsActivitiesExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KidsActivitiesExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KidsActivitiesExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KidsActivitiesExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIDS_ACTIVITIES_EXCEPTION = "kidsActivitiesException";
  @SerializedName(SERIALIZED_NAME_KIDS_ACTIVITIES_EXCEPTION)
  private KidsActivitiesExceptionEnum kidsActivitiesException;

  public static final String SERIALIZED_NAME_KIDS_CLUB = "kidsClub";
  @SerializedName(SERIALIZED_NAME_KIDS_CLUB)
  private Boolean kidsClub;

  /**
   * Kids club exception.
   */
  @JsonAdapter(KidsClubExceptionEnum.Adapter.class)
  public enum KidsClubExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    KidsClubExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KidsClubExceptionEnum fromValue(String value) {
      for (KidsClubExceptionEnum b : KidsClubExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KidsClubExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KidsClubExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KidsClubExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KidsClubExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KidsClubExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIDS_CLUB_EXCEPTION = "kidsClubException";
  @SerializedName(SERIALIZED_NAME_KIDS_CLUB_EXCEPTION)
  private KidsClubExceptionEnum kidsClubException;

  public Families() {
  }

  public Families babysitting(Boolean babysitting) {
    this.babysitting = babysitting;
    return this;
  }

  /**
   * Babysitting. Child care that is offered by hotel staffers or coordinated by hotel staffers with local child care professionals. Can be free or for a fee.
   * @return babysitting
   */
  @javax.annotation.Nullable
  public Boolean getBabysitting() {
    return babysitting;
  }

  public void setBabysitting(Boolean babysitting) {
    this.babysitting = babysitting;
  }


  public Families babysittingException(BabysittingExceptionEnum babysittingException) {
    this.babysittingException = babysittingException;
    return this;
  }

  /**
   * Babysitting exception.
   * @return babysittingException
   */
  @javax.annotation.Nullable
  public BabysittingExceptionEnum getBabysittingException() {
    return babysittingException;
  }

  public void setBabysittingException(BabysittingExceptionEnum babysittingException) {
    this.babysittingException = babysittingException;
  }


  public Families kidsActivities(Boolean kidsActivities) {
    this.kidsActivities = kidsActivities;
    return this;
  }

  /**
   * Kids activities. Recreational options such as sports, films, crafts and games designed for the enjoyment of children and offered at the hotel. May or may not be supervised. May or may not be at a designated time or place. Cab be free or for a fee.
   * @return kidsActivities
   */
  @javax.annotation.Nullable
  public Boolean getKidsActivities() {
    return kidsActivities;
  }

  public void setKidsActivities(Boolean kidsActivities) {
    this.kidsActivities = kidsActivities;
  }


  public Families kidsActivitiesException(KidsActivitiesExceptionEnum kidsActivitiesException) {
    this.kidsActivitiesException = kidsActivitiesException;
    return this;
  }

  /**
   * Kids activities exception.
   * @return kidsActivitiesException
   */
  @javax.annotation.Nullable
  public KidsActivitiesExceptionEnum getKidsActivitiesException() {
    return kidsActivitiesException;
  }

  public void setKidsActivitiesException(KidsActivitiesExceptionEnum kidsActivitiesException) {
    this.kidsActivitiesException = kidsActivitiesException;
  }


  public Families kidsClub(Boolean kidsClub) {
    this.kidsClub = kidsClub;
    return this;
  }

  /**
   * Kids club. An organized program of group activities held at the hotel and designed for the enjoyment of children. Facilitated by hotel staff (or staff procured by the hotel) in an area(s) designated for the purpose of entertaining children without their parents. May include games, outings, water sports, team sports, arts and crafts, and films. Usually has set hours. Can be free or for a fee. Also known as Kids Camp or Kids program.
   * @return kidsClub
   */
  @javax.annotation.Nullable
  public Boolean getKidsClub() {
    return kidsClub;
  }

  public void setKidsClub(Boolean kidsClub) {
    this.kidsClub = kidsClub;
  }


  public Families kidsClubException(KidsClubExceptionEnum kidsClubException) {
    this.kidsClubException = kidsClubException;
    return this;
  }

  /**
   * Kids club exception.
   * @return kidsClubException
   */
  @javax.annotation.Nullable
  public KidsClubExceptionEnum getKidsClubException() {
    return kidsClubException;
  }

  public void setKidsClubException(KidsClubExceptionEnum kidsClubException) {
    this.kidsClubException = kidsClubException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Families families = (Families) o;
    return Objects.equals(this.babysitting, families.babysitting) &&
        Objects.equals(this.babysittingException, families.babysittingException) &&
        Objects.equals(this.kidsActivities, families.kidsActivities) &&
        Objects.equals(this.kidsActivitiesException, families.kidsActivitiesException) &&
        Objects.equals(this.kidsClub, families.kidsClub) &&
        Objects.equals(this.kidsClubException, families.kidsClubException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(babysitting, babysittingException, kidsActivities, kidsActivitiesException, kidsClub, kidsClubException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Families {\n");
    sb.append("    babysitting: ").append(toIndentedString(babysitting)).append("\n");
    sb.append("    babysittingException: ").append(toIndentedString(babysittingException)).append("\n");
    sb.append("    kidsActivities: ").append(toIndentedString(kidsActivities)).append("\n");
    sb.append("    kidsActivitiesException: ").append(toIndentedString(kidsActivitiesException)).append("\n");
    sb.append("    kidsClub: ").append(toIndentedString(kidsClub)).append("\n");
    sb.append("    kidsClubException: ").append(toIndentedString(kidsClubException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("babysitting");
    openapiFields.add("babysittingException");
    openapiFields.add("kidsActivities");
    openapiFields.add("kidsActivitiesException");
    openapiFields.add("kidsClub");
    openapiFields.add("kidsClubException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Families
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Families.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Families is not found in the empty JSON string", Families.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Families.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Families` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("babysittingException") != null && !jsonObj.get("babysittingException").isJsonNull()) && !jsonObj.get("babysittingException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `babysittingException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("babysittingException").toString()));
      }
      // validate the optional field `babysittingException`
      if (jsonObj.get("babysittingException") != null && !jsonObj.get("babysittingException").isJsonNull()) {
        BabysittingExceptionEnum.validateJsonElement(jsonObj.get("babysittingException"));
      }
      if ((jsonObj.get("kidsActivitiesException") != null && !jsonObj.get("kidsActivitiesException").isJsonNull()) && !jsonObj.get("kidsActivitiesException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kidsActivitiesException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kidsActivitiesException").toString()));
      }
      // validate the optional field `kidsActivitiesException`
      if (jsonObj.get("kidsActivitiesException") != null && !jsonObj.get("kidsActivitiesException").isJsonNull()) {
        KidsActivitiesExceptionEnum.validateJsonElement(jsonObj.get("kidsActivitiesException"));
      }
      if ((jsonObj.get("kidsClubException") != null && !jsonObj.get("kidsClubException").isJsonNull()) && !jsonObj.get("kidsClubException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kidsClubException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kidsClubException").toString()));
      }
      // validate the optional field `kidsClubException`
      if (jsonObj.get("kidsClubException") != null && !jsonObj.get("kidsClubException").isJsonNull()) {
        KidsClubExceptionEnum.validateJsonElement(jsonObj.get("kidsClubException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Families.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Families' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Families> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Families.class));

       return (TypeAdapter<T>) new TypeAdapter<Families>() {
           @Override
           public void write(JsonWriter out, Families value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Families read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Families given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Families
   * @throws IOException if the JSON string is invalid with respect to Families
   */
  public static Families fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Families.class);
  }

  /**
   * Convert an instance of Families to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

