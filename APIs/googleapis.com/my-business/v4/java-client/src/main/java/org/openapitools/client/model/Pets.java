/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Policies regarding guest-owned animals.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Pets {
  public static final String SERIALIZED_NAME_CATS_ALLOWED = "catsAllowed";
  @SerializedName(SERIALIZED_NAME_CATS_ALLOWED)
  private Boolean catsAllowed;

  /**
   * Cats allowed exception.
   */
  @JsonAdapter(CatsAllowedExceptionEnum.Adapter.class)
  public enum CatsAllowedExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CatsAllowedExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CatsAllowedExceptionEnum fromValue(String value) {
      for (CatsAllowedExceptionEnum b : CatsAllowedExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CatsAllowedExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CatsAllowedExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CatsAllowedExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CatsAllowedExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CatsAllowedExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATS_ALLOWED_EXCEPTION = "catsAllowedException";
  @SerializedName(SERIALIZED_NAME_CATS_ALLOWED_EXCEPTION)
  private CatsAllowedExceptionEnum catsAllowedException;

  public static final String SERIALIZED_NAME_DOGS_ALLOWED = "dogsAllowed";
  @SerializedName(SERIALIZED_NAME_DOGS_ALLOWED)
  private Boolean dogsAllowed;

  /**
   * Dogs allowed exception.
   */
  @JsonAdapter(DogsAllowedExceptionEnum.Adapter.class)
  public enum DogsAllowedExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    DogsAllowedExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DogsAllowedExceptionEnum fromValue(String value) {
      for (DogsAllowedExceptionEnum b : DogsAllowedExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DogsAllowedExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DogsAllowedExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DogsAllowedExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DogsAllowedExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DogsAllowedExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOGS_ALLOWED_EXCEPTION = "dogsAllowedException";
  @SerializedName(SERIALIZED_NAME_DOGS_ALLOWED_EXCEPTION)
  private DogsAllowedExceptionEnum dogsAllowedException;

  public static final String SERIALIZED_NAME_PETS_ALLOWED = "petsAllowed";
  @SerializedName(SERIALIZED_NAME_PETS_ALLOWED)
  private Boolean petsAllowed;

  /**
   * Pets allowed exception.
   */
  @JsonAdapter(PetsAllowedExceptionEnum.Adapter.class)
  public enum PetsAllowedExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    PetsAllowedExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PetsAllowedExceptionEnum fromValue(String value) {
      for (PetsAllowedExceptionEnum b : PetsAllowedExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PetsAllowedExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PetsAllowedExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PetsAllowedExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PetsAllowedExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PetsAllowedExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PETS_ALLOWED_EXCEPTION = "petsAllowedException";
  @SerializedName(SERIALIZED_NAME_PETS_ALLOWED_EXCEPTION)
  private PetsAllowedExceptionEnum petsAllowedException;

  public static final String SERIALIZED_NAME_PETS_ALLOWED_FREE = "petsAllowedFree";
  @SerializedName(SERIALIZED_NAME_PETS_ALLOWED_FREE)
  private Boolean petsAllowedFree;

  /**
   * Pets allowed free exception.
   */
  @JsonAdapter(PetsAllowedFreeExceptionEnum.Adapter.class)
  public enum PetsAllowedFreeExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    PetsAllowedFreeExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PetsAllowedFreeExceptionEnum fromValue(String value) {
      for (PetsAllowedFreeExceptionEnum b : PetsAllowedFreeExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PetsAllowedFreeExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PetsAllowedFreeExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PetsAllowedFreeExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PetsAllowedFreeExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PetsAllowedFreeExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PETS_ALLOWED_FREE_EXCEPTION = "petsAllowedFreeException";
  @SerializedName(SERIALIZED_NAME_PETS_ALLOWED_FREE_EXCEPTION)
  private PetsAllowedFreeExceptionEnum petsAllowedFreeException;

  public Pets() {
  }

  public Pets catsAllowed(Boolean catsAllowed) {
    this.catsAllowed = catsAllowed;
    return this;
  }

  /**
   * Cats allowed. Domesticated felines are permitted at the property and allowed to stay in the guest room of their owner. May or may not require a fee.
   * @return catsAllowed
   */
  @javax.annotation.Nullable
  public Boolean getCatsAllowed() {
    return catsAllowed;
  }

  public void setCatsAllowed(Boolean catsAllowed) {
    this.catsAllowed = catsAllowed;
  }


  public Pets catsAllowedException(CatsAllowedExceptionEnum catsAllowedException) {
    this.catsAllowedException = catsAllowedException;
    return this;
  }

  /**
   * Cats allowed exception.
   * @return catsAllowedException
   */
  @javax.annotation.Nullable
  public CatsAllowedExceptionEnum getCatsAllowedException() {
    return catsAllowedException;
  }

  public void setCatsAllowedException(CatsAllowedExceptionEnum catsAllowedException) {
    this.catsAllowedException = catsAllowedException;
  }


  public Pets dogsAllowed(Boolean dogsAllowed) {
    this.dogsAllowed = dogsAllowed;
    return this;
  }

  /**
   * Dogs allowed. Domesticated canines are permitted at the property and allowed to stay in the guest room of their owner. May or may not require a fee.
   * @return dogsAllowed
   */
  @javax.annotation.Nullable
  public Boolean getDogsAllowed() {
    return dogsAllowed;
  }

  public void setDogsAllowed(Boolean dogsAllowed) {
    this.dogsAllowed = dogsAllowed;
  }


  public Pets dogsAllowedException(DogsAllowedExceptionEnum dogsAllowedException) {
    this.dogsAllowedException = dogsAllowedException;
    return this;
  }

  /**
   * Dogs allowed exception.
   * @return dogsAllowedException
   */
  @javax.annotation.Nullable
  public DogsAllowedExceptionEnum getDogsAllowedException() {
    return dogsAllowedException;
  }

  public void setDogsAllowedException(DogsAllowedExceptionEnum dogsAllowedException) {
    this.dogsAllowedException = dogsAllowedException;
  }


  public Pets petsAllowed(Boolean petsAllowed) {
    this.petsAllowed = petsAllowed;
    return this;
  }

  /**
   * Pets allowed. Household animals are allowed at the property and in the specific guest room of their owner. May or may not include dogs, cats, reptiles and/or fish. May or may not require a fee. Service animals are not considered to be pets, so not governed by this policy.
   * @return petsAllowed
   */
  @javax.annotation.Nullable
  public Boolean getPetsAllowed() {
    return petsAllowed;
  }

  public void setPetsAllowed(Boolean petsAllowed) {
    this.petsAllowed = petsAllowed;
  }


  public Pets petsAllowedException(PetsAllowedExceptionEnum petsAllowedException) {
    this.petsAllowedException = petsAllowedException;
    return this;
  }

  /**
   * Pets allowed exception.
   * @return petsAllowedException
   */
  @javax.annotation.Nullable
  public PetsAllowedExceptionEnum getPetsAllowedException() {
    return petsAllowedException;
  }

  public void setPetsAllowedException(PetsAllowedExceptionEnum petsAllowedException) {
    this.petsAllowedException = petsAllowedException;
  }


  public Pets petsAllowedFree(Boolean petsAllowedFree) {
    this.petsAllowedFree = petsAllowedFree;
    return this;
  }

  /**
   * Pets allowed free. Household animals are allowed at the property and in the specific guest room of their owner for free. May or may not include dogs, cats, reptiles, and/or fish.
   * @return petsAllowedFree
   */
  @javax.annotation.Nullable
  public Boolean getPetsAllowedFree() {
    return petsAllowedFree;
  }

  public void setPetsAllowedFree(Boolean petsAllowedFree) {
    this.petsAllowedFree = petsAllowedFree;
  }


  public Pets petsAllowedFreeException(PetsAllowedFreeExceptionEnum petsAllowedFreeException) {
    this.petsAllowedFreeException = petsAllowedFreeException;
    return this;
  }

  /**
   * Pets allowed free exception.
   * @return petsAllowedFreeException
   */
  @javax.annotation.Nullable
  public PetsAllowedFreeExceptionEnum getPetsAllowedFreeException() {
    return petsAllowedFreeException;
  }

  public void setPetsAllowedFreeException(PetsAllowedFreeExceptionEnum petsAllowedFreeException) {
    this.petsAllowedFreeException = petsAllowedFreeException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pets pets = (Pets) o;
    return Objects.equals(this.catsAllowed, pets.catsAllowed) &&
        Objects.equals(this.catsAllowedException, pets.catsAllowedException) &&
        Objects.equals(this.dogsAllowed, pets.dogsAllowed) &&
        Objects.equals(this.dogsAllowedException, pets.dogsAllowedException) &&
        Objects.equals(this.petsAllowed, pets.petsAllowed) &&
        Objects.equals(this.petsAllowedException, pets.petsAllowedException) &&
        Objects.equals(this.petsAllowedFree, pets.petsAllowedFree) &&
        Objects.equals(this.petsAllowedFreeException, pets.petsAllowedFreeException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catsAllowed, catsAllowedException, dogsAllowed, dogsAllowedException, petsAllowed, petsAllowedException, petsAllowedFree, petsAllowedFreeException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pets {\n");
    sb.append("    catsAllowed: ").append(toIndentedString(catsAllowed)).append("\n");
    sb.append("    catsAllowedException: ").append(toIndentedString(catsAllowedException)).append("\n");
    sb.append("    dogsAllowed: ").append(toIndentedString(dogsAllowed)).append("\n");
    sb.append("    dogsAllowedException: ").append(toIndentedString(dogsAllowedException)).append("\n");
    sb.append("    petsAllowed: ").append(toIndentedString(petsAllowed)).append("\n");
    sb.append("    petsAllowedException: ").append(toIndentedString(petsAllowedException)).append("\n");
    sb.append("    petsAllowedFree: ").append(toIndentedString(petsAllowedFree)).append("\n");
    sb.append("    petsAllowedFreeException: ").append(toIndentedString(petsAllowedFreeException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("catsAllowed");
    openapiFields.add("catsAllowedException");
    openapiFields.add("dogsAllowed");
    openapiFields.add("dogsAllowedException");
    openapiFields.add("petsAllowed");
    openapiFields.add("petsAllowedException");
    openapiFields.add("petsAllowedFree");
    openapiFields.add("petsAllowedFreeException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Pets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Pets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Pets is not found in the empty JSON string", Pets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Pets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Pets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("catsAllowedException") != null && !jsonObj.get("catsAllowedException").isJsonNull()) && !jsonObj.get("catsAllowedException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catsAllowedException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catsAllowedException").toString()));
      }
      // validate the optional field `catsAllowedException`
      if (jsonObj.get("catsAllowedException") != null && !jsonObj.get("catsAllowedException").isJsonNull()) {
        CatsAllowedExceptionEnum.validateJsonElement(jsonObj.get("catsAllowedException"));
      }
      if ((jsonObj.get("dogsAllowedException") != null && !jsonObj.get("dogsAllowedException").isJsonNull()) && !jsonObj.get("dogsAllowedException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dogsAllowedException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dogsAllowedException").toString()));
      }
      // validate the optional field `dogsAllowedException`
      if (jsonObj.get("dogsAllowedException") != null && !jsonObj.get("dogsAllowedException").isJsonNull()) {
        DogsAllowedExceptionEnum.validateJsonElement(jsonObj.get("dogsAllowedException"));
      }
      if ((jsonObj.get("petsAllowedException") != null && !jsonObj.get("petsAllowedException").isJsonNull()) && !jsonObj.get("petsAllowedException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `petsAllowedException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("petsAllowedException").toString()));
      }
      // validate the optional field `petsAllowedException`
      if (jsonObj.get("petsAllowedException") != null && !jsonObj.get("petsAllowedException").isJsonNull()) {
        PetsAllowedExceptionEnum.validateJsonElement(jsonObj.get("petsAllowedException"));
      }
      if ((jsonObj.get("petsAllowedFreeException") != null && !jsonObj.get("petsAllowedFreeException").isJsonNull()) && !jsonObj.get("petsAllowedFreeException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `petsAllowedFreeException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("petsAllowedFreeException").toString()));
      }
      // validate the optional field `petsAllowedFreeException`
      if (jsonObj.get("petsAllowedFreeException") != null && !jsonObj.get("petsAllowedFreeException").isJsonNull()) {
        PetsAllowedFreeExceptionEnum.validateJsonElement(jsonObj.get("petsAllowedFreeException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Pets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Pets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Pets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Pets.class));

       return (TypeAdapter<T>) new TypeAdapter<Pets>() {
           @Override
           public void write(JsonWriter out, Pets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Pets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Pets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Pets
   * @throws IOException if the JSON string is invalid with respect to Pets
   */
  public static Pets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Pets.class);
  }

  /**
   * Convert an instance of Pets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

