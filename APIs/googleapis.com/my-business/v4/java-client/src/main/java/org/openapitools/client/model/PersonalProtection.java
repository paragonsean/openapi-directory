/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Personal protection measures implemented by the hotel during COVID-19.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PersonalProtection {
  public static final String SERIALIZED_NAME_COMMON_AREAS_OFFER_SANITIZING_ITEMS = "commonAreasOfferSanitizingItems";
  @SerializedName(SERIALIZED_NAME_COMMON_AREAS_OFFER_SANITIZING_ITEMS)
  private Boolean commonAreasOfferSanitizingItems;

  /**
   * Common areas offer sanitizing items exception.
   */
  @JsonAdapter(CommonAreasOfferSanitizingItemsExceptionEnum.Adapter.class)
  public enum CommonAreasOfferSanitizingItemsExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CommonAreasOfferSanitizingItemsExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CommonAreasOfferSanitizingItemsExceptionEnum fromValue(String value) {
      for (CommonAreasOfferSanitizingItemsExceptionEnum b : CommonAreasOfferSanitizingItemsExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CommonAreasOfferSanitizingItemsExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommonAreasOfferSanitizingItemsExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommonAreasOfferSanitizingItemsExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CommonAreasOfferSanitizingItemsExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CommonAreasOfferSanitizingItemsExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMMON_AREAS_OFFER_SANITIZING_ITEMS_EXCEPTION = "commonAreasOfferSanitizingItemsException";
  @SerializedName(SERIALIZED_NAME_COMMON_AREAS_OFFER_SANITIZING_ITEMS_EXCEPTION)
  private CommonAreasOfferSanitizingItemsExceptionEnum commonAreasOfferSanitizingItemsException;

  public static final String SERIALIZED_NAME_FACE_MASK_REQUIRED = "faceMaskRequired";
  @SerializedName(SERIALIZED_NAME_FACE_MASK_REQUIRED)
  private Boolean faceMaskRequired;

  /**
   * Face mask required exception.
   */
  @JsonAdapter(FaceMaskRequiredExceptionEnum.Adapter.class)
  public enum FaceMaskRequiredExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FaceMaskRequiredExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FaceMaskRequiredExceptionEnum fromValue(String value) {
      for (FaceMaskRequiredExceptionEnum b : FaceMaskRequiredExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FaceMaskRequiredExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FaceMaskRequiredExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FaceMaskRequiredExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FaceMaskRequiredExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FaceMaskRequiredExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FACE_MASK_REQUIRED_EXCEPTION = "faceMaskRequiredException";
  @SerializedName(SERIALIZED_NAME_FACE_MASK_REQUIRED_EXCEPTION)
  private FaceMaskRequiredExceptionEnum faceMaskRequiredException;

  public static final String SERIALIZED_NAME_GUEST_ROOM_HYGIENE_KITS_AVAILABLE = "guestRoomHygieneKitsAvailable";
  @SerializedName(SERIALIZED_NAME_GUEST_ROOM_HYGIENE_KITS_AVAILABLE)
  private Boolean guestRoomHygieneKitsAvailable;

  /**
   * Guest room hygiene kits available exception.
   */
  @JsonAdapter(GuestRoomHygieneKitsAvailableExceptionEnum.Adapter.class)
  public enum GuestRoomHygieneKitsAvailableExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    GuestRoomHygieneKitsAvailableExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GuestRoomHygieneKitsAvailableExceptionEnum fromValue(String value) {
      for (GuestRoomHygieneKitsAvailableExceptionEnum b : GuestRoomHygieneKitsAvailableExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GuestRoomHygieneKitsAvailableExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GuestRoomHygieneKitsAvailableExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GuestRoomHygieneKitsAvailableExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GuestRoomHygieneKitsAvailableExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GuestRoomHygieneKitsAvailableExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GUEST_ROOM_HYGIENE_KITS_AVAILABLE_EXCEPTION = "guestRoomHygieneKitsAvailableException";
  @SerializedName(SERIALIZED_NAME_GUEST_ROOM_HYGIENE_KITS_AVAILABLE_EXCEPTION)
  private GuestRoomHygieneKitsAvailableExceptionEnum guestRoomHygieneKitsAvailableException;

  public static final String SERIALIZED_NAME_PROTECTIVE_EQUIPMENT_AVAILABLE = "protectiveEquipmentAvailable";
  @SerializedName(SERIALIZED_NAME_PROTECTIVE_EQUIPMENT_AVAILABLE)
  private Boolean protectiveEquipmentAvailable;

  /**
   * Protective equipment available exception.
   */
  @JsonAdapter(ProtectiveEquipmentAvailableExceptionEnum.Adapter.class)
  public enum ProtectiveEquipmentAvailableExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ProtectiveEquipmentAvailableExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtectiveEquipmentAvailableExceptionEnum fromValue(String value) {
      for (ProtectiveEquipmentAvailableExceptionEnum b : ProtectiveEquipmentAvailableExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtectiveEquipmentAvailableExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtectiveEquipmentAvailableExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtectiveEquipmentAvailableExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtectiveEquipmentAvailableExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtectiveEquipmentAvailableExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTECTIVE_EQUIPMENT_AVAILABLE_EXCEPTION = "protectiveEquipmentAvailableException";
  @SerializedName(SERIALIZED_NAME_PROTECTIVE_EQUIPMENT_AVAILABLE_EXCEPTION)
  private ProtectiveEquipmentAvailableExceptionEnum protectiveEquipmentAvailableException;

  public PersonalProtection() {
  }

  public PersonalProtection commonAreasOfferSanitizingItems(Boolean commonAreasOfferSanitizingItems) {
    this.commonAreasOfferSanitizingItems = commonAreasOfferSanitizingItems;
    return this;
  }

  /**
   * Hand-sanitizer and/or sanitizing wipes are offered in common areas.
   * @return commonAreasOfferSanitizingItems
   */
  @javax.annotation.Nullable
  public Boolean getCommonAreasOfferSanitizingItems() {
    return commonAreasOfferSanitizingItems;
  }

  public void setCommonAreasOfferSanitizingItems(Boolean commonAreasOfferSanitizingItems) {
    this.commonAreasOfferSanitizingItems = commonAreasOfferSanitizingItems;
  }


  public PersonalProtection commonAreasOfferSanitizingItemsException(CommonAreasOfferSanitizingItemsExceptionEnum commonAreasOfferSanitizingItemsException) {
    this.commonAreasOfferSanitizingItemsException = commonAreasOfferSanitizingItemsException;
    return this;
  }

  /**
   * Common areas offer sanitizing items exception.
   * @return commonAreasOfferSanitizingItemsException
   */
  @javax.annotation.Nullable
  public CommonAreasOfferSanitizingItemsExceptionEnum getCommonAreasOfferSanitizingItemsException() {
    return commonAreasOfferSanitizingItemsException;
  }

  public void setCommonAreasOfferSanitizingItemsException(CommonAreasOfferSanitizingItemsExceptionEnum commonAreasOfferSanitizingItemsException) {
    this.commonAreasOfferSanitizingItemsException = commonAreasOfferSanitizingItemsException;
  }


  public PersonalProtection faceMaskRequired(Boolean faceMaskRequired) {
    this.faceMaskRequired = faceMaskRequired;
    return this;
  }

  /**
   * Masks required on the property.
   * @return faceMaskRequired
   */
  @javax.annotation.Nullable
  public Boolean getFaceMaskRequired() {
    return faceMaskRequired;
  }

  public void setFaceMaskRequired(Boolean faceMaskRequired) {
    this.faceMaskRequired = faceMaskRequired;
  }


  public PersonalProtection faceMaskRequiredException(FaceMaskRequiredExceptionEnum faceMaskRequiredException) {
    this.faceMaskRequiredException = faceMaskRequiredException;
    return this;
  }

  /**
   * Face mask required exception.
   * @return faceMaskRequiredException
   */
  @javax.annotation.Nullable
  public FaceMaskRequiredExceptionEnum getFaceMaskRequiredException() {
    return faceMaskRequiredException;
  }

  public void setFaceMaskRequiredException(FaceMaskRequiredExceptionEnum faceMaskRequiredException) {
    this.faceMaskRequiredException = faceMaskRequiredException;
  }


  public PersonalProtection guestRoomHygieneKitsAvailable(Boolean guestRoomHygieneKitsAvailable) {
    this.guestRoomHygieneKitsAvailable = guestRoomHygieneKitsAvailable;
    return this;
  }

  /**
   * In-room hygiene kits with masks, hand sanitizer, and/or antibacterial wipes.
   * @return guestRoomHygieneKitsAvailable
   */
  @javax.annotation.Nullable
  public Boolean getGuestRoomHygieneKitsAvailable() {
    return guestRoomHygieneKitsAvailable;
  }

  public void setGuestRoomHygieneKitsAvailable(Boolean guestRoomHygieneKitsAvailable) {
    this.guestRoomHygieneKitsAvailable = guestRoomHygieneKitsAvailable;
  }


  public PersonalProtection guestRoomHygieneKitsAvailableException(GuestRoomHygieneKitsAvailableExceptionEnum guestRoomHygieneKitsAvailableException) {
    this.guestRoomHygieneKitsAvailableException = guestRoomHygieneKitsAvailableException;
    return this;
  }

  /**
   * Guest room hygiene kits available exception.
   * @return guestRoomHygieneKitsAvailableException
   */
  @javax.annotation.Nullable
  public GuestRoomHygieneKitsAvailableExceptionEnum getGuestRoomHygieneKitsAvailableException() {
    return guestRoomHygieneKitsAvailableException;
  }

  public void setGuestRoomHygieneKitsAvailableException(GuestRoomHygieneKitsAvailableExceptionEnum guestRoomHygieneKitsAvailableException) {
    this.guestRoomHygieneKitsAvailableException = guestRoomHygieneKitsAvailableException;
  }


  public PersonalProtection protectiveEquipmentAvailable(Boolean protectiveEquipmentAvailable) {
    this.protectiveEquipmentAvailable = protectiveEquipmentAvailable;
    return this;
  }

  /**
   * Masks and/or gloves available for guests.
   * @return protectiveEquipmentAvailable
   */
  @javax.annotation.Nullable
  public Boolean getProtectiveEquipmentAvailable() {
    return protectiveEquipmentAvailable;
  }

  public void setProtectiveEquipmentAvailable(Boolean protectiveEquipmentAvailable) {
    this.protectiveEquipmentAvailable = protectiveEquipmentAvailable;
  }


  public PersonalProtection protectiveEquipmentAvailableException(ProtectiveEquipmentAvailableExceptionEnum protectiveEquipmentAvailableException) {
    this.protectiveEquipmentAvailableException = protectiveEquipmentAvailableException;
    return this;
  }

  /**
   * Protective equipment available exception.
   * @return protectiveEquipmentAvailableException
   */
  @javax.annotation.Nullable
  public ProtectiveEquipmentAvailableExceptionEnum getProtectiveEquipmentAvailableException() {
    return protectiveEquipmentAvailableException;
  }

  public void setProtectiveEquipmentAvailableException(ProtectiveEquipmentAvailableExceptionEnum protectiveEquipmentAvailableException) {
    this.protectiveEquipmentAvailableException = protectiveEquipmentAvailableException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonalProtection personalProtection = (PersonalProtection) o;
    return Objects.equals(this.commonAreasOfferSanitizingItems, personalProtection.commonAreasOfferSanitizingItems) &&
        Objects.equals(this.commonAreasOfferSanitizingItemsException, personalProtection.commonAreasOfferSanitizingItemsException) &&
        Objects.equals(this.faceMaskRequired, personalProtection.faceMaskRequired) &&
        Objects.equals(this.faceMaskRequiredException, personalProtection.faceMaskRequiredException) &&
        Objects.equals(this.guestRoomHygieneKitsAvailable, personalProtection.guestRoomHygieneKitsAvailable) &&
        Objects.equals(this.guestRoomHygieneKitsAvailableException, personalProtection.guestRoomHygieneKitsAvailableException) &&
        Objects.equals(this.protectiveEquipmentAvailable, personalProtection.protectiveEquipmentAvailable) &&
        Objects.equals(this.protectiveEquipmentAvailableException, personalProtection.protectiveEquipmentAvailableException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonAreasOfferSanitizingItems, commonAreasOfferSanitizingItemsException, faceMaskRequired, faceMaskRequiredException, guestRoomHygieneKitsAvailable, guestRoomHygieneKitsAvailableException, protectiveEquipmentAvailable, protectiveEquipmentAvailableException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonalProtection {\n");
    sb.append("    commonAreasOfferSanitizingItems: ").append(toIndentedString(commonAreasOfferSanitizingItems)).append("\n");
    sb.append("    commonAreasOfferSanitizingItemsException: ").append(toIndentedString(commonAreasOfferSanitizingItemsException)).append("\n");
    sb.append("    faceMaskRequired: ").append(toIndentedString(faceMaskRequired)).append("\n");
    sb.append("    faceMaskRequiredException: ").append(toIndentedString(faceMaskRequiredException)).append("\n");
    sb.append("    guestRoomHygieneKitsAvailable: ").append(toIndentedString(guestRoomHygieneKitsAvailable)).append("\n");
    sb.append("    guestRoomHygieneKitsAvailableException: ").append(toIndentedString(guestRoomHygieneKitsAvailableException)).append("\n");
    sb.append("    protectiveEquipmentAvailable: ").append(toIndentedString(protectiveEquipmentAvailable)).append("\n");
    sb.append("    protectiveEquipmentAvailableException: ").append(toIndentedString(protectiveEquipmentAvailableException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commonAreasOfferSanitizingItems");
    openapiFields.add("commonAreasOfferSanitizingItemsException");
    openapiFields.add("faceMaskRequired");
    openapiFields.add("faceMaskRequiredException");
    openapiFields.add("guestRoomHygieneKitsAvailable");
    openapiFields.add("guestRoomHygieneKitsAvailableException");
    openapiFields.add("protectiveEquipmentAvailable");
    openapiFields.add("protectiveEquipmentAvailableException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PersonalProtection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PersonalProtection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonalProtection is not found in the empty JSON string", PersonalProtection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PersonalProtection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersonalProtection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commonAreasOfferSanitizingItemsException") != null && !jsonObj.get("commonAreasOfferSanitizingItemsException").isJsonNull()) && !jsonObj.get("commonAreasOfferSanitizingItemsException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commonAreasOfferSanitizingItemsException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commonAreasOfferSanitizingItemsException").toString()));
      }
      // validate the optional field `commonAreasOfferSanitizingItemsException`
      if (jsonObj.get("commonAreasOfferSanitizingItemsException") != null && !jsonObj.get("commonAreasOfferSanitizingItemsException").isJsonNull()) {
        CommonAreasOfferSanitizingItemsExceptionEnum.validateJsonElement(jsonObj.get("commonAreasOfferSanitizingItemsException"));
      }
      if ((jsonObj.get("faceMaskRequiredException") != null && !jsonObj.get("faceMaskRequiredException").isJsonNull()) && !jsonObj.get("faceMaskRequiredException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `faceMaskRequiredException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("faceMaskRequiredException").toString()));
      }
      // validate the optional field `faceMaskRequiredException`
      if (jsonObj.get("faceMaskRequiredException") != null && !jsonObj.get("faceMaskRequiredException").isJsonNull()) {
        FaceMaskRequiredExceptionEnum.validateJsonElement(jsonObj.get("faceMaskRequiredException"));
      }
      if ((jsonObj.get("guestRoomHygieneKitsAvailableException") != null && !jsonObj.get("guestRoomHygieneKitsAvailableException").isJsonNull()) && !jsonObj.get("guestRoomHygieneKitsAvailableException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guestRoomHygieneKitsAvailableException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guestRoomHygieneKitsAvailableException").toString()));
      }
      // validate the optional field `guestRoomHygieneKitsAvailableException`
      if (jsonObj.get("guestRoomHygieneKitsAvailableException") != null && !jsonObj.get("guestRoomHygieneKitsAvailableException").isJsonNull()) {
        GuestRoomHygieneKitsAvailableExceptionEnum.validateJsonElement(jsonObj.get("guestRoomHygieneKitsAvailableException"));
      }
      if ((jsonObj.get("protectiveEquipmentAvailableException") != null && !jsonObj.get("protectiveEquipmentAvailableException").isJsonNull()) && !jsonObj.get("protectiveEquipmentAvailableException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protectiveEquipmentAvailableException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protectiveEquipmentAvailableException").toString()));
      }
      // validate the optional field `protectiveEquipmentAvailableException`
      if (jsonObj.get("protectiveEquipmentAvailableException") != null && !jsonObj.get("protectiveEquipmentAvailableException").isJsonNull()) {
        ProtectiveEquipmentAvailableExceptionEnum.validateJsonElement(jsonObj.get("protectiveEquipmentAvailableException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonalProtection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonalProtection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonalProtection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonalProtection.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonalProtection>() {
           @Override
           public void write(JsonWriter out, PersonalProtection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonalProtection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PersonalProtection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PersonalProtection
   * @throws IOException if the JSON string is invalid with respect to PersonalProtection
   */
  public static PersonalProtection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonalProtection.class);
  }

  /**
   * Convert an instance of PersonalProtection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

