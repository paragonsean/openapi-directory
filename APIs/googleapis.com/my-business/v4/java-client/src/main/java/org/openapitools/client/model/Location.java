/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdWordsLocationExtensions;
import org.openapitools.client.model.Attribute;
import org.openapitools.client.model.BusinessHours;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.LatLng;
import org.openapitools.client.model.LocationKey;
import org.openapitools.client.model.LocationState;
import org.openapitools.client.model.Metadata;
import org.openapitools.client.model.MoreHours;
import org.openapitools.client.model.OpenInfo;
import org.openapitools.client.model.PostalAddress;
import org.openapitools.client.model.PriceList;
import org.openapitools.client.model.Profile;
import org.openapitools.client.model.RelationshipData;
import org.openapitools.client.model.ServiceAreaBusiness;
import org.openapitools.client.model.SpecialHours;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A location. See the [help center article] (https://support.google.com/business/answer/3038177) for a detailed description of these fields, or the [category endpoint](/my-business/reference/rest/v4/categories) for a list of valid business categories.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Location {
  public static final String SERIALIZED_NAME_AD_WORDS_LOCATION_EXTENSIONS = "adWordsLocationExtensions";
  @SerializedName(SERIALIZED_NAME_AD_WORDS_LOCATION_EXTENSIONS)
  private AdWordsLocationExtensions adWordsLocationExtensions;

  public static final String SERIALIZED_NAME_ADDITIONAL_CATEGORIES = "additionalCategories";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CATEGORIES)
  private List<Category> additionalCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_PHONES = "additionalPhones";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PHONES)
  private List<String> additionalPhones = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private PostalAddress address;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<Attribute> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_LATLNG = "latlng";
  @SerializedName(SERIALIZED_NAME_LATLNG)
  private LatLng latlng;

  public static final String SERIALIZED_NAME_LOCATION_KEY = "locationKey";
  @SerializedName(SERIALIZED_NAME_LOCATION_KEY)
  private LocationKey locationKey;

  public static final String SERIALIZED_NAME_LOCATION_NAME = "locationName";
  @SerializedName(SERIALIZED_NAME_LOCATION_NAME)
  private String locationName;

  public static final String SERIALIZED_NAME_LOCATION_STATE = "locationState";
  @SerializedName(SERIALIZED_NAME_LOCATION_STATE)
  private LocationState locationState;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Metadata metadata;

  public static final String SERIALIZED_NAME_MORE_HOURS = "moreHours";
  @SerializedName(SERIALIZED_NAME_MORE_HOURS)
  private List<MoreHours> moreHours = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPEN_INFO = "openInfo";
  @SerializedName(SERIALIZED_NAME_OPEN_INFO)
  private OpenInfo openInfo;

  public static final String SERIALIZED_NAME_PRICE_LISTS = "priceLists";
  @SerializedName(SERIALIZED_NAME_PRICE_LISTS)
  private List<PriceList> priceLists = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIMARY_CATEGORY = "primaryCategory";
  @SerializedName(SERIALIZED_NAME_PRIMARY_CATEGORY)
  private Category primaryCategory;

  public static final String SERIALIZED_NAME_PRIMARY_PHONE = "primaryPhone";
  @SerializedName(SERIALIZED_NAME_PRIMARY_PHONE)
  private String primaryPhone;

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private Profile profile;

  public static final String SERIALIZED_NAME_REGULAR_HOURS = "regularHours";
  @SerializedName(SERIALIZED_NAME_REGULAR_HOURS)
  private BusinessHours regularHours;

  public static final String SERIALIZED_NAME_RELATIONSHIP_DATA = "relationshipData";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_DATA)
  private RelationshipData relationshipData;

  public static final String SERIALIZED_NAME_SERVICE_AREA = "serviceArea";
  @SerializedName(SERIALIZED_NAME_SERVICE_AREA)
  private ServiceAreaBusiness serviceArea;

  public static final String SERIALIZED_NAME_SPECIAL_HOURS = "specialHours";
  @SerializedName(SERIALIZED_NAME_SPECIAL_HOURS)
  private SpecialHours specialHours;

  public static final String SERIALIZED_NAME_STORE_CODE = "storeCode";
  @SerializedName(SERIALIZED_NAME_STORE_CODE)
  private String storeCode;

  public static final String SERIALIZED_NAME_WEBSITE_URL = "websiteUrl";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URL)
  private String websiteUrl;

  public Location() {
  }

  public Location adWordsLocationExtensions(AdWordsLocationExtensions adWordsLocationExtensions) {
    this.adWordsLocationExtensions = adWordsLocationExtensions;
    return this;
  }

  /**
   * Get adWordsLocationExtensions
   * @return adWordsLocationExtensions
   */
  @javax.annotation.Nullable
  public AdWordsLocationExtensions getAdWordsLocationExtensions() {
    return adWordsLocationExtensions;
  }

  public void setAdWordsLocationExtensions(AdWordsLocationExtensions adWordsLocationExtensions) {
    this.adWordsLocationExtensions = adWordsLocationExtensions;
  }


  public Location additionalCategories(List<Category> additionalCategories) {
    this.additionalCategories = additionalCategories;
    return this;
  }

  public Location addAdditionalCategoriesItem(Category additionalCategoriesItem) {
    if (this.additionalCategories == null) {
      this.additionalCategories = new ArrayList<>();
    }
    this.additionalCategories.add(additionalCategoriesItem);
    return this;
  }

  /**
   * Additional categories to describe your business. Categories help your customers find accurate, specific results for services they&#39;re interested in. To keep your business information accurate and live, make sure that you use as few categories as possible to describe your overall core business. Choose categories that are as specific as possible, but representative of your main business.
   * @return additionalCategories
   */
  @javax.annotation.Nullable
  public List<Category> getAdditionalCategories() {
    return additionalCategories;
  }

  public void setAdditionalCategories(List<Category> additionalCategories) {
    this.additionalCategories = additionalCategories;
  }


  public Location additionalPhones(List<String> additionalPhones) {
    this.additionalPhones = additionalPhones;
    return this;
  }

  public Location addAdditionalPhonesItem(String additionalPhonesItem) {
    if (this.additionalPhones == null) {
      this.additionalPhones = new ArrayList<>();
    }
    this.additionalPhones.add(additionalPhonesItem);
    return this;
  }

  /**
   * Up to two phone numbers (mobile or landline, no fax) at which your business can be called, in addition to your primary phone number.
   * @return additionalPhones
   */
  @javax.annotation.Nullable
  public List<String> getAdditionalPhones() {
    return additionalPhones;
  }

  public void setAdditionalPhones(List<String> additionalPhones) {
    this.additionalPhones = additionalPhones;
  }


  public Location address(PostalAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public PostalAddress getAddress() {
    return address;
  }

  public void setAddress(PostalAddress address) {
    this.address = address;
  }


  public Location attributes(List<Attribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public Location addAttributesItem(Attribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * Attributes for this location.
   * @return attributes
   */
  @javax.annotation.Nullable
  public List<Attribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<Attribute> attributes) {
    this.attributes = attributes;
  }


  public Location labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public Location addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * A collection of free-form strings to allow you to tag your business. These labels are NOT user facing; only you can see them. Limited to 255 characters (per label).
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public Location languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * The language of the location. Set during creation and not updateable.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public Location latlng(LatLng latlng) {
    this.latlng = latlng;
    return this;
  }

  /**
   * Get latlng
   * @return latlng
   */
  @javax.annotation.Nullable
  public LatLng getLatlng() {
    return latlng;
  }

  public void setLatlng(LatLng latlng) {
    this.latlng = latlng;
  }


  public Location locationKey(LocationKey locationKey) {
    this.locationKey = locationKey;
    return this;
  }

  /**
   * Get locationKey
   * @return locationKey
   */
  @javax.annotation.Nullable
  public LocationKey getLocationKey() {
    return locationKey;
  }

  public void setLocationKey(LocationKey locationKey) {
    this.locationKey = locationKey;
  }


  public Location locationName(String locationName) {
    this.locationName = locationName;
    return this;
  }

  /**
   * Location name should reflect your business&#39;s real-world name, as used consistently on your storefront, website, and stationery, and as known to customers. Any additional information, when relevant, can be included in other fields of the resource (for example, &#x60;Address&#x60;, &#x60;Categories&#x60;). Don&#39;t add unnecessary information to your name (for example, prefer \&quot;Google\&quot; over \&quot;Google Inc. - Mountain View Corporate Headquarters\&quot;). Don&#39;t include marketing taglines, store codes, special characters, hours or closed/open status, phone numbers, website URLs, service/product information, location/address or directions, or containment information (for example, \&quot;Chase ATM in Duane Reade\&quot;).
   * @return locationName
   */
  @javax.annotation.Nullable
  public String getLocationName() {
    return locationName;
  }

  public void setLocationName(String locationName) {
    this.locationName = locationName;
  }


  public Location locationState(LocationState locationState) {
    this.locationState = locationState;
    return this;
  }

  /**
   * Get locationState
   * @return locationState
   */
  @javax.annotation.Nullable
  public LocationState getLocationState() {
    return locationState;
  }

  public void setLocationState(LocationState locationState) {
    this.locationState = locationState;
  }


  public Location metadata(Metadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Metadata getMetadata() {
    return metadata;
  }

  public void setMetadata(Metadata metadata) {
    this.metadata = metadata;
  }


  public Location moreHours(List<MoreHours> moreHours) {
    this.moreHours = moreHours;
    return this;
  }

  public Location addMoreHoursItem(MoreHours moreHoursItem) {
    if (this.moreHours == null) {
      this.moreHours = new ArrayList<>();
    }
    this.moreHours.add(moreHoursItem);
    return this;
  }

  /**
   * More hours for a business&#39;s different departments or specific customers.
   * @return moreHours
   */
  @javax.annotation.Nullable
  public List<MoreHours> getMoreHours() {
    return moreHours;
  }

  public void setMoreHours(List<MoreHours> moreHours) {
    this.moreHours = moreHours;
  }


  public Location name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Google identifier for this location in the form: &#x60;accounts/{account_id}/locations/{location_id}&#x60; In the context of matches, this field will not be populated.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Location openInfo(OpenInfo openInfo) {
    this.openInfo = openInfo;
    return this;
  }

  /**
   * Get openInfo
   * @return openInfo
   */
  @javax.annotation.Nullable
  public OpenInfo getOpenInfo() {
    return openInfo;
  }

  public void setOpenInfo(OpenInfo openInfo) {
    this.openInfo = openInfo;
  }


  public Location priceLists(List<PriceList> priceLists) {
    this.priceLists = priceLists;
    return this;
  }

  public Location addPriceListsItem(PriceList priceListsItem) {
    if (this.priceLists == null) {
      this.priceLists = new ArrayList<>();
    }
    this.priceLists.add(priceListsItem);
    return this;
  }

  /**
   * Price list information for this location.
   * @return priceLists
   */
  @javax.annotation.Nullable
  public List<PriceList> getPriceLists() {
    return priceLists;
  }

  public void setPriceLists(List<PriceList> priceLists) {
    this.priceLists = priceLists;
  }


  public Location primaryCategory(Category primaryCategory) {
    this.primaryCategory = primaryCategory;
    return this;
  }

  /**
   * Get primaryCategory
   * @return primaryCategory
   */
  @javax.annotation.Nullable
  public Category getPrimaryCategory() {
    return primaryCategory;
  }

  public void setPrimaryCategory(Category primaryCategory) {
    this.primaryCategory = primaryCategory;
  }


  public Location primaryPhone(String primaryPhone) {
    this.primaryPhone = primaryPhone;
    return this;
  }

  /**
   * A phone number that connects to your individual business location as directly as possible. Use a local phone number instead of a central, call center helpline number whenever possible.
   * @return primaryPhone
   */
  @javax.annotation.Nullable
  public String getPrimaryPhone() {
    return primaryPhone;
  }

  public void setPrimaryPhone(String primaryPhone) {
    this.primaryPhone = primaryPhone;
  }


  public Location profile(Profile profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Get profile
   * @return profile
   */
  @javax.annotation.Nullable
  public Profile getProfile() {
    return profile;
  }

  public void setProfile(Profile profile) {
    this.profile = profile;
  }


  public Location regularHours(BusinessHours regularHours) {
    this.regularHours = regularHours;
    return this;
  }

  /**
   * Get regularHours
   * @return regularHours
   */
  @javax.annotation.Nullable
  public BusinessHours getRegularHours() {
    return regularHours;
  }

  public void setRegularHours(BusinessHours regularHours) {
    this.regularHours = regularHours;
  }


  public Location relationshipData(RelationshipData relationshipData) {
    this.relationshipData = relationshipData;
    return this;
  }

  /**
   * Get relationshipData
   * @return relationshipData
   */
  @javax.annotation.Nullable
  public RelationshipData getRelationshipData() {
    return relationshipData;
  }

  public void setRelationshipData(RelationshipData relationshipData) {
    this.relationshipData = relationshipData;
  }


  public Location serviceArea(ServiceAreaBusiness serviceArea) {
    this.serviceArea = serviceArea;
    return this;
  }

  /**
   * Get serviceArea
   * @return serviceArea
   */
  @javax.annotation.Nullable
  public ServiceAreaBusiness getServiceArea() {
    return serviceArea;
  }

  public void setServiceArea(ServiceAreaBusiness serviceArea) {
    this.serviceArea = serviceArea;
  }


  public Location specialHours(SpecialHours specialHours) {
    this.specialHours = specialHours;
    return this;
  }

  /**
   * Get specialHours
   * @return specialHours
   */
  @javax.annotation.Nullable
  public SpecialHours getSpecialHours() {
    return specialHours;
  }

  public void setSpecialHours(SpecialHours specialHours) {
    this.specialHours = specialHours;
  }


  public Location storeCode(String storeCode) {
    this.storeCode = storeCode;
    return this;
  }

  /**
   * External identifier for this location, which must be unique inside a given account. This is a means of associating the location with your own records.
   * @return storeCode
   */
  @javax.annotation.Nullable
  public String getStoreCode() {
    return storeCode;
  }

  public void setStoreCode(String storeCode) {
    this.storeCode = storeCode;
  }


  public Location websiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
    return this;
  }

  /**
   * A URL for this business. If possible, use a URL that represents this individual business location instead of a generic website/URL that represents all locations, or the brand.
   * @return websiteUrl
   */
  @javax.annotation.Nullable
  public String getWebsiteUrl() {
    return websiteUrl;
  }

  public void setWebsiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Location location = (Location) o;
    return Objects.equals(this.adWordsLocationExtensions, location.adWordsLocationExtensions) &&
        Objects.equals(this.additionalCategories, location.additionalCategories) &&
        Objects.equals(this.additionalPhones, location.additionalPhones) &&
        Objects.equals(this.address, location.address) &&
        Objects.equals(this.attributes, location.attributes) &&
        Objects.equals(this.labels, location.labels) &&
        Objects.equals(this.languageCode, location.languageCode) &&
        Objects.equals(this.latlng, location.latlng) &&
        Objects.equals(this.locationKey, location.locationKey) &&
        Objects.equals(this.locationName, location.locationName) &&
        Objects.equals(this.locationState, location.locationState) &&
        Objects.equals(this.metadata, location.metadata) &&
        Objects.equals(this.moreHours, location.moreHours) &&
        Objects.equals(this.name, location.name) &&
        Objects.equals(this.openInfo, location.openInfo) &&
        Objects.equals(this.priceLists, location.priceLists) &&
        Objects.equals(this.primaryCategory, location.primaryCategory) &&
        Objects.equals(this.primaryPhone, location.primaryPhone) &&
        Objects.equals(this.profile, location.profile) &&
        Objects.equals(this.regularHours, location.regularHours) &&
        Objects.equals(this.relationshipData, location.relationshipData) &&
        Objects.equals(this.serviceArea, location.serviceArea) &&
        Objects.equals(this.specialHours, location.specialHours) &&
        Objects.equals(this.storeCode, location.storeCode) &&
        Objects.equals(this.websiteUrl, location.websiteUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adWordsLocationExtensions, additionalCategories, additionalPhones, address, attributes, labels, languageCode, latlng, locationKey, locationName, locationState, metadata, moreHours, name, openInfo, priceLists, primaryCategory, primaryPhone, profile, regularHours, relationshipData, serviceArea, specialHours, storeCode, websiteUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Location {\n");
    sb.append("    adWordsLocationExtensions: ").append(toIndentedString(adWordsLocationExtensions)).append("\n");
    sb.append("    additionalCategories: ").append(toIndentedString(additionalCategories)).append("\n");
    sb.append("    additionalPhones: ").append(toIndentedString(additionalPhones)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    latlng: ").append(toIndentedString(latlng)).append("\n");
    sb.append("    locationKey: ").append(toIndentedString(locationKey)).append("\n");
    sb.append("    locationName: ").append(toIndentedString(locationName)).append("\n");
    sb.append("    locationState: ").append(toIndentedString(locationState)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    moreHours: ").append(toIndentedString(moreHours)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    openInfo: ").append(toIndentedString(openInfo)).append("\n");
    sb.append("    priceLists: ").append(toIndentedString(priceLists)).append("\n");
    sb.append("    primaryCategory: ").append(toIndentedString(primaryCategory)).append("\n");
    sb.append("    primaryPhone: ").append(toIndentedString(primaryPhone)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    regularHours: ").append(toIndentedString(regularHours)).append("\n");
    sb.append("    relationshipData: ").append(toIndentedString(relationshipData)).append("\n");
    sb.append("    serviceArea: ").append(toIndentedString(serviceArea)).append("\n");
    sb.append("    specialHours: ").append(toIndentedString(specialHours)).append("\n");
    sb.append("    storeCode: ").append(toIndentedString(storeCode)).append("\n");
    sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adWordsLocationExtensions");
    openapiFields.add("additionalCategories");
    openapiFields.add("additionalPhones");
    openapiFields.add("address");
    openapiFields.add("attributes");
    openapiFields.add("labels");
    openapiFields.add("languageCode");
    openapiFields.add("latlng");
    openapiFields.add("locationKey");
    openapiFields.add("locationName");
    openapiFields.add("locationState");
    openapiFields.add("metadata");
    openapiFields.add("moreHours");
    openapiFields.add("name");
    openapiFields.add("openInfo");
    openapiFields.add("priceLists");
    openapiFields.add("primaryCategory");
    openapiFields.add("primaryPhone");
    openapiFields.add("profile");
    openapiFields.add("regularHours");
    openapiFields.add("relationshipData");
    openapiFields.add("serviceArea");
    openapiFields.add("specialHours");
    openapiFields.add("storeCode");
    openapiFields.add("websiteUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Location
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Location.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Location is not found in the empty JSON string", Location.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Location.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Location` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adWordsLocationExtensions`
      if (jsonObj.get("adWordsLocationExtensions") != null && !jsonObj.get("adWordsLocationExtensions").isJsonNull()) {
        AdWordsLocationExtensions.validateJsonElement(jsonObj.get("adWordsLocationExtensions"));
      }
      if (jsonObj.get("additionalCategories") != null && !jsonObj.get("additionalCategories").isJsonNull()) {
        JsonArray jsonArrayadditionalCategories = jsonObj.getAsJsonArray("additionalCategories");
        if (jsonArrayadditionalCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalCategories` to be an array in the JSON string but got `%s`", jsonObj.get("additionalCategories").toString()));
          }

          // validate the optional field `additionalCategories` (array)
          for (int i = 0; i < jsonArrayadditionalCategories.size(); i++) {
            Category.validateJsonElement(jsonArrayadditionalCategories.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("additionalPhones") != null && !jsonObj.get("additionalPhones").isJsonNull() && !jsonObj.get("additionalPhones").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalPhones` to be an array in the JSON string but got `%s`", jsonObj.get("additionalPhones").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        PostalAddress.validateJsonElement(jsonObj.get("address"));
      }
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
          }

          // validate the optional field `attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            Attribute.validateJsonElement(jsonArrayattributes.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      // validate the optional field `latlng`
      if (jsonObj.get("latlng") != null && !jsonObj.get("latlng").isJsonNull()) {
        LatLng.validateJsonElement(jsonObj.get("latlng"));
      }
      // validate the optional field `locationKey`
      if (jsonObj.get("locationKey") != null && !jsonObj.get("locationKey").isJsonNull()) {
        LocationKey.validateJsonElement(jsonObj.get("locationKey"));
      }
      if ((jsonObj.get("locationName") != null && !jsonObj.get("locationName").isJsonNull()) && !jsonObj.get("locationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationName").toString()));
      }
      // validate the optional field `locationState`
      if (jsonObj.get("locationState") != null && !jsonObj.get("locationState").isJsonNull()) {
        LocationState.validateJsonElement(jsonObj.get("locationState"));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        Metadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if (jsonObj.get("moreHours") != null && !jsonObj.get("moreHours").isJsonNull()) {
        JsonArray jsonArraymoreHours = jsonObj.getAsJsonArray("moreHours");
        if (jsonArraymoreHours != null) {
          // ensure the json data is an array
          if (!jsonObj.get("moreHours").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `moreHours` to be an array in the JSON string but got `%s`", jsonObj.get("moreHours").toString()));
          }

          // validate the optional field `moreHours` (array)
          for (int i = 0; i < jsonArraymoreHours.size(); i++) {
            MoreHours.validateJsonElement(jsonArraymoreHours.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `openInfo`
      if (jsonObj.get("openInfo") != null && !jsonObj.get("openInfo").isJsonNull()) {
        OpenInfo.validateJsonElement(jsonObj.get("openInfo"));
      }
      if (jsonObj.get("priceLists") != null && !jsonObj.get("priceLists").isJsonNull()) {
        JsonArray jsonArraypriceLists = jsonObj.getAsJsonArray("priceLists");
        if (jsonArraypriceLists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("priceLists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `priceLists` to be an array in the JSON string but got `%s`", jsonObj.get("priceLists").toString()));
          }

          // validate the optional field `priceLists` (array)
          for (int i = 0; i < jsonArraypriceLists.size(); i++) {
            PriceList.validateJsonElement(jsonArraypriceLists.get(i));
          };
        }
      }
      // validate the optional field `primaryCategory`
      if (jsonObj.get("primaryCategory") != null && !jsonObj.get("primaryCategory").isJsonNull()) {
        Category.validateJsonElement(jsonObj.get("primaryCategory"));
      }
      if ((jsonObj.get("primaryPhone") != null && !jsonObj.get("primaryPhone").isJsonNull()) && !jsonObj.get("primaryPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryPhone").toString()));
      }
      // validate the optional field `profile`
      if (jsonObj.get("profile") != null && !jsonObj.get("profile").isJsonNull()) {
        Profile.validateJsonElement(jsonObj.get("profile"));
      }
      // validate the optional field `regularHours`
      if (jsonObj.get("regularHours") != null && !jsonObj.get("regularHours").isJsonNull()) {
        BusinessHours.validateJsonElement(jsonObj.get("regularHours"));
      }
      // validate the optional field `relationshipData`
      if (jsonObj.get("relationshipData") != null && !jsonObj.get("relationshipData").isJsonNull()) {
        RelationshipData.validateJsonElement(jsonObj.get("relationshipData"));
      }
      // validate the optional field `serviceArea`
      if (jsonObj.get("serviceArea") != null && !jsonObj.get("serviceArea").isJsonNull()) {
        ServiceAreaBusiness.validateJsonElement(jsonObj.get("serviceArea"));
      }
      // validate the optional field `specialHours`
      if (jsonObj.get("specialHours") != null && !jsonObj.get("specialHours").isJsonNull()) {
        SpecialHours.validateJsonElement(jsonObj.get("specialHours"));
      }
      if ((jsonObj.get("storeCode") != null && !jsonObj.get("storeCode").isJsonNull()) && !jsonObj.get("storeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeCode").toString()));
      }
      if ((jsonObj.get("websiteUrl") != null && !jsonObj.get("websiteUrl").isJsonNull()) && !jsonObj.get("websiteUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `websiteUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("websiteUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Location.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Location' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Location> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Location.class));

       return (TypeAdapter<T>) new TypeAdapter<Location>() {
           @Override
           public void write(JsonWriter out, Location value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Location read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Location given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Location
   * @throws IOException if the JSON string is invalid with respect to Location
   */
  public static Location fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Location.class);
  }

  /**
   * Convert an instance of Location to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

