/*
 * Google My Business API
 * The Google My Business API provides an interface for managing business location information on Google.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Languages spoken by at least one staff member.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:13.025173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LanguagesSpoken {
  public static final String SERIALIZED_NAME_ARABIC_SPOKEN = "arabicSpoken";
  @SerializedName(SERIALIZED_NAME_ARABIC_SPOKEN)
  private Boolean arabicSpoken;

  /**
   * Arabic exception.
   */
  @JsonAdapter(ArabicSpokenExceptionEnum.Adapter.class)
  public enum ArabicSpokenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ArabicSpokenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ArabicSpokenExceptionEnum fromValue(String value) {
      for (ArabicSpokenExceptionEnum b : ArabicSpokenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ArabicSpokenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ArabicSpokenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ArabicSpokenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ArabicSpokenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ArabicSpokenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ARABIC_SPOKEN_EXCEPTION = "arabicSpokenException";
  @SerializedName(SERIALIZED_NAME_ARABIC_SPOKEN_EXCEPTION)
  private ArabicSpokenExceptionEnum arabicSpokenException;

  public static final String SERIALIZED_NAME_CANTONESE_SPOKEN = "cantoneseSpoken";
  @SerializedName(SERIALIZED_NAME_CANTONESE_SPOKEN)
  private Boolean cantoneseSpoken;

  /**
   * Cantonese exception.
   */
  @JsonAdapter(CantoneseSpokenExceptionEnum.Adapter.class)
  public enum CantoneseSpokenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    CantoneseSpokenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CantoneseSpokenExceptionEnum fromValue(String value) {
      for (CantoneseSpokenExceptionEnum b : CantoneseSpokenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CantoneseSpokenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CantoneseSpokenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CantoneseSpokenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CantoneseSpokenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CantoneseSpokenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CANTONESE_SPOKEN_EXCEPTION = "cantoneseSpokenException";
  @SerializedName(SERIALIZED_NAME_CANTONESE_SPOKEN_EXCEPTION)
  private CantoneseSpokenExceptionEnum cantoneseSpokenException;

  public static final String SERIALIZED_NAME_DUTCH_SPOKEN = "dutchSpoken";
  @SerializedName(SERIALIZED_NAME_DUTCH_SPOKEN)
  private Boolean dutchSpoken;

  /**
   * Dutch exception.
   */
  @JsonAdapter(DutchSpokenExceptionEnum.Adapter.class)
  public enum DutchSpokenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    DutchSpokenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DutchSpokenExceptionEnum fromValue(String value) {
      for (DutchSpokenExceptionEnum b : DutchSpokenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DutchSpokenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DutchSpokenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DutchSpokenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DutchSpokenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DutchSpokenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DUTCH_SPOKEN_EXCEPTION = "dutchSpokenException";
  @SerializedName(SERIALIZED_NAME_DUTCH_SPOKEN_EXCEPTION)
  private DutchSpokenExceptionEnum dutchSpokenException;

  public static final String SERIALIZED_NAME_ENGLISH_SPOKEN = "englishSpoken";
  @SerializedName(SERIALIZED_NAME_ENGLISH_SPOKEN)
  private Boolean englishSpoken;

  /**
   * English exception.
   */
  @JsonAdapter(EnglishSpokenExceptionEnum.Adapter.class)
  public enum EnglishSpokenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    EnglishSpokenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnglishSpokenExceptionEnum fromValue(String value) {
      for (EnglishSpokenExceptionEnum b : EnglishSpokenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnglishSpokenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnglishSpokenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnglishSpokenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnglishSpokenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnglishSpokenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENGLISH_SPOKEN_EXCEPTION = "englishSpokenException";
  @SerializedName(SERIALIZED_NAME_ENGLISH_SPOKEN_EXCEPTION)
  private EnglishSpokenExceptionEnum englishSpokenException;

  public static final String SERIALIZED_NAME_FILIPINO_SPOKEN = "filipinoSpoken";
  @SerializedName(SERIALIZED_NAME_FILIPINO_SPOKEN)
  private Boolean filipinoSpoken;

  /**
   * Filipino exception.
   */
  @JsonAdapter(FilipinoSpokenExceptionEnum.Adapter.class)
  public enum FilipinoSpokenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FilipinoSpokenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FilipinoSpokenExceptionEnum fromValue(String value) {
      for (FilipinoSpokenExceptionEnum b : FilipinoSpokenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FilipinoSpokenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FilipinoSpokenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FilipinoSpokenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FilipinoSpokenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FilipinoSpokenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILIPINO_SPOKEN_EXCEPTION = "filipinoSpokenException";
  @SerializedName(SERIALIZED_NAME_FILIPINO_SPOKEN_EXCEPTION)
  private FilipinoSpokenExceptionEnum filipinoSpokenException;

  public static final String SERIALIZED_NAME_FRENCH_SPOKEN = "frenchSpoken";
  @SerializedName(SERIALIZED_NAME_FRENCH_SPOKEN)
  private Boolean frenchSpoken;

  /**
   * French exception.
   */
  @JsonAdapter(FrenchSpokenExceptionEnum.Adapter.class)
  public enum FrenchSpokenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    FrenchSpokenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FrenchSpokenExceptionEnum fromValue(String value) {
      for (FrenchSpokenExceptionEnum b : FrenchSpokenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FrenchSpokenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FrenchSpokenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FrenchSpokenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FrenchSpokenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FrenchSpokenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FRENCH_SPOKEN_EXCEPTION = "frenchSpokenException";
  @SerializedName(SERIALIZED_NAME_FRENCH_SPOKEN_EXCEPTION)
  private FrenchSpokenExceptionEnum frenchSpokenException;

  public static final String SERIALIZED_NAME_GERMAN_SPOKEN = "germanSpoken";
  @SerializedName(SERIALIZED_NAME_GERMAN_SPOKEN)
  private Boolean germanSpoken;

  /**
   * German exception.
   */
  @JsonAdapter(GermanSpokenExceptionEnum.Adapter.class)
  public enum GermanSpokenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    GermanSpokenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GermanSpokenExceptionEnum fromValue(String value) {
      for (GermanSpokenExceptionEnum b : GermanSpokenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GermanSpokenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GermanSpokenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GermanSpokenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GermanSpokenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GermanSpokenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GERMAN_SPOKEN_EXCEPTION = "germanSpokenException";
  @SerializedName(SERIALIZED_NAME_GERMAN_SPOKEN_EXCEPTION)
  private GermanSpokenExceptionEnum germanSpokenException;

  public static final String SERIALIZED_NAME_HINDI_SPOKEN = "hindiSpoken";
  @SerializedName(SERIALIZED_NAME_HINDI_SPOKEN)
  private Boolean hindiSpoken;

  /**
   * Hindi exception.
   */
  @JsonAdapter(HindiSpokenExceptionEnum.Adapter.class)
  public enum HindiSpokenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    HindiSpokenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HindiSpokenExceptionEnum fromValue(String value) {
      for (HindiSpokenExceptionEnum b : HindiSpokenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HindiSpokenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HindiSpokenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HindiSpokenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HindiSpokenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HindiSpokenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HINDI_SPOKEN_EXCEPTION = "hindiSpokenException";
  @SerializedName(SERIALIZED_NAME_HINDI_SPOKEN_EXCEPTION)
  private HindiSpokenExceptionEnum hindiSpokenException;

  public static final String SERIALIZED_NAME_INDONESIAN_SPOKEN = "indonesianSpoken";
  @SerializedName(SERIALIZED_NAME_INDONESIAN_SPOKEN)
  private Boolean indonesianSpoken;

  /**
   * Indonesian exception.
   */
  @JsonAdapter(IndonesianSpokenExceptionEnum.Adapter.class)
  public enum IndonesianSpokenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    IndonesianSpokenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndonesianSpokenExceptionEnum fromValue(String value) {
      for (IndonesianSpokenExceptionEnum b : IndonesianSpokenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndonesianSpokenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndonesianSpokenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndonesianSpokenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndonesianSpokenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndonesianSpokenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDONESIAN_SPOKEN_EXCEPTION = "indonesianSpokenException";
  @SerializedName(SERIALIZED_NAME_INDONESIAN_SPOKEN_EXCEPTION)
  private IndonesianSpokenExceptionEnum indonesianSpokenException;

  public static final String SERIALIZED_NAME_ITALIAN_SPOKEN = "italianSpoken";
  @SerializedName(SERIALIZED_NAME_ITALIAN_SPOKEN)
  private Boolean italianSpoken;

  /**
   * Italian exception.
   */
  @JsonAdapter(ItalianSpokenExceptionEnum.Adapter.class)
  public enum ItalianSpokenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    ItalianSpokenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ItalianSpokenExceptionEnum fromValue(String value) {
      for (ItalianSpokenExceptionEnum b : ItalianSpokenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ItalianSpokenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ItalianSpokenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ItalianSpokenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ItalianSpokenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ItalianSpokenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ITALIAN_SPOKEN_EXCEPTION = "italianSpokenException";
  @SerializedName(SERIALIZED_NAME_ITALIAN_SPOKEN_EXCEPTION)
  private ItalianSpokenExceptionEnum italianSpokenException;

  public static final String SERIALIZED_NAME_JAPANESE_SPOKEN = "japaneseSpoken";
  @SerializedName(SERIALIZED_NAME_JAPANESE_SPOKEN)
  private Boolean japaneseSpoken;

  /**
   * Japanese exception.
   */
  @JsonAdapter(JapaneseSpokenExceptionEnum.Adapter.class)
  public enum JapaneseSpokenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    JapaneseSpokenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JapaneseSpokenExceptionEnum fromValue(String value) {
      for (JapaneseSpokenExceptionEnum b : JapaneseSpokenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JapaneseSpokenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JapaneseSpokenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JapaneseSpokenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JapaneseSpokenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JapaneseSpokenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JAPANESE_SPOKEN_EXCEPTION = "japaneseSpokenException";
  @SerializedName(SERIALIZED_NAME_JAPANESE_SPOKEN_EXCEPTION)
  private JapaneseSpokenExceptionEnum japaneseSpokenException;

  public static final String SERIALIZED_NAME_KOREAN_SPOKEN = "koreanSpoken";
  @SerializedName(SERIALIZED_NAME_KOREAN_SPOKEN)
  private Boolean koreanSpoken;

  /**
   * Korean exception.
   */
  @JsonAdapter(KoreanSpokenExceptionEnum.Adapter.class)
  public enum KoreanSpokenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    KoreanSpokenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KoreanSpokenExceptionEnum fromValue(String value) {
      for (KoreanSpokenExceptionEnum b : KoreanSpokenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KoreanSpokenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KoreanSpokenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KoreanSpokenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KoreanSpokenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KoreanSpokenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KOREAN_SPOKEN_EXCEPTION = "koreanSpokenException";
  @SerializedName(SERIALIZED_NAME_KOREAN_SPOKEN_EXCEPTION)
  private KoreanSpokenExceptionEnum koreanSpokenException;

  public static final String SERIALIZED_NAME_MANDARIN_SPOKEN = "mandarinSpoken";
  @SerializedName(SERIALIZED_NAME_MANDARIN_SPOKEN)
  private Boolean mandarinSpoken;

  /**
   * Mandarin exception.
   */
  @JsonAdapter(MandarinSpokenExceptionEnum.Adapter.class)
  public enum MandarinSpokenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    MandarinSpokenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MandarinSpokenExceptionEnum fromValue(String value) {
      for (MandarinSpokenExceptionEnum b : MandarinSpokenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MandarinSpokenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MandarinSpokenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MandarinSpokenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MandarinSpokenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MandarinSpokenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MANDARIN_SPOKEN_EXCEPTION = "mandarinSpokenException";
  @SerializedName(SERIALIZED_NAME_MANDARIN_SPOKEN_EXCEPTION)
  private MandarinSpokenExceptionEnum mandarinSpokenException;

  public static final String SERIALIZED_NAME_PORTUGUESE_SPOKEN = "portugueseSpoken";
  @SerializedName(SERIALIZED_NAME_PORTUGUESE_SPOKEN)
  private Boolean portugueseSpoken;

  /**
   * Portuguese exception.
   */
  @JsonAdapter(PortugueseSpokenExceptionEnum.Adapter.class)
  public enum PortugueseSpokenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    PortugueseSpokenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PortugueseSpokenExceptionEnum fromValue(String value) {
      for (PortugueseSpokenExceptionEnum b : PortugueseSpokenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PortugueseSpokenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PortugueseSpokenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PortugueseSpokenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PortugueseSpokenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PortugueseSpokenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PORTUGUESE_SPOKEN_EXCEPTION = "portugueseSpokenException";
  @SerializedName(SERIALIZED_NAME_PORTUGUESE_SPOKEN_EXCEPTION)
  private PortugueseSpokenExceptionEnum portugueseSpokenException;

  public static final String SERIALIZED_NAME_RUSSIAN_SPOKEN = "russianSpoken";
  @SerializedName(SERIALIZED_NAME_RUSSIAN_SPOKEN)
  private Boolean russianSpoken;

  /**
   * Russian exception.
   */
  @JsonAdapter(RussianSpokenExceptionEnum.Adapter.class)
  public enum RussianSpokenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    RussianSpokenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RussianSpokenExceptionEnum fromValue(String value) {
      for (RussianSpokenExceptionEnum b : RussianSpokenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RussianSpokenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RussianSpokenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RussianSpokenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RussianSpokenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RussianSpokenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RUSSIAN_SPOKEN_EXCEPTION = "russianSpokenException";
  @SerializedName(SERIALIZED_NAME_RUSSIAN_SPOKEN_EXCEPTION)
  private RussianSpokenExceptionEnum russianSpokenException;

  public static final String SERIALIZED_NAME_SPANISH_SPOKEN = "spanishSpoken";
  @SerializedName(SERIALIZED_NAME_SPANISH_SPOKEN)
  private Boolean spanishSpoken;

  /**
   * Spanish exception.
   */
  @JsonAdapter(SpanishSpokenExceptionEnum.Adapter.class)
  public enum SpanishSpokenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    SpanishSpokenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SpanishSpokenExceptionEnum fromValue(String value) {
      for (SpanishSpokenExceptionEnum b : SpanishSpokenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SpanishSpokenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SpanishSpokenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SpanishSpokenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SpanishSpokenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SpanishSpokenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPANISH_SPOKEN_EXCEPTION = "spanishSpokenException";
  @SerializedName(SERIALIZED_NAME_SPANISH_SPOKEN_EXCEPTION)
  private SpanishSpokenExceptionEnum spanishSpokenException;

  public static final String SERIALIZED_NAME_VIETNAMESE_SPOKEN = "vietnameseSpoken";
  @SerializedName(SERIALIZED_NAME_VIETNAMESE_SPOKEN)
  private Boolean vietnameseSpoken;

  /**
   * Vietnamese exception.
   */
  @JsonAdapter(VietnameseSpokenExceptionEnum.Adapter.class)
  public enum VietnameseSpokenExceptionEnum {
    EXCEPTION_UNSPECIFIED("EXCEPTION_UNSPECIFIED"),
    
    UNDER_CONSTRUCTION("UNDER_CONSTRUCTION"),
    
    DEPENDENT_ON_SEASON("DEPENDENT_ON_SEASON"),
    
    DEPENDENT_ON_DAY_OF_WEEK("DEPENDENT_ON_DAY_OF_WEEK");

    private String value;

    VietnameseSpokenExceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VietnameseSpokenExceptionEnum fromValue(String value) {
      for (VietnameseSpokenExceptionEnum b : VietnameseSpokenExceptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VietnameseSpokenExceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VietnameseSpokenExceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VietnameseSpokenExceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VietnameseSpokenExceptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VietnameseSpokenExceptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIETNAMESE_SPOKEN_EXCEPTION = "vietnameseSpokenException";
  @SerializedName(SERIALIZED_NAME_VIETNAMESE_SPOKEN_EXCEPTION)
  private VietnameseSpokenExceptionEnum vietnameseSpokenException;

  public LanguagesSpoken() {
  }

  public LanguagesSpoken arabicSpoken(Boolean arabicSpoken) {
    this.arabicSpoken = arabicSpoken;
    return this;
  }

  /**
   * Arabic. At least one staff member speaks Arabic.
   * @return arabicSpoken
   */
  @javax.annotation.Nullable
  public Boolean getArabicSpoken() {
    return arabicSpoken;
  }

  public void setArabicSpoken(Boolean arabicSpoken) {
    this.arabicSpoken = arabicSpoken;
  }


  public LanguagesSpoken arabicSpokenException(ArabicSpokenExceptionEnum arabicSpokenException) {
    this.arabicSpokenException = arabicSpokenException;
    return this;
  }

  /**
   * Arabic exception.
   * @return arabicSpokenException
   */
  @javax.annotation.Nullable
  public ArabicSpokenExceptionEnum getArabicSpokenException() {
    return arabicSpokenException;
  }

  public void setArabicSpokenException(ArabicSpokenExceptionEnum arabicSpokenException) {
    this.arabicSpokenException = arabicSpokenException;
  }


  public LanguagesSpoken cantoneseSpoken(Boolean cantoneseSpoken) {
    this.cantoneseSpoken = cantoneseSpoken;
    return this;
  }

  /**
   * Cantonese. At least one staff member speaks Cantonese.
   * @return cantoneseSpoken
   */
  @javax.annotation.Nullable
  public Boolean getCantoneseSpoken() {
    return cantoneseSpoken;
  }

  public void setCantoneseSpoken(Boolean cantoneseSpoken) {
    this.cantoneseSpoken = cantoneseSpoken;
  }


  public LanguagesSpoken cantoneseSpokenException(CantoneseSpokenExceptionEnum cantoneseSpokenException) {
    this.cantoneseSpokenException = cantoneseSpokenException;
    return this;
  }

  /**
   * Cantonese exception.
   * @return cantoneseSpokenException
   */
  @javax.annotation.Nullable
  public CantoneseSpokenExceptionEnum getCantoneseSpokenException() {
    return cantoneseSpokenException;
  }

  public void setCantoneseSpokenException(CantoneseSpokenExceptionEnum cantoneseSpokenException) {
    this.cantoneseSpokenException = cantoneseSpokenException;
  }


  public LanguagesSpoken dutchSpoken(Boolean dutchSpoken) {
    this.dutchSpoken = dutchSpoken;
    return this;
  }

  /**
   * Dutch. At least one staff member speaks Dutch.
   * @return dutchSpoken
   */
  @javax.annotation.Nullable
  public Boolean getDutchSpoken() {
    return dutchSpoken;
  }

  public void setDutchSpoken(Boolean dutchSpoken) {
    this.dutchSpoken = dutchSpoken;
  }


  public LanguagesSpoken dutchSpokenException(DutchSpokenExceptionEnum dutchSpokenException) {
    this.dutchSpokenException = dutchSpokenException;
    return this;
  }

  /**
   * Dutch exception.
   * @return dutchSpokenException
   */
  @javax.annotation.Nullable
  public DutchSpokenExceptionEnum getDutchSpokenException() {
    return dutchSpokenException;
  }

  public void setDutchSpokenException(DutchSpokenExceptionEnum dutchSpokenException) {
    this.dutchSpokenException = dutchSpokenException;
  }


  public LanguagesSpoken englishSpoken(Boolean englishSpoken) {
    this.englishSpoken = englishSpoken;
    return this;
  }

  /**
   * English. At least one staff member speaks English.
   * @return englishSpoken
   */
  @javax.annotation.Nullable
  public Boolean getEnglishSpoken() {
    return englishSpoken;
  }

  public void setEnglishSpoken(Boolean englishSpoken) {
    this.englishSpoken = englishSpoken;
  }


  public LanguagesSpoken englishSpokenException(EnglishSpokenExceptionEnum englishSpokenException) {
    this.englishSpokenException = englishSpokenException;
    return this;
  }

  /**
   * English exception.
   * @return englishSpokenException
   */
  @javax.annotation.Nullable
  public EnglishSpokenExceptionEnum getEnglishSpokenException() {
    return englishSpokenException;
  }

  public void setEnglishSpokenException(EnglishSpokenExceptionEnum englishSpokenException) {
    this.englishSpokenException = englishSpokenException;
  }


  public LanguagesSpoken filipinoSpoken(Boolean filipinoSpoken) {
    this.filipinoSpoken = filipinoSpoken;
    return this;
  }

  /**
   * Filipino. At least one staff member speaks Filipino.
   * @return filipinoSpoken
   */
  @javax.annotation.Nullable
  public Boolean getFilipinoSpoken() {
    return filipinoSpoken;
  }

  public void setFilipinoSpoken(Boolean filipinoSpoken) {
    this.filipinoSpoken = filipinoSpoken;
  }


  public LanguagesSpoken filipinoSpokenException(FilipinoSpokenExceptionEnum filipinoSpokenException) {
    this.filipinoSpokenException = filipinoSpokenException;
    return this;
  }

  /**
   * Filipino exception.
   * @return filipinoSpokenException
   */
  @javax.annotation.Nullable
  public FilipinoSpokenExceptionEnum getFilipinoSpokenException() {
    return filipinoSpokenException;
  }

  public void setFilipinoSpokenException(FilipinoSpokenExceptionEnum filipinoSpokenException) {
    this.filipinoSpokenException = filipinoSpokenException;
  }


  public LanguagesSpoken frenchSpoken(Boolean frenchSpoken) {
    this.frenchSpoken = frenchSpoken;
    return this;
  }

  /**
   * French. At least one staff member speaks French.
   * @return frenchSpoken
   */
  @javax.annotation.Nullable
  public Boolean getFrenchSpoken() {
    return frenchSpoken;
  }

  public void setFrenchSpoken(Boolean frenchSpoken) {
    this.frenchSpoken = frenchSpoken;
  }


  public LanguagesSpoken frenchSpokenException(FrenchSpokenExceptionEnum frenchSpokenException) {
    this.frenchSpokenException = frenchSpokenException;
    return this;
  }

  /**
   * French exception.
   * @return frenchSpokenException
   */
  @javax.annotation.Nullable
  public FrenchSpokenExceptionEnum getFrenchSpokenException() {
    return frenchSpokenException;
  }

  public void setFrenchSpokenException(FrenchSpokenExceptionEnum frenchSpokenException) {
    this.frenchSpokenException = frenchSpokenException;
  }


  public LanguagesSpoken germanSpoken(Boolean germanSpoken) {
    this.germanSpoken = germanSpoken;
    return this;
  }

  /**
   * German. At least one staff member speaks German.
   * @return germanSpoken
   */
  @javax.annotation.Nullable
  public Boolean getGermanSpoken() {
    return germanSpoken;
  }

  public void setGermanSpoken(Boolean germanSpoken) {
    this.germanSpoken = germanSpoken;
  }


  public LanguagesSpoken germanSpokenException(GermanSpokenExceptionEnum germanSpokenException) {
    this.germanSpokenException = germanSpokenException;
    return this;
  }

  /**
   * German exception.
   * @return germanSpokenException
   */
  @javax.annotation.Nullable
  public GermanSpokenExceptionEnum getGermanSpokenException() {
    return germanSpokenException;
  }

  public void setGermanSpokenException(GermanSpokenExceptionEnum germanSpokenException) {
    this.germanSpokenException = germanSpokenException;
  }


  public LanguagesSpoken hindiSpoken(Boolean hindiSpoken) {
    this.hindiSpoken = hindiSpoken;
    return this;
  }

  /**
   * Hindi. At least one staff member speaks Hindi.
   * @return hindiSpoken
   */
  @javax.annotation.Nullable
  public Boolean getHindiSpoken() {
    return hindiSpoken;
  }

  public void setHindiSpoken(Boolean hindiSpoken) {
    this.hindiSpoken = hindiSpoken;
  }


  public LanguagesSpoken hindiSpokenException(HindiSpokenExceptionEnum hindiSpokenException) {
    this.hindiSpokenException = hindiSpokenException;
    return this;
  }

  /**
   * Hindi exception.
   * @return hindiSpokenException
   */
  @javax.annotation.Nullable
  public HindiSpokenExceptionEnum getHindiSpokenException() {
    return hindiSpokenException;
  }

  public void setHindiSpokenException(HindiSpokenExceptionEnum hindiSpokenException) {
    this.hindiSpokenException = hindiSpokenException;
  }


  public LanguagesSpoken indonesianSpoken(Boolean indonesianSpoken) {
    this.indonesianSpoken = indonesianSpoken;
    return this;
  }

  /**
   * Indonesian. At least one staff member speaks Indonesian.
   * @return indonesianSpoken
   */
  @javax.annotation.Nullable
  public Boolean getIndonesianSpoken() {
    return indonesianSpoken;
  }

  public void setIndonesianSpoken(Boolean indonesianSpoken) {
    this.indonesianSpoken = indonesianSpoken;
  }


  public LanguagesSpoken indonesianSpokenException(IndonesianSpokenExceptionEnum indonesianSpokenException) {
    this.indonesianSpokenException = indonesianSpokenException;
    return this;
  }

  /**
   * Indonesian exception.
   * @return indonesianSpokenException
   */
  @javax.annotation.Nullable
  public IndonesianSpokenExceptionEnum getIndonesianSpokenException() {
    return indonesianSpokenException;
  }

  public void setIndonesianSpokenException(IndonesianSpokenExceptionEnum indonesianSpokenException) {
    this.indonesianSpokenException = indonesianSpokenException;
  }


  public LanguagesSpoken italianSpoken(Boolean italianSpoken) {
    this.italianSpoken = italianSpoken;
    return this;
  }

  /**
   * Italian. At least one staff member speaks Italian.
   * @return italianSpoken
   */
  @javax.annotation.Nullable
  public Boolean getItalianSpoken() {
    return italianSpoken;
  }

  public void setItalianSpoken(Boolean italianSpoken) {
    this.italianSpoken = italianSpoken;
  }


  public LanguagesSpoken italianSpokenException(ItalianSpokenExceptionEnum italianSpokenException) {
    this.italianSpokenException = italianSpokenException;
    return this;
  }

  /**
   * Italian exception.
   * @return italianSpokenException
   */
  @javax.annotation.Nullable
  public ItalianSpokenExceptionEnum getItalianSpokenException() {
    return italianSpokenException;
  }

  public void setItalianSpokenException(ItalianSpokenExceptionEnum italianSpokenException) {
    this.italianSpokenException = italianSpokenException;
  }


  public LanguagesSpoken japaneseSpoken(Boolean japaneseSpoken) {
    this.japaneseSpoken = japaneseSpoken;
    return this;
  }

  /**
   * Japanese. At least one staff member speaks Japanese.
   * @return japaneseSpoken
   */
  @javax.annotation.Nullable
  public Boolean getJapaneseSpoken() {
    return japaneseSpoken;
  }

  public void setJapaneseSpoken(Boolean japaneseSpoken) {
    this.japaneseSpoken = japaneseSpoken;
  }


  public LanguagesSpoken japaneseSpokenException(JapaneseSpokenExceptionEnum japaneseSpokenException) {
    this.japaneseSpokenException = japaneseSpokenException;
    return this;
  }

  /**
   * Japanese exception.
   * @return japaneseSpokenException
   */
  @javax.annotation.Nullable
  public JapaneseSpokenExceptionEnum getJapaneseSpokenException() {
    return japaneseSpokenException;
  }

  public void setJapaneseSpokenException(JapaneseSpokenExceptionEnum japaneseSpokenException) {
    this.japaneseSpokenException = japaneseSpokenException;
  }


  public LanguagesSpoken koreanSpoken(Boolean koreanSpoken) {
    this.koreanSpoken = koreanSpoken;
    return this;
  }

  /**
   * Korean. At least one staff member speaks Korean.
   * @return koreanSpoken
   */
  @javax.annotation.Nullable
  public Boolean getKoreanSpoken() {
    return koreanSpoken;
  }

  public void setKoreanSpoken(Boolean koreanSpoken) {
    this.koreanSpoken = koreanSpoken;
  }


  public LanguagesSpoken koreanSpokenException(KoreanSpokenExceptionEnum koreanSpokenException) {
    this.koreanSpokenException = koreanSpokenException;
    return this;
  }

  /**
   * Korean exception.
   * @return koreanSpokenException
   */
  @javax.annotation.Nullable
  public KoreanSpokenExceptionEnum getKoreanSpokenException() {
    return koreanSpokenException;
  }

  public void setKoreanSpokenException(KoreanSpokenExceptionEnum koreanSpokenException) {
    this.koreanSpokenException = koreanSpokenException;
  }


  public LanguagesSpoken mandarinSpoken(Boolean mandarinSpoken) {
    this.mandarinSpoken = mandarinSpoken;
    return this;
  }

  /**
   * Mandarin. At least one staff member speaks Mandarin.
   * @return mandarinSpoken
   */
  @javax.annotation.Nullable
  public Boolean getMandarinSpoken() {
    return mandarinSpoken;
  }

  public void setMandarinSpoken(Boolean mandarinSpoken) {
    this.mandarinSpoken = mandarinSpoken;
  }


  public LanguagesSpoken mandarinSpokenException(MandarinSpokenExceptionEnum mandarinSpokenException) {
    this.mandarinSpokenException = mandarinSpokenException;
    return this;
  }

  /**
   * Mandarin exception.
   * @return mandarinSpokenException
   */
  @javax.annotation.Nullable
  public MandarinSpokenExceptionEnum getMandarinSpokenException() {
    return mandarinSpokenException;
  }

  public void setMandarinSpokenException(MandarinSpokenExceptionEnum mandarinSpokenException) {
    this.mandarinSpokenException = mandarinSpokenException;
  }


  public LanguagesSpoken portugueseSpoken(Boolean portugueseSpoken) {
    this.portugueseSpoken = portugueseSpoken;
    return this;
  }

  /**
   * Portuguese. At least one staff member speaks Portuguese.
   * @return portugueseSpoken
   */
  @javax.annotation.Nullable
  public Boolean getPortugueseSpoken() {
    return portugueseSpoken;
  }

  public void setPortugueseSpoken(Boolean portugueseSpoken) {
    this.portugueseSpoken = portugueseSpoken;
  }


  public LanguagesSpoken portugueseSpokenException(PortugueseSpokenExceptionEnum portugueseSpokenException) {
    this.portugueseSpokenException = portugueseSpokenException;
    return this;
  }

  /**
   * Portuguese exception.
   * @return portugueseSpokenException
   */
  @javax.annotation.Nullable
  public PortugueseSpokenExceptionEnum getPortugueseSpokenException() {
    return portugueseSpokenException;
  }

  public void setPortugueseSpokenException(PortugueseSpokenExceptionEnum portugueseSpokenException) {
    this.portugueseSpokenException = portugueseSpokenException;
  }


  public LanguagesSpoken russianSpoken(Boolean russianSpoken) {
    this.russianSpoken = russianSpoken;
    return this;
  }

  /**
   * Russian. At least one staff member speaks Russian.
   * @return russianSpoken
   */
  @javax.annotation.Nullable
  public Boolean getRussianSpoken() {
    return russianSpoken;
  }

  public void setRussianSpoken(Boolean russianSpoken) {
    this.russianSpoken = russianSpoken;
  }


  public LanguagesSpoken russianSpokenException(RussianSpokenExceptionEnum russianSpokenException) {
    this.russianSpokenException = russianSpokenException;
    return this;
  }

  /**
   * Russian exception.
   * @return russianSpokenException
   */
  @javax.annotation.Nullable
  public RussianSpokenExceptionEnum getRussianSpokenException() {
    return russianSpokenException;
  }

  public void setRussianSpokenException(RussianSpokenExceptionEnum russianSpokenException) {
    this.russianSpokenException = russianSpokenException;
  }


  public LanguagesSpoken spanishSpoken(Boolean spanishSpoken) {
    this.spanishSpoken = spanishSpoken;
    return this;
  }

  /**
   * Spanish. At least one staff member speaks Spanish.
   * @return spanishSpoken
   */
  @javax.annotation.Nullable
  public Boolean getSpanishSpoken() {
    return spanishSpoken;
  }

  public void setSpanishSpoken(Boolean spanishSpoken) {
    this.spanishSpoken = spanishSpoken;
  }


  public LanguagesSpoken spanishSpokenException(SpanishSpokenExceptionEnum spanishSpokenException) {
    this.spanishSpokenException = spanishSpokenException;
    return this;
  }

  /**
   * Spanish exception.
   * @return spanishSpokenException
   */
  @javax.annotation.Nullable
  public SpanishSpokenExceptionEnum getSpanishSpokenException() {
    return spanishSpokenException;
  }

  public void setSpanishSpokenException(SpanishSpokenExceptionEnum spanishSpokenException) {
    this.spanishSpokenException = spanishSpokenException;
  }


  public LanguagesSpoken vietnameseSpoken(Boolean vietnameseSpoken) {
    this.vietnameseSpoken = vietnameseSpoken;
    return this;
  }

  /**
   * Vietnamese. At least one staff member speaks Vietnamese.
   * @return vietnameseSpoken
   */
  @javax.annotation.Nullable
  public Boolean getVietnameseSpoken() {
    return vietnameseSpoken;
  }

  public void setVietnameseSpoken(Boolean vietnameseSpoken) {
    this.vietnameseSpoken = vietnameseSpoken;
  }


  public LanguagesSpoken vietnameseSpokenException(VietnameseSpokenExceptionEnum vietnameseSpokenException) {
    this.vietnameseSpokenException = vietnameseSpokenException;
    return this;
  }

  /**
   * Vietnamese exception.
   * @return vietnameseSpokenException
   */
  @javax.annotation.Nullable
  public VietnameseSpokenExceptionEnum getVietnameseSpokenException() {
    return vietnameseSpokenException;
  }

  public void setVietnameseSpokenException(VietnameseSpokenExceptionEnum vietnameseSpokenException) {
    this.vietnameseSpokenException = vietnameseSpokenException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LanguagesSpoken languagesSpoken = (LanguagesSpoken) o;
    return Objects.equals(this.arabicSpoken, languagesSpoken.arabicSpoken) &&
        Objects.equals(this.arabicSpokenException, languagesSpoken.arabicSpokenException) &&
        Objects.equals(this.cantoneseSpoken, languagesSpoken.cantoneseSpoken) &&
        Objects.equals(this.cantoneseSpokenException, languagesSpoken.cantoneseSpokenException) &&
        Objects.equals(this.dutchSpoken, languagesSpoken.dutchSpoken) &&
        Objects.equals(this.dutchSpokenException, languagesSpoken.dutchSpokenException) &&
        Objects.equals(this.englishSpoken, languagesSpoken.englishSpoken) &&
        Objects.equals(this.englishSpokenException, languagesSpoken.englishSpokenException) &&
        Objects.equals(this.filipinoSpoken, languagesSpoken.filipinoSpoken) &&
        Objects.equals(this.filipinoSpokenException, languagesSpoken.filipinoSpokenException) &&
        Objects.equals(this.frenchSpoken, languagesSpoken.frenchSpoken) &&
        Objects.equals(this.frenchSpokenException, languagesSpoken.frenchSpokenException) &&
        Objects.equals(this.germanSpoken, languagesSpoken.germanSpoken) &&
        Objects.equals(this.germanSpokenException, languagesSpoken.germanSpokenException) &&
        Objects.equals(this.hindiSpoken, languagesSpoken.hindiSpoken) &&
        Objects.equals(this.hindiSpokenException, languagesSpoken.hindiSpokenException) &&
        Objects.equals(this.indonesianSpoken, languagesSpoken.indonesianSpoken) &&
        Objects.equals(this.indonesianSpokenException, languagesSpoken.indonesianSpokenException) &&
        Objects.equals(this.italianSpoken, languagesSpoken.italianSpoken) &&
        Objects.equals(this.italianSpokenException, languagesSpoken.italianSpokenException) &&
        Objects.equals(this.japaneseSpoken, languagesSpoken.japaneseSpoken) &&
        Objects.equals(this.japaneseSpokenException, languagesSpoken.japaneseSpokenException) &&
        Objects.equals(this.koreanSpoken, languagesSpoken.koreanSpoken) &&
        Objects.equals(this.koreanSpokenException, languagesSpoken.koreanSpokenException) &&
        Objects.equals(this.mandarinSpoken, languagesSpoken.mandarinSpoken) &&
        Objects.equals(this.mandarinSpokenException, languagesSpoken.mandarinSpokenException) &&
        Objects.equals(this.portugueseSpoken, languagesSpoken.portugueseSpoken) &&
        Objects.equals(this.portugueseSpokenException, languagesSpoken.portugueseSpokenException) &&
        Objects.equals(this.russianSpoken, languagesSpoken.russianSpoken) &&
        Objects.equals(this.russianSpokenException, languagesSpoken.russianSpokenException) &&
        Objects.equals(this.spanishSpoken, languagesSpoken.spanishSpoken) &&
        Objects.equals(this.spanishSpokenException, languagesSpoken.spanishSpokenException) &&
        Objects.equals(this.vietnameseSpoken, languagesSpoken.vietnameseSpoken) &&
        Objects.equals(this.vietnameseSpokenException, languagesSpoken.vietnameseSpokenException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arabicSpoken, arabicSpokenException, cantoneseSpoken, cantoneseSpokenException, dutchSpoken, dutchSpokenException, englishSpoken, englishSpokenException, filipinoSpoken, filipinoSpokenException, frenchSpoken, frenchSpokenException, germanSpoken, germanSpokenException, hindiSpoken, hindiSpokenException, indonesianSpoken, indonesianSpokenException, italianSpoken, italianSpokenException, japaneseSpoken, japaneseSpokenException, koreanSpoken, koreanSpokenException, mandarinSpoken, mandarinSpokenException, portugueseSpoken, portugueseSpokenException, russianSpoken, russianSpokenException, spanishSpoken, spanishSpokenException, vietnameseSpoken, vietnameseSpokenException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LanguagesSpoken {\n");
    sb.append("    arabicSpoken: ").append(toIndentedString(arabicSpoken)).append("\n");
    sb.append("    arabicSpokenException: ").append(toIndentedString(arabicSpokenException)).append("\n");
    sb.append("    cantoneseSpoken: ").append(toIndentedString(cantoneseSpoken)).append("\n");
    sb.append("    cantoneseSpokenException: ").append(toIndentedString(cantoneseSpokenException)).append("\n");
    sb.append("    dutchSpoken: ").append(toIndentedString(dutchSpoken)).append("\n");
    sb.append("    dutchSpokenException: ").append(toIndentedString(dutchSpokenException)).append("\n");
    sb.append("    englishSpoken: ").append(toIndentedString(englishSpoken)).append("\n");
    sb.append("    englishSpokenException: ").append(toIndentedString(englishSpokenException)).append("\n");
    sb.append("    filipinoSpoken: ").append(toIndentedString(filipinoSpoken)).append("\n");
    sb.append("    filipinoSpokenException: ").append(toIndentedString(filipinoSpokenException)).append("\n");
    sb.append("    frenchSpoken: ").append(toIndentedString(frenchSpoken)).append("\n");
    sb.append("    frenchSpokenException: ").append(toIndentedString(frenchSpokenException)).append("\n");
    sb.append("    germanSpoken: ").append(toIndentedString(germanSpoken)).append("\n");
    sb.append("    germanSpokenException: ").append(toIndentedString(germanSpokenException)).append("\n");
    sb.append("    hindiSpoken: ").append(toIndentedString(hindiSpoken)).append("\n");
    sb.append("    hindiSpokenException: ").append(toIndentedString(hindiSpokenException)).append("\n");
    sb.append("    indonesianSpoken: ").append(toIndentedString(indonesianSpoken)).append("\n");
    sb.append("    indonesianSpokenException: ").append(toIndentedString(indonesianSpokenException)).append("\n");
    sb.append("    italianSpoken: ").append(toIndentedString(italianSpoken)).append("\n");
    sb.append("    italianSpokenException: ").append(toIndentedString(italianSpokenException)).append("\n");
    sb.append("    japaneseSpoken: ").append(toIndentedString(japaneseSpoken)).append("\n");
    sb.append("    japaneseSpokenException: ").append(toIndentedString(japaneseSpokenException)).append("\n");
    sb.append("    koreanSpoken: ").append(toIndentedString(koreanSpoken)).append("\n");
    sb.append("    koreanSpokenException: ").append(toIndentedString(koreanSpokenException)).append("\n");
    sb.append("    mandarinSpoken: ").append(toIndentedString(mandarinSpoken)).append("\n");
    sb.append("    mandarinSpokenException: ").append(toIndentedString(mandarinSpokenException)).append("\n");
    sb.append("    portugueseSpoken: ").append(toIndentedString(portugueseSpoken)).append("\n");
    sb.append("    portugueseSpokenException: ").append(toIndentedString(portugueseSpokenException)).append("\n");
    sb.append("    russianSpoken: ").append(toIndentedString(russianSpoken)).append("\n");
    sb.append("    russianSpokenException: ").append(toIndentedString(russianSpokenException)).append("\n");
    sb.append("    spanishSpoken: ").append(toIndentedString(spanishSpoken)).append("\n");
    sb.append("    spanishSpokenException: ").append(toIndentedString(spanishSpokenException)).append("\n");
    sb.append("    vietnameseSpoken: ").append(toIndentedString(vietnameseSpoken)).append("\n");
    sb.append("    vietnameseSpokenException: ").append(toIndentedString(vietnameseSpokenException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arabicSpoken");
    openapiFields.add("arabicSpokenException");
    openapiFields.add("cantoneseSpoken");
    openapiFields.add("cantoneseSpokenException");
    openapiFields.add("dutchSpoken");
    openapiFields.add("dutchSpokenException");
    openapiFields.add("englishSpoken");
    openapiFields.add("englishSpokenException");
    openapiFields.add("filipinoSpoken");
    openapiFields.add("filipinoSpokenException");
    openapiFields.add("frenchSpoken");
    openapiFields.add("frenchSpokenException");
    openapiFields.add("germanSpoken");
    openapiFields.add("germanSpokenException");
    openapiFields.add("hindiSpoken");
    openapiFields.add("hindiSpokenException");
    openapiFields.add("indonesianSpoken");
    openapiFields.add("indonesianSpokenException");
    openapiFields.add("italianSpoken");
    openapiFields.add("italianSpokenException");
    openapiFields.add("japaneseSpoken");
    openapiFields.add("japaneseSpokenException");
    openapiFields.add("koreanSpoken");
    openapiFields.add("koreanSpokenException");
    openapiFields.add("mandarinSpoken");
    openapiFields.add("mandarinSpokenException");
    openapiFields.add("portugueseSpoken");
    openapiFields.add("portugueseSpokenException");
    openapiFields.add("russianSpoken");
    openapiFields.add("russianSpokenException");
    openapiFields.add("spanishSpoken");
    openapiFields.add("spanishSpokenException");
    openapiFields.add("vietnameseSpoken");
    openapiFields.add("vietnameseSpokenException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LanguagesSpoken
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LanguagesSpoken.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LanguagesSpoken is not found in the empty JSON string", LanguagesSpoken.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LanguagesSpoken.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LanguagesSpoken` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("arabicSpokenException") != null && !jsonObj.get("arabicSpokenException").isJsonNull()) && !jsonObj.get("arabicSpokenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arabicSpokenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arabicSpokenException").toString()));
      }
      // validate the optional field `arabicSpokenException`
      if (jsonObj.get("arabicSpokenException") != null && !jsonObj.get("arabicSpokenException").isJsonNull()) {
        ArabicSpokenExceptionEnum.validateJsonElement(jsonObj.get("arabicSpokenException"));
      }
      if ((jsonObj.get("cantoneseSpokenException") != null && !jsonObj.get("cantoneseSpokenException").isJsonNull()) && !jsonObj.get("cantoneseSpokenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cantoneseSpokenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cantoneseSpokenException").toString()));
      }
      // validate the optional field `cantoneseSpokenException`
      if (jsonObj.get("cantoneseSpokenException") != null && !jsonObj.get("cantoneseSpokenException").isJsonNull()) {
        CantoneseSpokenExceptionEnum.validateJsonElement(jsonObj.get("cantoneseSpokenException"));
      }
      if ((jsonObj.get("dutchSpokenException") != null && !jsonObj.get("dutchSpokenException").isJsonNull()) && !jsonObj.get("dutchSpokenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dutchSpokenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dutchSpokenException").toString()));
      }
      // validate the optional field `dutchSpokenException`
      if (jsonObj.get("dutchSpokenException") != null && !jsonObj.get("dutchSpokenException").isJsonNull()) {
        DutchSpokenExceptionEnum.validateJsonElement(jsonObj.get("dutchSpokenException"));
      }
      if ((jsonObj.get("englishSpokenException") != null && !jsonObj.get("englishSpokenException").isJsonNull()) && !jsonObj.get("englishSpokenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `englishSpokenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("englishSpokenException").toString()));
      }
      // validate the optional field `englishSpokenException`
      if (jsonObj.get("englishSpokenException") != null && !jsonObj.get("englishSpokenException").isJsonNull()) {
        EnglishSpokenExceptionEnum.validateJsonElement(jsonObj.get("englishSpokenException"));
      }
      if ((jsonObj.get("filipinoSpokenException") != null && !jsonObj.get("filipinoSpokenException").isJsonNull()) && !jsonObj.get("filipinoSpokenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filipinoSpokenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filipinoSpokenException").toString()));
      }
      // validate the optional field `filipinoSpokenException`
      if (jsonObj.get("filipinoSpokenException") != null && !jsonObj.get("filipinoSpokenException").isJsonNull()) {
        FilipinoSpokenExceptionEnum.validateJsonElement(jsonObj.get("filipinoSpokenException"));
      }
      if ((jsonObj.get("frenchSpokenException") != null && !jsonObj.get("frenchSpokenException").isJsonNull()) && !jsonObj.get("frenchSpokenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frenchSpokenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frenchSpokenException").toString()));
      }
      // validate the optional field `frenchSpokenException`
      if (jsonObj.get("frenchSpokenException") != null && !jsonObj.get("frenchSpokenException").isJsonNull()) {
        FrenchSpokenExceptionEnum.validateJsonElement(jsonObj.get("frenchSpokenException"));
      }
      if ((jsonObj.get("germanSpokenException") != null && !jsonObj.get("germanSpokenException").isJsonNull()) && !jsonObj.get("germanSpokenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `germanSpokenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("germanSpokenException").toString()));
      }
      // validate the optional field `germanSpokenException`
      if (jsonObj.get("germanSpokenException") != null && !jsonObj.get("germanSpokenException").isJsonNull()) {
        GermanSpokenExceptionEnum.validateJsonElement(jsonObj.get("germanSpokenException"));
      }
      if ((jsonObj.get("hindiSpokenException") != null && !jsonObj.get("hindiSpokenException").isJsonNull()) && !jsonObj.get("hindiSpokenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hindiSpokenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hindiSpokenException").toString()));
      }
      // validate the optional field `hindiSpokenException`
      if (jsonObj.get("hindiSpokenException") != null && !jsonObj.get("hindiSpokenException").isJsonNull()) {
        HindiSpokenExceptionEnum.validateJsonElement(jsonObj.get("hindiSpokenException"));
      }
      if ((jsonObj.get("indonesianSpokenException") != null && !jsonObj.get("indonesianSpokenException").isJsonNull()) && !jsonObj.get("indonesianSpokenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indonesianSpokenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indonesianSpokenException").toString()));
      }
      // validate the optional field `indonesianSpokenException`
      if (jsonObj.get("indonesianSpokenException") != null && !jsonObj.get("indonesianSpokenException").isJsonNull()) {
        IndonesianSpokenExceptionEnum.validateJsonElement(jsonObj.get("indonesianSpokenException"));
      }
      if ((jsonObj.get("italianSpokenException") != null && !jsonObj.get("italianSpokenException").isJsonNull()) && !jsonObj.get("italianSpokenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `italianSpokenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("italianSpokenException").toString()));
      }
      // validate the optional field `italianSpokenException`
      if (jsonObj.get("italianSpokenException") != null && !jsonObj.get("italianSpokenException").isJsonNull()) {
        ItalianSpokenExceptionEnum.validateJsonElement(jsonObj.get("italianSpokenException"));
      }
      if ((jsonObj.get("japaneseSpokenException") != null && !jsonObj.get("japaneseSpokenException").isJsonNull()) && !jsonObj.get("japaneseSpokenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `japaneseSpokenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("japaneseSpokenException").toString()));
      }
      // validate the optional field `japaneseSpokenException`
      if (jsonObj.get("japaneseSpokenException") != null && !jsonObj.get("japaneseSpokenException").isJsonNull()) {
        JapaneseSpokenExceptionEnum.validateJsonElement(jsonObj.get("japaneseSpokenException"));
      }
      if ((jsonObj.get("koreanSpokenException") != null && !jsonObj.get("koreanSpokenException").isJsonNull()) && !jsonObj.get("koreanSpokenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `koreanSpokenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("koreanSpokenException").toString()));
      }
      // validate the optional field `koreanSpokenException`
      if (jsonObj.get("koreanSpokenException") != null && !jsonObj.get("koreanSpokenException").isJsonNull()) {
        KoreanSpokenExceptionEnum.validateJsonElement(jsonObj.get("koreanSpokenException"));
      }
      if ((jsonObj.get("mandarinSpokenException") != null && !jsonObj.get("mandarinSpokenException").isJsonNull()) && !jsonObj.get("mandarinSpokenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mandarinSpokenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mandarinSpokenException").toString()));
      }
      // validate the optional field `mandarinSpokenException`
      if (jsonObj.get("mandarinSpokenException") != null && !jsonObj.get("mandarinSpokenException").isJsonNull()) {
        MandarinSpokenExceptionEnum.validateJsonElement(jsonObj.get("mandarinSpokenException"));
      }
      if ((jsonObj.get("portugueseSpokenException") != null && !jsonObj.get("portugueseSpokenException").isJsonNull()) && !jsonObj.get("portugueseSpokenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portugueseSpokenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portugueseSpokenException").toString()));
      }
      // validate the optional field `portugueseSpokenException`
      if (jsonObj.get("portugueseSpokenException") != null && !jsonObj.get("portugueseSpokenException").isJsonNull()) {
        PortugueseSpokenExceptionEnum.validateJsonElement(jsonObj.get("portugueseSpokenException"));
      }
      if ((jsonObj.get("russianSpokenException") != null && !jsonObj.get("russianSpokenException").isJsonNull()) && !jsonObj.get("russianSpokenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `russianSpokenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("russianSpokenException").toString()));
      }
      // validate the optional field `russianSpokenException`
      if (jsonObj.get("russianSpokenException") != null && !jsonObj.get("russianSpokenException").isJsonNull()) {
        RussianSpokenExceptionEnum.validateJsonElement(jsonObj.get("russianSpokenException"));
      }
      if ((jsonObj.get("spanishSpokenException") != null && !jsonObj.get("spanishSpokenException").isJsonNull()) && !jsonObj.get("spanishSpokenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spanishSpokenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spanishSpokenException").toString()));
      }
      // validate the optional field `spanishSpokenException`
      if (jsonObj.get("spanishSpokenException") != null && !jsonObj.get("spanishSpokenException").isJsonNull()) {
        SpanishSpokenExceptionEnum.validateJsonElement(jsonObj.get("spanishSpokenException"));
      }
      if ((jsonObj.get("vietnameseSpokenException") != null && !jsonObj.get("vietnameseSpokenException").isJsonNull()) && !jsonObj.get("vietnameseSpokenException").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vietnameseSpokenException` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vietnameseSpokenException").toString()));
      }
      // validate the optional field `vietnameseSpokenException`
      if (jsonObj.get("vietnameseSpokenException") != null && !jsonObj.get("vietnameseSpokenException").isJsonNull()) {
        VietnameseSpokenExceptionEnum.validateJsonElement(jsonObj.get("vietnameseSpokenException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LanguagesSpoken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LanguagesSpoken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LanguagesSpoken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LanguagesSpoken.class));

       return (TypeAdapter<T>) new TypeAdapter<LanguagesSpoken>() {
           @Override
           public void write(JsonWriter out, LanguagesSpoken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LanguagesSpoken read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LanguagesSpoken given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LanguagesSpoken
   * @throws IOException if the JSON string is invalid with respect to LanguagesSpoken
   */
  public static LanguagesSpoken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LanguagesSpoken.class);
  }

  /**
   * Convert an instance of LanguagesSpoken to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

