# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Wellness(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, doctor_on_call: bool=None, doctor_on_call_exception: str=None, elliptical_machine: bool=None, elliptical_machine_exception: str=None, fitness_center: bool=None, fitness_center_exception: str=None, free_fitness_center: bool=None, free_fitness_center_exception: str=None, free_weights: bool=None, free_weights_exception: str=None, massage: bool=None, massage_exception: str=None, salon: bool=None, salon_exception: str=None, sauna: bool=None, sauna_exception: str=None, spa: bool=None, spa_exception: str=None, treadmill: bool=None, treadmill_exception: str=None, weight_machine: bool=None, weight_machine_exception: str=None):
        """Wellness - a model defined in OpenAPI

        :param doctor_on_call: The doctor_on_call of this Wellness.
        :param doctor_on_call_exception: The doctor_on_call_exception of this Wellness.
        :param elliptical_machine: The elliptical_machine of this Wellness.
        :param elliptical_machine_exception: The elliptical_machine_exception of this Wellness.
        :param fitness_center: The fitness_center of this Wellness.
        :param fitness_center_exception: The fitness_center_exception of this Wellness.
        :param free_fitness_center: The free_fitness_center of this Wellness.
        :param free_fitness_center_exception: The free_fitness_center_exception of this Wellness.
        :param free_weights: The free_weights of this Wellness.
        :param free_weights_exception: The free_weights_exception of this Wellness.
        :param massage: The massage of this Wellness.
        :param massage_exception: The massage_exception of this Wellness.
        :param salon: The salon of this Wellness.
        :param salon_exception: The salon_exception of this Wellness.
        :param sauna: The sauna of this Wellness.
        :param sauna_exception: The sauna_exception of this Wellness.
        :param spa: The spa of this Wellness.
        :param spa_exception: The spa_exception of this Wellness.
        :param treadmill: The treadmill of this Wellness.
        :param treadmill_exception: The treadmill_exception of this Wellness.
        :param weight_machine: The weight_machine of this Wellness.
        :param weight_machine_exception: The weight_machine_exception of this Wellness.
        """
        self.openapi_types = {
            'doctor_on_call': bool,
            'doctor_on_call_exception': str,
            'elliptical_machine': bool,
            'elliptical_machine_exception': str,
            'fitness_center': bool,
            'fitness_center_exception': str,
            'free_fitness_center': bool,
            'free_fitness_center_exception': str,
            'free_weights': bool,
            'free_weights_exception': str,
            'massage': bool,
            'massage_exception': str,
            'salon': bool,
            'salon_exception': str,
            'sauna': bool,
            'sauna_exception': str,
            'spa': bool,
            'spa_exception': str,
            'treadmill': bool,
            'treadmill_exception': str,
            'weight_machine': bool,
            'weight_machine_exception': str
        }

        self.attribute_map = {
            'doctor_on_call': 'doctorOnCall',
            'doctor_on_call_exception': 'doctorOnCallException',
            'elliptical_machine': 'ellipticalMachine',
            'elliptical_machine_exception': 'ellipticalMachineException',
            'fitness_center': 'fitnessCenter',
            'fitness_center_exception': 'fitnessCenterException',
            'free_fitness_center': 'freeFitnessCenter',
            'free_fitness_center_exception': 'freeFitnessCenterException',
            'free_weights': 'freeWeights',
            'free_weights_exception': 'freeWeightsException',
            'massage': 'massage',
            'massage_exception': 'massageException',
            'salon': 'salon',
            'salon_exception': 'salonException',
            'sauna': 'sauna',
            'sauna_exception': 'saunaException',
            'spa': 'spa',
            'spa_exception': 'spaException',
            'treadmill': 'treadmill',
            'treadmill_exception': 'treadmillException',
            'weight_machine': 'weightMachine',
            'weight_machine_exception': 'weightMachineException'
        }

        self._doctor_on_call = doctor_on_call
        self._doctor_on_call_exception = doctor_on_call_exception
        self._elliptical_machine = elliptical_machine
        self._elliptical_machine_exception = elliptical_machine_exception
        self._fitness_center = fitness_center
        self._fitness_center_exception = fitness_center_exception
        self._free_fitness_center = free_fitness_center
        self._free_fitness_center_exception = free_fitness_center_exception
        self._free_weights = free_weights
        self._free_weights_exception = free_weights_exception
        self._massage = massage
        self._massage_exception = massage_exception
        self._salon = salon
        self._salon_exception = salon_exception
        self._sauna = sauna
        self._sauna_exception = sauna_exception
        self._spa = spa
        self._spa_exception = spa_exception
        self._treadmill = treadmill
        self._treadmill_exception = treadmill_exception
        self._weight_machine = weight_machine
        self._weight_machine_exception = weight_machine_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Wellness':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Wellness of this Wellness.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def doctor_on_call(self):
        """Gets the doctor_on_call of this Wellness.

        Doctor on call. The hotel has a contract with a medical professional who provides services to hotel guests should they fall ill during their stay. The doctor may or may not have an on-site office or be at the hotel at all times.

        :return: The doctor_on_call of this Wellness.
        :rtype: bool
        """
        return self._doctor_on_call

    @doctor_on_call.setter
    def doctor_on_call(self, doctor_on_call):
        """Sets the doctor_on_call of this Wellness.

        Doctor on call. The hotel has a contract with a medical professional who provides services to hotel guests should they fall ill during their stay. The doctor may or may not have an on-site office or be at the hotel at all times.

        :param doctor_on_call: The doctor_on_call of this Wellness.
        :type doctor_on_call: bool
        """

        self._doctor_on_call = doctor_on_call

    @property
    def doctor_on_call_exception(self):
        """Gets the doctor_on_call_exception of this Wellness.

        Doctor on call exception.

        :return: The doctor_on_call_exception of this Wellness.
        :rtype: str
        """
        return self._doctor_on_call_exception

    @doctor_on_call_exception.setter
    def doctor_on_call_exception(self, doctor_on_call_exception):
        """Sets the doctor_on_call_exception of this Wellness.

        Doctor on call exception.

        :param doctor_on_call_exception: The doctor_on_call_exception of this Wellness.
        :type doctor_on_call_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if doctor_on_call_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `doctor_on_call_exception` ({0}), must be one of {1}"
                .format(doctor_on_call_exception, allowed_values)
            )

        self._doctor_on_call_exception = doctor_on_call_exception

    @property
    def elliptical_machine(self):
        """Gets the elliptical_machine of this Wellness.

        Elliptical machine. An electric, stationary fitness machine with pedals that simulates climbing, walking or running and provides a user-controlled range of speeds and tensions. May not have arm-controlled levers to work out the upper body as well. Commonly found in a gym, fitness room, health center, or health club.

        :return: The elliptical_machine of this Wellness.
        :rtype: bool
        """
        return self._elliptical_machine

    @elliptical_machine.setter
    def elliptical_machine(self, elliptical_machine):
        """Sets the elliptical_machine of this Wellness.

        Elliptical machine. An electric, stationary fitness machine with pedals that simulates climbing, walking or running and provides a user-controlled range of speeds and tensions. May not have arm-controlled levers to work out the upper body as well. Commonly found in a gym, fitness room, health center, or health club.

        :param elliptical_machine: The elliptical_machine of this Wellness.
        :type elliptical_machine: bool
        """

        self._elliptical_machine = elliptical_machine

    @property
    def elliptical_machine_exception(self):
        """Gets the elliptical_machine_exception of this Wellness.

        Elliptical machine exception.

        :return: The elliptical_machine_exception of this Wellness.
        :rtype: str
        """
        return self._elliptical_machine_exception

    @elliptical_machine_exception.setter
    def elliptical_machine_exception(self, elliptical_machine_exception):
        """Sets the elliptical_machine_exception of this Wellness.

        Elliptical machine exception.

        :param elliptical_machine_exception: The elliptical_machine_exception of this Wellness.
        :type elliptical_machine_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if elliptical_machine_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `elliptical_machine_exception` ({0}), must be one of {1}"
                .format(elliptical_machine_exception, allowed_values)
            )

        self._elliptical_machine_exception = elliptical_machine_exception

    @property
    def fitness_center(self):
        """Gets the fitness_center of this Wellness.

        Fitness center. A room or building at the hotel containing equipment to promote physical activity, such as treadmills, elliptical machines, stationary bikes, weight machines, free weights, and/or stretching mats. Use of the fitness center can be free or for a fee. May or may not be staffed. May or may not offer instructor-led classes in various styles of physical conditioning. May or may not be open 24/7. May or may not include locker rooms and showers. Also known as health club, gym, fitness room, health center.

        :return: The fitness_center of this Wellness.
        :rtype: bool
        """
        return self._fitness_center

    @fitness_center.setter
    def fitness_center(self, fitness_center):
        """Sets the fitness_center of this Wellness.

        Fitness center. A room or building at the hotel containing equipment to promote physical activity, such as treadmills, elliptical machines, stationary bikes, weight machines, free weights, and/or stretching mats. Use of the fitness center can be free or for a fee. May or may not be staffed. May or may not offer instructor-led classes in various styles of physical conditioning. May or may not be open 24/7. May or may not include locker rooms and showers. Also known as health club, gym, fitness room, health center.

        :param fitness_center: The fitness_center of this Wellness.
        :type fitness_center: bool
        """

        self._fitness_center = fitness_center

    @property
    def fitness_center_exception(self):
        """Gets the fitness_center_exception of this Wellness.

        Fitness center exception.

        :return: The fitness_center_exception of this Wellness.
        :rtype: str
        """
        return self._fitness_center_exception

    @fitness_center_exception.setter
    def fitness_center_exception(self, fitness_center_exception):
        """Sets the fitness_center_exception of this Wellness.

        Fitness center exception.

        :param fitness_center_exception: The fitness_center_exception of this Wellness.
        :type fitness_center_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if fitness_center_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `fitness_center_exception` ({0}), must be one of {1}"
                .format(fitness_center_exception, allowed_values)
            )

        self._fitness_center_exception = fitness_center_exception

    @property
    def free_fitness_center(self):
        """Gets the free_fitness_center of this Wellness.

        Free fitness center. Guests may use the fitness center for free.

        :return: The free_fitness_center of this Wellness.
        :rtype: bool
        """
        return self._free_fitness_center

    @free_fitness_center.setter
    def free_fitness_center(self, free_fitness_center):
        """Sets the free_fitness_center of this Wellness.

        Free fitness center. Guests may use the fitness center for free.

        :param free_fitness_center: The free_fitness_center of this Wellness.
        :type free_fitness_center: bool
        """

        self._free_fitness_center = free_fitness_center

    @property
    def free_fitness_center_exception(self):
        """Gets the free_fitness_center_exception of this Wellness.

        Free fitness center exception.

        :return: The free_fitness_center_exception of this Wellness.
        :rtype: str
        """
        return self._free_fitness_center_exception

    @free_fitness_center_exception.setter
    def free_fitness_center_exception(self, free_fitness_center_exception):
        """Sets the free_fitness_center_exception of this Wellness.

        Free fitness center exception.

        :param free_fitness_center_exception: The free_fitness_center_exception of this Wellness.
        :type free_fitness_center_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if free_fitness_center_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `free_fitness_center_exception` ({0}), must be one of {1}"
                .format(free_fitness_center_exception, allowed_values)
            )

        self._free_fitness_center_exception = free_fitness_center_exception

    @property
    def free_weights(self):
        """Gets the free_weights of this Wellness.

        Free weights. Individual handheld fitness equipment of varied weights used for upper body strength training or bodybuilding. Also known as barbells, dumbbells, or kettlebells. Often stored on a rack with the weights arranged from light to heavy. Commonly found in a gym, fitness room, health center, or health club.

        :return: The free_weights of this Wellness.
        :rtype: bool
        """
        return self._free_weights

    @free_weights.setter
    def free_weights(self, free_weights):
        """Sets the free_weights of this Wellness.

        Free weights. Individual handheld fitness equipment of varied weights used for upper body strength training or bodybuilding. Also known as barbells, dumbbells, or kettlebells. Often stored on a rack with the weights arranged from light to heavy. Commonly found in a gym, fitness room, health center, or health club.

        :param free_weights: The free_weights of this Wellness.
        :type free_weights: bool
        """

        self._free_weights = free_weights

    @property
    def free_weights_exception(self):
        """Gets the free_weights_exception of this Wellness.

        Free weights exception.

        :return: The free_weights_exception of this Wellness.
        :rtype: str
        """
        return self._free_weights_exception

    @free_weights_exception.setter
    def free_weights_exception(self, free_weights_exception):
        """Sets the free_weights_exception of this Wellness.

        Free weights exception.

        :param free_weights_exception: The free_weights_exception of this Wellness.
        :type free_weights_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if free_weights_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `free_weights_exception` ({0}), must be one of {1}"
                .format(free_weights_exception, allowed_values)
            )

        self._free_weights_exception = free_weights_exception

    @property
    def massage(self):
        """Gets the massage of this Wellness.

        Massage. A service provided by a trained massage therapist involving the physical manipulation of a guest's muscles in order to achieve relaxation or pain relief.

        :return: The massage of this Wellness.
        :rtype: bool
        """
        return self._massage

    @massage.setter
    def massage(self, massage):
        """Sets the massage of this Wellness.

        Massage. A service provided by a trained massage therapist involving the physical manipulation of a guest's muscles in order to achieve relaxation or pain relief.

        :param massage: The massage of this Wellness.
        :type massage: bool
        """

        self._massage = massage

    @property
    def massage_exception(self):
        """Gets the massage_exception of this Wellness.

        Massage exception.

        :return: The massage_exception of this Wellness.
        :rtype: str
        """
        return self._massage_exception

    @massage_exception.setter
    def massage_exception(self, massage_exception):
        """Sets the massage_exception of this Wellness.

        Massage exception.

        :param massage_exception: The massage_exception of this Wellness.
        :type massage_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if massage_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `massage_exception` ({0}), must be one of {1}"
                .format(massage_exception, allowed_values)
            )

        self._massage_exception = massage_exception

    @property
    def salon(self):
        """Gets the salon of this Wellness.

        Salon. A room at the hotel where professionals provide hair styling services such as shampooing, blow drying, hair dos, hair cutting and hair coloring. Also known as hairdresser or beauty salon.

        :return: The salon of this Wellness.
        :rtype: bool
        """
        return self._salon

    @salon.setter
    def salon(self, salon):
        """Sets the salon of this Wellness.

        Salon. A room at the hotel where professionals provide hair styling services such as shampooing, blow drying, hair dos, hair cutting and hair coloring. Also known as hairdresser or beauty salon.

        :param salon: The salon of this Wellness.
        :type salon: bool
        """

        self._salon = salon

    @property
    def salon_exception(self):
        """Gets the salon_exception of this Wellness.

        Salon exception.

        :return: The salon_exception of this Wellness.
        :rtype: str
        """
        return self._salon_exception

    @salon_exception.setter
    def salon_exception(self, salon_exception):
        """Sets the salon_exception of this Wellness.

        Salon exception.

        :param salon_exception: The salon_exception of this Wellness.
        :type salon_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if salon_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `salon_exception` ({0}), must be one of {1}"
                .format(salon_exception, allowed_values)
            )

        self._salon_exception = salon_exception

    @property
    def sauna(self):
        """Gets the sauna of this Wellness.

        Sauna. A wood-paneled room heated to a high temperature where guests sit on built-in wood benches for the purpose of perspiring and relaxing their muscles. Can be dry or slightly wet heat. Not a steam room.

        :return: The sauna of this Wellness.
        :rtype: bool
        """
        return self._sauna

    @sauna.setter
    def sauna(self, sauna):
        """Sets the sauna of this Wellness.

        Sauna. A wood-paneled room heated to a high temperature where guests sit on built-in wood benches for the purpose of perspiring and relaxing their muscles. Can be dry or slightly wet heat. Not a steam room.

        :param sauna: The sauna of this Wellness.
        :type sauna: bool
        """

        self._sauna = sauna

    @property
    def sauna_exception(self):
        """Gets the sauna_exception of this Wellness.

        Sauna exception.

        :return: The sauna_exception of this Wellness.
        :rtype: str
        """
        return self._sauna_exception

    @sauna_exception.setter
    def sauna_exception(self, sauna_exception):
        """Sets the sauna_exception of this Wellness.

        Sauna exception.

        :param sauna_exception: The sauna_exception of this Wellness.
        :type sauna_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if sauna_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `sauna_exception` ({0}), must be one of {1}"
                .format(sauna_exception, allowed_values)
            )

        self._sauna_exception = sauna_exception

    @property
    def spa(self):
        """Gets the spa of this Wellness.

        Spa. A designated area, room or building at the hotel offering health and beauty treatment through such means as steam baths, exercise equipment, and massage. May also offer facials, nail care, and hair care. Services are usually available by appointment and for an additional fee. Does not apply if hotel only offers a steam room; must offer other beauty and/or health treatments as well.

        :return: The spa of this Wellness.
        :rtype: bool
        """
        return self._spa

    @spa.setter
    def spa(self, spa):
        """Sets the spa of this Wellness.

        Spa. A designated area, room or building at the hotel offering health and beauty treatment through such means as steam baths, exercise equipment, and massage. May also offer facials, nail care, and hair care. Services are usually available by appointment and for an additional fee. Does not apply if hotel only offers a steam room; must offer other beauty and/or health treatments as well.

        :param spa: The spa of this Wellness.
        :type spa: bool
        """

        self._spa = spa

    @property
    def spa_exception(self):
        """Gets the spa_exception of this Wellness.

        Spa exception.

        :return: The spa_exception of this Wellness.
        :rtype: str
        """
        return self._spa_exception

    @spa_exception.setter
    def spa_exception(self, spa_exception):
        """Sets the spa_exception of this Wellness.

        Spa exception.

        :param spa_exception: The spa_exception of this Wellness.
        :type spa_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if spa_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `spa_exception` ({0}), must be one of {1}"
                .format(spa_exception, allowed_values)
            )

        self._spa_exception = spa_exception

    @property
    def treadmill(self):
        """Gets the treadmill of this Wellness.

        Treadmill. An electric stationary fitness machine that simulates a moving path to promote walking or running within a range of user-controlled speeds and inclines. Also known as running machine. Commonly found in a gym, fitness room, health center, or health club.

        :return: The treadmill of this Wellness.
        :rtype: bool
        """
        return self._treadmill

    @treadmill.setter
    def treadmill(self, treadmill):
        """Sets the treadmill of this Wellness.

        Treadmill. An electric stationary fitness machine that simulates a moving path to promote walking or running within a range of user-controlled speeds and inclines. Also known as running machine. Commonly found in a gym, fitness room, health center, or health club.

        :param treadmill: The treadmill of this Wellness.
        :type treadmill: bool
        """

        self._treadmill = treadmill

    @property
    def treadmill_exception(self):
        """Gets the treadmill_exception of this Wellness.

        Treadmill exception.

        :return: The treadmill_exception of this Wellness.
        :rtype: str
        """
        return self._treadmill_exception

    @treadmill_exception.setter
    def treadmill_exception(self, treadmill_exception):
        """Sets the treadmill_exception of this Wellness.

        Treadmill exception.

        :param treadmill_exception: The treadmill_exception of this Wellness.
        :type treadmill_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if treadmill_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `treadmill_exception` ({0}), must be one of {1}"
                .format(treadmill_exception, allowed_values)
            )

        self._treadmill_exception = treadmill_exception

    @property
    def weight_machine(self):
        """Gets the weight_machine of this Wellness.

        Weight machine. Non-electronic fitness equipment designed for the user to target the exertion of different muscles. Usually incorporates a padded seat, a stack of flat weights and various bars and pulleys. May be designed for toning a specific part of the body or may involve different user-controlled settings, hardware and pulleys so as to provide an overall workout in one machine. Commonly found in a gym, fitness center, fitness room, or health club.

        :return: The weight_machine of this Wellness.
        :rtype: bool
        """
        return self._weight_machine

    @weight_machine.setter
    def weight_machine(self, weight_machine):
        """Sets the weight_machine of this Wellness.

        Weight machine. Non-electronic fitness equipment designed for the user to target the exertion of different muscles. Usually incorporates a padded seat, a stack of flat weights and various bars and pulleys. May be designed for toning a specific part of the body or may involve different user-controlled settings, hardware and pulleys so as to provide an overall workout in one machine. Commonly found in a gym, fitness center, fitness room, or health club.

        :param weight_machine: The weight_machine of this Wellness.
        :type weight_machine: bool
        """

        self._weight_machine = weight_machine

    @property
    def weight_machine_exception(self):
        """Gets the weight_machine_exception of this Wellness.

        Weight machine exception.

        :return: The weight_machine_exception of this Wellness.
        :rtype: str
        """
        return self._weight_machine_exception

    @weight_machine_exception.setter
    def weight_machine_exception(self, weight_machine_exception):
        """Sets the weight_machine_exception of this Wellness.

        Weight machine exception.

        :param weight_machine_exception: The weight_machine_exception of this Wellness.
        :type weight_machine_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if weight_machine_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `weight_machine_exception` ({0}), must be one of {1}"
                .format(weight_machine_exception, allowed_values)
            )

        self._weight_machine_exception = weight_machine_exception
