# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class SpecialHourPeriod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, close_time: str=None, end_date: ModelDate=None, is_closed: bool=None, open_time: str=None, start_date: ModelDate=None):
        """SpecialHourPeriod - a model defined in OpenAPI

        :param close_time: The close_time of this SpecialHourPeriod.
        :param end_date: The end_date of this SpecialHourPeriod.
        :param is_closed: The is_closed of this SpecialHourPeriod.
        :param open_time: The open_time of this SpecialHourPeriod.
        :param start_date: The start_date of this SpecialHourPeriod.
        """
        self.openapi_types = {
            'close_time': str,
            'end_date': ModelDate,
            'is_closed': bool,
            'open_time': str,
            'start_date': ModelDate
        }

        self.attribute_map = {
            'close_time': 'closeTime',
            'end_date': 'endDate',
            'is_closed': 'isClosed',
            'open_time': 'openTime',
            'start_date': 'startDate'
        }

        self._close_time = close_time
        self._end_date = end_date
        self._is_closed = is_closed
        self._open_time = open_time
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpecialHourPeriod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpecialHourPeriod of this SpecialHourPeriod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def close_time(self):
        """Gets the close_time of this SpecialHourPeriod.

        The wall time on `end_date` when a location closes, expressed in 24hr ISO 8601 extended format. (hh:mm) Valid values are 00:00-24:00, where 24:00 represents midnight at the end of the specified day field. Must be specified if `is_closed` is false.

        :return: The close_time of this SpecialHourPeriod.
        :rtype: str
        """
        return self._close_time

    @close_time.setter
    def close_time(self, close_time):
        """Sets the close_time of this SpecialHourPeriod.

        The wall time on `end_date` when a location closes, expressed in 24hr ISO 8601 extended format. (hh:mm) Valid values are 00:00-24:00, where 24:00 represents midnight at the end of the specified day field. Must be specified if `is_closed` is false.

        :param close_time: The close_time of this SpecialHourPeriod.
        :type close_time: str
        """

        self._close_time = close_time

    @property
    def end_date(self):
        """Gets the end_date of this SpecialHourPeriod.


        :return: The end_date of this SpecialHourPeriod.
        :rtype: ModelDate
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this SpecialHourPeriod.


        :param end_date: The end_date of this SpecialHourPeriod.
        :type end_date: ModelDate
        """

        self._end_date = end_date

    @property
    def is_closed(self):
        """Gets the is_closed of this SpecialHourPeriod.

        If true, `end_date`, `open_time`, and `close_time` are ignored, and the date specified in `start_date` is treated as the location being closed for the entire day.

        :return: The is_closed of this SpecialHourPeriod.
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this SpecialHourPeriod.

        If true, `end_date`, `open_time`, and `close_time` are ignored, and the date specified in `start_date` is treated as the location being closed for the entire day.

        :param is_closed: The is_closed of this SpecialHourPeriod.
        :type is_closed: bool
        """

        self._is_closed = is_closed

    @property
    def open_time(self):
        """Gets the open_time of this SpecialHourPeriod.

        The wall time on `start_date` when a location opens, expressed in 24hr ISO 8601 extended format. (hh:mm) Valid values are 00:00-24:00, where 24:00 represents midnight at the end of the specified day field. Must be specified if `is_closed` is false.

        :return: The open_time of this SpecialHourPeriod.
        :rtype: str
        """
        return self._open_time

    @open_time.setter
    def open_time(self, open_time):
        """Sets the open_time of this SpecialHourPeriod.

        The wall time on `start_date` when a location opens, expressed in 24hr ISO 8601 extended format. (hh:mm) Valid values are 00:00-24:00, where 24:00 represents midnight at the end of the specified day field. Must be specified if `is_closed` is false.

        :param open_time: The open_time of this SpecialHourPeriod.
        :type open_time: str
        """

        self._open_time = open_time

    @property
    def start_date(self):
        """Gets the start_date of this SpecialHourPeriod.


        :return: The start_date of this SpecialHourPeriod.
        :rtype: ModelDate
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this SpecialHourPeriod.


        :param start_date: The start_date of this SpecialHourPeriod.
        :type start_date: ModelDate
        """

        self._start_date = start_date
