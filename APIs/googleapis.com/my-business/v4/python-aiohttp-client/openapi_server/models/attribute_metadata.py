# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute_value_metadata import AttributeValueMetadata
from openapi_server import util


class AttributeMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_id: str=None, display_name: str=None, group_display_name: str=None, is_deprecated: bool=None, is_repeatable: bool=None, value_metadata: List[AttributeValueMetadata]=None, value_type: str=None):
        """AttributeMetadata - a model defined in OpenAPI

        :param attribute_id: The attribute_id of this AttributeMetadata.
        :param display_name: The display_name of this AttributeMetadata.
        :param group_display_name: The group_display_name of this AttributeMetadata.
        :param is_deprecated: The is_deprecated of this AttributeMetadata.
        :param is_repeatable: The is_repeatable of this AttributeMetadata.
        :param value_metadata: The value_metadata of this AttributeMetadata.
        :param value_type: The value_type of this AttributeMetadata.
        """
        self.openapi_types = {
            'attribute_id': str,
            'display_name': str,
            'group_display_name': str,
            'is_deprecated': bool,
            'is_repeatable': bool,
            'value_metadata': List[AttributeValueMetadata],
            'value_type': str
        }

        self.attribute_map = {
            'attribute_id': 'attributeId',
            'display_name': 'displayName',
            'group_display_name': 'groupDisplayName',
            'is_deprecated': 'isDeprecated',
            'is_repeatable': 'isRepeatable',
            'value_metadata': 'valueMetadata',
            'value_type': 'valueType'
        }

        self._attribute_id = attribute_id
        self._display_name = display_name
        self._group_display_name = group_display_name
        self._is_deprecated = is_deprecated
        self._is_repeatable = is_repeatable
        self._value_metadata = value_metadata
        self._value_type = value_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributeMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributeMetadata of this AttributeMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_id(self):
        """Gets the attribute_id of this AttributeMetadata.

        The ID of the attribute.

        :return: The attribute_id of this AttributeMetadata.
        :rtype: str
        """
        return self._attribute_id

    @attribute_id.setter
    def attribute_id(self, attribute_id):
        """Sets the attribute_id of this AttributeMetadata.

        The ID of the attribute.

        :param attribute_id: The attribute_id of this AttributeMetadata.
        :type attribute_id: str
        """

        self._attribute_id = attribute_id

    @property
    def display_name(self):
        """Gets the display_name of this AttributeMetadata.

        The localized display name for the attribute, if available; otherwise, the English display name.

        :return: The display_name of this AttributeMetadata.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AttributeMetadata.

        The localized display name for the attribute, if available; otherwise, the English display name.

        :param display_name: The display_name of this AttributeMetadata.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def group_display_name(self):
        """Gets the group_display_name of this AttributeMetadata.

        The localized display name of the group that contains this attribute, if available; otherwise, the English group name. Related attributes are collected into a group and should be displayed together under the heading given here.

        :return: The group_display_name of this AttributeMetadata.
        :rtype: str
        """
        return self._group_display_name

    @group_display_name.setter
    def group_display_name(self, group_display_name):
        """Sets the group_display_name of this AttributeMetadata.

        The localized display name of the group that contains this attribute, if available; otherwise, the English group name. Related attributes are collected into a group and should be displayed together under the heading given here.

        :param group_display_name: The group_display_name of this AttributeMetadata.
        :type group_display_name: str
        """

        self._group_display_name = group_display_name

    @property
    def is_deprecated(self):
        """Gets the is_deprecated of this AttributeMetadata.

        If true, the attribute is deprecated and should no longer be used. If deprecated, updating this attribute will not result in an error, but updates will not be saved. At some point after being deprecated, the attribute will be removed entirely and it will become an error.

        :return: The is_deprecated of this AttributeMetadata.
        :rtype: bool
        """
        return self._is_deprecated

    @is_deprecated.setter
    def is_deprecated(self, is_deprecated):
        """Sets the is_deprecated of this AttributeMetadata.

        If true, the attribute is deprecated and should no longer be used. If deprecated, updating this attribute will not result in an error, but updates will not be saved. At some point after being deprecated, the attribute will be removed entirely and it will become an error.

        :param is_deprecated: The is_deprecated of this AttributeMetadata.
        :type is_deprecated: bool
        """

        self._is_deprecated = is_deprecated

    @property
    def is_repeatable(self):
        """Gets the is_repeatable of this AttributeMetadata.

        If true, the attribute supports multiple values. If false, only a single value should be provided.

        :return: The is_repeatable of this AttributeMetadata.
        :rtype: bool
        """
        return self._is_repeatable

    @is_repeatable.setter
    def is_repeatable(self, is_repeatable):
        """Sets the is_repeatable of this AttributeMetadata.

        If true, the attribute supports multiple values. If false, only a single value should be provided.

        :param is_repeatable: The is_repeatable of this AttributeMetadata.
        :type is_repeatable: bool
        """

        self._is_repeatable = is_repeatable

    @property
    def value_metadata(self):
        """Gets the value_metadata of this AttributeMetadata.

        For some types of attributes (for example, enums), a list of supported values and corresponding display names for those values is provided.

        :return: The value_metadata of this AttributeMetadata.
        :rtype: List[AttributeValueMetadata]
        """
        return self._value_metadata

    @value_metadata.setter
    def value_metadata(self, value_metadata):
        """Sets the value_metadata of this AttributeMetadata.

        For some types of attributes (for example, enums), a list of supported values and corresponding display names for those values is provided.

        :param value_metadata: The value_metadata of this AttributeMetadata.
        :type value_metadata: List[AttributeValueMetadata]
        """

        self._value_metadata = value_metadata

    @property
    def value_type(self):
        """Gets the value_type of this AttributeMetadata.

        The value type for the attribute. Values set and retrieved should be expected to be of this type.

        :return: The value_type of this AttributeMetadata.
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this AttributeMetadata.

        The value type for the attribute. Values set and retrieved should be expected to be of this type.

        :param value_type: The value_type of this AttributeMetadata.
        :type value_type: str
        """
        allowed_values = ["ATTRIBUTE_VALUE_TYPE_UNSPECIFIED", "BOOL", "ENUM", "URL", "REPEATED_ENUM"]  # noqa: E501
        if value_type not in allowed_values:
            raise ValueError(
                "Invalid value for `value_type` ({0}), must be one of {1}"
                .format(value_type, allowed_values)
            )

        self._value_type = value_type
