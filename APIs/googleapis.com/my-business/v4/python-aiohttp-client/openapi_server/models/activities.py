# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Activities(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beach_access: bool=None, beach_access_exception: str=None, beach_front: bool=None, beach_front_exception: str=None, bicycle_rental: bool=None, bicycle_rental_exception: str=None, boutique_stores: bool=None, boutique_stores_exception: str=None, casino: bool=None, casino_exception: str=None, free_bicycle_rental: bool=None, free_bicycle_rental_exception: str=None, free_watercraft_rental: bool=None, free_watercraft_rental_exception: str=None, game_room: bool=None, game_room_exception: str=None, golf: bool=None, golf_exception: str=None, horseback_riding: bool=None, horseback_riding_exception: str=None, nightclub: bool=None, nightclub_exception: str=None, private_beach: bool=None, private_beach_exception: str=None, scuba: bool=None, scuba_exception: str=None, snorkeling: bool=None, snorkeling_exception: str=None, tennis: bool=None, tennis_exception: str=None, water_skiing: bool=None, water_skiing_exception: str=None, watercraft_rental: bool=None, watercraft_rental_exception: str=None):
        """Activities - a model defined in OpenAPI

        :param beach_access: The beach_access of this Activities.
        :param beach_access_exception: The beach_access_exception of this Activities.
        :param beach_front: The beach_front of this Activities.
        :param beach_front_exception: The beach_front_exception of this Activities.
        :param bicycle_rental: The bicycle_rental of this Activities.
        :param bicycle_rental_exception: The bicycle_rental_exception of this Activities.
        :param boutique_stores: The boutique_stores of this Activities.
        :param boutique_stores_exception: The boutique_stores_exception of this Activities.
        :param casino: The casino of this Activities.
        :param casino_exception: The casino_exception of this Activities.
        :param free_bicycle_rental: The free_bicycle_rental of this Activities.
        :param free_bicycle_rental_exception: The free_bicycle_rental_exception of this Activities.
        :param free_watercraft_rental: The free_watercraft_rental of this Activities.
        :param free_watercraft_rental_exception: The free_watercraft_rental_exception of this Activities.
        :param game_room: The game_room of this Activities.
        :param game_room_exception: The game_room_exception of this Activities.
        :param golf: The golf of this Activities.
        :param golf_exception: The golf_exception of this Activities.
        :param horseback_riding: The horseback_riding of this Activities.
        :param horseback_riding_exception: The horseback_riding_exception of this Activities.
        :param nightclub: The nightclub of this Activities.
        :param nightclub_exception: The nightclub_exception of this Activities.
        :param private_beach: The private_beach of this Activities.
        :param private_beach_exception: The private_beach_exception of this Activities.
        :param scuba: The scuba of this Activities.
        :param scuba_exception: The scuba_exception of this Activities.
        :param snorkeling: The snorkeling of this Activities.
        :param snorkeling_exception: The snorkeling_exception of this Activities.
        :param tennis: The tennis of this Activities.
        :param tennis_exception: The tennis_exception of this Activities.
        :param water_skiing: The water_skiing of this Activities.
        :param water_skiing_exception: The water_skiing_exception of this Activities.
        :param watercraft_rental: The watercraft_rental of this Activities.
        :param watercraft_rental_exception: The watercraft_rental_exception of this Activities.
        """
        self.openapi_types = {
            'beach_access': bool,
            'beach_access_exception': str,
            'beach_front': bool,
            'beach_front_exception': str,
            'bicycle_rental': bool,
            'bicycle_rental_exception': str,
            'boutique_stores': bool,
            'boutique_stores_exception': str,
            'casino': bool,
            'casino_exception': str,
            'free_bicycle_rental': bool,
            'free_bicycle_rental_exception': str,
            'free_watercraft_rental': bool,
            'free_watercraft_rental_exception': str,
            'game_room': bool,
            'game_room_exception': str,
            'golf': bool,
            'golf_exception': str,
            'horseback_riding': bool,
            'horseback_riding_exception': str,
            'nightclub': bool,
            'nightclub_exception': str,
            'private_beach': bool,
            'private_beach_exception': str,
            'scuba': bool,
            'scuba_exception': str,
            'snorkeling': bool,
            'snorkeling_exception': str,
            'tennis': bool,
            'tennis_exception': str,
            'water_skiing': bool,
            'water_skiing_exception': str,
            'watercraft_rental': bool,
            'watercraft_rental_exception': str
        }

        self.attribute_map = {
            'beach_access': 'beachAccess',
            'beach_access_exception': 'beachAccessException',
            'beach_front': 'beachFront',
            'beach_front_exception': 'beachFrontException',
            'bicycle_rental': 'bicycleRental',
            'bicycle_rental_exception': 'bicycleRentalException',
            'boutique_stores': 'boutiqueStores',
            'boutique_stores_exception': 'boutiqueStoresException',
            'casino': 'casino',
            'casino_exception': 'casinoException',
            'free_bicycle_rental': 'freeBicycleRental',
            'free_bicycle_rental_exception': 'freeBicycleRentalException',
            'free_watercraft_rental': 'freeWatercraftRental',
            'free_watercraft_rental_exception': 'freeWatercraftRentalException',
            'game_room': 'gameRoom',
            'game_room_exception': 'gameRoomException',
            'golf': 'golf',
            'golf_exception': 'golfException',
            'horseback_riding': 'horsebackRiding',
            'horseback_riding_exception': 'horsebackRidingException',
            'nightclub': 'nightclub',
            'nightclub_exception': 'nightclubException',
            'private_beach': 'privateBeach',
            'private_beach_exception': 'privateBeachException',
            'scuba': 'scuba',
            'scuba_exception': 'scubaException',
            'snorkeling': 'snorkeling',
            'snorkeling_exception': 'snorkelingException',
            'tennis': 'tennis',
            'tennis_exception': 'tennisException',
            'water_skiing': 'waterSkiing',
            'water_skiing_exception': 'waterSkiingException',
            'watercraft_rental': 'watercraftRental',
            'watercraft_rental_exception': 'watercraftRentalException'
        }

        self._beach_access = beach_access
        self._beach_access_exception = beach_access_exception
        self._beach_front = beach_front
        self._beach_front_exception = beach_front_exception
        self._bicycle_rental = bicycle_rental
        self._bicycle_rental_exception = bicycle_rental_exception
        self._boutique_stores = boutique_stores
        self._boutique_stores_exception = boutique_stores_exception
        self._casino = casino
        self._casino_exception = casino_exception
        self._free_bicycle_rental = free_bicycle_rental
        self._free_bicycle_rental_exception = free_bicycle_rental_exception
        self._free_watercraft_rental = free_watercraft_rental
        self._free_watercraft_rental_exception = free_watercraft_rental_exception
        self._game_room = game_room
        self._game_room_exception = game_room_exception
        self._golf = golf
        self._golf_exception = golf_exception
        self._horseback_riding = horseback_riding
        self._horseback_riding_exception = horseback_riding_exception
        self._nightclub = nightclub
        self._nightclub_exception = nightclub_exception
        self._private_beach = private_beach
        self._private_beach_exception = private_beach_exception
        self._scuba = scuba
        self._scuba_exception = scuba_exception
        self._snorkeling = snorkeling
        self._snorkeling_exception = snorkeling_exception
        self._tennis = tennis
        self._tennis_exception = tennis_exception
        self._water_skiing = water_skiing
        self._water_skiing_exception = water_skiing_exception
        self._watercraft_rental = watercraft_rental
        self._watercraft_rental_exception = watercraft_rental_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Activities':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Activities of this Activities.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beach_access(self):
        """Gets the beach_access of this Activities.

        Beach access. The hotel property is in close proximity to a beach and offers a way to get to that beach. This can include a route to the beach such as stairs down if hotel is on a bluff, or a short trail. Not the same as beachfront (with beach access, the hotel's proximity is close to but not right on the beach).

        :return: The beach_access of this Activities.
        :rtype: bool
        """
        return self._beach_access

    @beach_access.setter
    def beach_access(self, beach_access):
        """Sets the beach_access of this Activities.

        Beach access. The hotel property is in close proximity to a beach and offers a way to get to that beach. This can include a route to the beach such as stairs down if hotel is on a bluff, or a short trail. Not the same as beachfront (with beach access, the hotel's proximity is close to but not right on the beach).

        :param beach_access: The beach_access of this Activities.
        :type beach_access: bool
        """

        self._beach_access = beach_access

    @property
    def beach_access_exception(self):
        """Gets the beach_access_exception of this Activities.

        Beach access exception.

        :return: The beach_access_exception of this Activities.
        :rtype: str
        """
        return self._beach_access_exception

    @beach_access_exception.setter
    def beach_access_exception(self, beach_access_exception):
        """Sets the beach_access_exception of this Activities.

        Beach access exception.

        :param beach_access_exception: The beach_access_exception of this Activities.
        :type beach_access_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if beach_access_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `beach_access_exception` ({0}), must be one of {1}"
                .format(beach_access_exception, allowed_values)
            )

        self._beach_access_exception = beach_access_exception

    @property
    def beach_front(self):
        """Gets the beach_front of this Activities.

        Breach front. The hotel property is physically located on the beach alongside an ocean, sea, gulf, or bay. It is not on a lake, river, stream, or pond. The hotel is not separated from the beach by a public road allowing vehicular, pedestrian, or bicycle traffic.

        :return: The beach_front of this Activities.
        :rtype: bool
        """
        return self._beach_front

    @beach_front.setter
    def beach_front(self, beach_front):
        """Sets the beach_front of this Activities.

        Breach front. The hotel property is physically located on the beach alongside an ocean, sea, gulf, or bay. It is not on a lake, river, stream, or pond. The hotel is not separated from the beach by a public road allowing vehicular, pedestrian, or bicycle traffic.

        :param beach_front: The beach_front of this Activities.
        :type beach_front: bool
        """

        self._beach_front = beach_front

    @property
    def beach_front_exception(self):
        """Gets the beach_front_exception of this Activities.

        Beach front exception.

        :return: The beach_front_exception of this Activities.
        :rtype: str
        """
        return self._beach_front_exception

    @beach_front_exception.setter
    def beach_front_exception(self, beach_front_exception):
        """Sets the beach_front_exception of this Activities.

        Beach front exception.

        :param beach_front_exception: The beach_front_exception of this Activities.
        :type beach_front_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if beach_front_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `beach_front_exception` ({0}), must be one of {1}"
                .format(beach_front_exception, allowed_values)
            )

        self._beach_front_exception = beach_front_exception

    @property
    def bicycle_rental(self):
        """Gets the bicycle_rental of this Activities.

        Bicycle rental. The hotel owns bicycles that it permits guests to borrow and use. Can be free or for a fee.

        :return: The bicycle_rental of this Activities.
        :rtype: bool
        """
        return self._bicycle_rental

    @bicycle_rental.setter
    def bicycle_rental(self, bicycle_rental):
        """Sets the bicycle_rental of this Activities.

        Bicycle rental. The hotel owns bicycles that it permits guests to borrow and use. Can be free or for a fee.

        :param bicycle_rental: The bicycle_rental of this Activities.
        :type bicycle_rental: bool
        """

        self._bicycle_rental = bicycle_rental

    @property
    def bicycle_rental_exception(self):
        """Gets the bicycle_rental_exception of this Activities.

        Bicycle rental exception.

        :return: The bicycle_rental_exception of this Activities.
        :rtype: str
        """
        return self._bicycle_rental_exception

    @bicycle_rental_exception.setter
    def bicycle_rental_exception(self, bicycle_rental_exception):
        """Sets the bicycle_rental_exception of this Activities.

        Bicycle rental exception.

        :param bicycle_rental_exception: The bicycle_rental_exception of this Activities.
        :type bicycle_rental_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if bicycle_rental_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `bicycle_rental_exception` ({0}), must be one of {1}"
                .format(bicycle_rental_exception, allowed_values)
            )

        self._bicycle_rental_exception = bicycle_rental_exception

    @property
    def boutique_stores(self):
        """Gets the boutique_stores of this Activities.

        Boutique stores. There are stores selling clothing, jewelry, art and decor either on hotel premises or very close by. Does not refer to the hotel gift shop or convenience store.

        :return: The boutique_stores of this Activities.
        :rtype: bool
        """
        return self._boutique_stores

    @boutique_stores.setter
    def boutique_stores(self, boutique_stores):
        """Sets the boutique_stores of this Activities.

        Boutique stores. There are stores selling clothing, jewelry, art and decor either on hotel premises or very close by. Does not refer to the hotel gift shop or convenience store.

        :param boutique_stores: The boutique_stores of this Activities.
        :type boutique_stores: bool
        """

        self._boutique_stores = boutique_stores

    @property
    def boutique_stores_exception(self):
        """Gets the boutique_stores_exception of this Activities.

        Boutique stores exception.

        :return: The boutique_stores_exception of this Activities.
        :rtype: str
        """
        return self._boutique_stores_exception

    @boutique_stores_exception.setter
    def boutique_stores_exception(self, boutique_stores_exception):
        """Sets the boutique_stores_exception of this Activities.

        Boutique stores exception.

        :param boutique_stores_exception: The boutique_stores_exception of this Activities.
        :type boutique_stores_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if boutique_stores_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `boutique_stores_exception` ({0}), must be one of {1}"
                .format(boutique_stores_exception, allowed_values)
            )

        self._boutique_stores_exception = boutique_stores_exception

    @property
    def casino(self):
        """Gets the casino of this Activities.

        Casino. A space designated for gambling and gaming featuring croupier-run table and card games, as well as electronic slot machines. May be on hotel premises or located nearby.

        :return: The casino of this Activities.
        :rtype: bool
        """
        return self._casino

    @casino.setter
    def casino(self, casino):
        """Sets the casino of this Activities.

        Casino. A space designated for gambling and gaming featuring croupier-run table and card games, as well as electronic slot machines. May be on hotel premises or located nearby.

        :param casino: The casino of this Activities.
        :type casino: bool
        """

        self._casino = casino

    @property
    def casino_exception(self):
        """Gets the casino_exception of this Activities.

        Casino exception.

        :return: The casino_exception of this Activities.
        :rtype: str
        """
        return self._casino_exception

    @casino_exception.setter
    def casino_exception(self, casino_exception):
        """Sets the casino_exception of this Activities.

        Casino exception.

        :param casino_exception: The casino_exception of this Activities.
        :type casino_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if casino_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `casino_exception` ({0}), must be one of {1}"
                .format(casino_exception, allowed_values)
            )

        self._casino_exception = casino_exception

    @property
    def free_bicycle_rental(self):
        """Gets the free_bicycle_rental of this Activities.

        Free bicycle rental. The hotel owns bicycles that it permits guests to borrow and use for free.

        :return: The free_bicycle_rental of this Activities.
        :rtype: bool
        """
        return self._free_bicycle_rental

    @free_bicycle_rental.setter
    def free_bicycle_rental(self, free_bicycle_rental):
        """Sets the free_bicycle_rental of this Activities.

        Free bicycle rental. The hotel owns bicycles that it permits guests to borrow and use for free.

        :param free_bicycle_rental: The free_bicycle_rental of this Activities.
        :type free_bicycle_rental: bool
        """

        self._free_bicycle_rental = free_bicycle_rental

    @property
    def free_bicycle_rental_exception(self):
        """Gets the free_bicycle_rental_exception of this Activities.

        Free bicycle rental exception.

        :return: The free_bicycle_rental_exception of this Activities.
        :rtype: str
        """
        return self._free_bicycle_rental_exception

    @free_bicycle_rental_exception.setter
    def free_bicycle_rental_exception(self, free_bicycle_rental_exception):
        """Sets the free_bicycle_rental_exception of this Activities.

        Free bicycle rental exception.

        :param free_bicycle_rental_exception: The free_bicycle_rental_exception of this Activities.
        :type free_bicycle_rental_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if free_bicycle_rental_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `free_bicycle_rental_exception` ({0}), must be one of {1}"
                .format(free_bicycle_rental_exception, allowed_values)
            )

        self._free_bicycle_rental_exception = free_bicycle_rental_exception

    @property
    def free_watercraft_rental(self):
        """Gets the free_watercraft_rental of this Activities.

        Free watercraft rental. The hotel owns watercraft that it permits guests to borrow and use for free.

        :return: The free_watercraft_rental of this Activities.
        :rtype: bool
        """
        return self._free_watercraft_rental

    @free_watercraft_rental.setter
    def free_watercraft_rental(self, free_watercraft_rental):
        """Sets the free_watercraft_rental of this Activities.

        Free watercraft rental. The hotel owns watercraft that it permits guests to borrow and use for free.

        :param free_watercraft_rental: The free_watercraft_rental of this Activities.
        :type free_watercraft_rental: bool
        """

        self._free_watercraft_rental = free_watercraft_rental

    @property
    def free_watercraft_rental_exception(self):
        """Gets the free_watercraft_rental_exception of this Activities.

        Free Watercraft rental exception.

        :return: The free_watercraft_rental_exception of this Activities.
        :rtype: str
        """
        return self._free_watercraft_rental_exception

    @free_watercraft_rental_exception.setter
    def free_watercraft_rental_exception(self, free_watercraft_rental_exception):
        """Sets the free_watercraft_rental_exception of this Activities.

        Free Watercraft rental exception.

        :param free_watercraft_rental_exception: The free_watercraft_rental_exception of this Activities.
        :type free_watercraft_rental_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if free_watercraft_rental_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `free_watercraft_rental_exception` ({0}), must be one of {1}"
                .format(free_watercraft_rental_exception, allowed_values)
            )

        self._free_watercraft_rental_exception = free_watercraft_rental_exception

    @property
    def game_room(self):
        """Gets the game_room of this Activities.

        Game room. There is a room at the hotel containing electronic machines for play such as pinball, prize machines, driving simulators, and other items commonly found at a family fun center or arcade. May also include non-electronic games like pool, foosball, darts, and more. May or may not be designed for children. Also known as arcade, fun room, or family fun center.

        :return: The game_room of this Activities.
        :rtype: bool
        """
        return self._game_room

    @game_room.setter
    def game_room(self, game_room):
        """Sets the game_room of this Activities.

        Game room. There is a room at the hotel containing electronic machines for play such as pinball, prize machines, driving simulators, and other items commonly found at a family fun center or arcade. May also include non-electronic games like pool, foosball, darts, and more. May or may not be designed for children. Also known as arcade, fun room, or family fun center.

        :param game_room: The game_room of this Activities.
        :type game_room: bool
        """

        self._game_room = game_room

    @property
    def game_room_exception(self):
        """Gets the game_room_exception of this Activities.

        Game room exception.

        :return: The game_room_exception of this Activities.
        :rtype: str
        """
        return self._game_room_exception

    @game_room_exception.setter
    def game_room_exception(self, game_room_exception):
        """Sets the game_room_exception of this Activities.

        Game room exception.

        :param game_room_exception: The game_room_exception of this Activities.
        :type game_room_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if game_room_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `game_room_exception` ({0}), must be one of {1}"
                .format(game_room_exception, allowed_values)
            )

        self._game_room_exception = game_room_exception

    @property
    def golf(self):
        """Gets the golf of this Activities.

        Golf. There is a golf course on hotel grounds or there is a nearby, independently run golf course that allows use by hotel guests. Can be free or for a fee.

        :return: The golf of this Activities.
        :rtype: bool
        """
        return self._golf

    @golf.setter
    def golf(self, golf):
        """Sets the golf of this Activities.

        Golf. There is a golf course on hotel grounds or there is a nearby, independently run golf course that allows use by hotel guests. Can be free or for a fee.

        :param golf: The golf of this Activities.
        :type golf: bool
        """

        self._golf = golf

    @property
    def golf_exception(self):
        """Gets the golf_exception of this Activities.

        Golf exception.

        :return: The golf_exception of this Activities.
        :rtype: str
        """
        return self._golf_exception

    @golf_exception.setter
    def golf_exception(self, golf_exception):
        """Sets the golf_exception of this Activities.

        Golf exception.

        :param golf_exception: The golf_exception of this Activities.
        :type golf_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if golf_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `golf_exception` ({0}), must be one of {1}"
                .format(golf_exception, allowed_values)
            )

        self._golf_exception = golf_exception

    @property
    def horseback_riding(self):
        """Gets the horseback_riding of this Activities.

        Horseback riding. The hotel has a horse barn onsite or an affiliation with a nearby barn to allow for guests to sit astride a horse and direct it to walk, trot, cantor, gallop and/or jump. Can be in a riding ring, on designated paths, or in the wilderness. May or may not involve instruction.

        :return: The horseback_riding of this Activities.
        :rtype: bool
        """
        return self._horseback_riding

    @horseback_riding.setter
    def horseback_riding(self, horseback_riding):
        """Sets the horseback_riding of this Activities.

        Horseback riding. The hotel has a horse barn onsite or an affiliation with a nearby barn to allow for guests to sit astride a horse and direct it to walk, trot, cantor, gallop and/or jump. Can be in a riding ring, on designated paths, or in the wilderness. May or may not involve instruction.

        :param horseback_riding: The horseback_riding of this Activities.
        :type horseback_riding: bool
        """

        self._horseback_riding = horseback_riding

    @property
    def horseback_riding_exception(self):
        """Gets the horseback_riding_exception of this Activities.

        Horseback riding exception.

        :return: The horseback_riding_exception of this Activities.
        :rtype: str
        """
        return self._horseback_riding_exception

    @horseback_riding_exception.setter
    def horseback_riding_exception(self, horseback_riding_exception):
        """Sets the horseback_riding_exception of this Activities.

        Horseback riding exception.

        :param horseback_riding_exception: The horseback_riding_exception of this Activities.
        :type horseback_riding_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if horseback_riding_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `horseback_riding_exception` ({0}), must be one of {1}"
                .format(horseback_riding_exception, allowed_values)
            )

        self._horseback_riding_exception = horseback_riding_exception

    @property
    def nightclub(self):
        """Gets the nightclub of this Activities.

        Nightclub. There is a room at the hotel with a bar, a dance floor, and seating where designated staffers play dance music. There may also be a designated area for the performance of live music, singing and comedy acts.

        :return: The nightclub of this Activities.
        :rtype: bool
        """
        return self._nightclub

    @nightclub.setter
    def nightclub(self, nightclub):
        """Sets the nightclub of this Activities.

        Nightclub. There is a room at the hotel with a bar, a dance floor, and seating where designated staffers play dance music. There may also be a designated area for the performance of live music, singing and comedy acts.

        :param nightclub: The nightclub of this Activities.
        :type nightclub: bool
        """

        self._nightclub = nightclub

    @property
    def nightclub_exception(self):
        """Gets the nightclub_exception of this Activities.

        Nightclub exception.

        :return: The nightclub_exception of this Activities.
        :rtype: str
        """
        return self._nightclub_exception

    @nightclub_exception.setter
    def nightclub_exception(self, nightclub_exception):
        """Sets the nightclub_exception of this Activities.

        Nightclub exception.

        :param nightclub_exception: The nightclub_exception of this Activities.
        :type nightclub_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if nightclub_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `nightclub_exception` ({0}), must be one of {1}"
                .format(nightclub_exception, allowed_values)
            )

        self._nightclub_exception = nightclub_exception

    @property
    def private_beach(self):
        """Gets the private_beach of this Activities.

        Private beach. The beach which is in close proximity to the hotel is open only to guests.

        :return: The private_beach of this Activities.
        :rtype: bool
        """
        return self._private_beach

    @private_beach.setter
    def private_beach(self, private_beach):
        """Sets the private_beach of this Activities.

        Private beach. The beach which is in close proximity to the hotel is open only to guests.

        :param private_beach: The private_beach of this Activities.
        :type private_beach: bool
        """

        self._private_beach = private_beach

    @property
    def private_beach_exception(self):
        """Gets the private_beach_exception of this Activities.

        Private beach exception.

        :return: The private_beach_exception of this Activities.
        :rtype: str
        """
        return self._private_beach_exception

    @private_beach_exception.setter
    def private_beach_exception(self, private_beach_exception):
        """Sets the private_beach_exception of this Activities.

        Private beach exception.

        :param private_beach_exception: The private_beach_exception of this Activities.
        :type private_beach_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if private_beach_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `private_beach_exception` ({0}), must be one of {1}"
                .format(private_beach_exception, allowed_values)
            )

        self._private_beach_exception = private_beach_exception

    @property
    def scuba(self):
        """Gets the scuba of this Activities.

        Scuba. The provision for guests to dive under naturally occurring water fitted with a self-contained underwater breathing apparatus (SCUBA) for the purpose of exploring underwater life. Apparatus consists of a tank providing oxygen to the diver through a mask. Requires certification of the diver and supervision. The hotel may have the activity at its own waterfront or have an affiliation with a nearby facility. Required equipment is most often supplied to guests. Can be free or for a fee. Not snorkeling. Not done in a swimming pool.

        :return: The scuba of this Activities.
        :rtype: bool
        """
        return self._scuba

    @scuba.setter
    def scuba(self, scuba):
        """Sets the scuba of this Activities.

        Scuba. The provision for guests to dive under naturally occurring water fitted with a self-contained underwater breathing apparatus (SCUBA) for the purpose of exploring underwater life. Apparatus consists of a tank providing oxygen to the diver through a mask. Requires certification of the diver and supervision. The hotel may have the activity at its own waterfront or have an affiliation with a nearby facility. Required equipment is most often supplied to guests. Can be free or for a fee. Not snorkeling. Not done in a swimming pool.

        :param scuba: The scuba of this Activities.
        :type scuba: bool
        """

        self._scuba = scuba

    @property
    def scuba_exception(self):
        """Gets the scuba_exception of this Activities.

        Scuba exception.

        :return: The scuba_exception of this Activities.
        :rtype: str
        """
        return self._scuba_exception

    @scuba_exception.setter
    def scuba_exception(self, scuba_exception):
        """Sets the scuba_exception of this Activities.

        Scuba exception.

        :param scuba_exception: The scuba_exception of this Activities.
        :type scuba_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if scuba_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `scuba_exception` ({0}), must be one of {1}"
                .format(scuba_exception, allowed_values)
            )

        self._scuba_exception = scuba_exception

    @property
    def snorkeling(self):
        """Gets the snorkeling of this Activities.

        Snorkeling. The provision for guests to participate in a recreational water activity in which swimmers wear a diving mask, a simple, shaped breathing tube and flippers/swim fins for the purpose of exploring below the surface of an ocean, gulf or lake. Does not usually require user certification or professional supervision. Equipment may or may not be available for rent or purchase. Not scuba diving.

        :return: The snorkeling of this Activities.
        :rtype: bool
        """
        return self._snorkeling

    @snorkeling.setter
    def snorkeling(self, snorkeling):
        """Sets the snorkeling of this Activities.

        Snorkeling. The provision for guests to participate in a recreational water activity in which swimmers wear a diving mask, a simple, shaped breathing tube and flippers/swim fins for the purpose of exploring below the surface of an ocean, gulf or lake. Does not usually require user certification or professional supervision. Equipment may or may not be available for rent or purchase. Not scuba diving.

        :param snorkeling: The snorkeling of this Activities.
        :type snorkeling: bool
        """

        self._snorkeling = snorkeling

    @property
    def snorkeling_exception(self):
        """Gets the snorkeling_exception of this Activities.

        Snorkeling exception.

        :return: The snorkeling_exception of this Activities.
        :rtype: str
        """
        return self._snorkeling_exception

    @snorkeling_exception.setter
    def snorkeling_exception(self, snorkeling_exception):
        """Sets the snorkeling_exception of this Activities.

        Snorkeling exception.

        :param snorkeling_exception: The snorkeling_exception of this Activities.
        :type snorkeling_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if snorkeling_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `snorkeling_exception` ({0}), must be one of {1}"
                .format(snorkeling_exception, allowed_values)
            )

        self._snorkeling_exception = snorkeling_exception

    @property
    def tennis(self):
        """Gets the tennis of this Activities.

        Tennis. The hotel has the requisite court(s) on site or has an affiliation with a nearby facility for the purpose of providing guests with the opportunity to play a two-sided court-based game in which players use a stringed racquet to hit a ball across a net to the side of the opposing player. The court can be indoors or outdoors. Instructors, racquets and balls may or may not be provided.

        :return: The tennis of this Activities.
        :rtype: bool
        """
        return self._tennis

    @tennis.setter
    def tennis(self, tennis):
        """Sets the tennis of this Activities.

        Tennis. The hotel has the requisite court(s) on site or has an affiliation with a nearby facility for the purpose of providing guests with the opportunity to play a two-sided court-based game in which players use a stringed racquet to hit a ball across a net to the side of the opposing player. The court can be indoors or outdoors. Instructors, racquets and balls may or may not be provided.

        :param tennis: The tennis of this Activities.
        :type tennis: bool
        """

        self._tennis = tennis

    @property
    def tennis_exception(self):
        """Gets the tennis_exception of this Activities.

        Tennis exception.

        :return: The tennis_exception of this Activities.
        :rtype: str
        """
        return self._tennis_exception

    @tennis_exception.setter
    def tennis_exception(self, tennis_exception):
        """Sets the tennis_exception of this Activities.

        Tennis exception.

        :param tennis_exception: The tennis_exception of this Activities.
        :type tennis_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if tennis_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `tennis_exception` ({0}), must be one of {1}"
                .format(tennis_exception, allowed_values)
            )

        self._tennis_exception = tennis_exception

    @property
    def water_skiing(self):
        """Gets the water_skiing of this Activities.

        Water skiing. The provision of giving guests the opportunity to be pulled across naturally occurring water while standing on skis and holding a tow rope attached to a motorboat. Can occur on hotel premises or at a nearby waterfront. Most often performed in a lake or ocean.

        :return: The water_skiing of this Activities.
        :rtype: bool
        """
        return self._water_skiing

    @water_skiing.setter
    def water_skiing(self, water_skiing):
        """Sets the water_skiing of this Activities.

        Water skiing. The provision of giving guests the opportunity to be pulled across naturally occurring water while standing on skis and holding a tow rope attached to a motorboat. Can occur on hotel premises or at a nearby waterfront. Most often performed in a lake or ocean.

        :param water_skiing: The water_skiing of this Activities.
        :type water_skiing: bool
        """

        self._water_skiing = water_skiing

    @property
    def water_skiing_exception(self):
        """Gets the water_skiing_exception of this Activities.

        Water skiing exception.

        :return: The water_skiing_exception of this Activities.
        :rtype: str
        """
        return self._water_skiing_exception

    @water_skiing_exception.setter
    def water_skiing_exception(self, water_skiing_exception):
        """Sets the water_skiing_exception of this Activities.

        Water skiing exception.

        :param water_skiing_exception: The water_skiing_exception of this Activities.
        :type water_skiing_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if water_skiing_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `water_skiing_exception` ({0}), must be one of {1}"
                .format(water_skiing_exception, allowed_values)
            )

        self._water_skiing_exception = water_skiing_exception

    @property
    def watercraft_rental(self):
        """Gets the watercraft_rental of this Activities.

        Watercraft rental. The hotel owns water vessels that it permits guests to borrow and use. Can be free or for a fee. Watercraft may include boats, pedal boats, rowboats, sailboats, powerboats, canoes, kayaks, or personal watercraft (such as a Jet Ski).

        :return: The watercraft_rental of this Activities.
        :rtype: bool
        """
        return self._watercraft_rental

    @watercraft_rental.setter
    def watercraft_rental(self, watercraft_rental):
        """Sets the watercraft_rental of this Activities.

        Watercraft rental. The hotel owns water vessels that it permits guests to borrow and use. Can be free or for a fee. Watercraft may include boats, pedal boats, rowboats, sailboats, powerboats, canoes, kayaks, or personal watercraft (such as a Jet Ski).

        :param watercraft_rental: The watercraft_rental of this Activities.
        :type watercraft_rental: bool
        """

        self._watercraft_rental = watercraft_rental

    @property
    def watercraft_rental_exception(self):
        """Gets the watercraft_rental_exception of this Activities.

        Watercraft rental exception.

        :return: The watercraft_rental_exception of this Activities.
        :rtype: str
        """
        return self._watercraft_rental_exception

    @watercraft_rental_exception.setter
    def watercraft_rental_exception(self, watercraft_rental_exception):
        """Sets the watercraft_rental_exception of this Activities.

        Watercraft rental exception.

        :param watercraft_rental_exception: The watercraft_rental_exception of this Activities.
        :type watercraft_rental_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if watercraft_rental_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `watercraft_rental_exception` ({0}), must be one of {1}"
                .format(watercraft_rental_exception, allowed_values)
            )

        self._watercraft_rental_exception = watercraft_rental_exception
