# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DrivingDirectionMetricsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_code: str=None, num_days: str=None):
        """DrivingDirectionMetricsRequest - a model defined in OpenAPI

        :param language_code: The language_code of this DrivingDirectionMetricsRequest.
        :param num_days: The num_days of this DrivingDirectionMetricsRequest.
        """
        self.openapi_types = {
            'language_code': str,
            'num_days': str
        }

        self.attribute_map = {
            'language_code': 'languageCode',
            'num_days': 'numDays'
        }

        self._language_code = language_code
        self._num_days = num_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DrivingDirectionMetricsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DrivingDirectionMetricsRequest of this DrivingDirectionMetricsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_code(self):
        """Gets the language_code of this DrivingDirectionMetricsRequest.

        The BCP 47 code for the language. If a language code is not provided, it defaults to English.

        :return: The language_code of this DrivingDirectionMetricsRequest.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this DrivingDirectionMetricsRequest.

        The BCP 47 code for the language. If a language code is not provided, it defaults to English.

        :param language_code: The language_code of this DrivingDirectionMetricsRequest.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def num_days(self):
        """Gets the num_days of this DrivingDirectionMetricsRequest.

        The number of days to aggregate data for. Results returned will be available data over the last number of requested days. Valid values are 7, 30, and 90.

        :return: The num_days of this DrivingDirectionMetricsRequest.
        :rtype: str
        """
        return self._num_days

    @num_days.setter
    def num_days(self, num_days):
        """Sets the num_days of this DrivingDirectionMetricsRequest.

        The number of days to aggregate data for. Results returned will be available data over the last number of requested days. Valid values are 7, 30, and 90.

        :param num_days: The num_days of this DrivingDirectionMetricsRequest.
        :type num_days: str
        """
        allowed_values = ["SEVEN", "THIRTY", "NINETY"]  # noqa: E501
        if num_days not in allowed_values:
            raise ValueError(
                "Invalid value for `num_days` ({0}), must be one of {1}"
                .format(num_days, allowed_values)
            )

        self._num_days = num_days
