# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.languages_spoken import LanguagesSpoken
from openapi_server import util


class Services(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, baggage_storage: bool=None, baggage_storage_exception: str=None, concierge: bool=None, concierge_exception: str=None, convenience_store: bool=None, convenience_store_exception: str=None, currency_exchange: bool=None, currency_exchange_exception: str=None, elevator: bool=None, elevator_exception: str=None, front_desk: bool=None, front_desk_exception: str=None, full_service_laundry: bool=None, full_service_laundry_exception: str=None, gift_shop: bool=None, gift_shop_exception: str=None, languages_spoken: LanguagesSpoken=None, self_service_laundry: bool=None, self_service_laundry_exception: str=None, social_hour: bool=None, social_hour_exception: str=None, twenty_four_hour_front_desk: bool=None, twenty_four_hour_front_desk_exception: str=None, wake_up_calls: bool=None, wake_up_calls_exception: str=None):
        """Services - a model defined in OpenAPI

        :param baggage_storage: The baggage_storage of this Services.
        :param baggage_storage_exception: The baggage_storage_exception of this Services.
        :param concierge: The concierge of this Services.
        :param concierge_exception: The concierge_exception of this Services.
        :param convenience_store: The convenience_store of this Services.
        :param convenience_store_exception: The convenience_store_exception of this Services.
        :param currency_exchange: The currency_exchange of this Services.
        :param currency_exchange_exception: The currency_exchange_exception of this Services.
        :param elevator: The elevator of this Services.
        :param elevator_exception: The elevator_exception of this Services.
        :param front_desk: The front_desk of this Services.
        :param front_desk_exception: The front_desk_exception of this Services.
        :param full_service_laundry: The full_service_laundry of this Services.
        :param full_service_laundry_exception: The full_service_laundry_exception of this Services.
        :param gift_shop: The gift_shop of this Services.
        :param gift_shop_exception: The gift_shop_exception of this Services.
        :param languages_spoken: The languages_spoken of this Services.
        :param self_service_laundry: The self_service_laundry of this Services.
        :param self_service_laundry_exception: The self_service_laundry_exception of this Services.
        :param social_hour: The social_hour of this Services.
        :param social_hour_exception: The social_hour_exception of this Services.
        :param twenty_four_hour_front_desk: The twenty_four_hour_front_desk of this Services.
        :param twenty_four_hour_front_desk_exception: The twenty_four_hour_front_desk_exception of this Services.
        :param wake_up_calls: The wake_up_calls of this Services.
        :param wake_up_calls_exception: The wake_up_calls_exception of this Services.
        """
        self.openapi_types = {
            'baggage_storage': bool,
            'baggage_storage_exception': str,
            'concierge': bool,
            'concierge_exception': str,
            'convenience_store': bool,
            'convenience_store_exception': str,
            'currency_exchange': bool,
            'currency_exchange_exception': str,
            'elevator': bool,
            'elevator_exception': str,
            'front_desk': bool,
            'front_desk_exception': str,
            'full_service_laundry': bool,
            'full_service_laundry_exception': str,
            'gift_shop': bool,
            'gift_shop_exception': str,
            'languages_spoken': LanguagesSpoken,
            'self_service_laundry': bool,
            'self_service_laundry_exception': str,
            'social_hour': bool,
            'social_hour_exception': str,
            'twenty_four_hour_front_desk': bool,
            'twenty_four_hour_front_desk_exception': str,
            'wake_up_calls': bool,
            'wake_up_calls_exception': str
        }

        self.attribute_map = {
            'baggage_storage': 'baggageStorage',
            'baggage_storage_exception': 'baggageStorageException',
            'concierge': 'concierge',
            'concierge_exception': 'conciergeException',
            'convenience_store': 'convenienceStore',
            'convenience_store_exception': 'convenienceStoreException',
            'currency_exchange': 'currencyExchange',
            'currency_exchange_exception': 'currencyExchangeException',
            'elevator': 'elevator',
            'elevator_exception': 'elevatorException',
            'front_desk': 'frontDesk',
            'front_desk_exception': 'frontDeskException',
            'full_service_laundry': 'fullServiceLaundry',
            'full_service_laundry_exception': 'fullServiceLaundryException',
            'gift_shop': 'giftShop',
            'gift_shop_exception': 'giftShopException',
            'languages_spoken': 'languagesSpoken',
            'self_service_laundry': 'selfServiceLaundry',
            'self_service_laundry_exception': 'selfServiceLaundryException',
            'social_hour': 'socialHour',
            'social_hour_exception': 'socialHourException',
            'twenty_four_hour_front_desk': 'twentyFourHourFrontDesk',
            'twenty_four_hour_front_desk_exception': 'twentyFourHourFrontDeskException',
            'wake_up_calls': 'wakeUpCalls',
            'wake_up_calls_exception': 'wakeUpCallsException'
        }

        self._baggage_storage = baggage_storage
        self._baggage_storage_exception = baggage_storage_exception
        self._concierge = concierge
        self._concierge_exception = concierge_exception
        self._convenience_store = convenience_store
        self._convenience_store_exception = convenience_store_exception
        self._currency_exchange = currency_exchange
        self._currency_exchange_exception = currency_exchange_exception
        self._elevator = elevator
        self._elevator_exception = elevator_exception
        self._front_desk = front_desk
        self._front_desk_exception = front_desk_exception
        self._full_service_laundry = full_service_laundry
        self._full_service_laundry_exception = full_service_laundry_exception
        self._gift_shop = gift_shop
        self._gift_shop_exception = gift_shop_exception
        self._languages_spoken = languages_spoken
        self._self_service_laundry = self_service_laundry
        self._self_service_laundry_exception = self_service_laundry_exception
        self._social_hour = social_hour
        self._social_hour_exception = social_hour_exception
        self._twenty_four_hour_front_desk = twenty_four_hour_front_desk
        self._twenty_four_hour_front_desk_exception = twenty_four_hour_front_desk_exception
        self._wake_up_calls = wake_up_calls
        self._wake_up_calls_exception = wake_up_calls_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Services':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Services of this Services.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def baggage_storage(self):
        """Gets the baggage_storage of this Services.

        Baggage storage. A provision for guests to leave their bags at the hotel when they arrive for their stay before the official check-in time. May or may not apply for guests who wish to leave their bags after check-out and before departing the locale. Also known as bag dropoff.

        :return: The baggage_storage of this Services.
        :rtype: bool
        """
        return self._baggage_storage

    @baggage_storage.setter
    def baggage_storage(self, baggage_storage):
        """Sets the baggage_storage of this Services.

        Baggage storage. A provision for guests to leave their bags at the hotel when they arrive for their stay before the official check-in time. May or may not apply for guests who wish to leave their bags after check-out and before departing the locale. Also known as bag dropoff.

        :param baggage_storage: The baggage_storage of this Services.
        :type baggage_storage: bool
        """

        self._baggage_storage = baggage_storage

    @property
    def baggage_storage_exception(self):
        """Gets the baggage_storage_exception of this Services.

        Baggage storage exception.

        :return: The baggage_storage_exception of this Services.
        :rtype: str
        """
        return self._baggage_storage_exception

    @baggage_storage_exception.setter
    def baggage_storage_exception(self, baggage_storage_exception):
        """Sets the baggage_storage_exception of this Services.

        Baggage storage exception.

        :param baggage_storage_exception: The baggage_storage_exception of this Services.
        :type baggage_storage_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if baggage_storage_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `baggage_storage_exception` ({0}), must be one of {1}"
                .format(baggage_storage_exception, allowed_values)
            )

        self._baggage_storage_exception = baggage_storage_exception

    @property
    def concierge(self):
        """Gets the concierge of this Services.

        Concierge. Hotel staff member(s) responsible for facilitating an easy, comfortable stay through making reservations for meals, sourcing theater tickets, arranging tours, finding a doctor, making recommendations, and answering questions.

        :return: The concierge of this Services.
        :rtype: bool
        """
        return self._concierge

    @concierge.setter
    def concierge(self, concierge):
        """Sets the concierge of this Services.

        Concierge. Hotel staff member(s) responsible for facilitating an easy, comfortable stay through making reservations for meals, sourcing theater tickets, arranging tours, finding a doctor, making recommendations, and answering questions.

        :param concierge: The concierge of this Services.
        :type concierge: bool
        """

        self._concierge = concierge

    @property
    def concierge_exception(self):
        """Gets the concierge_exception of this Services.

        Concierge exception.

        :return: The concierge_exception of this Services.
        :rtype: str
        """
        return self._concierge_exception

    @concierge_exception.setter
    def concierge_exception(self, concierge_exception):
        """Sets the concierge_exception of this Services.

        Concierge exception.

        :param concierge_exception: The concierge_exception of this Services.
        :type concierge_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if concierge_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `concierge_exception` ({0}), must be one of {1}"
                .format(concierge_exception, allowed_values)
            )

        self._concierge_exception = concierge_exception

    @property
    def convenience_store(self):
        """Gets the convenience_store of this Services.

        Convenience store. A shop at the hotel primarily selling snacks, drinks, non-prescription medicines, health and beauty aids, magazines and newspapers.

        :return: The convenience_store of this Services.
        :rtype: bool
        """
        return self._convenience_store

    @convenience_store.setter
    def convenience_store(self, convenience_store):
        """Sets the convenience_store of this Services.

        Convenience store. A shop at the hotel primarily selling snacks, drinks, non-prescription medicines, health and beauty aids, magazines and newspapers.

        :param convenience_store: The convenience_store of this Services.
        :type convenience_store: bool
        """

        self._convenience_store = convenience_store

    @property
    def convenience_store_exception(self):
        """Gets the convenience_store_exception of this Services.

        Convenience store exception.

        :return: The convenience_store_exception of this Services.
        :rtype: str
        """
        return self._convenience_store_exception

    @convenience_store_exception.setter
    def convenience_store_exception(self, convenience_store_exception):
        """Sets the convenience_store_exception of this Services.

        Convenience store exception.

        :param convenience_store_exception: The convenience_store_exception of this Services.
        :type convenience_store_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if convenience_store_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `convenience_store_exception` ({0}), must be one of {1}"
                .format(convenience_store_exception, allowed_values)
            )

        self._convenience_store_exception = convenience_store_exception

    @property
    def currency_exchange(self):
        """Gets the currency_exchange of this Services.

        Currency exchange. A staff member or automated machine tasked with the transaction of providing the native currency of the hotel's locale in exchange for the foreign currency provided by a guest.

        :return: The currency_exchange of this Services.
        :rtype: bool
        """
        return self._currency_exchange

    @currency_exchange.setter
    def currency_exchange(self, currency_exchange):
        """Sets the currency_exchange of this Services.

        Currency exchange. A staff member or automated machine tasked with the transaction of providing the native currency of the hotel's locale in exchange for the foreign currency provided by a guest.

        :param currency_exchange: The currency_exchange of this Services.
        :type currency_exchange: bool
        """

        self._currency_exchange = currency_exchange

    @property
    def currency_exchange_exception(self):
        """Gets the currency_exchange_exception of this Services.

        Currency exchange exception.

        :return: The currency_exchange_exception of this Services.
        :rtype: str
        """
        return self._currency_exchange_exception

    @currency_exchange_exception.setter
    def currency_exchange_exception(self, currency_exchange_exception):
        """Sets the currency_exchange_exception of this Services.

        Currency exchange exception.

        :param currency_exchange_exception: The currency_exchange_exception of this Services.
        :type currency_exchange_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if currency_exchange_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `currency_exchange_exception` ({0}), must be one of {1}"
                .format(currency_exchange_exception, allowed_values)
            )

        self._currency_exchange_exception = currency_exchange_exception

    @property
    def elevator(self):
        """Gets the elevator of this Services.

        Elevator. A passenger elevator that transports guests from one story to another. Also known as lift.

        :return: The elevator of this Services.
        :rtype: bool
        """
        return self._elevator

    @elevator.setter
    def elevator(self, elevator):
        """Sets the elevator of this Services.

        Elevator. A passenger elevator that transports guests from one story to another. Also known as lift.

        :param elevator: The elevator of this Services.
        :type elevator: bool
        """

        self._elevator = elevator

    @property
    def elevator_exception(self):
        """Gets the elevator_exception of this Services.

        Elevator exception.

        :return: The elevator_exception of this Services.
        :rtype: str
        """
        return self._elevator_exception

    @elevator_exception.setter
    def elevator_exception(self, elevator_exception):
        """Sets the elevator_exception of this Services.

        Elevator exception.

        :param elevator_exception: The elevator_exception of this Services.
        :type elevator_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if elevator_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `elevator_exception` ({0}), must be one of {1}"
                .format(elevator_exception, allowed_values)
            )

        self._elevator_exception = elevator_exception

    @property
    def front_desk(self):
        """Gets the front_desk of this Services.

        Front desk. A counter or desk in the lobby or the immediate interior of the hotel where a member of the staff greets guests and processes the information related to their stay (including check-in and check-out). May or may not be manned and open 24/7.

        :return: The front_desk of this Services.
        :rtype: bool
        """
        return self._front_desk

    @front_desk.setter
    def front_desk(self, front_desk):
        """Sets the front_desk of this Services.

        Front desk. A counter or desk in the lobby or the immediate interior of the hotel where a member of the staff greets guests and processes the information related to their stay (including check-in and check-out). May or may not be manned and open 24/7.

        :param front_desk: The front_desk of this Services.
        :type front_desk: bool
        """

        self._front_desk = front_desk

    @property
    def front_desk_exception(self):
        """Gets the front_desk_exception of this Services.

        Front desk exception.

        :return: The front_desk_exception of this Services.
        :rtype: str
        """
        return self._front_desk_exception

    @front_desk_exception.setter
    def front_desk_exception(self, front_desk_exception):
        """Sets the front_desk_exception of this Services.

        Front desk exception.

        :param front_desk_exception: The front_desk_exception of this Services.
        :type front_desk_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if front_desk_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `front_desk_exception` ({0}), must be one of {1}"
                .format(front_desk_exception, allowed_values)
            )

        self._front_desk_exception = front_desk_exception

    @property
    def full_service_laundry(self):
        """Gets the full_service_laundry of this Services.

        Full service laundry. Laundry and dry cleaning facilitated and handled by the hotel on behalf of the guest. Does not include the provision for guests to do their own laundry in on-site machines.

        :return: The full_service_laundry of this Services.
        :rtype: bool
        """
        return self._full_service_laundry

    @full_service_laundry.setter
    def full_service_laundry(self, full_service_laundry):
        """Sets the full_service_laundry of this Services.

        Full service laundry. Laundry and dry cleaning facilitated and handled by the hotel on behalf of the guest. Does not include the provision for guests to do their own laundry in on-site machines.

        :param full_service_laundry: The full_service_laundry of this Services.
        :type full_service_laundry: bool
        """

        self._full_service_laundry = full_service_laundry

    @property
    def full_service_laundry_exception(self):
        """Gets the full_service_laundry_exception of this Services.

        Full service laundry exception.

        :return: The full_service_laundry_exception of this Services.
        :rtype: str
        """
        return self._full_service_laundry_exception

    @full_service_laundry_exception.setter
    def full_service_laundry_exception(self, full_service_laundry_exception):
        """Sets the full_service_laundry_exception of this Services.

        Full service laundry exception.

        :param full_service_laundry_exception: The full_service_laundry_exception of this Services.
        :type full_service_laundry_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if full_service_laundry_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `full_service_laundry_exception` ({0}), must be one of {1}"
                .format(full_service_laundry_exception, allowed_values)
            )

        self._full_service_laundry_exception = full_service_laundry_exception

    @property
    def gift_shop(self):
        """Gets the gift_shop of this Services.

        Gift shop. An on-site store primarily selling souvenirs, mementos and other gift items. May or may not also sell sundries, magazines and newspapers, clothing, or snacks.

        :return: The gift_shop of this Services.
        :rtype: bool
        """
        return self._gift_shop

    @gift_shop.setter
    def gift_shop(self, gift_shop):
        """Sets the gift_shop of this Services.

        Gift shop. An on-site store primarily selling souvenirs, mementos and other gift items. May or may not also sell sundries, magazines and newspapers, clothing, or snacks.

        :param gift_shop: The gift_shop of this Services.
        :type gift_shop: bool
        """

        self._gift_shop = gift_shop

    @property
    def gift_shop_exception(self):
        """Gets the gift_shop_exception of this Services.

        Gift shop exception.

        :return: The gift_shop_exception of this Services.
        :rtype: str
        """
        return self._gift_shop_exception

    @gift_shop_exception.setter
    def gift_shop_exception(self, gift_shop_exception):
        """Sets the gift_shop_exception of this Services.

        Gift shop exception.

        :param gift_shop_exception: The gift_shop_exception of this Services.
        :type gift_shop_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if gift_shop_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `gift_shop_exception` ({0}), must be one of {1}"
                .format(gift_shop_exception, allowed_values)
            )

        self._gift_shop_exception = gift_shop_exception

    @property
    def languages_spoken(self):
        """Gets the languages_spoken of this Services.


        :return: The languages_spoken of this Services.
        :rtype: LanguagesSpoken
        """
        return self._languages_spoken

    @languages_spoken.setter
    def languages_spoken(self, languages_spoken):
        """Sets the languages_spoken of this Services.


        :param languages_spoken: The languages_spoken of this Services.
        :type languages_spoken: LanguagesSpoken
        """

        self._languages_spoken = languages_spoken

    @property
    def self_service_laundry(self):
        """Gets the self_service_laundry of this Services.

        Self service laundry. On-site clothes washers and dryers accessible to guests for the purpose of washing and drying their own clothes. May or may not require payment to use the machines.

        :return: The self_service_laundry of this Services.
        :rtype: bool
        """
        return self._self_service_laundry

    @self_service_laundry.setter
    def self_service_laundry(self, self_service_laundry):
        """Sets the self_service_laundry of this Services.

        Self service laundry. On-site clothes washers and dryers accessible to guests for the purpose of washing and drying their own clothes. May or may not require payment to use the machines.

        :param self_service_laundry: The self_service_laundry of this Services.
        :type self_service_laundry: bool
        """

        self._self_service_laundry = self_service_laundry

    @property
    def self_service_laundry_exception(self):
        """Gets the self_service_laundry_exception of this Services.

        Self service laundry exception.

        :return: The self_service_laundry_exception of this Services.
        :rtype: str
        """
        return self._self_service_laundry_exception

    @self_service_laundry_exception.setter
    def self_service_laundry_exception(self, self_service_laundry_exception):
        """Sets the self_service_laundry_exception of this Services.

        Self service laundry exception.

        :param self_service_laundry_exception: The self_service_laundry_exception of this Services.
        :type self_service_laundry_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if self_service_laundry_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `self_service_laundry_exception` ({0}), must be one of {1}"
                .format(self_service_laundry_exception, allowed_values)
            )

        self._self_service_laundry_exception = self_service_laundry_exception

    @property
    def social_hour(self):
        """Gets the social_hour of this Services.

        Social hour. A reception with complimentary soft drinks, tea, coffee, wine and/or cocktails in the afternoon or evening. Can be hosted by hotel staff or guests may serve themselves. Also known as wine hour. The availability of coffee/tea in the lobby throughout the day does not constitute a social or wine hour.

        :return: The social_hour of this Services.
        :rtype: bool
        """
        return self._social_hour

    @social_hour.setter
    def social_hour(self, social_hour):
        """Sets the social_hour of this Services.

        Social hour. A reception with complimentary soft drinks, tea, coffee, wine and/or cocktails in the afternoon or evening. Can be hosted by hotel staff or guests may serve themselves. Also known as wine hour. The availability of coffee/tea in the lobby throughout the day does not constitute a social or wine hour.

        :param social_hour: The social_hour of this Services.
        :type social_hour: bool
        """

        self._social_hour = social_hour

    @property
    def social_hour_exception(self):
        """Gets the social_hour_exception of this Services.

        Social hour exception.

        :return: The social_hour_exception of this Services.
        :rtype: str
        """
        return self._social_hour_exception

    @social_hour_exception.setter
    def social_hour_exception(self, social_hour_exception):
        """Sets the social_hour_exception of this Services.

        Social hour exception.

        :param social_hour_exception: The social_hour_exception of this Services.
        :type social_hour_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if social_hour_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `social_hour_exception` ({0}), must be one of {1}"
                .format(social_hour_exception, allowed_values)
            )

        self._social_hour_exception = social_hour_exception

    @property
    def twenty_four_hour_front_desk(self):
        """Gets the twenty_four_hour_front_desk of this Services.

        24hr front desk. Front desk is staffed 24 hours a day.

        :return: The twenty_four_hour_front_desk of this Services.
        :rtype: bool
        """
        return self._twenty_four_hour_front_desk

    @twenty_four_hour_front_desk.setter
    def twenty_four_hour_front_desk(self, twenty_four_hour_front_desk):
        """Sets the twenty_four_hour_front_desk of this Services.

        24hr front desk. Front desk is staffed 24 hours a day.

        :param twenty_four_hour_front_desk: The twenty_four_hour_front_desk of this Services.
        :type twenty_four_hour_front_desk: bool
        """

        self._twenty_four_hour_front_desk = twenty_four_hour_front_desk

    @property
    def twenty_four_hour_front_desk_exception(self):
        """Gets the twenty_four_hour_front_desk_exception of this Services.

        24hr front desk exception.

        :return: The twenty_four_hour_front_desk_exception of this Services.
        :rtype: str
        """
        return self._twenty_four_hour_front_desk_exception

    @twenty_four_hour_front_desk_exception.setter
    def twenty_four_hour_front_desk_exception(self, twenty_four_hour_front_desk_exception):
        """Sets the twenty_four_hour_front_desk_exception of this Services.

        24hr front desk exception.

        :param twenty_four_hour_front_desk_exception: The twenty_four_hour_front_desk_exception of this Services.
        :type twenty_four_hour_front_desk_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if twenty_four_hour_front_desk_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `twenty_four_hour_front_desk_exception` ({0}), must be one of {1}"
                .format(twenty_four_hour_front_desk_exception, allowed_values)
            )

        self._twenty_four_hour_front_desk_exception = twenty_four_hour_front_desk_exception

    @property
    def wake_up_calls(self):
        """Gets the wake_up_calls of this Services.

        Wake up calls. By direction of the guest, a hotel staff member will phone the guest unit at the requested hour. Also known as morning call.

        :return: The wake_up_calls of this Services.
        :rtype: bool
        """
        return self._wake_up_calls

    @wake_up_calls.setter
    def wake_up_calls(self, wake_up_calls):
        """Sets the wake_up_calls of this Services.

        Wake up calls. By direction of the guest, a hotel staff member will phone the guest unit at the requested hour. Also known as morning call.

        :param wake_up_calls: The wake_up_calls of this Services.
        :type wake_up_calls: bool
        """

        self._wake_up_calls = wake_up_calls

    @property
    def wake_up_calls_exception(self):
        """Gets the wake_up_calls_exception of this Services.

        Wake up calls exception.

        :return: The wake_up_calls_exception of this Services.
        :rtype: str
        """
        return self._wake_up_calls_exception

    @wake_up_calls_exception.setter
    def wake_up_calls_exception(self, wake_up_calls_exception):
        """Sets the wake_up_calls_exception of this Services.

        Wake up calls exception.

        :param wake_up_calls_exception: The wake_up_calls_exception of this Services.
        :type wake_up_calls_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if wake_up_calls_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `wake_up_calls_exception` ({0}), must be one of {1}"
                .format(wake_up_calls_exception, allowed_values)
            )

        self._wake_up_calls_exception = wake_up_calls_exception
