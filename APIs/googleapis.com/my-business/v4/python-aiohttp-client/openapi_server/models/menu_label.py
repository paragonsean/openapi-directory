# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MenuLabel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, language_code: str=None):
        """MenuLabel - a model defined in OpenAPI

        :param description: The description of this MenuLabel.
        :param display_name: The display_name of this MenuLabel.
        :param language_code: The language_code of this MenuLabel.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'language_code': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'language_code': 'languageCode'
        }

        self._description = description
        self._display_name = display_name
        self._language_code = language_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MenuLabel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MenuLabel of this MenuLabel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this MenuLabel.

        Optional. Supplementary information of the component.

        :return: The description of this MenuLabel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MenuLabel.

        Optional. Supplementary information of the component.

        :param description: The description of this MenuLabel.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this MenuLabel.

        Required. Display name of the component.

        :return: The display_name of this MenuLabel.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MenuLabel.

        Required. Display name of the component.

        :param display_name: The display_name of this MenuLabel.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def language_code(self):
        """Gets the language_code of this MenuLabel.

        Optional. The BCP 47 code of language. If the language is not available, it will default to English.

        :return: The language_code of this MenuLabel.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this MenuLabel.

        Optional. The BCP 47 code of language. If the language is not available, it will default to English.

        :param language_code: The language_code of this MenuLabel.
        :type language_code: str
        """

        self._language_code = language_code
