# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chain_name import ChainName
from openapi_server.models.chain_url import ChainUrl
from openapi_server import util


class Chain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chain_names: List[ChainName]=None, location_count: int=None, name: str=None, websites: List[ChainUrl]=None):
        """Chain - a model defined in OpenAPI

        :param chain_names: The chain_names of this Chain.
        :param location_count: The location_count of this Chain.
        :param name: The name of this Chain.
        :param websites: The websites of this Chain.
        """
        self.openapi_types = {
            'chain_names': List[ChainName],
            'location_count': int,
            'name': str,
            'websites': List[ChainUrl]
        }

        self.attribute_map = {
            'chain_names': 'chainNames',
            'location_count': 'locationCount',
            'name': 'name',
            'websites': 'websites'
        }

        self._chain_names = chain_names
        self._location_count = location_count
        self._name = name
        self._websites = websites

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Chain':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Chain of this Chain.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chain_names(self):
        """Gets the chain_names of this Chain.

        Names of the chain.

        :return: The chain_names of this Chain.
        :rtype: List[ChainName]
        """
        return self._chain_names

    @chain_names.setter
    def chain_names(self, chain_names):
        """Sets the chain_names of this Chain.

        Names of the chain.

        :param chain_names: The chain_names of this Chain.
        :type chain_names: List[ChainName]
        """

        self._chain_names = chain_names

    @property
    def location_count(self):
        """Gets the location_count of this Chain.

        Number of locations that are part of this chain.

        :return: The location_count of this Chain.
        :rtype: int
        """
        return self._location_count

    @location_count.setter
    def location_count(self, location_count):
        """Sets the location_count of this Chain.

        Number of locations that are part of this chain.

        :param location_count: The location_count of this Chain.
        :type location_count: int
        """

        self._location_count = location_count

    @property
    def name(self):
        """Gets the name of this Chain.

        The chain's resource name, in the format `chains/{chain_place_id}`.

        :return: The name of this Chain.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Chain.

        The chain's resource name, in the format `chains/{chain_place_id}`.

        :param name: The name of this Chain.
        :type name: str
        """

        self._name = name

    @property
    def websites(self):
        """Gets the websites of this Chain.

        Websites of the chain.

        :return: The websites of this Chain.
        :rtype: List[ChainUrl]
        """
        return self._websites

    @websites.setter
    def websites(self, websites):
        """Sets the websites of this Chain.

        Websites of the chain.

        :param websites: The websites of this Chain.
        :type websites: List[ChainUrl]
        """

        self._websites = websites
