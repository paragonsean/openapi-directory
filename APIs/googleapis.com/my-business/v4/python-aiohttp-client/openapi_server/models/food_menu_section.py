# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.food_menu_item import FoodMenuItem
from openapi_server.models.menu_label import MenuLabel
from openapi_server import util


class FoodMenuSection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[FoodMenuItem]=None, labels: List[MenuLabel]=None):
        """FoodMenuSection - a model defined in OpenAPI

        :param items: The items of this FoodMenuSection.
        :param labels: The labels of this FoodMenuSection.
        """
        self.openapi_types = {
            'items': List[FoodMenuItem],
            'labels': List[MenuLabel]
        }

        self.attribute_map = {
            'items': 'items',
            'labels': 'labels'
        }

        self._items = items
        self._labels = labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FoodMenuSection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FoodMenuSection of this FoodMenuSection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this FoodMenuSection.

        Required. Items of the section. Each Section must have at least an item.

        :return: The items of this FoodMenuSection.
        :rtype: List[FoodMenuItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this FoodMenuSection.

        Required. Items of the section. Each Section must have at least an item.

        :param items: The items of this FoodMenuSection.
        :type items: List[FoodMenuItem]
        """

        self._items = items

    @property
    def labels(self):
        """Gets the labels of this FoodMenuSection.

        Required. Language tagged labels for this menu section. Display names should be 140 characters or less, with descriptions 1,000 characters or less. At least one set of labels is required.

        :return: The labels of this FoodMenuSection.
        :rtype: List[MenuLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this FoodMenuSection.

        Required. Language tagged labels for this menu section. Display names should be 140 characters or less, with descriptions 1,000 characters or less. At least one set of labels is required.

        :param labels: The labels of this FoodMenuSection.
        :type labels: List[MenuLabel]
        """

        self._labels = labels
