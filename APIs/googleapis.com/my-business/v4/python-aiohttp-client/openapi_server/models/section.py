# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item import Item
from openapi_server.models.label import Label
from openapi_server import util


class Section(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[Item]=None, labels: List[Label]=None, section_id: str=None, section_type: str=None):
        """Section - a model defined in OpenAPI

        :param items: The items of this Section.
        :param labels: The labels of this Section.
        :param section_id: The section_id of this Section.
        :param section_type: The section_type of this Section.
        """
        self.openapi_types = {
            'items': List[Item],
            'labels': List[Label],
            'section_id': str,
            'section_type': str
        }

        self.attribute_map = {
            'items': 'items',
            'labels': 'labels',
            'section_id': 'sectionId',
            'section_type': 'sectionType'
        }

        self._items = items
        self._labels = labels
        self._section_id = section_id
        self._section_type = section_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Section':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Section of this Section.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this Section.

        Items that are contained within this section of the price list.

        :return: The items of this Section.
        :rtype: List[Item]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Section.

        Items that are contained within this section of the price list.

        :param items: The items of this Section.
        :type items: List[Item]
        """

        self._items = items

    @property
    def labels(self):
        """Gets the labels of this Section.

        Required. Language-tagged labels for the section. We recommend that section names and descriptions be 140 characters or less. At least one set of labels is required.

        :return: The labels of this Section.
        :rtype: List[Label]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Section.

        Required. Language-tagged labels for the section. We recommend that section names and descriptions be 140 characters or less. At least one set of labels is required.

        :param labels: The labels of this Section.
        :type labels: List[Label]
        """

        self._labels = labels

    @property
    def section_id(self):
        """Gets the section_id of this Section.

        Required. ID for the section. Price list, section, and item IDs cannot be duplicated within this Location.

        :return: The section_id of this Section.
        :rtype: str
        """
        return self._section_id

    @section_id.setter
    def section_id(self, section_id):
        """Sets the section_id of this Section.

        Required. ID for the section. Price list, section, and item IDs cannot be duplicated within this Location.

        :param section_id: The section_id of this Section.
        :type section_id: str
        """

        self._section_id = section_id

    @property
    def section_type(self):
        """Gets the section_type of this Section.

        Optional. Type of the current price list section. Default value is FOOD.

        :return: The section_type of this Section.
        :rtype: str
        """
        return self._section_type

    @section_type.setter
    def section_type(self, section_type):
        """Sets the section_type of this Section.

        Optional. Type of the current price list section. Default value is FOOD.

        :param section_type: The section_type of this Section.
        :type section_type: str
        """
        allowed_values = ["SECTION_TYPE_UNSPECIFIED", "FOOD", "SERVICES"]  # noqa: E501
        if section_type not in allowed_values:
            raise ValueError(
                "Invalid value for `section_type` ({0}), must be one of {1}"
                .format(section_type, allowed_values)
            )

        self._section_type = section_type
