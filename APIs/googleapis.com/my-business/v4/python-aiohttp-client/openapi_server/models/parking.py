# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Parking(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, electric_car_charging_stations: bool=None, electric_car_charging_stations_exception: str=None, free_parking: bool=None, free_parking_exception: str=None, free_self_parking: bool=None, free_self_parking_exception: str=None, free_valet_parking: bool=None, free_valet_parking_exception: str=None, parking_available: bool=None, parking_available_exception: str=None, self_parking_available: bool=None, self_parking_available_exception: str=None, valet_parking_available: bool=None, valet_parking_available_exception: str=None):
        """Parking - a model defined in OpenAPI

        :param electric_car_charging_stations: The electric_car_charging_stations of this Parking.
        :param electric_car_charging_stations_exception: The electric_car_charging_stations_exception of this Parking.
        :param free_parking: The free_parking of this Parking.
        :param free_parking_exception: The free_parking_exception of this Parking.
        :param free_self_parking: The free_self_parking of this Parking.
        :param free_self_parking_exception: The free_self_parking_exception of this Parking.
        :param free_valet_parking: The free_valet_parking of this Parking.
        :param free_valet_parking_exception: The free_valet_parking_exception of this Parking.
        :param parking_available: The parking_available of this Parking.
        :param parking_available_exception: The parking_available_exception of this Parking.
        :param self_parking_available: The self_parking_available of this Parking.
        :param self_parking_available_exception: The self_parking_available_exception of this Parking.
        :param valet_parking_available: The valet_parking_available of this Parking.
        :param valet_parking_available_exception: The valet_parking_available_exception of this Parking.
        """
        self.openapi_types = {
            'electric_car_charging_stations': bool,
            'electric_car_charging_stations_exception': str,
            'free_parking': bool,
            'free_parking_exception': str,
            'free_self_parking': bool,
            'free_self_parking_exception': str,
            'free_valet_parking': bool,
            'free_valet_parking_exception': str,
            'parking_available': bool,
            'parking_available_exception': str,
            'self_parking_available': bool,
            'self_parking_available_exception': str,
            'valet_parking_available': bool,
            'valet_parking_available_exception': str
        }

        self.attribute_map = {
            'electric_car_charging_stations': 'electricCarChargingStations',
            'electric_car_charging_stations_exception': 'electricCarChargingStationsException',
            'free_parking': 'freeParking',
            'free_parking_exception': 'freeParkingException',
            'free_self_parking': 'freeSelfParking',
            'free_self_parking_exception': 'freeSelfParkingException',
            'free_valet_parking': 'freeValetParking',
            'free_valet_parking_exception': 'freeValetParkingException',
            'parking_available': 'parkingAvailable',
            'parking_available_exception': 'parkingAvailableException',
            'self_parking_available': 'selfParkingAvailable',
            'self_parking_available_exception': 'selfParkingAvailableException',
            'valet_parking_available': 'valetParkingAvailable',
            'valet_parking_available_exception': 'valetParkingAvailableException'
        }

        self._electric_car_charging_stations = electric_car_charging_stations
        self._electric_car_charging_stations_exception = electric_car_charging_stations_exception
        self._free_parking = free_parking
        self._free_parking_exception = free_parking_exception
        self._free_self_parking = free_self_parking
        self._free_self_parking_exception = free_self_parking_exception
        self._free_valet_parking = free_valet_parking
        self._free_valet_parking_exception = free_valet_parking_exception
        self._parking_available = parking_available
        self._parking_available_exception = parking_available_exception
        self._self_parking_available = self_parking_available
        self._self_parking_available_exception = self_parking_available_exception
        self._valet_parking_available = valet_parking_available
        self._valet_parking_available_exception = valet_parking_available_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Parking':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Parking of this Parking.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def electric_car_charging_stations(self):
        """Gets the electric_car_charging_stations of this Parking.

        Electric car charging stations. Electric power stations, usually located outdoors, into which guests plug their electric cars to receive a charge.

        :return: The electric_car_charging_stations of this Parking.
        :rtype: bool
        """
        return self._electric_car_charging_stations

    @electric_car_charging_stations.setter
    def electric_car_charging_stations(self, electric_car_charging_stations):
        """Sets the electric_car_charging_stations of this Parking.

        Electric car charging stations. Electric power stations, usually located outdoors, into which guests plug their electric cars to receive a charge.

        :param electric_car_charging_stations: The electric_car_charging_stations of this Parking.
        :type electric_car_charging_stations: bool
        """

        self._electric_car_charging_stations = electric_car_charging_stations

    @property
    def electric_car_charging_stations_exception(self):
        """Gets the electric_car_charging_stations_exception of this Parking.

        Electric car charging stations exception.

        :return: The electric_car_charging_stations_exception of this Parking.
        :rtype: str
        """
        return self._electric_car_charging_stations_exception

    @electric_car_charging_stations_exception.setter
    def electric_car_charging_stations_exception(self, electric_car_charging_stations_exception):
        """Sets the electric_car_charging_stations_exception of this Parking.

        Electric car charging stations exception.

        :param electric_car_charging_stations_exception: The electric_car_charging_stations_exception of this Parking.
        :type electric_car_charging_stations_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if electric_car_charging_stations_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `electric_car_charging_stations_exception` ({0}), must be one of {1}"
                .format(electric_car_charging_stations_exception, allowed_values)
            )

        self._electric_car_charging_stations_exception = electric_car_charging_stations_exception

    @property
    def free_parking(self):
        """Gets the free_parking of this Parking.

        Free parking. The hotel allows the cars of guests to be parked for free. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Parking may be performed by the guest or by hotel staff. Free parking must be available to all guests (limited conditions does not apply).

        :return: The free_parking of this Parking.
        :rtype: bool
        """
        return self._free_parking

    @free_parking.setter
    def free_parking(self, free_parking):
        """Sets the free_parking of this Parking.

        Free parking. The hotel allows the cars of guests to be parked for free. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Parking may be performed by the guest or by hotel staff. Free parking must be available to all guests (limited conditions does not apply).

        :param free_parking: The free_parking of this Parking.
        :type free_parking: bool
        """

        self._free_parking = free_parking

    @property
    def free_parking_exception(self):
        """Gets the free_parking_exception of this Parking.

        Free parking exception.

        :return: The free_parking_exception of this Parking.
        :rtype: str
        """
        return self._free_parking_exception

    @free_parking_exception.setter
    def free_parking_exception(self, free_parking_exception):
        """Sets the free_parking_exception of this Parking.

        Free parking exception.

        :param free_parking_exception: The free_parking_exception of this Parking.
        :type free_parking_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if free_parking_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `free_parking_exception` ({0}), must be one of {1}"
                .format(free_parking_exception, allowed_values)
            )

        self._free_parking_exception = free_parking_exception

    @property
    def free_self_parking(self):
        """Gets the free_self_parking of this Parking.

        Free self parking. Guests park their own cars for free. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply.

        :return: The free_self_parking of this Parking.
        :rtype: bool
        """
        return self._free_self_parking

    @free_self_parking.setter
    def free_self_parking(self, free_self_parking):
        """Sets the free_self_parking of this Parking.

        Free self parking. Guests park their own cars for free. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply.

        :param free_self_parking: The free_self_parking of this Parking.
        :type free_self_parking: bool
        """

        self._free_self_parking = free_self_parking

    @property
    def free_self_parking_exception(self):
        """Gets the free_self_parking_exception of this Parking.

        Free self parking exception.

        :return: The free_self_parking_exception of this Parking.
        :rtype: str
        """
        return self._free_self_parking_exception

    @free_self_parking_exception.setter
    def free_self_parking_exception(self, free_self_parking_exception):
        """Sets the free_self_parking_exception of this Parking.

        Free self parking exception.

        :param free_self_parking_exception: The free_self_parking_exception of this Parking.
        :type free_self_parking_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if free_self_parking_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `free_self_parking_exception` ({0}), must be one of {1}"
                .format(free_self_parking_exception, allowed_values)
            )

        self._free_self_parking_exception = free_self_parking_exception

    @property
    def free_valet_parking(self):
        """Gets the free_valet_parking of this Parking.

        Free valet parking. Hotel staff member parks the cars of guests. Parking with this service is free.

        :return: The free_valet_parking of this Parking.
        :rtype: bool
        """
        return self._free_valet_parking

    @free_valet_parking.setter
    def free_valet_parking(self, free_valet_parking):
        """Sets the free_valet_parking of this Parking.

        Free valet parking. Hotel staff member parks the cars of guests. Parking with this service is free.

        :param free_valet_parking: The free_valet_parking of this Parking.
        :type free_valet_parking: bool
        """

        self._free_valet_parking = free_valet_parking

    @property
    def free_valet_parking_exception(self):
        """Gets the free_valet_parking_exception of this Parking.

        Free valet parking exception.

        :return: The free_valet_parking_exception of this Parking.
        :rtype: str
        """
        return self._free_valet_parking_exception

    @free_valet_parking_exception.setter
    def free_valet_parking_exception(self, free_valet_parking_exception):
        """Sets the free_valet_parking_exception of this Parking.

        Free valet parking exception.

        :param free_valet_parking_exception: The free_valet_parking_exception of this Parking.
        :type free_valet_parking_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if free_valet_parking_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `free_valet_parking_exception` ({0}), must be one of {1}"
                .format(free_valet_parking_exception, allowed_values)
            )

        self._free_valet_parking_exception = free_valet_parking_exception

    @property
    def parking_available(self):
        """Gets the parking_available of this Parking.

        Parking available. The hotel allows the cars of guests to be parked. Can be free or for a fee. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Parking may be performed by the guest or by hotel staff.

        :return: The parking_available of this Parking.
        :rtype: bool
        """
        return self._parking_available

    @parking_available.setter
    def parking_available(self, parking_available):
        """Sets the parking_available of this Parking.

        Parking available. The hotel allows the cars of guests to be parked. Can be free or for a fee. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Parking may be performed by the guest or by hotel staff.

        :param parking_available: The parking_available of this Parking.
        :type parking_available: bool
        """

        self._parking_available = parking_available

    @property
    def parking_available_exception(self):
        """Gets the parking_available_exception of this Parking.

        Parking available exception.

        :return: The parking_available_exception of this Parking.
        :rtype: str
        """
        return self._parking_available_exception

    @parking_available_exception.setter
    def parking_available_exception(self, parking_available_exception):
        """Sets the parking_available_exception of this Parking.

        Parking available exception.

        :param parking_available_exception: The parking_available_exception of this Parking.
        :type parking_available_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if parking_available_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `parking_available_exception` ({0}), must be one of {1}"
                .format(parking_available_exception, allowed_values)
            )

        self._parking_available_exception = parking_available_exception

    @property
    def self_parking_available(self):
        """Gets the self_parking_available of this Parking.

        Self parking available. Guests park their own cars. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Can be free or for a fee.

        :return: The self_parking_available of this Parking.
        :rtype: bool
        """
        return self._self_parking_available

    @self_parking_available.setter
    def self_parking_available(self, self_parking_available):
        """Sets the self_parking_available of this Parking.

        Self parking available. Guests park their own cars. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Can be free or for a fee.

        :param self_parking_available: The self_parking_available of this Parking.
        :type self_parking_available: bool
        """

        self._self_parking_available = self_parking_available

    @property
    def self_parking_available_exception(self):
        """Gets the self_parking_available_exception of this Parking.

        Self parking available exception.

        :return: The self_parking_available_exception of this Parking.
        :rtype: str
        """
        return self._self_parking_available_exception

    @self_parking_available_exception.setter
    def self_parking_available_exception(self, self_parking_available_exception):
        """Sets the self_parking_available_exception of this Parking.

        Self parking available exception.

        :param self_parking_available_exception: The self_parking_available_exception of this Parking.
        :type self_parking_available_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if self_parking_available_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `self_parking_available_exception` ({0}), must be one of {1}"
                .format(self_parking_available_exception, allowed_values)
            )

        self._self_parking_available_exception = self_parking_available_exception

    @property
    def valet_parking_available(self):
        """Gets the valet_parking_available of this Parking.

        Valet parking available. Hotel staff member parks the cars of guests. Parking with this service can be free or for a fee.

        :return: The valet_parking_available of this Parking.
        :rtype: bool
        """
        return self._valet_parking_available

    @valet_parking_available.setter
    def valet_parking_available(self, valet_parking_available):
        """Sets the valet_parking_available of this Parking.

        Valet parking available. Hotel staff member parks the cars of guests. Parking with this service can be free or for a fee.

        :param valet_parking_available: The valet_parking_available of this Parking.
        :type valet_parking_available: bool
        """

        self._valet_parking_available = valet_parking_available

    @property
    def valet_parking_available_exception(self):
        """Gets the valet_parking_available_exception of this Parking.

        Valet parking available exception.

        :return: The valet_parking_available_exception of this Parking.
        :rtype: str
        """
        return self._valet_parking_available_exception

    @valet_parking_available_exception.setter
    def valet_parking_available_exception(self, valet_parking_available_exception):
        """Sets the valet_parking_available_exception of this Parking.

        Valet parking available exception.

        :param valet_parking_available_exception: The valet_parking_available_exception of this Parking.
        :type valet_parking_available_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if valet_parking_available_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `valet_parking_available_exception` ({0}), must be one of {1}"
                .format(valet_parking_available_exception, allowed_values)
            )

        self._valet_parking_available_exception = valet_parking_available_exception
