# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.call_to_action import CallToAction
from openapi_server.models.local_post_event import LocalPostEvent
from openapi_server.models.local_post_offer import LocalPostOffer
from openapi_server.models.media_item import MediaItem
from openapi_server import util


class LocalPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_type: str=None, call_to_action: CallToAction=None, create_time: str=None, event: LocalPostEvent=None, language_code: str=None, media: List[MediaItem]=None, name: str=None, offer: LocalPostOffer=None, search_url: str=None, state: str=None, summary: str=None, topic_type: str=None, update_time: str=None):
        """LocalPost - a model defined in OpenAPI

        :param alert_type: The alert_type of this LocalPost.
        :param call_to_action: The call_to_action of this LocalPost.
        :param create_time: The create_time of this LocalPost.
        :param event: The event of this LocalPost.
        :param language_code: The language_code of this LocalPost.
        :param media: The media of this LocalPost.
        :param name: The name of this LocalPost.
        :param offer: The offer of this LocalPost.
        :param search_url: The search_url of this LocalPost.
        :param state: The state of this LocalPost.
        :param summary: The summary of this LocalPost.
        :param topic_type: The topic_type of this LocalPost.
        :param update_time: The update_time of this LocalPost.
        """
        self.openapi_types = {
            'alert_type': str,
            'call_to_action': CallToAction,
            'create_time': str,
            'event': LocalPostEvent,
            'language_code': str,
            'media': List[MediaItem],
            'name': str,
            'offer': LocalPostOffer,
            'search_url': str,
            'state': str,
            'summary': str,
            'topic_type': str,
            'update_time': str
        }

        self.attribute_map = {
            'alert_type': 'alertType',
            'call_to_action': 'callToAction',
            'create_time': 'createTime',
            'event': 'event',
            'language_code': 'languageCode',
            'media': 'media',
            'name': 'name',
            'offer': 'offer',
            'search_url': 'searchUrl',
            'state': 'state',
            'summary': 'summary',
            'topic_type': 'topicType',
            'update_time': 'updateTime'
        }

        self._alert_type = alert_type
        self._call_to_action = call_to_action
        self._create_time = create_time
        self._event = event
        self._language_code = language_code
        self._media = media
        self._name = name
        self._offer = offer
        self._search_url = search_url
        self._state = state
        self._summary = summary
        self._topic_type = topic_type
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocalPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocalPost of this LocalPost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_type(self):
        """Gets the alert_type of this LocalPost.

        The type of alert the post is created for. This field is only applicable for posts of topic_type Alert, and behaves as a sub-type of Alerts.

        :return: The alert_type of this LocalPost.
        :rtype: str
        """
        return self._alert_type

    @alert_type.setter
    def alert_type(self, alert_type):
        """Sets the alert_type of this LocalPost.

        The type of alert the post is created for. This field is only applicable for posts of topic_type Alert, and behaves as a sub-type of Alerts.

        :param alert_type: The alert_type of this LocalPost.
        :type alert_type: str
        """
        allowed_values = ["ALERT_TYPE_UNSPECIFIED", "COVID_19"]  # noqa: E501
        if alert_type not in allowed_values:
            raise ValueError(
                "Invalid value for `alert_type` ({0}), must be one of {1}"
                .format(alert_type, allowed_values)
            )

        self._alert_type = alert_type

    @property
    def call_to_action(self):
        """Gets the call_to_action of this LocalPost.


        :return: The call_to_action of this LocalPost.
        :rtype: CallToAction
        """
        return self._call_to_action

    @call_to_action.setter
    def call_to_action(self, call_to_action):
        """Sets the call_to_action of this LocalPost.


        :param call_to_action: The call_to_action of this LocalPost.
        :type call_to_action: CallToAction
        """

        self._call_to_action = call_to_action

    @property
    def create_time(self):
        """Gets the create_time of this LocalPost.

        Output only. Time of the creation of the post.

        :return: The create_time of this LocalPost.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this LocalPost.

        Output only. Time of the creation of the post.

        :param create_time: The create_time of this LocalPost.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def event(self):
        """Gets the event of this LocalPost.


        :return: The event of this LocalPost.
        :rtype: LocalPostEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this LocalPost.


        :param event: The event of this LocalPost.
        :type event: LocalPostEvent
        """

        self._event = event

    @property
    def language_code(self):
        """Gets the language_code of this LocalPost.

        The language of the local post.

        :return: The language_code of this LocalPost.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this LocalPost.

        The language of the local post.

        :param language_code: The language_code of this LocalPost.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def media(self):
        """Gets the media of this LocalPost.

        The media associated with the post. source_url is the only supported data field for a LocalPost MediaItem.

        :return: The media of this LocalPost.
        :rtype: List[MediaItem]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this LocalPost.

        The media associated with the post. source_url is the only supported data field for a LocalPost MediaItem.

        :param media: The media of this LocalPost.
        :type media: List[MediaItem]
        """

        self._media = media

    @property
    def name(self):
        """Gets the name of this LocalPost.

        Output only. Google identifier for this local post in the form: `accounts/{account_id}/locations/{location_id}/localPosts/{local_post_id}`

        :return: The name of this LocalPost.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocalPost.

        Output only. Google identifier for this local post in the form: `accounts/{account_id}/locations/{location_id}/localPosts/{local_post_id}`

        :param name: The name of this LocalPost.
        :type name: str
        """

        self._name = name

    @property
    def offer(self):
        """Gets the offer of this LocalPost.


        :return: The offer of this LocalPost.
        :rtype: LocalPostOffer
        """
        return self._offer

    @offer.setter
    def offer(self, offer):
        """Sets the offer of this LocalPost.


        :param offer: The offer of this LocalPost.
        :type offer: LocalPostOffer
        """

        self._offer = offer

    @property
    def search_url(self):
        """Gets the search_url of this LocalPost.

        Output only. The link to the local post in Google search. This link can be used to share the post via social media, email, text, etc.

        :return: The search_url of this LocalPost.
        :rtype: str
        """
        return self._search_url

    @search_url.setter
    def search_url(self, search_url):
        """Sets the search_url of this LocalPost.

        Output only. The link to the local post in Google search. This link can be used to share the post via social media, email, text, etc.

        :param search_url: The search_url of this LocalPost.
        :type search_url: str
        """

        self._search_url = search_url

    @property
    def state(self):
        """Gets the state of this LocalPost.

        Output only. The state of the post, indicating what part of its lifecycle it is in.

        :return: The state of this LocalPost.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LocalPost.

        Output only. The state of the post, indicating what part of its lifecycle it is in.

        :param state: The state of this LocalPost.
        :type state: str
        """
        allowed_values = ["LOCAL_POST_STATE_UNSPECIFIED", "REJECTED", "LIVE", "PROCESSING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def summary(self):
        """Gets the summary of this LocalPost.

        Description/body of the local post.

        :return: The summary of this LocalPost.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this LocalPost.

        Description/body of the local post.

        :param summary: The summary of this LocalPost.
        :type summary: str
        """

        self._summary = summary

    @property
    def topic_type(self):
        """Gets the topic_type of this LocalPost.

        Required. The topic type of the post: standard, event, offer, or alert.

        :return: The topic_type of this LocalPost.
        :rtype: str
        """
        return self._topic_type

    @topic_type.setter
    def topic_type(self, topic_type):
        """Sets the topic_type of this LocalPost.

        Required. The topic type of the post: standard, event, offer, or alert.

        :param topic_type: The topic_type of this LocalPost.
        :type topic_type: str
        """
        allowed_values = ["LOCAL_POST_TOPIC_TYPE_UNSPECIFIED", "STANDARD", "EVENT", "OFFER", "ALERT"]  # noqa: E501
        if topic_type not in allowed_values:
            raise ValueError(
                "Invalid value for `topic_type` ({0}), must be one of {1}"
                .format(topic_type, allowed_values)
            )

        self._topic_type = topic_type

    @property
    def update_time(self):
        """Gets the update_time of this LocalPost.

        Output only. Time of the last modification of the post made by the user.

        :return: The update_time of this LocalPost.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this LocalPost.

        Output only. Time of the last modification of the post made by the user.

        :param update_time: The update_time of this LocalPost.
        :type update_time: str
        """

        self._update_time = update_time
