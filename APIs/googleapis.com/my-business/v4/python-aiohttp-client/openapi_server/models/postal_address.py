# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostalAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_lines: List[str]=None, administrative_area: str=None, language_code: str=None, locality: str=None, organization: str=None, postal_code: str=None, recipients: List[str]=None, region_code: str=None, revision: int=None, sorting_code: str=None, sublocality: str=None):
        """PostalAddress - a model defined in OpenAPI

        :param address_lines: The address_lines of this PostalAddress.
        :param administrative_area: The administrative_area of this PostalAddress.
        :param language_code: The language_code of this PostalAddress.
        :param locality: The locality of this PostalAddress.
        :param organization: The organization of this PostalAddress.
        :param postal_code: The postal_code of this PostalAddress.
        :param recipients: The recipients of this PostalAddress.
        :param region_code: The region_code of this PostalAddress.
        :param revision: The revision of this PostalAddress.
        :param sorting_code: The sorting_code of this PostalAddress.
        :param sublocality: The sublocality of this PostalAddress.
        """
        self.openapi_types = {
            'address_lines': List[str],
            'administrative_area': str,
            'language_code': str,
            'locality': str,
            'organization': str,
            'postal_code': str,
            'recipients': List[str],
            'region_code': str,
            'revision': int,
            'sorting_code': str,
            'sublocality': str
        }

        self.attribute_map = {
            'address_lines': 'addressLines',
            'administrative_area': 'administrativeArea',
            'language_code': 'languageCode',
            'locality': 'locality',
            'organization': 'organization',
            'postal_code': 'postalCode',
            'recipients': 'recipients',
            'region_code': 'regionCode',
            'revision': 'revision',
            'sorting_code': 'sortingCode',
            'sublocality': 'sublocality'
        }

        self._address_lines = address_lines
        self._administrative_area = administrative_area
        self._language_code = language_code
        self._locality = locality
        self._organization = organization
        self._postal_code = postal_code
        self._recipients = recipients
        self._region_code = region_code
        self._revision = revision
        self._sorting_code = sorting_code
        self._sublocality = sublocality

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostalAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostalAddress of this PostalAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_lines(self):
        """Gets the address_lines of this PostalAddress.

        Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).

        :return: The address_lines of this PostalAddress.
        :rtype: List[str]
        """
        return self._address_lines

    @address_lines.setter
    def address_lines(self, address_lines):
        """Sets the address_lines of this PostalAddress.

        Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).

        :param address_lines: The address_lines of this PostalAddress.
        :type address_lines: List[str]
        """

        self._address_lines = address_lines

    @property
    def administrative_area(self):
        """Gets the administrative_area of this PostalAddress.

        Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.

        :return: The administrative_area of this PostalAddress.
        :rtype: str
        """
        return self._administrative_area

    @administrative_area.setter
    def administrative_area(self, administrative_area):
        """Sets the administrative_area of this PostalAddress.

        Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.

        :param administrative_area: The administrative_area of this PostalAddress.
        :type administrative_area: str
        """

        self._administrative_area = administrative_area

    @property
    def language_code(self):
        """Gets the language_code of this PostalAddress.

        Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\".

        :return: The language_code of this PostalAddress.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this PostalAddress.

        Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\".

        :param language_code: The language_code of this PostalAddress.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def locality(self):
        """Gets the locality of this PostalAddress.

        Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.

        :return: The locality of this PostalAddress.
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this PostalAddress.

        Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.

        :param locality: The locality of this PostalAddress.
        :type locality: str
        """

        self._locality = locality

    @property
    def organization(self):
        """Gets the organization of this PostalAddress.

        Optional. The name of the organization at the address.

        :return: The organization of this PostalAddress.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this PostalAddress.

        Optional. The name of the organization at the address.

        :param organization: The organization of this PostalAddress.
        :type organization: str
        """

        self._organization = organization

    @property
    def postal_code(self):
        """Gets the postal_code of this PostalAddress.

        Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).

        :return: The postal_code of this PostalAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this PostalAddress.

        Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).

        :param postal_code: The postal_code of this PostalAddress.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def recipients(self):
        """Gets the recipients of this PostalAddress.

        Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information.

        :return: The recipients of this PostalAddress.
        :rtype: List[str]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this PostalAddress.

        Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information.

        :param recipients: The recipients of this PostalAddress.
        :type recipients: List[str]
        """

        self._recipients = recipients

    @property
    def region_code(self):
        """Gets the region_code of this PostalAddress.

        Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland.

        :return: The region_code of this PostalAddress.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this PostalAddress.

        Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland.

        :param region_code: The region_code of this PostalAddress.
        :type region_code: str
        """

        self._region_code = region_code

    @property
    def revision(self):
        """Gets the revision of this PostalAddress.

        The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.

        :return: The revision of this PostalAddress.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this PostalAddress.

        The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.

        :param revision: The revision of this PostalAddress.
        :type revision: int
        """

        self._revision = revision

    @property
    def sorting_code(self):
        """Gets the sorting_code of this PostalAddress.

        Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire).

        :return: The sorting_code of this PostalAddress.
        :rtype: str
        """
        return self._sorting_code

    @sorting_code.setter
    def sorting_code(self, sorting_code):
        """Sets the sorting_code of this PostalAddress.

        Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire).

        :param sorting_code: The sorting_code of this PostalAddress.
        :type sorting_code: str
        """

        self._sorting_code = sorting_code

    @property
    def sublocality(self):
        """Gets the sublocality of this PostalAddress.

        Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.

        :return: The sublocality of this PostalAddress.
        :rtype: str
        """
        return self._sublocality

    @sublocality.setter
    def sublocality(self, sublocality):
        """Sets the sublocality of this PostalAddress.

        Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.

        :param sublocality: The sublocality of this PostalAddress.
        :type sublocality: str
        """

        self._sublocality = sublocality
