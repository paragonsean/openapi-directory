# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.guest_unit_features import GuestUnitFeatures
from openapi_server import util


class GuestUnitType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, codes: List[str]=None, features: GuestUnitFeatures=None, label: str=None):
        """GuestUnitType - a model defined in OpenAPI

        :param codes: The codes of this GuestUnitType.
        :param features: The features of this GuestUnitType.
        :param label: The label of this GuestUnitType.
        """
        self.openapi_types = {
            'codes': List[str],
            'features': GuestUnitFeatures,
            'label': str
        }

        self.attribute_map = {
            'codes': 'codes',
            'features': 'features',
            'label': 'label'
        }

        self._codes = codes
        self._features = features
        self._label = label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GuestUnitType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GuestUnitType of this GuestUnitType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def codes(self):
        """Gets the codes of this GuestUnitType.

        Required. Unit or room code identifiers for a single GuestUnitType. Each code must be unique within a Lodging instance.

        :return: The codes of this GuestUnitType.
        :rtype: List[str]
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this GuestUnitType.

        Required. Unit or room code identifiers for a single GuestUnitType. Each code must be unique within a Lodging instance.

        :param codes: The codes of this GuestUnitType.
        :type codes: List[str]
        """

        self._codes = codes

    @property
    def features(self):
        """Gets the features of this GuestUnitType.


        :return: The features of this GuestUnitType.
        :rtype: GuestUnitFeatures
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this GuestUnitType.


        :param features: The features of this GuestUnitType.
        :type features: GuestUnitFeatures
        """

        self._features = features

    @property
    def label(self):
        """Gets the label of this GuestUnitType.

        Required. Short, English label or name of the GuestUnitType. Target <50 chars.

        :return: The label of this GuestUnitType.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this GuestUnitType.

        Required. Short, English label or name of the GuestUnitType. Target <50 chars.

        :param label: The label of this GuestUnitType.
        :type label: str
        """

        self._label = label
