# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimensional_metric_value import DimensionalMetricValue
from openapi_server import util


class MetricValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimensional_values: List[DimensionalMetricValue]=None, metric: str=None, total_value: DimensionalMetricValue=None):
        """MetricValue - a model defined in OpenAPI

        :param dimensional_values: The dimensional_values of this MetricValue.
        :param metric: The metric of this MetricValue.
        :param total_value: The total_value of this MetricValue.
        """
        self.openapi_types = {
            'dimensional_values': List[DimensionalMetricValue],
            'metric': str,
            'total_value': DimensionalMetricValue
        }

        self.attribute_map = {
            'dimensional_values': 'dimensionalValues',
            'metric': 'metric',
            'total_value': 'totalValue'
        }

        self._dimensional_values = dimensional_values
        self._metric = metric
        self._total_value = total_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricValue of this MetricValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimensional_values(self):
        """Gets the dimensional_values of this MetricValue.

        Dimensional values for this metric.

        :return: The dimensional_values of this MetricValue.
        :rtype: List[DimensionalMetricValue]
        """
        return self._dimensional_values

    @dimensional_values.setter
    def dimensional_values(self, dimensional_values):
        """Sets the dimensional_values of this MetricValue.

        Dimensional values for this metric.

        :param dimensional_values: The dimensional_values of this MetricValue.
        :type dimensional_values: List[DimensionalMetricValue]
        """

        self._dimensional_values = dimensional_values

    @property
    def metric(self):
        """Gets the metric of this MetricValue.

        The metric for which the value applies.

        :return: The metric of this MetricValue.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this MetricValue.

        The metric for which the value applies.

        :param metric: The metric of this MetricValue.
        :type metric: str
        """
        allowed_values = ["METRIC_UNSPECIFIED", "ALL", "QUERIES_DIRECT", "QUERIES_INDIRECT", "QUERIES_CHAIN", "VIEWS_MAPS", "VIEWS_SEARCH", "ACTIONS_WEBSITE", "ACTIONS_PHONE", "ACTIONS_DRIVING_DIRECTIONS", "PHOTOS_VIEWS_MERCHANT", "PHOTOS_VIEWS_CUSTOMERS", "PHOTOS_COUNT_MERCHANT", "PHOTOS_COUNT_CUSTOMERS", "LOCAL_POST_VIEWS_SEARCH", "LOCAL_POST_ACTIONS_CALL_TO_ACTION"]  # noqa: E501
        if metric not in allowed_values:
            raise ValueError(
                "Invalid value for `metric` ({0}), must be one of {1}"
                .format(metric, allowed_values)
            )

        self._metric = metric

    @property
    def total_value(self):
        """Gets the total_value of this MetricValue.


        :return: The total_value of this MetricValue.
        :rtype: DimensionalMetricValue
        """
        return self._total_value

    @total_value.setter
    def total_value(self, total_value):
        """Sets the total_value of this MetricValue.


        :param total_value: The total_value of this MetricValue.
        :type total_value: DimensionalMetricValue
        """

        self._total_value = total_value
