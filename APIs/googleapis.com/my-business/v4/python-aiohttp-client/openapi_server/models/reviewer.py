# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Reviewer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, is_anonymous: bool=None, profile_photo_url: str=None):
        """Reviewer - a model defined in OpenAPI

        :param display_name: The display_name of this Reviewer.
        :param is_anonymous: The is_anonymous of this Reviewer.
        :param profile_photo_url: The profile_photo_url of this Reviewer.
        """
        self.openapi_types = {
            'display_name': str,
            'is_anonymous': bool,
            'profile_photo_url': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'is_anonymous': 'isAnonymous',
            'profile_photo_url': 'profilePhotoUrl'
        }

        self._display_name = display_name
        self._is_anonymous = is_anonymous
        self._profile_photo_url = profile_photo_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Reviewer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Reviewer of this Reviewer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this Reviewer.

        The name of the reviewer. Only populated with the reviewer's real name if `is_anonymous` is false.

        :return: The display_name of this Reviewer.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Reviewer.

        The name of the reviewer. Only populated with the reviewer's real name if `is_anonymous` is false.

        :param display_name: The display_name of this Reviewer.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def is_anonymous(self):
        """Gets the is_anonymous of this Reviewer.

        Indicates whether the reviewer has opted to remain anonymous.

        :return: The is_anonymous of this Reviewer.
        :rtype: bool
        """
        return self._is_anonymous

    @is_anonymous.setter
    def is_anonymous(self, is_anonymous):
        """Sets the is_anonymous of this Reviewer.

        Indicates whether the reviewer has opted to remain anonymous.

        :param is_anonymous: The is_anonymous of this Reviewer.
        :type is_anonymous: bool
        """

        self._is_anonymous = is_anonymous

    @property
    def profile_photo_url(self):
        """Gets the profile_photo_url of this Reviewer.

        The profile photo link of the reviewer. Only populated if `is_anonymous` is false.

        :return: The profile_photo_url of this Reviewer.
        :rtype: str
        """
        return self._profile_photo_url

    @profile_photo_url.setter
    def profile_photo_url(self, profile_photo_url):
        """Sets the profile_photo_url of this Reviewer.

        The profile photo link of the reviewer. Only populated if `is_anonymous` is false.

        :param profile_photo_url: The profile_photo_url of this Reviewer.
        :type profile_photo_url: str
        """

        self._profile_photo_url = profile_photo_url
