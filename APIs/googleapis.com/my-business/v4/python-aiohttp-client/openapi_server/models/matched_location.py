# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location import Location
from openapi_server import util


class MatchedLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_exact_match: bool=None, location: Location=None):
        """MatchedLocation - a model defined in OpenAPI

        :param is_exact_match: The is_exact_match of this MatchedLocation.
        :param location: The location of this MatchedLocation.
        """
        self.openapi_types = {
            'is_exact_match': bool,
            'location': Location
        }

        self.attribute_map = {
            'is_exact_match': 'isExactMatch',
            'location': 'location'
        }

        self._is_exact_match = is_exact_match
        self._location = location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatchedLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatchedLocation of this MatchedLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_exact_match(self):
        """Gets the is_exact_match of this MatchedLocation.

        Is this an exact match?

        :return: The is_exact_match of this MatchedLocation.
        :rtype: bool
        """
        return self._is_exact_match

    @is_exact_match.setter
    def is_exact_match(self, is_exact_match):
        """Sets the is_exact_match of this MatchedLocation.

        Is this an exact match?

        :param is_exact_match: The is_exact_match of this MatchedLocation.
        :type is_exact_match: bool
        """

        self._is_exact_match = is_exact_match

    @property
    def location(self):
        """Gets the location of this MatchedLocation.


        :return: The location of this MatchedLocation.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MatchedLocation.


        :param location: The location of this MatchedLocation.
        :type location: Location
        """

        self._location = location
