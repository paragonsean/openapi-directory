# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocationState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_delete: bool=None, can_have_food_menus: bool=None, can_modify_service_list: bool=None, can_operate_health_data: bool=None, can_operate_lodging_data: bool=None, can_update: bool=None, has_pending_edits: bool=None, has_pending_verification: bool=None, is_disabled: bool=None, is_disconnected: bool=None, is_duplicate: bool=None, is_google_updated: bool=None, is_local_post_api_disabled: bool=None, is_pending_review: bool=None, is_published: bool=None, is_suspended: bool=None, is_verified: bool=None, needs_reverification: bool=None):
        """LocationState - a model defined in OpenAPI

        :param can_delete: The can_delete of this LocationState.
        :param can_have_food_menus: The can_have_food_menus of this LocationState.
        :param can_modify_service_list: The can_modify_service_list of this LocationState.
        :param can_operate_health_data: The can_operate_health_data of this LocationState.
        :param can_operate_lodging_data: The can_operate_lodging_data of this LocationState.
        :param can_update: The can_update of this LocationState.
        :param has_pending_edits: The has_pending_edits of this LocationState.
        :param has_pending_verification: The has_pending_verification of this LocationState.
        :param is_disabled: The is_disabled of this LocationState.
        :param is_disconnected: The is_disconnected of this LocationState.
        :param is_duplicate: The is_duplicate of this LocationState.
        :param is_google_updated: The is_google_updated of this LocationState.
        :param is_local_post_api_disabled: The is_local_post_api_disabled of this LocationState.
        :param is_pending_review: The is_pending_review of this LocationState.
        :param is_published: The is_published of this LocationState.
        :param is_suspended: The is_suspended of this LocationState.
        :param is_verified: The is_verified of this LocationState.
        :param needs_reverification: The needs_reverification of this LocationState.
        """
        self.openapi_types = {
            'can_delete': bool,
            'can_have_food_menus': bool,
            'can_modify_service_list': bool,
            'can_operate_health_data': bool,
            'can_operate_lodging_data': bool,
            'can_update': bool,
            'has_pending_edits': bool,
            'has_pending_verification': bool,
            'is_disabled': bool,
            'is_disconnected': bool,
            'is_duplicate': bool,
            'is_google_updated': bool,
            'is_local_post_api_disabled': bool,
            'is_pending_review': bool,
            'is_published': bool,
            'is_suspended': bool,
            'is_verified': bool,
            'needs_reverification': bool
        }

        self.attribute_map = {
            'can_delete': 'canDelete',
            'can_have_food_menus': 'canHaveFoodMenus',
            'can_modify_service_list': 'canModifyServiceList',
            'can_operate_health_data': 'canOperateHealthData',
            'can_operate_lodging_data': 'canOperateLodgingData',
            'can_update': 'canUpdate',
            'has_pending_edits': 'hasPendingEdits',
            'has_pending_verification': 'hasPendingVerification',
            'is_disabled': 'isDisabled',
            'is_disconnected': 'isDisconnected',
            'is_duplicate': 'isDuplicate',
            'is_google_updated': 'isGoogleUpdated',
            'is_local_post_api_disabled': 'isLocalPostApiDisabled',
            'is_pending_review': 'isPendingReview',
            'is_published': 'isPublished',
            'is_suspended': 'isSuspended',
            'is_verified': 'isVerified',
            'needs_reverification': 'needsReverification'
        }

        self._can_delete = can_delete
        self._can_have_food_menus = can_have_food_menus
        self._can_modify_service_list = can_modify_service_list
        self._can_operate_health_data = can_operate_health_data
        self._can_operate_lodging_data = can_operate_lodging_data
        self._can_update = can_update
        self._has_pending_edits = has_pending_edits
        self._has_pending_verification = has_pending_verification
        self._is_disabled = is_disabled
        self._is_disconnected = is_disconnected
        self._is_duplicate = is_duplicate
        self._is_google_updated = is_google_updated
        self._is_local_post_api_disabled = is_local_post_api_disabled
        self._is_pending_review = is_pending_review
        self._is_published = is_published
        self._is_suspended = is_suspended
        self._is_verified = is_verified
        self._needs_reverification = needs_reverification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationState of this LocationState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_delete(self):
        """Gets the can_delete of this LocationState.

        Output only. Indicates whether the location can be deleted using the Google My Business API.

        :return: The can_delete of this LocationState.
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this LocationState.

        Output only. Indicates whether the location can be deleted using the Google My Business API.

        :param can_delete: The can_delete of this LocationState.
        :type can_delete: bool
        """

        self._can_delete = can_delete

    @property
    def can_have_food_menus(self):
        """Gets the can_have_food_menus of this LocationState.

        Output only. Indicates if the listing is eligible for food menu.

        :return: The can_have_food_menus of this LocationState.
        :rtype: bool
        """
        return self._can_have_food_menus

    @can_have_food_menus.setter
    def can_have_food_menus(self, can_have_food_menus):
        """Sets the can_have_food_menus of this LocationState.

        Output only. Indicates if the listing is eligible for food menu.

        :param can_have_food_menus: The can_have_food_menus of this LocationState.
        :type can_have_food_menus: bool
        """

        self._can_have_food_menus = can_have_food_menus

    @property
    def can_modify_service_list(self):
        """Gets the can_modify_service_list of this LocationState.

        Output only. Indicates if the listing can modify a ServiceList.

        :return: The can_modify_service_list of this LocationState.
        :rtype: bool
        """
        return self._can_modify_service_list

    @can_modify_service_list.setter
    def can_modify_service_list(self, can_modify_service_list):
        """Sets the can_modify_service_list of this LocationState.

        Output only. Indicates if the listing can modify a ServiceList.

        :param can_modify_service_list: The can_modify_service_list of this LocationState.
        :type can_modify_service_list: bool
        """

        self._can_modify_service_list = can_modify_service_list

    @property
    def can_operate_health_data(self):
        """Gets the can_operate_health_data of this LocationState.

        Output only. Indicates whether the location can operate on Health data.

        :return: The can_operate_health_data of this LocationState.
        :rtype: bool
        """
        return self._can_operate_health_data

    @can_operate_health_data.setter
    def can_operate_health_data(self, can_operate_health_data):
        """Sets the can_operate_health_data of this LocationState.

        Output only. Indicates whether the location can operate on Health data.

        :param can_operate_health_data: The can_operate_health_data of this LocationState.
        :type can_operate_health_data: bool
        """

        self._can_operate_health_data = can_operate_health_data

    @property
    def can_operate_lodging_data(self):
        """Gets the can_operate_lodging_data of this LocationState.

        Output only. Indicates whether the location can operate on Lodging data.

        :return: The can_operate_lodging_data of this LocationState.
        :rtype: bool
        """
        return self._can_operate_lodging_data

    @can_operate_lodging_data.setter
    def can_operate_lodging_data(self, can_operate_lodging_data):
        """Sets the can_operate_lodging_data of this LocationState.

        Output only. Indicates whether the location can operate on Lodging data.

        :param can_operate_lodging_data: The can_operate_lodging_data of this LocationState.
        :type can_operate_lodging_data: bool
        """

        self._can_operate_lodging_data = can_operate_lodging_data

    @property
    def can_update(self):
        """Gets the can_update of this LocationState.

        Output only. Indicates whether the location can be updated.

        :return: The can_update of this LocationState.
        :rtype: bool
        """
        return self._can_update

    @can_update.setter
    def can_update(self, can_update):
        """Sets the can_update of this LocationState.

        Output only. Indicates whether the location can be updated.

        :param can_update: The can_update of this LocationState.
        :type can_update: bool
        """

        self._can_update = can_update

    @property
    def has_pending_edits(self):
        """Gets the has_pending_edits of this LocationState.

        Output only. Indicates whether any of this Location's properties are in the edit pending state.

        :return: The has_pending_edits of this LocationState.
        :rtype: bool
        """
        return self._has_pending_edits

    @has_pending_edits.setter
    def has_pending_edits(self, has_pending_edits):
        """Sets the has_pending_edits of this LocationState.

        Output only. Indicates whether any of this Location's properties are in the edit pending state.

        :param has_pending_edits: The has_pending_edits of this LocationState.
        :type has_pending_edits: bool
        """

        self._has_pending_edits = has_pending_edits

    @property
    def has_pending_verification(self):
        """Gets the has_pending_verification of this LocationState.

        Output only. Indicates whether the location has pending verification requests.

        :return: The has_pending_verification of this LocationState.
        :rtype: bool
        """
        return self._has_pending_verification

    @has_pending_verification.setter
    def has_pending_verification(self, has_pending_verification):
        """Sets the has_pending_verification of this LocationState.

        Output only. Indicates whether the location has pending verification requests.

        :param has_pending_verification: The has_pending_verification of this LocationState.
        :type has_pending_verification: bool
        """

        self._has_pending_verification = has_pending_verification

    @property
    def is_disabled(self):
        """Gets the is_disabled of this LocationState.

        Output only. Indicates whether the location is disabled.

        :return: The is_disabled of this LocationState.
        :rtype: bool
        """
        return self._is_disabled

    @is_disabled.setter
    def is_disabled(self, is_disabled):
        """Sets the is_disabled of this LocationState.

        Output only. Indicates whether the location is disabled.

        :param is_disabled: The is_disabled of this LocationState.
        :type is_disabled: bool
        """

        self._is_disabled = is_disabled

    @property
    def is_disconnected(self):
        """Gets the is_disconnected of this LocationState.

        Output only. Indicates whether the location is disconnected from a place on Google Maps.

        :return: The is_disconnected of this LocationState.
        :rtype: bool
        """
        return self._is_disconnected

    @is_disconnected.setter
    def is_disconnected(self, is_disconnected):
        """Sets the is_disconnected of this LocationState.

        Output only. Indicates whether the location is disconnected from a place on Google Maps.

        :param is_disconnected: The is_disconnected of this LocationState.
        :type is_disconnected: bool
        """

        self._is_disconnected = is_disconnected

    @property
    def is_duplicate(self):
        """Gets the is_duplicate of this LocationState.

        Output only. Indicates whether the location is a duplicate of another location.

        :return: The is_duplicate of this LocationState.
        :rtype: bool
        """
        return self._is_duplicate

    @is_duplicate.setter
    def is_duplicate(self, is_duplicate):
        """Sets the is_duplicate of this LocationState.

        Output only. Indicates whether the location is a duplicate of another location.

        :param is_duplicate: The is_duplicate of this LocationState.
        :type is_duplicate: bool
        """

        self._is_duplicate = is_duplicate

    @property
    def is_google_updated(self):
        """Gets the is_google_updated of this LocationState.

        Output only. Indicates whether the place ID associated with this location has updates.

        :return: The is_google_updated of this LocationState.
        :rtype: bool
        """
        return self._is_google_updated

    @is_google_updated.setter
    def is_google_updated(self, is_google_updated):
        """Sets the is_google_updated of this LocationState.

        Output only. Indicates whether the place ID associated with this location has updates.

        :param is_google_updated: The is_google_updated of this LocationState.
        :type is_google_updated: bool
        """

        self._is_google_updated = is_google_updated

    @property
    def is_local_post_api_disabled(self):
        """Gets the is_local_post_api_disabled of this LocationState.

        Output only. Indicates whether [accounts.locations.localPosts](/my-business/reference/rest/v4/accounts.locations.localPosts) is disabled for this location.

        :return: The is_local_post_api_disabled of this LocationState.
        :rtype: bool
        """
        return self._is_local_post_api_disabled

    @is_local_post_api_disabled.setter
    def is_local_post_api_disabled(self, is_local_post_api_disabled):
        """Sets the is_local_post_api_disabled of this LocationState.

        Output only. Indicates whether [accounts.locations.localPosts](/my-business/reference/rest/v4/accounts.locations.localPosts) is disabled for this location.

        :param is_local_post_api_disabled: The is_local_post_api_disabled of this LocationState.
        :type is_local_post_api_disabled: bool
        """

        self._is_local_post_api_disabled = is_local_post_api_disabled

    @property
    def is_pending_review(self):
        """Gets the is_pending_review of this LocationState.

        Output only. Indicates whether the review of the location is pending.

        :return: The is_pending_review of this LocationState.
        :rtype: bool
        """
        return self._is_pending_review

    @is_pending_review.setter
    def is_pending_review(self, is_pending_review):
        """Sets the is_pending_review of this LocationState.

        Output only. Indicates whether the review of the location is pending.

        :param is_pending_review: The is_pending_review of this LocationState.
        :type is_pending_review: bool
        """

        self._is_pending_review = is_pending_review

    @property
    def is_published(self):
        """Gets the is_published of this LocationState.

        Output only. Indicates whether the location is published.

        :return: The is_published of this LocationState.
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published):
        """Sets the is_published of this LocationState.

        Output only. Indicates whether the location is published.

        :param is_published: The is_published of this LocationState.
        :type is_published: bool
        """

        self._is_published = is_published

    @property
    def is_suspended(self):
        """Gets the is_suspended of this LocationState.

        Output only. Indicates whether the location is suspended. Suspended locations are not visible to end users in Google products. If you believe this was a mistake, see the [help center article] (https://support.google.com/business/answer/4569145).

        :return: The is_suspended of this LocationState.
        :rtype: bool
        """
        return self._is_suspended

    @is_suspended.setter
    def is_suspended(self, is_suspended):
        """Sets the is_suspended of this LocationState.

        Output only. Indicates whether the location is suspended. Suspended locations are not visible to end users in Google products. If you believe this was a mistake, see the [help center article] (https://support.google.com/business/answer/4569145).

        :param is_suspended: The is_suspended of this LocationState.
        :type is_suspended: bool
        """

        self._is_suspended = is_suspended

    @property
    def is_verified(self):
        """Gets the is_verified of this LocationState.

        Output only. Indicates whether the location is verified.

        :return: The is_verified of this LocationState.
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this LocationState.

        Output only. Indicates whether the location is verified.

        :param is_verified: The is_verified of this LocationState.
        :type is_verified: bool
        """

        self._is_verified = is_verified

    @property
    def needs_reverification(self):
        """Gets the needs_reverification of this LocationState.

        Output only. Indicates whether the location requires reverification.

        :return: The needs_reverification of this LocationState.
        :rtype: bool
        """
        return self._needs_reverification

    @needs_reverification.setter
    def needs_reverification(self, needs_reverification):
        """Sets the needs_reverification of this LocationState.

        Output only. Indicates whether the location requires reverification.

        :param needs_reverification: The needs_reverification of this LocationState.
        :type needs_reverification: bool
        """

        self._needs_reverification = needs_reverification
