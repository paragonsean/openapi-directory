# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.calories_fact import CaloriesFact
from openapi_server.models.nutrition_fact import NutritionFact
from openapi_server import util


class NutritionFacts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calories: CaloriesFact=None, cholesterol: NutritionFact=None, protein: NutritionFact=None, sodium: NutritionFact=None, total_carbohydrate: NutritionFact=None, total_fat: NutritionFact=None):
        """NutritionFacts - a model defined in OpenAPI

        :param calories: The calories of this NutritionFacts.
        :param cholesterol: The cholesterol of this NutritionFacts.
        :param protein: The protein of this NutritionFacts.
        :param sodium: The sodium of this NutritionFacts.
        :param total_carbohydrate: The total_carbohydrate of this NutritionFacts.
        :param total_fat: The total_fat of this NutritionFacts.
        """
        self.openapi_types = {
            'calories': CaloriesFact,
            'cholesterol': NutritionFact,
            'protein': NutritionFact,
            'sodium': NutritionFact,
            'total_carbohydrate': NutritionFact,
            'total_fat': NutritionFact
        }

        self.attribute_map = {
            'calories': 'calories',
            'cholesterol': 'cholesterol',
            'protein': 'protein',
            'sodium': 'sodium',
            'total_carbohydrate': 'totalCarbohydrate',
            'total_fat': 'totalFat'
        }

        self._calories = calories
        self._cholesterol = cholesterol
        self._protein = protein
        self._sodium = sodium
        self._total_carbohydrate = total_carbohydrate
        self._total_fat = total_fat

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NutritionFacts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NutritionFacts of this NutritionFacts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calories(self):
        """Gets the calories of this NutritionFacts.


        :return: The calories of this NutritionFacts.
        :rtype: CaloriesFact
        """
        return self._calories

    @calories.setter
    def calories(self, calories):
        """Sets the calories of this NutritionFacts.


        :param calories: The calories of this NutritionFacts.
        :type calories: CaloriesFact
        """

        self._calories = calories

    @property
    def cholesterol(self):
        """Gets the cholesterol of this NutritionFacts.


        :return: The cholesterol of this NutritionFacts.
        :rtype: NutritionFact
        """
        return self._cholesterol

    @cholesterol.setter
    def cholesterol(self, cholesterol):
        """Sets the cholesterol of this NutritionFacts.


        :param cholesterol: The cholesterol of this NutritionFacts.
        :type cholesterol: NutritionFact
        """

        self._cholesterol = cholesterol

    @property
    def protein(self):
        """Gets the protein of this NutritionFacts.


        :return: The protein of this NutritionFacts.
        :rtype: NutritionFact
        """
        return self._protein

    @protein.setter
    def protein(self, protein):
        """Sets the protein of this NutritionFacts.


        :param protein: The protein of this NutritionFacts.
        :type protein: NutritionFact
        """

        self._protein = protein

    @property
    def sodium(self):
        """Gets the sodium of this NutritionFacts.


        :return: The sodium of this NutritionFacts.
        :rtype: NutritionFact
        """
        return self._sodium

    @sodium.setter
    def sodium(self, sodium):
        """Sets the sodium of this NutritionFacts.


        :param sodium: The sodium of this NutritionFacts.
        :type sodium: NutritionFact
        """

        self._sodium = sodium

    @property
    def total_carbohydrate(self):
        """Gets the total_carbohydrate of this NutritionFacts.


        :return: The total_carbohydrate of this NutritionFacts.
        :rtype: NutritionFact
        """
        return self._total_carbohydrate

    @total_carbohydrate.setter
    def total_carbohydrate(self, total_carbohydrate):
        """Sets the total_carbohydrate of this NutritionFacts.


        :param total_carbohydrate: The total_carbohydrate of this NutritionFacts.
        :type total_carbohydrate: NutritionFact
        """

        self._total_carbohydrate = total_carbohydrate

    @property
    def total_fat(self):
        """Gets the total_fat of this NutritionFacts.


        :return: The total_fat of this NutritionFacts.
        :rtype: NutritionFact
        """
        return self._total_fat

    @total_fat.setter
    def total_fat(self, total_fat):
        """Sets the total_fat of this NutritionFacts.


        :param total_fat: The total_fat of this NutritionFacts.
        :type total_fat: NutritionFact
        """

        self._total_fat = total_fat
