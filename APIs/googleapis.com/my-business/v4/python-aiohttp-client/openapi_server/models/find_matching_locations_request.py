# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FindMatchingLocationsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_code: str=None, max_cache_duration: str=None, num_results: int=None):
        """FindMatchingLocationsRequest - a model defined in OpenAPI

        :param language_code: The language_code of this FindMatchingLocationsRequest.
        :param max_cache_duration: The max_cache_duration of this FindMatchingLocationsRequest.
        :param num_results: The num_results of this FindMatchingLocationsRequest.
        """
        self.openapi_types = {
            'language_code': str,
            'max_cache_duration': str,
            'num_results': int
        }

        self.attribute_map = {
            'language_code': 'languageCode',
            'max_cache_duration': 'maxCacheDuration',
            'num_results': 'numResults'
        }

        self._language_code = language_code
        self._max_cache_duration = max_cache_duration
        self._num_results = num_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FindMatchingLocationsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FindMatchingLocationsRequest of this FindMatchingLocationsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_code(self):
        """Gets the language_code of this FindMatchingLocationsRequest.

        The preferred language for the matching location (in BCP-47 format).

        :return: The language_code of this FindMatchingLocationsRequest.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this FindMatchingLocationsRequest.

        The preferred language for the matching location (in BCP-47 format).

        :param language_code: The language_code of this FindMatchingLocationsRequest.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def max_cache_duration(self):
        """Gets the max_cache_duration of this FindMatchingLocationsRequest.

        Deprecated. This field is ignored for all requests.

        :return: The max_cache_duration of this FindMatchingLocationsRequest.
        :rtype: str
        """
        return self._max_cache_duration

    @max_cache_duration.setter
    def max_cache_duration(self, max_cache_duration):
        """Sets the max_cache_duration of this FindMatchingLocationsRequest.

        Deprecated. This field is ignored for all requests.

        :param max_cache_duration: The max_cache_duration of this FindMatchingLocationsRequest.
        :type max_cache_duration: str
        """

        self._max_cache_duration = max_cache_duration

    @property
    def num_results(self):
        """Gets the num_results of this FindMatchingLocationsRequest.

        The number of matches to return. The default value is 3, with a maximum of 10. Note that latency may increase if more are requested. There is no pagination.

        :return: The num_results of this FindMatchingLocationsRequest.
        :rtype: int
        """
        return self._num_results

    @num_results.setter
    def num_results(self, num_results):
        """Sets the num_results of this FindMatchingLocationsRequest.

        The number of matches to return. The default value is 3, with a maximum of 10. Note that latency may increase if more are requested. There is no pagination.

        :param num_results: The num_results of this FindMatchingLocationsRequest.
        :type num_results: int
        """

        self._num_results = num_results
