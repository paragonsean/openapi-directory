# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.region_count import RegionCount
from openapi_server import util


class TopDirectionSources(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_count: int=None, region_counts: List[RegionCount]=None):
        """TopDirectionSources - a model defined in OpenAPI

        :param day_count: The day_count of this TopDirectionSources.
        :param region_counts: The region_counts of this TopDirectionSources.
        """
        self.openapi_types = {
            'day_count': int,
            'region_counts': List[RegionCount]
        }

        self.attribute_map = {
            'day_count': 'dayCount',
            'region_counts': 'regionCounts'
        }

        self._day_count = day_count
        self._region_counts = region_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopDirectionSources':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TopDirectionSources of this TopDirectionSources.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_count(self):
        """Gets the day_count of this TopDirectionSources.

        The number of days data is aggregated over.

        :return: The day_count of this TopDirectionSources.
        :rtype: int
        """
        return self._day_count

    @day_count.setter
    def day_count(self, day_count):
        """Sets the day_count of this TopDirectionSources.

        The number of days data is aggregated over.

        :param day_count: The day_count of this TopDirectionSources.
        :type day_count: int
        """

        self._day_count = day_count

    @property
    def region_counts(self):
        """Gets the region_counts of this TopDirectionSources.

        Regions sorted in descending order by count.

        :return: The region_counts of this TopDirectionSources.
        :rtype: List[RegionCount]
        """
        return self._region_counts

    @region_counts.setter
    def region_counts(self, region_counts):
        """Sets the region_counts of this TopDirectionSources.

        Regions sorted in descending order by count.

        :param region_counts: The region_counts of this TopDirectionSources.
        :type region_counts: List[RegionCount]
        """

        self._region_counts = region_counts
