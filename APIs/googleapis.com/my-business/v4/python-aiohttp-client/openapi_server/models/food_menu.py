# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.food_menu_section import FoodMenuSection
from openapi_server.models.menu_label import MenuLabel
from openapi_server import util


class FoodMenu(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cuisines: List[str]=None, labels: List[MenuLabel]=None, sections: List[FoodMenuSection]=None, source_url: str=None):
        """FoodMenu - a model defined in OpenAPI

        :param cuisines: The cuisines of this FoodMenu.
        :param labels: The labels of this FoodMenu.
        :param sections: The sections of this FoodMenu.
        :param source_url: The source_url of this FoodMenu.
        """
        self.openapi_types = {
            'cuisines': List[str],
            'labels': List[MenuLabel],
            'sections': List[FoodMenuSection],
            'source_url': str
        }

        self.attribute_map = {
            'cuisines': 'cuisines',
            'labels': 'labels',
            'sections': 'sections',
            'source_url': 'sourceUrl'
        }

        self._cuisines = cuisines
        self._labels = labels
        self._sections = sections
        self._source_url = source_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FoodMenu':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FoodMenu of this FoodMenu.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cuisines(self):
        """Gets the cuisines of this FoodMenu.

        Optional. Cuisine information for the food menu. It is highly recommended to provide this field.

        :return: The cuisines of this FoodMenu.
        :rtype: List[str]
        """
        return self._cuisines

    @cuisines.setter
    def cuisines(self, cuisines):
        """Sets the cuisines of this FoodMenu.

        Optional. Cuisine information for the food menu. It is highly recommended to provide this field.

        :param cuisines: The cuisines of this FoodMenu.
        :type cuisines: List[str]
        """
        allowed_values = ["CUISINE_UNSPECIFIED", "AMERICAN", "ASIAN", "BRAZILIAN", "BREAK_FAST", "BRUNCH", "CHICKEN", "CHINESE", "FAMILY", "FAST_FOOD", "FRENCH", "GREEK", "GERMAN", "HAMBURGER", "INDIAN", "INDONESIAN", "ITALIAN", "JAPANESE", "KOREAN", "LATIN_AMERICAN", "MEDITERRANEAN", "MEXICAN", "PAKISTANI", "PIZZA", "SEAFOOD", "SPANISH", "SUSHI", "THAI", "TURKISH", "VEGETARIAN", "VIETNAMESE", "OTHER_CUISINE"]  # noqa: E501
        if not set(cuisines).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `cuisines` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(cuisines) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._cuisines = cuisines

    @property
    def labels(self):
        """Gets the labels of this FoodMenu.

        Required. Language-tagged labels for the menu. E.g. \"menu\", \"lunch special\". Display names should be 140 characters or less, with descriptions 1,000 characters or less. At least one set of labels is required.

        :return: The labels of this FoodMenu.
        :rtype: List[MenuLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this FoodMenu.

        Required. Language-tagged labels for the menu. E.g. \"menu\", \"lunch special\". Display names should be 140 characters or less, with descriptions 1,000 characters or less. At least one set of labels is required.

        :param labels: The labels of this FoodMenu.
        :type labels: List[MenuLabel]
        """

        self._labels = labels

    @property
    def sections(self):
        """Gets the sections of this FoodMenu.

        Required. Sections of the menu.

        :return: The sections of this FoodMenu.
        :rtype: List[FoodMenuSection]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this FoodMenu.

        Required. Sections of the menu.

        :param sections: The sections of this FoodMenu.
        :type sections: List[FoodMenuSection]
        """

        self._sections = sections

    @property
    def source_url(self):
        """Gets the source_url of this FoodMenu.

        Optional. Source URL of menu if there is a webpage to go to.

        :return: The source_url of this FoodMenu.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this FoodMenu.

        Optional. Source URL of menu if there is a webpage to go to.

        :param source_url: The source_url of this FoodMenu.
        :type source_url: str
        """

        self._source_url = source_url
