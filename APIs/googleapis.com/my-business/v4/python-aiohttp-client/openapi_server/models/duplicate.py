# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Duplicate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: str=None, location_name: str=None, place_id: str=None):
        """Duplicate - a model defined in OpenAPI

        :param access: The access of this Duplicate.
        :param location_name: The location_name of this Duplicate.
        :param place_id: The place_id of this Duplicate.
        """
        self.openapi_types = {
            'access': str,
            'location_name': str,
            'place_id': str
        }

        self.attribute_map = {
            'access': 'access',
            'location_name': 'locationName',
            'place_id': 'placeId'
        }

        self._access = access
        self._location_name = location_name
        self._place_id = place_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Duplicate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Duplicate of this Duplicate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this Duplicate.

        Indicates whether the user has access to the location it duplicates.

        :return: The access of this Duplicate.
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this Duplicate.

        Indicates whether the user has access to the location it duplicates.

        :param access: The access of this Duplicate.
        :type access: str
        """
        allowed_values = ["ACCESS_UNSPECIFIED", "ACCESS_UNKNOWN", "ALLOWED", "INSUFFICIENT"]  # noqa: E501
        if access not in allowed_values:
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"
                .format(access, allowed_values)
            )

        self._access = access

    @property
    def location_name(self):
        """Gets the location_name of this Duplicate.

        The resource name of the location that this duplicates. Only populated if the authenticated user has access rights to that location and that location is not deleted.

        :return: The location_name of this Duplicate.
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this Duplicate.

        The resource name of the location that this duplicates. Only populated if the authenticated user has access rights to that location and that location is not deleted.

        :param location_name: The location_name of this Duplicate.
        :type location_name: str
        """

        self._location_name = location_name

    @property
    def place_id(self):
        """Gets the place_id of this Duplicate.

        The place ID of the location that this duplicates.

        :return: The place_id of this Duplicate.
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this Duplicate.

        The place ID of the location that this duplicates.

        :param place_id: The place_id of this Duplicate.
        :type place_id: str
        """

        self._place_id = place_id
