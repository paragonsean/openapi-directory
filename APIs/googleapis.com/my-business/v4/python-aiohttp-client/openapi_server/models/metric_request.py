# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetricRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric: str=None, options: List[str]=None):
        """MetricRequest - a model defined in OpenAPI

        :param metric: The metric of this MetricRequest.
        :param options: The options of this MetricRequest.
        """
        self.openapi_types = {
            'metric': str,
            'options': List[str]
        }

        self.attribute_map = {
            'metric': 'metric',
            'options': 'options'
        }

        self._metric = metric
        self._options = options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricRequest of this MetricRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric(self):
        """Gets the metric of this MetricRequest.

        The requested metric.

        :return: The metric of this MetricRequest.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this MetricRequest.

        The requested metric.

        :param metric: The metric of this MetricRequest.
        :type metric: str
        """
        allowed_values = ["METRIC_UNSPECIFIED", "ALL", "QUERIES_DIRECT", "QUERIES_INDIRECT", "QUERIES_CHAIN", "VIEWS_MAPS", "VIEWS_SEARCH", "ACTIONS_WEBSITE", "ACTIONS_PHONE", "ACTIONS_DRIVING_DIRECTIONS", "PHOTOS_VIEWS_MERCHANT", "PHOTOS_VIEWS_CUSTOMERS", "PHOTOS_COUNT_MERCHANT", "PHOTOS_COUNT_CUSTOMERS", "LOCAL_POST_VIEWS_SEARCH", "LOCAL_POST_ACTIONS_CALL_TO_ACTION"]  # noqa: E501
        if metric not in allowed_values:
            raise ValueError(
                "Invalid value for `metric` ({0}), must be one of {1}"
                .format(metric, allowed_values)
            )

        self._metric = metric

    @property
    def options(self):
        """Gets the options of this MetricRequest.

        How the values should appear when returned.

        :return: The options of this MetricRequest.
        :rtype: List[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this MetricRequest.

        How the values should appear when returned.

        :param options: The options of this MetricRequest.
        :type options: List[str]
        """
        allowed_values = ["METRIC_OPTION_UNSPECIFIED", "AGGREGATED_TOTAL", "AGGREGATED_DAILY", "BREAKDOWN_DAY_OF_WEEK", "BREAKDOWN_HOUR_OF_DAY"]  # noqa: E501
        if not set(options).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `options` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(options) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._options = options
