# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LanguagesSpoken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arabic_spoken: bool=None, arabic_spoken_exception: str=None, cantonese_spoken: bool=None, cantonese_spoken_exception: str=None, dutch_spoken: bool=None, dutch_spoken_exception: str=None, english_spoken: bool=None, english_spoken_exception: str=None, filipino_spoken: bool=None, filipino_spoken_exception: str=None, french_spoken: bool=None, french_spoken_exception: str=None, german_spoken: bool=None, german_spoken_exception: str=None, hindi_spoken: bool=None, hindi_spoken_exception: str=None, indonesian_spoken: bool=None, indonesian_spoken_exception: str=None, italian_spoken: bool=None, italian_spoken_exception: str=None, japanese_spoken: bool=None, japanese_spoken_exception: str=None, korean_spoken: bool=None, korean_spoken_exception: str=None, mandarin_spoken: bool=None, mandarin_spoken_exception: str=None, portuguese_spoken: bool=None, portuguese_spoken_exception: str=None, russian_spoken: bool=None, russian_spoken_exception: str=None, spanish_spoken: bool=None, spanish_spoken_exception: str=None, vietnamese_spoken: bool=None, vietnamese_spoken_exception: str=None):
        """LanguagesSpoken - a model defined in OpenAPI

        :param arabic_spoken: The arabic_spoken of this LanguagesSpoken.
        :param arabic_spoken_exception: The arabic_spoken_exception of this LanguagesSpoken.
        :param cantonese_spoken: The cantonese_spoken of this LanguagesSpoken.
        :param cantonese_spoken_exception: The cantonese_spoken_exception of this LanguagesSpoken.
        :param dutch_spoken: The dutch_spoken of this LanguagesSpoken.
        :param dutch_spoken_exception: The dutch_spoken_exception of this LanguagesSpoken.
        :param english_spoken: The english_spoken of this LanguagesSpoken.
        :param english_spoken_exception: The english_spoken_exception of this LanguagesSpoken.
        :param filipino_spoken: The filipino_spoken of this LanguagesSpoken.
        :param filipino_spoken_exception: The filipino_spoken_exception of this LanguagesSpoken.
        :param french_spoken: The french_spoken of this LanguagesSpoken.
        :param french_spoken_exception: The french_spoken_exception of this LanguagesSpoken.
        :param german_spoken: The german_spoken of this LanguagesSpoken.
        :param german_spoken_exception: The german_spoken_exception of this LanguagesSpoken.
        :param hindi_spoken: The hindi_spoken of this LanguagesSpoken.
        :param hindi_spoken_exception: The hindi_spoken_exception of this LanguagesSpoken.
        :param indonesian_spoken: The indonesian_spoken of this LanguagesSpoken.
        :param indonesian_spoken_exception: The indonesian_spoken_exception of this LanguagesSpoken.
        :param italian_spoken: The italian_spoken of this LanguagesSpoken.
        :param italian_spoken_exception: The italian_spoken_exception of this LanguagesSpoken.
        :param japanese_spoken: The japanese_spoken of this LanguagesSpoken.
        :param japanese_spoken_exception: The japanese_spoken_exception of this LanguagesSpoken.
        :param korean_spoken: The korean_spoken of this LanguagesSpoken.
        :param korean_spoken_exception: The korean_spoken_exception of this LanguagesSpoken.
        :param mandarin_spoken: The mandarin_spoken of this LanguagesSpoken.
        :param mandarin_spoken_exception: The mandarin_spoken_exception of this LanguagesSpoken.
        :param portuguese_spoken: The portuguese_spoken of this LanguagesSpoken.
        :param portuguese_spoken_exception: The portuguese_spoken_exception of this LanguagesSpoken.
        :param russian_spoken: The russian_spoken of this LanguagesSpoken.
        :param russian_spoken_exception: The russian_spoken_exception of this LanguagesSpoken.
        :param spanish_spoken: The spanish_spoken of this LanguagesSpoken.
        :param spanish_spoken_exception: The spanish_spoken_exception of this LanguagesSpoken.
        :param vietnamese_spoken: The vietnamese_spoken of this LanguagesSpoken.
        :param vietnamese_spoken_exception: The vietnamese_spoken_exception of this LanguagesSpoken.
        """
        self.openapi_types = {
            'arabic_spoken': bool,
            'arabic_spoken_exception': str,
            'cantonese_spoken': bool,
            'cantonese_spoken_exception': str,
            'dutch_spoken': bool,
            'dutch_spoken_exception': str,
            'english_spoken': bool,
            'english_spoken_exception': str,
            'filipino_spoken': bool,
            'filipino_spoken_exception': str,
            'french_spoken': bool,
            'french_spoken_exception': str,
            'german_spoken': bool,
            'german_spoken_exception': str,
            'hindi_spoken': bool,
            'hindi_spoken_exception': str,
            'indonesian_spoken': bool,
            'indonesian_spoken_exception': str,
            'italian_spoken': bool,
            'italian_spoken_exception': str,
            'japanese_spoken': bool,
            'japanese_spoken_exception': str,
            'korean_spoken': bool,
            'korean_spoken_exception': str,
            'mandarin_spoken': bool,
            'mandarin_spoken_exception': str,
            'portuguese_spoken': bool,
            'portuguese_spoken_exception': str,
            'russian_spoken': bool,
            'russian_spoken_exception': str,
            'spanish_spoken': bool,
            'spanish_spoken_exception': str,
            'vietnamese_spoken': bool,
            'vietnamese_spoken_exception': str
        }

        self.attribute_map = {
            'arabic_spoken': 'arabicSpoken',
            'arabic_spoken_exception': 'arabicSpokenException',
            'cantonese_spoken': 'cantoneseSpoken',
            'cantonese_spoken_exception': 'cantoneseSpokenException',
            'dutch_spoken': 'dutchSpoken',
            'dutch_spoken_exception': 'dutchSpokenException',
            'english_spoken': 'englishSpoken',
            'english_spoken_exception': 'englishSpokenException',
            'filipino_spoken': 'filipinoSpoken',
            'filipino_spoken_exception': 'filipinoSpokenException',
            'french_spoken': 'frenchSpoken',
            'french_spoken_exception': 'frenchSpokenException',
            'german_spoken': 'germanSpoken',
            'german_spoken_exception': 'germanSpokenException',
            'hindi_spoken': 'hindiSpoken',
            'hindi_spoken_exception': 'hindiSpokenException',
            'indonesian_spoken': 'indonesianSpoken',
            'indonesian_spoken_exception': 'indonesianSpokenException',
            'italian_spoken': 'italianSpoken',
            'italian_spoken_exception': 'italianSpokenException',
            'japanese_spoken': 'japaneseSpoken',
            'japanese_spoken_exception': 'japaneseSpokenException',
            'korean_spoken': 'koreanSpoken',
            'korean_spoken_exception': 'koreanSpokenException',
            'mandarin_spoken': 'mandarinSpoken',
            'mandarin_spoken_exception': 'mandarinSpokenException',
            'portuguese_spoken': 'portugueseSpoken',
            'portuguese_spoken_exception': 'portugueseSpokenException',
            'russian_spoken': 'russianSpoken',
            'russian_spoken_exception': 'russianSpokenException',
            'spanish_spoken': 'spanishSpoken',
            'spanish_spoken_exception': 'spanishSpokenException',
            'vietnamese_spoken': 'vietnameseSpoken',
            'vietnamese_spoken_exception': 'vietnameseSpokenException'
        }

        self._arabic_spoken = arabic_spoken
        self._arabic_spoken_exception = arabic_spoken_exception
        self._cantonese_spoken = cantonese_spoken
        self._cantonese_spoken_exception = cantonese_spoken_exception
        self._dutch_spoken = dutch_spoken
        self._dutch_spoken_exception = dutch_spoken_exception
        self._english_spoken = english_spoken
        self._english_spoken_exception = english_spoken_exception
        self._filipino_spoken = filipino_spoken
        self._filipino_spoken_exception = filipino_spoken_exception
        self._french_spoken = french_spoken
        self._french_spoken_exception = french_spoken_exception
        self._german_spoken = german_spoken
        self._german_spoken_exception = german_spoken_exception
        self._hindi_spoken = hindi_spoken
        self._hindi_spoken_exception = hindi_spoken_exception
        self._indonesian_spoken = indonesian_spoken
        self._indonesian_spoken_exception = indonesian_spoken_exception
        self._italian_spoken = italian_spoken
        self._italian_spoken_exception = italian_spoken_exception
        self._japanese_spoken = japanese_spoken
        self._japanese_spoken_exception = japanese_spoken_exception
        self._korean_spoken = korean_spoken
        self._korean_spoken_exception = korean_spoken_exception
        self._mandarin_spoken = mandarin_spoken
        self._mandarin_spoken_exception = mandarin_spoken_exception
        self._portuguese_spoken = portuguese_spoken
        self._portuguese_spoken_exception = portuguese_spoken_exception
        self._russian_spoken = russian_spoken
        self._russian_spoken_exception = russian_spoken_exception
        self._spanish_spoken = spanish_spoken
        self._spanish_spoken_exception = spanish_spoken_exception
        self._vietnamese_spoken = vietnamese_spoken
        self._vietnamese_spoken_exception = vietnamese_spoken_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LanguagesSpoken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LanguagesSpoken of this LanguagesSpoken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arabic_spoken(self):
        """Gets the arabic_spoken of this LanguagesSpoken.

        Arabic. At least one staff member speaks Arabic.

        :return: The arabic_spoken of this LanguagesSpoken.
        :rtype: bool
        """
        return self._arabic_spoken

    @arabic_spoken.setter
    def arabic_spoken(self, arabic_spoken):
        """Sets the arabic_spoken of this LanguagesSpoken.

        Arabic. At least one staff member speaks Arabic.

        :param arabic_spoken: The arabic_spoken of this LanguagesSpoken.
        :type arabic_spoken: bool
        """

        self._arabic_spoken = arabic_spoken

    @property
    def arabic_spoken_exception(self):
        """Gets the arabic_spoken_exception of this LanguagesSpoken.

        Arabic exception.

        :return: The arabic_spoken_exception of this LanguagesSpoken.
        :rtype: str
        """
        return self._arabic_spoken_exception

    @arabic_spoken_exception.setter
    def arabic_spoken_exception(self, arabic_spoken_exception):
        """Sets the arabic_spoken_exception of this LanguagesSpoken.

        Arabic exception.

        :param arabic_spoken_exception: The arabic_spoken_exception of this LanguagesSpoken.
        :type arabic_spoken_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if arabic_spoken_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `arabic_spoken_exception` ({0}), must be one of {1}"
                .format(arabic_spoken_exception, allowed_values)
            )

        self._arabic_spoken_exception = arabic_spoken_exception

    @property
    def cantonese_spoken(self):
        """Gets the cantonese_spoken of this LanguagesSpoken.

        Cantonese. At least one staff member speaks Cantonese.

        :return: The cantonese_spoken of this LanguagesSpoken.
        :rtype: bool
        """
        return self._cantonese_spoken

    @cantonese_spoken.setter
    def cantonese_spoken(self, cantonese_spoken):
        """Sets the cantonese_spoken of this LanguagesSpoken.

        Cantonese. At least one staff member speaks Cantonese.

        :param cantonese_spoken: The cantonese_spoken of this LanguagesSpoken.
        :type cantonese_spoken: bool
        """

        self._cantonese_spoken = cantonese_spoken

    @property
    def cantonese_spoken_exception(self):
        """Gets the cantonese_spoken_exception of this LanguagesSpoken.

        Cantonese exception.

        :return: The cantonese_spoken_exception of this LanguagesSpoken.
        :rtype: str
        """
        return self._cantonese_spoken_exception

    @cantonese_spoken_exception.setter
    def cantonese_spoken_exception(self, cantonese_spoken_exception):
        """Sets the cantonese_spoken_exception of this LanguagesSpoken.

        Cantonese exception.

        :param cantonese_spoken_exception: The cantonese_spoken_exception of this LanguagesSpoken.
        :type cantonese_spoken_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if cantonese_spoken_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `cantonese_spoken_exception` ({0}), must be one of {1}"
                .format(cantonese_spoken_exception, allowed_values)
            )

        self._cantonese_spoken_exception = cantonese_spoken_exception

    @property
    def dutch_spoken(self):
        """Gets the dutch_spoken of this LanguagesSpoken.

        Dutch. At least one staff member speaks Dutch.

        :return: The dutch_spoken of this LanguagesSpoken.
        :rtype: bool
        """
        return self._dutch_spoken

    @dutch_spoken.setter
    def dutch_spoken(self, dutch_spoken):
        """Sets the dutch_spoken of this LanguagesSpoken.

        Dutch. At least one staff member speaks Dutch.

        :param dutch_spoken: The dutch_spoken of this LanguagesSpoken.
        :type dutch_spoken: bool
        """

        self._dutch_spoken = dutch_spoken

    @property
    def dutch_spoken_exception(self):
        """Gets the dutch_spoken_exception of this LanguagesSpoken.

        Dutch exception.

        :return: The dutch_spoken_exception of this LanguagesSpoken.
        :rtype: str
        """
        return self._dutch_spoken_exception

    @dutch_spoken_exception.setter
    def dutch_spoken_exception(self, dutch_spoken_exception):
        """Sets the dutch_spoken_exception of this LanguagesSpoken.

        Dutch exception.

        :param dutch_spoken_exception: The dutch_spoken_exception of this LanguagesSpoken.
        :type dutch_spoken_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if dutch_spoken_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `dutch_spoken_exception` ({0}), must be one of {1}"
                .format(dutch_spoken_exception, allowed_values)
            )

        self._dutch_spoken_exception = dutch_spoken_exception

    @property
    def english_spoken(self):
        """Gets the english_spoken of this LanguagesSpoken.

        English. At least one staff member speaks English.

        :return: The english_spoken of this LanguagesSpoken.
        :rtype: bool
        """
        return self._english_spoken

    @english_spoken.setter
    def english_spoken(self, english_spoken):
        """Sets the english_spoken of this LanguagesSpoken.

        English. At least one staff member speaks English.

        :param english_spoken: The english_spoken of this LanguagesSpoken.
        :type english_spoken: bool
        """

        self._english_spoken = english_spoken

    @property
    def english_spoken_exception(self):
        """Gets the english_spoken_exception of this LanguagesSpoken.

        English exception.

        :return: The english_spoken_exception of this LanguagesSpoken.
        :rtype: str
        """
        return self._english_spoken_exception

    @english_spoken_exception.setter
    def english_spoken_exception(self, english_spoken_exception):
        """Sets the english_spoken_exception of this LanguagesSpoken.

        English exception.

        :param english_spoken_exception: The english_spoken_exception of this LanguagesSpoken.
        :type english_spoken_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if english_spoken_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `english_spoken_exception` ({0}), must be one of {1}"
                .format(english_spoken_exception, allowed_values)
            )

        self._english_spoken_exception = english_spoken_exception

    @property
    def filipino_spoken(self):
        """Gets the filipino_spoken of this LanguagesSpoken.

        Filipino. At least one staff member speaks Filipino.

        :return: The filipino_spoken of this LanguagesSpoken.
        :rtype: bool
        """
        return self._filipino_spoken

    @filipino_spoken.setter
    def filipino_spoken(self, filipino_spoken):
        """Sets the filipino_spoken of this LanguagesSpoken.

        Filipino. At least one staff member speaks Filipino.

        :param filipino_spoken: The filipino_spoken of this LanguagesSpoken.
        :type filipino_spoken: bool
        """

        self._filipino_spoken = filipino_spoken

    @property
    def filipino_spoken_exception(self):
        """Gets the filipino_spoken_exception of this LanguagesSpoken.

        Filipino exception.

        :return: The filipino_spoken_exception of this LanguagesSpoken.
        :rtype: str
        """
        return self._filipino_spoken_exception

    @filipino_spoken_exception.setter
    def filipino_spoken_exception(self, filipino_spoken_exception):
        """Sets the filipino_spoken_exception of this LanguagesSpoken.

        Filipino exception.

        :param filipino_spoken_exception: The filipino_spoken_exception of this LanguagesSpoken.
        :type filipino_spoken_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if filipino_spoken_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `filipino_spoken_exception` ({0}), must be one of {1}"
                .format(filipino_spoken_exception, allowed_values)
            )

        self._filipino_spoken_exception = filipino_spoken_exception

    @property
    def french_spoken(self):
        """Gets the french_spoken of this LanguagesSpoken.

        French. At least one staff member speaks French.

        :return: The french_spoken of this LanguagesSpoken.
        :rtype: bool
        """
        return self._french_spoken

    @french_spoken.setter
    def french_spoken(self, french_spoken):
        """Sets the french_spoken of this LanguagesSpoken.

        French. At least one staff member speaks French.

        :param french_spoken: The french_spoken of this LanguagesSpoken.
        :type french_spoken: bool
        """

        self._french_spoken = french_spoken

    @property
    def french_spoken_exception(self):
        """Gets the french_spoken_exception of this LanguagesSpoken.

        French exception.

        :return: The french_spoken_exception of this LanguagesSpoken.
        :rtype: str
        """
        return self._french_spoken_exception

    @french_spoken_exception.setter
    def french_spoken_exception(self, french_spoken_exception):
        """Sets the french_spoken_exception of this LanguagesSpoken.

        French exception.

        :param french_spoken_exception: The french_spoken_exception of this LanguagesSpoken.
        :type french_spoken_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if french_spoken_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `french_spoken_exception` ({0}), must be one of {1}"
                .format(french_spoken_exception, allowed_values)
            )

        self._french_spoken_exception = french_spoken_exception

    @property
    def german_spoken(self):
        """Gets the german_spoken of this LanguagesSpoken.

        German. At least one staff member speaks German.

        :return: The german_spoken of this LanguagesSpoken.
        :rtype: bool
        """
        return self._german_spoken

    @german_spoken.setter
    def german_spoken(self, german_spoken):
        """Sets the german_spoken of this LanguagesSpoken.

        German. At least one staff member speaks German.

        :param german_spoken: The german_spoken of this LanguagesSpoken.
        :type german_spoken: bool
        """

        self._german_spoken = german_spoken

    @property
    def german_spoken_exception(self):
        """Gets the german_spoken_exception of this LanguagesSpoken.

        German exception.

        :return: The german_spoken_exception of this LanguagesSpoken.
        :rtype: str
        """
        return self._german_spoken_exception

    @german_spoken_exception.setter
    def german_spoken_exception(self, german_spoken_exception):
        """Sets the german_spoken_exception of this LanguagesSpoken.

        German exception.

        :param german_spoken_exception: The german_spoken_exception of this LanguagesSpoken.
        :type german_spoken_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if german_spoken_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `german_spoken_exception` ({0}), must be one of {1}"
                .format(german_spoken_exception, allowed_values)
            )

        self._german_spoken_exception = german_spoken_exception

    @property
    def hindi_spoken(self):
        """Gets the hindi_spoken of this LanguagesSpoken.

        Hindi. At least one staff member speaks Hindi.

        :return: The hindi_spoken of this LanguagesSpoken.
        :rtype: bool
        """
        return self._hindi_spoken

    @hindi_spoken.setter
    def hindi_spoken(self, hindi_spoken):
        """Sets the hindi_spoken of this LanguagesSpoken.

        Hindi. At least one staff member speaks Hindi.

        :param hindi_spoken: The hindi_spoken of this LanguagesSpoken.
        :type hindi_spoken: bool
        """

        self._hindi_spoken = hindi_spoken

    @property
    def hindi_spoken_exception(self):
        """Gets the hindi_spoken_exception of this LanguagesSpoken.

        Hindi exception.

        :return: The hindi_spoken_exception of this LanguagesSpoken.
        :rtype: str
        """
        return self._hindi_spoken_exception

    @hindi_spoken_exception.setter
    def hindi_spoken_exception(self, hindi_spoken_exception):
        """Sets the hindi_spoken_exception of this LanguagesSpoken.

        Hindi exception.

        :param hindi_spoken_exception: The hindi_spoken_exception of this LanguagesSpoken.
        :type hindi_spoken_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if hindi_spoken_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `hindi_spoken_exception` ({0}), must be one of {1}"
                .format(hindi_spoken_exception, allowed_values)
            )

        self._hindi_spoken_exception = hindi_spoken_exception

    @property
    def indonesian_spoken(self):
        """Gets the indonesian_spoken of this LanguagesSpoken.

        Indonesian. At least one staff member speaks Indonesian.

        :return: The indonesian_spoken of this LanguagesSpoken.
        :rtype: bool
        """
        return self._indonesian_spoken

    @indonesian_spoken.setter
    def indonesian_spoken(self, indonesian_spoken):
        """Sets the indonesian_spoken of this LanguagesSpoken.

        Indonesian. At least one staff member speaks Indonesian.

        :param indonesian_spoken: The indonesian_spoken of this LanguagesSpoken.
        :type indonesian_spoken: bool
        """

        self._indonesian_spoken = indonesian_spoken

    @property
    def indonesian_spoken_exception(self):
        """Gets the indonesian_spoken_exception of this LanguagesSpoken.

        Indonesian exception.

        :return: The indonesian_spoken_exception of this LanguagesSpoken.
        :rtype: str
        """
        return self._indonesian_spoken_exception

    @indonesian_spoken_exception.setter
    def indonesian_spoken_exception(self, indonesian_spoken_exception):
        """Sets the indonesian_spoken_exception of this LanguagesSpoken.

        Indonesian exception.

        :param indonesian_spoken_exception: The indonesian_spoken_exception of this LanguagesSpoken.
        :type indonesian_spoken_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if indonesian_spoken_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `indonesian_spoken_exception` ({0}), must be one of {1}"
                .format(indonesian_spoken_exception, allowed_values)
            )

        self._indonesian_spoken_exception = indonesian_spoken_exception

    @property
    def italian_spoken(self):
        """Gets the italian_spoken of this LanguagesSpoken.

        Italian. At least one staff member speaks Italian.

        :return: The italian_spoken of this LanguagesSpoken.
        :rtype: bool
        """
        return self._italian_spoken

    @italian_spoken.setter
    def italian_spoken(self, italian_spoken):
        """Sets the italian_spoken of this LanguagesSpoken.

        Italian. At least one staff member speaks Italian.

        :param italian_spoken: The italian_spoken of this LanguagesSpoken.
        :type italian_spoken: bool
        """

        self._italian_spoken = italian_spoken

    @property
    def italian_spoken_exception(self):
        """Gets the italian_spoken_exception of this LanguagesSpoken.

        Italian exception.

        :return: The italian_spoken_exception of this LanguagesSpoken.
        :rtype: str
        """
        return self._italian_spoken_exception

    @italian_spoken_exception.setter
    def italian_spoken_exception(self, italian_spoken_exception):
        """Sets the italian_spoken_exception of this LanguagesSpoken.

        Italian exception.

        :param italian_spoken_exception: The italian_spoken_exception of this LanguagesSpoken.
        :type italian_spoken_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if italian_spoken_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `italian_spoken_exception` ({0}), must be one of {1}"
                .format(italian_spoken_exception, allowed_values)
            )

        self._italian_spoken_exception = italian_spoken_exception

    @property
    def japanese_spoken(self):
        """Gets the japanese_spoken of this LanguagesSpoken.

        Japanese. At least one staff member speaks Japanese.

        :return: The japanese_spoken of this LanguagesSpoken.
        :rtype: bool
        """
        return self._japanese_spoken

    @japanese_spoken.setter
    def japanese_spoken(self, japanese_spoken):
        """Sets the japanese_spoken of this LanguagesSpoken.

        Japanese. At least one staff member speaks Japanese.

        :param japanese_spoken: The japanese_spoken of this LanguagesSpoken.
        :type japanese_spoken: bool
        """

        self._japanese_spoken = japanese_spoken

    @property
    def japanese_spoken_exception(self):
        """Gets the japanese_spoken_exception of this LanguagesSpoken.

        Japanese exception.

        :return: The japanese_spoken_exception of this LanguagesSpoken.
        :rtype: str
        """
        return self._japanese_spoken_exception

    @japanese_spoken_exception.setter
    def japanese_spoken_exception(self, japanese_spoken_exception):
        """Sets the japanese_spoken_exception of this LanguagesSpoken.

        Japanese exception.

        :param japanese_spoken_exception: The japanese_spoken_exception of this LanguagesSpoken.
        :type japanese_spoken_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if japanese_spoken_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `japanese_spoken_exception` ({0}), must be one of {1}"
                .format(japanese_spoken_exception, allowed_values)
            )

        self._japanese_spoken_exception = japanese_spoken_exception

    @property
    def korean_spoken(self):
        """Gets the korean_spoken of this LanguagesSpoken.

        Korean. At least one staff member speaks Korean.

        :return: The korean_spoken of this LanguagesSpoken.
        :rtype: bool
        """
        return self._korean_spoken

    @korean_spoken.setter
    def korean_spoken(self, korean_spoken):
        """Sets the korean_spoken of this LanguagesSpoken.

        Korean. At least one staff member speaks Korean.

        :param korean_spoken: The korean_spoken of this LanguagesSpoken.
        :type korean_spoken: bool
        """

        self._korean_spoken = korean_spoken

    @property
    def korean_spoken_exception(self):
        """Gets the korean_spoken_exception of this LanguagesSpoken.

        Korean exception.

        :return: The korean_spoken_exception of this LanguagesSpoken.
        :rtype: str
        """
        return self._korean_spoken_exception

    @korean_spoken_exception.setter
    def korean_spoken_exception(self, korean_spoken_exception):
        """Sets the korean_spoken_exception of this LanguagesSpoken.

        Korean exception.

        :param korean_spoken_exception: The korean_spoken_exception of this LanguagesSpoken.
        :type korean_spoken_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if korean_spoken_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `korean_spoken_exception` ({0}), must be one of {1}"
                .format(korean_spoken_exception, allowed_values)
            )

        self._korean_spoken_exception = korean_spoken_exception

    @property
    def mandarin_spoken(self):
        """Gets the mandarin_spoken of this LanguagesSpoken.

        Mandarin. At least one staff member speaks Mandarin.

        :return: The mandarin_spoken of this LanguagesSpoken.
        :rtype: bool
        """
        return self._mandarin_spoken

    @mandarin_spoken.setter
    def mandarin_spoken(self, mandarin_spoken):
        """Sets the mandarin_spoken of this LanguagesSpoken.

        Mandarin. At least one staff member speaks Mandarin.

        :param mandarin_spoken: The mandarin_spoken of this LanguagesSpoken.
        :type mandarin_spoken: bool
        """

        self._mandarin_spoken = mandarin_spoken

    @property
    def mandarin_spoken_exception(self):
        """Gets the mandarin_spoken_exception of this LanguagesSpoken.

        Mandarin exception.

        :return: The mandarin_spoken_exception of this LanguagesSpoken.
        :rtype: str
        """
        return self._mandarin_spoken_exception

    @mandarin_spoken_exception.setter
    def mandarin_spoken_exception(self, mandarin_spoken_exception):
        """Sets the mandarin_spoken_exception of this LanguagesSpoken.

        Mandarin exception.

        :param mandarin_spoken_exception: The mandarin_spoken_exception of this LanguagesSpoken.
        :type mandarin_spoken_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if mandarin_spoken_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `mandarin_spoken_exception` ({0}), must be one of {1}"
                .format(mandarin_spoken_exception, allowed_values)
            )

        self._mandarin_spoken_exception = mandarin_spoken_exception

    @property
    def portuguese_spoken(self):
        """Gets the portuguese_spoken of this LanguagesSpoken.

        Portuguese. At least one staff member speaks Portuguese.

        :return: The portuguese_spoken of this LanguagesSpoken.
        :rtype: bool
        """
        return self._portuguese_spoken

    @portuguese_spoken.setter
    def portuguese_spoken(self, portuguese_spoken):
        """Sets the portuguese_spoken of this LanguagesSpoken.

        Portuguese. At least one staff member speaks Portuguese.

        :param portuguese_spoken: The portuguese_spoken of this LanguagesSpoken.
        :type portuguese_spoken: bool
        """

        self._portuguese_spoken = portuguese_spoken

    @property
    def portuguese_spoken_exception(self):
        """Gets the portuguese_spoken_exception of this LanguagesSpoken.

        Portuguese exception.

        :return: The portuguese_spoken_exception of this LanguagesSpoken.
        :rtype: str
        """
        return self._portuguese_spoken_exception

    @portuguese_spoken_exception.setter
    def portuguese_spoken_exception(self, portuguese_spoken_exception):
        """Sets the portuguese_spoken_exception of this LanguagesSpoken.

        Portuguese exception.

        :param portuguese_spoken_exception: The portuguese_spoken_exception of this LanguagesSpoken.
        :type portuguese_spoken_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if portuguese_spoken_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `portuguese_spoken_exception` ({0}), must be one of {1}"
                .format(portuguese_spoken_exception, allowed_values)
            )

        self._portuguese_spoken_exception = portuguese_spoken_exception

    @property
    def russian_spoken(self):
        """Gets the russian_spoken of this LanguagesSpoken.

        Russian. At least one staff member speaks Russian.

        :return: The russian_spoken of this LanguagesSpoken.
        :rtype: bool
        """
        return self._russian_spoken

    @russian_spoken.setter
    def russian_spoken(self, russian_spoken):
        """Sets the russian_spoken of this LanguagesSpoken.

        Russian. At least one staff member speaks Russian.

        :param russian_spoken: The russian_spoken of this LanguagesSpoken.
        :type russian_spoken: bool
        """

        self._russian_spoken = russian_spoken

    @property
    def russian_spoken_exception(self):
        """Gets the russian_spoken_exception of this LanguagesSpoken.

        Russian exception.

        :return: The russian_spoken_exception of this LanguagesSpoken.
        :rtype: str
        """
        return self._russian_spoken_exception

    @russian_spoken_exception.setter
    def russian_spoken_exception(self, russian_spoken_exception):
        """Sets the russian_spoken_exception of this LanguagesSpoken.

        Russian exception.

        :param russian_spoken_exception: The russian_spoken_exception of this LanguagesSpoken.
        :type russian_spoken_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if russian_spoken_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `russian_spoken_exception` ({0}), must be one of {1}"
                .format(russian_spoken_exception, allowed_values)
            )

        self._russian_spoken_exception = russian_spoken_exception

    @property
    def spanish_spoken(self):
        """Gets the spanish_spoken of this LanguagesSpoken.

        Spanish. At least one staff member speaks Spanish.

        :return: The spanish_spoken of this LanguagesSpoken.
        :rtype: bool
        """
        return self._spanish_spoken

    @spanish_spoken.setter
    def spanish_spoken(self, spanish_spoken):
        """Sets the spanish_spoken of this LanguagesSpoken.

        Spanish. At least one staff member speaks Spanish.

        :param spanish_spoken: The spanish_spoken of this LanguagesSpoken.
        :type spanish_spoken: bool
        """

        self._spanish_spoken = spanish_spoken

    @property
    def spanish_spoken_exception(self):
        """Gets the spanish_spoken_exception of this LanguagesSpoken.

        Spanish exception.

        :return: The spanish_spoken_exception of this LanguagesSpoken.
        :rtype: str
        """
        return self._spanish_spoken_exception

    @spanish_spoken_exception.setter
    def spanish_spoken_exception(self, spanish_spoken_exception):
        """Sets the spanish_spoken_exception of this LanguagesSpoken.

        Spanish exception.

        :param spanish_spoken_exception: The spanish_spoken_exception of this LanguagesSpoken.
        :type spanish_spoken_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if spanish_spoken_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `spanish_spoken_exception` ({0}), must be one of {1}"
                .format(spanish_spoken_exception, allowed_values)
            )

        self._spanish_spoken_exception = spanish_spoken_exception

    @property
    def vietnamese_spoken(self):
        """Gets the vietnamese_spoken of this LanguagesSpoken.

        Vietnamese. At least one staff member speaks Vietnamese.

        :return: The vietnamese_spoken of this LanguagesSpoken.
        :rtype: bool
        """
        return self._vietnamese_spoken

    @vietnamese_spoken.setter
    def vietnamese_spoken(self, vietnamese_spoken):
        """Sets the vietnamese_spoken of this LanguagesSpoken.

        Vietnamese. At least one staff member speaks Vietnamese.

        :param vietnamese_spoken: The vietnamese_spoken of this LanguagesSpoken.
        :type vietnamese_spoken: bool
        """

        self._vietnamese_spoken = vietnamese_spoken

    @property
    def vietnamese_spoken_exception(self):
        """Gets the vietnamese_spoken_exception of this LanguagesSpoken.

        Vietnamese exception.

        :return: The vietnamese_spoken_exception of this LanguagesSpoken.
        :rtype: str
        """
        return self._vietnamese_spoken_exception

    @vietnamese_spoken_exception.setter
    def vietnamese_spoken_exception(self, vietnamese_spoken_exception):
        """Sets the vietnamese_spoken_exception of this LanguagesSpoken.

        Vietnamese exception.

        :param vietnamese_spoken_exception: The vietnamese_spoken_exception of this LanguagesSpoken.
        :type vietnamese_spoken_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if vietnamese_spoken_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `vietnamese_spoken_exception` ({0}), must be one of {1}"
                .format(vietnamese_spoken_exception, allowed_values)
            )

        self._vietnamese_spoken_exception = vietnamese_spoken_exception
