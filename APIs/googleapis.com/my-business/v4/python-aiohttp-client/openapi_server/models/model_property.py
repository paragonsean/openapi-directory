# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, built_year: int=None, built_year_exception: str=None, floors_count: int=None, floors_count_exception: str=None, last_renovated_year: int=None, last_renovated_year_exception: str=None, rooms_count: int=None, rooms_count_exception: str=None):
        """ModelProperty - a model defined in OpenAPI

        :param built_year: The built_year of this ModelProperty.
        :param built_year_exception: The built_year_exception of this ModelProperty.
        :param floors_count: The floors_count of this ModelProperty.
        :param floors_count_exception: The floors_count_exception of this ModelProperty.
        :param last_renovated_year: The last_renovated_year of this ModelProperty.
        :param last_renovated_year_exception: The last_renovated_year_exception of this ModelProperty.
        :param rooms_count: The rooms_count of this ModelProperty.
        :param rooms_count_exception: The rooms_count_exception of this ModelProperty.
        """
        self.openapi_types = {
            'built_year': int,
            'built_year_exception': str,
            'floors_count': int,
            'floors_count_exception': str,
            'last_renovated_year': int,
            'last_renovated_year_exception': str,
            'rooms_count': int,
            'rooms_count_exception': str
        }

        self.attribute_map = {
            'built_year': 'builtYear',
            'built_year_exception': 'builtYearException',
            'floors_count': 'floorsCount',
            'floors_count_exception': 'floorsCountException',
            'last_renovated_year': 'lastRenovatedYear',
            'last_renovated_year_exception': 'lastRenovatedYearException',
            'rooms_count': 'roomsCount',
            'rooms_count_exception': 'roomsCountException'
        }

        self._built_year = built_year
        self._built_year_exception = built_year_exception
        self._floors_count = floors_count
        self._floors_count_exception = floors_count_exception
        self._last_renovated_year = last_renovated_year
        self._last_renovated_year_exception = last_renovated_year_exception
        self._rooms_count = rooms_count
        self._rooms_count_exception = rooms_count_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Property of this ModelProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def built_year(self):
        """Gets the built_year of this ModelProperty.

        Built year. The year that construction of the property was completed.

        :return: The built_year of this ModelProperty.
        :rtype: int
        """
        return self._built_year

    @built_year.setter
    def built_year(self, built_year):
        """Sets the built_year of this ModelProperty.

        Built year. The year that construction of the property was completed.

        :param built_year: The built_year of this ModelProperty.
        :type built_year: int
        """

        self._built_year = built_year

    @property
    def built_year_exception(self):
        """Gets the built_year_exception of this ModelProperty.

        Built year exception.

        :return: The built_year_exception of this ModelProperty.
        :rtype: str
        """
        return self._built_year_exception

    @built_year_exception.setter
    def built_year_exception(self, built_year_exception):
        """Sets the built_year_exception of this ModelProperty.

        Built year exception.

        :param built_year_exception: The built_year_exception of this ModelProperty.
        :type built_year_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if built_year_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `built_year_exception` ({0}), must be one of {1}"
                .format(built_year_exception, allowed_values)
            )

        self._built_year_exception = built_year_exception

    @property
    def floors_count(self):
        """Gets the floors_count of this ModelProperty.

        Floors count. The number of stories the building has from the ground floor to the top floor that are accessible to guests.

        :return: The floors_count of this ModelProperty.
        :rtype: int
        """
        return self._floors_count

    @floors_count.setter
    def floors_count(self, floors_count):
        """Sets the floors_count of this ModelProperty.

        Floors count. The number of stories the building has from the ground floor to the top floor that are accessible to guests.

        :param floors_count: The floors_count of this ModelProperty.
        :type floors_count: int
        """

        self._floors_count = floors_count

    @property
    def floors_count_exception(self):
        """Gets the floors_count_exception of this ModelProperty.

        Floors count exception.

        :return: The floors_count_exception of this ModelProperty.
        :rtype: str
        """
        return self._floors_count_exception

    @floors_count_exception.setter
    def floors_count_exception(self, floors_count_exception):
        """Sets the floors_count_exception of this ModelProperty.

        Floors count exception.

        :param floors_count_exception: The floors_count_exception of this ModelProperty.
        :type floors_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if floors_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `floors_count_exception` ({0}), must be one of {1}"
                .format(floors_count_exception, allowed_values)
            )

        self._floors_count_exception = floors_count_exception

    @property
    def last_renovated_year(self):
        """Gets the last_renovated_year of this ModelProperty.

        Last renovated year. The year when the most recent renovation of the property was completed. Renovation may include all or any combination of the following: the units, the public spaces, the exterior, or the interior.

        :return: The last_renovated_year of this ModelProperty.
        :rtype: int
        """
        return self._last_renovated_year

    @last_renovated_year.setter
    def last_renovated_year(self, last_renovated_year):
        """Sets the last_renovated_year of this ModelProperty.

        Last renovated year. The year when the most recent renovation of the property was completed. Renovation may include all or any combination of the following: the units, the public spaces, the exterior, or the interior.

        :param last_renovated_year: The last_renovated_year of this ModelProperty.
        :type last_renovated_year: int
        """

        self._last_renovated_year = last_renovated_year

    @property
    def last_renovated_year_exception(self):
        """Gets the last_renovated_year_exception of this ModelProperty.

        Last renovated year exception.

        :return: The last_renovated_year_exception of this ModelProperty.
        :rtype: str
        """
        return self._last_renovated_year_exception

    @last_renovated_year_exception.setter
    def last_renovated_year_exception(self, last_renovated_year_exception):
        """Sets the last_renovated_year_exception of this ModelProperty.

        Last renovated year exception.

        :param last_renovated_year_exception: The last_renovated_year_exception of this ModelProperty.
        :type last_renovated_year_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if last_renovated_year_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `last_renovated_year_exception` ({0}), must be one of {1}"
                .format(last_renovated_year_exception, allowed_values)
            )

        self._last_renovated_year_exception = last_renovated_year_exception

    @property
    def rooms_count(self):
        """Gets the rooms_count of this ModelProperty.

        Rooms count. The total number of rooms and suites bookable by guests for an overnight stay. Does not include event space, public spaces, conference rooms, fitness rooms, business centers, spa, salon, restaurants/bars, or shops.

        :return: The rooms_count of this ModelProperty.
        :rtype: int
        """
        return self._rooms_count

    @rooms_count.setter
    def rooms_count(self, rooms_count):
        """Sets the rooms_count of this ModelProperty.

        Rooms count. The total number of rooms and suites bookable by guests for an overnight stay. Does not include event space, public spaces, conference rooms, fitness rooms, business centers, spa, salon, restaurants/bars, or shops.

        :param rooms_count: The rooms_count of this ModelProperty.
        :type rooms_count: int
        """

        self._rooms_count = rooms_count

    @property
    def rooms_count_exception(self):
        """Gets the rooms_count_exception of this ModelProperty.

        Rooms count exception.

        :return: The rooms_count_exception of this ModelProperty.
        :rtype: str
        """
        return self._rooms_count_exception

    @rooms_count_exception.setter
    def rooms_count_exception(self, rooms_count_exception):
        """Sets the rooms_count_exception of this ModelProperty.

        Rooms count exception.

        :param rooms_count_exception: The rooms_count_exception of this ModelProperty.
        :type rooms_count_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if rooms_count_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `rooms_count_exception` ({0}), must be one of {1}"
                .format(rooms_count_exception, allowed_values)
            )

        self._rooms_count_exception = rooms_count_exception
