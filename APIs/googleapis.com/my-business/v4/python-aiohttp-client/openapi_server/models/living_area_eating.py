# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LivingAreaEating(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coffee_maker: bool=None, coffee_maker_exception: str=None, cookware: bool=None, cookware_exception: str=None, dishwasher: bool=None, dishwasher_exception: str=None, indoor_grill: bool=None, indoor_grill_exception: str=None, kettle: bool=None, kettle_exception: str=None, kitchen_available: bool=None, kitchen_available_exception: str=None, microwave: bool=None, microwave_exception: str=None, minibar: bool=None, minibar_exception: str=None, outdoor_grill: bool=None, outdoor_grill_exception: str=None, oven: bool=None, oven_exception: str=None, refrigerator: bool=None, refrigerator_exception: str=None, sink: bool=None, sink_exception: str=None, snackbar: bool=None, snackbar_exception: str=None, stove: bool=None, stove_exception: str=None, tea_station: bool=None, tea_station_exception: str=None, toaster: bool=None, toaster_exception: str=None):
        """LivingAreaEating - a model defined in OpenAPI

        :param coffee_maker: The coffee_maker of this LivingAreaEating.
        :param coffee_maker_exception: The coffee_maker_exception of this LivingAreaEating.
        :param cookware: The cookware of this LivingAreaEating.
        :param cookware_exception: The cookware_exception of this LivingAreaEating.
        :param dishwasher: The dishwasher of this LivingAreaEating.
        :param dishwasher_exception: The dishwasher_exception of this LivingAreaEating.
        :param indoor_grill: The indoor_grill of this LivingAreaEating.
        :param indoor_grill_exception: The indoor_grill_exception of this LivingAreaEating.
        :param kettle: The kettle of this LivingAreaEating.
        :param kettle_exception: The kettle_exception of this LivingAreaEating.
        :param kitchen_available: The kitchen_available of this LivingAreaEating.
        :param kitchen_available_exception: The kitchen_available_exception of this LivingAreaEating.
        :param microwave: The microwave of this LivingAreaEating.
        :param microwave_exception: The microwave_exception of this LivingAreaEating.
        :param minibar: The minibar of this LivingAreaEating.
        :param minibar_exception: The minibar_exception of this LivingAreaEating.
        :param outdoor_grill: The outdoor_grill of this LivingAreaEating.
        :param outdoor_grill_exception: The outdoor_grill_exception of this LivingAreaEating.
        :param oven: The oven of this LivingAreaEating.
        :param oven_exception: The oven_exception of this LivingAreaEating.
        :param refrigerator: The refrigerator of this LivingAreaEating.
        :param refrigerator_exception: The refrigerator_exception of this LivingAreaEating.
        :param sink: The sink of this LivingAreaEating.
        :param sink_exception: The sink_exception of this LivingAreaEating.
        :param snackbar: The snackbar of this LivingAreaEating.
        :param snackbar_exception: The snackbar_exception of this LivingAreaEating.
        :param stove: The stove of this LivingAreaEating.
        :param stove_exception: The stove_exception of this LivingAreaEating.
        :param tea_station: The tea_station of this LivingAreaEating.
        :param tea_station_exception: The tea_station_exception of this LivingAreaEating.
        :param toaster: The toaster of this LivingAreaEating.
        :param toaster_exception: The toaster_exception of this LivingAreaEating.
        """
        self.openapi_types = {
            'coffee_maker': bool,
            'coffee_maker_exception': str,
            'cookware': bool,
            'cookware_exception': str,
            'dishwasher': bool,
            'dishwasher_exception': str,
            'indoor_grill': bool,
            'indoor_grill_exception': str,
            'kettle': bool,
            'kettle_exception': str,
            'kitchen_available': bool,
            'kitchen_available_exception': str,
            'microwave': bool,
            'microwave_exception': str,
            'minibar': bool,
            'minibar_exception': str,
            'outdoor_grill': bool,
            'outdoor_grill_exception': str,
            'oven': bool,
            'oven_exception': str,
            'refrigerator': bool,
            'refrigerator_exception': str,
            'sink': bool,
            'sink_exception': str,
            'snackbar': bool,
            'snackbar_exception': str,
            'stove': bool,
            'stove_exception': str,
            'tea_station': bool,
            'tea_station_exception': str,
            'toaster': bool,
            'toaster_exception': str
        }

        self.attribute_map = {
            'coffee_maker': 'coffeeMaker',
            'coffee_maker_exception': 'coffeeMakerException',
            'cookware': 'cookware',
            'cookware_exception': 'cookwareException',
            'dishwasher': 'dishwasher',
            'dishwasher_exception': 'dishwasherException',
            'indoor_grill': 'indoorGrill',
            'indoor_grill_exception': 'indoorGrillException',
            'kettle': 'kettle',
            'kettle_exception': 'kettleException',
            'kitchen_available': 'kitchenAvailable',
            'kitchen_available_exception': 'kitchenAvailableException',
            'microwave': 'microwave',
            'microwave_exception': 'microwaveException',
            'minibar': 'minibar',
            'minibar_exception': 'minibarException',
            'outdoor_grill': 'outdoorGrill',
            'outdoor_grill_exception': 'outdoorGrillException',
            'oven': 'oven',
            'oven_exception': 'ovenException',
            'refrigerator': 'refrigerator',
            'refrigerator_exception': 'refrigeratorException',
            'sink': 'sink',
            'sink_exception': 'sinkException',
            'snackbar': 'snackbar',
            'snackbar_exception': 'snackbarException',
            'stove': 'stove',
            'stove_exception': 'stoveException',
            'tea_station': 'teaStation',
            'tea_station_exception': 'teaStationException',
            'toaster': 'toaster',
            'toaster_exception': 'toasterException'
        }

        self._coffee_maker = coffee_maker
        self._coffee_maker_exception = coffee_maker_exception
        self._cookware = cookware
        self._cookware_exception = cookware_exception
        self._dishwasher = dishwasher
        self._dishwasher_exception = dishwasher_exception
        self._indoor_grill = indoor_grill
        self._indoor_grill_exception = indoor_grill_exception
        self._kettle = kettle
        self._kettle_exception = kettle_exception
        self._kitchen_available = kitchen_available
        self._kitchen_available_exception = kitchen_available_exception
        self._microwave = microwave
        self._microwave_exception = microwave_exception
        self._minibar = minibar
        self._minibar_exception = minibar_exception
        self._outdoor_grill = outdoor_grill
        self._outdoor_grill_exception = outdoor_grill_exception
        self._oven = oven
        self._oven_exception = oven_exception
        self._refrigerator = refrigerator
        self._refrigerator_exception = refrigerator_exception
        self._sink = sink
        self._sink_exception = sink_exception
        self._snackbar = snackbar
        self._snackbar_exception = snackbar_exception
        self._stove = stove
        self._stove_exception = stove_exception
        self._tea_station = tea_station
        self._tea_station_exception = tea_station_exception
        self._toaster = toaster
        self._toaster_exception = toaster_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LivingAreaEating':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LivingAreaEating of this LivingAreaEating.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coffee_maker(self):
        """Gets the coffee_maker of this LivingAreaEating.

        Coffee maker. An electric appliance that brews coffee by heating and forcing water through ground coffee.

        :return: The coffee_maker of this LivingAreaEating.
        :rtype: bool
        """
        return self._coffee_maker

    @coffee_maker.setter
    def coffee_maker(self, coffee_maker):
        """Sets the coffee_maker of this LivingAreaEating.

        Coffee maker. An electric appliance that brews coffee by heating and forcing water through ground coffee.

        :param coffee_maker: The coffee_maker of this LivingAreaEating.
        :type coffee_maker: bool
        """

        self._coffee_maker = coffee_maker

    @property
    def coffee_maker_exception(self):
        """Gets the coffee_maker_exception of this LivingAreaEating.

        Coffee maker exception.

        :return: The coffee_maker_exception of this LivingAreaEating.
        :rtype: str
        """
        return self._coffee_maker_exception

    @coffee_maker_exception.setter
    def coffee_maker_exception(self, coffee_maker_exception):
        """Sets the coffee_maker_exception of this LivingAreaEating.

        Coffee maker exception.

        :param coffee_maker_exception: The coffee_maker_exception of this LivingAreaEating.
        :type coffee_maker_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if coffee_maker_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `coffee_maker_exception` ({0}), must be one of {1}"
                .format(coffee_maker_exception, allowed_values)
            )

        self._coffee_maker_exception = coffee_maker_exception

    @property
    def cookware(self):
        """Gets the cookware of this LivingAreaEating.

        Cookware. Kitchen pots, pans and utensils used in connection with the preparation of food.

        :return: The cookware of this LivingAreaEating.
        :rtype: bool
        """
        return self._cookware

    @cookware.setter
    def cookware(self, cookware):
        """Sets the cookware of this LivingAreaEating.

        Cookware. Kitchen pots, pans and utensils used in connection with the preparation of food.

        :param cookware: The cookware of this LivingAreaEating.
        :type cookware: bool
        """

        self._cookware = cookware

    @property
    def cookware_exception(self):
        """Gets the cookware_exception of this LivingAreaEating.

        Cookware exception.

        :return: The cookware_exception of this LivingAreaEating.
        :rtype: str
        """
        return self._cookware_exception

    @cookware_exception.setter
    def cookware_exception(self, cookware_exception):
        """Sets the cookware_exception of this LivingAreaEating.

        Cookware exception.

        :param cookware_exception: The cookware_exception of this LivingAreaEating.
        :type cookware_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if cookware_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `cookware_exception` ({0}), must be one of {1}"
                .format(cookware_exception, allowed_values)
            )

        self._cookware_exception = cookware_exception

    @property
    def dishwasher(self):
        """Gets the dishwasher of this LivingAreaEating.

        Dishwasher. A counter-height electrical cabinet containing racks for dirty dishware, cookware and cutlery, and a dispenser for soap built into the pull-down door. The cabinet is attached to the plumbing system to facilitate the automatic cleaning of its contents.

        :return: The dishwasher of this LivingAreaEating.
        :rtype: bool
        """
        return self._dishwasher

    @dishwasher.setter
    def dishwasher(self, dishwasher):
        """Sets the dishwasher of this LivingAreaEating.

        Dishwasher. A counter-height electrical cabinet containing racks for dirty dishware, cookware and cutlery, and a dispenser for soap built into the pull-down door. The cabinet is attached to the plumbing system to facilitate the automatic cleaning of its contents.

        :param dishwasher: The dishwasher of this LivingAreaEating.
        :type dishwasher: bool
        """

        self._dishwasher = dishwasher

    @property
    def dishwasher_exception(self):
        """Gets the dishwasher_exception of this LivingAreaEating.

        Dishwasher exception.

        :return: The dishwasher_exception of this LivingAreaEating.
        :rtype: str
        """
        return self._dishwasher_exception

    @dishwasher_exception.setter
    def dishwasher_exception(self, dishwasher_exception):
        """Sets the dishwasher_exception of this LivingAreaEating.

        Dishwasher exception.

        :param dishwasher_exception: The dishwasher_exception of this LivingAreaEating.
        :type dishwasher_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if dishwasher_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `dishwasher_exception` ({0}), must be one of {1}"
                .format(dishwasher_exception, allowed_values)
            )

        self._dishwasher_exception = dishwasher_exception

    @property
    def indoor_grill(self):
        """Gets the indoor_grill of this LivingAreaEating.

        Indoor grill. Metal grates built into an indoor cooktop on which food is cooked over an open flame or electric heat source.

        :return: The indoor_grill of this LivingAreaEating.
        :rtype: bool
        """
        return self._indoor_grill

    @indoor_grill.setter
    def indoor_grill(self, indoor_grill):
        """Sets the indoor_grill of this LivingAreaEating.

        Indoor grill. Metal grates built into an indoor cooktop on which food is cooked over an open flame or electric heat source.

        :param indoor_grill: The indoor_grill of this LivingAreaEating.
        :type indoor_grill: bool
        """

        self._indoor_grill = indoor_grill

    @property
    def indoor_grill_exception(self):
        """Gets the indoor_grill_exception of this LivingAreaEating.

        Indoor grill exception.

        :return: The indoor_grill_exception of this LivingAreaEating.
        :rtype: str
        """
        return self._indoor_grill_exception

    @indoor_grill_exception.setter
    def indoor_grill_exception(self, indoor_grill_exception):
        """Sets the indoor_grill_exception of this LivingAreaEating.

        Indoor grill exception.

        :param indoor_grill_exception: The indoor_grill_exception of this LivingAreaEating.
        :type indoor_grill_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if indoor_grill_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `indoor_grill_exception` ({0}), must be one of {1}"
                .format(indoor_grill_exception, allowed_values)
            )

        self._indoor_grill_exception = indoor_grill_exception

    @property
    def kettle(self):
        """Gets the kettle of this LivingAreaEating.

        Kettle. A covered container with a handle and a spout used for boiling water.

        :return: The kettle of this LivingAreaEating.
        :rtype: bool
        """
        return self._kettle

    @kettle.setter
    def kettle(self, kettle):
        """Sets the kettle of this LivingAreaEating.

        Kettle. A covered container with a handle and a spout used for boiling water.

        :param kettle: The kettle of this LivingAreaEating.
        :type kettle: bool
        """

        self._kettle = kettle

    @property
    def kettle_exception(self):
        """Gets the kettle_exception of this LivingAreaEating.

        Kettle exception.

        :return: The kettle_exception of this LivingAreaEating.
        :rtype: str
        """
        return self._kettle_exception

    @kettle_exception.setter
    def kettle_exception(self, kettle_exception):
        """Sets the kettle_exception of this LivingAreaEating.

        Kettle exception.

        :param kettle_exception: The kettle_exception of this LivingAreaEating.
        :type kettle_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if kettle_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `kettle_exception` ({0}), must be one of {1}"
                .format(kettle_exception, allowed_values)
            )

        self._kettle_exception = kettle_exception

    @property
    def kitchen_available(self):
        """Gets the kitchen_available of this LivingAreaEating.

        Kitchen available. An area of the guestroom designated for the preparation and storage of food via the presence of a refrigerator, cook top, oven and sink, as well as cutlery, dishes and cookware. Usually includes small appliances such a coffee maker and a microwave. May or may not include an automatic dishwasher.

        :return: The kitchen_available of this LivingAreaEating.
        :rtype: bool
        """
        return self._kitchen_available

    @kitchen_available.setter
    def kitchen_available(self, kitchen_available):
        """Sets the kitchen_available of this LivingAreaEating.

        Kitchen available. An area of the guestroom designated for the preparation and storage of food via the presence of a refrigerator, cook top, oven and sink, as well as cutlery, dishes and cookware. Usually includes small appliances such a coffee maker and a microwave. May or may not include an automatic dishwasher.

        :param kitchen_available: The kitchen_available of this LivingAreaEating.
        :type kitchen_available: bool
        """

        self._kitchen_available = kitchen_available

    @property
    def kitchen_available_exception(self):
        """Gets the kitchen_available_exception of this LivingAreaEating.

        Kitchen available exception.

        :return: The kitchen_available_exception of this LivingAreaEating.
        :rtype: str
        """
        return self._kitchen_available_exception

    @kitchen_available_exception.setter
    def kitchen_available_exception(self, kitchen_available_exception):
        """Sets the kitchen_available_exception of this LivingAreaEating.

        Kitchen available exception.

        :param kitchen_available_exception: The kitchen_available_exception of this LivingAreaEating.
        :type kitchen_available_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if kitchen_available_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `kitchen_available_exception` ({0}), must be one of {1}"
                .format(kitchen_available_exception, allowed_values)
            )

        self._kitchen_available_exception = kitchen_available_exception

    @property
    def microwave(self):
        """Gets the microwave of this LivingAreaEating.

        Microwave. An electric oven that quickly cooks and heats food by microwave energy. Smaller than a standing or wall mounted oven. Usually placed on a kitchen counter, a shelf or tabletop or mounted above a cooktop.

        :return: The microwave of this LivingAreaEating.
        :rtype: bool
        """
        return self._microwave

    @microwave.setter
    def microwave(self, microwave):
        """Sets the microwave of this LivingAreaEating.

        Microwave. An electric oven that quickly cooks and heats food by microwave energy. Smaller than a standing or wall mounted oven. Usually placed on a kitchen counter, a shelf or tabletop or mounted above a cooktop.

        :param microwave: The microwave of this LivingAreaEating.
        :type microwave: bool
        """

        self._microwave = microwave

    @property
    def microwave_exception(self):
        """Gets the microwave_exception of this LivingAreaEating.

        Microwave exception.

        :return: The microwave_exception of this LivingAreaEating.
        :rtype: str
        """
        return self._microwave_exception

    @microwave_exception.setter
    def microwave_exception(self, microwave_exception):
        """Sets the microwave_exception of this LivingAreaEating.

        Microwave exception.

        :param microwave_exception: The microwave_exception of this LivingAreaEating.
        :type microwave_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if microwave_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `microwave_exception` ({0}), must be one of {1}"
                .format(microwave_exception, allowed_values)
            )

        self._microwave_exception = microwave_exception

    @property
    def minibar(self):
        """Gets the minibar of this LivingAreaEating.

        Minibar. A small refrigerated cabinet in the guestroom containing bottles/cans of soft drinks, mini bottles of alcohol, and snacks. The items are most commonly available for a fee.

        :return: The minibar of this LivingAreaEating.
        :rtype: bool
        """
        return self._minibar

    @minibar.setter
    def minibar(self, minibar):
        """Sets the minibar of this LivingAreaEating.

        Minibar. A small refrigerated cabinet in the guestroom containing bottles/cans of soft drinks, mini bottles of alcohol, and snacks. The items are most commonly available for a fee.

        :param minibar: The minibar of this LivingAreaEating.
        :type minibar: bool
        """

        self._minibar = minibar

    @property
    def minibar_exception(self):
        """Gets the minibar_exception of this LivingAreaEating.

        Minibar exception.

        :return: The minibar_exception of this LivingAreaEating.
        :rtype: str
        """
        return self._minibar_exception

    @minibar_exception.setter
    def minibar_exception(self, minibar_exception):
        """Sets the minibar_exception of this LivingAreaEating.

        Minibar exception.

        :param minibar_exception: The minibar_exception of this LivingAreaEating.
        :type minibar_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if minibar_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `minibar_exception` ({0}), must be one of {1}"
                .format(minibar_exception, allowed_values)
            )

        self._minibar_exception = minibar_exception

    @property
    def outdoor_grill(self):
        """Gets the outdoor_grill of this LivingAreaEating.

        Outdoor grill. Metal grates on which food is cooked over an open flame or electric heat source. Part of an outdoor apparatus that supports the grates. Also known as barbecue grill or barbecue.

        :return: The outdoor_grill of this LivingAreaEating.
        :rtype: bool
        """
        return self._outdoor_grill

    @outdoor_grill.setter
    def outdoor_grill(self, outdoor_grill):
        """Sets the outdoor_grill of this LivingAreaEating.

        Outdoor grill. Metal grates on which food is cooked over an open flame or electric heat source. Part of an outdoor apparatus that supports the grates. Also known as barbecue grill or barbecue.

        :param outdoor_grill: The outdoor_grill of this LivingAreaEating.
        :type outdoor_grill: bool
        """

        self._outdoor_grill = outdoor_grill

    @property
    def outdoor_grill_exception(self):
        """Gets the outdoor_grill_exception of this LivingAreaEating.

        Outdoor grill exception.

        :return: The outdoor_grill_exception of this LivingAreaEating.
        :rtype: str
        """
        return self._outdoor_grill_exception

    @outdoor_grill_exception.setter
    def outdoor_grill_exception(self, outdoor_grill_exception):
        """Sets the outdoor_grill_exception of this LivingAreaEating.

        Outdoor grill exception.

        :param outdoor_grill_exception: The outdoor_grill_exception of this LivingAreaEating.
        :type outdoor_grill_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if outdoor_grill_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `outdoor_grill_exception` ({0}), must be one of {1}"
                .format(outdoor_grill_exception, allowed_values)
            )

        self._outdoor_grill_exception = outdoor_grill_exception

    @property
    def oven(self):
        """Gets the oven of this LivingAreaEating.

        Oven. A temperature controlled, heated metal cabinet powered by gas or electricity in which food is placed for the purpose of cooking or reheating.

        :return: The oven of this LivingAreaEating.
        :rtype: bool
        """
        return self._oven

    @oven.setter
    def oven(self, oven):
        """Sets the oven of this LivingAreaEating.

        Oven. A temperature controlled, heated metal cabinet powered by gas or electricity in which food is placed for the purpose of cooking or reheating.

        :param oven: The oven of this LivingAreaEating.
        :type oven: bool
        """

        self._oven = oven

    @property
    def oven_exception(self):
        """Gets the oven_exception of this LivingAreaEating.

        Oven exception.

        :return: The oven_exception of this LivingAreaEating.
        :rtype: str
        """
        return self._oven_exception

    @oven_exception.setter
    def oven_exception(self, oven_exception):
        """Sets the oven_exception of this LivingAreaEating.

        Oven exception.

        :param oven_exception: The oven_exception of this LivingAreaEating.
        :type oven_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if oven_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `oven_exception` ({0}), must be one of {1}"
                .format(oven_exception, allowed_values)
            )

        self._oven_exception = oven_exception

    @property
    def refrigerator(self):
        """Gets the refrigerator of this LivingAreaEating.

        Refrigerator. A large, climate-controlled electrical cabinet with vertical doors. Built for the purpose of chilling and storing perishable foods.

        :return: The refrigerator of this LivingAreaEating.
        :rtype: bool
        """
        return self._refrigerator

    @refrigerator.setter
    def refrigerator(self, refrigerator):
        """Sets the refrigerator of this LivingAreaEating.

        Refrigerator. A large, climate-controlled electrical cabinet with vertical doors. Built for the purpose of chilling and storing perishable foods.

        :param refrigerator: The refrigerator of this LivingAreaEating.
        :type refrigerator: bool
        """

        self._refrigerator = refrigerator

    @property
    def refrigerator_exception(self):
        """Gets the refrigerator_exception of this LivingAreaEating.

        Refrigerator exception.

        :return: The refrigerator_exception of this LivingAreaEating.
        :rtype: str
        """
        return self._refrigerator_exception

    @refrigerator_exception.setter
    def refrigerator_exception(self, refrigerator_exception):
        """Sets the refrigerator_exception of this LivingAreaEating.

        Refrigerator exception.

        :param refrigerator_exception: The refrigerator_exception of this LivingAreaEating.
        :type refrigerator_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if refrigerator_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `refrigerator_exception` ({0}), must be one of {1}"
                .format(refrigerator_exception, allowed_values)
            )

        self._refrigerator_exception = refrigerator_exception

    @property
    def sink(self):
        """Gets the sink of this LivingAreaEating.

        Sink. A basin with a faucet attached to a water source and used for the purpose of washing and rinsing.

        :return: The sink of this LivingAreaEating.
        :rtype: bool
        """
        return self._sink

    @sink.setter
    def sink(self, sink):
        """Sets the sink of this LivingAreaEating.

        Sink. A basin with a faucet attached to a water source and used for the purpose of washing and rinsing.

        :param sink: The sink of this LivingAreaEating.
        :type sink: bool
        """

        self._sink = sink

    @property
    def sink_exception(self):
        """Gets the sink_exception of this LivingAreaEating.

        Sink exception.

        :return: The sink_exception of this LivingAreaEating.
        :rtype: str
        """
        return self._sink_exception

    @sink_exception.setter
    def sink_exception(self, sink_exception):
        """Sets the sink_exception of this LivingAreaEating.

        Sink exception.

        :param sink_exception: The sink_exception of this LivingAreaEating.
        :type sink_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if sink_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `sink_exception` ({0}), must be one of {1}"
                .format(sink_exception, allowed_values)
            )

        self._sink_exception = sink_exception

    @property
    def snackbar(self):
        """Gets the snackbar of this LivingAreaEating.

        Snackbar. A small cabinet in the guestroom containing snacks. The items are most commonly available for a fee.

        :return: The snackbar of this LivingAreaEating.
        :rtype: bool
        """
        return self._snackbar

    @snackbar.setter
    def snackbar(self, snackbar):
        """Sets the snackbar of this LivingAreaEating.

        Snackbar. A small cabinet in the guestroom containing snacks. The items are most commonly available for a fee.

        :param snackbar: The snackbar of this LivingAreaEating.
        :type snackbar: bool
        """

        self._snackbar = snackbar

    @property
    def snackbar_exception(self):
        """Gets the snackbar_exception of this LivingAreaEating.

        Snackbar exception.

        :return: The snackbar_exception of this LivingAreaEating.
        :rtype: str
        """
        return self._snackbar_exception

    @snackbar_exception.setter
    def snackbar_exception(self, snackbar_exception):
        """Sets the snackbar_exception of this LivingAreaEating.

        Snackbar exception.

        :param snackbar_exception: The snackbar_exception of this LivingAreaEating.
        :type snackbar_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if snackbar_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `snackbar_exception` ({0}), must be one of {1}"
                .format(snackbar_exception, allowed_values)
            )

        self._snackbar_exception = snackbar_exception

    @property
    def stove(self):
        """Gets the stove of this LivingAreaEating.

        Stove. A kitchen appliance powered by gas or electricity for the purpose of creating a flame or hot surface on which pots of food can be cooked. Also known as cooktop or hob.

        :return: The stove of this LivingAreaEating.
        :rtype: bool
        """
        return self._stove

    @stove.setter
    def stove(self, stove):
        """Sets the stove of this LivingAreaEating.

        Stove. A kitchen appliance powered by gas or electricity for the purpose of creating a flame or hot surface on which pots of food can be cooked. Also known as cooktop or hob.

        :param stove: The stove of this LivingAreaEating.
        :type stove: bool
        """

        self._stove = stove

    @property
    def stove_exception(self):
        """Gets the stove_exception of this LivingAreaEating.

        Stove exception.

        :return: The stove_exception of this LivingAreaEating.
        :rtype: str
        """
        return self._stove_exception

    @stove_exception.setter
    def stove_exception(self, stove_exception):
        """Sets the stove_exception of this LivingAreaEating.

        Stove exception.

        :param stove_exception: The stove_exception of this LivingAreaEating.
        :type stove_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if stove_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `stove_exception` ({0}), must be one of {1}"
                .format(stove_exception, allowed_values)
            )

        self._stove_exception = stove_exception

    @property
    def tea_station(self):
        """Gets the tea_station of this LivingAreaEating.

        Tea station. A small area with the supplies needed to heat water and make tea.

        :return: The tea_station of this LivingAreaEating.
        :rtype: bool
        """
        return self._tea_station

    @tea_station.setter
    def tea_station(self, tea_station):
        """Sets the tea_station of this LivingAreaEating.

        Tea station. A small area with the supplies needed to heat water and make tea.

        :param tea_station: The tea_station of this LivingAreaEating.
        :type tea_station: bool
        """

        self._tea_station = tea_station

    @property
    def tea_station_exception(self):
        """Gets the tea_station_exception of this LivingAreaEating.

        Tea station exception.

        :return: The tea_station_exception of this LivingAreaEating.
        :rtype: str
        """
        return self._tea_station_exception

    @tea_station_exception.setter
    def tea_station_exception(self, tea_station_exception):
        """Sets the tea_station_exception of this LivingAreaEating.

        Tea station exception.

        :param tea_station_exception: The tea_station_exception of this LivingAreaEating.
        :type tea_station_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if tea_station_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `tea_station_exception` ({0}), must be one of {1}"
                .format(tea_station_exception, allowed_values)
            )

        self._tea_station_exception = tea_station_exception

    @property
    def toaster(self):
        """Gets the toaster of this LivingAreaEating.

        Toaster. A small, temperature controlled electric appliance with rectangular slots at the top that are lined with heated coils for the purpose of browning slices of bread products.

        :return: The toaster of this LivingAreaEating.
        :rtype: bool
        """
        return self._toaster

    @toaster.setter
    def toaster(self, toaster):
        """Sets the toaster of this LivingAreaEating.

        Toaster. A small, temperature controlled electric appliance with rectangular slots at the top that are lined with heated coils for the purpose of browning slices of bread products.

        :param toaster: The toaster of this LivingAreaEating.
        :type toaster: bool
        """

        self._toaster = toaster

    @property
    def toaster_exception(self):
        """Gets the toaster_exception of this LivingAreaEating.

        Toaster exception.

        :return: The toaster_exception of this LivingAreaEating.
        :rtype: str
        """
        return self._toaster_exception

    @toaster_exception.setter
    def toaster_exception(self, toaster_exception):
        """Sets the toaster_exception of this LivingAreaEating.

        Toaster exception.

        :param toaster_exception: The toaster_exception of this LivingAreaEating.
        :type toaster_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if toaster_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `toaster_exception` ({0}), must be one of {1}"
                .format(toaster_exception, allowed_values)
            )

        self._toaster_exception = toaster_exception
