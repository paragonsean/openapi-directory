# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.places import Places
from openapi_server.models.point_radius import PointRadius
from openapi_server import util


class ServiceAreaBusiness(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_type: str=None, places: Places=None, radius: PointRadius=None):
        """ServiceAreaBusiness - a model defined in OpenAPI

        :param business_type: The business_type of this ServiceAreaBusiness.
        :param places: The places of this ServiceAreaBusiness.
        :param radius: The radius of this ServiceAreaBusiness.
        """
        self.openapi_types = {
            'business_type': str,
            'places': Places,
            'radius': PointRadius
        }

        self.attribute_map = {
            'business_type': 'businessType',
            'places': 'places',
            'radius': 'radius'
        }

        self._business_type = business_type
        self._places = places
        self._radius = radius

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceAreaBusiness':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceAreaBusiness of this ServiceAreaBusiness.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_type(self):
        """Gets the business_type of this ServiceAreaBusiness.

        Indicates the type of the service area business.

        :return: The business_type of this ServiceAreaBusiness.
        :rtype: str
        """
        return self._business_type

    @business_type.setter
    def business_type(self, business_type):
        """Sets the business_type of this ServiceAreaBusiness.

        Indicates the type of the service area business.

        :param business_type: The business_type of this ServiceAreaBusiness.
        :type business_type: str
        """
        allowed_values = ["BUSINESS_TYPE_UNSPECIFIED", "CUSTOMER_LOCATION_ONLY", "CUSTOMER_AND_BUSINESS_LOCATION"]  # noqa: E501
        if business_type not in allowed_values:
            raise ValueError(
                "Invalid value for `business_type` ({0}), must be one of {1}"
                .format(business_type, allowed_values)
            )

        self._business_type = business_type

    @property
    def places(self):
        """Gets the places of this ServiceAreaBusiness.


        :return: The places of this ServiceAreaBusiness.
        :rtype: Places
        """
        return self._places

    @places.setter
    def places(self, places):
        """Sets the places of this ServiceAreaBusiness.


        :param places: The places of this ServiceAreaBusiness.
        :type places: Places
        """

        self._places = places

    @property
    def radius(self):
        """Gets the radius of this ServiceAreaBusiness.


        :return: The radius of this ServiceAreaBusiness.
        :rtype: PointRadius
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this ServiceAreaBusiness.


        :param radius: The radius of this ServiceAreaBusiness.
        :type radius: PointRadius
        """

        self._radius = radius
