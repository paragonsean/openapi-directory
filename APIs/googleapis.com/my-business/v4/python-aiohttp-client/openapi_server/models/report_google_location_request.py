# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportGoogleLocationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location_group_name: str=None, report_reason_bad_location: str=None, report_reason_bad_recommendation: str=None, report_reason_elaboration: str=None, report_reason_language_code: str=None):
        """ReportGoogleLocationRequest - a model defined in OpenAPI

        :param location_group_name: The location_group_name of this ReportGoogleLocationRequest.
        :param report_reason_bad_location: The report_reason_bad_location of this ReportGoogleLocationRequest.
        :param report_reason_bad_recommendation: The report_reason_bad_recommendation of this ReportGoogleLocationRequest.
        :param report_reason_elaboration: The report_reason_elaboration of this ReportGoogleLocationRequest.
        :param report_reason_language_code: The report_reason_language_code of this ReportGoogleLocationRequest.
        """
        self.openapi_types = {
            'location_group_name': str,
            'report_reason_bad_location': str,
            'report_reason_bad_recommendation': str,
            'report_reason_elaboration': str,
            'report_reason_language_code': str
        }

        self.attribute_map = {
            'location_group_name': 'locationGroupName',
            'report_reason_bad_location': 'reportReasonBadLocation',
            'report_reason_bad_recommendation': 'reportReasonBadRecommendation',
            'report_reason_elaboration': 'reportReasonElaboration',
            'report_reason_language_code': 'reportReasonLanguageCode'
        }

        self._location_group_name = location_group_name
        self._report_reason_bad_location = report_reason_bad_location
        self._report_reason_bad_recommendation = report_reason_bad_recommendation
        self._report_reason_elaboration = report_reason_elaboration
        self._report_reason_language_code = report_reason_language_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportGoogleLocationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportGoogleLocationRequest of this ReportGoogleLocationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location_group_name(self):
        """Gets the location_group_name of this ReportGoogleLocationRequest.

        Optional. The resource name of the location group that this Google Location is being reported for, in the format `accounts/{account_id}`.

        :return: The location_group_name of this ReportGoogleLocationRequest.
        :rtype: str
        """
        return self._location_group_name

    @location_group_name.setter
    def location_group_name(self, location_group_name):
        """Sets the location_group_name of this ReportGoogleLocationRequest.

        Optional. The resource name of the location group that this Google Location is being reported for, in the format `accounts/{account_id}`.

        :param location_group_name: The location_group_name of this ReportGoogleLocationRequest.
        :type location_group_name: str
        """

        self._location_group_name = location_group_name

    @property
    def report_reason_bad_location(self):
        """Gets the report_reason_bad_location of this ReportGoogleLocationRequest.

        The reason for which the user is reporting this location when the issue is with the location itself.

        :return: The report_reason_bad_location of this ReportGoogleLocationRequest.
        :rtype: str
        """
        return self._report_reason_bad_location

    @report_reason_bad_location.setter
    def report_reason_bad_location(self, report_reason_bad_location):
        """Sets the report_reason_bad_location of this ReportGoogleLocationRequest.

        The reason for which the user is reporting this location when the issue is with the location itself.

        :param report_reason_bad_location: The report_reason_bad_location of this ReportGoogleLocationRequest.
        :type report_reason_bad_location: str
        """
        allowed_values = ["BAD_LOCATION_REASON_UNSPECIFIED", "NOT_A_LOCATION", "PERMANENTLY_CLOSED", "DOES_NOT_EXIST", "SPAM", "NOT_A_BUSINESS", "MOVED", "DUPLICATE"]  # noqa: E501
        if report_reason_bad_location not in allowed_values:
            raise ValueError(
                "Invalid value for `report_reason_bad_location` ({0}), must be one of {1}"
                .format(report_reason_bad_location, allowed_values)
            )

        self._report_reason_bad_location = report_reason_bad_location

    @property
    def report_reason_bad_recommendation(self):
        """Gets the report_reason_bad_recommendation of this ReportGoogleLocationRequest.

        The reason for which the user is reporting this location when the issue is with the recommendation. This report is useful if the location has been recommended to the Business Profile account.

        :return: The report_reason_bad_recommendation of this ReportGoogleLocationRequest.
        :rtype: str
        """
        return self._report_reason_bad_recommendation

    @report_reason_bad_recommendation.setter
    def report_reason_bad_recommendation(self, report_reason_bad_recommendation):
        """Sets the report_reason_bad_recommendation of this ReportGoogleLocationRequest.

        The reason for which the user is reporting this location when the issue is with the recommendation. This report is useful if the location has been recommended to the Business Profile account.

        :param report_reason_bad_recommendation: The report_reason_bad_recommendation of this ReportGoogleLocationRequest.
        :type report_reason_bad_recommendation: str
        """
        allowed_values = ["BAD_RECOMMENDATION_REASON_UNSPECIFIED", "NOT_A_STORE_FRONT", "NOT_PART_OF_SUGGESTED_CHAIN", "IRRELEVANT"]  # noqa: E501
        if report_reason_bad_recommendation not in allowed_values:
            raise ValueError(
                "Invalid value for `report_reason_bad_recommendation` ({0}), must be one of {1}"
                .format(report_reason_bad_recommendation, allowed_values)
            )

        self._report_reason_bad_recommendation = report_reason_bad_recommendation

    @property
    def report_reason_elaboration(self):
        """Gets the report_reason_elaboration of this ReportGoogleLocationRequest.

        Optional. A text entry for elaborating on the reason for which the user is reporting this location. The maximum length is 512 characters.

        :return: The report_reason_elaboration of this ReportGoogleLocationRequest.
        :rtype: str
        """
        return self._report_reason_elaboration

    @report_reason_elaboration.setter
    def report_reason_elaboration(self, report_reason_elaboration):
        """Sets the report_reason_elaboration of this ReportGoogleLocationRequest.

        Optional. A text entry for elaborating on the reason for which the user is reporting this location. The maximum length is 512 characters.

        :param report_reason_elaboration: The report_reason_elaboration of this ReportGoogleLocationRequest.
        :type report_reason_elaboration: str
        """

        self._report_reason_elaboration = report_reason_elaboration

    @property
    def report_reason_language_code(self):
        """Gets the report_reason_language_code of this ReportGoogleLocationRequest.

        Optional. The BCP 47 code of language used in `report_reason_elaboration`.

        :return: The report_reason_language_code of this ReportGoogleLocationRequest.
        :rtype: str
        """
        return self._report_reason_language_code

    @report_reason_language_code.setter
    def report_reason_language_code(self, report_reason_language_code):
        """Sets the report_reason_language_code of this ReportGoogleLocationRequest.

        Optional. The BCP 47 code of language used in `report_reason_elaboration`.

        :param report_reason_language_code: The report_reason_language_code of this ReportGoogleLocationRequest.
        :type report_reason_language_code: str
        """

        self._report_reason_language_code = report_reason_language_code
