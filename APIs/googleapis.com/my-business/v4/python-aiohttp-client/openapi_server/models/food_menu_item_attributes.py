# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ingredient import Ingredient
from openapi_server.models.money import Money
from openapi_server.models.nutrition_facts import NutritionFacts
from openapi_server.models.portion_size import PortionSize
from openapi_server import util


class FoodMenuItemAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allergen: List[str]=None, dietary_restriction: List[str]=None, ingredients: List[Ingredient]=None, media_keys: List[str]=None, nutrition_facts: NutritionFacts=None, portion_size: PortionSize=None, preparation_methods: List[str]=None, price: Money=None, serves_num_people: int=None, spiciness: str=None):
        """FoodMenuItemAttributes - a model defined in OpenAPI

        :param allergen: The allergen of this FoodMenuItemAttributes.
        :param dietary_restriction: The dietary_restriction of this FoodMenuItemAttributes.
        :param ingredients: The ingredients of this FoodMenuItemAttributes.
        :param media_keys: The media_keys of this FoodMenuItemAttributes.
        :param nutrition_facts: The nutrition_facts of this FoodMenuItemAttributes.
        :param portion_size: The portion_size of this FoodMenuItemAttributes.
        :param preparation_methods: The preparation_methods of this FoodMenuItemAttributes.
        :param price: The price of this FoodMenuItemAttributes.
        :param serves_num_people: The serves_num_people of this FoodMenuItemAttributes.
        :param spiciness: The spiciness of this FoodMenuItemAttributes.
        """
        self.openapi_types = {
            'allergen': List[str],
            'dietary_restriction': List[str],
            'ingredients': List[Ingredient],
            'media_keys': List[str],
            'nutrition_facts': NutritionFacts,
            'portion_size': PortionSize,
            'preparation_methods': List[str],
            'price': Money,
            'serves_num_people': int,
            'spiciness': str
        }

        self.attribute_map = {
            'allergen': 'allergen',
            'dietary_restriction': 'dietaryRestriction',
            'ingredients': 'ingredients',
            'media_keys': 'mediaKeys',
            'nutrition_facts': 'nutritionFacts',
            'portion_size': 'portionSize',
            'preparation_methods': 'preparationMethods',
            'price': 'price',
            'serves_num_people': 'servesNumPeople',
            'spiciness': 'spiciness'
        }

        self._allergen = allergen
        self._dietary_restriction = dietary_restriction
        self._ingredients = ingredients
        self._media_keys = media_keys
        self._nutrition_facts = nutrition_facts
        self._portion_size = portion_size
        self._preparation_methods = preparation_methods
        self._price = price
        self._serves_num_people = serves_num_people
        self._spiciness = spiciness

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FoodMenuItemAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FoodMenuItemAttributes of this FoodMenuItemAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allergen(self):
        """Gets the allergen of this FoodMenuItemAttributes.

        Optional. Allergens associated with the food dish. It is highly recommended to provide this field.

        :return: The allergen of this FoodMenuItemAttributes.
        :rtype: List[str]
        """
        return self._allergen

    @allergen.setter
    def allergen(self, allergen):
        """Sets the allergen of this FoodMenuItemAttributes.

        Optional. Allergens associated with the food dish. It is highly recommended to provide this field.

        :param allergen: The allergen of this FoodMenuItemAttributes.
        :type allergen: List[str]
        """
        allowed_values = ["ALLERGEN_UNSPECIFIED", "DAIRY", "EGG", "FISH", "PEANUT", "SHELLFISH", "SOY", "TREE_NUT", "WHEAT"]  # noqa: E501
        if not set(allergen).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `allergen` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(allergen) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._allergen = allergen

    @property
    def dietary_restriction(self):
        """Gets the dietary_restriction of this FoodMenuItemAttributes.

        Optional. Dietary information of the food dish. It is highly recommended to provide this field.

        :return: The dietary_restriction of this FoodMenuItemAttributes.
        :rtype: List[str]
        """
        return self._dietary_restriction

    @dietary_restriction.setter
    def dietary_restriction(self, dietary_restriction):
        """Sets the dietary_restriction of this FoodMenuItemAttributes.

        Optional. Dietary information of the food dish. It is highly recommended to provide this field.

        :param dietary_restriction: The dietary_restriction of this FoodMenuItemAttributes.
        :type dietary_restriction: List[str]
        """
        allowed_values = ["DIETARY_RESTRICTION_UNSPECIFIED", "HALAL", "KOSHER", "ORGANIC", "VEGAN", "VEGETARIAN"]  # noqa: E501
        if not set(dietary_restriction).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `dietary_restriction` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(dietary_restriction) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._dietary_restriction = dietary_restriction

    @property
    def ingredients(self):
        """Gets the ingredients of this FoodMenuItemAttributes.

        Optional. Ingredients of the food dish option.

        :return: The ingredients of this FoodMenuItemAttributes.
        :rtype: List[Ingredient]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this FoodMenuItemAttributes.

        Optional. Ingredients of the food dish option.

        :param ingredients: The ingredients of this FoodMenuItemAttributes.
        :type ingredients: List[Ingredient]
        """

        self._ingredients = ingredients

    @property
    def media_keys(self):
        """Gets the media_keys of this FoodMenuItemAttributes.

        Optional. The media keys of the media associated with the dish. Only photo media is supported. When there are multiple photos associated, the first photo is considered as the preferred photo.

        :return: The media_keys of this FoodMenuItemAttributes.
        :rtype: List[str]
        """
        return self._media_keys

    @media_keys.setter
    def media_keys(self, media_keys):
        """Sets the media_keys of this FoodMenuItemAttributes.

        Optional. The media keys of the media associated with the dish. Only photo media is supported. When there are multiple photos associated, the first photo is considered as the preferred photo.

        :param media_keys: The media_keys of this FoodMenuItemAttributes.
        :type media_keys: List[str]
        """

        self._media_keys = media_keys

    @property
    def nutrition_facts(self):
        """Gets the nutrition_facts of this FoodMenuItemAttributes.


        :return: The nutrition_facts of this FoodMenuItemAttributes.
        :rtype: NutritionFacts
        """
        return self._nutrition_facts

    @nutrition_facts.setter
    def nutrition_facts(self, nutrition_facts):
        """Sets the nutrition_facts of this FoodMenuItemAttributes.


        :param nutrition_facts: The nutrition_facts of this FoodMenuItemAttributes.
        :type nutrition_facts: NutritionFacts
        """

        self._nutrition_facts = nutrition_facts

    @property
    def portion_size(self):
        """Gets the portion_size of this FoodMenuItemAttributes.


        :return: The portion_size of this FoodMenuItemAttributes.
        :rtype: PortionSize
        """
        return self._portion_size

    @portion_size.setter
    def portion_size(self, portion_size):
        """Sets the portion_size of this FoodMenuItemAttributes.


        :param portion_size: The portion_size of this FoodMenuItemAttributes.
        :type portion_size: PortionSize
        """

        self._portion_size = portion_size

    @property
    def preparation_methods(self):
        """Gets the preparation_methods of this FoodMenuItemAttributes.

        Optional. Methods on how the food dish option is prepared.

        :return: The preparation_methods of this FoodMenuItemAttributes.
        :rtype: List[str]
        """
        return self._preparation_methods

    @preparation_methods.setter
    def preparation_methods(self, preparation_methods):
        """Sets the preparation_methods of this FoodMenuItemAttributes.

        Optional. Methods on how the food dish option is prepared.

        :param preparation_methods: The preparation_methods of this FoodMenuItemAttributes.
        :type preparation_methods: List[str]
        """
        allowed_values = ["PREPARATION_METHOD_UNSPECIFIED", "BAKED", "BARBECUED", "BASTED", "BLANCHED", "BOILED", "BRAISED", "CODDLED", "FERMENTED", "FRIED", "GRILLED", "KNEADED", "MARINATED", "PAN_FRIED", "PICKLED", "PRESSURE_COOKED", "ROASTED", "SAUTEED", "SEARED", "SIMMERED", "SMOKED", "STEAMED", "STEEPED", "STIR_FRIED", "OTHER_METHOD"]  # noqa: E501
        if not set(preparation_methods).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `preparation_methods` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(preparation_methods) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._preparation_methods = preparation_methods

    @property
    def price(self):
        """Gets the price of this FoodMenuItemAttributes.


        :return: The price of this FoodMenuItemAttributes.
        :rtype: Money
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this FoodMenuItemAttributes.


        :param price: The price of this FoodMenuItemAttributes.
        :type price: Money
        """

        self._price = price

    @property
    def serves_num_people(self):
        """Gets the serves_num_people of this FoodMenuItemAttributes.

        Optional. Number of people can be served by this food dish option.

        :return: The serves_num_people of this FoodMenuItemAttributes.
        :rtype: int
        """
        return self._serves_num_people

    @serves_num_people.setter
    def serves_num_people(self, serves_num_people):
        """Sets the serves_num_people of this FoodMenuItemAttributes.

        Optional. Number of people can be served by this food dish option.

        :param serves_num_people: The serves_num_people of this FoodMenuItemAttributes.
        :type serves_num_people: int
        """

        self._serves_num_people = serves_num_people

    @property
    def spiciness(self):
        """Gets the spiciness of this FoodMenuItemAttributes.

        Optional. Spiciness level of the food dish.

        :return: The spiciness of this FoodMenuItemAttributes.
        :rtype: str
        """
        return self._spiciness

    @spiciness.setter
    def spiciness(self, spiciness):
        """Sets the spiciness of this FoodMenuItemAttributes.

        Optional. Spiciness level of the food dish.

        :param spiciness: The spiciness of this FoodMenuItemAttributes.
        :type spiciness: str
        """
        allowed_values = ["SPICINESS_UNSPECIFIED", "MILD", "MEDIUM", "HOT"]  # noqa: E501
        if spiciness not in allowed_values:
            raise ValueError(
                "Invalid value for `spiciness` ({0}), must be one of {1}"
                .format(spiciness, allowed_values)
            )

        self._spiciness = spiciness
