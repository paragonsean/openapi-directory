# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Admin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_name: str=None, name: str=None, pending_invitation: bool=None, role: str=None):
        """Admin - a model defined in OpenAPI

        :param admin_name: The admin_name of this Admin.
        :param name: The name of this Admin.
        :param pending_invitation: The pending_invitation of this Admin.
        :param role: The role of this Admin.
        """
        self.openapi_types = {
            'admin_name': str,
            'name': str,
            'pending_invitation': bool,
            'role': str
        }

        self.attribute_map = {
            'admin_name': 'adminName',
            'name': 'name',
            'pending_invitation': 'pendingInvitation',
            'role': 'role'
        }

        self._admin_name = admin_name
        self._name = name
        self._pending_invitation = pending_invitation
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Admin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Admin of this Admin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_name(self):
        """Gets the admin_name of this Admin.

        The name of the admin. When making the initial invitation, this is the invitee's email address. On `GET` calls, the user's email address is returned if the invitation is still pending. Otherwise, it contains the user's first and last names.

        :return: The admin_name of this Admin.
        :rtype: str
        """
        return self._admin_name

    @admin_name.setter
    def admin_name(self, admin_name):
        """Sets the admin_name of this Admin.

        The name of the admin. When making the initial invitation, this is the invitee's email address. On `GET` calls, the user's email address is returned if the invitation is still pending. Otherwise, it contains the user's first and last names.

        :param admin_name: The admin_name of this Admin.
        :type admin_name: str
        """

        self._admin_name = admin_name

    @property
    def name(self):
        """Gets the name of this Admin.

        The resource name. For account admins, this is in the form: `accounts/{account_id}/admins/{admin_id}` For location admins, this is in the form: `accounts/{account_id}/locations/{location_id}/admins/{admin_id}`

        :return: The name of this Admin.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Admin.

        The resource name. For account admins, this is in the form: `accounts/{account_id}/admins/{admin_id}` For location admins, this is in the form: `accounts/{account_id}/locations/{location_id}/admins/{admin_id}`

        :param name: The name of this Admin.
        :type name: str
        """

        self._name = name

    @property
    def pending_invitation(self):
        """Gets the pending_invitation of this Admin.

        Output only. Indicates whether this admin has a pending invitation for the specified resource.

        :return: The pending_invitation of this Admin.
        :rtype: bool
        """
        return self._pending_invitation

    @pending_invitation.setter
    def pending_invitation(self, pending_invitation):
        """Sets the pending_invitation of this Admin.

        Output only. Indicates whether this admin has a pending invitation for the specified resource.

        :param pending_invitation: The pending_invitation of this Admin.
        :type pending_invitation: bool
        """

        self._pending_invitation = pending_invitation

    @property
    def role(self):
        """Gets the role of this Admin.

        Specifies the AdminRole that this admin uses with the specified Account or Location resource.

        :return: The role of this Admin.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Admin.

        Specifies the AdminRole that this admin uses with the specified Account or Location resource.

        :param role: The role of this Admin.
        :type role: str
        """
        allowed_values = ["ADMIN_ROLE_UNSPECIFIED", "OWNER", "CO_OWNER", "MANAGER", "COMMUNITY_MANAGER"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role
