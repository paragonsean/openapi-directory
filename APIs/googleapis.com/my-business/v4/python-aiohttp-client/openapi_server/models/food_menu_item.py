# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.food_menu_item_attributes import FoodMenuItemAttributes
from openapi_server.models.food_menu_item_option import FoodMenuItemOption
from openapi_server.models.menu_label import MenuLabel
from openapi_server import util


class FoodMenuItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: FoodMenuItemAttributes=None, labels: List[MenuLabel]=None, options: List[FoodMenuItemOption]=None):
        """FoodMenuItem - a model defined in OpenAPI

        :param attributes: The attributes of this FoodMenuItem.
        :param labels: The labels of this FoodMenuItem.
        :param options: The options of this FoodMenuItem.
        """
        self.openapi_types = {
            'attributes': FoodMenuItemAttributes,
            'labels': List[MenuLabel],
            'options': List[FoodMenuItemOption]
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'labels': 'labels',
            'options': 'options'
        }

        self._attributes = attributes
        self._labels = labels
        self._options = options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FoodMenuItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FoodMenuItem of this FoodMenuItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this FoodMenuItem.


        :return: The attributes of this FoodMenuItem.
        :rtype: FoodMenuItemAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this FoodMenuItem.


        :param attributes: The attributes of this FoodMenuItem.
        :type attributes: FoodMenuItemAttributes
        """

        self._attributes = attributes

    @property
    def labels(self):
        """Gets the labels of this FoodMenuItem.

        Required. Language tagged labels for this menu item. Display names should be 140 characters or less, with descriptions 1,000 characters or less. At least one set of labels is required.

        :return: The labels of this FoodMenuItem.
        :rtype: List[MenuLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this FoodMenuItem.

        Required. Language tagged labels for this menu item. Display names should be 140 characters or less, with descriptions 1,000 characters or less. At least one set of labels is required.

        :param labels: The labels of this FoodMenuItem.
        :type labels: List[MenuLabel]
        """

        self._labels = labels

    @property
    def options(self):
        """Gets the options of this FoodMenuItem.

        Optional. This is for an item that comes in multiple different options, and users are required to make choices. E.g. \"regular\" vs. \"large\" pizza. When options are specified, labels and attributes at item level will automatically become the first option's labels and attributes. Clients only need to specify other additional food options in this field.

        :return: The options of this FoodMenuItem.
        :rtype: List[FoodMenuItemOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this FoodMenuItem.

        Optional. This is for an item that comes in multiple different options, and users are required to make choices. E.g. \"regular\" vs. \"large\" pizza. When options are specified, labels and attributes at item level will automatically become the first option's labels and attributes. Clients only need to specify other additional food options in this field.

        :param options: The options of this FoodMenuItem.
        :type options: List[FoodMenuItemOption]
        """

        self._options = options
