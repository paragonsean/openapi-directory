# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocationAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, price_list_item_id: str=None):
        """LocationAssociation - a model defined in OpenAPI

        :param category: The category of this LocationAssociation.
        :param price_list_item_id: The price_list_item_id of this LocationAssociation.
        """
        self.openapi_types = {
            'category': str,
            'price_list_item_id': str
        }

        self.attribute_map = {
            'category': 'category',
            'price_list_item_id': 'priceListItemId'
        }

        self._category = category
        self._price_list_item_id = price_list_item_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationAssociation of this LocationAssociation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this LocationAssociation.

        The category that this location photo belongs to.

        :return: The category of this LocationAssociation.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this LocationAssociation.

        The category that this location photo belongs to.

        :param category: The category of this LocationAssociation.
        :type category: str
        """
        allowed_values = ["CATEGORY_UNSPECIFIED", "COVER", "PROFILE", "LOGO", "EXTERIOR", "INTERIOR", "PRODUCT", "AT_WORK", "FOOD_AND_DRINK", "MENU", "COMMON_AREA", "ROOMS", "TEAMS", "ADDITIONAL"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def price_list_item_id(self):
        """Gets the price_list_item_id of this LocationAssociation.

        The ID of a price list item that this location photo is associated with.

        :return: The price_list_item_id of this LocationAssociation.
        :rtype: str
        """
        return self._price_list_item_id

    @price_list_item_id.setter
    def price_list_item_id(self, price_list_item_id):
        """Sets the price_list_item_id of this LocationAssociation.

        The ID of a price list item that this location photo is associated with.

        :param price_list_item_id: The price_list_item_id of this LocationAssociation.
        :type price_list_item_id: str
        """

        self._price_list_item_id = price_list_item_id
