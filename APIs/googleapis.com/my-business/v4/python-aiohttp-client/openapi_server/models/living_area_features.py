# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LivingAreaFeatures(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, air_conditioning: bool=None, air_conditioning_exception: str=None, bathtub: bool=None, bathtub_exception: str=None, bidet: bool=None, bidet_exception: str=None, dryer: bool=None, dryer_exception: str=None, electronic_room_key: bool=None, electronic_room_key_exception: str=None, fireplace: bool=None, fireplace_exception: str=None, hairdryer: bool=None, hairdryer_exception: str=None, heating: bool=None, heating_exception: str=None, inunit_safe: bool=None, inunit_safe_exception: str=None, inunit_wifi_available: bool=None, inunit_wifi_available_exception: str=None, ironing_equipment: bool=None, ironing_equipment_exception: str=None, pay_per_view_movies: bool=None, pay_per_view_movies_exception: str=None, private_bathroom: bool=None, private_bathroom_exception: str=None, shower: bool=None, shower_exception: str=None, toilet: bool=None, toilet_exception: str=None, tv: bool=None, tv_casting: bool=None, tv_casting_exception: str=None, tv_exception: str=None, tv_streaming: bool=None, tv_streaming_exception: str=None, universal_power_adapters: bool=None, universal_power_adapters_exception: str=None, washer: bool=None, washer_exception: str=None):
        """LivingAreaFeatures - a model defined in OpenAPI

        :param air_conditioning: The air_conditioning of this LivingAreaFeatures.
        :param air_conditioning_exception: The air_conditioning_exception of this LivingAreaFeatures.
        :param bathtub: The bathtub of this LivingAreaFeatures.
        :param bathtub_exception: The bathtub_exception of this LivingAreaFeatures.
        :param bidet: The bidet of this LivingAreaFeatures.
        :param bidet_exception: The bidet_exception of this LivingAreaFeatures.
        :param dryer: The dryer of this LivingAreaFeatures.
        :param dryer_exception: The dryer_exception of this LivingAreaFeatures.
        :param electronic_room_key: The electronic_room_key of this LivingAreaFeatures.
        :param electronic_room_key_exception: The electronic_room_key_exception of this LivingAreaFeatures.
        :param fireplace: The fireplace of this LivingAreaFeatures.
        :param fireplace_exception: The fireplace_exception of this LivingAreaFeatures.
        :param hairdryer: The hairdryer of this LivingAreaFeatures.
        :param hairdryer_exception: The hairdryer_exception of this LivingAreaFeatures.
        :param heating: The heating of this LivingAreaFeatures.
        :param heating_exception: The heating_exception of this LivingAreaFeatures.
        :param inunit_safe: The inunit_safe of this LivingAreaFeatures.
        :param inunit_safe_exception: The inunit_safe_exception of this LivingAreaFeatures.
        :param inunit_wifi_available: The inunit_wifi_available of this LivingAreaFeatures.
        :param inunit_wifi_available_exception: The inunit_wifi_available_exception of this LivingAreaFeatures.
        :param ironing_equipment: The ironing_equipment of this LivingAreaFeatures.
        :param ironing_equipment_exception: The ironing_equipment_exception of this LivingAreaFeatures.
        :param pay_per_view_movies: The pay_per_view_movies of this LivingAreaFeatures.
        :param pay_per_view_movies_exception: The pay_per_view_movies_exception of this LivingAreaFeatures.
        :param private_bathroom: The private_bathroom of this LivingAreaFeatures.
        :param private_bathroom_exception: The private_bathroom_exception of this LivingAreaFeatures.
        :param shower: The shower of this LivingAreaFeatures.
        :param shower_exception: The shower_exception of this LivingAreaFeatures.
        :param toilet: The toilet of this LivingAreaFeatures.
        :param toilet_exception: The toilet_exception of this LivingAreaFeatures.
        :param tv: The tv of this LivingAreaFeatures.
        :param tv_casting: The tv_casting of this LivingAreaFeatures.
        :param tv_casting_exception: The tv_casting_exception of this LivingAreaFeatures.
        :param tv_exception: The tv_exception of this LivingAreaFeatures.
        :param tv_streaming: The tv_streaming of this LivingAreaFeatures.
        :param tv_streaming_exception: The tv_streaming_exception of this LivingAreaFeatures.
        :param universal_power_adapters: The universal_power_adapters of this LivingAreaFeatures.
        :param universal_power_adapters_exception: The universal_power_adapters_exception of this LivingAreaFeatures.
        :param washer: The washer of this LivingAreaFeatures.
        :param washer_exception: The washer_exception of this LivingAreaFeatures.
        """
        self.openapi_types = {
            'air_conditioning': bool,
            'air_conditioning_exception': str,
            'bathtub': bool,
            'bathtub_exception': str,
            'bidet': bool,
            'bidet_exception': str,
            'dryer': bool,
            'dryer_exception': str,
            'electronic_room_key': bool,
            'electronic_room_key_exception': str,
            'fireplace': bool,
            'fireplace_exception': str,
            'hairdryer': bool,
            'hairdryer_exception': str,
            'heating': bool,
            'heating_exception': str,
            'inunit_safe': bool,
            'inunit_safe_exception': str,
            'inunit_wifi_available': bool,
            'inunit_wifi_available_exception': str,
            'ironing_equipment': bool,
            'ironing_equipment_exception': str,
            'pay_per_view_movies': bool,
            'pay_per_view_movies_exception': str,
            'private_bathroom': bool,
            'private_bathroom_exception': str,
            'shower': bool,
            'shower_exception': str,
            'toilet': bool,
            'toilet_exception': str,
            'tv': bool,
            'tv_casting': bool,
            'tv_casting_exception': str,
            'tv_exception': str,
            'tv_streaming': bool,
            'tv_streaming_exception': str,
            'universal_power_adapters': bool,
            'universal_power_adapters_exception': str,
            'washer': bool,
            'washer_exception': str
        }

        self.attribute_map = {
            'air_conditioning': 'airConditioning',
            'air_conditioning_exception': 'airConditioningException',
            'bathtub': 'bathtub',
            'bathtub_exception': 'bathtubException',
            'bidet': 'bidet',
            'bidet_exception': 'bidetException',
            'dryer': 'dryer',
            'dryer_exception': 'dryerException',
            'electronic_room_key': 'electronicRoomKey',
            'electronic_room_key_exception': 'electronicRoomKeyException',
            'fireplace': 'fireplace',
            'fireplace_exception': 'fireplaceException',
            'hairdryer': 'hairdryer',
            'hairdryer_exception': 'hairdryerException',
            'heating': 'heating',
            'heating_exception': 'heatingException',
            'inunit_safe': 'inunitSafe',
            'inunit_safe_exception': 'inunitSafeException',
            'inunit_wifi_available': 'inunitWifiAvailable',
            'inunit_wifi_available_exception': 'inunitWifiAvailableException',
            'ironing_equipment': 'ironingEquipment',
            'ironing_equipment_exception': 'ironingEquipmentException',
            'pay_per_view_movies': 'payPerViewMovies',
            'pay_per_view_movies_exception': 'payPerViewMoviesException',
            'private_bathroom': 'privateBathroom',
            'private_bathroom_exception': 'privateBathroomException',
            'shower': 'shower',
            'shower_exception': 'showerException',
            'toilet': 'toilet',
            'toilet_exception': 'toiletException',
            'tv': 'tv',
            'tv_casting': 'tvCasting',
            'tv_casting_exception': 'tvCastingException',
            'tv_exception': 'tvException',
            'tv_streaming': 'tvStreaming',
            'tv_streaming_exception': 'tvStreamingException',
            'universal_power_adapters': 'universalPowerAdapters',
            'universal_power_adapters_exception': 'universalPowerAdaptersException',
            'washer': 'washer',
            'washer_exception': 'washerException'
        }

        self._air_conditioning = air_conditioning
        self._air_conditioning_exception = air_conditioning_exception
        self._bathtub = bathtub
        self._bathtub_exception = bathtub_exception
        self._bidet = bidet
        self._bidet_exception = bidet_exception
        self._dryer = dryer
        self._dryer_exception = dryer_exception
        self._electronic_room_key = electronic_room_key
        self._electronic_room_key_exception = electronic_room_key_exception
        self._fireplace = fireplace
        self._fireplace_exception = fireplace_exception
        self._hairdryer = hairdryer
        self._hairdryer_exception = hairdryer_exception
        self._heating = heating
        self._heating_exception = heating_exception
        self._inunit_safe = inunit_safe
        self._inunit_safe_exception = inunit_safe_exception
        self._inunit_wifi_available = inunit_wifi_available
        self._inunit_wifi_available_exception = inunit_wifi_available_exception
        self._ironing_equipment = ironing_equipment
        self._ironing_equipment_exception = ironing_equipment_exception
        self._pay_per_view_movies = pay_per_view_movies
        self._pay_per_view_movies_exception = pay_per_view_movies_exception
        self._private_bathroom = private_bathroom
        self._private_bathroom_exception = private_bathroom_exception
        self._shower = shower
        self._shower_exception = shower_exception
        self._toilet = toilet
        self._toilet_exception = toilet_exception
        self._tv = tv
        self._tv_casting = tv_casting
        self._tv_casting_exception = tv_casting_exception
        self._tv_exception = tv_exception
        self._tv_streaming = tv_streaming
        self._tv_streaming_exception = tv_streaming_exception
        self._universal_power_adapters = universal_power_adapters
        self._universal_power_adapters_exception = universal_power_adapters_exception
        self._washer = washer
        self._washer_exception = washer_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LivingAreaFeatures':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LivingAreaFeatures of this LivingAreaFeatures.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def air_conditioning(self):
        """Gets the air_conditioning of this LivingAreaFeatures.

        Air conditioning. An electrical machine used to cool the temperature of the guestroom.

        :return: The air_conditioning of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._air_conditioning

    @air_conditioning.setter
    def air_conditioning(self, air_conditioning):
        """Sets the air_conditioning of this LivingAreaFeatures.

        Air conditioning. An electrical machine used to cool the temperature of the guestroom.

        :param air_conditioning: The air_conditioning of this LivingAreaFeatures.
        :type air_conditioning: bool
        """

        self._air_conditioning = air_conditioning

    @property
    def air_conditioning_exception(self):
        """Gets the air_conditioning_exception of this LivingAreaFeatures.

        Air conditioning exception.

        :return: The air_conditioning_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._air_conditioning_exception

    @air_conditioning_exception.setter
    def air_conditioning_exception(self, air_conditioning_exception):
        """Sets the air_conditioning_exception of this LivingAreaFeatures.

        Air conditioning exception.

        :param air_conditioning_exception: The air_conditioning_exception of this LivingAreaFeatures.
        :type air_conditioning_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if air_conditioning_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `air_conditioning_exception` ({0}), must be one of {1}"
                .format(air_conditioning_exception, allowed_values)
            )

        self._air_conditioning_exception = air_conditioning_exception

    @property
    def bathtub(self):
        """Gets the bathtub of this LivingAreaFeatures.

        Bathtub. A fixed plumbing feature set on the floor and consisting of a large container that accommodates the body of an adult for the purpose of seated bathing. Includes knobs or fixtures to control the temperature of the water, a faucet through which the water flows, and a drain that can be closed for filling and opened for draining.

        :return: The bathtub of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._bathtub

    @bathtub.setter
    def bathtub(self, bathtub):
        """Sets the bathtub of this LivingAreaFeatures.

        Bathtub. A fixed plumbing feature set on the floor and consisting of a large container that accommodates the body of an adult for the purpose of seated bathing. Includes knobs or fixtures to control the temperature of the water, a faucet through which the water flows, and a drain that can be closed for filling and opened for draining.

        :param bathtub: The bathtub of this LivingAreaFeatures.
        :type bathtub: bool
        """

        self._bathtub = bathtub

    @property
    def bathtub_exception(self):
        """Gets the bathtub_exception of this LivingAreaFeatures.

        Bathtub exception.

        :return: The bathtub_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._bathtub_exception

    @bathtub_exception.setter
    def bathtub_exception(self, bathtub_exception):
        """Sets the bathtub_exception of this LivingAreaFeatures.

        Bathtub exception.

        :param bathtub_exception: The bathtub_exception of this LivingAreaFeatures.
        :type bathtub_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if bathtub_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `bathtub_exception` ({0}), must be one of {1}"
                .format(bathtub_exception, allowed_values)
            )

        self._bathtub_exception = bathtub_exception

    @property
    def bidet(self):
        """Gets the bidet of this LivingAreaFeatures.

        Bidet. A plumbing fixture attached to a toilet or a low, fixed sink designed for the purpose of washing after toilet use.

        :return: The bidet of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._bidet

    @bidet.setter
    def bidet(self, bidet):
        """Sets the bidet of this LivingAreaFeatures.

        Bidet. A plumbing fixture attached to a toilet or a low, fixed sink designed for the purpose of washing after toilet use.

        :param bidet: The bidet of this LivingAreaFeatures.
        :type bidet: bool
        """

        self._bidet = bidet

    @property
    def bidet_exception(self):
        """Gets the bidet_exception of this LivingAreaFeatures.

        Bidet exception.

        :return: The bidet_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._bidet_exception

    @bidet_exception.setter
    def bidet_exception(self, bidet_exception):
        """Sets the bidet_exception of this LivingAreaFeatures.

        Bidet exception.

        :param bidet_exception: The bidet_exception of this LivingAreaFeatures.
        :type bidet_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if bidet_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `bidet_exception` ({0}), must be one of {1}"
                .format(bidet_exception, allowed_values)
            )

        self._bidet_exception = bidet_exception

    @property
    def dryer(self):
        """Gets the dryer of this LivingAreaFeatures.

        Dryer. An electrical machine designed to dry clothing.

        :return: The dryer of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._dryer

    @dryer.setter
    def dryer(self, dryer):
        """Sets the dryer of this LivingAreaFeatures.

        Dryer. An electrical machine designed to dry clothing.

        :param dryer: The dryer of this LivingAreaFeatures.
        :type dryer: bool
        """

        self._dryer = dryer

    @property
    def dryer_exception(self):
        """Gets the dryer_exception of this LivingAreaFeatures.

        Dryer exception.

        :return: The dryer_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._dryer_exception

    @dryer_exception.setter
    def dryer_exception(self, dryer_exception):
        """Sets the dryer_exception of this LivingAreaFeatures.

        Dryer exception.

        :param dryer_exception: The dryer_exception of this LivingAreaFeatures.
        :type dryer_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if dryer_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `dryer_exception` ({0}), must be one of {1}"
                .format(dryer_exception, allowed_values)
            )

        self._dryer_exception = dryer_exception

    @property
    def electronic_room_key(self):
        """Gets the electronic_room_key of this LivingAreaFeatures.

        Electronic room key. A card coded by the check-in computer that is read by the lock on the hotel guestroom door to allow for entry.

        :return: The electronic_room_key of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._electronic_room_key

    @electronic_room_key.setter
    def electronic_room_key(self, electronic_room_key):
        """Sets the electronic_room_key of this LivingAreaFeatures.

        Electronic room key. A card coded by the check-in computer that is read by the lock on the hotel guestroom door to allow for entry.

        :param electronic_room_key: The electronic_room_key of this LivingAreaFeatures.
        :type electronic_room_key: bool
        """

        self._electronic_room_key = electronic_room_key

    @property
    def electronic_room_key_exception(self):
        """Gets the electronic_room_key_exception of this LivingAreaFeatures.

        Electronic room key exception.

        :return: The electronic_room_key_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._electronic_room_key_exception

    @electronic_room_key_exception.setter
    def electronic_room_key_exception(self, electronic_room_key_exception):
        """Sets the electronic_room_key_exception of this LivingAreaFeatures.

        Electronic room key exception.

        :param electronic_room_key_exception: The electronic_room_key_exception of this LivingAreaFeatures.
        :type electronic_room_key_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if electronic_room_key_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `electronic_room_key_exception` ({0}), must be one of {1}"
                .format(electronic_room_key_exception, allowed_values)
            )

        self._electronic_room_key_exception = electronic_room_key_exception

    @property
    def fireplace(self):
        """Gets the fireplace of this LivingAreaFeatures.

        Fireplace. A framed opening (aka hearth) at the base of a chimney in which logs or an electrical fire feature are burned to provide a relaxing ambiance or to heat the room. Often made of bricks or stone.

        :return: The fireplace of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._fireplace

    @fireplace.setter
    def fireplace(self, fireplace):
        """Sets the fireplace of this LivingAreaFeatures.

        Fireplace. A framed opening (aka hearth) at the base of a chimney in which logs or an electrical fire feature are burned to provide a relaxing ambiance or to heat the room. Often made of bricks or stone.

        :param fireplace: The fireplace of this LivingAreaFeatures.
        :type fireplace: bool
        """

        self._fireplace = fireplace

    @property
    def fireplace_exception(self):
        """Gets the fireplace_exception of this LivingAreaFeatures.

        Fireplace exception.

        :return: The fireplace_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._fireplace_exception

    @fireplace_exception.setter
    def fireplace_exception(self, fireplace_exception):
        """Sets the fireplace_exception of this LivingAreaFeatures.

        Fireplace exception.

        :param fireplace_exception: The fireplace_exception of this LivingAreaFeatures.
        :type fireplace_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if fireplace_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `fireplace_exception` ({0}), must be one of {1}"
                .format(fireplace_exception, allowed_values)
            )

        self._fireplace_exception = fireplace_exception

    @property
    def hairdryer(self):
        """Gets the hairdryer of this LivingAreaFeatures.

        Hairdryer. A handheld electric appliance that blows temperature-controlled air for the purpose of drying wet hair. Can be mounted to a bathroom wall or a freestanding device stored in the guestroom's bathroom or closet.

        :return: The hairdryer of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._hairdryer

    @hairdryer.setter
    def hairdryer(self, hairdryer):
        """Sets the hairdryer of this LivingAreaFeatures.

        Hairdryer. A handheld electric appliance that blows temperature-controlled air for the purpose of drying wet hair. Can be mounted to a bathroom wall or a freestanding device stored in the guestroom's bathroom or closet.

        :param hairdryer: The hairdryer of this LivingAreaFeatures.
        :type hairdryer: bool
        """

        self._hairdryer = hairdryer

    @property
    def hairdryer_exception(self):
        """Gets the hairdryer_exception of this LivingAreaFeatures.

        Hairdryer exception.

        :return: The hairdryer_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._hairdryer_exception

    @hairdryer_exception.setter
    def hairdryer_exception(self, hairdryer_exception):
        """Sets the hairdryer_exception of this LivingAreaFeatures.

        Hairdryer exception.

        :param hairdryer_exception: The hairdryer_exception of this LivingAreaFeatures.
        :type hairdryer_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if hairdryer_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `hairdryer_exception` ({0}), must be one of {1}"
                .format(hairdryer_exception, allowed_values)
            )

        self._hairdryer_exception = hairdryer_exception

    @property
    def heating(self):
        """Gets the heating of this LivingAreaFeatures.

        Heating. An electrical machine used to warm the temperature of the guestroom.

        :return: The heating of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._heating

    @heating.setter
    def heating(self, heating):
        """Sets the heating of this LivingAreaFeatures.

        Heating. An electrical machine used to warm the temperature of the guestroom.

        :param heating: The heating of this LivingAreaFeatures.
        :type heating: bool
        """

        self._heating = heating

    @property
    def heating_exception(self):
        """Gets the heating_exception of this LivingAreaFeatures.

        Heating exception.

        :return: The heating_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._heating_exception

    @heating_exception.setter
    def heating_exception(self, heating_exception):
        """Sets the heating_exception of this LivingAreaFeatures.

        Heating exception.

        :param heating_exception: The heating_exception of this LivingAreaFeatures.
        :type heating_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if heating_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `heating_exception` ({0}), must be one of {1}"
                .format(heating_exception, allowed_values)
            )

        self._heating_exception = heating_exception

    @property
    def inunit_safe(self):
        """Gets the inunit_safe of this LivingAreaFeatures.

        In-unit safe. A strong fireproof cabinet with a programmable lock, used for the protected storage of valuables in a guestroom. Often built into a closet.

        :return: The inunit_safe of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._inunit_safe

    @inunit_safe.setter
    def inunit_safe(self, inunit_safe):
        """Sets the inunit_safe of this LivingAreaFeatures.

        In-unit safe. A strong fireproof cabinet with a programmable lock, used for the protected storage of valuables in a guestroom. Often built into a closet.

        :param inunit_safe: The inunit_safe of this LivingAreaFeatures.
        :type inunit_safe: bool
        """

        self._inunit_safe = inunit_safe

    @property
    def inunit_safe_exception(self):
        """Gets the inunit_safe_exception of this LivingAreaFeatures.

        In-unit safe exception.

        :return: The inunit_safe_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._inunit_safe_exception

    @inunit_safe_exception.setter
    def inunit_safe_exception(self, inunit_safe_exception):
        """Sets the inunit_safe_exception of this LivingAreaFeatures.

        In-unit safe exception.

        :param inunit_safe_exception: The inunit_safe_exception of this LivingAreaFeatures.
        :type inunit_safe_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if inunit_safe_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `inunit_safe_exception` ({0}), must be one of {1}"
                .format(inunit_safe_exception, allowed_values)
            )

        self._inunit_safe_exception = inunit_safe_exception

    @property
    def inunit_wifi_available(self):
        """Gets the inunit_wifi_available of this LivingAreaFeatures.

        In-unit Wifi available. Guests can wirelessly connect to the Internet in the guestroom. Can be free or for a fee.

        :return: The inunit_wifi_available of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._inunit_wifi_available

    @inunit_wifi_available.setter
    def inunit_wifi_available(self, inunit_wifi_available):
        """Sets the inunit_wifi_available of this LivingAreaFeatures.

        In-unit Wifi available. Guests can wirelessly connect to the Internet in the guestroom. Can be free or for a fee.

        :param inunit_wifi_available: The inunit_wifi_available of this LivingAreaFeatures.
        :type inunit_wifi_available: bool
        """

        self._inunit_wifi_available = inunit_wifi_available

    @property
    def inunit_wifi_available_exception(self):
        """Gets the inunit_wifi_available_exception of this LivingAreaFeatures.

        In-unit Wifi available exception.

        :return: The inunit_wifi_available_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._inunit_wifi_available_exception

    @inunit_wifi_available_exception.setter
    def inunit_wifi_available_exception(self, inunit_wifi_available_exception):
        """Sets the inunit_wifi_available_exception of this LivingAreaFeatures.

        In-unit Wifi available exception.

        :param inunit_wifi_available_exception: The inunit_wifi_available_exception of this LivingAreaFeatures.
        :type inunit_wifi_available_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if inunit_wifi_available_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `inunit_wifi_available_exception` ({0}), must be one of {1}"
                .format(inunit_wifi_available_exception, allowed_values)
            )

        self._inunit_wifi_available_exception = inunit_wifi_available_exception

    @property
    def ironing_equipment(self):
        """Gets the ironing_equipment of this LivingAreaFeatures.

        Ironing equipment. A device, usually with a flat metal base, that is heated to smooth, finish, or press clothes and a flat, padded, cloth-covered surface on which the clothes are worked.

        :return: The ironing_equipment of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._ironing_equipment

    @ironing_equipment.setter
    def ironing_equipment(self, ironing_equipment):
        """Sets the ironing_equipment of this LivingAreaFeatures.

        Ironing equipment. A device, usually with a flat metal base, that is heated to smooth, finish, or press clothes and a flat, padded, cloth-covered surface on which the clothes are worked.

        :param ironing_equipment: The ironing_equipment of this LivingAreaFeatures.
        :type ironing_equipment: bool
        """

        self._ironing_equipment = ironing_equipment

    @property
    def ironing_equipment_exception(self):
        """Gets the ironing_equipment_exception of this LivingAreaFeatures.

        Ironing equipment exception.

        :return: The ironing_equipment_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._ironing_equipment_exception

    @ironing_equipment_exception.setter
    def ironing_equipment_exception(self, ironing_equipment_exception):
        """Sets the ironing_equipment_exception of this LivingAreaFeatures.

        Ironing equipment exception.

        :param ironing_equipment_exception: The ironing_equipment_exception of this LivingAreaFeatures.
        :type ironing_equipment_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if ironing_equipment_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `ironing_equipment_exception` ({0}), must be one of {1}"
                .format(ironing_equipment_exception, allowed_values)
            )

        self._ironing_equipment_exception = ironing_equipment_exception

    @property
    def pay_per_view_movies(self):
        """Gets the pay_per_view_movies of this LivingAreaFeatures.

        Pay per view movies. Televisions with channels that offer films that can be viewed for a fee, and have an interface to allow the viewer to accept the terms and approve payment.

        :return: The pay_per_view_movies of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._pay_per_view_movies

    @pay_per_view_movies.setter
    def pay_per_view_movies(self, pay_per_view_movies):
        """Sets the pay_per_view_movies of this LivingAreaFeatures.

        Pay per view movies. Televisions with channels that offer films that can be viewed for a fee, and have an interface to allow the viewer to accept the terms and approve payment.

        :param pay_per_view_movies: The pay_per_view_movies of this LivingAreaFeatures.
        :type pay_per_view_movies: bool
        """

        self._pay_per_view_movies = pay_per_view_movies

    @property
    def pay_per_view_movies_exception(self):
        """Gets the pay_per_view_movies_exception of this LivingAreaFeatures.

        Pay per view movies exception.

        :return: The pay_per_view_movies_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._pay_per_view_movies_exception

    @pay_per_view_movies_exception.setter
    def pay_per_view_movies_exception(self, pay_per_view_movies_exception):
        """Sets the pay_per_view_movies_exception of this LivingAreaFeatures.

        Pay per view movies exception.

        :param pay_per_view_movies_exception: The pay_per_view_movies_exception of this LivingAreaFeatures.
        :type pay_per_view_movies_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if pay_per_view_movies_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `pay_per_view_movies_exception` ({0}), must be one of {1}"
                .format(pay_per_view_movies_exception, allowed_values)
            )

        self._pay_per_view_movies_exception = pay_per_view_movies_exception

    @property
    def private_bathroom(self):
        """Gets the private_bathroom of this LivingAreaFeatures.

        Private bathroom. A bathroom designated for the express use of the guests staying in a specific guestroom.

        :return: The private_bathroom of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._private_bathroom

    @private_bathroom.setter
    def private_bathroom(self, private_bathroom):
        """Sets the private_bathroom of this LivingAreaFeatures.

        Private bathroom. A bathroom designated for the express use of the guests staying in a specific guestroom.

        :param private_bathroom: The private_bathroom of this LivingAreaFeatures.
        :type private_bathroom: bool
        """

        self._private_bathroom = private_bathroom

    @property
    def private_bathroom_exception(self):
        """Gets the private_bathroom_exception of this LivingAreaFeatures.

        Private bathroom exception.

        :return: The private_bathroom_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._private_bathroom_exception

    @private_bathroom_exception.setter
    def private_bathroom_exception(self, private_bathroom_exception):
        """Sets the private_bathroom_exception of this LivingAreaFeatures.

        Private bathroom exception.

        :param private_bathroom_exception: The private_bathroom_exception of this LivingAreaFeatures.
        :type private_bathroom_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if private_bathroom_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `private_bathroom_exception` ({0}), must be one of {1}"
                .format(private_bathroom_exception, allowed_values)
            )

        self._private_bathroom_exception = private_bathroom_exception

    @property
    def shower(self):
        """Gets the shower of this LivingAreaFeatures.

        Shower. A fixed plumbing fixture for standing bathing that features a tall spray spout or faucet through which water flows, a knob or knobs that control the water's temperature, and a drain in the floor.

        :return: The shower of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._shower

    @shower.setter
    def shower(self, shower):
        """Sets the shower of this LivingAreaFeatures.

        Shower. A fixed plumbing fixture for standing bathing that features a tall spray spout or faucet through which water flows, a knob or knobs that control the water's temperature, and a drain in the floor.

        :param shower: The shower of this LivingAreaFeatures.
        :type shower: bool
        """

        self._shower = shower

    @property
    def shower_exception(self):
        """Gets the shower_exception of this LivingAreaFeatures.

        Shower exception.

        :return: The shower_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._shower_exception

    @shower_exception.setter
    def shower_exception(self, shower_exception):
        """Sets the shower_exception of this LivingAreaFeatures.

        Shower exception.

        :param shower_exception: The shower_exception of this LivingAreaFeatures.
        :type shower_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if shower_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `shower_exception` ({0}), must be one of {1}"
                .format(shower_exception, allowed_values)
            )

        self._shower_exception = shower_exception

    @property
    def toilet(self):
        """Gets the toilet of this LivingAreaFeatures.

        Toilet. A fixed bathroom feature connected to a sewer or septic system and consisting of a water-flushed bowl with a seat, as well as a device that elicites the water-flushing action. Used for the process and disposal of human waste.

        :return: The toilet of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._toilet

    @toilet.setter
    def toilet(self, toilet):
        """Sets the toilet of this LivingAreaFeatures.

        Toilet. A fixed bathroom feature connected to a sewer or septic system and consisting of a water-flushed bowl with a seat, as well as a device that elicites the water-flushing action. Used for the process and disposal of human waste.

        :param toilet: The toilet of this LivingAreaFeatures.
        :type toilet: bool
        """

        self._toilet = toilet

    @property
    def toilet_exception(self):
        """Gets the toilet_exception of this LivingAreaFeatures.

        Toilet exception.

        :return: The toilet_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._toilet_exception

    @toilet_exception.setter
    def toilet_exception(self, toilet_exception):
        """Sets the toilet_exception of this LivingAreaFeatures.

        Toilet exception.

        :param toilet_exception: The toilet_exception of this LivingAreaFeatures.
        :type toilet_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if toilet_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `toilet_exception` ({0}), must be one of {1}"
                .format(toilet_exception, allowed_values)
            )

        self._toilet_exception = toilet_exception

    @property
    def tv(self):
        """Gets the tv of this LivingAreaFeatures.

        TV. A television is available in the guestroom.

        :return: The tv of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._tv

    @tv.setter
    def tv(self, tv):
        """Sets the tv of this LivingAreaFeatures.

        TV. A television is available in the guestroom.

        :param tv: The tv of this LivingAreaFeatures.
        :type tv: bool
        """

        self._tv = tv

    @property
    def tv_casting(self):
        """Gets the tv_casting of this LivingAreaFeatures.

        TV casting. A television equipped with a device through which the video entertainment accessed on a personal computer, phone or tablet can be wirelessly delivered to and viewed on the guestroom's television.

        :return: The tv_casting of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._tv_casting

    @tv_casting.setter
    def tv_casting(self, tv_casting):
        """Sets the tv_casting of this LivingAreaFeatures.

        TV casting. A television equipped with a device through which the video entertainment accessed on a personal computer, phone or tablet can be wirelessly delivered to and viewed on the guestroom's television.

        :param tv_casting: The tv_casting of this LivingAreaFeatures.
        :type tv_casting: bool
        """

        self._tv_casting = tv_casting

    @property
    def tv_casting_exception(self):
        """Gets the tv_casting_exception of this LivingAreaFeatures.

        TV exception.

        :return: The tv_casting_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._tv_casting_exception

    @tv_casting_exception.setter
    def tv_casting_exception(self, tv_casting_exception):
        """Sets the tv_casting_exception of this LivingAreaFeatures.

        TV exception.

        :param tv_casting_exception: The tv_casting_exception of this LivingAreaFeatures.
        :type tv_casting_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if tv_casting_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `tv_casting_exception` ({0}), must be one of {1}"
                .format(tv_casting_exception, allowed_values)
            )

        self._tv_casting_exception = tv_casting_exception

    @property
    def tv_exception(self):
        """Gets the tv_exception of this LivingAreaFeatures.

        TV exception.

        :return: The tv_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._tv_exception

    @tv_exception.setter
    def tv_exception(self, tv_exception):
        """Sets the tv_exception of this LivingAreaFeatures.

        TV exception.

        :param tv_exception: The tv_exception of this LivingAreaFeatures.
        :type tv_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if tv_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `tv_exception` ({0}), must be one of {1}"
                .format(tv_exception, allowed_values)
            )

        self._tv_exception = tv_exception

    @property
    def tv_streaming(self):
        """Gets the tv_streaming of this LivingAreaFeatures.

        TV streaming. Televisions that embed a range of web-based apps to allow for watching media from those apps.

        :return: The tv_streaming of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._tv_streaming

    @tv_streaming.setter
    def tv_streaming(self, tv_streaming):
        """Sets the tv_streaming of this LivingAreaFeatures.

        TV streaming. Televisions that embed a range of web-based apps to allow for watching media from those apps.

        :param tv_streaming: The tv_streaming of this LivingAreaFeatures.
        :type tv_streaming: bool
        """

        self._tv_streaming = tv_streaming

    @property
    def tv_streaming_exception(self):
        """Gets the tv_streaming_exception of this LivingAreaFeatures.

        TV streaming exception.

        :return: The tv_streaming_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._tv_streaming_exception

    @tv_streaming_exception.setter
    def tv_streaming_exception(self, tv_streaming_exception):
        """Sets the tv_streaming_exception of this LivingAreaFeatures.

        TV streaming exception.

        :param tv_streaming_exception: The tv_streaming_exception of this LivingAreaFeatures.
        :type tv_streaming_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if tv_streaming_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `tv_streaming_exception` ({0}), must be one of {1}"
                .format(tv_streaming_exception, allowed_values)
            )

        self._tv_streaming_exception = tv_streaming_exception

    @property
    def universal_power_adapters(self):
        """Gets the universal_power_adapters of this LivingAreaFeatures.

        Universal power adapters. A power supply for electronic devices which plugs into a wall for the purpose of converting AC to a single DC voltage. Also know as AC adapter or charger.

        :return: The universal_power_adapters of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._universal_power_adapters

    @universal_power_adapters.setter
    def universal_power_adapters(self, universal_power_adapters):
        """Sets the universal_power_adapters of this LivingAreaFeatures.

        Universal power adapters. A power supply for electronic devices which plugs into a wall for the purpose of converting AC to a single DC voltage. Also know as AC adapter or charger.

        :param universal_power_adapters: The universal_power_adapters of this LivingAreaFeatures.
        :type universal_power_adapters: bool
        """

        self._universal_power_adapters = universal_power_adapters

    @property
    def universal_power_adapters_exception(self):
        """Gets the universal_power_adapters_exception of this LivingAreaFeatures.

        Universal power adapters exception.

        :return: The universal_power_adapters_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._universal_power_adapters_exception

    @universal_power_adapters_exception.setter
    def universal_power_adapters_exception(self, universal_power_adapters_exception):
        """Sets the universal_power_adapters_exception of this LivingAreaFeatures.

        Universal power adapters exception.

        :param universal_power_adapters_exception: The universal_power_adapters_exception of this LivingAreaFeatures.
        :type universal_power_adapters_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if universal_power_adapters_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `universal_power_adapters_exception` ({0}), must be one of {1}"
                .format(universal_power_adapters_exception, allowed_values)
            )

        self._universal_power_adapters_exception = universal_power_adapters_exception

    @property
    def washer(self):
        """Gets the washer of this LivingAreaFeatures.

        Washer. An electrical machine connected to a running water source designed to launder clothing.

        :return: The washer of this LivingAreaFeatures.
        :rtype: bool
        """
        return self._washer

    @washer.setter
    def washer(self, washer):
        """Sets the washer of this LivingAreaFeatures.

        Washer. An electrical machine connected to a running water source designed to launder clothing.

        :param washer: The washer of this LivingAreaFeatures.
        :type washer: bool
        """

        self._washer = washer

    @property
    def washer_exception(self):
        """Gets the washer_exception of this LivingAreaFeatures.

        Washer exception.

        :return: The washer_exception of this LivingAreaFeatures.
        :rtype: str
        """
        return self._washer_exception

    @washer_exception.setter
    def washer_exception(self, washer_exception):
        """Sets the washer_exception of this LivingAreaFeatures.

        Washer exception.

        :param washer_exception: The washer_exception of this LivingAreaFeatures.
        :type washer_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if washer_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `washer_exception` ({0}), must be one of {1}"
                .format(washer_exception, allowed_values)
            )

        self._washer_exception = washer_exception
