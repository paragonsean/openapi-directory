# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class OpenInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_reopen: bool=None, opening_date: ModelDate=None, status: str=None):
        """OpenInfo - a model defined in OpenAPI

        :param can_reopen: The can_reopen of this OpenInfo.
        :param opening_date: The opening_date of this OpenInfo.
        :param status: The status of this OpenInfo.
        """
        self.openapi_types = {
            'can_reopen': bool,
            'opening_date': ModelDate,
            'status': str
        }

        self.attribute_map = {
            'can_reopen': 'canReopen',
            'opening_date': 'openingDate',
            'status': 'status'
        }

        self._can_reopen = can_reopen
        self._opening_date = opening_date
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OpenInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OpenInfo of this OpenInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_reopen(self):
        """Gets the can_reopen of this OpenInfo.

        Output only. Indicates whether this business is eligible for re-open.

        :return: The can_reopen of this OpenInfo.
        :rtype: bool
        """
        return self._can_reopen

    @can_reopen.setter
    def can_reopen(self, can_reopen):
        """Sets the can_reopen of this OpenInfo.

        Output only. Indicates whether this business is eligible for re-open.

        :param can_reopen: The can_reopen of this OpenInfo.
        :type can_reopen: bool
        """

        self._can_reopen = can_reopen

    @property
    def opening_date(self):
        """Gets the opening_date of this OpenInfo.


        :return: The opening_date of this OpenInfo.
        :rtype: ModelDate
        """
        return self._opening_date

    @opening_date.setter
    def opening_date(self, opening_date):
        """Sets the opening_date of this OpenInfo.


        :param opening_date: The opening_date of this OpenInfo.
        :type opening_date: ModelDate
        """

        self._opening_date = opening_date

    @property
    def status(self):
        """Gets the status of this OpenInfo.

        Indicates whether or not the Location is currently open for business. All locations are open by default, unless updated to be closed.

        :return: The status of this OpenInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OpenInfo.

        Indicates whether or not the Location is currently open for business. All locations are open by default, unless updated to be closed.

        :param status: The status of this OpenInfo.
        :type status: str
        """
        allowed_values = ["OPEN_FOR_BUSINESS_UNSPECIFIED", "OPEN", "CLOSED_PERMANENTLY", "CLOSED_TEMPORARILY"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
