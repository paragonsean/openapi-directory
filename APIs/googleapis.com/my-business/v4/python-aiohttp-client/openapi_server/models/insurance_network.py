# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InsuranceNetwork(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network_id: str=None, network_names: Dict[str, str]=None, payer_names: Dict[str, str]=None, state: str=None):
        """InsuranceNetwork - a model defined in OpenAPI

        :param network_id: The network_id of this InsuranceNetwork.
        :param network_names: The network_names of this InsuranceNetwork.
        :param payer_names: The payer_names of this InsuranceNetwork.
        :param state: The state of this InsuranceNetwork.
        """
        self.openapi_types = {
            'network_id': str,
            'network_names': Dict[str, str],
            'payer_names': Dict[str, str],
            'state': str
        }

        self.attribute_map = {
            'network_id': 'networkId',
            'network_names': 'networkNames',
            'payer_names': 'payerNames',
            'state': 'state'
        }

        self._network_id = network_id
        self._network_names = network_names
        self._payer_names = payer_names
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InsuranceNetwork':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InsuranceNetwork of this InsuranceNetwork.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_id(self):
        """Gets the network_id of this InsuranceNetwork.

        Required. The id of this insurance network generated by Google.

        :return: The network_id of this InsuranceNetwork.
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this InsuranceNetwork.

        Required. The id of this insurance network generated by Google.

        :param network_id: The network_id of this InsuranceNetwork.
        :type network_id: str
        """

        self._network_id = network_id

    @property
    def network_names(self):
        """Gets the network_names of this InsuranceNetwork.

        Output only. A map of network display names in requested languages where the language is the key and localized display name is the value. The display name in English is set by default.

        :return: The network_names of this InsuranceNetwork.
        :rtype: Dict[str, str]
        """
        return self._network_names

    @network_names.setter
    def network_names(self, network_names):
        """Sets the network_names of this InsuranceNetwork.

        Output only. A map of network display names in requested languages where the language is the key and localized display name is the value. The display name in English is set by default.

        :param network_names: The network_names of this InsuranceNetwork.
        :type network_names: Dict[str, str]
        """

        self._network_names = network_names

    @property
    def payer_names(self):
        """Gets the payer_names of this InsuranceNetwork.

        Output only. A map of payer display names in requested languages where the language is the key and localized display name is the value. The display name in English is set by default.

        :return: The payer_names of this InsuranceNetwork.
        :rtype: Dict[str, str]
        """
        return self._payer_names

    @payer_names.setter
    def payer_names(self, payer_names):
        """Sets the payer_names of this InsuranceNetwork.

        Output only. A map of payer display names in requested languages where the language is the key and localized display name is the value. The display name in English is set by default.

        :param payer_names: The payer_names of this InsuranceNetwork.
        :type payer_names: Dict[str, str]
        """

        self._payer_names = payer_names

    @property
    def state(self):
        """Gets the state of this InsuranceNetwork.

        Output only. The state of this insurance network.

        :return: The state of this InsuranceNetwork.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InsuranceNetwork.

        Output only. The state of this insurance network.

        :param state: The state of this InsuranceNetwork.
        :type state: str
        """
        allowed_values = ["NETWORK_STATE_UNSPECIFIED", "ACCEPTED", "PENDING_ADD", "PENDING_DELETE", "NOT_ACCEPTED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
