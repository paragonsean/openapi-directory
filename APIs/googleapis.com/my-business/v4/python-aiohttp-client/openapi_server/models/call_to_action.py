# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CallToAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type: str=None, url: str=None):
        """CallToAction - a model defined in OpenAPI

        :param action_type: The action_type of this CallToAction.
        :param url: The url of this CallToAction.
        """
        self.openapi_types = {
            'action_type': str,
            'url': str
        }

        self.attribute_map = {
            'action_type': 'actionType',
            'url': 'url'
        }

        self._action_type = action_type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CallToAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CallToAction of this CallToAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type(self):
        """Gets the action_type of this CallToAction.

        The type of action that will be performed.

        :return: The action_type of this CallToAction.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this CallToAction.

        The type of action that will be performed.

        :param action_type: The action_type of this CallToAction.
        :type action_type: str
        """
        allowed_values = ["ACTION_TYPE_UNSPECIFIED", "BOOK", "ORDER", "SHOP", "LEARN_MORE", "SIGN_UP", "GET_OFFER", "CALL"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def url(self):
        """Gets the url of this CallToAction.

        The URL the user will be directed to upon clicking. This field should be left unset for Call CTA.

        :return: The url of this CallToAction.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CallToAction.

        The URL the user will be directed to upon clicking. This field should be left unset for Call CTA.

        :param url: The url of this CallToAction.
        :type url: str
        """

        self._url = url
