# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lat_lng import LatLng
from openapi_server import util


class RegionCount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: str=None, label: str=None, latlng: LatLng=None):
        """RegionCount - a model defined in OpenAPI

        :param count: The count of this RegionCount.
        :param label: The label of this RegionCount.
        :param latlng: The latlng of this RegionCount.
        """
        self.openapi_types = {
            'count': str,
            'label': str,
            'latlng': LatLng
        }

        self.attribute_map = {
            'count': 'count',
            'label': 'label',
            'latlng': 'latlng'
        }

        self._count = count
        self._label = label
        self._latlng = latlng

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegionCount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegionCount of this RegionCount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this RegionCount.

        Number of driving-direction requests from this region.

        :return: The count of this RegionCount.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this RegionCount.

        Number of driving-direction requests from this region.

        :param count: The count of this RegionCount.
        :type count: str
        """

        self._count = count

    @property
    def label(self):
        """Gets the label of this RegionCount.

        Human-readable label for the region.

        :return: The label of this RegionCount.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this RegionCount.

        Human-readable label for the region.

        :param label: The label of this RegionCount.
        :type label: str
        """

        self._label = label

    @property
    def latlng(self):
        """Gets the latlng of this RegionCount.


        :return: The latlng of this RegionCount.
        :rtype: LatLng
        """
        return self._latlng

    @latlng.setter
    def latlng(self, latlng):
        """Sets the latlng of this RegionCount.


        :param latlng: The latlng of this RegionCount.
        :type latlng: LatLng
        """

        self._latlng = latlng
