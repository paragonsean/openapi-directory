# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribution import Attribution
from openapi_server.models.dimensions import Dimensions
from openapi_server.models.location_association import LocationAssociation
from openapi_server.models.media_insights import MediaInsights
from openapi_server.models.media_item_data_ref import MediaItemDataRef
from openapi_server import util


class MediaItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribution: Attribution=None, create_time: str=None, data_ref: MediaItemDataRef=None, description: str=None, dimensions: Dimensions=None, google_url: str=None, insights: MediaInsights=None, location_association: LocationAssociation=None, media_format: str=None, name: str=None, source_url: str=None, thumbnail_url: str=None):
        """MediaItem - a model defined in OpenAPI

        :param attribution: The attribution of this MediaItem.
        :param create_time: The create_time of this MediaItem.
        :param data_ref: The data_ref of this MediaItem.
        :param description: The description of this MediaItem.
        :param dimensions: The dimensions of this MediaItem.
        :param google_url: The google_url of this MediaItem.
        :param insights: The insights of this MediaItem.
        :param location_association: The location_association of this MediaItem.
        :param media_format: The media_format of this MediaItem.
        :param name: The name of this MediaItem.
        :param source_url: The source_url of this MediaItem.
        :param thumbnail_url: The thumbnail_url of this MediaItem.
        """
        self.openapi_types = {
            'attribution': Attribution,
            'create_time': str,
            'data_ref': MediaItemDataRef,
            'description': str,
            'dimensions': Dimensions,
            'google_url': str,
            'insights': MediaInsights,
            'location_association': LocationAssociation,
            'media_format': str,
            'name': str,
            'source_url': str,
            'thumbnail_url': str
        }

        self.attribute_map = {
            'attribution': 'attribution',
            'create_time': 'createTime',
            'data_ref': 'dataRef',
            'description': 'description',
            'dimensions': 'dimensions',
            'google_url': 'googleUrl',
            'insights': 'insights',
            'location_association': 'locationAssociation',
            'media_format': 'mediaFormat',
            'name': 'name',
            'source_url': 'sourceUrl',
            'thumbnail_url': 'thumbnailUrl'
        }

        self._attribution = attribution
        self._create_time = create_time
        self._data_ref = data_ref
        self._description = description
        self._dimensions = dimensions
        self._google_url = google_url
        self._insights = insights
        self._location_association = location_association
        self._media_format = media_format
        self._name = name
        self._source_url = source_url
        self._thumbnail_url = thumbnail_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaItem of this MediaItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribution(self):
        """Gets the attribution of this MediaItem.


        :return: The attribution of this MediaItem.
        :rtype: Attribution
        """
        return self._attribution

    @attribution.setter
    def attribution(self, attribution):
        """Sets the attribution of this MediaItem.


        :param attribution: The attribution of this MediaItem.
        :type attribution: Attribution
        """

        self._attribution = attribution

    @property
    def create_time(self):
        """Gets the create_time of this MediaItem.

        Output only. Creation time of this media item.

        :return: The create_time of this MediaItem.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this MediaItem.

        Output only. Creation time of this media item.

        :param create_time: The create_time of this MediaItem.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def data_ref(self):
        """Gets the data_ref of this MediaItem.


        :return: The data_ref of this MediaItem.
        :rtype: MediaItemDataRef
        """
        return self._data_ref

    @data_ref.setter
    def data_ref(self, data_ref):
        """Sets the data_ref of this MediaItem.


        :param data_ref: The data_ref of this MediaItem.
        :type data_ref: MediaItemDataRef
        """

        self._data_ref = data_ref

    @property
    def description(self):
        """Gets the description of this MediaItem.

        Description for this media item. Descriptions cannot be modified through the Google My Business API, but can be set when creating a new media item that is not a cover photo.

        :return: The description of this MediaItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MediaItem.

        Description for this media item. Descriptions cannot be modified through the Google My Business API, but can be set when creating a new media item that is not a cover photo.

        :param description: The description of this MediaItem.
        :type description: str
        """

        self._description = description

    @property
    def dimensions(self):
        """Gets the dimensions of this MediaItem.


        :return: The dimensions of this MediaItem.
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this MediaItem.


        :param dimensions: The dimensions of this MediaItem.
        :type dimensions: Dimensions
        """

        self._dimensions = dimensions

    @property
    def google_url(self):
        """Gets the google_url of this MediaItem.

        Output only. Google-hosted URL for this media item. This URL is not static since it may change over time. For video this will be a preview image with an overlaid play icon.

        :return: The google_url of this MediaItem.
        :rtype: str
        """
        return self._google_url

    @google_url.setter
    def google_url(self, google_url):
        """Sets the google_url of this MediaItem.

        Output only. Google-hosted URL for this media item. This URL is not static since it may change over time. For video this will be a preview image with an overlaid play icon.

        :param google_url: The google_url of this MediaItem.
        :type google_url: str
        """

        self._google_url = google_url

    @property
    def insights(self):
        """Gets the insights of this MediaItem.


        :return: The insights of this MediaItem.
        :rtype: MediaInsights
        """
        return self._insights

    @insights.setter
    def insights(self, insights):
        """Sets the insights of this MediaItem.


        :param insights: The insights of this MediaItem.
        :type insights: MediaInsights
        """

        self._insights = insights

    @property
    def location_association(self):
        """Gets the location_association of this MediaItem.


        :return: The location_association of this MediaItem.
        :rtype: LocationAssociation
        """
        return self._location_association

    @location_association.setter
    def location_association(self, location_association):
        """Sets the location_association of this MediaItem.


        :param location_association: The location_association of this MediaItem.
        :type location_association: LocationAssociation
        """

        self._location_association = location_association

    @property
    def media_format(self):
        """Gets the media_format of this MediaItem.

        The format of this media item. Must be set when the media item is created, and is read-only on all other requests. Cannot be updated.

        :return: The media_format of this MediaItem.
        :rtype: str
        """
        return self._media_format

    @media_format.setter
    def media_format(self, media_format):
        """Sets the media_format of this MediaItem.

        The format of this media item. Must be set when the media item is created, and is read-only on all other requests. Cannot be updated.

        :param media_format: The media_format of this MediaItem.
        :type media_format: str
        """
        allowed_values = ["MEDIA_FORMAT_UNSPECIFIED", "PHOTO", "VIDEO"]  # noqa: E501
        if media_format not in allowed_values:
            raise ValueError(
                "Invalid value for `media_format` ({0}), must be one of {1}"
                .format(media_format, allowed_values)
            )

        self._media_format = media_format

    @property
    def name(self):
        """Gets the name of this MediaItem.

        The resource name for this media item. `accounts/{account_id}/locations/{location_id}/media/{media_key}`

        :return: The name of this MediaItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MediaItem.

        The resource name for this media item. `accounts/{account_id}/locations/{location_id}/media/{media_key}`

        :param name: The name of this MediaItem.
        :type name: str
        """

        self._name = name

    @property
    def source_url(self):
        """Gets the source_url of this MediaItem.

        A publicly accessible URL where the media item can be retrieved from. When creating one of this or data_ref must be set to specify the source of the media item. If `source_url` was used when creating a media item, it will be populated with that source URL when the media item is retrieved. This field cannot be updated.

        :return: The source_url of this MediaItem.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this MediaItem.

        A publicly accessible URL where the media item can be retrieved from. When creating one of this or data_ref must be set to specify the source of the media item. If `source_url` was used when creating a media item, it will be populated with that source URL when the media item is retrieved. This field cannot be updated.

        :param source_url: The source_url of this MediaItem.
        :type source_url: str
        """

        self._source_url = source_url

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this MediaItem.

        Output only. Where provided, the URL of a thumbnail image for this media item.

        :return: The thumbnail_url of this MediaItem.
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this MediaItem.

        Output only. Where provided, the URL of a thumbnail image for this media item.

        :param thumbnail_url: The thumbnail_url of this MediaItem.
        :type thumbnail_url: str
        """

        self._thumbnail_url = thumbnail_url
