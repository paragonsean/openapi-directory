# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ViewsFromUnit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beach_view: bool=None, beach_view_exception: str=None, city_view: bool=None, city_view_exception: str=None, garden_view: bool=None, garden_view_exception: str=None, lake_view: bool=None, lake_view_exception: str=None, landmark_view: bool=None, landmark_view_exception: str=None, ocean_view: bool=None, ocean_view_exception: str=None, pool_view: bool=None, pool_view_exception: str=None, valley_view: bool=None, valley_view_exception: str=None):
        """ViewsFromUnit - a model defined in OpenAPI

        :param beach_view: The beach_view of this ViewsFromUnit.
        :param beach_view_exception: The beach_view_exception of this ViewsFromUnit.
        :param city_view: The city_view of this ViewsFromUnit.
        :param city_view_exception: The city_view_exception of this ViewsFromUnit.
        :param garden_view: The garden_view of this ViewsFromUnit.
        :param garden_view_exception: The garden_view_exception of this ViewsFromUnit.
        :param lake_view: The lake_view of this ViewsFromUnit.
        :param lake_view_exception: The lake_view_exception of this ViewsFromUnit.
        :param landmark_view: The landmark_view of this ViewsFromUnit.
        :param landmark_view_exception: The landmark_view_exception of this ViewsFromUnit.
        :param ocean_view: The ocean_view of this ViewsFromUnit.
        :param ocean_view_exception: The ocean_view_exception of this ViewsFromUnit.
        :param pool_view: The pool_view of this ViewsFromUnit.
        :param pool_view_exception: The pool_view_exception of this ViewsFromUnit.
        :param valley_view: The valley_view of this ViewsFromUnit.
        :param valley_view_exception: The valley_view_exception of this ViewsFromUnit.
        """
        self.openapi_types = {
            'beach_view': bool,
            'beach_view_exception': str,
            'city_view': bool,
            'city_view_exception': str,
            'garden_view': bool,
            'garden_view_exception': str,
            'lake_view': bool,
            'lake_view_exception': str,
            'landmark_view': bool,
            'landmark_view_exception': str,
            'ocean_view': bool,
            'ocean_view_exception': str,
            'pool_view': bool,
            'pool_view_exception': str,
            'valley_view': bool,
            'valley_view_exception': str
        }

        self.attribute_map = {
            'beach_view': 'beachView',
            'beach_view_exception': 'beachViewException',
            'city_view': 'cityView',
            'city_view_exception': 'cityViewException',
            'garden_view': 'gardenView',
            'garden_view_exception': 'gardenViewException',
            'lake_view': 'lakeView',
            'lake_view_exception': 'lakeViewException',
            'landmark_view': 'landmarkView',
            'landmark_view_exception': 'landmarkViewException',
            'ocean_view': 'oceanView',
            'ocean_view_exception': 'oceanViewException',
            'pool_view': 'poolView',
            'pool_view_exception': 'poolViewException',
            'valley_view': 'valleyView',
            'valley_view_exception': 'valleyViewException'
        }

        self._beach_view = beach_view
        self._beach_view_exception = beach_view_exception
        self._city_view = city_view
        self._city_view_exception = city_view_exception
        self._garden_view = garden_view
        self._garden_view_exception = garden_view_exception
        self._lake_view = lake_view
        self._lake_view_exception = lake_view_exception
        self._landmark_view = landmark_view
        self._landmark_view_exception = landmark_view_exception
        self._ocean_view = ocean_view
        self._ocean_view_exception = ocean_view_exception
        self._pool_view = pool_view
        self._pool_view_exception = pool_view_exception
        self._valley_view = valley_view
        self._valley_view_exception = valley_view_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ViewsFromUnit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ViewsFromUnit of this ViewsFromUnit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beach_view(self):
        """Gets the beach_view of this ViewsFromUnit.

        Beach view. A guestroom that features a window through which guests can see the beach.

        :return: The beach_view of this ViewsFromUnit.
        :rtype: bool
        """
        return self._beach_view

    @beach_view.setter
    def beach_view(self, beach_view):
        """Sets the beach_view of this ViewsFromUnit.

        Beach view. A guestroom that features a window through which guests can see the beach.

        :param beach_view: The beach_view of this ViewsFromUnit.
        :type beach_view: bool
        """

        self._beach_view = beach_view

    @property
    def beach_view_exception(self):
        """Gets the beach_view_exception of this ViewsFromUnit.

        Beach view exception.

        :return: The beach_view_exception of this ViewsFromUnit.
        :rtype: str
        """
        return self._beach_view_exception

    @beach_view_exception.setter
    def beach_view_exception(self, beach_view_exception):
        """Sets the beach_view_exception of this ViewsFromUnit.

        Beach view exception.

        :param beach_view_exception: The beach_view_exception of this ViewsFromUnit.
        :type beach_view_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if beach_view_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `beach_view_exception` ({0}), must be one of {1}"
                .format(beach_view_exception, allowed_values)
            )

        self._beach_view_exception = beach_view_exception

    @property
    def city_view(self):
        """Gets the city_view of this ViewsFromUnit.

        City view. A guestroom that features a window through which guests can see the buildings, parks and/or streets of the city.

        :return: The city_view of this ViewsFromUnit.
        :rtype: bool
        """
        return self._city_view

    @city_view.setter
    def city_view(self, city_view):
        """Sets the city_view of this ViewsFromUnit.

        City view. A guestroom that features a window through which guests can see the buildings, parks and/or streets of the city.

        :param city_view: The city_view of this ViewsFromUnit.
        :type city_view: bool
        """

        self._city_view = city_view

    @property
    def city_view_exception(self):
        """Gets the city_view_exception of this ViewsFromUnit.

        City view exception.

        :return: The city_view_exception of this ViewsFromUnit.
        :rtype: str
        """
        return self._city_view_exception

    @city_view_exception.setter
    def city_view_exception(self, city_view_exception):
        """Sets the city_view_exception of this ViewsFromUnit.

        City view exception.

        :param city_view_exception: The city_view_exception of this ViewsFromUnit.
        :type city_view_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if city_view_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `city_view_exception` ({0}), must be one of {1}"
                .format(city_view_exception, allowed_values)
            )

        self._city_view_exception = city_view_exception

    @property
    def garden_view(self):
        """Gets the garden_view of this ViewsFromUnit.

        Garden view. A guestroom that features a window through which guests can see a garden.

        :return: The garden_view of this ViewsFromUnit.
        :rtype: bool
        """
        return self._garden_view

    @garden_view.setter
    def garden_view(self, garden_view):
        """Sets the garden_view of this ViewsFromUnit.

        Garden view. A guestroom that features a window through which guests can see a garden.

        :param garden_view: The garden_view of this ViewsFromUnit.
        :type garden_view: bool
        """

        self._garden_view = garden_view

    @property
    def garden_view_exception(self):
        """Gets the garden_view_exception of this ViewsFromUnit.

        Garden view exception.

        :return: The garden_view_exception of this ViewsFromUnit.
        :rtype: str
        """
        return self._garden_view_exception

    @garden_view_exception.setter
    def garden_view_exception(self, garden_view_exception):
        """Sets the garden_view_exception of this ViewsFromUnit.

        Garden view exception.

        :param garden_view_exception: The garden_view_exception of this ViewsFromUnit.
        :type garden_view_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if garden_view_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `garden_view_exception` ({0}), must be one of {1}"
                .format(garden_view_exception, allowed_values)
            )

        self._garden_view_exception = garden_view_exception

    @property
    def lake_view(self):
        """Gets the lake_view of this ViewsFromUnit.

        Lake view.

        :return: The lake_view of this ViewsFromUnit.
        :rtype: bool
        """
        return self._lake_view

    @lake_view.setter
    def lake_view(self, lake_view):
        """Sets the lake_view of this ViewsFromUnit.

        Lake view.

        :param lake_view: The lake_view of this ViewsFromUnit.
        :type lake_view: bool
        """

        self._lake_view = lake_view

    @property
    def lake_view_exception(self):
        """Gets the lake_view_exception of this ViewsFromUnit.

        Lake view exception.

        :return: The lake_view_exception of this ViewsFromUnit.
        :rtype: str
        """
        return self._lake_view_exception

    @lake_view_exception.setter
    def lake_view_exception(self, lake_view_exception):
        """Sets the lake_view_exception of this ViewsFromUnit.

        Lake view exception.

        :param lake_view_exception: The lake_view_exception of this ViewsFromUnit.
        :type lake_view_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if lake_view_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `lake_view_exception` ({0}), must be one of {1}"
                .format(lake_view_exception, allowed_values)
            )

        self._lake_view_exception = lake_view_exception

    @property
    def landmark_view(self):
        """Gets the landmark_view of this ViewsFromUnit.

        Landmark view. A guestroom that features a window through which guests can see a landmark such as the countryside, a golf course, the forest, a park, a rain forst, a mountain or a slope.

        :return: The landmark_view of this ViewsFromUnit.
        :rtype: bool
        """
        return self._landmark_view

    @landmark_view.setter
    def landmark_view(self, landmark_view):
        """Sets the landmark_view of this ViewsFromUnit.

        Landmark view. A guestroom that features a window through which guests can see a landmark such as the countryside, a golf course, the forest, a park, a rain forst, a mountain or a slope.

        :param landmark_view: The landmark_view of this ViewsFromUnit.
        :type landmark_view: bool
        """

        self._landmark_view = landmark_view

    @property
    def landmark_view_exception(self):
        """Gets the landmark_view_exception of this ViewsFromUnit.

        Landmark view exception.

        :return: The landmark_view_exception of this ViewsFromUnit.
        :rtype: str
        """
        return self._landmark_view_exception

    @landmark_view_exception.setter
    def landmark_view_exception(self, landmark_view_exception):
        """Sets the landmark_view_exception of this ViewsFromUnit.

        Landmark view exception.

        :param landmark_view_exception: The landmark_view_exception of this ViewsFromUnit.
        :type landmark_view_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if landmark_view_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `landmark_view_exception` ({0}), must be one of {1}"
                .format(landmark_view_exception, allowed_values)
            )

        self._landmark_view_exception = landmark_view_exception

    @property
    def ocean_view(self):
        """Gets the ocean_view of this ViewsFromUnit.

        Ocean view. A guestroom that features a window through which guests can see the ocean.

        :return: The ocean_view of this ViewsFromUnit.
        :rtype: bool
        """
        return self._ocean_view

    @ocean_view.setter
    def ocean_view(self, ocean_view):
        """Sets the ocean_view of this ViewsFromUnit.

        Ocean view. A guestroom that features a window through which guests can see the ocean.

        :param ocean_view: The ocean_view of this ViewsFromUnit.
        :type ocean_view: bool
        """

        self._ocean_view = ocean_view

    @property
    def ocean_view_exception(self):
        """Gets the ocean_view_exception of this ViewsFromUnit.

        Ocean view exception.

        :return: The ocean_view_exception of this ViewsFromUnit.
        :rtype: str
        """
        return self._ocean_view_exception

    @ocean_view_exception.setter
    def ocean_view_exception(self, ocean_view_exception):
        """Sets the ocean_view_exception of this ViewsFromUnit.

        Ocean view exception.

        :param ocean_view_exception: The ocean_view_exception of this ViewsFromUnit.
        :type ocean_view_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if ocean_view_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `ocean_view_exception` ({0}), must be one of {1}"
                .format(ocean_view_exception, allowed_values)
            )

        self._ocean_view_exception = ocean_view_exception

    @property
    def pool_view(self):
        """Gets the pool_view of this ViewsFromUnit.

        Pool view. A guestroom that features a window through which guests can see the hotel's swimming pool.

        :return: The pool_view of this ViewsFromUnit.
        :rtype: bool
        """
        return self._pool_view

    @pool_view.setter
    def pool_view(self, pool_view):
        """Sets the pool_view of this ViewsFromUnit.

        Pool view. A guestroom that features a window through which guests can see the hotel's swimming pool.

        :param pool_view: The pool_view of this ViewsFromUnit.
        :type pool_view: bool
        """

        self._pool_view = pool_view

    @property
    def pool_view_exception(self):
        """Gets the pool_view_exception of this ViewsFromUnit.

        Pool view exception.

        :return: The pool_view_exception of this ViewsFromUnit.
        :rtype: str
        """
        return self._pool_view_exception

    @pool_view_exception.setter
    def pool_view_exception(self, pool_view_exception):
        """Sets the pool_view_exception of this ViewsFromUnit.

        Pool view exception.

        :param pool_view_exception: The pool_view_exception of this ViewsFromUnit.
        :type pool_view_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if pool_view_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `pool_view_exception` ({0}), must be one of {1}"
                .format(pool_view_exception, allowed_values)
            )

        self._pool_view_exception = pool_view_exception

    @property
    def valley_view(self):
        """Gets the valley_view of this ViewsFromUnit.

        Valley view. A guestroom that features a window through which guests can see over a valley.

        :return: The valley_view of this ViewsFromUnit.
        :rtype: bool
        """
        return self._valley_view

    @valley_view.setter
    def valley_view(self, valley_view):
        """Sets the valley_view of this ViewsFromUnit.

        Valley view. A guestroom that features a window through which guests can see over a valley.

        :param valley_view: The valley_view of this ViewsFromUnit.
        :type valley_view: bool
        """

        self._valley_view = valley_view

    @property
    def valley_view_exception(self):
        """Gets the valley_view_exception of this ViewsFromUnit.

        Valley view exception.

        :return: The valley_view_exception of this ViewsFromUnit.
        :rtype: str
        """
        return self._valley_view_exception

    @valley_view_exception.setter
    def valley_view_exception(self, valley_view_exception):
        """Sets the valley_view_exception of this ViewsFromUnit.

        Valley view exception.

        :param valley_view_exception: The valley_view_exception of this ViewsFromUnit.
        :type valley_view_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if valley_view_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `valley_view_exception` ({0}), must be one of {1}"
                .format(valley_view_exception, allowed_values)
            )

        self._valley_view_exception = valley_view_exception
