# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Housekeeping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, daily_housekeeping: bool=None, daily_housekeeping_exception: str=None, housekeeping_available: bool=None, housekeeping_available_exception: str=None, turndown_service: bool=None, turndown_service_exception: str=None):
        """Housekeeping - a model defined in OpenAPI

        :param daily_housekeeping: The daily_housekeeping of this Housekeeping.
        :param daily_housekeeping_exception: The daily_housekeeping_exception of this Housekeeping.
        :param housekeeping_available: The housekeeping_available of this Housekeeping.
        :param housekeeping_available_exception: The housekeeping_available_exception of this Housekeeping.
        :param turndown_service: The turndown_service of this Housekeeping.
        :param turndown_service_exception: The turndown_service_exception of this Housekeeping.
        """
        self.openapi_types = {
            'daily_housekeeping': bool,
            'daily_housekeeping_exception': str,
            'housekeeping_available': bool,
            'housekeeping_available_exception': str,
            'turndown_service': bool,
            'turndown_service_exception': str
        }

        self.attribute_map = {
            'daily_housekeeping': 'dailyHousekeeping',
            'daily_housekeeping_exception': 'dailyHousekeepingException',
            'housekeeping_available': 'housekeepingAvailable',
            'housekeeping_available_exception': 'housekeepingAvailableException',
            'turndown_service': 'turndownService',
            'turndown_service_exception': 'turndownServiceException'
        }

        self._daily_housekeeping = daily_housekeeping
        self._daily_housekeeping_exception = daily_housekeeping_exception
        self._housekeeping_available = housekeeping_available
        self._housekeeping_available_exception = housekeeping_available_exception
        self._turndown_service = turndown_service
        self._turndown_service_exception = turndown_service_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Housekeeping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Housekeeping of this Housekeeping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def daily_housekeeping(self):
        """Gets the daily_housekeeping of this Housekeeping.

        Daily housekeeping. Guest units are cleaned by hotel staff daily during guest's stay.

        :return: The daily_housekeeping of this Housekeeping.
        :rtype: bool
        """
        return self._daily_housekeeping

    @daily_housekeeping.setter
    def daily_housekeeping(self, daily_housekeeping):
        """Sets the daily_housekeeping of this Housekeeping.

        Daily housekeeping. Guest units are cleaned by hotel staff daily during guest's stay.

        :param daily_housekeeping: The daily_housekeeping of this Housekeeping.
        :type daily_housekeeping: bool
        """

        self._daily_housekeeping = daily_housekeeping

    @property
    def daily_housekeeping_exception(self):
        """Gets the daily_housekeeping_exception of this Housekeeping.

        Daily housekeeping exception.

        :return: The daily_housekeeping_exception of this Housekeeping.
        :rtype: str
        """
        return self._daily_housekeeping_exception

    @daily_housekeeping_exception.setter
    def daily_housekeeping_exception(self, daily_housekeeping_exception):
        """Sets the daily_housekeeping_exception of this Housekeeping.

        Daily housekeeping exception.

        :param daily_housekeeping_exception: The daily_housekeeping_exception of this Housekeeping.
        :type daily_housekeeping_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if daily_housekeeping_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `daily_housekeeping_exception` ({0}), must be one of {1}"
                .format(daily_housekeeping_exception, allowed_values)
            )

        self._daily_housekeeping_exception = daily_housekeeping_exception

    @property
    def housekeeping_available(self):
        """Gets the housekeeping_available of this Housekeeping.

        Housekeeping available. Guest units are cleaned by hotel staff during guest's stay. Schedule may vary from daily, weekly, or specific days of the week.

        :return: The housekeeping_available of this Housekeeping.
        :rtype: bool
        """
        return self._housekeeping_available

    @housekeeping_available.setter
    def housekeeping_available(self, housekeeping_available):
        """Sets the housekeeping_available of this Housekeeping.

        Housekeeping available. Guest units are cleaned by hotel staff during guest's stay. Schedule may vary from daily, weekly, or specific days of the week.

        :param housekeeping_available: The housekeeping_available of this Housekeeping.
        :type housekeeping_available: bool
        """

        self._housekeeping_available = housekeeping_available

    @property
    def housekeeping_available_exception(self):
        """Gets the housekeeping_available_exception of this Housekeeping.

        Housekeeping available exception.

        :return: The housekeeping_available_exception of this Housekeeping.
        :rtype: str
        """
        return self._housekeeping_available_exception

    @housekeeping_available_exception.setter
    def housekeeping_available_exception(self, housekeeping_available_exception):
        """Sets the housekeeping_available_exception of this Housekeeping.

        Housekeeping available exception.

        :param housekeeping_available_exception: The housekeeping_available_exception of this Housekeeping.
        :type housekeeping_available_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if housekeeping_available_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `housekeeping_available_exception` ({0}), must be one of {1}"
                .format(housekeeping_available_exception, allowed_values)
            )

        self._housekeeping_available_exception = housekeeping_available_exception

    @property
    def turndown_service(self):
        """Gets the turndown_service of this Housekeeping.

        Turndown service. Hotel staff enters guest units to prepare the bed for sleep use. May or may not include some light housekeeping. May or may not include an evening snack or candy. Also known as evening service.

        :return: The turndown_service of this Housekeeping.
        :rtype: bool
        """
        return self._turndown_service

    @turndown_service.setter
    def turndown_service(self, turndown_service):
        """Sets the turndown_service of this Housekeeping.

        Turndown service. Hotel staff enters guest units to prepare the bed for sleep use. May or may not include some light housekeeping. May or may not include an evening snack or candy. Also known as evening service.

        :param turndown_service: The turndown_service of this Housekeeping.
        :type turndown_service: bool
        """

        self._turndown_service = turndown_service

    @property
    def turndown_service_exception(self):
        """Gets the turndown_service_exception of this Housekeeping.

        Turndown service exception.

        :return: The turndown_service_exception of this Housekeeping.
        :rtype: str
        """
        return self._turndown_service_exception

    @turndown_service_exception.setter
    def turndown_service_exception(self, turndown_service_exception):
        """Sets the turndown_service_exception of this Housekeeping.

        Turndown service exception.

        :param turndown_service_exception: The turndown_service_exception of this Housekeeping.
        :type turndown_service_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if turndown_service_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `turndown_service_exception` ({0}), must be one of {1}"
                .format(turndown_service_exception, allowed_values)
            )

        self._turndown_service_exception = turndown_service_exception
