# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_input import AddressInput
from openapi_server.models.email_input import EmailInput
from openapi_server.models.phone_input import PhoneInput
from openapi_server.models.service_business_context import ServiceBusinessContext
from openapi_server import util


class VerifyLocationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_input: AddressInput=None, context: ServiceBusinessContext=None, email_input: EmailInput=None, language_code: str=None, method: str=None, phone_input: PhoneInput=None):
        """VerifyLocationRequest - a model defined in OpenAPI

        :param address_input: The address_input of this VerifyLocationRequest.
        :param context: The context of this VerifyLocationRequest.
        :param email_input: The email_input of this VerifyLocationRequest.
        :param language_code: The language_code of this VerifyLocationRequest.
        :param method: The method of this VerifyLocationRequest.
        :param phone_input: The phone_input of this VerifyLocationRequest.
        """
        self.openapi_types = {
            'address_input': AddressInput,
            'context': ServiceBusinessContext,
            'email_input': EmailInput,
            'language_code': str,
            'method': str,
            'phone_input': PhoneInput
        }

        self.attribute_map = {
            'address_input': 'addressInput',
            'context': 'context',
            'email_input': 'emailInput',
            'language_code': 'languageCode',
            'method': 'method',
            'phone_input': 'phoneInput'
        }

        self._address_input = address_input
        self._context = context
        self._email_input = email_input
        self._language_code = language_code
        self._method = method
        self._phone_input = phone_input

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyLocationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerifyLocationRequest of this VerifyLocationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_input(self):
        """Gets the address_input of this VerifyLocationRequest.


        :return: The address_input of this VerifyLocationRequest.
        :rtype: AddressInput
        """
        return self._address_input

    @address_input.setter
    def address_input(self, address_input):
        """Sets the address_input of this VerifyLocationRequest.


        :param address_input: The address_input of this VerifyLocationRequest.
        :type address_input: AddressInput
        """

        self._address_input = address_input

    @property
    def context(self):
        """Gets the context of this VerifyLocationRequest.


        :return: The context of this VerifyLocationRequest.
        :rtype: ServiceBusinessContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this VerifyLocationRequest.


        :param context: The context of this VerifyLocationRequest.
        :type context: ServiceBusinessContext
        """

        self._context = context

    @property
    def email_input(self):
        """Gets the email_input of this VerifyLocationRequest.


        :return: The email_input of this VerifyLocationRequest.
        :rtype: EmailInput
        """
        return self._email_input

    @email_input.setter
    def email_input(self, email_input):
        """Sets the email_input of this VerifyLocationRequest.


        :param email_input: The email_input of this VerifyLocationRequest.
        :type email_input: EmailInput
        """

        self._email_input = email_input

    @property
    def language_code(self):
        """Gets the language_code of this VerifyLocationRequest.

        The BCP 47 language code representing the language that is to be used for the verification process.

        :return: The language_code of this VerifyLocationRequest.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this VerifyLocationRequest.

        The BCP 47 language code representing the language that is to be used for the verification process.

        :param language_code: The language_code of this VerifyLocationRequest.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def method(self):
        """Gets the method of this VerifyLocationRequest.

        Verification method.

        :return: The method of this VerifyLocationRequest.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this VerifyLocationRequest.

        Verification method.

        :param method: The method of this VerifyLocationRequest.
        :type method: str
        """
        allowed_values = ["VERIFICATION_METHOD_UNSPECIFIED", "ADDRESS", "EMAIL", "PHONE_CALL", "SMS", "AUTO"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def phone_input(self):
        """Gets the phone_input of this VerifyLocationRequest.


        :return: The phone_input of this VerifyLocationRequest.
        :rtype: PhoneInput
        """
        return self._phone_input

    @phone_input.setter
    def phone_input(self, phone_input):
        """Sets the phone_input of this VerifyLocationRequest.


        :param phone_input: The phone_input of this VerifyLocationRequest.
        :type phone_input: PhoneInput
        """

        self._phone_input = phone_input
