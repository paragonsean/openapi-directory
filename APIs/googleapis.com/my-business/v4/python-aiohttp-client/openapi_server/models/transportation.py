# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Transportation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, airport_shuttle: bool=None, airport_shuttle_exception: str=None, car_rental_on_property: bool=None, car_rental_on_property_exception: str=None, free_airport_shuttle: bool=None, free_airport_shuttle_exception: str=None, free_private_car_service: bool=None, free_private_car_service_exception: str=None, local_shuttle: bool=None, local_shuttle_exception: str=None, private_car_service: bool=None, private_car_service_exception: str=None, transfer: bool=None, transfer_exception: str=None):
        """Transportation - a model defined in OpenAPI

        :param airport_shuttle: The airport_shuttle of this Transportation.
        :param airport_shuttle_exception: The airport_shuttle_exception of this Transportation.
        :param car_rental_on_property: The car_rental_on_property of this Transportation.
        :param car_rental_on_property_exception: The car_rental_on_property_exception of this Transportation.
        :param free_airport_shuttle: The free_airport_shuttle of this Transportation.
        :param free_airport_shuttle_exception: The free_airport_shuttle_exception of this Transportation.
        :param free_private_car_service: The free_private_car_service of this Transportation.
        :param free_private_car_service_exception: The free_private_car_service_exception of this Transportation.
        :param local_shuttle: The local_shuttle of this Transportation.
        :param local_shuttle_exception: The local_shuttle_exception of this Transportation.
        :param private_car_service: The private_car_service of this Transportation.
        :param private_car_service_exception: The private_car_service_exception of this Transportation.
        :param transfer: The transfer of this Transportation.
        :param transfer_exception: The transfer_exception of this Transportation.
        """
        self.openapi_types = {
            'airport_shuttle': bool,
            'airport_shuttle_exception': str,
            'car_rental_on_property': bool,
            'car_rental_on_property_exception': str,
            'free_airport_shuttle': bool,
            'free_airport_shuttle_exception': str,
            'free_private_car_service': bool,
            'free_private_car_service_exception': str,
            'local_shuttle': bool,
            'local_shuttle_exception': str,
            'private_car_service': bool,
            'private_car_service_exception': str,
            'transfer': bool,
            'transfer_exception': str
        }

        self.attribute_map = {
            'airport_shuttle': 'airportShuttle',
            'airport_shuttle_exception': 'airportShuttleException',
            'car_rental_on_property': 'carRentalOnProperty',
            'car_rental_on_property_exception': 'carRentalOnPropertyException',
            'free_airport_shuttle': 'freeAirportShuttle',
            'free_airport_shuttle_exception': 'freeAirportShuttleException',
            'free_private_car_service': 'freePrivateCarService',
            'free_private_car_service_exception': 'freePrivateCarServiceException',
            'local_shuttle': 'localShuttle',
            'local_shuttle_exception': 'localShuttleException',
            'private_car_service': 'privateCarService',
            'private_car_service_exception': 'privateCarServiceException',
            'transfer': 'transfer',
            'transfer_exception': 'transferException'
        }

        self._airport_shuttle = airport_shuttle
        self._airport_shuttle_exception = airport_shuttle_exception
        self._car_rental_on_property = car_rental_on_property
        self._car_rental_on_property_exception = car_rental_on_property_exception
        self._free_airport_shuttle = free_airport_shuttle
        self._free_airport_shuttle_exception = free_airport_shuttle_exception
        self._free_private_car_service = free_private_car_service
        self._free_private_car_service_exception = free_private_car_service_exception
        self._local_shuttle = local_shuttle
        self._local_shuttle_exception = local_shuttle_exception
        self._private_car_service = private_car_service
        self._private_car_service_exception = private_car_service_exception
        self._transfer = transfer
        self._transfer_exception = transfer_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transportation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transportation of this Transportation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def airport_shuttle(self):
        """Gets the airport_shuttle of this Transportation.

        Airport shuttle. The hotel provides guests with a chauffeured van or bus to and from the airport. Can be free or for a fee. Guests may share the vehicle with other guests unknown to them. Applies if the hotel has a third-party shuttle service (office/desk etc.) within the hotel. As long as hotel provides this service, it doesn't matter if it's directly with them or a third party they work with. Does not apply if guest has to coordinate with an entity outside/other than the hotel.

        :return: The airport_shuttle of this Transportation.
        :rtype: bool
        """
        return self._airport_shuttle

    @airport_shuttle.setter
    def airport_shuttle(self, airport_shuttle):
        """Sets the airport_shuttle of this Transportation.

        Airport shuttle. The hotel provides guests with a chauffeured van or bus to and from the airport. Can be free or for a fee. Guests may share the vehicle with other guests unknown to them. Applies if the hotel has a third-party shuttle service (office/desk etc.) within the hotel. As long as hotel provides this service, it doesn't matter if it's directly with them or a third party they work with. Does not apply if guest has to coordinate with an entity outside/other than the hotel.

        :param airport_shuttle: The airport_shuttle of this Transportation.
        :type airport_shuttle: bool
        """

        self._airport_shuttle = airport_shuttle

    @property
    def airport_shuttle_exception(self):
        """Gets the airport_shuttle_exception of this Transportation.

        Airport shuttle exception.

        :return: The airport_shuttle_exception of this Transportation.
        :rtype: str
        """
        return self._airport_shuttle_exception

    @airport_shuttle_exception.setter
    def airport_shuttle_exception(self, airport_shuttle_exception):
        """Sets the airport_shuttle_exception of this Transportation.

        Airport shuttle exception.

        :param airport_shuttle_exception: The airport_shuttle_exception of this Transportation.
        :type airport_shuttle_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if airport_shuttle_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `airport_shuttle_exception` ({0}), must be one of {1}"
                .format(airport_shuttle_exception, allowed_values)
            )

        self._airport_shuttle_exception = airport_shuttle_exception

    @property
    def car_rental_on_property(self):
        """Gets the car_rental_on_property of this Transportation.

        Car rental on property. A branch of a rental car company with a processing desk in the hotel. Available cars for rent may be awaiting at the hotel or in a nearby lot.

        :return: The car_rental_on_property of this Transportation.
        :rtype: bool
        """
        return self._car_rental_on_property

    @car_rental_on_property.setter
    def car_rental_on_property(self, car_rental_on_property):
        """Sets the car_rental_on_property of this Transportation.

        Car rental on property. A branch of a rental car company with a processing desk in the hotel. Available cars for rent may be awaiting at the hotel or in a nearby lot.

        :param car_rental_on_property: The car_rental_on_property of this Transportation.
        :type car_rental_on_property: bool
        """

        self._car_rental_on_property = car_rental_on_property

    @property
    def car_rental_on_property_exception(self):
        """Gets the car_rental_on_property_exception of this Transportation.

        Car rental on property exception.

        :return: The car_rental_on_property_exception of this Transportation.
        :rtype: str
        """
        return self._car_rental_on_property_exception

    @car_rental_on_property_exception.setter
    def car_rental_on_property_exception(self, car_rental_on_property_exception):
        """Sets the car_rental_on_property_exception of this Transportation.

        Car rental on property exception.

        :param car_rental_on_property_exception: The car_rental_on_property_exception of this Transportation.
        :type car_rental_on_property_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if car_rental_on_property_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `car_rental_on_property_exception` ({0}), must be one of {1}"
                .format(car_rental_on_property_exception, allowed_values)
            )

        self._car_rental_on_property_exception = car_rental_on_property_exception

    @property
    def free_airport_shuttle(self):
        """Gets the free_airport_shuttle of this Transportation.

        Free airport shuttle. Airport shuttle is free to guests. Must be free to all guests without any conditions.

        :return: The free_airport_shuttle of this Transportation.
        :rtype: bool
        """
        return self._free_airport_shuttle

    @free_airport_shuttle.setter
    def free_airport_shuttle(self, free_airport_shuttle):
        """Sets the free_airport_shuttle of this Transportation.

        Free airport shuttle. Airport shuttle is free to guests. Must be free to all guests without any conditions.

        :param free_airport_shuttle: The free_airport_shuttle of this Transportation.
        :type free_airport_shuttle: bool
        """

        self._free_airport_shuttle = free_airport_shuttle

    @property
    def free_airport_shuttle_exception(self):
        """Gets the free_airport_shuttle_exception of this Transportation.

        Free airport shuttle exception.

        :return: The free_airport_shuttle_exception of this Transportation.
        :rtype: str
        """
        return self._free_airport_shuttle_exception

    @free_airport_shuttle_exception.setter
    def free_airport_shuttle_exception(self, free_airport_shuttle_exception):
        """Sets the free_airport_shuttle_exception of this Transportation.

        Free airport shuttle exception.

        :param free_airport_shuttle_exception: The free_airport_shuttle_exception of this Transportation.
        :type free_airport_shuttle_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if free_airport_shuttle_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `free_airport_shuttle_exception` ({0}), must be one of {1}"
                .format(free_airport_shuttle_exception, allowed_values)
            )

        self._free_airport_shuttle_exception = free_airport_shuttle_exception

    @property
    def free_private_car_service(self):
        """Gets the free_private_car_service of this Transportation.

        Free private car service. Private chauffeured car service is free to guests.

        :return: The free_private_car_service of this Transportation.
        :rtype: bool
        """
        return self._free_private_car_service

    @free_private_car_service.setter
    def free_private_car_service(self, free_private_car_service):
        """Sets the free_private_car_service of this Transportation.

        Free private car service. Private chauffeured car service is free to guests.

        :param free_private_car_service: The free_private_car_service of this Transportation.
        :type free_private_car_service: bool
        """

        self._free_private_car_service = free_private_car_service

    @property
    def free_private_car_service_exception(self):
        """Gets the free_private_car_service_exception of this Transportation.

        Free private car service exception.

        :return: The free_private_car_service_exception of this Transportation.
        :rtype: str
        """
        return self._free_private_car_service_exception

    @free_private_car_service_exception.setter
    def free_private_car_service_exception(self, free_private_car_service_exception):
        """Sets the free_private_car_service_exception of this Transportation.

        Free private car service exception.

        :param free_private_car_service_exception: The free_private_car_service_exception of this Transportation.
        :type free_private_car_service_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if free_private_car_service_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `free_private_car_service_exception` ({0}), must be one of {1}"
                .format(free_private_car_service_exception, allowed_values)
            )

        self._free_private_car_service_exception = free_private_car_service_exception

    @property
    def local_shuttle(self):
        """Gets the local_shuttle of this Transportation.

        Local shuttle. A car, van or bus provided by the hotel to transport guests to destinations within a specified range of distance around the hotel. Usually shopping and/or convention centers, downtown districts, or beaches. Can be free or for a fee.

        :return: The local_shuttle of this Transportation.
        :rtype: bool
        """
        return self._local_shuttle

    @local_shuttle.setter
    def local_shuttle(self, local_shuttle):
        """Sets the local_shuttle of this Transportation.

        Local shuttle. A car, van or bus provided by the hotel to transport guests to destinations within a specified range of distance around the hotel. Usually shopping and/or convention centers, downtown districts, or beaches. Can be free or for a fee.

        :param local_shuttle: The local_shuttle of this Transportation.
        :type local_shuttle: bool
        """

        self._local_shuttle = local_shuttle

    @property
    def local_shuttle_exception(self):
        """Gets the local_shuttle_exception of this Transportation.

        Local shuttle exception.

        :return: The local_shuttle_exception of this Transportation.
        :rtype: str
        """
        return self._local_shuttle_exception

    @local_shuttle_exception.setter
    def local_shuttle_exception(self, local_shuttle_exception):
        """Sets the local_shuttle_exception of this Transportation.

        Local shuttle exception.

        :param local_shuttle_exception: The local_shuttle_exception of this Transportation.
        :type local_shuttle_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if local_shuttle_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `local_shuttle_exception` ({0}), must be one of {1}"
                .format(local_shuttle_exception, allowed_values)
            )

        self._local_shuttle_exception = local_shuttle_exception

    @property
    def private_car_service(self):
        """Gets the private_car_service of this Transportation.

        Private car service. Hotel provides a private chauffeured car to transport guests to destinations. Passengers in the car are either alone or are known to one another and have requested the car together. Service can be free or for a fee and travel distance is usually limited to a specific range. Not a taxi.

        :return: The private_car_service of this Transportation.
        :rtype: bool
        """
        return self._private_car_service

    @private_car_service.setter
    def private_car_service(self, private_car_service):
        """Sets the private_car_service of this Transportation.

        Private car service. Hotel provides a private chauffeured car to transport guests to destinations. Passengers in the car are either alone or are known to one another and have requested the car together. Service can be free or for a fee and travel distance is usually limited to a specific range. Not a taxi.

        :param private_car_service: The private_car_service of this Transportation.
        :type private_car_service: bool
        """

        self._private_car_service = private_car_service

    @property
    def private_car_service_exception(self):
        """Gets the private_car_service_exception of this Transportation.

        Private car service exception.

        :return: The private_car_service_exception of this Transportation.
        :rtype: str
        """
        return self._private_car_service_exception

    @private_car_service_exception.setter
    def private_car_service_exception(self, private_car_service_exception):
        """Sets the private_car_service_exception of this Transportation.

        Private car service exception.

        :param private_car_service_exception: The private_car_service_exception of this Transportation.
        :type private_car_service_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if private_car_service_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `private_car_service_exception` ({0}), must be one of {1}"
                .format(private_car_service_exception, allowed_values)
            )

        self._private_car_service_exception = private_car_service_exception

    @property
    def transfer(self):
        """Gets the transfer of this Transportation.

        Transfer. Hotel provides a shuttle service or car service to take guests to and from the nearest airport or train station. Can be free or for a fee. Guests may share the vehicle with other guests unknown to them.

        :return: The transfer of this Transportation.
        :rtype: bool
        """
        return self._transfer

    @transfer.setter
    def transfer(self, transfer):
        """Sets the transfer of this Transportation.

        Transfer. Hotel provides a shuttle service or car service to take guests to and from the nearest airport or train station. Can be free or for a fee. Guests may share the vehicle with other guests unknown to them.

        :param transfer: The transfer of this Transportation.
        :type transfer: bool
        """

        self._transfer = transfer

    @property
    def transfer_exception(self):
        """Gets the transfer_exception of this Transportation.

        Transfer exception.

        :return: The transfer_exception of this Transportation.
        :rtype: str
        """
        return self._transfer_exception

    @transfer_exception.setter
    def transfer_exception(self, transfer_exception):
        """Sets the transfer_exception of this Transportation.

        Transfer exception.

        :param transfer_exception: The transfer_exception of this Transportation.
        :type transfer_exception: str
        """
        allowed_values = ["EXCEPTION_UNSPECIFIED", "UNDER_CONSTRUCTION", "DEPENDENT_ON_SEASON", "DEPENDENT_ON_DAY_OF_WEEK"]  # noqa: E501
        if transfer_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `transfer_exception` ({0}), must be one of {1}"
                .format(transfer_exception, allowed_values)
            )

        self._transfer_exception = transfer_exception
