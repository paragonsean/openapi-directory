# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time_of_day import TimeOfDay
from openapi_server.models.time_range import TimeRange
from openapi_server import util


class TimeDimension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_of_week: str=None, time_of_day: TimeOfDay=None, time_range: TimeRange=None):
        """TimeDimension - a model defined in OpenAPI

        :param day_of_week: The day_of_week of this TimeDimension.
        :param time_of_day: The time_of_day of this TimeDimension.
        :param time_range: The time_range of this TimeDimension.
        """
        self.openapi_types = {
            'day_of_week': str,
            'time_of_day': TimeOfDay,
            'time_range': TimeRange
        }

        self.attribute_map = {
            'day_of_week': 'dayOfWeek',
            'time_of_day': 'timeOfDay',
            'time_range': 'timeRange'
        }

        self._day_of_week = day_of_week
        self._time_of_day = time_of_day
        self._time_range = time_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeDimension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeDimension of this TimeDimension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_of_week(self):
        """Gets the day_of_week of this TimeDimension.

        The day of the week (\"MONDAY\" to \"SUNDAY\") this value corresponds to. Set for BREAKDOWN_DAY_OF_WEEK option.

        :return: The day_of_week of this TimeDimension.
        :rtype: str
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this TimeDimension.

        The day of the week (\"MONDAY\" to \"SUNDAY\") this value corresponds to. Set for BREAKDOWN_DAY_OF_WEEK option.

        :param day_of_week: The day_of_week of this TimeDimension.
        :type day_of_week: str
        """
        allowed_values = ["DAY_OF_WEEK_UNSPECIFIED", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]  # noqa: E501
        if day_of_week not in allowed_values:
            raise ValueError(
                "Invalid value for `day_of_week` ({0}), must be one of {1}"
                .format(day_of_week, allowed_values)
            )

        self._day_of_week = day_of_week

    @property
    def time_of_day(self):
        """Gets the time_of_day of this TimeDimension.


        :return: The time_of_day of this TimeDimension.
        :rtype: TimeOfDay
        """
        return self._time_of_day

    @time_of_day.setter
    def time_of_day(self, time_of_day):
        """Sets the time_of_day of this TimeDimension.


        :param time_of_day: The time_of_day of this TimeDimension.
        :type time_of_day: TimeOfDay
        """

        self._time_of_day = time_of_day

    @property
    def time_range(self):
        """Gets the time_range of this TimeDimension.


        :return: The time_range of this TimeDimension.
        :rtype: TimeRange
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this TimeDimension.


        :param time_range: The time_range of this TimeDimension.
        :type time_range: TimeRange
        """

        self._time_range = time_range
