# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.review_reply import ReviewReply
from openapi_server.models.reviewer import Reviewer
from openapi_server import util


class Review(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, create_time: str=None, name: str=None, review_id: str=None, review_reply: ReviewReply=None, reviewer: Reviewer=None, star_rating: str=None, update_time: str=None):
        """Review - a model defined in OpenAPI

        :param comment: The comment of this Review.
        :param create_time: The create_time of this Review.
        :param name: The name of this Review.
        :param review_id: The review_id of this Review.
        :param review_reply: The review_reply of this Review.
        :param reviewer: The reviewer of this Review.
        :param star_rating: The star_rating of this Review.
        :param update_time: The update_time of this Review.
        """
        self.openapi_types = {
            'comment': str,
            'create_time': str,
            'name': str,
            'review_id': str,
            'review_reply': ReviewReply,
            'reviewer': Reviewer,
            'star_rating': str,
            'update_time': str
        }

        self.attribute_map = {
            'comment': 'comment',
            'create_time': 'createTime',
            'name': 'name',
            'review_id': 'reviewId',
            'review_reply': 'reviewReply',
            'reviewer': 'reviewer',
            'star_rating': 'starRating',
            'update_time': 'updateTime'
        }

        self._comment = comment
        self._create_time = create_time
        self._name = name
        self._review_id = review_id
        self._review_reply = review_reply
        self._reviewer = reviewer
        self._star_rating = star_rating
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Review':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Review of this Review.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this Review.

        The body of the review as plain text with markups.

        :return: The comment of this Review.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Review.

        The body of the review as plain text with markups.

        :param comment: The comment of this Review.
        :type comment: str
        """

        self._comment = comment

    @property
    def create_time(self):
        """Gets the create_time of this Review.

        The timestamp for when the review was written.

        :return: The create_time of this Review.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Review.

        The timestamp for when the review was written.

        :param create_time: The create_time of this Review.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def name(self):
        """Gets the name of this Review.

        The resource name. For Review it is of the form `accounts/{account_id}/locations/{location_id}/reviews/{review_id}`

        :return: The name of this Review.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Review.

        The resource name. For Review it is of the form `accounts/{account_id}/locations/{location_id}/reviews/{review_id}`

        :param name: The name of this Review.
        :type name: str
        """

        self._name = name

    @property
    def review_id(self):
        """Gets the review_id of this Review.

        The encrypted unique identifier.

        :return: The review_id of this Review.
        :rtype: str
        """
        return self._review_id

    @review_id.setter
    def review_id(self, review_id):
        """Sets the review_id of this Review.

        The encrypted unique identifier.

        :param review_id: The review_id of this Review.
        :type review_id: str
        """

        self._review_id = review_id

    @property
    def review_reply(self):
        """Gets the review_reply of this Review.


        :return: The review_reply of this Review.
        :rtype: ReviewReply
        """
        return self._review_reply

    @review_reply.setter
    def review_reply(self, review_reply):
        """Sets the review_reply of this Review.


        :param review_reply: The review_reply of this Review.
        :type review_reply: ReviewReply
        """

        self._review_reply = review_reply

    @property
    def reviewer(self):
        """Gets the reviewer of this Review.


        :return: The reviewer of this Review.
        :rtype: Reviewer
        """
        return self._reviewer

    @reviewer.setter
    def reviewer(self, reviewer):
        """Sets the reviewer of this Review.


        :param reviewer: The reviewer of this Review.
        :type reviewer: Reviewer
        """

        self._reviewer = reviewer

    @property
    def star_rating(self):
        """Gets the star_rating of this Review.

        The star rating of the review.

        :return: The star_rating of this Review.
        :rtype: str
        """
        return self._star_rating

    @star_rating.setter
    def star_rating(self, star_rating):
        """Sets the star_rating of this Review.

        The star rating of the review.

        :param star_rating: The star_rating of this Review.
        :type star_rating: str
        """
        allowed_values = ["STAR_RATING_UNSPECIFIED", "ONE", "TWO", "THREE", "FOUR", "FIVE"]  # noqa: E501
        if star_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `star_rating` ({0}), must be one of {1}"
                .format(star_rating, allowed_values)
            )

        self._star_rating = star_rating

    @property
    def update_time(self):
        """Gets the update_time of this Review.

        The timestamp for when the review was last modified.

        :return: The update_time of this Review.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Review.

        The timestamp for when the review was last modified.

        :param update_time: The update_time of this Review.
        :type update_time: str
        """

        self._update_time = update_time
