# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Notifications(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, notification_types: List[str]=None, topic_name: str=None):
        """Notifications - a model defined in OpenAPI

        :param name: The name of this Notifications.
        :param notification_types: The notification_types of this Notifications.
        :param topic_name: The topic_name of this Notifications.
        """
        self.openapi_types = {
            'name': str,
            'notification_types': List[str],
            'topic_name': str
        }

        self.attribute_map = {
            'name': 'name',
            'notification_types': 'notificationTypes',
            'topic_name': 'topicName'
        }

        self._name = name
        self._notification_types = notification_types
        self._topic_name = topic_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Notifications':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Notifications of this Notifications.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Notifications.

        Output only. The notifications resource name.

        :return: The name of this Notifications.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Notifications.

        Output only. The notifications resource name.

        :param name: The name of this Notifications.
        :type name: str
        """

        self._name = name

    @property
    def notification_types(self):
        """Gets the notification_types of this Notifications.

        The types of notifications that will be sent to the Cloud Pub/Sub topic. At least one must be specified. To stop receiving notifications entirely, use DeleteNotifications.

        :return: The notification_types of this Notifications.
        :rtype: List[str]
        """
        return self._notification_types

    @notification_types.setter
    def notification_types(self, notification_types):
        """Sets the notification_types of this Notifications.

        The types of notifications that will be sent to the Cloud Pub/Sub topic. At least one must be specified. To stop receiving notifications entirely, use DeleteNotifications.

        :param notification_types: The notification_types of this Notifications.
        :type notification_types: List[str]
        """
        allowed_values = ["NOTIFICATION_TYPE_UNSPECIFIED", "GOOGLE_UPDATE", "NEW_REVIEW", "UPDATED_REVIEW", "NEW_CUSTOMER_MEDIA", "NEW_QUESTION", "UPDATED_QUESTION", "NEW_ANSWER", "UPDATED_ANSWER", "UPDATED_LOCATION_STATE"]  # noqa: E501
        if not set(notification_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `notification_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(notification_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._notification_types = notification_types

    @property
    def topic_name(self):
        """Gets the topic_name of this Notifications.

        The Google Cloud Pub/Sub topic that will receive notifications when locations managed by this account are updated. If unset, no notifications will be posted. The account mybusiness-api-pubsub@system.gserviceaccount.com must have at least Publish permissions on the Cloud Pub/Sub topic.

        :return: The topic_name of this Notifications.
        :rtype: str
        """
        return self._topic_name

    @topic_name.setter
    def topic_name(self, topic_name):
        """Sets the topic_name of this Notifications.

        The Google Cloud Pub/Sub topic that will receive notifications when locations managed by this account are updated. If unset, no notifications will be posted. The account mybusiness-api-pubsub@system.gserviceaccount.com must have at least Publish permissions on the Cloud Pub/Sub topic.

        :param topic_name: The topic_name of this Notifications.
        :type topic_name: str
        """

        self._topic_name = topic_name
