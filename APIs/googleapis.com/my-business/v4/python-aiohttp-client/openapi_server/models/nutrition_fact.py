# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NutritionFact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lower_amount: float=None, unit: str=None, upper_amount: float=None):
        """NutritionFact - a model defined in OpenAPI

        :param lower_amount: The lower_amount of this NutritionFact.
        :param unit: The unit of this NutritionFact.
        :param upper_amount: The upper_amount of this NutritionFact.
        """
        self.openapi_types = {
            'lower_amount': float,
            'unit': str,
            'upper_amount': float
        }

        self.attribute_map = {
            'lower_amount': 'lowerAmount',
            'unit': 'unit',
            'upper_amount': 'upperAmount'
        }

        self._lower_amount = lower_amount
        self._unit = unit
        self._upper_amount = upper_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NutritionFact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NutritionFact of this NutritionFact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lower_amount(self):
        """Gets the lower_amount of this NutritionFact.

        Required. Lower amount of nutrition

        :return: The lower_amount of this NutritionFact.
        :rtype: float
        """
        return self._lower_amount

    @lower_amount.setter
    def lower_amount(self, lower_amount):
        """Sets the lower_amount of this NutritionFact.

        Required. Lower amount of nutrition

        :param lower_amount: The lower_amount of this NutritionFact.
        :type lower_amount: float
        """

        self._lower_amount = lower_amount

    @property
    def unit(self):
        """Gets the unit of this NutritionFact.

        Required. Unit of the given nutrition information.

        :return: The unit of this NutritionFact.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this NutritionFact.

        Required. Unit of the given nutrition information.

        :param unit: The unit of this NutritionFact.
        :type unit: str
        """
        allowed_values = ["MASS_UNIT_UNSPECIFIED", "GRAM", "MILLIGRAM"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def upper_amount(self):
        """Gets the upper_amount of this NutritionFact.

        Optional. Upper amount of nutrition

        :return: The upper_amount of this NutritionFact.
        :rtype: float
        """
        return self._upper_amount

    @upper_amount.setter
    def upper_amount(self, upper_amount):
        """Sets the upper_amount of this NutritionFact.

        Optional. Upper amount of nutrition

        :param upper_amount: The upper_amount of this NutritionFact.
        :type upper_amount: float
        """

        self._upper_amount = upper_amount
