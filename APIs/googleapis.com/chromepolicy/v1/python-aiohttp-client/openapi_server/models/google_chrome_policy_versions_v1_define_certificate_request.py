# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_chrome_policy_versions_v1_network_setting import GoogleChromePolicyVersionsV1NetworkSetting
from openapi_server import util


class GoogleChromePolicyVersionsV1DefineCertificateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ceritificate_name: str=None, certificate: str=None, settings: List[GoogleChromePolicyVersionsV1NetworkSetting]=None, target_resource: str=None):
        """GoogleChromePolicyVersionsV1DefineCertificateRequest - a model defined in OpenAPI

        :param ceritificate_name: The ceritificate_name of this GoogleChromePolicyVersionsV1DefineCertificateRequest.
        :param certificate: The certificate of this GoogleChromePolicyVersionsV1DefineCertificateRequest.
        :param settings: The settings of this GoogleChromePolicyVersionsV1DefineCertificateRequest.
        :param target_resource: The target_resource of this GoogleChromePolicyVersionsV1DefineCertificateRequest.
        """
        self.openapi_types = {
            'ceritificate_name': str,
            'certificate': str,
            'settings': List[GoogleChromePolicyVersionsV1NetworkSetting],
            'target_resource': str
        }

        self.attribute_map = {
            'ceritificate_name': 'ceritificateName',
            'certificate': 'certificate',
            'settings': 'settings',
            'target_resource': 'targetResource'
        }

        self._ceritificate_name = ceritificate_name
        self._certificate = certificate
        self._settings = settings
        self._target_resource = target_resource

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromePolicyVersionsV1DefineCertificateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromePolicyVersionsV1DefineCertificateRequest of this GoogleChromePolicyVersionsV1DefineCertificateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ceritificate_name(self):
        """Gets the ceritificate_name of this GoogleChromePolicyVersionsV1DefineCertificateRequest.

        Optional. The optional name of the certificate. If not specified, the certificate issuer will be used as the name.

        :return: The ceritificate_name of this GoogleChromePolicyVersionsV1DefineCertificateRequest.
        :rtype: str
        """
        return self._ceritificate_name

    @ceritificate_name.setter
    def ceritificate_name(self, ceritificate_name):
        """Sets the ceritificate_name of this GoogleChromePolicyVersionsV1DefineCertificateRequest.

        Optional. The optional name of the certificate. If not specified, the certificate issuer will be used as the name.

        :param ceritificate_name: The ceritificate_name of this GoogleChromePolicyVersionsV1DefineCertificateRequest.
        :type ceritificate_name: str
        """

        self._ceritificate_name = ceritificate_name

    @property
    def certificate(self):
        """Gets the certificate of this GoogleChromePolicyVersionsV1DefineCertificateRequest.

        Required. The raw contents of the .PEM, .CRT, or .CER file.

        :return: The certificate of this GoogleChromePolicyVersionsV1DefineCertificateRequest.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this GoogleChromePolicyVersionsV1DefineCertificateRequest.

        Required. The raw contents of the .PEM, .CRT, or .CER file.

        :param certificate: The certificate of this GoogleChromePolicyVersionsV1DefineCertificateRequest.
        :type certificate: str
        """

        self._certificate = certificate

    @property
    def settings(self):
        """Gets the settings of this GoogleChromePolicyVersionsV1DefineCertificateRequest.

        Optional. Certificate settings within the chrome.networks.certificates namespace.

        :return: The settings of this GoogleChromePolicyVersionsV1DefineCertificateRequest.
        :rtype: List[GoogleChromePolicyVersionsV1NetworkSetting]
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this GoogleChromePolicyVersionsV1DefineCertificateRequest.

        Optional. Certificate settings within the chrome.networks.certificates namespace.

        :param settings: The settings of this GoogleChromePolicyVersionsV1DefineCertificateRequest.
        :type settings: List[GoogleChromePolicyVersionsV1NetworkSetting]
        """

        self._settings = settings

    @property
    def target_resource(self):
        """Gets the target_resource of this GoogleChromePolicyVersionsV1DefineCertificateRequest.

        Required. The target resource on which this certificate is applied. The following resources are supported: * Organizational Unit (\"orgunits/{orgunit_id}\")

        :return: The target_resource of this GoogleChromePolicyVersionsV1DefineCertificateRequest.
        :rtype: str
        """
        return self._target_resource

    @target_resource.setter
    def target_resource(self, target_resource):
        """Sets the target_resource of this GoogleChromePolicyVersionsV1DefineCertificateRequest.

        Required. The target resource on which this certificate is applied. The following resources are supported: * Organizational Unit (\"orgunits/{orgunit_id}\")

        :param target_resource: The target_resource of this GoogleChromePolicyVersionsV1DefineCertificateRequest.
        :type target_resource: str
        """

        self._target_resource = target_resource
