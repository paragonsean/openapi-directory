# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleChromePolicyVersionsV1UploadedFileConstraints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, size_limit_bytes: str=None, supported_content_types: List[str]=None):
        """GoogleChromePolicyVersionsV1UploadedFileConstraints - a model defined in OpenAPI

        :param size_limit_bytes: The size_limit_bytes of this GoogleChromePolicyVersionsV1UploadedFileConstraints.
        :param supported_content_types: The supported_content_types of this GoogleChromePolicyVersionsV1UploadedFileConstraints.
        """
        self.openapi_types = {
            'size_limit_bytes': str,
            'supported_content_types': List[str]
        }

        self.attribute_map = {
            'size_limit_bytes': 'sizeLimitBytes',
            'supported_content_types': 'supportedContentTypes'
        }

        self._size_limit_bytes = size_limit_bytes
        self._supported_content_types = supported_content_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromePolicyVersionsV1UploadedFileConstraints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromePolicyVersionsV1UploadedFileConstraints of this GoogleChromePolicyVersionsV1UploadedFileConstraints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def size_limit_bytes(self):
        """Gets the size_limit_bytes of this GoogleChromePolicyVersionsV1UploadedFileConstraints.

        The size limit of uploaded files for a setting, in bytes.

        :return: The size_limit_bytes of this GoogleChromePolicyVersionsV1UploadedFileConstraints.
        :rtype: str
        """
        return self._size_limit_bytes

    @size_limit_bytes.setter
    def size_limit_bytes(self, size_limit_bytes):
        """Sets the size_limit_bytes of this GoogleChromePolicyVersionsV1UploadedFileConstraints.

        The size limit of uploaded files for a setting, in bytes.

        :param size_limit_bytes: The size_limit_bytes of this GoogleChromePolicyVersionsV1UploadedFileConstraints.
        :type size_limit_bytes: str
        """

        self._size_limit_bytes = size_limit_bytes

    @property
    def supported_content_types(self):
        """Gets the supported_content_types of this GoogleChromePolicyVersionsV1UploadedFileConstraints.

        File types that can be uploaded for a setting.

        :return: The supported_content_types of this GoogleChromePolicyVersionsV1UploadedFileConstraints.
        :rtype: List[str]
        """
        return self._supported_content_types

    @supported_content_types.setter
    def supported_content_types(self, supported_content_types):
        """Sets the supported_content_types of this GoogleChromePolicyVersionsV1UploadedFileConstraints.

        File types that can be uploaded for a setting.

        :param supported_content_types: The supported_content_types of this GoogleChromePolicyVersionsV1UploadedFileConstraints.
        :type supported_content_types: List[str]
        """
        allowed_values = ["CONTENT_TYPE_UNSPECIFIED", "CONTENT_TYPE_PLAIN_TEXT", "CONTENT_TYPE_HTML", "CONTENT_TYPE_IMAGE_JPEG", "CONTENT_TYPE_IMAGE_GIF", "CONTENT_TYPE_IMAGE_PNG", "CONTENT_TYPE_JSON", "CONTENT_TYPE_ZIP", "CONTENT_TYPE_GZIP", "CONTENT_TYPE_CSV", "CONTENT_TYPE_YAML", "CONTENT_TYPE_IMAGE_WEBP"]  # noqa: E501
        if not set(supported_content_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `supported_content_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(supported_content_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._supported_content_types = supported_content_types
