# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_chrome_policy_versions_v1_policy_target_key import GoogleChromePolicyVersionsV1PolicyTargetKey
from openapi_server import util


class GoogleChromePolicyVersionsV1ResolveRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, page_size: int=None, page_token: str=None, policy_schema_filter: str=None, policy_target_key: GoogleChromePolicyVersionsV1PolicyTargetKey=None):
        """GoogleChromePolicyVersionsV1ResolveRequest - a model defined in OpenAPI

        :param page_size: The page_size of this GoogleChromePolicyVersionsV1ResolveRequest.
        :param page_token: The page_token of this GoogleChromePolicyVersionsV1ResolveRequest.
        :param policy_schema_filter: The policy_schema_filter of this GoogleChromePolicyVersionsV1ResolveRequest.
        :param policy_target_key: The policy_target_key of this GoogleChromePolicyVersionsV1ResolveRequest.
        """
        self.openapi_types = {
            'page_size': int,
            'page_token': str,
            'policy_schema_filter': str,
            'policy_target_key': GoogleChromePolicyVersionsV1PolicyTargetKey
        }

        self.attribute_map = {
            'page_size': 'pageSize',
            'page_token': 'pageToken',
            'policy_schema_filter': 'policySchemaFilter',
            'policy_target_key': 'policyTargetKey'
        }

        self._page_size = page_size
        self._page_token = page_token
        self._policy_schema_filter = policy_schema_filter
        self._policy_target_key = policy_target_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromePolicyVersionsV1ResolveRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromePolicyVersionsV1ResolveRequest of this GoogleChromePolicyVersionsV1ResolveRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def page_size(self):
        """Gets the page_size of this GoogleChromePolicyVersionsV1ResolveRequest.

        The maximum number of policies to return, defaults to 100 and has a maximum of 1000.

        :return: The page_size of this GoogleChromePolicyVersionsV1ResolveRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this GoogleChromePolicyVersionsV1ResolveRequest.

        The maximum number of policies to return, defaults to 100 and has a maximum of 1000.

        :param page_size: The page_size of this GoogleChromePolicyVersionsV1ResolveRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this GoogleChromePolicyVersionsV1ResolveRequest.

        The page token used to retrieve a specific page of the request.

        :return: The page_token of this GoogleChromePolicyVersionsV1ResolveRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this GoogleChromePolicyVersionsV1ResolveRequest.

        The page token used to retrieve a specific page of the request.

        :param page_token: The page_token of this GoogleChromePolicyVersionsV1ResolveRequest.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def policy_schema_filter(self):
        """Gets the policy_schema_filter of this GoogleChromePolicyVersionsV1ResolveRequest.

        Required. The schema filter to apply to the resolve request. Specify a schema name to view a particular schema, for example: chrome.users.ShowLogoutButton Wildcards are supported, but only in the leaf portion of the schema name. Wildcards cannot be used in namespace directly. Please read https://developers.google.com/chrome/policy/guides/policy-schemas for details on schema namespaces. For example: Valid: \"chrome.users.*\", \"chrome.users.apps.*\", \"chrome.printers.*\" Invalid: \"*\", \"*.users\", \"chrome.*\", \"chrome.*.apps.*\"

        :return: The policy_schema_filter of this GoogleChromePolicyVersionsV1ResolveRequest.
        :rtype: str
        """
        return self._policy_schema_filter

    @policy_schema_filter.setter
    def policy_schema_filter(self, policy_schema_filter):
        """Sets the policy_schema_filter of this GoogleChromePolicyVersionsV1ResolveRequest.

        Required. The schema filter to apply to the resolve request. Specify a schema name to view a particular schema, for example: chrome.users.ShowLogoutButton Wildcards are supported, but only in the leaf portion of the schema name. Wildcards cannot be used in namespace directly. Please read https://developers.google.com/chrome/policy/guides/policy-schemas for details on schema namespaces. For example: Valid: \"chrome.users.*\", \"chrome.users.apps.*\", \"chrome.printers.*\" Invalid: \"*\", \"*.users\", \"chrome.*\", \"chrome.*.apps.*\"

        :param policy_schema_filter: The policy_schema_filter of this GoogleChromePolicyVersionsV1ResolveRequest.
        :type policy_schema_filter: str
        """

        self._policy_schema_filter = policy_schema_filter

    @property
    def policy_target_key(self):
        """Gets the policy_target_key of this GoogleChromePolicyVersionsV1ResolveRequest.


        :return: The policy_target_key of this GoogleChromePolicyVersionsV1ResolveRequest.
        :rtype: GoogleChromePolicyVersionsV1PolicyTargetKey
        """
        return self._policy_target_key

    @policy_target_key.setter
    def policy_target_key(self, policy_target_key):
        """Sets the policy_target_key of this GoogleChromePolicyVersionsV1ResolveRequest.


        :param policy_target_key: The policy_target_key of this GoogleChromePolicyVersionsV1ResolveRequest.
        :type policy_target_key: GoogleChromePolicyVersionsV1PolicyTargetKey
        """

        self._policy_target_key = policy_target_key
