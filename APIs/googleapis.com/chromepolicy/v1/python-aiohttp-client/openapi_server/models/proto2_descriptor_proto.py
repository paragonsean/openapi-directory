# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.proto2_enum_descriptor_proto import Proto2EnumDescriptorProto
from openapi_server.models.proto2_field_descriptor_proto import Proto2FieldDescriptorProto
from openapi_server.models.proto2_oneof_descriptor_proto import Proto2OneofDescriptorProto
from openapi_server import util


class Proto2DescriptorProto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enum_type: List[Proto2EnumDescriptorProto]=None, _field: List[Proto2FieldDescriptorProto]=None, name: str=None, nested_type: List[Proto2DescriptorProto]=None, oneof_decl: List[Proto2OneofDescriptorProto]=None):
        """Proto2DescriptorProto - a model defined in OpenAPI

        :param enum_type: The enum_type of this Proto2DescriptorProto.
        :param _field: The _field of this Proto2DescriptorProto.
        :param name: The name of this Proto2DescriptorProto.
        :param nested_type: The nested_type of this Proto2DescriptorProto.
        :param oneof_decl: The oneof_decl of this Proto2DescriptorProto.
        """
        self.openapi_types = {
            'enum_type': List[Proto2EnumDescriptorProto],
            '_field': List[Proto2FieldDescriptorProto],
            'name': str,
            'nested_type': List[Proto2DescriptorProto],
            'oneof_decl': List[Proto2OneofDescriptorProto]
        }

        self.attribute_map = {
            'enum_type': 'enumType',
            '_field': 'field',
            'name': 'name',
            'nested_type': 'nestedType',
            'oneof_decl': 'oneofDecl'
        }

        self._enum_type = enum_type
        self.__field = _field
        self._name = name
        self._nested_type = nested_type
        self._oneof_decl = oneof_decl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Proto2DescriptorProto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Proto2DescriptorProto of this Proto2DescriptorProto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enum_type(self):
        """Gets the enum_type of this Proto2DescriptorProto.


        :return: The enum_type of this Proto2DescriptorProto.
        :rtype: List[Proto2EnumDescriptorProto]
        """
        return self._enum_type

    @enum_type.setter
    def enum_type(self, enum_type):
        """Sets the enum_type of this Proto2DescriptorProto.


        :param enum_type: The enum_type of this Proto2DescriptorProto.
        :type enum_type: List[Proto2EnumDescriptorProto]
        """

        self._enum_type = enum_type

    @property
    def _field(self):
        """Gets the _field of this Proto2DescriptorProto.


        :return: The _field of this Proto2DescriptorProto.
        :rtype: List[Proto2FieldDescriptorProto]
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this Proto2DescriptorProto.


        :param _field: The _field of this Proto2DescriptorProto.
        :type _field: List[Proto2FieldDescriptorProto]
        """

        self.__field = _field

    @property
    def name(self):
        """Gets the name of this Proto2DescriptorProto.


        :return: The name of this Proto2DescriptorProto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Proto2DescriptorProto.


        :param name: The name of this Proto2DescriptorProto.
        :type name: str
        """

        self._name = name

    @property
    def nested_type(self):
        """Gets the nested_type of this Proto2DescriptorProto.


        :return: The nested_type of this Proto2DescriptorProto.
        :rtype: List[Proto2DescriptorProto]
        """
        return self._nested_type

    @nested_type.setter
    def nested_type(self, nested_type):
        """Sets the nested_type of this Proto2DescriptorProto.


        :param nested_type: The nested_type of this Proto2DescriptorProto.
        :type nested_type: List[Proto2DescriptorProto]
        """

        self._nested_type = nested_type

    @property
    def oneof_decl(self):
        """Gets the oneof_decl of this Proto2DescriptorProto.


        :return: The oneof_decl of this Proto2DescriptorProto.
        :rtype: List[Proto2OneofDescriptorProto]
        """
        return self._oneof_decl

    @oneof_decl.setter
    def oneof_decl(self, oneof_decl):
        """Sets the oneof_decl of this Proto2DescriptorProto.


        :param oneof_decl: The oneof_decl of this Proto2DescriptorProto.
        :type oneof_decl: List[Proto2OneofDescriptorProto]
        """

        self._oneof_decl = oneof_decl
