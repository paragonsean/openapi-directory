# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_type_date import GoogleTypeDate
from openapi_server import util


class GoogleChromePolicyVersionsV1PolicyApiLifecycle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deprecated_in_favor_of: List[str]=None, description: str=None, end_support: GoogleTypeDate=None, policy_api_lifecycle_stage: str=None, scheduled_to_deprecate_policies: List[str]=None):
        """GoogleChromePolicyVersionsV1PolicyApiLifecycle - a model defined in OpenAPI

        :param deprecated_in_favor_of: The deprecated_in_favor_of of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.
        :param description: The description of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.
        :param end_support: The end_support of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.
        :param policy_api_lifecycle_stage: The policy_api_lifecycle_stage of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.
        :param scheduled_to_deprecate_policies: The scheduled_to_deprecate_policies of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.
        """
        self.openapi_types = {
            'deprecated_in_favor_of': List[str],
            'description': str,
            'end_support': GoogleTypeDate,
            'policy_api_lifecycle_stage': str,
            'scheduled_to_deprecate_policies': List[str]
        }

        self.attribute_map = {
            'deprecated_in_favor_of': 'deprecatedInFavorOf',
            'description': 'description',
            'end_support': 'endSupport',
            'policy_api_lifecycle_stage': 'policyApiLifecycleStage',
            'scheduled_to_deprecate_policies': 'scheduledToDeprecatePolicies'
        }

        self._deprecated_in_favor_of = deprecated_in_favor_of
        self._description = description
        self._end_support = end_support
        self._policy_api_lifecycle_stage = policy_api_lifecycle_stage
        self._scheduled_to_deprecate_policies = scheduled_to_deprecate_policies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromePolicyVersionsV1PolicyApiLifecycle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromePolicyVersionsV1PolicyApiLifecycle of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deprecated_in_favor_of(self):
        """Gets the deprecated_in_favor_of of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.

        In the event that this policy was deprecated in favor of another policy, the fully qualified namespace(s) of the new policies as they will show in PolicyAPI. Could only be set if policy_api_lifecycle_stage is API_DEPRECATED.

        :return: The deprecated_in_favor_of of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.
        :rtype: List[str]
        """
        return self._deprecated_in_favor_of

    @deprecated_in_favor_of.setter
    def deprecated_in_favor_of(self, deprecated_in_favor_of):
        """Sets the deprecated_in_favor_of of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.

        In the event that this policy was deprecated in favor of another policy, the fully qualified namespace(s) of the new policies as they will show in PolicyAPI. Could only be set if policy_api_lifecycle_stage is API_DEPRECATED.

        :param deprecated_in_favor_of: The deprecated_in_favor_of of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.
        :type deprecated_in_favor_of: List[str]
        """

        self._deprecated_in_favor_of = deprecated_in_favor_of

    @property
    def description(self):
        """Gets the description of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.

        Description about current life cycle.

        :return: The description of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.

        Description about current life cycle.

        :param description: The description of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.
        :type description: str
        """

        self._description = description

    @property
    def end_support(self):
        """Gets the end_support of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.


        :return: The end_support of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.
        :rtype: GoogleTypeDate
        """
        return self._end_support

    @end_support.setter
    def end_support(self, end_support):
        """Sets the end_support of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.


        :param end_support: The end_support of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.
        :type end_support: GoogleTypeDate
        """

        self._end_support = end_support

    @property
    def policy_api_lifecycle_stage(self):
        """Gets the policy_api_lifecycle_stage of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.

        Indicates current life cycle stage of the policy API.

        :return: The policy_api_lifecycle_stage of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.
        :rtype: str
        """
        return self._policy_api_lifecycle_stage

    @policy_api_lifecycle_stage.setter
    def policy_api_lifecycle_stage(self, policy_api_lifecycle_stage):
        """Sets the policy_api_lifecycle_stage of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.

        Indicates current life cycle stage of the policy API.

        :param policy_api_lifecycle_stage: The policy_api_lifecycle_stage of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.
        :type policy_api_lifecycle_stage: str
        """
        allowed_values = ["API_UNSPECIFIED", "API_PREVIEW", "API_DEVELOPMENT", "API_CURRENT", "API_DEPRECATED"]  # noqa: E501
        if policy_api_lifecycle_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_api_lifecycle_stage` ({0}), must be one of {1}"
                .format(policy_api_lifecycle_stage, allowed_values)
            )

        self._policy_api_lifecycle_stage = policy_api_lifecycle_stage

    @property
    def scheduled_to_deprecate_policies(self):
        """Gets the scheduled_to_deprecate_policies of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.

        Corresponding to deprecated_in_favor_of, the fully qualified namespace(s) of the old policies that will be deprecated because of introduction of this policy. This field should not be manually set but will be set and exposed through PolicyAPI automatically.

        :return: The scheduled_to_deprecate_policies of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.
        :rtype: List[str]
        """
        return self._scheduled_to_deprecate_policies

    @scheduled_to_deprecate_policies.setter
    def scheduled_to_deprecate_policies(self, scheduled_to_deprecate_policies):
        """Sets the scheduled_to_deprecate_policies of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.

        Corresponding to deprecated_in_favor_of, the fully qualified namespace(s) of the old policies that will be deprecated because of introduction of this policy. This field should not be manually set but will be set and exposed through PolicyAPI automatically.

        :param scheduled_to_deprecate_policies: The scheduled_to_deprecate_policies of this GoogleChromePolicyVersionsV1PolicyApiLifecycle.
        :type scheduled_to_deprecate_policies: List[str]
        """

        self._scheduled_to_deprecate_policies = scheduled_to_deprecate_policies
