# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.proto2_descriptor_proto import Proto2DescriptorProto
from openapi_server.models.proto2_enum_descriptor_proto import Proto2EnumDescriptorProto
from openapi_server import util


class Proto2FileDescriptorProto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, edition_deprecated: str=None, enum_type: List[Proto2EnumDescriptorProto]=None, message_type: List[Proto2DescriptorProto]=None, name: str=None, package: str=None, syntax: str=None):
        """Proto2FileDescriptorProto - a model defined in OpenAPI

        :param edition_deprecated: The edition_deprecated of this Proto2FileDescriptorProto.
        :param enum_type: The enum_type of this Proto2FileDescriptorProto.
        :param message_type: The message_type of this Proto2FileDescriptorProto.
        :param name: The name of this Proto2FileDescriptorProto.
        :param package: The package of this Proto2FileDescriptorProto.
        :param syntax: The syntax of this Proto2FileDescriptorProto.
        """
        self.openapi_types = {
            'edition_deprecated': str,
            'enum_type': List[Proto2EnumDescriptorProto],
            'message_type': List[Proto2DescriptorProto],
            'name': str,
            'package': str,
            'syntax': str
        }

        self.attribute_map = {
            'edition_deprecated': 'editionDeprecated',
            'enum_type': 'enumType',
            'message_type': 'messageType',
            'name': 'name',
            'package': 'package',
            'syntax': 'syntax'
        }

        self._edition_deprecated = edition_deprecated
        self._enum_type = enum_type
        self._message_type = message_type
        self._name = name
        self._package = package
        self._syntax = syntax

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Proto2FileDescriptorProto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Proto2FileDescriptorProto of this Proto2FileDescriptorProto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def edition_deprecated(self):
        """Gets the edition_deprecated of this Proto2FileDescriptorProto.

        BEGIN GOOGLE-INTERNAL TODO(b/297898292) Deprecate and remove this field in favor of enums. END GOOGLE-INTERNAL

        :return: The edition_deprecated of this Proto2FileDescriptorProto.
        :rtype: str
        """
        return self._edition_deprecated

    @edition_deprecated.setter
    def edition_deprecated(self, edition_deprecated):
        """Sets the edition_deprecated of this Proto2FileDescriptorProto.

        BEGIN GOOGLE-INTERNAL TODO(b/297898292) Deprecate and remove this field in favor of enums. END GOOGLE-INTERNAL

        :param edition_deprecated: The edition_deprecated of this Proto2FileDescriptorProto.
        :type edition_deprecated: str
        """

        self._edition_deprecated = edition_deprecated

    @property
    def enum_type(self):
        """Gets the enum_type of this Proto2FileDescriptorProto.


        :return: The enum_type of this Proto2FileDescriptorProto.
        :rtype: List[Proto2EnumDescriptorProto]
        """
        return self._enum_type

    @enum_type.setter
    def enum_type(self, enum_type):
        """Sets the enum_type of this Proto2FileDescriptorProto.


        :param enum_type: The enum_type of this Proto2FileDescriptorProto.
        :type enum_type: List[Proto2EnumDescriptorProto]
        """

        self._enum_type = enum_type

    @property
    def message_type(self):
        """Gets the message_type of this Proto2FileDescriptorProto.

        All top-level definitions in this file.

        :return: The message_type of this Proto2FileDescriptorProto.
        :rtype: List[Proto2DescriptorProto]
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this Proto2FileDescriptorProto.

        All top-level definitions in this file.

        :param message_type: The message_type of this Proto2FileDescriptorProto.
        :type message_type: List[Proto2DescriptorProto]
        """

        self._message_type = message_type

    @property
    def name(self):
        """Gets the name of this Proto2FileDescriptorProto.

        file name, relative to root of source tree

        :return: The name of this Proto2FileDescriptorProto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Proto2FileDescriptorProto.

        file name, relative to root of source tree

        :param name: The name of this Proto2FileDescriptorProto.
        :type name: str
        """

        self._name = name

    @property
    def package(self):
        """Gets the package of this Proto2FileDescriptorProto.

        e.g. \"foo\", \"foo.bar\", etc.

        :return: The package of this Proto2FileDescriptorProto.
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this Proto2FileDescriptorProto.

        e.g. \"foo\", \"foo.bar\", etc.

        :param package: The package of this Proto2FileDescriptorProto.
        :type package: str
        """

        self._package = package

    @property
    def syntax(self):
        """Gets the syntax of this Proto2FileDescriptorProto.

        The syntax of the proto file. The supported values are \"proto2\", \"proto3\", and \"editions\". If `edition` is present, this value must be \"editions\".

        :return: The syntax of this Proto2FileDescriptorProto.
        :rtype: str
        """
        return self._syntax

    @syntax.setter
    def syntax(self, syntax):
        """Sets the syntax of this Proto2FileDescriptorProto.

        The syntax of the proto file. The supported values are \"proto2\", \"proto3\", and \"editions\". If `edition` is present, this value must be \"editions\".

        :param syntax: The syntax of this Proto2FileDescriptorProto.
        :type syntax: str
        """

        self._syntax = syntax
