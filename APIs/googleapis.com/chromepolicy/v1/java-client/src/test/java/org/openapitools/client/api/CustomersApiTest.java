/*
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1BatchDeleteGroupPoliciesRequest;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1BatchModifyGroupPoliciesRequest;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1BatchModifyOrgUnitPoliciesRequest;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1DefineCertificateRequest;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1DefineCertificateResponse;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1DefineNetworkRequest;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1DefineNetworkResponse;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1ListPolicySchemasResponse;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1PolicySchema;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1RemoveCertificateRequest;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1RemoveNetworkRequest;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1ResolveRequest;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1ResolveResponse;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1UpdateGroupPriorityOrderingRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomersApi
 */
@Disabled
public class CustomersApiTest {

    private final CustomersApi api = new CustomersApi();

    /**
     * Delete multiple policy values that are applied to a specific group. All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in &#x60;additionalTargetKeyNames&#x60;, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chromepolicyCustomersPoliciesGroupsBatchDeleteTest() throws ApiException {
        String customer = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleChromePolicyVersionsV1BatchDeleteGroupPoliciesRequest googleChromePolicyVersionsV1BatchDeleteGroupPoliciesRequest = null;
        Object response = api.chromepolicyCustomersPoliciesGroupsBatchDelete(customer, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleChromePolicyVersionsV1BatchDeleteGroupPoliciesRequest);
        // TODO: test validations
    }

    /**
     * Modify multiple policy values that are applied to a specific group. All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in &#x60;additionalTargetKeyNames&#x60;, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chromepolicyCustomersPoliciesGroupsBatchModifyTest() throws ApiException {
        String customer = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleChromePolicyVersionsV1BatchModifyGroupPoliciesRequest googleChromePolicyVersionsV1BatchModifyGroupPoliciesRequest = null;
        Object response = api.chromepolicyCustomersPoliciesGroupsBatchModify(customer, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleChromePolicyVersionsV1BatchModifyGroupPoliciesRequest);
        // TODO: test validations
    }

    /**
     * Retrieve a group priority ordering for an app. The target app must be supplied in &#x60;additionalTargetKeyNames&#x60; in the PolicyTargetKey. On failure the request will return the error details as part of the google.rpc.Status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingTest() throws ApiException {
        String customer = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest googleChromePolicyVersionsV1ListGroupPriorityOrderingRequest = null;
        GoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse response = api.chromepolicyCustomersPoliciesGroupsListGroupPriorityOrdering(customer, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleChromePolicyVersionsV1ListGroupPriorityOrderingRequest);
        // TODO: test validations
    }

    /**
     * Update a group priority ordering for an app. The target app must be supplied in &#x60;additionalTargetKeyNames&#x60; in the PolicyTargetKey. On failure the request will return the error details as part of the google.rpc.Status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingTest() throws ApiException {
        String customer = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleChromePolicyVersionsV1UpdateGroupPriorityOrderingRequest googleChromePolicyVersionsV1UpdateGroupPriorityOrderingRequest = null;
        Object response = api.chromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrdering(customer, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleChromePolicyVersionsV1UpdateGroupPriorityOrderingRequest);
        // TODO: test validations
    }

    /**
     * Creates a certificate at a specified OU for a customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chromepolicyCustomersPoliciesNetworksDefineCertificateTest() throws ApiException {
        String customer = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleChromePolicyVersionsV1DefineCertificateRequest googleChromePolicyVersionsV1DefineCertificateRequest = null;
        GoogleChromePolicyVersionsV1DefineCertificateResponse response = api.chromepolicyCustomersPoliciesNetworksDefineCertificate(customer, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleChromePolicyVersionsV1DefineCertificateRequest);
        // TODO: test validations
    }

    /**
     * Define a new network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chromepolicyCustomersPoliciesNetworksDefineNetworkTest() throws ApiException {
        String customer = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleChromePolicyVersionsV1DefineNetworkRequest googleChromePolicyVersionsV1DefineNetworkRequest = null;
        GoogleChromePolicyVersionsV1DefineNetworkResponse response = api.chromepolicyCustomersPoliciesNetworksDefineNetwork(customer, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleChromePolicyVersionsV1DefineNetworkRequest);
        // TODO: test validations
    }

    /**
     * Remove an existing certificate by guid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chromepolicyCustomersPoliciesNetworksRemoveCertificateTest() throws ApiException {
        String customer = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleChromePolicyVersionsV1RemoveCertificateRequest googleChromePolicyVersionsV1RemoveCertificateRequest = null;
        Object response = api.chromepolicyCustomersPoliciesNetworksRemoveCertificate(customer, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleChromePolicyVersionsV1RemoveCertificateRequest);
        // TODO: test validations
    }

    /**
     * Remove an existing network by guid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chromepolicyCustomersPoliciesNetworksRemoveNetworkTest() throws ApiException {
        String customer = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleChromePolicyVersionsV1RemoveNetworkRequest googleChromePolicyVersionsV1RemoveNetworkRequest = null;
        Object response = api.chromepolicyCustomersPoliciesNetworksRemoveNetwork(customer, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleChromePolicyVersionsV1RemoveNetworkRequest);
        // TODO: test validations
    }

    /**
     * Modify multiple policy values that are applied to a specific org unit so that they now inherit the value from a parent (if applicable). All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in &#x60;additionalTargetKeyNames&#x60;, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chromepolicyCustomersPoliciesOrgunitsBatchInheritTest() throws ApiException {
        String customer = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest googleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest = null;
        Object response = api.chromepolicyCustomersPoliciesOrgunitsBatchInherit(customer, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest);
        // TODO: test validations
    }

    /**
     * Modify multiple policy values that are applied to a specific org unit. All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in &#x60;additionalTargetKeyNames&#x60;, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chromepolicyCustomersPoliciesOrgunitsBatchModifyTest() throws ApiException {
        String customer = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleChromePolicyVersionsV1BatchModifyOrgUnitPoliciesRequest googleChromePolicyVersionsV1BatchModifyOrgUnitPoliciesRequest = null;
        Object response = api.chromepolicyCustomersPoliciesOrgunitsBatchModify(customer, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleChromePolicyVersionsV1BatchModifyOrgUnitPoliciesRequest);
        // TODO: test validations
    }

    /**
     * Gets the resolved policy values for a list of policies that match a search query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chromepolicyCustomersPoliciesResolveTest() throws ApiException {
        String customer = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleChromePolicyVersionsV1ResolveRequest googleChromePolicyVersionsV1ResolveRequest = null;
        GoogleChromePolicyVersionsV1ResolveResponse response = api.chromepolicyCustomersPoliciesResolve(customer, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleChromePolicyVersionsV1ResolveRequest);
        // TODO: test validations
    }

    /**
     * Get a specific policy schema for a customer by its resource name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chromepolicyCustomersPolicySchemasGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleChromePolicyVersionsV1PolicySchema response = api.chromepolicyCustomersPolicySchemasGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a list of policy schemas that match a specified filter value for a given customer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chromepolicyCustomersPolicySchemasListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleChromePolicyVersionsV1ListPolicySchemasResponse response = api.chromepolicyCustomersPolicySchemasList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

}
