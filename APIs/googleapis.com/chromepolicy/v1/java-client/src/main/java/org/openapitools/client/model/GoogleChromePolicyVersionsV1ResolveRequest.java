/*
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1PolicyTargetKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for getting the resolved policy value for a specific target.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:19.062447-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromePolicyVersionsV1ResolveRequest {
  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_PAGE_TOKEN = "pageToken";
  @SerializedName(SERIALIZED_NAME_PAGE_TOKEN)
  private String pageToken;

  public static final String SERIALIZED_NAME_POLICY_SCHEMA_FILTER = "policySchemaFilter";
  @SerializedName(SERIALIZED_NAME_POLICY_SCHEMA_FILTER)
  private String policySchemaFilter;

  public static final String SERIALIZED_NAME_POLICY_TARGET_KEY = "policyTargetKey";
  @SerializedName(SERIALIZED_NAME_POLICY_TARGET_KEY)
  private GoogleChromePolicyVersionsV1PolicyTargetKey policyTargetKey;

  public GoogleChromePolicyVersionsV1ResolveRequest() {
  }

  public GoogleChromePolicyVersionsV1ResolveRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * The maximum number of policies to return, defaults to 100 and has a maximum of 1000.
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public GoogleChromePolicyVersionsV1ResolveRequest pageToken(String pageToken) {
    this.pageToken = pageToken;
    return this;
  }

  /**
   * The page token used to retrieve a specific page of the request.
   * @return pageToken
   */
  @javax.annotation.Nullable
  public String getPageToken() {
    return pageToken;
  }

  public void setPageToken(String pageToken) {
    this.pageToken = pageToken;
  }


  public GoogleChromePolicyVersionsV1ResolveRequest policySchemaFilter(String policySchemaFilter) {
    this.policySchemaFilter = policySchemaFilter;
    return this;
  }

  /**
   * Required. The schema filter to apply to the resolve request. Specify a schema name to view a particular schema, for example: chrome.users.ShowLogoutButton Wildcards are supported, but only in the leaf portion of the schema name. Wildcards cannot be used in namespace directly. Please read https://developers.google.com/chrome/policy/guides/policy-schemas for details on schema namespaces. For example: Valid: \&quot;chrome.users.*\&quot;, \&quot;chrome.users.apps.*\&quot;, \&quot;chrome.printers.*\&quot; Invalid: \&quot;*\&quot;, \&quot;*.users\&quot;, \&quot;chrome.*\&quot;, \&quot;chrome.*.apps.*\&quot;
   * @return policySchemaFilter
   */
  @javax.annotation.Nullable
  public String getPolicySchemaFilter() {
    return policySchemaFilter;
  }

  public void setPolicySchemaFilter(String policySchemaFilter) {
    this.policySchemaFilter = policySchemaFilter;
  }


  public GoogleChromePolicyVersionsV1ResolveRequest policyTargetKey(GoogleChromePolicyVersionsV1PolicyTargetKey policyTargetKey) {
    this.policyTargetKey = policyTargetKey;
    return this;
  }

  /**
   * Get policyTargetKey
   * @return policyTargetKey
   */
  @javax.annotation.Nullable
  public GoogleChromePolicyVersionsV1PolicyTargetKey getPolicyTargetKey() {
    return policyTargetKey;
  }

  public void setPolicyTargetKey(GoogleChromePolicyVersionsV1PolicyTargetKey policyTargetKey) {
    this.policyTargetKey = policyTargetKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromePolicyVersionsV1ResolveRequest googleChromePolicyVersionsV1ResolveRequest = (GoogleChromePolicyVersionsV1ResolveRequest) o;
    return Objects.equals(this.pageSize, googleChromePolicyVersionsV1ResolveRequest.pageSize) &&
        Objects.equals(this.pageToken, googleChromePolicyVersionsV1ResolveRequest.pageToken) &&
        Objects.equals(this.policySchemaFilter, googleChromePolicyVersionsV1ResolveRequest.policySchemaFilter) &&
        Objects.equals(this.policyTargetKey, googleChromePolicyVersionsV1ResolveRequest.policyTargetKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageSize, pageToken, policySchemaFilter, policyTargetKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromePolicyVersionsV1ResolveRequest {\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    pageToken: ").append(toIndentedString(pageToken)).append("\n");
    sb.append("    policySchemaFilter: ").append(toIndentedString(policySchemaFilter)).append("\n");
    sb.append("    policyTargetKey: ").append(toIndentedString(policyTargetKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pageSize");
    openapiFields.add("pageToken");
    openapiFields.add("policySchemaFilter");
    openapiFields.add("policyTargetKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromePolicyVersionsV1ResolveRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromePolicyVersionsV1ResolveRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromePolicyVersionsV1ResolveRequest is not found in the empty JSON string", GoogleChromePolicyVersionsV1ResolveRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromePolicyVersionsV1ResolveRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromePolicyVersionsV1ResolveRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pageToken") != null && !jsonObj.get("pageToken").isJsonNull()) && !jsonObj.get("pageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageToken").toString()));
      }
      if ((jsonObj.get("policySchemaFilter") != null && !jsonObj.get("policySchemaFilter").isJsonNull()) && !jsonObj.get("policySchemaFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policySchemaFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policySchemaFilter").toString()));
      }
      // validate the optional field `policyTargetKey`
      if (jsonObj.get("policyTargetKey") != null && !jsonObj.get("policyTargetKey").isJsonNull()) {
        GoogleChromePolicyVersionsV1PolicyTargetKey.validateJsonElement(jsonObj.get("policyTargetKey"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromePolicyVersionsV1ResolveRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromePolicyVersionsV1ResolveRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromePolicyVersionsV1ResolveRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromePolicyVersionsV1ResolveRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromePolicyVersionsV1ResolveRequest>() {
           @Override
           public void write(JsonWriter out, GoogleChromePolicyVersionsV1ResolveRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromePolicyVersionsV1ResolveRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromePolicyVersionsV1ResolveRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromePolicyVersionsV1ResolveRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleChromePolicyVersionsV1ResolveRequest
   */
  public static GoogleChromePolicyVersionsV1ResolveRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromePolicyVersionsV1ResolveRequest.class);
  }

  /**
   * Convert an instance of GoogleChromePolicyVersionsV1ResolveRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

