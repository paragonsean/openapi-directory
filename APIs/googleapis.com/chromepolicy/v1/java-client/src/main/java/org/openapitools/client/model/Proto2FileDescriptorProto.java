/*
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Proto2DescriptorProto;
import org.openapitools.client.model.Proto2EnumDescriptorProto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a complete .proto file.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:19.062447-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Proto2FileDescriptorProto {
  public static final String SERIALIZED_NAME_EDITION_DEPRECATED = "editionDeprecated";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_EDITION_DEPRECATED)
  private String editionDeprecated;

  public static final String SERIALIZED_NAME_ENUM_TYPE = "enumType";
  @SerializedName(SERIALIZED_NAME_ENUM_TYPE)
  private List<Proto2EnumDescriptorProto> enumType = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE_TYPE = "messageType";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TYPE)
  private List<Proto2DescriptorProto> messageType = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PACKAGE = "package";
  @SerializedName(SERIALIZED_NAME_PACKAGE)
  private String _package;

  public static final String SERIALIZED_NAME_SYNTAX = "syntax";
  @SerializedName(SERIALIZED_NAME_SYNTAX)
  private String syntax;

  public Proto2FileDescriptorProto() {
  }

  @Deprecated
  public Proto2FileDescriptorProto editionDeprecated(String editionDeprecated) {
    this.editionDeprecated = editionDeprecated;
    return this;
  }

  /**
   * BEGIN GOOGLE-INTERNAL TODO(b/297898292) Deprecate and remove this field in favor of enums. END GOOGLE-INTERNAL
   * @return editionDeprecated
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getEditionDeprecated() {
    return editionDeprecated;
  }

  @Deprecated
  public void setEditionDeprecated(String editionDeprecated) {
    this.editionDeprecated = editionDeprecated;
  }


  public Proto2FileDescriptorProto enumType(List<Proto2EnumDescriptorProto> enumType) {
    this.enumType = enumType;
    return this;
  }

  public Proto2FileDescriptorProto addEnumTypeItem(Proto2EnumDescriptorProto enumTypeItem) {
    if (this.enumType == null) {
      this.enumType = new ArrayList<>();
    }
    this.enumType.add(enumTypeItem);
    return this;
  }

  /**
   * Get enumType
   * @return enumType
   */
  @javax.annotation.Nullable
  public List<Proto2EnumDescriptorProto> getEnumType() {
    return enumType;
  }

  public void setEnumType(List<Proto2EnumDescriptorProto> enumType) {
    this.enumType = enumType;
  }


  public Proto2FileDescriptorProto messageType(List<Proto2DescriptorProto> messageType) {
    this.messageType = messageType;
    return this;
  }

  public Proto2FileDescriptorProto addMessageTypeItem(Proto2DescriptorProto messageTypeItem) {
    if (this.messageType == null) {
      this.messageType = new ArrayList<>();
    }
    this.messageType.add(messageTypeItem);
    return this;
  }

  /**
   * All top-level definitions in this file.
   * @return messageType
   */
  @javax.annotation.Nullable
  public List<Proto2DescriptorProto> getMessageType() {
    return messageType;
  }

  public void setMessageType(List<Proto2DescriptorProto> messageType) {
    this.messageType = messageType;
  }


  public Proto2FileDescriptorProto name(String name) {
    this.name = name;
    return this;
  }

  /**
   * file name, relative to root of source tree
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Proto2FileDescriptorProto _package(String _package) {
    this._package = _package;
    return this;
  }

  /**
   * e.g. \&quot;foo\&quot;, \&quot;foo.bar\&quot;, etc.
   * @return _package
   */
  @javax.annotation.Nullable
  public String getPackage() {
    return _package;
  }

  public void setPackage(String _package) {
    this._package = _package;
  }


  public Proto2FileDescriptorProto syntax(String syntax) {
    this.syntax = syntax;
    return this;
  }

  /**
   * The syntax of the proto file. The supported values are \&quot;proto2\&quot;, \&quot;proto3\&quot;, and \&quot;editions\&quot;. If &#x60;edition&#x60; is present, this value must be \&quot;editions\&quot;.
   * @return syntax
   */
  @javax.annotation.Nullable
  public String getSyntax() {
    return syntax;
  }

  public void setSyntax(String syntax) {
    this.syntax = syntax;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Proto2FileDescriptorProto proto2FileDescriptorProto = (Proto2FileDescriptorProto) o;
    return Objects.equals(this.editionDeprecated, proto2FileDescriptorProto.editionDeprecated) &&
        Objects.equals(this.enumType, proto2FileDescriptorProto.enumType) &&
        Objects.equals(this.messageType, proto2FileDescriptorProto.messageType) &&
        Objects.equals(this.name, proto2FileDescriptorProto.name) &&
        Objects.equals(this._package, proto2FileDescriptorProto._package) &&
        Objects.equals(this.syntax, proto2FileDescriptorProto.syntax);
  }

  @Override
  public int hashCode() {
    return Objects.hash(editionDeprecated, enumType, messageType, name, _package, syntax);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Proto2FileDescriptorProto {\n");
    sb.append("    editionDeprecated: ").append(toIndentedString(editionDeprecated)).append("\n");
    sb.append("    enumType: ").append(toIndentedString(enumType)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    _package: ").append(toIndentedString(_package)).append("\n");
    sb.append("    syntax: ").append(toIndentedString(syntax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("editionDeprecated");
    openapiFields.add("enumType");
    openapiFields.add("messageType");
    openapiFields.add("name");
    openapiFields.add("package");
    openapiFields.add("syntax");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Proto2FileDescriptorProto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Proto2FileDescriptorProto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Proto2FileDescriptorProto is not found in the empty JSON string", Proto2FileDescriptorProto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Proto2FileDescriptorProto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Proto2FileDescriptorProto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("editionDeprecated") != null && !jsonObj.get("editionDeprecated").isJsonNull()) && !jsonObj.get("editionDeprecated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editionDeprecated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editionDeprecated").toString()));
      }
      if (jsonObj.get("enumType") != null && !jsonObj.get("enumType").isJsonNull()) {
        JsonArray jsonArrayenumType = jsonObj.getAsJsonArray("enumType");
        if (jsonArrayenumType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enumType").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enumType` to be an array in the JSON string but got `%s`", jsonObj.get("enumType").toString()));
          }

          // validate the optional field `enumType` (array)
          for (int i = 0; i < jsonArrayenumType.size(); i++) {
            Proto2EnumDescriptorProto.validateJsonElement(jsonArrayenumType.get(i));
          };
        }
      }
      if (jsonObj.get("messageType") != null && !jsonObj.get("messageType").isJsonNull()) {
        JsonArray jsonArraymessageType = jsonObj.getAsJsonArray("messageType");
        if (jsonArraymessageType != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messageType").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messageType` to be an array in the JSON string but got `%s`", jsonObj.get("messageType").toString()));
          }

          // validate the optional field `messageType` (array)
          for (int i = 0; i < jsonArraymessageType.size(); i++) {
            Proto2DescriptorProto.validateJsonElement(jsonArraymessageType.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("package") != null && !jsonObj.get("package").isJsonNull()) && !jsonObj.get("package").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package").toString()));
      }
      if ((jsonObj.get("syntax") != null && !jsonObj.get("syntax").isJsonNull()) && !jsonObj.get("syntax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syntax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syntax").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Proto2FileDescriptorProto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Proto2FileDescriptorProto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Proto2FileDescriptorProto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Proto2FileDescriptorProto.class));

       return (TypeAdapter<T>) new TypeAdapter<Proto2FileDescriptorProto>() {
           @Override
           public void write(JsonWriter out, Proto2FileDescriptorProto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Proto2FileDescriptorProto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Proto2FileDescriptorProto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Proto2FileDescriptorProto
   * @throws IOException if the JSON string is invalid with respect to Proto2FileDescriptorProto
   */
  public static Proto2FileDescriptorProto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Proto2FileDescriptorProto.class);
  }

  /**
   * Convert an instance of Proto2FileDescriptorProto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

