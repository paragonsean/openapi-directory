/*
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleTypeDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Lifecycle information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:19.062447-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromePolicyVersionsV1PolicyApiLifecycle {
  public static final String SERIALIZED_NAME_DEPRECATED_IN_FAVOR_OF = "deprecatedInFavorOf";
  @SerializedName(SERIALIZED_NAME_DEPRECATED_IN_FAVOR_OF)
  private List<String> deprecatedInFavorOf = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_SUPPORT = "endSupport";
  @SerializedName(SERIALIZED_NAME_END_SUPPORT)
  private GoogleTypeDate endSupport;

  /**
   * Indicates current life cycle stage of the policy API.
   */
  @JsonAdapter(PolicyApiLifecycleStageEnum.Adapter.class)
  public enum PolicyApiLifecycleStageEnum {
    UNSPECIFIED("API_UNSPECIFIED"),
    
    PREVIEW("API_PREVIEW"),
    
    DEVELOPMENT("API_DEVELOPMENT"),
    
    CURRENT("API_CURRENT"),
    
    DEPRECATED("API_DEPRECATED");

    private String value;

    PolicyApiLifecycleStageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolicyApiLifecycleStageEnum fromValue(String value) {
      for (PolicyApiLifecycleStageEnum b : PolicyApiLifecycleStageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PolicyApiLifecycleStageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyApiLifecycleStageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolicyApiLifecycleStageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PolicyApiLifecycleStageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PolicyApiLifecycleStageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POLICY_API_LIFECYCLE_STAGE = "policyApiLifecycleStage";
  @SerializedName(SERIALIZED_NAME_POLICY_API_LIFECYCLE_STAGE)
  private PolicyApiLifecycleStageEnum policyApiLifecycleStage;

  public static final String SERIALIZED_NAME_SCHEDULED_TO_DEPRECATE_POLICIES = "scheduledToDeprecatePolicies";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TO_DEPRECATE_POLICIES)
  private List<String> scheduledToDeprecatePolicies = new ArrayList<>();

  public GoogleChromePolicyVersionsV1PolicyApiLifecycle() {
  }

  public GoogleChromePolicyVersionsV1PolicyApiLifecycle deprecatedInFavorOf(List<String> deprecatedInFavorOf) {
    this.deprecatedInFavorOf = deprecatedInFavorOf;
    return this;
  }

  public GoogleChromePolicyVersionsV1PolicyApiLifecycle addDeprecatedInFavorOfItem(String deprecatedInFavorOfItem) {
    if (this.deprecatedInFavorOf == null) {
      this.deprecatedInFavorOf = new ArrayList<>();
    }
    this.deprecatedInFavorOf.add(deprecatedInFavorOfItem);
    return this;
  }

  /**
   * In the event that this policy was deprecated in favor of another policy, the fully qualified namespace(s) of the new policies as they will show in PolicyAPI. Could only be set if policy_api_lifecycle_stage is API_DEPRECATED.
   * @return deprecatedInFavorOf
   */
  @javax.annotation.Nullable
  public List<String> getDeprecatedInFavorOf() {
    return deprecatedInFavorOf;
  }

  public void setDeprecatedInFavorOf(List<String> deprecatedInFavorOf) {
    this.deprecatedInFavorOf = deprecatedInFavorOf;
  }


  public GoogleChromePolicyVersionsV1PolicyApiLifecycle description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description about current life cycle.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleChromePolicyVersionsV1PolicyApiLifecycle endSupport(GoogleTypeDate endSupport) {
    this.endSupport = endSupport;
    return this;
  }

  /**
   * Get endSupport
   * @return endSupport
   */
  @javax.annotation.Nullable
  public GoogleTypeDate getEndSupport() {
    return endSupport;
  }

  public void setEndSupport(GoogleTypeDate endSupport) {
    this.endSupport = endSupport;
  }


  public GoogleChromePolicyVersionsV1PolicyApiLifecycle policyApiLifecycleStage(PolicyApiLifecycleStageEnum policyApiLifecycleStage) {
    this.policyApiLifecycleStage = policyApiLifecycleStage;
    return this;
  }

  /**
   * Indicates current life cycle stage of the policy API.
   * @return policyApiLifecycleStage
   */
  @javax.annotation.Nullable
  public PolicyApiLifecycleStageEnum getPolicyApiLifecycleStage() {
    return policyApiLifecycleStage;
  }

  public void setPolicyApiLifecycleStage(PolicyApiLifecycleStageEnum policyApiLifecycleStage) {
    this.policyApiLifecycleStage = policyApiLifecycleStage;
  }


  public GoogleChromePolicyVersionsV1PolicyApiLifecycle scheduledToDeprecatePolicies(List<String> scheduledToDeprecatePolicies) {
    this.scheduledToDeprecatePolicies = scheduledToDeprecatePolicies;
    return this;
  }

  public GoogleChromePolicyVersionsV1PolicyApiLifecycle addScheduledToDeprecatePoliciesItem(String scheduledToDeprecatePoliciesItem) {
    if (this.scheduledToDeprecatePolicies == null) {
      this.scheduledToDeprecatePolicies = new ArrayList<>();
    }
    this.scheduledToDeprecatePolicies.add(scheduledToDeprecatePoliciesItem);
    return this;
  }

  /**
   * Corresponding to deprecated_in_favor_of, the fully qualified namespace(s) of the old policies that will be deprecated because of introduction of this policy. This field should not be manually set but will be set and exposed through PolicyAPI automatically.
   * @return scheduledToDeprecatePolicies
   */
  @javax.annotation.Nullable
  public List<String> getScheduledToDeprecatePolicies() {
    return scheduledToDeprecatePolicies;
  }

  public void setScheduledToDeprecatePolicies(List<String> scheduledToDeprecatePolicies) {
    this.scheduledToDeprecatePolicies = scheduledToDeprecatePolicies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromePolicyVersionsV1PolicyApiLifecycle googleChromePolicyVersionsV1PolicyApiLifecycle = (GoogleChromePolicyVersionsV1PolicyApiLifecycle) o;
    return Objects.equals(this.deprecatedInFavorOf, googleChromePolicyVersionsV1PolicyApiLifecycle.deprecatedInFavorOf) &&
        Objects.equals(this.description, googleChromePolicyVersionsV1PolicyApiLifecycle.description) &&
        Objects.equals(this.endSupport, googleChromePolicyVersionsV1PolicyApiLifecycle.endSupport) &&
        Objects.equals(this.policyApiLifecycleStage, googleChromePolicyVersionsV1PolicyApiLifecycle.policyApiLifecycleStage) &&
        Objects.equals(this.scheduledToDeprecatePolicies, googleChromePolicyVersionsV1PolicyApiLifecycle.scheduledToDeprecatePolicies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deprecatedInFavorOf, description, endSupport, policyApiLifecycleStage, scheduledToDeprecatePolicies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromePolicyVersionsV1PolicyApiLifecycle {\n");
    sb.append("    deprecatedInFavorOf: ").append(toIndentedString(deprecatedInFavorOf)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endSupport: ").append(toIndentedString(endSupport)).append("\n");
    sb.append("    policyApiLifecycleStage: ").append(toIndentedString(policyApiLifecycleStage)).append("\n");
    sb.append("    scheduledToDeprecatePolicies: ").append(toIndentedString(scheduledToDeprecatePolicies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deprecatedInFavorOf");
    openapiFields.add("description");
    openapiFields.add("endSupport");
    openapiFields.add("policyApiLifecycleStage");
    openapiFields.add("scheduledToDeprecatePolicies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromePolicyVersionsV1PolicyApiLifecycle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromePolicyVersionsV1PolicyApiLifecycle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromePolicyVersionsV1PolicyApiLifecycle is not found in the empty JSON string", GoogleChromePolicyVersionsV1PolicyApiLifecycle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromePolicyVersionsV1PolicyApiLifecycle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromePolicyVersionsV1PolicyApiLifecycle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("deprecatedInFavorOf") != null && !jsonObj.get("deprecatedInFavorOf").isJsonNull() && !jsonObj.get("deprecatedInFavorOf").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deprecatedInFavorOf` to be an array in the JSON string but got `%s`", jsonObj.get("deprecatedInFavorOf").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `endSupport`
      if (jsonObj.get("endSupport") != null && !jsonObj.get("endSupport").isJsonNull()) {
        GoogleTypeDate.validateJsonElement(jsonObj.get("endSupport"));
      }
      if ((jsonObj.get("policyApiLifecycleStage") != null && !jsonObj.get("policyApiLifecycleStage").isJsonNull()) && !jsonObj.get("policyApiLifecycleStage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyApiLifecycleStage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyApiLifecycleStage").toString()));
      }
      // validate the optional field `policyApiLifecycleStage`
      if (jsonObj.get("policyApiLifecycleStage") != null && !jsonObj.get("policyApiLifecycleStage").isJsonNull()) {
        PolicyApiLifecycleStageEnum.validateJsonElement(jsonObj.get("policyApiLifecycleStage"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scheduledToDeprecatePolicies") != null && !jsonObj.get("scheduledToDeprecatePolicies").isJsonNull() && !jsonObj.get("scheduledToDeprecatePolicies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduledToDeprecatePolicies` to be an array in the JSON string but got `%s`", jsonObj.get("scheduledToDeprecatePolicies").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromePolicyVersionsV1PolicyApiLifecycle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromePolicyVersionsV1PolicyApiLifecycle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromePolicyVersionsV1PolicyApiLifecycle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromePolicyVersionsV1PolicyApiLifecycle.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromePolicyVersionsV1PolicyApiLifecycle>() {
           @Override
           public void write(JsonWriter out, GoogleChromePolicyVersionsV1PolicyApiLifecycle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromePolicyVersionsV1PolicyApiLifecycle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromePolicyVersionsV1PolicyApiLifecycle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromePolicyVersionsV1PolicyApiLifecycle
   * @throws IOException if the JSON string is invalid with respect to GoogleChromePolicyVersionsV1PolicyApiLifecycle
   */
  public static GoogleChromePolicyVersionsV1PolicyApiLifecycle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromePolicyVersionsV1PolicyApiLifecycle.class);
  }

  /**
   * Convert an instance of GoogleChromePolicyVersionsV1PolicyApiLifecycle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

