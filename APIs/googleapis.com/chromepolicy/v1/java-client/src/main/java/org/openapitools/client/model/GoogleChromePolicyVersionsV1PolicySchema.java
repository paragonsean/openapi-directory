/*
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1AdditionalTargetKeyName;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1PolicyApiLifecycle;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1PolicySchemaFieldDescription;
import org.openapitools.client.model.GoogleChromePolicyVersionsV1PolicySchemaNoticeDescription;
import org.openapitools.client.model.Proto2FileDescriptorProto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Resource representing a policy schema.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:19.062447-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromePolicyVersionsV1PolicySchema {
  public static final String SERIALIZED_NAME_ACCESS_RESTRICTIONS = "accessRestrictions";
  @SerializedName(SERIALIZED_NAME_ACCESS_RESTRICTIONS)
  private List<String> accessRestrictions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_TARGET_KEY_NAMES = "additionalTargetKeyNames";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_TARGET_KEY_NAMES)
  private List<GoogleChromePolicyVersionsV1AdditionalTargetKeyName> additionalTargetKeyNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_TITLE = "categoryTitle";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TITLE)
  private String categoryTitle;

  public static final String SERIALIZED_NAME_DEFINITION = "definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private Proto2FileDescriptorProto definition;

  public static final String SERIALIZED_NAME_FIELD_DESCRIPTIONS = "fieldDescriptions";
  @SerializedName(SERIALIZED_NAME_FIELD_DESCRIPTIONS)
  private List<GoogleChromePolicyVersionsV1PolicySchemaFieldDescription> fieldDescriptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTICES = "notices";
  @SerializedName(SERIALIZED_NAME_NOTICES)
  private List<GoogleChromePolicyVersionsV1PolicySchemaNoticeDescription> notices = new ArrayList<>();

  public static final String SERIALIZED_NAME_POLICY_API_LIFECYCLE = "policyApiLifecycle";
  @SerializedName(SERIALIZED_NAME_POLICY_API_LIFECYCLE)
  private GoogleChromePolicyVersionsV1PolicyApiLifecycle policyApiLifecycle;

  public static final String SERIALIZED_NAME_POLICY_DESCRIPTION = "policyDescription";
  @SerializedName(SERIALIZED_NAME_POLICY_DESCRIPTION)
  private String policyDescription;

  public static final String SERIALIZED_NAME_SCHEMA_NAME = "schemaName";
  @SerializedName(SERIALIZED_NAME_SCHEMA_NAME)
  private String schemaName;

  public static final String SERIALIZED_NAME_SUPPORT_URI = "supportUri";
  @SerializedName(SERIALIZED_NAME_SUPPORT_URI)
  private String supportUri;

  /**
   * Gets or Sets supportedPlatforms
   */
  @JsonAdapter(SupportedPlatformsEnum.Adapter.class)
  public enum SupportedPlatformsEnum {
    PLATFORM_UNSPECIFIED("PLATFORM_UNSPECIFIED"),
    
    CHROME_OS("CHROME_OS"),
    
    CHROME_BROWSER("CHROME_BROWSER"),
    
    CHROME_BROWSER_FOR_ANDROID("CHROME_BROWSER_FOR_ANDROID"),
    
    CHROME_BROWSER_FOR_IOS("CHROME_BROWSER_FOR_IOS");

    private String value;

    SupportedPlatformsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupportedPlatformsEnum fromValue(String value) {
      for (SupportedPlatformsEnum b : SupportedPlatformsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupportedPlatformsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportedPlatformsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportedPlatformsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SupportedPlatformsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SupportedPlatformsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUPPORTED_PLATFORMS = "supportedPlatforms";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_PLATFORMS)
  private List<SupportedPlatformsEnum> supportedPlatforms = new ArrayList<>();

  /**
   * Gets or Sets validTargetResources
   */
  @JsonAdapter(ValidTargetResourcesEnum.Adapter.class)
  public enum ValidTargetResourcesEnum {
    TARGET_RESOURCE_UNSPECIFIED("TARGET_RESOURCE_UNSPECIFIED"),
    
    ORG_UNIT("ORG_UNIT"),
    
    GROUP("GROUP");

    private String value;

    ValidTargetResourcesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValidTargetResourcesEnum fromValue(String value) {
      for (ValidTargetResourcesEnum b : ValidTargetResourcesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValidTargetResourcesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValidTargetResourcesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValidTargetResourcesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValidTargetResourcesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValidTargetResourcesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALID_TARGET_RESOURCES = "validTargetResources";
  @SerializedName(SERIALIZED_NAME_VALID_TARGET_RESOURCES)
  private List<ValidTargetResourcesEnum> validTargetResources = new ArrayList<>();

  public GoogleChromePolicyVersionsV1PolicySchema() {
  }

  public GoogleChromePolicyVersionsV1PolicySchema(
     List<String> accessRestrictions, 
     List<GoogleChromePolicyVersionsV1AdditionalTargetKeyName> additionalTargetKeyNames, 
     List<GoogleChromePolicyVersionsV1PolicySchemaFieldDescription> fieldDescriptions, 
     List<GoogleChromePolicyVersionsV1PolicySchemaNoticeDescription> notices, 
     String policyDescription, 
     String schemaName, 
     String supportUri, 
     List<SupportedPlatformsEnum> supportedPlatforms, 
     List<ValidTargetResourcesEnum> validTargetResources
  ) {
    this();
    this.accessRestrictions = accessRestrictions;
    this.additionalTargetKeyNames = additionalTargetKeyNames;
    this.fieldDescriptions = fieldDescriptions;
    this.notices = notices;
    this.policyDescription = policyDescription;
    this.schemaName = schemaName;
    this.supportUri = supportUri;
    this.supportedPlatforms = supportedPlatforms;
    this.validTargetResources = validTargetResources;
  }

  /**
   * Output only. Specific access restrictions related to this policy.
   * @return accessRestrictions
   */
  @javax.annotation.Nullable
  public List<String> getAccessRestrictions() {
    return accessRestrictions;
  }



  /**
   * Output only. Additional key names that will be used to identify the target of the policy value. When specifying a &#x60;policyTargetKey&#x60;, each of the additional keys specified here will have to be included in the &#x60;additionalTargetKeys&#x60; map.
   * @return additionalTargetKeyNames
   */
  @javax.annotation.Nullable
  public List<GoogleChromePolicyVersionsV1AdditionalTargetKeyName> getAdditionalTargetKeyNames() {
    return additionalTargetKeyNames;
  }



  public GoogleChromePolicyVersionsV1PolicySchema categoryTitle(String categoryTitle) {
    this.categoryTitle = categoryTitle;
    return this;
  }

  /**
   * Title of the category in which a setting belongs.
   * @return categoryTitle
   */
  @javax.annotation.Nullable
  public String getCategoryTitle() {
    return categoryTitle;
  }

  public void setCategoryTitle(String categoryTitle) {
    this.categoryTitle = categoryTitle;
  }


  public GoogleChromePolicyVersionsV1PolicySchema definition(Proto2FileDescriptorProto definition) {
    this.definition = definition;
    return this;
  }

  /**
   * Get definition
   * @return definition
   */
  @javax.annotation.Nullable
  public Proto2FileDescriptorProto getDefinition() {
    return definition;
  }

  public void setDefinition(Proto2FileDescriptorProto definition) {
    this.definition = definition;
  }


  /**
   * Output only. Detailed description of each field that is part of the schema. Fields are suggested to be displayed by the ordering in this list, not by field number.
   * @return fieldDescriptions
   */
  @javax.annotation.Nullable
  public List<GoogleChromePolicyVersionsV1PolicySchemaFieldDescription> getFieldDescriptions() {
    return fieldDescriptions;
  }



  public GoogleChromePolicyVersionsV1PolicySchema name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Format: name&#x3D;customers/{customer}/policySchemas/{schema_namespace}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. Special notice messages related to setting certain values in certain fields in the schema.
   * @return notices
   */
  @javax.annotation.Nullable
  public List<GoogleChromePolicyVersionsV1PolicySchemaNoticeDescription> getNotices() {
    return notices;
  }



  public GoogleChromePolicyVersionsV1PolicySchema policyApiLifecycle(GoogleChromePolicyVersionsV1PolicyApiLifecycle policyApiLifecycle) {
    this.policyApiLifecycle = policyApiLifecycle;
    return this;
  }

  /**
   * Get policyApiLifecycle
   * @return policyApiLifecycle
   */
  @javax.annotation.Nullable
  public GoogleChromePolicyVersionsV1PolicyApiLifecycle getPolicyApiLifecycle() {
    return policyApiLifecycle;
  }

  public void setPolicyApiLifecycle(GoogleChromePolicyVersionsV1PolicyApiLifecycle policyApiLifecycle) {
    this.policyApiLifecycle = policyApiLifecycle;
  }


  /**
   * Output only. Description about the policy schema for user consumption.
   * @return policyDescription
   */
  @javax.annotation.Nullable
  public String getPolicyDescription() {
    return policyDescription;
  }



  /**
   * Output only. The fully qualified name of the policy schema. This value is used to fill the field &#x60;policy_schema&#x60; in PolicyValue when calling BatchInheritOrgUnitPolicies BatchModifyOrgUnitPolicies BatchModifyGroupPolicies or BatchDeleteGroupPolicies.
   * @return schemaName
   */
  @javax.annotation.Nullable
  public String getSchemaName() {
    return schemaName;
  }



  /**
   * Output only. URI to related support article for this schema.
   * @return supportUri
   */
  @javax.annotation.Nullable
  public String getSupportUri() {
    return supportUri;
  }



  /**
   * Output only. List indicates that the policy will only apply to devices/users on these platforms.
   * @return supportedPlatforms
   */
  @javax.annotation.Nullable
  public List<SupportedPlatformsEnum> getSupportedPlatforms() {
    return supportedPlatforms;
  }



  /**
   * Output only. Information about applicable target resources for the policy.
   * @return validTargetResources
   */
  @javax.annotation.Nullable
  public List<ValidTargetResourcesEnum> getValidTargetResources() {
    return validTargetResources;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromePolicyVersionsV1PolicySchema googleChromePolicyVersionsV1PolicySchema = (GoogleChromePolicyVersionsV1PolicySchema) o;
    return Objects.equals(this.accessRestrictions, googleChromePolicyVersionsV1PolicySchema.accessRestrictions) &&
        Objects.equals(this.additionalTargetKeyNames, googleChromePolicyVersionsV1PolicySchema.additionalTargetKeyNames) &&
        Objects.equals(this.categoryTitle, googleChromePolicyVersionsV1PolicySchema.categoryTitle) &&
        Objects.equals(this.definition, googleChromePolicyVersionsV1PolicySchema.definition) &&
        Objects.equals(this.fieldDescriptions, googleChromePolicyVersionsV1PolicySchema.fieldDescriptions) &&
        Objects.equals(this.name, googleChromePolicyVersionsV1PolicySchema.name) &&
        Objects.equals(this.notices, googleChromePolicyVersionsV1PolicySchema.notices) &&
        Objects.equals(this.policyApiLifecycle, googleChromePolicyVersionsV1PolicySchema.policyApiLifecycle) &&
        Objects.equals(this.policyDescription, googleChromePolicyVersionsV1PolicySchema.policyDescription) &&
        Objects.equals(this.schemaName, googleChromePolicyVersionsV1PolicySchema.schemaName) &&
        Objects.equals(this.supportUri, googleChromePolicyVersionsV1PolicySchema.supportUri) &&
        Objects.equals(this.supportedPlatforms, googleChromePolicyVersionsV1PolicySchema.supportedPlatforms) &&
        Objects.equals(this.validTargetResources, googleChromePolicyVersionsV1PolicySchema.validTargetResources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessRestrictions, additionalTargetKeyNames, categoryTitle, definition, fieldDescriptions, name, notices, policyApiLifecycle, policyDescription, schemaName, supportUri, supportedPlatforms, validTargetResources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromePolicyVersionsV1PolicySchema {\n");
    sb.append("    accessRestrictions: ").append(toIndentedString(accessRestrictions)).append("\n");
    sb.append("    additionalTargetKeyNames: ").append(toIndentedString(additionalTargetKeyNames)).append("\n");
    sb.append("    categoryTitle: ").append(toIndentedString(categoryTitle)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    fieldDescriptions: ").append(toIndentedString(fieldDescriptions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notices: ").append(toIndentedString(notices)).append("\n");
    sb.append("    policyApiLifecycle: ").append(toIndentedString(policyApiLifecycle)).append("\n");
    sb.append("    policyDescription: ").append(toIndentedString(policyDescription)).append("\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("    supportUri: ").append(toIndentedString(supportUri)).append("\n");
    sb.append("    supportedPlatforms: ").append(toIndentedString(supportedPlatforms)).append("\n");
    sb.append("    validTargetResources: ").append(toIndentedString(validTargetResources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessRestrictions");
    openapiFields.add("additionalTargetKeyNames");
    openapiFields.add("categoryTitle");
    openapiFields.add("definition");
    openapiFields.add("fieldDescriptions");
    openapiFields.add("name");
    openapiFields.add("notices");
    openapiFields.add("policyApiLifecycle");
    openapiFields.add("policyDescription");
    openapiFields.add("schemaName");
    openapiFields.add("supportUri");
    openapiFields.add("supportedPlatforms");
    openapiFields.add("validTargetResources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromePolicyVersionsV1PolicySchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromePolicyVersionsV1PolicySchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromePolicyVersionsV1PolicySchema is not found in the empty JSON string", GoogleChromePolicyVersionsV1PolicySchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromePolicyVersionsV1PolicySchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromePolicyVersionsV1PolicySchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("accessRestrictions") != null && !jsonObj.get("accessRestrictions").isJsonNull() && !jsonObj.get("accessRestrictions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessRestrictions` to be an array in the JSON string but got `%s`", jsonObj.get("accessRestrictions").toString()));
      }
      if (jsonObj.get("additionalTargetKeyNames") != null && !jsonObj.get("additionalTargetKeyNames").isJsonNull()) {
        JsonArray jsonArrayadditionalTargetKeyNames = jsonObj.getAsJsonArray("additionalTargetKeyNames");
        if (jsonArrayadditionalTargetKeyNames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalTargetKeyNames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalTargetKeyNames` to be an array in the JSON string but got `%s`", jsonObj.get("additionalTargetKeyNames").toString()));
          }

          // validate the optional field `additionalTargetKeyNames` (array)
          for (int i = 0; i < jsonArrayadditionalTargetKeyNames.size(); i++) {
            GoogleChromePolicyVersionsV1AdditionalTargetKeyName.validateJsonElement(jsonArrayadditionalTargetKeyNames.get(i));
          };
        }
      }
      if ((jsonObj.get("categoryTitle") != null && !jsonObj.get("categoryTitle").isJsonNull()) && !jsonObj.get("categoryTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryTitle").toString()));
      }
      // validate the optional field `definition`
      if (jsonObj.get("definition") != null && !jsonObj.get("definition").isJsonNull()) {
        Proto2FileDescriptorProto.validateJsonElement(jsonObj.get("definition"));
      }
      if (jsonObj.get("fieldDescriptions") != null && !jsonObj.get("fieldDescriptions").isJsonNull()) {
        JsonArray jsonArrayfieldDescriptions = jsonObj.getAsJsonArray("fieldDescriptions");
        if (jsonArrayfieldDescriptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fieldDescriptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fieldDescriptions` to be an array in the JSON string but got `%s`", jsonObj.get("fieldDescriptions").toString()));
          }

          // validate the optional field `fieldDescriptions` (array)
          for (int i = 0; i < jsonArrayfieldDescriptions.size(); i++) {
            GoogleChromePolicyVersionsV1PolicySchemaFieldDescription.validateJsonElement(jsonArrayfieldDescriptions.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("notices") != null && !jsonObj.get("notices").isJsonNull()) {
        JsonArray jsonArraynotices = jsonObj.getAsJsonArray("notices");
        if (jsonArraynotices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notices` to be an array in the JSON string but got `%s`", jsonObj.get("notices").toString()));
          }

          // validate the optional field `notices` (array)
          for (int i = 0; i < jsonArraynotices.size(); i++) {
            GoogleChromePolicyVersionsV1PolicySchemaNoticeDescription.validateJsonElement(jsonArraynotices.get(i));
          };
        }
      }
      // validate the optional field `policyApiLifecycle`
      if (jsonObj.get("policyApiLifecycle") != null && !jsonObj.get("policyApiLifecycle").isJsonNull()) {
        GoogleChromePolicyVersionsV1PolicyApiLifecycle.validateJsonElement(jsonObj.get("policyApiLifecycle"));
      }
      if ((jsonObj.get("policyDescription") != null && !jsonObj.get("policyDescription").isJsonNull()) && !jsonObj.get("policyDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyDescription").toString()));
      }
      if ((jsonObj.get("schemaName") != null && !jsonObj.get("schemaName").isJsonNull()) && !jsonObj.get("schemaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaName").toString()));
      }
      if ((jsonObj.get("supportUri") != null && !jsonObj.get("supportUri").isJsonNull()) && !jsonObj.get("supportUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportUri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedPlatforms") != null && !jsonObj.get("supportedPlatforms").isJsonNull() && !jsonObj.get("supportedPlatforms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedPlatforms` to be an array in the JSON string but got `%s`", jsonObj.get("supportedPlatforms").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("validTargetResources") != null && !jsonObj.get("validTargetResources").isJsonNull() && !jsonObj.get("validTargetResources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validTargetResources` to be an array in the JSON string but got `%s`", jsonObj.get("validTargetResources").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromePolicyVersionsV1PolicySchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromePolicyVersionsV1PolicySchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromePolicyVersionsV1PolicySchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromePolicyVersionsV1PolicySchema.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromePolicyVersionsV1PolicySchema>() {
           @Override
           public void write(JsonWriter out, GoogleChromePolicyVersionsV1PolicySchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromePolicyVersionsV1PolicySchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromePolicyVersionsV1PolicySchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromePolicyVersionsV1PolicySchema
   * @throws IOException if the JSON string is invalid with respect to GoogleChromePolicyVersionsV1PolicySchema
   */
  public static GoogleChromePolicyVersionsV1PolicySchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromePolicyVersionsV1PolicySchema.class);
  }

  /**
   * Convert an instance of GoogleChromePolicyVersionsV1PolicySchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

