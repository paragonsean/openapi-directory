/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProto2FileDescriptorProto.h
 *
 * Describes a complete .proto file.
 */

#ifndef OAIProto2FileDescriptorProto_H
#define OAIProto2FileDescriptorProto_H

#include <QJsonObject>

#include "OAIProto2DescriptorProto.h"
#include "OAIProto2EnumDescriptorProto.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIProto2EnumDescriptorProto;
class OAIProto2DescriptorProto;

class OAIProto2FileDescriptorProto : public OAIObject {
public:
    OAIProto2FileDescriptorProto();
    OAIProto2FileDescriptorProto(QString json);
    ~OAIProto2FileDescriptorProto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    Q_DECL_DEPRECATED QString getEditionDeprecated() const;
    Q_DECL_DEPRECATED void setEditionDeprecated(const QString &edition_deprecated);
    Q_DECL_DEPRECATED bool is_edition_deprecated_Set() const;
    Q_DECL_DEPRECATED bool is_edition_deprecated_Valid() const;

    QList<OAIProto2EnumDescriptorProto> getEnumType() const;
    void setEnumType(const QList<OAIProto2EnumDescriptorProto> &enum_type);
    bool is_enum_type_Set() const;
    bool is_enum_type_Valid() const;

    QList<OAIProto2DescriptorProto> getMessageType() const;
    void setMessageType(const QList<OAIProto2DescriptorProto> &message_type);
    bool is_message_type_Set() const;
    bool is_message_type_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPackage() const;
    void setPackage(const QString &package);
    bool is_package_Set() const;
    bool is_package_Valid() const;

    QString getSyntax() const;
    void setSyntax(const QString &syntax);
    bool is_syntax_Set() const;
    bool is_syntax_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_edition_deprecated;
    bool m_edition_deprecated_isSet;
    bool m_edition_deprecated_isValid;

    QList<OAIProto2EnumDescriptorProto> m_enum_type;
    bool m_enum_type_isSet;
    bool m_enum_type_isValid;

    QList<OAIProto2DescriptorProto> m_message_type;
    bool m_message_type_isSet;
    bool m_message_type_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_package;
    bool m_package_isSet;
    bool m_package_isValid;

    QString m_syntax;
    bool m_syntax_isSet;
    bool m_syntax_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProto2FileDescriptorProto)

#endif // OAIProto2FileDescriptorProto_H
