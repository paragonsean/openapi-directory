/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromePolicyVersionsV1ResolvedPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromePolicyVersionsV1ResolvedPolicy::OAIGoogleChromePolicyVersionsV1ResolvedPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromePolicyVersionsV1ResolvedPolicy::OAIGoogleChromePolicyVersionsV1ResolvedPolicy() {
    this->initializeModel();
}

OAIGoogleChromePolicyVersionsV1ResolvedPolicy::~OAIGoogleChromePolicyVersionsV1ResolvedPolicy() {}

void OAIGoogleChromePolicyVersionsV1ResolvedPolicy::initializeModel() {

    m_added_source_key_isSet = false;
    m_added_source_key_isValid = false;

    m_source_key_isSet = false;
    m_source_key_isValid = false;

    m_target_key_isSet = false;
    m_target_key_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIGoogleChromePolicyVersionsV1ResolvedPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromePolicyVersionsV1ResolvedPolicy::fromJsonObject(QJsonObject json) {

    m_added_source_key_isValid = ::OpenAPI::fromJsonValue(m_added_source_key, json[QString("addedSourceKey")]);
    m_added_source_key_isSet = !json[QString("addedSourceKey")].isNull() && m_added_source_key_isValid;

    m_source_key_isValid = ::OpenAPI::fromJsonValue(m_source_key, json[QString("sourceKey")]);
    m_source_key_isSet = !json[QString("sourceKey")].isNull() && m_source_key_isValid;

    m_target_key_isValid = ::OpenAPI::fromJsonValue(m_target_key, json[QString("targetKey")]);
    m_target_key_isSet = !json[QString("targetKey")].isNull() && m_target_key_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIGoogleChromePolicyVersionsV1ResolvedPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromePolicyVersionsV1ResolvedPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_added_source_key.isSet()) {
        obj.insert(QString("addedSourceKey"), ::OpenAPI::toJsonValue(m_added_source_key));
    }
    if (m_source_key.isSet()) {
        obj.insert(QString("sourceKey"), ::OpenAPI::toJsonValue(m_source_key));
    }
    if (m_target_key.isSet()) {
        obj.insert(QString("targetKey"), ::OpenAPI::toJsonValue(m_target_key));
    }
    if (m_value.isSet()) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIGoogleChromePolicyVersionsV1PolicyTargetKey OAIGoogleChromePolicyVersionsV1ResolvedPolicy::getAddedSourceKey() const {
    return m_added_source_key;
}
void OAIGoogleChromePolicyVersionsV1ResolvedPolicy::setAddedSourceKey(const OAIGoogleChromePolicyVersionsV1PolicyTargetKey &added_source_key) {
    m_added_source_key = added_source_key;
    m_added_source_key_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1ResolvedPolicy::is_added_source_key_Set() const{
    return m_added_source_key_isSet;
}

bool OAIGoogleChromePolicyVersionsV1ResolvedPolicy::is_added_source_key_Valid() const{
    return m_added_source_key_isValid;
}

OAIGoogleChromePolicyVersionsV1PolicyTargetKey OAIGoogleChromePolicyVersionsV1ResolvedPolicy::getSourceKey() const {
    return m_source_key;
}
void OAIGoogleChromePolicyVersionsV1ResolvedPolicy::setSourceKey(const OAIGoogleChromePolicyVersionsV1PolicyTargetKey &source_key) {
    m_source_key = source_key;
    m_source_key_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1ResolvedPolicy::is_source_key_Set() const{
    return m_source_key_isSet;
}

bool OAIGoogleChromePolicyVersionsV1ResolvedPolicy::is_source_key_Valid() const{
    return m_source_key_isValid;
}

OAIGoogleChromePolicyVersionsV1PolicyTargetKey OAIGoogleChromePolicyVersionsV1ResolvedPolicy::getTargetKey() const {
    return m_target_key;
}
void OAIGoogleChromePolicyVersionsV1ResolvedPolicy::setTargetKey(const OAIGoogleChromePolicyVersionsV1PolicyTargetKey &target_key) {
    m_target_key = target_key;
    m_target_key_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1ResolvedPolicy::is_target_key_Set() const{
    return m_target_key_isSet;
}

bool OAIGoogleChromePolicyVersionsV1ResolvedPolicy::is_target_key_Valid() const{
    return m_target_key_isValid;
}

OAIGoogleChromePolicyVersionsV1PolicyValue OAIGoogleChromePolicyVersionsV1ResolvedPolicy::getValue() const {
    return m_value;
}
void OAIGoogleChromePolicyVersionsV1ResolvedPolicy::setValue(const OAIGoogleChromePolicyVersionsV1PolicyValue &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1ResolvedPolicy::is_value_Set() const{
    return m_value_isSet;
}

bool OAIGoogleChromePolicyVersionsV1ResolvedPolicy::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIGoogleChromePolicyVersionsV1ResolvedPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_source_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromePolicyVersionsV1ResolvedPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
