/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle() {
    this->initializeModel();
}

OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::~OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle() {}

void OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::initializeModel() {

    m_deprecated_in_favor_of_isSet = false;
    m_deprecated_in_favor_of_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_support_isSet = false;
    m_end_support_isValid = false;

    m_policy_api_lifecycle_stage_isSet = false;
    m_policy_api_lifecycle_stage_isValid = false;

    m_scheduled_to_deprecate_policies_isSet = false;
    m_scheduled_to_deprecate_policies_isValid = false;
}

void OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::fromJsonObject(QJsonObject json) {

    m_deprecated_in_favor_of_isValid = ::OpenAPI::fromJsonValue(m_deprecated_in_favor_of, json[QString("deprecatedInFavorOf")]);
    m_deprecated_in_favor_of_isSet = !json[QString("deprecatedInFavorOf")].isNull() && m_deprecated_in_favor_of_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_support_isValid = ::OpenAPI::fromJsonValue(m_end_support, json[QString("endSupport")]);
    m_end_support_isSet = !json[QString("endSupport")].isNull() && m_end_support_isValid;

    m_policy_api_lifecycle_stage_isValid = ::OpenAPI::fromJsonValue(m_policy_api_lifecycle_stage, json[QString("policyApiLifecycleStage")]);
    m_policy_api_lifecycle_stage_isSet = !json[QString("policyApiLifecycleStage")].isNull() && m_policy_api_lifecycle_stage_isValid;

    m_scheduled_to_deprecate_policies_isValid = ::OpenAPI::fromJsonValue(m_scheduled_to_deprecate_policies, json[QString("scheduledToDeprecatePolicies")]);
    m_scheduled_to_deprecate_policies_isSet = !json[QString("scheduledToDeprecatePolicies")].isNull() && m_scheduled_to_deprecate_policies_isValid;
}

QString OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::asJsonObject() const {
    QJsonObject obj;
    if (m_deprecated_in_favor_of.size() > 0) {
        obj.insert(QString("deprecatedInFavorOf"), ::OpenAPI::toJsonValue(m_deprecated_in_favor_of));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_support.isSet()) {
        obj.insert(QString("endSupport"), ::OpenAPI::toJsonValue(m_end_support));
    }
    if (m_policy_api_lifecycle_stage_isSet) {
        obj.insert(QString("policyApiLifecycleStage"), ::OpenAPI::toJsonValue(m_policy_api_lifecycle_stage));
    }
    if (m_scheduled_to_deprecate_policies.size() > 0) {
        obj.insert(QString("scheduledToDeprecatePolicies"), ::OpenAPI::toJsonValue(m_scheduled_to_deprecate_policies));
    }
    return obj;
}

QList<QString> OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::getDeprecatedInFavorOf() const {
    return m_deprecated_in_favor_of;
}
void OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::setDeprecatedInFavorOf(const QList<QString> &deprecated_in_favor_of) {
    m_deprecated_in_favor_of = deprecated_in_favor_of;
    m_deprecated_in_favor_of_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::is_deprecated_in_favor_of_Set() const{
    return m_deprecated_in_favor_of_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::is_deprecated_in_favor_of_Valid() const{
    return m_deprecated_in_favor_of_isValid;
}

QString OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::getDescription() const {
    return m_description;
}
void OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::is_description_Valid() const{
    return m_description_isValid;
}

OAIGoogleTypeDate OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::getEndSupport() const {
    return m_end_support;
}
void OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::setEndSupport(const OAIGoogleTypeDate &end_support) {
    m_end_support = end_support;
    m_end_support_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::is_end_support_Set() const{
    return m_end_support_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::is_end_support_Valid() const{
    return m_end_support_isValid;
}

QString OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::getPolicyApiLifecycleStage() const {
    return m_policy_api_lifecycle_stage;
}
void OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::setPolicyApiLifecycleStage(const QString &policy_api_lifecycle_stage) {
    m_policy_api_lifecycle_stage = policy_api_lifecycle_stage;
    m_policy_api_lifecycle_stage_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::is_policy_api_lifecycle_stage_Set() const{
    return m_policy_api_lifecycle_stage_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::is_policy_api_lifecycle_stage_Valid() const{
    return m_policy_api_lifecycle_stage_isValid;
}

QList<QString> OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::getScheduledToDeprecatePolicies() const {
    return m_scheduled_to_deprecate_policies;
}
void OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::setScheduledToDeprecatePolicies(const QList<QString> &scheduled_to_deprecate_policies) {
    m_scheduled_to_deprecate_policies = scheduled_to_deprecate_policies;
    m_scheduled_to_deprecate_policies_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::is_scheduled_to_deprecate_policies_Set() const{
    return m_scheduled_to_deprecate_policies_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::is_scheduled_to_deprecate_policies_Valid() const{
    return m_scheduled_to_deprecate_policies_isValid;
}

bool OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deprecated_in_favor_of.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_support.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_api_lifecycle_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_to_deprecate_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
