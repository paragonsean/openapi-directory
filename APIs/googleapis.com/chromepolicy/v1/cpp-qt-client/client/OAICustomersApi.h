/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomersApi_H
#define OAI_OAICustomersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleChromePolicyVersionsV1BatchDeleteGroupPoliciesRequest.h"
#include "OAIGoogleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest.h"
#include "OAIGoogleChromePolicyVersionsV1BatchModifyGroupPoliciesRequest.h"
#include "OAIGoogleChromePolicyVersionsV1BatchModifyOrgUnitPoliciesRequest.h"
#include "OAIGoogleChromePolicyVersionsV1DefineCertificateRequest.h"
#include "OAIGoogleChromePolicyVersionsV1DefineCertificateResponse.h"
#include "OAIGoogleChromePolicyVersionsV1DefineNetworkRequest.h"
#include "OAIGoogleChromePolicyVersionsV1DefineNetworkResponse.h"
#include "OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest.h"
#include "OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse.h"
#include "OAIGoogleChromePolicyVersionsV1ListPolicySchemasResponse.h"
#include "OAIGoogleChromePolicyVersionsV1PolicySchema.h"
#include "OAIGoogleChromePolicyVersionsV1RemoveCertificateRequest.h"
#include "OAIGoogleChromePolicyVersionsV1RemoveNetworkRequest.h"
#include "OAIGoogleChromePolicyVersionsV1ResolveRequest.h"
#include "OAIGoogleChromePolicyVersionsV1ResolveResponse.h"
#include "OAIGoogleChromePolicyVersionsV1UpdateGroupPriorityOrderingRequest.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomersApi : public QObject {
    Q_OBJECT

public:
    OAICustomersApi(const int timeOut = 0);
    ~OAICustomersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_chrome_policy_versions_v1_batch_delete_group_policies_request OAIGoogleChromePolicyVersionsV1BatchDeleteGroupPoliciesRequest [optional]
    */
    virtual void chromepolicy_customers_policies_groups_batchDelete(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1BatchDeleteGroupPoliciesRequest> &oai_google_chrome_policy_versions_v1_batch_delete_group_policies_request = ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1BatchDeleteGroupPoliciesRequest>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_chrome_policy_versions_v1_batch_modify_group_policies_request OAIGoogleChromePolicyVersionsV1BatchModifyGroupPoliciesRequest [optional]
    */
    virtual void chromepolicy_customers_policies_groups_batchModify(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1BatchModifyGroupPoliciesRequest> &oai_google_chrome_policy_versions_v1_batch_modify_group_policies_request = ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1BatchModifyGroupPoliciesRequest>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_chrome_policy_versions_v1_list_group_priority_ordering_request OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest [optional]
    */
    virtual void chromepolicy_customers_policies_groups_listGroupPriorityOrdering(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest> &oai_google_chrome_policy_versions_v1_list_group_priority_ordering_request = ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_chrome_policy_versions_v1_update_group_priority_ordering_request OAIGoogleChromePolicyVersionsV1UpdateGroupPriorityOrderingRequest [optional]
    */
    virtual void chromepolicy_customers_policies_groups_updateGroupPriorityOrdering(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1UpdateGroupPriorityOrderingRequest> &oai_google_chrome_policy_versions_v1_update_group_priority_ordering_request = ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1UpdateGroupPriorityOrderingRequest>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_chrome_policy_versions_v1_define_certificate_request OAIGoogleChromePolicyVersionsV1DefineCertificateRequest [optional]
    */
    virtual void chromepolicy_customers_policies_networks_defineCertificate(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1DefineCertificateRequest> &oai_google_chrome_policy_versions_v1_define_certificate_request = ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1DefineCertificateRequest>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_chrome_policy_versions_v1_define_network_request OAIGoogleChromePolicyVersionsV1DefineNetworkRequest [optional]
    */
    virtual void chromepolicy_customers_policies_networks_defineNetwork(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1DefineNetworkRequest> &oai_google_chrome_policy_versions_v1_define_network_request = ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1DefineNetworkRequest>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_chrome_policy_versions_v1_remove_certificate_request OAIGoogleChromePolicyVersionsV1RemoveCertificateRequest [optional]
    */
    virtual void chromepolicy_customers_policies_networks_removeCertificate(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1RemoveCertificateRequest> &oai_google_chrome_policy_versions_v1_remove_certificate_request = ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1RemoveCertificateRequest>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_chrome_policy_versions_v1_remove_network_request OAIGoogleChromePolicyVersionsV1RemoveNetworkRequest [optional]
    */
    virtual void chromepolicy_customers_policies_networks_removeNetwork(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1RemoveNetworkRequest> &oai_google_chrome_policy_versions_v1_remove_network_request = ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1RemoveNetworkRequest>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_chrome_policy_versions_v1_batch_inherit_org_unit_policies_request OAIGoogleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest [optional]
    */
    virtual void chromepolicy_customers_policies_orgunits_batchInherit(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest> &oai_google_chrome_policy_versions_v1_batch_inherit_org_unit_policies_request = ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_chrome_policy_versions_v1_batch_modify_org_unit_policies_request OAIGoogleChromePolicyVersionsV1BatchModifyOrgUnitPoliciesRequest [optional]
    */
    virtual void chromepolicy_customers_policies_orgunits_batchModify(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1BatchModifyOrgUnitPoliciesRequest> &oai_google_chrome_policy_versions_v1_batch_modify_org_unit_policies_request = ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1BatchModifyOrgUnitPoliciesRequest>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_chrome_policy_versions_v1_resolve_request OAIGoogleChromePolicyVersionsV1ResolveRequest [optional]
    */
    virtual void chromepolicy_customers_policies_resolve(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1ResolveRequest> &oai_google_chrome_policy_versions_v1_resolve_request = ::OpenAPI::OptionalParam<OAIGoogleChromePolicyVersionsV1ResolveRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void chromepolicy_customers_policySchemas_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void chromepolicy_customers_policySchemas_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void chromepolicy_customers_policies_groups_batchDeleteCallback(OAIHttpRequestWorker *worker);
    void chromepolicy_customers_policies_groups_batchModifyCallback(OAIHttpRequestWorker *worker);
    void chromepolicy_customers_policies_groups_listGroupPriorityOrderingCallback(OAIHttpRequestWorker *worker);
    void chromepolicy_customers_policies_groups_updateGroupPriorityOrderingCallback(OAIHttpRequestWorker *worker);
    void chromepolicy_customers_policies_networks_defineCertificateCallback(OAIHttpRequestWorker *worker);
    void chromepolicy_customers_policies_networks_defineNetworkCallback(OAIHttpRequestWorker *worker);
    void chromepolicy_customers_policies_networks_removeCertificateCallback(OAIHttpRequestWorker *worker);
    void chromepolicy_customers_policies_networks_removeNetworkCallback(OAIHttpRequestWorker *worker);
    void chromepolicy_customers_policies_orgunits_batchInheritCallback(OAIHttpRequestWorker *worker);
    void chromepolicy_customers_policies_orgunits_batchModifyCallback(OAIHttpRequestWorker *worker);
    void chromepolicy_customers_policies_resolveCallback(OAIHttpRequestWorker *worker);
    void chromepolicy_customers_policySchemas_getCallback(OAIHttpRequestWorker *worker);
    void chromepolicy_customers_policySchemas_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void chromepolicy_customers_policies_groups_batchDeleteSignal(OAIObject summary);
    void chromepolicy_customers_policies_groups_batchModifySignal(OAIObject summary);
    void chromepolicy_customers_policies_groups_listGroupPriorityOrderingSignal(OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse summary);
    void chromepolicy_customers_policies_groups_updateGroupPriorityOrderingSignal(OAIObject summary);
    void chromepolicy_customers_policies_networks_defineCertificateSignal(OAIGoogleChromePolicyVersionsV1DefineCertificateResponse summary);
    void chromepolicy_customers_policies_networks_defineNetworkSignal(OAIGoogleChromePolicyVersionsV1DefineNetworkResponse summary);
    void chromepolicy_customers_policies_networks_removeCertificateSignal(OAIObject summary);
    void chromepolicy_customers_policies_networks_removeNetworkSignal(OAIObject summary);
    void chromepolicy_customers_policies_orgunits_batchInheritSignal(OAIObject summary);
    void chromepolicy_customers_policies_orgunits_batchModifySignal(OAIObject summary);
    void chromepolicy_customers_policies_resolveSignal(OAIGoogleChromePolicyVersionsV1ResolveResponse summary);
    void chromepolicy_customers_policySchemas_getSignal(OAIGoogleChromePolicyVersionsV1PolicySchema summary);
    void chromepolicy_customers_policySchemas_listSignal(OAIGoogleChromePolicyVersionsV1ListPolicySchemasResponse summary);


    void chromepolicy_customers_policies_groups_batchDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void chromepolicy_customers_policies_groups_batchModifySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void chromepolicy_customers_policies_groups_listGroupPriorityOrderingSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse summary);
    void chromepolicy_customers_policies_groups_updateGroupPriorityOrderingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void chromepolicy_customers_policies_networks_defineCertificateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromePolicyVersionsV1DefineCertificateResponse summary);
    void chromepolicy_customers_policies_networks_defineNetworkSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromePolicyVersionsV1DefineNetworkResponse summary);
    void chromepolicy_customers_policies_networks_removeCertificateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void chromepolicy_customers_policies_networks_removeNetworkSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void chromepolicy_customers_policies_orgunits_batchInheritSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void chromepolicy_customers_policies_orgunits_batchModifySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void chromepolicy_customers_policies_resolveSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromePolicyVersionsV1ResolveResponse summary);
    void chromepolicy_customers_policySchemas_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromePolicyVersionsV1PolicySchema summary);
    void chromepolicy_customers_policySchemas_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromePolicyVersionsV1ListPolicySchemasResponse summary);

    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_groups_batchDeleteSignalError() instead")
    void chromepolicy_customers_policies_groups_batchDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_groups_batchDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_groups_batchModifySignalError() instead")
    void chromepolicy_customers_policies_groups_batchModifySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_groups_batchModifySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_groups_listGroupPriorityOrderingSignalError() instead")
    void chromepolicy_customers_policies_groups_listGroupPriorityOrderingSignalE(OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_groups_listGroupPriorityOrderingSignalError(OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_groups_updateGroupPriorityOrderingSignalError() instead")
    void chromepolicy_customers_policies_groups_updateGroupPriorityOrderingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_groups_updateGroupPriorityOrderingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_networks_defineCertificateSignalError() instead")
    void chromepolicy_customers_policies_networks_defineCertificateSignalE(OAIGoogleChromePolicyVersionsV1DefineCertificateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_networks_defineCertificateSignalError(OAIGoogleChromePolicyVersionsV1DefineCertificateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_networks_defineNetworkSignalError() instead")
    void chromepolicy_customers_policies_networks_defineNetworkSignalE(OAIGoogleChromePolicyVersionsV1DefineNetworkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_networks_defineNetworkSignalError(OAIGoogleChromePolicyVersionsV1DefineNetworkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_networks_removeCertificateSignalError() instead")
    void chromepolicy_customers_policies_networks_removeCertificateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_networks_removeCertificateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_networks_removeNetworkSignalError() instead")
    void chromepolicy_customers_policies_networks_removeNetworkSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_networks_removeNetworkSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_orgunits_batchInheritSignalError() instead")
    void chromepolicy_customers_policies_orgunits_batchInheritSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_orgunits_batchInheritSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_orgunits_batchModifySignalError() instead")
    void chromepolicy_customers_policies_orgunits_batchModifySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_orgunits_batchModifySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_resolveSignalError() instead")
    void chromepolicy_customers_policies_resolveSignalE(OAIGoogleChromePolicyVersionsV1ResolveResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_resolveSignalError(OAIGoogleChromePolicyVersionsV1ResolveResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policySchemas_getSignalError() instead")
    void chromepolicy_customers_policySchemas_getSignalE(OAIGoogleChromePolicyVersionsV1PolicySchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policySchemas_getSignalError(OAIGoogleChromePolicyVersionsV1PolicySchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policySchemas_listSignalError() instead")
    void chromepolicy_customers_policySchemas_listSignalE(OAIGoogleChromePolicyVersionsV1ListPolicySchemasResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policySchemas_listSignalError(OAIGoogleChromePolicyVersionsV1ListPolicySchemasResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_groups_batchDeleteSignalErrorFull() instead")
    void chromepolicy_customers_policies_groups_batchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_groups_batchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_groups_batchModifySignalErrorFull() instead")
    void chromepolicy_customers_policies_groups_batchModifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_groups_batchModifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_groups_listGroupPriorityOrderingSignalErrorFull() instead")
    void chromepolicy_customers_policies_groups_listGroupPriorityOrderingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_groups_listGroupPriorityOrderingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_groups_updateGroupPriorityOrderingSignalErrorFull() instead")
    void chromepolicy_customers_policies_groups_updateGroupPriorityOrderingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_groups_updateGroupPriorityOrderingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_networks_defineCertificateSignalErrorFull() instead")
    void chromepolicy_customers_policies_networks_defineCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_networks_defineCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_networks_defineNetworkSignalErrorFull() instead")
    void chromepolicy_customers_policies_networks_defineNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_networks_defineNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_networks_removeCertificateSignalErrorFull() instead")
    void chromepolicy_customers_policies_networks_removeCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_networks_removeCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_networks_removeNetworkSignalErrorFull() instead")
    void chromepolicy_customers_policies_networks_removeNetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_networks_removeNetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_orgunits_batchInheritSignalErrorFull() instead")
    void chromepolicy_customers_policies_orgunits_batchInheritSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_orgunits_batchInheritSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_orgunits_batchModifySignalErrorFull() instead")
    void chromepolicy_customers_policies_orgunits_batchModifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_orgunits_batchModifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policies_resolveSignalErrorFull() instead")
    void chromepolicy_customers_policies_resolveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policies_resolveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policySchemas_getSignalErrorFull() instead")
    void chromepolicy_customers_policySchemas_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policySchemas_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromepolicy_customers_policySchemas_listSignalErrorFull() instead")
    void chromepolicy_customers_policySchemas_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromepolicy_customers_policySchemas_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
