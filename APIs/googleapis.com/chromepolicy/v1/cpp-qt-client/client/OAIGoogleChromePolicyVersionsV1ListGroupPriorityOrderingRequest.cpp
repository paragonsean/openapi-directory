/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest() {
    this->initializeModel();
}

OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::~OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest() {}

void OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::initializeModel() {

    m_policy_namespace_isSet = false;
    m_policy_namespace_isValid = false;

    m_policy_schema_isSet = false;
    m_policy_schema_isValid = false;

    m_policy_target_key_isSet = false;
    m_policy_target_key_isValid = false;
}

void OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::fromJsonObject(QJsonObject json) {

    m_policy_namespace_isValid = ::OpenAPI::fromJsonValue(m_policy_namespace, json[QString("policyNamespace")]);
    m_policy_namespace_isSet = !json[QString("policyNamespace")].isNull() && m_policy_namespace_isValid;

    m_policy_schema_isValid = ::OpenAPI::fromJsonValue(m_policy_schema, json[QString("policySchema")]);
    m_policy_schema_isSet = !json[QString("policySchema")].isNull() && m_policy_schema_isValid;

    m_policy_target_key_isValid = ::OpenAPI::fromJsonValue(m_policy_target_key, json[QString("policyTargetKey")]);
    m_policy_target_key_isSet = !json[QString("policyTargetKey")].isNull() && m_policy_target_key_isValid;
}

QString OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_policy_namespace_isSet) {
        obj.insert(QString("policyNamespace"), ::OpenAPI::toJsonValue(m_policy_namespace));
    }
    if (m_policy_schema_isSet) {
        obj.insert(QString("policySchema"), ::OpenAPI::toJsonValue(m_policy_schema));
    }
    if (m_policy_target_key.isSet()) {
        obj.insert(QString("policyTargetKey"), ::OpenAPI::toJsonValue(m_policy_target_key));
    }
    return obj;
}

QString OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::getPolicyNamespace() const {
    return m_policy_namespace;
}
void OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::setPolicyNamespace(const QString &policy_namespace) {
    m_policy_namespace = policy_namespace;
    m_policy_namespace_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::is_policy_namespace_Set() const{
    return m_policy_namespace_isSet;
}

bool OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::is_policy_namespace_Valid() const{
    return m_policy_namespace_isValid;
}

QString OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::getPolicySchema() const {
    return m_policy_schema;
}
void OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::setPolicySchema(const QString &policy_schema) {
    m_policy_schema = policy_schema;
    m_policy_schema_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::is_policy_schema_Set() const{
    return m_policy_schema_isSet;
}

bool OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::is_policy_schema_Valid() const{
    return m_policy_schema_isValid;
}

OAIGoogleChromePolicyVersionsV1PolicyTargetKey OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::getPolicyTargetKey() const {
    return m_policy_target_key;
}
void OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::setPolicyTargetKey(const OAIGoogleChromePolicyVersionsV1PolicyTargetKey &policy_target_key) {
    m_policy_target_key = policy_target_key;
    m_policy_target_key_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::is_policy_target_key_Set() const{
    return m_policy_target_key_isSet;
}

bool OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::is_policy_target_key_Valid() const{
    return m_policy_target_key_isValid;
}

bool OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_target_key.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
