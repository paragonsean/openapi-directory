/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProto2FieldDescriptorProto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProto2FieldDescriptorProto::OAIProto2FieldDescriptorProto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProto2FieldDescriptorProto::OAIProto2FieldDescriptorProto() {
    this->initializeModel();
}

OAIProto2FieldDescriptorProto::~OAIProto2FieldDescriptorProto() {}

void OAIProto2FieldDescriptorProto::initializeModel() {

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_json_name_isSet = false;
    m_json_name_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_oneof_index_isSet = false;
    m_oneof_index_isValid = false;

    m_proto3_optional_isSet = false;
    m_proto3_optional_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;
}

void OAIProto2FieldDescriptorProto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProto2FieldDescriptorProto::fromJsonObject(QJsonObject json) {

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_json_name_isValid = ::OpenAPI::fromJsonValue(m_json_name, json[QString("jsonName")]);
    m_json_name_isSet = !json[QString("jsonName")].isNull() && m_json_name_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_oneof_index_isValid = ::OpenAPI::fromJsonValue(m_oneof_index, json[QString("oneofIndex")]);
    m_oneof_index_isSet = !json[QString("oneofIndex")].isNull() && m_oneof_index_isValid;

    m_proto3_optional_isValid = ::OpenAPI::fromJsonValue(m_proto3_optional, json[QString("proto3Optional")]);
    m_proto3_optional_isSet = !json[QString("proto3Optional")].isNull() && m_proto3_optional_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("typeName")]);
    m_type_name_isSet = !json[QString("typeName")].isNull() && m_type_name_isValid;
}

QString OAIProto2FieldDescriptorProto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProto2FieldDescriptorProto::asJsonObject() const {
    QJsonObject obj;
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_json_name_isSet) {
        obj.insert(QString("jsonName"), ::OpenAPI::toJsonValue(m_json_name));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_oneof_index_isSet) {
        obj.insert(QString("oneofIndex"), ::OpenAPI::toJsonValue(m_oneof_index));
    }
    if (m_proto3_optional_isSet) {
        obj.insert(QString("proto3Optional"), ::OpenAPI::toJsonValue(m_proto3_optional));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("typeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    return obj;
}

QString OAIProto2FieldDescriptorProto::getDefaultValue() const {
    return m_default_value;
}
void OAIProto2FieldDescriptorProto::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIProto2FieldDescriptorProto::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIProto2FieldDescriptorProto::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIProto2FieldDescriptorProto::getJsonName() const {
    return m_json_name;
}
void OAIProto2FieldDescriptorProto::setJsonName(const QString &json_name) {
    m_json_name = json_name;
    m_json_name_isSet = true;
}

bool OAIProto2FieldDescriptorProto::is_json_name_Set() const{
    return m_json_name_isSet;
}

bool OAIProto2FieldDescriptorProto::is_json_name_Valid() const{
    return m_json_name_isValid;
}

QString OAIProto2FieldDescriptorProto::getLabel() const {
    return m_label;
}
void OAIProto2FieldDescriptorProto::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIProto2FieldDescriptorProto::is_label_Set() const{
    return m_label_isSet;
}

bool OAIProto2FieldDescriptorProto::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIProto2FieldDescriptorProto::getName() const {
    return m_name;
}
void OAIProto2FieldDescriptorProto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProto2FieldDescriptorProto::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProto2FieldDescriptorProto::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIProto2FieldDescriptorProto::getNumber() const {
    return m_number;
}
void OAIProto2FieldDescriptorProto::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIProto2FieldDescriptorProto::is_number_Set() const{
    return m_number_isSet;
}

bool OAIProto2FieldDescriptorProto::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIProto2FieldDescriptorProto::getOneofIndex() const {
    return m_oneof_index;
}
void OAIProto2FieldDescriptorProto::setOneofIndex(const qint32 &oneof_index) {
    m_oneof_index = oneof_index;
    m_oneof_index_isSet = true;
}

bool OAIProto2FieldDescriptorProto::is_oneof_index_Set() const{
    return m_oneof_index_isSet;
}

bool OAIProto2FieldDescriptorProto::is_oneof_index_Valid() const{
    return m_oneof_index_isValid;
}

bool OAIProto2FieldDescriptorProto::isProto3Optional() const {
    return m_proto3_optional;
}
void OAIProto2FieldDescriptorProto::setProto3Optional(const bool &proto3_optional) {
    m_proto3_optional = proto3_optional;
    m_proto3_optional_isSet = true;
}

bool OAIProto2FieldDescriptorProto::is_proto3_optional_Set() const{
    return m_proto3_optional_isSet;
}

bool OAIProto2FieldDescriptorProto::is_proto3_optional_Valid() const{
    return m_proto3_optional_isValid;
}

QString OAIProto2FieldDescriptorProto::getType() const {
    return m_type;
}
void OAIProto2FieldDescriptorProto::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProto2FieldDescriptorProto::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProto2FieldDescriptorProto::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIProto2FieldDescriptorProto::getTypeName() const {
    return m_type_name;
}
void OAIProto2FieldDescriptorProto::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIProto2FieldDescriptorProto::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIProto2FieldDescriptorProto::is_type_name_Valid() const{
    return m_type_name_isValid;
}

bool OAIProto2FieldDescriptorProto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oneof_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proto3_optional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProto2FieldDescriptorProto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
