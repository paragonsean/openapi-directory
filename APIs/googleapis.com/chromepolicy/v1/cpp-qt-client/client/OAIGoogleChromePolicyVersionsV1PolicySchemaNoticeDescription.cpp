/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription() {
    this->initializeModel();
}

OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::~OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription() {}

void OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::initializeModel() {

    m_acknowledgement_required_isSet = false;
    m_acknowledgement_required_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;

    m_notice_message_isSet = false;
    m_notice_message_isValid = false;

    m_notice_value_isSet = false;
    m_notice_value_isValid = false;
}

void OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::fromJsonObject(QJsonObject json) {

    m_acknowledgement_required_isValid = ::OpenAPI::fromJsonValue(m_acknowledgement_required, json[QString("acknowledgementRequired")]);
    m_acknowledgement_required_isSet = !json[QString("acknowledgementRequired")].isNull() && m_acknowledgement_required_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_notice_message_isValid = ::OpenAPI::fromJsonValue(m_notice_message, json[QString("noticeMessage")]);
    m_notice_message_isSet = !json[QString("noticeMessage")].isNull() && m_notice_message_isValid;

    m_notice_value_isValid = ::OpenAPI::fromJsonValue(m_notice_value, json[QString("noticeValue")]);
    m_notice_value_isSet = !json[QString("noticeValue")].isNull() && m_notice_value_isValid;
}

QString OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_acknowledgement_required_isSet) {
        obj.insert(QString("acknowledgementRequired"), ::OpenAPI::toJsonValue(m_acknowledgement_required));
    }
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_notice_message_isSet) {
        obj.insert(QString("noticeMessage"), ::OpenAPI::toJsonValue(m_notice_message));
    }
    if (m_notice_value_isSet) {
        obj.insert(QString("noticeValue"), ::OpenAPI::toJsonValue(m_notice_value));
    }
    return obj;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::isAcknowledgementRequired() const {
    return m_acknowledgement_required;
}
void OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::setAcknowledgementRequired(const bool &acknowledgement_required) {
    m_acknowledgement_required = acknowledgement_required;
    m_acknowledgement_required_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::is_acknowledgement_required_Set() const{
    return m_acknowledgement_required_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::is_acknowledgement_required_Valid() const{
    return m_acknowledgement_required_isValid;
}

QString OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::getField() const {
    return m_field;
}
void OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::is_field_Set() const{
    return m_field_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::is_field_Valid() const{
    return m_field_isValid;
}

QString OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::getNoticeMessage() const {
    return m_notice_message;
}
void OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::setNoticeMessage(const QString &notice_message) {
    m_notice_message = notice_message;
    m_notice_message_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::is_notice_message_Set() const{
    return m_notice_message_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::is_notice_message_Valid() const{
    return m_notice_message_isValid;
}

QString OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::getNoticeValue() const {
    return m_notice_value;
}
void OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::setNoticeValue(const QString &notice_value) {
    m_notice_value = notice_value;
    m_notice_value_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::is_notice_value_Set() const{
    return m_notice_value_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::is_notice_value_Valid() const{
    return m_notice_value_isValid;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acknowledgement_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notice_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notice_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
