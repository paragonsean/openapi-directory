/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromePolicyVersionsV1UploadedFileConstraints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromePolicyVersionsV1UploadedFileConstraints::OAIGoogleChromePolicyVersionsV1UploadedFileConstraints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromePolicyVersionsV1UploadedFileConstraints::OAIGoogleChromePolicyVersionsV1UploadedFileConstraints() {
    this->initializeModel();
}

OAIGoogleChromePolicyVersionsV1UploadedFileConstraints::~OAIGoogleChromePolicyVersionsV1UploadedFileConstraints() {}

void OAIGoogleChromePolicyVersionsV1UploadedFileConstraints::initializeModel() {

    m_size_limit_bytes_isSet = false;
    m_size_limit_bytes_isValid = false;

    m_supported_content_types_isSet = false;
    m_supported_content_types_isValid = false;
}

void OAIGoogleChromePolicyVersionsV1UploadedFileConstraints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromePolicyVersionsV1UploadedFileConstraints::fromJsonObject(QJsonObject json) {

    m_size_limit_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_limit_bytes, json[QString("sizeLimitBytes")]);
    m_size_limit_bytes_isSet = !json[QString("sizeLimitBytes")].isNull() && m_size_limit_bytes_isValid;

    m_supported_content_types_isValid = ::OpenAPI::fromJsonValue(m_supported_content_types, json[QString("supportedContentTypes")]);
    m_supported_content_types_isSet = !json[QString("supportedContentTypes")].isNull() && m_supported_content_types_isValid;
}

QString OAIGoogleChromePolicyVersionsV1UploadedFileConstraints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromePolicyVersionsV1UploadedFileConstraints::asJsonObject() const {
    QJsonObject obj;
    if (m_size_limit_bytes_isSet) {
        obj.insert(QString("sizeLimitBytes"), ::OpenAPI::toJsonValue(m_size_limit_bytes));
    }
    if (m_supported_content_types.size() > 0) {
        obj.insert(QString("supportedContentTypes"), ::OpenAPI::toJsonValue(m_supported_content_types));
    }
    return obj;
}

QString OAIGoogleChromePolicyVersionsV1UploadedFileConstraints::getSizeLimitBytes() const {
    return m_size_limit_bytes;
}
void OAIGoogleChromePolicyVersionsV1UploadedFileConstraints::setSizeLimitBytes(const QString &size_limit_bytes) {
    m_size_limit_bytes = size_limit_bytes;
    m_size_limit_bytes_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1UploadedFileConstraints::is_size_limit_bytes_Set() const{
    return m_size_limit_bytes_isSet;
}

bool OAIGoogleChromePolicyVersionsV1UploadedFileConstraints::is_size_limit_bytes_Valid() const{
    return m_size_limit_bytes_isValid;
}

QList<QString> OAIGoogleChromePolicyVersionsV1UploadedFileConstraints::getSupportedContentTypes() const {
    return m_supported_content_types;
}
void OAIGoogleChromePolicyVersionsV1UploadedFileConstraints::setSupportedContentTypes(const QList<QString> &supported_content_types) {
    m_supported_content_types = supported_content_types;
    m_supported_content_types_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1UploadedFileConstraints::is_supported_content_types_Set() const{
    return m_supported_content_types_isSet;
}

bool OAIGoogleChromePolicyVersionsV1UploadedFileConstraints::is_supported_content_types_Valid() const{
    return m_supported_content_types_isValid;
}

bool OAIGoogleChromePolicyVersionsV1UploadedFileConstraints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_size_limit_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_content_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromePolicyVersionsV1UploadedFileConstraints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
