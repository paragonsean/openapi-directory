/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProto2DescriptorProto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProto2DescriptorProto::OAIProto2DescriptorProto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProto2DescriptorProto::OAIProto2DescriptorProto() {
    this->initializeModel();
}

OAIProto2DescriptorProto::~OAIProto2DescriptorProto() {}

void OAIProto2DescriptorProto::initializeModel() {

    m_enum_type_isSet = false;
    m_enum_type_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nested_type_isSet = false;
    m_nested_type_isValid = false;

    m_oneof_decl_isSet = false;
    m_oneof_decl_isValid = false;
}

void OAIProto2DescriptorProto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProto2DescriptorProto::fromJsonObject(QJsonObject json) {

    m_enum_type_isValid = ::OpenAPI::fromJsonValue(m_enum_type, json[QString("enumType")]);
    m_enum_type_isSet = !json[QString("enumType")].isNull() && m_enum_type_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nested_type_isValid = ::OpenAPI::fromJsonValue(m_nested_type, json[QString("nestedType")]);
    m_nested_type_isSet = !json[QString("nestedType")].isNull() && m_nested_type_isValid;

    m_oneof_decl_isValid = ::OpenAPI::fromJsonValue(m_oneof_decl, json[QString("oneofDecl")]);
    m_oneof_decl_isSet = !json[QString("oneofDecl")].isNull() && m_oneof_decl_isValid;
}

QString OAIProto2DescriptorProto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProto2DescriptorProto::asJsonObject() const {
    QJsonObject obj;
    if (m_enum_type.size() > 0) {
        obj.insert(QString("enumType"), ::OpenAPI::toJsonValue(m_enum_type));
    }
    if (m_field.size() > 0) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nested_type.size() > 0) {
        obj.insert(QString("nestedType"), ::OpenAPI::toJsonValue(m_nested_type));
    }
    if (m_oneof_decl.size() > 0) {
        obj.insert(QString("oneofDecl"), ::OpenAPI::toJsonValue(m_oneof_decl));
    }
    return obj;
}

QList<OAIProto2EnumDescriptorProto> OAIProto2DescriptorProto::getEnumType() const {
    return m_enum_type;
}
void OAIProto2DescriptorProto::setEnumType(const QList<OAIProto2EnumDescriptorProto> &enum_type) {
    m_enum_type = enum_type;
    m_enum_type_isSet = true;
}

bool OAIProto2DescriptorProto::is_enum_type_Set() const{
    return m_enum_type_isSet;
}

bool OAIProto2DescriptorProto::is_enum_type_Valid() const{
    return m_enum_type_isValid;
}

QList<OAIProto2FieldDescriptorProto> OAIProto2DescriptorProto::getField() const {
    return m_field;
}
void OAIProto2DescriptorProto::setField(const QList<OAIProto2FieldDescriptorProto> &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIProto2DescriptorProto::is_field_Set() const{
    return m_field_isSet;
}

bool OAIProto2DescriptorProto::is_field_Valid() const{
    return m_field_isValid;
}

QString OAIProto2DescriptorProto::getName() const {
    return m_name;
}
void OAIProto2DescriptorProto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProto2DescriptorProto::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProto2DescriptorProto::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIProto2DescriptorProto> OAIProto2DescriptorProto::getNestedType() const {
    return m_nested_type;
}
void OAIProto2DescriptorProto::setNestedType(const QList<OAIProto2DescriptorProto> &nested_type) {
    m_nested_type = nested_type;
    m_nested_type_isSet = true;
}

bool OAIProto2DescriptorProto::is_nested_type_Set() const{
    return m_nested_type_isSet;
}

bool OAIProto2DescriptorProto::is_nested_type_Valid() const{
    return m_nested_type_isValid;
}

QList<OAIProto2OneofDescriptorProto> OAIProto2DescriptorProto::getOneofDecl() const {
    return m_oneof_decl;
}
void OAIProto2DescriptorProto::setOneofDecl(const QList<OAIProto2OneofDescriptorProto> &oneof_decl) {
    m_oneof_decl = oneof_decl;
    m_oneof_decl_isSet = true;
}

bool OAIProto2DescriptorProto::is_oneof_decl_Set() const{
    return m_oneof_decl_isSet;
}

bool OAIProto2DescriptorProto::is_oneof_decl_Valid() const{
    return m_oneof_decl_isValid;
}

bool OAIProto2DescriptorProto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enum_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_field.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nested_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_oneof_decl.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProto2DescriptorProto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
