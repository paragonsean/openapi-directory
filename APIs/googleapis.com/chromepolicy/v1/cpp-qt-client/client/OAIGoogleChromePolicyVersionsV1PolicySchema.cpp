/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromePolicyVersionsV1PolicySchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromePolicyVersionsV1PolicySchema::OAIGoogleChromePolicyVersionsV1PolicySchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromePolicyVersionsV1PolicySchema::OAIGoogleChromePolicyVersionsV1PolicySchema() {
    this->initializeModel();
}

OAIGoogleChromePolicyVersionsV1PolicySchema::~OAIGoogleChromePolicyVersionsV1PolicySchema() {}

void OAIGoogleChromePolicyVersionsV1PolicySchema::initializeModel() {

    m_access_restrictions_isSet = false;
    m_access_restrictions_isValid = false;

    m_additional_target_key_names_isSet = false;
    m_additional_target_key_names_isValid = false;

    m_category_title_isSet = false;
    m_category_title_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_field_descriptions_isSet = false;
    m_field_descriptions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notices_isSet = false;
    m_notices_isValid = false;

    m_policy_api_lifecycle_isSet = false;
    m_policy_api_lifecycle_isValid = false;

    m_policy_description_isSet = false;
    m_policy_description_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_support_uri_isSet = false;
    m_support_uri_isValid = false;

    m_supported_platforms_isSet = false;
    m_supported_platforms_isValid = false;

    m_valid_target_resources_isSet = false;
    m_valid_target_resources_isValid = false;
}

void OAIGoogleChromePolicyVersionsV1PolicySchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromePolicyVersionsV1PolicySchema::fromJsonObject(QJsonObject json) {

    m_access_restrictions_isValid = ::OpenAPI::fromJsonValue(m_access_restrictions, json[QString("accessRestrictions")]);
    m_access_restrictions_isSet = !json[QString("accessRestrictions")].isNull() && m_access_restrictions_isValid;

    m_additional_target_key_names_isValid = ::OpenAPI::fromJsonValue(m_additional_target_key_names, json[QString("additionalTargetKeyNames")]);
    m_additional_target_key_names_isSet = !json[QString("additionalTargetKeyNames")].isNull() && m_additional_target_key_names_isValid;

    m_category_title_isValid = ::OpenAPI::fromJsonValue(m_category_title, json[QString("categoryTitle")]);
    m_category_title_isSet = !json[QString("categoryTitle")].isNull() && m_category_title_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_field_descriptions_isValid = ::OpenAPI::fromJsonValue(m_field_descriptions, json[QString("fieldDescriptions")]);
    m_field_descriptions_isSet = !json[QString("fieldDescriptions")].isNull() && m_field_descriptions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notices_isValid = ::OpenAPI::fromJsonValue(m_notices, json[QString("notices")]);
    m_notices_isSet = !json[QString("notices")].isNull() && m_notices_isValid;

    m_policy_api_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_policy_api_lifecycle, json[QString("policyApiLifecycle")]);
    m_policy_api_lifecycle_isSet = !json[QString("policyApiLifecycle")].isNull() && m_policy_api_lifecycle_isValid;

    m_policy_description_isValid = ::OpenAPI::fromJsonValue(m_policy_description, json[QString("policyDescription")]);
    m_policy_description_isSet = !json[QString("policyDescription")].isNull() && m_policy_description_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("schemaName")]);
    m_schema_name_isSet = !json[QString("schemaName")].isNull() && m_schema_name_isValid;

    m_support_uri_isValid = ::OpenAPI::fromJsonValue(m_support_uri, json[QString("supportUri")]);
    m_support_uri_isSet = !json[QString("supportUri")].isNull() && m_support_uri_isValid;

    m_supported_platforms_isValid = ::OpenAPI::fromJsonValue(m_supported_platforms, json[QString("supportedPlatforms")]);
    m_supported_platforms_isSet = !json[QString("supportedPlatforms")].isNull() && m_supported_platforms_isValid;

    m_valid_target_resources_isValid = ::OpenAPI::fromJsonValue(m_valid_target_resources, json[QString("validTargetResources")]);
    m_valid_target_resources_isSet = !json[QString("validTargetResources")].isNull() && m_valid_target_resources_isValid;
}

QString OAIGoogleChromePolicyVersionsV1PolicySchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromePolicyVersionsV1PolicySchema::asJsonObject() const {
    QJsonObject obj;
    if (m_access_restrictions.size() > 0) {
        obj.insert(QString("accessRestrictions"), ::OpenAPI::toJsonValue(m_access_restrictions));
    }
    if (m_additional_target_key_names.size() > 0) {
        obj.insert(QString("additionalTargetKeyNames"), ::OpenAPI::toJsonValue(m_additional_target_key_names));
    }
    if (m_category_title_isSet) {
        obj.insert(QString("categoryTitle"), ::OpenAPI::toJsonValue(m_category_title));
    }
    if (m_definition.isSet()) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_field_descriptions.size() > 0) {
        obj.insert(QString("fieldDescriptions"), ::OpenAPI::toJsonValue(m_field_descriptions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notices.size() > 0) {
        obj.insert(QString("notices"), ::OpenAPI::toJsonValue(m_notices));
    }
    if (m_policy_api_lifecycle.isSet()) {
        obj.insert(QString("policyApiLifecycle"), ::OpenAPI::toJsonValue(m_policy_api_lifecycle));
    }
    if (m_policy_description_isSet) {
        obj.insert(QString("policyDescription"), ::OpenAPI::toJsonValue(m_policy_description));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("schemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_support_uri_isSet) {
        obj.insert(QString("supportUri"), ::OpenAPI::toJsonValue(m_support_uri));
    }
    if (m_supported_platforms.size() > 0) {
        obj.insert(QString("supportedPlatforms"), ::OpenAPI::toJsonValue(m_supported_platforms));
    }
    if (m_valid_target_resources.size() > 0) {
        obj.insert(QString("validTargetResources"), ::OpenAPI::toJsonValue(m_valid_target_resources));
    }
    return obj;
}

QList<QString> OAIGoogleChromePolicyVersionsV1PolicySchema::getAccessRestrictions() const {
    return m_access_restrictions;
}
void OAIGoogleChromePolicyVersionsV1PolicySchema::setAccessRestrictions(const QList<QString> &access_restrictions) {
    m_access_restrictions = access_restrictions;
    m_access_restrictions_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_access_restrictions_Set() const{
    return m_access_restrictions_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_access_restrictions_Valid() const{
    return m_access_restrictions_isValid;
}

QList<OAIGoogleChromePolicyVersionsV1AdditionalTargetKeyName> OAIGoogleChromePolicyVersionsV1PolicySchema::getAdditionalTargetKeyNames() const {
    return m_additional_target_key_names;
}
void OAIGoogleChromePolicyVersionsV1PolicySchema::setAdditionalTargetKeyNames(const QList<OAIGoogleChromePolicyVersionsV1AdditionalTargetKeyName> &additional_target_key_names) {
    m_additional_target_key_names = additional_target_key_names;
    m_additional_target_key_names_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_additional_target_key_names_Set() const{
    return m_additional_target_key_names_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_additional_target_key_names_Valid() const{
    return m_additional_target_key_names_isValid;
}

QString OAIGoogleChromePolicyVersionsV1PolicySchema::getCategoryTitle() const {
    return m_category_title;
}
void OAIGoogleChromePolicyVersionsV1PolicySchema::setCategoryTitle(const QString &category_title) {
    m_category_title = category_title;
    m_category_title_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_category_title_Set() const{
    return m_category_title_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_category_title_Valid() const{
    return m_category_title_isValid;
}

OAIProto2FileDescriptorProto OAIGoogleChromePolicyVersionsV1PolicySchema::getDefinition() const {
    return m_definition;
}
void OAIGoogleChromePolicyVersionsV1PolicySchema::setDefinition(const OAIProto2FileDescriptorProto &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_definition_Valid() const{
    return m_definition_isValid;
}

QList<OAIGoogleChromePolicyVersionsV1PolicySchemaFieldDescription> OAIGoogleChromePolicyVersionsV1PolicySchema::getFieldDescriptions() const {
    return m_field_descriptions;
}
void OAIGoogleChromePolicyVersionsV1PolicySchema::setFieldDescriptions(const QList<OAIGoogleChromePolicyVersionsV1PolicySchemaFieldDescription> &field_descriptions) {
    m_field_descriptions = field_descriptions;
    m_field_descriptions_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_field_descriptions_Set() const{
    return m_field_descriptions_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_field_descriptions_Valid() const{
    return m_field_descriptions_isValid;
}

QString OAIGoogleChromePolicyVersionsV1PolicySchema::getName() const {
    return m_name;
}
void OAIGoogleChromePolicyVersionsV1PolicySchema::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription> OAIGoogleChromePolicyVersionsV1PolicySchema::getNotices() const {
    return m_notices;
}
void OAIGoogleChromePolicyVersionsV1PolicySchema::setNotices(const QList<OAIGoogleChromePolicyVersionsV1PolicySchemaNoticeDescription> &notices) {
    m_notices = notices;
    m_notices_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_notices_Set() const{
    return m_notices_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_notices_Valid() const{
    return m_notices_isValid;
}

OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle OAIGoogleChromePolicyVersionsV1PolicySchema::getPolicyApiLifecycle() const {
    return m_policy_api_lifecycle;
}
void OAIGoogleChromePolicyVersionsV1PolicySchema::setPolicyApiLifecycle(const OAIGoogleChromePolicyVersionsV1PolicyApiLifecycle &policy_api_lifecycle) {
    m_policy_api_lifecycle = policy_api_lifecycle;
    m_policy_api_lifecycle_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_policy_api_lifecycle_Set() const{
    return m_policy_api_lifecycle_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_policy_api_lifecycle_Valid() const{
    return m_policy_api_lifecycle_isValid;
}

QString OAIGoogleChromePolicyVersionsV1PolicySchema::getPolicyDescription() const {
    return m_policy_description;
}
void OAIGoogleChromePolicyVersionsV1PolicySchema::setPolicyDescription(const QString &policy_description) {
    m_policy_description = policy_description;
    m_policy_description_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_policy_description_Set() const{
    return m_policy_description_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_policy_description_Valid() const{
    return m_policy_description_isValid;
}

QString OAIGoogleChromePolicyVersionsV1PolicySchema::getSchemaName() const {
    return m_schema_name;
}
void OAIGoogleChromePolicyVersionsV1PolicySchema::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

QString OAIGoogleChromePolicyVersionsV1PolicySchema::getSupportUri() const {
    return m_support_uri;
}
void OAIGoogleChromePolicyVersionsV1PolicySchema::setSupportUri(const QString &support_uri) {
    m_support_uri = support_uri;
    m_support_uri_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_support_uri_Set() const{
    return m_support_uri_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_support_uri_Valid() const{
    return m_support_uri_isValid;
}

QList<QString> OAIGoogleChromePolicyVersionsV1PolicySchema::getSupportedPlatforms() const {
    return m_supported_platforms;
}
void OAIGoogleChromePolicyVersionsV1PolicySchema::setSupportedPlatforms(const QList<QString> &supported_platforms) {
    m_supported_platforms = supported_platforms;
    m_supported_platforms_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_supported_platforms_Set() const{
    return m_supported_platforms_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_supported_platforms_Valid() const{
    return m_supported_platforms_isValid;
}

QList<QString> OAIGoogleChromePolicyVersionsV1PolicySchema::getValidTargetResources() const {
    return m_valid_target_resources;
}
void OAIGoogleChromePolicyVersionsV1PolicySchema::setValidTargetResources(const QList<QString> &valid_target_resources) {
    m_valid_target_resources = valid_target_resources;
    m_valid_target_resources_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_valid_target_resources_Set() const{
    return m_valid_target_resources_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::is_valid_target_resources_Valid() const{
    return m_valid_target_resources_isValid;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_target_key_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_descriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_api_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_platforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_target_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
