/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromePolicyVersionsV1RemoveCertificateErrorDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromePolicyVersionsV1RemoveCertificateErrorDetails::OAIGoogleChromePolicyVersionsV1RemoveCertificateErrorDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromePolicyVersionsV1RemoveCertificateErrorDetails::OAIGoogleChromePolicyVersionsV1RemoveCertificateErrorDetails() {
    this->initializeModel();
}

OAIGoogleChromePolicyVersionsV1RemoveCertificateErrorDetails::~OAIGoogleChromePolicyVersionsV1RemoveCertificateErrorDetails() {}

void OAIGoogleChromePolicyVersionsV1RemoveCertificateErrorDetails::initializeModel() {

    m_certificate_references_isSet = false;
    m_certificate_references_isValid = false;
}

void OAIGoogleChromePolicyVersionsV1RemoveCertificateErrorDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromePolicyVersionsV1RemoveCertificateErrorDetails::fromJsonObject(QJsonObject json) {

    m_certificate_references_isValid = ::OpenAPI::fromJsonValue(m_certificate_references, json[QString("certificateReferences")]);
    m_certificate_references_isSet = !json[QString("certificateReferences")].isNull() && m_certificate_references_isValid;
}

QString OAIGoogleChromePolicyVersionsV1RemoveCertificateErrorDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromePolicyVersionsV1RemoveCertificateErrorDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_references.size() > 0) {
        obj.insert(QString("certificateReferences"), ::OpenAPI::toJsonValue(m_certificate_references));
    }
    return obj;
}

QList<OAIGoogleChromePolicyVersionsV1CertificateReference> OAIGoogleChromePolicyVersionsV1RemoveCertificateErrorDetails::getCertificateReferences() const {
    return m_certificate_references;
}
void OAIGoogleChromePolicyVersionsV1RemoveCertificateErrorDetails::setCertificateReferences(const QList<OAIGoogleChromePolicyVersionsV1CertificateReference> &certificate_references) {
    m_certificate_references = certificate_references;
    m_certificate_references_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1RemoveCertificateErrorDetails::is_certificate_references_Set() const{
    return m_certificate_references_isSet;
}

bool OAIGoogleChromePolicyVersionsV1RemoveCertificateErrorDetails::is_certificate_references_Valid() const{
    return m_certificate_references_isValid;
}

bool OAIGoogleChromePolicyVersionsV1RemoveCertificateErrorDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromePolicyVersionsV1RemoveCertificateErrorDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
