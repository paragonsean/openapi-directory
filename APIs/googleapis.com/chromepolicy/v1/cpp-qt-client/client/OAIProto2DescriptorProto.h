/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProto2DescriptorProto.h
 *
 * Describes a message type.
 */

#ifndef OAIProto2DescriptorProto_H
#define OAIProto2DescriptorProto_H

#include <QJsonObject>

#include "OAIProto2EnumDescriptorProto.h"
#include "OAIProto2FieldDescriptorProto.h"
#include "OAIProto2OneofDescriptorProto.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIProto2EnumDescriptorProto;
class OAIProto2FieldDescriptorProto;
class OAIProto2OneofDescriptorProto;

class OAIProto2DescriptorProto : public OAIObject {
public:
    OAIProto2DescriptorProto();
    OAIProto2DescriptorProto(QString json);
    ~OAIProto2DescriptorProto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIProto2EnumDescriptorProto> getEnumType() const;
    void setEnumType(const QList<OAIProto2EnumDescriptorProto> &enum_type);
    bool is_enum_type_Set() const;
    bool is_enum_type_Valid() const;

    QList<OAIProto2FieldDescriptorProto> getField() const;
    void setField(const QList<OAIProto2FieldDescriptorProto> &field);
    bool is_field_Set() const;
    bool is_field_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIProto2DescriptorProto> getNestedType() const;
    void setNestedType(const QList<OAIProto2DescriptorProto> &nested_type);
    bool is_nested_type_Set() const;
    bool is_nested_type_Valid() const;

    QList<OAIProto2OneofDescriptorProto> getOneofDecl() const;
    void setOneofDecl(const QList<OAIProto2OneofDescriptorProto> &oneof_decl);
    bool is_oneof_decl_Set() const;
    bool is_oneof_decl_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIProto2EnumDescriptorProto> m_enum_type;
    bool m_enum_type_isSet;
    bool m_enum_type_isValid;

    QList<OAIProto2FieldDescriptorProto> m_field;
    bool m_field_isSet;
    bool m_field_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIProto2DescriptorProto> m_nested_type;
    bool m_nested_type_isSet;
    bool m_nested_type_isValid;

    QList<OAIProto2OneofDescriptorProto> m_oneof_decl;
    bool m_oneof_decl_isSet;
    bool m_oneof_decl_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProto2DescriptorProto)

#endif // OAIProto2DescriptorProto_H
