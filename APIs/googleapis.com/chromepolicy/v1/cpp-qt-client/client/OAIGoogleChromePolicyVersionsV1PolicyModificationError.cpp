/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromePolicyVersionsV1PolicyModificationError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromePolicyVersionsV1PolicyModificationError::OAIGoogleChromePolicyVersionsV1PolicyModificationError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromePolicyVersionsV1PolicyModificationError::OAIGoogleChromePolicyVersionsV1PolicyModificationError() {
    this->initializeModel();
}

OAIGoogleChromePolicyVersionsV1PolicyModificationError::~OAIGoogleChromePolicyVersionsV1PolicyModificationError() {}

void OAIGoogleChromePolicyVersionsV1PolicyModificationError::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_field_errors_isSet = false;
    m_field_errors_isValid = false;

    m_policy_schema_isSet = false;
    m_policy_schema_isValid = false;

    m_policy_target_key_isSet = false;
    m_policy_target_key_isValid = false;
}

void OAIGoogleChromePolicyVersionsV1PolicyModificationError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromePolicyVersionsV1PolicyModificationError::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_field_errors_isValid = ::OpenAPI::fromJsonValue(m_field_errors, json[QString("fieldErrors")]);
    m_field_errors_isSet = !json[QString("fieldErrors")].isNull() && m_field_errors_isValid;

    m_policy_schema_isValid = ::OpenAPI::fromJsonValue(m_policy_schema, json[QString("policySchema")]);
    m_policy_schema_isSet = !json[QString("policySchema")].isNull() && m_policy_schema_isValid;

    m_policy_target_key_isValid = ::OpenAPI::fromJsonValue(m_policy_target_key, json[QString("policyTargetKey")]);
    m_policy_target_key_isSet = !json[QString("policyTargetKey")].isNull() && m_policy_target_key_isValid;
}

QString OAIGoogleChromePolicyVersionsV1PolicyModificationError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromePolicyVersionsV1PolicyModificationError::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_field_errors.size() > 0) {
        obj.insert(QString("fieldErrors"), ::OpenAPI::toJsonValue(m_field_errors));
    }
    if (m_policy_schema_isSet) {
        obj.insert(QString("policySchema"), ::OpenAPI::toJsonValue(m_policy_schema));
    }
    if (m_policy_target_key.isSet()) {
        obj.insert(QString("policyTargetKey"), ::OpenAPI::toJsonValue(m_policy_target_key));
    }
    return obj;
}

QList<QString> OAIGoogleChromePolicyVersionsV1PolicyModificationError::getErrors() const {
    return m_errors;
}
void OAIGoogleChromePolicyVersionsV1PolicyModificationError::setErrors(const QList<QString> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicyModificationError::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicyModificationError::is_errors_Valid() const{
    return m_errors_isValid;
}

QList<OAIGoogleChromePolicyVersionsV1PolicyModificationFieldError> OAIGoogleChromePolicyVersionsV1PolicyModificationError::getFieldErrors() const {
    return m_field_errors;
}
void OAIGoogleChromePolicyVersionsV1PolicyModificationError::setFieldErrors(const QList<OAIGoogleChromePolicyVersionsV1PolicyModificationFieldError> &field_errors) {
    m_field_errors = field_errors;
    m_field_errors_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicyModificationError::is_field_errors_Set() const{
    return m_field_errors_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicyModificationError::is_field_errors_Valid() const{
    return m_field_errors_isValid;
}

QString OAIGoogleChromePolicyVersionsV1PolicyModificationError::getPolicySchema() const {
    return m_policy_schema;
}
void OAIGoogleChromePolicyVersionsV1PolicyModificationError::setPolicySchema(const QString &policy_schema) {
    m_policy_schema = policy_schema;
    m_policy_schema_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicyModificationError::is_policy_schema_Set() const{
    return m_policy_schema_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicyModificationError::is_policy_schema_Valid() const{
    return m_policy_schema_isValid;
}

OAIGoogleChromePolicyVersionsV1PolicyTargetKey OAIGoogleChromePolicyVersionsV1PolicyModificationError::getPolicyTargetKey() const {
    return m_policy_target_key;
}
void OAIGoogleChromePolicyVersionsV1PolicyModificationError::setPolicyTargetKey(const OAIGoogleChromePolicyVersionsV1PolicyTargetKey &policy_target_key) {
    m_policy_target_key = policy_target_key;
    m_policy_target_key_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicyModificationError::is_policy_target_key_Set() const{
    return m_policy_target_key_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicyModificationError::is_policy_target_key_Valid() const{
    return m_policy_target_key_isValid;
}

bool OAIGoogleChromePolicyVersionsV1PolicyModificationError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_target_key.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromePolicyVersionsV1PolicyModificationError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
