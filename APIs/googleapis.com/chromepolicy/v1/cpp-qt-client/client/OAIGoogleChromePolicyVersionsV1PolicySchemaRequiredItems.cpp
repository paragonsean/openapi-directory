/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems::OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems::OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems() {
    this->initializeModel();
}

OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems::~OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems() {}

void OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems::initializeModel() {

    m_field_conditions_isSet = false;
    m_field_conditions_isValid = false;

    m_required_fields_isSet = false;
    m_required_fields_isValid = false;
}

void OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems::fromJsonObject(QJsonObject json) {

    m_field_conditions_isValid = ::OpenAPI::fromJsonValue(m_field_conditions, json[QString("fieldConditions")]);
    m_field_conditions_isSet = !json[QString("fieldConditions")].isNull() && m_field_conditions_isValid;

    m_required_fields_isValid = ::OpenAPI::fromJsonValue(m_required_fields, json[QString("requiredFields")]);
    m_required_fields_isSet = !json[QString("requiredFields")].isNull() && m_required_fields_isValid;
}

QString OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems::asJsonObject() const {
    QJsonObject obj;
    if (m_field_conditions.size() > 0) {
        obj.insert(QString("fieldConditions"), ::OpenAPI::toJsonValue(m_field_conditions));
    }
    if (m_required_fields.size() > 0) {
        obj.insert(QString("requiredFields"), ::OpenAPI::toJsonValue(m_required_fields));
    }
    return obj;
}

QList<QString> OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems::getFieldConditions() const {
    return m_field_conditions;
}
void OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems::setFieldConditions(const QList<QString> &field_conditions) {
    m_field_conditions = field_conditions;
    m_field_conditions_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems::is_field_conditions_Set() const{
    return m_field_conditions_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems::is_field_conditions_Valid() const{
    return m_field_conditions_isValid;
}

QList<QString> OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems::getRequiredFields() const {
    return m_required_fields;
}
void OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems::setRequiredFields(const QList<QString> &required_fields) {
    m_required_fields = required_fields;
    m_required_fields_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems::is_required_fields_Set() const{
    return m_required_fields_isSet;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems::is_required_fields_Valid() const{
    return m_required_fields_isValid;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromePolicyVersionsV1PolicySchemaRequiredItems::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
