/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProto2FileDescriptorProto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProto2FileDescriptorProto::OAIProto2FileDescriptorProto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProto2FileDescriptorProto::OAIProto2FileDescriptorProto() {
    this->initializeModel();
}

OAIProto2FileDescriptorProto::~OAIProto2FileDescriptorProto() {}

void OAIProto2FileDescriptorProto::initializeModel() {

    m_edition_deprecated_isSet = false;
    m_edition_deprecated_isValid = false;

    m_enum_type_isSet = false;
    m_enum_type_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_package_isSet = false;
    m_package_isValid = false;

    m_syntax_isSet = false;
    m_syntax_isValid = false;
}

void OAIProto2FileDescriptorProto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProto2FileDescriptorProto::fromJsonObject(QJsonObject json) {

    m_edition_deprecated_isValid = ::OpenAPI::fromJsonValue(m_edition_deprecated, json[QString("editionDeprecated")]);
    m_edition_deprecated_isSet = !json[QString("editionDeprecated")].isNull() && m_edition_deprecated_isValid;

    m_enum_type_isValid = ::OpenAPI::fromJsonValue(m_enum_type, json[QString("enumType")]);
    m_enum_type_isSet = !json[QString("enumType")].isNull() && m_enum_type_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("messageType")]);
    m_message_type_isSet = !json[QString("messageType")].isNull() && m_message_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_package_isValid = ::OpenAPI::fromJsonValue(m_package, json[QString("package")]);
    m_package_isSet = !json[QString("package")].isNull() && m_package_isValid;

    m_syntax_isValid = ::OpenAPI::fromJsonValue(m_syntax, json[QString("syntax")]);
    m_syntax_isSet = !json[QString("syntax")].isNull() && m_syntax_isValid;
}

QString OAIProto2FileDescriptorProto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProto2FileDescriptorProto::asJsonObject() const {
    QJsonObject obj;
    if (m_edition_deprecated_isSet) {
        obj.insert(QString("editionDeprecated"), ::OpenAPI::toJsonValue(m_edition_deprecated));
    }
    if (m_enum_type.size() > 0) {
        obj.insert(QString("enumType"), ::OpenAPI::toJsonValue(m_enum_type));
    }
    if (m_message_type.size() > 0) {
        obj.insert(QString("messageType"), ::OpenAPI::toJsonValue(m_message_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_package_isSet) {
        obj.insert(QString("package"), ::OpenAPI::toJsonValue(m_package));
    }
    if (m_syntax_isSet) {
        obj.insert(QString("syntax"), ::OpenAPI::toJsonValue(m_syntax));
    }
    return obj;
}

QString OAIProto2FileDescriptorProto::getEditionDeprecated() const {
    return m_edition_deprecated;
}
void OAIProto2FileDescriptorProto::setEditionDeprecated(const QString &edition_deprecated) {
    m_edition_deprecated = edition_deprecated;
    m_edition_deprecated_isSet = true;
}

bool OAIProto2FileDescriptorProto::is_edition_deprecated_Set() const{
    return m_edition_deprecated_isSet;
}

bool OAIProto2FileDescriptorProto::is_edition_deprecated_Valid() const{
    return m_edition_deprecated_isValid;
}

QList<OAIProto2EnumDescriptorProto> OAIProto2FileDescriptorProto::getEnumType() const {
    return m_enum_type;
}
void OAIProto2FileDescriptorProto::setEnumType(const QList<OAIProto2EnumDescriptorProto> &enum_type) {
    m_enum_type = enum_type;
    m_enum_type_isSet = true;
}

bool OAIProto2FileDescriptorProto::is_enum_type_Set() const{
    return m_enum_type_isSet;
}

bool OAIProto2FileDescriptorProto::is_enum_type_Valid() const{
    return m_enum_type_isValid;
}

QList<OAIProto2DescriptorProto> OAIProto2FileDescriptorProto::getMessageType() const {
    return m_message_type;
}
void OAIProto2FileDescriptorProto::setMessageType(const QList<OAIProto2DescriptorProto> &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAIProto2FileDescriptorProto::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAIProto2FileDescriptorProto::is_message_type_Valid() const{
    return m_message_type_isValid;
}

QString OAIProto2FileDescriptorProto::getName() const {
    return m_name;
}
void OAIProto2FileDescriptorProto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProto2FileDescriptorProto::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProto2FileDescriptorProto::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProto2FileDescriptorProto::getPackage() const {
    return m_package;
}
void OAIProto2FileDescriptorProto::setPackage(const QString &package) {
    m_package = package;
    m_package_isSet = true;
}

bool OAIProto2FileDescriptorProto::is_package_Set() const{
    return m_package_isSet;
}

bool OAIProto2FileDescriptorProto::is_package_Valid() const{
    return m_package_isValid;
}

QString OAIProto2FileDescriptorProto::getSyntax() const {
    return m_syntax;
}
void OAIProto2FileDescriptorProto::setSyntax(const QString &syntax) {
    m_syntax = syntax;
    m_syntax_isSet = true;
}

bool OAIProto2FileDescriptorProto::is_syntax_Set() const{
    return m_syntax_isSet;
}

bool OAIProto2FileDescriptorProto::is_syntax_Valid() const{
    return m_syntax_isValid;
}

bool OAIProto2FileDescriptorProto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_edition_deprecated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enum_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_syntax_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProto2FileDescriptorProto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
