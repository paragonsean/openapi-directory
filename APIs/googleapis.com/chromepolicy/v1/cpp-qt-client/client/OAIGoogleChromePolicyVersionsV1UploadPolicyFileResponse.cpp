/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromePolicyVersionsV1UploadPolicyFileResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromePolicyVersionsV1UploadPolicyFileResponse::OAIGoogleChromePolicyVersionsV1UploadPolicyFileResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromePolicyVersionsV1UploadPolicyFileResponse::OAIGoogleChromePolicyVersionsV1UploadPolicyFileResponse() {
    this->initializeModel();
}

OAIGoogleChromePolicyVersionsV1UploadPolicyFileResponse::~OAIGoogleChromePolicyVersionsV1UploadPolicyFileResponse() {}

void OAIGoogleChromePolicyVersionsV1UploadPolicyFileResponse::initializeModel() {

    m_download_uri_isSet = false;
    m_download_uri_isValid = false;
}

void OAIGoogleChromePolicyVersionsV1UploadPolicyFileResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromePolicyVersionsV1UploadPolicyFileResponse::fromJsonObject(QJsonObject json) {

    m_download_uri_isValid = ::OpenAPI::fromJsonValue(m_download_uri, json[QString("downloadUri")]);
    m_download_uri_isSet = !json[QString("downloadUri")].isNull() && m_download_uri_isValid;
}

QString OAIGoogleChromePolicyVersionsV1UploadPolicyFileResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromePolicyVersionsV1UploadPolicyFileResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_download_uri_isSet) {
        obj.insert(QString("downloadUri"), ::OpenAPI::toJsonValue(m_download_uri));
    }
    return obj;
}

QString OAIGoogleChromePolicyVersionsV1UploadPolicyFileResponse::getDownloadUri() const {
    return m_download_uri;
}
void OAIGoogleChromePolicyVersionsV1UploadPolicyFileResponse::setDownloadUri(const QString &download_uri) {
    m_download_uri = download_uri;
    m_download_uri_isSet = true;
}

bool OAIGoogleChromePolicyVersionsV1UploadPolicyFileResponse::is_download_uri_Set() const{
    return m_download_uri_isSet;
}

bool OAIGoogleChromePolicyVersionsV1UploadPolicyFileResponse::is_download_uri_Valid() const{
    return m_download_uri_isValid;
}

bool OAIGoogleChromePolicyVersionsV1UploadPolicyFileResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_download_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromePolicyVersionsV1UploadPolicyFileResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
