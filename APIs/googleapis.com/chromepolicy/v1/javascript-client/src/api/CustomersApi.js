/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GoogleChromePolicyVersionsV1BatchDeleteGroupPoliciesRequest from '../model/GoogleChromePolicyVersionsV1BatchDeleteGroupPoliciesRequest';
import GoogleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest from '../model/GoogleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest';
import GoogleChromePolicyVersionsV1BatchModifyGroupPoliciesRequest from '../model/GoogleChromePolicyVersionsV1BatchModifyGroupPoliciesRequest';
import GoogleChromePolicyVersionsV1BatchModifyOrgUnitPoliciesRequest from '../model/GoogleChromePolicyVersionsV1BatchModifyOrgUnitPoliciesRequest';
import GoogleChromePolicyVersionsV1DefineCertificateRequest from '../model/GoogleChromePolicyVersionsV1DefineCertificateRequest';
import GoogleChromePolicyVersionsV1DefineCertificateResponse from '../model/GoogleChromePolicyVersionsV1DefineCertificateResponse';
import GoogleChromePolicyVersionsV1DefineNetworkRequest from '../model/GoogleChromePolicyVersionsV1DefineNetworkRequest';
import GoogleChromePolicyVersionsV1DefineNetworkResponse from '../model/GoogleChromePolicyVersionsV1DefineNetworkResponse';
import GoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest from '../model/GoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest';
import GoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse from '../model/GoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse';
import GoogleChromePolicyVersionsV1ListPolicySchemasResponse from '../model/GoogleChromePolicyVersionsV1ListPolicySchemasResponse';
import GoogleChromePolicyVersionsV1PolicySchema from '../model/GoogleChromePolicyVersionsV1PolicySchema';
import GoogleChromePolicyVersionsV1RemoveCertificateRequest from '../model/GoogleChromePolicyVersionsV1RemoveCertificateRequest';
import GoogleChromePolicyVersionsV1RemoveNetworkRequest from '../model/GoogleChromePolicyVersionsV1RemoveNetworkRequest';
import GoogleChromePolicyVersionsV1ResolveRequest from '../model/GoogleChromePolicyVersionsV1ResolveRequest';
import GoogleChromePolicyVersionsV1ResolveResponse from '../model/GoogleChromePolicyVersionsV1ResolveResponse';
import GoogleChromePolicyVersionsV1UpdateGroupPriorityOrderingRequest from '../model/GoogleChromePolicyVersionsV1UpdateGroupPriorityOrderingRequest';

/**
* Customers service.
* @module api/CustomersApi
* @version v1
*/
export default class CustomersApi {

    /**
    * Constructs a new CustomersApi. 
    * @alias module:api/CustomersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the chromepolicyCustomersPoliciesGroupsBatchDelete operation.
     * @callback module:api/CustomersApi~chromepolicyCustomersPoliciesGroupsBatchDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete multiple policy values that are applied to a specific group. All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
     * @param {String} customer ID of the Google Workspace account or literal \"my_customer\" for the customer associated to the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleChromePolicyVersionsV1BatchDeleteGroupPoliciesRequest} [googleChromePolicyVersionsV1BatchDeleteGroupPoliciesRequest] 
     * @param {module:api/CustomersApi~chromepolicyCustomersPoliciesGroupsBatchDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    chromepolicyCustomersPoliciesGroupsBatchDelete(customer, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleChromePolicyVersionsV1BatchDeleteGroupPoliciesRequest'];
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromepolicyCustomersPoliciesGroupsBatchDelete");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{customer}/policies/groups:batchDelete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromepolicyCustomersPoliciesGroupsBatchModify operation.
     * @callback module:api/CustomersApi~chromepolicyCustomersPoliciesGroupsBatchModifyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify multiple policy values that are applied to a specific group. All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
     * @param {String} customer ID of the Google Workspace account or literal \"my_customer\" for the customer associated to the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleChromePolicyVersionsV1BatchModifyGroupPoliciesRequest} [googleChromePolicyVersionsV1BatchModifyGroupPoliciesRequest] 
     * @param {module:api/CustomersApi~chromepolicyCustomersPoliciesGroupsBatchModifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    chromepolicyCustomersPoliciesGroupsBatchModify(customer, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleChromePolicyVersionsV1BatchModifyGroupPoliciesRequest'];
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromepolicyCustomersPoliciesGroupsBatchModify");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{customer}/policies/groups:batchModify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromepolicyCustomersPoliciesGroupsListGroupPriorityOrdering operation.
     * @callback module:api/CustomersApi~chromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a group priority ordering for an app. The target app must be supplied in `additionalTargetKeyNames` in the PolicyTargetKey. On failure the request will return the error details as part of the google.rpc.Status.
     * @param {String} customer Required. ID of the Google Workspace account or literal \"my_customer\" for the customer associated to the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest} [googleChromePolicyVersionsV1ListGroupPriorityOrderingRequest] 
     * @param {module:api/CustomersApi~chromepolicyCustomersPoliciesGroupsListGroupPriorityOrderingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse}
     */
    chromepolicyCustomersPoliciesGroupsListGroupPriorityOrdering(customer, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleChromePolicyVersionsV1ListGroupPriorityOrderingRequest'];
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromepolicyCustomersPoliciesGroupsListGroupPriorityOrdering");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse;
      return this.apiClient.callApi(
        '/v1/{customer}/policies/groups:listGroupPriorityOrdering', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrdering operation.
     * @callback module:api/CustomersApi~chromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a group priority ordering for an app. The target app must be supplied in `additionalTargetKeyNames` in the PolicyTargetKey. On failure the request will return the error details as part of the google.rpc.Status.
     * @param {String} customer Required. ID of the Google Workspace account or literal \"my_customer\" for the customer associated to the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleChromePolicyVersionsV1UpdateGroupPriorityOrderingRequest} [googleChromePolicyVersionsV1UpdateGroupPriorityOrderingRequest] 
     * @param {module:api/CustomersApi~chromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrderingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    chromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrdering(customer, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleChromePolicyVersionsV1UpdateGroupPriorityOrderingRequest'];
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromepolicyCustomersPoliciesGroupsUpdateGroupPriorityOrdering");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{customer}/policies/groups:updateGroupPriorityOrdering', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromepolicyCustomersPoliciesNetworksDefineCertificate operation.
     * @callback module:api/CustomersApi~chromepolicyCustomersPoliciesNetworksDefineCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromePolicyVersionsV1DefineCertificateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a certificate at a specified OU for a customer.
     * @param {String} customer Required. The customer for which the certificate will apply.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleChromePolicyVersionsV1DefineCertificateRequest} [googleChromePolicyVersionsV1DefineCertificateRequest] 
     * @param {module:api/CustomersApi~chromepolicyCustomersPoliciesNetworksDefineCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromePolicyVersionsV1DefineCertificateResponse}
     */
    chromepolicyCustomersPoliciesNetworksDefineCertificate(customer, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleChromePolicyVersionsV1DefineCertificateRequest'];
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromepolicyCustomersPoliciesNetworksDefineCertificate");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GoogleChromePolicyVersionsV1DefineCertificateResponse;
      return this.apiClient.callApi(
        '/v1/{customer}/policies/networks:defineCertificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromepolicyCustomersPoliciesNetworksDefineNetwork operation.
     * @callback module:api/CustomersApi~chromepolicyCustomersPoliciesNetworksDefineNetworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromePolicyVersionsV1DefineNetworkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Define a new network.
     * @param {String} customer Required. The customer who will own this new network.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleChromePolicyVersionsV1DefineNetworkRequest} [googleChromePolicyVersionsV1DefineNetworkRequest] 
     * @param {module:api/CustomersApi~chromepolicyCustomersPoliciesNetworksDefineNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromePolicyVersionsV1DefineNetworkResponse}
     */
    chromepolicyCustomersPoliciesNetworksDefineNetwork(customer, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleChromePolicyVersionsV1DefineNetworkRequest'];
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromepolicyCustomersPoliciesNetworksDefineNetwork");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GoogleChromePolicyVersionsV1DefineNetworkResponse;
      return this.apiClient.callApi(
        '/v1/{customer}/policies/networks:defineNetwork', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromepolicyCustomersPoliciesNetworksRemoveCertificate operation.
     * @callback module:api/CustomersApi~chromepolicyCustomersPoliciesNetworksRemoveCertificateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an existing certificate by guid.
     * @param {String} customer Required. The customer whose certificate will be removed.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleChromePolicyVersionsV1RemoveCertificateRequest} [googleChromePolicyVersionsV1RemoveCertificateRequest] 
     * @param {module:api/CustomersApi~chromepolicyCustomersPoliciesNetworksRemoveCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    chromepolicyCustomersPoliciesNetworksRemoveCertificate(customer, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleChromePolicyVersionsV1RemoveCertificateRequest'];
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromepolicyCustomersPoliciesNetworksRemoveCertificate");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{customer}/policies/networks:removeCertificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromepolicyCustomersPoliciesNetworksRemoveNetwork operation.
     * @callback module:api/CustomersApi~chromepolicyCustomersPoliciesNetworksRemoveNetworkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an existing network by guid.
     * @param {String} customer Required. The customer whose network will be removed.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleChromePolicyVersionsV1RemoveNetworkRequest} [googleChromePolicyVersionsV1RemoveNetworkRequest] 
     * @param {module:api/CustomersApi~chromepolicyCustomersPoliciesNetworksRemoveNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    chromepolicyCustomersPoliciesNetworksRemoveNetwork(customer, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleChromePolicyVersionsV1RemoveNetworkRequest'];
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromepolicyCustomersPoliciesNetworksRemoveNetwork");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{customer}/policies/networks:removeNetwork', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromepolicyCustomersPoliciesOrgunitsBatchInherit operation.
     * @callback module:api/CustomersApi~chromepolicyCustomersPoliciesOrgunitsBatchInheritCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify multiple policy values that are applied to a specific org unit so that they now inherit the value from a parent (if applicable). All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
     * @param {String} customer ID of the G Suite account or literal \"my_customer\" for the customer associated to the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest} [googleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest] 
     * @param {module:api/CustomersApi~chromepolicyCustomersPoliciesOrgunitsBatchInheritCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    chromepolicyCustomersPoliciesOrgunitsBatchInherit(customer, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest'];
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromepolicyCustomersPoliciesOrgunitsBatchInherit");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{customer}/policies/orgunits:batchInherit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromepolicyCustomersPoliciesOrgunitsBatchModify operation.
     * @callback module:api/CustomersApi~chromepolicyCustomersPoliciesOrgunitsBatchModifyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify multiple policy values that are applied to a specific org unit. All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
     * @param {String} customer ID of the G Suite account or literal \"my_customer\" for the customer associated to the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleChromePolicyVersionsV1BatchModifyOrgUnitPoliciesRequest} [googleChromePolicyVersionsV1BatchModifyOrgUnitPoliciesRequest] 
     * @param {module:api/CustomersApi~chromepolicyCustomersPoliciesOrgunitsBatchModifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    chromepolicyCustomersPoliciesOrgunitsBatchModify(customer, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleChromePolicyVersionsV1BatchModifyOrgUnitPoliciesRequest'];
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromepolicyCustomersPoliciesOrgunitsBatchModify");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{customer}/policies/orgunits:batchModify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromepolicyCustomersPoliciesResolve operation.
     * @callback module:api/CustomersApi~chromepolicyCustomersPoliciesResolveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromePolicyVersionsV1ResolveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the resolved policy values for a list of policies that match a search query.
     * @param {String} customer ID of the G Suite account or literal \"my_customer\" for the customer associated to the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleChromePolicyVersionsV1ResolveRequest} [googleChromePolicyVersionsV1ResolveRequest] 
     * @param {module:api/CustomersApi~chromepolicyCustomersPoliciesResolveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromePolicyVersionsV1ResolveResponse}
     */
    chromepolicyCustomersPoliciesResolve(customer, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleChromePolicyVersionsV1ResolveRequest'];
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromepolicyCustomersPoliciesResolve");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GoogleChromePolicyVersionsV1ResolveResponse;
      return this.apiClient.callApi(
        '/v1/{customer}/policies:resolve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromepolicyCustomersPolicySchemasGet operation.
     * @callback module:api/CustomersApi~chromepolicyCustomersPolicySchemasGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromePolicyVersionsV1PolicySchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific policy schema for a customer by its resource name.
     * @param {String} name Required. The policy schema resource name to query.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/CustomersApi~chromepolicyCustomersPolicySchemasGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromePolicyVersionsV1PolicySchema}
     */
    chromepolicyCustomersPolicySchemasGet(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling chromepolicyCustomersPolicySchemasGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleChromePolicyVersionsV1PolicySchema;
      return this.apiClient.callApi(
        '/v1/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromepolicyCustomersPolicySchemasList operation.
     * @callback module:api/CustomersApi~chromepolicyCustomersPolicySchemasListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromePolicyVersionsV1ListPolicySchemasResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of policy schemas that match a specified filter value for a given customer.
     * @param {String} parent Required. The customer for which the listing request will apply.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] The schema filter used to find a particular schema based on fields like its resource name, description and `additionalTargetKeyNames`.
     * @param {Number} [pageSize] The maximum number of policy schemas to return, defaults to 100 and has a maximum of 1000.
     * @param {String} [pageToken] The page token used to retrieve a specific page of the listing request.
     * @param {module:api/CustomersApi~chromepolicyCustomersPolicySchemasListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromePolicyVersionsV1ListPolicySchemasResponse}
     */
    chromepolicyCustomersPolicySchemasList(parent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling chromepolicyCustomersPolicySchemasList");
      }

      let pathParams = {
        'parent': parent
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleChromePolicyVersionsV1ListPolicySchemasResponse;
      return this.apiClient.callApi(
        '/v1/{parent}/policySchemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
