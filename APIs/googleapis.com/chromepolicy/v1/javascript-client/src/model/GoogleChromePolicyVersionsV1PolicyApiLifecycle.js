/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleTypeDate from './GoogleTypeDate';

/**
 * The GoogleChromePolicyVersionsV1PolicyApiLifecycle model module.
 * @module model/GoogleChromePolicyVersionsV1PolicyApiLifecycle
 * @version v1
 */
class GoogleChromePolicyVersionsV1PolicyApiLifecycle {
    /**
     * Constructs a new <code>GoogleChromePolicyVersionsV1PolicyApiLifecycle</code>.
     * Lifecycle information.
     * @alias module:model/GoogleChromePolicyVersionsV1PolicyApiLifecycle
     */
    constructor() { 
        
        GoogleChromePolicyVersionsV1PolicyApiLifecycle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromePolicyVersionsV1PolicyApiLifecycle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromePolicyVersionsV1PolicyApiLifecycle} obj Optional instance to populate.
     * @return {module:model/GoogleChromePolicyVersionsV1PolicyApiLifecycle} The populated <code>GoogleChromePolicyVersionsV1PolicyApiLifecycle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromePolicyVersionsV1PolicyApiLifecycle();

            if (data.hasOwnProperty('deprecatedInFavorOf')) {
                obj['deprecatedInFavorOf'] = ApiClient.convertToType(data['deprecatedInFavorOf'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('endSupport')) {
                obj['endSupport'] = GoogleTypeDate.constructFromObject(data['endSupport']);
            }
            if (data.hasOwnProperty('policyApiLifecycleStage')) {
                obj['policyApiLifecycleStage'] = ApiClient.convertToType(data['policyApiLifecycleStage'], 'String');
            }
            if (data.hasOwnProperty('scheduledToDeprecatePolicies')) {
                obj['scheduledToDeprecatePolicies'] = ApiClient.convertToType(data['scheduledToDeprecatePolicies'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromePolicyVersionsV1PolicyApiLifecycle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromePolicyVersionsV1PolicyApiLifecycle</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['deprecatedInFavorOf'])) {
            throw new Error("Expected the field `deprecatedInFavorOf` to be an array in the JSON data but got " + data['deprecatedInFavorOf']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `endSupport`
        if (data['endSupport']) { // data not null
          GoogleTypeDate.validateJSON(data['endSupport']);
        }
        // ensure the json data is a string
        if (data['policyApiLifecycleStage'] && !(typeof data['policyApiLifecycleStage'] === 'string' || data['policyApiLifecycleStage'] instanceof String)) {
            throw new Error("Expected the field `policyApiLifecycleStage` to be a primitive type in the JSON string but got " + data['policyApiLifecycleStage']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scheduledToDeprecatePolicies'])) {
            throw new Error("Expected the field `scheduledToDeprecatePolicies` to be an array in the JSON data but got " + data['scheduledToDeprecatePolicies']);
        }

        return true;
    }


}



/**
 * In the event that this policy was deprecated in favor of another policy, the fully qualified namespace(s) of the new policies as they will show in PolicyAPI. Could only be set if policy_api_lifecycle_stage is API_DEPRECATED.
 * @member {Array.<String>} deprecatedInFavorOf
 */
GoogleChromePolicyVersionsV1PolicyApiLifecycle.prototype['deprecatedInFavorOf'] = undefined;

/**
 * Description about current life cycle.
 * @member {String} description
 */
GoogleChromePolicyVersionsV1PolicyApiLifecycle.prototype['description'] = undefined;

/**
 * @member {module:model/GoogleTypeDate} endSupport
 */
GoogleChromePolicyVersionsV1PolicyApiLifecycle.prototype['endSupport'] = undefined;

/**
 * Indicates current life cycle stage of the policy API.
 * @member {module:model/GoogleChromePolicyVersionsV1PolicyApiLifecycle.PolicyApiLifecycleStageEnum} policyApiLifecycleStage
 */
GoogleChromePolicyVersionsV1PolicyApiLifecycle.prototype['policyApiLifecycleStage'] = undefined;

/**
 * Corresponding to deprecated_in_favor_of, the fully qualified namespace(s) of the old policies that will be deprecated because of introduction of this policy. This field should not be manually set but will be set and exposed through PolicyAPI automatically.
 * @member {Array.<String>} scheduledToDeprecatePolicies
 */
GoogleChromePolicyVersionsV1PolicyApiLifecycle.prototype['scheduledToDeprecatePolicies'] = undefined;





/**
 * Allowed values for the <code>policyApiLifecycleStage</code> property.
 * @enum {String}
 * @readonly
 */
GoogleChromePolicyVersionsV1PolicyApiLifecycle['PolicyApiLifecycleStageEnum'] = {

    /**
     * value: "API_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "API_UNSPECIFIED",

    /**
     * value: "API_PREVIEW"
     * @const
     */
    "PREVIEW": "API_PREVIEW",

    /**
     * value: "API_DEVELOPMENT"
     * @const
     */
    "DEVELOPMENT": "API_DEVELOPMENT",

    /**
     * value: "API_CURRENT"
     * @const
     */
    "CURRENT": "API_CURRENT",

    /**
     * value: "API_DEPRECATED"
     * @const
     */
    "DEPRECATED": "API_DEPRECATED"
};



export default GoogleChromePolicyVersionsV1PolicyApiLifecycle;

