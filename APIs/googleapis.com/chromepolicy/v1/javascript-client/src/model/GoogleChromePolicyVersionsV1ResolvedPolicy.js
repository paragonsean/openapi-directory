/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleChromePolicyVersionsV1PolicyTargetKey from './GoogleChromePolicyVersionsV1PolicyTargetKey';
import GoogleChromePolicyVersionsV1PolicyValue from './GoogleChromePolicyVersionsV1PolicyValue';

/**
 * The GoogleChromePolicyVersionsV1ResolvedPolicy model module.
 * @module model/GoogleChromePolicyVersionsV1ResolvedPolicy
 * @version v1
 */
class GoogleChromePolicyVersionsV1ResolvedPolicy {
    /**
     * Constructs a new <code>GoogleChromePolicyVersionsV1ResolvedPolicy</code>.
     * The resolved value of a policy for a given target.
     * @alias module:model/GoogleChromePolicyVersionsV1ResolvedPolicy
     */
    constructor() { 
        
        GoogleChromePolicyVersionsV1ResolvedPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromePolicyVersionsV1ResolvedPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromePolicyVersionsV1ResolvedPolicy} obj Optional instance to populate.
     * @return {module:model/GoogleChromePolicyVersionsV1ResolvedPolicy} The populated <code>GoogleChromePolicyVersionsV1ResolvedPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromePolicyVersionsV1ResolvedPolicy();

            if (data.hasOwnProperty('addedSourceKey')) {
                obj['addedSourceKey'] = GoogleChromePolicyVersionsV1PolicyTargetKey.constructFromObject(data['addedSourceKey']);
            }
            if (data.hasOwnProperty('sourceKey')) {
                obj['sourceKey'] = GoogleChromePolicyVersionsV1PolicyTargetKey.constructFromObject(data['sourceKey']);
            }
            if (data.hasOwnProperty('targetKey')) {
                obj['targetKey'] = GoogleChromePolicyVersionsV1PolicyTargetKey.constructFromObject(data['targetKey']);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = GoogleChromePolicyVersionsV1PolicyValue.constructFromObject(data['value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromePolicyVersionsV1ResolvedPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromePolicyVersionsV1ResolvedPolicy</code>.
     */
    static validateJSON(data) {
        // validate the optional field `addedSourceKey`
        if (data['addedSourceKey']) { // data not null
          GoogleChromePolicyVersionsV1PolicyTargetKey.validateJSON(data['addedSourceKey']);
        }
        // validate the optional field `sourceKey`
        if (data['sourceKey']) { // data not null
          GoogleChromePolicyVersionsV1PolicyTargetKey.validateJSON(data['sourceKey']);
        }
        // validate the optional field `targetKey`
        if (data['targetKey']) { // data not null
          GoogleChromePolicyVersionsV1PolicyTargetKey.validateJSON(data['targetKey']);
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          GoogleChromePolicyVersionsV1PolicyValue.validateJSON(data['value']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleChromePolicyVersionsV1PolicyTargetKey} addedSourceKey
 */
GoogleChromePolicyVersionsV1ResolvedPolicy.prototype['addedSourceKey'] = undefined;

/**
 * @member {module:model/GoogleChromePolicyVersionsV1PolicyTargetKey} sourceKey
 */
GoogleChromePolicyVersionsV1ResolvedPolicy.prototype['sourceKey'] = undefined;

/**
 * @member {module:model/GoogleChromePolicyVersionsV1PolicyTargetKey} targetKey
 */
GoogleChromePolicyVersionsV1ResolvedPolicy.prototype['targetKey'] = undefined;

/**
 * @member {module:model/GoogleChromePolicyVersionsV1PolicyValue} value
 */
GoogleChromePolicyVersionsV1ResolvedPolicy.prototype['value'] = undefined;






export default GoogleChromePolicyVersionsV1ResolvedPolicy;

