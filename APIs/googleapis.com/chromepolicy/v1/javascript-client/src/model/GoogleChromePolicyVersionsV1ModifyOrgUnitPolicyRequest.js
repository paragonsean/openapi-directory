/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleChromePolicyVersionsV1PolicyTargetKey from './GoogleChromePolicyVersionsV1PolicyTargetKey';
import GoogleChromePolicyVersionsV1PolicyValue from './GoogleChromePolicyVersionsV1PolicyValue';

/**
 * The GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest model module.
 * @module model/GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest
 * @version v1
 */
class GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest {
    /**
     * Constructs a new <code>GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest</code>.
     * Request parameters for modifying a policy value for a specific org unit target.
     * @alias module:model/GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest
     */
    constructor() { 
        
        GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest} obj Optional instance to populate.
     * @return {module:model/GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest} The populated <code>GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest();

            if (data.hasOwnProperty('policyTargetKey')) {
                obj['policyTargetKey'] = GoogleChromePolicyVersionsV1PolicyTargetKey.constructFromObject(data['policyTargetKey']);
            }
            if (data.hasOwnProperty('policyValue')) {
                obj['policyValue'] = GoogleChromePolicyVersionsV1PolicyValue.constructFromObject(data['policyValue']);
            }
            if (data.hasOwnProperty('updateMask')) {
                obj['updateMask'] = ApiClient.convertToType(data['updateMask'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `policyTargetKey`
        if (data['policyTargetKey']) { // data not null
          GoogleChromePolicyVersionsV1PolicyTargetKey.validateJSON(data['policyTargetKey']);
        }
        // validate the optional field `policyValue`
        if (data['policyValue']) { // data not null
          GoogleChromePolicyVersionsV1PolicyValue.validateJSON(data['policyValue']);
        }
        // ensure the json data is a string
        if (data['updateMask'] && !(typeof data['updateMask'] === 'string' || data['updateMask'] instanceof String)) {
            throw new Error("Expected the field `updateMask` to be a primitive type in the JSON string but got " + data['updateMask']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleChromePolicyVersionsV1PolicyTargetKey} policyTargetKey
 */
GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest.prototype['policyTargetKey'] = undefined;

/**
 * @member {module:model/GoogleChromePolicyVersionsV1PolicyValue} policyValue
 */
GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest.prototype['policyValue'] = undefined;

/**
 * Required. Policy fields to update. Only fields in this mask will be updated; other fields in `policy_value` will be ignored (even if they have values). If a field is in this list it must have a value in 'policy_value'.
 * @member {String} updateMask
 */
GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest.prototype['updateMask'] = undefined;






export default GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest;

