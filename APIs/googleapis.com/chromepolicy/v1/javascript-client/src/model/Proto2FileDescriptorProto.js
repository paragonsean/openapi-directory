/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Proto2DescriptorProto from './Proto2DescriptorProto';
import Proto2EnumDescriptorProto from './Proto2EnumDescriptorProto';

/**
 * The Proto2FileDescriptorProto model module.
 * @module model/Proto2FileDescriptorProto
 * @version v1
 */
class Proto2FileDescriptorProto {
    /**
     * Constructs a new <code>Proto2FileDescriptorProto</code>.
     * Describes a complete .proto file.
     * @alias module:model/Proto2FileDescriptorProto
     */
    constructor() { 
        
        Proto2FileDescriptorProto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Proto2FileDescriptorProto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Proto2FileDescriptorProto} obj Optional instance to populate.
     * @return {module:model/Proto2FileDescriptorProto} The populated <code>Proto2FileDescriptorProto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Proto2FileDescriptorProto();

            if (data.hasOwnProperty('editionDeprecated')) {
                obj['editionDeprecated'] = ApiClient.convertToType(data['editionDeprecated'], 'String');
            }
            if (data.hasOwnProperty('enumType')) {
                obj['enumType'] = ApiClient.convertToType(data['enumType'], [Proto2EnumDescriptorProto]);
            }
            if (data.hasOwnProperty('messageType')) {
                obj['messageType'] = ApiClient.convertToType(data['messageType'], [Proto2DescriptorProto]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('package')) {
                obj['package'] = ApiClient.convertToType(data['package'], 'String');
            }
            if (data.hasOwnProperty('syntax')) {
                obj['syntax'] = ApiClient.convertToType(data['syntax'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Proto2FileDescriptorProto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Proto2FileDescriptorProto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['editionDeprecated'] && !(typeof data['editionDeprecated'] === 'string' || data['editionDeprecated'] instanceof String)) {
            throw new Error("Expected the field `editionDeprecated` to be a primitive type in the JSON string but got " + data['editionDeprecated']);
        }
        if (data['enumType']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['enumType'])) {
                throw new Error("Expected the field `enumType` to be an array in the JSON data but got " + data['enumType']);
            }
            // validate the optional field `enumType` (array)
            for (const item of data['enumType']) {
                Proto2EnumDescriptorProto.validateJSON(item);
            };
        }
        if (data['messageType']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['messageType'])) {
                throw new Error("Expected the field `messageType` to be an array in the JSON data but got " + data['messageType']);
            }
            // validate the optional field `messageType` (array)
            for (const item of data['messageType']) {
                Proto2DescriptorProto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['package'] && !(typeof data['package'] === 'string' || data['package'] instanceof String)) {
            throw new Error("Expected the field `package` to be a primitive type in the JSON string but got " + data['package']);
        }
        // ensure the json data is a string
        if (data['syntax'] && !(typeof data['syntax'] === 'string' || data['syntax'] instanceof String)) {
            throw new Error("Expected the field `syntax` to be a primitive type in the JSON string but got " + data['syntax']);
        }

        return true;
    }


}



/**
 * BEGIN GOOGLE-INTERNAL TODO(b/297898292) Deprecate and remove this field in favor of enums. END GOOGLE-INTERNAL
 * @member {String} editionDeprecated
 */
Proto2FileDescriptorProto.prototype['editionDeprecated'] = undefined;

/**
 * @member {Array.<module:model/Proto2EnumDescriptorProto>} enumType
 */
Proto2FileDescriptorProto.prototype['enumType'] = undefined;

/**
 * All top-level definitions in this file.
 * @member {Array.<module:model/Proto2DescriptorProto>} messageType
 */
Proto2FileDescriptorProto.prototype['messageType'] = undefined;

/**
 * file name, relative to root of source tree
 * @member {String} name
 */
Proto2FileDescriptorProto.prototype['name'] = undefined;

/**
 * e.g. \"foo\", \"foo.bar\", etc.
 * @member {String} package
 */
Proto2FileDescriptorProto.prototype['package'] = undefined;

/**
 * The syntax of the proto file. The supported values are \"proto2\", \"proto3\", and \"editions\". If `edition` is present, this value must be \"editions\".
 * @member {String} syntax
 */
Proto2FileDescriptorProto.prototype['syntax'] = undefined;






export default Proto2FileDescriptorProto;

