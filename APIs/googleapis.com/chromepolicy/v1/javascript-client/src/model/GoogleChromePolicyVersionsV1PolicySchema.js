/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleChromePolicyVersionsV1AdditionalTargetKeyName from './GoogleChromePolicyVersionsV1AdditionalTargetKeyName';
import GoogleChromePolicyVersionsV1PolicyApiLifecycle from './GoogleChromePolicyVersionsV1PolicyApiLifecycle';
import GoogleChromePolicyVersionsV1PolicySchemaFieldDescription from './GoogleChromePolicyVersionsV1PolicySchemaFieldDescription';
import GoogleChromePolicyVersionsV1PolicySchemaNoticeDescription from './GoogleChromePolicyVersionsV1PolicySchemaNoticeDescription';
import Proto2FileDescriptorProto from './Proto2FileDescriptorProto';

/**
 * The GoogleChromePolicyVersionsV1PolicySchema model module.
 * @module model/GoogleChromePolicyVersionsV1PolicySchema
 * @version v1
 */
class GoogleChromePolicyVersionsV1PolicySchema {
    /**
     * Constructs a new <code>GoogleChromePolicyVersionsV1PolicySchema</code>.
     * Resource representing a policy schema.
     * @alias module:model/GoogleChromePolicyVersionsV1PolicySchema
     */
    constructor() { 
        
        GoogleChromePolicyVersionsV1PolicySchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromePolicyVersionsV1PolicySchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromePolicyVersionsV1PolicySchema} obj Optional instance to populate.
     * @return {module:model/GoogleChromePolicyVersionsV1PolicySchema} The populated <code>GoogleChromePolicyVersionsV1PolicySchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromePolicyVersionsV1PolicySchema();

            if (data.hasOwnProperty('accessRestrictions')) {
                obj['accessRestrictions'] = ApiClient.convertToType(data['accessRestrictions'], ['String']);
            }
            if (data.hasOwnProperty('additionalTargetKeyNames')) {
                obj['additionalTargetKeyNames'] = ApiClient.convertToType(data['additionalTargetKeyNames'], [GoogleChromePolicyVersionsV1AdditionalTargetKeyName]);
            }
            if (data.hasOwnProperty('categoryTitle')) {
                obj['categoryTitle'] = ApiClient.convertToType(data['categoryTitle'], 'String');
            }
            if (data.hasOwnProperty('definition')) {
                obj['definition'] = Proto2FileDescriptorProto.constructFromObject(data['definition']);
            }
            if (data.hasOwnProperty('fieldDescriptions')) {
                obj['fieldDescriptions'] = ApiClient.convertToType(data['fieldDescriptions'], [GoogleChromePolicyVersionsV1PolicySchemaFieldDescription]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notices')) {
                obj['notices'] = ApiClient.convertToType(data['notices'], [GoogleChromePolicyVersionsV1PolicySchemaNoticeDescription]);
            }
            if (data.hasOwnProperty('policyApiLifecycle')) {
                obj['policyApiLifecycle'] = GoogleChromePolicyVersionsV1PolicyApiLifecycle.constructFromObject(data['policyApiLifecycle']);
            }
            if (data.hasOwnProperty('policyDescription')) {
                obj['policyDescription'] = ApiClient.convertToType(data['policyDescription'], 'String');
            }
            if (data.hasOwnProperty('schemaName')) {
                obj['schemaName'] = ApiClient.convertToType(data['schemaName'], 'String');
            }
            if (data.hasOwnProperty('supportUri')) {
                obj['supportUri'] = ApiClient.convertToType(data['supportUri'], 'String');
            }
            if (data.hasOwnProperty('supportedPlatforms')) {
                obj['supportedPlatforms'] = ApiClient.convertToType(data['supportedPlatforms'], ['String']);
            }
            if (data.hasOwnProperty('validTargetResources')) {
                obj['validTargetResources'] = ApiClient.convertToType(data['validTargetResources'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromePolicyVersionsV1PolicySchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromePolicyVersionsV1PolicySchema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['accessRestrictions'])) {
            throw new Error("Expected the field `accessRestrictions` to be an array in the JSON data but got " + data['accessRestrictions']);
        }
        if (data['additionalTargetKeyNames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalTargetKeyNames'])) {
                throw new Error("Expected the field `additionalTargetKeyNames` to be an array in the JSON data but got " + data['additionalTargetKeyNames']);
            }
            // validate the optional field `additionalTargetKeyNames` (array)
            for (const item of data['additionalTargetKeyNames']) {
                GoogleChromePolicyVersionsV1AdditionalTargetKeyName.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['categoryTitle'] && !(typeof data['categoryTitle'] === 'string' || data['categoryTitle'] instanceof String)) {
            throw new Error("Expected the field `categoryTitle` to be a primitive type in the JSON string but got " + data['categoryTitle']);
        }
        // validate the optional field `definition`
        if (data['definition']) { // data not null
          Proto2FileDescriptorProto.validateJSON(data['definition']);
        }
        if (data['fieldDescriptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fieldDescriptions'])) {
                throw new Error("Expected the field `fieldDescriptions` to be an array in the JSON data but got " + data['fieldDescriptions']);
            }
            // validate the optional field `fieldDescriptions` (array)
            for (const item of data['fieldDescriptions']) {
                GoogleChromePolicyVersionsV1PolicySchemaFieldDescription.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['notices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['notices'])) {
                throw new Error("Expected the field `notices` to be an array in the JSON data but got " + data['notices']);
            }
            // validate the optional field `notices` (array)
            for (const item of data['notices']) {
                GoogleChromePolicyVersionsV1PolicySchemaNoticeDescription.validateJSON(item);
            };
        }
        // validate the optional field `policyApiLifecycle`
        if (data['policyApiLifecycle']) { // data not null
          GoogleChromePolicyVersionsV1PolicyApiLifecycle.validateJSON(data['policyApiLifecycle']);
        }
        // ensure the json data is a string
        if (data['policyDescription'] && !(typeof data['policyDescription'] === 'string' || data['policyDescription'] instanceof String)) {
            throw new Error("Expected the field `policyDescription` to be a primitive type in the JSON string but got " + data['policyDescription']);
        }
        // ensure the json data is a string
        if (data['schemaName'] && !(typeof data['schemaName'] === 'string' || data['schemaName'] instanceof String)) {
            throw new Error("Expected the field `schemaName` to be a primitive type in the JSON string but got " + data['schemaName']);
        }
        // ensure the json data is a string
        if (data['supportUri'] && !(typeof data['supportUri'] === 'string' || data['supportUri'] instanceof String)) {
            throw new Error("Expected the field `supportUri` to be a primitive type in the JSON string but got " + data['supportUri']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedPlatforms'])) {
            throw new Error("Expected the field `supportedPlatforms` to be an array in the JSON data but got " + data['supportedPlatforms']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['validTargetResources'])) {
            throw new Error("Expected the field `validTargetResources` to be an array in the JSON data but got " + data['validTargetResources']);
        }

        return true;
    }


}



/**
 * Output only. Specific access restrictions related to this policy.
 * @member {Array.<String>} accessRestrictions
 */
GoogleChromePolicyVersionsV1PolicySchema.prototype['accessRestrictions'] = undefined;

/**
 * Output only. Additional key names that will be used to identify the target of the policy value. When specifying a `policyTargetKey`, each of the additional keys specified here will have to be included in the `additionalTargetKeys` map.
 * @member {Array.<module:model/GoogleChromePolicyVersionsV1AdditionalTargetKeyName>} additionalTargetKeyNames
 */
GoogleChromePolicyVersionsV1PolicySchema.prototype['additionalTargetKeyNames'] = undefined;

/**
 * Title of the category in which a setting belongs.
 * @member {String} categoryTitle
 */
GoogleChromePolicyVersionsV1PolicySchema.prototype['categoryTitle'] = undefined;

/**
 * @member {module:model/Proto2FileDescriptorProto} definition
 */
GoogleChromePolicyVersionsV1PolicySchema.prototype['definition'] = undefined;

/**
 * Output only. Detailed description of each field that is part of the schema. Fields are suggested to be displayed by the ordering in this list, not by field number.
 * @member {Array.<module:model/GoogleChromePolicyVersionsV1PolicySchemaFieldDescription>} fieldDescriptions
 */
GoogleChromePolicyVersionsV1PolicySchema.prototype['fieldDescriptions'] = undefined;

/**
 * Format: name=customers/{customer}/policySchemas/{schema_namespace}
 * @member {String} name
 */
GoogleChromePolicyVersionsV1PolicySchema.prototype['name'] = undefined;

/**
 * Output only. Special notice messages related to setting certain values in certain fields in the schema.
 * @member {Array.<module:model/GoogleChromePolicyVersionsV1PolicySchemaNoticeDescription>} notices
 */
GoogleChromePolicyVersionsV1PolicySchema.prototype['notices'] = undefined;

/**
 * @member {module:model/GoogleChromePolicyVersionsV1PolicyApiLifecycle} policyApiLifecycle
 */
GoogleChromePolicyVersionsV1PolicySchema.prototype['policyApiLifecycle'] = undefined;

/**
 * Output only. Description about the policy schema for user consumption.
 * @member {String} policyDescription
 */
GoogleChromePolicyVersionsV1PolicySchema.prototype['policyDescription'] = undefined;

/**
 * Output only. The fully qualified name of the policy schema. This value is used to fill the field `policy_schema` in PolicyValue when calling BatchInheritOrgUnitPolicies BatchModifyOrgUnitPolicies BatchModifyGroupPolicies or BatchDeleteGroupPolicies.
 * @member {String} schemaName
 */
GoogleChromePolicyVersionsV1PolicySchema.prototype['schemaName'] = undefined;

/**
 * Output only. URI to related support article for this schema.
 * @member {String} supportUri
 */
GoogleChromePolicyVersionsV1PolicySchema.prototype['supportUri'] = undefined;

/**
 * Output only. List indicates that the policy will only apply to devices/users on these platforms.
 * @member {Array.<module:model/GoogleChromePolicyVersionsV1PolicySchema.SupportedPlatformsEnum>} supportedPlatforms
 */
GoogleChromePolicyVersionsV1PolicySchema.prototype['supportedPlatforms'] = undefined;

/**
 * Output only. Information about applicable target resources for the policy.
 * @member {Array.<module:model/GoogleChromePolicyVersionsV1PolicySchema.ValidTargetResourcesEnum>} validTargetResources
 */
GoogleChromePolicyVersionsV1PolicySchema.prototype['validTargetResources'] = undefined;





/**
 * Allowed values for the <code>supportedPlatforms</code> property.
 * @enum {String}
 * @readonly
 */
GoogleChromePolicyVersionsV1PolicySchema['SupportedPlatformsEnum'] = {

    /**
     * value: "PLATFORM_UNSPECIFIED"
     * @const
     */
    "PLATFORM_UNSPECIFIED": "PLATFORM_UNSPECIFIED",

    /**
     * value: "CHROME_OS"
     * @const
     */
    "CHROME_OS": "CHROME_OS",

    /**
     * value: "CHROME_BROWSER"
     * @const
     */
    "CHROME_BROWSER": "CHROME_BROWSER",

    /**
     * value: "CHROME_BROWSER_FOR_ANDROID"
     * @const
     */
    "CHROME_BROWSER_FOR_ANDROID": "CHROME_BROWSER_FOR_ANDROID",

    /**
     * value: "CHROME_BROWSER_FOR_IOS"
     * @const
     */
    "CHROME_BROWSER_FOR_IOS": "CHROME_BROWSER_FOR_IOS"
};


/**
 * Allowed values for the <code>validTargetResources</code> property.
 * @enum {String}
 * @readonly
 */
GoogleChromePolicyVersionsV1PolicySchema['ValidTargetResourcesEnum'] = {

    /**
     * value: "TARGET_RESOURCE_UNSPECIFIED"
     * @const
     */
    "TARGET_RESOURCE_UNSPECIFIED": "TARGET_RESOURCE_UNSPECIFIED",

    /**
     * value: "ORG_UNIT"
     * @const
     */
    "ORG_UNIT": "ORG_UNIT",

    /**
     * value: "GROUP"
     * @const
     */
    "GROUP": "GROUP"
};



export default GoogleChromePolicyVersionsV1PolicySchema;

