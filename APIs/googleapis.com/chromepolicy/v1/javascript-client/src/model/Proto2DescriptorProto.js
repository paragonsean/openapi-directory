/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Proto2EnumDescriptorProto from './Proto2EnumDescriptorProto';
import Proto2FieldDescriptorProto from './Proto2FieldDescriptorProto';
import Proto2OneofDescriptorProto from './Proto2OneofDescriptorProto';

/**
 * The Proto2DescriptorProto model module.
 * @module model/Proto2DescriptorProto
 * @version v1
 */
class Proto2DescriptorProto {
    /**
     * Constructs a new <code>Proto2DescriptorProto</code>.
     * Describes a message type.
     * @alias module:model/Proto2DescriptorProto
     */
    constructor() { 
        
        Proto2DescriptorProto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Proto2DescriptorProto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Proto2DescriptorProto} obj Optional instance to populate.
     * @return {module:model/Proto2DescriptorProto} The populated <code>Proto2DescriptorProto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Proto2DescriptorProto();

            if (data.hasOwnProperty('enumType')) {
                obj['enumType'] = ApiClient.convertToType(data['enumType'], [Proto2EnumDescriptorProto]);
            }
            if (data.hasOwnProperty('field')) {
                obj['field'] = ApiClient.convertToType(data['field'], [Proto2FieldDescriptorProto]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nestedType')) {
                obj['nestedType'] = ApiClient.convertToType(data['nestedType'], [Proto2DescriptorProto]);
            }
            if (data.hasOwnProperty('oneofDecl')) {
                obj['oneofDecl'] = ApiClient.convertToType(data['oneofDecl'], [Proto2OneofDescriptorProto]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Proto2DescriptorProto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Proto2DescriptorProto</code>.
     */
    static validateJSON(data) {
        if (data['enumType']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['enumType'])) {
                throw new Error("Expected the field `enumType` to be an array in the JSON data but got " + data['enumType']);
            }
            // validate the optional field `enumType` (array)
            for (const item of data['enumType']) {
                Proto2EnumDescriptorProto.validateJSON(item);
            };
        }
        if (data['field']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['field'])) {
                throw new Error("Expected the field `field` to be an array in the JSON data but got " + data['field']);
            }
            // validate the optional field `field` (array)
            for (const item of data['field']) {
                Proto2FieldDescriptorProto.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['nestedType']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nestedType'])) {
                throw new Error("Expected the field `nestedType` to be an array in the JSON data but got " + data['nestedType']);
            }
            // validate the optional field `nestedType` (array)
            for (const item of data['nestedType']) {
                Proto2DescriptorProto.validateJSON(item);
            };
        }
        if (data['oneofDecl']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['oneofDecl'])) {
                throw new Error("Expected the field `oneofDecl` to be an array in the JSON data but got " + data['oneofDecl']);
            }
            // validate the optional field `oneofDecl` (array)
            for (const item of data['oneofDecl']) {
                Proto2OneofDescriptorProto.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Proto2EnumDescriptorProto>} enumType
 */
Proto2DescriptorProto.prototype['enumType'] = undefined;

/**
 * @member {Array.<module:model/Proto2FieldDescriptorProto>} field
 */
Proto2DescriptorProto.prototype['field'] = undefined;

/**
 * @member {String} name
 */
Proto2DescriptorProto.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/Proto2DescriptorProto>} nestedType
 */
Proto2DescriptorProto.prototype['nestedType'] = undefined;

/**
 * @member {Array.<module:model/Proto2OneofDescriptorProto>} oneofDecl
 */
Proto2DescriptorProto.prototype['oneofDecl'] = undefined;






export default Proto2DescriptorProto;

