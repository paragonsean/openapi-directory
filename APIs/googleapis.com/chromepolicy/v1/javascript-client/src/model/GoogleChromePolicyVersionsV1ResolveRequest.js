/**
 * Chrome Policy API
 * The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleChromePolicyVersionsV1PolicyTargetKey from './GoogleChromePolicyVersionsV1PolicyTargetKey';

/**
 * The GoogleChromePolicyVersionsV1ResolveRequest model module.
 * @module model/GoogleChromePolicyVersionsV1ResolveRequest
 * @version v1
 */
class GoogleChromePolicyVersionsV1ResolveRequest {
    /**
     * Constructs a new <code>GoogleChromePolicyVersionsV1ResolveRequest</code>.
     * Request message for getting the resolved policy value for a specific target.
     * @alias module:model/GoogleChromePolicyVersionsV1ResolveRequest
     */
    constructor() { 
        
        GoogleChromePolicyVersionsV1ResolveRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromePolicyVersionsV1ResolveRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromePolicyVersionsV1ResolveRequest} obj Optional instance to populate.
     * @return {module:model/GoogleChromePolicyVersionsV1ResolveRequest} The populated <code>GoogleChromePolicyVersionsV1ResolveRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromePolicyVersionsV1ResolveRequest();

            if (data.hasOwnProperty('pageSize')) {
                obj['pageSize'] = ApiClient.convertToType(data['pageSize'], 'Number');
            }
            if (data.hasOwnProperty('pageToken')) {
                obj['pageToken'] = ApiClient.convertToType(data['pageToken'], 'String');
            }
            if (data.hasOwnProperty('policySchemaFilter')) {
                obj['policySchemaFilter'] = ApiClient.convertToType(data['policySchemaFilter'], 'String');
            }
            if (data.hasOwnProperty('policyTargetKey')) {
                obj['policyTargetKey'] = GoogleChromePolicyVersionsV1PolicyTargetKey.constructFromObject(data['policyTargetKey']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromePolicyVersionsV1ResolveRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromePolicyVersionsV1ResolveRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pageToken'] && !(typeof data['pageToken'] === 'string' || data['pageToken'] instanceof String)) {
            throw new Error("Expected the field `pageToken` to be a primitive type in the JSON string but got " + data['pageToken']);
        }
        // ensure the json data is a string
        if (data['policySchemaFilter'] && !(typeof data['policySchemaFilter'] === 'string' || data['policySchemaFilter'] instanceof String)) {
            throw new Error("Expected the field `policySchemaFilter` to be a primitive type in the JSON string but got " + data['policySchemaFilter']);
        }
        // validate the optional field `policyTargetKey`
        if (data['policyTargetKey']) { // data not null
          GoogleChromePolicyVersionsV1PolicyTargetKey.validateJSON(data['policyTargetKey']);
        }

        return true;
    }


}



/**
 * The maximum number of policies to return, defaults to 100 and has a maximum of 1000.
 * @member {Number} pageSize
 */
GoogleChromePolicyVersionsV1ResolveRequest.prototype['pageSize'] = undefined;

/**
 * The page token used to retrieve a specific page of the request.
 * @member {String} pageToken
 */
GoogleChromePolicyVersionsV1ResolveRequest.prototype['pageToken'] = undefined;

/**
 * Required. The schema filter to apply to the resolve request. Specify a schema name to view a particular schema, for example: chrome.users.ShowLogoutButton Wildcards are supported, but only in the leaf portion of the schema name. Wildcards cannot be used in namespace directly. Please read https://developers.google.com/chrome/policy/guides/policy-schemas for details on schema namespaces. For example: Valid: \"chrome.users.*\", \"chrome.users.apps.*\", \"chrome.printers.*\" Invalid: \"*\", \"*.users\", \"chrome.*\", \"chrome.*.apps.*\"
 * @member {String} policySchemaFilter
 */
GoogleChromePolicyVersionsV1ResolveRequest.prototype['policySchemaFilter'] = undefined;

/**
 * @member {module:model/GoogleChromePolicyVersionsV1PolicyTargetKey} policyTargetKey
 */
GoogleChromePolicyVersionsV1ResolveRequest.prototype['policyTargetKey'] = undefined;






export default GoogleChromePolicyVersionsV1ResolveRequest;

