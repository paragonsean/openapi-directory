# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GceShieldedInstanceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_integrity_monitoring: bool=None, enable_secure_boot: bool=None, enable_vtpm: bool=None):
        """GceShieldedInstanceConfig - a model defined in OpenAPI

        :param enable_integrity_monitoring: The enable_integrity_monitoring of this GceShieldedInstanceConfig.
        :param enable_secure_boot: The enable_secure_boot of this GceShieldedInstanceConfig.
        :param enable_vtpm: The enable_vtpm of this GceShieldedInstanceConfig.
        """
        self.openapi_types = {
            'enable_integrity_monitoring': bool,
            'enable_secure_boot': bool,
            'enable_vtpm': bool
        }

        self.attribute_map = {
            'enable_integrity_monitoring': 'enableIntegrityMonitoring',
            'enable_secure_boot': 'enableSecureBoot',
            'enable_vtpm': 'enableVtpm'
        }

        self._enable_integrity_monitoring = enable_integrity_monitoring
        self._enable_secure_boot = enable_secure_boot
        self._enable_vtpm = enable_vtpm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GceShieldedInstanceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GceShieldedInstanceConfig of this GceShieldedInstanceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_integrity_monitoring(self):
        """Gets the enable_integrity_monitoring of this GceShieldedInstanceConfig.

        Optional. Whether the instance has integrity monitoring enabled.

        :return: The enable_integrity_monitoring of this GceShieldedInstanceConfig.
        :rtype: bool
        """
        return self._enable_integrity_monitoring

    @enable_integrity_monitoring.setter
    def enable_integrity_monitoring(self, enable_integrity_monitoring):
        """Sets the enable_integrity_monitoring of this GceShieldedInstanceConfig.

        Optional. Whether the instance has integrity monitoring enabled.

        :param enable_integrity_monitoring: The enable_integrity_monitoring of this GceShieldedInstanceConfig.
        :type enable_integrity_monitoring: bool
        """

        self._enable_integrity_monitoring = enable_integrity_monitoring

    @property
    def enable_secure_boot(self):
        """Gets the enable_secure_boot of this GceShieldedInstanceConfig.

        Optional. Whether the instance has Secure Boot enabled.

        :return: The enable_secure_boot of this GceShieldedInstanceConfig.
        :rtype: bool
        """
        return self._enable_secure_boot

    @enable_secure_boot.setter
    def enable_secure_boot(self, enable_secure_boot):
        """Sets the enable_secure_boot of this GceShieldedInstanceConfig.

        Optional. Whether the instance has Secure Boot enabled.

        :param enable_secure_boot: The enable_secure_boot of this GceShieldedInstanceConfig.
        :type enable_secure_boot: bool
        """

        self._enable_secure_boot = enable_secure_boot

    @property
    def enable_vtpm(self):
        """Gets the enable_vtpm of this GceShieldedInstanceConfig.

        Optional. Whether the instance has the vTPM enabled.

        :return: The enable_vtpm of this GceShieldedInstanceConfig.
        :rtype: bool
        """
        return self._enable_vtpm

    @enable_vtpm.setter
    def enable_vtpm(self, enable_vtpm):
        """Sets the enable_vtpm of this GceShieldedInstanceConfig.

        Optional. Whether the instance has the vTPM enabled.

        :param enable_vtpm: The enable_vtpm of this GceShieldedInstanceConfig.
        :type enable_vtpm: bool
        """

        self._enable_vtpm = enable_vtpm
