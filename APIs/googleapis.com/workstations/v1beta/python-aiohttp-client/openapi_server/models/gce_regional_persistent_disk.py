# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GceRegionalPersistentDisk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk_type: str=None, fs_type: str=None, reclaim_policy: str=None, size_gb: int=None, source_snapshot: str=None):
        """GceRegionalPersistentDisk - a model defined in OpenAPI

        :param disk_type: The disk_type of this GceRegionalPersistentDisk.
        :param fs_type: The fs_type of this GceRegionalPersistentDisk.
        :param reclaim_policy: The reclaim_policy of this GceRegionalPersistentDisk.
        :param size_gb: The size_gb of this GceRegionalPersistentDisk.
        :param source_snapshot: The source_snapshot of this GceRegionalPersistentDisk.
        """
        self.openapi_types = {
            'disk_type': str,
            'fs_type': str,
            'reclaim_policy': str,
            'size_gb': int,
            'source_snapshot': str
        }

        self.attribute_map = {
            'disk_type': 'diskType',
            'fs_type': 'fsType',
            'reclaim_policy': 'reclaimPolicy',
            'size_gb': 'sizeGb',
            'source_snapshot': 'sourceSnapshot'
        }

        self._disk_type = disk_type
        self._fs_type = fs_type
        self._reclaim_policy = reclaim_policy
        self._size_gb = size_gb
        self._source_snapshot = source_snapshot

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GceRegionalPersistentDisk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GceRegionalPersistentDisk of this GceRegionalPersistentDisk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk_type(self):
        """Gets the disk_type of this GceRegionalPersistentDisk.

        Optional. The [type of the persistent disk](https://cloud.google.com/compute/docs/disks#disk-types) for the home directory. Defaults to `\"pd-standard\"`.

        :return: The disk_type of this GceRegionalPersistentDisk.
        :rtype: str
        """
        return self._disk_type

    @disk_type.setter
    def disk_type(self, disk_type):
        """Sets the disk_type of this GceRegionalPersistentDisk.

        Optional. The [type of the persistent disk](https://cloud.google.com/compute/docs/disks#disk-types) for the home directory. Defaults to `\"pd-standard\"`.

        :param disk_type: The disk_type of this GceRegionalPersistentDisk.
        :type disk_type: str
        """

        self._disk_type = disk_type

    @property
    def fs_type(self):
        """Gets the fs_type of this GceRegionalPersistentDisk.

        Optional. Type of file system that the disk should be formatted with. The workstation image must support this file system type. Must be empty if source_snapshot is set. Defaults to `\"ext4\"`.

        :return: The fs_type of this GceRegionalPersistentDisk.
        :rtype: str
        """
        return self._fs_type

    @fs_type.setter
    def fs_type(self, fs_type):
        """Sets the fs_type of this GceRegionalPersistentDisk.

        Optional. Type of file system that the disk should be formatted with. The workstation image must support this file system type. Must be empty if source_snapshot is set. Defaults to `\"ext4\"`.

        :param fs_type: The fs_type of this GceRegionalPersistentDisk.
        :type fs_type: str
        """

        self._fs_type = fs_type

    @property
    def reclaim_policy(self):
        """Gets the reclaim_policy of this GceRegionalPersistentDisk.

        Optional. Whether the persistent disk should be deleted when the workstation is deleted. Valid values are `DELETE` and `RETAIN`. Defaults to `DELETE`.

        :return: The reclaim_policy of this GceRegionalPersistentDisk.
        :rtype: str
        """
        return self._reclaim_policy

    @reclaim_policy.setter
    def reclaim_policy(self, reclaim_policy):
        """Sets the reclaim_policy of this GceRegionalPersistentDisk.

        Optional. Whether the persistent disk should be deleted when the workstation is deleted. Valid values are `DELETE` and `RETAIN`. Defaults to `DELETE`.

        :param reclaim_policy: The reclaim_policy of this GceRegionalPersistentDisk.
        :type reclaim_policy: str
        """
        allowed_values = ["RECLAIM_POLICY_UNSPECIFIED", "DELETE", "RETAIN"]  # noqa: E501
        if reclaim_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `reclaim_policy` ({0}), must be one of {1}"
                .format(reclaim_policy, allowed_values)
            )

        self._reclaim_policy = reclaim_policy

    @property
    def size_gb(self):
        """Gets the size_gb of this GceRegionalPersistentDisk.

        Optional. The GB capacity of a persistent home directory for each workstation created with this configuration. Must be empty if source_snapshot is set. Valid values are `10`, `50`, `100`, `200`, `500`, or `1000`. Defaults to `200`. If less than `200` GB, the disk_type must be `\"pd-balanced\"` or `\"pd-ssd\"`.

        :return: The size_gb of this GceRegionalPersistentDisk.
        :rtype: int
        """
        return self._size_gb

    @size_gb.setter
    def size_gb(self, size_gb):
        """Sets the size_gb of this GceRegionalPersistentDisk.

        Optional. The GB capacity of a persistent home directory for each workstation created with this configuration. Must be empty if source_snapshot is set. Valid values are `10`, `50`, `100`, `200`, `500`, or `1000`. Defaults to `200`. If less than `200` GB, the disk_type must be `\"pd-balanced\"` or `\"pd-ssd\"`.

        :param size_gb: The size_gb of this GceRegionalPersistentDisk.
        :type size_gb: int
        """

        self._size_gb = size_gb

    @property
    def source_snapshot(self):
        """Gets the source_snapshot of this GceRegionalPersistentDisk.

        Optional. Name of the snapshot to use as the source for the disk. If set, size_gb and fs_type must be empty.

        :return: The source_snapshot of this GceRegionalPersistentDisk.
        :rtype: str
        """
        return self._source_snapshot

    @source_snapshot.setter
    def source_snapshot(self, source_snapshot):
        """Sets the source_snapshot of this GceRegionalPersistentDisk.

        Optional. Name of the snapshot to use as the source for the disk. If set, size_gb and fs_type must be empty.

        :param source_snapshot: The source_snapshot of this GceRegionalPersistentDisk.
        :type source_snapshot: str
        """

        self._source_snapshot = source_snapshot
