# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Workstation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, create_time: str=None, delete_time: str=None, display_name: str=None, env: Dict[str, str]=None, etag: str=None, host: str=None, kms_key: str=None, labels: Dict[str, str]=None, name: str=None, reconciling: bool=None, start_time: str=None, state: str=None, uid: str=None, update_time: str=None):
        """Workstation - a model defined in OpenAPI

        :param annotations: The annotations of this Workstation.
        :param create_time: The create_time of this Workstation.
        :param delete_time: The delete_time of this Workstation.
        :param display_name: The display_name of this Workstation.
        :param env: The env of this Workstation.
        :param etag: The etag of this Workstation.
        :param host: The host of this Workstation.
        :param kms_key: The kms_key of this Workstation.
        :param labels: The labels of this Workstation.
        :param name: The name of this Workstation.
        :param reconciling: The reconciling of this Workstation.
        :param start_time: The start_time of this Workstation.
        :param state: The state of this Workstation.
        :param uid: The uid of this Workstation.
        :param update_time: The update_time of this Workstation.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'create_time': str,
            'delete_time': str,
            'display_name': str,
            'env': Dict[str, str],
            'etag': str,
            'host': str,
            'kms_key': str,
            'labels': Dict[str, str],
            'name': str,
            'reconciling': bool,
            'start_time': str,
            'state': str,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'display_name': 'displayName',
            'env': 'env',
            'etag': 'etag',
            'host': 'host',
            'kms_key': 'kmsKey',
            'labels': 'labels',
            'name': 'name',
            'reconciling': 'reconciling',
            'start_time': 'startTime',
            'state': 'state',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._annotations = annotations
        self._create_time = create_time
        self._delete_time = delete_time
        self._display_name = display_name
        self._env = env
        self._etag = etag
        self._host = host
        self._kms_key = kms_key
        self._labels = labels
        self._name = name
        self._reconciling = reconciling
        self._start_time = start_time
        self._state = state
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Workstation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Workstation of this Workstation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this Workstation.

        Optional. Client-specified annotations.

        :return: The annotations of this Workstation.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Workstation.

        Optional. Client-specified annotations.

        :param annotations: The annotations of this Workstation.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def create_time(self):
        """Gets the create_time of this Workstation.

        Output only. Time when this workstation was created.

        :return: The create_time of this Workstation.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Workstation.

        Output only. Time when this workstation was created.

        :param create_time: The create_time of this Workstation.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this Workstation.

        Output only. Time when this workstation was soft-deleted.

        :return: The delete_time of this Workstation.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this Workstation.

        Output only. Time when this workstation was soft-deleted.

        :param delete_time: The delete_time of this Workstation.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def display_name(self):
        """Gets the display_name of this Workstation.

        Optional. Human-readable name for this workstation.

        :return: The display_name of this Workstation.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Workstation.

        Optional. Human-readable name for this workstation.

        :param display_name: The display_name of this Workstation.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def env(self):
        """Gets the env of this Workstation.

        Optional. Environment variables passed to the workstation container's entrypoint.

        :return: The env of this Workstation.
        :rtype: Dict[str, str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this Workstation.

        Optional. Environment variables passed to the workstation container's entrypoint.

        :param env: The env of this Workstation.
        :type env: Dict[str, str]
        """

        self._env = env

    @property
    def etag(self):
        """Gets the etag of this Workstation.

        Optional. Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding.

        :return: The etag of this Workstation.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Workstation.

        Optional. Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding.

        :param etag: The etag of this Workstation.
        :type etag: str
        """

        self._etag = etag

    @property
    def host(self):
        """Gets the host of this Workstation.

        Output only. Host to which clients can send HTTPS traffic that will be received by the workstation. Authorized traffic will be received to the workstation as HTTP on port 80. To send traffic to a different port, clients may prefix the host with the destination port in the format `{port}-{host}`.

        :return: The host of this Workstation.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Workstation.

        Output only. Host to which clients can send HTTPS traffic that will be received by the workstation. Authorized traffic will be received to the workstation as HTTP on port 80. To send traffic to a different port, clients may prefix the host with the destination port in the format `{port}-{host}`.

        :param host: The host of this Workstation.
        :type host: str
        """

        self._host = host

    @property
    def kms_key(self):
        """Gets the kms_key of this Workstation.

        Output only. The name of the Google Cloud KMS encryption key used to encrypt this workstation. The KMS key can only be configured in the WorkstationConfig. The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`.

        :return: The kms_key of this Workstation.
        :rtype: str
        """
        return self._kms_key

    @kms_key.setter
    def kms_key(self, kms_key):
        """Sets the kms_key of this Workstation.

        Output only. The name of the Google Cloud KMS encryption key used to encrypt this workstation. The KMS key can only be configured in the WorkstationConfig. The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`.

        :param kms_key: The kms_key of this Workstation.
        :type kms_key: str
        """

        self._kms_key = kms_key

    @property
    def labels(self):
        """Gets the labels of this Workstation.

        Optional. [Labels](https://cloud.google.com/workstations/docs/label-resources) that are applied to the workstation and that are also propagated to the underlying Compute Engine resources.

        :return: The labels of this Workstation.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Workstation.

        Optional. [Labels](https://cloud.google.com/workstations/docs/label-resources) that are applied to the workstation and that are also propagated to the underlying Compute Engine resources.

        :param labels: The labels of this Workstation.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Workstation.

        Identifier. Full name of this workstation.

        :return: The name of this Workstation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Workstation.

        Identifier. Full name of this workstation.

        :param name: The name of this Workstation.
        :type name: str
        """

        self._name = name

    @property
    def reconciling(self):
        """Gets the reconciling of this Workstation.

        Output only. Indicates whether this workstation is currently being updated to match its intended state.

        :return: The reconciling of this Workstation.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this Workstation.

        Output only. Indicates whether this workstation is currently being updated to match its intended state.

        :param reconciling: The reconciling of this Workstation.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def start_time(self):
        """Gets the start_time of this Workstation.

        Output only. Time when this workstation was most recently successfully started, regardless of the workstation's initial state.

        :return: The start_time of this Workstation.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Workstation.

        Output only. Time when this workstation was most recently successfully started, regardless of the workstation's initial state.

        :param start_time: The start_time of this Workstation.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this Workstation.

        Output only. Current state of the workstation.

        :return: The state of this Workstation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Workstation.

        Output only. Current state of the workstation.

        :param state: The state of this Workstation.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "STATE_STARTING", "STATE_RUNNING", "STATE_STOPPING", "STATE_STOPPED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def uid(self):
        """Gets the uid of this Workstation.

        Output only. A system-assigned unique identifier for this workstation.

        :return: The uid of this Workstation.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Workstation.

        Output only. A system-assigned unique identifier for this workstation.

        :param uid: The uid of this Workstation.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Workstation.

        Output only. Time when this workstation was most recently updated.

        :return: The update_time of this Workstation.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Workstation.

        Output only. Time when this workstation was most recently updated.

        :param update_time: The update_time of this Workstation.
        :type update_time: str
        """

        self._update_time = update_time
