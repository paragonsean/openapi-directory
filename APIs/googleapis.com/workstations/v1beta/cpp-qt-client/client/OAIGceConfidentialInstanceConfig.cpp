/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGceConfidentialInstanceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGceConfidentialInstanceConfig::OAIGceConfidentialInstanceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGceConfidentialInstanceConfig::OAIGceConfidentialInstanceConfig() {
    this->initializeModel();
}

OAIGceConfidentialInstanceConfig::~OAIGceConfidentialInstanceConfig() {}

void OAIGceConfidentialInstanceConfig::initializeModel() {

    m_enable_confidential_compute_isSet = false;
    m_enable_confidential_compute_isValid = false;
}

void OAIGceConfidentialInstanceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGceConfidentialInstanceConfig::fromJsonObject(QJsonObject json) {

    m_enable_confidential_compute_isValid = ::OpenAPI::fromJsonValue(m_enable_confidential_compute, json[QString("enableConfidentialCompute")]);
    m_enable_confidential_compute_isSet = !json[QString("enableConfidentialCompute")].isNull() && m_enable_confidential_compute_isValid;
}

QString OAIGceConfidentialInstanceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGceConfidentialInstanceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_confidential_compute_isSet) {
        obj.insert(QString("enableConfidentialCompute"), ::OpenAPI::toJsonValue(m_enable_confidential_compute));
    }
    return obj;
}

bool OAIGceConfidentialInstanceConfig::isEnableConfidentialCompute() const {
    return m_enable_confidential_compute;
}
void OAIGceConfidentialInstanceConfig::setEnableConfidentialCompute(const bool &enable_confidential_compute) {
    m_enable_confidential_compute = enable_confidential_compute;
    m_enable_confidential_compute_isSet = true;
}

bool OAIGceConfidentialInstanceConfig::is_enable_confidential_compute_Set() const{
    return m_enable_confidential_compute_isSet;
}

bool OAIGceConfidentialInstanceConfig::is_enable_confidential_compute_Valid() const{
    return m_enable_confidential_compute_isValid;
}

bool OAIGceConfidentialInstanceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_confidential_compute_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGceConfidentialInstanceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
