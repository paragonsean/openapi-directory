/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGceShieldedInstanceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGceShieldedInstanceConfig::OAIGceShieldedInstanceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGceShieldedInstanceConfig::OAIGceShieldedInstanceConfig() {
    this->initializeModel();
}

OAIGceShieldedInstanceConfig::~OAIGceShieldedInstanceConfig() {}

void OAIGceShieldedInstanceConfig::initializeModel() {

    m_enable_integrity_monitoring_isSet = false;
    m_enable_integrity_monitoring_isValid = false;

    m_enable_secure_boot_isSet = false;
    m_enable_secure_boot_isValid = false;

    m_enable_vtpm_isSet = false;
    m_enable_vtpm_isValid = false;
}

void OAIGceShieldedInstanceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGceShieldedInstanceConfig::fromJsonObject(QJsonObject json) {

    m_enable_integrity_monitoring_isValid = ::OpenAPI::fromJsonValue(m_enable_integrity_monitoring, json[QString("enableIntegrityMonitoring")]);
    m_enable_integrity_monitoring_isSet = !json[QString("enableIntegrityMonitoring")].isNull() && m_enable_integrity_monitoring_isValid;

    m_enable_secure_boot_isValid = ::OpenAPI::fromJsonValue(m_enable_secure_boot, json[QString("enableSecureBoot")]);
    m_enable_secure_boot_isSet = !json[QString("enableSecureBoot")].isNull() && m_enable_secure_boot_isValid;

    m_enable_vtpm_isValid = ::OpenAPI::fromJsonValue(m_enable_vtpm, json[QString("enableVtpm")]);
    m_enable_vtpm_isSet = !json[QString("enableVtpm")].isNull() && m_enable_vtpm_isValid;
}

QString OAIGceShieldedInstanceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGceShieldedInstanceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_integrity_monitoring_isSet) {
        obj.insert(QString("enableIntegrityMonitoring"), ::OpenAPI::toJsonValue(m_enable_integrity_monitoring));
    }
    if (m_enable_secure_boot_isSet) {
        obj.insert(QString("enableSecureBoot"), ::OpenAPI::toJsonValue(m_enable_secure_boot));
    }
    if (m_enable_vtpm_isSet) {
        obj.insert(QString("enableVtpm"), ::OpenAPI::toJsonValue(m_enable_vtpm));
    }
    return obj;
}

bool OAIGceShieldedInstanceConfig::isEnableIntegrityMonitoring() const {
    return m_enable_integrity_monitoring;
}
void OAIGceShieldedInstanceConfig::setEnableIntegrityMonitoring(const bool &enable_integrity_monitoring) {
    m_enable_integrity_monitoring = enable_integrity_monitoring;
    m_enable_integrity_monitoring_isSet = true;
}

bool OAIGceShieldedInstanceConfig::is_enable_integrity_monitoring_Set() const{
    return m_enable_integrity_monitoring_isSet;
}

bool OAIGceShieldedInstanceConfig::is_enable_integrity_monitoring_Valid() const{
    return m_enable_integrity_monitoring_isValid;
}

bool OAIGceShieldedInstanceConfig::isEnableSecureBoot() const {
    return m_enable_secure_boot;
}
void OAIGceShieldedInstanceConfig::setEnableSecureBoot(const bool &enable_secure_boot) {
    m_enable_secure_boot = enable_secure_boot;
    m_enable_secure_boot_isSet = true;
}

bool OAIGceShieldedInstanceConfig::is_enable_secure_boot_Set() const{
    return m_enable_secure_boot_isSet;
}

bool OAIGceShieldedInstanceConfig::is_enable_secure_boot_Valid() const{
    return m_enable_secure_boot_isValid;
}

bool OAIGceShieldedInstanceConfig::isEnableVtpm() const {
    return m_enable_vtpm;
}
void OAIGceShieldedInstanceConfig::setEnableVtpm(const bool &enable_vtpm) {
    m_enable_vtpm = enable_vtpm;
    m_enable_vtpm_isSet = true;
}

bool OAIGceShieldedInstanceConfig::is_enable_vtpm_Set() const{
    return m_enable_vtpm_isSet;
}

bool OAIGceShieldedInstanceConfig::is_enable_vtpm_Valid() const{
    return m_enable_vtpm_isValid;
}

bool OAIGceShieldedInstanceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_integrity_monitoring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_secure_boot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_vtpm_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGceShieldedInstanceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
