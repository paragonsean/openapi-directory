/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEphemeralDirectory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEphemeralDirectory::OAIEphemeralDirectory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEphemeralDirectory::OAIEphemeralDirectory() {
    this->initializeModel();
}

OAIEphemeralDirectory::~OAIEphemeralDirectory() {}

void OAIEphemeralDirectory::initializeModel() {

    m_gce_pd_isSet = false;
    m_gce_pd_isValid = false;

    m_mount_path_isSet = false;
    m_mount_path_isValid = false;
}

void OAIEphemeralDirectory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEphemeralDirectory::fromJsonObject(QJsonObject json) {

    m_gce_pd_isValid = ::OpenAPI::fromJsonValue(m_gce_pd, json[QString("gcePd")]);
    m_gce_pd_isSet = !json[QString("gcePd")].isNull() && m_gce_pd_isValid;

    m_mount_path_isValid = ::OpenAPI::fromJsonValue(m_mount_path, json[QString("mountPath")]);
    m_mount_path_isSet = !json[QString("mountPath")].isNull() && m_mount_path_isValid;
}

QString OAIEphemeralDirectory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEphemeralDirectory::asJsonObject() const {
    QJsonObject obj;
    if (m_gce_pd.isSet()) {
        obj.insert(QString("gcePd"), ::OpenAPI::toJsonValue(m_gce_pd));
    }
    if (m_mount_path_isSet) {
        obj.insert(QString("mountPath"), ::OpenAPI::toJsonValue(m_mount_path));
    }
    return obj;
}

OAIGcePersistentDisk OAIEphemeralDirectory::getGcePd() const {
    return m_gce_pd;
}
void OAIEphemeralDirectory::setGcePd(const OAIGcePersistentDisk &gce_pd) {
    m_gce_pd = gce_pd;
    m_gce_pd_isSet = true;
}

bool OAIEphemeralDirectory::is_gce_pd_Set() const{
    return m_gce_pd_isSet;
}

bool OAIEphemeralDirectory::is_gce_pd_Valid() const{
    return m_gce_pd_isValid;
}

QString OAIEphemeralDirectory::getMountPath() const {
    return m_mount_path;
}
void OAIEphemeralDirectory::setMountPath(const QString &mount_path) {
    m_mount_path = mount_path;
    m_mount_path_isSet = true;
}

bool OAIEphemeralDirectory::is_mount_path_Set() const{
    return m_mount_path_isSet;
}

bool OAIEphemeralDirectory::is_mount_path_Valid() const{
    return m_mount_path_isValid;
}

bool OAIEphemeralDirectory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gce_pd.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEphemeralDirectory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
