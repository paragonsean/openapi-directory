/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWorkstationConfig.h
 *
 * A workstation configuration resource in the Cloud Workstations API. Workstation configurations act as templates for workstations. The workstation configuration defines details such as the workstation virtual machine (VM) instance type, persistent storage, container image defining environment, which IDE or Code Editor to use, and more. Administrators and platform teams can also use [Identity and Access Management (IAM)](https://cloud.google.com/iam/docs/overview) rules to grant access to teams or to individual developers.
 */

#ifndef OAIWorkstationConfig_H
#define OAIWorkstationConfig_H

#include <QJsonObject>

#include "OAIContainer.h"
#include "OAICustomerEncryptionKey.h"
#include "OAIEphemeralDirectory.h"
#include "OAIHost.h"
#include "OAIPersistentDirectory.h"
#include "OAIReadinessCheck.h"
#include "OAIStatus.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStatus;
class OAIContainer;
class OAICustomerEncryptionKey;
class OAIEphemeralDirectory;
class OAIHost;
class OAIPersistentDirectory;
class OAIReadinessCheck;

class OAIWorkstationConfig : public OAIObject {
public:
    OAIWorkstationConfig();
    OAIWorkstationConfig(QString json);
    ~OAIWorkstationConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getAnnotations() const;
    void setAnnotations(const QMap<QString, QString> &annotations);
    bool is_annotations_Set() const;
    bool is_annotations_Valid() const;

    QList<OAIStatus> getConditions() const;
    void setConditions(const QList<OAIStatus> &conditions);
    bool is_conditions_Set() const;
    bool is_conditions_Valid() const;

    OAIContainer getContainer() const;
    void setContainer(const OAIContainer &container);
    bool is_container_Set() const;
    bool is_container_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    bool isDegraded() const;
    void setDegraded(const bool &degraded);
    bool is_degraded_Set() const;
    bool is_degraded_Valid() const;

    QString getDeleteTime() const;
    void setDeleteTime(const QString &delete_time);
    bool is_delete_time_Set() const;
    bool is_delete_time_Valid() const;

    bool isDisableTcpConnections() const;
    void setDisableTcpConnections(const bool &disable_tcp_connections);
    bool is_disable_tcp_connections_Set() const;
    bool is_disable_tcp_connections_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    bool isEnableAuditAgent() const;
    void setEnableAuditAgent(const bool &enable_audit_agent);
    bool is_enable_audit_agent_Set() const;
    bool is_enable_audit_agent_Valid() const;

    OAICustomerEncryptionKey getEncryptionKey() const;
    void setEncryptionKey(const OAICustomerEncryptionKey &encryption_key);
    bool is_encryption_key_Set() const;
    bool is_encryption_key_Valid() const;

    QList<OAIEphemeralDirectory> getEphemeralDirectories() const;
    void setEphemeralDirectories(const QList<OAIEphemeralDirectory> &ephemeral_directories);
    bool is_ephemeral_directories_Set() const;
    bool is_ephemeral_directories_Valid() const;

    QString getEtag() const;
    void setEtag(const QString &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    OAIHost getHost() const;
    void setHost(const OAIHost &host);
    bool is_host_Set() const;
    bool is_host_Valid() const;

    QString getIdleTimeout() const;
    void setIdleTimeout(const QString &idle_timeout);
    bool is_idle_timeout_Set() const;
    bool is_idle_timeout_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIPersistentDirectory> getPersistentDirectories() const;
    void setPersistentDirectories(const QList<OAIPersistentDirectory> &persistent_directories);
    bool is_persistent_directories_Set() const;
    bool is_persistent_directories_Valid() const;

    QList<OAIReadinessCheck> getReadinessChecks() const;
    void setReadinessChecks(const QList<OAIReadinessCheck> &readiness_checks);
    bool is_readiness_checks_Set() const;
    bool is_readiness_checks_Valid() const;

    bool isReconciling() const;
    void setReconciling(const bool &reconciling);
    bool is_reconciling_Set() const;
    bool is_reconciling_Valid() const;

    QList<QString> getReplicaZones() const;
    void setReplicaZones(const QList<QString> &replica_zones);
    bool is_replica_zones_Set() const;
    bool is_replica_zones_Valid() const;

    QString getRunningTimeout() const;
    void setRunningTimeout(const QString &running_timeout);
    bool is_running_timeout_Set() const;
    bool is_running_timeout_Valid() const;

    QString getUid() const;
    void setUid(const QString &uid);
    bool is_uid_Set() const;
    bool is_uid_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_annotations;
    bool m_annotations_isSet;
    bool m_annotations_isValid;

    QList<OAIStatus> m_conditions;
    bool m_conditions_isSet;
    bool m_conditions_isValid;

    OAIContainer m_container;
    bool m_container_isSet;
    bool m_container_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    bool m_degraded;
    bool m_degraded_isSet;
    bool m_degraded_isValid;

    QString m_delete_time;
    bool m_delete_time_isSet;
    bool m_delete_time_isValid;

    bool m_disable_tcp_connections;
    bool m_disable_tcp_connections_isSet;
    bool m_disable_tcp_connections_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    bool m_enable_audit_agent;
    bool m_enable_audit_agent_isSet;
    bool m_enable_audit_agent_isValid;

    OAICustomerEncryptionKey m_encryption_key;
    bool m_encryption_key_isSet;
    bool m_encryption_key_isValid;

    QList<OAIEphemeralDirectory> m_ephemeral_directories;
    bool m_ephemeral_directories_isSet;
    bool m_ephemeral_directories_isValid;

    QString m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    OAIHost m_host;
    bool m_host_isSet;
    bool m_host_isValid;

    QString m_idle_timeout;
    bool m_idle_timeout_isSet;
    bool m_idle_timeout_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIPersistentDirectory> m_persistent_directories;
    bool m_persistent_directories_isSet;
    bool m_persistent_directories_isValid;

    QList<OAIReadinessCheck> m_readiness_checks;
    bool m_readiness_checks_isSet;
    bool m_readiness_checks_isValid;

    bool m_reconciling;
    bool m_reconciling_isSet;
    bool m_reconciling_isValid;

    QList<QString> m_replica_zones;
    bool m_replica_zones_isSet;
    bool m_replica_zones_isValid;

    QString m_running_timeout;
    bool m_running_timeout_isSet;
    bool m_running_timeout_isValid;

    QString m_uid;
    bool m_uid_isSet;
    bool m_uid_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWorkstationConfig)

#endif // OAIWorkstationConfig_H
