/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkstationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkstationConfig::OAIWorkstationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkstationConfig::OAIWorkstationConfig() {
    this->initializeModel();
}

OAIWorkstationConfig::~OAIWorkstationConfig() {}

void OAIWorkstationConfig::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_degraded_isSet = false;
    m_degraded_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_disable_tcp_connections_isSet = false;
    m_disable_tcp_connections_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enable_audit_agent_isSet = false;
    m_enable_audit_agent_isValid = false;

    m_encryption_key_isSet = false;
    m_encryption_key_isValid = false;

    m_ephemeral_directories_isSet = false;
    m_ephemeral_directories_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_idle_timeout_isSet = false;
    m_idle_timeout_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_persistent_directories_isSet = false;
    m_persistent_directories_isValid = false;

    m_readiness_checks_isSet = false;
    m_readiness_checks_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_replica_zones_isSet = false;
    m_replica_zones_isValid = false;

    m_running_timeout_isSet = false;
    m_running_timeout_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIWorkstationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkstationConfig::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_degraded_isValid = ::OpenAPI::fromJsonValue(m_degraded, json[QString("degraded")]);
    m_degraded_isSet = !json[QString("degraded")].isNull() && m_degraded_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_disable_tcp_connections_isValid = ::OpenAPI::fromJsonValue(m_disable_tcp_connections, json[QString("disableTcpConnections")]);
    m_disable_tcp_connections_isSet = !json[QString("disableTcpConnections")].isNull() && m_disable_tcp_connections_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_enable_audit_agent_isValid = ::OpenAPI::fromJsonValue(m_enable_audit_agent, json[QString("enableAuditAgent")]);
    m_enable_audit_agent_isSet = !json[QString("enableAuditAgent")].isNull() && m_enable_audit_agent_isValid;

    m_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_encryption_key, json[QString("encryptionKey")]);
    m_encryption_key_isSet = !json[QString("encryptionKey")].isNull() && m_encryption_key_isValid;

    m_ephemeral_directories_isValid = ::OpenAPI::fromJsonValue(m_ephemeral_directories, json[QString("ephemeralDirectories")]);
    m_ephemeral_directories_isSet = !json[QString("ephemeralDirectories")].isNull() && m_ephemeral_directories_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_idle_timeout_isValid = ::OpenAPI::fromJsonValue(m_idle_timeout, json[QString("idleTimeout")]);
    m_idle_timeout_isSet = !json[QString("idleTimeout")].isNull() && m_idle_timeout_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_persistent_directories_isValid = ::OpenAPI::fromJsonValue(m_persistent_directories, json[QString("persistentDirectories")]);
    m_persistent_directories_isSet = !json[QString("persistentDirectories")].isNull() && m_persistent_directories_isValid;

    m_readiness_checks_isValid = ::OpenAPI::fromJsonValue(m_readiness_checks, json[QString("readinessChecks")]);
    m_readiness_checks_isSet = !json[QString("readinessChecks")].isNull() && m_readiness_checks_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_replica_zones_isValid = ::OpenAPI::fromJsonValue(m_replica_zones, json[QString("replicaZones")]);
    m_replica_zones_isSet = !json[QString("replicaZones")].isNull() && m_replica_zones_isValid;

    m_running_timeout_isValid = ::OpenAPI::fromJsonValue(m_running_timeout, json[QString("runningTimeout")]);
    m_running_timeout_isSet = !json[QString("runningTimeout")].isNull() && m_running_timeout_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIWorkstationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkstationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_container.isSet()) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_degraded_isSet) {
        obj.insert(QString("degraded"), ::OpenAPI::toJsonValue(m_degraded));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_disable_tcp_connections_isSet) {
        obj.insert(QString("disableTcpConnections"), ::OpenAPI::toJsonValue(m_disable_tcp_connections));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enable_audit_agent_isSet) {
        obj.insert(QString("enableAuditAgent"), ::OpenAPI::toJsonValue(m_enable_audit_agent));
    }
    if (m_encryption_key.isSet()) {
        obj.insert(QString("encryptionKey"), ::OpenAPI::toJsonValue(m_encryption_key));
    }
    if (m_ephemeral_directories.size() > 0) {
        obj.insert(QString("ephemeralDirectories"), ::OpenAPI::toJsonValue(m_ephemeral_directories));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_host.isSet()) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_idle_timeout_isSet) {
        obj.insert(QString("idleTimeout"), ::OpenAPI::toJsonValue(m_idle_timeout));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_persistent_directories.size() > 0) {
        obj.insert(QString("persistentDirectories"), ::OpenAPI::toJsonValue(m_persistent_directories));
    }
    if (m_readiness_checks.size() > 0) {
        obj.insert(QString("readinessChecks"), ::OpenAPI::toJsonValue(m_readiness_checks));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_replica_zones.size() > 0) {
        obj.insert(QString("replicaZones"), ::OpenAPI::toJsonValue(m_replica_zones));
    }
    if (m_running_timeout_isSet) {
        obj.insert(QString("runningTimeout"), ::OpenAPI::toJsonValue(m_running_timeout));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QMap<QString, QString> OAIWorkstationConfig::getAnnotations() const {
    return m_annotations;
}
void OAIWorkstationConfig::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIWorkstationConfig::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIWorkstationConfig::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QList<OAIStatus> OAIWorkstationConfig::getConditions() const {
    return m_conditions;
}
void OAIWorkstationConfig::setConditions(const QList<OAIStatus> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIWorkstationConfig::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIWorkstationConfig::is_conditions_Valid() const{
    return m_conditions_isValid;
}

OAIContainer OAIWorkstationConfig::getContainer() const {
    return m_container;
}
void OAIWorkstationConfig::setContainer(const OAIContainer &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIWorkstationConfig::is_container_Set() const{
    return m_container_isSet;
}

bool OAIWorkstationConfig::is_container_Valid() const{
    return m_container_isValid;
}

QString OAIWorkstationConfig::getCreateTime() const {
    return m_create_time;
}
void OAIWorkstationConfig::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIWorkstationConfig::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIWorkstationConfig::is_create_time_Valid() const{
    return m_create_time_isValid;
}

bool OAIWorkstationConfig::isDegraded() const {
    return m_degraded;
}
void OAIWorkstationConfig::setDegraded(const bool &degraded) {
    m_degraded = degraded;
    m_degraded_isSet = true;
}

bool OAIWorkstationConfig::is_degraded_Set() const{
    return m_degraded_isSet;
}

bool OAIWorkstationConfig::is_degraded_Valid() const{
    return m_degraded_isValid;
}

QString OAIWorkstationConfig::getDeleteTime() const {
    return m_delete_time;
}
void OAIWorkstationConfig::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIWorkstationConfig::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIWorkstationConfig::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

bool OAIWorkstationConfig::isDisableTcpConnections() const {
    return m_disable_tcp_connections;
}
void OAIWorkstationConfig::setDisableTcpConnections(const bool &disable_tcp_connections) {
    m_disable_tcp_connections = disable_tcp_connections;
    m_disable_tcp_connections_isSet = true;
}

bool OAIWorkstationConfig::is_disable_tcp_connections_Set() const{
    return m_disable_tcp_connections_isSet;
}

bool OAIWorkstationConfig::is_disable_tcp_connections_Valid() const{
    return m_disable_tcp_connections_isValid;
}

QString OAIWorkstationConfig::getDisplayName() const {
    return m_display_name;
}
void OAIWorkstationConfig::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIWorkstationConfig::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIWorkstationConfig::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIWorkstationConfig::isEnableAuditAgent() const {
    return m_enable_audit_agent;
}
void OAIWorkstationConfig::setEnableAuditAgent(const bool &enable_audit_agent) {
    m_enable_audit_agent = enable_audit_agent;
    m_enable_audit_agent_isSet = true;
}

bool OAIWorkstationConfig::is_enable_audit_agent_Set() const{
    return m_enable_audit_agent_isSet;
}

bool OAIWorkstationConfig::is_enable_audit_agent_Valid() const{
    return m_enable_audit_agent_isValid;
}

OAICustomerEncryptionKey OAIWorkstationConfig::getEncryptionKey() const {
    return m_encryption_key;
}
void OAIWorkstationConfig::setEncryptionKey(const OAICustomerEncryptionKey &encryption_key) {
    m_encryption_key = encryption_key;
    m_encryption_key_isSet = true;
}

bool OAIWorkstationConfig::is_encryption_key_Set() const{
    return m_encryption_key_isSet;
}

bool OAIWorkstationConfig::is_encryption_key_Valid() const{
    return m_encryption_key_isValid;
}

QList<OAIEphemeralDirectory> OAIWorkstationConfig::getEphemeralDirectories() const {
    return m_ephemeral_directories;
}
void OAIWorkstationConfig::setEphemeralDirectories(const QList<OAIEphemeralDirectory> &ephemeral_directories) {
    m_ephemeral_directories = ephemeral_directories;
    m_ephemeral_directories_isSet = true;
}

bool OAIWorkstationConfig::is_ephemeral_directories_Set() const{
    return m_ephemeral_directories_isSet;
}

bool OAIWorkstationConfig::is_ephemeral_directories_Valid() const{
    return m_ephemeral_directories_isValid;
}

QString OAIWorkstationConfig::getEtag() const {
    return m_etag;
}
void OAIWorkstationConfig::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIWorkstationConfig::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIWorkstationConfig::is_etag_Valid() const{
    return m_etag_isValid;
}

OAIHost OAIWorkstationConfig::getHost() const {
    return m_host;
}
void OAIWorkstationConfig::setHost(const OAIHost &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIWorkstationConfig::is_host_Set() const{
    return m_host_isSet;
}

bool OAIWorkstationConfig::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIWorkstationConfig::getIdleTimeout() const {
    return m_idle_timeout;
}
void OAIWorkstationConfig::setIdleTimeout(const QString &idle_timeout) {
    m_idle_timeout = idle_timeout;
    m_idle_timeout_isSet = true;
}

bool OAIWorkstationConfig::is_idle_timeout_Set() const{
    return m_idle_timeout_isSet;
}

bool OAIWorkstationConfig::is_idle_timeout_Valid() const{
    return m_idle_timeout_isValid;
}

QMap<QString, QString> OAIWorkstationConfig::getLabels() const {
    return m_labels;
}
void OAIWorkstationConfig::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIWorkstationConfig::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIWorkstationConfig::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIWorkstationConfig::getName() const {
    return m_name;
}
void OAIWorkstationConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkstationConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkstationConfig::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPersistentDirectory> OAIWorkstationConfig::getPersistentDirectories() const {
    return m_persistent_directories;
}
void OAIWorkstationConfig::setPersistentDirectories(const QList<OAIPersistentDirectory> &persistent_directories) {
    m_persistent_directories = persistent_directories;
    m_persistent_directories_isSet = true;
}

bool OAIWorkstationConfig::is_persistent_directories_Set() const{
    return m_persistent_directories_isSet;
}

bool OAIWorkstationConfig::is_persistent_directories_Valid() const{
    return m_persistent_directories_isValid;
}

QList<OAIReadinessCheck> OAIWorkstationConfig::getReadinessChecks() const {
    return m_readiness_checks;
}
void OAIWorkstationConfig::setReadinessChecks(const QList<OAIReadinessCheck> &readiness_checks) {
    m_readiness_checks = readiness_checks;
    m_readiness_checks_isSet = true;
}

bool OAIWorkstationConfig::is_readiness_checks_Set() const{
    return m_readiness_checks_isSet;
}

bool OAIWorkstationConfig::is_readiness_checks_Valid() const{
    return m_readiness_checks_isValid;
}

bool OAIWorkstationConfig::isReconciling() const {
    return m_reconciling;
}
void OAIWorkstationConfig::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAIWorkstationConfig::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAIWorkstationConfig::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

QList<QString> OAIWorkstationConfig::getReplicaZones() const {
    return m_replica_zones;
}
void OAIWorkstationConfig::setReplicaZones(const QList<QString> &replica_zones) {
    m_replica_zones = replica_zones;
    m_replica_zones_isSet = true;
}

bool OAIWorkstationConfig::is_replica_zones_Set() const{
    return m_replica_zones_isSet;
}

bool OAIWorkstationConfig::is_replica_zones_Valid() const{
    return m_replica_zones_isValid;
}

QString OAIWorkstationConfig::getRunningTimeout() const {
    return m_running_timeout;
}
void OAIWorkstationConfig::setRunningTimeout(const QString &running_timeout) {
    m_running_timeout = running_timeout;
    m_running_timeout_isSet = true;
}

bool OAIWorkstationConfig::is_running_timeout_Set() const{
    return m_running_timeout_isSet;
}

bool OAIWorkstationConfig::is_running_timeout_Valid() const{
    return m_running_timeout_isValid;
}

QString OAIWorkstationConfig::getUid() const {
    return m_uid;
}
void OAIWorkstationConfig::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIWorkstationConfig::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIWorkstationConfig::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIWorkstationConfig::getUpdateTime() const {
    return m_update_time;
}
void OAIWorkstationConfig::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIWorkstationConfig::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIWorkstationConfig::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIWorkstationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_degraded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_tcp_connections_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_audit_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ephemeral_directories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistent_directories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_readiness_checks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_zones.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkstationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
