/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGcePersistentDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGcePersistentDisk::OAIGcePersistentDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGcePersistentDisk::OAIGcePersistentDisk() {
    this->initializeModel();
}

OAIGcePersistentDisk::~OAIGcePersistentDisk() {}

void OAIGcePersistentDisk::initializeModel() {

    m_disk_type_isSet = false;
    m_disk_type_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_source_image_isSet = false;
    m_source_image_isValid = false;

    m_source_snapshot_isSet = false;
    m_source_snapshot_isValid = false;
}

void OAIGcePersistentDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGcePersistentDisk::fromJsonObject(QJsonObject json) {

    m_disk_type_isValid = ::OpenAPI::fromJsonValue(m_disk_type, json[QString("diskType")]);
    m_disk_type_isSet = !json[QString("diskType")].isNull() && m_disk_type_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;

    m_source_image_isValid = ::OpenAPI::fromJsonValue(m_source_image, json[QString("sourceImage")]);
    m_source_image_isSet = !json[QString("sourceImage")].isNull() && m_source_image_isValid;

    m_source_snapshot_isValid = ::OpenAPI::fromJsonValue(m_source_snapshot, json[QString("sourceSnapshot")]);
    m_source_snapshot_isSet = !json[QString("sourceSnapshot")].isNull() && m_source_snapshot_isValid;
}

QString OAIGcePersistentDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGcePersistentDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_type_isSet) {
        obj.insert(QString("diskType"), ::OpenAPI::toJsonValue(m_disk_type));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_source_image_isSet) {
        obj.insert(QString("sourceImage"), ::OpenAPI::toJsonValue(m_source_image));
    }
    if (m_source_snapshot_isSet) {
        obj.insert(QString("sourceSnapshot"), ::OpenAPI::toJsonValue(m_source_snapshot));
    }
    return obj;
}

QString OAIGcePersistentDisk::getDiskType() const {
    return m_disk_type;
}
void OAIGcePersistentDisk::setDiskType(const QString &disk_type) {
    m_disk_type = disk_type;
    m_disk_type_isSet = true;
}

bool OAIGcePersistentDisk::is_disk_type_Set() const{
    return m_disk_type_isSet;
}

bool OAIGcePersistentDisk::is_disk_type_Valid() const{
    return m_disk_type_isValid;
}

bool OAIGcePersistentDisk::isReadOnly() const {
    return m_read_only;
}
void OAIGcePersistentDisk::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIGcePersistentDisk::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIGcePersistentDisk::is_read_only_Valid() const{
    return m_read_only_isValid;
}

QString OAIGcePersistentDisk::getSourceImage() const {
    return m_source_image;
}
void OAIGcePersistentDisk::setSourceImage(const QString &source_image) {
    m_source_image = source_image;
    m_source_image_isSet = true;
}

bool OAIGcePersistentDisk::is_source_image_Set() const{
    return m_source_image_isSet;
}

bool OAIGcePersistentDisk::is_source_image_Valid() const{
    return m_source_image_isValid;
}

QString OAIGcePersistentDisk::getSourceSnapshot() const {
    return m_source_snapshot;
}
void OAIGcePersistentDisk::setSourceSnapshot(const QString &source_snapshot) {
    m_source_snapshot = source_snapshot;
    m_source_snapshot_isSet = true;
}

bool OAIGcePersistentDisk::is_source_snapshot_Set() const{
    return m_source_snapshot_isSet;
}

bool OAIGcePersistentDisk::is_source_snapshot_Valid() const{
    return m_source_snapshot_isValid;
}

bool OAIGcePersistentDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_snapshot_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGcePersistentDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
