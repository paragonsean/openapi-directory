/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkstationCluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkstationCluster::OAIWorkstationCluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkstationCluster::OAIWorkstationCluster() {
    this->initializeModel();
}

OAIWorkstationCluster::~OAIWorkstationCluster() {}

void OAIWorkstationCluster::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_control_plane_ip_isSet = false;
    m_control_plane_ip_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_degraded_isSet = false;
    m_degraded_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_domain_config_isSet = false;
    m_domain_config_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_private_cluster_config_isSet = false;
    m_private_cluster_config_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_subnetwork_isSet = false;
    m_subnetwork_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIWorkstationCluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkstationCluster::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_control_plane_ip_isValid = ::OpenAPI::fromJsonValue(m_control_plane_ip, json[QString("controlPlaneIp")]);
    m_control_plane_ip_isSet = !json[QString("controlPlaneIp")].isNull() && m_control_plane_ip_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_degraded_isValid = ::OpenAPI::fromJsonValue(m_degraded, json[QString("degraded")]);
    m_degraded_isSet = !json[QString("degraded")].isNull() && m_degraded_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_domain_config_isValid = ::OpenAPI::fromJsonValue(m_domain_config, json[QString("domainConfig")]);
    m_domain_config_isSet = !json[QString("domainConfig")].isNull() && m_domain_config_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_private_cluster_config_isValid = ::OpenAPI::fromJsonValue(m_private_cluster_config, json[QString("privateClusterConfig")]);
    m_private_cluster_config_isSet = !json[QString("privateClusterConfig")].isNull() && m_private_cluster_config_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_subnetwork_isValid = ::OpenAPI::fromJsonValue(m_subnetwork, json[QString("subnetwork")]);
    m_subnetwork_isSet = !json[QString("subnetwork")].isNull() && m_subnetwork_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIWorkstationCluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkstationCluster::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_control_plane_ip_isSet) {
        obj.insert(QString("controlPlaneIp"), ::OpenAPI::toJsonValue(m_control_plane_ip));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_degraded_isSet) {
        obj.insert(QString("degraded"), ::OpenAPI::toJsonValue(m_degraded));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_domain_config.isSet()) {
        obj.insert(QString("domainConfig"), ::OpenAPI::toJsonValue(m_domain_config));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_private_cluster_config.isSet()) {
        obj.insert(QString("privateClusterConfig"), ::OpenAPI::toJsonValue(m_private_cluster_config));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_subnetwork_isSet) {
        obj.insert(QString("subnetwork"), ::OpenAPI::toJsonValue(m_subnetwork));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QMap<QString, QString> OAIWorkstationCluster::getAnnotations() const {
    return m_annotations;
}
void OAIWorkstationCluster::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIWorkstationCluster::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIWorkstationCluster::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QList<OAIStatus> OAIWorkstationCluster::getConditions() const {
    return m_conditions;
}
void OAIWorkstationCluster::setConditions(const QList<OAIStatus> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIWorkstationCluster::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIWorkstationCluster::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAIWorkstationCluster::getControlPlaneIp() const {
    return m_control_plane_ip;
}
void OAIWorkstationCluster::setControlPlaneIp(const QString &control_plane_ip) {
    m_control_plane_ip = control_plane_ip;
    m_control_plane_ip_isSet = true;
}

bool OAIWorkstationCluster::is_control_plane_ip_Set() const{
    return m_control_plane_ip_isSet;
}

bool OAIWorkstationCluster::is_control_plane_ip_Valid() const{
    return m_control_plane_ip_isValid;
}

QString OAIWorkstationCluster::getCreateTime() const {
    return m_create_time;
}
void OAIWorkstationCluster::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIWorkstationCluster::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIWorkstationCluster::is_create_time_Valid() const{
    return m_create_time_isValid;
}

bool OAIWorkstationCluster::isDegraded() const {
    return m_degraded;
}
void OAIWorkstationCluster::setDegraded(const bool &degraded) {
    m_degraded = degraded;
    m_degraded_isSet = true;
}

bool OAIWorkstationCluster::is_degraded_Set() const{
    return m_degraded_isSet;
}

bool OAIWorkstationCluster::is_degraded_Valid() const{
    return m_degraded_isValid;
}

QString OAIWorkstationCluster::getDeleteTime() const {
    return m_delete_time;
}
void OAIWorkstationCluster::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIWorkstationCluster::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIWorkstationCluster::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QString OAIWorkstationCluster::getDisplayName() const {
    return m_display_name;
}
void OAIWorkstationCluster::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIWorkstationCluster::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIWorkstationCluster::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIDomainConfig OAIWorkstationCluster::getDomainConfig() const {
    return m_domain_config;
}
void OAIWorkstationCluster::setDomainConfig(const OAIDomainConfig &domain_config) {
    m_domain_config = domain_config;
    m_domain_config_isSet = true;
}

bool OAIWorkstationCluster::is_domain_config_Set() const{
    return m_domain_config_isSet;
}

bool OAIWorkstationCluster::is_domain_config_Valid() const{
    return m_domain_config_isValid;
}

QString OAIWorkstationCluster::getEtag() const {
    return m_etag;
}
void OAIWorkstationCluster::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIWorkstationCluster::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIWorkstationCluster::is_etag_Valid() const{
    return m_etag_isValid;
}

QMap<QString, QString> OAIWorkstationCluster::getLabels() const {
    return m_labels;
}
void OAIWorkstationCluster::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIWorkstationCluster::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIWorkstationCluster::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIWorkstationCluster::getName() const {
    return m_name;
}
void OAIWorkstationCluster::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkstationCluster::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkstationCluster::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWorkstationCluster::getNetwork() const {
    return m_network;
}
void OAIWorkstationCluster::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIWorkstationCluster::is_network_Set() const{
    return m_network_isSet;
}

bool OAIWorkstationCluster::is_network_Valid() const{
    return m_network_isValid;
}

OAIPrivateClusterConfig OAIWorkstationCluster::getPrivateClusterConfig() const {
    return m_private_cluster_config;
}
void OAIWorkstationCluster::setPrivateClusterConfig(const OAIPrivateClusterConfig &private_cluster_config) {
    m_private_cluster_config = private_cluster_config;
    m_private_cluster_config_isSet = true;
}

bool OAIWorkstationCluster::is_private_cluster_config_Set() const{
    return m_private_cluster_config_isSet;
}

bool OAIWorkstationCluster::is_private_cluster_config_Valid() const{
    return m_private_cluster_config_isValid;
}

bool OAIWorkstationCluster::isReconciling() const {
    return m_reconciling;
}
void OAIWorkstationCluster::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAIWorkstationCluster::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAIWorkstationCluster::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

QString OAIWorkstationCluster::getSubnetwork() const {
    return m_subnetwork;
}
void OAIWorkstationCluster::setSubnetwork(const QString &subnetwork) {
    m_subnetwork = subnetwork;
    m_subnetwork_isSet = true;
}

bool OAIWorkstationCluster::is_subnetwork_Set() const{
    return m_subnetwork_isSet;
}

bool OAIWorkstationCluster::is_subnetwork_Valid() const{
    return m_subnetwork_isValid;
}

QString OAIWorkstationCluster::getUid() const {
    return m_uid;
}
void OAIWorkstationCluster::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIWorkstationCluster::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIWorkstationCluster::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIWorkstationCluster::getUpdateTime() const {
    return m_update_time;
}
void OAIWorkstationCluster::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIWorkstationCluster::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIWorkstationCluster::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIWorkstationCluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_plane_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_degraded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_cluster_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkstationCluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
