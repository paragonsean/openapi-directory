/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHost::OAIHost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHost::OAIHost() {
    this->initializeModel();
}

OAIHost::~OAIHost() {}

void OAIHost::initializeModel() {

    m_gce_instance_isSet = false;
    m_gce_instance_isValid = false;
}

void OAIHost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHost::fromJsonObject(QJsonObject json) {

    m_gce_instance_isValid = ::OpenAPI::fromJsonValue(m_gce_instance, json[QString("gceInstance")]);
    m_gce_instance_isSet = !json[QString("gceInstance")].isNull() && m_gce_instance_isValid;
}

QString OAIHost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHost::asJsonObject() const {
    QJsonObject obj;
    if (m_gce_instance.isSet()) {
        obj.insert(QString("gceInstance"), ::OpenAPI::toJsonValue(m_gce_instance));
    }
    return obj;
}

OAIGceInstance OAIHost::getGceInstance() const {
    return m_gce_instance;
}
void OAIHost::setGceInstance(const OAIGceInstance &gce_instance) {
    m_gce_instance = gce_instance;
    m_gce_instance_isSet = true;
}

bool OAIHost::is_gce_instance_Set() const{
    return m_gce_instance_isSet;
}

bool OAIHost::is_gce_instance_Valid() const{
    return m_gce_instance_isValid;
}

bool OAIHost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gce_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHost::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
