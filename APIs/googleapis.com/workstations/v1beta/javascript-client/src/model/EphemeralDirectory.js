/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GcePersistentDisk from './GcePersistentDisk';

/**
 * The EphemeralDirectory model module.
 * @module model/EphemeralDirectory
 * @version v1beta
 */
class EphemeralDirectory {
    /**
     * Constructs a new <code>EphemeralDirectory</code>.
     * An ephemeral directory which won&#39;t persist across workstation sessions. It is freshly created on every workstation start operation.
     * @alias module:model/EphemeralDirectory
     */
    constructor() { 
        
        EphemeralDirectory.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EphemeralDirectory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EphemeralDirectory} obj Optional instance to populate.
     * @return {module:model/EphemeralDirectory} The populated <code>EphemeralDirectory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EphemeralDirectory();

            if (data.hasOwnProperty('gcePd')) {
                obj['gcePd'] = GcePersistentDisk.constructFromObject(data['gcePd']);
            }
            if (data.hasOwnProperty('mountPath')) {
                obj['mountPath'] = ApiClient.convertToType(data['mountPath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EphemeralDirectory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EphemeralDirectory</code>.
     */
    static validateJSON(data) {
        // validate the optional field `gcePd`
        if (data['gcePd']) { // data not null
          GcePersistentDisk.validateJSON(data['gcePd']);
        }
        // ensure the json data is a string
        if (data['mountPath'] && !(typeof data['mountPath'] === 'string' || data['mountPath'] instanceof String)) {
            throw new Error("Expected the field `mountPath` to be a primitive type in the JSON string but got " + data['mountPath']);
        }

        return true;
    }


}



/**
 * @member {module:model/GcePersistentDisk} gcePd
 */
EphemeralDirectory.prototype['gcePd'] = undefined;

/**
 * Required. Location of this directory in the running workstation.
 * @member {String} mountPath
 */
EphemeralDirectory.prototype['mountPath'] = undefined;






export default EphemeralDirectory;

