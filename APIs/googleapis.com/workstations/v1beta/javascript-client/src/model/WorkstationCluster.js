/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DomainConfig from './DomainConfig';
import PrivateClusterConfig from './PrivateClusterConfig';
import Status from './Status';

/**
 * The WorkstationCluster model module.
 * @module model/WorkstationCluster
 * @version v1beta
 */
class WorkstationCluster {
    /**
     * Constructs a new <code>WorkstationCluster</code>.
     * A workstation cluster resource in the Cloud Workstations API. Defines a group of workstations in a particular region and the VPC network they&#39;re attached to.
     * @alias module:model/WorkstationCluster
     */
    constructor() { 
        
        WorkstationCluster.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkstationCluster</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkstationCluster} obj Optional instance to populate.
     * @return {module:model/WorkstationCluster} The populated <code>WorkstationCluster</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkstationCluster();

            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [Status]);
            }
            if (data.hasOwnProperty('controlPlaneIp')) {
                obj['controlPlaneIp'] = ApiClient.convertToType(data['controlPlaneIp'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('degraded')) {
                obj['degraded'] = ApiClient.convertToType(data['degraded'], 'Boolean');
            }
            if (data.hasOwnProperty('deleteTime')) {
                obj['deleteTime'] = ApiClient.convertToType(data['deleteTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('domainConfig')) {
                obj['domainConfig'] = DomainConfig.constructFromObject(data['domainConfig']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('privateClusterConfig')) {
                obj['privateClusterConfig'] = PrivateClusterConfig.constructFromObject(data['privateClusterConfig']);
            }
            if (data.hasOwnProperty('reconciling')) {
                obj['reconciling'] = ApiClient.convertToType(data['reconciling'], 'Boolean');
            }
            if (data.hasOwnProperty('subnetwork')) {
                obj['subnetwork'] = ApiClient.convertToType(data['subnetwork'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkstationCluster</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkstationCluster</code>.
     */
    static validateJSON(data) {
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                Status.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['controlPlaneIp'] && !(typeof data['controlPlaneIp'] === 'string' || data['controlPlaneIp'] instanceof String)) {
            throw new Error("Expected the field `controlPlaneIp` to be a primitive type in the JSON string but got " + data['controlPlaneIp']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['deleteTime'] && !(typeof data['deleteTime'] === 'string' || data['deleteTime'] instanceof String)) {
            throw new Error("Expected the field `deleteTime` to be a primitive type in the JSON string but got " + data['deleteTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `domainConfig`
        if (data['domainConfig']) { // data not null
          DomainConfig.validateJSON(data['domainConfig']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // validate the optional field `privateClusterConfig`
        if (data['privateClusterConfig']) { // data not null
          PrivateClusterConfig.validateJSON(data['privateClusterConfig']);
        }
        // ensure the json data is a string
        if (data['subnetwork'] && !(typeof data['subnetwork'] === 'string' || data['subnetwork'] instanceof String)) {
            throw new Error("Expected the field `subnetwork` to be a primitive type in the JSON string but got " + data['subnetwork']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Optional. Client-specified annotations.
 * @member {Object.<String, String>} annotations
 */
WorkstationCluster.prototype['annotations'] = undefined;

/**
 * Output only. Status conditions describing the workstation cluster's current state.
 * @member {Array.<module:model/Status>} conditions
 */
WorkstationCluster.prototype['conditions'] = undefined;

/**
 * Output only. The private IP address of the control plane for this workstation cluster. Workstation VMs need access to this IP address to work with the service, so make sure that your firewall rules allow egress from the workstation VMs to this address.
 * @member {String} controlPlaneIp
 */
WorkstationCluster.prototype['controlPlaneIp'] = undefined;

/**
 * Output only. Time when this workstation cluster was created.
 * @member {String} createTime
 */
WorkstationCluster.prototype['createTime'] = undefined;

/**
 * Output only. Whether this workstation cluster is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in conditions.
 * @member {Boolean} degraded
 */
WorkstationCluster.prototype['degraded'] = undefined;

/**
 * Output only. Time when this workstation cluster was soft-deleted.
 * @member {String} deleteTime
 */
WorkstationCluster.prototype['deleteTime'] = undefined;

/**
 * Optional. Human-readable name for this workstation cluster.
 * @member {String} displayName
 */
WorkstationCluster.prototype['displayName'] = undefined;

/**
 * @member {module:model/DomainConfig} domainConfig
 */
WorkstationCluster.prototype['domainConfig'] = undefined;

/**
 * Optional. Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding.
 * @member {String} etag
 */
WorkstationCluster.prototype['etag'] = undefined;

/**
 * Optional. [Labels](https://cloud.google.com/workstations/docs/label-resources) that are applied to the workstation cluster and that are also propagated to the underlying Compute Engine resources.
 * @member {Object.<String, String>} labels
 */
WorkstationCluster.prototype['labels'] = undefined;

/**
 * Identifier. Full name of this workstation cluster.
 * @member {String} name
 */
WorkstationCluster.prototype['name'] = undefined;

/**
 * Immutable. Name of the Compute Engine network in which instances associated with this workstation cluster will be created.
 * @member {String} network
 */
WorkstationCluster.prototype['network'] = undefined;

/**
 * @member {module:model/PrivateClusterConfig} privateClusterConfig
 */
WorkstationCluster.prototype['privateClusterConfig'] = undefined;

/**
 * Output only. Indicates whether this workstation cluster is currently being updated to match its intended state.
 * @member {Boolean} reconciling
 */
WorkstationCluster.prototype['reconciling'] = undefined;

/**
 * Immutable. Name of the Compute Engine subnetwork in which instances associated with this workstation cluster will be created. Must be part of the subnetwork specified for this workstation cluster.
 * @member {String} subnetwork
 */
WorkstationCluster.prototype['subnetwork'] = undefined;

/**
 * Output only. A system-assigned unique identifier for this workstation cluster.
 * @member {String} uid
 */
WorkstationCluster.prototype['uid'] = undefined;

/**
 * Output only. Time when this workstation cluster was most recently updated.
 * @member {String} updateTime
 */
WorkstationCluster.prototype['updateTime'] = undefined;






export default WorkstationCluster;

