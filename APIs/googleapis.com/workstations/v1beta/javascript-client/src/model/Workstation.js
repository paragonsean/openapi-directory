/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Workstation model module.
 * @module model/Workstation
 * @version v1beta
 */
class Workstation {
    /**
     * Constructs a new <code>Workstation</code>.
     * A single instance of a developer workstation with its own persistent storage.
     * @alias module:model/Workstation
     */
    constructor() { 
        
        Workstation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Workstation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Workstation} obj Optional instance to populate.
     * @return {module:model/Workstation} The populated <code>Workstation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Workstation();

            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('deleteTime')) {
                obj['deleteTime'] = ApiClient.convertToType(data['deleteTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('env')) {
                obj['env'] = ApiClient.convertToType(data['env'], {'String': 'String'});
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('kmsKey')) {
                obj['kmsKey'] = ApiClient.convertToType(data['kmsKey'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('reconciling')) {
                obj['reconciling'] = ApiClient.convertToType(data['reconciling'], 'Boolean');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Workstation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Workstation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['deleteTime'] && !(typeof data['deleteTime'] === 'string' || data['deleteTime'] instanceof String)) {
            throw new Error("Expected the field `deleteTime` to be a primitive type in the JSON string but got " + data['deleteTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['kmsKey'] && !(typeof data['kmsKey'] === 'string' || data['kmsKey'] instanceof String)) {
            throw new Error("Expected the field `kmsKey` to be a primitive type in the JSON string but got " + data['kmsKey']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Optional. Client-specified annotations.
 * @member {Object.<String, String>} annotations
 */
Workstation.prototype['annotations'] = undefined;

/**
 * Output only. Time when this workstation was created.
 * @member {String} createTime
 */
Workstation.prototype['createTime'] = undefined;

/**
 * Output only. Time when this workstation was soft-deleted.
 * @member {String} deleteTime
 */
Workstation.prototype['deleteTime'] = undefined;

/**
 * Optional. Human-readable name for this workstation.
 * @member {String} displayName
 */
Workstation.prototype['displayName'] = undefined;

/**
 * Optional. Environment variables passed to the workstation container's entrypoint.
 * @member {Object.<String, String>} env
 */
Workstation.prototype['env'] = undefined;

/**
 * Optional. Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding.
 * @member {String} etag
 */
Workstation.prototype['etag'] = undefined;

/**
 * Output only. Host to which clients can send HTTPS traffic that will be received by the workstation. Authorized traffic will be received to the workstation as HTTP on port 80. To send traffic to a different port, clients may prefix the host with the destination port in the format `{port}-{host}`.
 * @member {String} host
 */
Workstation.prototype['host'] = undefined;

/**
 * Output only. The name of the Google Cloud KMS encryption key used to encrypt this workstation. The KMS key can only be configured in the WorkstationConfig. The expected format is `projects/_*_/locations/_*_/keyRings/_*_/cryptoKeys/_*`.
 * @member {String} kmsKey
 */
Workstation.prototype['kmsKey'] = undefined;

/**
 * Optional. [Labels](https://cloud.google.com/workstations/docs/label-resources) that are applied to the workstation and that are also propagated to the underlying Compute Engine resources.
 * @member {Object.<String, String>} labels
 */
Workstation.prototype['labels'] = undefined;

/**
 * Identifier. Full name of this workstation.
 * @member {String} name
 */
Workstation.prototype['name'] = undefined;

/**
 * Output only. Indicates whether this workstation is currently being updated to match its intended state.
 * @member {Boolean} reconciling
 */
Workstation.prototype['reconciling'] = undefined;

/**
 * Output only. Time when this workstation was most recently successfully started, regardless of the workstation's initial state.
 * @member {String} startTime
 */
Workstation.prototype['startTime'] = undefined;

/**
 * Output only. Current state of the workstation.
 * @member {module:model/Workstation.StateEnum} state
 */
Workstation.prototype['state'] = undefined;

/**
 * Output only. A system-assigned unique identifier for this workstation.
 * @member {String} uid
 */
Workstation.prototype['uid'] = undefined;

/**
 * Output only. Time when this workstation was most recently updated.
 * @member {String} updateTime
 */
Workstation.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Workstation['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "STATE_STARTING"
     * @const
     */
    "STARTING": "STATE_STARTING",

    /**
     * value: "STATE_RUNNING"
     * @const
     */
    "RUNNING": "STATE_RUNNING",

    /**
     * value: "STATE_STOPPING"
     * @const
     */
    "STOPPING": "STATE_STOPPING",

    /**
     * value: "STATE_STOPPED"
     * @const
     */
    "STOPPED": "STATE_STOPPED"
};



export default Workstation;

