/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GcePersistentDisk model module.
 * @module model/GcePersistentDisk
 * @version v1beta
 */
class GcePersistentDisk {
    /**
     * Constructs a new <code>GcePersistentDisk</code>.
     * An EphemeralDirectory is backed by a Compute Engine persistent disk.
     * @alias module:model/GcePersistentDisk
     */
    constructor() { 
        
        GcePersistentDisk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GcePersistentDisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GcePersistentDisk} obj Optional instance to populate.
     * @return {module:model/GcePersistentDisk} The populated <code>GcePersistentDisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GcePersistentDisk();

            if (data.hasOwnProperty('diskType')) {
                obj['diskType'] = ApiClient.convertToType(data['diskType'], 'String');
            }
            if (data.hasOwnProperty('readOnly')) {
                obj['readOnly'] = ApiClient.convertToType(data['readOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('sourceImage')) {
                obj['sourceImage'] = ApiClient.convertToType(data['sourceImage'], 'String');
            }
            if (data.hasOwnProperty('sourceSnapshot')) {
                obj['sourceSnapshot'] = ApiClient.convertToType(data['sourceSnapshot'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GcePersistentDisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GcePersistentDisk</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['diskType'] && !(typeof data['diskType'] === 'string' || data['diskType'] instanceof String)) {
            throw new Error("Expected the field `diskType` to be a primitive type in the JSON string but got " + data['diskType']);
        }
        // ensure the json data is a string
        if (data['sourceImage'] && !(typeof data['sourceImage'] === 'string' || data['sourceImage'] instanceof String)) {
            throw new Error("Expected the field `sourceImage` to be a primitive type in the JSON string but got " + data['sourceImage']);
        }
        // ensure the json data is a string
        if (data['sourceSnapshot'] && !(typeof data['sourceSnapshot'] === 'string' || data['sourceSnapshot'] instanceof String)) {
            throw new Error("Expected the field `sourceSnapshot` to be a primitive type in the JSON string but got " + data['sourceSnapshot']);
        }

        return true;
    }


}



/**
 * Optional. Type of the disk to use. Defaults to `\"pd-standard\"`.
 * @member {String} diskType
 */
GcePersistentDisk.prototype['diskType'] = undefined;

/**
 * Optional. Whether the disk is read only. If true, the disk may be shared by multiple VMs and source_snapshot must be set.
 * @member {Boolean} readOnly
 */
GcePersistentDisk.prototype['readOnly'] = undefined;

/**
 * Optional. Name of the disk image to use as the source for the disk. Must be empty if source_snapshot is set. Updating source_image will update content in the ephemeral directory after the workstation is restarted. This field is mutable.
 * @member {String} sourceImage
 */
GcePersistentDisk.prototype['sourceImage'] = undefined;

/**
 * Optional. Name of the snapshot to use as the source for the disk. Must be empty if source_image is set. Must be empty if read_only is false. Updating source_snapshot will update content in the ephemeral directory after the workstation is restarted. This field is mutable.
 * @member {String} sourceSnapshot
 */
GcePersistentDisk.prototype['sourceSnapshot'] = undefined;






export default GcePersistentDisk;

