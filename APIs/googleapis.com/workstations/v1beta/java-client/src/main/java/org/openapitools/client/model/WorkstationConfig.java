/*
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Container;
import org.openapitools.client.model.CustomerEncryptionKey;
import org.openapitools.client.model.EphemeralDirectory;
import org.openapitools.client.model.Host;
import org.openapitools.client.model.PersistentDirectory;
import org.openapitools.client.model.ReadinessCheck;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A workstation configuration resource in the Cloud Workstations API. Workstation configurations act as templates for workstations. The workstation configuration defines details such as the workstation virtual machine (VM) instance type, persistent storage, container image defining environment, which IDE or Code Editor to use, and more. Administrators and platform teams can also use [Identity and Access Management (IAM)](https://cloud.google.com/iam/docs/overview) rules to grant access to teams or to individual developers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:14.615319-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkstationConfig {
  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Map<String, String> annotations = new HashMap<>();

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<Status> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private Container container;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DEGRADED = "degraded";
  @SerializedName(SERIALIZED_NAME_DEGRADED)
  private Boolean degraded;

  public static final String SERIALIZED_NAME_DELETE_TIME = "deleteTime";
  @SerializedName(SERIALIZED_NAME_DELETE_TIME)
  private String deleteTime;

  public static final String SERIALIZED_NAME_DISABLE_TCP_CONNECTIONS = "disableTcpConnections";
  @SerializedName(SERIALIZED_NAME_DISABLE_TCP_CONNECTIONS)
  private Boolean disableTcpConnections;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENABLE_AUDIT_AGENT = "enableAuditAgent";
  @SerializedName(SERIALIZED_NAME_ENABLE_AUDIT_AGENT)
  private Boolean enableAuditAgent;

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY = "encryptionKey";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY)
  private CustomerEncryptionKey encryptionKey;

  public static final String SERIALIZED_NAME_EPHEMERAL_DIRECTORIES = "ephemeralDirectories";
  @SerializedName(SERIALIZED_NAME_EPHEMERAL_DIRECTORIES)
  private List<EphemeralDirectory> ephemeralDirectories = new ArrayList<>();

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private Host host;

  public static final String SERIALIZED_NAME_IDLE_TIMEOUT = "idleTimeout";
  @SerializedName(SERIALIZED_NAME_IDLE_TIMEOUT)
  private String idleTimeout;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERSISTENT_DIRECTORIES = "persistentDirectories";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_DIRECTORIES)
  private List<PersistentDirectory> persistentDirectories = new ArrayList<>();

  public static final String SERIALIZED_NAME_READINESS_CHECKS = "readinessChecks";
  @SerializedName(SERIALIZED_NAME_READINESS_CHECKS)
  private List<ReadinessCheck> readinessChecks = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECONCILING = "reconciling";
  @SerializedName(SERIALIZED_NAME_RECONCILING)
  private Boolean reconciling;

  public static final String SERIALIZED_NAME_REPLICA_ZONES = "replicaZones";
  @SerializedName(SERIALIZED_NAME_REPLICA_ZONES)
  private List<String> replicaZones = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUNNING_TIMEOUT = "runningTimeout";
  @SerializedName(SERIALIZED_NAME_RUNNING_TIMEOUT)
  private String runningTimeout;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public WorkstationConfig() {
  }

  public WorkstationConfig(
     List<Status> conditions, 
     String createTime, 
     Boolean degraded, 
     String deleteTime, 
     Boolean reconciling, 
     String uid, 
     String updateTime
  ) {
    this();
    this.conditions = conditions;
    this.createTime = createTime;
    this.degraded = degraded;
    this.deleteTime = deleteTime;
    this.reconciling = reconciling;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  public WorkstationConfig annotations(Map<String, String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public WorkstationConfig putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

  /**
   * Optional. Client-specified annotations.
   * @return annotations
   */
  @javax.annotation.Nullable
  public Map<String, String> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }


  /**
   * Output only. Status conditions describing the current resource state.
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<Status> getConditions() {
    return conditions;
  }



  public WorkstationConfig container(Container container) {
    this.container = container;
    return this;
  }

  /**
   * Get container
   * @return container
   */
  @javax.annotation.Nullable
  public Container getContainer() {
    return container;
  }

  public void setContainer(Container container) {
    this.container = container;
  }


  /**
   * Output only. Time when this workstation configuration was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. Whether this resource is degraded, in which case it may require user action to restore full functionality. See also the conditions field.
   * @return degraded
   */
  @javax.annotation.Nullable
  public Boolean getDegraded() {
    return degraded;
  }



  /**
   * Output only. Time when this workstation configuration was soft-deleted.
   * @return deleteTime
   */
  @javax.annotation.Nullable
  public String getDeleteTime() {
    return deleteTime;
  }



  public WorkstationConfig disableTcpConnections(Boolean disableTcpConnections) {
    this.disableTcpConnections = disableTcpConnections;
    return this;
  }

  /**
   * Optional. Disables support for plain TCP connections in the workstation. By default the service supports TCP connections via a websocket relay. Setting this option to true disables that relay, which prevents the usage of services that require plain tcp connections, such as ssh. When enabled, all communication must occur over https or wss.
   * @return disableTcpConnections
   */
  @javax.annotation.Nullable
  public Boolean getDisableTcpConnections() {
    return disableTcpConnections;
  }

  public void setDisableTcpConnections(Boolean disableTcpConnections) {
    this.disableTcpConnections = disableTcpConnections;
  }


  public WorkstationConfig displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Optional. Human-readable name for this workstation configuration.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public WorkstationConfig enableAuditAgent(Boolean enableAuditAgent) {
    this.enableAuditAgent = enableAuditAgent;
    return this;
  }

  /**
   * Optional. Whether to enable Linux &#x60;auditd&#x60; logging on the workstation. When enabled, a service account must also be specified that has &#x60;logging.buckets.write&#x60; permission on the project. Operating system audit logging is distinct from [Cloud Audit Logs](https://cloud.google.com/workstations/docs/audit-logging).
   * @return enableAuditAgent
   */
  @javax.annotation.Nullable
  public Boolean getEnableAuditAgent() {
    return enableAuditAgent;
  }

  public void setEnableAuditAgent(Boolean enableAuditAgent) {
    this.enableAuditAgent = enableAuditAgent;
  }


  public WorkstationConfig encryptionKey(CustomerEncryptionKey encryptionKey) {
    this.encryptionKey = encryptionKey;
    return this;
  }

  /**
   * Get encryptionKey
   * @return encryptionKey
   */
  @javax.annotation.Nullable
  public CustomerEncryptionKey getEncryptionKey() {
    return encryptionKey;
  }

  public void setEncryptionKey(CustomerEncryptionKey encryptionKey) {
    this.encryptionKey = encryptionKey;
  }


  public WorkstationConfig ephemeralDirectories(List<EphemeralDirectory> ephemeralDirectories) {
    this.ephemeralDirectories = ephemeralDirectories;
    return this;
  }

  public WorkstationConfig addEphemeralDirectoriesItem(EphemeralDirectory ephemeralDirectoriesItem) {
    if (this.ephemeralDirectories == null) {
      this.ephemeralDirectories = new ArrayList<>();
    }
    this.ephemeralDirectories.add(ephemeralDirectoriesItem);
    return this;
  }

  /**
   * Optional. Ephemeral directories which won&#39;t persist across workstation sessions.
   * @return ephemeralDirectories
   */
  @javax.annotation.Nullable
  public List<EphemeralDirectory> getEphemeralDirectories() {
    return ephemeralDirectories;
  }

  public void setEphemeralDirectories(List<EphemeralDirectory> ephemeralDirectories) {
    this.ephemeralDirectories = ephemeralDirectories;
  }


  public WorkstationConfig etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Optional. Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public WorkstationConfig host(Host host) {
    this.host = host;
    return this;
  }

  /**
   * Get host
   * @return host
   */
  @javax.annotation.Nullable
  public Host getHost() {
    return host;
  }

  public void setHost(Host host) {
    this.host = host;
  }


  public WorkstationConfig idleTimeout(String idleTimeout) {
    this.idleTimeout = idleTimeout;
    return this;
  }

  /**
   * Optional. Number of seconds to wait before automatically stopping a workstation after it last received user traffic. A value of &#x60;\&quot;0s\&quot;&#x60; indicates that Cloud Workstations VMs created with this configuration should never time out due to idleness. Provide [duration](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration) terminated by &#x60;s&#x60; for seconds—for example, &#x60;\&quot;7200s\&quot;&#x60; (2 hours). The default is &#x60;\&quot;1200s\&quot;&#x60; (20 minutes).
   * @return idleTimeout
   */
  @javax.annotation.Nullable
  public String getIdleTimeout() {
    return idleTimeout;
  }

  public void setIdleTimeout(String idleTimeout) {
    this.idleTimeout = idleTimeout;
  }


  public WorkstationConfig labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public WorkstationConfig putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. [Labels](https://cloud.google.com/workstations/docs/label-resources) that are applied to the workstation configuration and that are also propagated to the underlying Compute Engine resources.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public WorkstationConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Identifier. Full name of this workstation configuration.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WorkstationConfig persistentDirectories(List<PersistentDirectory> persistentDirectories) {
    this.persistentDirectories = persistentDirectories;
    return this;
  }

  public WorkstationConfig addPersistentDirectoriesItem(PersistentDirectory persistentDirectoriesItem) {
    if (this.persistentDirectories == null) {
      this.persistentDirectories = new ArrayList<>();
    }
    this.persistentDirectories.add(persistentDirectoriesItem);
    return this;
  }

  /**
   * Optional. Directories to persist across workstation sessions.
   * @return persistentDirectories
   */
  @javax.annotation.Nullable
  public List<PersistentDirectory> getPersistentDirectories() {
    return persistentDirectories;
  }

  public void setPersistentDirectories(List<PersistentDirectory> persistentDirectories) {
    this.persistentDirectories = persistentDirectories;
  }


  public WorkstationConfig readinessChecks(List<ReadinessCheck> readinessChecks) {
    this.readinessChecks = readinessChecks;
    return this;
  }

  public WorkstationConfig addReadinessChecksItem(ReadinessCheck readinessChecksItem) {
    if (this.readinessChecks == null) {
      this.readinessChecks = new ArrayList<>();
    }
    this.readinessChecks.add(readinessChecksItem);
    return this;
  }

  /**
   * Optional. Readiness checks to perform when starting a workstation using this workstation configuration. Mark a workstation as running only after all specified readiness checks return 200 status codes.
   * @return readinessChecks
   */
  @javax.annotation.Nullable
  public List<ReadinessCheck> getReadinessChecks() {
    return readinessChecks;
  }

  public void setReadinessChecks(List<ReadinessCheck> readinessChecks) {
    this.readinessChecks = readinessChecks;
  }


  /**
   * Output only. Indicates whether this workstation configuration is currently being updated to match its intended state.
   * @return reconciling
   */
  @javax.annotation.Nullable
  public Boolean getReconciling() {
    return reconciling;
  }



  public WorkstationConfig replicaZones(List<String> replicaZones) {
    this.replicaZones = replicaZones;
    return this;
  }

  public WorkstationConfig addReplicaZonesItem(String replicaZonesItem) {
    if (this.replicaZones == null) {
      this.replicaZones = new ArrayList<>();
    }
    this.replicaZones.add(replicaZonesItem);
    return this;
  }

  /**
   * Optional. Immutable. Specifies the zones used to replicate the VM and disk resources within the region. If set, exactly two zones within the workstation cluster&#39;s region must be specified—for example, &#x60;[&#39;us-central1-a&#39;, &#39;us-central1-f&#39;]&#x60;. If this field is empty, two default zones within the region are used. Immutable after the workstation configuration is created.
   * @return replicaZones
   */
  @javax.annotation.Nullable
  public List<String> getReplicaZones() {
    return replicaZones;
  }

  public void setReplicaZones(List<String> replicaZones) {
    this.replicaZones = replicaZones;
  }


  public WorkstationConfig runningTimeout(String runningTimeout) {
    this.runningTimeout = runningTimeout;
    return this;
  }

  /**
   * Optional. Number of seconds that a workstation can run until it is automatically shut down. We recommend that workstations be shut down daily to reduce costs and so that security updates can be applied upon restart. The idle_timeout and running_timeout fields are independent of each other. Note that the running_timeout field shuts down VMs after the specified time, regardless of whether or not the VMs are idle. Provide duration terminated by &#x60;s&#x60; for seconds—for example, &#x60;\&quot;54000s\&quot;&#x60; (15 hours). Defaults to &#x60;\&quot;43200s\&quot;&#x60; (12 hours). A value of &#x60;\&quot;0s\&quot;&#x60; indicates that workstations using this configuration should never time out. If encryption_key is set, it must be greater than &#x60;\&quot;0s\&quot;&#x60; and less than &#x60;\&quot;86400s\&quot;&#x60; (24 hours). Warning: A value of &#x60;\&quot;0s\&quot;&#x60; indicates that Cloud Workstations VMs created with this configuration have no maximum running time. This is strongly discouraged because you incur costs and will not pick up security updates.
   * @return runningTimeout
   */
  @javax.annotation.Nullable
  public String getRunningTimeout() {
    return runningTimeout;
  }

  public void setRunningTimeout(String runningTimeout) {
    this.runningTimeout = runningTimeout;
  }


  /**
   * Output only. A system-assigned unique identifier for this workstation configuration.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. Time when this workstation configuration was most recently updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkstationConfig workstationConfig = (WorkstationConfig) o;
    return Objects.equals(this.annotations, workstationConfig.annotations) &&
        Objects.equals(this.conditions, workstationConfig.conditions) &&
        Objects.equals(this.container, workstationConfig.container) &&
        Objects.equals(this.createTime, workstationConfig.createTime) &&
        Objects.equals(this.degraded, workstationConfig.degraded) &&
        Objects.equals(this.deleteTime, workstationConfig.deleteTime) &&
        Objects.equals(this.disableTcpConnections, workstationConfig.disableTcpConnections) &&
        Objects.equals(this.displayName, workstationConfig.displayName) &&
        Objects.equals(this.enableAuditAgent, workstationConfig.enableAuditAgent) &&
        Objects.equals(this.encryptionKey, workstationConfig.encryptionKey) &&
        Objects.equals(this.ephemeralDirectories, workstationConfig.ephemeralDirectories) &&
        Objects.equals(this.etag, workstationConfig.etag) &&
        Objects.equals(this.host, workstationConfig.host) &&
        Objects.equals(this.idleTimeout, workstationConfig.idleTimeout) &&
        Objects.equals(this.labels, workstationConfig.labels) &&
        Objects.equals(this.name, workstationConfig.name) &&
        Objects.equals(this.persistentDirectories, workstationConfig.persistentDirectories) &&
        Objects.equals(this.readinessChecks, workstationConfig.readinessChecks) &&
        Objects.equals(this.reconciling, workstationConfig.reconciling) &&
        Objects.equals(this.replicaZones, workstationConfig.replicaZones) &&
        Objects.equals(this.runningTimeout, workstationConfig.runningTimeout) &&
        Objects.equals(this.uid, workstationConfig.uid) &&
        Objects.equals(this.updateTime, workstationConfig.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, conditions, container, createTime, degraded, deleteTime, disableTcpConnections, displayName, enableAuditAgent, encryptionKey, ephemeralDirectories, etag, host, idleTimeout, labels, name, persistentDirectories, readinessChecks, reconciling, replicaZones, runningTimeout, uid, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkstationConfig {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    degraded: ").append(toIndentedString(degraded)).append("\n");
    sb.append("    deleteTime: ").append(toIndentedString(deleteTime)).append("\n");
    sb.append("    disableTcpConnections: ").append(toIndentedString(disableTcpConnections)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enableAuditAgent: ").append(toIndentedString(enableAuditAgent)).append("\n");
    sb.append("    encryptionKey: ").append(toIndentedString(encryptionKey)).append("\n");
    sb.append("    ephemeralDirectories: ").append(toIndentedString(ephemeralDirectories)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    idleTimeout: ").append(toIndentedString(idleTimeout)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    persistentDirectories: ").append(toIndentedString(persistentDirectories)).append("\n");
    sb.append("    readinessChecks: ").append(toIndentedString(readinessChecks)).append("\n");
    sb.append("    reconciling: ").append(toIndentedString(reconciling)).append("\n");
    sb.append("    replicaZones: ").append(toIndentedString(replicaZones)).append("\n");
    sb.append("    runningTimeout: ").append(toIndentedString(runningTimeout)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotations");
    openapiFields.add("conditions");
    openapiFields.add("container");
    openapiFields.add("createTime");
    openapiFields.add("degraded");
    openapiFields.add("deleteTime");
    openapiFields.add("disableTcpConnections");
    openapiFields.add("displayName");
    openapiFields.add("enableAuditAgent");
    openapiFields.add("encryptionKey");
    openapiFields.add("ephemeralDirectories");
    openapiFields.add("etag");
    openapiFields.add("host");
    openapiFields.add("idleTimeout");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("persistentDirectories");
    openapiFields.add("readinessChecks");
    openapiFields.add("reconciling");
    openapiFields.add("replicaZones");
    openapiFields.add("runningTimeout");
    openapiFields.add("uid");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkstationConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkstationConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkstationConfig is not found in the empty JSON string", WorkstationConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkstationConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkstationConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            Status.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      // validate the optional field `container`
      if (jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) {
        Container.validateJsonElement(jsonObj.get("container"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("deleteTime") != null && !jsonObj.get("deleteTime").isJsonNull()) && !jsonObj.get("deleteTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `encryptionKey`
      if (jsonObj.get("encryptionKey") != null && !jsonObj.get("encryptionKey").isJsonNull()) {
        CustomerEncryptionKey.validateJsonElement(jsonObj.get("encryptionKey"));
      }
      if (jsonObj.get("ephemeralDirectories") != null && !jsonObj.get("ephemeralDirectories").isJsonNull()) {
        JsonArray jsonArrayephemeralDirectories = jsonObj.getAsJsonArray("ephemeralDirectories");
        if (jsonArrayephemeralDirectories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ephemeralDirectories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ephemeralDirectories` to be an array in the JSON string but got `%s`", jsonObj.get("ephemeralDirectories").toString()));
          }

          // validate the optional field `ephemeralDirectories` (array)
          for (int i = 0; i < jsonArrayephemeralDirectories.size(); i++) {
            EphemeralDirectory.validateJsonElement(jsonArrayephemeralDirectories.get(i));
          };
        }
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      // validate the optional field `host`
      if (jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) {
        Host.validateJsonElement(jsonObj.get("host"));
      }
      if ((jsonObj.get("idleTimeout") != null && !jsonObj.get("idleTimeout").isJsonNull()) && !jsonObj.get("idleTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idleTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idleTimeout").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("persistentDirectories") != null && !jsonObj.get("persistentDirectories").isJsonNull()) {
        JsonArray jsonArraypersistentDirectories = jsonObj.getAsJsonArray("persistentDirectories");
        if (jsonArraypersistentDirectories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("persistentDirectories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `persistentDirectories` to be an array in the JSON string but got `%s`", jsonObj.get("persistentDirectories").toString()));
          }

          // validate the optional field `persistentDirectories` (array)
          for (int i = 0; i < jsonArraypersistentDirectories.size(); i++) {
            PersistentDirectory.validateJsonElement(jsonArraypersistentDirectories.get(i));
          };
        }
      }
      if (jsonObj.get("readinessChecks") != null && !jsonObj.get("readinessChecks").isJsonNull()) {
        JsonArray jsonArrayreadinessChecks = jsonObj.getAsJsonArray("readinessChecks");
        if (jsonArrayreadinessChecks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("readinessChecks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `readinessChecks` to be an array in the JSON string but got `%s`", jsonObj.get("readinessChecks").toString()));
          }

          // validate the optional field `readinessChecks` (array)
          for (int i = 0; i < jsonArrayreadinessChecks.size(); i++) {
            ReadinessCheck.validateJsonElement(jsonArrayreadinessChecks.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("replicaZones") != null && !jsonObj.get("replicaZones").isJsonNull() && !jsonObj.get("replicaZones").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicaZones` to be an array in the JSON string but got `%s`", jsonObj.get("replicaZones").toString()));
      }
      if ((jsonObj.get("runningTimeout") != null && !jsonObj.get("runningTimeout").isJsonNull()) && !jsonObj.get("runningTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runningTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runningTimeout").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkstationConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkstationConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkstationConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkstationConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkstationConfig>() {
           @Override
           public void write(JsonWriter out, WorkstationConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkstationConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkstationConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkstationConfig
   * @throws IOException if the JSON string is invalid with respect to WorkstationConfig
   */
  public static WorkstationConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkstationConfig.class);
  }

  /**
   * Convert an instance of WorkstationConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

