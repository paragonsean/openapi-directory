/*
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A PersistentDirectory backed by a Compute Engine regional persistent disk. The persistent_directories field is repeated, but it may contain only one entry. It creates a [persistent disk](https://cloud.google.com/compute/docs/disks/persistent-disks) that mounts to the workstation VM at &#x60;/home&#x60; when the session starts and detaches when the session ends. If this field is empty, workstations created with this configuration do not have a persistent home directory.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:40:17.375207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GceRegionalPersistentDisk {
  public static final String SERIALIZED_NAME_DISK_TYPE = "diskType";
  @SerializedName(SERIALIZED_NAME_DISK_TYPE)
  private String diskType;

  public static final String SERIALIZED_NAME_FS_TYPE = "fsType";
  @SerializedName(SERIALIZED_NAME_FS_TYPE)
  private String fsType;

  /**
   * Optional. Whether the persistent disk should be deleted when the workstation is deleted. Valid values are &#x60;DELETE&#x60; and &#x60;RETAIN&#x60;. Defaults to &#x60;DELETE&#x60;.
   */
  @JsonAdapter(ReclaimPolicyEnum.Adapter.class)
  public enum ReclaimPolicyEnum {
    RECLAIM_POLICY_UNSPECIFIED("RECLAIM_POLICY_UNSPECIFIED"),
    
    DELETE("DELETE"),
    
    RETAIN("RETAIN");

    private String value;

    ReclaimPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReclaimPolicyEnum fromValue(String value) {
      for (ReclaimPolicyEnum b : ReclaimPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReclaimPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReclaimPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReclaimPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReclaimPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReclaimPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECLAIM_POLICY = "reclaimPolicy";
  @SerializedName(SERIALIZED_NAME_RECLAIM_POLICY)
  private ReclaimPolicyEnum reclaimPolicy;

  public static final String SERIALIZED_NAME_SIZE_GB = "sizeGb";
  @SerializedName(SERIALIZED_NAME_SIZE_GB)
  private Integer sizeGb;

  public static final String SERIALIZED_NAME_SOURCE_SNAPSHOT = "sourceSnapshot";
  @SerializedName(SERIALIZED_NAME_SOURCE_SNAPSHOT)
  private String sourceSnapshot;

  public GceRegionalPersistentDisk() {
  }

  public GceRegionalPersistentDisk diskType(String diskType) {
    this.diskType = diskType;
    return this;
  }

  /**
   * Optional. The [type of the persistent disk](https://cloud.google.com/compute/docs/disks#disk-types) for the home directory. Defaults to &#x60;\&quot;pd-standard\&quot;&#x60;.
   * @return diskType
   */
  @javax.annotation.Nullable
  public String getDiskType() {
    return diskType;
  }

  public void setDiskType(String diskType) {
    this.diskType = diskType;
  }


  public GceRegionalPersistentDisk fsType(String fsType) {
    this.fsType = fsType;
    return this;
  }

  /**
   * Optional. Type of file system that the disk should be formatted with. The workstation image must support this file system type. Must be empty if source_snapshot is set. Defaults to &#x60;\&quot;ext4\&quot;&#x60;.
   * @return fsType
   */
  @javax.annotation.Nullable
  public String getFsType() {
    return fsType;
  }

  public void setFsType(String fsType) {
    this.fsType = fsType;
  }


  public GceRegionalPersistentDisk reclaimPolicy(ReclaimPolicyEnum reclaimPolicy) {
    this.reclaimPolicy = reclaimPolicy;
    return this;
  }

  /**
   * Optional. Whether the persistent disk should be deleted when the workstation is deleted. Valid values are &#x60;DELETE&#x60; and &#x60;RETAIN&#x60;. Defaults to &#x60;DELETE&#x60;.
   * @return reclaimPolicy
   */
  @javax.annotation.Nullable
  public ReclaimPolicyEnum getReclaimPolicy() {
    return reclaimPolicy;
  }

  public void setReclaimPolicy(ReclaimPolicyEnum reclaimPolicy) {
    this.reclaimPolicy = reclaimPolicy;
  }


  public GceRegionalPersistentDisk sizeGb(Integer sizeGb) {
    this.sizeGb = sizeGb;
    return this;
  }

  /**
   * Optional. The GB capacity of a persistent home directory for each workstation created with this configuration. Must be empty if source_snapshot is set. Valid values are &#x60;10&#x60;, &#x60;50&#x60;, &#x60;100&#x60;, &#x60;200&#x60;, &#x60;500&#x60;, or &#x60;1000&#x60;. Defaults to &#x60;200&#x60;. If less than &#x60;200&#x60; GB, the disk_type must be &#x60;\&quot;pd-balanced\&quot;&#x60; or &#x60;\&quot;pd-ssd\&quot;&#x60;.
   * @return sizeGb
   */
  @javax.annotation.Nullable
  public Integer getSizeGb() {
    return sizeGb;
  }

  public void setSizeGb(Integer sizeGb) {
    this.sizeGb = sizeGb;
  }


  public GceRegionalPersistentDisk sourceSnapshot(String sourceSnapshot) {
    this.sourceSnapshot = sourceSnapshot;
    return this;
  }

  /**
   * Optional. Name of the snapshot to use as the source for the disk. If set, size_gb and fs_type must be empty.
   * @return sourceSnapshot
   */
  @javax.annotation.Nullable
  public String getSourceSnapshot() {
    return sourceSnapshot;
  }

  public void setSourceSnapshot(String sourceSnapshot) {
    this.sourceSnapshot = sourceSnapshot;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GceRegionalPersistentDisk gceRegionalPersistentDisk = (GceRegionalPersistentDisk) o;
    return Objects.equals(this.diskType, gceRegionalPersistentDisk.diskType) &&
        Objects.equals(this.fsType, gceRegionalPersistentDisk.fsType) &&
        Objects.equals(this.reclaimPolicy, gceRegionalPersistentDisk.reclaimPolicy) &&
        Objects.equals(this.sizeGb, gceRegionalPersistentDisk.sizeGb) &&
        Objects.equals(this.sourceSnapshot, gceRegionalPersistentDisk.sourceSnapshot);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diskType, fsType, reclaimPolicy, sizeGb, sourceSnapshot);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GceRegionalPersistentDisk {\n");
    sb.append("    diskType: ").append(toIndentedString(diskType)).append("\n");
    sb.append("    fsType: ").append(toIndentedString(fsType)).append("\n");
    sb.append("    reclaimPolicy: ").append(toIndentedString(reclaimPolicy)).append("\n");
    sb.append("    sizeGb: ").append(toIndentedString(sizeGb)).append("\n");
    sb.append("    sourceSnapshot: ").append(toIndentedString(sourceSnapshot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("diskType");
    openapiFields.add("fsType");
    openapiFields.add("reclaimPolicy");
    openapiFields.add("sizeGb");
    openapiFields.add("sourceSnapshot");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GceRegionalPersistentDisk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GceRegionalPersistentDisk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GceRegionalPersistentDisk is not found in the empty JSON string", GceRegionalPersistentDisk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GceRegionalPersistentDisk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GceRegionalPersistentDisk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("diskType") != null && !jsonObj.get("diskType").isJsonNull()) && !jsonObj.get("diskType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskType").toString()));
      }
      if ((jsonObj.get("fsType") != null && !jsonObj.get("fsType").isJsonNull()) && !jsonObj.get("fsType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fsType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fsType").toString()));
      }
      if ((jsonObj.get("reclaimPolicy") != null && !jsonObj.get("reclaimPolicy").isJsonNull()) && !jsonObj.get("reclaimPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reclaimPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reclaimPolicy").toString()));
      }
      // validate the optional field `reclaimPolicy`
      if (jsonObj.get("reclaimPolicy") != null && !jsonObj.get("reclaimPolicy").isJsonNull()) {
        ReclaimPolicyEnum.validateJsonElement(jsonObj.get("reclaimPolicy"));
      }
      if ((jsonObj.get("sourceSnapshot") != null && !jsonObj.get("sourceSnapshot").isJsonNull()) && !jsonObj.get("sourceSnapshot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceSnapshot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceSnapshot").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GceRegionalPersistentDisk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GceRegionalPersistentDisk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GceRegionalPersistentDisk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GceRegionalPersistentDisk.class));

       return (TypeAdapter<T>) new TypeAdapter<GceRegionalPersistentDisk>() {
           @Override
           public void write(JsonWriter out, GceRegionalPersistentDisk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GceRegionalPersistentDisk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GceRegionalPersistentDisk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GceRegionalPersistentDisk
   * @throws IOException if the JSON string is invalid with respect to GceRegionalPersistentDisk
   */
  public static GceRegionalPersistentDisk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GceRegionalPersistentDisk.class);
  }

  /**
   * Convert an instance of GceRegionalPersistentDisk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

