/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GceRegionalPersistentDisk model module.
 * @module model/GceRegionalPersistentDisk
 * @version v1
 */
class GceRegionalPersistentDisk {
    /**
     * Constructs a new <code>GceRegionalPersistentDisk</code>.
     * A PersistentDirectory backed by a Compute Engine regional persistent disk. The persistent_directories field is repeated, but it may contain only one entry. It creates a [persistent disk](https://cloud.google.com/compute/docs/disks/persistent-disks) that mounts to the workstation VM at &#x60;/home&#x60; when the session starts and detaches when the session ends. If this field is empty, workstations created with this configuration do not have a persistent home directory.
     * @alias module:model/GceRegionalPersistentDisk
     */
    constructor() { 
        
        GceRegionalPersistentDisk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GceRegionalPersistentDisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GceRegionalPersistentDisk} obj Optional instance to populate.
     * @return {module:model/GceRegionalPersistentDisk} The populated <code>GceRegionalPersistentDisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GceRegionalPersistentDisk();

            if (data.hasOwnProperty('diskType')) {
                obj['diskType'] = ApiClient.convertToType(data['diskType'], 'String');
            }
            if (data.hasOwnProperty('fsType')) {
                obj['fsType'] = ApiClient.convertToType(data['fsType'], 'String');
            }
            if (data.hasOwnProperty('reclaimPolicy')) {
                obj['reclaimPolicy'] = ApiClient.convertToType(data['reclaimPolicy'], 'String');
            }
            if (data.hasOwnProperty('sizeGb')) {
                obj['sizeGb'] = ApiClient.convertToType(data['sizeGb'], 'Number');
            }
            if (data.hasOwnProperty('sourceSnapshot')) {
                obj['sourceSnapshot'] = ApiClient.convertToType(data['sourceSnapshot'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GceRegionalPersistentDisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GceRegionalPersistentDisk</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['diskType'] && !(typeof data['diskType'] === 'string' || data['diskType'] instanceof String)) {
            throw new Error("Expected the field `diskType` to be a primitive type in the JSON string but got " + data['diskType']);
        }
        // ensure the json data is a string
        if (data['fsType'] && !(typeof data['fsType'] === 'string' || data['fsType'] instanceof String)) {
            throw new Error("Expected the field `fsType` to be a primitive type in the JSON string but got " + data['fsType']);
        }
        // ensure the json data is a string
        if (data['reclaimPolicy'] && !(typeof data['reclaimPolicy'] === 'string' || data['reclaimPolicy'] instanceof String)) {
            throw new Error("Expected the field `reclaimPolicy` to be a primitive type in the JSON string but got " + data['reclaimPolicy']);
        }
        // ensure the json data is a string
        if (data['sourceSnapshot'] && !(typeof data['sourceSnapshot'] === 'string' || data['sourceSnapshot'] instanceof String)) {
            throw new Error("Expected the field `sourceSnapshot` to be a primitive type in the JSON string but got " + data['sourceSnapshot']);
        }

        return true;
    }


}



/**
 * Optional. The [type of the persistent disk](https://cloud.google.com/compute/docs/disks#disk-types) for the home directory. Defaults to `\"pd-standard\"`.
 * @member {String} diskType
 */
GceRegionalPersistentDisk.prototype['diskType'] = undefined;

/**
 * Optional. Type of file system that the disk should be formatted with. The workstation image must support this file system type. Must be empty if source_snapshot is set. Defaults to `\"ext4\"`.
 * @member {String} fsType
 */
GceRegionalPersistentDisk.prototype['fsType'] = undefined;

/**
 * Optional. Whether the persistent disk should be deleted when the workstation is deleted. Valid values are `DELETE` and `RETAIN`. Defaults to `DELETE`.
 * @member {module:model/GceRegionalPersistentDisk.ReclaimPolicyEnum} reclaimPolicy
 */
GceRegionalPersistentDisk.prototype['reclaimPolicy'] = undefined;

/**
 * Optional. The GB capacity of a persistent home directory for each workstation created with this configuration. Must be empty if source_snapshot is set. Valid values are `10`, `50`, `100`, `200`, `500`, or `1000`. Defaults to `200`. If less than `200` GB, the disk_type must be `\"pd-balanced\"` or `\"pd-ssd\"`.
 * @member {Number} sizeGb
 */
GceRegionalPersistentDisk.prototype['sizeGb'] = undefined;

/**
 * Optional. Name of the snapshot to use as the source for the disk. If set, size_gb and fs_type must be empty.
 * @member {String} sourceSnapshot
 */
GceRegionalPersistentDisk.prototype['sourceSnapshot'] = undefined;





/**
 * Allowed values for the <code>reclaimPolicy</code> property.
 * @enum {String}
 * @readonly
 */
GceRegionalPersistentDisk['ReclaimPolicyEnum'] = {

    /**
     * value: "RECLAIM_POLICY_UNSPECIFIED"
     * @const
     */
    "RECLAIM_POLICY_UNSPECIFIED": "RECLAIM_POLICY_UNSPECIFIED",

    /**
     * value: "DELETE"
     * @const
     */
    "DELETE": "DELETE",

    /**
     * value: "RETAIN"
     * @const
     */
    "RETAIN": "RETAIN"
};



export default GceRegionalPersistentDisk;

