/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGceRegionalPersistentDisk.h
 *
 * A PersistentDirectory backed by a Compute Engine regional persistent disk. The persistent_directories field is repeated, but it may contain only one entry. It creates a [persistent disk](https://cloud.google.com/compute/docs/disks/persistent-disks) that mounts to the workstation VM at &#x60;/home&#x60; when the session starts and detaches when the session ends. If this field is empty, workstations created with this configuration do not have a persistent home directory.
 */

#ifndef OAIGceRegionalPersistentDisk_H
#define OAIGceRegionalPersistentDisk_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGceRegionalPersistentDisk : public OAIObject {
public:
    OAIGceRegionalPersistentDisk();
    OAIGceRegionalPersistentDisk(QString json);
    ~OAIGceRegionalPersistentDisk() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDiskType() const;
    void setDiskType(const QString &disk_type);
    bool is_disk_type_Set() const;
    bool is_disk_type_Valid() const;

    QString getFsType() const;
    void setFsType(const QString &fs_type);
    bool is_fs_type_Set() const;
    bool is_fs_type_Valid() const;

    QString getReclaimPolicy() const;
    void setReclaimPolicy(const QString &reclaim_policy);
    bool is_reclaim_policy_Set() const;
    bool is_reclaim_policy_Valid() const;

    qint32 getSizeGb() const;
    void setSizeGb(const qint32 &size_gb);
    bool is_size_gb_Set() const;
    bool is_size_gb_Valid() const;

    QString getSourceSnapshot() const;
    void setSourceSnapshot(const QString &source_snapshot);
    bool is_source_snapshot_Set() const;
    bool is_source_snapshot_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_disk_type;
    bool m_disk_type_isSet;
    bool m_disk_type_isValid;

    QString m_fs_type;
    bool m_fs_type_isSet;
    bool m_fs_type_isValid;

    QString m_reclaim_policy;
    bool m_reclaim_policy_isSet;
    bool m_reclaim_policy_isValid;

    qint32 m_size_gb;
    bool m_size_gb_isSet;
    bool m_size_gb_isValid;

    QString m_source_snapshot;
    bool m_source_snapshot_isSet;
    bool m_source_snapshot_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGceRegionalPersistentDisk)

#endif // OAIGceRegionalPersistentDisk_H
