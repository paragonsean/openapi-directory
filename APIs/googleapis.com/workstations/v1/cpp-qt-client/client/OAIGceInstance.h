/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGceInstance.h
 *
 * A runtime using a Compute Engine instance.
 */

#ifndef OAIGceInstance_H
#define OAIGceInstance_H

#include <QJsonObject>

#include "OAIGceConfidentialInstanceConfig.h"
#include "OAIGceShieldedInstanceConfig.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGceConfidentialInstanceConfig;
class OAIGceShieldedInstanceConfig;

class OAIGceInstance : public OAIObject {
public:
    OAIGceInstance();
    OAIGceInstance(QString json);
    ~OAIGceInstance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBootDiskSizeGb() const;
    void setBootDiskSizeGb(const qint32 &boot_disk_size_gb);
    bool is_boot_disk_size_gb_Set() const;
    bool is_boot_disk_size_gb_Valid() const;

    OAIGceConfidentialInstanceConfig getConfidentialInstanceConfig() const;
    void setConfidentialInstanceConfig(const OAIGceConfidentialInstanceConfig &confidential_instance_config);
    bool is_confidential_instance_config_Set() const;
    bool is_confidential_instance_config_Valid() const;

    bool isDisablePublicIpAddresses() const;
    void setDisablePublicIpAddresses(const bool &disable_public_ip_addresses);
    bool is_disable_public_ip_addresses_Set() const;
    bool is_disable_public_ip_addresses_Valid() const;

    bool isEnableNestedVirtualization() const;
    void setEnableNestedVirtualization(const bool &enable_nested_virtualization);
    bool is_enable_nested_virtualization_Set() const;
    bool is_enable_nested_virtualization_Valid() const;

    QString getMachineType() const;
    void setMachineType(const QString &machine_type);
    bool is_machine_type_Set() const;
    bool is_machine_type_Valid() const;

    qint32 getPoolSize() const;
    void setPoolSize(const qint32 &pool_size);
    bool is_pool_size_Set() const;
    bool is_pool_size_Valid() const;

    qint32 getPooledInstances() const;
    void setPooledInstances(const qint32 &pooled_instances);
    bool is_pooled_instances_Set() const;
    bool is_pooled_instances_Valid() const;

    QString getServiceAccount() const;
    void setServiceAccount(const QString &service_account);
    bool is_service_account_Set() const;
    bool is_service_account_Valid() const;

    QList<QString> getServiceAccountScopes() const;
    void setServiceAccountScopes(const QList<QString> &service_account_scopes);
    bool is_service_account_scopes_Set() const;
    bool is_service_account_scopes_Valid() const;

    OAIGceShieldedInstanceConfig getShieldedInstanceConfig() const;
    void setShieldedInstanceConfig(const OAIGceShieldedInstanceConfig &shielded_instance_config);
    bool is_shielded_instance_config_Set() const;
    bool is_shielded_instance_config_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_boot_disk_size_gb;
    bool m_boot_disk_size_gb_isSet;
    bool m_boot_disk_size_gb_isValid;

    OAIGceConfidentialInstanceConfig m_confidential_instance_config;
    bool m_confidential_instance_config_isSet;
    bool m_confidential_instance_config_isValid;

    bool m_disable_public_ip_addresses;
    bool m_disable_public_ip_addresses_isSet;
    bool m_disable_public_ip_addresses_isValid;

    bool m_enable_nested_virtualization;
    bool m_enable_nested_virtualization_isSet;
    bool m_enable_nested_virtualization_isValid;

    QString m_machine_type;
    bool m_machine_type_isSet;
    bool m_machine_type_isValid;

    qint32 m_pool_size;
    bool m_pool_size_isSet;
    bool m_pool_size_isValid;

    qint32 m_pooled_instances;
    bool m_pooled_instances_isSet;
    bool m_pooled_instances_isValid;

    QString m_service_account;
    bool m_service_account_isSet;
    bool m_service_account_isValid;

    QList<QString> m_service_account_scopes;
    bool m_service_account_scopes_isSet;
    bool m_service_account_scopes_isValid;

    OAIGceShieldedInstanceConfig m_shielded_instance_config;
    bool m_shielded_instance_config_isSet;
    bool m_shielded_instance_config_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGceInstance)

#endif // OAIGceInstance_H
