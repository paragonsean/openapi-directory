/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateClusterConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateClusterConfig::OAIPrivateClusterConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateClusterConfig::OAIPrivateClusterConfig() {
    this->initializeModel();
}

OAIPrivateClusterConfig::~OAIPrivateClusterConfig() {}

void OAIPrivateClusterConfig::initializeModel() {

    m_allowed_projects_isSet = false;
    m_allowed_projects_isValid = false;

    m_cluster_hostname_isSet = false;
    m_cluster_hostname_isValid = false;

    m_enable_private_endpoint_isSet = false;
    m_enable_private_endpoint_isValid = false;

    m_service_attachment_uri_isSet = false;
    m_service_attachment_uri_isValid = false;
}

void OAIPrivateClusterConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateClusterConfig::fromJsonObject(QJsonObject json) {

    m_allowed_projects_isValid = ::OpenAPI::fromJsonValue(m_allowed_projects, json[QString("allowedProjects")]);
    m_allowed_projects_isSet = !json[QString("allowedProjects")].isNull() && m_allowed_projects_isValid;

    m_cluster_hostname_isValid = ::OpenAPI::fromJsonValue(m_cluster_hostname, json[QString("clusterHostname")]);
    m_cluster_hostname_isSet = !json[QString("clusterHostname")].isNull() && m_cluster_hostname_isValid;

    m_enable_private_endpoint_isValid = ::OpenAPI::fromJsonValue(m_enable_private_endpoint, json[QString("enablePrivateEndpoint")]);
    m_enable_private_endpoint_isSet = !json[QString("enablePrivateEndpoint")].isNull() && m_enable_private_endpoint_isValid;

    m_service_attachment_uri_isValid = ::OpenAPI::fromJsonValue(m_service_attachment_uri, json[QString("serviceAttachmentUri")]);
    m_service_attachment_uri_isSet = !json[QString("serviceAttachmentUri")].isNull() && m_service_attachment_uri_isValid;
}

QString OAIPrivateClusterConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateClusterConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_projects.size() > 0) {
        obj.insert(QString("allowedProjects"), ::OpenAPI::toJsonValue(m_allowed_projects));
    }
    if (m_cluster_hostname_isSet) {
        obj.insert(QString("clusterHostname"), ::OpenAPI::toJsonValue(m_cluster_hostname));
    }
    if (m_enable_private_endpoint_isSet) {
        obj.insert(QString("enablePrivateEndpoint"), ::OpenAPI::toJsonValue(m_enable_private_endpoint));
    }
    if (m_service_attachment_uri_isSet) {
        obj.insert(QString("serviceAttachmentUri"), ::OpenAPI::toJsonValue(m_service_attachment_uri));
    }
    return obj;
}

QList<QString> OAIPrivateClusterConfig::getAllowedProjects() const {
    return m_allowed_projects;
}
void OAIPrivateClusterConfig::setAllowedProjects(const QList<QString> &allowed_projects) {
    m_allowed_projects = allowed_projects;
    m_allowed_projects_isSet = true;
}

bool OAIPrivateClusterConfig::is_allowed_projects_Set() const{
    return m_allowed_projects_isSet;
}

bool OAIPrivateClusterConfig::is_allowed_projects_Valid() const{
    return m_allowed_projects_isValid;
}

QString OAIPrivateClusterConfig::getClusterHostname() const {
    return m_cluster_hostname;
}
void OAIPrivateClusterConfig::setClusterHostname(const QString &cluster_hostname) {
    m_cluster_hostname = cluster_hostname;
    m_cluster_hostname_isSet = true;
}

bool OAIPrivateClusterConfig::is_cluster_hostname_Set() const{
    return m_cluster_hostname_isSet;
}

bool OAIPrivateClusterConfig::is_cluster_hostname_Valid() const{
    return m_cluster_hostname_isValid;
}

bool OAIPrivateClusterConfig::isEnablePrivateEndpoint() const {
    return m_enable_private_endpoint;
}
void OAIPrivateClusterConfig::setEnablePrivateEndpoint(const bool &enable_private_endpoint) {
    m_enable_private_endpoint = enable_private_endpoint;
    m_enable_private_endpoint_isSet = true;
}

bool OAIPrivateClusterConfig::is_enable_private_endpoint_Set() const{
    return m_enable_private_endpoint_isSet;
}

bool OAIPrivateClusterConfig::is_enable_private_endpoint_Valid() const{
    return m_enable_private_endpoint_isValid;
}

QString OAIPrivateClusterConfig::getServiceAttachmentUri() const {
    return m_service_attachment_uri;
}
void OAIPrivateClusterConfig::setServiceAttachmentUri(const QString &service_attachment_uri) {
    m_service_attachment_uri = service_attachment_uri;
    m_service_attachment_uri_isSet = true;
}

bool OAIPrivateClusterConfig::is_service_attachment_uri_Set() const{
    return m_service_attachment_uri_isSet;
}

bool OAIPrivateClusterConfig::is_service_attachment_uri_Valid() const{
    return m_service_attachment_uri_isValid;
}

bool OAIPrivateClusterConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_private_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_attachment_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateClusterConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
