/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkstation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkstation::OAIWorkstation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkstation::OAIWorkstation() {
    this->initializeModel();
}

OAIWorkstation::~OAIWorkstation() {}

void OAIWorkstation::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_env_isSet = false;
    m_env_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_kms_key_isSet = false;
    m_kms_key_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIWorkstation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkstation::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_env_isValid = ::OpenAPI::fromJsonValue(m_env, json[QString("env")]);
    m_env_isSet = !json[QString("env")].isNull() && m_env_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_kms_key_isValid = ::OpenAPI::fromJsonValue(m_kms_key, json[QString("kmsKey")]);
    m_kms_key_isSet = !json[QString("kmsKey")].isNull() && m_kms_key_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIWorkstation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkstation::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_env.size() > 0) {
        obj.insert(QString("env"), ::OpenAPI::toJsonValue(m_env));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_kms_key_isSet) {
        obj.insert(QString("kmsKey"), ::OpenAPI::toJsonValue(m_kms_key));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QMap<QString, QString> OAIWorkstation::getAnnotations() const {
    return m_annotations;
}
void OAIWorkstation::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIWorkstation::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIWorkstation::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QString OAIWorkstation::getCreateTime() const {
    return m_create_time;
}
void OAIWorkstation::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIWorkstation::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIWorkstation::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIWorkstation::getDeleteTime() const {
    return m_delete_time;
}
void OAIWorkstation::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIWorkstation::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIWorkstation::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QString OAIWorkstation::getDisplayName() const {
    return m_display_name;
}
void OAIWorkstation::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIWorkstation::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIWorkstation::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QMap<QString, QString> OAIWorkstation::getEnv() const {
    return m_env;
}
void OAIWorkstation::setEnv(const QMap<QString, QString> &env) {
    m_env = env;
    m_env_isSet = true;
}

bool OAIWorkstation::is_env_Set() const{
    return m_env_isSet;
}

bool OAIWorkstation::is_env_Valid() const{
    return m_env_isValid;
}

QString OAIWorkstation::getEtag() const {
    return m_etag;
}
void OAIWorkstation::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIWorkstation::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIWorkstation::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIWorkstation::getHost() const {
    return m_host;
}
void OAIWorkstation::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIWorkstation::is_host_Set() const{
    return m_host_isSet;
}

bool OAIWorkstation::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIWorkstation::getKmsKey() const {
    return m_kms_key;
}
void OAIWorkstation::setKmsKey(const QString &kms_key) {
    m_kms_key = kms_key;
    m_kms_key_isSet = true;
}

bool OAIWorkstation::is_kms_key_Set() const{
    return m_kms_key_isSet;
}

bool OAIWorkstation::is_kms_key_Valid() const{
    return m_kms_key_isValid;
}

QMap<QString, QString> OAIWorkstation::getLabels() const {
    return m_labels;
}
void OAIWorkstation::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIWorkstation::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIWorkstation::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIWorkstation::getName() const {
    return m_name;
}
void OAIWorkstation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkstation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkstation::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIWorkstation::isReconciling() const {
    return m_reconciling;
}
void OAIWorkstation::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAIWorkstation::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAIWorkstation::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

QString OAIWorkstation::getStartTime() const {
    return m_start_time;
}
void OAIWorkstation::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIWorkstation::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIWorkstation::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIWorkstation::getState() const {
    return m_state;
}
void OAIWorkstation::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIWorkstation::is_state_Set() const{
    return m_state_isSet;
}

bool OAIWorkstation::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIWorkstation::getUid() const {
    return m_uid;
}
void OAIWorkstation::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIWorkstation::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIWorkstation::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIWorkstation::getUpdateTime() const {
    return m_update_time;
}
void OAIWorkstation::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIWorkstation::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIWorkstation::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIWorkstation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_env.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkstation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
