/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainer::OAIContainer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainer::OAIContainer() {
    this->initializeModel();
}

OAIContainer::~OAIContainer() {}

void OAIContainer::initializeModel() {

    m_args_isSet = false;
    m_args_isValid = false;

    m_command_isSet = false;
    m_command_isValid = false;

    m_env_isSet = false;
    m_env_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_run_as_user_isSet = false;
    m_run_as_user_isValid = false;

    m_working_dir_isSet = false;
    m_working_dir_isValid = false;
}

void OAIContainer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainer::fromJsonObject(QJsonObject json) {

    m_args_isValid = ::OpenAPI::fromJsonValue(m_args, json[QString("args")]);
    m_args_isSet = !json[QString("args")].isNull() && m_args_isValid;

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;

    m_env_isValid = ::OpenAPI::fromJsonValue(m_env, json[QString("env")]);
    m_env_isSet = !json[QString("env")].isNull() && m_env_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_run_as_user_isValid = ::OpenAPI::fromJsonValue(m_run_as_user, json[QString("runAsUser")]);
    m_run_as_user_isSet = !json[QString("runAsUser")].isNull() && m_run_as_user_isValid;

    m_working_dir_isValid = ::OpenAPI::fromJsonValue(m_working_dir, json[QString("workingDir")]);
    m_working_dir_isSet = !json[QString("workingDir")].isNull() && m_working_dir_isValid;
}

QString OAIContainer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainer::asJsonObject() const {
    QJsonObject obj;
    if (m_args.size() > 0) {
        obj.insert(QString("args"), ::OpenAPI::toJsonValue(m_args));
    }
    if (m_command.size() > 0) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_env.size() > 0) {
        obj.insert(QString("env"), ::OpenAPI::toJsonValue(m_env));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_run_as_user_isSet) {
        obj.insert(QString("runAsUser"), ::OpenAPI::toJsonValue(m_run_as_user));
    }
    if (m_working_dir_isSet) {
        obj.insert(QString("workingDir"), ::OpenAPI::toJsonValue(m_working_dir));
    }
    return obj;
}

QList<QString> OAIContainer::getArgs() const {
    return m_args;
}
void OAIContainer::setArgs(const QList<QString> &args) {
    m_args = args;
    m_args_isSet = true;
}

bool OAIContainer::is_args_Set() const{
    return m_args_isSet;
}

bool OAIContainer::is_args_Valid() const{
    return m_args_isValid;
}

QList<QString> OAIContainer::getCommand() const {
    return m_command;
}
void OAIContainer::setCommand(const QList<QString> &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIContainer::is_command_Set() const{
    return m_command_isSet;
}

bool OAIContainer::is_command_Valid() const{
    return m_command_isValid;
}

QMap<QString, QString> OAIContainer::getEnv() const {
    return m_env;
}
void OAIContainer::setEnv(const QMap<QString, QString> &env) {
    m_env = env;
    m_env_isSet = true;
}

bool OAIContainer::is_env_Set() const{
    return m_env_isSet;
}

bool OAIContainer::is_env_Valid() const{
    return m_env_isValid;
}

QString OAIContainer::getImage() const {
    return m_image;
}
void OAIContainer::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIContainer::is_image_Set() const{
    return m_image_isSet;
}

bool OAIContainer::is_image_Valid() const{
    return m_image_isValid;
}

qint32 OAIContainer::getRunAsUser() const {
    return m_run_as_user;
}
void OAIContainer::setRunAsUser(const qint32 &run_as_user) {
    m_run_as_user = run_as_user;
    m_run_as_user_isSet = true;
}

bool OAIContainer::is_run_as_user_Set() const{
    return m_run_as_user_isSet;
}

bool OAIContainer::is_run_as_user_Valid() const{
    return m_run_as_user_isValid;
}

QString OAIContainer::getWorkingDir() const {
    return m_working_dir;
}
void OAIContainer::setWorkingDir(const QString &working_dir) {
    m_working_dir = working_dir;
    m_working_dir_isSet = true;
}

bool OAIContainer::is_working_dir_Set() const{
    return m_working_dir_isSet;
}

bool OAIContainer::is_working_dir_Valid() const{
    return m_working_dir_isValid;
}

bool OAIContainer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_args.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_command.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_env.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_as_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_dir_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
