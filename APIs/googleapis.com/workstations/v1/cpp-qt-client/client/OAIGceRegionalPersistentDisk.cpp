/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGceRegionalPersistentDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGceRegionalPersistentDisk::OAIGceRegionalPersistentDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGceRegionalPersistentDisk::OAIGceRegionalPersistentDisk() {
    this->initializeModel();
}

OAIGceRegionalPersistentDisk::~OAIGceRegionalPersistentDisk() {}

void OAIGceRegionalPersistentDisk::initializeModel() {

    m_disk_type_isSet = false;
    m_disk_type_isValid = false;

    m_fs_type_isSet = false;
    m_fs_type_isValid = false;

    m_reclaim_policy_isSet = false;
    m_reclaim_policy_isValid = false;

    m_size_gb_isSet = false;
    m_size_gb_isValid = false;

    m_source_snapshot_isSet = false;
    m_source_snapshot_isValid = false;
}

void OAIGceRegionalPersistentDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGceRegionalPersistentDisk::fromJsonObject(QJsonObject json) {

    m_disk_type_isValid = ::OpenAPI::fromJsonValue(m_disk_type, json[QString("diskType")]);
    m_disk_type_isSet = !json[QString("diskType")].isNull() && m_disk_type_isValid;

    m_fs_type_isValid = ::OpenAPI::fromJsonValue(m_fs_type, json[QString("fsType")]);
    m_fs_type_isSet = !json[QString("fsType")].isNull() && m_fs_type_isValid;

    m_reclaim_policy_isValid = ::OpenAPI::fromJsonValue(m_reclaim_policy, json[QString("reclaimPolicy")]);
    m_reclaim_policy_isSet = !json[QString("reclaimPolicy")].isNull() && m_reclaim_policy_isValid;

    m_size_gb_isValid = ::OpenAPI::fromJsonValue(m_size_gb, json[QString("sizeGb")]);
    m_size_gb_isSet = !json[QString("sizeGb")].isNull() && m_size_gb_isValid;

    m_source_snapshot_isValid = ::OpenAPI::fromJsonValue(m_source_snapshot, json[QString("sourceSnapshot")]);
    m_source_snapshot_isSet = !json[QString("sourceSnapshot")].isNull() && m_source_snapshot_isValid;
}

QString OAIGceRegionalPersistentDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGceRegionalPersistentDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_type_isSet) {
        obj.insert(QString("diskType"), ::OpenAPI::toJsonValue(m_disk_type));
    }
    if (m_fs_type_isSet) {
        obj.insert(QString("fsType"), ::OpenAPI::toJsonValue(m_fs_type));
    }
    if (m_reclaim_policy_isSet) {
        obj.insert(QString("reclaimPolicy"), ::OpenAPI::toJsonValue(m_reclaim_policy));
    }
    if (m_size_gb_isSet) {
        obj.insert(QString("sizeGb"), ::OpenAPI::toJsonValue(m_size_gb));
    }
    if (m_source_snapshot_isSet) {
        obj.insert(QString("sourceSnapshot"), ::OpenAPI::toJsonValue(m_source_snapshot));
    }
    return obj;
}

QString OAIGceRegionalPersistentDisk::getDiskType() const {
    return m_disk_type;
}
void OAIGceRegionalPersistentDisk::setDiskType(const QString &disk_type) {
    m_disk_type = disk_type;
    m_disk_type_isSet = true;
}

bool OAIGceRegionalPersistentDisk::is_disk_type_Set() const{
    return m_disk_type_isSet;
}

bool OAIGceRegionalPersistentDisk::is_disk_type_Valid() const{
    return m_disk_type_isValid;
}

QString OAIGceRegionalPersistentDisk::getFsType() const {
    return m_fs_type;
}
void OAIGceRegionalPersistentDisk::setFsType(const QString &fs_type) {
    m_fs_type = fs_type;
    m_fs_type_isSet = true;
}

bool OAIGceRegionalPersistentDisk::is_fs_type_Set() const{
    return m_fs_type_isSet;
}

bool OAIGceRegionalPersistentDisk::is_fs_type_Valid() const{
    return m_fs_type_isValid;
}

QString OAIGceRegionalPersistentDisk::getReclaimPolicy() const {
    return m_reclaim_policy;
}
void OAIGceRegionalPersistentDisk::setReclaimPolicy(const QString &reclaim_policy) {
    m_reclaim_policy = reclaim_policy;
    m_reclaim_policy_isSet = true;
}

bool OAIGceRegionalPersistentDisk::is_reclaim_policy_Set() const{
    return m_reclaim_policy_isSet;
}

bool OAIGceRegionalPersistentDisk::is_reclaim_policy_Valid() const{
    return m_reclaim_policy_isValid;
}

qint32 OAIGceRegionalPersistentDisk::getSizeGb() const {
    return m_size_gb;
}
void OAIGceRegionalPersistentDisk::setSizeGb(const qint32 &size_gb) {
    m_size_gb = size_gb;
    m_size_gb_isSet = true;
}

bool OAIGceRegionalPersistentDisk::is_size_gb_Set() const{
    return m_size_gb_isSet;
}

bool OAIGceRegionalPersistentDisk::is_size_gb_Valid() const{
    return m_size_gb_isValid;
}

QString OAIGceRegionalPersistentDisk::getSourceSnapshot() const {
    return m_source_snapshot;
}
void OAIGceRegionalPersistentDisk::setSourceSnapshot(const QString &source_snapshot) {
    m_source_snapshot = source_snapshot;
    m_source_snapshot_isSet = true;
}

bool OAIGceRegionalPersistentDisk::is_source_snapshot_Set() const{
    return m_source_snapshot_isSet;
}

bool OAIGceRegionalPersistentDisk::is_source_snapshot_Valid() const{
    return m_source_snapshot_isValid;
}

bool OAIGceRegionalPersistentDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fs_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reclaim_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_snapshot_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGceRegionalPersistentDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
