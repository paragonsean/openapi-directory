/**
 * Cloud Workstations API
 * Allows administrators to create managed developer environments in the cloud. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAuditConfig.h
 *
 * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both &#x60;allServices&#x60; and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { \&quot;audit_configs\&quot;: [ { \&quot;service\&quot;: \&quot;allServices\&quot;, \&quot;audit_log_configs\&quot;: [ { \&quot;log_type\&quot;: \&quot;DATA_READ\&quot;, \&quot;exempted_members\&quot;: [ \&quot;user:jose@example.com\&quot; ] }, { \&quot;log_type\&quot;: \&quot;DATA_WRITE\&quot; }, { \&quot;log_type\&quot;: \&quot;ADMIN_READ\&quot; } ] }, { \&quot;service\&quot;: \&quot;sampleservice.googleapis.com\&quot;, \&quot;audit_log_configs\&quot;: [ { \&quot;log_type\&quot;: \&quot;DATA_READ\&quot; }, { \&quot;log_type\&quot;: \&quot;DATA_WRITE\&quot;, \&quot;exempted_members\&quot;: [ \&quot;user:aliya@example.com\&quot; ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts &#x60;jose@example.com&#x60; from DATA_READ logging, and &#x60;aliya@example.com&#x60; from DATA_WRITE logging.
 */

#ifndef OAIAuditConfig_H
#define OAIAuditConfig_H

#include <QJsonObject>

#include "OAIAuditLogConfig.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAuditLogConfig;

class OAIAuditConfig : public OAIObject {
public:
    OAIAuditConfig();
    OAIAuditConfig(QString json);
    ~OAIAuditConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAuditLogConfig> getAuditLogConfigs() const;
    void setAuditLogConfigs(const QList<OAIAuditLogConfig> &audit_log_configs);
    bool is_audit_log_configs_Set() const;
    bool is_audit_log_configs_Valid() const;

    QString getService() const;
    void setService(const QString &service);
    bool is_service_Set() const;
    bool is_service_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAuditLogConfig> m_audit_log_configs;
    bool m_audit_log_configs_isSet;
    bool m_audit_log_configs_isValid;

    QString m_service;
    bool m_service_isSet;
    bool m_service_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAuditConfig)

#endif // OAIAuditConfig_H
