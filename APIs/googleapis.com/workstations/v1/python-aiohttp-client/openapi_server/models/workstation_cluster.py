# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.domain_config import DomainConfig
from openapi_server.models.private_cluster_config import PrivateClusterConfig
from openapi_server.models.status import Status
from openapi_server import util


class WorkstationCluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, conditions: List[Status]=None, control_plane_ip: str=None, create_time: str=None, degraded: bool=None, delete_time: str=None, display_name: str=None, domain_config: DomainConfig=None, etag: str=None, labels: Dict[str, str]=None, name: str=None, network: str=None, private_cluster_config: PrivateClusterConfig=None, reconciling: bool=None, subnetwork: str=None, uid: str=None, update_time: str=None):
        """WorkstationCluster - a model defined in OpenAPI

        :param annotations: The annotations of this WorkstationCluster.
        :param conditions: The conditions of this WorkstationCluster.
        :param control_plane_ip: The control_plane_ip of this WorkstationCluster.
        :param create_time: The create_time of this WorkstationCluster.
        :param degraded: The degraded of this WorkstationCluster.
        :param delete_time: The delete_time of this WorkstationCluster.
        :param display_name: The display_name of this WorkstationCluster.
        :param domain_config: The domain_config of this WorkstationCluster.
        :param etag: The etag of this WorkstationCluster.
        :param labels: The labels of this WorkstationCluster.
        :param name: The name of this WorkstationCluster.
        :param network: The network of this WorkstationCluster.
        :param private_cluster_config: The private_cluster_config of this WorkstationCluster.
        :param reconciling: The reconciling of this WorkstationCluster.
        :param subnetwork: The subnetwork of this WorkstationCluster.
        :param uid: The uid of this WorkstationCluster.
        :param update_time: The update_time of this WorkstationCluster.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'conditions': List[Status],
            'control_plane_ip': str,
            'create_time': str,
            'degraded': bool,
            'delete_time': str,
            'display_name': str,
            'domain_config': DomainConfig,
            'etag': str,
            'labels': Dict[str, str],
            'name': str,
            'network': str,
            'private_cluster_config': PrivateClusterConfig,
            'reconciling': bool,
            'subnetwork': str,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'conditions': 'conditions',
            'control_plane_ip': 'controlPlaneIp',
            'create_time': 'createTime',
            'degraded': 'degraded',
            'delete_time': 'deleteTime',
            'display_name': 'displayName',
            'domain_config': 'domainConfig',
            'etag': 'etag',
            'labels': 'labels',
            'name': 'name',
            'network': 'network',
            'private_cluster_config': 'privateClusterConfig',
            'reconciling': 'reconciling',
            'subnetwork': 'subnetwork',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._annotations = annotations
        self._conditions = conditions
        self._control_plane_ip = control_plane_ip
        self._create_time = create_time
        self._degraded = degraded
        self._delete_time = delete_time
        self._display_name = display_name
        self._domain_config = domain_config
        self._etag = etag
        self._labels = labels
        self._name = name
        self._network = network
        self._private_cluster_config = private_cluster_config
        self._reconciling = reconciling
        self._subnetwork = subnetwork
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkstationCluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkstationCluster of this WorkstationCluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this WorkstationCluster.

        Optional. Client-specified annotations.

        :return: The annotations of this WorkstationCluster.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this WorkstationCluster.

        Optional. Client-specified annotations.

        :param annotations: The annotations of this WorkstationCluster.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def conditions(self):
        """Gets the conditions of this WorkstationCluster.

        Output only. Status conditions describing the workstation cluster's current state.

        :return: The conditions of this WorkstationCluster.
        :rtype: List[Status]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this WorkstationCluster.

        Output only. Status conditions describing the workstation cluster's current state.

        :param conditions: The conditions of this WorkstationCluster.
        :type conditions: List[Status]
        """

        self._conditions = conditions

    @property
    def control_plane_ip(self):
        """Gets the control_plane_ip of this WorkstationCluster.

        Output only. The private IP address of the control plane for this workstation cluster. Workstation VMs need access to this IP address to work with the service, so make sure that your firewall rules allow egress from the workstation VMs to this address.

        :return: The control_plane_ip of this WorkstationCluster.
        :rtype: str
        """
        return self._control_plane_ip

    @control_plane_ip.setter
    def control_plane_ip(self, control_plane_ip):
        """Sets the control_plane_ip of this WorkstationCluster.

        Output only. The private IP address of the control plane for this workstation cluster. Workstation VMs need access to this IP address to work with the service, so make sure that your firewall rules allow egress from the workstation VMs to this address.

        :param control_plane_ip: The control_plane_ip of this WorkstationCluster.
        :type control_plane_ip: str
        """

        self._control_plane_ip = control_plane_ip

    @property
    def create_time(self):
        """Gets the create_time of this WorkstationCluster.

        Output only. Time when this workstation cluster was created.

        :return: The create_time of this WorkstationCluster.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this WorkstationCluster.

        Output only. Time when this workstation cluster was created.

        :param create_time: The create_time of this WorkstationCluster.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def degraded(self):
        """Gets the degraded of this WorkstationCluster.

        Output only. Whether this workstation cluster is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in conditions.

        :return: The degraded of this WorkstationCluster.
        :rtype: bool
        """
        return self._degraded

    @degraded.setter
    def degraded(self, degraded):
        """Sets the degraded of this WorkstationCluster.

        Output only. Whether this workstation cluster is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in conditions.

        :param degraded: The degraded of this WorkstationCluster.
        :type degraded: bool
        """

        self._degraded = degraded

    @property
    def delete_time(self):
        """Gets the delete_time of this WorkstationCluster.

        Output only. Time when this workstation cluster was soft-deleted.

        :return: The delete_time of this WorkstationCluster.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this WorkstationCluster.

        Output only. Time when this workstation cluster was soft-deleted.

        :param delete_time: The delete_time of this WorkstationCluster.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def display_name(self):
        """Gets the display_name of this WorkstationCluster.

        Optional. Human-readable name for this workstation cluster.

        :return: The display_name of this WorkstationCluster.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this WorkstationCluster.

        Optional. Human-readable name for this workstation cluster.

        :param display_name: The display_name of this WorkstationCluster.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def domain_config(self):
        """Gets the domain_config of this WorkstationCluster.


        :return: The domain_config of this WorkstationCluster.
        :rtype: DomainConfig
        """
        return self._domain_config

    @domain_config.setter
    def domain_config(self, domain_config):
        """Sets the domain_config of this WorkstationCluster.


        :param domain_config: The domain_config of this WorkstationCluster.
        :type domain_config: DomainConfig
        """

        self._domain_config = domain_config

    @property
    def etag(self):
        """Gets the etag of this WorkstationCluster.

        Optional. Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding.

        :return: The etag of this WorkstationCluster.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this WorkstationCluster.

        Optional. Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding.

        :param etag: The etag of this WorkstationCluster.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this WorkstationCluster.

        Optional. [Labels](https://cloud.google.com/workstations/docs/label-resources) that are applied to the workstation cluster and that are also propagated to the underlying Compute Engine resources.

        :return: The labels of this WorkstationCluster.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this WorkstationCluster.

        Optional. [Labels](https://cloud.google.com/workstations/docs/label-resources) that are applied to the workstation cluster and that are also propagated to the underlying Compute Engine resources.

        :param labels: The labels of this WorkstationCluster.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this WorkstationCluster.

        Identifier. Full name of this workstation cluster.

        :return: The name of this WorkstationCluster.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkstationCluster.

        Identifier. Full name of this workstation cluster.

        :param name: The name of this WorkstationCluster.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this WorkstationCluster.

        Immutable. Name of the Compute Engine network in which instances associated with this workstation cluster will be created.

        :return: The network of this WorkstationCluster.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this WorkstationCluster.

        Immutable. Name of the Compute Engine network in which instances associated with this workstation cluster will be created.

        :param network: The network of this WorkstationCluster.
        :type network: str
        """

        self._network = network

    @property
    def private_cluster_config(self):
        """Gets the private_cluster_config of this WorkstationCluster.


        :return: The private_cluster_config of this WorkstationCluster.
        :rtype: PrivateClusterConfig
        """
        return self._private_cluster_config

    @private_cluster_config.setter
    def private_cluster_config(self, private_cluster_config):
        """Sets the private_cluster_config of this WorkstationCluster.


        :param private_cluster_config: The private_cluster_config of this WorkstationCluster.
        :type private_cluster_config: PrivateClusterConfig
        """

        self._private_cluster_config = private_cluster_config

    @property
    def reconciling(self):
        """Gets the reconciling of this WorkstationCluster.

        Output only. Indicates whether this workstation cluster is currently being updated to match its intended state.

        :return: The reconciling of this WorkstationCluster.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this WorkstationCluster.

        Output only. Indicates whether this workstation cluster is currently being updated to match its intended state.

        :param reconciling: The reconciling of this WorkstationCluster.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def subnetwork(self):
        """Gets the subnetwork of this WorkstationCluster.

        Immutable. Name of the Compute Engine subnetwork in which instances associated with this workstation cluster will be created. Must be part of the subnetwork specified for this workstation cluster.

        :return: The subnetwork of this WorkstationCluster.
        :rtype: str
        """
        return self._subnetwork

    @subnetwork.setter
    def subnetwork(self, subnetwork):
        """Sets the subnetwork of this WorkstationCluster.

        Immutable. Name of the Compute Engine subnetwork in which instances associated with this workstation cluster will be created. Must be part of the subnetwork specified for this workstation cluster.

        :param subnetwork: The subnetwork of this WorkstationCluster.
        :type subnetwork: str
        """

        self._subnetwork = subnetwork

    @property
    def uid(self):
        """Gets the uid of this WorkstationCluster.

        Output only. A system-assigned unique identifier for this workstation cluster.

        :return: The uid of this WorkstationCluster.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this WorkstationCluster.

        Output only. A system-assigned unique identifier for this workstation cluster.

        :param uid: The uid of this WorkstationCluster.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this WorkstationCluster.

        Output only. Time when this workstation cluster was most recently updated.

        :return: The update_time of this WorkstationCluster.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this WorkstationCluster.

        Output only. Time when this workstation cluster was most recently updated.

        :param update_time: The update_time of this WorkstationCluster.
        :type update_time: str
        """

        self._update_time = update_time
