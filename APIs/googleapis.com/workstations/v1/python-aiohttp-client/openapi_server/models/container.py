# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Container(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args: List[str]=None, command: List[str]=None, env: Dict[str, str]=None, image: str=None, run_as_user: int=None, working_dir: str=None):
        """Container - a model defined in OpenAPI

        :param args: The args of this Container.
        :param command: The command of this Container.
        :param env: The env of this Container.
        :param image: The image of this Container.
        :param run_as_user: The run_as_user of this Container.
        :param working_dir: The working_dir of this Container.
        """
        self.openapi_types = {
            'args': List[str],
            'command': List[str],
            'env': Dict[str, str],
            'image': str,
            'run_as_user': int,
            'working_dir': str
        }

        self.attribute_map = {
            'args': 'args',
            'command': 'command',
            'env': 'env',
            'image': 'image',
            'run_as_user': 'runAsUser',
            'working_dir': 'workingDir'
        }

        self._args = args
        self._command = command
        self._env = env
        self._image = image
        self._run_as_user = run_as_user
        self._working_dir = working_dir

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Container':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Container of this Container.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args(self):
        """Gets the args of this Container.

        Optional. Arguments passed to the entrypoint.

        :return: The args of this Container.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this Container.

        Optional. Arguments passed to the entrypoint.

        :param args: The args of this Container.
        :type args: List[str]
        """

        self._args = args

    @property
    def command(self):
        """Gets the command of this Container.

        Optional. If set, overrides the default ENTRYPOINT specified by the image.

        :return: The command of this Container.
        :rtype: List[str]
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this Container.

        Optional. If set, overrides the default ENTRYPOINT specified by the image.

        :param command: The command of this Container.
        :type command: List[str]
        """

        self._command = command

    @property
    def env(self):
        """Gets the env of this Container.

        Optional. Environment variables passed to the container's entrypoint.

        :return: The env of this Container.
        :rtype: Dict[str, str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this Container.

        Optional. Environment variables passed to the container's entrypoint.

        :param env: The env of this Container.
        :type env: Dict[str, str]
        """

        self._env = env

    @property
    def image(self):
        """Gets the image of this Container.

        Optional. A Docker container image that defines a custom environment. Cloud Workstations provides a number of [preconfigured images](https://cloud.google.com/workstations/docs/preconfigured-base-images), but you can create your own [custom container images](https://cloud.google.com/workstations/docs/custom-container-images). If using a private image, the `host.gceInstance.serviceAccount` field must be specified in the workstation configuration. If using a custom container image, the service account must have [Artifact Registry Reader](https://cloud.google.com/artifact-registry/docs/access-control#roles) permission to pull the specified image. Otherwise, the image must be publicly accessible.

        :return: The image of this Container.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Container.

        Optional. A Docker container image that defines a custom environment. Cloud Workstations provides a number of [preconfigured images](https://cloud.google.com/workstations/docs/preconfigured-base-images), but you can create your own [custom container images](https://cloud.google.com/workstations/docs/custom-container-images). If using a private image, the `host.gceInstance.serviceAccount` field must be specified in the workstation configuration. If using a custom container image, the service account must have [Artifact Registry Reader](https://cloud.google.com/artifact-registry/docs/access-control#roles) permission to pull the specified image. Otherwise, the image must be publicly accessible.

        :param image: The image of this Container.
        :type image: str
        """

        self._image = image

    @property
    def run_as_user(self):
        """Gets the run_as_user of this Container.

        Optional. If set, overrides the USER specified in the image with the given uid.

        :return: The run_as_user of this Container.
        :rtype: int
        """
        return self._run_as_user

    @run_as_user.setter
    def run_as_user(self, run_as_user):
        """Sets the run_as_user of this Container.

        Optional. If set, overrides the USER specified in the image with the given uid.

        :param run_as_user: The run_as_user of this Container.
        :type run_as_user: int
        """

        self._run_as_user = run_as_user

    @property
    def working_dir(self):
        """Gets the working_dir of this Container.

        Optional. If set, overrides the default DIR specified by the image.

        :return: The working_dir of this Container.
        :rtype: str
        """
        return self._working_dir

    @working_dir.setter
    def working_dir(self, working_dir):
        """Sets the working_dir of this Container.

        Optional. If set, overrides the default DIR specified by the image.

        :param working_dir: The working_dir of this Container.
        :type working_dir: str
        """

        self._working_dir = working_dir
