# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gce_confidential_instance_config import GceConfidentialInstanceConfig
from openapi_server.models.gce_shielded_instance_config import GceShieldedInstanceConfig
from openapi_server import util


class GceInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boot_disk_size_gb: int=None, confidential_instance_config: GceConfidentialInstanceConfig=None, disable_public_ip_addresses: bool=None, enable_nested_virtualization: bool=None, machine_type: str=None, pool_size: int=None, pooled_instances: int=None, service_account: str=None, service_account_scopes: List[str]=None, shielded_instance_config: GceShieldedInstanceConfig=None, tags: List[str]=None):
        """GceInstance - a model defined in OpenAPI

        :param boot_disk_size_gb: The boot_disk_size_gb of this GceInstance.
        :param confidential_instance_config: The confidential_instance_config of this GceInstance.
        :param disable_public_ip_addresses: The disable_public_ip_addresses of this GceInstance.
        :param enable_nested_virtualization: The enable_nested_virtualization of this GceInstance.
        :param machine_type: The machine_type of this GceInstance.
        :param pool_size: The pool_size of this GceInstance.
        :param pooled_instances: The pooled_instances of this GceInstance.
        :param service_account: The service_account of this GceInstance.
        :param service_account_scopes: The service_account_scopes of this GceInstance.
        :param shielded_instance_config: The shielded_instance_config of this GceInstance.
        :param tags: The tags of this GceInstance.
        """
        self.openapi_types = {
            'boot_disk_size_gb': int,
            'confidential_instance_config': GceConfidentialInstanceConfig,
            'disable_public_ip_addresses': bool,
            'enable_nested_virtualization': bool,
            'machine_type': str,
            'pool_size': int,
            'pooled_instances': int,
            'service_account': str,
            'service_account_scopes': List[str],
            'shielded_instance_config': GceShieldedInstanceConfig,
            'tags': List[str]
        }

        self.attribute_map = {
            'boot_disk_size_gb': 'bootDiskSizeGb',
            'confidential_instance_config': 'confidentialInstanceConfig',
            'disable_public_ip_addresses': 'disablePublicIpAddresses',
            'enable_nested_virtualization': 'enableNestedVirtualization',
            'machine_type': 'machineType',
            'pool_size': 'poolSize',
            'pooled_instances': 'pooledInstances',
            'service_account': 'serviceAccount',
            'service_account_scopes': 'serviceAccountScopes',
            'shielded_instance_config': 'shieldedInstanceConfig',
            'tags': 'tags'
        }

        self._boot_disk_size_gb = boot_disk_size_gb
        self._confidential_instance_config = confidential_instance_config
        self._disable_public_ip_addresses = disable_public_ip_addresses
        self._enable_nested_virtualization = enable_nested_virtualization
        self._machine_type = machine_type
        self._pool_size = pool_size
        self._pooled_instances = pooled_instances
        self._service_account = service_account
        self._service_account_scopes = service_account_scopes
        self._shielded_instance_config = shielded_instance_config
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GceInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GceInstance of this GceInstance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boot_disk_size_gb(self):
        """Gets the boot_disk_size_gb of this GceInstance.

        Optional. The size of the boot disk for the VM in gigabytes (GB). The minimum boot disk size is `30` GB. Defaults to `50` GB.

        :return: The boot_disk_size_gb of this GceInstance.
        :rtype: int
        """
        return self._boot_disk_size_gb

    @boot_disk_size_gb.setter
    def boot_disk_size_gb(self, boot_disk_size_gb):
        """Sets the boot_disk_size_gb of this GceInstance.

        Optional. The size of the boot disk for the VM in gigabytes (GB). The minimum boot disk size is `30` GB. Defaults to `50` GB.

        :param boot_disk_size_gb: The boot_disk_size_gb of this GceInstance.
        :type boot_disk_size_gb: int
        """

        self._boot_disk_size_gb = boot_disk_size_gb

    @property
    def confidential_instance_config(self):
        """Gets the confidential_instance_config of this GceInstance.


        :return: The confidential_instance_config of this GceInstance.
        :rtype: GceConfidentialInstanceConfig
        """
        return self._confidential_instance_config

    @confidential_instance_config.setter
    def confidential_instance_config(self, confidential_instance_config):
        """Sets the confidential_instance_config of this GceInstance.


        :param confidential_instance_config: The confidential_instance_config of this GceInstance.
        :type confidential_instance_config: GceConfidentialInstanceConfig
        """

        self._confidential_instance_config = confidential_instance_config

    @property
    def disable_public_ip_addresses(self):
        """Gets the disable_public_ip_addresses of this GceInstance.

        Optional. When set to true, disables public IP addresses for VMs. If you disable public IP addresses, you must set up Private Google Access or Cloud NAT on your network. If you use Private Google Access and you use `private.googleapis.com` or `restricted.googleapis.com` for Container Registry and Artifact Registry, make sure that you set up DNS records for domains `*.gcr.io` and `*.pkg.dev`. Defaults to false (VMs have public IP addresses).

        :return: The disable_public_ip_addresses of this GceInstance.
        :rtype: bool
        """
        return self._disable_public_ip_addresses

    @disable_public_ip_addresses.setter
    def disable_public_ip_addresses(self, disable_public_ip_addresses):
        """Sets the disable_public_ip_addresses of this GceInstance.

        Optional. When set to true, disables public IP addresses for VMs. If you disable public IP addresses, you must set up Private Google Access or Cloud NAT on your network. If you use Private Google Access and you use `private.googleapis.com` or `restricted.googleapis.com` for Container Registry and Artifact Registry, make sure that you set up DNS records for domains `*.gcr.io` and `*.pkg.dev`. Defaults to false (VMs have public IP addresses).

        :param disable_public_ip_addresses: The disable_public_ip_addresses of this GceInstance.
        :type disable_public_ip_addresses: bool
        """

        self._disable_public_ip_addresses = disable_public_ip_addresses

    @property
    def enable_nested_virtualization(self):
        """Gets the enable_nested_virtualization of this GceInstance.

        Optional. Whether to enable nested virtualization on Cloud Workstations VMs created under this workstation configuration. Nested virtualization lets you run virtual machine (VM) instances inside your workstation. Before enabling nested virtualization, consider the following important considerations. Cloud Workstations instances are subject to the [same restrictions as Compute Engine instances](https://cloud.google.com/compute/docs/instances/nested-virtualization/overview#restrictions): * **Organization policy**: projects, folders, or organizations may be restricted from creating nested VMs if the **Disable VM nested virtualization** constraint is enforced in the organization policy. For more information, see the Compute Engine section, [Checking whether nested virtualization is allowed](https://cloud.google.com/compute/docs/instances/nested-virtualization/managing-constraint#checking_whether_nested_virtualization_is_allowed). * **Performance**: nested VMs might experience a 10% or greater decrease in performance for workloads that are CPU-bound and possibly greater than a 10% decrease for workloads that are input/output bound. * **Machine Type**: nested virtualization can only be enabled on workstation configurations that specify a machine_type in the N1 or N2 machine series. * **GPUs**: nested virtualization may not be enabled on workstation configurations with accelerators. * **Operating System**: Because [Container-Optimized OS](https://cloud.google.com/compute/docs/images/os-details#container-optimized_os_cos) does not support nested virtualization, when nested virtualization is enabled, the underlying Compute Engine VM instances boot from an [Ubuntu LTS](https://cloud.google.com/compute/docs/images/os-details#ubuntu_lts) image.

        :return: The enable_nested_virtualization of this GceInstance.
        :rtype: bool
        """
        return self._enable_nested_virtualization

    @enable_nested_virtualization.setter
    def enable_nested_virtualization(self, enable_nested_virtualization):
        """Sets the enable_nested_virtualization of this GceInstance.

        Optional. Whether to enable nested virtualization on Cloud Workstations VMs created under this workstation configuration. Nested virtualization lets you run virtual machine (VM) instances inside your workstation. Before enabling nested virtualization, consider the following important considerations. Cloud Workstations instances are subject to the [same restrictions as Compute Engine instances](https://cloud.google.com/compute/docs/instances/nested-virtualization/overview#restrictions): * **Organization policy**: projects, folders, or organizations may be restricted from creating nested VMs if the **Disable VM nested virtualization** constraint is enforced in the organization policy. For more information, see the Compute Engine section, [Checking whether nested virtualization is allowed](https://cloud.google.com/compute/docs/instances/nested-virtualization/managing-constraint#checking_whether_nested_virtualization_is_allowed). * **Performance**: nested VMs might experience a 10% or greater decrease in performance for workloads that are CPU-bound and possibly greater than a 10% decrease for workloads that are input/output bound. * **Machine Type**: nested virtualization can only be enabled on workstation configurations that specify a machine_type in the N1 or N2 machine series. * **GPUs**: nested virtualization may not be enabled on workstation configurations with accelerators. * **Operating System**: Because [Container-Optimized OS](https://cloud.google.com/compute/docs/images/os-details#container-optimized_os_cos) does not support nested virtualization, when nested virtualization is enabled, the underlying Compute Engine VM instances boot from an [Ubuntu LTS](https://cloud.google.com/compute/docs/images/os-details#ubuntu_lts) image.

        :param enable_nested_virtualization: The enable_nested_virtualization of this GceInstance.
        :type enable_nested_virtualization: bool
        """

        self._enable_nested_virtualization = enable_nested_virtualization

    @property
    def machine_type(self):
        """Gets the machine_type of this GceInstance.

        Optional. The type of machine to use for VM instances—for example, `\"e2-standard-4\"`. For more information about machine types that Cloud Workstations supports, see the list of [available machine types](https://cloud.google.com/workstations/docs/available-machine-types).

        :return: The machine_type of this GceInstance.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this GceInstance.

        Optional. The type of machine to use for VM instances—for example, `\"e2-standard-4\"`. For more information about machine types that Cloud Workstations supports, see the list of [available machine types](https://cloud.google.com/workstations/docs/available-machine-types).

        :param machine_type: The machine_type of this GceInstance.
        :type machine_type: str
        """

        self._machine_type = machine_type

    @property
    def pool_size(self):
        """Gets the pool_size of this GceInstance.

        Optional. The number of VMs that the system should keep idle so that new workstations can be started quickly for new users. Defaults to `0` in the API.

        :return: The pool_size of this GceInstance.
        :rtype: int
        """
        return self._pool_size

    @pool_size.setter
    def pool_size(self, pool_size):
        """Sets the pool_size of this GceInstance.

        Optional. The number of VMs that the system should keep idle so that new workstations can be started quickly for new users. Defaults to `0` in the API.

        :param pool_size: The pool_size of this GceInstance.
        :type pool_size: int
        """

        self._pool_size = pool_size

    @property
    def pooled_instances(self):
        """Gets the pooled_instances of this GceInstance.

        Output only. Number of instances currently available in the pool for faster workstation startup.

        :return: The pooled_instances of this GceInstance.
        :rtype: int
        """
        return self._pooled_instances

    @pooled_instances.setter
    def pooled_instances(self, pooled_instances):
        """Sets the pooled_instances of this GceInstance.

        Output only. Number of instances currently available in the pool for faster workstation startup.

        :param pooled_instances: The pooled_instances of this GceInstance.
        :type pooled_instances: int
        """

        self._pooled_instances = pooled_instances

    @property
    def service_account(self):
        """Gets the service_account of this GceInstance.

        Optional. The email address of the service account for Cloud Workstations VMs created with this configuration. When specified, be sure that the service account has `logginglogEntries.create` permission on the project so it can write logs out to Cloud Logging. If using a custom container image, the service account must have [Artifact Registry Reader](https://cloud.google.com/artifact-registry/docs/access-control#roles) permission to pull the specified image. If you as the administrator want to be able to `ssh` into the underlying VM, you need to set this value to a service account for which you have the `iam.serviceAccounts.actAs` permission. Conversely, if you don't want anyone to be able to `ssh` into the underlying VM, use a service account where no one has that permission. If not set, VMs run with a service account provided by the Cloud Workstations service, and the image must be publicly accessible.

        :return: The service_account of this GceInstance.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this GceInstance.

        Optional. The email address of the service account for Cloud Workstations VMs created with this configuration. When specified, be sure that the service account has `logginglogEntries.create` permission on the project so it can write logs out to Cloud Logging. If using a custom container image, the service account must have [Artifact Registry Reader](https://cloud.google.com/artifact-registry/docs/access-control#roles) permission to pull the specified image. If you as the administrator want to be able to `ssh` into the underlying VM, you need to set this value to a service account for which you have the `iam.serviceAccounts.actAs` permission. Conversely, if you don't want anyone to be able to `ssh` into the underlying VM, use a service account where no one has that permission. If not set, VMs run with a service account provided by the Cloud Workstations service, and the image must be publicly accessible.

        :param service_account: The service_account of this GceInstance.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def service_account_scopes(self):
        """Gets the service_account_scopes of this GceInstance.

        Optional. Scopes to grant to the service_account. Various scopes are automatically added based on feature usage. When specified, users of workstations under this configuration must have `iam.serviceAccounts.actAs` on the service account.

        :return: The service_account_scopes of this GceInstance.
        :rtype: List[str]
        """
        return self._service_account_scopes

    @service_account_scopes.setter
    def service_account_scopes(self, service_account_scopes):
        """Sets the service_account_scopes of this GceInstance.

        Optional. Scopes to grant to the service_account. Various scopes are automatically added based on feature usage. When specified, users of workstations under this configuration must have `iam.serviceAccounts.actAs` on the service account.

        :param service_account_scopes: The service_account_scopes of this GceInstance.
        :type service_account_scopes: List[str]
        """

        self._service_account_scopes = service_account_scopes

    @property
    def shielded_instance_config(self):
        """Gets the shielded_instance_config of this GceInstance.


        :return: The shielded_instance_config of this GceInstance.
        :rtype: GceShieldedInstanceConfig
        """
        return self._shielded_instance_config

    @shielded_instance_config.setter
    def shielded_instance_config(self, shielded_instance_config):
        """Sets the shielded_instance_config of this GceInstance.


        :param shielded_instance_config: The shielded_instance_config of this GceInstance.
        :type shielded_instance_config: GceShieldedInstanceConfig
        """

        self._shielded_instance_config = shielded_instance_config

    @property
    def tags(self):
        """Gets the tags of this GceInstance.

        Optional. Network tags to add to the Compute Engine VMs backing the workstations. This option applies [network tags](https://cloud.google.com/vpc/docs/add-remove-network-tags) to VMs created with this configuration. These network tags enable the creation of [firewall rules](https://cloud.google.com/workstations/docs/configure-firewall-rules).

        :return: The tags of this GceInstance.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GceInstance.

        Optional. Network tags to add to the Compute Engine VMs backing the workstations. This option applies [network tags](https://cloud.google.com/vpc/docs/add-remove-network-tags) to VMs created with this configuration. These network tags enable the creation of [firewall rules](https://cloud.google.com/workstations/docs/configure-firewall-rules).

        :param tags: The tags of this GceInstance.
        :type tags: List[str]
        """

        self._tags = tags
