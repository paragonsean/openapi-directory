# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container import Container
from openapi_server.models.customer_encryption_key import CustomerEncryptionKey
from openapi_server.models.host import Host
from openapi_server.models.persistent_directory import PersistentDirectory
from openapi_server.models.readiness_check import ReadinessCheck
from openapi_server.models.status import Status
from openapi_server import util


class WorkstationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, conditions: List[Status]=None, container: Container=None, create_time: str=None, degraded: bool=None, delete_time: str=None, disable_tcp_connections: bool=None, display_name: str=None, enable_audit_agent: bool=None, encryption_key: CustomerEncryptionKey=None, etag: str=None, host: Host=None, idle_timeout: str=None, labels: Dict[str, str]=None, name: str=None, persistent_directories: List[PersistentDirectory]=None, readiness_checks: List[ReadinessCheck]=None, reconciling: bool=None, replica_zones: List[str]=None, running_timeout: str=None, uid: str=None, update_time: str=None):
        """WorkstationConfig - a model defined in OpenAPI

        :param annotations: The annotations of this WorkstationConfig.
        :param conditions: The conditions of this WorkstationConfig.
        :param container: The container of this WorkstationConfig.
        :param create_time: The create_time of this WorkstationConfig.
        :param degraded: The degraded of this WorkstationConfig.
        :param delete_time: The delete_time of this WorkstationConfig.
        :param disable_tcp_connections: The disable_tcp_connections of this WorkstationConfig.
        :param display_name: The display_name of this WorkstationConfig.
        :param enable_audit_agent: The enable_audit_agent of this WorkstationConfig.
        :param encryption_key: The encryption_key of this WorkstationConfig.
        :param etag: The etag of this WorkstationConfig.
        :param host: The host of this WorkstationConfig.
        :param idle_timeout: The idle_timeout of this WorkstationConfig.
        :param labels: The labels of this WorkstationConfig.
        :param name: The name of this WorkstationConfig.
        :param persistent_directories: The persistent_directories of this WorkstationConfig.
        :param readiness_checks: The readiness_checks of this WorkstationConfig.
        :param reconciling: The reconciling of this WorkstationConfig.
        :param replica_zones: The replica_zones of this WorkstationConfig.
        :param running_timeout: The running_timeout of this WorkstationConfig.
        :param uid: The uid of this WorkstationConfig.
        :param update_time: The update_time of this WorkstationConfig.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'conditions': List[Status],
            'container': Container,
            'create_time': str,
            'degraded': bool,
            'delete_time': str,
            'disable_tcp_connections': bool,
            'display_name': str,
            'enable_audit_agent': bool,
            'encryption_key': CustomerEncryptionKey,
            'etag': str,
            'host': Host,
            'idle_timeout': str,
            'labels': Dict[str, str],
            'name': str,
            'persistent_directories': List[PersistentDirectory],
            'readiness_checks': List[ReadinessCheck],
            'reconciling': bool,
            'replica_zones': List[str],
            'running_timeout': str,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'conditions': 'conditions',
            'container': 'container',
            'create_time': 'createTime',
            'degraded': 'degraded',
            'delete_time': 'deleteTime',
            'disable_tcp_connections': 'disableTcpConnections',
            'display_name': 'displayName',
            'enable_audit_agent': 'enableAuditAgent',
            'encryption_key': 'encryptionKey',
            'etag': 'etag',
            'host': 'host',
            'idle_timeout': 'idleTimeout',
            'labels': 'labels',
            'name': 'name',
            'persistent_directories': 'persistentDirectories',
            'readiness_checks': 'readinessChecks',
            'reconciling': 'reconciling',
            'replica_zones': 'replicaZones',
            'running_timeout': 'runningTimeout',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._annotations = annotations
        self._conditions = conditions
        self._container = container
        self._create_time = create_time
        self._degraded = degraded
        self._delete_time = delete_time
        self._disable_tcp_connections = disable_tcp_connections
        self._display_name = display_name
        self._enable_audit_agent = enable_audit_agent
        self._encryption_key = encryption_key
        self._etag = etag
        self._host = host
        self._idle_timeout = idle_timeout
        self._labels = labels
        self._name = name
        self._persistent_directories = persistent_directories
        self._readiness_checks = readiness_checks
        self._reconciling = reconciling
        self._replica_zones = replica_zones
        self._running_timeout = running_timeout
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkstationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkstationConfig of this WorkstationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this WorkstationConfig.

        Optional. Client-specified annotations.

        :return: The annotations of this WorkstationConfig.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this WorkstationConfig.

        Optional. Client-specified annotations.

        :param annotations: The annotations of this WorkstationConfig.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def conditions(self):
        """Gets the conditions of this WorkstationConfig.

        Output only. Status conditions describing the current resource state.

        :return: The conditions of this WorkstationConfig.
        :rtype: List[Status]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this WorkstationConfig.

        Output only. Status conditions describing the current resource state.

        :param conditions: The conditions of this WorkstationConfig.
        :type conditions: List[Status]
        """

        self._conditions = conditions

    @property
    def container(self):
        """Gets the container of this WorkstationConfig.


        :return: The container of this WorkstationConfig.
        :rtype: Container
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this WorkstationConfig.


        :param container: The container of this WorkstationConfig.
        :type container: Container
        """

        self._container = container

    @property
    def create_time(self):
        """Gets the create_time of this WorkstationConfig.

        Output only. Time when this workstation configuration was created.

        :return: The create_time of this WorkstationConfig.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this WorkstationConfig.

        Output only. Time when this workstation configuration was created.

        :param create_time: The create_time of this WorkstationConfig.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def degraded(self):
        """Gets the degraded of this WorkstationConfig.

        Output only. Whether this resource is degraded, in which case it may require user action to restore full functionality. See also the conditions field.

        :return: The degraded of this WorkstationConfig.
        :rtype: bool
        """
        return self._degraded

    @degraded.setter
    def degraded(self, degraded):
        """Sets the degraded of this WorkstationConfig.

        Output only. Whether this resource is degraded, in which case it may require user action to restore full functionality. See also the conditions field.

        :param degraded: The degraded of this WorkstationConfig.
        :type degraded: bool
        """

        self._degraded = degraded

    @property
    def delete_time(self):
        """Gets the delete_time of this WorkstationConfig.

        Output only. Time when this workstation configuration was soft-deleted.

        :return: The delete_time of this WorkstationConfig.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this WorkstationConfig.

        Output only. Time when this workstation configuration was soft-deleted.

        :param delete_time: The delete_time of this WorkstationConfig.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def disable_tcp_connections(self):
        """Gets the disable_tcp_connections of this WorkstationConfig.

        Optional. Disables support for plain TCP connections in the workstation. By default the service supports TCP connections via a websocket relay. Setting this option to true disables that relay, which prevents the usage of services that require plain tcp connections, such as ssh. When enabled, all communication must occur over https or wss.

        :return: The disable_tcp_connections of this WorkstationConfig.
        :rtype: bool
        """
        return self._disable_tcp_connections

    @disable_tcp_connections.setter
    def disable_tcp_connections(self, disable_tcp_connections):
        """Sets the disable_tcp_connections of this WorkstationConfig.

        Optional. Disables support for plain TCP connections in the workstation. By default the service supports TCP connections via a websocket relay. Setting this option to true disables that relay, which prevents the usage of services that require plain tcp connections, such as ssh. When enabled, all communication must occur over https or wss.

        :param disable_tcp_connections: The disable_tcp_connections of this WorkstationConfig.
        :type disable_tcp_connections: bool
        """

        self._disable_tcp_connections = disable_tcp_connections

    @property
    def display_name(self):
        """Gets the display_name of this WorkstationConfig.

        Optional. Human-readable name for this workstation configuration.

        :return: The display_name of this WorkstationConfig.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this WorkstationConfig.

        Optional. Human-readable name for this workstation configuration.

        :param display_name: The display_name of this WorkstationConfig.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enable_audit_agent(self):
        """Gets the enable_audit_agent of this WorkstationConfig.

        Optional. Whether to enable Linux `auditd` logging on the workstation. When enabled, a service account must also be specified that has `logging.buckets.write` permission on the project. Operating system audit logging is distinct from [Cloud Audit Logs](https://cloud.google.com/workstations/docs/audit-logging).

        :return: The enable_audit_agent of this WorkstationConfig.
        :rtype: bool
        """
        return self._enable_audit_agent

    @enable_audit_agent.setter
    def enable_audit_agent(self, enable_audit_agent):
        """Sets the enable_audit_agent of this WorkstationConfig.

        Optional. Whether to enable Linux `auditd` logging on the workstation. When enabled, a service account must also be specified that has `logging.buckets.write` permission on the project. Operating system audit logging is distinct from [Cloud Audit Logs](https://cloud.google.com/workstations/docs/audit-logging).

        :param enable_audit_agent: The enable_audit_agent of this WorkstationConfig.
        :type enable_audit_agent: bool
        """

        self._enable_audit_agent = enable_audit_agent

    @property
    def encryption_key(self):
        """Gets the encryption_key of this WorkstationConfig.


        :return: The encryption_key of this WorkstationConfig.
        :rtype: CustomerEncryptionKey
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this WorkstationConfig.


        :param encryption_key: The encryption_key of this WorkstationConfig.
        :type encryption_key: CustomerEncryptionKey
        """

        self._encryption_key = encryption_key

    @property
    def etag(self):
        """Gets the etag of this WorkstationConfig.

        Optional. Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding.

        :return: The etag of this WorkstationConfig.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this WorkstationConfig.

        Optional. Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding.

        :param etag: The etag of this WorkstationConfig.
        :type etag: str
        """

        self._etag = etag

    @property
    def host(self):
        """Gets the host of this WorkstationConfig.


        :return: The host of this WorkstationConfig.
        :rtype: Host
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this WorkstationConfig.


        :param host: The host of this WorkstationConfig.
        :type host: Host
        """

        self._host = host

    @property
    def idle_timeout(self):
        """Gets the idle_timeout of this WorkstationConfig.

        Optional. Number of seconds to wait before automatically stopping a workstation after it last received user traffic. A value of `\"0s\"` indicates that Cloud Workstations VMs created with this configuration should never time out due to idleness. Provide [duration](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration) terminated by `s` for seconds—for example, `\"7200s\"` (2 hours). The default is `\"1200s\"` (20 minutes).

        :return: The idle_timeout of this WorkstationConfig.
        :rtype: str
        """
        return self._idle_timeout

    @idle_timeout.setter
    def idle_timeout(self, idle_timeout):
        """Sets the idle_timeout of this WorkstationConfig.

        Optional. Number of seconds to wait before automatically stopping a workstation after it last received user traffic. A value of `\"0s\"` indicates that Cloud Workstations VMs created with this configuration should never time out due to idleness. Provide [duration](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration) terminated by `s` for seconds—for example, `\"7200s\"` (2 hours). The default is `\"1200s\"` (20 minutes).

        :param idle_timeout: The idle_timeout of this WorkstationConfig.
        :type idle_timeout: str
        """

        self._idle_timeout = idle_timeout

    @property
    def labels(self):
        """Gets the labels of this WorkstationConfig.

        Optional. [Labels](https://cloud.google.com/workstations/docs/label-resources) that are applied to the workstation configuration and that are also propagated to the underlying Compute Engine resources.

        :return: The labels of this WorkstationConfig.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this WorkstationConfig.

        Optional. [Labels](https://cloud.google.com/workstations/docs/label-resources) that are applied to the workstation configuration and that are also propagated to the underlying Compute Engine resources.

        :param labels: The labels of this WorkstationConfig.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this WorkstationConfig.

        Identifier. Full name of this workstation configuration.

        :return: The name of this WorkstationConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkstationConfig.

        Identifier. Full name of this workstation configuration.

        :param name: The name of this WorkstationConfig.
        :type name: str
        """

        self._name = name

    @property
    def persistent_directories(self):
        """Gets the persistent_directories of this WorkstationConfig.

        Optional. Directories to persist across workstation sessions.

        :return: The persistent_directories of this WorkstationConfig.
        :rtype: List[PersistentDirectory]
        """
        return self._persistent_directories

    @persistent_directories.setter
    def persistent_directories(self, persistent_directories):
        """Sets the persistent_directories of this WorkstationConfig.

        Optional. Directories to persist across workstation sessions.

        :param persistent_directories: The persistent_directories of this WorkstationConfig.
        :type persistent_directories: List[PersistentDirectory]
        """

        self._persistent_directories = persistent_directories

    @property
    def readiness_checks(self):
        """Gets the readiness_checks of this WorkstationConfig.

        Optional. Readiness checks to perform when starting a workstation using this workstation configuration. Mark a workstation as running only after all specified readiness checks return 200 status codes.

        :return: The readiness_checks of this WorkstationConfig.
        :rtype: List[ReadinessCheck]
        """
        return self._readiness_checks

    @readiness_checks.setter
    def readiness_checks(self, readiness_checks):
        """Sets the readiness_checks of this WorkstationConfig.

        Optional. Readiness checks to perform when starting a workstation using this workstation configuration. Mark a workstation as running only after all specified readiness checks return 200 status codes.

        :param readiness_checks: The readiness_checks of this WorkstationConfig.
        :type readiness_checks: List[ReadinessCheck]
        """

        self._readiness_checks = readiness_checks

    @property
    def reconciling(self):
        """Gets the reconciling of this WorkstationConfig.

        Output only. Indicates whether this workstation configuration is currently being updated to match its intended state.

        :return: The reconciling of this WorkstationConfig.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this WorkstationConfig.

        Output only. Indicates whether this workstation configuration is currently being updated to match its intended state.

        :param reconciling: The reconciling of this WorkstationConfig.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def replica_zones(self):
        """Gets the replica_zones of this WorkstationConfig.

        Optional. Immutable. Specifies the zones used to replicate the VM and disk resources within the region. If set, exactly two zones within the workstation cluster's region must be specified—for example, `['us-central1-a', 'us-central1-f']`. If this field is empty, two default zones within the region are used. Immutable after the workstation configuration is created.

        :return: The replica_zones of this WorkstationConfig.
        :rtype: List[str]
        """
        return self._replica_zones

    @replica_zones.setter
    def replica_zones(self, replica_zones):
        """Sets the replica_zones of this WorkstationConfig.

        Optional. Immutable. Specifies the zones used to replicate the VM and disk resources within the region. If set, exactly two zones within the workstation cluster's region must be specified—for example, `['us-central1-a', 'us-central1-f']`. If this field is empty, two default zones within the region are used. Immutable after the workstation configuration is created.

        :param replica_zones: The replica_zones of this WorkstationConfig.
        :type replica_zones: List[str]
        """

        self._replica_zones = replica_zones

    @property
    def running_timeout(self):
        """Gets the running_timeout of this WorkstationConfig.

        Optional. Number of seconds that a workstation can run until it is automatically shut down. We recommend that workstations be shut down daily to reduce costs and so that security updates can be applied upon restart. The idle_timeout and running_timeout fields are independent of each other. Note that the running_timeout field shuts down VMs after the specified time, regardless of whether or not the VMs are idle. Provide duration terminated by `s` for seconds—for example, `\"54000s\"` (15 hours). Defaults to `\"43200s\"` (12 hours). A value of `\"0s\"` indicates that workstations using this configuration should never time out. If encryption_key is set, it must be greater than `\"0s\"` and less than `\"86400s\"` (24 hours). Warning: A value of `\"0s\"` indicates that Cloud Workstations VMs created with this configuration have no maximum running time. This is strongly discouraged because you incur costs and will not pick up security updates.

        :return: The running_timeout of this WorkstationConfig.
        :rtype: str
        """
        return self._running_timeout

    @running_timeout.setter
    def running_timeout(self, running_timeout):
        """Sets the running_timeout of this WorkstationConfig.

        Optional. Number of seconds that a workstation can run until it is automatically shut down. We recommend that workstations be shut down daily to reduce costs and so that security updates can be applied upon restart. The idle_timeout and running_timeout fields are independent of each other. Note that the running_timeout field shuts down VMs after the specified time, regardless of whether or not the VMs are idle. Provide duration terminated by `s` for seconds—for example, `\"54000s\"` (15 hours). Defaults to `\"43200s\"` (12 hours). A value of `\"0s\"` indicates that workstations using this configuration should never time out. If encryption_key is set, it must be greater than `\"0s\"` and less than `\"86400s\"` (24 hours). Warning: A value of `\"0s\"` indicates that Cloud Workstations VMs created with this configuration have no maximum running time. This is strongly discouraged because you incur costs and will not pick up security updates.

        :param running_timeout: The running_timeout of this WorkstationConfig.
        :type running_timeout: str
        """

        self._running_timeout = running_timeout

    @property
    def uid(self):
        """Gets the uid of this WorkstationConfig.

        Output only. A system-assigned unique identifier for this workstation configuration.

        :return: The uid of this WorkstationConfig.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this WorkstationConfig.

        Output only. A system-assigned unique identifier for this workstation configuration.

        :param uid: The uid of this WorkstationConfig.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this WorkstationConfig.

        Output only. Time when this workstation configuration was most recently updated.

        :return: The update_time of this WorkstationConfig.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this WorkstationConfig.

        Output only. Time when this workstation configuration was most recently updated.

        :param update_time: The update_time of this WorkstationConfig.
        :type update_time: str
        """

        self._update_time = update_time
