/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReturnPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReturnPolicy::OAIReturnPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReturnPolicy::OAIReturnPolicy() {
    this->initializeModel();
}

OAIReturnPolicy::~OAIReturnPolicy() {}

void OAIReturnPolicy::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_non_free_return_reasons_isSet = false;
    m_non_free_return_reasons_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_return_policy_id_isSet = false;
    m_return_policy_id_isValid = false;

    m_return_shipping_fee_isSet = false;
    m_return_shipping_fee_isValid = false;

    m_seasonal_overrides_isSet = false;
    m_seasonal_overrides_isValid = false;
}

void OAIReturnPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReturnPolicy::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_non_free_return_reasons_isValid = ::OpenAPI::fromJsonValue(m_non_free_return_reasons, json[QString("nonFreeReturnReasons")]);
    m_non_free_return_reasons_isSet = !json[QString("nonFreeReturnReasons")].isNull() && m_non_free_return_reasons_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_return_policy_id_isValid = ::OpenAPI::fromJsonValue(m_return_policy_id, json[QString("returnPolicyId")]);
    m_return_policy_id_isSet = !json[QString("returnPolicyId")].isNull() && m_return_policy_id_isValid;

    m_return_shipping_fee_isValid = ::OpenAPI::fromJsonValue(m_return_shipping_fee, json[QString("returnShippingFee")]);
    m_return_shipping_fee_isSet = !json[QString("returnShippingFee")].isNull() && m_return_shipping_fee_isValid;

    m_seasonal_overrides_isValid = ::OpenAPI::fromJsonValue(m_seasonal_overrides, json[QString("seasonalOverrides")]);
    m_seasonal_overrides_isSet = !json[QString("seasonalOverrides")].isNull() && m_seasonal_overrides_isValid;
}

QString OAIReturnPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReturnPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_non_free_return_reasons.size() > 0) {
        obj.insert(QString("nonFreeReturnReasons"), ::OpenAPI::toJsonValue(m_non_free_return_reasons));
    }
    if (m_policy.isSet()) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_return_policy_id_isSet) {
        obj.insert(QString("returnPolicyId"), ::OpenAPI::toJsonValue(m_return_policy_id));
    }
    if (m_return_shipping_fee.isSet()) {
        obj.insert(QString("returnShippingFee"), ::OpenAPI::toJsonValue(m_return_shipping_fee));
    }
    if (m_seasonal_overrides.size() > 0) {
        obj.insert(QString("seasonalOverrides"), ::OpenAPI::toJsonValue(m_seasonal_overrides));
    }
    return obj;
}

QString OAIReturnPolicy::getCountry() const {
    return m_country;
}
void OAIReturnPolicy::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIReturnPolicy::is_country_Set() const{
    return m_country_isSet;
}

bool OAIReturnPolicy::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIReturnPolicy::getKind() const {
    return m_kind;
}
void OAIReturnPolicy::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIReturnPolicy::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIReturnPolicy::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIReturnPolicy::getLabel() const {
    return m_label;
}
void OAIReturnPolicy::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIReturnPolicy::is_label_Set() const{
    return m_label_isSet;
}

bool OAIReturnPolicy::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIReturnPolicy::getName() const {
    return m_name;
}
void OAIReturnPolicy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReturnPolicy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReturnPolicy::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIReturnPolicy::getNonFreeReturnReasons() const {
    return m_non_free_return_reasons;
}
void OAIReturnPolicy::setNonFreeReturnReasons(const QList<QString> &non_free_return_reasons) {
    m_non_free_return_reasons = non_free_return_reasons;
    m_non_free_return_reasons_isSet = true;
}

bool OAIReturnPolicy::is_non_free_return_reasons_Set() const{
    return m_non_free_return_reasons_isSet;
}

bool OAIReturnPolicy::is_non_free_return_reasons_Valid() const{
    return m_non_free_return_reasons_isValid;
}

OAIReturnPolicyPolicy OAIReturnPolicy::getPolicy() const {
    return m_policy;
}
void OAIReturnPolicy::setPolicy(const OAIReturnPolicyPolicy &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIReturnPolicy::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIReturnPolicy::is_policy_Valid() const{
    return m_policy_isValid;
}

QString OAIReturnPolicy::getReturnPolicyId() const {
    return m_return_policy_id;
}
void OAIReturnPolicy::setReturnPolicyId(const QString &return_policy_id) {
    m_return_policy_id = return_policy_id;
    m_return_policy_id_isSet = true;
}

bool OAIReturnPolicy::is_return_policy_id_Set() const{
    return m_return_policy_id_isSet;
}

bool OAIReturnPolicy::is_return_policy_id_Valid() const{
    return m_return_policy_id_isValid;
}

OAIPrice OAIReturnPolicy::getReturnShippingFee() const {
    return m_return_shipping_fee;
}
void OAIReturnPolicy::setReturnShippingFee(const OAIPrice &return_shipping_fee) {
    m_return_shipping_fee = return_shipping_fee;
    m_return_shipping_fee_isSet = true;
}

bool OAIReturnPolicy::is_return_shipping_fee_Set() const{
    return m_return_shipping_fee_isSet;
}

bool OAIReturnPolicy::is_return_shipping_fee_Valid() const{
    return m_return_shipping_fee_isValid;
}

QList<OAIReturnPolicySeasonalOverride> OAIReturnPolicy::getSeasonalOverrides() const {
    return m_seasonal_overrides;
}
void OAIReturnPolicy::setSeasonalOverrides(const QList<OAIReturnPolicySeasonalOverride> &seasonal_overrides) {
    m_seasonal_overrides = seasonal_overrides;
    m_seasonal_overrides_isSet = true;
}

bool OAIReturnPolicy::is_seasonal_overrides_Set() const{
    return m_seasonal_overrides_isSet;
}

bool OAIReturnPolicy::is_seasonal_overrides_Valid() const{
    return m_seasonal_overrides_isValid;
}

bool OAIReturnPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_free_return_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_shipping_fee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seasonal_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReturnPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
