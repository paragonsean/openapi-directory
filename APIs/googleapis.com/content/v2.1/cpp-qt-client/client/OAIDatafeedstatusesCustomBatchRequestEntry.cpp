/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatafeedstatusesCustomBatchRequestEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatafeedstatusesCustomBatchRequestEntry::OAIDatafeedstatusesCustomBatchRequestEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatafeedstatusesCustomBatchRequestEntry::OAIDatafeedstatusesCustomBatchRequestEntry() {
    this->initializeModel();
}

OAIDatafeedstatusesCustomBatchRequestEntry::~OAIDatafeedstatusesCustomBatchRequestEntry() {}

void OAIDatafeedstatusesCustomBatchRequestEntry::initializeModel() {

    m_batch_id_isSet = false;
    m_batch_id_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_datafeed_id_isSet = false;
    m_datafeed_id_isValid = false;

    m_feed_label_isSet = false;
    m_feed_label_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_merchant_id_isSet = false;
    m_merchant_id_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;
}

void OAIDatafeedstatusesCustomBatchRequestEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatafeedstatusesCustomBatchRequestEntry::fromJsonObject(QJsonObject json) {

    m_batch_id_isValid = ::OpenAPI::fromJsonValue(m_batch_id, json[QString("batchId")]);
    m_batch_id_isSet = !json[QString("batchId")].isNull() && m_batch_id_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_datafeed_id_isValid = ::OpenAPI::fromJsonValue(m_datafeed_id, json[QString("datafeedId")]);
    m_datafeed_id_isSet = !json[QString("datafeedId")].isNull() && m_datafeed_id_isValid;

    m_feed_label_isValid = ::OpenAPI::fromJsonValue(m_feed_label, json[QString("feedLabel")]);
    m_feed_label_isSet = !json[QString("feedLabel")].isNull() && m_feed_label_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_id, json[QString("merchantId")]);
    m_merchant_id_isSet = !json[QString("merchantId")].isNull() && m_merchant_id_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;
}

QString OAIDatafeedstatusesCustomBatchRequestEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatafeedstatusesCustomBatchRequestEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_id_isSet) {
        obj.insert(QString("batchId"), ::OpenAPI::toJsonValue(m_batch_id));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_datafeed_id_isSet) {
        obj.insert(QString("datafeedId"), ::OpenAPI::toJsonValue(m_datafeed_id));
    }
    if (m_feed_label_isSet) {
        obj.insert(QString("feedLabel"), ::OpenAPI::toJsonValue(m_feed_label));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_merchant_id_isSet) {
        obj.insert(QString("merchantId"), ::OpenAPI::toJsonValue(m_merchant_id));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    return obj;
}

qint32 OAIDatafeedstatusesCustomBatchRequestEntry::getBatchId() const {
    return m_batch_id;
}
void OAIDatafeedstatusesCustomBatchRequestEntry::setBatchId(const qint32 &batch_id) {
    m_batch_id = batch_id;
    m_batch_id_isSet = true;
}

bool OAIDatafeedstatusesCustomBatchRequestEntry::is_batch_id_Set() const{
    return m_batch_id_isSet;
}

bool OAIDatafeedstatusesCustomBatchRequestEntry::is_batch_id_Valid() const{
    return m_batch_id_isValid;
}

QString OAIDatafeedstatusesCustomBatchRequestEntry::getCountry() const {
    return m_country;
}
void OAIDatafeedstatusesCustomBatchRequestEntry::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIDatafeedstatusesCustomBatchRequestEntry::is_country_Set() const{
    return m_country_isSet;
}

bool OAIDatafeedstatusesCustomBatchRequestEntry::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIDatafeedstatusesCustomBatchRequestEntry::getDatafeedId() const {
    return m_datafeed_id;
}
void OAIDatafeedstatusesCustomBatchRequestEntry::setDatafeedId(const QString &datafeed_id) {
    m_datafeed_id = datafeed_id;
    m_datafeed_id_isSet = true;
}

bool OAIDatafeedstatusesCustomBatchRequestEntry::is_datafeed_id_Set() const{
    return m_datafeed_id_isSet;
}

bool OAIDatafeedstatusesCustomBatchRequestEntry::is_datafeed_id_Valid() const{
    return m_datafeed_id_isValid;
}

QString OAIDatafeedstatusesCustomBatchRequestEntry::getFeedLabel() const {
    return m_feed_label;
}
void OAIDatafeedstatusesCustomBatchRequestEntry::setFeedLabel(const QString &feed_label) {
    m_feed_label = feed_label;
    m_feed_label_isSet = true;
}

bool OAIDatafeedstatusesCustomBatchRequestEntry::is_feed_label_Set() const{
    return m_feed_label_isSet;
}

bool OAIDatafeedstatusesCustomBatchRequestEntry::is_feed_label_Valid() const{
    return m_feed_label_isValid;
}

QString OAIDatafeedstatusesCustomBatchRequestEntry::getLanguage() const {
    return m_language;
}
void OAIDatafeedstatusesCustomBatchRequestEntry::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIDatafeedstatusesCustomBatchRequestEntry::is_language_Set() const{
    return m_language_isSet;
}

bool OAIDatafeedstatusesCustomBatchRequestEntry::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIDatafeedstatusesCustomBatchRequestEntry::getMerchantId() const {
    return m_merchant_id;
}
void OAIDatafeedstatusesCustomBatchRequestEntry::setMerchantId(const QString &merchant_id) {
    m_merchant_id = merchant_id;
    m_merchant_id_isSet = true;
}

bool OAIDatafeedstatusesCustomBatchRequestEntry::is_merchant_id_Set() const{
    return m_merchant_id_isSet;
}

bool OAIDatafeedstatusesCustomBatchRequestEntry::is_merchant_id_Valid() const{
    return m_merchant_id_isValid;
}

QString OAIDatafeedstatusesCustomBatchRequestEntry::getMethod() const {
    return m_method;
}
void OAIDatafeedstatusesCustomBatchRequestEntry::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIDatafeedstatusesCustomBatchRequestEntry::is_method_Set() const{
    return m_method_isSet;
}

bool OAIDatafeedstatusesCustomBatchRequestEntry::is_method_Valid() const{
    return m_method_isValid;
}

bool OAIDatafeedstatusesCustomBatchRequestEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datafeed_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatafeedstatusesCustomBatchRequestEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
