/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHolidayCutoff.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHolidayCutoff::OAIHolidayCutoff(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHolidayCutoff::OAIHolidayCutoff() {
    this->initializeModel();
}

OAIHolidayCutoff::~OAIHolidayCutoff() {}

void OAIHolidayCutoff::initializeModel() {

    m_deadline_date_isSet = false;
    m_deadline_date_isValid = false;

    m_deadline_hour_isSet = false;
    m_deadline_hour_isValid = false;

    m_deadline_timezone_isSet = false;
    m_deadline_timezone_isValid = false;

    m_holiday_id_isSet = false;
    m_holiday_id_isValid = false;

    m_visible_from_date_isSet = false;
    m_visible_from_date_isValid = false;
}

void OAIHolidayCutoff::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHolidayCutoff::fromJsonObject(QJsonObject json) {

    m_deadline_date_isValid = ::OpenAPI::fromJsonValue(m_deadline_date, json[QString("deadlineDate")]);
    m_deadline_date_isSet = !json[QString("deadlineDate")].isNull() && m_deadline_date_isValid;

    m_deadline_hour_isValid = ::OpenAPI::fromJsonValue(m_deadline_hour, json[QString("deadlineHour")]);
    m_deadline_hour_isSet = !json[QString("deadlineHour")].isNull() && m_deadline_hour_isValid;

    m_deadline_timezone_isValid = ::OpenAPI::fromJsonValue(m_deadline_timezone, json[QString("deadlineTimezone")]);
    m_deadline_timezone_isSet = !json[QString("deadlineTimezone")].isNull() && m_deadline_timezone_isValid;

    m_holiday_id_isValid = ::OpenAPI::fromJsonValue(m_holiday_id, json[QString("holidayId")]);
    m_holiday_id_isSet = !json[QString("holidayId")].isNull() && m_holiday_id_isValid;

    m_visible_from_date_isValid = ::OpenAPI::fromJsonValue(m_visible_from_date, json[QString("visibleFromDate")]);
    m_visible_from_date_isSet = !json[QString("visibleFromDate")].isNull() && m_visible_from_date_isValid;
}

QString OAIHolidayCutoff::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHolidayCutoff::asJsonObject() const {
    QJsonObject obj;
    if (m_deadline_date_isSet) {
        obj.insert(QString("deadlineDate"), ::OpenAPI::toJsonValue(m_deadline_date));
    }
    if (m_deadline_hour_isSet) {
        obj.insert(QString("deadlineHour"), ::OpenAPI::toJsonValue(m_deadline_hour));
    }
    if (m_deadline_timezone_isSet) {
        obj.insert(QString("deadlineTimezone"), ::OpenAPI::toJsonValue(m_deadline_timezone));
    }
    if (m_holiday_id_isSet) {
        obj.insert(QString("holidayId"), ::OpenAPI::toJsonValue(m_holiday_id));
    }
    if (m_visible_from_date_isSet) {
        obj.insert(QString("visibleFromDate"), ::OpenAPI::toJsonValue(m_visible_from_date));
    }
    return obj;
}

QString OAIHolidayCutoff::getDeadlineDate() const {
    return m_deadline_date;
}
void OAIHolidayCutoff::setDeadlineDate(const QString &deadline_date) {
    m_deadline_date = deadline_date;
    m_deadline_date_isSet = true;
}

bool OAIHolidayCutoff::is_deadline_date_Set() const{
    return m_deadline_date_isSet;
}

bool OAIHolidayCutoff::is_deadline_date_Valid() const{
    return m_deadline_date_isValid;
}

qint32 OAIHolidayCutoff::getDeadlineHour() const {
    return m_deadline_hour;
}
void OAIHolidayCutoff::setDeadlineHour(const qint32 &deadline_hour) {
    m_deadline_hour = deadline_hour;
    m_deadline_hour_isSet = true;
}

bool OAIHolidayCutoff::is_deadline_hour_Set() const{
    return m_deadline_hour_isSet;
}

bool OAIHolidayCutoff::is_deadline_hour_Valid() const{
    return m_deadline_hour_isValid;
}

QString OAIHolidayCutoff::getDeadlineTimezone() const {
    return m_deadline_timezone;
}
void OAIHolidayCutoff::setDeadlineTimezone(const QString &deadline_timezone) {
    m_deadline_timezone = deadline_timezone;
    m_deadline_timezone_isSet = true;
}

bool OAIHolidayCutoff::is_deadline_timezone_Set() const{
    return m_deadline_timezone_isSet;
}

bool OAIHolidayCutoff::is_deadline_timezone_Valid() const{
    return m_deadline_timezone_isValid;
}

QString OAIHolidayCutoff::getHolidayId() const {
    return m_holiday_id;
}
void OAIHolidayCutoff::setHolidayId(const QString &holiday_id) {
    m_holiday_id = holiday_id;
    m_holiday_id_isSet = true;
}

bool OAIHolidayCutoff::is_holiday_id_Set() const{
    return m_holiday_id_isSet;
}

bool OAIHolidayCutoff::is_holiday_id_Valid() const{
    return m_holiday_id_isValid;
}

QString OAIHolidayCutoff::getVisibleFromDate() const {
    return m_visible_from_date;
}
void OAIHolidayCutoff::setVisibleFromDate(const QString &visible_from_date) {
    m_visible_from_date = visible_from_date;
    m_visible_from_date_isSet = true;
}

bool OAIHolidayCutoff::is_visible_from_date_Set() const{
    return m_visible_from_date_isSet;
}

bool OAIHolidayCutoff::is_visible_from_date_Valid() const{
    return m_visible_from_date_isValid;
}

bool OAIHolidayCutoff::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deadline_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deadline_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deadline_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holiday_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHolidayCutoff::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
