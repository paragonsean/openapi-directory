/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReturnPolicyOnline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReturnPolicyOnline::OAIReturnPolicyOnline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReturnPolicyOnline::OAIReturnPolicyOnline() {
    this->initializeModel();
}

OAIReturnPolicyOnline::~OAIReturnPolicyOnline() {}

void OAIReturnPolicyOnline::initializeModel() {

    m_countries_isSet = false;
    m_countries_isValid = false;

    m_item_conditions_isSet = false;
    m_item_conditions_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_restocking_fee_isSet = false;
    m_restocking_fee_isValid = false;

    m_return_methods_isSet = false;
    m_return_methods_isValid = false;

    m_return_policy_id_isSet = false;
    m_return_policy_id_isValid = false;

    m_return_policy_uri_isSet = false;
    m_return_policy_uri_isValid = false;

    m_return_reason_category_info_isSet = false;
    m_return_reason_category_info_isValid = false;
}

void OAIReturnPolicyOnline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReturnPolicyOnline::fromJsonObject(QJsonObject json) {

    m_countries_isValid = ::OpenAPI::fromJsonValue(m_countries, json[QString("countries")]);
    m_countries_isSet = !json[QString("countries")].isNull() && m_countries_isValid;

    m_item_conditions_isValid = ::OpenAPI::fromJsonValue(m_item_conditions, json[QString("itemConditions")]);
    m_item_conditions_isSet = !json[QString("itemConditions")].isNull() && m_item_conditions_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_restocking_fee_isValid = ::OpenAPI::fromJsonValue(m_restocking_fee, json[QString("restockingFee")]);
    m_restocking_fee_isSet = !json[QString("restockingFee")].isNull() && m_restocking_fee_isValid;

    m_return_methods_isValid = ::OpenAPI::fromJsonValue(m_return_methods, json[QString("returnMethods")]);
    m_return_methods_isSet = !json[QString("returnMethods")].isNull() && m_return_methods_isValid;

    m_return_policy_id_isValid = ::OpenAPI::fromJsonValue(m_return_policy_id, json[QString("returnPolicyId")]);
    m_return_policy_id_isSet = !json[QString("returnPolicyId")].isNull() && m_return_policy_id_isValid;

    m_return_policy_uri_isValid = ::OpenAPI::fromJsonValue(m_return_policy_uri, json[QString("returnPolicyUri")]);
    m_return_policy_uri_isSet = !json[QString("returnPolicyUri")].isNull() && m_return_policy_uri_isValid;

    m_return_reason_category_info_isValid = ::OpenAPI::fromJsonValue(m_return_reason_category_info, json[QString("returnReasonCategoryInfo")]);
    m_return_reason_category_info_isSet = !json[QString("returnReasonCategoryInfo")].isNull() && m_return_reason_category_info_isValid;
}

QString OAIReturnPolicyOnline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReturnPolicyOnline::asJsonObject() const {
    QJsonObject obj;
    if (m_countries.size() > 0) {
        obj.insert(QString("countries"), ::OpenAPI::toJsonValue(m_countries));
    }
    if (m_item_conditions.size() > 0) {
        obj.insert(QString("itemConditions"), ::OpenAPI::toJsonValue(m_item_conditions));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_policy.isSet()) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_restocking_fee.isSet()) {
        obj.insert(QString("restockingFee"), ::OpenAPI::toJsonValue(m_restocking_fee));
    }
    if (m_return_methods.size() > 0) {
        obj.insert(QString("returnMethods"), ::OpenAPI::toJsonValue(m_return_methods));
    }
    if (m_return_policy_id_isSet) {
        obj.insert(QString("returnPolicyId"), ::OpenAPI::toJsonValue(m_return_policy_id));
    }
    if (m_return_policy_uri_isSet) {
        obj.insert(QString("returnPolicyUri"), ::OpenAPI::toJsonValue(m_return_policy_uri));
    }
    if (m_return_reason_category_info.size() > 0) {
        obj.insert(QString("returnReasonCategoryInfo"), ::OpenAPI::toJsonValue(m_return_reason_category_info));
    }
    return obj;
}

QList<QString> OAIReturnPolicyOnline::getCountries() const {
    return m_countries;
}
void OAIReturnPolicyOnline::setCountries(const QList<QString> &countries) {
    m_countries = countries;
    m_countries_isSet = true;
}

bool OAIReturnPolicyOnline::is_countries_Set() const{
    return m_countries_isSet;
}

bool OAIReturnPolicyOnline::is_countries_Valid() const{
    return m_countries_isValid;
}

QList<QString> OAIReturnPolicyOnline::getItemConditions() const {
    return m_item_conditions;
}
void OAIReturnPolicyOnline::setItemConditions(const QList<QString> &item_conditions) {
    m_item_conditions = item_conditions;
    m_item_conditions_isSet = true;
}

bool OAIReturnPolicyOnline::is_item_conditions_Set() const{
    return m_item_conditions_isSet;
}

bool OAIReturnPolicyOnline::is_item_conditions_Valid() const{
    return m_item_conditions_isValid;
}

QString OAIReturnPolicyOnline::getLabel() const {
    return m_label;
}
void OAIReturnPolicyOnline::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIReturnPolicyOnline::is_label_Set() const{
    return m_label_isSet;
}

bool OAIReturnPolicyOnline::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIReturnPolicyOnline::getName() const {
    return m_name;
}
void OAIReturnPolicyOnline::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReturnPolicyOnline::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReturnPolicyOnline::is_name_Valid() const{
    return m_name_isValid;
}

OAIReturnPolicyOnlinePolicy OAIReturnPolicyOnline::getPolicy() const {
    return m_policy;
}
void OAIReturnPolicyOnline::setPolicy(const OAIReturnPolicyOnlinePolicy &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIReturnPolicyOnline::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIReturnPolicyOnline::is_policy_Valid() const{
    return m_policy_isValid;
}

OAIReturnPolicyOnlineRestockingFee OAIReturnPolicyOnline::getRestockingFee() const {
    return m_restocking_fee;
}
void OAIReturnPolicyOnline::setRestockingFee(const OAIReturnPolicyOnlineRestockingFee &restocking_fee) {
    m_restocking_fee = restocking_fee;
    m_restocking_fee_isSet = true;
}

bool OAIReturnPolicyOnline::is_restocking_fee_Set() const{
    return m_restocking_fee_isSet;
}

bool OAIReturnPolicyOnline::is_restocking_fee_Valid() const{
    return m_restocking_fee_isValid;
}

QList<QString> OAIReturnPolicyOnline::getReturnMethods() const {
    return m_return_methods;
}
void OAIReturnPolicyOnline::setReturnMethods(const QList<QString> &return_methods) {
    m_return_methods = return_methods;
    m_return_methods_isSet = true;
}

bool OAIReturnPolicyOnline::is_return_methods_Set() const{
    return m_return_methods_isSet;
}

bool OAIReturnPolicyOnline::is_return_methods_Valid() const{
    return m_return_methods_isValid;
}

QString OAIReturnPolicyOnline::getReturnPolicyId() const {
    return m_return_policy_id;
}
void OAIReturnPolicyOnline::setReturnPolicyId(const QString &return_policy_id) {
    m_return_policy_id = return_policy_id;
    m_return_policy_id_isSet = true;
}

bool OAIReturnPolicyOnline::is_return_policy_id_Set() const{
    return m_return_policy_id_isSet;
}

bool OAIReturnPolicyOnline::is_return_policy_id_Valid() const{
    return m_return_policy_id_isValid;
}

QString OAIReturnPolicyOnline::getReturnPolicyUri() const {
    return m_return_policy_uri;
}
void OAIReturnPolicyOnline::setReturnPolicyUri(const QString &return_policy_uri) {
    m_return_policy_uri = return_policy_uri;
    m_return_policy_uri_isSet = true;
}

bool OAIReturnPolicyOnline::is_return_policy_uri_Set() const{
    return m_return_policy_uri_isSet;
}

bool OAIReturnPolicyOnline::is_return_policy_uri_Valid() const{
    return m_return_policy_uri_isValid;
}

QList<OAIReturnPolicyOnlineReturnReasonCategoryInfo> OAIReturnPolicyOnline::getReturnReasonCategoryInfo() const {
    return m_return_reason_category_info;
}
void OAIReturnPolicyOnline::setReturnReasonCategoryInfo(const QList<OAIReturnPolicyOnlineReturnReasonCategoryInfo> &return_reason_category_info) {
    m_return_reason_category_info = return_reason_category_info;
    m_return_reason_category_info_isSet = true;
}

bool OAIReturnPolicyOnline::is_return_reason_category_info_Set() const{
    return m_return_reason_category_info_isSet;
}

bool OAIReturnPolicyOnline::is_return_reason_category_info_Valid() const{
    return m_return_reason_category_info_isValid;
}

bool OAIReturnPolicyOnline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restocking_fee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_policy_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_reason_category_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReturnPolicyOnline::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
