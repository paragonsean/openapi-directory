/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectionStatusItemLevelIssue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectionStatusItemLevelIssue::OAICollectionStatusItemLevelIssue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectionStatusItemLevelIssue::OAICollectionStatusItemLevelIssue() {
    this->initializeModel();
}

OAICollectionStatusItemLevelIssue::~OAICollectionStatusItemLevelIssue() {}

void OAICollectionStatusItemLevelIssue::initializeModel() {

    m_applicable_countries_isSet = false;
    m_applicable_countries_isValid = false;

    m_attribute_name_isSet = false;
    m_attribute_name_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_documentation_isSet = false;
    m_documentation_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_servability_isSet = false;
    m_servability_isValid = false;
}

void OAICollectionStatusItemLevelIssue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectionStatusItemLevelIssue::fromJsonObject(QJsonObject json) {

    m_applicable_countries_isValid = ::OpenAPI::fromJsonValue(m_applicable_countries, json[QString("applicableCountries")]);
    m_applicable_countries_isSet = !json[QString("applicableCountries")].isNull() && m_applicable_countries_isValid;

    m_attribute_name_isValid = ::OpenAPI::fromJsonValue(m_attribute_name, json[QString("attributeName")]);
    m_attribute_name_isSet = !json[QString("attributeName")].isNull() && m_attribute_name_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_documentation_isValid = ::OpenAPI::fromJsonValue(m_documentation, json[QString("documentation")]);
    m_documentation_isSet = !json[QString("documentation")].isNull() && m_documentation_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_servability_isValid = ::OpenAPI::fromJsonValue(m_servability, json[QString("servability")]);
    m_servability_isSet = !json[QString("servability")].isNull() && m_servability_isValid;
}

QString OAICollectionStatusItemLevelIssue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectionStatusItemLevelIssue::asJsonObject() const {
    QJsonObject obj;
    if (m_applicable_countries.size() > 0) {
        obj.insert(QString("applicableCountries"), ::OpenAPI::toJsonValue(m_applicable_countries));
    }
    if (m_attribute_name_isSet) {
        obj.insert(QString("attributeName"), ::OpenAPI::toJsonValue(m_attribute_name));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_documentation_isSet) {
        obj.insert(QString("documentation"), ::OpenAPI::toJsonValue(m_documentation));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_servability_isSet) {
        obj.insert(QString("servability"), ::OpenAPI::toJsonValue(m_servability));
    }
    return obj;
}

QList<QString> OAICollectionStatusItemLevelIssue::getApplicableCountries() const {
    return m_applicable_countries;
}
void OAICollectionStatusItemLevelIssue::setApplicableCountries(const QList<QString> &applicable_countries) {
    m_applicable_countries = applicable_countries;
    m_applicable_countries_isSet = true;
}

bool OAICollectionStatusItemLevelIssue::is_applicable_countries_Set() const{
    return m_applicable_countries_isSet;
}

bool OAICollectionStatusItemLevelIssue::is_applicable_countries_Valid() const{
    return m_applicable_countries_isValid;
}

QString OAICollectionStatusItemLevelIssue::getAttributeName() const {
    return m_attribute_name;
}
void OAICollectionStatusItemLevelIssue::setAttributeName(const QString &attribute_name) {
    m_attribute_name = attribute_name;
    m_attribute_name_isSet = true;
}

bool OAICollectionStatusItemLevelIssue::is_attribute_name_Set() const{
    return m_attribute_name_isSet;
}

bool OAICollectionStatusItemLevelIssue::is_attribute_name_Valid() const{
    return m_attribute_name_isValid;
}

QString OAICollectionStatusItemLevelIssue::getCode() const {
    return m_code;
}
void OAICollectionStatusItemLevelIssue::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICollectionStatusItemLevelIssue::is_code_Set() const{
    return m_code_isSet;
}

bool OAICollectionStatusItemLevelIssue::is_code_Valid() const{
    return m_code_isValid;
}

QString OAICollectionStatusItemLevelIssue::getDescription() const {
    return m_description;
}
void OAICollectionStatusItemLevelIssue::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICollectionStatusItemLevelIssue::is_description_Set() const{
    return m_description_isSet;
}

bool OAICollectionStatusItemLevelIssue::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICollectionStatusItemLevelIssue::getDestination() const {
    return m_destination;
}
void OAICollectionStatusItemLevelIssue::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAICollectionStatusItemLevelIssue::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAICollectionStatusItemLevelIssue::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAICollectionStatusItemLevelIssue::getDetail() const {
    return m_detail;
}
void OAICollectionStatusItemLevelIssue::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAICollectionStatusItemLevelIssue::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAICollectionStatusItemLevelIssue::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAICollectionStatusItemLevelIssue::getDocumentation() const {
    return m_documentation;
}
void OAICollectionStatusItemLevelIssue::setDocumentation(const QString &documentation) {
    m_documentation = documentation;
    m_documentation_isSet = true;
}

bool OAICollectionStatusItemLevelIssue::is_documentation_Set() const{
    return m_documentation_isSet;
}

bool OAICollectionStatusItemLevelIssue::is_documentation_Valid() const{
    return m_documentation_isValid;
}

QString OAICollectionStatusItemLevelIssue::getResolution() const {
    return m_resolution;
}
void OAICollectionStatusItemLevelIssue::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAICollectionStatusItemLevelIssue::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAICollectionStatusItemLevelIssue::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QString OAICollectionStatusItemLevelIssue::getServability() const {
    return m_servability;
}
void OAICollectionStatusItemLevelIssue::setServability(const QString &servability) {
    m_servability = servability;
    m_servability_isSet = true;
}

bool OAICollectionStatusItemLevelIssue::is_servability_Set() const{
    return m_servability_isSet;
}

bool OAICollectionStatusItemLevelIssue::is_servability_Valid() const{
    return m_servability_isValid;
}

bool OAICollectionStatusItemLevelIssue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applicable_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_servability_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectionStatusItemLevelIssue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
