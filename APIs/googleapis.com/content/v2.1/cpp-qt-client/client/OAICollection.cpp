/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollection::OAICollection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollection::OAICollection() {
    this->initializeModel();
}

OAICollection::~OAICollection() {}

void OAICollection::initializeModel() {

    m_custom_label0_isSet = false;
    m_custom_label0_isValid = false;

    m_custom_label1_isSet = false;
    m_custom_label1_isValid = false;

    m_custom_label2_isSet = false;
    m_custom_label2_isValid = false;

    m_custom_label3_isSet = false;
    m_custom_label3_isValid = false;

    m_custom_label4_isSet = false;
    m_custom_label4_isValid = false;

    m_featured_product_isSet = false;
    m_featured_product_isValid = false;

    m_headline_isSet = false;
    m_headline_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_link_isSet = false;
    m_image_link_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_mobile_link_isSet = false;
    m_mobile_link_isValid = false;

    m_product_country_isSet = false;
    m_product_country_isValid = false;
}

void OAICollection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollection::fromJsonObject(QJsonObject json) {

    m_custom_label0_isValid = ::OpenAPI::fromJsonValue(m_custom_label0, json[QString("customLabel0")]);
    m_custom_label0_isSet = !json[QString("customLabel0")].isNull() && m_custom_label0_isValid;

    m_custom_label1_isValid = ::OpenAPI::fromJsonValue(m_custom_label1, json[QString("customLabel1")]);
    m_custom_label1_isSet = !json[QString("customLabel1")].isNull() && m_custom_label1_isValid;

    m_custom_label2_isValid = ::OpenAPI::fromJsonValue(m_custom_label2, json[QString("customLabel2")]);
    m_custom_label2_isSet = !json[QString("customLabel2")].isNull() && m_custom_label2_isValid;

    m_custom_label3_isValid = ::OpenAPI::fromJsonValue(m_custom_label3, json[QString("customLabel3")]);
    m_custom_label3_isSet = !json[QString("customLabel3")].isNull() && m_custom_label3_isValid;

    m_custom_label4_isValid = ::OpenAPI::fromJsonValue(m_custom_label4, json[QString("customLabel4")]);
    m_custom_label4_isSet = !json[QString("customLabel4")].isNull() && m_custom_label4_isValid;

    m_featured_product_isValid = ::OpenAPI::fromJsonValue(m_featured_product, json[QString("featuredProduct")]);
    m_featured_product_isSet = !json[QString("featuredProduct")].isNull() && m_featured_product_isValid;

    m_headline_isValid = ::OpenAPI::fromJsonValue(m_headline, json[QString("headline")]);
    m_headline_isSet = !json[QString("headline")].isNull() && m_headline_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_link_isValid = ::OpenAPI::fromJsonValue(m_image_link, json[QString("imageLink")]);
    m_image_link_isSet = !json[QString("imageLink")].isNull() && m_image_link_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_mobile_link_isValid = ::OpenAPI::fromJsonValue(m_mobile_link, json[QString("mobileLink")]);
    m_mobile_link_isSet = !json[QString("mobileLink")].isNull() && m_mobile_link_isValid;

    m_product_country_isValid = ::OpenAPI::fromJsonValue(m_product_country, json[QString("productCountry")]);
    m_product_country_isSet = !json[QString("productCountry")].isNull() && m_product_country_isValid;
}

QString OAICollection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollection::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_label0_isSet) {
        obj.insert(QString("customLabel0"), ::OpenAPI::toJsonValue(m_custom_label0));
    }
    if (m_custom_label1_isSet) {
        obj.insert(QString("customLabel1"), ::OpenAPI::toJsonValue(m_custom_label1));
    }
    if (m_custom_label2_isSet) {
        obj.insert(QString("customLabel2"), ::OpenAPI::toJsonValue(m_custom_label2));
    }
    if (m_custom_label3_isSet) {
        obj.insert(QString("customLabel3"), ::OpenAPI::toJsonValue(m_custom_label3));
    }
    if (m_custom_label4_isSet) {
        obj.insert(QString("customLabel4"), ::OpenAPI::toJsonValue(m_custom_label4));
    }
    if (m_featured_product.size() > 0) {
        obj.insert(QString("featuredProduct"), ::OpenAPI::toJsonValue(m_featured_product));
    }
    if (m_headline.size() > 0) {
        obj.insert(QString("headline"), ::OpenAPI::toJsonValue(m_headline));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_link.size() > 0) {
        obj.insert(QString("imageLink"), ::OpenAPI::toJsonValue(m_image_link));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_mobile_link_isSet) {
        obj.insert(QString("mobileLink"), ::OpenAPI::toJsonValue(m_mobile_link));
    }
    if (m_product_country_isSet) {
        obj.insert(QString("productCountry"), ::OpenAPI::toJsonValue(m_product_country));
    }
    return obj;
}

QString OAICollection::getCustomLabel0() const {
    return m_custom_label0;
}
void OAICollection::setCustomLabel0(const QString &custom_label0) {
    m_custom_label0 = custom_label0;
    m_custom_label0_isSet = true;
}

bool OAICollection::is_custom_label0_Set() const{
    return m_custom_label0_isSet;
}

bool OAICollection::is_custom_label0_Valid() const{
    return m_custom_label0_isValid;
}

QString OAICollection::getCustomLabel1() const {
    return m_custom_label1;
}
void OAICollection::setCustomLabel1(const QString &custom_label1) {
    m_custom_label1 = custom_label1;
    m_custom_label1_isSet = true;
}

bool OAICollection::is_custom_label1_Set() const{
    return m_custom_label1_isSet;
}

bool OAICollection::is_custom_label1_Valid() const{
    return m_custom_label1_isValid;
}

QString OAICollection::getCustomLabel2() const {
    return m_custom_label2;
}
void OAICollection::setCustomLabel2(const QString &custom_label2) {
    m_custom_label2 = custom_label2;
    m_custom_label2_isSet = true;
}

bool OAICollection::is_custom_label2_Set() const{
    return m_custom_label2_isSet;
}

bool OAICollection::is_custom_label2_Valid() const{
    return m_custom_label2_isValid;
}

QString OAICollection::getCustomLabel3() const {
    return m_custom_label3;
}
void OAICollection::setCustomLabel3(const QString &custom_label3) {
    m_custom_label3 = custom_label3;
    m_custom_label3_isSet = true;
}

bool OAICollection::is_custom_label3_Set() const{
    return m_custom_label3_isSet;
}

bool OAICollection::is_custom_label3_Valid() const{
    return m_custom_label3_isValid;
}

QString OAICollection::getCustomLabel4() const {
    return m_custom_label4;
}
void OAICollection::setCustomLabel4(const QString &custom_label4) {
    m_custom_label4 = custom_label4;
    m_custom_label4_isSet = true;
}

bool OAICollection::is_custom_label4_Set() const{
    return m_custom_label4_isSet;
}

bool OAICollection::is_custom_label4_Valid() const{
    return m_custom_label4_isValid;
}

QList<OAICollectionFeaturedProduct> OAICollection::getFeaturedProduct() const {
    return m_featured_product;
}
void OAICollection::setFeaturedProduct(const QList<OAICollectionFeaturedProduct> &featured_product) {
    m_featured_product = featured_product;
    m_featured_product_isSet = true;
}

bool OAICollection::is_featured_product_Set() const{
    return m_featured_product_isSet;
}

bool OAICollection::is_featured_product_Valid() const{
    return m_featured_product_isValid;
}

QList<QString> OAICollection::getHeadline() const {
    return m_headline;
}
void OAICollection::setHeadline(const QList<QString> &headline) {
    m_headline = headline;
    m_headline_isSet = true;
}

bool OAICollection::is_headline_Set() const{
    return m_headline_isSet;
}

bool OAICollection::is_headline_Valid() const{
    return m_headline_isValid;
}

QString OAICollection::getId() const {
    return m_id;
}
void OAICollection::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICollection::is_id_Set() const{
    return m_id_isSet;
}

bool OAICollection::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAICollection::getImageLink() const {
    return m_image_link;
}
void OAICollection::setImageLink(const QList<QString> &image_link) {
    m_image_link = image_link;
    m_image_link_isSet = true;
}

bool OAICollection::is_image_link_Set() const{
    return m_image_link_isSet;
}

bool OAICollection::is_image_link_Valid() const{
    return m_image_link_isValid;
}

QString OAICollection::getLanguage() const {
    return m_language;
}
void OAICollection::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAICollection::is_language_Set() const{
    return m_language_isSet;
}

bool OAICollection::is_language_Valid() const{
    return m_language_isValid;
}

QString OAICollection::getLink() const {
    return m_link;
}
void OAICollection::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAICollection::is_link_Set() const{
    return m_link_isSet;
}

bool OAICollection::is_link_Valid() const{
    return m_link_isValid;
}

QString OAICollection::getMobileLink() const {
    return m_mobile_link;
}
void OAICollection::setMobileLink(const QString &mobile_link) {
    m_mobile_link = mobile_link;
    m_mobile_link_isSet = true;
}

bool OAICollection::is_mobile_link_Set() const{
    return m_mobile_link_isSet;
}

bool OAICollection::is_mobile_link_Valid() const{
    return m_mobile_link_isValid;
}

QString OAICollection::getProductCountry() const {
    return m_product_country;
}
void OAICollection::setProductCountry(const QString &product_country) {
    m_product_country = product_country;
    m_product_country_isSet = true;
}

bool OAICollection::is_product_country_Set() const{
    return m_product_country_isSet;
}

bool OAICollection::is_product_country_Valid() const{
    return m_product_country_isValid;
}

bool OAICollection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_label0_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured_product.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_headline.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_link.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_country_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
