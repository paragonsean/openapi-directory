/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnitInvoice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnitInvoice::OAIUnitInvoice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnitInvoice::OAIUnitInvoice() {
    this->initializeModel();
}

OAIUnitInvoice::~OAIUnitInvoice() {}

void OAIUnitInvoice::initializeModel() {

    m_additional_charges_isSet = false;
    m_additional_charges_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_unit_price_taxes_isSet = false;
    m_unit_price_taxes_isValid = false;
}

void OAIUnitInvoice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUnitInvoice::fromJsonObject(QJsonObject json) {

    m_additional_charges_isValid = ::OpenAPI::fromJsonValue(m_additional_charges, json[QString("additionalCharges")]);
    m_additional_charges_isSet = !json[QString("additionalCharges")].isNull() && m_additional_charges_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;

    m_unit_price_taxes_isValid = ::OpenAPI::fromJsonValue(m_unit_price_taxes, json[QString("unitPriceTaxes")]);
    m_unit_price_taxes_isSet = !json[QString("unitPriceTaxes")].isNull() && m_unit_price_taxes_isValid;
}

QString OAIUnitInvoice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUnitInvoice::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_charges.size() > 0) {
        obj.insert(QString("additionalCharges"), ::OpenAPI::toJsonValue(m_additional_charges));
    }
    if (m_unit_price.isSet()) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_unit_price_taxes.size() > 0) {
        obj.insert(QString("unitPriceTaxes"), ::OpenAPI::toJsonValue(m_unit_price_taxes));
    }
    return obj;
}

QList<OAIUnitInvoiceAdditionalCharge> OAIUnitInvoice::getAdditionalCharges() const {
    return m_additional_charges;
}
void OAIUnitInvoice::setAdditionalCharges(const QList<OAIUnitInvoiceAdditionalCharge> &additional_charges) {
    m_additional_charges = additional_charges;
    m_additional_charges_isSet = true;
}

bool OAIUnitInvoice::is_additional_charges_Set() const{
    return m_additional_charges_isSet;
}

bool OAIUnitInvoice::is_additional_charges_Valid() const{
    return m_additional_charges_isValid;
}

OAIPrice OAIUnitInvoice::getUnitPrice() const {
    return m_unit_price;
}
void OAIUnitInvoice::setUnitPrice(const OAIPrice &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIUnitInvoice::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIUnitInvoice::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

QList<OAIUnitInvoiceTaxLine> OAIUnitInvoice::getUnitPriceTaxes() const {
    return m_unit_price_taxes;
}
void OAIUnitInvoice::setUnitPriceTaxes(const QList<OAIUnitInvoiceTaxLine> &unit_price_taxes) {
    m_unit_price_taxes = unit_price_taxes;
    m_unit_price_taxes_isSet = true;
}

bool OAIUnitInvoice::is_unit_price_taxes_Set() const{
    return m_unit_price_taxes_isSet;
}

bool OAIUnitInvoice::is_unit_price_taxes_Valid() const{
    return m_unit_price_taxes_isValid;
}

bool OAIUnitInvoice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_charges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_taxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUnitInvoice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
