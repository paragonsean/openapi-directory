/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectionStatusDestinationStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectionStatusDestinationStatus::OAICollectionStatusDestinationStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectionStatusDestinationStatus::OAICollectionStatusDestinationStatus() {
    this->initializeModel();
}

OAICollectionStatusDestinationStatus::~OAICollectionStatusDestinationStatus() {}

void OAICollectionStatusDestinationStatus::initializeModel() {

    m_approved_countries_isSet = false;
    m_approved_countries_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_disapproved_countries_isSet = false;
    m_disapproved_countries_isValid = false;

    m_pending_countries_isSet = false;
    m_pending_countries_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICollectionStatusDestinationStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectionStatusDestinationStatus::fromJsonObject(QJsonObject json) {

    m_approved_countries_isValid = ::OpenAPI::fromJsonValue(m_approved_countries, json[QString("approvedCountries")]);
    m_approved_countries_isSet = !json[QString("approvedCountries")].isNull() && m_approved_countries_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_disapproved_countries_isValid = ::OpenAPI::fromJsonValue(m_disapproved_countries, json[QString("disapprovedCountries")]);
    m_disapproved_countries_isSet = !json[QString("disapprovedCountries")].isNull() && m_disapproved_countries_isValid;

    m_pending_countries_isValid = ::OpenAPI::fromJsonValue(m_pending_countries, json[QString("pendingCountries")]);
    m_pending_countries_isSet = !json[QString("pendingCountries")].isNull() && m_pending_countries_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICollectionStatusDestinationStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectionStatusDestinationStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_approved_countries.size() > 0) {
        obj.insert(QString("approvedCountries"), ::OpenAPI::toJsonValue(m_approved_countries));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_disapproved_countries.size() > 0) {
        obj.insert(QString("disapprovedCountries"), ::OpenAPI::toJsonValue(m_disapproved_countries));
    }
    if (m_pending_countries.size() > 0) {
        obj.insert(QString("pendingCountries"), ::OpenAPI::toJsonValue(m_pending_countries));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<QString> OAICollectionStatusDestinationStatus::getApprovedCountries() const {
    return m_approved_countries;
}
void OAICollectionStatusDestinationStatus::setApprovedCountries(const QList<QString> &approved_countries) {
    m_approved_countries = approved_countries;
    m_approved_countries_isSet = true;
}

bool OAICollectionStatusDestinationStatus::is_approved_countries_Set() const{
    return m_approved_countries_isSet;
}

bool OAICollectionStatusDestinationStatus::is_approved_countries_Valid() const{
    return m_approved_countries_isValid;
}

QString OAICollectionStatusDestinationStatus::getDestination() const {
    return m_destination;
}
void OAICollectionStatusDestinationStatus::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAICollectionStatusDestinationStatus::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAICollectionStatusDestinationStatus::is_destination_Valid() const{
    return m_destination_isValid;
}

QList<QString> OAICollectionStatusDestinationStatus::getDisapprovedCountries() const {
    return m_disapproved_countries;
}
void OAICollectionStatusDestinationStatus::setDisapprovedCountries(const QList<QString> &disapproved_countries) {
    m_disapproved_countries = disapproved_countries;
    m_disapproved_countries_isSet = true;
}

bool OAICollectionStatusDestinationStatus::is_disapproved_countries_Set() const{
    return m_disapproved_countries_isSet;
}

bool OAICollectionStatusDestinationStatus::is_disapproved_countries_Valid() const{
    return m_disapproved_countries_isValid;
}

QList<QString> OAICollectionStatusDestinationStatus::getPendingCountries() const {
    return m_pending_countries;
}
void OAICollectionStatusDestinationStatus::setPendingCountries(const QList<QString> &pending_countries) {
    m_pending_countries = pending_countries;
    m_pending_countries_isSet = true;
}

bool OAICollectionStatusDestinationStatus::is_pending_countries_Set() const{
    return m_pending_countries_isSet;
}

bool OAICollectionStatusDestinationStatus::is_pending_countries_Valid() const{
    return m_pending_countries_isValid;
}

QString OAICollectionStatusDestinationStatus::getStatus() const {
    return m_status;
}
void OAICollectionStatusDestinationStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICollectionStatusDestinationStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAICollectionStatusDestinationStatus::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICollectionStatusDestinationStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approved_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disapproved_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectionStatusDestinationStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
