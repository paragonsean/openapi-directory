/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction::OAIAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction::OAIAction() {
    this->initializeModel();
}

OAIAction::~OAIAction() {}

void OAIAction::initializeModel() {

    m_builtin_simple_action_isSet = false;
    m_builtin_simple_action_isValid = false;

    m_button_label_isSet = false;
    m_button_label_isValid = false;

    m_external_action_isSet = false;
    m_external_action_isValid = false;

    m_is_available_isSet = false;
    m_is_available_isValid = false;

    m_reasons_isSet = false;
    m_reasons_isValid = false;
}

void OAIAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction::fromJsonObject(QJsonObject json) {

    m_builtin_simple_action_isValid = ::OpenAPI::fromJsonValue(m_builtin_simple_action, json[QString("builtinSimpleAction")]);
    m_builtin_simple_action_isSet = !json[QString("builtinSimpleAction")].isNull() && m_builtin_simple_action_isValid;

    m_button_label_isValid = ::OpenAPI::fromJsonValue(m_button_label, json[QString("buttonLabel")]);
    m_button_label_isSet = !json[QString("buttonLabel")].isNull() && m_button_label_isValid;

    m_external_action_isValid = ::OpenAPI::fromJsonValue(m_external_action, json[QString("externalAction")]);
    m_external_action_isSet = !json[QString("externalAction")].isNull() && m_external_action_isValid;

    m_is_available_isValid = ::OpenAPI::fromJsonValue(m_is_available, json[QString("isAvailable")]);
    m_is_available_isSet = !json[QString("isAvailable")].isNull() && m_is_available_isValid;

    m_reasons_isValid = ::OpenAPI::fromJsonValue(m_reasons, json[QString("reasons")]);
    m_reasons_isSet = !json[QString("reasons")].isNull() && m_reasons_isValid;
}

QString OAIAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction::asJsonObject() const {
    QJsonObject obj;
    if (m_builtin_simple_action.isSet()) {
        obj.insert(QString("builtinSimpleAction"), ::OpenAPI::toJsonValue(m_builtin_simple_action));
    }
    if (m_button_label_isSet) {
        obj.insert(QString("buttonLabel"), ::OpenAPI::toJsonValue(m_button_label));
    }
    if (m_external_action.isSet()) {
        obj.insert(QString("externalAction"), ::OpenAPI::toJsonValue(m_external_action));
    }
    if (m_is_available_isSet) {
        obj.insert(QString("isAvailable"), ::OpenAPI::toJsonValue(m_is_available));
    }
    if (m_reasons.size() > 0) {
        obj.insert(QString("reasons"), ::OpenAPI::toJsonValue(m_reasons));
    }
    return obj;
}

OAIBuiltInSimpleAction OAIAction::getBuiltinSimpleAction() const {
    return m_builtin_simple_action;
}
void OAIAction::setBuiltinSimpleAction(const OAIBuiltInSimpleAction &builtin_simple_action) {
    m_builtin_simple_action = builtin_simple_action;
    m_builtin_simple_action_isSet = true;
}

bool OAIAction::is_builtin_simple_action_Set() const{
    return m_builtin_simple_action_isSet;
}

bool OAIAction::is_builtin_simple_action_Valid() const{
    return m_builtin_simple_action_isValid;
}

QString OAIAction::getButtonLabel() const {
    return m_button_label;
}
void OAIAction::setButtonLabel(const QString &button_label) {
    m_button_label = button_label;
    m_button_label_isSet = true;
}

bool OAIAction::is_button_label_Set() const{
    return m_button_label_isSet;
}

bool OAIAction::is_button_label_Valid() const{
    return m_button_label_isValid;
}

OAIExternalAction OAIAction::getExternalAction() const {
    return m_external_action;
}
void OAIAction::setExternalAction(const OAIExternalAction &external_action) {
    m_external_action = external_action;
    m_external_action_isSet = true;
}

bool OAIAction::is_external_action_Set() const{
    return m_external_action_isSet;
}

bool OAIAction::is_external_action_Valid() const{
    return m_external_action_isValid;
}

bool OAIAction::isIsAvailable() const {
    return m_is_available;
}
void OAIAction::setIsAvailable(const bool &is_available) {
    m_is_available = is_available;
    m_is_available_isSet = true;
}

bool OAIAction::is_is_available_Set() const{
    return m_is_available_isSet;
}

bool OAIAction::is_is_available_Valid() const{
    return m_is_available_isValid;
}

QList<OAIActionReason> OAIAction::getReasons() const {
    return m_reasons;
}
void OAIAction::setReasons(const QList<OAIActionReason> &reasons) {
    m_reasons = reasons;
    m_reasons_isSet = true;
}

bool OAIAction::is_reasons_Set() const{
    return m_reasons_isSet;
}

bool OAIAction::is_reasons_Valid() const{
    return m_reasons_isValid;
}

bool OAIAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_builtin_simple_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_button_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
