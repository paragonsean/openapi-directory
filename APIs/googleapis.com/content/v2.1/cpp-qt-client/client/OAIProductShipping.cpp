/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductShipping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductShipping::OAIProductShipping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductShipping::OAIProductShipping() {
    this->initializeModel();
}

OAIProductShipping::~OAIProductShipping() {}

void OAIProductShipping::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_location_group_name_isSet = false;
    m_location_group_name_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_max_handling_time_isSet = false;
    m_max_handling_time_isValid = false;

    m_max_transit_time_isSet = false;
    m_max_transit_time_isValid = false;

    m_min_handling_time_isSet = false;
    m_min_handling_time_isValid = false;

    m_min_transit_time_isSet = false;
    m_min_transit_time_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;
}

void OAIProductShipping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductShipping::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_location_group_name_isValid = ::OpenAPI::fromJsonValue(m_location_group_name, json[QString("locationGroupName")]);
    m_location_group_name_isSet = !json[QString("locationGroupName")].isNull() && m_location_group_name_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_max_handling_time_isValid = ::OpenAPI::fromJsonValue(m_max_handling_time, json[QString("maxHandlingTime")]);
    m_max_handling_time_isSet = !json[QString("maxHandlingTime")].isNull() && m_max_handling_time_isValid;

    m_max_transit_time_isValid = ::OpenAPI::fromJsonValue(m_max_transit_time, json[QString("maxTransitTime")]);
    m_max_transit_time_isSet = !json[QString("maxTransitTime")].isNull() && m_max_transit_time_isValid;

    m_min_handling_time_isValid = ::OpenAPI::fromJsonValue(m_min_handling_time, json[QString("minHandlingTime")]);
    m_min_handling_time_isSet = !json[QString("minHandlingTime")].isNull() && m_min_handling_time_isValid;

    m_min_transit_time_isValid = ::OpenAPI::fromJsonValue(m_min_transit_time, json[QString("minTransitTime")]);
    m_min_transit_time_isSet = !json[QString("minTransitTime")].isNull() && m_min_transit_time_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;
}

QString OAIProductShipping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductShipping::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_location_group_name_isSet) {
        obj.insert(QString("locationGroupName"), ::OpenAPI::toJsonValue(m_location_group_name));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_max_handling_time_isSet) {
        obj.insert(QString("maxHandlingTime"), ::OpenAPI::toJsonValue(m_max_handling_time));
    }
    if (m_max_transit_time_isSet) {
        obj.insert(QString("maxTransitTime"), ::OpenAPI::toJsonValue(m_max_transit_time));
    }
    if (m_min_handling_time_isSet) {
        obj.insert(QString("minHandlingTime"), ::OpenAPI::toJsonValue(m_min_handling_time));
    }
    if (m_min_transit_time_isSet) {
        obj.insert(QString("minTransitTime"), ::OpenAPI::toJsonValue(m_min_transit_time));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    return obj;
}

QString OAIProductShipping::getCountry() const {
    return m_country;
}
void OAIProductShipping::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIProductShipping::is_country_Set() const{
    return m_country_isSet;
}

bool OAIProductShipping::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIProductShipping::getLocationGroupName() const {
    return m_location_group_name;
}
void OAIProductShipping::setLocationGroupName(const QString &location_group_name) {
    m_location_group_name = location_group_name;
    m_location_group_name_isSet = true;
}

bool OAIProductShipping::is_location_group_name_Set() const{
    return m_location_group_name_isSet;
}

bool OAIProductShipping::is_location_group_name_Valid() const{
    return m_location_group_name_isValid;
}

QString OAIProductShipping::getLocationId() const {
    return m_location_id;
}
void OAIProductShipping::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIProductShipping::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIProductShipping::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIProductShipping::getMaxHandlingTime() const {
    return m_max_handling_time;
}
void OAIProductShipping::setMaxHandlingTime(const QString &max_handling_time) {
    m_max_handling_time = max_handling_time;
    m_max_handling_time_isSet = true;
}

bool OAIProductShipping::is_max_handling_time_Set() const{
    return m_max_handling_time_isSet;
}

bool OAIProductShipping::is_max_handling_time_Valid() const{
    return m_max_handling_time_isValid;
}

QString OAIProductShipping::getMaxTransitTime() const {
    return m_max_transit_time;
}
void OAIProductShipping::setMaxTransitTime(const QString &max_transit_time) {
    m_max_transit_time = max_transit_time;
    m_max_transit_time_isSet = true;
}

bool OAIProductShipping::is_max_transit_time_Set() const{
    return m_max_transit_time_isSet;
}

bool OAIProductShipping::is_max_transit_time_Valid() const{
    return m_max_transit_time_isValid;
}

QString OAIProductShipping::getMinHandlingTime() const {
    return m_min_handling_time;
}
void OAIProductShipping::setMinHandlingTime(const QString &min_handling_time) {
    m_min_handling_time = min_handling_time;
    m_min_handling_time_isSet = true;
}

bool OAIProductShipping::is_min_handling_time_Set() const{
    return m_min_handling_time_isSet;
}

bool OAIProductShipping::is_min_handling_time_Valid() const{
    return m_min_handling_time_isValid;
}

QString OAIProductShipping::getMinTransitTime() const {
    return m_min_transit_time;
}
void OAIProductShipping::setMinTransitTime(const QString &min_transit_time) {
    m_min_transit_time = min_transit_time;
    m_min_transit_time_isSet = true;
}

bool OAIProductShipping::is_min_transit_time_Set() const{
    return m_min_transit_time_isSet;
}

bool OAIProductShipping::is_min_transit_time_Valid() const{
    return m_min_transit_time_isValid;
}

QString OAIProductShipping::getPostalCode() const {
    return m_postal_code;
}
void OAIProductShipping::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIProductShipping::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIProductShipping::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

OAIPrice OAIProductShipping::getPrice() const {
    return m_price;
}
void OAIProductShipping::setPrice(const OAIPrice &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIProductShipping::is_price_Set() const{
    return m_price_isSet;
}

bool OAIProductShipping::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIProductShipping::getRegion() const {
    return m_region;
}
void OAIProductShipping::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIProductShipping::is_region_Set() const{
    return m_region_isSet;
}

bool OAIProductShipping::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIProductShipping::getService() const {
    return m_service;
}
void OAIProductShipping::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIProductShipping::is_service_Set() const{
    return m_service_isSet;
}

bool OAIProductShipping::is_service_Valid() const{
    return m_service_isValid;
}

bool OAIProductShipping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_handling_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_transit_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_handling_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_transit_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductShipping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
