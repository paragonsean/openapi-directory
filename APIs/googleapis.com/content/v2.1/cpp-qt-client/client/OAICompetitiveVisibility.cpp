/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompetitiveVisibility.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompetitiveVisibility::OAICompetitiveVisibility(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompetitiveVisibility::OAICompetitiveVisibility() {
    this->initializeModel();
}

OAICompetitiveVisibility::~OAICompetitiveVisibility() {}

void OAICompetitiveVisibility::initializeModel() {

    m_ads_organic_ratio_isSet = false;
    m_ads_organic_ratio_isValid = false;

    m_category_benchmark_visibility_trend_isSet = false;
    m_category_benchmark_visibility_trend_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_higher_position_rate_isSet = false;
    m_higher_position_rate_isValid = false;

    m_is_your_domain_isSet = false;
    m_is_your_domain_isValid = false;

    m_page_overlap_rate_isSet = false;
    m_page_overlap_rate_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_relative_visibility_isSet = false;
    m_relative_visibility_isValid = false;

    m_traffic_source_isSet = false;
    m_traffic_source_isValid = false;

    m_your_domain_visibility_trend_isSet = false;
    m_your_domain_visibility_trend_isValid = false;
}

void OAICompetitiveVisibility::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompetitiveVisibility::fromJsonObject(QJsonObject json) {

    m_ads_organic_ratio_isValid = ::OpenAPI::fromJsonValue(m_ads_organic_ratio, json[QString("adsOrganicRatio")]);
    m_ads_organic_ratio_isSet = !json[QString("adsOrganicRatio")].isNull() && m_ads_organic_ratio_isValid;

    m_category_benchmark_visibility_trend_isValid = ::OpenAPI::fromJsonValue(m_category_benchmark_visibility_trend, json[QString("categoryBenchmarkVisibilityTrend")]);
    m_category_benchmark_visibility_trend_isSet = !json[QString("categoryBenchmarkVisibilityTrend")].isNull() && m_category_benchmark_visibility_trend_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_higher_position_rate_isValid = ::OpenAPI::fromJsonValue(m_higher_position_rate, json[QString("higherPositionRate")]);
    m_higher_position_rate_isSet = !json[QString("higherPositionRate")].isNull() && m_higher_position_rate_isValid;

    m_is_your_domain_isValid = ::OpenAPI::fromJsonValue(m_is_your_domain, json[QString("isYourDomain")]);
    m_is_your_domain_isSet = !json[QString("isYourDomain")].isNull() && m_is_your_domain_isValid;

    m_page_overlap_rate_isValid = ::OpenAPI::fromJsonValue(m_page_overlap_rate, json[QString("pageOverlapRate")]);
    m_page_overlap_rate_isSet = !json[QString("pageOverlapRate")].isNull() && m_page_overlap_rate_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;

    m_relative_visibility_isValid = ::OpenAPI::fromJsonValue(m_relative_visibility, json[QString("relativeVisibility")]);
    m_relative_visibility_isSet = !json[QString("relativeVisibility")].isNull() && m_relative_visibility_isValid;

    m_traffic_source_isValid = ::OpenAPI::fromJsonValue(m_traffic_source, json[QString("trafficSource")]);
    m_traffic_source_isSet = !json[QString("trafficSource")].isNull() && m_traffic_source_isValid;

    m_your_domain_visibility_trend_isValid = ::OpenAPI::fromJsonValue(m_your_domain_visibility_trend, json[QString("yourDomainVisibilityTrend")]);
    m_your_domain_visibility_trend_isSet = !json[QString("yourDomainVisibilityTrend")].isNull() && m_your_domain_visibility_trend_isValid;
}

QString OAICompetitiveVisibility::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompetitiveVisibility::asJsonObject() const {
    QJsonObject obj;
    if (m_ads_organic_ratio_isSet) {
        obj.insert(QString("adsOrganicRatio"), ::OpenAPI::toJsonValue(m_ads_organic_ratio));
    }
    if (m_category_benchmark_visibility_trend_isSet) {
        obj.insert(QString("categoryBenchmarkVisibilityTrend"), ::OpenAPI::toJsonValue(m_category_benchmark_visibility_trend));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_higher_position_rate_isSet) {
        obj.insert(QString("higherPositionRate"), ::OpenAPI::toJsonValue(m_higher_position_rate));
    }
    if (m_is_your_domain_isSet) {
        obj.insert(QString("isYourDomain"), ::OpenAPI::toJsonValue(m_is_your_domain));
    }
    if (m_page_overlap_rate_isSet) {
        obj.insert(QString("pageOverlapRate"), ::OpenAPI::toJsonValue(m_page_overlap_rate));
    }
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_relative_visibility_isSet) {
        obj.insert(QString("relativeVisibility"), ::OpenAPI::toJsonValue(m_relative_visibility));
    }
    if (m_traffic_source_isSet) {
        obj.insert(QString("trafficSource"), ::OpenAPI::toJsonValue(m_traffic_source));
    }
    if (m_your_domain_visibility_trend_isSet) {
        obj.insert(QString("yourDomainVisibilityTrend"), ::OpenAPI::toJsonValue(m_your_domain_visibility_trend));
    }
    return obj;
}

double OAICompetitiveVisibility::getAdsOrganicRatio() const {
    return m_ads_organic_ratio;
}
void OAICompetitiveVisibility::setAdsOrganicRatio(const double &ads_organic_ratio) {
    m_ads_organic_ratio = ads_organic_ratio;
    m_ads_organic_ratio_isSet = true;
}

bool OAICompetitiveVisibility::is_ads_organic_ratio_Set() const{
    return m_ads_organic_ratio_isSet;
}

bool OAICompetitiveVisibility::is_ads_organic_ratio_Valid() const{
    return m_ads_organic_ratio_isValid;
}

double OAICompetitiveVisibility::getCategoryBenchmarkVisibilityTrend() const {
    return m_category_benchmark_visibility_trend;
}
void OAICompetitiveVisibility::setCategoryBenchmarkVisibilityTrend(const double &category_benchmark_visibility_trend) {
    m_category_benchmark_visibility_trend = category_benchmark_visibility_trend;
    m_category_benchmark_visibility_trend_isSet = true;
}

bool OAICompetitiveVisibility::is_category_benchmark_visibility_trend_Set() const{
    return m_category_benchmark_visibility_trend_isSet;
}

bool OAICompetitiveVisibility::is_category_benchmark_visibility_trend_Valid() const{
    return m_category_benchmark_visibility_trend_isValid;
}

QString OAICompetitiveVisibility::getCategoryId() const {
    return m_category_id;
}
void OAICompetitiveVisibility::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAICompetitiveVisibility::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAICompetitiveVisibility::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAICompetitiveVisibility::getCountryCode() const {
    return m_country_code;
}
void OAICompetitiveVisibility::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAICompetitiveVisibility::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAICompetitiveVisibility::is_country_code_Valid() const{
    return m_country_code_isValid;
}

OAIDate OAICompetitiveVisibility::getDate() const {
    return m_date;
}
void OAICompetitiveVisibility::setDate(const OAIDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAICompetitiveVisibility::is_date_Set() const{
    return m_date_isSet;
}

bool OAICompetitiveVisibility::is_date_Valid() const{
    return m_date_isValid;
}

QString OAICompetitiveVisibility::getDomain() const {
    return m_domain;
}
void OAICompetitiveVisibility::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAICompetitiveVisibility::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAICompetitiveVisibility::is_domain_Valid() const{
    return m_domain_isValid;
}

double OAICompetitiveVisibility::getHigherPositionRate() const {
    return m_higher_position_rate;
}
void OAICompetitiveVisibility::setHigherPositionRate(const double &higher_position_rate) {
    m_higher_position_rate = higher_position_rate;
    m_higher_position_rate_isSet = true;
}

bool OAICompetitiveVisibility::is_higher_position_rate_Set() const{
    return m_higher_position_rate_isSet;
}

bool OAICompetitiveVisibility::is_higher_position_rate_Valid() const{
    return m_higher_position_rate_isValid;
}

bool OAICompetitiveVisibility::isIsYourDomain() const {
    return m_is_your_domain;
}
void OAICompetitiveVisibility::setIsYourDomain(const bool &is_your_domain) {
    m_is_your_domain = is_your_domain;
    m_is_your_domain_isSet = true;
}

bool OAICompetitiveVisibility::is_is_your_domain_Set() const{
    return m_is_your_domain_isSet;
}

bool OAICompetitiveVisibility::is_is_your_domain_Valid() const{
    return m_is_your_domain_isValid;
}

double OAICompetitiveVisibility::getPageOverlapRate() const {
    return m_page_overlap_rate;
}
void OAICompetitiveVisibility::setPageOverlapRate(const double &page_overlap_rate) {
    m_page_overlap_rate = page_overlap_rate;
    m_page_overlap_rate_isSet = true;
}

bool OAICompetitiveVisibility::is_page_overlap_rate_Set() const{
    return m_page_overlap_rate_isSet;
}

bool OAICompetitiveVisibility::is_page_overlap_rate_Valid() const{
    return m_page_overlap_rate_isValid;
}

QString OAICompetitiveVisibility::getRank() const {
    return m_rank;
}
void OAICompetitiveVisibility::setRank(const QString &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAICompetitiveVisibility::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAICompetitiveVisibility::is_rank_Valid() const{
    return m_rank_isValid;
}

double OAICompetitiveVisibility::getRelativeVisibility() const {
    return m_relative_visibility;
}
void OAICompetitiveVisibility::setRelativeVisibility(const double &relative_visibility) {
    m_relative_visibility = relative_visibility;
    m_relative_visibility_isSet = true;
}

bool OAICompetitiveVisibility::is_relative_visibility_Set() const{
    return m_relative_visibility_isSet;
}

bool OAICompetitiveVisibility::is_relative_visibility_Valid() const{
    return m_relative_visibility_isValid;
}

QString OAICompetitiveVisibility::getTrafficSource() const {
    return m_traffic_source;
}
void OAICompetitiveVisibility::setTrafficSource(const QString &traffic_source) {
    m_traffic_source = traffic_source;
    m_traffic_source_isSet = true;
}

bool OAICompetitiveVisibility::is_traffic_source_Set() const{
    return m_traffic_source_isSet;
}

bool OAICompetitiveVisibility::is_traffic_source_Valid() const{
    return m_traffic_source_isValid;
}

double OAICompetitiveVisibility::getYourDomainVisibilityTrend() const {
    return m_your_domain_visibility_trend;
}
void OAICompetitiveVisibility::setYourDomainVisibilityTrend(const double &your_domain_visibility_trend) {
    m_your_domain_visibility_trend = your_domain_visibility_trend;
    m_your_domain_visibility_trend_isSet = true;
}

bool OAICompetitiveVisibility::is_your_domain_visibility_trend_Set() const{
    return m_your_domain_visibility_trend_isSet;
}

bool OAICompetitiveVisibility::is_your_domain_visibility_trend_Valid() const{
    return m_your_domain_visibility_trend_isValid;
}

bool OAICompetitiveVisibility::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ads_organic_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_benchmark_visibility_trend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_higher_position_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_your_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_overlap_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_your_domain_visibility_trend_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompetitiveVisibility::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
