/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrdersRefundItemRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrdersRefundItemRequest::OAIOrdersRefundItemRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrdersRefundItemRequest::OAIOrdersRefundItemRequest() {
    this->initializeModel();
}

OAIOrdersRefundItemRequest::~OAIOrdersRefundItemRequest() {}

void OAIOrdersRefundItemRequest::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_reason_text_isSet = false;
    m_reason_text_isValid = false;

    m_shipping_isSet = false;
    m_shipping_isValid = false;
}

void OAIOrdersRefundItemRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrdersRefundItemRequest::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_reason_text_isValid = ::OpenAPI::fromJsonValue(m_reason_text, json[QString("reasonText")]);
    m_reason_text_isSet = !json[QString("reasonText")].isNull() && m_reason_text_isValid;

    m_shipping_isValid = ::OpenAPI::fromJsonValue(m_shipping, json[QString("shipping")]);
    m_shipping_isSet = !json[QString("shipping")].isNull() && m_shipping_isValid;
}

QString OAIOrdersRefundItemRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrdersRefundItemRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_reason_text_isSet) {
        obj.insert(QString("reasonText"), ::OpenAPI::toJsonValue(m_reason_text));
    }
    if (m_shipping.isSet()) {
        obj.insert(QString("shipping"), ::OpenAPI::toJsonValue(m_shipping));
    }
    return obj;
}

QList<OAIOrdersCustomBatchRequestEntryRefundItemItem> OAIOrdersRefundItemRequest::getItems() const {
    return m_items;
}
void OAIOrdersRefundItemRequest::setItems(const QList<OAIOrdersCustomBatchRequestEntryRefundItemItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIOrdersRefundItemRequest::is_items_Set() const{
    return m_items_isSet;
}

bool OAIOrdersRefundItemRequest::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIOrdersRefundItemRequest::getOperationId() const {
    return m_operation_id;
}
void OAIOrdersRefundItemRequest::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIOrdersRefundItemRequest::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIOrdersRefundItemRequest::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

QString OAIOrdersRefundItemRequest::getReason() const {
    return m_reason;
}
void OAIOrdersRefundItemRequest::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIOrdersRefundItemRequest::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIOrdersRefundItemRequest::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIOrdersRefundItemRequest::getReasonText() const {
    return m_reason_text;
}
void OAIOrdersRefundItemRequest::setReasonText(const QString &reason_text) {
    m_reason_text = reason_text;
    m_reason_text_isSet = true;
}

bool OAIOrdersRefundItemRequest::is_reason_text_Set() const{
    return m_reason_text_isSet;
}

bool OAIOrdersRefundItemRequest::is_reason_text_Valid() const{
    return m_reason_text_isValid;
}

OAIOrdersCustomBatchRequestEntryRefundItemShipping OAIOrdersRefundItemRequest::getShipping() const {
    return m_shipping;
}
void OAIOrdersRefundItemRequest::setShipping(const OAIOrdersCustomBatchRequestEntryRefundItemShipping &shipping) {
    m_shipping = shipping;
    m_shipping_isSet = true;
}

bool OAIOrdersRefundItemRequest::is_shipping_Set() const{
    return m_shipping_isSet;
}

bool OAIOrdersRefundItemRequest::is_shipping_Valid() const{
    return m_shipping_isValid;
}

bool OAIOrdersRefundItemRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrdersRefundItemRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
