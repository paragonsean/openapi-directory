/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISettlementTransactionIdentifiers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISettlementTransactionIdentifiers::OAISettlementTransactionIdentifiers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISettlementTransactionIdentifiers::OAISettlementTransactionIdentifiers() {
    this->initializeModel();
}

OAISettlementTransactionIdentifiers::~OAISettlementTransactionIdentifiers() {}

void OAISettlementTransactionIdentifiers::initializeModel() {

    m_adjustment_id_isSet = false;
    m_adjustment_id_isValid = false;

    m_merchant_order_id_isSet = false;
    m_merchant_order_id_isValid = false;

    m_order_item_id_isSet = false;
    m_order_item_id_isValid = false;

    m_settlement_entry_id_isSet = false;
    m_settlement_entry_id_isValid = false;

    m_shipment_ids_isSet = false;
    m_shipment_ids_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAISettlementTransactionIdentifiers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISettlementTransactionIdentifiers::fromJsonObject(QJsonObject json) {

    m_adjustment_id_isValid = ::OpenAPI::fromJsonValue(m_adjustment_id, json[QString("adjustmentId")]);
    m_adjustment_id_isSet = !json[QString("adjustmentId")].isNull() && m_adjustment_id_isValid;

    m_merchant_order_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_order_id, json[QString("merchantOrderId")]);
    m_merchant_order_id_isSet = !json[QString("merchantOrderId")].isNull() && m_merchant_order_id_isValid;

    m_order_item_id_isValid = ::OpenAPI::fromJsonValue(m_order_item_id, json[QString("orderItemId")]);
    m_order_item_id_isSet = !json[QString("orderItemId")].isNull() && m_order_item_id_isValid;

    m_settlement_entry_id_isValid = ::OpenAPI::fromJsonValue(m_settlement_entry_id, json[QString("settlementEntryId")]);
    m_settlement_entry_id_isSet = !json[QString("settlementEntryId")].isNull() && m_settlement_entry_id_isValid;

    m_shipment_ids_isValid = ::OpenAPI::fromJsonValue(m_shipment_ids, json[QString("shipmentIds")]);
    m_shipment_ids_isSet = !json[QString("shipmentIds")].isNull() && m_shipment_ids_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transactionId")]);
    m_transaction_id_isSet = !json[QString("transactionId")].isNull() && m_transaction_id_isValid;
}

QString OAISettlementTransactionIdentifiers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISettlementTransactionIdentifiers::asJsonObject() const {
    QJsonObject obj;
    if (m_adjustment_id_isSet) {
        obj.insert(QString("adjustmentId"), ::OpenAPI::toJsonValue(m_adjustment_id));
    }
    if (m_merchant_order_id_isSet) {
        obj.insert(QString("merchantOrderId"), ::OpenAPI::toJsonValue(m_merchant_order_id));
    }
    if (m_order_item_id_isSet) {
        obj.insert(QString("orderItemId"), ::OpenAPI::toJsonValue(m_order_item_id));
    }
    if (m_settlement_entry_id_isSet) {
        obj.insert(QString("settlementEntryId"), ::OpenAPI::toJsonValue(m_settlement_entry_id));
    }
    if (m_shipment_ids.size() > 0) {
        obj.insert(QString("shipmentIds"), ::OpenAPI::toJsonValue(m_shipment_ids));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

QString OAISettlementTransactionIdentifiers::getAdjustmentId() const {
    return m_adjustment_id;
}
void OAISettlementTransactionIdentifiers::setAdjustmentId(const QString &adjustment_id) {
    m_adjustment_id = adjustment_id;
    m_adjustment_id_isSet = true;
}

bool OAISettlementTransactionIdentifiers::is_adjustment_id_Set() const{
    return m_adjustment_id_isSet;
}

bool OAISettlementTransactionIdentifiers::is_adjustment_id_Valid() const{
    return m_adjustment_id_isValid;
}

QString OAISettlementTransactionIdentifiers::getMerchantOrderId() const {
    return m_merchant_order_id;
}
void OAISettlementTransactionIdentifiers::setMerchantOrderId(const QString &merchant_order_id) {
    m_merchant_order_id = merchant_order_id;
    m_merchant_order_id_isSet = true;
}

bool OAISettlementTransactionIdentifiers::is_merchant_order_id_Set() const{
    return m_merchant_order_id_isSet;
}

bool OAISettlementTransactionIdentifiers::is_merchant_order_id_Valid() const{
    return m_merchant_order_id_isValid;
}

QString OAISettlementTransactionIdentifiers::getOrderItemId() const {
    return m_order_item_id;
}
void OAISettlementTransactionIdentifiers::setOrderItemId(const QString &order_item_id) {
    m_order_item_id = order_item_id;
    m_order_item_id_isSet = true;
}

bool OAISettlementTransactionIdentifiers::is_order_item_id_Set() const{
    return m_order_item_id_isSet;
}

bool OAISettlementTransactionIdentifiers::is_order_item_id_Valid() const{
    return m_order_item_id_isValid;
}

QString OAISettlementTransactionIdentifiers::getSettlementEntryId() const {
    return m_settlement_entry_id;
}
void OAISettlementTransactionIdentifiers::setSettlementEntryId(const QString &settlement_entry_id) {
    m_settlement_entry_id = settlement_entry_id;
    m_settlement_entry_id_isSet = true;
}

bool OAISettlementTransactionIdentifiers::is_settlement_entry_id_Set() const{
    return m_settlement_entry_id_isSet;
}

bool OAISettlementTransactionIdentifiers::is_settlement_entry_id_Valid() const{
    return m_settlement_entry_id_isValid;
}

QList<QString> OAISettlementTransactionIdentifiers::getShipmentIds() const {
    return m_shipment_ids;
}
void OAISettlementTransactionIdentifiers::setShipmentIds(const QList<QString> &shipment_ids) {
    m_shipment_ids = shipment_ids;
    m_shipment_ids_isSet = true;
}

bool OAISettlementTransactionIdentifiers::is_shipment_ids_Set() const{
    return m_shipment_ids_isSet;
}

bool OAISettlementTransactionIdentifiers::is_shipment_ids_Valid() const{
    return m_shipment_ids_isValid;
}

QString OAISettlementTransactionIdentifiers::getTransactionId() const {
    return m_transaction_id;
}
void OAISettlementTransactionIdentifiers::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAISettlementTransactionIdentifiers::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAISettlementTransactionIdentifiers::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAISettlementTransactionIdentifiers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjustment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settlement_entry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISettlementTransactionIdentifiers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
