/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductView::OAIProductView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductView::OAIProductView() {
    this->initializeModel();
}

OAIProductView::~OAIProductView() {}

void OAIProductView::initializeModel() {

    m_aggregated_destination_status_isSet = false;
    m_aggregated_destination_status_isValid = false;

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_category_l1_isSet = false;
    m_category_l1_isValid = false;

    m_category_l2_isSet = false;
    m_category_l2_isValid = false;

    m_category_l3_isSet = false;
    m_category_l3_isValid = false;

    m_category_l4_isSet = false;
    m_category_l4_isValid = false;

    m_category_l5_isSet = false;
    m_category_l5_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_gtin_isSet = false;
    m_gtin_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_item_group_id_isSet = false;
    m_item_group_id_isValid = false;

    m_item_issues_isSet = false;
    m_item_issues_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_price_micros_isSet = false;
    m_price_micros_isValid = false;

    m_product_type_l1_isSet = false;
    m_product_type_l1_isValid = false;

    m_product_type_l2_isSet = false;
    m_product_type_l2_isValid = false;

    m_product_type_l3_isSet = false;
    m_product_type_l3_isValid = false;

    m_product_type_l4_isSet = false;
    m_product_type_l4_isValid = false;

    m_product_type_l5_isSet = false;
    m_product_type_l5_isValid = false;

    m_shipping_label_isSet = false;
    m_shipping_label_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIProductView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductView::fromJsonObject(QJsonObject json) {

    m_aggregated_destination_status_isValid = ::OpenAPI::fromJsonValue(m_aggregated_destination_status, json[QString("aggregatedDestinationStatus")]);
    m_aggregated_destination_status_isSet = !json[QString("aggregatedDestinationStatus")].isNull() && m_aggregated_destination_status_isValid;

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_category_l1_isValid = ::OpenAPI::fromJsonValue(m_category_l1, json[QString("categoryL1")]);
    m_category_l1_isSet = !json[QString("categoryL1")].isNull() && m_category_l1_isValid;

    m_category_l2_isValid = ::OpenAPI::fromJsonValue(m_category_l2, json[QString("categoryL2")]);
    m_category_l2_isSet = !json[QString("categoryL2")].isNull() && m_category_l2_isValid;

    m_category_l3_isValid = ::OpenAPI::fromJsonValue(m_category_l3, json[QString("categoryL3")]);
    m_category_l3_isSet = !json[QString("categoryL3")].isNull() && m_category_l3_isValid;

    m_category_l4_isValid = ::OpenAPI::fromJsonValue(m_category_l4, json[QString("categoryL4")]);
    m_category_l4_isSet = !json[QString("categoryL4")].isNull() && m_category_l4_isValid;

    m_category_l5_isValid = ::OpenAPI::fromJsonValue(m_category_l5, json[QString("categoryL5")]);
    m_category_l5_isSet = !json[QString("categoryL5")].isNull() && m_category_l5_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_gtin_isValid = ::OpenAPI::fromJsonValue(m_gtin, json[QString("gtin")]);
    m_gtin_isSet = !json[QString("gtin")].isNull() && m_gtin_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_item_group_id_isValid = ::OpenAPI::fromJsonValue(m_item_group_id, json[QString("itemGroupId")]);
    m_item_group_id_isSet = !json[QString("itemGroupId")].isNull() && m_item_group_id_isValid;

    m_item_issues_isValid = ::OpenAPI::fromJsonValue(m_item_issues, json[QString("itemIssues")]);
    m_item_issues_isSet = !json[QString("itemIssues")].isNull() && m_item_issues_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_price_micros_isValid = ::OpenAPI::fromJsonValue(m_price_micros, json[QString("priceMicros")]);
    m_price_micros_isSet = !json[QString("priceMicros")].isNull() && m_price_micros_isValid;

    m_product_type_l1_isValid = ::OpenAPI::fromJsonValue(m_product_type_l1, json[QString("productTypeL1")]);
    m_product_type_l1_isSet = !json[QString("productTypeL1")].isNull() && m_product_type_l1_isValid;

    m_product_type_l2_isValid = ::OpenAPI::fromJsonValue(m_product_type_l2, json[QString("productTypeL2")]);
    m_product_type_l2_isSet = !json[QString("productTypeL2")].isNull() && m_product_type_l2_isValid;

    m_product_type_l3_isValid = ::OpenAPI::fromJsonValue(m_product_type_l3, json[QString("productTypeL3")]);
    m_product_type_l3_isSet = !json[QString("productTypeL3")].isNull() && m_product_type_l3_isValid;

    m_product_type_l4_isValid = ::OpenAPI::fromJsonValue(m_product_type_l4, json[QString("productTypeL4")]);
    m_product_type_l4_isSet = !json[QString("productTypeL4")].isNull() && m_product_type_l4_isValid;

    m_product_type_l5_isValid = ::OpenAPI::fromJsonValue(m_product_type_l5, json[QString("productTypeL5")]);
    m_product_type_l5_isSet = !json[QString("productTypeL5")].isNull() && m_product_type_l5_isValid;

    m_shipping_label_isValid = ::OpenAPI::fromJsonValue(m_shipping_label, json[QString("shippingLabel")]);
    m_shipping_label_isSet = !json[QString("shippingLabel")].isNull() && m_shipping_label_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIProductView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductView::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregated_destination_status_isSet) {
        obj.insert(QString("aggregatedDestinationStatus"), ::OpenAPI::toJsonValue(m_aggregated_destination_status));
    }
    if (m_availability_isSet) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_category_l1_isSet) {
        obj.insert(QString("categoryL1"), ::OpenAPI::toJsonValue(m_category_l1));
    }
    if (m_category_l2_isSet) {
        obj.insert(QString("categoryL2"), ::OpenAPI::toJsonValue(m_category_l2));
    }
    if (m_category_l3_isSet) {
        obj.insert(QString("categoryL3"), ::OpenAPI::toJsonValue(m_category_l3));
    }
    if (m_category_l4_isSet) {
        obj.insert(QString("categoryL4"), ::OpenAPI::toJsonValue(m_category_l4));
    }
    if (m_category_l5_isSet) {
        obj.insert(QString("categoryL5"), ::OpenAPI::toJsonValue(m_category_l5));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_condition_isSet) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_expiration_date.isSet()) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_gtin.size() > 0) {
        obj.insert(QString("gtin"), ::OpenAPI::toJsonValue(m_gtin));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_item_group_id_isSet) {
        obj.insert(QString("itemGroupId"), ::OpenAPI::toJsonValue(m_item_group_id));
    }
    if (m_item_issues.size() > 0) {
        obj.insert(QString("itemIssues"), ::OpenAPI::toJsonValue(m_item_issues));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_price_micros_isSet) {
        obj.insert(QString("priceMicros"), ::OpenAPI::toJsonValue(m_price_micros));
    }
    if (m_product_type_l1_isSet) {
        obj.insert(QString("productTypeL1"), ::OpenAPI::toJsonValue(m_product_type_l1));
    }
    if (m_product_type_l2_isSet) {
        obj.insert(QString("productTypeL2"), ::OpenAPI::toJsonValue(m_product_type_l2));
    }
    if (m_product_type_l3_isSet) {
        obj.insert(QString("productTypeL3"), ::OpenAPI::toJsonValue(m_product_type_l3));
    }
    if (m_product_type_l4_isSet) {
        obj.insert(QString("productTypeL4"), ::OpenAPI::toJsonValue(m_product_type_l4));
    }
    if (m_product_type_l5_isSet) {
        obj.insert(QString("productTypeL5"), ::OpenAPI::toJsonValue(m_product_type_l5));
    }
    if (m_shipping_label_isSet) {
        obj.insert(QString("shippingLabel"), ::OpenAPI::toJsonValue(m_shipping_label));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIProductView::getAggregatedDestinationStatus() const {
    return m_aggregated_destination_status;
}
void OAIProductView::setAggregatedDestinationStatus(const QString &aggregated_destination_status) {
    m_aggregated_destination_status = aggregated_destination_status;
    m_aggregated_destination_status_isSet = true;
}

bool OAIProductView::is_aggregated_destination_status_Set() const{
    return m_aggregated_destination_status_isSet;
}

bool OAIProductView::is_aggregated_destination_status_Valid() const{
    return m_aggregated_destination_status_isValid;
}

QString OAIProductView::getAvailability() const {
    return m_availability;
}
void OAIProductView::setAvailability(const QString &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIProductView::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIProductView::is_availability_Valid() const{
    return m_availability_isValid;
}

QString OAIProductView::getBrand() const {
    return m_brand;
}
void OAIProductView::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIProductView::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIProductView::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAIProductView::getCategoryL1() const {
    return m_category_l1;
}
void OAIProductView::setCategoryL1(const QString &category_l1) {
    m_category_l1 = category_l1;
    m_category_l1_isSet = true;
}

bool OAIProductView::is_category_l1_Set() const{
    return m_category_l1_isSet;
}

bool OAIProductView::is_category_l1_Valid() const{
    return m_category_l1_isValid;
}

QString OAIProductView::getCategoryL2() const {
    return m_category_l2;
}
void OAIProductView::setCategoryL2(const QString &category_l2) {
    m_category_l2 = category_l2;
    m_category_l2_isSet = true;
}

bool OAIProductView::is_category_l2_Set() const{
    return m_category_l2_isSet;
}

bool OAIProductView::is_category_l2_Valid() const{
    return m_category_l2_isValid;
}

QString OAIProductView::getCategoryL3() const {
    return m_category_l3;
}
void OAIProductView::setCategoryL3(const QString &category_l3) {
    m_category_l3 = category_l3;
    m_category_l3_isSet = true;
}

bool OAIProductView::is_category_l3_Set() const{
    return m_category_l3_isSet;
}

bool OAIProductView::is_category_l3_Valid() const{
    return m_category_l3_isValid;
}

QString OAIProductView::getCategoryL4() const {
    return m_category_l4;
}
void OAIProductView::setCategoryL4(const QString &category_l4) {
    m_category_l4 = category_l4;
    m_category_l4_isSet = true;
}

bool OAIProductView::is_category_l4_Set() const{
    return m_category_l4_isSet;
}

bool OAIProductView::is_category_l4_Valid() const{
    return m_category_l4_isValid;
}

QString OAIProductView::getCategoryL5() const {
    return m_category_l5;
}
void OAIProductView::setCategoryL5(const QString &category_l5) {
    m_category_l5 = category_l5;
    m_category_l5_isSet = true;
}

bool OAIProductView::is_category_l5_Set() const{
    return m_category_l5_isSet;
}

bool OAIProductView::is_category_l5_Valid() const{
    return m_category_l5_isValid;
}

QString OAIProductView::getChannel() const {
    return m_channel;
}
void OAIProductView::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIProductView::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIProductView::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIProductView::getCondition() const {
    return m_condition;
}
void OAIProductView::setCondition(const QString &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIProductView::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIProductView::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIProductView::getCreationTime() const {
    return m_creation_time;
}
void OAIProductView::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIProductView::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIProductView::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIProductView::getCurrencyCode() const {
    return m_currency_code;
}
void OAIProductView::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIProductView::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIProductView::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

OAIDate OAIProductView::getExpirationDate() const {
    return m_expiration_date;
}
void OAIProductView::setExpirationDate(const OAIDate &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIProductView::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIProductView::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QList<QString> OAIProductView::getGtin() const {
    return m_gtin;
}
void OAIProductView::setGtin(const QList<QString> &gtin) {
    m_gtin = gtin;
    m_gtin_isSet = true;
}

bool OAIProductView::is_gtin_Set() const{
    return m_gtin_isSet;
}

bool OAIProductView::is_gtin_Valid() const{
    return m_gtin_isValid;
}

QString OAIProductView::getId() const {
    return m_id;
}
void OAIProductView::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProductView::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProductView::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProductView::getItemGroupId() const {
    return m_item_group_id;
}
void OAIProductView::setItemGroupId(const QString &item_group_id) {
    m_item_group_id = item_group_id;
    m_item_group_id_isSet = true;
}

bool OAIProductView::is_item_group_id_Set() const{
    return m_item_group_id_isSet;
}

bool OAIProductView::is_item_group_id_Valid() const{
    return m_item_group_id_isValid;
}

QList<OAIProductViewItemIssue> OAIProductView::getItemIssues() const {
    return m_item_issues;
}
void OAIProductView::setItemIssues(const QList<OAIProductViewItemIssue> &item_issues) {
    m_item_issues = item_issues;
    m_item_issues_isSet = true;
}

bool OAIProductView::is_item_issues_Set() const{
    return m_item_issues_isSet;
}

bool OAIProductView::is_item_issues_Valid() const{
    return m_item_issues_isValid;
}

QString OAIProductView::getLanguageCode() const {
    return m_language_code;
}
void OAIProductView::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIProductView::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIProductView::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIProductView::getOfferId() const {
    return m_offer_id;
}
void OAIProductView::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAIProductView::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIProductView::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QString OAIProductView::getPriceMicros() const {
    return m_price_micros;
}
void OAIProductView::setPriceMicros(const QString &price_micros) {
    m_price_micros = price_micros;
    m_price_micros_isSet = true;
}

bool OAIProductView::is_price_micros_Set() const{
    return m_price_micros_isSet;
}

bool OAIProductView::is_price_micros_Valid() const{
    return m_price_micros_isValid;
}

QString OAIProductView::getProductTypeL1() const {
    return m_product_type_l1;
}
void OAIProductView::setProductTypeL1(const QString &product_type_l1) {
    m_product_type_l1 = product_type_l1;
    m_product_type_l1_isSet = true;
}

bool OAIProductView::is_product_type_l1_Set() const{
    return m_product_type_l1_isSet;
}

bool OAIProductView::is_product_type_l1_Valid() const{
    return m_product_type_l1_isValid;
}

QString OAIProductView::getProductTypeL2() const {
    return m_product_type_l2;
}
void OAIProductView::setProductTypeL2(const QString &product_type_l2) {
    m_product_type_l2 = product_type_l2;
    m_product_type_l2_isSet = true;
}

bool OAIProductView::is_product_type_l2_Set() const{
    return m_product_type_l2_isSet;
}

bool OAIProductView::is_product_type_l2_Valid() const{
    return m_product_type_l2_isValid;
}

QString OAIProductView::getProductTypeL3() const {
    return m_product_type_l3;
}
void OAIProductView::setProductTypeL3(const QString &product_type_l3) {
    m_product_type_l3 = product_type_l3;
    m_product_type_l3_isSet = true;
}

bool OAIProductView::is_product_type_l3_Set() const{
    return m_product_type_l3_isSet;
}

bool OAIProductView::is_product_type_l3_Valid() const{
    return m_product_type_l3_isValid;
}

QString OAIProductView::getProductTypeL4() const {
    return m_product_type_l4;
}
void OAIProductView::setProductTypeL4(const QString &product_type_l4) {
    m_product_type_l4 = product_type_l4;
    m_product_type_l4_isSet = true;
}

bool OAIProductView::is_product_type_l4_Set() const{
    return m_product_type_l4_isSet;
}

bool OAIProductView::is_product_type_l4_Valid() const{
    return m_product_type_l4_isValid;
}

QString OAIProductView::getProductTypeL5() const {
    return m_product_type_l5;
}
void OAIProductView::setProductTypeL5(const QString &product_type_l5) {
    m_product_type_l5 = product_type_l5;
    m_product_type_l5_isSet = true;
}

bool OAIProductView::is_product_type_l5_Set() const{
    return m_product_type_l5_isSet;
}

bool OAIProductView::is_product_type_l5_Valid() const{
    return m_product_type_l5_isValid;
}

QString OAIProductView::getShippingLabel() const {
    return m_shipping_label;
}
void OAIProductView::setShippingLabel(const QString &shipping_label) {
    m_shipping_label = shipping_label;
    m_shipping_label_isSet = true;
}

bool OAIProductView::is_shipping_label_Set() const{
    return m_shipping_label_isSet;
}

bool OAIProductView::is_shipping_label_Valid() const{
    return m_shipping_label_isValid;
}

QString OAIProductView::getTitle() const {
    return m_title;
}
void OAIProductView::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIProductView::is_title_Set() const{
    return m_title_isSet;
}

bool OAIProductView::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIProductView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregated_destination_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_l1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_l2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_l3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_l4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_l5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gtin.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_micros_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_l1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_l2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_l3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_l4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_l5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
