/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountStatusProducts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountStatusProducts::OAIAccountStatusProducts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountStatusProducts::OAIAccountStatusProducts() {
    this->initializeModel();
}

OAIAccountStatusProducts::~OAIAccountStatusProducts() {}

void OAIAccountStatusProducts::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_item_level_issues_isSet = false;
    m_item_level_issues_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;
}

void OAIAccountStatusProducts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountStatusProducts::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_item_level_issues_isValid = ::OpenAPI::fromJsonValue(m_item_level_issues, json[QString("itemLevelIssues")]);
    m_item_level_issues_isSet = !json[QString("itemLevelIssues")].isNull() && m_item_level_issues_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;
}

QString OAIAccountStatusProducts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountStatusProducts::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_item_level_issues.size() > 0) {
        obj.insert(QString("itemLevelIssues"), ::OpenAPI::toJsonValue(m_item_level_issues));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    return obj;
}

QString OAIAccountStatusProducts::getChannel() const {
    return m_channel;
}
void OAIAccountStatusProducts::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIAccountStatusProducts::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIAccountStatusProducts::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIAccountStatusProducts::getCountry() const {
    return m_country;
}
void OAIAccountStatusProducts::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAccountStatusProducts::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAccountStatusProducts::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAccountStatusProducts::getDestination() const {
    return m_destination;
}
void OAIAccountStatusProducts::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIAccountStatusProducts::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIAccountStatusProducts::is_destination_Valid() const{
    return m_destination_isValid;
}

QList<OAIAccountStatusItemLevelIssue> OAIAccountStatusProducts::getItemLevelIssues() const {
    return m_item_level_issues;
}
void OAIAccountStatusProducts::setItemLevelIssues(const QList<OAIAccountStatusItemLevelIssue> &item_level_issues) {
    m_item_level_issues = item_level_issues;
    m_item_level_issues_isSet = true;
}

bool OAIAccountStatusProducts::is_item_level_issues_Set() const{
    return m_item_level_issues_isSet;
}

bool OAIAccountStatusProducts::is_item_level_issues_Valid() const{
    return m_item_level_issues_isValid;
}

OAIAccountStatusStatistics OAIAccountStatusProducts::getStatistics() const {
    return m_statistics;
}
void OAIAccountStatusProducts::setStatistics(const OAIAccountStatusStatistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIAccountStatusProducts::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIAccountStatusProducts::is_statistics_Valid() const{
    return m_statistics_isValid;
}

bool OAIAccountStatusProducts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_level_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountStatusProducts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
