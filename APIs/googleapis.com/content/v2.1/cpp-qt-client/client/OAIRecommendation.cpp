/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendation::OAIRecommendation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendation::OAIRecommendation() {
    this->initializeModel();
}

OAIRecommendation::~OAIRecommendation() {}

void OAIRecommendation::initializeModel() {

    m_additional_call_to_action_isSet = false;
    m_additional_call_to_action_isValid = false;

    m_additional_descriptions_isSet = false;
    m_additional_descriptions_isValid = false;

    m_creative_isSet = false;
    m_creative_isValid = false;

    m_default_call_to_action_isSet = false;
    m_default_call_to_action_isValid = false;

    m_default_description_isSet = false;
    m_default_description_isValid = false;

    m_numerical_impact_isSet = false;
    m_numerical_impact_isValid = false;

    m_paid_isSet = false;
    m_paid_isValid = false;

    m_recommendation_name_isSet = false;
    m_recommendation_name_isValid = false;

    m_sub_type_isSet = false;
    m_sub_type_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRecommendation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendation::fromJsonObject(QJsonObject json) {

    m_additional_call_to_action_isValid = ::OpenAPI::fromJsonValue(m_additional_call_to_action, json[QString("additionalCallToAction")]);
    m_additional_call_to_action_isSet = !json[QString("additionalCallToAction")].isNull() && m_additional_call_to_action_isValid;

    m_additional_descriptions_isValid = ::OpenAPI::fromJsonValue(m_additional_descriptions, json[QString("additionalDescriptions")]);
    m_additional_descriptions_isSet = !json[QString("additionalDescriptions")].isNull() && m_additional_descriptions_isValid;

    m_creative_isValid = ::OpenAPI::fromJsonValue(m_creative, json[QString("creative")]);
    m_creative_isSet = !json[QString("creative")].isNull() && m_creative_isValid;

    m_default_call_to_action_isValid = ::OpenAPI::fromJsonValue(m_default_call_to_action, json[QString("defaultCallToAction")]);
    m_default_call_to_action_isSet = !json[QString("defaultCallToAction")].isNull() && m_default_call_to_action_isValid;

    m_default_description_isValid = ::OpenAPI::fromJsonValue(m_default_description, json[QString("defaultDescription")]);
    m_default_description_isSet = !json[QString("defaultDescription")].isNull() && m_default_description_isValid;

    m_numerical_impact_isValid = ::OpenAPI::fromJsonValue(m_numerical_impact, json[QString("numericalImpact")]);
    m_numerical_impact_isSet = !json[QString("numericalImpact")].isNull() && m_numerical_impact_isValid;

    m_paid_isValid = ::OpenAPI::fromJsonValue(m_paid, json[QString("paid")]);
    m_paid_isSet = !json[QString("paid")].isNull() && m_paid_isValid;

    m_recommendation_name_isValid = ::OpenAPI::fromJsonValue(m_recommendation_name, json[QString("recommendationName")]);
    m_recommendation_name_isSet = !json[QString("recommendationName")].isNull() && m_recommendation_name_isValid;

    m_sub_type_isValid = ::OpenAPI::fromJsonValue(m_sub_type, json[QString("subType")]);
    m_sub_type_isSet = !json[QString("subType")].isNull() && m_sub_type_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRecommendation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendation::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_call_to_action.size() > 0) {
        obj.insert(QString("additionalCallToAction"), ::OpenAPI::toJsonValue(m_additional_call_to_action));
    }
    if (m_additional_descriptions.size() > 0) {
        obj.insert(QString("additionalDescriptions"), ::OpenAPI::toJsonValue(m_additional_descriptions));
    }
    if (m_creative.size() > 0) {
        obj.insert(QString("creative"), ::OpenAPI::toJsonValue(m_creative));
    }
    if (m_default_call_to_action.isSet()) {
        obj.insert(QString("defaultCallToAction"), ::OpenAPI::toJsonValue(m_default_call_to_action));
    }
    if (m_default_description_isSet) {
        obj.insert(QString("defaultDescription"), ::OpenAPI::toJsonValue(m_default_description));
    }
    if (m_numerical_impact_isSet) {
        obj.insert(QString("numericalImpact"), ::OpenAPI::toJsonValue(m_numerical_impact));
    }
    if (m_paid_isSet) {
        obj.insert(QString("paid"), ::OpenAPI::toJsonValue(m_paid));
    }
    if (m_recommendation_name_isSet) {
        obj.insert(QString("recommendationName"), ::OpenAPI::toJsonValue(m_recommendation_name));
    }
    if (m_sub_type_isSet) {
        obj.insert(QString("subType"), ::OpenAPI::toJsonValue(m_sub_type));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIRecommendationCallToAction> OAIRecommendation::getAdditionalCallToAction() const {
    return m_additional_call_to_action;
}
void OAIRecommendation::setAdditionalCallToAction(const QList<OAIRecommendationCallToAction> &additional_call_to_action) {
    m_additional_call_to_action = additional_call_to_action;
    m_additional_call_to_action_isSet = true;
}

bool OAIRecommendation::is_additional_call_to_action_Set() const{
    return m_additional_call_to_action_isSet;
}

bool OAIRecommendation::is_additional_call_to_action_Valid() const{
    return m_additional_call_to_action_isValid;
}

QList<OAIRecommendationDescription> OAIRecommendation::getAdditionalDescriptions() const {
    return m_additional_descriptions;
}
void OAIRecommendation::setAdditionalDescriptions(const QList<OAIRecommendationDescription> &additional_descriptions) {
    m_additional_descriptions = additional_descriptions;
    m_additional_descriptions_isSet = true;
}

bool OAIRecommendation::is_additional_descriptions_Set() const{
    return m_additional_descriptions_isSet;
}

bool OAIRecommendation::is_additional_descriptions_Valid() const{
    return m_additional_descriptions_isValid;
}

QList<OAIRecommendationCreative> OAIRecommendation::getCreative() const {
    return m_creative;
}
void OAIRecommendation::setCreative(const QList<OAIRecommendationCreative> &creative) {
    m_creative = creative;
    m_creative_isSet = true;
}

bool OAIRecommendation::is_creative_Set() const{
    return m_creative_isSet;
}

bool OAIRecommendation::is_creative_Valid() const{
    return m_creative_isValid;
}

OAIRecommendationCallToAction OAIRecommendation::getDefaultCallToAction() const {
    return m_default_call_to_action;
}
void OAIRecommendation::setDefaultCallToAction(const OAIRecommendationCallToAction &default_call_to_action) {
    m_default_call_to_action = default_call_to_action;
    m_default_call_to_action_isSet = true;
}

bool OAIRecommendation::is_default_call_to_action_Set() const{
    return m_default_call_to_action_isSet;
}

bool OAIRecommendation::is_default_call_to_action_Valid() const{
    return m_default_call_to_action_isValid;
}

QString OAIRecommendation::getDefaultDescription() const {
    return m_default_description;
}
void OAIRecommendation::setDefaultDescription(const QString &default_description) {
    m_default_description = default_description;
    m_default_description_isSet = true;
}

bool OAIRecommendation::is_default_description_Set() const{
    return m_default_description_isSet;
}

bool OAIRecommendation::is_default_description_Valid() const{
    return m_default_description_isValid;
}

qint32 OAIRecommendation::getNumericalImpact() const {
    return m_numerical_impact;
}
void OAIRecommendation::setNumericalImpact(const qint32 &numerical_impact) {
    m_numerical_impact = numerical_impact;
    m_numerical_impact_isSet = true;
}

bool OAIRecommendation::is_numerical_impact_Set() const{
    return m_numerical_impact_isSet;
}

bool OAIRecommendation::is_numerical_impact_Valid() const{
    return m_numerical_impact_isValid;
}

bool OAIRecommendation::isPaid() const {
    return m_paid;
}
void OAIRecommendation::setPaid(const bool &paid) {
    m_paid = paid;
    m_paid_isSet = true;
}

bool OAIRecommendation::is_paid_Set() const{
    return m_paid_isSet;
}

bool OAIRecommendation::is_paid_Valid() const{
    return m_paid_isValid;
}

QString OAIRecommendation::getRecommendationName() const {
    return m_recommendation_name;
}
void OAIRecommendation::setRecommendationName(const QString &recommendation_name) {
    m_recommendation_name = recommendation_name;
    m_recommendation_name_isSet = true;
}

bool OAIRecommendation::is_recommendation_name_Set() const{
    return m_recommendation_name_isSet;
}

bool OAIRecommendation::is_recommendation_name_Valid() const{
    return m_recommendation_name_isValid;
}

QString OAIRecommendation::getSubType() const {
    return m_sub_type;
}
void OAIRecommendation::setSubType(const QString &sub_type) {
    m_sub_type = sub_type;
    m_sub_type_isSet = true;
}

bool OAIRecommendation::is_sub_type_Set() const{
    return m_sub_type_isSet;
}

bool OAIRecommendation::is_sub_type_Valid() const{
    return m_sub_type_isValid;
}

QString OAIRecommendation::getTitle() const {
    return m_title;
}
void OAIRecommendation::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIRecommendation::is_title_Set() const{
    return m_title_isSet;
}

bool OAIRecommendation::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIRecommendation::getType() const {
    return m_type;
}
void OAIRecommendation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRecommendation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRecommendation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRecommendation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_call_to_action.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_descriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_call_to_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_numerical_impact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
