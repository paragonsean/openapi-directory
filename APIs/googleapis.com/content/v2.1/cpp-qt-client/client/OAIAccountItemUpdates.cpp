/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountItemUpdates.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountItemUpdates::OAIAccountItemUpdates(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountItemUpdates::OAIAccountItemUpdates() {
    this->initializeModel();
}

OAIAccountItemUpdates::~OAIAccountItemUpdates() {}

void OAIAccountItemUpdates::initializeModel() {

    m_account_item_updates_settings_isSet = false;
    m_account_item_updates_settings_isValid = false;

    m_effective_allow_availability_updates_isSet = false;
    m_effective_allow_availability_updates_isValid = false;

    m_effective_allow_condition_updates_isSet = false;
    m_effective_allow_condition_updates_isValid = false;

    m_effective_allow_price_updates_isSet = false;
    m_effective_allow_price_updates_isValid = false;

    m_effective_allow_strict_availability_updates_isSet = false;
    m_effective_allow_strict_availability_updates_isValid = false;
}

void OAIAccountItemUpdates::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountItemUpdates::fromJsonObject(QJsonObject json) {

    m_account_item_updates_settings_isValid = ::OpenAPI::fromJsonValue(m_account_item_updates_settings, json[QString("accountItemUpdatesSettings")]);
    m_account_item_updates_settings_isSet = !json[QString("accountItemUpdatesSettings")].isNull() && m_account_item_updates_settings_isValid;

    m_effective_allow_availability_updates_isValid = ::OpenAPI::fromJsonValue(m_effective_allow_availability_updates, json[QString("effectiveAllowAvailabilityUpdates")]);
    m_effective_allow_availability_updates_isSet = !json[QString("effectiveAllowAvailabilityUpdates")].isNull() && m_effective_allow_availability_updates_isValid;

    m_effective_allow_condition_updates_isValid = ::OpenAPI::fromJsonValue(m_effective_allow_condition_updates, json[QString("effectiveAllowConditionUpdates")]);
    m_effective_allow_condition_updates_isSet = !json[QString("effectiveAllowConditionUpdates")].isNull() && m_effective_allow_condition_updates_isValid;

    m_effective_allow_price_updates_isValid = ::OpenAPI::fromJsonValue(m_effective_allow_price_updates, json[QString("effectiveAllowPriceUpdates")]);
    m_effective_allow_price_updates_isSet = !json[QString("effectiveAllowPriceUpdates")].isNull() && m_effective_allow_price_updates_isValid;

    m_effective_allow_strict_availability_updates_isValid = ::OpenAPI::fromJsonValue(m_effective_allow_strict_availability_updates, json[QString("effectiveAllowStrictAvailabilityUpdates")]);
    m_effective_allow_strict_availability_updates_isSet = !json[QString("effectiveAllowStrictAvailabilityUpdates")].isNull() && m_effective_allow_strict_availability_updates_isValid;
}

QString OAIAccountItemUpdates::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountItemUpdates::asJsonObject() const {
    QJsonObject obj;
    if (m_account_item_updates_settings.isSet()) {
        obj.insert(QString("accountItemUpdatesSettings"), ::OpenAPI::toJsonValue(m_account_item_updates_settings));
    }
    if (m_effective_allow_availability_updates_isSet) {
        obj.insert(QString("effectiveAllowAvailabilityUpdates"), ::OpenAPI::toJsonValue(m_effective_allow_availability_updates));
    }
    if (m_effective_allow_condition_updates_isSet) {
        obj.insert(QString("effectiveAllowConditionUpdates"), ::OpenAPI::toJsonValue(m_effective_allow_condition_updates));
    }
    if (m_effective_allow_price_updates_isSet) {
        obj.insert(QString("effectiveAllowPriceUpdates"), ::OpenAPI::toJsonValue(m_effective_allow_price_updates));
    }
    if (m_effective_allow_strict_availability_updates_isSet) {
        obj.insert(QString("effectiveAllowStrictAvailabilityUpdates"), ::OpenAPI::toJsonValue(m_effective_allow_strict_availability_updates));
    }
    return obj;
}

OAIAccountItemUpdatesSettings OAIAccountItemUpdates::getAccountItemUpdatesSettings() const {
    return m_account_item_updates_settings;
}
void OAIAccountItemUpdates::setAccountItemUpdatesSettings(const OAIAccountItemUpdatesSettings &account_item_updates_settings) {
    m_account_item_updates_settings = account_item_updates_settings;
    m_account_item_updates_settings_isSet = true;
}

bool OAIAccountItemUpdates::is_account_item_updates_settings_Set() const{
    return m_account_item_updates_settings_isSet;
}

bool OAIAccountItemUpdates::is_account_item_updates_settings_Valid() const{
    return m_account_item_updates_settings_isValid;
}

bool OAIAccountItemUpdates::isEffectiveAllowAvailabilityUpdates() const {
    return m_effective_allow_availability_updates;
}
void OAIAccountItemUpdates::setEffectiveAllowAvailabilityUpdates(const bool &effective_allow_availability_updates) {
    m_effective_allow_availability_updates = effective_allow_availability_updates;
    m_effective_allow_availability_updates_isSet = true;
}

bool OAIAccountItemUpdates::is_effective_allow_availability_updates_Set() const{
    return m_effective_allow_availability_updates_isSet;
}

bool OAIAccountItemUpdates::is_effective_allow_availability_updates_Valid() const{
    return m_effective_allow_availability_updates_isValid;
}

bool OAIAccountItemUpdates::isEffectiveAllowConditionUpdates() const {
    return m_effective_allow_condition_updates;
}
void OAIAccountItemUpdates::setEffectiveAllowConditionUpdates(const bool &effective_allow_condition_updates) {
    m_effective_allow_condition_updates = effective_allow_condition_updates;
    m_effective_allow_condition_updates_isSet = true;
}

bool OAIAccountItemUpdates::is_effective_allow_condition_updates_Set() const{
    return m_effective_allow_condition_updates_isSet;
}

bool OAIAccountItemUpdates::is_effective_allow_condition_updates_Valid() const{
    return m_effective_allow_condition_updates_isValid;
}

bool OAIAccountItemUpdates::isEffectiveAllowPriceUpdates() const {
    return m_effective_allow_price_updates;
}
void OAIAccountItemUpdates::setEffectiveAllowPriceUpdates(const bool &effective_allow_price_updates) {
    m_effective_allow_price_updates = effective_allow_price_updates;
    m_effective_allow_price_updates_isSet = true;
}

bool OAIAccountItemUpdates::is_effective_allow_price_updates_Set() const{
    return m_effective_allow_price_updates_isSet;
}

bool OAIAccountItemUpdates::is_effective_allow_price_updates_Valid() const{
    return m_effective_allow_price_updates_isValid;
}

bool OAIAccountItemUpdates::isEffectiveAllowStrictAvailabilityUpdates() const {
    return m_effective_allow_strict_availability_updates;
}
void OAIAccountItemUpdates::setEffectiveAllowStrictAvailabilityUpdates(const bool &effective_allow_strict_availability_updates) {
    m_effective_allow_strict_availability_updates = effective_allow_strict_availability_updates;
    m_effective_allow_strict_availability_updates_isSet = true;
}

bool OAIAccountItemUpdates::is_effective_allow_strict_availability_updates_Set() const{
    return m_effective_allow_strict_availability_updates_isSet;
}

bool OAIAccountItemUpdates::is_effective_allow_strict_availability_updates_Valid() const{
    return m_effective_allow_strict_availability_updates_isValid;
}

bool OAIAccountItemUpdates::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_item_updates_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_allow_availability_updates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_allow_condition_updates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_allow_price_updates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_allow_strict_availability_updates_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountItemUpdates::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
