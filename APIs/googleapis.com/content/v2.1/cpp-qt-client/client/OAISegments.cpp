/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegments.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegments::OAISegments(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegments::OAISegments() {
    this->initializeModel();
}

OAISegments::~OAISegments() {}

void OAISegments::initializeModel() {

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_category_l1_isSet = false;
    m_category_l1_isValid = false;

    m_category_l2_isSet = false;
    m_category_l2_isValid = false;

    m_category_l3_isSet = false;
    m_category_l3_isValid = false;

    m_category_l4_isSet = false;
    m_category_l4_isValid = false;

    m_category_l5_isSet = false;
    m_category_l5_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_custom_label0_isSet = false;
    m_custom_label0_isValid = false;

    m_custom_label1_isSet = false;
    m_custom_label1_isValid = false;

    m_custom_label2_isSet = false;
    m_custom_label2_isValid = false;

    m_custom_label3_isSet = false;
    m_custom_label3_isValid = false;

    m_custom_label4_isSet = false;
    m_custom_label4_isValid = false;

    m_customer_country_code_isSet = false;
    m_customer_country_code_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_product_type_l1_isSet = false;
    m_product_type_l1_isValid = false;

    m_product_type_l2_isSet = false;
    m_product_type_l2_isValid = false;

    m_product_type_l3_isSet = false;
    m_product_type_l3_isValid = false;

    m_product_type_l4_isSet = false;
    m_product_type_l4_isValid = false;

    m_product_type_l5_isSet = false;
    m_product_type_l5_isValid = false;

    m_program_isSet = false;
    m_program_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;
}

void OAISegments::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegments::fromJsonObject(QJsonObject json) {

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_category_l1_isValid = ::OpenAPI::fromJsonValue(m_category_l1, json[QString("categoryL1")]);
    m_category_l1_isSet = !json[QString("categoryL1")].isNull() && m_category_l1_isValid;

    m_category_l2_isValid = ::OpenAPI::fromJsonValue(m_category_l2, json[QString("categoryL2")]);
    m_category_l2_isSet = !json[QString("categoryL2")].isNull() && m_category_l2_isValid;

    m_category_l3_isValid = ::OpenAPI::fromJsonValue(m_category_l3, json[QString("categoryL3")]);
    m_category_l3_isSet = !json[QString("categoryL3")].isNull() && m_category_l3_isValid;

    m_category_l4_isValid = ::OpenAPI::fromJsonValue(m_category_l4, json[QString("categoryL4")]);
    m_category_l4_isSet = !json[QString("categoryL4")].isNull() && m_category_l4_isValid;

    m_category_l5_isValid = ::OpenAPI::fromJsonValue(m_category_l5, json[QString("categoryL5")]);
    m_category_l5_isSet = !json[QString("categoryL5")].isNull() && m_category_l5_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_custom_label0_isValid = ::OpenAPI::fromJsonValue(m_custom_label0, json[QString("customLabel0")]);
    m_custom_label0_isSet = !json[QString("customLabel0")].isNull() && m_custom_label0_isValid;

    m_custom_label1_isValid = ::OpenAPI::fromJsonValue(m_custom_label1, json[QString("customLabel1")]);
    m_custom_label1_isSet = !json[QString("customLabel1")].isNull() && m_custom_label1_isValid;

    m_custom_label2_isValid = ::OpenAPI::fromJsonValue(m_custom_label2, json[QString("customLabel2")]);
    m_custom_label2_isSet = !json[QString("customLabel2")].isNull() && m_custom_label2_isValid;

    m_custom_label3_isValid = ::OpenAPI::fromJsonValue(m_custom_label3, json[QString("customLabel3")]);
    m_custom_label3_isSet = !json[QString("customLabel3")].isNull() && m_custom_label3_isValid;

    m_custom_label4_isValid = ::OpenAPI::fromJsonValue(m_custom_label4, json[QString("customLabel4")]);
    m_custom_label4_isSet = !json[QString("customLabel4")].isNull() && m_custom_label4_isValid;

    m_customer_country_code_isValid = ::OpenAPI::fromJsonValue(m_customer_country_code, json[QString("customerCountryCode")]);
    m_customer_country_code_isSet = !json[QString("customerCountryCode")].isNull() && m_customer_country_code_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_product_type_l1_isValid = ::OpenAPI::fromJsonValue(m_product_type_l1, json[QString("productTypeL1")]);
    m_product_type_l1_isSet = !json[QString("productTypeL1")].isNull() && m_product_type_l1_isValid;

    m_product_type_l2_isValid = ::OpenAPI::fromJsonValue(m_product_type_l2, json[QString("productTypeL2")]);
    m_product_type_l2_isSet = !json[QString("productTypeL2")].isNull() && m_product_type_l2_isValid;

    m_product_type_l3_isValid = ::OpenAPI::fromJsonValue(m_product_type_l3, json[QString("productTypeL3")]);
    m_product_type_l3_isSet = !json[QString("productTypeL3")].isNull() && m_product_type_l3_isValid;

    m_product_type_l4_isValid = ::OpenAPI::fromJsonValue(m_product_type_l4, json[QString("productTypeL4")]);
    m_product_type_l4_isSet = !json[QString("productTypeL4")].isNull() && m_product_type_l4_isValid;

    m_product_type_l5_isValid = ::OpenAPI::fromJsonValue(m_product_type_l5, json[QString("productTypeL5")]);
    m_product_type_l5_isSet = !json[QString("productTypeL5")].isNull() && m_product_type_l5_isValid;

    m_program_isValid = ::OpenAPI::fromJsonValue(m_program, json[QString("program")]);
    m_program_isSet = !json[QString("program")].isNull() && m_program_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("week")]);
    m_week_isSet = !json[QString("week")].isNull() && m_week_isValid;
}

QString OAISegments::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegments::asJsonObject() const {
    QJsonObject obj;
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_category_l1_isSet) {
        obj.insert(QString("categoryL1"), ::OpenAPI::toJsonValue(m_category_l1));
    }
    if (m_category_l2_isSet) {
        obj.insert(QString("categoryL2"), ::OpenAPI::toJsonValue(m_category_l2));
    }
    if (m_category_l3_isSet) {
        obj.insert(QString("categoryL3"), ::OpenAPI::toJsonValue(m_category_l3));
    }
    if (m_category_l4_isSet) {
        obj.insert(QString("categoryL4"), ::OpenAPI::toJsonValue(m_category_l4));
    }
    if (m_category_l5_isSet) {
        obj.insert(QString("categoryL5"), ::OpenAPI::toJsonValue(m_category_l5));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_custom_label0_isSet) {
        obj.insert(QString("customLabel0"), ::OpenAPI::toJsonValue(m_custom_label0));
    }
    if (m_custom_label1_isSet) {
        obj.insert(QString("customLabel1"), ::OpenAPI::toJsonValue(m_custom_label1));
    }
    if (m_custom_label2_isSet) {
        obj.insert(QString("customLabel2"), ::OpenAPI::toJsonValue(m_custom_label2));
    }
    if (m_custom_label3_isSet) {
        obj.insert(QString("customLabel3"), ::OpenAPI::toJsonValue(m_custom_label3));
    }
    if (m_custom_label4_isSet) {
        obj.insert(QString("customLabel4"), ::OpenAPI::toJsonValue(m_custom_label4));
    }
    if (m_customer_country_code_isSet) {
        obj.insert(QString("customerCountryCode"), ::OpenAPI::toJsonValue(m_customer_country_code));
    }
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_product_type_l1_isSet) {
        obj.insert(QString("productTypeL1"), ::OpenAPI::toJsonValue(m_product_type_l1));
    }
    if (m_product_type_l2_isSet) {
        obj.insert(QString("productTypeL2"), ::OpenAPI::toJsonValue(m_product_type_l2));
    }
    if (m_product_type_l3_isSet) {
        obj.insert(QString("productTypeL3"), ::OpenAPI::toJsonValue(m_product_type_l3));
    }
    if (m_product_type_l4_isSet) {
        obj.insert(QString("productTypeL4"), ::OpenAPI::toJsonValue(m_product_type_l4));
    }
    if (m_product_type_l5_isSet) {
        obj.insert(QString("productTypeL5"), ::OpenAPI::toJsonValue(m_product_type_l5));
    }
    if (m_program_isSet) {
        obj.insert(QString("program"), ::OpenAPI::toJsonValue(m_program));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_week.isSet()) {
        obj.insert(QString("week"), ::OpenAPI::toJsonValue(m_week));
    }
    return obj;
}

QString OAISegments::getBrand() const {
    return m_brand;
}
void OAISegments::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAISegments::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAISegments::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAISegments::getCategoryL1() const {
    return m_category_l1;
}
void OAISegments::setCategoryL1(const QString &category_l1) {
    m_category_l1 = category_l1;
    m_category_l1_isSet = true;
}

bool OAISegments::is_category_l1_Set() const{
    return m_category_l1_isSet;
}

bool OAISegments::is_category_l1_Valid() const{
    return m_category_l1_isValid;
}

QString OAISegments::getCategoryL2() const {
    return m_category_l2;
}
void OAISegments::setCategoryL2(const QString &category_l2) {
    m_category_l2 = category_l2;
    m_category_l2_isSet = true;
}

bool OAISegments::is_category_l2_Set() const{
    return m_category_l2_isSet;
}

bool OAISegments::is_category_l2_Valid() const{
    return m_category_l2_isValid;
}

QString OAISegments::getCategoryL3() const {
    return m_category_l3;
}
void OAISegments::setCategoryL3(const QString &category_l3) {
    m_category_l3 = category_l3;
    m_category_l3_isSet = true;
}

bool OAISegments::is_category_l3_Set() const{
    return m_category_l3_isSet;
}

bool OAISegments::is_category_l3_Valid() const{
    return m_category_l3_isValid;
}

QString OAISegments::getCategoryL4() const {
    return m_category_l4;
}
void OAISegments::setCategoryL4(const QString &category_l4) {
    m_category_l4 = category_l4;
    m_category_l4_isSet = true;
}

bool OAISegments::is_category_l4_Set() const{
    return m_category_l4_isSet;
}

bool OAISegments::is_category_l4_Valid() const{
    return m_category_l4_isValid;
}

QString OAISegments::getCategoryL5() const {
    return m_category_l5;
}
void OAISegments::setCategoryL5(const QString &category_l5) {
    m_category_l5 = category_l5;
    m_category_l5_isSet = true;
}

bool OAISegments::is_category_l5_Set() const{
    return m_category_l5_isSet;
}

bool OAISegments::is_category_l5_Valid() const{
    return m_category_l5_isValid;
}

QString OAISegments::getCurrencyCode() const {
    return m_currency_code;
}
void OAISegments::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAISegments::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAISegments::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAISegments::getCustomLabel0() const {
    return m_custom_label0;
}
void OAISegments::setCustomLabel0(const QString &custom_label0) {
    m_custom_label0 = custom_label0;
    m_custom_label0_isSet = true;
}

bool OAISegments::is_custom_label0_Set() const{
    return m_custom_label0_isSet;
}

bool OAISegments::is_custom_label0_Valid() const{
    return m_custom_label0_isValid;
}

QString OAISegments::getCustomLabel1() const {
    return m_custom_label1;
}
void OAISegments::setCustomLabel1(const QString &custom_label1) {
    m_custom_label1 = custom_label1;
    m_custom_label1_isSet = true;
}

bool OAISegments::is_custom_label1_Set() const{
    return m_custom_label1_isSet;
}

bool OAISegments::is_custom_label1_Valid() const{
    return m_custom_label1_isValid;
}

QString OAISegments::getCustomLabel2() const {
    return m_custom_label2;
}
void OAISegments::setCustomLabel2(const QString &custom_label2) {
    m_custom_label2 = custom_label2;
    m_custom_label2_isSet = true;
}

bool OAISegments::is_custom_label2_Set() const{
    return m_custom_label2_isSet;
}

bool OAISegments::is_custom_label2_Valid() const{
    return m_custom_label2_isValid;
}

QString OAISegments::getCustomLabel3() const {
    return m_custom_label3;
}
void OAISegments::setCustomLabel3(const QString &custom_label3) {
    m_custom_label3 = custom_label3;
    m_custom_label3_isSet = true;
}

bool OAISegments::is_custom_label3_Set() const{
    return m_custom_label3_isSet;
}

bool OAISegments::is_custom_label3_Valid() const{
    return m_custom_label3_isValid;
}

QString OAISegments::getCustomLabel4() const {
    return m_custom_label4;
}
void OAISegments::setCustomLabel4(const QString &custom_label4) {
    m_custom_label4 = custom_label4;
    m_custom_label4_isSet = true;
}

bool OAISegments::is_custom_label4_Set() const{
    return m_custom_label4_isSet;
}

bool OAISegments::is_custom_label4_Valid() const{
    return m_custom_label4_isValid;
}

QString OAISegments::getCustomerCountryCode() const {
    return m_customer_country_code;
}
void OAISegments::setCustomerCountryCode(const QString &customer_country_code) {
    m_customer_country_code = customer_country_code;
    m_customer_country_code_isSet = true;
}

bool OAISegments::is_customer_country_code_Set() const{
    return m_customer_country_code_isSet;
}

bool OAISegments::is_customer_country_code_Valid() const{
    return m_customer_country_code_isValid;
}

OAIDate OAISegments::getDate() const {
    return m_date;
}
void OAISegments::setDate(const OAIDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAISegments::is_date_Set() const{
    return m_date_isSet;
}

bool OAISegments::is_date_Valid() const{
    return m_date_isValid;
}

QString OAISegments::getOfferId() const {
    return m_offer_id;
}
void OAISegments::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAISegments::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAISegments::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QString OAISegments::getProductTypeL1() const {
    return m_product_type_l1;
}
void OAISegments::setProductTypeL1(const QString &product_type_l1) {
    m_product_type_l1 = product_type_l1;
    m_product_type_l1_isSet = true;
}

bool OAISegments::is_product_type_l1_Set() const{
    return m_product_type_l1_isSet;
}

bool OAISegments::is_product_type_l1_Valid() const{
    return m_product_type_l1_isValid;
}

QString OAISegments::getProductTypeL2() const {
    return m_product_type_l2;
}
void OAISegments::setProductTypeL2(const QString &product_type_l2) {
    m_product_type_l2 = product_type_l2;
    m_product_type_l2_isSet = true;
}

bool OAISegments::is_product_type_l2_Set() const{
    return m_product_type_l2_isSet;
}

bool OAISegments::is_product_type_l2_Valid() const{
    return m_product_type_l2_isValid;
}

QString OAISegments::getProductTypeL3() const {
    return m_product_type_l3;
}
void OAISegments::setProductTypeL3(const QString &product_type_l3) {
    m_product_type_l3 = product_type_l3;
    m_product_type_l3_isSet = true;
}

bool OAISegments::is_product_type_l3_Set() const{
    return m_product_type_l3_isSet;
}

bool OAISegments::is_product_type_l3_Valid() const{
    return m_product_type_l3_isValid;
}

QString OAISegments::getProductTypeL4() const {
    return m_product_type_l4;
}
void OAISegments::setProductTypeL4(const QString &product_type_l4) {
    m_product_type_l4 = product_type_l4;
    m_product_type_l4_isSet = true;
}

bool OAISegments::is_product_type_l4_Set() const{
    return m_product_type_l4_isSet;
}

bool OAISegments::is_product_type_l4_Valid() const{
    return m_product_type_l4_isValid;
}

QString OAISegments::getProductTypeL5() const {
    return m_product_type_l5;
}
void OAISegments::setProductTypeL5(const QString &product_type_l5) {
    m_product_type_l5 = product_type_l5;
    m_product_type_l5_isSet = true;
}

bool OAISegments::is_product_type_l5_Set() const{
    return m_product_type_l5_isSet;
}

bool OAISegments::is_product_type_l5_Valid() const{
    return m_product_type_l5_isValid;
}

QString OAISegments::getProgram() const {
    return m_program;
}
void OAISegments::setProgram(const QString &program) {
    m_program = program;
    m_program_isSet = true;
}

bool OAISegments::is_program_Set() const{
    return m_program_isSet;
}

bool OAISegments::is_program_Valid() const{
    return m_program_isValid;
}

QString OAISegments::getTitle() const {
    return m_title;
}
void OAISegments::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISegments::is_title_Set() const{
    return m_title_isSet;
}

bool OAISegments::is_title_Valid() const{
    return m_title_isValid;
}

OAIDate OAISegments::getWeek() const {
    return m_week;
}
void OAISegments::setWeek(const OAIDate &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAISegments::is_week_Set() const{
    return m_week_isSet;
}

bool OAISegments::is_week_Valid() const{
    return m_week_isValid;
}

bool OAISegments::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_l1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_l2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_l3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_l4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_l5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label0_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_label4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_l1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_l2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_l3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_l4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_l5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegments::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
