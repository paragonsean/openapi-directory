/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversionSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversionSource::OAIConversionSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversionSource::OAIConversionSource() {
    this->initializeModel();
}

OAIConversionSource::~OAIConversionSource() {}

void OAIConversionSource::initializeModel() {

    m_conversion_source_id_isSet = false;
    m_conversion_source_id_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_google_analytics_link_isSet = false;
    m_google_analytics_link_isValid = false;

    m_merchant_center_destination_isSet = false;
    m_merchant_center_destination_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIConversionSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversionSource::fromJsonObject(QJsonObject json) {

    m_conversion_source_id_isValid = ::OpenAPI::fromJsonValue(m_conversion_source_id, json[QString("conversionSourceId")]);
    m_conversion_source_id_isSet = !json[QString("conversionSourceId")].isNull() && m_conversion_source_id_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_google_analytics_link_isValid = ::OpenAPI::fromJsonValue(m_google_analytics_link, json[QString("googleAnalyticsLink")]);
    m_google_analytics_link_isSet = !json[QString("googleAnalyticsLink")].isNull() && m_google_analytics_link_isValid;

    m_merchant_center_destination_isValid = ::OpenAPI::fromJsonValue(m_merchant_center_destination, json[QString("merchantCenterDestination")]);
    m_merchant_center_destination_isSet = !json[QString("merchantCenterDestination")].isNull() && m_merchant_center_destination_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIConversionSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversionSource::asJsonObject() const {
    QJsonObject obj;
    if (m_conversion_source_id_isSet) {
        obj.insert(QString("conversionSourceId"), ::OpenAPI::toJsonValue(m_conversion_source_id));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_google_analytics_link.isSet()) {
        obj.insert(QString("googleAnalyticsLink"), ::OpenAPI::toJsonValue(m_google_analytics_link));
    }
    if (m_merchant_center_destination.isSet()) {
        obj.insert(QString("merchantCenterDestination"), ::OpenAPI::toJsonValue(m_merchant_center_destination));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIConversionSource::getConversionSourceId() const {
    return m_conversion_source_id;
}
void OAIConversionSource::setConversionSourceId(const QString &conversion_source_id) {
    m_conversion_source_id = conversion_source_id;
    m_conversion_source_id_isSet = true;
}

bool OAIConversionSource::is_conversion_source_id_Set() const{
    return m_conversion_source_id_isSet;
}

bool OAIConversionSource::is_conversion_source_id_Valid() const{
    return m_conversion_source_id_isValid;
}

QString OAIConversionSource::getExpireTime() const {
    return m_expire_time;
}
void OAIConversionSource::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIConversionSource::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIConversionSource::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

OAIGoogleAnalyticsLink OAIConversionSource::getGoogleAnalyticsLink() const {
    return m_google_analytics_link;
}
void OAIConversionSource::setGoogleAnalyticsLink(const OAIGoogleAnalyticsLink &google_analytics_link) {
    m_google_analytics_link = google_analytics_link;
    m_google_analytics_link_isSet = true;
}

bool OAIConversionSource::is_google_analytics_link_Set() const{
    return m_google_analytics_link_isSet;
}

bool OAIConversionSource::is_google_analytics_link_Valid() const{
    return m_google_analytics_link_isValid;
}

OAIMerchantCenterDestination OAIConversionSource::getMerchantCenterDestination() const {
    return m_merchant_center_destination;
}
void OAIConversionSource::setMerchantCenterDestination(const OAIMerchantCenterDestination &merchant_center_destination) {
    m_merchant_center_destination = merchant_center_destination;
    m_merchant_center_destination_isSet = true;
}

bool OAIConversionSource::is_merchant_center_destination_Set() const{
    return m_merchant_center_destination_isSet;
}

bool OAIConversionSource::is_merchant_center_destination_Valid() const{
    return m_merchant_center_destination_isValid;
}

QString OAIConversionSource::getState() const {
    return m_state;
}
void OAIConversionSource::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIConversionSource::is_state_Set() const{
    return m_state_isSet;
}

bool OAIConversionSource::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIConversionSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conversion_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_analytics_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_center_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversionSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
