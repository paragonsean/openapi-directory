/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegionalInventory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegionalInventory::OAIRegionalInventory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegionalInventory::OAIRegionalInventory() {
    this->initializeModel();
}

OAIRegionalInventory::~OAIRegionalInventory() {}

void OAIRegionalInventory::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_custom_attributes_isSet = false;
    m_custom_attributes_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_region_id_isSet = false;
    m_region_id_isValid = false;

    m_sale_price_isSet = false;
    m_sale_price_isValid = false;

    m_sale_price_effective_date_isSet = false;
    m_sale_price_effective_date_isValid = false;
}

void OAIRegionalInventory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegionalInventory::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_custom_attributes_isValid = ::OpenAPI::fromJsonValue(m_custom_attributes, json[QString("customAttributes")]);
    m_custom_attributes_isSet = !json[QString("customAttributes")].isNull() && m_custom_attributes_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_region_id_isValid = ::OpenAPI::fromJsonValue(m_region_id, json[QString("regionId")]);
    m_region_id_isSet = !json[QString("regionId")].isNull() && m_region_id_isValid;

    m_sale_price_isValid = ::OpenAPI::fromJsonValue(m_sale_price, json[QString("salePrice")]);
    m_sale_price_isSet = !json[QString("salePrice")].isNull() && m_sale_price_isValid;

    m_sale_price_effective_date_isValid = ::OpenAPI::fromJsonValue(m_sale_price_effective_date, json[QString("salePriceEffectiveDate")]);
    m_sale_price_effective_date_isSet = !json[QString("salePriceEffectiveDate")].isNull() && m_sale_price_effective_date_isValid;
}

QString OAIRegionalInventory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegionalInventory::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_isSet) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_custom_attributes.size() > 0) {
        obj.insert(QString("customAttributes"), ::OpenAPI::toJsonValue(m_custom_attributes));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_region_id_isSet) {
        obj.insert(QString("regionId"), ::OpenAPI::toJsonValue(m_region_id));
    }
    if (m_sale_price.isSet()) {
        obj.insert(QString("salePrice"), ::OpenAPI::toJsonValue(m_sale_price));
    }
    if (m_sale_price_effective_date_isSet) {
        obj.insert(QString("salePriceEffectiveDate"), ::OpenAPI::toJsonValue(m_sale_price_effective_date));
    }
    return obj;
}

QString OAIRegionalInventory::getAvailability() const {
    return m_availability;
}
void OAIRegionalInventory::setAvailability(const QString &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIRegionalInventory::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIRegionalInventory::is_availability_Valid() const{
    return m_availability_isValid;
}

QList<OAICustomAttribute> OAIRegionalInventory::getCustomAttributes() const {
    return m_custom_attributes;
}
void OAIRegionalInventory::setCustomAttributes(const QList<OAICustomAttribute> &custom_attributes) {
    m_custom_attributes = custom_attributes;
    m_custom_attributes_isSet = true;
}

bool OAIRegionalInventory::is_custom_attributes_Set() const{
    return m_custom_attributes_isSet;
}

bool OAIRegionalInventory::is_custom_attributes_Valid() const{
    return m_custom_attributes_isValid;
}

QString OAIRegionalInventory::getKind() const {
    return m_kind;
}
void OAIRegionalInventory::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIRegionalInventory::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIRegionalInventory::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIPrice OAIRegionalInventory::getPrice() const {
    return m_price;
}
void OAIRegionalInventory::setPrice(const OAIPrice &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIRegionalInventory::is_price_Set() const{
    return m_price_isSet;
}

bool OAIRegionalInventory::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIRegionalInventory::getRegionId() const {
    return m_region_id;
}
void OAIRegionalInventory::setRegionId(const QString &region_id) {
    m_region_id = region_id;
    m_region_id_isSet = true;
}

bool OAIRegionalInventory::is_region_id_Set() const{
    return m_region_id_isSet;
}

bool OAIRegionalInventory::is_region_id_Valid() const{
    return m_region_id_isValid;
}

OAIPrice OAIRegionalInventory::getSalePrice() const {
    return m_sale_price;
}
void OAIRegionalInventory::setSalePrice(const OAIPrice &sale_price) {
    m_sale_price = sale_price;
    m_sale_price_isSet = true;
}

bool OAIRegionalInventory::is_sale_price_Set() const{
    return m_sale_price_isSet;
}

bool OAIRegionalInventory::is_sale_price_Valid() const{
    return m_sale_price_isValid;
}

QString OAIRegionalInventory::getSalePriceEffectiveDate() const {
    return m_sale_price_effective_date;
}
void OAIRegionalInventory::setSalePriceEffectiveDate(const QString &sale_price_effective_date) {
    m_sale_price_effective_date = sale_price_effective_date;
    m_sale_price_effective_date_isSet = true;
}

bool OAIRegionalInventory::is_sale_price_effective_date_Set() const{
    return m_sale_price_effective_date_isSet;
}

bool OAIRegionalInventory::is_sale_price_effective_date_Valid() const{
    return m_sale_price_effective_date_isValid;
}

bool OAIRegionalInventory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_price_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegionalInventory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
