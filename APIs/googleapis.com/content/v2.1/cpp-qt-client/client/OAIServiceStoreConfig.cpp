/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceStoreConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceStoreConfig::OAIServiceStoreConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceStoreConfig::OAIServiceStoreConfig() {
    this->initializeModel();
}

OAIServiceStoreConfig::~OAIServiceStoreConfig() {}

void OAIServiceStoreConfig::initializeModel() {

    m_cutoff_config_isSet = false;
    m_cutoff_config_isValid = false;

    m_service_radius_isSet = false;
    m_service_radius_isValid = false;

    m_store_codes_isSet = false;
    m_store_codes_isValid = false;

    m_store_service_type_isSet = false;
    m_store_service_type_isValid = false;
}

void OAIServiceStoreConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceStoreConfig::fromJsonObject(QJsonObject json) {

    m_cutoff_config_isValid = ::OpenAPI::fromJsonValue(m_cutoff_config, json[QString("cutoffConfig")]);
    m_cutoff_config_isSet = !json[QString("cutoffConfig")].isNull() && m_cutoff_config_isValid;

    m_service_radius_isValid = ::OpenAPI::fromJsonValue(m_service_radius, json[QString("serviceRadius")]);
    m_service_radius_isSet = !json[QString("serviceRadius")].isNull() && m_service_radius_isValid;

    m_store_codes_isValid = ::OpenAPI::fromJsonValue(m_store_codes, json[QString("storeCodes")]);
    m_store_codes_isSet = !json[QString("storeCodes")].isNull() && m_store_codes_isValid;

    m_store_service_type_isValid = ::OpenAPI::fromJsonValue(m_store_service_type, json[QString("storeServiceType")]);
    m_store_service_type_isSet = !json[QString("storeServiceType")].isNull() && m_store_service_type_isValid;
}

QString OAIServiceStoreConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceStoreConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cutoff_config.isSet()) {
        obj.insert(QString("cutoffConfig"), ::OpenAPI::toJsonValue(m_cutoff_config));
    }
    if (m_service_radius.isSet()) {
        obj.insert(QString("serviceRadius"), ::OpenAPI::toJsonValue(m_service_radius));
    }
    if (m_store_codes.size() > 0) {
        obj.insert(QString("storeCodes"), ::OpenAPI::toJsonValue(m_store_codes));
    }
    if (m_store_service_type_isSet) {
        obj.insert(QString("storeServiceType"), ::OpenAPI::toJsonValue(m_store_service_type));
    }
    return obj;
}

OAIServiceStoreConfigCutoffConfig OAIServiceStoreConfig::getCutoffConfig() const {
    return m_cutoff_config;
}
void OAIServiceStoreConfig::setCutoffConfig(const OAIServiceStoreConfigCutoffConfig &cutoff_config) {
    m_cutoff_config = cutoff_config;
    m_cutoff_config_isSet = true;
}

bool OAIServiceStoreConfig::is_cutoff_config_Set() const{
    return m_cutoff_config_isSet;
}

bool OAIServiceStoreConfig::is_cutoff_config_Valid() const{
    return m_cutoff_config_isValid;
}

OAIDistance OAIServiceStoreConfig::getServiceRadius() const {
    return m_service_radius;
}
void OAIServiceStoreConfig::setServiceRadius(const OAIDistance &service_radius) {
    m_service_radius = service_radius;
    m_service_radius_isSet = true;
}

bool OAIServiceStoreConfig::is_service_radius_Set() const{
    return m_service_radius_isSet;
}

bool OAIServiceStoreConfig::is_service_radius_Valid() const{
    return m_service_radius_isValid;
}

QList<QString> OAIServiceStoreConfig::getStoreCodes() const {
    return m_store_codes;
}
void OAIServiceStoreConfig::setStoreCodes(const QList<QString> &store_codes) {
    m_store_codes = store_codes;
    m_store_codes_isSet = true;
}

bool OAIServiceStoreConfig::is_store_codes_Set() const{
    return m_store_codes_isSet;
}

bool OAIServiceStoreConfig::is_store_codes_Valid() const{
    return m_store_codes_isValid;
}

QString OAIServiceStoreConfig::getStoreServiceType() const {
    return m_store_service_type;
}
void OAIServiceStoreConfig::setStoreServiceType(const QString &store_service_type) {
    m_store_service_type = store_service_type;
    m_store_service_type_isSet = true;
}

bool OAIServiceStoreConfig::is_store_service_type_Set() const{
    return m_store_service_type_isSet;
}

bool OAIServiceStoreConfig::is_store_service_type_Valid() const{
    return m_store_service_type_isValid;
}

bool OAIServiceStoreConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cutoff_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_radius.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_service_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceStoreConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
