/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountStatus::OAIAccountStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountStatus::OAIAccountStatus() {
    this->initializeModel();
}

OAIAccountStatus::~OAIAccountStatus() {}

void OAIAccountStatus::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_account_level_issues_isSet = false;
    m_account_level_issues_isValid = false;

    m_account_management_isSet = false;
    m_account_management_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_website_claimed_isSet = false;
    m_website_claimed_isValid = false;
}

void OAIAccountStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountStatus::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_account_level_issues_isValid = ::OpenAPI::fromJsonValue(m_account_level_issues, json[QString("accountLevelIssues")]);
    m_account_level_issues_isSet = !json[QString("accountLevelIssues")].isNull() && m_account_level_issues_isValid;

    m_account_management_isValid = ::OpenAPI::fromJsonValue(m_account_management, json[QString("accountManagement")]);
    m_account_management_isSet = !json[QString("accountManagement")].isNull() && m_account_management_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_website_claimed_isValid = ::OpenAPI::fromJsonValue(m_website_claimed, json[QString("websiteClaimed")]);
    m_website_claimed_isSet = !json[QString("websiteClaimed")].isNull() && m_website_claimed_isValid;
}

QString OAIAccountStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_account_level_issues.size() > 0) {
        obj.insert(QString("accountLevelIssues"), ::OpenAPI::toJsonValue(m_account_level_issues));
    }
    if (m_account_management_isSet) {
        obj.insert(QString("accountManagement"), ::OpenAPI::toJsonValue(m_account_management));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_website_claimed_isSet) {
        obj.insert(QString("websiteClaimed"), ::OpenAPI::toJsonValue(m_website_claimed));
    }
    return obj;
}

QString OAIAccountStatus::getAccountId() const {
    return m_account_id;
}
void OAIAccountStatus::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAccountStatus::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAccountStatus::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QList<OAIAccountStatusAccountLevelIssue> OAIAccountStatus::getAccountLevelIssues() const {
    return m_account_level_issues;
}
void OAIAccountStatus::setAccountLevelIssues(const QList<OAIAccountStatusAccountLevelIssue> &account_level_issues) {
    m_account_level_issues = account_level_issues;
    m_account_level_issues_isSet = true;
}

bool OAIAccountStatus::is_account_level_issues_Set() const{
    return m_account_level_issues_isSet;
}

bool OAIAccountStatus::is_account_level_issues_Valid() const{
    return m_account_level_issues_isValid;
}

QString OAIAccountStatus::getAccountManagement() const {
    return m_account_management;
}
void OAIAccountStatus::setAccountManagement(const QString &account_management) {
    m_account_management = account_management;
    m_account_management_isSet = true;
}

bool OAIAccountStatus::is_account_management_Set() const{
    return m_account_management_isSet;
}

bool OAIAccountStatus::is_account_management_Valid() const{
    return m_account_management_isValid;
}

QString OAIAccountStatus::getKind() const {
    return m_kind;
}
void OAIAccountStatus::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAccountStatus::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAccountStatus::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAIAccountStatusProducts> OAIAccountStatus::getProducts() const {
    return m_products;
}
void OAIAccountStatus::setProducts(const QList<OAIAccountStatusProducts> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAIAccountStatus::is_products_Set() const{
    return m_products_isSet;
}

bool OAIAccountStatus::is_products_Valid() const{
    return m_products_isValid;
}

bool OAIAccountStatus::isWebsiteClaimed() const {
    return m_website_claimed;
}
void OAIAccountStatus::setWebsiteClaimed(const bool &website_claimed) {
    m_website_claimed = website_claimed;
    m_website_claimed_isSet = true;
}

bool OAIAccountStatus::is_website_claimed_Set() const{
    return m_website_claimed_isSet;
}

bool OAIAccountStatus::is_website_claimed_Valid() const{
    return m_website_claimed_isValid;
}

bool OAIAccountStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_level_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_management_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_claimed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
