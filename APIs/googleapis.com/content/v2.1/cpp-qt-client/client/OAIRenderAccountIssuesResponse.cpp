/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRenderAccountIssuesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRenderAccountIssuesResponse::OAIRenderAccountIssuesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRenderAccountIssuesResponse::OAIRenderAccountIssuesResponse() {
    this->initializeModel();
}

OAIRenderAccountIssuesResponse::~OAIRenderAccountIssuesResponse() {}

void OAIRenderAccountIssuesResponse::initializeModel() {

    m_alternate_dispute_resolution_isSet = false;
    m_alternate_dispute_resolution_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;
}

void OAIRenderAccountIssuesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRenderAccountIssuesResponse::fromJsonObject(QJsonObject json) {

    m_alternate_dispute_resolution_isValid = ::OpenAPI::fromJsonValue(m_alternate_dispute_resolution, json[QString("alternateDisputeResolution")]);
    m_alternate_dispute_resolution_isSet = !json[QString("alternateDisputeResolution")].isNull() && m_alternate_dispute_resolution_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;
}

QString OAIRenderAccountIssuesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRenderAccountIssuesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_dispute_resolution.isSet()) {
        obj.insert(QString("alternateDisputeResolution"), ::OpenAPI::toJsonValue(m_alternate_dispute_resolution));
    }
    if (m_issues.size() > 0) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    return obj;
}

OAIAlternateDisputeResolution OAIRenderAccountIssuesResponse::getAlternateDisputeResolution() const {
    return m_alternate_dispute_resolution;
}
void OAIRenderAccountIssuesResponse::setAlternateDisputeResolution(const OAIAlternateDisputeResolution &alternate_dispute_resolution) {
    m_alternate_dispute_resolution = alternate_dispute_resolution;
    m_alternate_dispute_resolution_isSet = true;
}

bool OAIRenderAccountIssuesResponse::is_alternate_dispute_resolution_Set() const{
    return m_alternate_dispute_resolution_isSet;
}

bool OAIRenderAccountIssuesResponse::is_alternate_dispute_resolution_Valid() const{
    return m_alternate_dispute_resolution_isValid;
}

QList<OAIAccountIssue> OAIRenderAccountIssuesResponse::getIssues() const {
    return m_issues;
}
void OAIRenderAccountIssuesResponse::setIssues(const QList<OAIAccountIssue> &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAIRenderAccountIssuesResponse::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAIRenderAccountIssuesResponse::is_issues_Valid() const{
    return m_issues_isValid;
}

bool OAIRenderAccountIssuesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_dispute_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRenderAccountIssuesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
