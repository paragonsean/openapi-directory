/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestPhoneVerificationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestPhoneVerificationRequest::OAIRequestPhoneVerificationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestPhoneVerificationRequest::OAIRequestPhoneVerificationRequest() {
    this->initializeModel();
}

OAIRequestPhoneVerificationRequest::~OAIRequestPhoneVerificationRequest() {}

void OAIRequestPhoneVerificationRequest::initializeModel() {

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_phone_region_code_isSet = false;
    m_phone_region_code_isValid = false;

    m_phone_verification_method_isSet = false;
    m_phone_verification_method_isValid = false;
}

void OAIRequestPhoneVerificationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestPhoneVerificationRequest::fromJsonObject(QJsonObject json) {

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_phone_region_code_isValid = ::OpenAPI::fromJsonValue(m_phone_region_code, json[QString("phoneRegionCode")]);
    m_phone_region_code_isSet = !json[QString("phoneRegionCode")].isNull() && m_phone_region_code_isValid;

    m_phone_verification_method_isValid = ::OpenAPI::fromJsonValue(m_phone_verification_method, json[QString("phoneVerificationMethod")]);
    m_phone_verification_method_isSet = !json[QString("phoneVerificationMethod")].isNull() && m_phone_verification_method_isValid;
}

QString OAIRequestPhoneVerificationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestPhoneVerificationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_phone_region_code_isSet) {
        obj.insert(QString("phoneRegionCode"), ::OpenAPI::toJsonValue(m_phone_region_code));
    }
    if (m_phone_verification_method_isSet) {
        obj.insert(QString("phoneVerificationMethod"), ::OpenAPI::toJsonValue(m_phone_verification_method));
    }
    return obj;
}

QString OAIRequestPhoneVerificationRequest::getLanguageCode() const {
    return m_language_code;
}
void OAIRequestPhoneVerificationRequest::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIRequestPhoneVerificationRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIRequestPhoneVerificationRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIRequestPhoneVerificationRequest::getPhoneNumber() const {
    return m_phone_number;
}
void OAIRequestPhoneVerificationRequest::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIRequestPhoneVerificationRequest::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIRequestPhoneVerificationRequest::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIRequestPhoneVerificationRequest::getPhoneRegionCode() const {
    return m_phone_region_code;
}
void OAIRequestPhoneVerificationRequest::setPhoneRegionCode(const QString &phone_region_code) {
    m_phone_region_code = phone_region_code;
    m_phone_region_code_isSet = true;
}

bool OAIRequestPhoneVerificationRequest::is_phone_region_code_Set() const{
    return m_phone_region_code_isSet;
}

bool OAIRequestPhoneVerificationRequest::is_phone_region_code_Valid() const{
    return m_phone_region_code_isValid;
}

QString OAIRequestPhoneVerificationRequest::getPhoneVerificationMethod() const {
    return m_phone_verification_method;
}
void OAIRequestPhoneVerificationRequest::setPhoneVerificationMethod(const QString &phone_verification_method) {
    m_phone_verification_method = phone_verification_method;
    m_phone_verification_method_isSet = true;
}

bool OAIRequestPhoneVerificationRequest::is_phone_verification_method_Set() const{
    return m_phone_verification_method_isSet;
}

bool OAIRequestPhoneVerificationRequest::is_phone_verification_method_Valid() const{
    return m_phone_verification_method_isValid;
}

bool OAIRequestPhoneVerificationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_verification_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestPhoneVerificationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
