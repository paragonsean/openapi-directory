/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductSubscriptionCost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductSubscriptionCost::OAIProductSubscriptionCost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductSubscriptionCost::OAIProductSubscriptionCost() {
    this->initializeModel();
}

OAIProductSubscriptionCost::~OAIProductSubscriptionCost() {}

void OAIProductSubscriptionCost::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_period_length_isSet = false;
    m_period_length_isValid = false;
}

void OAIProductSubscriptionCost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductSubscriptionCost::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_period_length_isValid = ::OpenAPI::fromJsonValue(m_period_length, json[QString("periodLength")]);
    m_period_length_isSet = !json[QString("periodLength")].isNull() && m_period_length_isValid;
}

QString OAIProductSubscriptionCost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductSubscriptionCost::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_period_length_isSet) {
        obj.insert(QString("periodLength"), ::OpenAPI::toJsonValue(m_period_length));
    }
    return obj;
}

OAIPrice OAIProductSubscriptionCost::getAmount() const {
    return m_amount;
}
void OAIProductSubscriptionCost::setAmount(const OAIPrice &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIProductSubscriptionCost::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIProductSubscriptionCost::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIProductSubscriptionCost::getPeriod() const {
    return m_period;
}
void OAIProductSubscriptionCost::setPeriod(const QString &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIProductSubscriptionCost::is_period_Set() const{
    return m_period_isSet;
}

bool OAIProductSubscriptionCost::is_period_Valid() const{
    return m_period_isValid;
}

QString OAIProductSubscriptionCost::getPeriodLength() const {
    return m_period_length;
}
void OAIProductSubscriptionCost::setPeriodLength(const QString &period_length) {
    m_period_length = period_length;
    m_period_length_isSet = true;
}

bool OAIProductSubscriptionCost::is_period_length_Set() const{
    return m_period_length_isSet;
}

bool OAIProductSubscriptionCost::is_period_length_Valid() const{
    return m_period_length_isValid;
}

bool OAIProductSubscriptionCost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_length_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductSubscriptionCost::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
