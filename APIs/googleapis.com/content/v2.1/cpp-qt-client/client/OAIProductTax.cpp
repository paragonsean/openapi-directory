/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductTax.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductTax::OAIProductTax(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductTax::OAIProductTax() {
    this->initializeModel();
}

OAIProductTax::~OAIProductTax() {}

void OAIProductTax::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_tax_ship_isSet = false;
    m_tax_ship_isValid = false;
}

void OAIProductTax::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductTax::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_tax_ship_isValid = ::OpenAPI::fromJsonValue(m_tax_ship, json[QString("taxShip")]);
    m_tax_ship_isSet = !json[QString("taxShip")].isNull() && m_tax_ship_isValid;
}

QString OAIProductTax::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductTax::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_tax_ship_isSet) {
        obj.insert(QString("taxShip"), ::OpenAPI::toJsonValue(m_tax_ship));
    }
    return obj;
}

QString OAIProductTax::getCountry() const {
    return m_country;
}
void OAIProductTax::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIProductTax::is_country_Set() const{
    return m_country_isSet;
}

bool OAIProductTax::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIProductTax::getLocationId() const {
    return m_location_id;
}
void OAIProductTax::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIProductTax::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIProductTax::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIProductTax::getPostalCode() const {
    return m_postal_code;
}
void OAIProductTax::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIProductTax::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIProductTax::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

double OAIProductTax::getRate() const {
    return m_rate;
}
void OAIProductTax::setRate(const double &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAIProductTax::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAIProductTax::is_rate_Valid() const{
    return m_rate_isValid;
}

QString OAIProductTax::getRegion() const {
    return m_region;
}
void OAIProductTax::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIProductTax::is_region_Set() const{
    return m_region_isSet;
}

bool OAIProductTax::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIProductTax::isTaxShip() const {
    return m_tax_ship;
}
void OAIProductTax::setTaxShip(const bool &tax_ship) {
    m_tax_ship = tax_ship;
    m_tax_ship_isSet = true;
}

bool OAIProductTax::is_tax_ship_Set() const{
    return m_tax_ship_isSet;
}

bool OAIProductTax::is_tax_ship_Valid() const{
    return m_tax_ship_isValid;
}

bool OAIProductTax::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_ship_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductTax::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
