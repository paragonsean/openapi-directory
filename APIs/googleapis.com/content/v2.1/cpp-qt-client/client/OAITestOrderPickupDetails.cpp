/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestOrderPickupDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestOrderPickupDetails::OAITestOrderPickupDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestOrderPickupDetails::OAITestOrderPickupDetails() {
    this->initializeModel();
}

OAITestOrderPickupDetails::~OAITestOrderPickupDetails() {}

void OAITestOrderPickupDetails::initializeModel() {

    m_location_code_isSet = false;
    m_location_code_isValid = false;

    m_pickup_location_address_isSet = false;
    m_pickup_location_address_isValid = false;

    m_pickup_location_type_isSet = false;
    m_pickup_location_type_isValid = false;

    m_pickup_persons_isSet = false;
    m_pickup_persons_isValid = false;
}

void OAITestOrderPickupDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestOrderPickupDetails::fromJsonObject(QJsonObject json) {

    m_location_code_isValid = ::OpenAPI::fromJsonValue(m_location_code, json[QString("locationCode")]);
    m_location_code_isSet = !json[QString("locationCode")].isNull() && m_location_code_isValid;

    m_pickup_location_address_isValid = ::OpenAPI::fromJsonValue(m_pickup_location_address, json[QString("pickupLocationAddress")]);
    m_pickup_location_address_isSet = !json[QString("pickupLocationAddress")].isNull() && m_pickup_location_address_isValid;

    m_pickup_location_type_isValid = ::OpenAPI::fromJsonValue(m_pickup_location_type, json[QString("pickupLocationType")]);
    m_pickup_location_type_isSet = !json[QString("pickupLocationType")].isNull() && m_pickup_location_type_isValid;

    m_pickup_persons_isValid = ::OpenAPI::fromJsonValue(m_pickup_persons, json[QString("pickupPersons")]);
    m_pickup_persons_isSet = !json[QString("pickupPersons")].isNull() && m_pickup_persons_isValid;
}

QString OAITestOrderPickupDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestOrderPickupDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_location_code_isSet) {
        obj.insert(QString("locationCode"), ::OpenAPI::toJsonValue(m_location_code));
    }
    if (m_pickup_location_address.isSet()) {
        obj.insert(QString("pickupLocationAddress"), ::OpenAPI::toJsonValue(m_pickup_location_address));
    }
    if (m_pickup_location_type_isSet) {
        obj.insert(QString("pickupLocationType"), ::OpenAPI::toJsonValue(m_pickup_location_type));
    }
    if (m_pickup_persons.size() > 0) {
        obj.insert(QString("pickupPersons"), ::OpenAPI::toJsonValue(m_pickup_persons));
    }
    return obj;
}

QString OAITestOrderPickupDetails::getLocationCode() const {
    return m_location_code;
}
void OAITestOrderPickupDetails::setLocationCode(const QString &location_code) {
    m_location_code = location_code;
    m_location_code_isSet = true;
}

bool OAITestOrderPickupDetails::is_location_code_Set() const{
    return m_location_code_isSet;
}

bool OAITestOrderPickupDetails::is_location_code_Valid() const{
    return m_location_code_isValid;
}

OAITestOrderAddress OAITestOrderPickupDetails::getPickupLocationAddress() const {
    return m_pickup_location_address;
}
void OAITestOrderPickupDetails::setPickupLocationAddress(const OAITestOrderAddress &pickup_location_address) {
    m_pickup_location_address = pickup_location_address;
    m_pickup_location_address_isSet = true;
}

bool OAITestOrderPickupDetails::is_pickup_location_address_Set() const{
    return m_pickup_location_address_isSet;
}

bool OAITestOrderPickupDetails::is_pickup_location_address_Valid() const{
    return m_pickup_location_address_isValid;
}

QString OAITestOrderPickupDetails::getPickupLocationType() const {
    return m_pickup_location_type;
}
void OAITestOrderPickupDetails::setPickupLocationType(const QString &pickup_location_type) {
    m_pickup_location_type = pickup_location_type;
    m_pickup_location_type_isSet = true;
}

bool OAITestOrderPickupDetails::is_pickup_location_type_Set() const{
    return m_pickup_location_type_isSet;
}

bool OAITestOrderPickupDetails::is_pickup_location_type_Valid() const{
    return m_pickup_location_type_isValid;
}

QList<OAITestOrderPickupDetailsPickupPerson> OAITestOrderPickupDetails::getPickupPersons() const {
    return m_pickup_persons;
}
void OAITestOrderPickupDetails::setPickupPersons(const QList<OAITestOrderPickupDetailsPickupPerson> &pickup_persons) {
    m_pickup_persons = pickup_persons;
    m_pickup_persons_isSet = true;
}

bool OAITestOrderPickupDetails::is_pickup_persons_Set() const{
    return m_pickup_persons_isSet;
}

bool OAITestOrderPickupDetails::is_pickup_persons_Valid() const{
    return m_pickup_persons_isValid;
}

bool OAITestOrderPickupDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_location_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_location_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_persons.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestOrderPickupDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
