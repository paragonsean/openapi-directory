/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUrlSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUrlSettings::OAIUrlSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUrlSettings::OAIUrlSettings() {
    this->initializeModel();
}

OAIUrlSettings::~OAIUrlSettings() {}

void OAIUrlSettings::initializeModel() {

    m_cart_uri_template_isSet = false;
    m_cart_uri_template_isValid = false;

    m_checkout_uri_template_isSet = false;
    m_checkout_uri_template_isValid = false;
}

void OAIUrlSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUrlSettings::fromJsonObject(QJsonObject json) {

    m_cart_uri_template_isValid = ::OpenAPI::fromJsonValue(m_cart_uri_template, json[QString("cartUriTemplate")]);
    m_cart_uri_template_isSet = !json[QString("cartUriTemplate")].isNull() && m_cart_uri_template_isValid;

    m_checkout_uri_template_isValid = ::OpenAPI::fromJsonValue(m_checkout_uri_template, json[QString("checkoutUriTemplate")]);
    m_checkout_uri_template_isSet = !json[QString("checkoutUriTemplate")].isNull() && m_checkout_uri_template_isValid;
}

QString OAIUrlSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUrlSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_cart_uri_template_isSet) {
        obj.insert(QString("cartUriTemplate"), ::OpenAPI::toJsonValue(m_cart_uri_template));
    }
    if (m_checkout_uri_template_isSet) {
        obj.insert(QString("checkoutUriTemplate"), ::OpenAPI::toJsonValue(m_checkout_uri_template));
    }
    return obj;
}

QString OAIUrlSettings::getCartUriTemplate() const {
    return m_cart_uri_template;
}
void OAIUrlSettings::setCartUriTemplate(const QString &cart_uri_template) {
    m_cart_uri_template = cart_uri_template;
    m_cart_uri_template_isSet = true;
}

bool OAIUrlSettings::is_cart_uri_template_Set() const{
    return m_cart_uri_template_isSet;
}

bool OAIUrlSettings::is_cart_uri_template_Valid() const{
    return m_cart_uri_template_isValid;
}

QString OAIUrlSettings::getCheckoutUriTemplate() const {
    return m_checkout_uri_template;
}
void OAIUrlSettings::setCheckoutUriTemplate(const QString &checkout_uri_template) {
    m_checkout_uri_template = checkout_uri_template;
    m_checkout_uri_template_isSet = true;
}

bool OAIUrlSettings::is_checkout_uri_template_Set() const{
    return m_checkout_uri_template_isSet;
}

bool OAIUrlSettings::is_checkout_uri_template_Valid() const{
    return m_checkout_uri_template_isValid;
}

bool OAIUrlSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cart_uri_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkout_uri_template_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUrlSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
