/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBestSellers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBestSellers::OAIBestSellers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBestSellers::OAIBestSellers() {
    this->initializeModel();
}

OAIBestSellers::~OAIBestSellers() {}

void OAIBestSellers::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_previous_rank_isSet = false;
    m_previous_rank_isValid = false;

    m_previous_relative_demand_isSet = false;
    m_previous_relative_demand_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_relative_demand_isSet = false;
    m_relative_demand_isValid = false;

    m_relative_demand_change_isSet = false;
    m_relative_demand_change_isValid = false;

    m_report_date_isSet = false;
    m_report_date_isValid = false;

    m_report_granularity_isSet = false;
    m_report_granularity_isValid = false;
}

void OAIBestSellers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBestSellers::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_previous_rank_isValid = ::OpenAPI::fromJsonValue(m_previous_rank, json[QString("previousRank")]);
    m_previous_rank_isSet = !json[QString("previousRank")].isNull() && m_previous_rank_isValid;

    m_previous_relative_demand_isValid = ::OpenAPI::fromJsonValue(m_previous_relative_demand, json[QString("previousRelativeDemand")]);
    m_previous_relative_demand_isSet = !json[QString("previousRelativeDemand")].isNull() && m_previous_relative_demand_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;

    m_relative_demand_isValid = ::OpenAPI::fromJsonValue(m_relative_demand, json[QString("relativeDemand")]);
    m_relative_demand_isSet = !json[QString("relativeDemand")].isNull() && m_relative_demand_isValid;

    m_relative_demand_change_isValid = ::OpenAPI::fromJsonValue(m_relative_demand_change, json[QString("relativeDemandChange")]);
    m_relative_demand_change_isSet = !json[QString("relativeDemandChange")].isNull() && m_relative_demand_change_isValid;

    m_report_date_isValid = ::OpenAPI::fromJsonValue(m_report_date, json[QString("reportDate")]);
    m_report_date_isSet = !json[QString("reportDate")].isNull() && m_report_date_isValid;

    m_report_granularity_isValid = ::OpenAPI::fromJsonValue(m_report_granularity, json[QString("reportGranularity")]);
    m_report_granularity_isSet = !json[QString("reportGranularity")].isNull() && m_report_granularity_isValid;
}

QString OAIBestSellers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBestSellers::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_previous_rank_isSet) {
        obj.insert(QString("previousRank"), ::OpenAPI::toJsonValue(m_previous_rank));
    }
    if (m_previous_relative_demand_isSet) {
        obj.insert(QString("previousRelativeDemand"), ::OpenAPI::toJsonValue(m_previous_relative_demand));
    }
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_relative_demand_isSet) {
        obj.insert(QString("relativeDemand"), ::OpenAPI::toJsonValue(m_relative_demand));
    }
    if (m_relative_demand_change_isSet) {
        obj.insert(QString("relativeDemandChange"), ::OpenAPI::toJsonValue(m_relative_demand_change));
    }
    if (m_report_date.isSet()) {
        obj.insert(QString("reportDate"), ::OpenAPI::toJsonValue(m_report_date));
    }
    if (m_report_granularity_isSet) {
        obj.insert(QString("reportGranularity"), ::OpenAPI::toJsonValue(m_report_granularity));
    }
    return obj;
}

QString OAIBestSellers::getCategoryId() const {
    return m_category_id;
}
void OAIBestSellers::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIBestSellers::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIBestSellers::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAIBestSellers::getCountryCode() const {
    return m_country_code;
}
void OAIBestSellers::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIBestSellers::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIBestSellers::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIBestSellers::getPreviousRank() const {
    return m_previous_rank;
}
void OAIBestSellers::setPreviousRank(const QString &previous_rank) {
    m_previous_rank = previous_rank;
    m_previous_rank_isSet = true;
}

bool OAIBestSellers::is_previous_rank_Set() const{
    return m_previous_rank_isSet;
}

bool OAIBestSellers::is_previous_rank_Valid() const{
    return m_previous_rank_isValid;
}

QString OAIBestSellers::getPreviousRelativeDemand() const {
    return m_previous_relative_demand;
}
void OAIBestSellers::setPreviousRelativeDemand(const QString &previous_relative_demand) {
    m_previous_relative_demand = previous_relative_demand;
    m_previous_relative_demand_isSet = true;
}

bool OAIBestSellers::is_previous_relative_demand_Set() const{
    return m_previous_relative_demand_isSet;
}

bool OAIBestSellers::is_previous_relative_demand_Valid() const{
    return m_previous_relative_demand_isValid;
}

QString OAIBestSellers::getRank() const {
    return m_rank;
}
void OAIBestSellers::setRank(const QString &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAIBestSellers::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAIBestSellers::is_rank_Valid() const{
    return m_rank_isValid;
}

QString OAIBestSellers::getRelativeDemand() const {
    return m_relative_demand;
}
void OAIBestSellers::setRelativeDemand(const QString &relative_demand) {
    m_relative_demand = relative_demand;
    m_relative_demand_isSet = true;
}

bool OAIBestSellers::is_relative_demand_Set() const{
    return m_relative_demand_isSet;
}

bool OAIBestSellers::is_relative_demand_Valid() const{
    return m_relative_demand_isValid;
}

QString OAIBestSellers::getRelativeDemandChange() const {
    return m_relative_demand_change;
}
void OAIBestSellers::setRelativeDemandChange(const QString &relative_demand_change) {
    m_relative_demand_change = relative_demand_change;
    m_relative_demand_change_isSet = true;
}

bool OAIBestSellers::is_relative_demand_change_Set() const{
    return m_relative_demand_change_isSet;
}

bool OAIBestSellers::is_relative_demand_change_Valid() const{
    return m_relative_demand_change_isValid;
}

OAIDate OAIBestSellers::getReportDate() const {
    return m_report_date;
}
void OAIBestSellers::setReportDate(const OAIDate &report_date) {
    m_report_date = report_date;
    m_report_date_isSet = true;
}

bool OAIBestSellers::is_report_date_Set() const{
    return m_report_date_isSet;
}

bool OAIBestSellers::is_report_date_Valid() const{
    return m_report_date_isValid;
}

QString OAIBestSellers::getReportGranularity() const {
    return m_report_granularity;
}
void OAIBestSellers::setReportGranularity(const QString &report_granularity) {
    m_report_granularity = report_granularity;
    m_report_granularity_isSet = true;
}

bool OAIBestSellers::is_report_granularity_Set() const{
    return m_report_granularity_isSet;
}

bool OAIBestSellers::is_report_granularity_Valid() const{
    return m_report_granularity_isValid;
}

bool OAIBestSellers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_relative_demand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_demand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_demand_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_granularity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBestSellers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
