/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountStatusAccountLevelIssue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountStatusAccountLevelIssue::OAIAccountStatusAccountLevelIssue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountStatusAccountLevelIssue::OAIAccountStatusAccountLevelIssue() {
    this->initializeModel();
}

OAIAccountStatusAccountLevelIssue::~OAIAccountStatusAccountLevelIssue() {}

void OAIAccountStatusAccountLevelIssue::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_documentation_isSet = false;
    m_documentation_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIAccountStatusAccountLevelIssue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountStatusAccountLevelIssue::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_documentation_isValid = ::OpenAPI::fromJsonValue(m_documentation, json[QString("documentation")]);
    m_documentation_isSet = !json[QString("documentation")].isNull() && m_documentation_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIAccountStatusAccountLevelIssue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountStatusAccountLevelIssue::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_documentation_isSet) {
        obj.insert(QString("documentation"), ::OpenAPI::toJsonValue(m_documentation));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIAccountStatusAccountLevelIssue::getCountry() const {
    return m_country;
}
void OAIAccountStatusAccountLevelIssue::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAccountStatusAccountLevelIssue::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAccountStatusAccountLevelIssue::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAccountStatusAccountLevelIssue::getDestination() const {
    return m_destination;
}
void OAIAccountStatusAccountLevelIssue::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIAccountStatusAccountLevelIssue::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIAccountStatusAccountLevelIssue::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAIAccountStatusAccountLevelIssue::getDetail() const {
    return m_detail;
}
void OAIAccountStatusAccountLevelIssue::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIAccountStatusAccountLevelIssue::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIAccountStatusAccountLevelIssue::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIAccountStatusAccountLevelIssue::getDocumentation() const {
    return m_documentation;
}
void OAIAccountStatusAccountLevelIssue::setDocumentation(const QString &documentation) {
    m_documentation = documentation;
    m_documentation_isSet = true;
}

bool OAIAccountStatusAccountLevelIssue::is_documentation_Set() const{
    return m_documentation_isSet;
}

bool OAIAccountStatusAccountLevelIssue::is_documentation_Valid() const{
    return m_documentation_isValid;
}

QString OAIAccountStatusAccountLevelIssue::getId() const {
    return m_id;
}
void OAIAccountStatusAccountLevelIssue::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccountStatusAccountLevelIssue::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccountStatusAccountLevelIssue::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAccountStatusAccountLevelIssue::getSeverity() const {
    return m_severity;
}
void OAIAccountStatusAccountLevelIssue::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIAccountStatusAccountLevelIssue::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIAccountStatusAccountLevelIssue::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIAccountStatusAccountLevelIssue::getTitle() const {
    return m_title;
}
void OAIAccountStatusAccountLevelIssue::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAccountStatusAccountLevelIssue::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAccountStatusAccountLevelIssue::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIAccountStatusAccountLevelIssue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountStatusAccountLevelIssue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
