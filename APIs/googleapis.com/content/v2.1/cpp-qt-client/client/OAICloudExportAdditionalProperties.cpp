/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudExportAdditionalProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudExportAdditionalProperties::OAICloudExportAdditionalProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudExportAdditionalProperties::OAICloudExportAdditionalProperties() {
    this->initializeModel();
}

OAICloudExportAdditionalProperties::~OAICloudExportAdditionalProperties() {}

void OAICloudExportAdditionalProperties::initializeModel() {

    m_bool_value_isSet = false;
    m_bool_value_isValid = false;

    m_float_value_isSet = false;
    m_float_value_isValid = false;

    m_int_value_isSet = false;
    m_int_value_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_min_value_isSet = false;
    m_min_value_isValid = false;

    m_property_name_isSet = false;
    m_property_name_isValid = false;

    m_text_value_isSet = false;
    m_text_value_isValid = false;

    m_unit_code_isSet = false;
    m_unit_code_isValid = false;
}

void OAICloudExportAdditionalProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudExportAdditionalProperties::fromJsonObject(QJsonObject json) {

    m_bool_value_isValid = ::OpenAPI::fromJsonValue(m_bool_value, json[QString("boolValue")]);
    m_bool_value_isSet = !json[QString("boolValue")].isNull() && m_bool_value_isValid;

    m_float_value_isValid = ::OpenAPI::fromJsonValue(m_float_value, json[QString("floatValue")]);
    m_float_value_isSet = !json[QString("floatValue")].isNull() && m_float_value_isValid;

    m_int_value_isValid = ::OpenAPI::fromJsonValue(m_int_value, json[QString("intValue")]);
    m_int_value_isSet = !json[QString("intValue")].isNull() && m_int_value_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("maxValue")]);
    m_max_value_isSet = !json[QString("maxValue")].isNull() && m_max_value_isValid;

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("minValue")]);
    m_min_value_isSet = !json[QString("minValue")].isNull() && m_min_value_isValid;

    m_property_name_isValid = ::OpenAPI::fromJsonValue(m_property_name, json[QString("propertyName")]);
    m_property_name_isSet = !json[QString("propertyName")].isNull() && m_property_name_isValid;

    m_text_value_isValid = ::OpenAPI::fromJsonValue(m_text_value, json[QString("textValue")]);
    m_text_value_isSet = !json[QString("textValue")].isNull() && m_text_value_isValid;

    m_unit_code_isValid = ::OpenAPI::fromJsonValue(m_unit_code, json[QString("unitCode")]);
    m_unit_code_isSet = !json[QString("unitCode")].isNull() && m_unit_code_isValid;
}

QString OAICloudExportAdditionalProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudExportAdditionalProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_bool_value_isSet) {
        obj.insert(QString("boolValue"), ::OpenAPI::toJsonValue(m_bool_value));
    }
    if (m_float_value.size() > 0) {
        obj.insert(QString("floatValue"), ::OpenAPI::toJsonValue(m_float_value));
    }
    if (m_int_value.size() > 0) {
        obj.insert(QString("intValue"), ::OpenAPI::toJsonValue(m_int_value));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("maxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_min_value_isSet) {
        obj.insert(QString("minValue"), ::OpenAPI::toJsonValue(m_min_value));
    }
    if (m_property_name_isSet) {
        obj.insert(QString("propertyName"), ::OpenAPI::toJsonValue(m_property_name));
    }
    if (m_text_value.size() > 0) {
        obj.insert(QString("textValue"), ::OpenAPI::toJsonValue(m_text_value));
    }
    if (m_unit_code_isSet) {
        obj.insert(QString("unitCode"), ::OpenAPI::toJsonValue(m_unit_code));
    }
    return obj;
}

bool OAICloudExportAdditionalProperties::isBoolValue() const {
    return m_bool_value;
}
void OAICloudExportAdditionalProperties::setBoolValue(const bool &bool_value) {
    m_bool_value = bool_value;
    m_bool_value_isSet = true;
}

bool OAICloudExportAdditionalProperties::is_bool_value_Set() const{
    return m_bool_value_isSet;
}

bool OAICloudExportAdditionalProperties::is_bool_value_Valid() const{
    return m_bool_value_isValid;
}

QList<float> OAICloudExportAdditionalProperties::getFloatValue() const {
    return m_float_value;
}
void OAICloudExportAdditionalProperties::setFloatValue(const QList<float> &float_value) {
    m_float_value = float_value;
    m_float_value_isSet = true;
}

bool OAICloudExportAdditionalProperties::is_float_value_Set() const{
    return m_float_value_isSet;
}

bool OAICloudExportAdditionalProperties::is_float_value_Valid() const{
    return m_float_value_isValid;
}

QList<QString> OAICloudExportAdditionalProperties::getIntValue() const {
    return m_int_value;
}
void OAICloudExportAdditionalProperties::setIntValue(const QList<QString> &int_value) {
    m_int_value = int_value;
    m_int_value_isSet = true;
}

bool OAICloudExportAdditionalProperties::is_int_value_Set() const{
    return m_int_value_isSet;
}

bool OAICloudExportAdditionalProperties::is_int_value_Valid() const{
    return m_int_value_isValid;
}

float OAICloudExportAdditionalProperties::getMaxValue() const {
    return m_max_value;
}
void OAICloudExportAdditionalProperties::setMaxValue(const float &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAICloudExportAdditionalProperties::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAICloudExportAdditionalProperties::is_max_value_Valid() const{
    return m_max_value_isValid;
}

float OAICloudExportAdditionalProperties::getMinValue() const {
    return m_min_value;
}
void OAICloudExportAdditionalProperties::setMinValue(const float &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAICloudExportAdditionalProperties::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAICloudExportAdditionalProperties::is_min_value_Valid() const{
    return m_min_value_isValid;
}

QString OAICloudExportAdditionalProperties::getPropertyName() const {
    return m_property_name;
}
void OAICloudExportAdditionalProperties::setPropertyName(const QString &property_name) {
    m_property_name = property_name;
    m_property_name_isSet = true;
}

bool OAICloudExportAdditionalProperties::is_property_name_Set() const{
    return m_property_name_isSet;
}

bool OAICloudExportAdditionalProperties::is_property_name_Valid() const{
    return m_property_name_isValid;
}

QList<QString> OAICloudExportAdditionalProperties::getTextValue() const {
    return m_text_value;
}
void OAICloudExportAdditionalProperties::setTextValue(const QList<QString> &text_value) {
    m_text_value = text_value;
    m_text_value_isSet = true;
}

bool OAICloudExportAdditionalProperties::is_text_value_Set() const{
    return m_text_value_isSet;
}

bool OAICloudExportAdditionalProperties::is_text_value_Valid() const{
    return m_text_value_isValid;
}

QString OAICloudExportAdditionalProperties::getUnitCode() const {
    return m_unit_code;
}
void OAICloudExportAdditionalProperties::setUnitCode(const QString &unit_code) {
    m_unit_code = unit_code;
    m_unit_code_isSet = true;
}

bool OAICloudExportAdditionalProperties::is_unit_code_Set() const{
    return m_unit_code_isSet;
}

bool OAICloudExportAdditionalProperties::is_unit_code_Valid() const{
    return m_unit_code_isValid;
}

bool OAICloudExportAdditionalProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bool_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_float_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_int_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudExportAdditionalProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
