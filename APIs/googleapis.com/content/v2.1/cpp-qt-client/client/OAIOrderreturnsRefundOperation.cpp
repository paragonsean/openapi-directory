/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderreturnsRefundOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderreturnsRefundOperation::OAIOrderreturnsRefundOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderreturnsRefundOperation::OAIOrderreturnsRefundOperation() {
    this->initializeModel();
}

OAIOrderreturnsRefundOperation::~OAIOrderreturnsRefundOperation() {}

void OAIOrderreturnsRefundOperation::initializeModel() {

    m_full_refund_isSet = false;
    m_full_refund_isValid = false;

    m_partial_refund_isSet = false;
    m_partial_refund_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;

    m_reason_text_isSet = false;
    m_reason_text_isValid = false;

    m_return_refund_reason_isSet = false;
    m_return_refund_reason_isValid = false;
}

void OAIOrderreturnsRefundOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderreturnsRefundOperation::fromJsonObject(QJsonObject json) {

    m_full_refund_isValid = ::OpenAPI::fromJsonValue(m_full_refund, json[QString("fullRefund")]);
    m_full_refund_isSet = !json[QString("fullRefund")].isNull() && m_full_refund_isValid;

    m_partial_refund_isValid = ::OpenAPI::fromJsonValue(m_partial_refund, json[QString("partialRefund")]);
    m_partial_refund_isSet = !json[QString("partialRefund")].isNull() && m_partial_refund_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(m_payment_type, json[QString("paymentType")]);
    m_payment_type_isSet = !json[QString("paymentType")].isNull() && m_payment_type_isValid;

    m_reason_text_isValid = ::OpenAPI::fromJsonValue(m_reason_text, json[QString("reasonText")]);
    m_reason_text_isSet = !json[QString("reasonText")].isNull() && m_reason_text_isValid;

    m_return_refund_reason_isValid = ::OpenAPI::fromJsonValue(m_return_refund_reason, json[QString("returnRefundReason")]);
    m_return_refund_reason_isSet = !json[QString("returnRefundReason")].isNull() && m_return_refund_reason_isValid;
}

QString OAIOrderreturnsRefundOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderreturnsRefundOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_full_refund_isSet) {
        obj.insert(QString("fullRefund"), ::OpenAPI::toJsonValue(m_full_refund));
    }
    if (m_partial_refund.isSet()) {
        obj.insert(QString("partialRefund"), ::OpenAPI::toJsonValue(m_partial_refund));
    }
    if (m_payment_type_isSet) {
        obj.insert(QString("paymentType"), ::OpenAPI::toJsonValue(m_payment_type));
    }
    if (m_reason_text_isSet) {
        obj.insert(QString("reasonText"), ::OpenAPI::toJsonValue(m_reason_text));
    }
    if (m_return_refund_reason_isSet) {
        obj.insert(QString("returnRefundReason"), ::OpenAPI::toJsonValue(m_return_refund_reason));
    }
    return obj;
}

bool OAIOrderreturnsRefundOperation::isFullRefund() const {
    return m_full_refund;
}
void OAIOrderreturnsRefundOperation::setFullRefund(const bool &full_refund) {
    m_full_refund = full_refund;
    m_full_refund_isSet = true;
}

bool OAIOrderreturnsRefundOperation::is_full_refund_Set() const{
    return m_full_refund_isSet;
}

bool OAIOrderreturnsRefundOperation::is_full_refund_Valid() const{
    return m_full_refund_isValid;
}

OAIOrderreturnsPartialRefund OAIOrderreturnsRefundOperation::getPartialRefund() const {
    return m_partial_refund;
}
void OAIOrderreturnsRefundOperation::setPartialRefund(const OAIOrderreturnsPartialRefund &partial_refund) {
    m_partial_refund = partial_refund;
    m_partial_refund_isSet = true;
}

bool OAIOrderreturnsRefundOperation::is_partial_refund_Set() const{
    return m_partial_refund_isSet;
}

bool OAIOrderreturnsRefundOperation::is_partial_refund_Valid() const{
    return m_partial_refund_isValid;
}

QString OAIOrderreturnsRefundOperation::getPaymentType() const {
    return m_payment_type;
}
void OAIOrderreturnsRefundOperation::setPaymentType(const QString &payment_type) {
    m_payment_type = payment_type;
    m_payment_type_isSet = true;
}

bool OAIOrderreturnsRefundOperation::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAIOrderreturnsRefundOperation::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

QString OAIOrderreturnsRefundOperation::getReasonText() const {
    return m_reason_text;
}
void OAIOrderreturnsRefundOperation::setReasonText(const QString &reason_text) {
    m_reason_text = reason_text;
    m_reason_text_isSet = true;
}

bool OAIOrderreturnsRefundOperation::is_reason_text_Set() const{
    return m_reason_text_isSet;
}

bool OAIOrderreturnsRefundOperation::is_reason_text_Valid() const{
    return m_reason_text_isValid;
}

QString OAIOrderreturnsRefundOperation::getReturnRefundReason() const {
    return m_return_refund_reason;
}
void OAIOrderreturnsRefundOperation::setReturnRefundReason(const QString &return_refund_reason) {
    m_return_refund_reason = return_refund_reason;
    m_return_refund_reason_isSet = true;
}

bool OAIOrderreturnsRefundOperation::is_return_refund_reason_Set() const{
    return m_return_refund_reason_isSet;
}

bool OAIOrderreturnsRefundOperation::is_return_refund_reason_Valid() const{
    return m_return_refund_reason_isValid;
}

bool OAIOrderreturnsRefundOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_full_refund_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_refund.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_refund_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderreturnsRefundOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
