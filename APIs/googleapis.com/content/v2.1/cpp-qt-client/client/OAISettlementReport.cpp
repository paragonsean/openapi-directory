/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISettlementReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISettlementReport::OAISettlementReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISettlementReport::OAISettlementReport() {
    this->initializeModel();
}

OAISettlementReport::~OAISettlementReport() {}

void OAISettlementReport::initializeModel() {

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_previous_balance_isSet = false;
    m_previous_balance_isValid = false;

    m_settlement_id_isSet = false;
    m_settlement_id_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_transfer_amount_isSet = false;
    m_transfer_amount_isValid = false;

    m_transfer_date_isSet = false;
    m_transfer_date_isValid = false;

    m_transfer_ids_isSet = false;
    m_transfer_ids_isValid = false;
}

void OAISettlementReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISettlementReport::fromJsonObject(QJsonObject json) {

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_previous_balance_isValid = ::OpenAPI::fromJsonValue(m_previous_balance, json[QString("previousBalance")]);
    m_previous_balance_isSet = !json[QString("previousBalance")].isNull() && m_previous_balance_isValid;

    m_settlement_id_isValid = ::OpenAPI::fromJsonValue(m_settlement_id, json[QString("settlementId")]);
    m_settlement_id_isSet = !json[QString("settlementId")].isNull() && m_settlement_id_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_transfer_amount_isValid = ::OpenAPI::fromJsonValue(m_transfer_amount, json[QString("transferAmount")]);
    m_transfer_amount_isSet = !json[QString("transferAmount")].isNull() && m_transfer_amount_isValid;

    m_transfer_date_isValid = ::OpenAPI::fromJsonValue(m_transfer_date, json[QString("transferDate")]);
    m_transfer_date_isSet = !json[QString("transferDate")].isNull() && m_transfer_date_isValid;

    m_transfer_ids_isValid = ::OpenAPI::fromJsonValue(m_transfer_ids, json[QString("transferIds")]);
    m_transfer_ids_isSet = !json[QString("transferIds")].isNull() && m_transfer_ids_isValid;
}

QString OAISettlementReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISettlementReport::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_previous_balance.isSet()) {
        obj.insert(QString("previousBalance"), ::OpenAPI::toJsonValue(m_previous_balance));
    }
    if (m_settlement_id_isSet) {
        obj.insert(QString("settlementId"), ::OpenAPI::toJsonValue(m_settlement_id));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_transfer_amount.isSet()) {
        obj.insert(QString("transferAmount"), ::OpenAPI::toJsonValue(m_transfer_amount));
    }
    if (m_transfer_date_isSet) {
        obj.insert(QString("transferDate"), ::OpenAPI::toJsonValue(m_transfer_date));
    }
    if (m_transfer_ids.size() > 0) {
        obj.insert(QString("transferIds"), ::OpenAPI::toJsonValue(m_transfer_ids));
    }
    return obj;
}

QString OAISettlementReport::getEndDate() const {
    return m_end_date;
}
void OAISettlementReport::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAISettlementReport::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAISettlementReport::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAISettlementReport::getKind() const {
    return m_kind;
}
void OAISettlementReport::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISettlementReport::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISettlementReport::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIPrice OAISettlementReport::getPreviousBalance() const {
    return m_previous_balance;
}
void OAISettlementReport::setPreviousBalance(const OAIPrice &previous_balance) {
    m_previous_balance = previous_balance;
    m_previous_balance_isSet = true;
}

bool OAISettlementReport::is_previous_balance_Set() const{
    return m_previous_balance_isSet;
}

bool OAISettlementReport::is_previous_balance_Valid() const{
    return m_previous_balance_isValid;
}

QString OAISettlementReport::getSettlementId() const {
    return m_settlement_id;
}
void OAISettlementReport::setSettlementId(const QString &settlement_id) {
    m_settlement_id = settlement_id;
    m_settlement_id_isSet = true;
}

bool OAISettlementReport::is_settlement_id_Set() const{
    return m_settlement_id_isSet;
}

bool OAISettlementReport::is_settlement_id_Valid() const{
    return m_settlement_id_isValid;
}

QString OAISettlementReport::getStartDate() const {
    return m_start_date;
}
void OAISettlementReport::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAISettlementReport::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAISettlementReport::is_start_date_Valid() const{
    return m_start_date_isValid;
}

OAIPrice OAISettlementReport::getTransferAmount() const {
    return m_transfer_amount;
}
void OAISettlementReport::setTransferAmount(const OAIPrice &transfer_amount) {
    m_transfer_amount = transfer_amount;
    m_transfer_amount_isSet = true;
}

bool OAISettlementReport::is_transfer_amount_Set() const{
    return m_transfer_amount_isSet;
}

bool OAISettlementReport::is_transfer_amount_Valid() const{
    return m_transfer_amount_isValid;
}

QString OAISettlementReport::getTransferDate() const {
    return m_transfer_date;
}
void OAISettlementReport::setTransferDate(const QString &transfer_date) {
    m_transfer_date = transfer_date;
    m_transfer_date_isSet = true;
}

bool OAISettlementReport::is_transfer_date_Set() const{
    return m_transfer_date_isSet;
}

bool OAISettlementReport::is_transfer_date_Valid() const{
    return m_transfer_date_isValid;
}

QList<QString> OAISettlementReport::getTransferIds() const {
    return m_transfer_ids;
}
void OAISettlementReport::setTransferIds(const QList<QString> &transfer_ids) {
    m_transfer_ids = transfer_ids;
    m_transfer_ids_isSet = true;
}

bool OAISettlementReport::is_transfer_ids_Set() const{
    return m_transfer_ids_isSet;
}

bool OAISettlementReport::is_transfer_ids_Valid() const{
    return m_transfer_ids_isValid;
}

bool OAISettlementReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settlement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISettlementReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
