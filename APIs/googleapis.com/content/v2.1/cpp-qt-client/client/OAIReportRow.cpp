/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportRow::OAIReportRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportRow::OAIReportRow() {
    this->initializeModel();
}

OAIReportRow::~OAIReportRow() {}

void OAIReportRow::initializeModel() {

    m_best_sellers_isSet = false;
    m_best_sellers_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_competitive_visibility_isSet = false;
    m_competitive_visibility_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_price_competitiveness_isSet = false;
    m_price_competitiveness_isValid = false;

    m_price_insights_isSet = false;
    m_price_insights_isValid = false;

    m_product_cluster_isSet = false;
    m_product_cluster_isValid = false;

    m_product_view_isSet = false;
    m_product_view_isValid = false;

    m_segments_isSet = false;
    m_segments_isValid = false;
}

void OAIReportRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportRow::fromJsonObject(QJsonObject json) {

    m_best_sellers_isValid = ::OpenAPI::fromJsonValue(m_best_sellers, json[QString("bestSellers")]);
    m_best_sellers_isSet = !json[QString("bestSellers")].isNull() && m_best_sellers_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_competitive_visibility_isValid = ::OpenAPI::fromJsonValue(m_competitive_visibility, json[QString("competitiveVisibility")]);
    m_competitive_visibility_isSet = !json[QString("competitiveVisibility")].isNull() && m_competitive_visibility_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_price_competitiveness_isValid = ::OpenAPI::fromJsonValue(m_price_competitiveness, json[QString("priceCompetitiveness")]);
    m_price_competitiveness_isSet = !json[QString("priceCompetitiveness")].isNull() && m_price_competitiveness_isValid;

    m_price_insights_isValid = ::OpenAPI::fromJsonValue(m_price_insights, json[QString("priceInsights")]);
    m_price_insights_isSet = !json[QString("priceInsights")].isNull() && m_price_insights_isValid;

    m_product_cluster_isValid = ::OpenAPI::fromJsonValue(m_product_cluster, json[QString("productCluster")]);
    m_product_cluster_isSet = !json[QString("productCluster")].isNull() && m_product_cluster_isValid;

    m_product_view_isValid = ::OpenAPI::fromJsonValue(m_product_view, json[QString("productView")]);
    m_product_view_isSet = !json[QString("productView")].isNull() && m_product_view_isValid;

    m_segments_isValid = ::OpenAPI::fromJsonValue(m_segments, json[QString("segments")]);
    m_segments_isSet = !json[QString("segments")].isNull() && m_segments_isValid;
}

QString OAIReportRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportRow::asJsonObject() const {
    QJsonObject obj;
    if (m_best_sellers.isSet()) {
        obj.insert(QString("bestSellers"), ::OpenAPI::toJsonValue(m_best_sellers));
    }
    if (m_brand.isSet()) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_competitive_visibility.isSet()) {
        obj.insert(QString("competitiveVisibility"), ::OpenAPI::toJsonValue(m_competitive_visibility));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_price_competitiveness.isSet()) {
        obj.insert(QString("priceCompetitiveness"), ::OpenAPI::toJsonValue(m_price_competitiveness));
    }
    if (m_price_insights.isSet()) {
        obj.insert(QString("priceInsights"), ::OpenAPI::toJsonValue(m_price_insights));
    }
    if (m_product_cluster.isSet()) {
        obj.insert(QString("productCluster"), ::OpenAPI::toJsonValue(m_product_cluster));
    }
    if (m_product_view.isSet()) {
        obj.insert(QString("productView"), ::OpenAPI::toJsonValue(m_product_view));
    }
    if (m_segments.isSet()) {
        obj.insert(QString("segments"), ::OpenAPI::toJsonValue(m_segments));
    }
    return obj;
}

OAIBestSellers OAIReportRow::getBestSellers() const {
    return m_best_sellers;
}
void OAIReportRow::setBestSellers(const OAIBestSellers &best_sellers) {
    m_best_sellers = best_sellers;
    m_best_sellers_isSet = true;
}

bool OAIReportRow::is_best_sellers_Set() const{
    return m_best_sellers_isSet;
}

bool OAIReportRow::is_best_sellers_Valid() const{
    return m_best_sellers_isValid;
}

OAIBrand OAIReportRow::getBrand() const {
    return m_brand;
}
void OAIReportRow::setBrand(const OAIBrand &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIReportRow::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIReportRow::is_brand_Valid() const{
    return m_brand_isValid;
}

OAICompetitiveVisibility OAIReportRow::getCompetitiveVisibility() const {
    return m_competitive_visibility;
}
void OAIReportRow::setCompetitiveVisibility(const OAICompetitiveVisibility &competitive_visibility) {
    m_competitive_visibility = competitive_visibility;
    m_competitive_visibility_isSet = true;
}

bool OAIReportRow::is_competitive_visibility_Set() const{
    return m_competitive_visibility_isSet;
}

bool OAIReportRow::is_competitive_visibility_Valid() const{
    return m_competitive_visibility_isValid;
}

OAIMetrics OAIReportRow::getMetrics() const {
    return m_metrics;
}
void OAIReportRow::setMetrics(const OAIMetrics &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIReportRow::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIReportRow::is_metrics_Valid() const{
    return m_metrics_isValid;
}

OAIPriceCompetitiveness OAIReportRow::getPriceCompetitiveness() const {
    return m_price_competitiveness;
}
void OAIReportRow::setPriceCompetitiveness(const OAIPriceCompetitiveness &price_competitiveness) {
    m_price_competitiveness = price_competitiveness;
    m_price_competitiveness_isSet = true;
}

bool OAIReportRow::is_price_competitiveness_Set() const{
    return m_price_competitiveness_isSet;
}

bool OAIReportRow::is_price_competitiveness_Valid() const{
    return m_price_competitiveness_isValid;
}

OAIPriceInsights OAIReportRow::getPriceInsights() const {
    return m_price_insights;
}
void OAIReportRow::setPriceInsights(const OAIPriceInsights &price_insights) {
    m_price_insights = price_insights;
    m_price_insights_isSet = true;
}

bool OAIReportRow::is_price_insights_Set() const{
    return m_price_insights_isSet;
}

bool OAIReportRow::is_price_insights_Valid() const{
    return m_price_insights_isValid;
}

OAIProductCluster OAIReportRow::getProductCluster() const {
    return m_product_cluster;
}
void OAIReportRow::setProductCluster(const OAIProductCluster &product_cluster) {
    m_product_cluster = product_cluster;
    m_product_cluster_isSet = true;
}

bool OAIReportRow::is_product_cluster_Set() const{
    return m_product_cluster_isSet;
}

bool OAIReportRow::is_product_cluster_Valid() const{
    return m_product_cluster_isValid;
}

OAIProductView OAIReportRow::getProductView() const {
    return m_product_view;
}
void OAIReportRow::setProductView(const OAIProductView &product_view) {
    m_product_view = product_view;
    m_product_view_isSet = true;
}

bool OAIReportRow::is_product_view_Set() const{
    return m_product_view_isSet;
}

bool OAIReportRow::is_product_view_Valid() const{
    return m_product_view_isValid;
}

OAISegments OAIReportRow::getSegments() const {
    return m_segments;
}
void OAIReportRow::setSegments(const OAISegments &segments) {
    m_segments = segments;
    m_segments_isSet = true;
}

bool OAIReportRow::is_segments_Set() const{
    return m_segments_isSet;
}

bool OAIReportRow::is_segments_Valid() const{
    return m_segments_isValid;
}

bool OAIReportRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_best_sellers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_competitive_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_competitiveness.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_insights.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
