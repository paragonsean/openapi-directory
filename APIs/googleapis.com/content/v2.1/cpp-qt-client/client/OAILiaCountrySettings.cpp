/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiaCountrySettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiaCountrySettings::OAILiaCountrySettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiaCountrySettings::OAILiaCountrySettings() {
    this->initializeModel();
}

OAILiaCountrySettings::~OAILiaCountrySettings() {}

void OAILiaCountrySettings::initializeModel() {

    m_about_isSet = false;
    m_about_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_hosted_local_storefront_active_isSet = false;
    m_hosted_local_storefront_active_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_omnichannel_experience_isSet = false;
    m_omnichannel_experience_isValid = false;

    m_on_display_to_order_isSet = false;
    m_on_display_to_order_isValid = false;

    m_pos_data_provider_isSet = false;
    m_pos_data_provider_isValid = false;

    m_store_pickup_active_isSet = false;
    m_store_pickup_active_isValid = false;
}

void OAILiaCountrySettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiaCountrySettings::fromJsonObject(QJsonObject json) {

    m_about_isValid = ::OpenAPI::fromJsonValue(m_about, json[QString("about")]);
    m_about_isSet = !json[QString("about")].isNull() && m_about_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_hosted_local_storefront_active_isValid = ::OpenAPI::fromJsonValue(m_hosted_local_storefront_active, json[QString("hostedLocalStorefrontActive")]);
    m_hosted_local_storefront_active_isSet = !json[QString("hostedLocalStorefrontActive")].isNull() && m_hosted_local_storefront_active_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_omnichannel_experience_isValid = ::OpenAPI::fromJsonValue(m_omnichannel_experience, json[QString("omnichannelExperience")]);
    m_omnichannel_experience_isSet = !json[QString("omnichannelExperience")].isNull() && m_omnichannel_experience_isValid;

    m_on_display_to_order_isValid = ::OpenAPI::fromJsonValue(m_on_display_to_order, json[QString("onDisplayToOrder")]);
    m_on_display_to_order_isSet = !json[QString("onDisplayToOrder")].isNull() && m_on_display_to_order_isValid;

    m_pos_data_provider_isValid = ::OpenAPI::fromJsonValue(m_pos_data_provider, json[QString("posDataProvider")]);
    m_pos_data_provider_isSet = !json[QString("posDataProvider")].isNull() && m_pos_data_provider_isValid;

    m_store_pickup_active_isValid = ::OpenAPI::fromJsonValue(m_store_pickup_active, json[QString("storePickupActive")]);
    m_store_pickup_active_isSet = !json[QString("storePickupActive")].isNull() && m_store_pickup_active_isValid;
}

QString OAILiaCountrySettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiaCountrySettings::asJsonObject() const {
    QJsonObject obj;
    if (m_about.isSet()) {
        obj.insert(QString("about"), ::OpenAPI::toJsonValue(m_about));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_hosted_local_storefront_active_isSet) {
        obj.insert(QString("hostedLocalStorefrontActive"), ::OpenAPI::toJsonValue(m_hosted_local_storefront_active));
    }
    if (m_inventory.isSet()) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_omnichannel_experience.isSet()) {
        obj.insert(QString("omnichannelExperience"), ::OpenAPI::toJsonValue(m_omnichannel_experience));
    }
    if (m_on_display_to_order.isSet()) {
        obj.insert(QString("onDisplayToOrder"), ::OpenAPI::toJsonValue(m_on_display_to_order));
    }
    if (m_pos_data_provider.isSet()) {
        obj.insert(QString("posDataProvider"), ::OpenAPI::toJsonValue(m_pos_data_provider));
    }
    if (m_store_pickup_active_isSet) {
        obj.insert(QString("storePickupActive"), ::OpenAPI::toJsonValue(m_store_pickup_active));
    }
    return obj;
}

OAILiaAboutPageSettings OAILiaCountrySettings::getAbout() const {
    return m_about;
}
void OAILiaCountrySettings::setAbout(const OAILiaAboutPageSettings &about) {
    m_about = about;
    m_about_isSet = true;
}

bool OAILiaCountrySettings::is_about_Set() const{
    return m_about_isSet;
}

bool OAILiaCountrySettings::is_about_Valid() const{
    return m_about_isValid;
}

QString OAILiaCountrySettings::getCountry() const {
    return m_country;
}
void OAILiaCountrySettings::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAILiaCountrySettings::is_country_Set() const{
    return m_country_isSet;
}

bool OAILiaCountrySettings::is_country_Valid() const{
    return m_country_isValid;
}

bool OAILiaCountrySettings::isHostedLocalStorefrontActive() const {
    return m_hosted_local_storefront_active;
}
void OAILiaCountrySettings::setHostedLocalStorefrontActive(const bool &hosted_local_storefront_active) {
    m_hosted_local_storefront_active = hosted_local_storefront_active;
    m_hosted_local_storefront_active_isSet = true;
}

bool OAILiaCountrySettings::is_hosted_local_storefront_active_Set() const{
    return m_hosted_local_storefront_active_isSet;
}

bool OAILiaCountrySettings::is_hosted_local_storefront_active_Valid() const{
    return m_hosted_local_storefront_active_isValid;
}

OAILiaInventorySettings OAILiaCountrySettings::getInventory() const {
    return m_inventory;
}
void OAILiaCountrySettings::setInventory(const OAILiaInventorySettings &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAILiaCountrySettings::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAILiaCountrySettings::is_inventory_Valid() const{
    return m_inventory_isValid;
}

OAILiaOmnichannelExperience OAILiaCountrySettings::getOmnichannelExperience() const {
    return m_omnichannel_experience;
}
void OAILiaCountrySettings::setOmnichannelExperience(const OAILiaOmnichannelExperience &omnichannel_experience) {
    m_omnichannel_experience = omnichannel_experience;
    m_omnichannel_experience_isSet = true;
}

bool OAILiaCountrySettings::is_omnichannel_experience_Set() const{
    return m_omnichannel_experience_isSet;
}

bool OAILiaCountrySettings::is_omnichannel_experience_Valid() const{
    return m_omnichannel_experience_isValid;
}

OAILiaOnDisplayToOrderSettings OAILiaCountrySettings::getOnDisplayToOrder() const {
    return m_on_display_to_order;
}
void OAILiaCountrySettings::setOnDisplayToOrder(const OAILiaOnDisplayToOrderSettings &on_display_to_order) {
    m_on_display_to_order = on_display_to_order;
    m_on_display_to_order_isSet = true;
}

bool OAILiaCountrySettings::is_on_display_to_order_Set() const{
    return m_on_display_to_order_isSet;
}

bool OAILiaCountrySettings::is_on_display_to_order_Valid() const{
    return m_on_display_to_order_isValid;
}

OAILiaPosDataProvider OAILiaCountrySettings::getPosDataProvider() const {
    return m_pos_data_provider;
}
void OAILiaCountrySettings::setPosDataProvider(const OAILiaPosDataProvider &pos_data_provider) {
    m_pos_data_provider = pos_data_provider;
    m_pos_data_provider_isSet = true;
}

bool OAILiaCountrySettings::is_pos_data_provider_Set() const{
    return m_pos_data_provider_isSet;
}

bool OAILiaCountrySettings::is_pos_data_provider_Valid() const{
    return m_pos_data_provider_isValid;
}

bool OAILiaCountrySettings::isStorePickupActive() const {
    return m_store_pickup_active;
}
void OAILiaCountrySettings::setStorePickupActive(const bool &store_pickup_active) {
    m_store_pickup_active = store_pickup_active;
    m_store_pickup_active_isSet = true;
}

bool OAILiaCountrySettings::is_store_pickup_active_Set() const{
    return m_store_pickup_active_isSet;
}

bool OAILiaCountrySettings::is_store_pickup_active_Valid() const{
    return m_store_pickup_active_isValid;
}

bool OAILiaCountrySettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_about.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_local_storefront_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_omnichannel_experience.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_display_to_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pos_data_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_pickup_active_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiaCountrySettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
