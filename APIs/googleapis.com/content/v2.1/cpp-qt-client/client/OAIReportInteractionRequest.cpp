/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportInteractionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportInteractionRequest::OAIReportInteractionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportInteractionRequest::OAIReportInteractionRequest() {
    this->initializeModel();
}

OAIReportInteractionRequest::~OAIReportInteractionRequest() {}

void OAIReportInteractionRequest::initializeModel() {

    m_interaction_type_isSet = false;
    m_interaction_type_isValid = false;

    m_response_token_isSet = false;
    m_response_token_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIReportInteractionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportInteractionRequest::fromJsonObject(QJsonObject json) {

    m_interaction_type_isValid = ::OpenAPI::fromJsonValue(m_interaction_type, json[QString("interactionType")]);
    m_interaction_type_isSet = !json[QString("interactionType")].isNull() && m_interaction_type_isValid;

    m_response_token_isValid = ::OpenAPI::fromJsonValue(m_response_token, json[QString("responseToken")]);
    m_response_token_isSet = !json[QString("responseToken")].isNull() && m_response_token_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("subtype")]);
    m_subtype_isSet = !json[QString("subtype")].isNull() && m_subtype_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIReportInteractionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportInteractionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_interaction_type_isSet) {
        obj.insert(QString("interactionType"), ::OpenAPI::toJsonValue(m_interaction_type));
    }
    if (m_response_token_isSet) {
        obj.insert(QString("responseToken"), ::OpenAPI::toJsonValue(m_response_token));
    }
    if (m_subtype_isSet) {
        obj.insert(QString("subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIReportInteractionRequest::getInteractionType() const {
    return m_interaction_type;
}
void OAIReportInteractionRequest::setInteractionType(const QString &interaction_type) {
    m_interaction_type = interaction_type;
    m_interaction_type_isSet = true;
}

bool OAIReportInteractionRequest::is_interaction_type_Set() const{
    return m_interaction_type_isSet;
}

bool OAIReportInteractionRequest::is_interaction_type_Valid() const{
    return m_interaction_type_isValid;
}

QString OAIReportInteractionRequest::getResponseToken() const {
    return m_response_token;
}
void OAIReportInteractionRequest::setResponseToken(const QString &response_token) {
    m_response_token = response_token;
    m_response_token_isSet = true;
}

bool OAIReportInteractionRequest::is_response_token_Set() const{
    return m_response_token_isSet;
}

bool OAIReportInteractionRequest::is_response_token_Valid() const{
    return m_response_token_isValid;
}

QString OAIReportInteractionRequest::getSubtype() const {
    return m_subtype;
}
void OAIReportInteractionRequest::setSubtype(const QString &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAIReportInteractionRequest::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAIReportInteractionRequest::is_subtype_Valid() const{
    return m_subtype_isValid;
}

QString OAIReportInteractionRequest::getType() const {
    return m_type;
}
void OAIReportInteractionRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReportInteractionRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReportInteractionRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIReportInteractionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interaction_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportInteractionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
