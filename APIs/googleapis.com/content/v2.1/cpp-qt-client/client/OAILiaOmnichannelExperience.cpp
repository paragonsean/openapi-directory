/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiaOmnichannelExperience.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiaOmnichannelExperience::OAILiaOmnichannelExperience(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiaOmnichannelExperience::OAILiaOmnichannelExperience() {
    this->initializeModel();
}

OAILiaOmnichannelExperience::~OAILiaOmnichannelExperience() {}

void OAILiaOmnichannelExperience::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_lsf_type_isSet = false;
    m_lsf_type_isValid = false;

    m_pickup_types_isSet = false;
    m_pickup_types_isValid = false;
}

void OAILiaOmnichannelExperience::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiaOmnichannelExperience::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_lsf_type_isValid = ::OpenAPI::fromJsonValue(m_lsf_type, json[QString("lsfType")]);
    m_lsf_type_isSet = !json[QString("lsfType")].isNull() && m_lsf_type_isValid;

    m_pickup_types_isValid = ::OpenAPI::fromJsonValue(m_pickup_types, json[QString("pickupTypes")]);
    m_pickup_types_isSet = !json[QString("pickupTypes")].isNull() && m_pickup_types_isValid;
}

QString OAILiaOmnichannelExperience::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiaOmnichannelExperience::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_lsf_type_isSet) {
        obj.insert(QString("lsfType"), ::OpenAPI::toJsonValue(m_lsf_type));
    }
    if (m_pickup_types.size() > 0) {
        obj.insert(QString("pickupTypes"), ::OpenAPI::toJsonValue(m_pickup_types));
    }
    return obj;
}

QString OAILiaOmnichannelExperience::getCountry() const {
    return m_country;
}
void OAILiaOmnichannelExperience::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAILiaOmnichannelExperience::is_country_Set() const{
    return m_country_isSet;
}

bool OAILiaOmnichannelExperience::is_country_Valid() const{
    return m_country_isValid;
}

QString OAILiaOmnichannelExperience::getLsfType() const {
    return m_lsf_type;
}
void OAILiaOmnichannelExperience::setLsfType(const QString &lsf_type) {
    m_lsf_type = lsf_type;
    m_lsf_type_isSet = true;
}

bool OAILiaOmnichannelExperience::is_lsf_type_Set() const{
    return m_lsf_type_isSet;
}

bool OAILiaOmnichannelExperience::is_lsf_type_Valid() const{
    return m_lsf_type_isValid;
}

QList<QString> OAILiaOmnichannelExperience::getPickupTypes() const {
    return m_pickup_types;
}
void OAILiaOmnichannelExperience::setPickupTypes(const QList<QString> &pickup_types) {
    m_pickup_types = pickup_types;
    m_pickup_types_isSet = true;
}

bool OAILiaOmnichannelExperience::is_pickup_types_Set() const{
    return m_pickup_types_isSet;
}

bool OAILiaOmnichannelExperience::is_pickup_types_Valid() const{
    return m_pickup_types_isValid;
}

bool OAILiaOmnichannelExperience::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lsf_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiaOmnichannelExperience::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
