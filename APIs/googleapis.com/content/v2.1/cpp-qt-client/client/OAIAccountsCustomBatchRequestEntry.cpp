/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountsCustomBatchRequestEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountsCustomBatchRequestEntry::OAIAccountsCustomBatchRequestEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountsCustomBatchRequestEntry::OAIAccountsCustomBatchRequestEntry() {
    this->initializeModel();
}

OAIAccountsCustomBatchRequestEntry::~OAIAccountsCustomBatchRequestEntry() {}

void OAIAccountsCustomBatchRequestEntry::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_batch_id_isSet = false;
    m_batch_id_isValid = false;

    m_force_isSet = false;
    m_force_isValid = false;

    m_label_ids_isSet = false;
    m_label_ids_isValid = false;

    m_link_request_isSet = false;
    m_link_request_isValid = false;

    m_merchant_id_isSet = false;
    m_merchant_id_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_overwrite_isSet = false;
    m_overwrite_isValid = false;

    m_view_isSet = false;
    m_view_isValid = false;
}

void OAIAccountsCustomBatchRequestEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountsCustomBatchRequestEntry::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_batch_id_isValid = ::OpenAPI::fromJsonValue(m_batch_id, json[QString("batchId")]);
    m_batch_id_isSet = !json[QString("batchId")].isNull() && m_batch_id_isValid;

    m_force_isValid = ::OpenAPI::fromJsonValue(m_force, json[QString("force")]);
    m_force_isSet = !json[QString("force")].isNull() && m_force_isValid;

    m_label_ids_isValid = ::OpenAPI::fromJsonValue(m_label_ids, json[QString("labelIds")]);
    m_label_ids_isSet = !json[QString("labelIds")].isNull() && m_label_ids_isValid;

    m_link_request_isValid = ::OpenAPI::fromJsonValue(m_link_request, json[QString("linkRequest")]);
    m_link_request_isSet = !json[QString("linkRequest")].isNull() && m_link_request_isValid;

    m_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_id, json[QString("merchantId")]);
    m_merchant_id_isSet = !json[QString("merchantId")].isNull() && m_merchant_id_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_overwrite_isValid = ::OpenAPI::fromJsonValue(m_overwrite, json[QString("overwrite")]);
    m_overwrite_isSet = !json[QString("overwrite")].isNull() && m_overwrite_isValid;

    m_view_isValid = ::OpenAPI::fromJsonValue(m_view, json[QString("view")]);
    m_view_isSet = !json[QString("view")].isNull() && m_view_isValid;
}

QString OAIAccountsCustomBatchRequestEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountsCustomBatchRequestEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_batch_id_isSet) {
        obj.insert(QString("batchId"), ::OpenAPI::toJsonValue(m_batch_id));
    }
    if (m_force_isSet) {
        obj.insert(QString("force"), ::OpenAPI::toJsonValue(m_force));
    }
    if (m_label_ids.size() > 0) {
        obj.insert(QString("labelIds"), ::OpenAPI::toJsonValue(m_label_ids));
    }
    if (m_link_request.isSet()) {
        obj.insert(QString("linkRequest"), ::OpenAPI::toJsonValue(m_link_request));
    }
    if (m_merchant_id_isSet) {
        obj.insert(QString("merchantId"), ::OpenAPI::toJsonValue(m_merchant_id));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_overwrite_isSet) {
        obj.insert(QString("overwrite"), ::OpenAPI::toJsonValue(m_overwrite));
    }
    if (m_view_isSet) {
        obj.insert(QString("view"), ::OpenAPI::toJsonValue(m_view));
    }
    return obj;
}

OAIAccount OAIAccountsCustomBatchRequestEntry::getAccount() const {
    return m_account;
}
void OAIAccountsCustomBatchRequestEntry::setAccount(const OAIAccount &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIAccountsCustomBatchRequestEntry::is_account_Set() const{
    return m_account_isSet;
}

bool OAIAccountsCustomBatchRequestEntry::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIAccountsCustomBatchRequestEntry::getAccountId() const {
    return m_account_id;
}
void OAIAccountsCustomBatchRequestEntry::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAccountsCustomBatchRequestEntry::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAccountsCustomBatchRequestEntry::is_account_id_Valid() const{
    return m_account_id_isValid;
}

qint32 OAIAccountsCustomBatchRequestEntry::getBatchId() const {
    return m_batch_id;
}
void OAIAccountsCustomBatchRequestEntry::setBatchId(const qint32 &batch_id) {
    m_batch_id = batch_id;
    m_batch_id_isSet = true;
}

bool OAIAccountsCustomBatchRequestEntry::is_batch_id_Set() const{
    return m_batch_id_isSet;
}

bool OAIAccountsCustomBatchRequestEntry::is_batch_id_Valid() const{
    return m_batch_id_isValid;
}

bool OAIAccountsCustomBatchRequestEntry::isForce() const {
    return m_force;
}
void OAIAccountsCustomBatchRequestEntry::setForce(const bool &force) {
    m_force = force;
    m_force_isSet = true;
}

bool OAIAccountsCustomBatchRequestEntry::is_force_Set() const{
    return m_force_isSet;
}

bool OAIAccountsCustomBatchRequestEntry::is_force_Valid() const{
    return m_force_isValid;
}

QList<QString> OAIAccountsCustomBatchRequestEntry::getLabelIds() const {
    return m_label_ids;
}
void OAIAccountsCustomBatchRequestEntry::setLabelIds(const QList<QString> &label_ids) {
    m_label_ids = label_ids;
    m_label_ids_isSet = true;
}

bool OAIAccountsCustomBatchRequestEntry::is_label_ids_Set() const{
    return m_label_ids_isSet;
}

bool OAIAccountsCustomBatchRequestEntry::is_label_ids_Valid() const{
    return m_label_ids_isValid;
}

OAIAccountsCustomBatchRequestEntryLinkRequest OAIAccountsCustomBatchRequestEntry::getLinkRequest() const {
    return m_link_request;
}
void OAIAccountsCustomBatchRequestEntry::setLinkRequest(const OAIAccountsCustomBatchRequestEntryLinkRequest &link_request) {
    m_link_request = link_request;
    m_link_request_isSet = true;
}

bool OAIAccountsCustomBatchRequestEntry::is_link_request_Set() const{
    return m_link_request_isSet;
}

bool OAIAccountsCustomBatchRequestEntry::is_link_request_Valid() const{
    return m_link_request_isValid;
}

QString OAIAccountsCustomBatchRequestEntry::getMerchantId() const {
    return m_merchant_id;
}
void OAIAccountsCustomBatchRequestEntry::setMerchantId(const QString &merchant_id) {
    m_merchant_id = merchant_id;
    m_merchant_id_isSet = true;
}

bool OAIAccountsCustomBatchRequestEntry::is_merchant_id_Set() const{
    return m_merchant_id_isSet;
}

bool OAIAccountsCustomBatchRequestEntry::is_merchant_id_Valid() const{
    return m_merchant_id_isValid;
}

QString OAIAccountsCustomBatchRequestEntry::getMethod() const {
    return m_method;
}
void OAIAccountsCustomBatchRequestEntry::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIAccountsCustomBatchRequestEntry::is_method_Set() const{
    return m_method_isSet;
}

bool OAIAccountsCustomBatchRequestEntry::is_method_Valid() const{
    return m_method_isValid;
}

bool OAIAccountsCustomBatchRequestEntry::isOverwrite() const {
    return m_overwrite;
}
void OAIAccountsCustomBatchRequestEntry::setOverwrite(const bool &overwrite) {
    m_overwrite = overwrite;
    m_overwrite_isSet = true;
}

bool OAIAccountsCustomBatchRequestEntry::is_overwrite_Set() const{
    return m_overwrite_isSet;
}

bool OAIAccountsCustomBatchRequestEntry::is_overwrite_Valid() const{
    return m_overwrite_isValid;
}

QString OAIAccountsCustomBatchRequestEntry::getView() const {
    return m_view;
}
void OAIAccountsCustomBatchRequestEntry::setView(const QString &view) {
    m_view = view;
    m_view_isSet = true;
}

bool OAIAccountsCustomBatchRequestEntry::is_view_Set() const{
    return m_view_isSet;
}

bool OAIAccountsCustomBatchRequestEntry::is_view_Valid() const{
    return m_view_isValid;
}

bool OAIAccountsCustomBatchRequestEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overwrite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountsCustomBatchRequestEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
