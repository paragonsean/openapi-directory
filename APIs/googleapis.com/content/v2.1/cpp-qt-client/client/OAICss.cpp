/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICss.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICss::OAICss(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICss::OAICss() {
    this->initializeModel();
}

OAICss::~OAICss() {}

void OAICss::initializeModel() {

    m_css_domain_id_isSet = false;
    m_css_domain_id_isValid = false;

    m_css_group_id_isSet = false;
    m_css_group_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_homepage_uri_isSet = false;
    m_homepage_uri_isValid = false;

    m_label_ids_isSet = false;
    m_label_ids_isValid = false;
}

void OAICss::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICss::fromJsonObject(QJsonObject json) {

    m_css_domain_id_isValid = ::OpenAPI::fromJsonValue(m_css_domain_id, json[QString("cssDomainId")]);
    m_css_domain_id_isSet = !json[QString("cssDomainId")].isNull() && m_css_domain_id_isValid;

    m_css_group_id_isValid = ::OpenAPI::fromJsonValue(m_css_group_id, json[QString("cssGroupId")]);
    m_css_group_id_isSet = !json[QString("cssGroupId")].isNull() && m_css_group_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("fullName")]);
    m_full_name_isSet = !json[QString("fullName")].isNull() && m_full_name_isValid;

    m_homepage_uri_isValid = ::OpenAPI::fromJsonValue(m_homepage_uri, json[QString("homepageUri")]);
    m_homepage_uri_isSet = !json[QString("homepageUri")].isNull() && m_homepage_uri_isValid;

    m_label_ids_isValid = ::OpenAPI::fromJsonValue(m_label_ids, json[QString("labelIds")]);
    m_label_ids_isSet = !json[QString("labelIds")].isNull() && m_label_ids_isValid;
}

QString OAICss::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICss::asJsonObject() const {
    QJsonObject obj;
    if (m_css_domain_id_isSet) {
        obj.insert(QString("cssDomainId"), ::OpenAPI::toJsonValue(m_css_domain_id));
    }
    if (m_css_group_id_isSet) {
        obj.insert(QString("cssGroupId"), ::OpenAPI::toJsonValue(m_css_group_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("fullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_homepage_uri_isSet) {
        obj.insert(QString("homepageUri"), ::OpenAPI::toJsonValue(m_homepage_uri));
    }
    if (m_label_ids.size() > 0) {
        obj.insert(QString("labelIds"), ::OpenAPI::toJsonValue(m_label_ids));
    }
    return obj;
}

QString OAICss::getCssDomainId() const {
    return m_css_domain_id;
}
void OAICss::setCssDomainId(const QString &css_domain_id) {
    m_css_domain_id = css_domain_id;
    m_css_domain_id_isSet = true;
}

bool OAICss::is_css_domain_id_Set() const{
    return m_css_domain_id_isSet;
}

bool OAICss::is_css_domain_id_Valid() const{
    return m_css_domain_id_isValid;
}

QString OAICss::getCssGroupId() const {
    return m_css_group_id;
}
void OAICss::setCssGroupId(const QString &css_group_id) {
    m_css_group_id = css_group_id;
    m_css_group_id_isSet = true;
}

bool OAICss::is_css_group_id_Set() const{
    return m_css_group_id_isSet;
}

bool OAICss::is_css_group_id_Valid() const{
    return m_css_group_id_isValid;
}

QString OAICss::getDisplayName() const {
    return m_display_name;
}
void OAICss::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICss::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICss::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAICss::getFullName() const {
    return m_full_name;
}
void OAICss::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAICss::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAICss::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAICss::getHomepageUri() const {
    return m_homepage_uri;
}
void OAICss::setHomepageUri(const QString &homepage_uri) {
    m_homepage_uri = homepage_uri;
    m_homepage_uri_isSet = true;
}

bool OAICss::is_homepage_uri_Set() const{
    return m_homepage_uri_isSet;
}

bool OAICss::is_homepage_uri_Valid() const{
    return m_homepage_uri_isValid;
}

QList<QString> OAICss::getLabelIds() const {
    return m_label_ids;
}
void OAICss::setLabelIds(const QList<QString> &label_ids) {
    m_label_ids = label_ids;
    m_label_ids_isSet = true;
}

bool OAICss::is_label_ids_Set() const{
    return m_label_ids_isSet;
}

bool OAICss::is_label_ids_Valid() const{
    return m_label_ids_isValid;
}

bool OAICss::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_css_domain_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_css_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_homepage_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICss::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
