/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITable::OAITable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITable::OAITable() {
    this->initializeModel();
}

OAITable::~OAITable() {}

void OAITable::initializeModel() {

    m_column_headers_isSet = false;
    m_column_headers_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_row_headers_isSet = false;
    m_row_headers_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;
}

void OAITable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITable::fromJsonObject(QJsonObject json) {

    m_column_headers_isValid = ::OpenAPI::fromJsonValue(m_column_headers, json[QString("columnHeaders")]);
    m_column_headers_isSet = !json[QString("columnHeaders")].isNull() && m_column_headers_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_row_headers_isValid = ::OpenAPI::fromJsonValue(m_row_headers, json[QString("rowHeaders")]);
    m_row_headers_isSet = !json[QString("rowHeaders")].isNull() && m_row_headers_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;
}

QString OAITable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITable::asJsonObject() const {
    QJsonObject obj;
    if (m_column_headers.isSet()) {
        obj.insert(QString("columnHeaders"), ::OpenAPI::toJsonValue(m_column_headers));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_row_headers.isSet()) {
        obj.insert(QString("rowHeaders"), ::OpenAPI::toJsonValue(m_row_headers));
    }
    if (m_rows.size() > 0) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    return obj;
}

OAIHeaders OAITable::getColumnHeaders() const {
    return m_column_headers;
}
void OAITable::setColumnHeaders(const OAIHeaders &column_headers) {
    m_column_headers = column_headers;
    m_column_headers_isSet = true;
}

bool OAITable::is_column_headers_Set() const{
    return m_column_headers_isSet;
}

bool OAITable::is_column_headers_Valid() const{
    return m_column_headers_isValid;
}

QString OAITable::getName() const {
    return m_name;
}
void OAITable::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITable::is_name_Set() const{
    return m_name_isSet;
}

bool OAITable::is_name_Valid() const{
    return m_name_isValid;
}

OAIHeaders OAITable::getRowHeaders() const {
    return m_row_headers;
}
void OAITable::setRowHeaders(const OAIHeaders &row_headers) {
    m_row_headers = row_headers;
    m_row_headers_isSet = true;
}

bool OAITable::is_row_headers_Set() const{
    return m_row_headers_isSet;
}

bool OAITable::is_row_headers_Valid() const{
    return m_row_headers_isValid;
}

QList<OAIRow> OAITable::getRows() const {
    return m_rows;
}
void OAITable::setRows(const QList<OAIRow> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAITable::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAITable::is_rows_Valid() const{
    return m_rows_isValid;
}

bool OAITable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
