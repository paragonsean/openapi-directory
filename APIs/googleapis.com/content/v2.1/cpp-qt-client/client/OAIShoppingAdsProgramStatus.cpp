/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShoppingAdsProgramStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShoppingAdsProgramStatus::OAIShoppingAdsProgramStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShoppingAdsProgramStatus::OAIShoppingAdsProgramStatus() {
    this->initializeModel();
}

OAIShoppingAdsProgramStatus::~OAIShoppingAdsProgramStatus() {}

void OAIShoppingAdsProgramStatus::initializeModel() {

    m_global_state_isSet = false;
    m_global_state_isValid = false;

    m_region_statuses_isSet = false;
    m_region_statuses_isValid = false;
}

void OAIShoppingAdsProgramStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShoppingAdsProgramStatus::fromJsonObject(QJsonObject json) {

    m_global_state_isValid = ::OpenAPI::fromJsonValue(m_global_state, json[QString("globalState")]);
    m_global_state_isSet = !json[QString("globalState")].isNull() && m_global_state_isValid;

    m_region_statuses_isValid = ::OpenAPI::fromJsonValue(m_region_statuses, json[QString("regionStatuses")]);
    m_region_statuses_isSet = !json[QString("regionStatuses")].isNull() && m_region_statuses_isValid;
}

QString OAIShoppingAdsProgramStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShoppingAdsProgramStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_global_state_isSet) {
        obj.insert(QString("globalState"), ::OpenAPI::toJsonValue(m_global_state));
    }
    if (m_region_statuses.size() > 0) {
        obj.insert(QString("regionStatuses"), ::OpenAPI::toJsonValue(m_region_statuses));
    }
    return obj;
}

QString OAIShoppingAdsProgramStatus::getGlobalState() const {
    return m_global_state;
}
void OAIShoppingAdsProgramStatus::setGlobalState(const QString &global_state) {
    m_global_state = global_state;
    m_global_state_isSet = true;
}

bool OAIShoppingAdsProgramStatus::is_global_state_Set() const{
    return m_global_state_isSet;
}

bool OAIShoppingAdsProgramStatus::is_global_state_Valid() const{
    return m_global_state_isValid;
}

QList<OAIShoppingAdsProgramStatusRegionStatus> OAIShoppingAdsProgramStatus::getRegionStatuses() const {
    return m_region_statuses;
}
void OAIShoppingAdsProgramStatus::setRegionStatuses(const QList<OAIShoppingAdsProgramStatusRegionStatus> &region_statuses) {
    m_region_statuses = region_statuses;
    m_region_statuses_isSet = true;
}

bool OAIShoppingAdsProgramStatus::is_region_statuses_Set() const{
    return m_region_statuses_isSet;
}

bool OAIShoppingAdsProgramStatus::is_region_statuses_Valid() const{
    return m_region_statuses_isValid;
}

bool OAIShoppingAdsProgramStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_global_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShoppingAdsProgramStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
