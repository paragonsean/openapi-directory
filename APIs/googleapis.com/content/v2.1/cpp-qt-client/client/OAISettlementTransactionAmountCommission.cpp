/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISettlementTransactionAmountCommission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISettlementTransactionAmountCommission::OAISettlementTransactionAmountCommission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISettlementTransactionAmountCommission::OAISettlementTransactionAmountCommission() {
    this->initializeModel();
}

OAISettlementTransactionAmountCommission::~OAISettlementTransactionAmountCommission() {}

void OAISettlementTransactionAmountCommission::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;
}

void OAISettlementTransactionAmountCommission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISettlementTransactionAmountCommission::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;
}

QString OAISettlementTransactionAmountCommission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISettlementTransactionAmountCommission::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    return obj;
}

QString OAISettlementTransactionAmountCommission::getCategory() const {
    return m_category;
}
void OAISettlementTransactionAmountCommission::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAISettlementTransactionAmountCommission::is_category_Set() const{
    return m_category_isSet;
}

bool OAISettlementTransactionAmountCommission::is_category_Valid() const{
    return m_category_isValid;
}

QString OAISettlementTransactionAmountCommission::getRate() const {
    return m_rate;
}
void OAISettlementTransactionAmountCommission::setRate(const QString &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAISettlementTransactionAmountCommission::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAISettlementTransactionAmountCommission::is_rate_Valid() const{
    return m_rate_isValid;
}

bool OAISettlementTransactionAmountCommission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISettlementTransactionAmountCommission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
