/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderLineItemProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderLineItemProduct::OAIOrderLineItemProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderLineItemProduct::OAIOrderLineItemProduct() {
    this->initializeModel();
}

OAIOrderLineItemProduct::~OAIOrderLineItemProduct() {}

void OAIOrderLineItemProduct::initializeModel() {

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_content_language_isSet = false;
    m_content_language_isValid = false;

    m_fees_isSet = false;
    m_fees_isValid = false;

    m_gtin_isSet = false;
    m_gtin_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_link_isSet = false;
    m_image_link_isValid = false;

    m_item_group_id_isSet = false;
    m_item_group_id_isValid = false;

    m_mpn_isSet = false;
    m_mpn_isValid = false;

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_shown_image_isSet = false;
    m_shown_image_isValid = false;

    m_target_country_isSet = false;
    m_target_country_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_variant_attributes_isSet = false;
    m_variant_attributes_isValid = false;
}

void OAIOrderLineItemProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderLineItemProduct::fromJsonObject(QJsonObject json) {

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_content_language_isValid = ::OpenAPI::fromJsonValue(m_content_language, json[QString("contentLanguage")]);
    m_content_language_isSet = !json[QString("contentLanguage")].isNull() && m_content_language_isValid;

    m_fees_isValid = ::OpenAPI::fromJsonValue(m_fees, json[QString("fees")]);
    m_fees_isSet = !json[QString("fees")].isNull() && m_fees_isValid;

    m_gtin_isValid = ::OpenAPI::fromJsonValue(m_gtin, json[QString("gtin")]);
    m_gtin_isSet = !json[QString("gtin")].isNull() && m_gtin_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_link_isValid = ::OpenAPI::fromJsonValue(m_image_link, json[QString("imageLink")]);
    m_image_link_isSet = !json[QString("imageLink")].isNull() && m_image_link_isValid;

    m_item_group_id_isValid = ::OpenAPI::fromJsonValue(m_item_group_id, json[QString("itemGroupId")]);
    m_item_group_id_isSet = !json[QString("itemGroupId")].isNull() && m_item_group_id_isValid;

    m_mpn_isValid = ::OpenAPI::fromJsonValue(m_mpn, json[QString("mpn")]);
    m_mpn_isSet = !json[QString("mpn")].isNull() && m_mpn_isValid;

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_shown_image_isValid = ::OpenAPI::fromJsonValue(m_shown_image, json[QString("shownImage")]);
    m_shown_image_isSet = !json[QString("shownImage")].isNull() && m_shown_image_isValid;

    m_target_country_isValid = ::OpenAPI::fromJsonValue(m_target_country, json[QString("targetCountry")]);
    m_target_country_isSet = !json[QString("targetCountry")].isNull() && m_target_country_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_variant_attributes_isValid = ::OpenAPI::fromJsonValue(m_variant_attributes, json[QString("variantAttributes")]);
    m_variant_attributes_isSet = !json[QString("variantAttributes")].isNull() && m_variant_attributes_isValid;
}

QString OAIOrderLineItemProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderLineItemProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_condition_isSet) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_content_language_isSet) {
        obj.insert(QString("contentLanguage"), ::OpenAPI::toJsonValue(m_content_language));
    }
    if (m_fees.size() > 0) {
        obj.insert(QString("fees"), ::OpenAPI::toJsonValue(m_fees));
    }
    if (m_gtin_isSet) {
        obj.insert(QString("gtin"), ::OpenAPI::toJsonValue(m_gtin));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_link_isSet) {
        obj.insert(QString("imageLink"), ::OpenAPI::toJsonValue(m_image_link));
    }
    if (m_item_group_id_isSet) {
        obj.insert(QString("itemGroupId"), ::OpenAPI::toJsonValue(m_item_group_id));
    }
    if (m_mpn_isSet) {
        obj.insert(QString("mpn"), ::OpenAPI::toJsonValue(m_mpn));
    }
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_shown_image_isSet) {
        obj.insert(QString("shownImage"), ::OpenAPI::toJsonValue(m_shown_image));
    }
    if (m_target_country_isSet) {
        obj.insert(QString("targetCountry"), ::OpenAPI::toJsonValue(m_target_country));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_variant_attributes.size() > 0) {
        obj.insert(QString("variantAttributes"), ::OpenAPI::toJsonValue(m_variant_attributes));
    }
    return obj;
}

QString OAIOrderLineItemProduct::getBrand() const {
    return m_brand;
}
void OAIOrderLineItemProduct::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIOrderLineItemProduct::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIOrderLineItemProduct::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAIOrderLineItemProduct::getCondition() const {
    return m_condition;
}
void OAIOrderLineItemProduct::setCondition(const QString &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIOrderLineItemProduct::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIOrderLineItemProduct::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIOrderLineItemProduct::getContentLanguage() const {
    return m_content_language;
}
void OAIOrderLineItemProduct::setContentLanguage(const QString &content_language) {
    m_content_language = content_language;
    m_content_language_isSet = true;
}

bool OAIOrderLineItemProduct::is_content_language_Set() const{
    return m_content_language_isSet;
}

bool OAIOrderLineItemProduct::is_content_language_Valid() const{
    return m_content_language_isValid;
}

QList<OAIOrderLineItemProductFee> OAIOrderLineItemProduct::getFees() const {
    return m_fees;
}
void OAIOrderLineItemProduct::setFees(const QList<OAIOrderLineItemProductFee> &fees) {
    m_fees = fees;
    m_fees_isSet = true;
}

bool OAIOrderLineItemProduct::is_fees_Set() const{
    return m_fees_isSet;
}

bool OAIOrderLineItemProduct::is_fees_Valid() const{
    return m_fees_isValid;
}

QString OAIOrderLineItemProduct::getGtin() const {
    return m_gtin;
}
void OAIOrderLineItemProduct::setGtin(const QString &gtin) {
    m_gtin = gtin;
    m_gtin_isSet = true;
}

bool OAIOrderLineItemProduct::is_gtin_Set() const{
    return m_gtin_isSet;
}

bool OAIOrderLineItemProduct::is_gtin_Valid() const{
    return m_gtin_isValid;
}

QString OAIOrderLineItemProduct::getId() const {
    return m_id;
}
void OAIOrderLineItemProduct::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrderLineItemProduct::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrderLineItemProduct::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOrderLineItemProduct::getImageLink() const {
    return m_image_link;
}
void OAIOrderLineItemProduct::setImageLink(const QString &image_link) {
    m_image_link = image_link;
    m_image_link_isSet = true;
}

bool OAIOrderLineItemProduct::is_image_link_Set() const{
    return m_image_link_isSet;
}

bool OAIOrderLineItemProduct::is_image_link_Valid() const{
    return m_image_link_isValid;
}

QString OAIOrderLineItemProduct::getItemGroupId() const {
    return m_item_group_id;
}
void OAIOrderLineItemProduct::setItemGroupId(const QString &item_group_id) {
    m_item_group_id = item_group_id;
    m_item_group_id_isSet = true;
}

bool OAIOrderLineItemProduct::is_item_group_id_Set() const{
    return m_item_group_id_isSet;
}

bool OAIOrderLineItemProduct::is_item_group_id_Valid() const{
    return m_item_group_id_isValid;
}

QString OAIOrderLineItemProduct::getMpn() const {
    return m_mpn;
}
void OAIOrderLineItemProduct::setMpn(const QString &mpn) {
    m_mpn = mpn;
    m_mpn_isSet = true;
}

bool OAIOrderLineItemProduct::is_mpn_Set() const{
    return m_mpn_isSet;
}

bool OAIOrderLineItemProduct::is_mpn_Valid() const{
    return m_mpn_isValid;
}

QString OAIOrderLineItemProduct::getOfferId() const {
    return m_offer_id;
}
void OAIOrderLineItemProduct::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAIOrderLineItemProduct::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIOrderLineItemProduct::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

OAIPrice OAIOrderLineItemProduct::getPrice() const {
    return m_price;
}
void OAIOrderLineItemProduct::setPrice(const OAIPrice &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIOrderLineItemProduct::is_price_Set() const{
    return m_price_isSet;
}

bool OAIOrderLineItemProduct::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIOrderLineItemProduct::getShownImage() const {
    return m_shown_image;
}
void OAIOrderLineItemProduct::setShownImage(const QString &shown_image) {
    m_shown_image = shown_image;
    m_shown_image_isSet = true;
}

bool OAIOrderLineItemProduct::is_shown_image_Set() const{
    return m_shown_image_isSet;
}

bool OAIOrderLineItemProduct::is_shown_image_Valid() const{
    return m_shown_image_isValid;
}

QString OAIOrderLineItemProduct::getTargetCountry() const {
    return m_target_country;
}
void OAIOrderLineItemProduct::setTargetCountry(const QString &target_country) {
    m_target_country = target_country;
    m_target_country_isSet = true;
}

bool OAIOrderLineItemProduct::is_target_country_Set() const{
    return m_target_country_isSet;
}

bool OAIOrderLineItemProduct::is_target_country_Valid() const{
    return m_target_country_isValid;
}

QString OAIOrderLineItemProduct::getTitle() const {
    return m_title;
}
void OAIOrderLineItemProduct::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIOrderLineItemProduct::is_title_Set() const{
    return m_title_isSet;
}

bool OAIOrderLineItemProduct::is_title_Valid() const{
    return m_title_isValid;
}

QList<OAIOrderLineItemProductVariantAttribute> OAIOrderLineItemProduct::getVariantAttributes() const {
    return m_variant_attributes;
}
void OAIOrderLineItemProduct::setVariantAttributes(const QList<OAIOrderLineItemProductVariantAttribute> &variant_attributes) {
    m_variant_attributes = variant_attributes;
    m_variant_attributes_isSet = true;
}

bool OAIOrderLineItemProduct::is_variant_attributes_Set() const{
    return m_variant_attributes_isSet;
}

bool OAIOrderLineItemProduct::is_variant_attributes_Valid() const{
    return m_variant_attributes_isValid;
}

bool OAIOrderLineItemProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gtin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shown_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderLineItemProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
