/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderLineItemShippingDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderLineItemShippingDetails::OAIOrderLineItemShippingDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderLineItemShippingDetails::OAIOrderLineItemShippingDetails() {
    this->initializeModel();
}

OAIOrderLineItemShippingDetails::~OAIOrderLineItemShippingDetails() {}

void OAIOrderLineItemShippingDetails::initializeModel() {

    m_deliver_by_date_isSet = false;
    m_deliver_by_date_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_pickup_promise_in_minutes_isSet = false;
    m_pickup_promise_in_minutes_isValid = false;

    m_ship_by_date_isSet = false;
    m_ship_by_date_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIOrderLineItemShippingDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderLineItemShippingDetails::fromJsonObject(QJsonObject json) {

    m_deliver_by_date_isValid = ::OpenAPI::fromJsonValue(m_deliver_by_date, json[QString("deliverByDate")]);
    m_deliver_by_date_isSet = !json[QString("deliverByDate")].isNull() && m_deliver_by_date_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_pickup_promise_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_pickup_promise_in_minutes, json[QString("pickupPromiseInMinutes")]);
    m_pickup_promise_in_minutes_isSet = !json[QString("pickupPromiseInMinutes")].isNull() && m_pickup_promise_in_minutes_isValid;

    m_ship_by_date_isValid = ::OpenAPI::fromJsonValue(m_ship_by_date, json[QString("shipByDate")]);
    m_ship_by_date_isSet = !json[QString("shipByDate")].isNull() && m_ship_by_date_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIOrderLineItemShippingDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderLineItemShippingDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_deliver_by_date_isSet) {
        obj.insert(QString("deliverByDate"), ::OpenAPI::toJsonValue(m_deliver_by_date));
    }
    if (m_method.isSet()) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_pickup_promise_in_minutes_isSet) {
        obj.insert(QString("pickupPromiseInMinutes"), ::OpenAPI::toJsonValue(m_pickup_promise_in_minutes));
    }
    if (m_ship_by_date_isSet) {
        obj.insert(QString("shipByDate"), ::OpenAPI::toJsonValue(m_ship_by_date));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIOrderLineItemShippingDetails::getDeliverByDate() const {
    return m_deliver_by_date;
}
void OAIOrderLineItemShippingDetails::setDeliverByDate(const QString &deliver_by_date) {
    m_deliver_by_date = deliver_by_date;
    m_deliver_by_date_isSet = true;
}

bool OAIOrderLineItemShippingDetails::is_deliver_by_date_Set() const{
    return m_deliver_by_date_isSet;
}

bool OAIOrderLineItemShippingDetails::is_deliver_by_date_Valid() const{
    return m_deliver_by_date_isValid;
}

OAIOrderLineItemShippingDetailsMethod OAIOrderLineItemShippingDetails::getMethod() const {
    return m_method;
}
void OAIOrderLineItemShippingDetails::setMethod(const OAIOrderLineItemShippingDetailsMethod &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIOrderLineItemShippingDetails::is_method_Set() const{
    return m_method_isSet;
}

bool OAIOrderLineItemShippingDetails::is_method_Valid() const{
    return m_method_isValid;
}

qint32 OAIOrderLineItemShippingDetails::getPickupPromiseInMinutes() const {
    return m_pickup_promise_in_minutes;
}
void OAIOrderLineItemShippingDetails::setPickupPromiseInMinutes(const qint32 &pickup_promise_in_minutes) {
    m_pickup_promise_in_minutes = pickup_promise_in_minutes;
    m_pickup_promise_in_minutes_isSet = true;
}

bool OAIOrderLineItemShippingDetails::is_pickup_promise_in_minutes_Set() const{
    return m_pickup_promise_in_minutes_isSet;
}

bool OAIOrderLineItemShippingDetails::is_pickup_promise_in_minutes_Valid() const{
    return m_pickup_promise_in_minutes_isValid;
}

QString OAIOrderLineItemShippingDetails::getShipByDate() const {
    return m_ship_by_date;
}
void OAIOrderLineItemShippingDetails::setShipByDate(const QString &ship_by_date) {
    m_ship_by_date = ship_by_date;
    m_ship_by_date_isSet = true;
}

bool OAIOrderLineItemShippingDetails::is_ship_by_date_Set() const{
    return m_ship_by_date_isSet;
}

bool OAIOrderLineItemShippingDetails::is_ship_by_date_Valid() const{
    return m_ship_by_date_isValid;
}

QString OAIOrderLineItemShippingDetails::getType() const {
    return m_type;
}
void OAIOrderLineItemShippingDetails::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOrderLineItemShippingDetails::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOrderLineItemShippingDetails::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIOrderLineItemShippingDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deliver_by_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_promise_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_by_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderLineItemShippingDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
