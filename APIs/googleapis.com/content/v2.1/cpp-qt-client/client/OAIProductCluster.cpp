/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductCluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductCluster::OAIProductCluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductCluster::OAIProductCluster() {
    this->initializeModel();
}

OAIProductCluster::~OAIProductCluster() {}

void OAIProductCluster::initializeModel() {

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_brand_inventory_status_isSet = false;
    m_brand_inventory_status_isValid = false;

    m_category_l1_isSet = false;
    m_category_l1_isValid = false;

    m_category_l2_isSet = false;
    m_category_l2_isValid = false;

    m_category_l3_isSet = false;
    m_category_l3_isValid = false;

    m_category_l4_isSet = false;
    m_category_l4_isValid = false;

    m_category_l5_isSet = false;
    m_category_l5_isValid = false;

    m_inventory_status_isSet = false;
    m_inventory_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_variant_gtins_isSet = false;
    m_variant_gtins_isValid = false;
}

void OAIProductCluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductCluster::fromJsonObject(QJsonObject json) {

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_brand_inventory_status_isValid = ::OpenAPI::fromJsonValue(m_brand_inventory_status, json[QString("brandInventoryStatus")]);
    m_brand_inventory_status_isSet = !json[QString("brandInventoryStatus")].isNull() && m_brand_inventory_status_isValid;

    m_category_l1_isValid = ::OpenAPI::fromJsonValue(m_category_l1, json[QString("categoryL1")]);
    m_category_l1_isSet = !json[QString("categoryL1")].isNull() && m_category_l1_isValid;

    m_category_l2_isValid = ::OpenAPI::fromJsonValue(m_category_l2, json[QString("categoryL2")]);
    m_category_l2_isSet = !json[QString("categoryL2")].isNull() && m_category_l2_isValid;

    m_category_l3_isValid = ::OpenAPI::fromJsonValue(m_category_l3, json[QString("categoryL3")]);
    m_category_l3_isSet = !json[QString("categoryL3")].isNull() && m_category_l3_isValid;

    m_category_l4_isValid = ::OpenAPI::fromJsonValue(m_category_l4, json[QString("categoryL4")]);
    m_category_l4_isSet = !json[QString("categoryL4")].isNull() && m_category_l4_isValid;

    m_category_l5_isValid = ::OpenAPI::fromJsonValue(m_category_l5, json[QString("categoryL5")]);
    m_category_l5_isSet = !json[QString("categoryL5")].isNull() && m_category_l5_isValid;

    m_inventory_status_isValid = ::OpenAPI::fromJsonValue(m_inventory_status, json[QString("inventoryStatus")]);
    m_inventory_status_isSet = !json[QString("inventoryStatus")].isNull() && m_inventory_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_variant_gtins_isValid = ::OpenAPI::fromJsonValue(m_variant_gtins, json[QString("variantGtins")]);
    m_variant_gtins_isSet = !json[QString("variantGtins")].isNull() && m_variant_gtins_isValid;
}

QString OAIProductCluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductCluster::asJsonObject() const {
    QJsonObject obj;
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_brand_inventory_status_isSet) {
        obj.insert(QString("brandInventoryStatus"), ::OpenAPI::toJsonValue(m_brand_inventory_status));
    }
    if (m_category_l1_isSet) {
        obj.insert(QString("categoryL1"), ::OpenAPI::toJsonValue(m_category_l1));
    }
    if (m_category_l2_isSet) {
        obj.insert(QString("categoryL2"), ::OpenAPI::toJsonValue(m_category_l2));
    }
    if (m_category_l3_isSet) {
        obj.insert(QString("categoryL3"), ::OpenAPI::toJsonValue(m_category_l3));
    }
    if (m_category_l4_isSet) {
        obj.insert(QString("categoryL4"), ::OpenAPI::toJsonValue(m_category_l4));
    }
    if (m_category_l5_isSet) {
        obj.insert(QString("categoryL5"), ::OpenAPI::toJsonValue(m_category_l5));
    }
    if (m_inventory_status_isSet) {
        obj.insert(QString("inventoryStatus"), ::OpenAPI::toJsonValue(m_inventory_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_variant_gtins.size() > 0) {
        obj.insert(QString("variantGtins"), ::OpenAPI::toJsonValue(m_variant_gtins));
    }
    return obj;
}

QString OAIProductCluster::getBrand() const {
    return m_brand;
}
void OAIProductCluster::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIProductCluster::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIProductCluster::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAIProductCluster::getBrandInventoryStatus() const {
    return m_brand_inventory_status;
}
void OAIProductCluster::setBrandInventoryStatus(const QString &brand_inventory_status) {
    m_brand_inventory_status = brand_inventory_status;
    m_brand_inventory_status_isSet = true;
}

bool OAIProductCluster::is_brand_inventory_status_Set() const{
    return m_brand_inventory_status_isSet;
}

bool OAIProductCluster::is_brand_inventory_status_Valid() const{
    return m_brand_inventory_status_isValid;
}

QString OAIProductCluster::getCategoryL1() const {
    return m_category_l1;
}
void OAIProductCluster::setCategoryL1(const QString &category_l1) {
    m_category_l1 = category_l1;
    m_category_l1_isSet = true;
}

bool OAIProductCluster::is_category_l1_Set() const{
    return m_category_l1_isSet;
}

bool OAIProductCluster::is_category_l1_Valid() const{
    return m_category_l1_isValid;
}

QString OAIProductCluster::getCategoryL2() const {
    return m_category_l2;
}
void OAIProductCluster::setCategoryL2(const QString &category_l2) {
    m_category_l2 = category_l2;
    m_category_l2_isSet = true;
}

bool OAIProductCluster::is_category_l2_Set() const{
    return m_category_l2_isSet;
}

bool OAIProductCluster::is_category_l2_Valid() const{
    return m_category_l2_isValid;
}

QString OAIProductCluster::getCategoryL3() const {
    return m_category_l3;
}
void OAIProductCluster::setCategoryL3(const QString &category_l3) {
    m_category_l3 = category_l3;
    m_category_l3_isSet = true;
}

bool OAIProductCluster::is_category_l3_Set() const{
    return m_category_l3_isSet;
}

bool OAIProductCluster::is_category_l3_Valid() const{
    return m_category_l3_isValid;
}

QString OAIProductCluster::getCategoryL4() const {
    return m_category_l4;
}
void OAIProductCluster::setCategoryL4(const QString &category_l4) {
    m_category_l4 = category_l4;
    m_category_l4_isSet = true;
}

bool OAIProductCluster::is_category_l4_Set() const{
    return m_category_l4_isSet;
}

bool OAIProductCluster::is_category_l4_Valid() const{
    return m_category_l4_isValid;
}

QString OAIProductCluster::getCategoryL5() const {
    return m_category_l5;
}
void OAIProductCluster::setCategoryL5(const QString &category_l5) {
    m_category_l5 = category_l5;
    m_category_l5_isSet = true;
}

bool OAIProductCluster::is_category_l5_Set() const{
    return m_category_l5_isSet;
}

bool OAIProductCluster::is_category_l5_Valid() const{
    return m_category_l5_isValid;
}

QString OAIProductCluster::getInventoryStatus() const {
    return m_inventory_status;
}
void OAIProductCluster::setInventoryStatus(const QString &inventory_status) {
    m_inventory_status = inventory_status;
    m_inventory_status_isSet = true;
}

bool OAIProductCluster::is_inventory_status_Set() const{
    return m_inventory_status_isSet;
}

bool OAIProductCluster::is_inventory_status_Valid() const{
    return m_inventory_status_isValid;
}

QString OAIProductCluster::getTitle() const {
    return m_title;
}
void OAIProductCluster::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIProductCluster::is_title_Set() const{
    return m_title_isSet;
}

bool OAIProductCluster::is_title_Valid() const{
    return m_title_isValid;
}

QList<QString> OAIProductCluster::getVariantGtins() const {
    return m_variant_gtins;
}
void OAIProductCluster::setVariantGtins(const QList<QString> &variant_gtins) {
    m_variant_gtins = variant_gtins;
    m_variant_gtins_isSet = true;
}

bool OAIProductCluster::is_variant_gtins_Set() const{
    return m_variant_gtins_isSet;
}

bool OAIProductCluster::is_variant_gtins_Valid() const{
    return m_variant_gtins_isValid;
}

bool OAIProductCluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_inventory_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_l1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_l2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_l3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_l4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_l5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_gtins.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductCluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
