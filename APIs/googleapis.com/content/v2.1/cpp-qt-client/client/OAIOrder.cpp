/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrder::OAIOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrder::OAIOrder() {
    this->initializeModel();
}

OAIOrder::~OAIOrder() {}

void OAIOrder::initializeModel() {

    m_acknowledged_isSet = false;
    m_acknowledged_isValid = false;

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_delivery_details_isSet = false;
    m_delivery_details_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_merchant_id_isSet = false;
    m_merchant_id_isValid = false;

    m_merchant_order_id_isSet = false;
    m_merchant_order_id_isValid = false;

    m_net_price_amount_isSet = false;
    m_net_price_amount_isValid = false;

    m_net_tax_amount_isSet = false;
    m_net_tax_amount_isValid = false;

    m_payment_status_isSet = false;
    m_payment_status_isValid = false;

    m_pickup_details_isSet = false;
    m_pickup_details_isValid = false;

    m_placed_date_isSet = false;
    m_placed_date_isValid = false;

    m_promotions_isSet = false;
    m_promotions_isValid = false;

    m_refunds_isSet = false;
    m_refunds_isValid = false;

    m_shipments_isSet = false;
    m_shipments_isValid = false;

    m_shipping_cost_isSet = false;
    m_shipping_cost_isValid = false;

    m_shipping_cost_tax_isSet = false;
    m_shipping_cost_tax_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tax_collector_isSet = false;
    m_tax_collector_isValid = false;
}

void OAIOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrder::fromJsonObject(QJsonObject json) {

    m_acknowledged_isValid = ::OpenAPI::fromJsonValue(m_acknowledged, json[QString("acknowledged")]);
    m_acknowledged_isSet = !json[QString("acknowledged")].isNull() && m_acknowledged_isValid;

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billingAddress")]);
    m_billing_address_isSet = !json[QString("billingAddress")].isNull() && m_billing_address_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_delivery_details_isValid = ::OpenAPI::fromJsonValue(m_delivery_details, json[QString("deliveryDetails")]);
    m_delivery_details_isSet = !json[QString("deliveryDetails")].isNull() && m_delivery_details_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("lineItems")]);
    m_line_items_isSet = !json[QString("lineItems")].isNull() && m_line_items_isValid;

    m_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_id, json[QString("merchantId")]);
    m_merchant_id_isSet = !json[QString("merchantId")].isNull() && m_merchant_id_isValid;

    m_merchant_order_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_order_id, json[QString("merchantOrderId")]);
    m_merchant_order_id_isSet = !json[QString("merchantOrderId")].isNull() && m_merchant_order_id_isValid;

    m_net_price_amount_isValid = ::OpenAPI::fromJsonValue(m_net_price_amount, json[QString("netPriceAmount")]);
    m_net_price_amount_isSet = !json[QString("netPriceAmount")].isNull() && m_net_price_amount_isValid;

    m_net_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_net_tax_amount, json[QString("netTaxAmount")]);
    m_net_tax_amount_isSet = !json[QString("netTaxAmount")].isNull() && m_net_tax_amount_isValid;

    m_payment_status_isValid = ::OpenAPI::fromJsonValue(m_payment_status, json[QString("paymentStatus")]);
    m_payment_status_isSet = !json[QString("paymentStatus")].isNull() && m_payment_status_isValid;

    m_pickup_details_isValid = ::OpenAPI::fromJsonValue(m_pickup_details, json[QString("pickupDetails")]);
    m_pickup_details_isSet = !json[QString("pickupDetails")].isNull() && m_pickup_details_isValid;

    m_placed_date_isValid = ::OpenAPI::fromJsonValue(m_placed_date, json[QString("placedDate")]);
    m_placed_date_isSet = !json[QString("placedDate")].isNull() && m_placed_date_isValid;

    m_promotions_isValid = ::OpenAPI::fromJsonValue(m_promotions, json[QString("promotions")]);
    m_promotions_isSet = !json[QString("promotions")].isNull() && m_promotions_isValid;

    m_refunds_isValid = ::OpenAPI::fromJsonValue(m_refunds, json[QString("refunds")]);
    m_refunds_isSet = !json[QString("refunds")].isNull() && m_refunds_isValid;

    m_shipments_isValid = ::OpenAPI::fromJsonValue(m_shipments, json[QString("shipments")]);
    m_shipments_isSet = !json[QString("shipments")].isNull() && m_shipments_isValid;

    m_shipping_cost_isValid = ::OpenAPI::fromJsonValue(m_shipping_cost, json[QString("shippingCost")]);
    m_shipping_cost_isSet = !json[QString("shippingCost")].isNull() && m_shipping_cost_isValid;

    m_shipping_cost_tax_isValid = ::OpenAPI::fromJsonValue(m_shipping_cost_tax, json[QString("shippingCostTax")]);
    m_shipping_cost_tax_isSet = !json[QString("shippingCostTax")].isNull() && m_shipping_cost_tax_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tax_collector_isValid = ::OpenAPI::fromJsonValue(m_tax_collector, json[QString("taxCollector")]);
    m_tax_collector_isSet = !json[QString("taxCollector")].isNull() && m_tax_collector_isValid;
}

QString OAIOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_acknowledged_isSet) {
        obj.insert(QString("acknowledged"), ::OpenAPI::toJsonValue(m_acknowledged));
    }
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_billing_address.isSet()) {
        obj.insert(QString("billingAddress"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_delivery_details.isSet()) {
        obj.insert(QString("deliveryDetails"), ::OpenAPI::toJsonValue(m_delivery_details));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("lineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_merchant_id_isSet) {
        obj.insert(QString("merchantId"), ::OpenAPI::toJsonValue(m_merchant_id));
    }
    if (m_merchant_order_id_isSet) {
        obj.insert(QString("merchantOrderId"), ::OpenAPI::toJsonValue(m_merchant_order_id));
    }
    if (m_net_price_amount.isSet()) {
        obj.insert(QString("netPriceAmount"), ::OpenAPI::toJsonValue(m_net_price_amount));
    }
    if (m_net_tax_amount.isSet()) {
        obj.insert(QString("netTaxAmount"), ::OpenAPI::toJsonValue(m_net_tax_amount));
    }
    if (m_payment_status_isSet) {
        obj.insert(QString("paymentStatus"), ::OpenAPI::toJsonValue(m_payment_status));
    }
    if (m_pickup_details.isSet()) {
        obj.insert(QString("pickupDetails"), ::OpenAPI::toJsonValue(m_pickup_details));
    }
    if (m_placed_date_isSet) {
        obj.insert(QString("placedDate"), ::OpenAPI::toJsonValue(m_placed_date));
    }
    if (m_promotions.size() > 0) {
        obj.insert(QString("promotions"), ::OpenAPI::toJsonValue(m_promotions));
    }
    if (m_refunds.size() > 0) {
        obj.insert(QString("refunds"), ::OpenAPI::toJsonValue(m_refunds));
    }
    if (m_shipments.size() > 0) {
        obj.insert(QString("shipments"), ::OpenAPI::toJsonValue(m_shipments));
    }
    if (m_shipping_cost.isSet()) {
        obj.insert(QString("shippingCost"), ::OpenAPI::toJsonValue(m_shipping_cost));
    }
    if (m_shipping_cost_tax.isSet()) {
        obj.insert(QString("shippingCostTax"), ::OpenAPI::toJsonValue(m_shipping_cost_tax));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tax_collector_isSet) {
        obj.insert(QString("taxCollector"), ::OpenAPI::toJsonValue(m_tax_collector));
    }
    return obj;
}

bool OAIOrder::isAcknowledged() const {
    return m_acknowledged;
}
void OAIOrder::setAcknowledged(const bool &acknowledged) {
    m_acknowledged = acknowledged;
    m_acknowledged_isSet = true;
}

bool OAIOrder::is_acknowledged_Set() const{
    return m_acknowledged_isSet;
}

bool OAIOrder::is_acknowledged_Valid() const{
    return m_acknowledged_isValid;
}

QList<OAIOrderOrderAnnotation> OAIOrder::getAnnotations() const {
    return m_annotations;
}
void OAIOrder::setAnnotations(const QList<OAIOrderOrderAnnotation> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIOrder::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIOrder::is_annotations_Valid() const{
    return m_annotations_isValid;
}

OAIOrderAddress OAIOrder::getBillingAddress() const {
    return m_billing_address;
}
void OAIOrder::setBillingAddress(const OAIOrderAddress &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAIOrder::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAIOrder::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

OAIOrderCustomer OAIOrder::getCustomer() const {
    return m_customer;
}
void OAIOrder::setCustomer(const OAIOrderCustomer &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIOrder::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIOrder::is_customer_Valid() const{
    return m_customer_isValid;
}

OAIOrderDeliveryDetails OAIOrder::getDeliveryDetails() const {
    return m_delivery_details;
}
void OAIOrder::setDeliveryDetails(const OAIOrderDeliveryDetails &delivery_details) {
    m_delivery_details = delivery_details;
    m_delivery_details_isSet = true;
}

bool OAIOrder::is_delivery_details_Set() const{
    return m_delivery_details_isSet;
}

bool OAIOrder::is_delivery_details_Valid() const{
    return m_delivery_details_isValid;
}

QString OAIOrder::getId() const {
    return m_id;
}
void OAIOrder::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrder::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrder::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOrder::getKind() const {
    return m_kind;
}
void OAIOrder::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIOrder::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIOrder::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAIOrderLineItem> OAIOrder::getLineItems() const {
    return m_line_items;
}
void OAIOrder::setLineItems(const QList<OAIOrderLineItem> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIOrder::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIOrder::is_line_items_Valid() const{
    return m_line_items_isValid;
}

QString OAIOrder::getMerchantId() const {
    return m_merchant_id;
}
void OAIOrder::setMerchantId(const QString &merchant_id) {
    m_merchant_id = merchant_id;
    m_merchant_id_isSet = true;
}

bool OAIOrder::is_merchant_id_Set() const{
    return m_merchant_id_isSet;
}

bool OAIOrder::is_merchant_id_Valid() const{
    return m_merchant_id_isValid;
}

QString OAIOrder::getMerchantOrderId() const {
    return m_merchant_order_id;
}
void OAIOrder::setMerchantOrderId(const QString &merchant_order_id) {
    m_merchant_order_id = merchant_order_id;
    m_merchant_order_id_isSet = true;
}

bool OAIOrder::is_merchant_order_id_Set() const{
    return m_merchant_order_id_isSet;
}

bool OAIOrder::is_merchant_order_id_Valid() const{
    return m_merchant_order_id_isValid;
}

OAIPrice OAIOrder::getNetPriceAmount() const {
    return m_net_price_amount;
}
void OAIOrder::setNetPriceAmount(const OAIPrice &net_price_amount) {
    m_net_price_amount = net_price_amount;
    m_net_price_amount_isSet = true;
}

bool OAIOrder::is_net_price_amount_Set() const{
    return m_net_price_amount_isSet;
}

bool OAIOrder::is_net_price_amount_Valid() const{
    return m_net_price_amount_isValid;
}

OAIPrice OAIOrder::getNetTaxAmount() const {
    return m_net_tax_amount;
}
void OAIOrder::setNetTaxAmount(const OAIPrice &net_tax_amount) {
    m_net_tax_amount = net_tax_amount;
    m_net_tax_amount_isSet = true;
}

bool OAIOrder::is_net_tax_amount_Set() const{
    return m_net_tax_amount_isSet;
}

bool OAIOrder::is_net_tax_amount_Valid() const{
    return m_net_tax_amount_isValid;
}

QString OAIOrder::getPaymentStatus() const {
    return m_payment_status;
}
void OAIOrder::setPaymentStatus(const QString &payment_status) {
    m_payment_status = payment_status;
    m_payment_status_isSet = true;
}

bool OAIOrder::is_payment_status_Set() const{
    return m_payment_status_isSet;
}

bool OAIOrder::is_payment_status_Valid() const{
    return m_payment_status_isValid;
}

OAIOrderPickupDetails OAIOrder::getPickupDetails() const {
    return m_pickup_details;
}
void OAIOrder::setPickupDetails(const OAIOrderPickupDetails &pickup_details) {
    m_pickup_details = pickup_details;
    m_pickup_details_isSet = true;
}

bool OAIOrder::is_pickup_details_Set() const{
    return m_pickup_details_isSet;
}

bool OAIOrder::is_pickup_details_Valid() const{
    return m_pickup_details_isValid;
}

QString OAIOrder::getPlacedDate() const {
    return m_placed_date;
}
void OAIOrder::setPlacedDate(const QString &placed_date) {
    m_placed_date = placed_date;
    m_placed_date_isSet = true;
}

bool OAIOrder::is_placed_date_Set() const{
    return m_placed_date_isSet;
}

bool OAIOrder::is_placed_date_Valid() const{
    return m_placed_date_isValid;
}

QList<OAIOrderPromotion> OAIOrder::getPromotions() const {
    return m_promotions;
}
void OAIOrder::setPromotions(const QList<OAIOrderPromotion> &promotions) {
    m_promotions = promotions;
    m_promotions_isSet = true;
}

bool OAIOrder::is_promotions_Set() const{
    return m_promotions_isSet;
}

bool OAIOrder::is_promotions_Valid() const{
    return m_promotions_isValid;
}

QList<OAIOrderRefund> OAIOrder::getRefunds() const {
    return m_refunds;
}
void OAIOrder::setRefunds(const QList<OAIOrderRefund> &refunds) {
    m_refunds = refunds;
    m_refunds_isSet = true;
}

bool OAIOrder::is_refunds_Set() const{
    return m_refunds_isSet;
}

bool OAIOrder::is_refunds_Valid() const{
    return m_refunds_isValid;
}

QList<OAIOrderShipment> OAIOrder::getShipments() const {
    return m_shipments;
}
void OAIOrder::setShipments(const QList<OAIOrderShipment> &shipments) {
    m_shipments = shipments;
    m_shipments_isSet = true;
}

bool OAIOrder::is_shipments_Set() const{
    return m_shipments_isSet;
}

bool OAIOrder::is_shipments_Valid() const{
    return m_shipments_isValid;
}

OAIPrice OAIOrder::getShippingCost() const {
    return m_shipping_cost;
}
void OAIOrder::setShippingCost(const OAIPrice &shipping_cost) {
    m_shipping_cost = shipping_cost;
    m_shipping_cost_isSet = true;
}

bool OAIOrder::is_shipping_cost_Set() const{
    return m_shipping_cost_isSet;
}

bool OAIOrder::is_shipping_cost_Valid() const{
    return m_shipping_cost_isValid;
}

OAIPrice OAIOrder::getShippingCostTax() const {
    return m_shipping_cost_tax;
}
void OAIOrder::setShippingCostTax(const OAIPrice &shipping_cost_tax) {
    m_shipping_cost_tax = shipping_cost_tax;
    m_shipping_cost_tax_isSet = true;
}

bool OAIOrder::is_shipping_cost_tax_Set() const{
    return m_shipping_cost_tax_isSet;
}

bool OAIOrder::is_shipping_cost_tax_Valid() const{
    return m_shipping_cost_tax_isValid;
}

QString OAIOrder::getStatus() const {
    return m_status;
}
void OAIOrder::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOrder::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOrder::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIOrder::getTaxCollector() const {
    return m_tax_collector;
}
void OAIOrder::setTaxCollector(const QString &tax_collector) {
    m_tax_collector = tax_collector;
    m_tax_collector_isSet = true;
}

bool OAIOrder::is_tax_collector_Set() const{
    return m_tax_collector_isSet;
}

bool OAIOrder::is_tax_collector_Valid() const{
    return m_tax_collector_isValid;
}

bool OAIOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acknowledged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_price_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_tax_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_cost_tax.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_collector_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
