/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderPickupDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderPickupDetails::OAIOrderPickupDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderPickupDetails::OAIOrderPickupDetails() {
    this->initializeModel();
}

OAIOrderPickupDetails::~OAIOrderPickupDetails() {}

void OAIOrderPickupDetails::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_collectors_isSet = false;
    m_collectors_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_pickup_type_isSet = false;
    m_pickup_type_isValid = false;
}

void OAIOrderPickupDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderPickupDetails::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_collectors_isValid = ::OpenAPI::fromJsonValue(m_collectors, json[QString("collectors")]);
    m_collectors_isSet = !json[QString("collectors")].isNull() && m_collectors_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_pickup_type_isValid = ::OpenAPI::fromJsonValue(m_pickup_type, json[QString("pickupType")]);
    m_pickup_type_isSet = !json[QString("pickupType")].isNull() && m_pickup_type_isValid;
}

QString OAIOrderPickupDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderPickupDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_collectors.size() > 0) {
        obj.insert(QString("collectors"), ::OpenAPI::toJsonValue(m_collectors));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_pickup_type_isSet) {
        obj.insert(QString("pickupType"), ::OpenAPI::toJsonValue(m_pickup_type));
    }
    return obj;
}

OAIOrderAddress OAIOrderPickupDetails::getAddress() const {
    return m_address;
}
void OAIOrderPickupDetails::setAddress(const OAIOrderAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIOrderPickupDetails::is_address_Set() const{
    return m_address_isSet;
}

bool OAIOrderPickupDetails::is_address_Valid() const{
    return m_address_isValid;
}

QList<OAIOrderPickupDetailsCollector> OAIOrderPickupDetails::getCollectors() const {
    return m_collectors;
}
void OAIOrderPickupDetails::setCollectors(const QList<OAIOrderPickupDetailsCollector> &collectors) {
    m_collectors = collectors;
    m_collectors_isSet = true;
}

bool OAIOrderPickupDetails::is_collectors_Set() const{
    return m_collectors_isSet;
}

bool OAIOrderPickupDetails::is_collectors_Valid() const{
    return m_collectors_isValid;
}

QString OAIOrderPickupDetails::getLocationId() const {
    return m_location_id;
}
void OAIOrderPickupDetails::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIOrderPickupDetails::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIOrderPickupDetails::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIOrderPickupDetails::getPickupType() const {
    return m_pickup_type;
}
void OAIOrderPickupDetails::setPickupType(const QString &pickup_type) {
    m_pickup_type = pickup_type;
    m_pickup_type_isSet = true;
}

bool OAIOrderPickupDetails::is_pickup_type_Set() const{
    return m_pickup_type_isSet;
}

bool OAIOrderPickupDetails::is_pickup_type_Valid() const{
    return m_pickup_type_isValid;
}

bool OAIOrderPickupDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_collectors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderPickupDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
