/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiasettingsCustomBatchResponseEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiasettingsCustomBatchResponseEntry::OAILiasettingsCustomBatchResponseEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiasettingsCustomBatchResponseEntry::OAILiasettingsCustomBatchResponseEntry() {
    this->initializeModel();
}

OAILiasettingsCustomBatchResponseEntry::~OAILiasettingsCustomBatchResponseEntry() {}

void OAILiasettingsCustomBatchResponseEntry::initializeModel() {

    m_batch_id_isSet = false;
    m_batch_id_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_gmb_accounts_isSet = false;
    m_gmb_accounts_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_lia_settings_isSet = false;
    m_lia_settings_isValid = false;

    m_omnichannel_experience_isSet = false;
    m_omnichannel_experience_isValid = false;

    m_pos_data_providers_isSet = false;
    m_pos_data_providers_isValid = false;
}

void OAILiasettingsCustomBatchResponseEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiasettingsCustomBatchResponseEntry::fromJsonObject(QJsonObject json) {

    m_batch_id_isValid = ::OpenAPI::fromJsonValue(m_batch_id, json[QString("batchId")]);
    m_batch_id_isSet = !json[QString("batchId")].isNull() && m_batch_id_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_gmb_accounts_isValid = ::OpenAPI::fromJsonValue(m_gmb_accounts, json[QString("gmbAccounts")]);
    m_gmb_accounts_isSet = !json[QString("gmbAccounts")].isNull() && m_gmb_accounts_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_lia_settings_isValid = ::OpenAPI::fromJsonValue(m_lia_settings, json[QString("liaSettings")]);
    m_lia_settings_isSet = !json[QString("liaSettings")].isNull() && m_lia_settings_isValid;

    m_omnichannel_experience_isValid = ::OpenAPI::fromJsonValue(m_omnichannel_experience, json[QString("omnichannelExperience")]);
    m_omnichannel_experience_isSet = !json[QString("omnichannelExperience")].isNull() && m_omnichannel_experience_isValid;

    m_pos_data_providers_isValid = ::OpenAPI::fromJsonValue(m_pos_data_providers, json[QString("posDataProviders")]);
    m_pos_data_providers_isSet = !json[QString("posDataProviders")].isNull() && m_pos_data_providers_isValid;
}

QString OAILiasettingsCustomBatchResponseEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiasettingsCustomBatchResponseEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_id_isSet) {
        obj.insert(QString("batchId"), ::OpenAPI::toJsonValue(m_batch_id));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_gmb_accounts.isSet()) {
        obj.insert(QString("gmbAccounts"), ::OpenAPI::toJsonValue(m_gmb_accounts));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_lia_settings.isSet()) {
        obj.insert(QString("liaSettings"), ::OpenAPI::toJsonValue(m_lia_settings));
    }
    if (m_omnichannel_experience.isSet()) {
        obj.insert(QString("omnichannelExperience"), ::OpenAPI::toJsonValue(m_omnichannel_experience));
    }
    if (m_pos_data_providers.size() > 0) {
        obj.insert(QString("posDataProviders"), ::OpenAPI::toJsonValue(m_pos_data_providers));
    }
    return obj;
}

qint32 OAILiasettingsCustomBatchResponseEntry::getBatchId() const {
    return m_batch_id;
}
void OAILiasettingsCustomBatchResponseEntry::setBatchId(const qint32 &batch_id) {
    m_batch_id = batch_id;
    m_batch_id_isSet = true;
}

bool OAILiasettingsCustomBatchResponseEntry::is_batch_id_Set() const{
    return m_batch_id_isSet;
}

bool OAILiasettingsCustomBatchResponseEntry::is_batch_id_Valid() const{
    return m_batch_id_isValid;
}

OAIErrors OAILiasettingsCustomBatchResponseEntry::getErrors() const {
    return m_errors;
}
void OAILiasettingsCustomBatchResponseEntry::setErrors(const OAIErrors &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAILiasettingsCustomBatchResponseEntry::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAILiasettingsCustomBatchResponseEntry::is_errors_Valid() const{
    return m_errors_isValid;
}

OAIGmbAccounts OAILiasettingsCustomBatchResponseEntry::getGmbAccounts() const {
    return m_gmb_accounts;
}
void OAILiasettingsCustomBatchResponseEntry::setGmbAccounts(const OAIGmbAccounts &gmb_accounts) {
    m_gmb_accounts = gmb_accounts;
    m_gmb_accounts_isSet = true;
}

bool OAILiasettingsCustomBatchResponseEntry::is_gmb_accounts_Set() const{
    return m_gmb_accounts_isSet;
}

bool OAILiasettingsCustomBatchResponseEntry::is_gmb_accounts_Valid() const{
    return m_gmb_accounts_isValid;
}

QString OAILiasettingsCustomBatchResponseEntry::getKind() const {
    return m_kind;
}
void OAILiasettingsCustomBatchResponseEntry::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAILiasettingsCustomBatchResponseEntry::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAILiasettingsCustomBatchResponseEntry::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILiaSettings OAILiasettingsCustomBatchResponseEntry::getLiaSettings() const {
    return m_lia_settings;
}
void OAILiasettingsCustomBatchResponseEntry::setLiaSettings(const OAILiaSettings &lia_settings) {
    m_lia_settings = lia_settings;
    m_lia_settings_isSet = true;
}

bool OAILiasettingsCustomBatchResponseEntry::is_lia_settings_Set() const{
    return m_lia_settings_isSet;
}

bool OAILiasettingsCustomBatchResponseEntry::is_lia_settings_Valid() const{
    return m_lia_settings_isValid;
}

OAILiaOmnichannelExperience OAILiasettingsCustomBatchResponseEntry::getOmnichannelExperience() const {
    return m_omnichannel_experience;
}
void OAILiasettingsCustomBatchResponseEntry::setOmnichannelExperience(const OAILiaOmnichannelExperience &omnichannel_experience) {
    m_omnichannel_experience = omnichannel_experience;
    m_omnichannel_experience_isSet = true;
}

bool OAILiasettingsCustomBatchResponseEntry::is_omnichannel_experience_Set() const{
    return m_omnichannel_experience_isSet;
}

bool OAILiasettingsCustomBatchResponseEntry::is_omnichannel_experience_Valid() const{
    return m_omnichannel_experience_isValid;
}

QList<OAIPosDataProviders> OAILiasettingsCustomBatchResponseEntry::getPosDataProviders() const {
    return m_pos_data_providers;
}
void OAILiasettingsCustomBatchResponseEntry::setPosDataProviders(const QList<OAIPosDataProviders> &pos_data_providers) {
    m_pos_data_providers = pos_data_providers;
    m_pos_data_providers_isSet = true;
}

bool OAILiasettingsCustomBatchResponseEntry::is_pos_data_providers_Set() const{
    return m_pos_data_providers_isSet;
}

bool OAILiasettingsCustomBatchResponseEntry::is_pos_data_providers_Valid() const{
    return m_pos_data_providers_isValid;
}

bool OAILiasettingsCustomBatchResponseEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gmb_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lia_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_omnichannel_experience.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pos_data_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiasettingsCustomBatchResponseEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
