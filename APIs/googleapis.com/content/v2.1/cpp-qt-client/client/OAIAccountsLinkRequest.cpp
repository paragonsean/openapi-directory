/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountsLinkRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountsLinkRequest::OAIAccountsLinkRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountsLinkRequest::OAIAccountsLinkRequest() {
    this->initializeModel();
}

OAIAccountsLinkRequest::~OAIAccountsLinkRequest() {}

void OAIAccountsLinkRequest::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_e_commerce_platform_link_info_isSet = false;
    m_e_commerce_platform_link_info_isValid = false;

    m_link_type_isSet = false;
    m_link_type_isValid = false;

    m_linked_account_id_isSet = false;
    m_linked_account_id_isValid = false;

    m_payment_service_provider_link_info_isSet = false;
    m_payment_service_provider_link_info_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;
}

void OAIAccountsLinkRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountsLinkRequest::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_e_commerce_platform_link_info_isValid = ::OpenAPI::fromJsonValue(m_e_commerce_platform_link_info, json[QString("eCommercePlatformLinkInfo")]);
    m_e_commerce_platform_link_info_isSet = !json[QString("eCommercePlatformLinkInfo")].isNull() && m_e_commerce_platform_link_info_isValid;

    m_link_type_isValid = ::OpenAPI::fromJsonValue(m_link_type, json[QString("linkType")]);
    m_link_type_isSet = !json[QString("linkType")].isNull() && m_link_type_isValid;

    m_linked_account_id_isValid = ::OpenAPI::fromJsonValue(m_linked_account_id, json[QString("linkedAccountId")]);
    m_linked_account_id_isSet = !json[QString("linkedAccountId")].isNull() && m_linked_account_id_isValid;

    m_payment_service_provider_link_info_isValid = ::OpenAPI::fromJsonValue(m_payment_service_provider_link_info, json[QString("paymentServiceProviderLinkInfo")]);
    m_payment_service_provider_link_info_isSet = !json[QString("paymentServiceProviderLinkInfo")].isNull() && m_payment_service_provider_link_info_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;
}

QString OAIAccountsLinkRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountsLinkRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_e_commerce_platform_link_info.isSet()) {
        obj.insert(QString("eCommercePlatformLinkInfo"), ::OpenAPI::toJsonValue(m_e_commerce_platform_link_info));
    }
    if (m_link_type_isSet) {
        obj.insert(QString("linkType"), ::OpenAPI::toJsonValue(m_link_type));
    }
    if (m_linked_account_id_isSet) {
        obj.insert(QString("linkedAccountId"), ::OpenAPI::toJsonValue(m_linked_account_id));
    }
    if (m_payment_service_provider_link_info.isSet()) {
        obj.insert(QString("paymentServiceProviderLinkInfo"), ::OpenAPI::toJsonValue(m_payment_service_provider_link_info));
    }
    if (m_services.size() > 0) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    return obj;
}

QString OAIAccountsLinkRequest::getAction() const {
    return m_action;
}
void OAIAccountsLinkRequest::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIAccountsLinkRequest::is_action_Set() const{
    return m_action_isSet;
}

bool OAIAccountsLinkRequest::is_action_Valid() const{
    return m_action_isValid;
}

OAIECommercePlatformLinkInfo OAIAccountsLinkRequest::getECommercePlatformLinkInfo() const {
    return m_e_commerce_platform_link_info;
}
void OAIAccountsLinkRequest::setECommercePlatformLinkInfo(const OAIECommercePlatformLinkInfo &e_commerce_platform_link_info) {
    m_e_commerce_platform_link_info = e_commerce_platform_link_info;
    m_e_commerce_platform_link_info_isSet = true;
}

bool OAIAccountsLinkRequest::is_e_commerce_platform_link_info_Set() const{
    return m_e_commerce_platform_link_info_isSet;
}

bool OAIAccountsLinkRequest::is_e_commerce_platform_link_info_Valid() const{
    return m_e_commerce_platform_link_info_isValid;
}

QString OAIAccountsLinkRequest::getLinkType() const {
    return m_link_type;
}
void OAIAccountsLinkRequest::setLinkType(const QString &link_type) {
    m_link_type = link_type;
    m_link_type_isSet = true;
}

bool OAIAccountsLinkRequest::is_link_type_Set() const{
    return m_link_type_isSet;
}

bool OAIAccountsLinkRequest::is_link_type_Valid() const{
    return m_link_type_isValid;
}

QString OAIAccountsLinkRequest::getLinkedAccountId() const {
    return m_linked_account_id;
}
void OAIAccountsLinkRequest::setLinkedAccountId(const QString &linked_account_id) {
    m_linked_account_id = linked_account_id;
    m_linked_account_id_isSet = true;
}

bool OAIAccountsLinkRequest::is_linked_account_id_Set() const{
    return m_linked_account_id_isSet;
}

bool OAIAccountsLinkRequest::is_linked_account_id_Valid() const{
    return m_linked_account_id_isValid;
}

OAIPaymentServiceProviderLinkInfo OAIAccountsLinkRequest::getPaymentServiceProviderLinkInfo() const {
    return m_payment_service_provider_link_info;
}
void OAIAccountsLinkRequest::setPaymentServiceProviderLinkInfo(const OAIPaymentServiceProviderLinkInfo &payment_service_provider_link_info) {
    m_payment_service_provider_link_info = payment_service_provider_link_info;
    m_payment_service_provider_link_info_isSet = true;
}

bool OAIAccountsLinkRequest::is_payment_service_provider_link_info_Set() const{
    return m_payment_service_provider_link_info_isSet;
}

bool OAIAccountsLinkRequest::is_payment_service_provider_link_info_Valid() const{
    return m_payment_service_provider_link_info_isValid;
}

QList<QString> OAIAccountsLinkRequest::getServices() const {
    return m_services;
}
void OAIAccountsLinkRequest::setServices(const QList<QString> &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIAccountsLinkRequest::is_services_Set() const{
    return m_services_isSet;
}

bool OAIAccountsLinkRequest::is_services_Valid() const{
    return m_services_isValid;
}

bool OAIAccountsLinkRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_commerce_platform_link_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_service_provider_link_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountsLinkRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
