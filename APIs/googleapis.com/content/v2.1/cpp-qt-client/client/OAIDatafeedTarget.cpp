/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatafeedTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatafeedTarget::OAIDatafeedTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatafeedTarget::OAIDatafeedTarget() {
    this->initializeModel();
}

OAIDatafeedTarget::~OAIDatafeedTarget() {}

void OAIDatafeedTarget::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_excluded_destinations_isSet = false;
    m_excluded_destinations_isValid = false;

    m_feed_label_isSet = false;
    m_feed_label_isValid = false;

    m_included_destinations_isSet = false;
    m_included_destinations_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_target_countries_isSet = false;
    m_target_countries_isValid = false;
}

void OAIDatafeedTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatafeedTarget::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_excluded_destinations_isValid = ::OpenAPI::fromJsonValue(m_excluded_destinations, json[QString("excludedDestinations")]);
    m_excluded_destinations_isSet = !json[QString("excludedDestinations")].isNull() && m_excluded_destinations_isValid;

    m_feed_label_isValid = ::OpenAPI::fromJsonValue(m_feed_label, json[QString("feedLabel")]);
    m_feed_label_isSet = !json[QString("feedLabel")].isNull() && m_feed_label_isValid;

    m_included_destinations_isValid = ::OpenAPI::fromJsonValue(m_included_destinations, json[QString("includedDestinations")]);
    m_included_destinations_isSet = !json[QString("includedDestinations")].isNull() && m_included_destinations_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_target_countries_isValid = ::OpenAPI::fromJsonValue(m_target_countries, json[QString("targetCountries")]);
    m_target_countries_isSet = !json[QString("targetCountries")].isNull() && m_target_countries_isValid;
}

QString OAIDatafeedTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatafeedTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_excluded_destinations.size() > 0) {
        obj.insert(QString("excludedDestinations"), ::OpenAPI::toJsonValue(m_excluded_destinations));
    }
    if (m_feed_label_isSet) {
        obj.insert(QString("feedLabel"), ::OpenAPI::toJsonValue(m_feed_label));
    }
    if (m_included_destinations.size() > 0) {
        obj.insert(QString("includedDestinations"), ::OpenAPI::toJsonValue(m_included_destinations));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_target_countries.size() > 0) {
        obj.insert(QString("targetCountries"), ::OpenAPI::toJsonValue(m_target_countries));
    }
    return obj;
}

QString OAIDatafeedTarget::getCountry() const {
    return m_country;
}
void OAIDatafeedTarget::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIDatafeedTarget::is_country_Set() const{
    return m_country_isSet;
}

bool OAIDatafeedTarget::is_country_Valid() const{
    return m_country_isValid;
}

QList<QString> OAIDatafeedTarget::getExcludedDestinations() const {
    return m_excluded_destinations;
}
void OAIDatafeedTarget::setExcludedDestinations(const QList<QString> &excluded_destinations) {
    m_excluded_destinations = excluded_destinations;
    m_excluded_destinations_isSet = true;
}

bool OAIDatafeedTarget::is_excluded_destinations_Set() const{
    return m_excluded_destinations_isSet;
}

bool OAIDatafeedTarget::is_excluded_destinations_Valid() const{
    return m_excluded_destinations_isValid;
}

QString OAIDatafeedTarget::getFeedLabel() const {
    return m_feed_label;
}
void OAIDatafeedTarget::setFeedLabel(const QString &feed_label) {
    m_feed_label = feed_label;
    m_feed_label_isSet = true;
}

bool OAIDatafeedTarget::is_feed_label_Set() const{
    return m_feed_label_isSet;
}

bool OAIDatafeedTarget::is_feed_label_Valid() const{
    return m_feed_label_isValid;
}

QList<QString> OAIDatafeedTarget::getIncludedDestinations() const {
    return m_included_destinations;
}
void OAIDatafeedTarget::setIncludedDestinations(const QList<QString> &included_destinations) {
    m_included_destinations = included_destinations;
    m_included_destinations_isSet = true;
}

bool OAIDatafeedTarget::is_included_destinations_Set() const{
    return m_included_destinations_isSet;
}

bool OAIDatafeedTarget::is_included_destinations_Valid() const{
    return m_included_destinations_isValid;
}

QString OAIDatafeedTarget::getLanguage() const {
    return m_language;
}
void OAIDatafeedTarget::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIDatafeedTarget::is_language_Set() const{
    return m_language_isSet;
}

bool OAIDatafeedTarget::is_language_Valid() const{
    return m_language_isValid;
}

QList<QString> OAIDatafeedTarget::getTargetCountries() const {
    return m_target_countries;
}
void OAIDatafeedTarget::setTargetCountries(const QList<QString> &target_countries) {
    m_target_countries = target_countries;
    m_target_countries_isSet = true;
}

bool OAIDatafeedTarget::is_target_countries_Set() const{
    return m_target_countries_isSet;
}

bool OAIDatafeedTarget::is_target_countries_Valid() const{
    return m_target_countries_isValid;
}

bool OAIDatafeedTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatafeedTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
