/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegion::OAIRegion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegion::OAIRegion() {
    this->initializeModel();
}

OAIRegion::~OAIRegion() {}

void OAIRegion::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_geotarget_area_isSet = false;
    m_geotarget_area_isValid = false;

    m_merchant_id_isSet = false;
    m_merchant_id_isValid = false;

    m_postal_code_area_isSet = false;
    m_postal_code_area_isValid = false;

    m_region_id_isSet = false;
    m_region_id_isValid = false;

    m_regional_inventory_eligible_isSet = false;
    m_regional_inventory_eligible_isValid = false;

    m_shipping_eligible_isSet = false;
    m_shipping_eligible_isValid = false;
}

void OAIRegion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegion::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_geotarget_area_isValid = ::OpenAPI::fromJsonValue(m_geotarget_area, json[QString("geotargetArea")]);
    m_geotarget_area_isSet = !json[QString("geotargetArea")].isNull() && m_geotarget_area_isValid;

    m_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_id, json[QString("merchantId")]);
    m_merchant_id_isSet = !json[QString("merchantId")].isNull() && m_merchant_id_isValid;

    m_postal_code_area_isValid = ::OpenAPI::fromJsonValue(m_postal_code_area, json[QString("postalCodeArea")]);
    m_postal_code_area_isSet = !json[QString("postalCodeArea")].isNull() && m_postal_code_area_isValid;

    m_region_id_isValid = ::OpenAPI::fromJsonValue(m_region_id, json[QString("regionId")]);
    m_region_id_isSet = !json[QString("regionId")].isNull() && m_region_id_isValid;

    m_regional_inventory_eligible_isValid = ::OpenAPI::fromJsonValue(m_regional_inventory_eligible, json[QString("regionalInventoryEligible")]);
    m_regional_inventory_eligible_isSet = !json[QString("regionalInventoryEligible")].isNull() && m_regional_inventory_eligible_isValid;

    m_shipping_eligible_isValid = ::OpenAPI::fromJsonValue(m_shipping_eligible, json[QString("shippingEligible")]);
    m_shipping_eligible_isSet = !json[QString("shippingEligible")].isNull() && m_shipping_eligible_isValid;
}

QString OAIRegion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegion::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_geotarget_area.isSet()) {
        obj.insert(QString("geotargetArea"), ::OpenAPI::toJsonValue(m_geotarget_area));
    }
    if (m_merchant_id_isSet) {
        obj.insert(QString("merchantId"), ::OpenAPI::toJsonValue(m_merchant_id));
    }
    if (m_postal_code_area.isSet()) {
        obj.insert(QString("postalCodeArea"), ::OpenAPI::toJsonValue(m_postal_code_area));
    }
    if (m_region_id_isSet) {
        obj.insert(QString("regionId"), ::OpenAPI::toJsonValue(m_region_id));
    }
    if (m_regional_inventory_eligible_isSet) {
        obj.insert(QString("regionalInventoryEligible"), ::OpenAPI::toJsonValue(m_regional_inventory_eligible));
    }
    if (m_shipping_eligible_isSet) {
        obj.insert(QString("shippingEligible"), ::OpenAPI::toJsonValue(m_shipping_eligible));
    }
    return obj;
}

QString OAIRegion::getDisplayName() const {
    return m_display_name;
}
void OAIRegion::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRegion::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRegion::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIRegionGeoTargetArea OAIRegion::getGeotargetArea() const {
    return m_geotarget_area;
}
void OAIRegion::setGeotargetArea(const OAIRegionGeoTargetArea &geotarget_area) {
    m_geotarget_area = geotarget_area;
    m_geotarget_area_isSet = true;
}

bool OAIRegion::is_geotarget_area_Set() const{
    return m_geotarget_area_isSet;
}

bool OAIRegion::is_geotarget_area_Valid() const{
    return m_geotarget_area_isValid;
}

QString OAIRegion::getMerchantId() const {
    return m_merchant_id;
}
void OAIRegion::setMerchantId(const QString &merchant_id) {
    m_merchant_id = merchant_id;
    m_merchant_id_isSet = true;
}

bool OAIRegion::is_merchant_id_Set() const{
    return m_merchant_id_isSet;
}

bool OAIRegion::is_merchant_id_Valid() const{
    return m_merchant_id_isValid;
}

OAIRegionPostalCodeArea OAIRegion::getPostalCodeArea() const {
    return m_postal_code_area;
}
void OAIRegion::setPostalCodeArea(const OAIRegionPostalCodeArea &postal_code_area) {
    m_postal_code_area = postal_code_area;
    m_postal_code_area_isSet = true;
}

bool OAIRegion::is_postal_code_area_Set() const{
    return m_postal_code_area_isSet;
}

bool OAIRegion::is_postal_code_area_Valid() const{
    return m_postal_code_area_isValid;
}

QString OAIRegion::getRegionId() const {
    return m_region_id;
}
void OAIRegion::setRegionId(const QString &region_id) {
    m_region_id = region_id;
    m_region_id_isSet = true;
}

bool OAIRegion::is_region_id_Set() const{
    return m_region_id_isSet;
}

bool OAIRegion::is_region_id_Valid() const{
    return m_region_id_isValid;
}

bool OAIRegion::isRegionalInventoryEligible() const {
    return m_regional_inventory_eligible;
}
void OAIRegion::setRegionalInventoryEligible(const bool &regional_inventory_eligible) {
    m_regional_inventory_eligible = regional_inventory_eligible;
    m_regional_inventory_eligible_isSet = true;
}

bool OAIRegion::is_regional_inventory_eligible_Set() const{
    return m_regional_inventory_eligible_isSet;
}

bool OAIRegion::is_regional_inventory_eligible_Valid() const{
    return m_regional_inventory_eligible_isValid;
}

bool OAIRegion::isShippingEligible() const {
    return m_shipping_eligible;
}
void OAIRegion::setShippingEligible(const bool &shipping_eligible) {
    m_shipping_eligible = shipping_eligible;
    m_shipping_eligible_isSet = true;
}

bool OAIRegion::is_shipping_eligible_Set() const{
    return m_shipping_eligible_isSet;
}

bool OAIRegion::is_shipping_eligible_Valid() const{
    return m_shipping_eligible_isValid;
}

bool OAIRegion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geotarget_area.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_area.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regional_inventory_eligible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_eligible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
