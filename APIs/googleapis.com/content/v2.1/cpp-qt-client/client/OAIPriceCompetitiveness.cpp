/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPriceCompetitiveness.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPriceCompetitiveness::OAIPriceCompetitiveness(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPriceCompetitiveness::OAIPriceCompetitiveness() {
    this->initializeModel();
}

OAIPriceCompetitiveness::~OAIPriceCompetitiveness() {}

void OAIPriceCompetitiveness::initializeModel() {

    m_benchmark_price_currency_code_isSet = false;
    m_benchmark_price_currency_code_isValid = false;

    m_benchmark_price_micros_isSet = false;
    m_benchmark_price_micros_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;
}

void OAIPriceCompetitiveness::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPriceCompetitiveness::fromJsonObject(QJsonObject json) {

    m_benchmark_price_currency_code_isValid = ::OpenAPI::fromJsonValue(m_benchmark_price_currency_code, json[QString("benchmarkPriceCurrencyCode")]);
    m_benchmark_price_currency_code_isSet = !json[QString("benchmarkPriceCurrencyCode")].isNull() && m_benchmark_price_currency_code_isValid;

    m_benchmark_price_micros_isValid = ::OpenAPI::fromJsonValue(m_benchmark_price_micros, json[QString("benchmarkPriceMicros")]);
    m_benchmark_price_micros_isSet = !json[QString("benchmarkPriceMicros")].isNull() && m_benchmark_price_micros_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;
}

QString OAIPriceCompetitiveness::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPriceCompetitiveness::asJsonObject() const {
    QJsonObject obj;
    if (m_benchmark_price_currency_code_isSet) {
        obj.insert(QString("benchmarkPriceCurrencyCode"), ::OpenAPI::toJsonValue(m_benchmark_price_currency_code));
    }
    if (m_benchmark_price_micros_isSet) {
        obj.insert(QString("benchmarkPriceMicros"), ::OpenAPI::toJsonValue(m_benchmark_price_micros));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    return obj;
}

QString OAIPriceCompetitiveness::getBenchmarkPriceCurrencyCode() const {
    return m_benchmark_price_currency_code;
}
void OAIPriceCompetitiveness::setBenchmarkPriceCurrencyCode(const QString &benchmark_price_currency_code) {
    m_benchmark_price_currency_code = benchmark_price_currency_code;
    m_benchmark_price_currency_code_isSet = true;
}

bool OAIPriceCompetitiveness::is_benchmark_price_currency_code_Set() const{
    return m_benchmark_price_currency_code_isSet;
}

bool OAIPriceCompetitiveness::is_benchmark_price_currency_code_Valid() const{
    return m_benchmark_price_currency_code_isValid;
}

QString OAIPriceCompetitiveness::getBenchmarkPriceMicros() const {
    return m_benchmark_price_micros;
}
void OAIPriceCompetitiveness::setBenchmarkPriceMicros(const QString &benchmark_price_micros) {
    m_benchmark_price_micros = benchmark_price_micros;
    m_benchmark_price_micros_isSet = true;
}

bool OAIPriceCompetitiveness::is_benchmark_price_micros_Set() const{
    return m_benchmark_price_micros_isSet;
}

bool OAIPriceCompetitiveness::is_benchmark_price_micros_Valid() const{
    return m_benchmark_price_micros_isValid;
}

QString OAIPriceCompetitiveness::getCountryCode() const {
    return m_country_code;
}
void OAIPriceCompetitiveness::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIPriceCompetitiveness::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIPriceCompetitiveness::is_country_code_Valid() const{
    return m_country_code_isValid;
}

bool OAIPriceCompetitiveness::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_benchmark_price_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_benchmark_price_micros_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPriceCompetitiveness::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
