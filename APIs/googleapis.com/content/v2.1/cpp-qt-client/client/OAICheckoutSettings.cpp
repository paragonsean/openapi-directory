/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckoutSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckoutSettings::OAICheckoutSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckoutSettings::OAICheckoutSettings() {
    this->initializeModel();
}

OAICheckoutSettings::~OAICheckoutSettings() {}

void OAICheckoutSettings::initializeModel() {

    m_effective_enrollment_state_isSet = false;
    m_effective_enrollment_state_isValid = false;

    m_effective_review_state_isSet = false;
    m_effective_review_state_isValid = false;

    m_effective_uri_settings_isSet = false;
    m_effective_uri_settings_isValid = false;

    m_enrollment_state_isSet = false;
    m_enrollment_state_isValid = false;

    m_merchant_id_isSet = false;
    m_merchant_id_isValid = false;

    m_review_state_isSet = false;
    m_review_state_isValid = false;

    m_uri_settings_isSet = false;
    m_uri_settings_isValid = false;
}

void OAICheckoutSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckoutSettings::fromJsonObject(QJsonObject json) {

    m_effective_enrollment_state_isValid = ::OpenAPI::fromJsonValue(m_effective_enrollment_state, json[QString("effectiveEnrollmentState")]);
    m_effective_enrollment_state_isSet = !json[QString("effectiveEnrollmentState")].isNull() && m_effective_enrollment_state_isValid;

    m_effective_review_state_isValid = ::OpenAPI::fromJsonValue(m_effective_review_state, json[QString("effectiveReviewState")]);
    m_effective_review_state_isSet = !json[QString("effectiveReviewState")].isNull() && m_effective_review_state_isValid;

    m_effective_uri_settings_isValid = ::OpenAPI::fromJsonValue(m_effective_uri_settings, json[QString("effectiveUriSettings")]);
    m_effective_uri_settings_isSet = !json[QString("effectiveUriSettings")].isNull() && m_effective_uri_settings_isValid;

    m_enrollment_state_isValid = ::OpenAPI::fromJsonValue(m_enrollment_state, json[QString("enrollmentState")]);
    m_enrollment_state_isSet = !json[QString("enrollmentState")].isNull() && m_enrollment_state_isValid;

    m_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_id, json[QString("merchantId")]);
    m_merchant_id_isSet = !json[QString("merchantId")].isNull() && m_merchant_id_isValid;

    m_review_state_isValid = ::OpenAPI::fromJsonValue(m_review_state, json[QString("reviewState")]);
    m_review_state_isSet = !json[QString("reviewState")].isNull() && m_review_state_isValid;

    m_uri_settings_isValid = ::OpenAPI::fromJsonValue(m_uri_settings, json[QString("uriSettings")]);
    m_uri_settings_isSet = !json[QString("uriSettings")].isNull() && m_uri_settings_isValid;
}

QString OAICheckoutSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckoutSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_effective_enrollment_state_isSet) {
        obj.insert(QString("effectiveEnrollmentState"), ::OpenAPI::toJsonValue(m_effective_enrollment_state));
    }
    if (m_effective_review_state_isSet) {
        obj.insert(QString("effectiveReviewState"), ::OpenAPI::toJsonValue(m_effective_review_state));
    }
    if (m_effective_uri_settings.isSet()) {
        obj.insert(QString("effectiveUriSettings"), ::OpenAPI::toJsonValue(m_effective_uri_settings));
    }
    if (m_enrollment_state_isSet) {
        obj.insert(QString("enrollmentState"), ::OpenAPI::toJsonValue(m_enrollment_state));
    }
    if (m_merchant_id_isSet) {
        obj.insert(QString("merchantId"), ::OpenAPI::toJsonValue(m_merchant_id));
    }
    if (m_review_state_isSet) {
        obj.insert(QString("reviewState"), ::OpenAPI::toJsonValue(m_review_state));
    }
    if (m_uri_settings.isSet()) {
        obj.insert(QString("uriSettings"), ::OpenAPI::toJsonValue(m_uri_settings));
    }
    return obj;
}

QString OAICheckoutSettings::getEffectiveEnrollmentState() const {
    return m_effective_enrollment_state;
}
void OAICheckoutSettings::setEffectiveEnrollmentState(const QString &effective_enrollment_state) {
    m_effective_enrollment_state = effective_enrollment_state;
    m_effective_enrollment_state_isSet = true;
}

bool OAICheckoutSettings::is_effective_enrollment_state_Set() const{
    return m_effective_enrollment_state_isSet;
}

bool OAICheckoutSettings::is_effective_enrollment_state_Valid() const{
    return m_effective_enrollment_state_isValid;
}

QString OAICheckoutSettings::getEffectiveReviewState() const {
    return m_effective_review_state;
}
void OAICheckoutSettings::setEffectiveReviewState(const QString &effective_review_state) {
    m_effective_review_state = effective_review_state;
    m_effective_review_state_isSet = true;
}

bool OAICheckoutSettings::is_effective_review_state_Set() const{
    return m_effective_review_state_isSet;
}

bool OAICheckoutSettings::is_effective_review_state_Valid() const{
    return m_effective_review_state_isValid;
}

OAIUrlSettings OAICheckoutSettings::getEffectiveUriSettings() const {
    return m_effective_uri_settings;
}
void OAICheckoutSettings::setEffectiveUriSettings(const OAIUrlSettings &effective_uri_settings) {
    m_effective_uri_settings = effective_uri_settings;
    m_effective_uri_settings_isSet = true;
}

bool OAICheckoutSettings::is_effective_uri_settings_Set() const{
    return m_effective_uri_settings_isSet;
}

bool OAICheckoutSettings::is_effective_uri_settings_Valid() const{
    return m_effective_uri_settings_isValid;
}

QString OAICheckoutSettings::getEnrollmentState() const {
    return m_enrollment_state;
}
void OAICheckoutSettings::setEnrollmentState(const QString &enrollment_state) {
    m_enrollment_state = enrollment_state;
    m_enrollment_state_isSet = true;
}

bool OAICheckoutSettings::is_enrollment_state_Set() const{
    return m_enrollment_state_isSet;
}

bool OAICheckoutSettings::is_enrollment_state_Valid() const{
    return m_enrollment_state_isValid;
}

QString OAICheckoutSettings::getMerchantId() const {
    return m_merchant_id;
}
void OAICheckoutSettings::setMerchantId(const QString &merchant_id) {
    m_merchant_id = merchant_id;
    m_merchant_id_isSet = true;
}

bool OAICheckoutSettings::is_merchant_id_Set() const{
    return m_merchant_id_isSet;
}

bool OAICheckoutSettings::is_merchant_id_Valid() const{
    return m_merchant_id_isValid;
}

QString OAICheckoutSettings::getReviewState() const {
    return m_review_state;
}
void OAICheckoutSettings::setReviewState(const QString &review_state) {
    m_review_state = review_state;
    m_review_state_isSet = true;
}

bool OAICheckoutSettings::is_review_state_Set() const{
    return m_review_state_isSet;
}

bool OAICheckoutSettings::is_review_state_Valid() const{
    return m_review_state_isValid;
}

OAIUrlSettings OAICheckoutSettings::getUriSettings() const {
    return m_uri_settings;
}
void OAICheckoutSettings::setUriSettings(const OAIUrlSettings &uri_settings) {
    m_uri_settings = uri_settings;
    m_uri_settings_isSet = true;
}

bool OAICheckoutSettings::is_uri_settings_Set() const{
    return m_uri_settings_isSet;
}

bool OAICheckoutSettings::is_uri_settings_Valid() const{
    return m_uri_settings_isValid;
}

bool OAICheckoutSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_effective_enrollment_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_review_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_uri_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrollment_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckoutSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
