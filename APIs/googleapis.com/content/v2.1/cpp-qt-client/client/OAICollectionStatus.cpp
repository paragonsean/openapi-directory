/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectionStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectionStatus::OAICollectionStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectionStatus::OAICollectionStatus() {
    this->initializeModel();
}

OAICollectionStatus::~OAICollectionStatus() {}

void OAICollectionStatus::initializeModel() {

    m_collection_level_issuses_isSet = false;
    m_collection_level_issuses_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_destination_statuses_isSet = false;
    m_destination_statuses_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_update_date_isSet = false;
    m_last_update_date_isValid = false;
}

void OAICollectionStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectionStatus::fromJsonObject(QJsonObject json) {

    m_collection_level_issuses_isValid = ::OpenAPI::fromJsonValue(m_collection_level_issuses, json[QString("collectionLevelIssuses")]);
    m_collection_level_issuses_isSet = !json[QString("collectionLevelIssuses")].isNull() && m_collection_level_issuses_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_destination_statuses_isValid = ::OpenAPI::fromJsonValue(m_destination_statuses, json[QString("destinationStatuses")]);
    m_destination_statuses_isSet = !json[QString("destinationStatuses")].isNull() && m_destination_statuses_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_update_date_isValid = ::OpenAPI::fromJsonValue(m_last_update_date, json[QString("lastUpdateDate")]);
    m_last_update_date_isSet = !json[QString("lastUpdateDate")].isNull() && m_last_update_date_isValid;
}

QString OAICollectionStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectionStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_collection_level_issuses.size() > 0) {
        obj.insert(QString("collectionLevelIssuses"), ::OpenAPI::toJsonValue(m_collection_level_issuses));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_destination_statuses.size() > 0) {
        obj.insert(QString("destinationStatuses"), ::OpenAPI::toJsonValue(m_destination_statuses));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_update_date_isSet) {
        obj.insert(QString("lastUpdateDate"), ::OpenAPI::toJsonValue(m_last_update_date));
    }
    return obj;
}

QList<OAICollectionStatusItemLevelIssue> OAICollectionStatus::getCollectionLevelIssuses() const {
    return m_collection_level_issuses;
}
void OAICollectionStatus::setCollectionLevelIssuses(const QList<OAICollectionStatusItemLevelIssue> &collection_level_issuses) {
    m_collection_level_issuses = collection_level_issuses;
    m_collection_level_issuses_isSet = true;
}

bool OAICollectionStatus::is_collection_level_issuses_Set() const{
    return m_collection_level_issuses_isSet;
}

bool OAICollectionStatus::is_collection_level_issuses_Valid() const{
    return m_collection_level_issuses_isValid;
}

QString OAICollectionStatus::getCreationDate() const {
    return m_creation_date;
}
void OAICollectionStatus::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAICollectionStatus::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAICollectionStatus::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QList<OAICollectionStatusDestinationStatus> OAICollectionStatus::getDestinationStatuses() const {
    return m_destination_statuses;
}
void OAICollectionStatus::setDestinationStatuses(const QList<OAICollectionStatusDestinationStatus> &destination_statuses) {
    m_destination_statuses = destination_statuses;
    m_destination_statuses_isSet = true;
}

bool OAICollectionStatus::is_destination_statuses_Set() const{
    return m_destination_statuses_isSet;
}

bool OAICollectionStatus::is_destination_statuses_Valid() const{
    return m_destination_statuses_isValid;
}

QString OAICollectionStatus::getId() const {
    return m_id;
}
void OAICollectionStatus::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICollectionStatus::is_id_Set() const{
    return m_id_isSet;
}

bool OAICollectionStatus::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICollectionStatus::getLastUpdateDate() const {
    return m_last_update_date;
}
void OAICollectionStatus::setLastUpdateDate(const QString &last_update_date) {
    m_last_update_date = last_update_date;
    m_last_update_date_isSet = true;
}

bool OAICollectionStatus::is_last_update_date_Set() const{
    return m_last_update_date_isSet;
}

bool OAICollectionStatus::is_last_update_date_Valid() const{
    return m_last_update_date_isValid;
}

bool OAICollectionStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collection_level_issuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectionStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
