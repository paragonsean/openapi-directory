/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderreturnsProcessRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderreturnsProcessRequest::OAIOrderreturnsProcessRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderreturnsProcessRequest::OAIOrderreturnsProcessRequest() {
    this->initializeModel();
}

OAIOrderreturnsProcessRequest::~OAIOrderreturnsProcessRequest() {}

void OAIOrderreturnsProcessRequest::initializeModel() {

    m_full_charge_return_shipping_cost_isSet = false;
    m_full_charge_return_shipping_cost_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_refund_shipping_fee_isSet = false;
    m_refund_shipping_fee_isValid = false;

    m_return_items_isSet = false;
    m_return_items_isValid = false;
}

void OAIOrderreturnsProcessRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderreturnsProcessRequest::fromJsonObject(QJsonObject json) {

    m_full_charge_return_shipping_cost_isValid = ::OpenAPI::fromJsonValue(m_full_charge_return_shipping_cost, json[QString("fullChargeReturnShippingCost")]);
    m_full_charge_return_shipping_cost_isSet = !json[QString("fullChargeReturnShippingCost")].isNull() && m_full_charge_return_shipping_cost_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_refund_shipping_fee_isValid = ::OpenAPI::fromJsonValue(m_refund_shipping_fee, json[QString("refundShippingFee")]);
    m_refund_shipping_fee_isSet = !json[QString("refundShippingFee")].isNull() && m_refund_shipping_fee_isValid;

    m_return_items_isValid = ::OpenAPI::fromJsonValue(m_return_items, json[QString("returnItems")]);
    m_return_items_isSet = !json[QString("returnItems")].isNull() && m_return_items_isValid;
}

QString OAIOrderreturnsProcessRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderreturnsProcessRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_full_charge_return_shipping_cost_isSet) {
        obj.insert(QString("fullChargeReturnShippingCost"), ::OpenAPI::toJsonValue(m_full_charge_return_shipping_cost));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_refund_shipping_fee.isSet()) {
        obj.insert(QString("refundShippingFee"), ::OpenAPI::toJsonValue(m_refund_shipping_fee));
    }
    if (m_return_items.size() > 0) {
        obj.insert(QString("returnItems"), ::OpenAPI::toJsonValue(m_return_items));
    }
    return obj;
}

bool OAIOrderreturnsProcessRequest::isFullChargeReturnShippingCost() const {
    return m_full_charge_return_shipping_cost;
}
void OAIOrderreturnsProcessRequest::setFullChargeReturnShippingCost(const bool &full_charge_return_shipping_cost) {
    m_full_charge_return_shipping_cost = full_charge_return_shipping_cost;
    m_full_charge_return_shipping_cost_isSet = true;
}

bool OAIOrderreturnsProcessRequest::is_full_charge_return_shipping_cost_Set() const{
    return m_full_charge_return_shipping_cost_isSet;
}

bool OAIOrderreturnsProcessRequest::is_full_charge_return_shipping_cost_Valid() const{
    return m_full_charge_return_shipping_cost_isValid;
}

QString OAIOrderreturnsProcessRequest::getOperationId() const {
    return m_operation_id;
}
void OAIOrderreturnsProcessRequest::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIOrderreturnsProcessRequest::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIOrderreturnsProcessRequest::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

OAIOrderreturnsRefundOperation OAIOrderreturnsProcessRequest::getRefundShippingFee() const {
    return m_refund_shipping_fee;
}
void OAIOrderreturnsProcessRequest::setRefundShippingFee(const OAIOrderreturnsRefundOperation &refund_shipping_fee) {
    m_refund_shipping_fee = refund_shipping_fee;
    m_refund_shipping_fee_isSet = true;
}

bool OAIOrderreturnsProcessRequest::is_refund_shipping_fee_Set() const{
    return m_refund_shipping_fee_isSet;
}

bool OAIOrderreturnsProcessRequest::is_refund_shipping_fee_Valid() const{
    return m_refund_shipping_fee_isValid;
}

QList<OAIOrderreturnsReturnItem> OAIOrderreturnsProcessRequest::getReturnItems() const {
    return m_return_items;
}
void OAIOrderreturnsProcessRequest::setReturnItems(const QList<OAIOrderreturnsReturnItem> &return_items) {
    m_return_items = return_items;
    m_return_items_isSet = true;
}

bool OAIOrderreturnsProcessRequest::is_return_items_Set() const{
    return m_return_items_isSet;
}

bool OAIOrderreturnsProcessRequest::is_return_items_Valid() const{
    return m_return_items_isValid;
}

bool OAIOrderreturnsProcessRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_full_charge_return_shipping_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_shipping_fee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderreturnsProcessRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
