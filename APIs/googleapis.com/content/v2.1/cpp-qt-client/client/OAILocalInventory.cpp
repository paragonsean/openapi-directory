/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocalInventory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocalInventory::OAILocalInventory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocalInventory::OAILocalInventory() {
    this->initializeModel();
}

OAILocalInventory::~OAILocalInventory() {}

void OAILocalInventory::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_custom_attributes_isSet = false;
    m_custom_attributes_isValid = false;

    m_instore_product_location_isSet = false;
    m_instore_product_location_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_pickup_method_isSet = false;
    m_pickup_method_isValid = false;

    m_pickup_sla_isSet = false;
    m_pickup_sla_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_sale_price_isSet = false;
    m_sale_price_isValid = false;

    m_sale_price_effective_date_isSet = false;
    m_sale_price_effective_date_isValid = false;

    m_store_code_isSet = false;
    m_store_code_isValid = false;
}

void OAILocalInventory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocalInventory::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_custom_attributes_isValid = ::OpenAPI::fromJsonValue(m_custom_attributes, json[QString("customAttributes")]);
    m_custom_attributes_isSet = !json[QString("customAttributes")].isNull() && m_custom_attributes_isValid;

    m_instore_product_location_isValid = ::OpenAPI::fromJsonValue(m_instore_product_location, json[QString("instoreProductLocation")]);
    m_instore_product_location_isSet = !json[QString("instoreProductLocation")].isNull() && m_instore_product_location_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_pickup_method_isValid = ::OpenAPI::fromJsonValue(m_pickup_method, json[QString("pickupMethod")]);
    m_pickup_method_isSet = !json[QString("pickupMethod")].isNull() && m_pickup_method_isValid;

    m_pickup_sla_isValid = ::OpenAPI::fromJsonValue(m_pickup_sla, json[QString("pickupSla")]);
    m_pickup_sla_isSet = !json[QString("pickupSla")].isNull() && m_pickup_sla_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_sale_price_isValid = ::OpenAPI::fromJsonValue(m_sale_price, json[QString("salePrice")]);
    m_sale_price_isSet = !json[QString("salePrice")].isNull() && m_sale_price_isValid;

    m_sale_price_effective_date_isValid = ::OpenAPI::fromJsonValue(m_sale_price_effective_date, json[QString("salePriceEffectiveDate")]);
    m_sale_price_effective_date_isSet = !json[QString("salePriceEffectiveDate")].isNull() && m_sale_price_effective_date_isValid;

    m_store_code_isValid = ::OpenAPI::fromJsonValue(m_store_code, json[QString("storeCode")]);
    m_store_code_isSet = !json[QString("storeCode")].isNull() && m_store_code_isValid;
}

QString OAILocalInventory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocalInventory::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_isSet) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_custom_attributes.size() > 0) {
        obj.insert(QString("customAttributes"), ::OpenAPI::toJsonValue(m_custom_attributes));
    }
    if (m_instore_product_location_isSet) {
        obj.insert(QString("instoreProductLocation"), ::OpenAPI::toJsonValue(m_instore_product_location));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_pickup_method_isSet) {
        obj.insert(QString("pickupMethod"), ::OpenAPI::toJsonValue(m_pickup_method));
    }
    if (m_pickup_sla_isSet) {
        obj.insert(QString("pickupSla"), ::OpenAPI::toJsonValue(m_pickup_sla));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_sale_price.isSet()) {
        obj.insert(QString("salePrice"), ::OpenAPI::toJsonValue(m_sale_price));
    }
    if (m_sale_price_effective_date_isSet) {
        obj.insert(QString("salePriceEffectiveDate"), ::OpenAPI::toJsonValue(m_sale_price_effective_date));
    }
    if (m_store_code_isSet) {
        obj.insert(QString("storeCode"), ::OpenAPI::toJsonValue(m_store_code));
    }
    return obj;
}

QString OAILocalInventory::getAvailability() const {
    return m_availability;
}
void OAILocalInventory::setAvailability(const QString &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAILocalInventory::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAILocalInventory::is_availability_Valid() const{
    return m_availability_isValid;
}

QList<OAICustomAttribute> OAILocalInventory::getCustomAttributes() const {
    return m_custom_attributes;
}
void OAILocalInventory::setCustomAttributes(const QList<OAICustomAttribute> &custom_attributes) {
    m_custom_attributes = custom_attributes;
    m_custom_attributes_isSet = true;
}

bool OAILocalInventory::is_custom_attributes_Set() const{
    return m_custom_attributes_isSet;
}

bool OAILocalInventory::is_custom_attributes_Valid() const{
    return m_custom_attributes_isValid;
}

QString OAILocalInventory::getInstoreProductLocation() const {
    return m_instore_product_location;
}
void OAILocalInventory::setInstoreProductLocation(const QString &instore_product_location) {
    m_instore_product_location = instore_product_location;
    m_instore_product_location_isSet = true;
}

bool OAILocalInventory::is_instore_product_location_Set() const{
    return m_instore_product_location_isSet;
}

bool OAILocalInventory::is_instore_product_location_Valid() const{
    return m_instore_product_location_isValid;
}

QString OAILocalInventory::getKind() const {
    return m_kind;
}
void OAILocalInventory::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAILocalInventory::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAILocalInventory::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAILocalInventory::getPickupMethod() const {
    return m_pickup_method;
}
void OAILocalInventory::setPickupMethod(const QString &pickup_method) {
    m_pickup_method = pickup_method;
    m_pickup_method_isSet = true;
}

bool OAILocalInventory::is_pickup_method_Set() const{
    return m_pickup_method_isSet;
}

bool OAILocalInventory::is_pickup_method_Valid() const{
    return m_pickup_method_isValid;
}

QString OAILocalInventory::getPickupSla() const {
    return m_pickup_sla;
}
void OAILocalInventory::setPickupSla(const QString &pickup_sla) {
    m_pickup_sla = pickup_sla;
    m_pickup_sla_isSet = true;
}

bool OAILocalInventory::is_pickup_sla_Set() const{
    return m_pickup_sla_isSet;
}

bool OAILocalInventory::is_pickup_sla_Valid() const{
    return m_pickup_sla_isValid;
}

OAIPrice OAILocalInventory::getPrice() const {
    return m_price;
}
void OAILocalInventory::setPrice(const OAIPrice &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAILocalInventory::is_price_Set() const{
    return m_price_isSet;
}

bool OAILocalInventory::is_price_Valid() const{
    return m_price_isValid;
}

qint32 OAILocalInventory::getQuantity() const {
    return m_quantity;
}
void OAILocalInventory::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAILocalInventory::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAILocalInventory::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIPrice OAILocalInventory::getSalePrice() const {
    return m_sale_price;
}
void OAILocalInventory::setSalePrice(const OAIPrice &sale_price) {
    m_sale_price = sale_price;
    m_sale_price_isSet = true;
}

bool OAILocalInventory::is_sale_price_Set() const{
    return m_sale_price_isSet;
}

bool OAILocalInventory::is_sale_price_Valid() const{
    return m_sale_price_isValid;
}

QString OAILocalInventory::getSalePriceEffectiveDate() const {
    return m_sale_price_effective_date;
}
void OAILocalInventory::setSalePriceEffectiveDate(const QString &sale_price_effective_date) {
    m_sale_price_effective_date = sale_price_effective_date;
    m_sale_price_effective_date_isSet = true;
}

bool OAILocalInventory::is_sale_price_effective_date_Set() const{
    return m_sale_price_effective_date_isSet;
}

bool OAILocalInventory::is_sale_price_effective_date_Valid() const{
    return m_sale_price_effective_date_isValid;
}

QString OAILocalInventory::getStoreCode() const {
    return m_store_code;
}
void OAILocalInventory::setStoreCode(const QString &store_code) {
    m_store_code = store_code;
    m_store_code_isSet = true;
}

bool OAILocalInventory::is_store_code_Set() const{
    return m_store_code_isSet;
}

bool OAILocalInventory::is_store_code_Valid() const{
    return m_store_code_isValid;
}

bool OAILocalInventory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instore_product_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_sla_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_price_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocalInventory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
