/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMethodQuota.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMethodQuota::OAIMethodQuota(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMethodQuota::OAIMethodQuota() {
    this->initializeModel();
}

OAIMethodQuota::~OAIMethodQuota() {}

void OAIMethodQuota::initializeModel() {

    m_method_isSet = false;
    m_method_isValid = false;

    m_quota_limit_isSet = false;
    m_quota_limit_isValid = false;

    m_quota_usage_isSet = false;
    m_quota_usage_isValid = false;
}

void OAIMethodQuota::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMethodQuota::fromJsonObject(QJsonObject json) {

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_quota_limit_isValid = ::OpenAPI::fromJsonValue(m_quota_limit, json[QString("quotaLimit")]);
    m_quota_limit_isSet = !json[QString("quotaLimit")].isNull() && m_quota_limit_isValid;

    m_quota_usage_isValid = ::OpenAPI::fromJsonValue(m_quota_usage, json[QString("quotaUsage")]);
    m_quota_usage_isSet = !json[QString("quotaUsage")].isNull() && m_quota_usage_isValid;
}

QString OAIMethodQuota::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMethodQuota::asJsonObject() const {
    QJsonObject obj;
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_quota_limit_isSet) {
        obj.insert(QString("quotaLimit"), ::OpenAPI::toJsonValue(m_quota_limit));
    }
    if (m_quota_usage_isSet) {
        obj.insert(QString("quotaUsage"), ::OpenAPI::toJsonValue(m_quota_usage));
    }
    return obj;
}

QString OAIMethodQuota::getMethod() const {
    return m_method;
}
void OAIMethodQuota::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIMethodQuota::is_method_Set() const{
    return m_method_isSet;
}

bool OAIMethodQuota::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIMethodQuota::getQuotaLimit() const {
    return m_quota_limit;
}
void OAIMethodQuota::setQuotaLimit(const QString &quota_limit) {
    m_quota_limit = quota_limit;
    m_quota_limit_isSet = true;
}

bool OAIMethodQuota::is_quota_limit_Set() const{
    return m_quota_limit_isSet;
}

bool OAIMethodQuota::is_quota_limit_Valid() const{
    return m_quota_limit_isValid;
}

QString OAIMethodQuota::getQuotaUsage() const {
    return m_quota_usage;
}
void OAIMethodQuota::setQuotaUsage(const QString &quota_usage) {
    m_quota_usage = quota_usage;
    m_quota_usage_isSet = true;
}

bool OAIMethodQuota::is_quota_usage_Set() const{
    return m_quota_usage_isSet;
}

bool OAIMethodQuota::is_quota_usage_Valid() const{
    return m_quota_usage_isValid;
}

bool OAIMethodQuota::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_usage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMethodQuota::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
