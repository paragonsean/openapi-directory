# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delivery_time import DeliveryTime
from openapi_server.models.minimum_order_value_table import MinimumOrderValueTable
from openapi_server.models.pickup_carrier_service import PickupCarrierService
from openapi_server.models.price import Price
from openapi_server.models.rate_group import RateGroup
from openapi_server.models.service_store_config import ServiceStoreConfig
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, currency: str=None, delivery_country: str=None, delivery_time: DeliveryTime=None, eligibility: str=None, minimum_order_value: Price=None, minimum_order_value_table: MinimumOrderValueTable=None, name: str=None, pickup_service: PickupCarrierService=None, rate_groups: List[RateGroup]=None, shipment_type: str=None, store_config: ServiceStoreConfig=None):
        """Service - a model defined in OpenAPI

        :param active: The active of this Service.
        :param currency: The currency of this Service.
        :param delivery_country: The delivery_country of this Service.
        :param delivery_time: The delivery_time of this Service.
        :param eligibility: The eligibility of this Service.
        :param minimum_order_value: The minimum_order_value of this Service.
        :param minimum_order_value_table: The minimum_order_value_table of this Service.
        :param name: The name of this Service.
        :param pickup_service: The pickup_service of this Service.
        :param rate_groups: The rate_groups of this Service.
        :param shipment_type: The shipment_type of this Service.
        :param store_config: The store_config of this Service.
        """
        self.openapi_types = {
            'active': bool,
            'currency': str,
            'delivery_country': str,
            'delivery_time': DeliveryTime,
            'eligibility': str,
            'minimum_order_value': Price,
            'minimum_order_value_table': MinimumOrderValueTable,
            'name': str,
            'pickup_service': PickupCarrierService,
            'rate_groups': List[RateGroup],
            'shipment_type': str,
            'store_config': ServiceStoreConfig
        }

        self.attribute_map = {
            'active': 'active',
            'currency': 'currency',
            'delivery_country': 'deliveryCountry',
            'delivery_time': 'deliveryTime',
            'eligibility': 'eligibility',
            'minimum_order_value': 'minimumOrderValue',
            'minimum_order_value_table': 'minimumOrderValueTable',
            'name': 'name',
            'pickup_service': 'pickupService',
            'rate_groups': 'rateGroups',
            'shipment_type': 'shipmentType',
            'store_config': 'storeConfig'
        }

        self._active = active
        self._currency = currency
        self._delivery_country = delivery_country
        self._delivery_time = delivery_time
        self._eligibility = eligibility
        self._minimum_order_value = minimum_order_value
        self._minimum_order_value_table = minimum_order_value_table
        self._name = name
        self._pickup_service = pickup_service
        self._rate_groups = rate_groups
        self._shipment_type = shipment_type
        self._store_config = store_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Service.

        A boolean exposing the active status of the shipping service. Required.

        :return: The active of this Service.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Service.

        A boolean exposing the active status of the shipping service. Required.

        :param active: The active of this Service.
        :type active: bool
        """

        self._active = active

    @property
    def currency(self):
        """Gets the currency of this Service.

        The CLDR code of the currency to which this service applies. Must match that of the prices in rate groups.

        :return: The currency of this Service.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Service.

        The CLDR code of the currency to which this service applies. Must match that of the prices in rate groups.

        :param currency: The currency of this Service.
        :type currency: str
        """

        self._currency = currency

    @property
    def delivery_country(self):
        """Gets the delivery_country of this Service.

        The CLDR territory code of the country to which the service applies. Required.

        :return: The delivery_country of this Service.
        :rtype: str
        """
        return self._delivery_country

    @delivery_country.setter
    def delivery_country(self, delivery_country):
        """Sets the delivery_country of this Service.

        The CLDR territory code of the country to which the service applies. Required.

        :param delivery_country: The delivery_country of this Service.
        :type delivery_country: str
        """

        self._delivery_country = delivery_country

    @property
    def delivery_time(self):
        """Gets the delivery_time of this Service.


        :return: The delivery_time of this Service.
        :rtype: DeliveryTime
        """
        return self._delivery_time

    @delivery_time.setter
    def delivery_time(self, delivery_time):
        """Sets the delivery_time of this Service.


        :param delivery_time: The delivery_time of this Service.
        :type delivery_time: DeliveryTime
        """

        self._delivery_time = delivery_time

    @property
    def eligibility(self):
        """Gets the eligibility of this Service.

        Eligibility for this service. Acceptable values are: - \"`All scenarios`\" - \"`All scenarios except Shopping Actions`\" - \"`Shopping Actions`\" 

        :return: The eligibility of this Service.
        :rtype: str
        """
        return self._eligibility

    @eligibility.setter
    def eligibility(self, eligibility):
        """Sets the eligibility of this Service.

        Eligibility for this service. Acceptable values are: - \"`All scenarios`\" - \"`All scenarios except Shopping Actions`\" - \"`Shopping Actions`\" 

        :param eligibility: The eligibility of this Service.
        :type eligibility: str
        """

        self._eligibility = eligibility

    @property
    def minimum_order_value(self):
        """Gets the minimum_order_value of this Service.


        :return: The minimum_order_value of this Service.
        :rtype: Price
        """
        return self._minimum_order_value

    @minimum_order_value.setter
    def minimum_order_value(self, minimum_order_value):
        """Sets the minimum_order_value of this Service.


        :param minimum_order_value: The minimum_order_value of this Service.
        :type minimum_order_value: Price
        """

        self._minimum_order_value = minimum_order_value

    @property
    def minimum_order_value_table(self):
        """Gets the minimum_order_value_table of this Service.


        :return: The minimum_order_value_table of this Service.
        :rtype: MinimumOrderValueTable
        """
        return self._minimum_order_value_table

    @minimum_order_value_table.setter
    def minimum_order_value_table(self, minimum_order_value_table):
        """Sets the minimum_order_value_table of this Service.


        :param minimum_order_value_table: The minimum_order_value_table of this Service.
        :type minimum_order_value_table: MinimumOrderValueTable
        """

        self._minimum_order_value_table = minimum_order_value_table

    @property
    def name(self):
        """Gets the name of this Service.

        Free-form name of the service. Must be unique within target account. Required.

        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.

        Free-form name of the service. Must be unique within target account. Required.

        :param name: The name of this Service.
        :type name: str
        """

        self._name = name

    @property
    def pickup_service(self):
        """Gets the pickup_service of this Service.


        :return: The pickup_service of this Service.
        :rtype: PickupCarrierService
        """
        return self._pickup_service

    @pickup_service.setter
    def pickup_service(self, pickup_service):
        """Sets the pickup_service of this Service.


        :param pickup_service: The pickup_service of this Service.
        :type pickup_service: PickupCarrierService
        """

        self._pickup_service = pickup_service

    @property
    def rate_groups(self):
        """Gets the rate_groups of this Service.

        Shipping rate group definitions. Only the last one is allowed to have an empty `applicableShippingLabels`, which means \"everything else\". The other `applicableShippingLabels` must not overlap.

        :return: The rate_groups of this Service.
        :rtype: List[RateGroup]
        """
        return self._rate_groups

    @rate_groups.setter
    def rate_groups(self, rate_groups):
        """Sets the rate_groups of this Service.

        Shipping rate group definitions. Only the last one is allowed to have an empty `applicableShippingLabels`, which means \"everything else\". The other `applicableShippingLabels` must not overlap.

        :param rate_groups: The rate_groups of this Service.
        :type rate_groups: List[RateGroup]
        """

        self._rate_groups = rate_groups

    @property
    def shipment_type(self):
        """Gets the shipment_type of this Service.

        Type of locations this service ships orders to. Acceptable values are: - \"`delivery`\" - \"`pickup` (deprecated)\" - \"`local_delivery`\" - \"`collection_point`\" 

        :return: The shipment_type of this Service.
        :rtype: str
        """
        return self._shipment_type

    @shipment_type.setter
    def shipment_type(self, shipment_type):
        """Sets the shipment_type of this Service.

        Type of locations this service ships orders to. Acceptable values are: - \"`delivery`\" - \"`pickup` (deprecated)\" - \"`local_delivery`\" - \"`collection_point`\" 

        :param shipment_type: The shipment_type of this Service.
        :type shipment_type: str
        """

        self._shipment_type = shipment_type

    @property
    def store_config(self):
        """Gets the store_config of this Service.


        :return: The store_config of this Service.
        :rtype: ServiceStoreConfig
        """
        return self._store_config

    @store_config.setter
    def store_config(self, store_config):
        """Sets the store_config of this Service.


        :param store_config: The store_config of this Service.
        :type store_config: ServiceStoreConfig
        """

        self._store_config = store_config
