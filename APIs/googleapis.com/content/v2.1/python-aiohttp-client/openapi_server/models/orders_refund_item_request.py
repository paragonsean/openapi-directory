# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.orders_custom_batch_request_entry_refund_item_item import OrdersCustomBatchRequestEntryRefundItemItem
from openapi_server.models.orders_custom_batch_request_entry_refund_item_shipping import OrdersCustomBatchRequestEntryRefundItemShipping
from openapi_server import util


class OrdersRefundItemRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[OrdersCustomBatchRequestEntryRefundItemItem]=None, operation_id: str=None, reason: str=None, reason_text: str=None, shipping: OrdersCustomBatchRequestEntryRefundItemShipping=None):
        """OrdersRefundItemRequest - a model defined in OpenAPI

        :param items: The items of this OrdersRefundItemRequest.
        :param operation_id: The operation_id of this OrdersRefundItemRequest.
        :param reason: The reason of this OrdersRefundItemRequest.
        :param reason_text: The reason_text of this OrdersRefundItemRequest.
        :param shipping: The shipping of this OrdersRefundItemRequest.
        """
        self.openapi_types = {
            'items': List[OrdersCustomBatchRequestEntryRefundItemItem],
            'operation_id': str,
            'reason': str,
            'reason_text': str,
            'shipping': OrdersCustomBatchRequestEntryRefundItemShipping
        }

        self.attribute_map = {
            'items': 'items',
            'operation_id': 'operationId',
            'reason': 'reason',
            'reason_text': 'reasonText',
            'shipping': 'shipping'
        }

        self._items = items
        self._operation_id = operation_id
        self._reason = reason
        self._reason_text = reason_text
        self._shipping = shipping

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrdersRefundItemRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrdersRefundItemRequest of this OrdersRefundItemRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this OrdersRefundItemRequest.

        The items that are refunded. Either Item or Shipping must be provided in the request.

        :return: The items of this OrdersRefundItemRequest.
        :rtype: List[OrdersCustomBatchRequestEntryRefundItemItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this OrdersRefundItemRequest.

        The items that are refunded. Either Item or Shipping must be provided in the request.

        :param items: The items of this OrdersRefundItemRequest.
        :type items: List[OrdersCustomBatchRequestEntryRefundItemItem]
        """

        self._items = items

    @property
    def operation_id(self):
        """Gets the operation_id of this OrdersRefundItemRequest.

        The ID of the operation. Unique across all operations for a given order.

        :return: The operation_id of this OrdersRefundItemRequest.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this OrdersRefundItemRequest.

        The ID of the operation. Unique across all operations for a given order.

        :param operation_id: The operation_id of this OrdersRefundItemRequest.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def reason(self):
        """Gets the reason of this OrdersRefundItemRequest.

        The reason for the refund. Acceptable values are: - \"`shippingCostAdjustment`\" - \"`priceAdjustment`\" - \"`taxAdjustment`\" - \"`feeAdjustment`\" - \"`courtesyAdjustment`\" - \"`adjustment`\" - \"`customerCancelled`\" - \"`noInventory`\" - \"`productNotAsDescribed`\" - \"`undeliverableShippingAddress`\" - \"`wrongProductShipped`\" - \"`lateShipmentCredit`\" - \"`deliveredLateByCarrier`\" - \"`productArrivedDamaged`\" 

        :return: The reason of this OrdersRefundItemRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this OrdersRefundItemRequest.

        The reason for the refund. Acceptable values are: - \"`shippingCostAdjustment`\" - \"`priceAdjustment`\" - \"`taxAdjustment`\" - \"`feeAdjustment`\" - \"`courtesyAdjustment`\" - \"`adjustment`\" - \"`customerCancelled`\" - \"`noInventory`\" - \"`productNotAsDescribed`\" - \"`undeliverableShippingAddress`\" - \"`wrongProductShipped`\" - \"`lateShipmentCredit`\" - \"`deliveredLateByCarrier`\" - \"`productArrivedDamaged`\" 

        :param reason: The reason of this OrdersRefundItemRequest.
        :type reason: str
        """

        self._reason = reason

    @property
    def reason_text(self):
        """Gets the reason_text of this OrdersRefundItemRequest.

        The explanation of the reason.

        :return: The reason_text of this OrdersRefundItemRequest.
        :rtype: str
        """
        return self._reason_text

    @reason_text.setter
    def reason_text(self, reason_text):
        """Sets the reason_text of this OrdersRefundItemRequest.

        The explanation of the reason.

        :param reason_text: The reason_text of this OrdersRefundItemRequest.
        :type reason_text: str
        """

        self._reason_text = reason_text

    @property
    def shipping(self):
        """Gets the shipping of this OrdersRefundItemRequest.


        :return: The shipping of this OrdersRefundItemRequest.
        :rtype: OrdersCustomBatchRequestEntryRefundItemShipping
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this OrdersRefundItemRequest.


        :param shipping: The shipping of this OrdersRefundItemRequest.
        :type shipping: OrdersCustomBatchRequestEntryRefundItemShipping
        """

        self._shipping = shipping
