# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pos_inventory import PosInventory
from openapi_server.models.pos_sale import PosSale
from openapi_server.models.pos_store import PosStore
from openapi_server import util


class PosCustomBatchRequestEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_id: int=None, inventory: PosInventory=None, merchant_id: str=None, method: str=None, sale: PosSale=None, store: PosStore=None, store_code: str=None, target_merchant_id: str=None):
        """PosCustomBatchRequestEntry - a model defined in OpenAPI

        :param batch_id: The batch_id of this PosCustomBatchRequestEntry.
        :param inventory: The inventory of this PosCustomBatchRequestEntry.
        :param merchant_id: The merchant_id of this PosCustomBatchRequestEntry.
        :param method: The method of this PosCustomBatchRequestEntry.
        :param sale: The sale of this PosCustomBatchRequestEntry.
        :param store: The store of this PosCustomBatchRequestEntry.
        :param store_code: The store_code of this PosCustomBatchRequestEntry.
        :param target_merchant_id: The target_merchant_id of this PosCustomBatchRequestEntry.
        """
        self.openapi_types = {
            'batch_id': int,
            'inventory': PosInventory,
            'merchant_id': str,
            'method': str,
            'sale': PosSale,
            'store': PosStore,
            'store_code': str,
            'target_merchant_id': str
        }

        self.attribute_map = {
            'batch_id': 'batchId',
            'inventory': 'inventory',
            'merchant_id': 'merchantId',
            'method': 'method',
            'sale': 'sale',
            'store': 'store',
            'store_code': 'storeCode',
            'target_merchant_id': 'targetMerchantId'
        }

        self._batch_id = batch_id
        self._inventory = inventory
        self._merchant_id = merchant_id
        self._method = method
        self._sale = sale
        self._store = store
        self._store_code = store_code
        self._target_merchant_id = target_merchant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PosCustomBatchRequestEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PosCustomBatchRequestEntry of this PosCustomBatchRequestEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_id(self):
        """Gets the batch_id of this PosCustomBatchRequestEntry.

        An entry ID, unique within the batch request.

        :return: The batch_id of this PosCustomBatchRequestEntry.
        :rtype: int
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this PosCustomBatchRequestEntry.

        An entry ID, unique within the batch request.

        :param batch_id: The batch_id of this PosCustomBatchRequestEntry.
        :type batch_id: int
        """

        self._batch_id = batch_id

    @property
    def inventory(self):
        """Gets the inventory of this PosCustomBatchRequestEntry.


        :return: The inventory of this PosCustomBatchRequestEntry.
        :rtype: PosInventory
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this PosCustomBatchRequestEntry.


        :param inventory: The inventory of this PosCustomBatchRequestEntry.
        :type inventory: PosInventory
        """

        self._inventory = inventory

    @property
    def merchant_id(self):
        """Gets the merchant_id of this PosCustomBatchRequestEntry.

        The ID of the POS data provider.

        :return: The merchant_id of this PosCustomBatchRequestEntry.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this PosCustomBatchRequestEntry.

        The ID of the POS data provider.

        :param merchant_id: The merchant_id of this PosCustomBatchRequestEntry.
        :type merchant_id: str
        """

        self._merchant_id = merchant_id

    @property
    def method(self):
        """Gets the method of this PosCustomBatchRequestEntry.

        The method of the batch entry. Acceptable values are: - \"`delete`\" - \"`get`\" - \"`insert`\" - \"`inventory`\" - \"`sale`\" 

        :return: The method of this PosCustomBatchRequestEntry.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PosCustomBatchRequestEntry.

        The method of the batch entry. Acceptable values are: - \"`delete`\" - \"`get`\" - \"`insert`\" - \"`inventory`\" - \"`sale`\" 

        :param method: The method of this PosCustomBatchRequestEntry.
        :type method: str
        """

        self._method = method

    @property
    def sale(self):
        """Gets the sale of this PosCustomBatchRequestEntry.


        :return: The sale of this PosCustomBatchRequestEntry.
        :rtype: PosSale
        """
        return self._sale

    @sale.setter
    def sale(self, sale):
        """Sets the sale of this PosCustomBatchRequestEntry.


        :param sale: The sale of this PosCustomBatchRequestEntry.
        :type sale: PosSale
        """

        self._sale = sale

    @property
    def store(self):
        """Gets the store of this PosCustomBatchRequestEntry.


        :return: The store of this PosCustomBatchRequestEntry.
        :rtype: PosStore
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this PosCustomBatchRequestEntry.


        :param store: The store of this PosCustomBatchRequestEntry.
        :type store: PosStore
        """

        self._store = store

    @property
    def store_code(self):
        """Gets the store_code of this PosCustomBatchRequestEntry.

        The store code. This should be set only if the method is `delete` or `get`.

        :return: The store_code of this PosCustomBatchRequestEntry.
        :rtype: str
        """
        return self._store_code

    @store_code.setter
    def store_code(self, store_code):
        """Sets the store_code of this PosCustomBatchRequestEntry.

        The store code. This should be set only if the method is `delete` or `get`.

        :param store_code: The store_code of this PosCustomBatchRequestEntry.
        :type store_code: str
        """

        self._store_code = store_code

    @property
    def target_merchant_id(self):
        """Gets the target_merchant_id of this PosCustomBatchRequestEntry.

        The ID of the account for which to get/submit data.

        :return: The target_merchant_id of this PosCustomBatchRequestEntry.
        :rtype: str
        """
        return self._target_merchant_id

    @target_merchant_id.setter
    def target_merchant_id(self, target_merchant_id):
        """Sets the target_merchant_id of this PosCustomBatchRequestEntry.

        The ID of the account for which to get/submit data.

        :param target_merchant_id: The target_merchant_id of this PosCustomBatchRequestEntry.
        :type target_merchant_id: str
        """

        self._target_merchant_id = target_merchant_id
