# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, page_size: int=None, page_token: str=None, query: str=None):
        """SearchRequest - a model defined in OpenAPI

        :param page_size: The page_size of this SearchRequest.
        :param page_token: The page_token of this SearchRequest.
        :param query: The query of this SearchRequest.
        """
        self.openapi_types = {
            'page_size': int,
            'page_token': str,
            'query': str
        }

        self.attribute_map = {
            'page_size': 'pageSize',
            'page_token': 'pageToken',
            'query': 'query'
        }

        self._page_size = page_size
        self._page_token = page_token
        self._query = query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchRequest of this SearchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def page_size(self):
        """Gets the page_size of this SearchRequest.

        Number of ReportRows to retrieve in a single page. Defaults to 1000. Values above 5000 are coerced to 5000.

        :return: The page_size of this SearchRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this SearchRequest.

        Number of ReportRows to retrieve in a single page. Defaults to 1000. Values above 5000 are coerced to 5000.

        :param page_size: The page_size of this SearchRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this SearchRequest.

        Token of the page to retrieve. If not specified, the first page of results is returned. In order to request the next page of results, the value obtained from `next_page_token` in the previous response should be used.

        :return: The page_token of this SearchRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this SearchRequest.

        Token of the page to retrieve. If not specified, the first page of results is returned. In order to request the next page of results, the value obtained from `next_page_token` in the previous response should be used.

        :param page_token: The page_token of this SearchRequest.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def query(self):
        """Gets the query of this SearchRequest.

        Required. Query that defines performance metrics to retrieve and dimensions according to which the metrics are to be segmented. For details on how to construct your query, see the [Query Language guide](https://developers.google.com/shopping-content/guides/reports/query-language/overview).

        :return: The query of this SearchRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchRequest.

        Required. Query that defines performance metrics to retrieve and dimensions according to which the metrics are to be segmented. For details on how to construct your query, see the [Query Language guide](https://developers.google.com/shopping-content/guides/reports/query-language/overview).

        :param query: The query of this SearchRequest.
        :type query: str
        """

        self._query = query
