# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_reason import ActionReason
from openapi_server.models.built_in_simple_action import BuiltInSimpleAction
from openapi_server.models.external_action import ExternalAction
from openapi_server import util


class Action(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, builtin_simple_action: BuiltInSimpleAction=None, button_label: str=None, external_action: ExternalAction=None, is_available: bool=None, reasons: List[ActionReason]=None):
        """Action - a model defined in OpenAPI

        :param builtin_simple_action: The builtin_simple_action of this Action.
        :param button_label: The button_label of this Action.
        :param external_action: The external_action of this Action.
        :param is_available: The is_available of this Action.
        :param reasons: The reasons of this Action.
        """
        self.openapi_types = {
            'builtin_simple_action': BuiltInSimpleAction,
            'button_label': str,
            'external_action': ExternalAction,
            'is_available': bool,
            'reasons': List[ActionReason]
        }

        self.attribute_map = {
            'builtin_simple_action': 'builtinSimpleAction',
            'button_label': 'buttonLabel',
            'external_action': 'externalAction',
            'is_available': 'isAvailable',
            'reasons': 'reasons'
        }

        self._builtin_simple_action = builtin_simple_action
        self._button_label = button_label
        self._external_action = external_action
        self._is_available = is_available
        self._reasons = reasons

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Action of this Action.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def builtin_simple_action(self):
        """Gets the builtin_simple_action of this Action.


        :return: The builtin_simple_action of this Action.
        :rtype: BuiltInSimpleAction
        """
        return self._builtin_simple_action

    @builtin_simple_action.setter
    def builtin_simple_action(self, builtin_simple_action):
        """Sets the builtin_simple_action of this Action.


        :param builtin_simple_action: The builtin_simple_action of this Action.
        :type builtin_simple_action: BuiltInSimpleAction
        """

        self._builtin_simple_action = builtin_simple_action

    @property
    def button_label(self):
        """Gets the button_label of this Action.

        Label of the action button.

        :return: The button_label of this Action.
        :rtype: str
        """
        return self._button_label

    @button_label.setter
    def button_label(self, button_label):
        """Sets the button_label of this Action.

        Label of the action button.

        :param button_label: The button_label of this Action.
        :type button_label: str
        """

        self._button_label = button_label

    @property
    def external_action(self):
        """Gets the external_action of this Action.


        :return: The external_action of this Action.
        :rtype: ExternalAction
        """
        return self._external_action

    @external_action.setter
    def external_action(self, external_action):
        """Sets the external_action of this Action.


        :param external_action: The external_action of this Action.
        :type external_action: ExternalAction
        """

        self._external_action = external_action

    @property
    def is_available(self):
        """Gets the is_available of this Action.

        Controlling whether the button is active or disabled. The value is 'false' when the action was already requested or is not available. If the action is not available then a reason will be present. If (your) third-party application shows a disabled button for action that is not available, then it should also show reasons.

        :return: The is_available of this Action.
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this Action.

        Controlling whether the button is active or disabled. The value is 'false' when the action was already requested or is not available. If the action is not available then a reason will be present. If (your) third-party application shows a disabled button for action that is not available, then it should also show reasons.

        :param is_available: The is_available of this Action.
        :type is_available: bool
        """

        self._is_available = is_available

    @property
    def reasons(self):
        """Gets the reasons of this Action.

        List of reasons why the action is not available. The list of reasons is empty if the action is available. If there is only one reason, it can be displayed next to the disabled button. If there are more reasons, all of them should be displayed, for example in a pop-up dialog.

        :return: The reasons of this Action.
        :rtype: List[ActionReason]
        """
        return self._reasons

    @reasons.setter
    def reasons(self, reasons):
        """Sets the reasons of this Action.

        List of reasons why the action is not available. The list of reasons is empty if the action is available. If there is only one reason, it can be displayed next to the disabled button. If there are more reasons, all of them should be displayed, for example in a pop-up dialog.

        :param reasons: The reasons of this Action.
        :type reasons: List[ActionReason]
        """

        self._reasons = reasons
