# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.orders_custom_batch_request_entry_update_shipment_scheduled_delivery_details import OrdersCustomBatchRequestEntryUpdateShipmentScheduledDeliveryDetails
from openapi_server import util


class OrdersUpdateShipmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, carrier: str=None, delivery_date: str=None, last_pickup_date: str=None, operation_id: str=None, ready_pickup_date: str=None, scheduled_delivery_details: OrdersCustomBatchRequestEntryUpdateShipmentScheduledDeliveryDetails=None, shipment_id: str=None, status: str=None, tracking_id: str=None, undelivered_date: str=None):
        """OrdersUpdateShipmentRequest - a model defined in OpenAPI

        :param carrier: The carrier of this OrdersUpdateShipmentRequest.
        :param delivery_date: The delivery_date of this OrdersUpdateShipmentRequest.
        :param last_pickup_date: The last_pickup_date of this OrdersUpdateShipmentRequest.
        :param operation_id: The operation_id of this OrdersUpdateShipmentRequest.
        :param ready_pickup_date: The ready_pickup_date of this OrdersUpdateShipmentRequest.
        :param scheduled_delivery_details: The scheduled_delivery_details of this OrdersUpdateShipmentRequest.
        :param shipment_id: The shipment_id of this OrdersUpdateShipmentRequest.
        :param status: The status of this OrdersUpdateShipmentRequest.
        :param tracking_id: The tracking_id of this OrdersUpdateShipmentRequest.
        :param undelivered_date: The undelivered_date of this OrdersUpdateShipmentRequest.
        """
        self.openapi_types = {
            'carrier': str,
            'delivery_date': str,
            'last_pickup_date': str,
            'operation_id': str,
            'ready_pickup_date': str,
            'scheduled_delivery_details': OrdersCustomBatchRequestEntryUpdateShipmentScheduledDeliveryDetails,
            'shipment_id': str,
            'status': str,
            'tracking_id': str,
            'undelivered_date': str
        }

        self.attribute_map = {
            'carrier': 'carrier',
            'delivery_date': 'deliveryDate',
            'last_pickup_date': 'lastPickupDate',
            'operation_id': 'operationId',
            'ready_pickup_date': 'readyPickupDate',
            'scheduled_delivery_details': 'scheduledDeliveryDetails',
            'shipment_id': 'shipmentId',
            'status': 'status',
            'tracking_id': 'trackingId',
            'undelivered_date': 'undeliveredDate'
        }

        self._carrier = carrier
        self._delivery_date = delivery_date
        self._last_pickup_date = last_pickup_date
        self._operation_id = operation_id
        self._ready_pickup_date = ready_pickup_date
        self._scheduled_delivery_details = scheduled_delivery_details
        self._shipment_id = shipment_id
        self._status = status
        self._tracking_id = tracking_id
        self._undelivered_date = undelivered_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrdersUpdateShipmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrdersUpdateShipmentRequest of this OrdersUpdateShipmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carrier(self):
        """Gets the carrier of this OrdersUpdateShipmentRequest.

        The carrier handling the shipment. Not updated if missing. See `shipments[].carrier` in the Orders resource representation for a list of acceptable values.

        :return: The carrier of this OrdersUpdateShipmentRequest.
        :rtype: str
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this OrdersUpdateShipmentRequest.

        The carrier handling the shipment. Not updated if missing. See `shipments[].carrier` in the Orders resource representation for a list of acceptable values.

        :param carrier: The carrier of this OrdersUpdateShipmentRequest.
        :type carrier: str
        """

        self._carrier = carrier

    @property
    def delivery_date(self):
        """Gets the delivery_date of this OrdersUpdateShipmentRequest.

        Date on which the shipment has been delivered, in ISO 8601 format. Optional and can be provided only if `status` is `delivered`.

        :return: The delivery_date of this OrdersUpdateShipmentRequest.
        :rtype: str
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this OrdersUpdateShipmentRequest.

        Date on which the shipment has been delivered, in ISO 8601 format. Optional and can be provided only if `status` is `delivered`.

        :param delivery_date: The delivery_date of this OrdersUpdateShipmentRequest.
        :type delivery_date: str
        """

        self._delivery_date = delivery_date

    @property
    def last_pickup_date(self):
        """Gets the last_pickup_date of this OrdersUpdateShipmentRequest.

        Date after which the pickup will expire, in ISO 8601 format. Required only when order is buy-online-pickup-in-store(BOPIS) and `status` is `ready for pickup`.

        :return: The last_pickup_date of this OrdersUpdateShipmentRequest.
        :rtype: str
        """
        return self._last_pickup_date

    @last_pickup_date.setter
    def last_pickup_date(self, last_pickup_date):
        """Sets the last_pickup_date of this OrdersUpdateShipmentRequest.

        Date after which the pickup will expire, in ISO 8601 format. Required only when order is buy-online-pickup-in-store(BOPIS) and `status` is `ready for pickup`.

        :param last_pickup_date: The last_pickup_date of this OrdersUpdateShipmentRequest.
        :type last_pickup_date: str
        """

        self._last_pickup_date = last_pickup_date

    @property
    def operation_id(self):
        """Gets the operation_id of this OrdersUpdateShipmentRequest.

        The ID of the operation. Unique across all operations for a given order.

        :return: The operation_id of this OrdersUpdateShipmentRequest.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this OrdersUpdateShipmentRequest.

        The ID of the operation. Unique across all operations for a given order.

        :param operation_id: The operation_id of this OrdersUpdateShipmentRequest.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def ready_pickup_date(self):
        """Gets the ready_pickup_date of this OrdersUpdateShipmentRequest.

        Date on which the shipment has been ready for pickup, in ISO 8601 format. Optional and can be provided only if `status` is `ready for pickup`.

        :return: The ready_pickup_date of this OrdersUpdateShipmentRequest.
        :rtype: str
        """
        return self._ready_pickup_date

    @ready_pickup_date.setter
    def ready_pickup_date(self, ready_pickup_date):
        """Sets the ready_pickup_date of this OrdersUpdateShipmentRequest.

        Date on which the shipment has been ready for pickup, in ISO 8601 format. Optional and can be provided only if `status` is `ready for pickup`.

        :param ready_pickup_date: The ready_pickup_date of this OrdersUpdateShipmentRequest.
        :type ready_pickup_date: str
        """

        self._ready_pickup_date = ready_pickup_date

    @property
    def scheduled_delivery_details(self):
        """Gets the scheduled_delivery_details of this OrdersUpdateShipmentRequest.


        :return: The scheduled_delivery_details of this OrdersUpdateShipmentRequest.
        :rtype: OrdersCustomBatchRequestEntryUpdateShipmentScheduledDeliveryDetails
        """
        return self._scheduled_delivery_details

    @scheduled_delivery_details.setter
    def scheduled_delivery_details(self, scheduled_delivery_details):
        """Sets the scheduled_delivery_details of this OrdersUpdateShipmentRequest.


        :param scheduled_delivery_details: The scheduled_delivery_details of this OrdersUpdateShipmentRequest.
        :type scheduled_delivery_details: OrdersCustomBatchRequestEntryUpdateShipmentScheduledDeliveryDetails
        """

        self._scheduled_delivery_details = scheduled_delivery_details

    @property
    def shipment_id(self):
        """Gets the shipment_id of this OrdersUpdateShipmentRequest.

        The ID of the shipment.

        :return: The shipment_id of this OrdersUpdateShipmentRequest.
        :rtype: str
        """
        return self._shipment_id

    @shipment_id.setter
    def shipment_id(self, shipment_id):
        """Sets the shipment_id of this OrdersUpdateShipmentRequest.

        The ID of the shipment.

        :param shipment_id: The shipment_id of this OrdersUpdateShipmentRequest.
        :type shipment_id: str
        """

        self._shipment_id = shipment_id

    @property
    def status(self):
        """Gets the status of this OrdersUpdateShipmentRequest.

        New status for the shipment. Not updated if missing. Acceptable values are: - \"`delivered`\" - \"`undeliverable`\" - \"`readyForPickup`\" 

        :return: The status of this OrdersUpdateShipmentRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrdersUpdateShipmentRequest.

        New status for the shipment. Not updated if missing. Acceptable values are: - \"`delivered`\" - \"`undeliverable`\" - \"`readyForPickup`\" 

        :param status: The status of this OrdersUpdateShipmentRequest.
        :type status: str
        """

        self._status = status

    @property
    def tracking_id(self):
        """Gets the tracking_id of this OrdersUpdateShipmentRequest.

        The tracking ID for the shipment. Not updated if missing.

        :return: The tracking_id of this OrdersUpdateShipmentRequest.
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this OrdersUpdateShipmentRequest.

        The tracking ID for the shipment. Not updated if missing.

        :param tracking_id: The tracking_id of this OrdersUpdateShipmentRequest.
        :type tracking_id: str
        """

        self._tracking_id = tracking_id

    @property
    def undelivered_date(self):
        """Gets the undelivered_date of this OrdersUpdateShipmentRequest.

        Date on which the shipment has been undeliverable, in ISO 8601 format. Optional and can be provided only if `status` is `undeliverable`.

        :return: The undelivered_date of this OrdersUpdateShipmentRequest.
        :rtype: str
        """
        return self._undelivered_date

    @undelivered_date.setter
    def undelivered_date(self, undelivered_date):
        """Sets the undelivered_date of this OrdersUpdateShipmentRequest.

        Date on which the shipment has been undeliverable, in ISO 8601 format. Optional and can be provided only if `status` is `undeliverable`.

        :param undelivered_date: The undelivered_date of this OrdersUpdateShipmentRequest.
        :type undelivered_date: str
        """

        self._undelivered_date = undelivered_date
