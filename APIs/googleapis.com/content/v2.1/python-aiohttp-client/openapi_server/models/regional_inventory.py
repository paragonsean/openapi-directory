# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_attribute import CustomAttribute
from openapi_server.models.price import Price
from openapi_server import util


class RegionalInventory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: str=None, custom_attributes: List[CustomAttribute]=None, kind: str=None, price: Price=None, region_id: str=None, sale_price: Price=None, sale_price_effective_date: str=None):
        """RegionalInventory - a model defined in OpenAPI

        :param availability: The availability of this RegionalInventory.
        :param custom_attributes: The custom_attributes of this RegionalInventory.
        :param kind: The kind of this RegionalInventory.
        :param price: The price of this RegionalInventory.
        :param region_id: The region_id of this RegionalInventory.
        :param sale_price: The sale_price of this RegionalInventory.
        :param sale_price_effective_date: The sale_price_effective_date of this RegionalInventory.
        """
        self.openapi_types = {
            'availability': str,
            'custom_attributes': List[CustomAttribute],
            'kind': str,
            'price': Price,
            'region_id': str,
            'sale_price': Price,
            'sale_price_effective_date': str
        }

        self.attribute_map = {
            'availability': 'availability',
            'custom_attributes': 'customAttributes',
            'kind': 'kind',
            'price': 'price',
            'region_id': 'regionId',
            'sale_price': 'salePrice',
            'sale_price_effective_date': 'salePriceEffectiveDate'
        }

        self._availability = availability
        self._custom_attributes = custom_attributes
        self._kind = kind
        self._price = price
        self._region_id = region_id
        self._sale_price = sale_price
        self._sale_price_effective_date = sale_price_effective_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegionalInventory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegionalInventory of this RegionalInventory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this RegionalInventory.

        The availability of the product.

        :return: The availability of this RegionalInventory.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this RegionalInventory.

        The availability of the product.

        :param availability: The availability of this RegionalInventory.
        :type availability: str
        """

        self._availability = availability

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this RegionalInventory.

        A list of custom (merchant-provided) attributes. It can also be used for submitting any attribute of the feed specification in its generic form.

        :return: The custom_attributes of this RegionalInventory.
        :rtype: List[CustomAttribute]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this RegionalInventory.

        A list of custom (merchant-provided) attributes. It can also be used for submitting any attribute of the feed specification in its generic form.

        :param custom_attributes: The custom_attributes of this RegionalInventory.
        :type custom_attributes: List[CustomAttribute]
        """

        self._custom_attributes = custom_attributes

    @property
    def kind(self):
        """Gets the kind of this RegionalInventory.

        Identifies what kind of resource this is. Value: the fixed string \"`content#regionalInventory`\".

        :return: The kind of this RegionalInventory.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this RegionalInventory.

        Identifies what kind of resource this is. Value: the fixed string \"`content#regionalInventory`\".

        :param kind: The kind of this RegionalInventory.
        :type kind: str
        """

        self._kind = kind

    @property
    def price(self):
        """Gets the price of this RegionalInventory.


        :return: The price of this RegionalInventory.
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this RegionalInventory.


        :param price: The price of this RegionalInventory.
        :type price: Price
        """

        self._price = price

    @property
    def region_id(self):
        """Gets the region_id of this RegionalInventory.

        The ID uniquely identifying each region.

        :return: The region_id of this RegionalInventory.
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this RegionalInventory.

        The ID uniquely identifying each region.

        :param region_id: The region_id of this RegionalInventory.
        :type region_id: str
        """

        self._region_id = region_id

    @property
    def sale_price(self):
        """Gets the sale_price of this RegionalInventory.


        :return: The sale_price of this RegionalInventory.
        :rtype: Price
        """
        return self._sale_price

    @sale_price.setter
    def sale_price(self, sale_price):
        """Sets the sale_price of this RegionalInventory.


        :param sale_price: The sale_price of this RegionalInventory.
        :type sale_price: Price
        """

        self._sale_price = sale_price

    @property
    def sale_price_effective_date(self):
        """Gets the sale_price_effective_date of this RegionalInventory.

        A date range represented by a pair of ISO 8601 dates separated by a space, comma, or slash. Both dates might be specified as 'null' if undecided.

        :return: The sale_price_effective_date of this RegionalInventory.
        :rtype: str
        """
        return self._sale_price_effective_date

    @sale_price_effective_date.setter
    def sale_price_effective_date(self, sale_price_effective_date):
        """Sets the sale_price_effective_date of this RegionalInventory.

        A date range represented by a pair of ISO 8601 dates separated by a space, comma, or slash. Both dates might be specified as 'null' if undecided.

        :param sale_price_effective_date: The sale_price_effective_date of this RegionalInventory.
        :type sale_price_effective_date: str
        """

        self._sale_price_effective_date = sale_price_effective_date
