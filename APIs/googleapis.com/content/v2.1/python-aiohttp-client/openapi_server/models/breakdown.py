# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.breakdown_region import BreakdownRegion
from openapi_server import util


class Breakdown(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: List[str]=None, regions: List[BreakdownRegion]=None):
        """Breakdown - a model defined in OpenAPI

        :param details: The details of this Breakdown.
        :param regions: The regions of this Breakdown.
        """
        self.openapi_types = {
            'details': List[str],
            'regions': List[BreakdownRegion]
        }

        self.attribute_map = {
            'details': 'details',
            'regions': 'regions'
        }

        self._details = details
        self._regions = regions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Breakdown':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Breakdown of this Breakdown.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this Breakdown.

        Human readable, localized description of issue's effect on different targets. Should be rendered as a list. For example: * \"Products not showing in ads\" * \"Products not showing organically\"

        :return: The details of this Breakdown.
        :rtype: List[str]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Breakdown.

        Human readable, localized description of issue's effect on different targets. Should be rendered as a list. For example: * \"Products not showing in ads\" * \"Products not showing organically\"

        :param details: The details of this Breakdown.
        :type details: List[str]
        """

        self._details = details

    @property
    def regions(self):
        """Gets the regions of this Breakdown.

        Lists of regions. Should be rendered as a title for this group of details. The full list should be shown to merchant. If the list is too long, it is recommended to make it expandable.

        :return: The regions of this Breakdown.
        :rtype: List[BreakdownRegion]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this Breakdown.

        Lists of regions. Should be rendered as a title for this group of details. The full list should be shown to merchant. If the list is too long, it is recommended to make it expandable.

        :param regions: The regions of this Breakdown.
        :type regions: List[BreakdownRegion]
        """

        self._regions = regions
