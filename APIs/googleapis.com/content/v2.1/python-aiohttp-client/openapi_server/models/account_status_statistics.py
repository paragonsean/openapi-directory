# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountStatusStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: str=None, disapproved: str=None, expiring: str=None, pending: str=None):
        """AccountStatusStatistics - a model defined in OpenAPI

        :param active: The active of this AccountStatusStatistics.
        :param disapproved: The disapproved of this AccountStatusStatistics.
        :param expiring: The expiring of this AccountStatusStatistics.
        :param pending: The pending of this AccountStatusStatistics.
        """
        self.openapi_types = {
            'active': str,
            'disapproved': str,
            'expiring': str,
            'pending': str
        }

        self.attribute_map = {
            'active': 'active',
            'disapproved': 'disapproved',
            'expiring': 'expiring',
            'pending': 'pending'
        }

        self._active = active
        self._disapproved = disapproved
        self._expiring = expiring
        self._pending = pending

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountStatusStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountStatusStatistics of this AccountStatusStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this AccountStatusStatistics.

        Number of active offers.

        :return: The active of this AccountStatusStatistics.
        :rtype: str
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this AccountStatusStatistics.

        Number of active offers.

        :param active: The active of this AccountStatusStatistics.
        :type active: str
        """

        self._active = active

    @property
    def disapproved(self):
        """Gets the disapproved of this AccountStatusStatistics.

        Number of disapproved offers.

        :return: The disapproved of this AccountStatusStatistics.
        :rtype: str
        """
        return self._disapproved

    @disapproved.setter
    def disapproved(self, disapproved):
        """Sets the disapproved of this AccountStatusStatistics.

        Number of disapproved offers.

        :param disapproved: The disapproved of this AccountStatusStatistics.
        :type disapproved: str
        """

        self._disapproved = disapproved

    @property
    def expiring(self):
        """Gets the expiring of this AccountStatusStatistics.

        Number of expiring offers.

        :return: The expiring of this AccountStatusStatistics.
        :rtype: str
        """
        return self._expiring

    @expiring.setter
    def expiring(self, expiring):
        """Sets the expiring of this AccountStatusStatistics.

        Number of expiring offers.

        :param expiring: The expiring of this AccountStatusStatistics.
        :type expiring: str
        """

        self._expiring = expiring

    @property
    def pending(self):
        """Gets the pending of this AccountStatusStatistics.

        Number of pending offers.

        :return: The pending of this AccountStatusStatistics.
        :rtype: str
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this AccountStatusStatistics.

        Number of pending offers.

        :param pending: The pending of this AccountStatusStatistics.
        :type pending: str
        """

        self._pending = pending
