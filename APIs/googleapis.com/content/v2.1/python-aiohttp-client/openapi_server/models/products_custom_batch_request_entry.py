# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product import Product
from openapi_server import util


class ProductsCustomBatchRequestEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_id: int=None, feed_id: str=None, merchant_id: str=None, method: str=None, product: Product=None, product_id: str=None, update_mask: str=None):
        """ProductsCustomBatchRequestEntry - a model defined in OpenAPI

        :param batch_id: The batch_id of this ProductsCustomBatchRequestEntry.
        :param feed_id: The feed_id of this ProductsCustomBatchRequestEntry.
        :param merchant_id: The merchant_id of this ProductsCustomBatchRequestEntry.
        :param method: The method of this ProductsCustomBatchRequestEntry.
        :param product: The product of this ProductsCustomBatchRequestEntry.
        :param product_id: The product_id of this ProductsCustomBatchRequestEntry.
        :param update_mask: The update_mask of this ProductsCustomBatchRequestEntry.
        """
        self.openapi_types = {
            'batch_id': int,
            'feed_id': str,
            'merchant_id': str,
            'method': str,
            'product': Product,
            'product_id': str,
            'update_mask': str
        }

        self.attribute_map = {
            'batch_id': 'batchId',
            'feed_id': 'feedId',
            'merchant_id': 'merchantId',
            'method': 'method',
            'product': 'product',
            'product_id': 'productId',
            'update_mask': 'updateMask'
        }

        self._batch_id = batch_id
        self._feed_id = feed_id
        self._merchant_id = merchant_id
        self._method = method
        self._product = product
        self._product_id = product_id
        self._update_mask = update_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductsCustomBatchRequestEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductsCustomBatchRequestEntry of this ProductsCustomBatchRequestEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_id(self):
        """Gets the batch_id of this ProductsCustomBatchRequestEntry.

        An entry ID, unique within the batch request.

        :return: The batch_id of this ProductsCustomBatchRequestEntry.
        :rtype: int
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this ProductsCustomBatchRequestEntry.

        An entry ID, unique within the batch request.

        :param batch_id: The batch_id of this ProductsCustomBatchRequestEntry.
        :type batch_id: int
        """

        self._batch_id = batch_id

    @property
    def feed_id(self):
        """Gets the feed_id of this ProductsCustomBatchRequestEntry.

        The Content API Supplemental Feed ID. If present then product insertion or deletion applies to a supplemental feed instead of primary Content API feed.

        :return: The feed_id of this ProductsCustomBatchRequestEntry.
        :rtype: str
        """
        return self._feed_id

    @feed_id.setter
    def feed_id(self, feed_id):
        """Sets the feed_id of this ProductsCustomBatchRequestEntry.

        The Content API Supplemental Feed ID. If present then product insertion or deletion applies to a supplemental feed instead of primary Content API feed.

        :param feed_id: The feed_id of this ProductsCustomBatchRequestEntry.
        :type feed_id: str
        """

        self._feed_id = feed_id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this ProductsCustomBatchRequestEntry.

        The ID of the managing account.

        :return: The merchant_id of this ProductsCustomBatchRequestEntry.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this ProductsCustomBatchRequestEntry.

        The ID of the managing account.

        :param merchant_id: The merchant_id of this ProductsCustomBatchRequestEntry.
        :type merchant_id: str
        """

        self._merchant_id = merchant_id

    @property
    def method(self):
        """Gets the method of this ProductsCustomBatchRequestEntry.

        The method of the batch entry. Acceptable values are: - \"`delete`\" - \"`get`\" - \"`insert`\" - \"`update`\" 

        :return: The method of this ProductsCustomBatchRequestEntry.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ProductsCustomBatchRequestEntry.

        The method of the batch entry. Acceptable values are: - \"`delete`\" - \"`get`\" - \"`insert`\" - \"`update`\" 

        :param method: The method of this ProductsCustomBatchRequestEntry.
        :type method: str
        """

        self._method = method

    @property
    def product(self):
        """Gets the product of this ProductsCustomBatchRequestEntry.


        :return: The product of this ProductsCustomBatchRequestEntry.
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ProductsCustomBatchRequestEntry.


        :param product: The product of this ProductsCustomBatchRequestEntry.
        :type product: Product
        """

        self._product = product

    @property
    def product_id(self):
        """Gets the product_id of this ProductsCustomBatchRequestEntry.

        The ID of the product to get or mutate. Only defined if the method is `get`, `delete`, or `update`.

        :return: The product_id of this ProductsCustomBatchRequestEntry.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductsCustomBatchRequestEntry.

        The ID of the product to get or mutate. Only defined if the method is `get`, `delete`, or `update`.

        :param product_id: The product_id of this ProductsCustomBatchRequestEntry.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def update_mask(self):
        """Gets the update_mask of this ProductsCustomBatchRequestEntry.

        The comma-separated list of product attributes to be updated. Example: `\"title,salePrice\"`. Attributes specified in the update mask without a value specified in the body will be deleted from the product. *You must specify the update mask to delete attributes.* Only top-level product attributes can be updated. If not defined, product attributes with set values will be updated and other attributes will stay unchanged. Only defined if the method is `update`.

        :return: The update_mask of this ProductsCustomBatchRequestEntry.
        :rtype: str
        """
        return self._update_mask

    @update_mask.setter
    def update_mask(self, update_mask):
        """Sets the update_mask of this ProductsCustomBatchRequestEntry.

        The comma-separated list of product attributes to be updated. Example: `\"title,salePrice\"`. Attributes specified in the update mask without a value specified in the body will be deleted from the product. *You must specify the update mask to delete attributes.* Only top-level product attributes can be updated. If not defined, product attributes with set values will be updated and other attributes will stay unchanged. Only defined if the method is `update`.

        :param update_mask: The update_mask of this ProductsCustomBatchRequestEntry.
        :type update_mask: str
        """

        self._update_mask = update_mask
