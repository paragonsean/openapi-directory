# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lia_about_page_settings import LiaAboutPageSettings
from openapi_server.models.lia_inventory_settings import LiaInventorySettings
from openapi_server.models.lia_omnichannel_experience import LiaOmnichannelExperience
from openapi_server.models.lia_on_display_to_order_settings import LiaOnDisplayToOrderSettings
from openapi_server.models.lia_pos_data_provider import LiaPosDataProvider
from openapi_server import util


class LiaCountrySettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, about: LiaAboutPageSettings=None, country: str=None, hosted_local_storefront_active: bool=None, inventory: LiaInventorySettings=None, omnichannel_experience: LiaOmnichannelExperience=None, on_display_to_order: LiaOnDisplayToOrderSettings=None, pos_data_provider: LiaPosDataProvider=None, store_pickup_active: bool=None):
        """LiaCountrySettings - a model defined in OpenAPI

        :param about: The about of this LiaCountrySettings.
        :param country: The country of this LiaCountrySettings.
        :param hosted_local_storefront_active: The hosted_local_storefront_active of this LiaCountrySettings.
        :param inventory: The inventory of this LiaCountrySettings.
        :param omnichannel_experience: The omnichannel_experience of this LiaCountrySettings.
        :param on_display_to_order: The on_display_to_order of this LiaCountrySettings.
        :param pos_data_provider: The pos_data_provider of this LiaCountrySettings.
        :param store_pickup_active: The store_pickup_active of this LiaCountrySettings.
        """
        self.openapi_types = {
            'about': LiaAboutPageSettings,
            'country': str,
            'hosted_local_storefront_active': bool,
            'inventory': LiaInventorySettings,
            'omnichannel_experience': LiaOmnichannelExperience,
            'on_display_to_order': LiaOnDisplayToOrderSettings,
            'pos_data_provider': LiaPosDataProvider,
            'store_pickup_active': bool
        }

        self.attribute_map = {
            'about': 'about',
            'country': 'country',
            'hosted_local_storefront_active': 'hostedLocalStorefrontActive',
            'inventory': 'inventory',
            'omnichannel_experience': 'omnichannelExperience',
            'on_display_to_order': 'onDisplayToOrder',
            'pos_data_provider': 'posDataProvider',
            'store_pickup_active': 'storePickupActive'
        }

        self._about = about
        self._country = country
        self._hosted_local_storefront_active = hosted_local_storefront_active
        self._inventory = inventory
        self._omnichannel_experience = omnichannel_experience
        self._on_display_to_order = on_display_to_order
        self._pos_data_provider = pos_data_provider
        self._store_pickup_active = store_pickup_active

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiaCountrySettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiaCountrySettings of this LiaCountrySettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def about(self):
        """Gets the about of this LiaCountrySettings.


        :return: The about of this LiaCountrySettings.
        :rtype: LiaAboutPageSettings
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this LiaCountrySettings.


        :param about: The about of this LiaCountrySettings.
        :type about: LiaAboutPageSettings
        """

        self._about = about

    @property
    def country(self):
        """Gets the country of this LiaCountrySettings.

        Required. CLDR country code (for example, \"US\").

        :return: The country of this LiaCountrySettings.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this LiaCountrySettings.

        Required. CLDR country code (for example, \"US\").

        :param country: The country of this LiaCountrySettings.
        :type country: str
        """

        self._country = country

    @property
    def hosted_local_storefront_active(self):
        """Gets the hosted_local_storefront_active of this LiaCountrySettings.

        The status of the \"Merchant hosted local storefront\" feature.

        :return: The hosted_local_storefront_active of this LiaCountrySettings.
        :rtype: bool
        """
        return self._hosted_local_storefront_active

    @hosted_local_storefront_active.setter
    def hosted_local_storefront_active(self, hosted_local_storefront_active):
        """Sets the hosted_local_storefront_active of this LiaCountrySettings.

        The status of the \"Merchant hosted local storefront\" feature.

        :param hosted_local_storefront_active: The hosted_local_storefront_active of this LiaCountrySettings.
        :type hosted_local_storefront_active: bool
        """

        self._hosted_local_storefront_active = hosted_local_storefront_active

    @property
    def inventory(self):
        """Gets the inventory of this LiaCountrySettings.


        :return: The inventory of this LiaCountrySettings.
        :rtype: LiaInventorySettings
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this LiaCountrySettings.


        :param inventory: The inventory of this LiaCountrySettings.
        :type inventory: LiaInventorySettings
        """

        self._inventory = inventory

    @property
    def omnichannel_experience(self):
        """Gets the omnichannel_experience of this LiaCountrySettings.


        :return: The omnichannel_experience of this LiaCountrySettings.
        :rtype: LiaOmnichannelExperience
        """
        return self._omnichannel_experience

    @omnichannel_experience.setter
    def omnichannel_experience(self, omnichannel_experience):
        """Sets the omnichannel_experience of this LiaCountrySettings.


        :param omnichannel_experience: The omnichannel_experience of this LiaCountrySettings.
        :type omnichannel_experience: LiaOmnichannelExperience
        """

        self._omnichannel_experience = omnichannel_experience

    @property
    def on_display_to_order(self):
        """Gets the on_display_to_order of this LiaCountrySettings.


        :return: The on_display_to_order of this LiaCountrySettings.
        :rtype: LiaOnDisplayToOrderSettings
        """
        return self._on_display_to_order

    @on_display_to_order.setter
    def on_display_to_order(self, on_display_to_order):
        """Sets the on_display_to_order of this LiaCountrySettings.


        :param on_display_to_order: The on_display_to_order of this LiaCountrySettings.
        :type on_display_to_order: LiaOnDisplayToOrderSettings
        """

        self._on_display_to_order = on_display_to_order

    @property
    def pos_data_provider(self):
        """Gets the pos_data_provider of this LiaCountrySettings.


        :return: The pos_data_provider of this LiaCountrySettings.
        :rtype: LiaPosDataProvider
        """
        return self._pos_data_provider

    @pos_data_provider.setter
    def pos_data_provider(self, pos_data_provider):
        """Sets the pos_data_provider of this LiaCountrySettings.


        :param pos_data_provider: The pos_data_provider of this LiaCountrySettings.
        :type pos_data_provider: LiaPosDataProvider
        """

        self._pos_data_provider = pos_data_provider

    @property
    def store_pickup_active(self):
        """Gets the store_pickup_active of this LiaCountrySettings.

        The status of the \"Store pickup\" feature.

        :return: The store_pickup_active of this LiaCountrySettings.
        :rtype: bool
        """
        return self._store_pickup_active

    @store_pickup_active.setter
    def store_pickup_active(self, store_pickup_active):
        """Sets the store_pickup_active of this LiaCountrySettings.

        The status of the \"Store pickup\" feature.

        :param store_pickup_active: The store_pickup_active of this LiaCountrySettings.
        :type store_pickup_active: bool
        """

        self._store_pickup_active = store_pickup_active
