# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribution_settings_conversion_type import AttributionSettingsConversionType
from openapi_server import util


class AttributionSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribution_lookback_window_in_days: int=None, attribution_model: str=None, conversion_type: List[AttributionSettingsConversionType]=None):
        """AttributionSettings - a model defined in OpenAPI

        :param attribution_lookback_window_in_days: The attribution_lookback_window_in_days of this AttributionSettings.
        :param attribution_model: The attribution_model of this AttributionSettings.
        :param conversion_type: The conversion_type of this AttributionSettings.
        """
        self.openapi_types = {
            'attribution_lookback_window_in_days': int,
            'attribution_model': str,
            'conversion_type': List[AttributionSettingsConversionType]
        }

        self.attribute_map = {
            'attribution_lookback_window_in_days': 'attributionLookbackWindowInDays',
            'attribution_model': 'attributionModel',
            'conversion_type': 'conversionType'
        }

        self._attribution_lookback_window_in_days = attribution_lookback_window_in_days
        self._attribution_model = attribution_model
        self._conversion_type = conversion_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributionSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributionSettings of this AttributionSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribution_lookback_window_in_days(self):
        """Gets the attribution_lookback_window_in_days of this AttributionSettings.

        Required. Lookback windows (in days) used for attribution in this source. Supported values are 7, 30, 40.

        :return: The attribution_lookback_window_in_days of this AttributionSettings.
        :rtype: int
        """
        return self._attribution_lookback_window_in_days

    @attribution_lookback_window_in_days.setter
    def attribution_lookback_window_in_days(self, attribution_lookback_window_in_days):
        """Sets the attribution_lookback_window_in_days of this AttributionSettings.

        Required. Lookback windows (in days) used for attribution in this source. Supported values are 7, 30, 40.

        :param attribution_lookback_window_in_days: The attribution_lookback_window_in_days of this AttributionSettings.
        :type attribution_lookback_window_in_days: int
        """

        self._attribution_lookback_window_in_days = attribution_lookback_window_in_days

    @property
    def attribution_model(self):
        """Gets the attribution_model of this AttributionSettings.

        Required. Attribution model.

        :return: The attribution_model of this AttributionSettings.
        :rtype: str
        """
        return self._attribution_model

    @attribution_model.setter
    def attribution_model(self, attribution_model):
        """Sets the attribution_model of this AttributionSettings.

        Required. Attribution model.

        :param attribution_model: The attribution_model of this AttributionSettings.
        :type attribution_model: str
        """
        allowed_values = ["ATTRIBUTION_MODEL_UNSPECIFIED", "CROSS_CHANNEL_LAST_CLICK", "ADS_PREFERRED_LAST_CLICK", "CROSS_CHANNEL_DATA_DRIVEN", "CROSS_CHANNEL_FIRST_CLICK", "CROSS_CHANNEL_LINEAR", "CROSS_CHANNEL_POSITION_BASED", "CROSS_CHANNEL_TIME_DECAY"]  # noqa: E501
        if attribution_model not in allowed_values:
            raise ValueError(
                "Invalid value for `attribution_model` ({0}), must be one of {1}"
                .format(attribution_model, allowed_values)
            )

        self._attribution_model = attribution_model

    @property
    def conversion_type(self):
        """Gets the conversion_type of this AttributionSettings.

        Immutable. Unordered list. List of different conversion types a conversion event can be classified as. A standard \"purchase\" type will be automatically created if this list is empty at creation time.

        :return: The conversion_type of this AttributionSettings.
        :rtype: List[AttributionSettingsConversionType]
        """
        return self._conversion_type

    @conversion_type.setter
    def conversion_type(self, conversion_type):
        """Sets the conversion_type of this AttributionSettings.

        Immutable. Unordered list. List of different conversion types a conversion event can be classified as. A standard \"purchase\" type will be automatically created if this list is empty at creation time.

        :param conversion_type: The conversion_type of this AttributionSettings.
        :type conversion_type: List[AttributionSettingsConversionType]
        """

        self._conversion_type = conversion_type
