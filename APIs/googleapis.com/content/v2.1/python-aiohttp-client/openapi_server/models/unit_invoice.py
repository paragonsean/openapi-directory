# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price import Price
from openapi_server.models.unit_invoice_additional_charge import UnitInvoiceAdditionalCharge
from openapi_server.models.unit_invoice_tax_line import UnitInvoiceTaxLine
from openapi_server import util


class UnitInvoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_charges: List[UnitInvoiceAdditionalCharge]=None, unit_price: Price=None, unit_price_taxes: List[UnitInvoiceTaxLine]=None):
        """UnitInvoice - a model defined in OpenAPI

        :param additional_charges: The additional_charges of this UnitInvoice.
        :param unit_price: The unit_price of this UnitInvoice.
        :param unit_price_taxes: The unit_price_taxes of this UnitInvoice.
        """
        self.openapi_types = {
            'additional_charges': List[UnitInvoiceAdditionalCharge],
            'unit_price': Price,
            'unit_price_taxes': List[UnitInvoiceTaxLine]
        }

        self.attribute_map = {
            'additional_charges': 'additionalCharges',
            'unit_price': 'unitPrice',
            'unit_price_taxes': 'unitPriceTaxes'
        }

        self._additional_charges = additional_charges
        self._unit_price = unit_price
        self._unit_price_taxes = unit_price_taxes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UnitInvoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UnitInvoice of this UnitInvoice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_charges(self):
        """Gets the additional_charges of this UnitInvoice.

        Additional charges for a unit, for example, shipping costs.

        :return: The additional_charges of this UnitInvoice.
        :rtype: List[UnitInvoiceAdditionalCharge]
        """
        return self._additional_charges

    @additional_charges.setter
    def additional_charges(self, additional_charges):
        """Sets the additional_charges of this UnitInvoice.

        Additional charges for a unit, for example, shipping costs.

        :param additional_charges: The additional_charges of this UnitInvoice.
        :type additional_charges: List[UnitInvoiceAdditionalCharge]
        """

        self._additional_charges = additional_charges

    @property
    def unit_price(self):
        """Gets the unit_price of this UnitInvoice.


        :return: The unit_price of this UnitInvoice.
        :rtype: Price
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this UnitInvoice.


        :param unit_price: The unit_price of this UnitInvoice.
        :type unit_price: Price
        """

        self._unit_price = unit_price

    @property
    def unit_price_taxes(self):
        """Gets the unit_price_taxes of this UnitInvoice.

        Tax amounts to apply to the unit price.

        :return: The unit_price_taxes of this UnitInvoice.
        :rtype: List[UnitInvoiceTaxLine]
        """
        return self._unit_price_taxes

    @unit_price_taxes.setter
    def unit_price_taxes(self, unit_price_taxes):
        """Sets the unit_price_taxes of this UnitInvoice.

        Tax amounts to apply to the unit price.

        :param unit_price_taxes: The unit_price_taxes of this UnitInvoice.
        :type unit_price_taxes: List[UnitInvoiceTaxLine]
        """

        self._unit_price_taxes = unit_price_taxes
