# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monetary_amount import MonetaryAmount
from openapi_server import util


class OrdersCustomBatchRequestEntryRefundItemItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: MonetaryAmount=None, full_refund: bool=None, line_item_id: str=None, product_id: str=None, quantity: int=None):
        """OrdersCustomBatchRequestEntryRefundItemItem - a model defined in OpenAPI

        :param amount: The amount of this OrdersCustomBatchRequestEntryRefundItemItem.
        :param full_refund: The full_refund of this OrdersCustomBatchRequestEntryRefundItemItem.
        :param line_item_id: The line_item_id of this OrdersCustomBatchRequestEntryRefundItemItem.
        :param product_id: The product_id of this OrdersCustomBatchRequestEntryRefundItemItem.
        :param quantity: The quantity of this OrdersCustomBatchRequestEntryRefundItemItem.
        """
        self.openapi_types = {
            'amount': MonetaryAmount,
            'full_refund': bool,
            'line_item_id': str,
            'product_id': str,
            'quantity': int
        }

        self.attribute_map = {
            'amount': 'amount',
            'full_refund': 'fullRefund',
            'line_item_id': 'lineItemId',
            'product_id': 'productId',
            'quantity': 'quantity'
        }

        self._amount = amount
        self._full_refund = full_refund
        self._line_item_id = line_item_id
        self._product_id = product_id
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrdersCustomBatchRequestEntryRefundItemItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrdersCustomBatchRequestEntryRefundItemItem of this OrdersCustomBatchRequestEntryRefundItemItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this OrdersCustomBatchRequestEntryRefundItemItem.


        :return: The amount of this OrdersCustomBatchRequestEntryRefundItemItem.
        :rtype: MonetaryAmount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this OrdersCustomBatchRequestEntryRefundItemItem.


        :param amount: The amount of this OrdersCustomBatchRequestEntryRefundItemItem.
        :type amount: MonetaryAmount
        """

        self._amount = amount

    @property
    def full_refund(self):
        """Gets the full_refund of this OrdersCustomBatchRequestEntryRefundItemItem.

        If true, the full item will be refunded. If this is true, amount shouldn't be provided and will be ignored.

        :return: The full_refund of this OrdersCustomBatchRequestEntryRefundItemItem.
        :rtype: bool
        """
        return self._full_refund

    @full_refund.setter
    def full_refund(self, full_refund):
        """Sets the full_refund of this OrdersCustomBatchRequestEntryRefundItemItem.

        If true, the full item will be refunded. If this is true, amount shouldn't be provided and will be ignored.

        :param full_refund: The full_refund of this OrdersCustomBatchRequestEntryRefundItemItem.
        :type full_refund: bool
        """

        self._full_refund = full_refund

    @property
    def line_item_id(self):
        """Gets the line_item_id of this OrdersCustomBatchRequestEntryRefundItemItem.

        The ID of the line item. Either lineItemId or productId is required.

        :return: The line_item_id of this OrdersCustomBatchRequestEntryRefundItemItem.
        :rtype: str
        """
        return self._line_item_id

    @line_item_id.setter
    def line_item_id(self, line_item_id):
        """Sets the line_item_id of this OrdersCustomBatchRequestEntryRefundItemItem.

        The ID of the line item. Either lineItemId or productId is required.

        :param line_item_id: The line_item_id of this OrdersCustomBatchRequestEntryRefundItemItem.
        :type line_item_id: str
        """

        self._line_item_id = line_item_id

    @property
    def product_id(self):
        """Gets the product_id of this OrdersCustomBatchRequestEntryRefundItemItem.

        The ID of the product. This is the REST ID used in the products service. Either lineItemId or productId is required.

        :return: The product_id of this OrdersCustomBatchRequestEntryRefundItemItem.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this OrdersCustomBatchRequestEntryRefundItemItem.

        The ID of the product. This is the REST ID used in the products service. Either lineItemId or productId is required.

        :param product_id: The product_id of this OrdersCustomBatchRequestEntryRefundItemItem.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def quantity(self):
        """Gets the quantity of this OrdersCustomBatchRequestEntryRefundItemItem.

        The number of products that are refunded.

        :return: The quantity of this OrdersCustomBatchRequestEntryRefundItemItem.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrdersCustomBatchRequestEntryRefundItemItem.

        The number of products that are refunded.

        :param quantity: The quantity of this OrdersCustomBatchRequestEntryRefundItemItem.
        :type quantity: int
        """

        self._quantity = quantity
