# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_view_item_issue_issue_severity_per_destination import ProductViewItemIssueIssueSeverityPerDestination
from openapi_server import util


class ProductViewItemIssueItemIssueSeverity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregated_severity: str=None, severity_per_destination: List[ProductViewItemIssueIssueSeverityPerDestination]=None):
        """ProductViewItemIssueItemIssueSeverity - a model defined in OpenAPI

        :param aggregated_severity: The aggregated_severity of this ProductViewItemIssueItemIssueSeverity.
        :param severity_per_destination: The severity_per_destination of this ProductViewItemIssueItemIssueSeverity.
        """
        self.openapi_types = {
            'aggregated_severity': str,
            'severity_per_destination': List[ProductViewItemIssueIssueSeverityPerDestination]
        }

        self.attribute_map = {
            'aggregated_severity': 'aggregatedSeverity',
            'severity_per_destination': 'severityPerDestination'
        }

        self._aggregated_severity = aggregated_severity
        self._severity_per_destination = severity_per_destination

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductViewItemIssueItemIssueSeverity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductViewItemIssueItemIssueSeverity of this ProductViewItemIssueItemIssueSeverity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregated_severity(self):
        """Gets the aggregated_severity of this ProductViewItemIssueItemIssueSeverity.

        Severity of an issue aggregated for destination.

        :return: The aggregated_severity of this ProductViewItemIssueItemIssueSeverity.
        :rtype: str
        """
        return self._aggregated_severity

    @aggregated_severity.setter
    def aggregated_severity(self, aggregated_severity):
        """Sets the aggregated_severity of this ProductViewItemIssueItemIssueSeverity.

        Severity of an issue aggregated for destination.

        :param aggregated_severity: The aggregated_severity of this ProductViewItemIssueItemIssueSeverity.
        :type aggregated_severity: str
        """
        allowed_values = ["AGGREGATED_ISSUE_SEVERITY_UNSPECIFIED", "DISAPPROVED", "DEMOTED", "PENDING"]  # noqa: E501
        if aggregated_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregated_severity` ({0}), must be one of {1}"
                .format(aggregated_severity, allowed_values)
            )

        self._aggregated_severity = aggregated_severity

    @property
    def severity_per_destination(self):
        """Gets the severity_per_destination of this ProductViewItemIssueItemIssueSeverity.

        Item issue severity for every destination.

        :return: The severity_per_destination of this ProductViewItemIssueItemIssueSeverity.
        :rtype: List[ProductViewItemIssueIssueSeverityPerDestination]
        """
        return self._severity_per_destination

    @severity_per_destination.setter
    def severity_per_destination(self, severity_per_destination):
        """Sets the severity_per_destination of this ProductViewItemIssueItemIssueSeverity.

        Item issue severity for every destination.

        :param severity_per_destination: The severity_per_destination of this ProductViewItemIssueItemIssueSeverity.
        :type severity_per_destination: List[ProductViewItemIssueIssueSeverityPerDestination]
        """

        self._severity_per_destination = severity_per_destination
