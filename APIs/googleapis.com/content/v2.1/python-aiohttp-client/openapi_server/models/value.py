# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price import Price
from openapi_server import util


class Value(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, carrier_rate_name: str=None, flat_rate: Price=None, no_shipping: bool=None, price_percentage: str=None, subtable_name: str=None):
        """Value - a model defined in OpenAPI

        :param carrier_rate_name: The carrier_rate_name of this Value.
        :param flat_rate: The flat_rate of this Value.
        :param no_shipping: The no_shipping of this Value.
        :param price_percentage: The price_percentage of this Value.
        :param subtable_name: The subtable_name of this Value.
        """
        self.openapi_types = {
            'carrier_rate_name': str,
            'flat_rate': Price,
            'no_shipping': bool,
            'price_percentage': str,
            'subtable_name': str
        }

        self.attribute_map = {
            'carrier_rate_name': 'carrierRateName',
            'flat_rate': 'flatRate',
            'no_shipping': 'noShipping',
            'price_percentage': 'pricePercentage',
            'subtable_name': 'subtableName'
        }

        self._carrier_rate_name = carrier_rate_name
        self._flat_rate = flat_rate
        self._no_shipping = no_shipping
        self._price_percentage = price_percentage
        self._subtable_name = subtable_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Value':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Value of this Value.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carrier_rate_name(self):
        """Gets the carrier_rate_name of this Value.

        The name of a carrier rate referring to a carrier rate defined in the same rate group. Can only be set if all other fields are not set.

        :return: The carrier_rate_name of this Value.
        :rtype: str
        """
        return self._carrier_rate_name

    @carrier_rate_name.setter
    def carrier_rate_name(self, carrier_rate_name):
        """Sets the carrier_rate_name of this Value.

        The name of a carrier rate referring to a carrier rate defined in the same rate group. Can only be set if all other fields are not set.

        :param carrier_rate_name: The carrier_rate_name of this Value.
        :type carrier_rate_name: str
        """

        self._carrier_rate_name = carrier_rate_name

    @property
    def flat_rate(self):
        """Gets the flat_rate of this Value.


        :return: The flat_rate of this Value.
        :rtype: Price
        """
        return self._flat_rate

    @flat_rate.setter
    def flat_rate(self, flat_rate):
        """Sets the flat_rate of this Value.


        :param flat_rate: The flat_rate of this Value.
        :type flat_rate: Price
        """

        self._flat_rate = flat_rate

    @property
    def no_shipping(self):
        """Gets the no_shipping of this Value.

        If true, then the product can't ship. Must be true when set, can only be set if all other fields are not set.

        :return: The no_shipping of this Value.
        :rtype: bool
        """
        return self._no_shipping

    @no_shipping.setter
    def no_shipping(self, no_shipping):
        """Sets the no_shipping of this Value.

        If true, then the product can't ship. Must be true when set, can only be set if all other fields are not set.

        :param no_shipping: The no_shipping of this Value.
        :type no_shipping: bool
        """

        self._no_shipping = no_shipping

    @property
    def price_percentage(self):
        """Gets the price_percentage of this Value.

        A percentage of the price represented as a number in decimal notation (for example, `\"5.4\"`). Can only be set if all other fields are not set.

        :return: The price_percentage of this Value.
        :rtype: str
        """
        return self._price_percentage

    @price_percentage.setter
    def price_percentage(self, price_percentage):
        """Sets the price_percentage of this Value.

        A percentage of the price represented as a number in decimal notation (for example, `\"5.4\"`). Can only be set if all other fields are not set.

        :param price_percentage: The price_percentage of this Value.
        :type price_percentage: str
        """

        self._price_percentage = price_percentage

    @property
    def subtable_name(self):
        """Gets the subtable_name of this Value.

        The name of a subtable. Can only be set in table cells (not for single values), and only if all other fields are not set.

        :return: The subtable_name of this Value.
        :rtype: str
        """
        return self._subtable_name

    @subtable_name.setter
    def subtable_name(self, subtable_name):
        """Sets the subtable_name of this Value.

        The name of a subtable. Can only be set in table cells (not for single values), and only if all other fields are not set.

        :param subtable_name: The subtable_name of this Value.
        :type subtable_name: str
        """

        self._subtable_name = subtable_name
