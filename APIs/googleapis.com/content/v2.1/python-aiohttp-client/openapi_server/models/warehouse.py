# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.business_day_config import BusinessDayConfig
from openapi_server.models.warehouse_cutoff_time import WarehouseCutoffTime
from openapi_server import util


class Warehouse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_day_config: BusinessDayConfig=None, cutoff_time: WarehouseCutoffTime=None, handling_days: str=None, name: str=None, shipping_address: Address=None):
        """Warehouse - a model defined in OpenAPI

        :param business_day_config: The business_day_config of this Warehouse.
        :param cutoff_time: The cutoff_time of this Warehouse.
        :param handling_days: The handling_days of this Warehouse.
        :param name: The name of this Warehouse.
        :param shipping_address: The shipping_address of this Warehouse.
        """
        self.openapi_types = {
            'business_day_config': BusinessDayConfig,
            'cutoff_time': WarehouseCutoffTime,
            'handling_days': str,
            'name': str,
            'shipping_address': Address
        }

        self.attribute_map = {
            'business_day_config': 'businessDayConfig',
            'cutoff_time': 'cutoffTime',
            'handling_days': 'handlingDays',
            'name': 'name',
            'shipping_address': 'shippingAddress'
        }

        self._business_day_config = business_day_config
        self._cutoff_time = cutoff_time
        self._handling_days = handling_days
        self._name = name
        self._shipping_address = shipping_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Warehouse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Warehouse of this Warehouse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_day_config(self):
        """Gets the business_day_config of this Warehouse.


        :return: The business_day_config of this Warehouse.
        :rtype: BusinessDayConfig
        """
        return self._business_day_config

    @business_day_config.setter
    def business_day_config(self, business_day_config):
        """Sets the business_day_config of this Warehouse.


        :param business_day_config: The business_day_config of this Warehouse.
        :type business_day_config: BusinessDayConfig
        """

        self._business_day_config = business_day_config

    @property
    def cutoff_time(self):
        """Gets the cutoff_time of this Warehouse.


        :return: The cutoff_time of this Warehouse.
        :rtype: WarehouseCutoffTime
        """
        return self._cutoff_time

    @cutoff_time.setter
    def cutoff_time(self, cutoff_time):
        """Sets the cutoff_time of this Warehouse.


        :param cutoff_time: The cutoff_time of this Warehouse.
        :type cutoff_time: WarehouseCutoffTime
        """

        self._cutoff_time = cutoff_time

    @property
    def handling_days(self):
        """Gets the handling_days of this Warehouse.

        Required. The number of days it takes for this warehouse to pack up and ship an item. This is on the warehouse level, but can be overridden on the offer level based on the attributes of an item.

        :return: The handling_days of this Warehouse.
        :rtype: str
        """
        return self._handling_days

    @handling_days.setter
    def handling_days(self, handling_days):
        """Sets the handling_days of this Warehouse.

        Required. The number of days it takes for this warehouse to pack up and ship an item. This is on the warehouse level, but can be overridden on the offer level based on the attributes of an item.

        :param handling_days: The handling_days of this Warehouse.
        :type handling_days: str
        """

        self._handling_days = handling_days

    @property
    def name(self):
        """Gets the name of this Warehouse.

        Required. The name of the warehouse. Must be unique within account.

        :return: The name of this Warehouse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Warehouse.

        Required. The name of the warehouse. Must be unique within account.

        :param name: The name of this Warehouse.
        :type name: str
        """

        self._name = name

    @property
    def shipping_address(self):
        """Gets the shipping_address of this Warehouse.


        :return: The shipping_address of this Warehouse.
        :rtype: Address
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this Warehouse.


        :param shipping_address: The shipping_address of this Warehouse.
        :type shipping_address: Address
        """

        self._shipping_address = shipping_address
