# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PriceCompetitiveness(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, benchmark_price_currency_code: str=None, benchmark_price_micros: str=None, country_code: str=None):
        """PriceCompetitiveness - a model defined in OpenAPI

        :param benchmark_price_currency_code: The benchmark_price_currency_code of this PriceCompetitiveness.
        :param benchmark_price_micros: The benchmark_price_micros of this PriceCompetitiveness.
        :param country_code: The country_code of this PriceCompetitiveness.
        """
        self.openapi_types = {
            'benchmark_price_currency_code': str,
            'benchmark_price_micros': str,
            'country_code': str
        }

        self.attribute_map = {
            'benchmark_price_currency_code': 'benchmarkPriceCurrencyCode',
            'benchmark_price_micros': 'benchmarkPriceMicros',
            'country_code': 'countryCode'
        }

        self._benchmark_price_currency_code = benchmark_price_currency_code
        self._benchmark_price_micros = benchmark_price_micros
        self._country_code = country_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PriceCompetitiveness':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PriceCompetitiveness of this PriceCompetitiveness.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def benchmark_price_currency_code(self):
        """Gets the benchmark_price_currency_code of this PriceCompetitiveness.

        The price benchmark currency (ISO 4217 code).

        :return: The benchmark_price_currency_code of this PriceCompetitiveness.
        :rtype: str
        """
        return self._benchmark_price_currency_code

    @benchmark_price_currency_code.setter
    def benchmark_price_currency_code(self, benchmark_price_currency_code):
        """Sets the benchmark_price_currency_code of this PriceCompetitiveness.

        The price benchmark currency (ISO 4217 code).

        :param benchmark_price_currency_code: The benchmark_price_currency_code of this PriceCompetitiveness.
        :type benchmark_price_currency_code: str
        """

        self._benchmark_price_currency_code = benchmark_price_currency_code

    @property
    def benchmark_price_micros(self):
        """Gets the benchmark_price_micros of this PriceCompetitiveness.

        The latest available price benchmark in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) for the product's catalog in the benchmark country.

        :return: The benchmark_price_micros of this PriceCompetitiveness.
        :rtype: str
        """
        return self._benchmark_price_micros

    @benchmark_price_micros.setter
    def benchmark_price_micros(self, benchmark_price_micros):
        """Sets the benchmark_price_micros of this PriceCompetitiveness.

        The latest available price benchmark in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) for the product's catalog in the benchmark country.

        :param benchmark_price_micros: The benchmark_price_micros of this PriceCompetitiveness.
        :type benchmark_price_micros: str
        """

        self._benchmark_price_micros = benchmark_price_micros

    @property
    def country_code(self):
        """Gets the country_code of this PriceCompetitiveness.

        The country of the price benchmark (ISO 3166 code).

        :return: The country_code of this PriceCompetitiveness.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PriceCompetitiveness.

        The country of the price benchmark (ISO 3166 code).

        :param country_code: The country_code of this PriceCompetitiveness.
        :type country_code: str
        """

        self._country_code = country_code
