# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.built_in_simple_action_additional_content import BuiltInSimpleActionAdditionalContent
from openapi_server import util


class BuiltInSimpleAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_content: BuiltInSimpleActionAdditionalContent=None, attribute_code: str=None, type: str=None):
        """BuiltInSimpleAction - a model defined in OpenAPI

        :param additional_content: The additional_content of this BuiltInSimpleAction.
        :param attribute_code: The attribute_code of this BuiltInSimpleAction.
        :param type: The type of this BuiltInSimpleAction.
        """
        self.openapi_types = {
            'additional_content': BuiltInSimpleActionAdditionalContent,
            'attribute_code': str,
            'type': str
        }

        self.attribute_map = {
            'additional_content': 'additionalContent',
            'attribute_code': 'attributeCode',
            'type': 'type'
        }

        self._additional_content = additional_content
        self._attribute_code = attribute_code
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuiltInSimpleAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuiltInSimpleAction of this BuiltInSimpleAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_content(self):
        """Gets the additional_content of this BuiltInSimpleAction.


        :return: The additional_content of this BuiltInSimpleAction.
        :rtype: BuiltInSimpleActionAdditionalContent
        """
        return self._additional_content

    @additional_content.setter
    def additional_content(self, additional_content):
        """Sets the additional_content of this BuiltInSimpleAction.


        :param additional_content: The additional_content of this BuiltInSimpleAction.
        :type additional_content: BuiltInSimpleActionAdditionalContent
        """

        self._additional_content = additional_content

    @property
    def attribute_code(self):
        """Gets the attribute_code of this BuiltInSimpleAction.

        The attribute that needs to be updated. Present when the type is `EDIT_ITEM_ATTRIBUTE`. This field contains a code for attribute, represented in snake_case. You can find a list of product's attributes, with their codes [here](https://support.google.com/merchants/answer/7052112).

        :return: The attribute_code of this BuiltInSimpleAction.
        :rtype: str
        """
        return self._attribute_code

    @attribute_code.setter
    def attribute_code(self, attribute_code):
        """Sets the attribute_code of this BuiltInSimpleAction.

        The attribute that needs to be updated. Present when the type is `EDIT_ITEM_ATTRIBUTE`. This field contains a code for attribute, represented in snake_case. You can find a list of product's attributes, with their codes [here](https://support.google.com/merchants/answer/7052112).

        :param attribute_code: The attribute_code of this BuiltInSimpleAction.
        :type attribute_code: str
        """

        self._attribute_code = attribute_code

    @property
    def type(self):
        """Gets the type of this BuiltInSimpleAction.

        The type of action that represents a functionality that is expected to be available in third-party application.

        :return: The type of this BuiltInSimpleAction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BuiltInSimpleAction.

        The type of action that represents a functionality that is expected to be available in third-party application.

        :param type: The type of this BuiltInSimpleAction.
        :type type: str
        """
        allowed_values = ["BUILT_IN_SIMPLE_ACTION_TYPE_UNSPECIFIED", "VERIFY_PHONE", "CLAIM_WEBSITE", "ADD_PRODUCTS", "ADD_CONTACT_INFO", "LINK_ADS_ACCOUNT", "ADD_BUSINESS_REGISTRATION_NUMBER", "EDIT_ITEM_ATTRIBUTE", "FIX_ACCOUNT_ISSUE", "SHOW_ADDITIONAL_CONTENT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
