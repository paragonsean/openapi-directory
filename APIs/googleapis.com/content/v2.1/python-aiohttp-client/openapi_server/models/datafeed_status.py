# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.datafeed_status_error import DatafeedStatusError
from openapi_server import util


class DatafeedStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, datafeed_id: str=None, errors: List[DatafeedStatusError]=None, feed_label: str=None, items_total: str=None, items_valid: str=None, kind: str=None, language: str=None, last_upload_date: str=None, processing_status: str=None, warnings: List[DatafeedStatusError]=None):
        """DatafeedStatus - a model defined in OpenAPI

        :param country: The country of this DatafeedStatus.
        :param datafeed_id: The datafeed_id of this DatafeedStatus.
        :param errors: The errors of this DatafeedStatus.
        :param feed_label: The feed_label of this DatafeedStatus.
        :param items_total: The items_total of this DatafeedStatus.
        :param items_valid: The items_valid of this DatafeedStatus.
        :param kind: The kind of this DatafeedStatus.
        :param language: The language of this DatafeedStatus.
        :param last_upload_date: The last_upload_date of this DatafeedStatus.
        :param processing_status: The processing_status of this DatafeedStatus.
        :param warnings: The warnings of this DatafeedStatus.
        """
        self.openapi_types = {
            'country': str,
            'datafeed_id': str,
            'errors': List[DatafeedStatusError],
            'feed_label': str,
            'items_total': str,
            'items_valid': str,
            'kind': str,
            'language': str,
            'last_upload_date': str,
            'processing_status': str,
            'warnings': List[DatafeedStatusError]
        }

        self.attribute_map = {
            'country': 'country',
            'datafeed_id': 'datafeedId',
            'errors': 'errors',
            'feed_label': 'feedLabel',
            'items_total': 'itemsTotal',
            'items_valid': 'itemsValid',
            'kind': 'kind',
            'language': 'language',
            'last_upload_date': 'lastUploadDate',
            'processing_status': 'processingStatus',
            'warnings': 'warnings'
        }

        self._country = country
        self._datafeed_id = datafeed_id
        self._errors = errors
        self._feed_label = feed_label
        self._items_total = items_total
        self._items_valid = items_valid
        self._kind = kind
        self._language = language
        self._last_upload_date = last_upload_date
        self._processing_status = processing_status
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatafeedStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatafeedStatus of this DatafeedStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this DatafeedStatus.

        The country for which the status is reported, represented as a CLDR territory code.

        :return: The country of this DatafeedStatus.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this DatafeedStatus.

        The country for which the status is reported, represented as a CLDR territory code.

        :param country: The country of this DatafeedStatus.
        :type country: str
        """

        self._country = country

    @property
    def datafeed_id(self):
        """Gets the datafeed_id of this DatafeedStatus.

        The ID of the feed for which the status is reported.

        :return: The datafeed_id of this DatafeedStatus.
        :rtype: str
        """
        return self._datafeed_id

    @datafeed_id.setter
    def datafeed_id(self, datafeed_id):
        """Sets the datafeed_id of this DatafeedStatus.

        The ID of the feed for which the status is reported.

        :param datafeed_id: The datafeed_id of this DatafeedStatus.
        :type datafeed_id: str
        """

        self._datafeed_id = datafeed_id

    @property
    def errors(self):
        """Gets the errors of this DatafeedStatus.

        The list of errors occurring in the feed.

        :return: The errors of this DatafeedStatus.
        :rtype: List[DatafeedStatusError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this DatafeedStatus.

        The list of errors occurring in the feed.

        :param errors: The errors of this DatafeedStatus.
        :type errors: List[DatafeedStatusError]
        """

        self._errors = errors

    @property
    def feed_label(self):
        """Gets the feed_label of this DatafeedStatus.

        The feed label status is reported for.

        :return: The feed_label of this DatafeedStatus.
        :rtype: str
        """
        return self._feed_label

    @feed_label.setter
    def feed_label(self, feed_label):
        """Sets the feed_label of this DatafeedStatus.

        The feed label status is reported for.

        :param feed_label: The feed_label of this DatafeedStatus.
        :type feed_label: str
        """

        self._feed_label = feed_label

    @property
    def items_total(self):
        """Gets the items_total of this DatafeedStatus.

        The number of items in the feed that were processed.

        :return: The items_total of this DatafeedStatus.
        :rtype: str
        """
        return self._items_total

    @items_total.setter
    def items_total(self, items_total):
        """Sets the items_total of this DatafeedStatus.

        The number of items in the feed that were processed.

        :param items_total: The items_total of this DatafeedStatus.
        :type items_total: str
        """

        self._items_total = items_total

    @property
    def items_valid(self):
        """Gets the items_valid of this DatafeedStatus.

        The number of items in the feed that were valid.

        :return: The items_valid of this DatafeedStatus.
        :rtype: str
        """
        return self._items_valid

    @items_valid.setter
    def items_valid(self, items_valid):
        """Sets the items_valid of this DatafeedStatus.

        The number of items in the feed that were valid.

        :param items_valid: The items_valid of this DatafeedStatus.
        :type items_valid: str
        """

        self._items_valid = items_valid

    @property
    def kind(self):
        """Gets the kind of this DatafeedStatus.

        Identifies what kind of resource this is. Value: the fixed string \"`content#datafeedStatus`\"

        :return: The kind of this DatafeedStatus.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DatafeedStatus.

        Identifies what kind of resource this is. Value: the fixed string \"`content#datafeedStatus`\"

        :param kind: The kind of this DatafeedStatus.
        :type kind: str
        """

        self._kind = kind

    @property
    def language(self):
        """Gets the language of this DatafeedStatus.

        The two-letter ISO 639-1 language for which the status is reported.

        :return: The language of this DatafeedStatus.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this DatafeedStatus.

        The two-letter ISO 639-1 language for which the status is reported.

        :param language: The language of this DatafeedStatus.
        :type language: str
        """

        self._language = language

    @property
    def last_upload_date(self):
        """Gets the last_upload_date of this DatafeedStatus.

        The last date at which the feed was uploaded.

        :return: The last_upload_date of this DatafeedStatus.
        :rtype: str
        """
        return self._last_upload_date

    @last_upload_date.setter
    def last_upload_date(self, last_upload_date):
        """Sets the last_upload_date of this DatafeedStatus.

        The last date at which the feed was uploaded.

        :param last_upload_date: The last_upload_date of this DatafeedStatus.
        :type last_upload_date: str
        """

        self._last_upload_date = last_upload_date

    @property
    def processing_status(self):
        """Gets the processing_status of this DatafeedStatus.

        The processing status of the feed. Acceptable values are: - \"`\"`failure`\": The feed could not be processed or all items had errors.`\" - \"`in progress`\": The feed is being processed. - \"`none`\": The feed has not yet been processed. For example, a feed that has never been uploaded will have this processing status. - \"`success`\": The feed was processed successfully, though some items might have had errors. 

        :return: The processing_status of this DatafeedStatus.
        :rtype: str
        """
        return self._processing_status

    @processing_status.setter
    def processing_status(self, processing_status):
        """Sets the processing_status of this DatafeedStatus.

        The processing status of the feed. Acceptable values are: - \"`\"`failure`\": The feed could not be processed or all items had errors.`\" - \"`in progress`\": The feed is being processed. - \"`none`\": The feed has not yet been processed. For example, a feed that has never been uploaded will have this processing status. - \"`success`\": The feed was processed successfully, though some items might have had errors. 

        :param processing_status: The processing_status of this DatafeedStatus.
        :type processing_status: str
        """

        self._processing_status = processing_status

    @property
    def warnings(self):
        """Gets the warnings of this DatafeedStatus.

        The list of errors occurring in the feed.

        :return: The warnings of this DatafeedStatus.
        :rtype: List[DatafeedStatusError]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this DatafeedStatus.

        The list of errors occurring in the feed.

        :param warnings: The warnings of this DatafeedStatus.
        :type warnings: List[DatafeedStatusError]
        """

        self._warnings = warnings
