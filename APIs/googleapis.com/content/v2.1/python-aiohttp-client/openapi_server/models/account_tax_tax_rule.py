# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountTaxTaxRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, location_id: str=None, rate_percent: str=None, shipping_taxed: bool=None, use_global_rate: bool=None):
        """AccountTaxTaxRule - a model defined in OpenAPI

        :param country: The country of this AccountTaxTaxRule.
        :param location_id: The location_id of this AccountTaxTaxRule.
        :param rate_percent: The rate_percent of this AccountTaxTaxRule.
        :param shipping_taxed: The shipping_taxed of this AccountTaxTaxRule.
        :param use_global_rate: The use_global_rate of this AccountTaxTaxRule.
        """
        self.openapi_types = {
            'country': str,
            'location_id': str,
            'rate_percent': str,
            'shipping_taxed': bool,
            'use_global_rate': bool
        }

        self.attribute_map = {
            'country': 'country',
            'location_id': 'locationId',
            'rate_percent': 'ratePercent',
            'shipping_taxed': 'shippingTaxed',
            'use_global_rate': 'useGlobalRate'
        }

        self._country = country
        self._location_id = location_id
        self._rate_percent = rate_percent
        self._shipping_taxed = shipping_taxed
        self._use_global_rate = use_global_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountTaxTaxRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountTaxTaxRule of this AccountTaxTaxRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this AccountTaxTaxRule.

        Country code in which tax is applicable.

        :return: The country of this AccountTaxTaxRule.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AccountTaxTaxRule.

        Country code in which tax is applicable.

        :param country: The country of this AccountTaxTaxRule.
        :type country: str
        """

        self._country = country

    @property
    def location_id(self):
        """Gets the location_id of this AccountTaxTaxRule.

        Required. State (or province) is which the tax is applicable, described by its location ID (also called criteria ID).

        :return: The location_id of this AccountTaxTaxRule.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this AccountTaxTaxRule.

        Required. State (or province) is which the tax is applicable, described by its location ID (also called criteria ID).

        :param location_id: The location_id of this AccountTaxTaxRule.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def rate_percent(self):
        """Gets the rate_percent of this AccountTaxTaxRule.

        Explicit tax rate in percent, represented as a floating point number without the percentage character. Must not be negative.

        :return: The rate_percent of this AccountTaxTaxRule.
        :rtype: str
        """
        return self._rate_percent

    @rate_percent.setter
    def rate_percent(self, rate_percent):
        """Sets the rate_percent of this AccountTaxTaxRule.

        Explicit tax rate in percent, represented as a floating point number without the percentage character. Must not be negative.

        :param rate_percent: The rate_percent of this AccountTaxTaxRule.
        :type rate_percent: str
        """

        self._rate_percent = rate_percent

    @property
    def shipping_taxed(self):
        """Gets the shipping_taxed of this AccountTaxTaxRule.

        If true, shipping charges are also taxed.

        :return: The shipping_taxed of this AccountTaxTaxRule.
        :rtype: bool
        """
        return self._shipping_taxed

    @shipping_taxed.setter
    def shipping_taxed(self, shipping_taxed):
        """Sets the shipping_taxed of this AccountTaxTaxRule.

        If true, shipping charges are also taxed.

        :param shipping_taxed: The shipping_taxed of this AccountTaxTaxRule.
        :type shipping_taxed: bool
        """

        self._shipping_taxed = shipping_taxed

    @property
    def use_global_rate(self):
        """Gets the use_global_rate of this AccountTaxTaxRule.

        Whether the tax rate is taken from a global tax table or specified explicitly.

        :return: The use_global_rate of this AccountTaxTaxRule.
        :rtype: bool
        """
        return self._use_global_rate

    @use_global_rate.setter
    def use_global_rate(self, use_global_rate):
        """Sets the use_global_rate of this AccountTaxTaxRule.

        Whether the tax rate is taken from a global tax table or specified explicitly.

        :param use_global_rate: The use_global_rate of this AccountTaxTaxRule.
        :type use_global_rate: bool
        """

        self._use_global_rate = use_global_rate
