# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, expires_in: str=None, purpose: str=None):
        """AccountCredentials - a model defined in OpenAPI

        :param access_token: The access_token of this AccountCredentials.
        :param expires_in: The expires_in of this AccountCredentials.
        :param purpose: The purpose of this AccountCredentials.
        """
        self.openapi_types = {
            'access_token': str,
            'expires_in': str,
            'purpose': str
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'expires_in': 'expiresIn',
            'purpose': 'purpose'
        }

        self._access_token = access_token
        self._expires_in = expires_in
        self._purpose = purpose

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountCredentials of this AccountCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this AccountCredentials.

        An OAuth access token.

        :return: The access_token of this AccountCredentials.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AccountCredentials.

        An OAuth access token.

        :param access_token: The access_token of this AccountCredentials.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def expires_in(self):
        """Gets the expires_in of this AccountCredentials.

        The amount of time, in seconds, after which the access token is no longer valid.

        :return: The expires_in of this AccountCredentials.
        :rtype: str
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this AccountCredentials.

        The amount of time, in seconds, after which the access token is no longer valid.

        :param expires_in: The expires_in of this AccountCredentials.
        :type expires_in: str
        """

        self._expires_in = expires_in

    @property
    def purpose(self):
        """Gets the purpose of this AccountCredentials.

        Indicates to Google how Google should use these OAuth tokens.

        :return: The purpose of this AccountCredentials.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this AccountCredentials.

        Indicates to Google how Google should use these OAuth tokens.

        :param purpose: The purpose of this AccountCredentials.
        :type purpose: str
        """
        allowed_values = ["ACCOUNT_CREDENTIALS_PURPOSE_UNSPECIFIED", "SHOPIFY_ORDER_MANAGEMENT", "SHOPIFY_INTEGRATION"]  # noqa: E501
        if purpose not in allowed_values:
            raise ValueError(
                "Invalid value for `purpose` ({0}), must be one of {1}"
                .format(purpose, allowed_values)
            )

        self._purpose = purpose
