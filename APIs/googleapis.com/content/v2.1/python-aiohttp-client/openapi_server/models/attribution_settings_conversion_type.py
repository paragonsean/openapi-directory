# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttributionSettingsConversionType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, include_in_reporting: bool=None, name: str=None):
        """AttributionSettingsConversionType - a model defined in OpenAPI

        :param include_in_reporting: The include_in_reporting of this AttributionSettingsConversionType.
        :param name: The name of this AttributionSettingsConversionType.
        """
        self.openapi_types = {
            'include_in_reporting': bool,
            'name': str
        }

        self.attribute_map = {
            'include_in_reporting': 'includeInReporting',
            'name': 'name'
        }

        self._include_in_reporting = include_in_reporting
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributionSettingsConversionType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributionSettingsConversionType of this AttributionSettingsConversionType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def include_in_reporting(self):
        """Gets the include_in_reporting of this AttributionSettingsConversionType.

        Output only. Option indicating if the type should be included in Merchant Center reporting.

        :return: The include_in_reporting of this AttributionSettingsConversionType.
        :rtype: bool
        """
        return self._include_in_reporting

    @include_in_reporting.setter
    def include_in_reporting(self, include_in_reporting):
        """Sets the include_in_reporting of this AttributionSettingsConversionType.

        Output only. Option indicating if the type should be included in Merchant Center reporting.

        :param include_in_reporting: The include_in_reporting of this AttributionSettingsConversionType.
        :type include_in_reporting: bool
        """

        self._include_in_reporting = include_in_reporting

    @property
    def name(self):
        """Gets the name of this AttributionSettingsConversionType.

        Output only. Conversion event name, as it'll be reported by the client.

        :return: The name of this AttributionSettingsConversionType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttributionSettingsConversionType.

        Output only. Conversion event name, as it'll be reported by the client.

        :param name: The name of this AttributionSettingsConversionType.
        :type name: str
        """

        self._name = name
