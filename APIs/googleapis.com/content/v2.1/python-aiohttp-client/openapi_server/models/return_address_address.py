# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReturnAddressAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, locality: str=None, postal_code: str=None, recipient_name: str=None, region: str=None, street_address: List[str]=None):
        """ReturnAddressAddress - a model defined in OpenAPI

        :param country: The country of this ReturnAddressAddress.
        :param locality: The locality of this ReturnAddressAddress.
        :param postal_code: The postal_code of this ReturnAddressAddress.
        :param recipient_name: The recipient_name of this ReturnAddressAddress.
        :param region: The region of this ReturnAddressAddress.
        :param street_address: The street_address of this ReturnAddressAddress.
        """
        self.openapi_types = {
            'country': str,
            'locality': str,
            'postal_code': str,
            'recipient_name': str,
            'region': str,
            'street_address': List[str]
        }

        self.attribute_map = {
            'country': 'country',
            'locality': 'locality',
            'postal_code': 'postalCode',
            'recipient_name': 'recipientName',
            'region': 'region',
            'street_address': 'streetAddress'
        }

        self._country = country
        self._locality = locality
        self._postal_code = postal_code
        self._recipient_name = recipient_name
        self._region = region
        self._street_address = street_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReturnAddressAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReturnAddressAddress of this ReturnAddressAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this ReturnAddressAddress.

        CLDR country code (for example, \"US\").

        :return: The country of this ReturnAddressAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ReturnAddressAddress.

        CLDR country code (for example, \"US\").

        :param country: The country of this ReturnAddressAddress.
        :type country: str
        """

        self._country = country

    @property
    def locality(self):
        """Gets the locality of this ReturnAddressAddress.

        City, town or commune. May also include dependent localities or sublocalities (for example, neighborhoods or suburbs).

        :return: The locality of this ReturnAddressAddress.
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this ReturnAddressAddress.

        City, town or commune. May also include dependent localities or sublocalities (for example, neighborhoods or suburbs).

        :param locality: The locality of this ReturnAddressAddress.
        :type locality: str
        """

        self._locality = locality

    @property
    def postal_code(self):
        """Gets the postal_code of this ReturnAddressAddress.

        Postal code or ZIP (for example, \"94043\").

        :return: The postal_code of this ReturnAddressAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ReturnAddressAddress.

        Postal code or ZIP (for example, \"94043\").

        :param postal_code: The postal_code of this ReturnAddressAddress.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def recipient_name(self):
        """Gets the recipient_name of this ReturnAddressAddress.

        Name of the recipient to address returns to.

        :return: The recipient_name of this ReturnAddressAddress.
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this ReturnAddressAddress.

        Name of the recipient to address returns to.

        :param recipient_name: The recipient_name of this ReturnAddressAddress.
        :type recipient_name: str
        """

        self._recipient_name = recipient_name

    @property
    def region(self):
        """Gets the region of this ReturnAddressAddress.

        Top-level administrative subdivision of the country. For example, a state like California (\"CA\") or a province like Quebec (\"QC\").

        :return: The region of this ReturnAddressAddress.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ReturnAddressAddress.

        Top-level administrative subdivision of the country. For example, a state like California (\"CA\") or a province like Quebec (\"QC\").

        :param region: The region of this ReturnAddressAddress.
        :type region: str
        """

        self._region = region

    @property
    def street_address(self):
        """Gets the street_address of this ReturnAddressAddress.

        Street-level part of the address. May be up to two lines, each line specified as an array element.

        :return: The street_address of this ReturnAddressAddress.
        :rtype: List[str]
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this ReturnAddressAddress.

        Street-level part of the address. May be up to two lines, each line specified as an array element.

        :param street_address: The street_address of this ReturnAddressAddress.
        :type street_address: List[str]
        """

        self._street_address = street_address
