# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.return_policy_online_policy import ReturnPolicyOnlinePolicy
from openapi_server.models.return_policy_online_restocking_fee import ReturnPolicyOnlineRestockingFee
from openapi_server.models.return_policy_online_return_reason_category_info import ReturnPolicyOnlineReturnReasonCategoryInfo
from openapi_server import util


class ReturnPolicyOnline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, countries: List[str]=None, item_conditions: List[str]=None, label: str=None, name: str=None, policy: ReturnPolicyOnlinePolicy=None, restocking_fee: ReturnPolicyOnlineRestockingFee=None, return_methods: List[str]=None, return_policy_id: str=None, return_policy_uri: str=None, return_reason_category_info: List[ReturnPolicyOnlineReturnReasonCategoryInfo]=None):
        """ReturnPolicyOnline - a model defined in OpenAPI

        :param countries: The countries of this ReturnPolicyOnline.
        :param item_conditions: The item_conditions of this ReturnPolicyOnline.
        :param label: The label of this ReturnPolicyOnline.
        :param name: The name of this ReturnPolicyOnline.
        :param policy: The policy of this ReturnPolicyOnline.
        :param restocking_fee: The restocking_fee of this ReturnPolicyOnline.
        :param return_methods: The return_methods of this ReturnPolicyOnline.
        :param return_policy_id: The return_policy_id of this ReturnPolicyOnline.
        :param return_policy_uri: The return_policy_uri of this ReturnPolicyOnline.
        :param return_reason_category_info: The return_reason_category_info of this ReturnPolicyOnline.
        """
        self.openapi_types = {
            'countries': List[str],
            'item_conditions': List[str],
            'label': str,
            'name': str,
            'policy': ReturnPolicyOnlinePolicy,
            'restocking_fee': ReturnPolicyOnlineRestockingFee,
            'return_methods': List[str],
            'return_policy_id': str,
            'return_policy_uri': str,
            'return_reason_category_info': List[ReturnPolicyOnlineReturnReasonCategoryInfo]
        }

        self.attribute_map = {
            'countries': 'countries',
            'item_conditions': 'itemConditions',
            'label': 'label',
            'name': 'name',
            'policy': 'policy',
            'restocking_fee': 'restockingFee',
            'return_methods': 'returnMethods',
            'return_policy_id': 'returnPolicyId',
            'return_policy_uri': 'returnPolicyUri',
            'return_reason_category_info': 'returnReasonCategoryInfo'
        }

        self._countries = countries
        self._item_conditions = item_conditions
        self._label = label
        self._name = name
        self._policy = policy
        self._restocking_fee = restocking_fee
        self._return_methods = return_methods
        self._return_policy_id = return_policy_id
        self._return_policy_uri = return_policy_uri
        self._return_reason_category_info = return_reason_category_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReturnPolicyOnline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReturnPolicyOnline of this ReturnPolicyOnline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def countries(self):
        """Gets the countries of this ReturnPolicyOnline.

        The countries of sale where the return policy is applicable. The values must be a valid 2 letter ISO 3166 code, e.g. \"US\".

        :return: The countries of this ReturnPolicyOnline.
        :rtype: List[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this ReturnPolicyOnline.

        The countries of sale where the return policy is applicable. The values must be a valid 2 letter ISO 3166 code, e.g. \"US\".

        :param countries: The countries of this ReturnPolicyOnline.
        :type countries: List[str]
        """

        self._countries = countries

    @property
    def item_conditions(self):
        """Gets the item_conditions of this ReturnPolicyOnline.

        The item conditions that are accepted for returns. This is required to not be empty unless the type of return policy is noReturns.

        :return: The item_conditions of this ReturnPolicyOnline.
        :rtype: List[str]
        """
        return self._item_conditions

    @item_conditions.setter
    def item_conditions(self, item_conditions):
        """Sets the item_conditions of this ReturnPolicyOnline.

        The item conditions that are accepted for returns. This is required to not be empty unless the type of return policy is noReturns.

        :param item_conditions: The item_conditions of this ReturnPolicyOnline.
        :type item_conditions: List[str]
        """
        allowed_values = ["ITEM_CONDITION_UNSPECIFIED", "NEW", "USED"]  # noqa: E501
        if not set(item_conditions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `item_conditions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(item_conditions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._item_conditions = item_conditions

    @property
    def label(self):
        """Gets the label of this ReturnPolicyOnline.

        The unique user-defined label of the return policy. The same label cannot be used in different return policies for the same country. Policies with the label 'default' will apply to all products, unless a product specifies a return_policy_label attribute.

        :return: The label of this ReturnPolicyOnline.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ReturnPolicyOnline.

        The unique user-defined label of the return policy. The same label cannot be used in different return policies for the same country. Policies with the label 'default' will apply to all products, unless a product specifies a return_policy_label attribute.

        :param label: The label of this ReturnPolicyOnline.
        :type label: str
        """

        self._label = label

    @property
    def name(self):
        """Gets the name of this ReturnPolicyOnline.

        The name of the policy as shown in Merchant Center.

        :return: The name of this ReturnPolicyOnline.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReturnPolicyOnline.

        The name of the policy as shown in Merchant Center.

        :param name: The name of this ReturnPolicyOnline.
        :type name: str
        """

        self._name = name

    @property
    def policy(self):
        """Gets the policy of this ReturnPolicyOnline.


        :return: The policy of this ReturnPolicyOnline.
        :rtype: ReturnPolicyOnlinePolicy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this ReturnPolicyOnline.


        :param policy: The policy of this ReturnPolicyOnline.
        :type policy: ReturnPolicyOnlinePolicy
        """

        self._policy = policy

    @property
    def restocking_fee(self):
        """Gets the restocking_fee of this ReturnPolicyOnline.


        :return: The restocking_fee of this ReturnPolicyOnline.
        :rtype: ReturnPolicyOnlineRestockingFee
        """
        return self._restocking_fee

    @restocking_fee.setter
    def restocking_fee(self, restocking_fee):
        """Sets the restocking_fee of this ReturnPolicyOnline.


        :param restocking_fee: The restocking_fee of this ReturnPolicyOnline.
        :type restocking_fee: ReturnPolicyOnlineRestockingFee
        """

        self._restocking_fee = restocking_fee

    @property
    def return_methods(self):
        """Gets the return_methods of this ReturnPolicyOnline.

        The return methods of how customers can return an item. This value is required to not be empty unless the type of return policy is noReturns.

        :return: The return_methods of this ReturnPolicyOnline.
        :rtype: List[str]
        """
        return self._return_methods

    @return_methods.setter
    def return_methods(self, return_methods):
        """Sets the return_methods of this ReturnPolicyOnline.

        The return methods of how customers can return an item. This value is required to not be empty unless the type of return policy is noReturns.

        :param return_methods: The return_methods of this ReturnPolicyOnline.
        :type return_methods: List[str]
        """
        allowed_values = ["RETURN_METHOD_UNSPECIFIED", "BY_MAIL", "IN_STORE", "AT_A_KIOSK"]  # noqa: E501
        if not set(return_methods).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `return_methods` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(return_methods) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._return_methods = return_methods

    @property
    def return_policy_id(self):
        """Gets the return_policy_id of this ReturnPolicyOnline.

        Output only. Return policy ID generated by Google.

        :return: The return_policy_id of this ReturnPolicyOnline.
        :rtype: str
        """
        return self._return_policy_id

    @return_policy_id.setter
    def return_policy_id(self, return_policy_id):
        """Sets the return_policy_id of this ReturnPolicyOnline.

        Output only. Return policy ID generated by Google.

        :param return_policy_id: The return_policy_id of this ReturnPolicyOnline.
        :type return_policy_id: str
        """

        self._return_policy_id = return_policy_id

    @property
    def return_policy_uri(self):
        """Gets the return_policy_uri of this ReturnPolicyOnline.

        The return policy uri. This can used by Google to do a sanity check for the policy.

        :return: The return_policy_uri of this ReturnPolicyOnline.
        :rtype: str
        """
        return self._return_policy_uri

    @return_policy_uri.setter
    def return_policy_uri(self, return_policy_uri):
        """Sets the return_policy_uri of this ReturnPolicyOnline.

        The return policy uri. This can used by Google to do a sanity check for the policy.

        :param return_policy_uri: The return_policy_uri of this ReturnPolicyOnline.
        :type return_policy_uri: str
        """

        self._return_policy_uri = return_policy_uri

    @property
    def return_reason_category_info(self):
        """Gets the return_reason_category_info of this ReturnPolicyOnline.

        The return reason category information. This required to not be empty unless the type of return policy is noReturns.

        :return: The return_reason_category_info of this ReturnPolicyOnline.
        :rtype: List[ReturnPolicyOnlineReturnReasonCategoryInfo]
        """
        return self._return_reason_category_info

    @return_reason_category_info.setter
    def return_reason_category_info(self, return_reason_category_info):
        """Sets the return_reason_category_info of this ReturnPolicyOnline.

        The return reason category information. This required to not be empty unless the type of return policy is noReturns.

        :param return_reason_category_info: The return_reason_category_info of this ReturnPolicyOnline.
        :type return_reason_category_info: List[ReturnPolicyOnlineReturnReasonCategoryInfo]
        """

        self._return_reason_category_info = return_reason_category_info
