# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_promotion_item import OrderPromotionItem
from openapi_server.models.price import Price
from openapi_server import util


class OrderPromotion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicable_items: List[OrderPromotionItem]=None, applied_items: List[OrderPromotionItem]=None, end_time: str=None, funder: str=None, merchant_promotion_id: str=None, price_value: Price=None, short_title: str=None, start_time: str=None, subtype: str=None, tax_value: Price=None, title: str=None, type: str=None):
        """OrderPromotion - a model defined in OpenAPI

        :param applicable_items: The applicable_items of this OrderPromotion.
        :param applied_items: The applied_items of this OrderPromotion.
        :param end_time: The end_time of this OrderPromotion.
        :param funder: The funder of this OrderPromotion.
        :param merchant_promotion_id: The merchant_promotion_id of this OrderPromotion.
        :param price_value: The price_value of this OrderPromotion.
        :param short_title: The short_title of this OrderPromotion.
        :param start_time: The start_time of this OrderPromotion.
        :param subtype: The subtype of this OrderPromotion.
        :param tax_value: The tax_value of this OrderPromotion.
        :param title: The title of this OrderPromotion.
        :param type: The type of this OrderPromotion.
        """
        self.openapi_types = {
            'applicable_items': List[OrderPromotionItem],
            'applied_items': List[OrderPromotionItem],
            'end_time': str,
            'funder': str,
            'merchant_promotion_id': str,
            'price_value': Price,
            'short_title': str,
            'start_time': str,
            'subtype': str,
            'tax_value': Price,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'applicable_items': 'applicableItems',
            'applied_items': 'appliedItems',
            'end_time': 'endTime',
            'funder': 'funder',
            'merchant_promotion_id': 'merchantPromotionId',
            'price_value': 'priceValue',
            'short_title': 'shortTitle',
            'start_time': 'startTime',
            'subtype': 'subtype',
            'tax_value': 'taxValue',
            'title': 'title',
            'type': 'type'
        }

        self._applicable_items = applicable_items
        self._applied_items = applied_items
        self._end_time = end_time
        self._funder = funder
        self._merchant_promotion_id = merchant_promotion_id
        self._price_value = price_value
        self._short_title = short_title
        self._start_time = start_time
        self._subtype = subtype
        self._tax_value = tax_value
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderPromotion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderPromotion of this OrderPromotion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicable_items(self):
        """Gets the applicable_items of this OrderPromotion.

        Items that this promotion may be applied to. If empty, there are no restrictions on applicable items and quantity. This field will also be empty for shipping promotions because shipping is not tied to any specific item.

        :return: The applicable_items of this OrderPromotion.
        :rtype: List[OrderPromotionItem]
        """
        return self._applicable_items

    @applicable_items.setter
    def applicable_items(self, applicable_items):
        """Sets the applicable_items of this OrderPromotion.

        Items that this promotion may be applied to. If empty, there are no restrictions on applicable items and quantity. This field will also be empty for shipping promotions because shipping is not tied to any specific item.

        :param applicable_items: The applicable_items of this OrderPromotion.
        :type applicable_items: List[OrderPromotionItem]
        """

        self._applicable_items = applicable_items

    @property
    def applied_items(self):
        """Gets the applied_items of this OrderPromotion.

        Items that this promotion have been applied to. Do not provide for `orders.createtestorder`. This field will be empty for shipping promotions because shipping is not tied to any specific item.

        :return: The applied_items of this OrderPromotion.
        :rtype: List[OrderPromotionItem]
        """
        return self._applied_items

    @applied_items.setter
    def applied_items(self, applied_items):
        """Sets the applied_items of this OrderPromotion.

        Items that this promotion have been applied to. Do not provide for `orders.createtestorder`. This field will be empty for shipping promotions because shipping is not tied to any specific item.

        :param applied_items: The applied_items of this OrderPromotion.
        :type applied_items: List[OrderPromotionItem]
        """

        self._applied_items = applied_items

    @property
    def end_time(self):
        """Gets the end_time of this OrderPromotion.

        Promotion end time in ISO 8601 format. Date, time, and offset required, for example, \"2020-01-02T09:00:00+01:00\" or \"2020-01-02T09:00:00Z\".

        :return: The end_time of this OrderPromotion.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this OrderPromotion.

        Promotion end time in ISO 8601 format. Date, time, and offset required, for example, \"2020-01-02T09:00:00+01:00\" or \"2020-01-02T09:00:00Z\".

        :param end_time: The end_time of this OrderPromotion.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def funder(self):
        """Gets the funder of this OrderPromotion.

        Required. The party funding the promotion. Only `merchant` is supported for `orders.createtestorder`. Acceptable values are: - \"`google`\" - \"`merchant`\" 

        :return: The funder of this OrderPromotion.
        :rtype: str
        """
        return self._funder

    @funder.setter
    def funder(self, funder):
        """Sets the funder of this OrderPromotion.

        Required. The party funding the promotion. Only `merchant` is supported for `orders.createtestorder`. Acceptable values are: - \"`google`\" - \"`merchant`\" 

        :param funder: The funder of this OrderPromotion.
        :type funder: str
        """

        self._funder = funder

    @property
    def merchant_promotion_id(self):
        """Gets the merchant_promotion_id of this OrderPromotion.

        Required. This field is used to identify promotions within merchants' own systems.

        :return: The merchant_promotion_id of this OrderPromotion.
        :rtype: str
        """
        return self._merchant_promotion_id

    @merchant_promotion_id.setter
    def merchant_promotion_id(self, merchant_promotion_id):
        """Sets the merchant_promotion_id of this OrderPromotion.

        Required. This field is used to identify promotions within merchants' own systems.

        :param merchant_promotion_id: The merchant_promotion_id of this OrderPromotion.
        :type merchant_promotion_id: str
        """

        self._merchant_promotion_id = merchant_promotion_id

    @property
    def price_value(self):
        """Gets the price_value of this OrderPromotion.


        :return: The price_value of this OrderPromotion.
        :rtype: Price
        """
        return self._price_value

    @price_value.setter
    def price_value(self, price_value):
        """Sets the price_value of this OrderPromotion.


        :param price_value: The price_value of this OrderPromotion.
        :type price_value: Price
        """

        self._price_value = price_value

    @property
    def short_title(self):
        """Gets the short_title of this OrderPromotion.

        A short title of the promotion to be shown on the checkout page. Do not provide for `orders.createtestorder`.

        :return: The short_title of this OrderPromotion.
        :rtype: str
        """
        return self._short_title

    @short_title.setter
    def short_title(self, short_title):
        """Sets the short_title of this OrderPromotion.

        A short title of the promotion to be shown on the checkout page. Do not provide for `orders.createtestorder`.

        :param short_title: The short_title of this OrderPromotion.
        :type short_title: str
        """

        self._short_title = short_title

    @property
    def start_time(self):
        """Gets the start_time of this OrderPromotion.

        Promotion start time in ISO 8601 format. Date, time, and offset required, for example, \"2020-01-02T09:00:00+01:00\" or \"2020-01-02T09:00:00Z\".

        :return: The start_time of this OrderPromotion.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this OrderPromotion.

        Promotion start time in ISO 8601 format. Date, time, and offset required, for example, \"2020-01-02T09:00:00+01:00\" or \"2020-01-02T09:00:00Z\".

        :param start_time: The start_time of this OrderPromotion.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def subtype(self):
        """Gets the subtype of this OrderPromotion.

        Required. The category of the promotion. Only `moneyOff` is supported for `orders.createtestorder`. Acceptable values are: - \"`buyMGetMoneyOff`\" - \"`buyMGetNMoneyOff`\" - \"`buyMGetNPercentOff`\" - \"`buyMGetPercentOff`\" - \"`freeGift`\" - \"`freeGiftWithItemId`\" - \"`freeGiftWithValue`\" - \"`freeShippingOvernight`\" - \"`freeShippingStandard`\" - \"`freeShippingTwoDay`\" - \"`moneyOff`\" - \"`percentOff`\" - \"`rewardPoints`\" - \"`salePrice`\" 

        :return: The subtype of this OrderPromotion.
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this OrderPromotion.

        Required. The category of the promotion. Only `moneyOff` is supported for `orders.createtestorder`. Acceptable values are: - \"`buyMGetMoneyOff`\" - \"`buyMGetNMoneyOff`\" - \"`buyMGetNPercentOff`\" - \"`buyMGetPercentOff`\" - \"`freeGift`\" - \"`freeGiftWithItemId`\" - \"`freeGiftWithValue`\" - \"`freeShippingOvernight`\" - \"`freeShippingStandard`\" - \"`freeShippingTwoDay`\" - \"`moneyOff`\" - \"`percentOff`\" - \"`rewardPoints`\" - \"`salePrice`\" 

        :param subtype: The subtype of this OrderPromotion.
        :type subtype: str
        """

        self._subtype = subtype

    @property
    def tax_value(self):
        """Gets the tax_value of this OrderPromotion.


        :return: The tax_value of this OrderPromotion.
        :rtype: Price
        """
        return self._tax_value

    @tax_value.setter
    def tax_value(self, tax_value):
        """Sets the tax_value of this OrderPromotion.


        :param tax_value: The tax_value of this OrderPromotion.
        :type tax_value: Price
        """

        self._tax_value = tax_value

    @property
    def title(self):
        """Gets the title of this OrderPromotion.

        Required. The title of the promotion.

        :return: The title of this OrderPromotion.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this OrderPromotion.

        Required. The title of the promotion.

        :param title: The title of this OrderPromotion.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this OrderPromotion.

        Required. The scope of the promotion. Only `product` is supported for `orders.createtestorder`. Acceptable values are: - \"`product`\" - \"`shipping`\" 

        :return: The type of this OrderPromotion.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderPromotion.

        Required. The scope of the promotion. Only `product` is supported for `orders.createtestorder`. Acceptable values are: - \"`product`\" - \"`shipping`\" 

        :param type: The type of this OrderPromotion.
        :type type: str
        """

        self._type = type
