# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.url_settings import UrlSettings
from openapi_server import util


class CheckoutSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, effective_enrollment_state: str=None, effective_review_state: str=None, effective_uri_settings: UrlSettings=None, enrollment_state: str=None, merchant_id: str=None, review_state: str=None, uri_settings: UrlSettings=None):
        """CheckoutSettings - a model defined in OpenAPI

        :param effective_enrollment_state: The effective_enrollment_state of this CheckoutSettings.
        :param effective_review_state: The effective_review_state of this CheckoutSettings.
        :param effective_uri_settings: The effective_uri_settings of this CheckoutSettings.
        :param enrollment_state: The enrollment_state of this CheckoutSettings.
        :param merchant_id: The merchant_id of this CheckoutSettings.
        :param review_state: The review_state of this CheckoutSettings.
        :param uri_settings: The uri_settings of this CheckoutSettings.
        """
        self.openapi_types = {
            'effective_enrollment_state': str,
            'effective_review_state': str,
            'effective_uri_settings': UrlSettings,
            'enrollment_state': str,
            'merchant_id': str,
            'review_state': str,
            'uri_settings': UrlSettings
        }

        self.attribute_map = {
            'effective_enrollment_state': 'effectiveEnrollmentState',
            'effective_review_state': 'effectiveReviewState',
            'effective_uri_settings': 'effectiveUriSettings',
            'enrollment_state': 'enrollmentState',
            'merchant_id': 'merchantId',
            'review_state': 'reviewState',
            'uri_settings': 'uriSettings'
        }

        self._effective_enrollment_state = effective_enrollment_state
        self._effective_review_state = effective_review_state
        self._effective_uri_settings = effective_uri_settings
        self._enrollment_state = enrollment_state
        self._merchant_id = merchant_id
        self._review_state = review_state
        self._uri_settings = uri_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckoutSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckoutSettings of this CheckoutSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def effective_enrollment_state(self):
        """Gets the effective_enrollment_state of this CheckoutSettings.

        Output only. The effective value of enrollment state for a given merchant ID. If account level settings are present then this value will be a copy of the account level settings. Otherwise, it will have the value of the parent account.

        :return: The effective_enrollment_state of this CheckoutSettings.
        :rtype: str
        """
        return self._effective_enrollment_state

    @effective_enrollment_state.setter
    def effective_enrollment_state(self, effective_enrollment_state):
        """Sets the effective_enrollment_state of this CheckoutSettings.

        Output only. The effective value of enrollment state for a given merchant ID. If account level settings are present then this value will be a copy of the account level settings. Otherwise, it will have the value of the parent account.

        :param effective_enrollment_state: The effective_enrollment_state of this CheckoutSettings.
        :type effective_enrollment_state: str
        """
        allowed_values = ["CHECKOUT_ON_MERCHANT_ENROLLMENT_STATE_UNSPECIFIED", "INACTIVE", "ENROLLED", "OPT_OUT"]  # noqa: E501
        if effective_enrollment_state not in allowed_values:
            raise ValueError(
                "Invalid value for `effective_enrollment_state` ({0}), must be one of {1}"
                .format(effective_enrollment_state, allowed_values)
            )

        self._effective_enrollment_state = effective_enrollment_state

    @property
    def effective_review_state(self):
        """Gets the effective_review_state of this CheckoutSettings.

        Output only. The effective value of review state for a given merchant ID. If account level settings are present then this value will be a copy of the account level settings. Otherwise, it will have the value of the parent account.

        :return: The effective_review_state of this CheckoutSettings.
        :rtype: str
        """
        return self._effective_review_state

    @effective_review_state.setter
    def effective_review_state(self, effective_review_state):
        """Sets the effective_review_state of this CheckoutSettings.

        Output only. The effective value of review state for a given merchant ID. If account level settings are present then this value will be a copy of the account level settings. Otherwise, it will have the value of the parent account.

        :param effective_review_state: The effective_review_state of this CheckoutSettings.
        :type effective_review_state: str
        """
        allowed_values = ["CHECKOUT_ON_MERCHANT_REVIEW_STATE_UNSPECIFIED", "IN_REVIEW", "APPROVED", "DISAPPROVED"]  # noqa: E501
        if effective_review_state not in allowed_values:
            raise ValueError(
                "Invalid value for `effective_review_state` ({0}), must be one of {1}"
                .format(effective_review_state, allowed_values)
            )

        self._effective_review_state = effective_review_state

    @property
    def effective_uri_settings(self):
        """Gets the effective_uri_settings of this CheckoutSettings.


        :return: The effective_uri_settings of this CheckoutSettings.
        :rtype: UrlSettings
        """
        return self._effective_uri_settings

    @effective_uri_settings.setter
    def effective_uri_settings(self, effective_uri_settings):
        """Sets the effective_uri_settings of this CheckoutSettings.


        :param effective_uri_settings: The effective_uri_settings of this CheckoutSettings.
        :type effective_uri_settings: UrlSettings
        """

        self._effective_uri_settings = effective_uri_settings

    @property
    def enrollment_state(self):
        """Gets the enrollment_state of this CheckoutSettings.

        Output only. Reflects the merchant enrollment state in `Checkout` feature.

        :return: The enrollment_state of this CheckoutSettings.
        :rtype: str
        """
        return self._enrollment_state

    @enrollment_state.setter
    def enrollment_state(self, enrollment_state):
        """Sets the enrollment_state of this CheckoutSettings.

        Output only. Reflects the merchant enrollment state in `Checkout` feature.

        :param enrollment_state: The enrollment_state of this CheckoutSettings.
        :type enrollment_state: str
        """
        allowed_values = ["CHECKOUT_ON_MERCHANT_ENROLLMENT_STATE_UNSPECIFIED", "INACTIVE", "ENROLLED", "OPT_OUT"]  # noqa: E501
        if enrollment_state not in allowed_values:
            raise ValueError(
                "Invalid value for `enrollment_state` ({0}), must be one of {1}"
                .format(enrollment_state, allowed_values)
            )

        self._enrollment_state = enrollment_state

    @property
    def merchant_id(self):
        """Gets the merchant_id of this CheckoutSettings.

        Required. The ID of the account.

        :return: The merchant_id of this CheckoutSettings.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this CheckoutSettings.

        Required. The ID of the account.

        :param merchant_id: The merchant_id of this CheckoutSettings.
        :type merchant_id: str
        """

        self._merchant_id = merchant_id

    @property
    def review_state(self):
        """Gets the review_state of this CheckoutSettings.

        Output only. Reflects the merchant review state in `Checkout` feature. This is set based on the data quality reviews of the URL provided by the merchant. A merchant with enrollment state as `ENROLLED` can be in the following review states: `IN_REVIEW`, `APPROVED` or `DISAPPROVED`. A merchant must be in an enrollment_state of `ENROLLED` before a review can begin for the merchant.

        :return: The review_state of this CheckoutSettings.
        :rtype: str
        """
        return self._review_state

    @review_state.setter
    def review_state(self, review_state):
        """Sets the review_state of this CheckoutSettings.

        Output only. Reflects the merchant review state in `Checkout` feature. This is set based on the data quality reviews of the URL provided by the merchant. A merchant with enrollment state as `ENROLLED` can be in the following review states: `IN_REVIEW`, `APPROVED` or `DISAPPROVED`. A merchant must be in an enrollment_state of `ENROLLED` before a review can begin for the merchant.

        :param review_state: The review_state of this CheckoutSettings.
        :type review_state: str
        """
        allowed_values = ["CHECKOUT_ON_MERCHANT_REVIEW_STATE_UNSPECIFIED", "IN_REVIEW", "APPROVED", "DISAPPROVED"]  # noqa: E501
        if review_state not in allowed_values:
            raise ValueError(
                "Invalid value for `review_state` ({0}), must be one of {1}"
                .format(review_state, allowed_values)
            )

        self._review_state = review_state

    @property
    def uri_settings(self):
        """Gets the uri_settings of this CheckoutSettings.


        :return: The uri_settings of this CheckoutSettings.
        :rtype: UrlSettings
        """
        return self._uri_settings

    @uri_settings.setter
    def uri_settings(self, uri_settings):
        """Sets the uri_settings of this CheckoutSettings.


        :param uri_settings: The uri_settings of this CheckoutSettings.
        :type uri_settings: UrlSettings
        """

        self._uri_settings = uri_settings
