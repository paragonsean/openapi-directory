# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Metrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aos: float=None, aov_micros: float=None, clicks: str=None, conversion_rate: float=None, conversion_value_micros: str=None, conversions: float=None, ctr: float=None, days_to_ship: float=None, impressions: str=None, item_days_to_ship: float=None, item_fill_rate: float=None, ordered_item_sales_micros: str=None, ordered_items: str=None, orders: str=None, rejected_items: str=None, return_rate: float=None, returned_items: str=None, returns_micros: str=None, shipped_item_sales_micros: str=None, shipped_items: str=None, shipped_orders: str=None, unshipped_items: float=None, unshipped_orders: float=None):
        """Metrics - a model defined in OpenAPI

        :param aos: The aos of this Metrics.
        :param aov_micros: The aov_micros of this Metrics.
        :param clicks: The clicks of this Metrics.
        :param conversion_rate: The conversion_rate of this Metrics.
        :param conversion_value_micros: The conversion_value_micros of this Metrics.
        :param conversions: The conversions of this Metrics.
        :param ctr: The ctr of this Metrics.
        :param days_to_ship: The days_to_ship of this Metrics.
        :param impressions: The impressions of this Metrics.
        :param item_days_to_ship: The item_days_to_ship of this Metrics.
        :param item_fill_rate: The item_fill_rate of this Metrics.
        :param ordered_item_sales_micros: The ordered_item_sales_micros of this Metrics.
        :param ordered_items: The ordered_items of this Metrics.
        :param orders: The orders of this Metrics.
        :param rejected_items: The rejected_items of this Metrics.
        :param return_rate: The return_rate of this Metrics.
        :param returned_items: The returned_items of this Metrics.
        :param returns_micros: The returns_micros of this Metrics.
        :param shipped_item_sales_micros: The shipped_item_sales_micros of this Metrics.
        :param shipped_items: The shipped_items of this Metrics.
        :param shipped_orders: The shipped_orders of this Metrics.
        :param unshipped_items: The unshipped_items of this Metrics.
        :param unshipped_orders: The unshipped_orders of this Metrics.
        """
        self.openapi_types = {
            'aos': float,
            'aov_micros': float,
            'clicks': str,
            'conversion_rate': float,
            'conversion_value_micros': str,
            'conversions': float,
            'ctr': float,
            'days_to_ship': float,
            'impressions': str,
            'item_days_to_ship': float,
            'item_fill_rate': float,
            'ordered_item_sales_micros': str,
            'ordered_items': str,
            'orders': str,
            'rejected_items': str,
            'return_rate': float,
            'returned_items': str,
            'returns_micros': str,
            'shipped_item_sales_micros': str,
            'shipped_items': str,
            'shipped_orders': str,
            'unshipped_items': float,
            'unshipped_orders': float
        }

        self.attribute_map = {
            'aos': 'aos',
            'aov_micros': 'aovMicros',
            'clicks': 'clicks',
            'conversion_rate': 'conversionRate',
            'conversion_value_micros': 'conversionValueMicros',
            'conversions': 'conversions',
            'ctr': 'ctr',
            'days_to_ship': 'daysToShip',
            'impressions': 'impressions',
            'item_days_to_ship': 'itemDaysToShip',
            'item_fill_rate': 'itemFillRate',
            'ordered_item_sales_micros': 'orderedItemSalesMicros',
            'ordered_items': 'orderedItems',
            'orders': 'orders',
            'rejected_items': 'rejectedItems',
            'return_rate': 'returnRate',
            'returned_items': 'returnedItems',
            'returns_micros': 'returnsMicros',
            'shipped_item_sales_micros': 'shippedItemSalesMicros',
            'shipped_items': 'shippedItems',
            'shipped_orders': 'shippedOrders',
            'unshipped_items': 'unshippedItems',
            'unshipped_orders': 'unshippedOrders'
        }

        self._aos = aos
        self._aov_micros = aov_micros
        self._clicks = clicks
        self._conversion_rate = conversion_rate
        self._conversion_value_micros = conversion_value_micros
        self._conversions = conversions
        self._ctr = ctr
        self._days_to_ship = days_to_ship
        self._impressions = impressions
        self._item_days_to_ship = item_days_to_ship
        self._item_fill_rate = item_fill_rate
        self._ordered_item_sales_micros = ordered_item_sales_micros
        self._ordered_items = ordered_items
        self._orders = orders
        self._rejected_items = rejected_items
        self._return_rate = return_rate
        self._returned_items = returned_items
        self._returns_micros = returns_micros
        self._shipped_item_sales_micros = shipped_item_sales_micros
        self._shipped_items = shipped_items
        self._shipped_orders = shipped_orders
        self._unshipped_items = unshipped_items
        self._unshipped_orders = unshipped_orders

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metrics of this Metrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aos(self):
        """Gets the aos of this Metrics.

        Average order size - the average number of items in an order. **This metric cannot be segmented by product dimensions and customer_country_code.**

        :return: The aos of this Metrics.
        :rtype: float
        """
        return self._aos

    @aos.setter
    def aos(self, aos):
        """Sets the aos of this Metrics.

        Average order size - the average number of items in an order. **This metric cannot be segmented by product dimensions and customer_country_code.**

        :param aos: The aos of this Metrics.
        :type aos: float
        """

        self._aos = aos

    @property
    def aov_micros(self):
        """Gets the aov_micros of this Metrics.

        Average order value in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) - the average value (total price of items) of all placed orders. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by product dimensions and customer_country_code.**

        :return: The aov_micros of this Metrics.
        :rtype: float
        """
        return self._aov_micros

    @aov_micros.setter
    def aov_micros(self, aov_micros):
        """Sets the aov_micros of this Metrics.

        Average order value in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) - the average value (total price of items) of all placed orders. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by product dimensions and customer_country_code.**

        :param aov_micros: The aov_micros of this Metrics.
        :type aov_micros: float
        """

        self._aov_micros = aov_micros

    @property
    def clicks(self):
        """Gets the clicks of this Metrics.

        Number of clicks.

        :return: The clicks of this Metrics.
        :rtype: str
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this Metrics.

        Number of clicks.

        :param clicks: The clicks of this Metrics.
        :type clicks: str
        """

        self._clicks = clicks

    @property
    def conversion_rate(self):
        """Gets the conversion_rate of this Metrics.

        Number of conversions divided by the number of clicks, reported on the impression date. The metric is currently available only for the FREE_PRODUCT_LISTING program.

        :return: The conversion_rate of this Metrics.
        :rtype: float
        """
        return self._conversion_rate

    @conversion_rate.setter
    def conversion_rate(self, conversion_rate):
        """Sets the conversion_rate of this Metrics.

        Number of conversions divided by the number of clicks, reported on the impression date. The metric is currently available only for the FREE_PRODUCT_LISTING program.

        :param conversion_rate: The conversion_rate of this Metrics.
        :type conversion_rate: float
        """

        self._conversion_rate = conversion_rate

    @property
    def conversion_value_micros(self):
        """Gets the conversion_value_micros of this Metrics.

        Value of conversions in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) attributed to the product, reported on the conversion date. The metric is currently available only for the FREE_PRODUCT_LISTING program. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response.

        :return: The conversion_value_micros of this Metrics.
        :rtype: str
        """
        return self._conversion_value_micros

    @conversion_value_micros.setter
    def conversion_value_micros(self, conversion_value_micros):
        """Sets the conversion_value_micros of this Metrics.

        Value of conversions in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) attributed to the product, reported on the conversion date. The metric is currently available only for the FREE_PRODUCT_LISTING program. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response.

        :param conversion_value_micros: The conversion_value_micros of this Metrics.
        :type conversion_value_micros: str
        """

        self._conversion_value_micros = conversion_value_micros

    @property
    def conversions(self):
        """Gets the conversions of this Metrics.

        Number of conversions attributed to the product, reported on the conversion date. Depending on the attribution model, a conversion might be distributed across multiple clicks, where each click gets its own credit assigned. This metric is a sum of all such credits. The metric is currently available only for the FREE_PRODUCT_LISTING program.

        :return: The conversions of this Metrics.
        :rtype: float
        """
        return self._conversions

    @conversions.setter
    def conversions(self, conversions):
        """Sets the conversions of this Metrics.

        Number of conversions attributed to the product, reported on the conversion date. Depending on the attribution model, a conversion might be distributed across multiple clicks, where each click gets its own credit assigned. This metric is a sum of all such credits. The metric is currently available only for the FREE_PRODUCT_LISTING program.

        :param conversions: The conversions of this Metrics.
        :type conversions: float
        """

        self._conversions = conversions

    @property
    def ctr(self):
        """Gets the ctr of this Metrics.

        Click-through rate - the number of clicks merchant's products receive (clicks) divided by the number of times the products are shown (impressions).

        :return: The ctr of this Metrics.
        :rtype: float
        """
        return self._ctr

    @ctr.setter
    def ctr(self, ctr):
        """Sets the ctr of this Metrics.

        Click-through rate - the number of clicks merchant's products receive (clicks) divided by the number of times the products are shown (impressions).

        :param ctr: The ctr of this Metrics.
        :type ctr: float
        """

        self._ctr = ctr

    @property
    def days_to_ship(self):
        """Gets the days_to_ship of this Metrics.

        Average number of days between an order being placed and the order being fully shipped, reported on the last shipment date. **This metric cannot be segmented by product dimensions and customer_country_code.**

        :return: The days_to_ship of this Metrics.
        :rtype: float
        """
        return self._days_to_ship

    @days_to_ship.setter
    def days_to_ship(self, days_to_ship):
        """Sets the days_to_ship of this Metrics.

        Average number of days between an order being placed and the order being fully shipped, reported on the last shipment date. **This metric cannot be segmented by product dimensions and customer_country_code.**

        :param days_to_ship: The days_to_ship of this Metrics.
        :type days_to_ship: float
        """

        self._days_to_ship = days_to_ship

    @property
    def impressions(self):
        """Gets the impressions of this Metrics.

        Number of times merchant's products are shown.

        :return: The impressions of this Metrics.
        :rtype: str
        """
        return self._impressions

    @impressions.setter
    def impressions(self, impressions):
        """Sets the impressions of this Metrics.

        Number of times merchant's products are shown.

        :param impressions: The impressions of this Metrics.
        :type impressions: str
        """

        self._impressions = impressions

    @property
    def item_days_to_ship(self):
        """Gets the item_days_to_ship of this Metrics.

        Average number of days between an item being ordered and the item being **This metric cannot be segmented by customer_country_code.**

        :return: The item_days_to_ship of this Metrics.
        :rtype: float
        """
        return self._item_days_to_ship

    @item_days_to_ship.setter
    def item_days_to_ship(self, item_days_to_ship):
        """Sets the item_days_to_ship of this Metrics.

        Average number of days between an item being ordered and the item being **This metric cannot be segmented by customer_country_code.**

        :param item_days_to_ship: The item_days_to_ship of this Metrics.
        :type item_days_to_ship: float
        """

        self._item_days_to_ship = item_days_to_ship

    @property
    def item_fill_rate(self):
        """Gets the item_fill_rate of this Metrics.

        Percentage of shipped items in relation to all finalized items (shipped or rejected by the merchant; unshipped items are not taken into account), reported on the order date. Item fill rate is lowered by merchant rejections. **This metric cannot be segmented by customer_country_code.**

        :return: The item_fill_rate of this Metrics.
        :rtype: float
        """
        return self._item_fill_rate

    @item_fill_rate.setter
    def item_fill_rate(self, item_fill_rate):
        """Sets the item_fill_rate of this Metrics.

        Percentage of shipped items in relation to all finalized items (shipped or rejected by the merchant; unshipped items are not taken into account), reported on the order date. Item fill rate is lowered by merchant rejections. **This metric cannot be segmented by customer_country_code.**

        :param item_fill_rate: The item_fill_rate of this Metrics.
        :type item_fill_rate: float
        """

        self._item_fill_rate = item_fill_rate

    @property
    def ordered_item_sales_micros(self):
        """Gets the ordered_item_sales_micros of this Metrics.

        Total price of ordered items in micros (1 millionth of a standard unit, 1 USD = 1000000 micros). Excludes shipping, taxes (US only), and customer cancellations that happened within 30 minutes of placing the order. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**

        :return: The ordered_item_sales_micros of this Metrics.
        :rtype: str
        """
        return self._ordered_item_sales_micros

    @ordered_item_sales_micros.setter
    def ordered_item_sales_micros(self, ordered_item_sales_micros):
        """Sets the ordered_item_sales_micros of this Metrics.

        Total price of ordered items in micros (1 millionth of a standard unit, 1 USD = 1000000 micros). Excludes shipping, taxes (US only), and customer cancellations that happened within 30 minutes of placing the order. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**

        :param ordered_item_sales_micros: The ordered_item_sales_micros of this Metrics.
        :type ordered_item_sales_micros: str
        """

        self._ordered_item_sales_micros = ordered_item_sales_micros

    @property
    def ordered_items(self):
        """Gets the ordered_items of this Metrics.

        Number of ordered items. Excludes customer cancellations that happened within 30 minutes of placing the order. **This metric cannot be segmented by customer_country_code.**

        :return: The ordered_items of this Metrics.
        :rtype: str
        """
        return self._ordered_items

    @ordered_items.setter
    def ordered_items(self, ordered_items):
        """Sets the ordered_items of this Metrics.

        Number of ordered items. Excludes customer cancellations that happened within 30 minutes of placing the order. **This metric cannot be segmented by customer_country_code.**

        :param ordered_items: The ordered_items of this Metrics.
        :type ordered_items: str
        """

        self._ordered_items = ordered_items

    @property
    def orders(self):
        """Gets the orders of this Metrics.

        Number of placed orders. Excludes customer cancellations that happened within 30 minutes of placing the order. **This metric cannot be segmented by product dimensions and customer_country_code.**

        :return: The orders of this Metrics.
        :rtype: str
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this Metrics.

        Number of placed orders. Excludes customer cancellations that happened within 30 minutes of placing the order. **This metric cannot be segmented by product dimensions and customer_country_code.**

        :param orders: The orders of this Metrics.
        :type orders: str
        """

        self._orders = orders

    @property
    def rejected_items(self):
        """Gets the rejected_items of this Metrics.

        Number of ordered items canceled by the merchant, reported on the order date. **This metric cannot be segmented by customer_country_code.**

        :return: The rejected_items of this Metrics.
        :rtype: str
        """
        return self._rejected_items

    @rejected_items.setter
    def rejected_items(self, rejected_items):
        """Sets the rejected_items of this Metrics.

        Number of ordered items canceled by the merchant, reported on the order date. **This metric cannot be segmented by customer_country_code.**

        :param rejected_items: The rejected_items of this Metrics.
        :type rejected_items: str
        """

        self._rejected_items = rejected_items

    @property
    def return_rate(self):
        """Gets the return_rate of this Metrics.

        Total price of returned items divided by the total price of shipped items, reported on the order date. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**

        :return: The return_rate of this Metrics.
        :rtype: float
        """
        return self._return_rate

    @return_rate.setter
    def return_rate(self, return_rate):
        """Sets the return_rate of this Metrics.

        Total price of returned items divided by the total price of shipped items, reported on the order date. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**

        :param return_rate: The return_rate of this Metrics.
        :type return_rate: float
        """

        self._return_rate = return_rate

    @property
    def returned_items(self):
        """Gets the returned_items of this Metrics.

        Number of ordered items sent back for return, reported on the date when the merchant accepted the return. **This metric cannot be segmented by customer_country_code.**

        :return: The returned_items of this Metrics.
        :rtype: str
        """
        return self._returned_items

    @returned_items.setter
    def returned_items(self, returned_items):
        """Sets the returned_items of this Metrics.

        Number of ordered items sent back for return, reported on the date when the merchant accepted the return. **This metric cannot be segmented by customer_country_code.**

        :param returned_items: The returned_items of this Metrics.
        :type returned_items: str
        """

        self._returned_items = returned_items

    @property
    def returns_micros(self):
        """Gets the returns_micros of this Metrics.

        Total price of ordered items sent back for return in micros (1 millionth of a standard unit, 1 USD = 1000000 micros), reported on the date when the merchant accepted the return. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**

        :return: The returns_micros of this Metrics.
        :rtype: str
        """
        return self._returns_micros

    @returns_micros.setter
    def returns_micros(self, returns_micros):
        """Sets the returns_micros of this Metrics.

        Total price of ordered items sent back for return in micros (1 millionth of a standard unit, 1 USD = 1000000 micros), reported on the date when the merchant accepted the return. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**

        :param returns_micros: The returns_micros of this Metrics.
        :type returns_micros: str
        """

        self._returns_micros = returns_micros

    @property
    def shipped_item_sales_micros(self):
        """Gets the shipped_item_sales_micros of this Metrics.

        Total price of shipped items in micros (1 millionth of a standard unit, 1 USD = 1000000 micros), reported on the order date. Excludes shipping and taxes (US only). The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**

        :return: The shipped_item_sales_micros of this Metrics.
        :rtype: str
        """
        return self._shipped_item_sales_micros

    @shipped_item_sales_micros.setter
    def shipped_item_sales_micros(self, shipped_item_sales_micros):
        """Sets the shipped_item_sales_micros of this Metrics.

        Total price of shipped items in micros (1 millionth of a standard unit, 1 USD = 1000000 micros), reported on the order date. Excludes shipping and taxes (US only). The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**

        :param shipped_item_sales_micros: The shipped_item_sales_micros of this Metrics.
        :type shipped_item_sales_micros: str
        """

        self._shipped_item_sales_micros = shipped_item_sales_micros

    @property
    def shipped_items(self):
        """Gets the shipped_items of this Metrics.

        Number of shipped items, reported on the shipment date. **This metric cannot be segmented by customer_country_code.**

        :return: The shipped_items of this Metrics.
        :rtype: str
        """
        return self._shipped_items

    @shipped_items.setter
    def shipped_items(self, shipped_items):
        """Sets the shipped_items of this Metrics.

        Number of shipped items, reported on the shipment date. **This metric cannot be segmented by customer_country_code.**

        :param shipped_items: The shipped_items of this Metrics.
        :type shipped_items: str
        """

        self._shipped_items = shipped_items

    @property
    def shipped_orders(self):
        """Gets the shipped_orders of this Metrics.

        Number of fully shipped orders, reported on the last shipment date. **This metric cannot be segmented by product dimensions and customer_country_code.**

        :return: The shipped_orders of this Metrics.
        :rtype: str
        """
        return self._shipped_orders

    @shipped_orders.setter
    def shipped_orders(self, shipped_orders):
        """Sets the shipped_orders of this Metrics.

        Number of fully shipped orders, reported on the last shipment date. **This metric cannot be segmented by product dimensions and customer_country_code.**

        :param shipped_orders: The shipped_orders of this Metrics.
        :type shipped_orders: str
        """

        self._shipped_orders = shipped_orders

    @property
    def unshipped_items(self):
        """Gets the unshipped_items of this Metrics.

        Number of ordered items not shipped up until the end of the queried day. If a multi-day period is specified in the search query, the returned value is the average number of unshipped items over the days in the queried period. **This metric cannot be segmented by customer_country_code.**

        :return: The unshipped_items of this Metrics.
        :rtype: float
        """
        return self._unshipped_items

    @unshipped_items.setter
    def unshipped_items(self, unshipped_items):
        """Sets the unshipped_items of this Metrics.

        Number of ordered items not shipped up until the end of the queried day. If a multi-day period is specified in the search query, the returned value is the average number of unshipped items over the days in the queried period. **This metric cannot be segmented by customer_country_code.**

        :param unshipped_items: The unshipped_items of this Metrics.
        :type unshipped_items: float
        """

        self._unshipped_items = unshipped_items

    @property
    def unshipped_orders(self):
        """Gets the unshipped_orders of this Metrics.

        Number of orders not shipped or partially shipped up until the end of the queried day. If a multi-day period is specified in the search query, the returned value is the average number of unshipped orders over the days in the queried period. **This metric cannot be segmented by product dimensions and customer_country_code.**

        :return: The unshipped_orders of this Metrics.
        :rtype: float
        """
        return self._unshipped_orders

    @unshipped_orders.setter
    def unshipped_orders(self, unshipped_orders):
        """Sets the unshipped_orders of this Metrics.

        Number of orders not shipped or partially shipped up until the end of the queried day. If a multi-day period is specified in the search query, the returned value is the average number of unshipped orders over the days in the queried period. **This metric cannot be segmented by product dimensions and customer_country_code.**

        :param unshipped_orders: The unshipped_orders of this Metrics.
        :type unshipped_orders: float
        """

        self._unshipped_orders = unshipped_orders
