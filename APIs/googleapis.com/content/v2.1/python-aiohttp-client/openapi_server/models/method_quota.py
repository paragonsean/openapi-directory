# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MethodQuota(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method: str=None, quota_limit: str=None, quota_usage: str=None):
        """MethodQuota - a model defined in OpenAPI

        :param method: The method of this MethodQuota.
        :param quota_limit: The quota_limit of this MethodQuota.
        :param quota_usage: The quota_usage of this MethodQuota.
        """
        self.openapi_types = {
            'method': str,
            'quota_limit': str,
            'quota_usage': str
        }

        self.attribute_map = {
            'method': 'method',
            'quota_limit': 'quotaLimit',
            'quota_usage': 'quotaUsage'
        }

        self._method = method
        self._quota_limit = quota_limit
        self._quota_usage = quota_usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MethodQuota':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MethodQuota of this MethodQuota.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this MethodQuota.

        The method name, for example `products.list`. Method name does not contain version because quota can be shared between different API versions of the same method.

        :return: The method of this MethodQuota.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this MethodQuota.

        The method name, for example `products.list`. Method name does not contain version because quota can be shared between different API versions of the same method.

        :param method: The method of this MethodQuota.
        :type method: str
        """

        self._method = method

    @property
    def quota_limit(self):
        """Gets the quota_limit of this MethodQuota.

        The current quota limit per day, meaning the maximum number of calls for the method.

        :return: The quota_limit of this MethodQuota.
        :rtype: str
        """
        return self._quota_limit

    @quota_limit.setter
    def quota_limit(self, quota_limit):
        """Sets the quota_limit of this MethodQuota.

        The current quota limit per day, meaning the maximum number of calls for the method.

        :param quota_limit: The quota_limit of this MethodQuota.
        :type quota_limit: str
        """

        self._quota_limit = quota_limit

    @property
    def quota_usage(self):
        """Gets the quota_usage of this MethodQuota.

        The current quota usage, meaning the number of calls already made to the method.

        :return: The quota_usage of this MethodQuota.
        :rtype: str
        """
        return self._quota_usage

    @quota_usage.setter
    def quota_usage(self, quota_usage):
        """Sets the quota_usage of this MethodQuota.

        The current quota usage, meaning the number of calls already made to the method.

        :param quota_usage: The quota_usage of this MethodQuota.
        :type quota_usage: str
        """

        self._quota_usage = quota_usage
