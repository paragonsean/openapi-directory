# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RecommendationDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, text: str=None, type: str=None):
        """RecommendationDescription - a model defined in OpenAPI

        :param text: The text of this RecommendationDescription.
        :param type: The type of this RecommendationDescription.
        """
        self.openapi_types = {
            'text': str,
            'type': str
        }

        self.attribute_map = {
            'text': 'text',
            'type': 'type'
        }

        self._text = text
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendationDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendationDescription of this RecommendationDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self):
        """Gets the text of this RecommendationDescription.

        Output only. Text of the description.

        :return: The text of this RecommendationDescription.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this RecommendationDescription.

        Output only. Text of the description.

        :param text: The text of this RecommendationDescription.
        :type text: str
        """

        self._text = text

    @property
    def type(self):
        """Gets the type of this RecommendationDescription.

        Output only. Type of the description.

        :return: The type of this RecommendationDescription.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RecommendationDescription.

        Output only. Type of the description.

        :param type: The type of this RecommendationDescription.
        :type type: str
        """
        allowed_values = ["DESCRIPTION_TYPE_UNSPECIFIED", "SHORT", "LONG"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
