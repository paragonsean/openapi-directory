# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloud_export_additional_properties import CloudExportAdditionalProperties
from openapi_server.models.custom_attribute import CustomAttribute
from openapi_server.models.installment import Installment
from openapi_server.models.loyalty_points import LoyaltyPoints
from openapi_server.models.price import Price
from openapi_server.models.product_certification import ProductCertification
from openapi_server.models.product_dimension import ProductDimension
from openapi_server.models.product_product_detail import ProductProductDetail
from openapi_server.models.product_shipping import ProductShipping
from openapi_server.models.product_shipping_dimension import ProductShippingDimension
from openapi_server.models.product_shipping_weight import ProductShippingWeight
from openapi_server.models.product_subscription_cost import ProductSubscriptionCost
from openapi_server.models.product_tax import ProductTax
from openapi_server.models.product_unit_pricing_base_measure import ProductUnitPricingBaseMeasure
from openapi_server.models.product_unit_pricing_measure import ProductUnitPricingMeasure
from openapi_server.models.product_weight import ProductWeight
from openapi_server import util


class Product(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_image_links: List[str]=None, additional_size_type: str=None, ads_grouping: str=None, ads_labels: List[str]=None, ads_redirect: str=None, adult: bool=None, age_group: str=None, availability: str=None, availability_date: str=None, brand: str=None, canonical_link: str=None, certifications: List[ProductCertification]=None, channel: str=None, cloud_export_additional_properties: List[CloudExportAdditionalProperties]=None, color: str=None, condition: str=None, content_language: str=None, cost_of_goods_sold: Price=None, custom_attributes: List[CustomAttribute]=None, custom_label0: str=None, custom_label1: str=None, custom_label2: str=None, custom_label3: str=None, custom_label4: str=None, description: str=None, disclosure_date: str=None, display_ads_id: str=None, display_ads_link: str=None, display_ads_similar_ids: List[str]=None, display_ads_title: str=None, display_ads_value: float=None, energy_efficiency_class: str=None, excluded_destinations: List[str]=None, expiration_date: str=None, external_seller_id: str=None, feed_label: str=None, gender: str=None, google_product_category: str=None, gtin: str=None, id: str=None, identifier_exists: bool=None, image_link: str=None, included_destinations: List[str]=None, installment: Installment=None, is_bundle: bool=None, item_group_id: str=None, kind: str=None, lifestyle_image_links: List[str]=None, link: str=None, link_template: str=None, loyalty_points: LoyaltyPoints=None, material: str=None, max_energy_efficiency_class: str=None, max_handling_time: str=None, min_energy_efficiency_class: str=None, min_handling_time: str=None, mobile_link: str=None, mobile_link_template: str=None, mpn: str=None, multipack: str=None, offer_id: str=None, pattern: str=None, pause: str=None, pickup_method: str=None, pickup_sla: str=None, price: Price=None, product_details: List[ProductProductDetail]=None, product_height: ProductDimension=None, product_highlights: List[str]=None, product_length: ProductDimension=None, product_types: List[str]=None, product_weight: ProductWeight=None, product_width: ProductDimension=None, promotion_ids: List[str]=None, sale_price: Price=None, sale_price_effective_date: str=None, sell_on_google_quantity: str=None, shipping: List[ProductShipping]=None, shipping_height: ProductShippingDimension=None, shipping_label: str=None, shipping_length: ProductShippingDimension=None, shipping_weight: ProductShippingWeight=None, shipping_width: ProductShippingDimension=None, shopping_ads_excluded_countries: List[str]=None, size_system: str=None, size_type: str=None, sizes: List[str]=None, source: str=None, subscription_cost: ProductSubscriptionCost=None, target_country: str=None, tax_category: str=None, taxes: List[ProductTax]=None, title: str=None, transit_time_label: str=None, unit_pricing_base_measure: ProductUnitPricingBaseMeasure=None, unit_pricing_measure: ProductUnitPricingMeasure=None, virtual_model_link: str=None):
        """Product - a model defined in OpenAPI

        :param additional_image_links: The additional_image_links of this Product.
        :param additional_size_type: The additional_size_type of this Product.
        :param ads_grouping: The ads_grouping of this Product.
        :param ads_labels: The ads_labels of this Product.
        :param ads_redirect: The ads_redirect of this Product.
        :param adult: The adult of this Product.
        :param age_group: The age_group of this Product.
        :param availability: The availability of this Product.
        :param availability_date: The availability_date of this Product.
        :param brand: The brand of this Product.
        :param canonical_link: The canonical_link of this Product.
        :param certifications: The certifications of this Product.
        :param channel: The channel of this Product.
        :param cloud_export_additional_properties: The cloud_export_additional_properties of this Product.
        :param color: The color of this Product.
        :param condition: The condition of this Product.
        :param content_language: The content_language of this Product.
        :param cost_of_goods_sold: The cost_of_goods_sold of this Product.
        :param custom_attributes: The custom_attributes of this Product.
        :param custom_label0: The custom_label0 of this Product.
        :param custom_label1: The custom_label1 of this Product.
        :param custom_label2: The custom_label2 of this Product.
        :param custom_label3: The custom_label3 of this Product.
        :param custom_label4: The custom_label4 of this Product.
        :param description: The description of this Product.
        :param disclosure_date: The disclosure_date of this Product.
        :param display_ads_id: The display_ads_id of this Product.
        :param display_ads_link: The display_ads_link of this Product.
        :param display_ads_similar_ids: The display_ads_similar_ids of this Product.
        :param display_ads_title: The display_ads_title of this Product.
        :param display_ads_value: The display_ads_value of this Product.
        :param energy_efficiency_class: The energy_efficiency_class of this Product.
        :param excluded_destinations: The excluded_destinations of this Product.
        :param expiration_date: The expiration_date of this Product.
        :param external_seller_id: The external_seller_id of this Product.
        :param feed_label: The feed_label of this Product.
        :param gender: The gender of this Product.
        :param google_product_category: The google_product_category of this Product.
        :param gtin: The gtin of this Product.
        :param id: The id of this Product.
        :param identifier_exists: The identifier_exists of this Product.
        :param image_link: The image_link of this Product.
        :param included_destinations: The included_destinations of this Product.
        :param installment: The installment of this Product.
        :param is_bundle: The is_bundle of this Product.
        :param item_group_id: The item_group_id of this Product.
        :param kind: The kind of this Product.
        :param lifestyle_image_links: The lifestyle_image_links of this Product.
        :param link: The link of this Product.
        :param link_template: The link_template of this Product.
        :param loyalty_points: The loyalty_points of this Product.
        :param material: The material of this Product.
        :param max_energy_efficiency_class: The max_energy_efficiency_class of this Product.
        :param max_handling_time: The max_handling_time of this Product.
        :param min_energy_efficiency_class: The min_energy_efficiency_class of this Product.
        :param min_handling_time: The min_handling_time of this Product.
        :param mobile_link: The mobile_link of this Product.
        :param mobile_link_template: The mobile_link_template of this Product.
        :param mpn: The mpn of this Product.
        :param multipack: The multipack of this Product.
        :param offer_id: The offer_id of this Product.
        :param pattern: The pattern of this Product.
        :param pause: The pause of this Product.
        :param pickup_method: The pickup_method of this Product.
        :param pickup_sla: The pickup_sla of this Product.
        :param price: The price of this Product.
        :param product_details: The product_details of this Product.
        :param product_height: The product_height of this Product.
        :param product_highlights: The product_highlights of this Product.
        :param product_length: The product_length of this Product.
        :param product_types: The product_types of this Product.
        :param product_weight: The product_weight of this Product.
        :param product_width: The product_width of this Product.
        :param promotion_ids: The promotion_ids of this Product.
        :param sale_price: The sale_price of this Product.
        :param sale_price_effective_date: The sale_price_effective_date of this Product.
        :param sell_on_google_quantity: The sell_on_google_quantity of this Product.
        :param shipping: The shipping of this Product.
        :param shipping_height: The shipping_height of this Product.
        :param shipping_label: The shipping_label of this Product.
        :param shipping_length: The shipping_length of this Product.
        :param shipping_weight: The shipping_weight of this Product.
        :param shipping_width: The shipping_width of this Product.
        :param shopping_ads_excluded_countries: The shopping_ads_excluded_countries of this Product.
        :param size_system: The size_system of this Product.
        :param size_type: The size_type of this Product.
        :param sizes: The sizes of this Product.
        :param source: The source of this Product.
        :param subscription_cost: The subscription_cost of this Product.
        :param target_country: The target_country of this Product.
        :param tax_category: The tax_category of this Product.
        :param taxes: The taxes of this Product.
        :param title: The title of this Product.
        :param transit_time_label: The transit_time_label of this Product.
        :param unit_pricing_base_measure: The unit_pricing_base_measure of this Product.
        :param unit_pricing_measure: The unit_pricing_measure of this Product.
        :param virtual_model_link: The virtual_model_link of this Product.
        """
        self.openapi_types = {
            'additional_image_links': List[str],
            'additional_size_type': str,
            'ads_grouping': str,
            'ads_labels': List[str],
            'ads_redirect': str,
            'adult': bool,
            'age_group': str,
            'availability': str,
            'availability_date': str,
            'brand': str,
            'canonical_link': str,
            'certifications': List[ProductCertification],
            'channel': str,
            'cloud_export_additional_properties': List[CloudExportAdditionalProperties],
            'color': str,
            'condition': str,
            'content_language': str,
            'cost_of_goods_sold': Price,
            'custom_attributes': List[CustomAttribute],
            'custom_label0': str,
            'custom_label1': str,
            'custom_label2': str,
            'custom_label3': str,
            'custom_label4': str,
            'description': str,
            'disclosure_date': str,
            'display_ads_id': str,
            'display_ads_link': str,
            'display_ads_similar_ids': List[str],
            'display_ads_title': str,
            'display_ads_value': float,
            'energy_efficiency_class': str,
            'excluded_destinations': List[str],
            'expiration_date': str,
            'external_seller_id': str,
            'feed_label': str,
            'gender': str,
            'google_product_category': str,
            'gtin': str,
            'id': str,
            'identifier_exists': bool,
            'image_link': str,
            'included_destinations': List[str],
            'installment': Installment,
            'is_bundle': bool,
            'item_group_id': str,
            'kind': str,
            'lifestyle_image_links': List[str],
            'link': str,
            'link_template': str,
            'loyalty_points': LoyaltyPoints,
            'material': str,
            'max_energy_efficiency_class': str,
            'max_handling_time': str,
            'min_energy_efficiency_class': str,
            'min_handling_time': str,
            'mobile_link': str,
            'mobile_link_template': str,
            'mpn': str,
            'multipack': str,
            'offer_id': str,
            'pattern': str,
            'pause': str,
            'pickup_method': str,
            'pickup_sla': str,
            'price': Price,
            'product_details': List[ProductProductDetail],
            'product_height': ProductDimension,
            'product_highlights': List[str],
            'product_length': ProductDimension,
            'product_types': List[str],
            'product_weight': ProductWeight,
            'product_width': ProductDimension,
            'promotion_ids': List[str],
            'sale_price': Price,
            'sale_price_effective_date': str,
            'sell_on_google_quantity': str,
            'shipping': List[ProductShipping],
            'shipping_height': ProductShippingDimension,
            'shipping_label': str,
            'shipping_length': ProductShippingDimension,
            'shipping_weight': ProductShippingWeight,
            'shipping_width': ProductShippingDimension,
            'shopping_ads_excluded_countries': List[str],
            'size_system': str,
            'size_type': str,
            'sizes': List[str],
            'source': str,
            'subscription_cost': ProductSubscriptionCost,
            'target_country': str,
            'tax_category': str,
            'taxes': List[ProductTax],
            'title': str,
            'transit_time_label': str,
            'unit_pricing_base_measure': ProductUnitPricingBaseMeasure,
            'unit_pricing_measure': ProductUnitPricingMeasure,
            'virtual_model_link': str
        }

        self.attribute_map = {
            'additional_image_links': 'additionalImageLinks',
            'additional_size_type': 'additionalSizeType',
            'ads_grouping': 'adsGrouping',
            'ads_labels': 'adsLabels',
            'ads_redirect': 'adsRedirect',
            'adult': 'adult',
            'age_group': 'ageGroup',
            'availability': 'availability',
            'availability_date': 'availabilityDate',
            'brand': 'brand',
            'canonical_link': 'canonicalLink',
            'certifications': 'certifications',
            'channel': 'channel',
            'cloud_export_additional_properties': 'cloudExportAdditionalProperties',
            'color': 'color',
            'condition': 'condition',
            'content_language': 'contentLanguage',
            'cost_of_goods_sold': 'costOfGoodsSold',
            'custom_attributes': 'customAttributes',
            'custom_label0': 'customLabel0',
            'custom_label1': 'customLabel1',
            'custom_label2': 'customLabel2',
            'custom_label3': 'customLabel3',
            'custom_label4': 'customLabel4',
            'description': 'description',
            'disclosure_date': 'disclosureDate',
            'display_ads_id': 'displayAdsId',
            'display_ads_link': 'displayAdsLink',
            'display_ads_similar_ids': 'displayAdsSimilarIds',
            'display_ads_title': 'displayAdsTitle',
            'display_ads_value': 'displayAdsValue',
            'energy_efficiency_class': 'energyEfficiencyClass',
            'excluded_destinations': 'excludedDestinations',
            'expiration_date': 'expirationDate',
            'external_seller_id': 'externalSellerId',
            'feed_label': 'feedLabel',
            'gender': 'gender',
            'google_product_category': 'googleProductCategory',
            'gtin': 'gtin',
            'id': 'id',
            'identifier_exists': 'identifierExists',
            'image_link': 'imageLink',
            'included_destinations': 'includedDestinations',
            'installment': 'installment',
            'is_bundle': 'isBundle',
            'item_group_id': 'itemGroupId',
            'kind': 'kind',
            'lifestyle_image_links': 'lifestyleImageLinks',
            'link': 'link',
            'link_template': 'linkTemplate',
            'loyalty_points': 'loyaltyPoints',
            'material': 'material',
            'max_energy_efficiency_class': 'maxEnergyEfficiencyClass',
            'max_handling_time': 'maxHandlingTime',
            'min_energy_efficiency_class': 'minEnergyEfficiencyClass',
            'min_handling_time': 'minHandlingTime',
            'mobile_link': 'mobileLink',
            'mobile_link_template': 'mobileLinkTemplate',
            'mpn': 'mpn',
            'multipack': 'multipack',
            'offer_id': 'offerId',
            'pattern': 'pattern',
            'pause': 'pause',
            'pickup_method': 'pickupMethod',
            'pickup_sla': 'pickupSla',
            'price': 'price',
            'product_details': 'productDetails',
            'product_height': 'productHeight',
            'product_highlights': 'productHighlights',
            'product_length': 'productLength',
            'product_types': 'productTypes',
            'product_weight': 'productWeight',
            'product_width': 'productWidth',
            'promotion_ids': 'promotionIds',
            'sale_price': 'salePrice',
            'sale_price_effective_date': 'salePriceEffectiveDate',
            'sell_on_google_quantity': 'sellOnGoogleQuantity',
            'shipping': 'shipping',
            'shipping_height': 'shippingHeight',
            'shipping_label': 'shippingLabel',
            'shipping_length': 'shippingLength',
            'shipping_weight': 'shippingWeight',
            'shipping_width': 'shippingWidth',
            'shopping_ads_excluded_countries': 'shoppingAdsExcludedCountries',
            'size_system': 'sizeSystem',
            'size_type': 'sizeType',
            'sizes': 'sizes',
            'source': 'source',
            'subscription_cost': 'subscriptionCost',
            'target_country': 'targetCountry',
            'tax_category': 'taxCategory',
            'taxes': 'taxes',
            'title': 'title',
            'transit_time_label': 'transitTimeLabel',
            'unit_pricing_base_measure': 'unitPricingBaseMeasure',
            'unit_pricing_measure': 'unitPricingMeasure',
            'virtual_model_link': 'virtualModelLink'
        }

        self._additional_image_links = additional_image_links
        self._additional_size_type = additional_size_type
        self._ads_grouping = ads_grouping
        self._ads_labels = ads_labels
        self._ads_redirect = ads_redirect
        self._adult = adult
        self._age_group = age_group
        self._availability = availability
        self._availability_date = availability_date
        self._brand = brand
        self._canonical_link = canonical_link
        self._certifications = certifications
        self._channel = channel
        self._cloud_export_additional_properties = cloud_export_additional_properties
        self._color = color
        self._condition = condition
        self._content_language = content_language
        self._cost_of_goods_sold = cost_of_goods_sold
        self._custom_attributes = custom_attributes
        self._custom_label0 = custom_label0
        self._custom_label1 = custom_label1
        self._custom_label2 = custom_label2
        self._custom_label3 = custom_label3
        self._custom_label4 = custom_label4
        self._description = description
        self._disclosure_date = disclosure_date
        self._display_ads_id = display_ads_id
        self._display_ads_link = display_ads_link
        self._display_ads_similar_ids = display_ads_similar_ids
        self._display_ads_title = display_ads_title
        self._display_ads_value = display_ads_value
        self._energy_efficiency_class = energy_efficiency_class
        self._excluded_destinations = excluded_destinations
        self._expiration_date = expiration_date
        self._external_seller_id = external_seller_id
        self._feed_label = feed_label
        self._gender = gender
        self._google_product_category = google_product_category
        self._gtin = gtin
        self._id = id
        self._identifier_exists = identifier_exists
        self._image_link = image_link
        self._included_destinations = included_destinations
        self._installment = installment
        self._is_bundle = is_bundle
        self._item_group_id = item_group_id
        self._kind = kind
        self._lifestyle_image_links = lifestyle_image_links
        self._link = link
        self._link_template = link_template
        self._loyalty_points = loyalty_points
        self._material = material
        self._max_energy_efficiency_class = max_energy_efficiency_class
        self._max_handling_time = max_handling_time
        self._min_energy_efficiency_class = min_energy_efficiency_class
        self._min_handling_time = min_handling_time
        self._mobile_link = mobile_link
        self._mobile_link_template = mobile_link_template
        self._mpn = mpn
        self._multipack = multipack
        self._offer_id = offer_id
        self._pattern = pattern
        self._pause = pause
        self._pickup_method = pickup_method
        self._pickup_sla = pickup_sla
        self._price = price
        self._product_details = product_details
        self._product_height = product_height
        self._product_highlights = product_highlights
        self._product_length = product_length
        self._product_types = product_types
        self._product_weight = product_weight
        self._product_width = product_width
        self._promotion_ids = promotion_ids
        self._sale_price = sale_price
        self._sale_price_effective_date = sale_price_effective_date
        self._sell_on_google_quantity = sell_on_google_quantity
        self._shipping = shipping
        self._shipping_height = shipping_height
        self._shipping_label = shipping_label
        self._shipping_length = shipping_length
        self._shipping_weight = shipping_weight
        self._shipping_width = shipping_width
        self._shopping_ads_excluded_countries = shopping_ads_excluded_countries
        self._size_system = size_system
        self._size_type = size_type
        self._sizes = sizes
        self._source = source
        self._subscription_cost = subscription_cost
        self._target_country = target_country
        self._tax_category = tax_category
        self._taxes = taxes
        self._title = title
        self._transit_time_label = transit_time_label
        self._unit_pricing_base_measure = unit_pricing_base_measure
        self._unit_pricing_measure = unit_pricing_measure
        self._virtual_model_link = virtual_model_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Product of this Product.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_image_links(self):
        """Gets the additional_image_links of this Product.

        Additional URLs of images of the item.

        :return: The additional_image_links of this Product.
        :rtype: List[str]
        """
        return self._additional_image_links

    @additional_image_links.setter
    def additional_image_links(self, additional_image_links):
        """Sets the additional_image_links of this Product.

        Additional URLs of images of the item.

        :param additional_image_links: The additional_image_links of this Product.
        :type additional_image_links: List[str]
        """

        self._additional_image_links = additional_image_links

    @property
    def additional_size_type(self):
        """Gets the additional_size_type of this Product.

        Additional cut of the item. Used together with size_type to represent combined size types for apparel items.

        :return: The additional_size_type of this Product.
        :rtype: str
        """
        return self._additional_size_type

    @additional_size_type.setter
    def additional_size_type(self, additional_size_type):
        """Sets the additional_size_type of this Product.

        Additional cut of the item. Used together with size_type to represent combined size types for apparel items.

        :param additional_size_type: The additional_size_type of this Product.
        :type additional_size_type: str
        """

        self._additional_size_type = additional_size_type

    @property
    def ads_grouping(self):
        """Gets the ads_grouping of this Product.

        Used to group items in an arbitrary way. Only for CPA%, discouraged otherwise.

        :return: The ads_grouping of this Product.
        :rtype: str
        """
        return self._ads_grouping

    @ads_grouping.setter
    def ads_grouping(self, ads_grouping):
        """Sets the ads_grouping of this Product.

        Used to group items in an arbitrary way. Only for CPA%, discouraged otherwise.

        :param ads_grouping: The ads_grouping of this Product.
        :type ads_grouping: str
        """

        self._ads_grouping = ads_grouping

    @property
    def ads_labels(self):
        """Gets the ads_labels of this Product.

        Similar to ads_grouping, but only works on CPC.

        :return: The ads_labels of this Product.
        :rtype: List[str]
        """
        return self._ads_labels

    @ads_labels.setter
    def ads_labels(self, ads_labels):
        """Sets the ads_labels of this Product.

        Similar to ads_grouping, but only works on CPC.

        :param ads_labels: The ads_labels of this Product.
        :type ads_labels: List[str]
        """

        self._ads_labels = ads_labels

    @property
    def ads_redirect(self):
        """Gets the ads_redirect of this Product.

        Allows advertisers to override the item URL when the product is shown within the context of Product Ads.

        :return: The ads_redirect of this Product.
        :rtype: str
        """
        return self._ads_redirect

    @ads_redirect.setter
    def ads_redirect(self, ads_redirect):
        """Sets the ads_redirect of this Product.

        Allows advertisers to override the item URL when the product is shown within the context of Product Ads.

        :param ads_redirect: The ads_redirect of this Product.
        :type ads_redirect: str
        """

        self._ads_redirect = ads_redirect

    @property
    def adult(self):
        """Gets the adult of this Product.

        Should be set to true if the item is targeted towards adults.

        :return: The adult of this Product.
        :rtype: bool
        """
        return self._adult

    @adult.setter
    def adult(self, adult):
        """Sets the adult of this Product.

        Should be set to true if the item is targeted towards adults.

        :param adult: The adult of this Product.
        :type adult: bool
        """

        self._adult = adult

    @property
    def age_group(self):
        """Gets the age_group of this Product.

        Target age group of the item.

        :return: The age_group of this Product.
        :rtype: str
        """
        return self._age_group

    @age_group.setter
    def age_group(self, age_group):
        """Sets the age_group of this Product.

        Target age group of the item.

        :param age_group: The age_group of this Product.
        :type age_group: str
        """

        self._age_group = age_group

    @property
    def availability(self):
        """Gets the availability of this Product.

        Availability status of the item.

        :return: The availability of this Product.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this Product.

        Availability status of the item.

        :param availability: The availability of this Product.
        :type availability: str
        """

        self._availability = availability

    @property
    def availability_date(self):
        """Gets the availability_date of this Product.

        The day a pre-ordered product becomes available for delivery, in ISO 8601 format.

        :return: The availability_date of this Product.
        :rtype: str
        """
        return self._availability_date

    @availability_date.setter
    def availability_date(self, availability_date):
        """Sets the availability_date of this Product.

        The day a pre-ordered product becomes available for delivery, in ISO 8601 format.

        :param availability_date: The availability_date of this Product.
        :type availability_date: str
        """

        self._availability_date = availability_date

    @property
    def brand(self):
        """Gets the brand of this Product.

        Brand of the item.

        :return: The brand of this Product.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Product.

        Brand of the item.

        :param brand: The brand of this Product.
        :type brand: str
        """

        self._brand = brand

    @property
    def canonical_link(self):
        """Gets the canonical_link of this Product.

        URL for the canonical version of your item's landing page.

        :return: The canonical_link of this Product.
        :rtype: str
        """
        return self._canonical_link

    @canonical_link.setter
    def canonical_link(self, canonical_link):
        """Sets the canonical_link of this Product.

        URL for the canonical version of your item's landing page.

        :param canonical_link: The canonical_link of this Product.
        :type canonical_link: str
        """

        self._canonical_link = canonical_link

    @property
    def certifications(self):
        """Gets the certifications of this Product.

        Product [certification](https://support.google.com/merchants/answer/13528839), introduced for EU energy efficiency labeling compliance using the [EU EPREL](https://eprel.ec.europa.eu/screen/home) database.

        :return: The certifications of this Product.
        :rtype: List[ProductCertification]
        """
        return self._certifications

    @certifications.setter
    def certifications(self, certifications):
        """Sets the certifications of this Product.

        Product [certification](https://support.google.com/merchants/answer/13528839), introduced for EU energy efficiency labeling compliance using the [EU EPREL](https://eprel.ec.europa.eu/screen/home) database.

        :param certifications: The certifications of this Product.
        :type certifications: List[ProductCertification]
        """

        self._certifications = certifications

    @property
    def channel(self):
        """Gets the channel of this Product.

        Required. The item's channel (online or local). Acceptable values are: - \"`local`\" - \"`online`\" 

        :return: The channel of this Product.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Product.

        Required. The item's channel (online or local). Acceptable values are: - \"`local`\" - \"`online`\" 

        :param channel: The channel of this Product.
        :type channel: str
        """

        self._channel = channel

    @property
    def cloud_export_additional_properties(self):
        """Gets the cloud_export_additional_properties of this Product.

        Extra fields to export to the Cloud Retail program.

        :return: The cloud_export_additional_properties of this Product.
        :rtype: List[CloudExportAdditionalProperties]
        """
        return self._cloud_export_additional_properties

    @cloud_export_additional_properties.setter
    def cloud_export_additional_properties(self, cloud_export_additional_properties):
        """Sets the cloud_export_additional_properties of this Product.

        Extra fields to export to the Cloud Retail program.

        :param cloud_export_additional_properties: The cloud_export_additional_properties of this Product.
        :type cloud_export_additional_properties: List[CloudExportAdditionalProperties]
        """

        self._cloud_export_additional_properties = cloud_export_additional_properties

    @property
    def color(self):
        """Gets the color of this Product.

        Color of the item.

        :return: The color of this Product.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Product.

        Color of the item.

        :param color: The color of this Product.
        :type color: str
        """

        self._color = color

    @property
    def condition(self):
        """Gets the condition of this Product.

        Condition or state of the item.

        :return: The condition of this Product.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this Product.

        Condition or state of the item.

        :param condition: The condition of this Product.
        :type condition: str
        """

        self._condition = condition

    @property
    def content_language(self):
        """Gets the content_language of this Product.

        Required. The two-letter ISO 639-1 language code for the item.

        :return: The content_language of this Product.
        :rtype: str
        """
        return self._content_language

    @content_language.setter
    def content_language(self, content_language):
        """Sets the content_language of this Product.

        Required. The two-letter ISO 639-1 language code for the item.

        :param content_language: The content_language of this Product.
        :type content_language: str
        """

        self._content_language = content_language

    @property
    def cost_of_goods_sold(self):
        """Gets the cost_of_goods_sold of this Product.


        :return: The cost_of_goods_sold of this Product.
        :rtype: Price
        """
        return self._cost_of_goods_sold

    @cost_of_goods_sold.setter
    def cost_of_goods_sold(self, cost_of_goods_sold):
        """Sets the cost_of_goods_sold of this Product.


        :param cost_of_goods_sold: The cost_of_goods_sold of this Product.
        :type cost_of_goods_sold: Price
        """

        self._cost_of_goods_sold = cost_of_goods_sold

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this Product.

        A list of custom (merchant-provided) attributes. It can also be used for submitting any attribute of the feed specification in its generic form (for example, `{ \"name\": \"size type\", \"value\": \"regular\" }`). This is useful for submitting attributes not explicitly exposed by the API, such as additional attributes used for Buy on Google (formerly known as Shopping Actions).

        :return: The custom_attributes of this Product.
        :rtype: List[CustomAttribute]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this Product.

        A list of custom (merchant-provided) attributes. It can also be used for submitting any attribute of the feed specification in its generic form (for example, `{ \"name\": \"size type\", \"value\": \"regular\" }`). This is useful for submitting attributes not explicitly exposed by the API, such as additional attributes used for Buy on Google (formerly known as Shopping Actions).

        :param custom_attributes: The custom_attributes of this Product.
        :type custom_attributes: List[CustomAttribute]
        """

        self._custom_attributes = custom_attributes

    @property
    def custom_label0(self):
        """Gets the custom_label0 of this Product.

        Custom label 0 for custom grouping of items in a Shopping campaign.

        :return: The custom_label0 of this Product.
        :rtype: str
        """
        return self._custom_label0

    @custom_label0.setter
    def custom_label0(self, custom_label0):
        """Sets the custom_label0 of this Product.

        Custom label 0 for custom grouping of items in a Shopping campaign.

        :param custom_label0: The custom_label0 of this Product.
        :type custom_label0: str
        """

        self._custom_label0 = custom_label0

    @property
    def custom_label1(self):
        """Gets the custom_label1 of this Product.

        Custom label 1 for custom grouping of items in a Shopping campaign.

        :return: The custom_label1 of this Product.
        :rtype: str
        """
        return self._custom_label1

    @custom_label1.setter
    def custom_label1(self, custom_label1):
        """Sets the custom_label1 of this Product.

        Custom label 1 for custom grouping of items in a Shopping campaign.

        :param custom_label1: The custom_label1 of this Product.
        :type custom_label1: str
        """

        self._custom_label1 = custom_label1

    @property
    def custom_label2(self):
        """Gets the custom_label2 of this Product.

        Custom label 2 for custom grouping of items in a Shopping campaign.

        :return: The custom_label2 of this Product.
        :rtype: str
        """
        return self._custom_label2

    @custom_label2.setter
    def custom_label2(self, custom_label2):
        """Sets the custom_label2 of this Product.

        Custom label 2 for custom grouping of items in a Shopping campaign.

        :param custom_label2: The custom_label2 of this Product.
        :type custom_label2: str
        """

        self._custom_label2 = custom_label2

    @property
    def custom_label3(self):
        """Gets the custom_label3 of this Product.

        Custom label 3 for custom grouping of items in a Shopping campaign.

        :return: The custom_label3 of this Product.
        :rtype: str
        """
        return self._custom_label3

    @custom_label3.setter
    def custom_label3(self, custom_label3):
        """Sets the custom_label3 of this Product.

        Custom label 3 for custom grouping of items in a Shopping campaign.

        :param custom_label3: The custom_label3 of this Product.
        :type custom_label3: str
        """

        self._custom_label3 = custom_label3

    @property
    def custom_label4(self):
        """Gets the custom_label4 of this Product.

        Custom label 4 for custom grouping of items in a Shopping campaign.

        :return: The custom_label4 of this Product.
        :rtype: str
        """
        return self._custom_label4

    @custom_label4.setter
    def custom_label4(self, custom_label4):
        """Sets the custom_label4 of this Product.

        Custom label 4 for custom grouping of items in a Shopping campaign.

        :param custom_label4: The custom_label4 of this Product.
        :type custom_label4: str
        """

        self._custom_label4 = custom_label4

    @property
    def description(self):
        """Gets the description of this Product.

        Description of the item.

        :return: The description of this Product.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Product.

        Description of the item.

        :param description: The description of this Product.
        :type description: str
        """

        self._description = description

    @property
    def disclosure_date(self):
        """Gets the disclosure_date of this Product.

        The date time when an offer becomes visible in search results across Google’s YouTube surfaces, in [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format. See [Disclosure date](https://support.google.com/merchants/answer/13034208) for more information.

        :return: The disclosure_date of this Product.
        :rtype: str
        """
        return self._disclosure_date

    @disclosure_date.setter
    def disclosure_date(self, disclosure_date):
        """Sets the disclosure_date of this Product.

        The date time when an offer becomes visible in search results across Google’s YouTube surfaces, in [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format. See [Disclosure date](https://support.google.com/merchants/answer/13034208) for more information.

        :param disclosure_date: The disclosure_date of this Product.
        :type disclosure_date: str
        """

        self._disclosure_date = disclosure_date

    @property
    def display_ads_id(self):
        """Gets the display_ads_id of this Product.

        An identifier for an item for dynamic remarketing campaigns.

        :return: The display_ads_id of this Product.
        :rtype: str
        """
        return self._display_ads_id

    @display_ads_id.setter
    def display_ads_id(self, display_ads_id):
        """Sets the display_ads_id of this Product.

        An identifier for an item for dynamic remarketing campaigns.

        :param display_ads_id: The display_ads_id of this Product.
        :type display_ads_id: str
        """

        self._display_ads_id = display_ads_id

    @property
    def display_ads_link(self):
        """Gets the display_ads_link of this Product.

        URL directly to your item's landing page for dynamic remarketing campaigns.

        :return: The display_ads_link of this Product.
        :rtype: str
        """
        return self._display_ads_link

    @display_ads_link.setter
    def display_ads_link(self, display_ads_link):
        """Sets the display_ads_link of this Product.

        URL directly to your item's landing page for dynamic remarketing campaigns.

        :param display_ads_link: The display_ads_link of this Product.
        :type display_ads_link: str
        """

        self._display_ads_link = display_ads_link

    @property
    def display_ads_similar_ids(self):
        """Gets the display_ads_similar_ids of this Product.

        Advertiser-specified recommendations.

        :return: The display_ads_similar_ids of this Product.
        :rtype: List[str]
        """
        return self._display_ads_similar_ids

    @display_ads_similar_ids.setter
    def display_ads_similar_ids(self, display_ads_similar_ids):
        """Sets the display_ads_similar_ids of this Product.

        Advertiser-specified recommendations.

        :param display_ads_similar_ids: The display_ads_similar_ids of this Product.
        :type display_ads_similar_ids: List[str]
        """

        self._display_ads_similar_ids = display_ads_similar_ids

    @property
    def display_ads_title(self):
        """Gets the display_ads_title of this Product.

        Title of an item for dynamic remarketing campaigns.

        :return: The display_ads_title of this Product.
        :rtype: str
        """
        return self._display_ads_title

    @display_ads_title.setter
    def display_ads_title(self, display_ads_title):
        """Sets the display_ads_title of this Product.

        Title of an item for dynamic remarketing campaigns.

        :param display_ads_title: The display_ads_title of this Product.
        :type display_ads_title: str
        """

        self._display_ads_title = display_ads_title

    @property
    def display_ads_value(self):
        """Gets the display_ads_value of this Product.

        Offer margin for dynamic remarketing campaigns.

        :return: The display_ads_value of this Product.
        :rtype: float
        """
        return self._display_ads_value

    @display_ads_value.setter
    def display_ads_value(self, display_ads_value):
        """Sets the display_ads_value of this Product.

        Offer margin for dynamic remarketing campaigns.

        :param display_ads_value: The display_ads_value of this Product.
        :type display_ads_value: float
        """

        self._display_ads_value = display_ads_value

    @property
    def energy_efficiency_class(self):
        """Gets the energy_efficiency_class of this Product.

        The energy efficiency class as defined in EU directive 2010/30/EU.

        :return: The energy_efficiency_class of this Product.
        :rtype: str
        """
        return self._energy_efficiency_class

    @energy_efficiency_class.setter
    def energy_efficiency_class(self, energy_efficiency_class):
        """Sets the energy_efficiency_class of this Product.

        The energy efficiency class as defined in EU directive 2010/30/EU.

        :param energy_efficiency_class: The energy_efficiency_class of this Product.
        :type energy_efficiency_class: str
        """

        self._energy_efficiency_class = energy_efficiency_class

    @property
    def excluded_destinations(self):
        """Gets the excluded_destinations of this Product.

        The list of destinations to exclude for this target (corresponds to cleared check boxes in Merchant Center). Products that are excluded from all destinations for more than 7 days are automatically deleted.

        :return: The excluded_destinations of this Product.
        :rtype: List[str]
        """
        return self._excluded_destinations

    @excluded_destinations.setter
    def excluded_destinations(self, excluded_destinations):
        """Sets the excluded_destinations of this Product.

        The list of destinations to exclude for this target (corresponds to cleared check boxes in Merchant Center). Products that are excluded from all destinations for more than 7 days are automatically deleted.

        :param excluded_destinations: The excluded_destinations of this Product.
        :type excluded_destinations: List[str]
        """

        self._excluded_destinations = excluded_destinations

    @property
    def expiration_date(self):
        """Gets the expiration_date of this Product.

        Date on which the item should expire, as specified upon insertion, in ISO 8601 format. The actual expiration date in Google Shopping is exposed in `productstatuses` as `googleExpirationDate` and might be earlier if `expirationDate` is too far in the future.

        :return: The expiration_date of this Product.
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this Product.

        Date on which the item should expire, as specified upon insertion, in ISO 8601 format. The actual expiration date in Google Shopping is exposed in `productstatuses` as `googleExpirationDate` and might be earlier if `expirationDate` is too far in the future.

        :param expiration_date: The expiration_date of this Product.
        :type expiration_date: str
        """

        self._expiration_date = expiration_date

    @property
    def external_seller_id(self):
        """Gets the external_seller_id of this Product.

        Required for multi-seller accounts. Use this attribute if you're a marketplace uploading products for various sellers to your multi-seller account.

        :return: The external_seller_id of this Product.
        :rtype: str
        """
        return self._external_seller_id

    @external_seller_id.setter
    def external_seller_id(self, external_seller_id):
        """Sets the external_seller_id of this Product.

        Required for multi-seller accounts. Use this attribute if you're a marketplace uploading products for various sellers to your multi-seller account.

        :param external_seller_id: The external_seller_id of this Product.
        :type external_seller_id: str
        """

        self._external_seller_id = external_seller_id

    @property
    def feed_label(self):
        """Gets the feed_label of this Product.

        Feed label for the item. Either `targetCountry` or `feedLabel` is required. Must be less than or equal to 20 uppercase letters (A-Z), numbers (0-9), and dashes (-).

        :return: The feed_label of this Product.
        :rtype: str
        """
        return self._feed_label

    @feed_label.setter
    def feed_label(self, feed_label):
        """Sets the feed_label of this Product.

        Feed label for the item. Either `targetCountry` or `feedLabel` is required. Must be less than or equal to 20 uppercase letters (A-Z), numbers (0-9), and dashes (-).

        :param feed_label: The feed_label of this Product.
        :type feed_label: str
        """

        self._feed_label = feed_label

    @property
    def gender(self):
        """Gets the gender of this Product.

        Target gender of the item.

        :return: The gender of this Product.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Product.

        Target gender of the item.

        :param gender: The gender of this Product.
        :type gender: str
        """

        self._gender = gender

    @property
    def google_product_category(self):
        """Gets the google_product_category of this Product.

        Google's category of the item (see [Google product taxonomy](https://support.google.com/merchants/answer/1705911)). When querying products, this field will contain the user provided value. There is currently no way to get back the auto assigned google product categories through the API.

        :return: The google_product_category of this Product.
        :rtype: str
        """
        return self._google_product_category

    @google_product_category.setter
    def google_product_category(self, google_product_category):
        """Sets the google_product_category of this Product.

        Google's category of the item (see [Google product taxonomy](https://support.google.com/merchants/answer/1705911)). When querying products, this field will contain the user provided value. There is currently no way to get back the auto assigned google product categories through the API.

        :param google_product_category: The google_product_category of this Product.
        :type google_product_category: str
        """

        self._google_product_category = google_product_category

    @property
    def gtin(self):
        """Gets the gtin of this Product.

        Global Trade Item Number (GTIN) of the item.

        :return: The gtin of this Product.
        :rtype: str
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this Product.

        Global Trade Item Number (GTIN) of the item.

        :param gtin: The gtin of this Product.
        :type gtin: str
        """

        self._gtin = gtin

    @property
    def id(self):
        """Gets the id of this Product.

        The REST ID of the product. Content API methods that operate on products take this as their `productId` parameter. The REST ID for a product has one of the 2 forms channel:contentLanguage: targetCountry: offerId or channel:contentLanguage:feedLabel: offerId.

        :return: The id of this Product.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Product.

        The REST ID of the product. Content API methods that operate on products take this as their `productId` parameter. The REST ID for a product has one of the 2 forms channel:contentLanguage: targetCountry: offerId or channel:contentLanguage:feedLabel: offerId.

        :param id: The id of this Product.
        :type id: str
        """

        self._id = id

    @property
    def identifier_exists(self):
        """Gets the identifier_exists of this Product.

        False when the item does not have unique product identifiers appropriate to its category, such as GTIN, MPN, and brand. Required according to the Unique Product Identifier Rules for all target countries except for Canada.

        :return: The identifier_exists of this Product.
        :rtype: bool
        """
        return self._identifier_exists

    @identifier_exists.setter
    def identifier_exists(self, identifier_exists):
        """Sets the identifier_exists of this Product.

        False when the item does not have unique product identifiers appropriate to its category, such as GTIN, MPN, and brand. Required according to the Unique Product Identifier Rules for all target countries except for Canada.

        :param identifier_exists: The identifier_exists of this Product.
        :type identifier_exists: bool
        """

        self._identifier_exists = identifier_exists

    @property
    def image_link(self):
        """Gets the image_link of this Product.

        URL of an image of the item.

        :return: The image_link of this Product.
        :rtype: str
        """
        return self._image_link

    @image_link.setter
    def image_link(self, image_link):
        """Sets the image_link of this Product.

        URL of an image of the item.

        :param image_link: The image_link of this Product.
        :type image_link: str
        """

        self._image_link = image_link

    @property
    def included_destinations(self):
        """Gets the included_destinations of this Product.

        The list of destinations to include for this target (corresponds to checked check boxes in Merchant Center). Default destinations are always included unless provided in `excludedDestinations`.

        :return: The included_destinations of this Product.
        :rtype: List[str]
        """
        return self._included_destinations

    @included_destinations.setter
    def included_destinations(self, included_destinations):
        """Sets the included_destinations of this Product.

        The list of destinations to include for this target (corresponds to checked check boxes in Merchant Center). Default destinations are always included unless provided in `excludedDestinations`.

        :param included_destinations: The included_destinations of this Product.
        :type included_destinations: List[str]
        """

        self._included_destinations = included_destinations

    @property
    def installment(self):
        """Gets the installment of this Product.


        :return: The installment of this Product.
        :rtype: Installment
        """
        return self._installment

    @installment.setter
    def installment(self, installment):
        """Sets the installment of this Product.


        :param installment: The installment of this Product.
        :type installment: Installment
        """

        self._installment = installment

    @property
    def is_bundle(self):
        """Gets the is_bundle of this Product.

        Whether the item is a merchant-defined bundle. A bundle is a custom grouping of different products sold by a merchant for a single price.

        :return: The is_bundle of this Product.
        :rtype: bool
        """
        return self._is_bundle

    @is_bundle.setter
    def is_bundle(self, is_bundle):
        """Sets the is_bundle of this Product.

        Whether the item is a merchant-defined bundle. A bundle is a custom grouping of different products sold by a merchant for a single price.

        :param is_bundle: The is_bundle of this Product.
        :type is_bundle: bool
        """

        self._is_bundle = is_bundle

    @property
    def item_group_id(self):
        """Gets the item_group_id of this Product.

        Shared identifier for all variants of the same product.

        :return: The item_group_id of this Product.
        :rtype: str
        """
        return self._item_group_id

    @item_group_id.setter
    def item_group_id(self, item_group_id):
        """Sets the item_group_id of this Product.

        Shared identifier for all variants of the same product.

        :param item_group_id: The item_group_id of this Product.
        :type item_group_id: str
        """

        self._item_group_id = item_group_id

    @property
    def kind(self):
        """Gets the kind of this Product.

        Identifies what kind of resource this is. Value: the fixed string \"`content#product`\"

        :return: The kind of this Product.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Product.

        Identifies what kind of resource this is. Value: the fixed string \"`content#product`\"

        :param kind: The kind of this Product.
        :type kind: str
        """

        self._kind = kind

    @property
    def lifestyle_image_links(self):
        """Gets the lifestyle_image_links of this Product.

        Additional URLs of lifestyle images of the item. Used to explicitly identify images that showcase your item in a real-world context. See the Help Center article for more information.

        :return: The lifestyle_image_links of this Product.
        :rtype: List[str]
        """
        return self._lifestyle_image_links

    @lifestyle_image_links.setter
    def lifestyle_image_links(self, lifestyle_image_links):
        """Sets the lifestyle_image_links of this Product.

        Additional URLs of lifestyle images of the item. Used to explicitly identify images that showcase your item in a real-world context. See the Help Center article for more information.

        :param lifestyle_image_links: The lifestyle_image_links of this Product.
        :type lifestyle_image_links: List[str]
        """

        self._lifestyle_image_links = lifestyle_image_links

    @property
    def link(self):
        """Gets the link of this Product.

        URL directly linking to your item's page on your website.

        :return: The link of this Product.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Product.

        URL directly linking to your item's page on your website.

        :param link: The link of this Product.
        :type link: str
        """

        self._link = link

    @property
    def link_template(self):
        """Gets the link_template of this Product.

        URL template for merchant hosted local storefront.

        :return: The link_template of this Product.
        :rtype: str
        """
        return self._link_template

    @link_template.setter
    def link_template(self, link_template):
        """Sets the link_template of this Product.

        URL template for merchant hosted local storefront.

        :param link_template: The link_template of this Product.
        :type link_template: str
        """

        self._link_template = link_template

    @property
    def loyalty_points(self):
        """Gets the loyalty_points of this Product.


        :return: The loyalty_points of this Product.
        :rtype: LoyaltyPoints
        """
        return self._loyalty_points

    @loyalty_points.setter
    def loyalty_points(self, loyalty_points):
        """Sets the loyalty_points of this Product.


        :param loyalty_points: The loyalty_points of this Product.
        :type loyalty_points: LoyaltyPoints
        """

        self._loyalty_points = loyalty_points

    @property
    def material(self):
        """Gets the material of this Product.

        The material of which the item is made.

        :return: The material of this Product.
        :rtype: str
        """
        return self._material

    @material.setter
    def material(self, material):
        """Sets the material of this Product.

        The material of which the item is made.

        :param material: The material of this Product.
        :type material: str
        """

        self._material = material

    @property
    def max_energy_efficiency_class(self):
        """Gets the max_energy_efficiency_class of this Product.

        The energy efficiency class as defined in EU directive 2010/30/EU.

        :return: The max_energy_efficiency_class of this Product.
        :rtype: str
        """
        return self._max_energy_efficiency_class

    @max_energy_efficiency_class.setter
    def max_energy_efficiency_class(self, max_energy_efficiency_class):
        """Sets the max_energy_efficiency_class of this Product.

        The energy efficiency class as defined in EU directive 2010/30/EU.

        :param max_energy_efficiency_class: The max_energy_efficiency_class of this Product.
        :type max_energy_efficiency_class: str
        """

        self._max_energy_efficiency_class = max_energy_efficiency_class

    @property
    def max_handling_time(self):
        """Gets the max_handling_time of this Product.

        Maximal product handling time (in business days).

        :return: The max_handling_time of this Product.
        :rtype: str
        """
        return self._max_handling_time

    @max_handling_time.setter
    def max_handling_time(self, max_handling_time):
        """Sets the max_handling_time of this Product.

        Maximal product handling time (in business days).

        :param max_handling_time: The max_handling_time of this Product.
        :type max_handling_time: str
        """

        self._max_handling_time = max_handling_time

    @property
    def min_energy_efficiency_class(self):
        """Gets the min_energy_efficiency_class of this Product.

        The energy efficiency class as defined in EU directive 2010/30/EU.

        :return: The min_energy_efficiency_class of this Product.
        :rtype: str
        """
        return self._min_energy_efficiency_class

    @min_energy_efficiency_class.setter
    def min_energy_efficiency_class(self, min_energy_efficiency_class):
        """Sets the min_energy_efficiency_class of this Product.

        The energy efficiency class as defined in EU directive 2010/30/EU.

        :param min_energy_efficiency_class: The min_energy_efficiency_class of this Product.
        :type min_energy_efficiency_class: str
        """

        self._min_energy_efficiency_class = min_energy_efficiency_class

    @property
    def min_handling_time(self):
        """Gets the min_handling_time of this Product.

        Minimal product handling time (in business days).

        :return: The min_handling_time of this Product.
        :rtype: str
        """
        return self._min_handling_time

    @min_handling_time.setter
    def min_handling_time(self, min_handling_time):
        """Sets the min_handling_time of this Product.

        Minimal product handling time (in business days).

        :param min_handling_time: The min_handling_time of this Product.
        :type min_handling_time: str
        """

        self._min_handling_time = min_handling_time

    @property
    def mobile_link(self):
        """Gets the mobile_link of this Product.

        URL for the mobile-optimized version of your item's landing page.

        :return: The mobile_link of this Product.
        :rtype: str
        """
        return self._mobile_link

    @mobile_link.setter
    def mobile_link(self, mobile_link):
        """Sets the mobile_link of this Product.

        URL for the mobile-optimized version of your item's landing page.

        :param mobile_link: The mobile_link of this Product.
        :type mobile_link: str
        """

        self._mobile_link = mobile_link

    @property
    def mobile_link_template(self):
        """Gets the mobile_link_template of this Product.

        URL template for merchant hosted local storefront optimized for mobile devices.

        :return: The mobile_link_template of this Product.
        :rtype: str
        """
        return self._mobile_link_template

    @mobile_link_template.setter
    def mobile_link_template(self, mobile_link_template):
        """Sets the mobile_link_template of this Product.

        URL template for merchant hosted local storefront optimized for mobile devices.

        :param mobile_link_template: The mobile_link_template of this Product.
        :type mobile_link_template: str
        """

        self._mobile_link_template = mobile_link_template

    @property
    def mpn(self):
        """Gets the mpn of this Product.

        Manufacturer Part Number (MPN) of the item.

        :return: The mpn of this Product.
        :rtype: str
        """
        return self._mpn

    @mpn.setter
    def mpn(self, mpn):
        """Sets the mpn of this Product.

        Manufacturer Part Number (MPN) of the item.

        :param mpn: The mpn of this Product.
        :type mpn: str
        """

        self._mpn = mpn

    @property
    def multipack(self):
        """Gets the multipack of this Product.

        The number of identical products in a merchant-defined multipack.

        :return: The multipack of this Product.
        :rtype: str
        """
        return self._multipack

    @multipack.setter
    def multipack(self, multipack):
        """Sets the multipack of this Product.

        The number of identical products in a merchant-defined multipack.

        :param multipack: The multipack of this Product.
        :type multipack: str
        """

        self._multipack = multipack

    @property
    def offer_id(self):
        """Gets the offer_id of this Product.

        Required. A unique identifier for the item. Leading and trailing whitespaces are stripped and multiple whitespaces are replaced by a single whitespace upon submission. Only valid unicode characters are accepted. See the products feed specification for details. *Note:* Content API methods that operate on products take the REST ID of the product, *not* this identifier.

        :return: The offer_id of this Product.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this Product.

        Required. A unique identifier for the item. Leading and trailing whitespaces are stripped and multiple whitespaces are replaced by a single whitespace upon submission. Only valid unicode characters are accepted. See the products feed specification for details. *Note:* Content API methods that operate on products take the REST ID of the product, *not* this identifier.

        :param offer_id: The offer_id of this Product.
        :type offer_id: str
        """

        self._offer_id = offer_id

    @property
    def pattern(self):
        """Gets the pattern of this Product.

        The item's pattern (for example, polka dots).

        :return: The pattern of this Product.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this Product.

        The item's pattern (for example, polka dots).

        :param pattern: The pattern of this Product.
        :type pattern: str
        """

        self._pattern = pattern

    @property
    def pause(self):
        """Gets the pause of this Product.

        Publication of this item should be temporarily paused. Acceptable values are: - \"`ads`\" 

        :return: The pause of this Product.
        :rtype: str
        """
        return self._pause

    @pause.setter
    def pause(self, pause):
        """Sets the pause of this Product.

        Publication of this item should be temporarily paused. Acceptable values are: - \"`ads`\" 

        :param pause: The pause of this Product.
        :type pause: str
        """

        self._pause = pause

    @property
    def pickup_method(self):
        """Gets the pickup_method of this Product.

        The pick up option for the item. Acceptable values are: - \"`buy`\" - \"`reserve`\" - \"`ship to store`\" - \"`not supported`\" 

        :return: The pickup_method of this Product.
        :rtype: str
        """
        return self._pickup_method

    @pickup_method.setter
    def pickup_method(self, pickup_method):
        """Sets the pickup_method of this Product.

        The pick up option for the item. Acceptable values are: - \"`buy`\" - \"`reserve`\" - \"`ship to store`\" - \"`not supported`\" 

        :param pickup_method: The pickup_method of this Product.
        :type pickup_method: str
        """

        self._pickup_method = pickup_method

    @property
    def pickup_sla(self):
        """Gets the pickup_sla of this Product.

        Item store pickup timeline. Acceptable values are: - \"`same day`\" - \"`next day`\" - \"`2-day`\" - \"`3-day`\" - \"`4-day`\" - \"`5-day`\" - \"`6-day`\" - \"`7-day`\" - \"`multi-week`\" 

        :return: The pickup_sla of this Product.
        :rtype: str
        """
        return self._pickup_sla

    @pickup_sla.setter
    def pickup_sla(self, pickup_sla):
        """Sets the pickup_sla of this Product.

        Item store pickup timeline. Acceptable values are: - \"`same day`\" - \"`next day`\" - \"`2-day`\" - \"`3-day`\" - \"`4-day`\" - \"`5-day`\" - \"`6-day`\" - \"`7-day`\" - \"`multi-week`\" 

        :param pickup_sla: The pickup_sla of this Product.
        :type pickup_sla: str
        """

        self._pickup_sla = pickup_sla

    @property
    def price(self):
        """Gets the price of this Product.


        :return: The price of this Product.
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Product.


        :param price: The price of this Product.
        :type price: Price
        """

        self._price = price

    @property
    def product_details(self):
        """Gets the product_details of this Product.

        Technical specification or additional product details.

        :return: The product_details of this Product.
        :rtype: List[ProductProductDetail]
        """
        return self._product_details

    @product_details.setter
    def product_details(self, product_details):
        """Sets the product_details of this Product.

        Technical specification or additional product details.

        :param product_details: The product_details of this Product.
        :type product_details: List[ProductProductDetail]
        """

        self._product_details = product_details

    @property
    def product_height(self):
        """Gets the product_height of this Product.


        :return: The product_height of this Product.
        :rtype: ProductDimension
        """
        return self._product_height

    @product_height.setter
    def product_height(self, product_height):
        """Sets the product_height of this Product.


        :param product_height: The product_height of this Product.
        :type product_height: ProductDimension
        """

        self._product_height = product_height

    @property
    def product_highlights(self):
        """Gets the product_highlights of this Product.

        Bullet points describing the most relevant highlights of a product.

        :return: The product_highlights of this Product.
        :rtype: List[str]
        """
        return self._product_highlights

    @product_highlights.setter
    def product_highlights(self, product_highlights):
        """Sets the product_highlights of this Product.

        Bullet points describing the most relevant highlights of a product.

        :param product_highlights: The product_highlights of this Product.
        :type product_highlights: List[str]
        """

        self._product_highlights = product_highlights

    @property
    def product_length(self):
        """Gets the product_length of this Product.


        :return: The product_length of this Product.
        :rtype: ProductDimension
        """
        return self._product_length

    @product_length.setter
    def product_length(self, product_length):
        """Sets the product_length of this Product.


        :param product_length: The product_length of this Product.
        :type product_length: ProductDimension
        """

        self._product_length = product_length

    @property
    def product_types(self):
        """Gets the product_types of this Product.

        Categories of the item (formatted as in product data specification).

        :return: The product_types of this Product.
        :rtype: List[str]
        """
        return self._product_types

    @product_types.setter
    def product_types(self, product_types):
        """Sets the product_types of this Product.

        Categories of the item (formatted as in product data specification).

        :param product_types: The product_types of this Product.
        :type product_types: List[str]
        """

        self._product_types = product_types

    @property
    def product_weight(self):
        """Gets the product_weight of this Product.


        :return: The product_weight of this Product.
        :rtype: ProductWeight
        """
        return self._product_weight

    @product_weight.setter
    def product_weight(self, product_weight):
        """Sets the product_weight of this Product.


        :param product_weight: The product_weight of this Product.
        :type product_weight: ProductWeight
        """

        self._product_weight = product_weight

    @property
    def product_width(self):
        """Gets the product_width of this Product.


        :return: The product_width of this Product.
        :rtype: ProductDimension
        """
        return self._product_width

    @product_width.setter
    def product_width(self, product_width):
        """Sets the product_width of this Product.


        :param product_width: The product_width of this Product.
        :type product_width: ProductDimension
        """

        self._product_width = product_width

    @property
    def promotion_ids(self):
        """Gets the promotion_ids of this Product.

        The unique ID of a promotion.

        :return: The promotion_ids of this Product.
        :rtype: List[str]
        """
        return self._promotion_ids

    @promotion_ids.setter
    def promotion_ids(self, promotion_ids):
        """Sets the promotion_ids of this Product.

        The unique ID of a promotion.

        :param promotion_ids: The promotion_ids of this Product.
        :type promotion_ids: List[str]
        """

        self._promotion_ids = promotion_ids

    @property
    def sale_price(self):
        """Gets the sale_price of this Product.


        :return: The sale_price of this Product.
        :rtype: Price
        """
        return self._sale_price

    @sale_price.setter
    def sale_price(self, sale_price):
        """Sets the sale_price of this Product.


        :param sale_price: The sale_price of this Product.
        :type sale_price: Price
        """

        self._sale_price = sale_price

    @property
    def sale_price_effective_date(self):
        """Gets the sale_price_effective_date of this Product.

        Date range during which the item is on sale (see product data specification ).

        :return: The sale_price_effective_date of this Product.
        :rtype: str
        """
        return self._sale_price_effective_date

    @sale_price_effective_date.setter
    def sale_price_effective_date(self, sale_price_effective_date):
        """Sets the sale_price_effective_date of this Product.

        Date range during which the item is on sale (see product data specification ).

        :param sale_price_effective_date: The sale_price_effective_date of this Product.
        :type sale_price_effective_date: str
        """

        self._sale_price_effective_date = sale_price_effective_date

    @property
    def sell_on_google_quantity(self):
        """Gets the sell_on_google_quantity of this Product.

        The quantity of the product that is available for selling on Google. Supported only for online products.

        :return: The sell_on_google_quantity of this Product.
        :rtype: str
        """
        return self._sell_on_google_quantity

    @sell_on_google_quantity.setter
    def sell_on_google_quantity(self, sell_on_google_quantity):
        """Sets the sell_on_google_quantity of this Product.

        The quantity of the product that is available for selling on Google. Supported only for online products.

        :param sell_on_google_quantity: The sell_on_google_quantity of this Product.
        :type sell_on_google_quantity: str
        """

        self._sell_on_google_quantity = sell_on_google_quantity

    @property
    def shipping(self):
        """Gets the shipping of this Product.

        Shipping rules.

        :return: The shipping of this Product.
        :rtype: List[ProductShipping]
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this Product.

        Shipping rules.

        :param shipping: The shipping of this Product.
        :type shipping: List[ProductShipping]
        """

        self._shipping = shipping

    @property
    def shipping_height(self):
        """Gets the shipping_height of this Product.


        :return: The shipping_height of this Product.
        :rtype: ProductShippingDimension
        """
        return self._shipping_height

    @shipping_height.setter
    def shipping_height(self, shipping_height):
        """Sets the shipping_height of this Product.


        :param shipping_height: The shipping_height of this Product.
        :type shipping_height: ProductShippingDimension
        """

        self._shipping_height = shipping_height

    @property
    def shipping_label(self):
        """Gets the shipping_label of this Product.

        The shipping label of the product, used to group product in account-level shipping rules.

        :return: The shipping_label of this Product.
        :rtype: str
        """
        return self._shipping_label

    @shipping_label.setter
    def shipping_label(self, shipping_label):
        """Sets the shipping_label of this Product.

        The shipping label of the product, used to group product in account-level shipping rules.

        :param shipping_label: The shipping_label of this Product.
        :type shipping_label: str
        """

        self._shipping_label = shipping_label

    @property
    def shipping_length(self):
        """Gets the shipping_length of this Product.


        :return: The shipping_length of this Product.
        :rtype: ProductShippingDimension
        """
        return self._shipping_length

    @shipping_length.setter
    def shipping_length(self, shipping_length):
        """Sets the shipping_length of this Product.


        :param shipping_length: The shipping_length of this Product.
        :type shipping_length: ProductShippingDimension
        """

        self._shipping_length = shipping_length

    @property
    def shipping_weight(self):
        """Gets the shipping_weight of this Product.


        :return: The shipping_weight of this Product.
        :rtype: ProductShippingWeight
        """
        return self._shipping_weight

    @shipping_weight.setter
    def shipping_weight(self, shipping_weight):
        """Sets the shipping_weight of this Product.


        :param shipping_weight: The shipping_weight of this Product.
        :type shipping_weight: ProductShippingWeight
        """

        self._shipping_weight = shipping_weight

    @property
    def shipping_width(self):
        """Gets the shipping_width of this Product.


        :return: The shipping_width of this Product.
        :rtype: ProductShippingDimension
        """
        return self._shipping_width

    @shipping_width.setter
    def shipping_width(self, shipping_width):
        """Sets the shipping_width of this Product.


        :param shipping_width: The shipping_width of this Product.
        :type shipping_width: ProductShippingDimension
        """

        self._shipping_width = shipping_width

    @property
    def shopping_ads_excluded_countries(self):
        """Gets the shopping_ads_excluded_countries of this Product.

        List of country codes (ISO 3166-1 alpha-2) to exclude the offer from Shopping Ads destination. Countries from this list are removed from countries configured in MC feed settings.

        :return: The shopping_ads_excluded_countries of this Product.
        :rtype: List[str]
        """
        return self._shopping_ads_excluded_countries

    @shopping_ads_excluded_countries.setter
    def shopping_ads_excluded_countries(self, shopping_ads_excluded_countries):
        """Sets the shopping_ads_excluded_countries of this Product.

        List of country codes (ISO 3166-1 alpha-2) to exclude the offer from Shopping Ads destination. Countries from this list are removed from countries configured in MC feed settings.

        :param shopping_ads_excluded_countries: The shopping_ads_excluded_countries of this Product.
        :type shopping_ads_excluded_countries: List[str]
        """

        self._shopping_ads_excluded_countries = shopping_ads_excluded_countries

    @property
    def size_system(self):
        """Gets the size_system of this Product.

        System in which the size is specified. Recommended for apparel items.

        :return: The size_system of this Product.
        :rtype: str
        """
        return self._size_system

    @size_system.setter
    def size_system(self, size_system):
        """Sets the size_system of this Product.

        System in which the size is specified. Recommended for apparel items.

        :param size_system: The size_system of this Product.
        :type size_system: str
        """

        self._size_system = size_system

    @property
    def size_type(self):
        """Gets the size_type of this Product.

        The cut of the item. Recommended for apparel items.

        :return: The size_type of this Product.
        :rtype: str
        """
        return self._size_type

    @size_type.setter
    def size_type(self, size_type):
        """Sets the size_type of this Product.

        The cut of the item. Recommended for apparel items.

        :param size_type: The size_type of this Product.
        :type size_type: str
        """

        self._size_type = size_type

    @property
    def sizes(self):
        """Gets the sizes of this Product.

        Size of the item. Only one value is allowed. For variants with different sizes, insert a separate product for each size with the same `itemGroupId` value (see size definition).

        :return: The sizes of this Product.
        :rtype: List[str]
        """
        return self._sizes

    @sizes.setter
    def sizes(self, sizes):
        """Sets the sizes of this Product.

        Size of the item. Only one value is allowed. For variants with different sizes, insert a separate product for each size with the same `itemGroupId` value (see size definition).

        :param sizes: The sizes of this Product.
        :type sizes: List[str]
        """

        self._sizes = sizes

    @property
    def source(self):
        """Gets the source of this Product.

        The source of the offer, that is, how the offer was created. Acceptable values are: - \"`api`\" - \"`crawl`\" - \"`feed`\" 

        :return: The source of this Product.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Product.

        The source of the offer, that is, how the offer was created. Acceptable values are: - \"`api`\" - \"`crawl`\" - \"`feed`\" 

        :param source: The source of this Product.
        :type source: str
        """

        self._source = source

    @property
    def subscription_cost(self):
        """Gets the subscription_cost of this Product.


        :return: The subscription_cost of this Product.
        :rtype: ProductSubscriptionCost
        """
        return self._subscription_cost

    @subscription_cost.setter
    def subscription_cost(self, subscription_cost):
        """Sets the subscription_cost of this Product.


        :param subscription_cost: The subscription_cost of this Product.
        :type subscription_cost: ProductSubscriptionCost
        """

        self._subscription_cost = subscription_cost

    @property
    def target_country(self):
        """Gets the target_country of this Product.

        Required. The CLDR territory code for the item's country of sale.

        :return: The target_country of this Product.
        :rtype: str
        """
        return self._target_country

    @target_country.setter
    def target_country(self, target_country):
        """Sets the target_country of this Product.

        Required. The CLDR territory code for the item's country of sale.

        :param target_country: The target_country of this Product.
        :type target_country: str
        """

        self._target_country = target_country

    @property
    def tax_category(self):
        """Gets the tax_category of this Product.

        The tax category of the product, used to configure detailed tax nexus in account-level tax settings.

        :return: The tax_category of this Product.
        :rtype: str
        """
        return self._tax_category

    @tax_category.setter
    def tax_category(self, tax_category):
        """Sets the tax_category of this Product.

        The tax category of the product, used to configure detailed tax nexus in account-level tax settings.

        :param tax_category: The tax_category of this Product.
        :type tax_category: str
        """

        self._tax_category = tax_category

    @property
    def taxes(self):
        """Gets the taxes of this Product.

        Tax information.

        :return: The taxes of this Product.
        :rtype: List[ProductTax]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this Product.

        Tax information.

        :param taxes: The taxes of this Product.
        :type taxes: List[ProductTax]
        """

        self._taxes = taxes

    @property
    def title(self):
        """Gets the title of this Product.

        Title of the item.

        :return: The title of this Product.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Product.

        Title of the item.

        :param title: The title of this Product.
        :type title: str
        """

        self._title = title

    @property
    def transit_time_label(self):
        """Gets the transit_time_label of this Product.

        The transit time label of the product, used to group product in account-level transit time tables.

        :return: The transit_time_label of this Product.
        :rtype: str
        """
        return self._transit_time_label

    @transit_time_label.setter
    def transit_time_label(self, transit_time_label):
        """Sets the transit_time_label of this Product.

        The transit time label of the product, used to group product in account-level transit time tables.

        :param transit_time_label: The transit_time_label of this Product.
        :type transit_time_label: str
        """

        self._transit_time_label = transit_time_label

    @property
    def unit_pricing_base_measure(self):
        """Gets the unit_pricing_base_measure of this Product.


        :return: The unit_pricing_base_measure of this Product.
        :rtype: ProductUnitPricingBaseMeasure
        """
        return self._unit_pricing_base_measure

    @unit_pricing_base_measure.setter
    def unit_pricing_base_measure(self, unit_pricing_base_measure):
        """Sets the unit_pricing_base_measure of this Product.


        :param unit_pricing_base_measure: The unit_pricing_base_measure of this Product.
        :type unit_pricing_base_measure: ProductUnitPricingBaseMeasure
        """

        self._unit_pricing_base_measure = unit_pricing_base_measure

    @property
    def unit_pricing_measure(self):
        """Gets the unit_pricing_measure of this Product.


        :return: The unit_pricing_measure of this Product.
        :rtype: ProductUnitPricingMeasure
        """
        return self._unit_pricing_measure

    @unit_pricing_measure.setter
    def unit_pricing_measure(self, unit_pricing_measure):
        """Sets the unit_pricing_measure of this Product.


        :param unit_pricing_measure: The unit_pricing_measure of this Product.
        :type unit_pricing_measure: ProductUnitPricingMeasure
        """

        self._unit_pricing_measure = unit_pricing_measure

    @property
    def virtual_model_link(self):
        """Gets the virtual_model_link of this Product.

        URL of the 3D model of the item to provide more visuals.

        :return: The virtual_model_link of this Product.
        :rtype: str
        """
        return self._virtual_model_link

    @virtual_model_link.setter
    def virtual_model_link(self, virtual_model_link):
        """Sets the virtual_model_link of this Product.

        URL of the 3D model of the item to provide more visuals.

        :param virtual_model_link: The virtual_model_link of this Product.
        :type virtual_model_link: str
        """

        self._virtual_model_link = virtual_model_link
