# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_address import OrderAddress
from openapi_server.models.order_customer import OrderCustomer
from openapi_server.models.order_delivery_details import OrderDeliveryDetails
from openapi_server.models.order_line_item import OrderLineItem
from openapi_server.models.order_order_annotation import OrderOrderAnnotation
from openapi_server.models.order_pickup_details import OrderPickupDetails
from openapi_server.models.order_promotion import OrderPromotion
from openapi_server.models.order_refund import OrderRefund
from openapi_server.models.order_shipment import OrderShipment
from openapi_server.models.price import Price
from openapi_server import util


class Order(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acknowledged: bool=None, annotations: List[OrderOrderAnnotation]=None, billing_address: OrderAddress=None, customer: OrderCustomer=None, delivery_details: OrderDeliveryDetails=None, id: str=None, kind: str=None, line_items: List[OrderLineItem]=None, merchant_id: str=None, merchant_order_id: str=None, net_price_amount: Price=None, net_tax_amount: Price=None, payment_status: str=None, pickup_details: OrderPickupDetails=None, placed_date: str=None, promotions: List[OrderPromotion]=None, refunds: List[OrderRefund]=None, shipments: List[OrderShipment]=None, shipping_cost: Price=None, shipping_cost_tax: Price=None, status: str=None, tax_collector: str=None):
        """Order - a model defined in OpenAPI

        :param acknowledged: The acknowledged of this Order.
        :param annotations: The annotations of this Order.
        :param billing_address: The billing_address of this Order.
        :param customer: The customer of this Order.
        :param delivery_details: The delivery_details of this Order.
        :param id: The id of this Order.
        :param kind: The kind of this Order.
        :param line_items: The line_items of this Order.
        :param merchant_id: The merchant_id of this Order.
        :param merchant_order_id: The merchant_order_id of this Order.
        :param net_price_amount: The net_price_amount of this Order.
        :param net_tax_amount: The net_tax_amount of this Order.
        :param payment_status: The payment_status of this Order.
        :param pickup_details: The pickup_details of this Order.
        :param placed_date: The placed_date of this Order.
        :param promotions: The promotions of this Order.
        :param refunds: The refunds of this Order.
        :param shipments: The shipments of this Order.
        :param shipping_cost: The shipping_cost of this Order.
        :param shipping_cost_tax: The shipping_cost_tax of this Order.
        :param status: The status of this Order.
        :param tax_collector: The tax_collector of this Order.
        """
        self.openapi_types = {
            'acknowledged': bool,
            'annotations': List[OrderOrderAnnotation],
            'billing_address': OrderAddress,
            'customer': OrderCustomer,
            'delivery_details': OrderDeliveryDetails,
            'id': str,
            'kind': str,
            'line_items': List[OrderLineItem],
            'merchant_id': str,
            'merchant_order_id': str,
            'net_price_amount': Price,
            'net_tax_amount': Price,
            'payment_status': str,
            'pickup_details': OrderPickupDetails,
            'placed_date': str,
            'promotions': List[OrderPromotion],
            'refunds': List[OrderRefund],
            'shipments': List[OrderShipment],
            'shipping_cost': Price,
            'shipping_cost_tax': Price,
            'status': str,
            'tax_collector': str
        }

        self.attribute_map = {
            'acknowledged': 'acknowledged',
            'annotations': 'annotations',
            'billing_address': 'billingAddress',
            'customer': 'customer',
            'delivery_details': 'deliveryDetails',
            'id': 'id',
            'kind': 'kind',
            'line_items': 'lineItems',
            'merchant_id': 'merchantId',
            'merchant_order_id': 'merchantOrderId',
            'net_price_amount': 'netPriceAmount',
            'net_tax_amount': 'netTaxAmount',
            'payment_status': 'paymentStatus',
            'pickup_details': 'pickupDetails',
            'placed_date': 'placedDate',
            'promotions': 'promotions',
            'refunds': 'refunds',
            'shipments': 'shipments',
            'shipping_cost': 'shippingCost',
            'shipping_cost_tax': 'shippingCostTax',
            'status': 'status',
            'tax_collector': 'taxCollector'
        }

        self._acknowledged = acknowledged
        self._annotations = annotations
        self._billing_address = billing_address
        self._customer = customer
        self._delivery_details = delivery_details
        self._id = id
        self._kind = kind
        self._line_items = line_items
        self._merchant_id = merchant_id
        self._merchant_order_id = merchant_order_id
        self._net_price_amount = net_price_amount
        self._net_tax_amount = net_tax_amount
        self._payment_status = payment_status
        self._pickup_details = pickup_details
        self._placed_date = placed_date
        self._promotions = promotions
        self._refunds = refunds
        self._shipments = shipments
        self._shipping_cost = shipping_cost
        self._shipping_cost_tax = shipping_cost_tax
        self._status = status
        self._tax_collector = tax_collector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order of this Order.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acknowledged(self):
        """Gets the acknowledged of this Order.

        Whether the order was acknowledged.

        :return: The acknowledged of this Order.
        :rtype: bool
        """
        return self._acknowledged

    @acknowledged.setter
    def acknowledged(self, acknowledged):
        """Sets the acknowledged of this Order.

        Whether the order was acknowledged.

        :param acknowledged: The acknowledged of this Order.
        :type acknowledged: bool
        """

        self._acknowledged = acknowledged

    @property
    def annotations(self):
        """Gets the annotations of this Order.

        List of key-value pairs that are attached to a given order.

        :return: The annotations of this Order.
        :rtype: List[OrderOrderAnnotation]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Order.

        List of key-value pairs that are attached to a given order.

        :param annotations: The annotations of this Order.
        :type annotations: List[OrderOrderAnnotation]
        """

        self._annotations = annotations

    @property
    def billing_address(self):
        """Gets the billing_address of this Order.


        :return: The billing_address of this Order.
        :rtype: OrderAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this Order.


        :param billing_address: The billing_address of this Order.
        :type billing_address: OrderAddress
        """

        self._billing_address = billing_address

    @property
    def customer(self):
        """Gets the customer of this Order.


        :return: The customer of this Order.
        :rtype: OrderCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Order.


        :param customer: The customer of this Order.
        :type customer: OrderCustomer
        """

        self._customer = customer

    @property
    def delivery_details(self):
        """Gets the delivery_details of this Order.


        :return: The delivery_details of this Order.
        :rtype: OrderDeliveryDetails
        """
        return self._delivery_details

    @delivery_details.setter
    def delivery_details(self, delivery_details):
        """Sets the delivery_details of this Order.


        :param delivery_details: The delivery_details of this Order.
        :type delivery_details: OrderDeliveryDetails
        """

        self._delivery_details = delivery_details

    @property
    def id(self):
        """Gets the id of this Order.

        The REST ID of the order. Globally unique.

        :return: The id of this Order.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Order.

        The REST ID of the order. Globally unique.

        :param id: The id of this Order.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Order.

        Identifies what kind of resource this is. Value: the fixed string \"`content#order`\"

        :return: The kind of this Order.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Order.

        Identifies what kind of resource this is. Value: the fixed string \"`content#order`\"

        :param kind: The kind of this Order.
        :type kind: str
        """

        self._kind = kind

    @property
    def line_items(self):
        """Gets the line_items of this Order.

        Line items that are ordered.

        :return: The line_items of this Order.
        :rtype: List[OrderLineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this Order.

        Line items that are ordered.

        :param line_items: The line_items of this Order.
        :type line_items: List[OrderLineItem]
        """

        self._line_items = line_items

    @property
    def merchant_id(self):
        """Gets the merchant_id of this Order.


        :return: The merchant_id of this Order.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this Order.


        :param merchant_id: The merchant_id of this Order.
        :type merchant_id: str
        """

        self._merchant_id = merchant_id

    @property
    def merchant_order_id(self):
        """Gets the merchant_order_id of this Order.

        Merchant-provided ID of the order.

        :return: The merchant_order_id of this Order.
        :rtype: str
        """
        return self._merchant_order_id

    @merchant_order_id.setter
    def merchant_order_id(self, merchant_order_id):
        """Sets the merchant_order_id of this Order.

        Merchant-provided ID of the order.

        :param merchant_order_id: The merchant_order_id of this Order.
        :type merchant_order_id: str
        """

        self._merchant_order_id = merchant_order_id

    @property
    def net_price_amount(self):
        """Gets the net_price_amount of this Order.


        :return: The net_price_amount of this Order.
        :rtype: Price
        """
        return self._net_price_amount

    @net_price_amount.setter
    def net_price_amount(self, net_price_amount):
        """Sets the net_price_amount of this Order.


        :param net_price_amount: The net_price_amount of this Order.
        :type net_price_amount: Price
        """

        self._net_price_amount = net_price_amount

    @property
    def net_tax_amount(self):
        """Gets the net_tax_amount of this Order.


        :return: The net_tax_amount of this Order.
        :rtype: Price
        """
        return self._net_tax_amount

    @net_tax_amount.setter
    def net_tax_amount(self, net_tax_amount):
        """Sets the net_tax_amount of this Order.


        :param net_tax_amount: The net_tax_amount of this Order.
        :type net_tax_amount: Price
        """

        self._net_tax_amount = net_tax_amount

    @property
    def payment_status(self):
        """Gets the payment_status of this Order.

        The status of the payment. Acceptable values are: - \"`paymentCaptured`\" - \"`paymentRejected`\" - \"`paymentSecured`\" - \"`pendingAuthorization`\" 

        :return: The payment_status of this Order.
        :rtype: str
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """Sets the payment_status of this Order.

        The status of the payment. Acceptable values are: - \"`paymentCaptured`\" - \"`paymentRejected`\" - \"`paymentSecured`\" - \"`pendingAuthorization`\" 

        :param payment_status: The payment_status of this Order.
        :type payment_status: str
        """

        self._payment_status = payment_status

    @property
    def pickup_details(self):
        """Gets the pickup_details of this Order.


        :return: The pickup_details of this Order.
        :rtype: OrderPickupDetails
        """
        return self._pickup_details

    @pickup_details.setter
    def pickup_details(self, pickup_details):
        """Sets the pickup_details of this Order.


        :param pickup_details: The pickup_details of this Order.
        :type pickup_details: OrderPickupDetails
        """

        self._pickup_details = pickup_details

    @property
    def placed_date(self):
        """Gets the placed_date of this Order.

        The date when the order was placed, in ISO 8601 format.

        :return: The placed_date of this Order.
        :rtype: str
        """
        return self._placed_date

    @placed_date.setter
    def placed_date(self, placed_date):
        """Sets the placed_date of this Order.

        The date when the order was placed, in ISO 8601 format.

        :param placed_date: The placed_date of this Order.
        :type placed_date: str
        """

        self._placed_date = placed_date

    @property
    def promotions(self):
        """Gets the promotions of this Order.

        Promotions associated with the order. To determine which promotions apply to which products, check the `Promotions[].appliedItems[].lineItemId` field against the `LineItems[].id` field for each promotion. If a promotion is applied to more than 1 offerId, divide the discount value by the number of affected offers to determine how much discount to apply to each offerId. Examples: 1. To calculate price paid by the customer for a single line item including the discount: For each promotion, subtract the `LineItems[].adjustments[].priceAdjustment.value` amount from the `LineItems[].Price.value`. 2. To calculate price paid by the customer for a single line item including the discount in case of multiple quantity: For each promotion, divide the `LineItems[].adjustments[].priceAdjustment.value` by the quantity of products then subtract the resulting value from the `LineItems[].Product.Price.value` for each quantity item. Only 1 promotion can be applied to an offerId in a given order. To refund an item which had a promotion applied to it, make sure to refund the amount after first subtracting the promotion discount from the item price. More details about the program are here.

        :return: The promotions of this Order.
        :rtype: List[OrderPromotion]
        """
        return self._promotions

    @promotions.setter
    def promotions(self, promotions):
        """Sets the promotions of this Order.

        Promotions associated with the order. To determine which promotions apply to which products, check the `Promotions[].appliedItems[].lineItemId` field against the `LineItems[].id` field for each promotion. If a promotion is applied to more than 1 offerId, divide the discount value by the number of affected offers to determine how much discount to apply to each offerId. Examples: 1. To calculate price paid by the customer for a single line item including the discount: For each promotion, subtract the `LineItems[].adjustments[].priceAdjustment.value` amount from the `LineItems[].Price.value`. 2. To calculate price paid by the customer for a single line item including the discount in case of multiple quantity: For each promotion, divide the `LineItems[].adjustments[].priceAdjustment.value` by the quantity of products then subtract the resulting value from the `LineItems[].Product.Price.value` for each quantity item. Only 1 promotion can be applied to an offerId in a given order. To refund an item which had a promotion applied to it, make sure to refund the amount after first subtracting the promotion discount from the item price. More details about the program are here.

        :param promotions: The promotions of this Order.
        :type promotions: List[OrderPromotion]
        """

        self._promotions = promotions

    @property
    def refunds(self):
        """Gets the refunds of this Order.

        Refunds for the order.

        :return: The refunds of this Order.
        :rtype: List[OrderRefund]
        """
        return self._refunds

    @refunds.setter
    def refunds(self, refunds):
        """Sets the refunds of this Order.

        Refunds for the order.

        :param refunds: The refunds of this Order.
        :type refunds: List[OrderRefund]
        """

        self._refunds = refunds

    @property
    def shipments(self):
        """Gets the shipments of this Order.

        Shipments of the order.

        :return: The shipments of this Order.
        :rtype: List[OrderShipment]
        """
        return self._shipments

    @shipments.setter
    def shipments(self, shipments):
        """Sets the shipments of this Order.

        Shipments of the order.

        :param shipments: The shipments of this Order.
        :type shipments: List[OrderShipment]
        """

        self._shipments = shipments

    @property
    def shipping_cost(self):
        """Gets the shipping_cost of this Order.


        :return: The shipping_cost of this Order.
        :rtype: Price
        """
        return self._shipping_cost

    @shipping_cost.setter
    def shipping_cost(self, shipping_cost):
        """Sets the shipping_cost of this Order.


        :param shipping_cost: The shipping_cost of this Order.
        :type shipping_cost: Price
        """

        self._shipping_cost = shipping_cost

    @property
    def shipping_cost_tax(self):
        """Gets the shipping_cost_tax of this Order.


        :return: The shipping_cost_tax of this Order.
        :rtype: Price
        """
        return self._shipping_cost_tax

    @shipping_cost_tax.setter
    def shipping_cost_tax(self, shipping_cost_tax):
        """Sets the shipping_cost_tax of this Order.


        :param shipping_cost_tax: The shipping_cost_tax of this Order.
        :type shipping_cost_tax: Price
        """

        self._shipping_cost_tax = shipping_cost_tax

    @property
    def status(self):
        """Gets the status of this Order.

        The status of the order. Acceptable values are: - \"`canceled`\" - \"`delivered`\" - \"`inProgress`\" - \"`partiallyDelivered`\" - \"`partiallyReturned`\" - \"`partiallyShipped`\" - \"`pendingShipment`\" - \"`returned`\" - \"`shipped`\" 

        :return: The status of this Order.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Order.

        The status of the order. Acceptable values are: - \"`canceled`\" - \"`delivered`\" - \"`inProgress`\" - \"`partiallyDelivered`\" - \"`partiallyReturned`\" - \"`partiallyShipped`\" - \"`pendingShipment`\" - \"`returned`\" - \"`shipped`\" 

        :param status: The status of this Order.
        :type status: str
        """

        self._status = status

    @property
    def tax_collector(self):
        """Gets the tax_collector of this Order.

        The party responsible for collecting and remitting taxes. Acceptable values are: - \"`marketplaceFacilitator`\" - \"`merchant`\" 

        :return: The tax_collector of this Order.
        :rtype: str
        """
        return self._tax_collector

    @tax_collector.setter
    def tax_collector(self, tax_collector):
        """Sets the tax_collector of this Order.

        The party responsible for collecting and remitting taxes. Acceptable values are: - \"`marketplaceFacilitator`\" - \"`merchant`\" 

        :param tax_collector: The tax_collector of this Order.
        :type tax_collector: str
        """

        self._tax_collector = tax_collector
