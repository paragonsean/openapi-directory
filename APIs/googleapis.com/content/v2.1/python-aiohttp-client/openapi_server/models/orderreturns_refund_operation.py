# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.orderreturns_partial_refund import OrderreturnsPartialRefund
from openapi_server import util


class OrderreturnsRefundOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_refund: bool=None, partial_refund: OrderreturnsPartialRefund=None, payment_type: str=None, reason_text: str=None, return_refund_reason: str=None):
        """OrderreturnsRefundOperation - a model defined in OpenAPI

        :param full_refund: The full_refund of this OrderreturnsRefundOperation.
        :param partial_refund: The partial_refund of this OrderreturnsRefundOperation.
        :param payment_type: The payment_type of this OrderreturnsRefundOperation.
        :param reason_text: The reason_text of this OrderreturnsRefundOperation.
        :param return_refund_reason: The return_refund_reason of this OrderreturnsRefundOperation.
        """
        self.openapi_types = {
            'full_refund': bool,
            'partial_refund': OrderreturnsPartialRefund,
            'payment_type': str,
            'reason_text': str,
            'return_refund_reason': str
        }

        self.attribute_map = {
            'full_refund': 'fullRefund',
            'partial_refund': 'partialRefund',
            'payment_type': 'paymentType',
            'reason_text': 'reasonText',
            'return_refund_reason': 'returnRefundReason'
        }

        self._full_refund = full_refund
        self._partial_refund = partial_refund
        self._payment_type = payment_type
        self._reason_text = reason_text
        self._return_refund_reason = return_refund_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderreturnsRefundOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderreturnsRefundOperation of this OrderreturnsRefundOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_refund(self):
        """Gets the full_refund of this OrderreturnsRefundOperation.

        If true, the item will be fully refunded. Allowed only when payment_type is FOP. Merchant can choose this refund option to indicate the full remaining amount of corresponding object to be refunded to the customer through FOP.

        :return: The full_refund of this OrderreturnsRefundOperation.
        :rtype: bool
        """
        return self._full_refund

    @full_refund.setter
    def full_refund(self, full_refund):
        """Sets the full_refund of this OrderreturnsRefundOperation.

        If true, the item will be fully refunded. Allowed only when payment_type is FOP. Merchant can choose this refund option to indicate the full remaining amount of corresponding object to be refunded to the customer through FOP.

        :param full_refund: The full_refund of this OrderreturnsRefundOperation.
        :type full_refund: bool
        """

        self._full_refund = full_refund

    @property
    def partial_refund(self):
        """Gets the partial_refund of this OrderreturnsRefundOperation.


        :return: The partial_refund of this OrderreturnsRefundOperation.
        :rtype: OrderreturnsPartialRefund
        """
        return self._partial_refund

    @partial_refund.setter
    def partial_refund(self, partial_refund):
        """Sets the partial_refund of this OrderreturnsRefundOperation.


        :param partial_refund: The partial_refund of this OrderreturnsRefundOperation.
        :type partial_refund: OrderreturnsPartialRefund
        """

        self._partial_refund = partial_refund

    @property
    def payment_type(self):
        """Gets the payment_type of this OrderreturnsRefundOperation.

        The payment way of issuing refund. Default value is ORIGINAL_FOP if not set.

        :return: The payment_type of this OrderreturnsRefundOperation.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this OrderreturnsRefundOperation.

        The payment way of issuing refund. Default value is ORIGINAL_FOP if not set.

        :param payment_type: The payment_type of this OrderreturnsRefundOperation.
        :type payment_type: str
        """

        self._payment_type = payment_type

    @property
    def reason_text(self):
        """Gets the reason_text of this OrderreturnsRefundOperation.

        The explanation of the reason.

        :return: The reason_text of this OrderreturnsRefundOperation.
        :rtype: str
        """
        return self._reason_text

    @reason_text.setter
    def reason_text(self, reason_text):
        """Sets the reason_text of this OrderreturnsRefundOperation.

        The explanation of the reason.

        :param reason_text: The reason_text of this OrderreturnsRefundOperation.
        :type reason_text: str
        """

        self._reason_text = reason_text

    @property
    def return_refund_reason(self):
        """Gets the return_refund_reason of this OrderreturnsRefundOperation.

        Code of the refund reason.

        :return: The return_refund_reason of this OrderreturnsRefundOperation.
        :rtype: str
        """
        return self._return_refund_reason

    @return_refund_reason.setter
    def return_refund_reason(self, return_refund_reason):
        """Sets the return_refund_reason of this OrderreturnsRefundOperation.

        Code of the refund reason.

        :param return_refund_reason: The return_refund_reason of this OrderreturnsRefundOperation.
        :type return_refund_reason: str
        """

        self._return_refund_reason = return_refund_reason
