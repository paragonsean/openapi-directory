# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.shopping_ads_program_status_review_ineligibility_reason_details import ShoppingAdsProgramStatusReviewIneligibilityReasonDetails
from openapi_server import util


class ShoppingAdsProgramStatusRegionStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disapproval_date: str=None, eligibility_status: str=None, onboarding_issues: List[str]=None, region_codes: List[str]=None, review_eligibility_status: str=None, review_ineligibility_reason: str=None, review_ineligibility_reason_description: str=None, review_ineligibility_reason_details: ShoppingAdsProgramStatusReviewIneligibilityReasonDetails=None, review_issues: List[str]=None):
        """ShoppingAdsProgramStatusRegionStatus - a model defined in OpenAPI

        :param disapproval_date: The disapproval_date of this ShoppingAdsProgramStatusRegionStatus.
        :param eligibility_status: The eligibility_status of this ShoppingAdsProgramStatusRegionStatus.
        :param onboarding_issues: The onboarding_issues of this ShoppingAdsProgramStatusRegionStatus.
        :param region_codes: The region_codes of this ShoppingAdsProgramStatusRegionStatus.
        :param review_eligibility_status: The review_eligibility_status of this ShoppingAdsProgramStatusRegionStatus.
        :param review_ineligibility_reason: The review_ineligibility_reason of this ShoppingAdsProgramStatusRegionStatus.
        :param review_ineligibility_reason_description: The review_ineligibility_reason_description of this ShoppingAdsProgramStatusRegionStatus.
        :param review_ineligibility_reason_details: The review_ineligibility_reason_details of this ShoppingAdsProgramStatusRegionStatus.
        :param review_issues: The review_issues of this ShoppingAdsProgramStatusRegionStatus.
        """
        self.openapi_types = {
            'disapproval_date': str,
            'eligibility_status': str,
            'onboarding_issues': List[str],
            'region_codes': List[str],
            'review_eligibility_status': str,
            'review_ineligibility_reason': str,
            'review_ineligibility_reason_description': str,
            'review_ineligibility_reason_details': ShoppingAdsProgramStatusReviewIneligibilityReasonDetails,
            'review_issues': List[str]
        }

        self.attribute_map = {
            'disapproval_date': 'disapprovalDate',
            'eligibility_status': 'eligibilityStatus',
            'onboarding_issues': 'onboardingIssues',
            'region_codes': 'regionCodes',
            'review_eligibility_status': 'reviewEligibilityStatus',
            'review_ineligibility_reason': 'reviewIneligibilityReason',
            'review_ineligibility_reason_description': 'reviewIneligibilityReasonDescription',
            'review_ineligibility_reason_details': 'reviewIneligibilityReasonDetails',
            'review_issues': 'reviewIssues'
        }

        self._disapproval_date = disapproval_date
        self._eligibility_status = eligibility_status
        self._onboarding_issues = onboarding_issues
        self._region_codes = region_codes
        self._review_eligibility_status = review_eligibility_status
        self._review_ineligibility_reason = review_ineligibility_reason
        self._review_ineligibility_reason_description = review_ineligibility_reason_description
        self._review_ineligibility_reason_details = review_ineligibility_reason_details
        self._review_issues = review_issues

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShoppingAdsProgramStatusRegionStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShoppingAdsProgramStatusRegionStatus of this ShoppingAdsProgramStatusRegionStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disapproval_date(self):
        """Gets the disapproval_date of this ShoppingAdsProgramStatusRegionStatus.

        Date by which eligibilityStatus will go from `WARNING` to `DISAPPROVED`. Only visible when your eligibilityStatus is WARNING. In [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DD`.

        :return: The disapproval_date of this ShoppingAdsProgramStatusRegionStatus.
        :rtype: str
        """
        return self._disapproval_date

    @disapproval_date.setter
    def disapproval_date(self, disapproval_date):
        """Sets the disapproval_date of this ShoppingAdsProgramStatusRegionStatus.

        Date by which eligibilityStatus will go from `WARNING` to `DISAPPROVED`. Only visible when your eligibilityStatus is WARNING. In [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DD`.

        :param disapproval_date: The disapproval_date of this ShoppingAdsProgramStatusRegionStatus.
        :type disapproval_date: str
        """

        self._disapproval_date = disapproval_date

    @property
    def eligibility_status(self):
        """Gets the eligibility_status of this ShoppingAdsProgramStatusRegionStatus.

        Eligibility status of the Shopping Ads program.

        :return: The eligibility_status of this ShoppingAdsProgramStatusRegionStatus.
        :rtype: str
        """
        return self._eligibility_status

    @eligibility_status.setter
    def eligibility_status(self, eligibility_status):
        """Sets the eligibility_status of this ShoppingAdsProgramStatusRegionStatus.

        Eligibility status of the Shopping Ads program.

        :param eligibility_status: The eligibility_status of this ShoppingAdsProgramStatusRegionStatus.
        :type eligibility_status: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "APPROVED", "DISAPPROVED", "WARNING", "UNDER_REVIEW", "PENDING_REVIEW", "ONBOARDING"]  # noqa: E501
        if eligibility_status not in allowed_values:
            raise ValueError(
                "Invalid value for `eligibility_status` ({0}), must be one of {1}"
                .format(eligibility_status, allowed_values)
            )

        self._eligibility_status = eligibility_status

    @property
    def onboarding_issues(self):
        """Gets the onboarding_issues of this ShoppingAdsProgramStatusRegionStatus.

        Issues that must be fixed to be eligible for review.

        :return: The onboarding_issues of this ShoppingAdsProgramStatusRegionStatus.
        :rtype: List[str]
        """
        return self._onboarding_issues

    @onboarding_issues.setter
    def onboarding_issues(self, onboarding_issues):
        """Sets the onboarding_issues of this ShoppingAdsProgramStatusRegionStatus.

        Issues that must be fixed to be eligible for review.

        :param onboarding_issues: The onboarding_issues of this ShoppingAdsProgramStatusRegionStatus.
        :type onboarding_issues: List[str]
        """

        self._onboarding_issues = onboarding_issues

    @property
    def region_codes(self):
        """Gets the region_codes of this ShoppingAdsProgramStatusRegionStatus.

        The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) codes for all the regions with the same `eligibilityStatus` and `reviewEligibility`.

        :return: The region_codes of this ShoppingAdsProgramStatusRegionStatus.
        :rtype: List[str]
        """
        return self._region_codes

    @region_codes.setter
    def region_codes(self, region_codes):
        """Sets the region_codes of this ShoppingAdsProgramStatusRegionStatus.

        The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) codes for all the regions with the same `eligibilityStatus` and `reviewEligibility`.

        :param region_codes: The region_codes of this ShoppingAdsProgramStatusRegionStatus.
        :type region_codes: List[str]
        """

        self._region_codes = region_codes

    @property
    def review_eligibility_status(self):
        """Gets the review_eligibility_status of this ShoppingAdsProgramStatusRegionStatus.

        If a program is eligible for review in a specific region. Only visible if `eligibilityStatus` is `DISAPPROVED`.

        :return: The review_eligibility_status of this ShoppingAdsProgramStatusRegionStatus.
        :rtype: str
        """
        return self._review_eligibility_status

    @review_eligibility_status.setter
    def review_eligibility_status(self, review_eligibility_status):
        """Sets the review_eligibility_status of this ShoppingAdsProgramStatusRegionStatus.

        If a program is eligible for review in a specific region. Only visible if `eligibilityStatus` is `DISAPPROVED`.

        :param review_eligibility_status: The review_eligibility_status of this ShoppingAdsProgramStatusRegionStatus.
        :type review_eligibility_status: str
        """
        allowed_values = ["REVIEW_ELIGIBILITY_UNSPECIFIED", "ELIGIBLE", "INELIGIBLE"]  # noqa: E501
        if review_eligibility_status not in allowed_values:
            raise ValueError(
                "Invalid value for `review_eligibility_status` ({0}), must be one of {1}"
                .format(review_eligibility_status, allowed_values)
            )

        self._review_eligibility_status = review_eligibility_status

    @property
    def review_ineligibility_reason(self):
        """Gets the review_ineligibility_reason of this ShoppingAdsProgramStatusRegionStatus.

        Review ineligibility reason if account is not eligible for review.

        :return: The review_ineligibility_reason of this ShoppingAdsProgramStatusRegionStatus.
        :rtype: str
        """
        return self._review_ineligibility_reason

    @review_ineligibility_reason.setter
    def review_ineligibility_reason(self, review_ineligibility_reason):
        """Sets the review_ineligibility_reason of this ShoppingAdsProgramStatusRegionStatus.

        Review ineligibility reason if account is not eligible for review.

        :param review_ineligibility_reason: The review_ineligibility_reason of this ShoppingAdsProgramStatusRegionStatus.
        :type review_ineligibility_reason: str
        """
        allowed_values = ["REVIEW_INELIGIBILITY_REASON_UNSPECIFIED", "ONBOARDING_ISSUES", "NOT_ENOUGH_OFFERS", "IN_COOLDOWN_PERIOD", "ALREADY_UNDER_REVIEW", "NO_REVIEW_REQUIRED", "WILL_BE_REVIEWED_AUTOMATICALLY", "IS_RETIRED", "ALREADY_REVIEWED"]  # noqa: E501
        if review_ineligibility_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `review_ineligibility_reason` ({0}), must be one of {1}"
                .format(review_ineligibility_reason, allowed_values)
            )

        self._review_ineligibility_reason = review_ineligibility_reason

    @property
    def review_ineligibility_reason_description(self):
        """Gets the review_ineligibility_reason_description of this ShoppingAdsProgramStatusRegionStatus.

        Reason a program in a specific region isn’t eligible for review. Only visible if `reviewEligibilityStatus` is `INELIGIBLE`.

        :return: The review_ineligibility_reason_description of this ShoppingAdsProgramStatusRegionStatus.
        :rtype: str
        """
        return self._review_ineligibility_reason_description

    @review_ineligibility_reason_description.setter
    def review_ineligibility_reason_description(self, review_ineligibility_reason_description):
        """Sets the review_ineligibility_reason_description of this ShoppingAdsProgramStatusRegionStatus.

        Reason a program in a specific region isn’t eligible for review. Only visible if `reviewEligibilityStatus` is `INELIGIBLE`.

        :param review_ineligibility_reason_description: The review_ineligibility_reason_description of this ShoppingAdsProgramStatusRegionStatus.
        :type review_ineligibility_reason_description: str
        """

        self._review_ineligibility_reason_description = review_ineligibility_reason_description

    @property
    def review_ineligibility_reason_details(self):
        """Gets the review_ineligibility_reason_details of this ShoppingAdsProgramStatusRegionStatus.


        :return: The review_ineligibility_reason_details of this ShoppingAdsProgramStatusRegionStatus.
        :rtype: ShoppingAdsProgramStatusReviewIneligibilityReasonDetails
        """
        return self._review_ineligibility_reason_details

    @review_ineligibility_reason_details.setter
    def review_ineligibility_reason_details(self, review_ineligibility_reason_details):
        """Sets the review_ineligibility_reason_details of this ShoppingAdsProgramStatusRegionStatus.


        :param review_ineligibility_reason_details: The review_ineligibility_reason_details of this ShoppingAdsProgramStatusRegionStatus.
        :type review_ineligibility_reason_details: ShoppingAdsProgramStatusReviewIneligibilityReasonDetails
        """

        self._review_ineligibility_reason_details = review_ineligibility_reason_details

    @property
    def review_issues(self):
        """Gets the review_issues of this ShoppingAdsProgramStatusRegionStatus.

        Issues evaluated in the review process. Fix all issues before requesting a review.

        :return: The review_issues of this ShoppingAdsProgramStatusRegionStatus.
        :rtype: List[str]
        """
        return self._review_issues

    @review_issues.setter
    def review_issues(self, review_issues):
        """Sets the review_issues of this ShoppingAdsProgramStatusRegionStatus.

        Issues evaluated in the review process. Fix all issues before requesting a review.

        :param review_issues: The review_issues of this ShoppingAdsProgramStatusRegionStatus.
        :type review_issues: List[str]
        """

        self._review_issues = review_issues
