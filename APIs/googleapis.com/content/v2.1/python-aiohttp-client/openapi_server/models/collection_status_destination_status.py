# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CollectionStatusDestinationStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approved_countries: List[str]=None, destination: str=None, disapproved_countries: List[str]=None, pending_countries: List[str]=None, status: str=None):
        """CollectionStatusDestinationStatus - a model defined in OpenAPI

        :param approved_countries: The approved_countries of this CollectionStatusDestinationStatus.
        :param destination: The destination of this CollectionStatusDestinationStatus.
        :param disapproved_countries: The disapproved_countries of this CollectionStatusDestinationStatus.
        :param pending_countries: The pending_countries of this CollectionStatusDestinationStatus.
        :param status: The status of this CollectionStatusDestinationStatus.
        """
        self.openapi_types = {
            'approved_countries': List[str],
            'destination': str,
            'disapproved_countries': List[str],
            'pending_countries': List[str],
            'status': str
        }

        self.attribute_map = {
            'approved_countries': 'approvedCountries',
            'destination': 'destination',
            'disapproved_countries': 'disapprovedCountries',
            'pending_countries': 'pendingCountries',
            'status': 'status'
        }

        self._approved_countries = approved_countries
        self._destination = destination
        self._disapproved_countries = disapproved_countries
        self._pending_countries = pending_countries
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectionStatusDestinationStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollectionStatusDestinationStatus of this CollectionStatusDestinationStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approved_countries(self):
        """Gets the approved_countries of this CollectionStatusDestinationStatus.

        Country codes (ISO 3166-1 alpha-2) where the collection is approved.

        :return: The approved_countries of this CollectionStatusDestinationStatus.
        :rtype: List[str]
        """
        return self._approved_countries

    @approved_countries.setter
    def approved_countries(self, approved_countries):
        """Sets the approved_countries of this CollectionStatusDestinationStatus.

        Country codes (ISO 3166-1 alpha-2) where the collection is approved.

        :param approved_countries: The approved_countries of this CollectionStatusDestinationStatus.
        :type approved_countries: List[str]
        """

        self._approved_countries = approved_countries

    @property
    def destination(self):
        """Gets the destination of this CollectionStatusDestinationStatus.

        The name of the destination

        :return: The destination of this CollectionStatusDestinationStatus.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this CollectionStatusDestinationStatus.

        The name of the destination

        :param destination: The destination of this CollectionStatusDestinationStatus.
        :type destination: str
        """

        self._destination = destination

    @property
    def disapproved_countries(self):
        """Gets the disapproved_countries of this CollectionStatusDestinationStatus.

        Country codes (ISO 3166-1 alpha-2) where the collection is disapproved.

        :return: The disapproved_countries of this CollectionStatusDestinationStatus.
        :rtype: List[str]
        """
        return self._disapproved_countries

    @disapproved_countries.setter
    def disapproved_countries(self, disapproved_countries):
        """Sets the disapproved_countries of this CollectionStatusDestinationStatus.

        Country codes (ISO 3166-1 alpha-2) where the collection is disapproved.

        :param disapproved_countries: The disapproved_countries of this CollectionStatusDestinationStatus.
        :type disapproved_countries: List[str]
        """

        self._disapproved_countries = disapproved_countries

    @property
    def pending_countries(self):
        """Gets the pending_countries of this CollectionStatusDestinationStatus.

        Country codes (ISO 3166-1 alpha-2) where the collection is pending approval.

        :return: The pending_countries of this CollectionStatusDestinationStatus.
        :rtype: List[str]
        """
        return self._pending_countries

    @pending_countries.setter
    def pending_countries(self, pending_countries):
        """Sets the pending_countries of this CollectionStatusDestinationStatus.

        Country codes (ISO 3166-1 alpha-2) where the collection is pending approval.

        :param pending_countries: The pending_countries of this CollectionStatusDestinationStatus.
        :type pending_countries: List[str]
        """

        self._pending_countries = pending_countries

    @property
    def status(self):
        """Gets the status of this CollectionStatusDestinationStatus.

        The status for the specified destination in the collections target country.

        :return: The status of this CollectionStatusDestinationStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CollectionStatusDestinationStatus.

        The status for the specified destination in the collections target country.

        :param status: The status of this CollectionStatusDestinationStatus.
        :type status: str
        """

        self._status = status
