# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recommendation_call_to_action import RecommendationCallToAction
from openapi_server.models.recommendation_creative import RecommendationCreative
from openapi_server.models.recommendation_description import RecommendationDescription
from openapi_server import util


class Recommendation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_call_to_action: List[RecommendationCallToAction]=None, additional_descriptions: List[RecommendationDescription]=None, creative: List[RecommendationCreative]=None, default_call_to_action: RecommendationCallToAction=None, default_description: str=None, numerical_impact: int=None, paid: bool=None, recommendation_name: str=None, sub_type: str=None, title: str=None, type: str=None):
        """Recommendation - a model defined in OpenAPI

        :param additional_call_to_action: The additional_call_to_action of this Recommendation.
        :param additional_descriptions: The additional_descriptions of this Recommendation.
        :param creative: The creative of this Recommendation.
        :param default_call_to_action: The default_call_to_action of this Recommendation.
        :param default_description: The default_description of this Recommendation.
        :param numerical_impact: The numerical_impact of this Recommendation.
        :param paid: The paid of this Recommendation.
        :param recommendation_name: The recommendation_name of this Recommendation.
        :param sub_type: The sub_type of this Recommendation.
        :param title: The title of this Recommendation.
        :param type: The type of this Recommendation.
        """
        self.openapi_types = {
            'additional_call_to_action': List[RecommendationCallToAction],
            'additional_descriptions': List[RecommendationDescription],
            'creative': List[RecommendationCreative],
            'default_call_to_action': RecommendationCallToAction,
            'default_description': str,
            'numerical_impact': int,
            'paid': bool,
            'recommendation_name': str,
            'sub_type': str,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'additional_call_to_action': 'additionalCallToAction',
            'additional_descriptions': 'additionalDescriptions',
            'creative': 'creative',
            'default_call_to_action': 'defaultCallToAction',
            'default_description': 'defaultDescription',
            'numerical_impact': 'numericalImpact',
            'paid': 'paid',
            'recommendation_name': 'recommendationName',
            'sub_type': 'subType',
            'title': 'title',
            'type': 'type'
        }

        self._additional_call_to_action = additional_call_to_action
        self._additional_descriptions = additional_descriptions
        self._creative = creative
        self._default_call_to_action = default_call_to_action
        self._default_description = default_description
        self._numerical_impact = numerical_impact
        self._paid = paid
        self._recommendation_name = recommendation_name
        self._sub_type = sub_type
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Recommendation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Recommendation of this Recommendation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_call_to_action(self):
        """Gets the additional_call_to_action of this Recommendation.

        Output only. CTAs of this recommendation. Repeated.

        :return: The additional_call_to_action of this Recommendation.
        :rtype: List[RecommendationCallToAction]
        """
        return self._additional_call_to_action

    @additional_call_to_action.setter
    def additional_call_to_action(self, additional_call_to_action):
        """Sets the additional_call_to_action of this Recommendation.

        Output only. CTAs of this recommendation. Repeated.

        :param additional_call_to_action: The additional_call_to_action of this Recommendation.
        :type additional_call_to_action: List[RecommendationCallToAction]
        """

        self._additional_call_to_action = additional_call_to_action

    @property
    def additional_descriptions(self):
        """Gets the additional_descriptions of this Recommendation.

        Output only. List of additional localized descriptions for a recommendation. Localication uses the `languageCode` field in `GenerateRecommendations` requests. Not all description types are guaranteed to be present and we recommend to rely on default description.

        :return: The additional_descriptions of this Recommendation.
        :rtype: List[RecommendationDescription]
        """
        return self._additional_descriptions

    @additional_descriptions.setter
    def additional_descriptions(self, additional_descriptions):
        """Sets the additional_descriptions of this Recommendation.

        Output only. List of additional localized descriptions for a recommendation. Localication uses the `languageCode` field in `GenerateRecommendations` requests. Not all description types are guaranteed to be present and we recommend to rely on default description.

        :param additional_descriptions: The additional_descriptions of this Recommendation.
        :type additional_descriptions: List[RecommendationDescription]
        """

        self._additional_descriptions = additional_descriptions

    @property
    def creative(self):
        """Gets the creative of this Recommendation.

        Output only. Any creatives attached to the recommendation. Repeated.

        :return: The creative of this Recommendation.
        :rtype: List[RecommendationCreative]
        """
        return self._creative

    @creative.setter
    def creative(self, creative):
        """Sets the creative of this Recommendation.

        Output only. Any creatives attached to the recommendation. Repeated.

        :param creative: The creative of this Recommendation.
        :type creative: List[RecommendationCreative]
        """

        self._creative = creative

    @property
    def default_call_to_action(self):
        """Gets the default_call_to_action of this Recommendation.


        :return: The default_call_to_action of this Recommendation.
        :rtype: RecommendationCallToAction
        """
        return self._default_call_to_action

    @default_call_to_action.setter
    def default_call_to_action(self, default_call_to_action):
        """Sets the default_call_to_action of this Recommendation.


        :param default_call_to_action: The default_call_to_action of this Recommendation.
        :type default_call_to_action: RecommendationCallToAction
        """

        self._default_call_to_action = default_call_to_action

    @property
    def default_description(self):
        """Gets the default_description of this Recommendation.

        Optional. Localized recommendation description. The localization the {@link `GenerateRecommendationsRequest.language_code`} field in {@link `GenerateRecommendationsRequest`} requests.

        :return: The default_description of this Recommendation.
        :rtype: str
        """
        return self._default_description

    @default_description.setter
    def default_description(self, default_description):
        """Sets the default_description of this Recommendation.

        Optional. Localized recommendation description. The localization the {@link `GenerateRecommendationsRequest.language_code`} field in {@link `GenerateRecommendationsRequest`} requests.

        :param default_description: The default_description of this Recommendation.
        :type default_description: str
        """

        self._default_description = default_description

    @property
    def numerical_impact(self):
        """Gets the numerical_impact of this Recommendation.

        Optional. A numerical score of the impact from the recommendation's description. For example, a recommendation might suggest an upward trend in sales for a certain product. Higher number means larger impact.

        :return: The numerical_impact of this Recommendation.
        :rtype: int
        """
        return self._numerical_impact

    @numerical_impact.setter
    def numerical_impact(self, numerical_impact):
        """Sets the numerical_impact of this Recommendation.

        Optional. A numerical score of the impact from the recommendation's description. For example, a recommendation might suggest an upward trend in sales for a certain product. Higher number means larger impact.

        :param numerical_impact: The numerical_impact of this Recommendation.
        :type numerical_impact: int
        """

        self._numerical_impact = numerical_impact

    @property
    def paid(self):
        """Gets the paid of this Recommendation.

        Optional. Indicates whether a user needs to pay when they complete the user journey suggested by the recommendation.

        :return: The paid of this Recommendation.
        :rtype: bool
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this Recommendation.

        Optional. Indicates whether a user needs to pay when they complete the user journey suggested by the recommendation.

        :param paid: The paid of this Recommendation.
        :type paid: bool
        """

        self._paid = paid

    @property
    def recommendation_name(self):
        """Gets the recommendation_name of this Recommendation.

        Optional. Localized recommendation name. The localization uses the {@link `GenerateRecommendationsRequest.language_code`} field in {@link `GenerateRecommendationsRequest`} requests.

        :return: The recommendation_name of this Recommendation.
        :rtype: str
        """
        return self._recommendation_name

    @recommendation_name.setter
    def recommendation_name(self, recommendation_name):
        """Sets the recommendation_name of this Recommendation.

        Optional. Localized recommendation name. The localization uses the {@link `GenerateRecommendationsRequest.language_code`} field in {@link `GenerateRecommendationsRequest`} requests.

        :param recommendation_name: The recommendation_name of this Recommendation.
        :type recommendation_name: str
        """

        self._recommendation_name = recommendation_name

    @property
    def sub_type(self):
        """Gets the sub_type of this Recommendation.

        Optional. Subtype of the recommendations. Only applicable when multiple recommendations can be generated per type, and is used as an identifier of recommendation under the same recommendation type.

        :return: The sub_type of this Recommendation.
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this Recommendation.

        Optional. Subtype of the recommendations. Only applicable when multiple recommendations can be generated per type, and is used as an identifier of recommendation under the same recommendation type.

        :param sub_type: The sub_type of this Recommendation.
        :type sub_type: str
        """

        self._sub_type = sub_type

    @property
    def title(self):
        """Gets the title of this Recommendation.

        Optional. Localized Recommendation Title. Localization uses the {@link `GenerateRecommendationsRequest.language_code`} field in {@link `GenerateRecommendationsRequest`} requests.

        :return: The title of this Recommendation.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Recommendation.

        Optional. Localized Recommendation Title. Localization uses the {@link `GenerateRecommendationsRequest.language_code`} field in {@link `GenerateRecommendationsRequest`} requests.

        :param title: The title of this Recommendation.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Recommendation.

        Output only. Type of the recommendation. List of currently available recommendation types: - OPPORTUNITY_CREATE_NEW_COLLECTION - OPPORTUNITY_CREATE_EMAIL_CAMPAIGN

        :return: The type of this Recommendation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Recommendation.

        Output only. Type of the recommendation. List of currently available recommendation types: - OPPORTUNITY_CREATE_NEW_COLLECTION - OPPORTUNITY_CREATE_EMAIL_CAMPAIGN

        :param type: The type of this Recommendation.
        :type type: str
        """

        self._type = type
