# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatafeedTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, excluded_destinations: List[str]=None, feed_label: str=None, included_destinations: List[str]=None, language: str=None, target_countries: List[str]=None):
        """DatafeedTarget - a model defined in OpenAPI

        :param country: The country of this DatafeedTarget.
        :param excluded_destinations: The excluded_destinations of this DatafeedTarget.
        :param feed_label: The feed_label of this DatafeedTarget.
        :param included_destinations: The included_destinations of this DatafeedTarget.
        :param language: The language of this DatafeedTarget.
        :param target_countries: The target_countries of this DatafeedTarget.
        """
        self.openapi_types = {
            'country': str,
            'excluded_destinations': List[str],
            'feed_label': str,
            'included_destinations': List[str],
            'language': str,
            'target_countries': List[str]
        }

        self.attribute_map = {
            'country': 'country',
            'excluded_destinations': 'excludedDestinations',
            'feed_label': 'feedLabel',
            'included_destinations': 'includedDestinations',
            'language': 'language',
            'target_countries': 'targetCountries'
        }

        self._country = country
        self._excluded_destinations = excluded_destinations
        self._feed_label = feed_label
        self._included_destinations = included_destinations
        self._language = language
        self._target_countries = target_countries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatafeedTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatafeedTarget of this DatafeedTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this DatafeedTarget.

        Deprecated. Use `feedLabel` instead. The country where the items in the feed will be included in the search index, represented as a CLDR territory code.

        :return: The country of this DatafeedTarget.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this DatafeedTarget.

        Deprecated. Use `feedLabel` instead. The country where the items in the feed will be included in the search index, represented as a CLDR territory code.

        :param country: The country of this DatafeedTarget.
        :type country: str
        """

        self._country = country

    @property
    def excluded_destinations(self):
        """Gets the excluded_destinations of this DatafeedTarget.

        The list of destinations to exclude for this target (corresponds to cleared check boxes in Merchant Center). Products that are excluded from all destinations for more than 7 days are automatically deleted.

        :return: The excluded_destinations of this DatafeedTarget.
        :rtype: List[str]
        """
        return self._excluded_destinations

    @excluded_destinations.setter
    def excluded_destinations(self, excluded_destinations):
        """Sets the excluded_destinations of this DatafeedTarget.

        The list of destinations to exclude for this target (corresponds to cleared check boxes in Merchant Center). Products that are excluded from all destinations for more than 7 days are automatically deleted.

        :param excluded_destinations: The excluded_destinations of this DatafeedTarget.
        :type excluded_destinations: List[str]
        """

        self._excluded_destinations = excluded_destinations

    @property
    def feed_label(self):
        """Gets the feed_label of this DatafeedTarget.

        Feed label for the DatafeedTarget. Either `country` or `feedLabel` is required. If both `feedLabel` and `country` is specified, the values must match. Must be less than or equal to 20 uppercase letters (A-Z), numbers (0-9), and dashes (-).

        :return: The feed_label of this DatafeedTarget.
        :rtype: str
        """
        return self._feed_label

    @feed_label.setter
    def feed_label(self, feed_label):
        """Sets the feed_label of this DatafeedTarget.

        Feed label for the DatafeedTarget. Either `country` or `feedLabel` is required. If both `feedLabel` and `country` is specified, the values must match. Must be less than or equal to 20 uppercase letters (A-Z), numbers (0-9), and dashes (-).

        :param feed_label: The feed_label of this DatafeedTarget.
        :type feed_label: str
        """

        self._feed_label = feed_label

    @property
    def included_destinations(self):
        """Gets the included_destinations of this DatafeedTarget.

        The list of destinations to include for this target (corresponds to checked check boxes in Merchant Center). Default destinations are always included unless provided in `excludedDestinations`.

        :return: The included_destinations of this DatafeedTarget.
        :rtype: List[str]
        """
        return self._included_destinations

    @included_destinations.setter
    def included_destinations(self, included_destinations):
        """Sets the included_destinations of this DatafeedTarget.

        The list of destinations to include for this target (corresponds to checked check boxes in Merchant Center). Default destinations are always included unless provided in `excludedDestinations`.

        :param included_destinations: The included_destinations of this DatafeedTarget.
        :type included_destinations: List[str]
        """

        self._included_destinations = included_destinations

    @property
    def language(self):
        """Gets the language of this DatafeedTarget.

        The two-letter ISO 639-1 language of the items in the feed. Must be a valid language for `targets[].country`.

        :return: The language of this DatafeedTarget.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this DatafeedTarget.

        The two-letter ISO 639-1 language of the items in the feed. Must be a valid language for `targets[].country`.

        :param language: The language of this DatafeedTarget.
        :type language: str
        """

        self._language = language

    @property
    def target_countries(self):
        """Gets the target_countries of this DatafeedTarget.

        The countries where the items may be displayed. Represented as a CLDR territory code. Will be ignored for \"product inventory\" feeds.

        :return: The target_countries of this DatafeedTarget.
        :rtype: List[str]
        """
        return self._target_countries

    @target_countries.setter
    def target_countries(self, target_countries):
        """Sets the target_countries of this DatafeedTarget.

        The countries where the items may be displayed. Represented as a CLDR territory code. Will be ignored for \"product inventory\" feeds.

        :param target_countries: The target_countries of this DatafeedTarget.
        :type target_countries: List[str]
        """

        self._target_countries = target_countries
