# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountShippingImprovements(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_shipping_improvements: bool=None):
        """AccountShippingImprovements - a model defined in OpenAPI

        :param allow_shipping_improvements: The allow_shipping_improvements of this AccountShippingImprovements.
        """
        self.openapi_types = {
            'allow_shipping_improvements': bool
        }

        self.attribute_map = {
            'allow_shipping_improvements': 'allowShippingImprovements'
        }

        self._allow_shipping_improvements = allow_shipping_improvements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountShippingImprovements':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountShippingImprovements of this AccountShippingImprovements.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_shipping_improvements(self):
        """Gets the allow_shipping_improvements of this AccountShippingImprovements.

        Enables automatic shipping improvements.

        :return: The allow_shipping_improvements of this AccountShippingImprovements.
        :rtype: bool
        """
        return self._allow_shipping_improvements

    @allow_shipping_improvements.setter
    def allow_shipping_improvements(self, allow_shipping_improvements):
        """Sets the allow_shipping_improvements of this AccountShippingImprovements.

        Enables automatic shipping improvements.

        :param allow_shipping_improvements: The allow_shipping_improvements of this AccountShippingImprovements.
        :type allow_shipping_improvements: bool
        """

        self._allow_shipping_improvements = allow_shipping_improvements
