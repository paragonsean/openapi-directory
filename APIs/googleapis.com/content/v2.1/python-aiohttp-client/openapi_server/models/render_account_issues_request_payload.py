# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RenderAccountIssuesRequestPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_option: str=None):
        """RenderAccountIssuesRequestPayload - a model defined in OpenAPI

        :param content_option: The content_option of this RenderAccountIssuesRequestPayload.
        """
        self.openapi_types = {
            'content_option': str
        }

        self.attribute_map = {
            'content_option': 'contentOption'
        }

        self._content_option = content_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RenderAccountIssuesRequestPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RenderAccountIssuesRequestPayload of this RenderAccountIssuesRequestPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_option(self):
        """Gets the content_option of this RenderAccountIssuesRequestPayload.

        Optional. How the detailed content should be returned. Default option is to return the content as a pre-rendered HTML text.

        :return: The content_option of this RenderAccountIssuesRequestPayload.
        :rtype: str
        """
        return self._content_option

    @content_option.setter
    def content_option(self, content_option):
        """Sets the content_option of this RenderAccountIssuesRequestPayload.

        Optional. How the detailed content should be returned. Default option is to return the content as a pre-rendered HTML text.

        :param content_option: The content_option of this RenderAccountIssuesRequestPayload.
        :type content_option: str
        """
        allowed_values = ["CONTENT_OPTION_UNSPECIFIED", "PRE_RENDERED_HTML"]  # noqa: E501
        if content_option not in allowed_values:
            raise ValueError(
                "Invalid value for `content_option` ({0}), must be one of {1}"
                .format(content_option, allowed_values)
            )

        self._content_option = content_option
