# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class CompetitiveVisibility(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ads_organic_ratio: float=None, category_benchmark_visibility_trend: float=None, category_id: str=None, country_code: str=None, _date: ModelDate=None, domain: str=None, higher_position_rate: float=None, is_your_domain: bool=None, page_overlap_rate: float=None, rank: str=None, relative_visibility: float=None, traffic_source: str=None, your_domain_visibility_trend: float=None):
        """CompetitiveVisibility - a model defined in OpenAPI

        :param ads_organic_ratio: The ads_organic_ratio of this CompetitiveVisibility.
        :param category_benchmark_visibility_trend: The category_benchmark_visibility_trend of this CompetitiveVisibility.
        :param category_id: The category_id of this CompetitiveVisibility.
        :param country_code: The country_code of this CompetitiveVisibility.
        :param _date: The _date of this CompetitiveVisibility.
        :param domain: The domain of this CompetitiveVisibility.
        :param higher_position_rate: The higher_position_rate of this CompetitiveVisibility.
        :param is_your_domain: The is_your_domain of this CompetitiveVisibility.
        :param page_overlap_rate: The page_overlap_rate of this CompetitiveVisibility.
        :param rank: The rank of this CompetitiveVisibility.
        :param relative_visibility: The relative_visibility of this CompetitiveVisibility.
        :param traffic_source: The traffic_source of this CompetitiveVisibility.
        :param your_domain_visibility_trend: The your_domain_visibility_trend of this CompetitiveVisibility.
        """
        self.openapi_types = {
            'ads_organic_ratio': float,
            'category_benchmark_visibility_trend': float,
            'category_id': str,
            'country_code': str,
            '_date': ModelDate,
            'domain': str,
            'higher_position_rate': float,
            'is_your_domain': bool,
            'page_overlap_rate': float,
            'rank': str,
            'relative_visibility': float,
            'traffic_source': str,
            'your_domain_visibility_trend': float
        }

        self.attribute_map = {
            'ads_organic_ratio': 'adsOrganicRatio',
            'category_benchmark_visibility_trend': 'categoryBenchmarkVisibilityTrend',
            'category_id': 'categoryId',
            'country_code': 'countryCode',
            '_date': 'date',
            'domain': 'domain',
            'higher_position_rate': 'higherPositionRate',
            'is_your_domain': 'isYourDomain',
            'page_overlap_rate': 'pageOverlapRate',
            'rank': 'rank',
            'relative_visibility': 'relativeVisibility',
            'traffic_source': 'trafficSource',
            'your_domain_visibility_trend': 'yourDomainVisibilityTrend'
        }

        self._ads_organic_ratio = ads_organic_ratio
        self._category_benchmark_visibility_trend = category_benchmark_visibility_trend
        self._category_id = category_id
        self._country_code = country_code
        self.__date = _date
        self._domain = domain
        self._higher_position_rate = higher_position_rate
        self._is_your_domain = is_your_domain
        self._page_overlap_rate = page_overlap_rate
        self._rank = rank
        self._relative_visibility = relative_visibility
        self._traffic_source = traffic_source
        self._your_domain_visibility_trend = your_domain_visibility_trend

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompetitiveVisibility':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompetitiveVisibility of this CompetitiveVisibility.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ads_organic_ratio(self):
        """Gets the ads_organic_ratio of this CompetitiveVisibility.

        [Ads / organic ratio] (https://support.google.com/merchants/answer/11366442#zippy=%2Cadsfree-ratio) shows how often a merchant receives impressions from Shopping ads compared to organic traffic. The number is rounded and bucketed. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.

        :return: The ads_organic_ratio of this CompetitiveVisibility.
        :rtype: float
        """
        return self._ads_organic_ratio

    @ads_organic_ratio.setter
    def ads_organic_ratio(self, ads_organic_ratio):
        """Sets the ads_organic_ratio of this CompetitiveVisibility.

        [Ads / organic ratio] (https://support.google.com/merchants/answer/11366442#zippy=%2Cadsfree-ratio) shows how often a merchant receives impressions from Shopping ads compared to organic traffic. The number is rounded and bucketed. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.

        :param ads_organic_ratio: The ads_organic_ratio of this CompetitiveVisibility.
        :type ads_organic_ratio: float
        """

        self._ads_organic_ratio = ads_organic_ratio

    @property
    def category_benchmark_visibility_trend(self):
        """Gets the category_benchmark_visibility_trend of this CompetitiveVisibility.

        Change in visibility based on impressions with respect to the start of the selected time range (or first day with non-zero impressions) for a combined set of merchants with highest visibility approximating the market. Available only in `CompetitiveVisibilityBenchmarkView`. Cannot be filtered on in the 'WHERE' clause.

        :return: The category_benchmark_visibility_trend of this CompetitiveVisibility.
        :rtype: float
        """
        return self._category_benchmark_visibility_trend

    @category_benchmark_visibility_trend.setter
    def category_benchmark_visibility_trend(self, category_benchmark_visibility_trend):
        """Sets the category_benchmark_visibility_trend of this CompetitiveVisibility.

        Change in visibility based on impressions with respect to the start of the selected time range (or first day with non-zero impressions) for a combined set of merchants with highest visibility approximating the market. Available only in `CompetitiveVisibilityBenchmarkView`. Cannot be filtered on in the 'WHERE' clause.

        :param category_benchmark_visibility_trend: The category_benchmark_visibility_trend of this CompetitiveVisibility.
        :type category_benchmark_visibility_trend: float
        """

        self._category_benchmark_visibility_trend = category_benchmark_visibility_trend

    @property
    def category_id(self):
        """Gets the category_id of this CompetitiveVisibility.

        Google product category ID to calculate the report for, represented in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436). Required in the `SELECT` clause. A `WHERE` condition on `competitive_visibility.category_id` is required in the query.

        :return: The category_id of this CompetitiveVisibility.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this CompetitiveVisibility.

        Google product category ID to calculate the report for, represented in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436). Required in the `SELECT` clause. A `WHERE` condition on `competitive_visibility.category_id` is required in the query.

        :param category_id: The category_id of this CompetitiveVisibility.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def country_code(self):
        """Gets the country_code of this CompetitiveVisibility.

        The country where impression appeared. Required in the `SELECT` clause. A `WHERE` condition on `competitive_visibility.country_code` is required in the query.

        :return: The country_code of this CompetitiveVisibility.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this CompetitiveVisibility.

        The country where impression appeared. Required in the `SELECT` clause. A `WHERE` condition on `competitive_visibility.country_code` is required in the query.

        :param country_code: The country_code of this CompetitiveVisibility.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def _date(self):
        """Gets the _date of this CompetitiveVisibility.


        :return: The _date of this CompetitiveVisibility.
        :rtype: ModelDate
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CompetitiveVisibility.


        :param _date: The _date of this CompetitiveVisibility.
        :type _date: ModelDate
        """

        self.__date = _date

    @property
    def domain(self):
        """Gets the domain of this CompetitiveVisibility.

        Domain of your competitor or your domain, if 'is_your_domain' is true. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Required in the `SELECT` clause for `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.

        :return: The domain of this CompetitiveVisibility.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CompetitiveVisibility.

        Domain of your competitor or your domain, if 'is_your_domain' is true. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Required in the `SELECT` clause for `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.

        :param domain: The domain of this CompetitiveVisibility.
        :type domain: str
        """

        self._domain = domain

    @property
    def higher_position_rate(self):
        """Gets the higher_position_rate of this CompetitiveVisibility.

        Higher position rate shows how often a competitor’s offer got placed in a higher position on the page than your offer. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.

        :return: The higher_position_rate of this CompetitiveVisibility.
        :rtype: float
        """
        return self._higher_position_rate

    @higher_position_rate.setter
    def higher_position_rate(self, higher_position_rate):
        """Sets the higher_position_rate of this CompetitiveVisibility.

        Higher position rate shows how often a competitor’s offer got placed in a higher position on the page than your offer. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.

        :param higher_position_rate: The higher_position_rate of this CompetitiveVisibility.
        :type higher_position_rate: float
        """

        self._higher_position_rate = higher_position_rate

    @property
    def is_your_domain(self):
        """Gets the is_your_domain of this CompetitiveVisibility.

        True if this row contains data for your domain. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.

        :return: The is_your_domain of this CompetitiveVisibility.
        :rtype: bool
        """
        return self._is_your_domain

    @is_your_domain.setter
    def is_your_domain(self, is_your_domain):
        """Sets the is_your_domain of this CompetitiveVisibility.

        True if this row contains data for your domain. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.

        :param is_your_domain: The is_your_domain of this CompetitiveVisibility.
        :type is_your_domain: bool
        """

        self._is_your_domain = is_your_domain

    @property
    def page_overlap_rate(self):
        """Gets the page_overlap_rate of this CompetitiveVisibility.

        Page overlap rate describes how frequently competing retailers’ offers are shown together with your offers on the same page. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.

        :return: The page_overlap_rate of this CompetitiveVisibility.
        :rtype: float
        """
        return self._page_overlap_rate

    @page_overlap_rate.setter
    def page_overlap_rate(self, page_overlap_rate):
        """Sets the page_overlap_rate of this CompetitiveVisibility.

        Page overlap rate describes how frequently competing retailers’ offers are shown together with your offers on the same page. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.

        :param page_overlap_rate: The page_overlap_rate of this CompetitiveVisibility.
        :type page_overlap_rate: float
        """

        self._page_overlap_rate = page_overlap_rate

    @property
    def rank(self):
        """Gets the rank of this CompetitiveVisibility.

        Position of the domain in the top merchants ranking for the selected keys (`date`, `category_id`, `country_code`, `listing_type`) based on impressions. 1 is the highest. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.

        :return: The rank of this CompetitiveVisibility.
        :rtype: str
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this CompetitiveVisibility.

        Position of the domain in the top merchants ranking for the selected keys (`date`, `category_id`, `country_code`, `listing_type`) based on impressions. 1 is the highest. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.

        :param rank: The rank of this CompetitiveVisibility.
        :type rank: str
        """

        self._rank = rank

    @property
    def relative_visibility(self):
        """Gets the relative_visibility of this CompetitiveVisibility.

        Relative visibility shows how often your competitors’ offers are shown compared to your offers. In other words, this is the number of displayed impressions of a competitor retailer divided by the number of your displayed impressions during a selected time range for a selected product category and country. Available only in `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.

        :return: The relative_visibility of this CompetitiveVisibility.
        :rtype: float
        """
        return self._relative_visibility

    @relative_visibility.setter
    def relative_visibility(self, relative_visibility):
        """Sets the relative_visibility of this CompetitiveVisibility.

        Relative visibility shows how often your competitors’ offers are shown compared to your offers. In other words, this is the number of displayed impressions of a competitor retailer divided by the number of your displayed impressions during a selected time range for a selected product category and country. Available only in `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.

        :param relative_visibility: The relative_visibility of this CompetitiveVisibility.
        :type relative_visibility: float
        """

        self._relative_visibility = relative_visibility

    @property
    def traffic_source(self):
        """Gets the traffic_source of this CompetitiveVisibility.

        Type of impression listing. Required in the `SELECT` clause. Cannot be filtered on in the 'WHERE' clause.

        :return: The traffic_source of this CompetitiveVisibility.
        :rtype: str
        """
        return self._traffic_source

    @traffic_source.setter
    def traffic_source(self, traffic_source):
        """Sets the traffic_source of this CompetitiveVisibility.

        Type of impression listing. Required in the `SELECT` clause. Cannot be filtered on in the 'WHERE' clause.

        :param traffic_source: The traffic_source of this CompetitiveVisibility.
        :type traffic_source: str
        """
        allowed_values = ["UNKNOWN", "ORGANIC", "ADS", "ALL"]  # noqa: E501
        if traffic_source not in allowed_values:
            raise ValueError(
                "Invalid value for `traffic_source` ({0}), must be one of {1}"
                .format(traffic_source, allowed_values)
            )

        self._traffic_source = traffic_source

    @property
    def your_domain_visibility_trend(self):
        """Gets the your_domain_visibility_trend of this CompetitiveVisibility.

        Change in visibility based on impressions for your domain with respect to the start of the selected time range (or first day with non-zero impressions). Available only in `CompetitiveVisibilityBenchmarkView`. Cannot be filtered on in the 'WHERE' clause.

        :return: The your_domain_visibility_trend of this CompetitiveVisibility.
        :rtype: float
        """
        return self._your_domain_visibility_trend

    @your_domain_visibility_trend.setter
    def your_domain_visibility_trend(self, your_domain_visibility_trend):
        """Sets the your_domain_visibility_trend of this CompetitiveVisibility.

        Change in visibility based on impressions for your domain with respect to the start of the selected time range (or first day with non-zero impressions). Available only in `CompetitiveVisibilityBenchmarkView`. Cannot be filtered on in the 'WHERE' clause.

        :param your_domain_visibility_trend: The your_domain_visibility_trend of this CompetitiveVisibility.
        :type your_domain_visibility_trend: float
        """

        self._your_domain_visibility_trend = your_domain_visibility_trend
