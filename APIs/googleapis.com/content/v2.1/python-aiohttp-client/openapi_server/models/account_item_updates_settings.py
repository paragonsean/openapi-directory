# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountItemUpdatesSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_availability_updates: bool=None, allow_condition_updates: bool=None, allow_price_updates: bool=None, allow_strict_availability_updates: bool=None):
        """AccountItemUpdatesSettings - a model defined in OpenAPI

        :param allow_availability_updates: The allow_availability_updates of this AccountItemUpdatesSettings.
        :param allow_condition_updates: The allow_condition_updates of this AccountItemUpdatesSettings.
        :param allow_price_updates: The allow_price_updates of this AccountItemUpdatesSettings.
        :param allow_strict_availability_updates: The allow_strict_availability_updates of this AccountItemUpdatesSettings.
        """
        self.openapi_types = {
            'allow_availability_updates': bool,
            'allow_condition_updates': bool,
            'allow_price_updates': bool,
            'allow_strict_availability_updates': bool
        }

        self.attribute_map = {
            'allow_availability_updates': 'allowAvailabilityUpdates',
            'allow_condition_updates': 'allowConditionUpdates',
            'allow_price_updates': 'allowPriceUpdates',
            'allow_strict_availability_updates': 'allowStrictAvailabilityUpdates'
        }

        self._allow_availability_updates = allow_availability_updates
        self._allow_condition_updates = allow_condition_updates
        self._allow_price_updates = allow_price_updates
        self._allow_strict_availability_updates = allow_strict_availability_updates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountItemUpdatesSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountItemUpdatesSettings of this AccountItemUpdatesSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_availability_updates(self):
        """Gets the allow_availability_updates of this AccountItemUpdatesSettings.

        If availability updates are enabled, any previous availability values get overwritten if Google finds an out-of-stock annotation on the offer's page. If additionally `allow_availability_updates` field is set to true, values get overwritten if Google finds an in-stock annotation on the offer’s page.

        :return: The allow_availability_updates of this AccountItemUpdatesSettings.
        :rtype: bool
        """
        return self._allow_availability_updates

    @allow_availability_updates.setter
    def allow_availability_updates(self, allow_availability_updates):
        """Sets the allow_availability_updates of this AccountItemUpdatesSettings.

        If availability updates are enabled, any previous availability values get overwritten if Google finds an out-of-stock annotation on the offer's page. If additionally `allow_availability_updates` field is set to true, values get overwritten if Google finds an in-stock annotation on the offer’s page.

        :param allow_availability_updates: The allow_availability_updates of this AccountItemUpdatesSettings.
        :type allow_availability_updates: bool
        """

        self._allow_availability_updates = allow_availability_updates

    @property
    def allow_condition_updates(self):
        """Gets the allow_condition_updates of this AccountItemUpdatesSettings.

        If condition updates are enabled, Google always updates item condition with the condition detected from the details of your product.

        :return: The allow_condition_updates of this AccountItemUpdatesSettings.
        :rtype: bool
        """
        return self._allow_condition_updates

    @allow_condition_updates.setter
    def allow_condition_updates(self, allow_condition_updates):
        """Sets the allow_condition_updates of this AccountItemUpdatesSettings.

        If condition updates are enabled, Google always updates item condition with the condition detected from the details of your product.

        :param allow_condition_updates: The allow_condition_updates of this AccountItemUpdatesSettings.
        :type allow_condition_updates: bool
        """

        self._allow_condition_updates = allow_condition_updates

    @property
    def allow_price_updates(self):
        """Gets the allow_price_updates of this AccountItemUpdatesSettings.

        If price updates are enabled, Google always updates the active price with the crawled information.

        :return: The allow_price_updates of this AccountItemUpdatesSettings.
        :rtype: bool
        """
        return self._allow_price_updates

    @allow_price_updates.setter
    def allow_price_updates(self, allow_price_updates):
        """Sets the allow_price_updates of this AccountItemUpdatesSettings.

        If price updates are enabled, Google always updates the active price with the crawled information.

        :param allow_price_updates: The allow_price_updates of this AccountItemUpdatesSettings.
        :type allow_price_updates: bool
        """

        self._allow_price_updates = allow_price_updates

    @property
    def allow_strict_availability_updates(self):
        """Gets the allow_strict_availability_updates of this AccountItemUpdatesSettings.

        If allow_availability_updates is enabled, items are automatically updated in all your Shopping target countries. By default, availability updates will only be applied to items that are 'out of stock' on your website but 'in stock' on Shopping. Set this to true to also update items that are 'in stock' on your website, but 'out of stock' on Google Shopping. In order for this field to have an effect, you must also allow availability updates.

        :return: The allow_strict_availability_updates of this AccountItemUpdatesSettings.
        :rtype: bool
        """
        return self._allow_strict_availability_updates

    @allow_strict_availability_updates.setter
    def allow_strict_availability_updates(self, allow_strict_availability_updates):
        """Sets the allow_strict_availability_updates of this AccountItemUpdatesSettings.

        If allow_availability_updates is enabled, items are automatically updated in all your Shopping target countries. By default, availability updates will only be applied to items that are 'out of stock' on your website but 'in stock' on Shopping. Set this to true to also update items that are 'in stock' on your website, but 'out of stock' on Google Shopping. In order for this field to have an effect, you must also allow availability updates.

        :param allow_strict_availability_updates: The allow_strict_availability_updates of this AccountItemUpdatesSettings.
        :type allow_strict_availability_updates: bool
        """

        self._allow_strict_availability_updates = allow_strict_availability_updates
