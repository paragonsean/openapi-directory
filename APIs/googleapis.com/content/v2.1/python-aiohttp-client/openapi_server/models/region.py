# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.region_geo_target_area import RegionGeoTargetArea
from openapi_server.models.region_postal_code_area import RegionPostalCodeArea
from openapi_server import util


class Region(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, geotarget_area: RegionGeoTargetArea=None, merchant_id: str=None, postal_code_area: RegionPostalCodeArea=None, region_id: str=None, regional_inventory_eligible: bool=None, shipping_eligible: bool=None):
        """Region - a model defined in OpenAPI

        :param display_name: The display_name of this Region.
        :param geotarget_area: The geotarget_area of this Region.
        :param merchant_id: The merchant_id of this Region.
        :param postal_code_area: The postal_code_area of this Region.
        :param region_id: The region_id of this Region.
        :param regional_inventory_eligible: The regional_inventory_eligible of this Region.
        :param shipping_eligible: The shipping_eligible of this Region.
        """
        self.openapi_types = {
            'display_name': str,
            'geotarget_area': RegionGeoTargetArea,
            'merchant_id': str,
            'postal_code_area': RegionPostalCodeArea,
            'region_id': str,
            'regional_inventory_eligible': bool,
            'shipping_eligible': bool
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'geotarget_area': 'geotargetArea',
            'merchant_id': 'merchantId',
            'postal_code_area': 'postalCodeArea',
            'region_id': 'regionId',
            'regional_inventory_eligible': 'regionalInventoryEligible',
            'shipping_eligible': 'shippingEligible'
        }

        self._display_name = display_name
        self._geotarget_area = geotarget_area
        self._merchant_id = merchant_id
        self._postal_code_area = postal_code_area
        self._region_id = region_id
        self._regional_inventory_eligible = regional_inventory_eligible
        self._shipping_eligible = shipping_eligible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Region':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Region of this Region.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this Region.

        The display name of the region.

        :return: The display_name of this Region.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Region.

        The display name of the region.

        :param display_name: The display_name of this Region.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def geotarget_area(self):
        """Gets the geotarget_area of this Region.


        :return: The geotarget_area of this Region.
        :rtype: RegionGeoTargetArea
        """
        return self._geotarget_area

    @geotarget_area.setter
    def geotarget_area(self, geotarget_area):
        """Sets the geotarget_area of this Region.


        :param geotarget_area: The geotarget_area of this Region.
        :type geotarget_area: RegionGeoTargetArea
        """

        self._geotarget_area = geotarget_area

    @property
    def merchant_id(self):
        """Gets the merchant_id of this Region.

        Output only. Immutable. Merchant that owns the region.

        :return: The merchant_id of this Region.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this Region.

        Output only. Immutable. Merchant that owns the region.

        :param merchant_id: The merchant_id of this Region.
        :type merchant_id: str
        """

        self._merchant_id = merchant_id

    @property
    def postal_code_area(self):
        """Gets the postal_code_area of this Region.


        :return: The postal_code_area of this Region.
        :rtype: RegionPostalCodeArea
        """
        return self._postal_code_area

    @postal_code_area.setter
    def postal_code_area(self, postal_code_area):
        """Sets the postal_code_area of this Region.


        :param postal_code_area: The postal_code_area of this Region.
        :type postal_code_area: RegionPostalCodeArea
        """

        self._postal_code_area = postal_code_area

    @property
    def region_id(self):
        """Gets the region_id of this Region.

        Output only. Immutable. The ID uniquely identifying each region.

        :return: The region_id of this Region.
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this Region.

        Output only. Immutable. The ID uniquely identifying each region.

        :param region_id: The region_id of this Region.
        :type region_id: str
        """

        self._region_id = region_id

    @property
    def regional_inventory_eligible(self):
        """Gets the regional_inventory_eligible of this Region.

        Output only. Indicates if the region is eligible to use in the Regional Inventory configuration.

        :return: The regional_inventory_eligible of this Region.
        :rtype: bool
        """
        return self._regional_inventory_eligible

    @regional_inventory_eligible.setter
    def regional_inventory_eligible(self, regional_inventory_eligible):
        """Sets the regional_inventory_eligible of this Region.

        Output only. Indicates if the region is eligible to use in the Regional Inventory configuration.

        :param regional_inventory_eligible: The regional_inventory_eligible of this Region.
        :type regional_inventory_eligible: bool
        """

        self._regional_inventory_eligible = regional_inventory_eligible

    @property
    def shipping_eligible(self):
        """Gets the shipping_eligible of this Region.

        Output only. Indicates if the region is eligible to use in the Shipping Services configuration.

        :return: The shipping_eligible of this Region.
        :rtype: bool
        """
        return self._shipping_eligible

    @shipping_eligible.setter
    def shipping_eligible(self, shipping_eligible):
        """Sets the shipping_eligible of this Region.

        Output only. Indicates if the region is eligible to use in the Shipping Services configuration.

        :param shipping_eligible: The shipping_eligible of this Region.
        :type shipping_eligible: bool
        """

        self._shipping_eligible = shipping_eligible
