# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountLabel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, description: str=None, label_id: str=None, label_type: str=None, name: str=None):
        """AccountLabel - a model defined in OpenAPI

        :param account_id: The account_id of this AccountLabel.
        :param description: The description of this AccountLabel.
        :param label_id: The label_id of this AccountLabel.
        :param label_type: The label_type of this AccountLabel.
        :param name: The name of this AccountLabel.
        """
        self.openapi_types = {
            'account_id': str,
            'description': str,
            'label_id': str,
            'label_type': str,
            'name': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'description': 'description',
            'label_id': 'labelId',
            'label_type': 'labelType',
            'name': 'name'
        }

        self._account_id = account_id
        self._description = description
        self._label_id = label_id
        self._label_type = label_type
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountLabel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountLabel of this AccountLabel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AccountLabel.

        Immutable. The ID of account this label belongs to.

        :return: The account_id of this AccountLabel.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountLabel.

        Immutable. The ID of account this label belongs to.

        :param account_id: The account_id of this AccountLabel.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def description(self):
        """Gets the description of this AccountLabel.

        The description of this label.

        :return: The description of this AccountLabel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountLabel.

        The description of this label.

        :param description: The description of this AccountLabel.
        :type description: str
        """

        self._description = description

    @property
    def label_id(self):
        """Gets the label_id of this AccountLabel.

        Output only. The ID of the label.

        :return: The label_id of this AccountLabel.
        :rtype: str
        """
        return self._label_id

    @label_id.setter
    def label_id(self, label_id):
        """Sets the label_id of this AccountLabel.

        Output only. The ID of the label.

        :param label_id: The label_id of this AccountLabel.
        :type label_id: str
        """

        self._label_id = label_id

    @property
    def label_type(self):
        """Gets the label_type of this AccountLabel.

        Output only. The type of this label.

        :return: The label_type of this AccountLabel.
        :rtype: str
        """
        return self._label_type

    @label_type.setter
    def label_type(self, label_type):
        """Sets the label_type of this AccountLabel.

        Output only. The type of this label.

        :param label_type: The label_type of this AccountLabel.
        :type label_type: str
        """
        allowed_values = ["LABEL_TYPE_UNSPECIFIED", "MANUAL", "AUTOMATIC"]  # noqa: E501
        if label_type not in allowed_values:
            raise ValueError(
                "Invalid value for `label_type` ({0}), must be one of {1}"
                .format(label_type, allowed_values)
            )

        self._label_type = label_type

    @property
    def name(self):
        """Gets the name of this AccountLabel.

        The display name of this label.

        :return: The name of this AccountLabel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountLabel.

        The display name of this label.

        :param name: The name of this AccountLabel.
        :type name: str
        """

        self._name = name
