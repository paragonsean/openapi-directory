# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_view_item_issue_item_issue_severity import ProductViewItemIssueItemIssueSeverity
from openapi_server.models.product_view_item_issue_item_issue_type import ProductViewItemIssueItemIssueType
from openapi_server import util


class ProductViewItemIssue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issue_type: ProductViewItemIssueItemIssueType=None, resolution: str=None, severity: ProductViewItemIssueItemIssueSeverity=None):
        """ProductViewItemIssue - a model defined in OpenAPI

        :param issue_type: The issue_type of this ProductViewItemIssue.
        :param resolution: The resolution of this ProductViewItemIssue.
        :param severity: The severity of this ProductViewItemIssue.
        """
        self.openapi_types = {
            'issue_type': ProductViewItemIssueItemIssueType,
            'resolution': str,
            'severity': ProductViewItemIssueItemIssueSeverity
        }

        self.attribute_map = {
            'issue_type': 'issueType',
            'resolution': 'resolution',
            'severity': 'severity'
        }

        self._issue_type = issue_type
        self._resolution = resolution
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductViewItemIssue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductViewItemIssue of this ProductViewItemIssue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issue_type(self):
        """Gets the issue_type of this ProductViewItemIssue.


        :return: The issue_type of this ProductViewItemIssue.
        :rtype: ProductViewItemIssueItemIssueType
        """
        return self._issue_type

    @issue_type.setter
    def issue_type(self, issue_type):
        """Sets the issue_type of this ProductViewItemIssue.


        :param issue_type: The issue_type of this ProductViewItemIssue.
        :type issue_type: ProductViewItemIssueItemIssueType
        """

        self._issue_type = issue_type

    @property
    def resolution(self):
        """Gets the resolution of this ProductViewItemIssue.

        Item issue resolution.

        :return: The resolution of this ProductViewItemIssue.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this ProductViewItemIssue.

        Item issue resolution.

        :param resolution: The resolution of this ProductViewItemIssue.
        :type resolution: str
        """
        allowed_values = ["UNKNOWN", "MERCHANT_ACTION", "PENDING_PROCESSING"]  # noqa: E501
        if resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution` ({0}), must be one of {1}"
                .format(resolution, allowed_values)
            )

        self._resolution = resolution

    @property
    def severity(self):
        """Gets the severity of this ProductViewItemIssue.


        :return: The severity of this ProductViewItemIssue.
        :rtype: ProductViewItemIssueItemIssueSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ProductViewItemIssue.


        :param severity: The severity of this ProductViewItemIssue.
        :type severity: ProductViewItemIssueItemIssueSeverity
        """

        self._severity = severity
