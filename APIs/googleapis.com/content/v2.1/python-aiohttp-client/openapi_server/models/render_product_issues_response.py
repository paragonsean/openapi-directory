# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alternate_dispute_resolution import AlternateDisputeResolution
from openapi_server.models.product_issue import ProductIssue
from openapi_server import util


class RenderProductIssuesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_dispute_resolution: AlternateDisputeResolution=None, issues: List[ProductIssue]=None):
        """RenderProductIssuesResponse - a model defined in OpenAPI

        :param alternate_dispute_resolution: The alternate_dispute_resolution of this RenderProductIssuesResponse.
        :param issues: The issues of this RenderProductIssuesResponse.
        """
        self.openapi_types = {
            'alternate_dispute_resolution': AlternateDisputeResolution,
            'issues': List[ProductIssue]
        }

        self.attribute_map = {
            'alternate_dispute_resolution': 'alternateDisputeResolution',
            'issues': 'issues'
        }

        self._alternate_dispute_resolution = alternate_dispute_resolution
        self._issues = issues

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RenderProductIssuesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RenderProductIssuesResponse of this RenderProductIssuesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_dispute_resolution(self):
        """Gets the alternate_dispute_resolution of this RenderProductIssuesResponse.


        :return: The alternate_dispute_resolution of this RenderProductIssuesResponse.
        :rtype: AlternateDisputeResolution
        """
        return self._alternate_dispute_resolution

    @alternate_dispute_resolution.setter
    def alternate_dispute_resolution(self, alternate_dispute_resolution):
        """Sets the alternate_dispute_resolution of this RenderProductIssuesResponse.


        :param alternate_dispute_resolution: The alternate_dispute_resolution of this RenderProductIssuesResponse.
        :type alternate_dispute_resolution: AlternateDisputeResolution
        """

        self._alternate_dispute_resolution = alternate_dispute_resolution

    @property
    def issues(self):
        """Gets the issues of this RenderProductIssuesResponse.

        List of issues for a given product. This list can be shown with compressed, expandable items. In the compressed form, the title and impact should be shown for each issue. Once the issue is expanded, the detailed content and available actions should be rendered.

        :return: The issues of this RenderProductIssuesResponse.
        :rtype: List[ProductIssue]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this RenderProductIssuesResponse.

        List of issues for a given product. This list can be shown with compressed, expandable items. In the compressed form, the title and impact should be shown for each issue. Once the issue is expanded, the detailed content and available actions should be rendered.

        :param issues: The issues of this RenderProductIssuesResponse.
        :type issues: List[ProductIssue]
        """

        self._issues = issues
