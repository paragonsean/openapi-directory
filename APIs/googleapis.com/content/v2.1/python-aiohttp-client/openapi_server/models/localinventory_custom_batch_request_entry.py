# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.local_inventory import LocalInventory
from openapi_server import util


class LocalinventoryCustomBatchRequestEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_id: int=None, local_inventory: LocalInventory=None, merchant_id: str=None, method: str=None, product_id: str=None):
        """LocalinventoryCustomBatchRequestEntry - a model defined in OpenAPI

        :param batch_id: The batch_id of this LocalinventoryCustomBatchRequestEntry.
        :param local_inventory: The local_inventory of this LocalinventoryCustomBatchRequestEntry.
        :param merchant_id: The merchant_id of this LocalinventoryCustomBatchRequestEntry.
        :param method: The method of this LocalinventoryCustomBatchRequestEntry.
        :param product_id: The product_id of this LocalinventoryCustomBatchRequestEntry.
        """
        self.openapi_types = {
            'batch_id': int,
            'local_inventory': LocalInventory,
            'merchant_id': str,
            'method': str,
            'product_id': str
        }

        self.attribute_map = {
            'batch_id': 'batchId',
            'local_inventory': 'localInventory',
            'merchant_id': 'merchantId',
            'method': 'method',
            'product_id': 'productId'
        }

        self._batch_id = batch_id
        self._local_inventory = local_inventory
        self._merchant_id = merchant_id
        self._method = method
        self._product_id = product_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocalinventoryCustomBatchRequestEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocalinventoryCustomBatchRequestEntry of this LocalinventoryCustomBatchRequestEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_id(self):
        """Gets the batch_id of this LocalinventoryCustomBatchRequestEntry.

        An entry ID, unique within the batch request.

        :return: The batch_id of this LocalinventoryCustomBatchRequestEntry.
        :rtype: int
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this LocalinventoryCustomBatchRequestEntry.

        An entry ID, unique within the batch request.

        :param batch_id: The batch_id of this LocalinventoryCustomBatchRequestEntry.
        :type batch_id: int
        """

        self._batch_id = batch_id

    @property
    def local_inventory(self):
        """Gets the local_inventory of this LocalinventoryCustomBatchRequestEntry.


        :return: The local_inventory of this LocalinventoryCustomBatchRequestEntry.
        :rtype: LocalInventory
        """
        return self._local_inventory

    @local_inventory.setter
    def local_inventory(self, local_inventory):
        """Sets the local_inventory of this LocalinventoryCustomBatchRequestEntry.


        :param local_inventory: The local_inventory of this LocalinventoryCustomBatchRequestEntry.
        :type local_inventory: LocalInventory
        """

        self._local_inventory = local_inventory

    @property
    def merchant_id(self):
        """Gets the merchant_id of this LocalinventoryCustomBatchRequestEntry.

        The ID of the managing account.

        :return: The merchant_id of this LocalinventoryCustomBatchRequestEntry.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this LocalinventoryCustomBatchRequestEntry.

        The ID of the managing account.

        :param merchant_id: The merchant_id of this LocalinventoryCustomBatchRequestEntry.
        :type merchant_id: str
        """

        self._merchant_id = merchant_id

    @property
    def method(self):
        """Gets the method of this LocalinventoryCustomBatchRequestEntry.

        Method of the batch request entry. Acceptable values are: - \"`insert`\" 

        :return: The method of this LocalinventoryCustomBatchRequestEntry.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this LocalinventoryCustomBatchRequestEntry.

        Method of the batch request entry. Acceptable values are: - \"`insert`\" 

        :param method: The method of this LocalinventoryCustomBatchRequestEntry.
        :type method: str
        """

        self._method = method

    @property
    def product_id(self):
        """Gets the product_id of this LocalinventoryCustomBatchRequestEntry.

        The ID of the product for which to update local inventory.

        :return: The product_id of this LocalinventoryCustomBatchRequestEntry.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this LocalinventoryCustomBatchRequestEntry.

        The ID of the product for which to update local inventory.

        :param product_id: The product_id of this LocalinventoryCustomBatchRequestEntry.
        :type product_id: str
        """

        self._product_id = product_id
