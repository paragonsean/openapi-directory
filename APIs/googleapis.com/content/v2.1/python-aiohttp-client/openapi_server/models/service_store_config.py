# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.distance import Distance
from openapi_server.models.service_store_config_cutoff_config import ServiceStoreConfigCutoffConfig
from openapi_server import util


class ServiceStoreConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cutoff_config: ServiceStoreConfigCutoffConfig=None, service_radius: Distance=None, store_codes: List[str]=None, store_service_type: str=None):
        """ServiceStoreConfig - a model defined in OpenAPI

        :param cutoff_config: The cutoff_config of this ServiceStoreConfig.
        :param service_radius: The service_radius of this ServiceStoreConfig.
        :param store_codes: The store_codes of this ServiceStoreConfig.
        :param store_service_type: The store_service_type of this ServiceStoreConfig.
        """
        self.openapi_types = {
            'cutoff_config': ServiceStoreConfigCutoffConfig,
            'service_radius': Distance,
            'store_codes': List[str],
            'store_service_type': str
        }

        self.attribute_map = {
            'cutoff_config': 'cutoffConfig',
            'service_radius': 'serviceRadius',
            'store_codes': 'storeCodes',
            'store_service_type': 'storeServiceType'
        }

        self._cutoff_config = cutoff_config
        self._service_radius = service_radius
        self._store_codes = store_codes
        self._store_service_type = store_service_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceStoreConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceStoreConfig of this ServiceStoreConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cutoff_config(self):
        """Gets the cutoff_config of this ServiceStoreConfig.


        :return: The cutoff_config of this ServiceStoreConfig.
        :rtype: ServiceStoreConfigCutoffConfig
        """
        return self._cutoff_config

    @cutoff_config.setter
    def cutoff_config(self, cutoff_config):
        """Sets the cutoff_config of this ServiceStoreConfig.


        :param cutoff_config: The cutoff_config of this ServiceStoreConfig.
        :type cutoff_config: ServiceStoreConfigCutoffConfig
        """

        self._cutoff_config = cutoff_config

    @property
    def service_radius(self):
        """Gets the service_radius of this ServiceStoreConfig.


        :return: The service_radius of this ServiceStoreConfig.
        :rtype: Distance
        """
        return self._service_radius

    @service_radius.setter
    def service_radius(self, service_radius):
        """Sets the service_radius of this ServiceStoreConfig.


        :param service_radius: The service_radius of this ServiceStoreConfig.
        :type service_radius: Distance
        """

        self._service_radius = service_radius

    @property
    def store_codes(self):
        """Gets the store_codes of this ServiceStoreConfig.

        A list of store codes that provide local delivery. If empty, then `store_service_type` must be `all_stores`, or an error is thrown. If not empty, then `store_service_type` must be `selected_stores`, or an error is thrown.

        :return: The store_codes of this ServiceStoreConfig.
        :rtype: List[str]
        """
        return self._store_codes

    @store_codes.setter
    def store_codes(self, store_codes):
        """Sets the store_codes of this ServiceStoreConfig.

        A list of store codes that provide local delivery. If empty, then `store_service_type` must be `all_stores`, or an error is thrown. If not empty, then `store_service_type` must be `selected_stores`, or an error is thrown.

        :param store_codes: The store_codes of this ServiceStoreConfig.
        :type store_codes: List[str]
        """

        self._store_codes = store_codes

    @property
    def store_service_type(self):
        """Gets the store_service_type of this ServiceStoreConfig.

        Indicates whether all stores listed by this merchant provide local delivery or not. Acceptable values are `all stores` and `selected stores`

        :return: The store_service_type of this ServiceStoreConfig.
        :rtype: str
        """
        return self._store_service_type

    @store_service_type.setter
    def store_service_type(self, store_service_type):
        """Sets the store_service_type of this ServiceStoreConfig.

        Indicates whether all stores listed by this merchant provide local delivery or not. Acceptable values are `all stores` and `selected stores`

        :param store_service_type: The store_service_type of this ServiceStoreConfig.
        :type store_service_type: str
        """

        self._store_service_type = store_service_type
