# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_line_item_product_fee import OrderLineItemProductFee
from openapi_server.models.order_line_item_product_variant_attribute import OrderLineItemProductVariantAttribute
from openapi_server.models.price import Price
from openapi_server import util


class TestOrderLineItemProduct(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: str=None, condition: str=None, content_language: str=None, fees: List[OrderLineItemProductFee]=None, gtin: str=None, image_link: str=None, item_group_id: str=None, mpn: str=None, offer_id: str=None, price: Price=None, target_country: str=None, title: str=None, variant_attributes: List[OrderLineItemProductVariantAttribute]=None):
        """TestOrderLineItemProduct - a model defined in OpenAPI

        :param brand: The brand of this TestOrderLineItemProduct.
        :param condition: The condition of this TestOrderLineItemProduct.
        :param content_language: The content_language of this TestOrderLineItemProduct.
        :param fees: The fees of this TestOrderLineItemProduct.
        :param gtin: The gtin of this TestOrderLineItemProduct.
        :param image_link: The image_link of this TestOrderLineItemProduct.
        :param item_group_id: The item_group_id of this TestOrderLineItemProduct.
        :param mpn: The mpn of this TestOrderLineItemProduct.
        :param offer_id: The offer_id of this TestOrderLineItemProduct.
        :param price: The price of this TestOrderLineItemProduct.
        :param target_country: The target_country of this TestOrderLineItemProduct.
        :param title: The title of this TestOrderLineItemProduct.
        :param variant_attributes: The variant_attributes of this TestOrderLineItemProduct.
        """
        self.openapi_types = {
            'brand': str,
            'condition': str,
            'content_language': str,
            'fees': List[OrderLineItemProductFee],
            'gtin': str,
            'image_link': str,
            'item_group_id': str,
            'mpn': str,
            'offer_id': str,
            'price': Price,
            'target_country': str,
            'title': str,
            'variant_attributes': List[OrderLineItemProductVariantAttribute]
        }

        self.attribute_map = {
            'brand': 'brand',
            'condition': 'condition',
            'content_language': 'contentLanguage',
            'fees': 'fees',
            'gtin': 'gtin',
            'image_link': 'imageLink',
            'item_group_id': 'itemGroupId',
            'mpn': 'mpn',
            'offer_id': 'offerId',
            'price': 'price',
            'target_country': 'targetCountry',
            'title': 'title',
            'variant_attributes': 'variantAttributes'
        }

        self._brand = brand
        self._condition = condition
        self._content_language = content_language
        self._fees = fees
        self._gtin = gtin
        self._image_link = image_link
        self._item_group_id = item_group_id
        self._mpn = mpn
        self._offer_id = offer_id
        self._price = price
        self._target_country = target_country
        self._title = title
        self._variant_attributes = variant_attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestOrderLineItemProduct':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestOrderLineItemProduct of this TestOrderLineItemProduct.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this TestOrderLineItemProduct.

        Required. Brand of the item.

        :return: The brand of this TestOrderLineItemProduct.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this TestOrderLineItemProduct.

        Required. Brand of the item.

        :param brand: The brand of this TestOrderLineItemProduct.
        :type brand: str
        """

        self._brand = brand

    @property
    def condition(self):
        """Gets the condition of this TestOrderLineItemProduct.

        Required. Condition or state of the item. Acceptable values are: - \"`new`\" 

        :return: The condition of this TestOrderLineItemProduct.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this TestOrderLineItemProduct.

        Required. Condition or state of the item. Acceptable values are: - \"`new`\" 

        :param condition: The condition of this TestOrderLineItemProduct.
        :type condition: str
        """

        self._condition = condition

    @property
    def content_language(self):
        """Gets the content_language of this TestOrderLineItemProduct.

        Required. The two-letter ISO 639-1 language code for the item. Acceptable values are: - \"`en`\" - \"`fr`\" 

        :return: The content_language of this TestOrderLineItemProduct.
        :rtype: str
        """
        return self._content_language

    @content_language.setter
    def content_language(self, content_language):
        """Sets the content_language of this TestOrderLineItemProduct.

        Required. The two-letter ISO 639-1 language code for the item. Acceptable values are: - \"`en`\" - \"`fr`\" 

        :param content_language: The content_language of this TestOrderLineItemProduct.
        :type content_language: str
        """

        self._content_language = content_language

    @property
    def fees(self):
        """Gets the fees of this TestOrderLineItemProduct.

        Fees for the item. Optional.

        :return: The fees of this TestOrderLineItemProduct.
        :rtype: List[OrderLineItemProductFee]
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this TestOrderLineItemProduct.

        Fees for the item. Optional.

        :param fees: The fees of this TestOrderLineItemProduct.
        :type fees: List[OrderLineItemProductFee]
        """

        self._fees = fees

    @property
    def gtin(self):
        """Gets the gtin of this TestOrderLineItemProduct.

        Global Trade Item Number (GTIN) of the item. Optional.

        :return: The gtin of this TestOrderLineItemProduct.
        :rtype: str
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this TestOrderLineItemProduct.

        Global Trade Item Number (GTIN) of the item. Optional.

        :param gtin: The gtin of this TestOrderLineItemProduct.
        :type gtin: str
        """

        self._gtin = gtin

    @property
    def image_link(self):
        """Gets the image_link of this TestOrderLineItemProduct.

        Required. URL of an image of the item.

        :return: The image_link of this TestOrderLineItemProduct.
        :rtype: str
        """
        return self._image_link

    @image_link.setter
    def image_link(self, image_link):
        """Sets the image_link of this TestOrderLineItemProduct.

        Required. URL of an image of the item.

        :param image_link: The image_link of this TestOrderLineItemProduct.
        :type image_link: str
        """

        self._image_link = image_link

    @property
    def item_group_id(self):
        """Gets the item_group_id of this TestOrderLineItemProduct.

        Shared identifier for all variants of the same product. Optional.

        :return: The item_group_id of this TestOrderLineItemProduct.
        :rtype: str
        """
        return self._item_group_id

    @item_group_id.setter
    def item_group_id(self, item_group_id):
        """Sets the item_group_id of this TestOrderLineItemProduct.

        Shared identifier for all variants of the same product. Optional.

        :param item_group_id: The item_group_id of this TestOrderLineItemProduct.
        :type item_group_id: str
        """

        self._item_group_id = item_group_id

    @property
    def mpn(self):
        """Gets the mpn of this TestOrderLineItemProduct.

        Manufacturer Part Number (MPN) of the item. Optional.

        :return: The mpn of this TestOrderLineItemProduct.
        :rtype: str
        """
        return self._mpn

    @mpn.setter
    def mpn(self, mpn):
        """Sets the mpn of this TestOrderLineItemProduct.

        Manufacturer Part Number (MPN) of the item. Optional.

        :param mpn: The mpn of this TestOrderLineItemProduct.
        :type mpn: str
        """

        self._mpn = mpn

    @property
    def offer_id(self):
        """Gets the offer_id of this TestOrderLineItemProduct.

        Required. An identifier of the item.

        :return: The offer_id of this TestOrderLineItemProduct.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this TestOrderLineItemProduct.

        Required. An identifier of the item.

        :param offer_id: The offer_id of this TestOrderLineItemProduct.
        :type offer_id: str
        """

        self._offer_id = offer_id

    @property
    def price(self):
        """Gets the price of this TestOrderLineItemProduct.


        :return: The price of this TestOrderLineItemProduct.
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this TestOrderLineItemProduct.


        :param price: The price of this TestOrderLineItemProduct.
        :type price: Price
        """

        self._price = price

    @property
    def target_country(self):
        """Gets the target_country of this TestOrderLineItemProduct.

        Required. The CLDR territory code of the target country of the product.

        :return: The target_country of this TestOrderLineItemProduct.
        :rtype: str
        """
        return self._target_country

    @target_country.setter
    def target_country(self, target_country):
        """Sets the target_country of this TestOrderLineItemProduct.

        Required. The CLDR territory code of the target country of the product.

        :param target_country: The target_country of this TestOrderLineItemProduct.
        :type target_country: str
        """

        self._target_country = target_country

    @property
    def title(self):
        """Gets the title of this TestOrderLineItemProduct.

        Required. The title of the product.

        :return: The title of this TestOrderLineItemProduct.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TestOrderLineItemProduct.

        Required. The title of the product.

        :param title: The title of this TestOrderLineItemProduct.
        :type title: str
        """

        self._title = title

    @property
    def variant_attributes(self):
        """Gets the variant_attributes of this TestOrderLineItemProduct.

        Variant attributes for the item. Optional.

        :return: The variant_attributes of this TestOrderLineItemProduct.
        :rtype: List[OrderLineItemProductVariantAttribute]
        """
        return self._variant_attributes

    @variant_attributes.setter
    def variant_attributes(self, variant_attributes):
        """Sets the variant_attributes of this TestOrderLineItemProduct.

        Variant attributes for the item. Optional.

        :param variant_attributes: The variant_attributes of this TestOrderLineItemProduct.
        :type variant_attributes: List[OrderLineItemProductVariantAttribute]
        """

        self._variant_attributes = variant_attributes
