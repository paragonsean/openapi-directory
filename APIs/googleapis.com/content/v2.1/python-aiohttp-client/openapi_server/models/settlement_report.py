# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price import Price
from openapi_server import util


class SettlementReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_date: str=None, kind: str=None, previous_balance: Price=None, settlement_id: str=None, start_date: str=None, transfer_amount: Price=None, transfer_date: str=None, transfer_ids: List[str]=None):
        """SettlementReport - a model defined in OpenAPI

        :param end_date: The end_date of this SettlementReport.
        :param kind: The kind of this SettlementReport.
        :param previous_balance: The previous_balance of this SettlementReport.
        :param settlement_id: The settlement_id of this SettlementReport.
        :param start_date: The start_date of this SettlementReport.
        :param transfer_amount: The transfer_amount of this SettlementReport.
        :param transfer_date: The transfer_date of this SettlementReport.
        :param transfer_ids: The transfer_ids of this SettlementReport.
        """
        self.openapi_types = {
            'end_date': str,
            'kind': str,
            'previous_balance': Price,
            'settlement_id': str,
            'start_date': str,
            'transfer_amount': Price,
            'transfer_date': str,
            'transfer_ids': List[str]
        }

        self.attribute_map = {
            'end_date': 'endDate',
            'kind': 'kind',
            'previous_balance': 'previousBalance',
            'settlement_id': 'settlementId',
            'start_date': 'startDate',
            'transfer_amount': 'transferAmount',
            'transfer_date': 'transferDate',
            'transfer_ids': 'transferIds'
        }

        self._end_date = end_date
        self._kind = kind
        self._previous_balance = previous_balance
        self._settlement_id = settlement_id
        self._start_date = start_date
        self._transfer_amount = transfer_amount
        self._transfer_date = transfer_date
        self._transfer_ids = transfer_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SettlementReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SettlementReport of this SettlementReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_date(self):
        """Gets the end_date of this SettlementReport.

        The end date on which all transactions are included in the report, in ISO 8601 format.

        :return: The end_date of this SettlementReport.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this SettlementReport.

        The end date on which all transactions are included in the report, in ISO 8601 format.

        :param end_date: The end_date of this SettlementReport.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def kind(self):
        """Gets the kind of this SettlementReport.

        Identifies what kind of resource this is. Value: the fixed string \"`content#settlementReport`\"

        :return: The kind of this SettlementReport.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SettlementReport.

        Identifies what kind of resource this is. Value: the fixed string \"`content#settlementReport`\"

        :param kind: The kind of this SettlementReport.
        :type kind: str
        """

        self._kind = kind

    @property
    def previous_balance(self):
        """Gets the previous_balance of this SettlementReport.


        :return: The previous_balance of this SettlementReport.
        :rtype: Price
        """
        return self._previous_balance

    @previous_balance.setter
    def previous_balance(self, previous_balance):
        """Sets the previous_balance of this SettlementReport.


        :param previous_balance: The previous_balance of this SettlementReport.
        :type previous_balance: Price
        """

        self._previous_balance = previous_balance

    @property
    def settlement_id(self):
        """Gets the settlement_id of this SettlementReport.

        The ID of the settlement report.

        :return: The settlement_id of this SettlementReport.
        :rtype: str
        """
        return self._settlement_id

    @settlement_id.setter
    def settlement_id(self, settlement_id):
        """Sets the settlement_id of this SettlementReport.

        The ID of the settlement report.

        :param settlement_id: The settlement_id of this SettlementReport.
        :type settlement_id: str
        """

        self._settlement_id = settlement_id

    @property
    def start_date(self):
        """Gets the start_date of this SettlementReport.

        The start date on which all transactions are included in the report, in ISO 8601 format.

        :return: The start_date of this SettlementReport.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this SettlementReport.

        The start date on which all transactions are included in the report, in ISO 8601 format.

        :param start_date: The start_date of this SettlementReport.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def transfer_amount(self):
        """Gets the transfer_amount of this SettlementReport.


        :return: The transfer_amount of this SettlementReport.
        :rtype: Price
        """
        return self._transfer_amount

    @transfer_amount.setter
    def transfer_amount(self, transfer_amount):
        """Sets the transfer_amount of this SettlementReport.


        :param transfer_amount: The transfer_amount of this SettlementReport.
        :type transfer_amount: Price
        """

        self._transfer_amount = transfer_amount

    @property
    def transfer_date(self):
        """Gets the transfer_date of this SettlementReport.

        Date on which transfer for this payment was initiated by Google, in ISO 8601 format.

        :return: The transfer_date of this SettlementReport.
        :rtype: str
        """
        return self._transfer_date

    @transfer_date.setter
    def transfer_date(self, transfer_date):
        """Sets the transfer_date of this SettlementReport.

        Date on which transfer for this payment was initiated by Google, in ISO 8601 format.

        :param transfer_date: The transfer_date of this SettlementReport.
        :type transfer_date: str
        """

        self._transfer_date = transfer_date

    @property
    def transfer_ids(self):
        """Gets the transfer_ids of this SettlementReport.

        The list of bank identifiers used for the transfer. For example, Trace ID for Federal Automated Clearing House (ACH). This may also be known as the Wire ID.

        :return: The transfer_ids of this SettlementReport.
        :rtype: List[str]
        """
        return self._transfer_ids

    @transfer_ids.setter
    def transfer_ids(self, transfer_ids):
        """Sets the transfer_ids of this SettlementReport.

        The list of bank identifiers used for the transfer. For example, Trace ID for Federal Automated Clearing House (ACH). This may also be known as the Wire ID.

        :param transfer_ids: The transfer_ids of this SettlementReport.
        :type transfer_ids: List[str]
        """

        self._transfer_ids = transfer_ids
