# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductCluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: str=None, brand_inventory_status: str=None, category_l1: str=None, category_l2: str=None, category_l3: str=None, category_l4: str=None, category_l5: str=None, inventory_status: str=None, title: str=None, variant_gtins: List[str]=None):
        """ProductCluster - a model defined in OpenAPI

        :param brand: The brand of this ProductCluster.
        :param brand_inventory_status: The brand_inventory_status of this ProductCluster.
        :param category_l1: The category_l1 of this ProductCluster.
        :param category_l2: The category_l2 of this ProductCluster.
        :param category_l3: The category_l3 of this ProductCluster.
        :param category_l4: The category_l4 of this ProductCluster.
        :param category_l5: The category_l5 of this ProductCluster.
        :param inventory_status: The inventory_status of this ProductCluster.
        :param title: The title of this ProductCluster.
        :param variant_gtins: The variant_gtins of this ProductCluster.
        """
        self.openapi_types = {
            'brand': str,
            'brand_inventory_status': str,
            'category_l1': str,
            'category_l2': str,
            'category_l3': str,
            'category_l4': str,
            'category_l5': str,
            'inventory_status': str,
            'title': str,
            'variant_gtins': List[str]
        }

        self.attribute_map = {
            'brand': 'brand',
            'brand_inventory_status': 'brandInventoryStatus',
            'category_l1': 'categoryL1',
            'category_l2': 'categoryL2',
            'category_l3': 'categoryL3',
            'category_l4': 'categoryL4',
            'category_l5': 'categoryL5',
            'inventory_status': 'inventoryStatus',
            'title': 'title',
            'variant_gtins': 'variantGtins'
        }

        self._brand = brand
        self._brand_inventory_status = brand_inventory_status
        self._category_l1 = category_l1
        self._category_l2 = category_l2
        self._category_l3 = category_l3
        self._category_l4 = category_l4
        self._category_l5 = category_l5
        self._inventory_status = inventory_status
        self._title = title
        self._variant_gtins = variant_gtins

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductCluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductCluster of this ProductCluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this ProductCluster.

        Brand of the product cluster.

        :return: The brand of this ProductCluster.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this ProductCluster.

        Brand of the product cluster.

        :param brand: The brand of this ProductCluster.
        :type brand: str
        """

        self._brand = brand

    @property
    def brand_inventory_status(self):
        """Gets the brand_inventory_status of this ProductCluster.

        Tells if there is at least one product of the brand currently `IN_STOCK` in your product feed across multiple countries, all products are `OUT_OF_STOCK` in your product feed, or `NOT_IN_INVENTORY`. The field doesn't take the Best Sellers report country filter into account.

        :return: The brand_inventory_status of this ProductCluster.
        :rtype: str
        """
        return self._brand_inventory_status

    @brand_inventory_status.setter
    def brand_inventory_status(self, brand_inventory_status):
        """Sets the brand_inventory_status of this ProductCluster.

        Tells if there is at least one product of the brand currently `IN_STOCK` in your product feed across multiple countries, all products are `OUT_OF_STOCK` in your product feed, or `NOT_IN_INVENTORY`. The field doesn't take the Best Sellers report country filter into account.

        :param brand_inventory_status: The brand_inventory_status of this ProductCluster.
        :type brand_inventory_status: str
        """
        allowed_values = ["INVENTORY_STATUS_UNSPECIFIED", "IN_STOCK", "OUT_OF_STOCK", "NOT_IN_INVENTORY"]  # noqa: E501
        if brand_inventory_status not in allowed_values:
            raise ValueError(
                "Invalid value for `brand_inventory_status` ({0}), must be one of {1}"
                .format(brand_inventory_status, allowed_values)
            )

        self._brand_inventory_status = brand_inventory_status

    @property
    def category_l1(self):
        """Gets the category_l1 of this ProductCluster.

        Product category (1st level) of the product cluster, represented in Google's product taxonomy.

        :return: The category_l1 of this ProductCluster.
        :rtype: str
        """
        return self._category_l1

    @category_l1.setter
    def category_l1(self, category_l1):
        """Sets the category_l1 of this ProductCluster.

        Product category (1st level) of the product cluster, represented in Google's product taxonomy.

        :param category_l1: The category_l1 of this ProductCluster.
        :type category_l1: str
        """

        self._category_l1 = category_l1

    @property
    def category_l2(self):
        """Gets the category_l2 of this ProductCluster.

        Product category (2nd level) of the product cluster, represented in Google's product taxonomy.

        :return: The category_l2 of this ProductCluster.
        :rtype: str
        """
        return self._category_l2

    @category_l2.setter
    def category_l2(self, category_l2):
        """Sets the category_l2 of this ProductCluster.

        Product category (2nd level) of the product cluster, represented in Google's product taxonomy.

        :param category_l2: The category_l2 of this ProductCluster.
        :type category_l2: str
        """

        self._category_l2 = category_l2

    @property
    def category_l3(self):
        """Gets the category_l3 of this ProductCluster.

        Product category (3rd level) of the product cluster, represented in Google's product taxonomy.

        :return: The category_l3 of this ProductCluster.
        :rtype: str
        """
        return self._category_l3

    @category_l3.setter
    def category_l3(self, category_l3):
        """Sets the category_l3 of this ProductCluster.

        Product category (3rd level) of the product cluster, represented in Google's product taxonomy.

        :param category_l3: The category_l3 of this ProductCluster.
        :type category_l3: str
        """

        self._category_l3 = category_l3

    @property
    def category_l4(self):
        """Gets the category_l4 of this ProductCluster.

        Product category (4th level) of the product cluster, represented in Google's product taxonomy.

        :return: The category_l4 of this ProductCluster.
        :rtype: str
        """
        return self._category_l4

    @category_l4.setter
    def category_l4(self, category_l4):
        """Sets the category_l4 of this ProductCluster.

        Product category (4th level) of the product cluster, represented in Google's product taxonomy.

        :param category_l4: The category_l4 of this ProductCluster.
        :type category_l4: str
        """

        self._category_l4 = category_l4

    @property
    def category_l5(self):
        """Gets the category_l5 of this ProductCluster.

        Product category (5th level) of the product cluster, represented in Google's product taxonomy.

        :return: The category_l5 of this ProductCluster.
        :rtype: str
        """
        return self._category_l5

    @category_l5.setter
    def category_l5(self, category_l5):
        """Sets the category_l5 of this ProductCluster.

        Product category (5th level) of the product cluster, represented in Google's product taxonomy.

        :param category_l5: The category_l5 of this ProductCluster.
        :type category_l5: str
        """

        self._category_l5 = category_l5

    @property
    def inventory_status(self):
        """Gets the inventory_status of this ProductCluster.

        Tells whether the product cluster is `IN_STOCK` in your product feed across multiple countries, `OUT_OF_STOCK` in your product feed, or `NOT_IN_INVENTORY` at all. The field doesn't take the Best Sellers report country filter into account.

        :return: The inventory_status of this ProductCluster.
        :rtype: str
        """
        return self._inventory_status

    @inventory_status.setter
    def inventory_status(self, inventory_status):
        """Sets the inventory_status of this ProductCluster.

        Tells whether the product cluster is `IN_STOCK` in your product feed across multiple countries, `OUT_OF_STOCK` in your product feed, or `NOT_IN_INVENTORY` at all. The field doesn't take the Best Sellers report country filter into account.

        :param inventory_status: The inventory_status of this ProductCluster.
        :type inventory_status: str
        """
        allowed_values = ["INVENTORY_STATUS_UNSPECIFIED", "IN_STOCK", "OUT_OF_STOCK", "NOT_IN_INVENTORY"]  # noqa: E501
        if inventory_status not in allowed_values:
            raise ValueError(
                "Invalid value for `inventory_status` ({0}), must be one of {1}"
                .format(inventory_status, allowed_values)
            )

        self._inventory_status = inventory_status

    @property
    def title(self):
        """Gets the title of this ProductCluster.

        Title of the product cluster.

        :return: The title of this ProductCluster.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProductCluster.

        Title of the product cluster.

        :param title: The title of this ProductCluster.
        :type title: str
        """

        self._title = title

    @property
    def variant_gtins(self):
        """Gets the variant_gtins of this ProductCluster.

        GTINs of example variants of the product cluster.

        :return: The variant_gtins of this ProductCluster.
        :rtype: List[str]
        """
        return self._variant_gtins

    @variant_gtins.setter
    def variant_gtins(self, variant_gtins):
        """Sets the variant_gtins of this ProductCluster.

        GTINs of example variants of the product cluster.

        :param variant_gtins: The variant_gtins of this ProductCluster.
        :type variant_gtins: List[str]
        """

        self._variant_gtins = variant_gtins
