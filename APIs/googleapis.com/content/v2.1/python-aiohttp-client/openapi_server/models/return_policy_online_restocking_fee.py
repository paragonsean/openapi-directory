# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price_amount import PriceAmount
from openapi_server import util


class ReturnPolicyOnlineRestockingFee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fixed_fee: PriceAmount=None, micro_percent: int=None):
        """ReturnPolicyOnlineRestockingFee - a model defined in OpenAPI

        :param fixed_fee: The fixed_fee of this ReturnPolicyOnlineRestockingFee.
        :param micro_percent: The micro_percent of this ReturnPolicyOnlineRestockingFee.
        """
        self.openapi_types = {
            'fixed_fee': PriceAmount,
            'micro_percent': int
        }

        self.attribute_map = {
            'fixed_fee': 'fixedFee',
            'micro_percent': 'microPercent'
        }

        self._fixed_fee = fixed_fee
        self._micro_percent = micro_percent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReturnPolicyOnlineRestockingFee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReturnPolicyOnlineRestockingFee of this ReturnPolicyOnlineRestockingFee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fixed_fee(self):
        """Gets the fixed_fee of this ReturnPolicyOnlineRestockingFee.


        :return: The fixed_fee of this ReturnPolicyOnlineRestockingFee.
        :rtype: PriceAmount
        """
        return self._fixed_fee

    @fixed_fee.setter
    def fixed_fee(self, fixed_fee):
        """Sets the fixed_fee of this ReturnPolicyOnlineRestockingFee.


        :param fixed_fee: The fixed_fee of this ReturnPolicyOnlineRestockingFee.
        :type fixed_fee: PriceAmount
        """

        self._fixed_fee = fixed_fee

    @property
    def micro_percent(self):
        """Gets the micro_percent of this ReturnPolicyOnlineRestockingFee.

        Percent of total price in micros. 15,000,000 means 15% of the total price would be charged.

        :return: The micro_percent of this ReturnPolicyOnlineRestockingFee.
        :rtype: int
        """
        return self._micro_percent

    @micro_percent.setter
    def micro_percent(self, micro_percent):
        """Sets the micro_percent of this ReturnPolicyOnlineRestockingFee.

        Percent of total price in micros. 15,000,000 means 15% of the total price would be charged.

        :param micro_percent: The micro_percent of this ReturnPolicyOnlineRestockingFee.
        :type micro_percent: int
        """

        self._micro_percent = micro_percent
