# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.breakdown import Breakdown
from openapi_server import util


class ProductIssueImpact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, breakdowns: List[Breakdown]=None, message: str=None, severity: str=None):
        """ProductIssueImpact - a model defined in OpenAPI

        :param breakdowns: The breakdowns of this ProductIssueImpact.
        :param message: The message of this ProductIssueImpact.
        :param severity: The severity of this ProductIssueImpact.
        """
        self.openapi_types = {
            'breakdowns': List[Breakdown],
            'message': str,
            'severity': str
        }

        self.attribute_map = {
            'breakdowns': 'breakdowns',
            'message': 'message',
            'severity': 'severity'
        }

        self._breakdowns = breakdowns
        self._message = message
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductIssueImpact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductIssueImpact of this ProductIssueImpact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def breakdowns(self):
        """Gets the breakdowns of this ProductIssueImpact.

        Detailed impact breakdown. Explains the types of restriction the issue has in different shopping destinations and territory. If present, it should be rendered to the merchant. Can be shown as a mouse over dropdown or a dialog. Each breakdown item represents a group of regions with the same impact details.

        :return: The breakdowns of this ProductIssueImpact.
        :rtype: List[Breakdown]
        """
        return self._breakdowns

    @breakdowns.setter
    def breakdowns(self, breakdowns):
        """Sets the breakdowns of this ProductIssueImpact.

        Detailed impact breakdown. Explains the types of restriction the issue has in different shopping destinations and territory. If present, it should be rendered to the merchant. Can be shown as a mouse over dropdown or a dialog. Each breakdown item represents a group of regions with the same impact details.

        :param breakdowns: The breakdowns of this ProductIssueImpact.
        :type breakdowns: List[Breakdown]
        """

        self._breakdowns = breakdowns

    @property
    def message(self):
        """Gets the message of this ProductIssueImpact.

        Optional. Message summarizing the overall impact of the issue. If present, it should be rendered to the merchant. For example: \"Limits visibility in France\"

        :return: The message of this ProductIssueImpact.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ProductIssueImpact.

        Optional. Message summarizing the overall impact of the issue. If present, it should be rendered to the merchant. For example: \"Limits visibility in France\"

        :param message: The message of this ProductIssueImpact.
        :type message: str
        """

        self._message = message

    @property
    def severity(self):
        """Gets the severity of this ProductIssueImpact.

        The severity of the issue.

        :return: The severity of this ProductIssueImpact.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ProductIssueImpact.

        The severity of the issue.

        :param severity: The severity of this ProductIssueImpact.
        :type severity: str
        """
        allowed_values = ["SEVERITY_UNSPECIFIED", "ERROR", "WARNING", "INFO"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity
