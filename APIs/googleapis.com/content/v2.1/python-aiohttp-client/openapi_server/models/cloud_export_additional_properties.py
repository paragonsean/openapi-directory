# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloudExportAdditionalProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bool_value: bool=None, float_value: List[float]=None, int_value: List[str]=None, max_value: float=None, min_value: float=None, property_name: str=None, text_value: List[str]=None, unit_code: str=None):
        """CloudExportAdditionalProperties - a model defined in OpenAPI

        :param bool_value: The bool_value of this CloudExportAdditionalProperties.
        :param float_value: The float_value of this CloudExportAdditionalProperties.
        :param int_value: The int_value of this CloudExportAdditionalProperties.
        :param max_value: The max_value of this CloudExportAdditionalProperties.
        :param min_value: The min_value of this CloudExportAdditionalProperties.
        :param property_name: The property_name of this CloudExportAdditionalProperties.
        :param text_value: The text_value of this CloudExportAdditionalProperties.
        :param unit_code: The unit_code of this CloudExportAdditionalProperties.
        """
        self.openapi_types = {
            'bool_value': bool,
            'float_value': List[float],
            'int_value': List[str],
            'max_value': float,
            'min_value': float,
            'property_name': str,
            'text_value': List[str],
            'unit_code': str
        }

        self.attribute_map = {
            'bool_value': 'boolValue',
            'float_value': 'floatValue',
            'int_value': 'intValue',
            'max_value': 'maxValue',
            'min_value': 'minValue',
            'property_name': 'propertyName',
            'text_value': 'textValue',
            'unit_code': 'unitCode'
        }

        self._bool_value = bool_value
        self._float_value = float_value
        self._int_value = int_value
        self._max_value = max_value
        self._min_value = min_value
        self._property_name = property_name
        self._text_value = text_value
        self._unit_code = unit_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudExportAdditionalProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudExportAdditionalProperties of this CloudExportAdditionalProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bool_value(self):
        """Gets the bool_value of this CloudExportAdditionalProperties.

        Boolean value of the given property. For example for a TV product, \"True\" or \"False\" if the screen is UHD.

        :return: The bool_value of this CloudExportAdditionalProperties.
        :rtype: bool
        """
        return self._bool_value

    @bool_value.setter
    def bool_value(self, bool_value):
        """Sets the bool_value of this CloudExportAdditionalProperties.

        Boolean value of the given property. For example for a TV product, \"True\" or \"False\" if the screen is UHD.

        :param bool_value: The bool_value of this CloudExportAdditionalProperties.
        :type bool_value: bool
        """

        self._bool_value = bool_value

    @property
    def float_value(self):
        """Gets the float_value of this CloudExportAdditionalProperties.

        Float values of the given property. For example for a TV product 1.2345. Maximum number of specified values for this field is 400. Values are stored in an arbitrary but consistent order.

        :return: The float_value of this CloudExportAdditionalProperties.
        :rtype: List[float]
        """
        return self._float_value

    @float_value.setter
    def float_value(self, float_value):
        """Sets the float_value of this CloudExportAdditionalProperties.

        Float values of the given property. For example for a TV product 1.2345. Maximum number of specified values for this field is 400. Values are stored in an arbitrary but consistent order.

        :param float_value: The float_value of this CloudExportAdditionalProperties.
        :type float_value: List[float]
        """

        self._float_value = float_value

    @property
    def int_value(self):
        """Gets the int_value of this CloudExportAdditionalProperties.

        Integer values of the given property. For example, 1080 for a screen resolution of a TV product. Maximum number of specified values for this field is 400. Values are stored in an arbitrary but consistent order.

        :return: The int_value of this CloudExportAdditionalProperties.
        :rtype: List[str]
        """
        return self._int_value

    @int_value.setter
    def int_value(self, int_value):
        """Sets the int_value of this CloudExportAdditionalProperties.

        Integer values of the given property. For example, 1080 for a screen resolution of a TV product. Maximum number of specified values for this field is 400. Values are stored in an arbitrary but consistent order.

        :param int_value: The int_value of this CloudExportAdditionalProperties.
        :type int_value: List[str]
        """

        self._int_value = int_value

    @property
    def max_value(self):
        """Gets the max_value of this CloudExportAdditionalProperties.

        Maximum float value of the given property. For example for a TV product 100.00.

        :return: The max_value of this CloudExportAdditionalProperties.
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this CloudExportAdditionalProperties.

        Maximum float value of the given property. For example for a TV product 100.00.

        :param max_value: The max_value of this CloudExportAdditionalProperties.
        :type max_value: float
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this CloudExportAdditionalProperties.

        Minimum float value of the given property. For example for a TV product 1.00.

        :return: The min_value of this CloudExportAdditionalProperties.
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this CloudExportAdditionalProperties.

        Minimum float value of the given property. For example for a TV product 1.00.

        :param min_value: The min_value of this CloudExportAdditionalProperties.
        :type min_value: float
        """

        self._min_value = min_value

    @property
    def property_name(self):
        """Gets the property_name of this CloudExportAdditionalProperties.

        Name of the given property. For example, \"Screen-Resolution\" for a TV product. Maximum string size is 256 characters.

        :return: The property_name of this CloudExportAdditionalProperties.
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this CloudExportAdditionalProperties.

        Name of the given property. For example, \"Screen-Resolution\" for a TV product. Maximum string size is 256 characters.

        :param property_name: The property_name of this CloudExportAdditionalProperties.
        :type property_name: str
        """

        self._property_name = property_name

    @property
    def text_value(self):
        """Gets the text_value of this CloudExportAdditionalProperties.

        Text value of the given property. For example, \"8K(UHD)\" could be a text value for a TV product. Maximum number of specified values for this field is 400. Values are stored in an arbitrary but consistent order. Maximum string size is 256 characters.

        :return: The text_value of this CloudExportAdditionalProperties.
        :rtype: List[str]
        """
        return self._text_value

    @text_value.setter
    def text_value(self, text_value):
        """Sets the text_value of this CloudExportAdditionalProperties.

        Text value of the given property. For example, \"8K(UHD)\" could be a text value for a TV product. Maximum number of specified values for this field is 400. Values are stored in an arbitrary but consistent order. Maximum string size is 256 characters.

        :param text_value: The text_value of this CloudExportAdditionalProperties.
        :type text_value: List[str]
        """

        self._text_value = text_value

    @property
    def unit_code(self):
        """Gets the unit_code of this CloudExportAdditionalProperties.

        Unit of the given property. For example, \"Pixels\" for a TV product. Maximum string size is 256 bytes.

        :return: The unit_code of this CloudExportAdditionalProperties.
        :rtype: str
        """
        return self._unit_code

    @unit_code.setter
    def unit_code(self, unit_code):
        """Sets the unit_code of this CloudExportAdditionalProperties.

        Unit of the given property. For example, \"Pixels\" for a TV product. Maximum string size is 256 bytes.

        :param unit_code: The unit_code of this CloudExportAdditionalProperties.
        :type unit_code: str
        """

        self._unit_code = unit_code
