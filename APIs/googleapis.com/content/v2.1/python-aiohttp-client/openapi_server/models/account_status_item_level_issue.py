# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountStatusItemLevelIssue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_name: str=None, code: str=None, description: str=None, detail: str=None, documentation: str=None, num_items: str=None, resolution: str=None, servability: str=None):
        """AccountStatusItemLevelIssue - a model defined in OpenAPI

        :param attribute_name: The attribute_name of this AccountStatusItemLevelIssue.
        :param code: The code of this AccountStatusItemLevelIssue.
        :param description: The description of this AccountStatusItemLevelIssue.
        :param detail: The detail of this AccountStatusItemLevelIssue.
        :param documentation: The documentation of this AccountStatusItemLevelIssue.
        :param num_items: The num_items of this AccountStatusItemLevelIssue.
        :param resolution: The resolution of this AccountStatusItemLevelIssue.
        :param servability: The servability of this AccountStatusItemLevelIssue.
        """
        self.openapi_types = {
            'attribute_name': str,
            'code': str,
            'description': str,
            'detail': str,
            'documentation': str,
            'num_items': str,
            'resolution': str,
            'servability': str
        }

        self.attribute_map = {
            'attribute_name': 'attributeName',
            'code': 'code',
            'description': 'description',
            'detail': 'detail',
            'documentation': 'documentation',
            'num_items': 'numItems',
            'resolution': 'resolution',
            'servability': 'servability'
        }

        self._attribute_name = attribute_name
        self._code = code
        self._description = description
        self._detail = detail
        self._documentation = documentation
        self._num_items = num_items
        self._resolution = resolution
        self._servability = servability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountStatusItemLevelIssue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountStatusItemLevelIssue of this AccountStatusItemLevelIssue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_name(self):
        """Gets the attribute_name of this AccountStatusItemLevelIssue.

        The attribute's name, if the issue is caused by a single attribute.

        :return: The attribute_name of this AccountStatusItemLevelIssue.
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this AccountStatusItemLevelIssue.

        The attribute's name, if the issue is caused by a single attribute.

        :param attribute_name: The attribute_name of this AccountStatusItemLevelIssue.
        :type attribute_name: str
        """

        self._attribute_name = attribute_name

    @property
    def code(self):
        """Gets the code of this AccountStatusItemLevelIssue.

        The error code of the issue.

        :return: The code of this AccountStatusItemLevelIssue.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AccountStatusItemLevelIssue.

        The error code of the issue.

        :param code: The code of this AccountStatusItemLevelIssue.
        :type code: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this AccountStatusItemLevelIssue.

        A short issue description in English.

        :return: The description of this AccountStatusItemLevelIssue.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountStatusItemLevelIssue.

        A short issue description in English.

        :param description: The description of this AccountStatusItemLevelIssue.
        :type description: str
        """

        self._description = description

    @property
    def detail(self):
        """Gets the detail of this AccountStatusItemLevelIssue.

        A detailed issue description in English.

        :return: The detail of this AccountStatusItemLevelIssue.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this AccountStatusItemLevelIssue.

        A detailed issue description in English.

        :param detail: The detail of this AccountStatusItemLevelIssue.
        :type detail: str
        """

        self._detail = detail

    @property
    def documentation(self):
        """Gets the documentation of this AccountStatusItemLevelIssue.

        The URL of a web page to help with resolving this issue.

        :return: The documentation of this AccountStatusItemLevelIssue.
        :rtype: str
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this AccountStatusItemLevelIssue.

        The URL of a web page to help with resolving this issue.

        :param documentation: The documentation of this AccountStatusItemLevelIssue.
        :type documentation: str
        """

        self._documentation = documentation

    @property
    def num_items(self):
        """Gets the num_items of this AccountStatusItemLevelIssue.

        Number of items with this issue.

        :return: The num_items of this AccountStatusItemLevelIssue.
        :rtype: str
        """
        return self._num_items

    @num_items.setter
    def num_items(self, num_items):
        """Sets the num_items of this AccountStatusItemLevelIssue.

        Number of items with this issue.

        :param num_items: The num_items of this AccountStatusItemLevelIssue.
        :type num_items: str
        """

        self._num_items = num_items

    @property
    def resolution(self):
        """Gets the resolution of this AccountStatusItemLevelIssue.

        Whether the issue can be resolved by the merchant.

        :return: The resolution of this AccountStatusItemLevelIssue.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this AccountStatusItemLevelIssue.

        Whether the issue can be resolved by the merchant.

        :param resolution: The resolution of this AccountStatusItemLevelIssue.
        :type resolution: str
        """

        self._resolution = resolution

    @property
    def servability(self):
        """Gets the servability of this AccountStatusItemLevelIssue.

        How this issue affects serving of the offer.

        :return: The servability of this AccountStatusItemLevelIssue.
        :rtype: str
        """
        return self._servability

    @servability.setter
    def servability(self, servability):
        """Sets the servability of this AccountStatusItemLevelIssue.

        How this issue affects serving of the offer.

        :param servability: The servability of this AccountStatusItemLevelIssue.
        :type servability: str
        """

        self._servability = servability
