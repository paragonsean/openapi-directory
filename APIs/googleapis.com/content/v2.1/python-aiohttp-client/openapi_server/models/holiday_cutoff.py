# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HolidayCutoff(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deadline_date: str=None, deadline_hour: int=None, deadline_timezone: str=None, holiday_id: str=None, visible_from_date: str=None):
        """HolidayCutoff - a model defined in OpenAPI

        :param deadline_date: The deadline_date of this HolidayCutoff.
        :param deadline_hour: The deadline_hour of this HolidayCutoff.
        :param deadline_timezone: The deadline_timezone of this HolidayCutoff.
        :param holiday_id: The holiday_id of this HolidayCutoff.
        :param visible_from_date: The visible_from_date of this HolidayCutoff.
        """
        self.openapi_types = {
            'deadline_date': str,
            'deadline_hour': int,
            'deadline_timezone': str,
            'holiday_id': str,
            'visible_from_date': str
        }

        self.attribute_map = {
            'deadline_date': 'deadlineDate',
            'deadline_hour': 'deadlineHour',
            'deadline_timezone': 'deadlineTimezone',
            'holiday_id': 'holidayId',
            'visible_from_date': 'visibleFromDate'
        }

        self._deadline_date = deadline_date
        self._deadline_hour = deadline_hour
        self._deadline_timezone = deadline_timezone
        self._holiday_id = holiday_id
        self._visible_from_date = visible_from_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HolidayCutoff':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HolidayCutoff of this HolidayCutoff.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deadline_date(self):
        """Gets the deadline_date of this HolidayCutoff.

        Date of the order deadline, in ISO 8601 format. For example, \"2016-11-29\" for 29th November 2016. Required.

        :return: The deadline_date of this HolidayCutoff.
        :rtype: str
        """
        return self._deadline_date

    @deadline_date.setter
    def deadline_date(self, deadline_date):
        """Sets the deadline_date of this HolidayCutoff.

        Date of the order deadline, in ISO 8601 format. For example, \"2016-11-29\" for 29th November 2016. Required.

        :param deadline_date: The deadline_date of this HolidayCutoff.
        :type deadline_date: str
        """

        self._deadline_date = deadline_date

    @property
    def deadline_hour(self):
        """Gets the deadline_hour of this HolidayCutoff.

        Hour of the day on the deadline date until which the order has to be placed to qualify for the delivery guarantee. Possible values are: 0 (midnight), 1, ..., 12 (noon), 13, ..., 23. Required.

        :return: The deadline_hour of this HolidayCutoff.
        :rtype: int
        """
        return self._deadline_hour

    @deadline_hour.setter
    def deadline_hour(self, deadline_hour):
        """Sets the deadline_hour of this HolidayCutoff.

        Hour of the day on the deadline date until which the order has to be placed to qualify for the delivery guarantee. Possible values are: 0 (midnight), 1, ..., 12 (noon), 13, ..., 23. Required.

        :param deadline_hour: The deadline_hour of this HolidayCutoff.
        :type deadline_hour: int
        """

        self._deadline_hour = deadline_hour

    @property
    def deadline_timezone(self):
        """Gets the deadline_timezone of this HolidayCutoff.

        Timezone identifier for the deadline hour (for example, \"Europe/Zurich\"). List of identifiers. Required.

        :return: The deadline_timezone of this HolidayCutoff.
        :rtype: str
        """
        return self._deadline_timezone

    @deadline_timezone.setter
    def deadline_timezone(self, deadline_timezone):
        """Sets the deadline_timezone of this HolidayCutoff.

        Timezone identifier for the deadline hour (for example, \"Europe/Zurich\"). List of identifiers. Required.

        :param deadline_timezone: The deadline_timezone of this HolidayCutoff.
        :type deadline_timezone: str
        """

        self._deadline_timezone = deadline_timezone

    @property
    def holiday_id(self):
        """Gets the holiday_id of this HolidayCutoff.

        Unique identifier for the holiday. Required.

        :return: The holiday_id of this HolidayCutoff.
        :rtype: str
        """
        return self._holiday_id

    @holiday_id.setter
    def holiday_id(self, holiday_id):
        """Sets the holiday_id of this HolidayCutoff.

        Unique identifier for the holiday. Required.

        :param holiday_id: The holiday_id of this HolidayCutoff.
        :type holiday_id: str
        """

        self._holiday_id = holiday_id

    @property
    def visible_from_date(self):
        """Gets the visible_from_date of this HolidayCutoff.

        Date on which the deadline will become visible to consumers in ISO 8601 format. For example, \"2016-10-31\" for 31st October 2016. Required.

        :return: The visible_from_date of this HolidayCutoff.
        :rtype: str
        """
        return self._visible_from_date

    @visible_from_date.setter
    def visible_from_date(self, visible_from_date):
        """Sets the visible_from_date of this HolidayCutoff.

        Date on which the deadline will become visible to consumers in ISO 8601 format. For example, \"2016-10-31\" for 31st October 2016. Required.

        :param visible_from_date: The visible_from_date of this HolidayCutoff.
        :type visible_from_date: str
        """

        self._visible_from_date = visible_from_date
