# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.datafeed_status_example import DatafeedStatusExample
from openapi_server import util


class DatafeedStatusError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, count: str=None, examples: List[DatafeedStatusExample]=None, message: str=None):
        """DatafeedStatusError - a model defined in OpenAPI

        :param code: The code of this DatafeedStatusError.
        :param count: The count of this DatafeedStatusError.
        :param examples: The examples of this DatafeedStatusError.
        :param message: The message of this DatafeedStatusError.
        """
        self.openapi_types = {
            'code': str,
            'count': str,
            'examples': List[DatafeedStatusExample],
            'message': str
        }

        self.attribute_map = {
            'code': 'code',
            'count': 'count',
            'examples': 'examples',
            'message': 'message'
        }

        self._code = code
        self._count = count
        self._examples = examples
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatafeedStatusError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatafeedStatusError of this DatafeedStatusError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this DatafeedStatusError.

        The code of the error, for example, \"validation/invalid_value\".

        :return: The code of this DatafeedStatusError.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this DatafeedStatusError.

        The code of the error, for example, \"validation/invalid_value\".

        :param code: The code of this DatafeedStatusError.
        :type code: str
        """

        self._code = code

    @property
    def count(self):
        """Gets the count of this DatafeedStatusError.

        The number of occurrences of the error in the feed.

        :return: The count of this DatafeedStatusError.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this DatafeedStatusError.

        The number of occurrences of the error in the feed.

        :param count: The count of this DatafeedStatusError.
        :type count: str
        """

        self._count = count

    @property
    def examples(self):
        """Gets the examples of this DatafeedStatusError.

        A list of example occurrences of the error, grouped by product.

        :return: The examples of this DatafeedStatusError.
        :rtype: List[DatafeedStatusExample]
        """
        return self._examples

    @examples.setter
    def examples(self, examples):
        """Sets the examples of this DatafeedStatusError.

        A list of example occurrences of the error, grouped by product.

        :param examples: The examples of this DatafeedStatusError.
        :type examples: List[DatafeedStatusExample]
        """

        self._examples = examples

    @property
    def message(self):
        """Gets the message of this DatafeedStatusError.

        The error message, for example, \"Invalid price\".

        :return: The message of this DatafeedStatusError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DatafeedStatusError.

        The error message, for example, \"Invalid price\".

        :param message: The message of this DatafeedStatusError.
        :type message: str
        """

        self._message = message
