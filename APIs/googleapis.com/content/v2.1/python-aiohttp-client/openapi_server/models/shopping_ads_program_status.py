# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.shopping_ads_program_status_region_status import ShoppingAdsProgramStatusRegionStatus
from openapi_server import util


class ShoppingAdsProgramStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, global_state: str=None, region_statuses: List[ShoppingAdsProgramStatusRegionStatus]=None):
        """ShoppingAdsProgramStatus - a model defined in OpenAPI

        :param global_state: The global_state of this ShoppingAdsProgramStatus.
        :param region_statuses: The region_statuses of this ShoppingAdsProgramStatus.
        """
        self.openapi_types = {
            'global_state': str,
            'region_statuses': List[ShoppingAdsProgramStatusRegionStatus]
        }

        self.attribute_map = {
            'global_state': 'globalState',
            'region_statuses': 'regionStatuses'
        }

        self._global_state = global_state
        self._region_statuses = region_statuses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShoppingAdsProgramStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShoppingAdsProgramStatus of this ShoppingAdsProgramStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def global_state(self):
        """Gets the global_state of this ShoppingAdsProgramStatus.

        State of the program. `ENABLED` if there are offers for at least one region.

        :return: The global_state of this ShoppingAdsProgramStatus.
        :rtype: str
        """
        return self._global_state

    @global_state.setter
    def global_state(self, global_state):
        """Sets the global_state of this ShoppingAdsProgramStatus.

        State of the program. `ENABLED` if there are offers for at least one region.

        :param global_state: The global_state of this ShoppingAdsProgramStatus.
        :type global_state: str
        """
        allowed_values = ["PROGRAM_STATE_UNSPECIFIED", "NOT_ENABLED", "NO_OFFERS_UPLOADED", "ENABLED"]  # noqa: E501
        if global_state not in allowed_values:
            raise ValueError(
                "Invalid value for `global_state` ({0}), must be one of {1}"
                .format(global_state, allowed_values)
            )

        self._global_state = global_state

    @property
    def region_statuses(self):
        """Gets the region_statuses of this ShoppingAdsProgramStatus.

        Status of the program in each region. Regions with the same status and review eligibility are grouped together in `regionCodes`.

        :return: The region_statuses of this ShoppingAdsProgramStatus.
        :rtype: List[ShoppingAdsProgramStatusRegionStatus]
        """
        return self._region_statuses

    @region_statuses.setter
    def region_statuses(self, region_statuses):
        """Sets the region_statuses of this ShoppingAdsProgramStatus.

        Status of the program in each region. Regions with the same status and review eligibility are grouped together in `regionCodes`.

        :param region_statuses: The region_statuses of this ShoppingAdsProgramStatus.
        :type region_statuses: List[ShoppingAdsProgramStatusRegionStatus]
        """

        self._region_statuses = region_statuses
