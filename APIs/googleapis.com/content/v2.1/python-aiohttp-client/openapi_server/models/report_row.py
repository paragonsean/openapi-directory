# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.best_sellers import BestSellers
from openapi_server.models.brand import Brand
from openapi_server.models.competitive_visibility import CompetitiveVisibility
from openapi_server.models.metrics import Metrics
from openapi_server.models.price_competitiveness import PriceCompetitiveness
from openapi_server.models.price_insights import PriceInsights
from openapi_server.models.product_cluster import ProductCluster
from openapi_server.models.product_view import ProductView
from openapi_server.models.segments import Segments
from openapi_server import util


class ReportRow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, best_sellers: BestSellers=None, brand: Brand=None, competitive_visibility: CompetitiveVisibility=None, metrics: Metrics=None, price_competitiveness: PriceCompetitiveness=None, price_insights: PriceInsights=None, product_cluster: ProductCluster=None, product_view: ProductView=None, segments: Segments=None):
        """ReportRow - a model defined in OpenAPI

        :param best_sellers: The best_sellers of this ReportRow.
        :param brand: The brand of this ReportRow.
        :param competitive_visibility: The competitive_visibility of this ReportRow.
        :param metrics: The metrics of this ReportRow.
        :param price_competitiveness: The price_competitiveness of this ReportRow.
        :param price_insights: The price_insights of this ReportRow.
        :param product_cluster: The product_cluster of this ReportRow.
        :param product_view: The product_view of this ReportRow.
        :param segments: The segments of this ReportRow.
        """
        self.openapi_types = {
            'best_sellers': BestSellers,
            'brand': Brand,
            'competitive_visibility': CompetitiveVisibility,
            'metrics': Metrics,
            'price_competitiveness': PriceCompetitiveness,
            'price_insights': PriceInsights,
            'product_cluster': ProductCluster,
            'product_view': ProductView,
            'segments': Segments
        }

        self.attribute_map = {
            'best_sellers': 'bestSellers',
            'brand': 'brand',
            'competitive_visibility': 'competitiveVisibility',
            'metrics': 'metrics',
            'price_competitiveness': 'priceCompetitiveness',
            'price_insights': 'priceInsights',
            'product_cluster': 'productCluster',
            'product_view': 'productView',
            'segments': 'segments'
        }

        self._best_sellers = best_sellers
        self._brand = brand
        self._competitive_visibility = competitive_visibility
        self._metrics = metrics
        self._price_competitiveness = price_competitiveness
        self._price_insights = price_insights
        self._product_cluster = product_cluster
        self._product_view = product_view
        self._segments = segments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportRow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportRow of this ReportRow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def best_sellers(self):
        """Gets the best_sellers of this ReportRow.


        :return: The best_sellers of this ReportRow.
        :rtype: BestSellers
        """
        return self._best_sellers

    @best_sellers.setter
    def best_sellers(self, best_sellers):
        """Sets the best_sellers of this ReportRow.


        :param best_sellers: The best_sellers of this ReportRow.
        :type best_sellers: BestSellers
        """

        self._best_sellers = best_sellers

    @property
    def brand(self):
        """Gets the brand of this ReportRow.


        :return: The brand of this ReportRow.
        :rtype: Brand
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this ReportRow.


        :param brand: The brand of this ReportRow.
        :type brand: Brand
        """

        self._brand = brand

    @property
    def competitive_visibility(self):
        """Gets the competitive_visibility of this ReportRow.


        :return: The competitive_visibility of this ReportRow.
        :rtype: CompetitiveVisibility
        """
        return self._competitive_visibility

    @competitive_visibility.setter
    def competitive_visibility(self, competitive_visibility):
        """Sets the competitive_visibility of this ReportRow.


        :param competitive_visibility: The competitive_visibility of this ReportRow.
        :type competitive_visibility: CompetitiveVisibility
        """

        self._competitive_visibility = competitive_visibility

    @property
    def metrics(self):
        """Gets the metrics of this ReportRow.


        :return: The metrics of this ReportRow.
        :rtype: Metrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ReportRow.


        :param metrics: The metrics of this ReportRow.
        :type metrics: Metrics
        """

        self._metrics = metrics

    @property
    def price_competitiveness(self):
        """Gets the price_competitiveness of this ReportRow.


        :return: The price_competitiveness of this ReportRow.
        :rtype: PriceCompetitiveness
        """
        return self._price_competitiveness

    @price_competitiveness.setter
    def price_competitiveness(self, price_competitiveness):
        """Sets the price_competitiveness of this ReportRow.


        :param price_competitiveness: The price_competitiveness of this ReportRow.
        :type price_competitiveness: PriceCompetitiveness
        """

        self._price_competitiveness = price_competitiveness

    @property
    def price_insights(self):
        """Gets the price_insights of this ReportRow.


        :return: The price_insights of this ReportRow.
        :rtype: PriceInsights
        """
        return self._price_insights

    @price_insights.setter
    def price_insights(self, price_insights):
        """Sets the price_insights of this ReportRow.


        :param price_insights: The price_insights of this ReportRow.
        :type price_insights: PriceInsights
        """

        self._price_insights = price_insights

    @property
    def product_cluster(self):
        """Gets the product_cluster of this ReportRow.


        :return: The product_cluster of this ReportRow.
        :rtype: ProductCluster
        """
        return self._product_cluster

    @product_cluster.setter
    def product_cluster(self, product_cluster):
        """Sets the product_cluster of this ReportRow.


        :param product_cluster: The product_cluster of this ReportRow.
        :type product_cluster: ProductCluster
        """

        self._product_cluster = product_cluster

    @property
    def product_view(self):
        """Gets the product_view of this ReportRow.


        :return: The product_view of this ReportRow.
        :rtype: ProductView
        """
        return self._product_view

    @product_view.setter
    def product_view(self, product_view):
        """Sets the product_view of this ReportRow.


        :param product_view: The product_view of this ReportRow.
        :type product_view: ProductView
        """

        self._product_view = product_view

    @property
    def segments(self):
        """Gets the segments of this ReportRow.


        :return: The segments of this ReportRow.
        :rtype: Segments
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this ReportRow.


        :param segments: The segments of this ReportRow.
        :type segments: Segments
        """

        self._segments = segments
