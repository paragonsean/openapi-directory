# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price_amount import PriceAmount
from openapi_server.models.promotion_promotion_status import PromotionPromotionStatus
from openapi_server.models.time_period import TimePeriod
from openapi_server import util


class Promotion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: List[str]=None, brand_exclusion: List[str]=None, content_language: str=None, coupon_value_type: str=None, free_gift_description: str=None, free_gift_item_id: str=None, free_gift_value: PriceAmount=None, generic_redemption_code: str=None, get_this_quantity_discounted: int=None, id: str=None, item_group_id: List[str]=None, item_group_id_exclusion: List[str]=None, item_id: List[str]=None, item_id_exclusion: List[str]=None, limit_quantity: int=None, limit_value: PriceAmount=None, long_title: str=None, minimum_purchase_amount: PriceAmount=None, minimum_purchase_quantity: int=None, money_budget: PriceAmount=None, money_off_amount: PriceAmount=None, offer_type: str=None, order_limit: int=None, percent_off: int=None, product_applicability: str=None, product_type: List[str]=None, product_type_exclusion: List[str]=None, promotion_destination_ids: List[str]=None, promotion_display_dates: str=None, promotion_display_time_period: TimePeriod=None, promotion_effective_dates: str=None, promotion_effective_time_period: TimePeriod=None, promotion_id: str=None, promotion_status: PromotionPromotionStatus=None, promotion_url: str=None, redemption_channel: List[str]=None, shipping_service_names: List[str]=None, store_applicability: str=None, store_code: List[str]=None, store_code_exclusion: List[str]=None, target_country: str=None):
        """Promotion - a model defined in OpenAPI

        :param brand: The brand of this Promotion.
        :param brand_exclusion: The brand_exclusion of this Promotion.
        :param content_language: The content_language of this Promotion.
        :param coupon_value_type: The coupon_value_type of this Promotion.
        :param free_gift_description: The free_gift_description of this Promotion.
        :param free_gift_item_id: The free_gift_item_id of this Promotion.
        :param free_gift_value: The free_gift_value of this Promotion.
        :param generic_redemption_code: The generic_redemption_code of this Promotion.
        :param get_this_quantity_discounted: The get_this_quantity_discounted of this Promotion.
        :param id: The id of this Promotion.
        :param item_group_id: The item_group_id of this Promotion.
        :param item_group_id_exclusion: The item_group_id_exclusion of this Promotion.
        :param item_id: The item_id of this Promotion.
        :param item_id_exclusion: The item_id_exclusion of this Promotion.
        :param limit_quantity: The limit_quantity of this Promotion.
        :param limit_value: The limit_value of this Promotion.
        :param long_title: The long_title of this Promotion.
        :param minimum_purchase_amount: The minimum_purchase_amount of this Promotion.
        :param minimum_purchase_quantity: The minimum_purchase_quantity of this Promotion.
        :param money_budget: The money_budget of this Promotion.
        :param money_off_amount: The money_off_amount of this Promotion.
        :param offer_type: The offer_type of this Promotion.
        :param order_limit: The order_limit of this Promotion.
        :param percent_off: The percent_off of this Promotion.
        :param product_applicability: The product_applicability of this Promotion.
        :param product_type: The product_type of this Promotion.
        :param product_type_exclusion: The product_type_exclusion of this Promotion.
        :param promotion_destination_ids: The promotion_destination_ids of this Promotion.
        :param promotion_display_dates: The promotion_display_dates of this Promotion.
        :param promotion_display_time_period: The promotion_display_time_period of this Promotion.
        :param promotion_effective_dates: The promotion_effective_dates of this Promotion.
        :param promotion_effective_time_period: The promotion_effective_time_period of this Promotion.
        :param promotion_id: The promotion_id of this Promotion.
        :param promotion_status: The promotion_status of this Promotion.
        :param promotion_url: The promotion_url of this Promotion.
        :param redemption_channel: The redemption_channel of this Promotion.
        :param shipping_service_names: The shipping_service_names of this Promotion.
        :param store_applicability: The store_applicability of this Promotion.
        :param store_code: The store_code of this Promotion.
        :param store_code_exclusion: The store_code_exclusion of this Promotion.
        :param target_country: The target_country of this Promotion.
        """
        self.openapi_types = {
            'brand': List[str],
            'brand_exclusion': List[str],
            'content_language': str,
            'coupon_value_type': str,
            'free_gift_description': str,
            'free_gift_item_id': str,
            'free_gift_value': PriceAmount,
            'generic_redemption_code': str,
            'get_this_quantity_discounted': int,
            'id': str,
            'item_group_id': List[str],
            'item_group_id_exclusion': List[str],
            'item_id': List[str],
            'item_id_exclusion': List[str],
            'limit_quantity': int,
            'limit_value': PriceAmount,
            'long_title': str,
            'minimum_purchase_amount': PriceAmount,
            'minimum_purchase_quantity': int,
            'money_budget': PriceAmount,
            'money_off_amount': PriceAmount,
            'offer_type': str,
            'order_limit': int,
            'percent_off': int,
            'product_applicability': str,
            'product_type': List[str],
            'product_type_exclusion': List[str],
            'promotion_destination_ids': List[str],
            'promotion_display_dates': str,
            'promotion_display_time_period': TimePeriod,
            'promotion_effective_dates': str,
            'promotion_effective_time_period': TimePeriod,
            'promotion_id': str,
            'promotion_status': PromotionPromotionStatus,
            'promotion_url': str,
            'redemption_channel': List[str],
            'shipping_service_names': List[str],
            'store_applicability': str,
            'store_code': List[str],
            'store_code_exclusion': List[str],
            'target_country': str
        }

        self.attribute_map = {
            'brand': 'brand',
            'brand_exclusion': 'brandExclusion',
            'content_language': 'contentLanguage',
            'coupon_value_type': 'couponValueType',
            'free_gift_description': 'freeGiftDescription',
            'free_gift_item_id': 'freeGiftItemId',
            'free_gift_value': 'freeGiftValue',
            'generic_redemption_code': 'genericRedemptionCode',
            'get_this_quantity_discounted': 'getThisQuantityDiscounted',
            'id': 'id',
            'item_group_id': 'itemGroupId',
            'item_group_id_exclusion': 'itemGroupIdExclusion',
            'item_id': 'itemId',
            'item_id_exclusion': 'itemIdExclusion',
            'limit_quantity': 'limitQuantity',
            'limit_value': 'limitValue',
            'long_title': 'longTitle',
            'minimum_purchase_amount': 'minimumPurchaseAmount',
            'minimum_purchase_quantity': 'minimumPurchaseQuantity',
            'money_budget': 'moneyBudget',
            'money_off_amount': 'moneyOffAmount',
            'offer_type': 'offerType',
            'order_limit': 'orderLimit',
            'percent_off': 'percentOff',
            'product_applicability': 'productApplicability',
            'product_type': 'productType',
            'product_type_exclusion': 'productTypeExclusion',
            'promotion_destination_ids': 'promotionDestinationIds',
            'promotion_display_dates': 'promotionDisplayDates',
            'promotion_display_time_period': 'promotionDisplayTimePeriod',
            'promotion_effective_dates': 'promotionEffectiveDates',
            'promotion_effective_time_period': 'promotionEffectiveTimePeriod',
            'promotion_id': 'promotionId',
            'promotion_status': 'promotionStatus',
            'promotion_url': 'promotionUrl',
            'redemption_channel': 'redemptionChannel',
            'shipping_service_names': 'shippingServiceNames',
            'store_applicability': 'storeApplicability',
            'store_code': 'storeCode',
            'store_code_exclusion': 'storeCodeExclusion',
            'target_country': 'targetCountry'
        }

        self._brand = brand
        self._brand_exclusion = brand_exclusion
        self._content_language = content_language
        self._coupon_value_type = coupon_value_type
        self._free_gift_description = free_gift_description
        self._free_gift_item_id = free_gift_item_id
        self._free_gift_value = free_gift_value
        self._generic_redemption_code = generic_redemption_code
        self._get_this_quantity_discounted = get_this_quantity_discounted
        self._id = id
        self._item_group_id = item_group_id
        self._item_group_id_exclusion = item_group_id_exclusion
        self._item_id = item_id
        self._item_id_exclusion = item_id_exclusion
        self._limit_quantity = limit_quantity
        self._limit_value = limit_value
        self._long_title = long_title
        self._minimum_purchase_amount = minimum_purchase_amount
        self._minimum_purchase_quantity = minimum_purchase_quantity
        self._money_budget = money_budget
        self._money_off_amount = money_off_amount
        self._offer_type = offer_type
        self._order_limit = order_limit
        self._percent_off = percent_off
        self._product_applicability = product_applicability
        self._product_type = product_type
        self._product_type_exclusion = product_type_exclusion
        self._promotion_destination_ids = promotion_destination_ids
        self._promotion_display_dates = promotion_display_dates
        self._promotion_display_time_period = promotion_display_time_period
        self._promotion_effective_dates = promotion_effective_dates
        self._promotion_effective_time_period = promotion_effective_time_period
        self._promotion_id = promotion_id
        self._promotion_status = promotion_status
        self._promotion_url = promotion_url
        self._redemption_channel = redemption_channel
        self._shipping_service_names = shipping_service_names
        self._store_applicability = store_applicability
        self._store_code = store_code
        self._store_code_exclusion = store_code_exclusion
        self._target_country = target_country

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Promotion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Promotion of this Promotion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this Promotion.

        Product filter by brand for the promotion.

        :return: The brand of this Promotion.
        :rtype: List[str]
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Promotion.

        Product filter by brand for the promotion.

        :param brand: The brand of this Promotion.
        :type brand: List[str]
        """

        self._brand = brand

    @property
    def brand_exclusion(self):
        """Gets the brand_exclusion of this Promotion.

        Product filter by brand exclusion for the promotion.

        :return: The brand_exclusion of this Promotion.
        :rtype: List[str]
        """
        return self._brand_exclusion

    @brand_exclusion.setter
    def brand_exclusion(self, brand_exclusion):
        """Sets the brand_exclusion of this Promotion.

        Product filter by brand exclusion for the promotion.

        :param brand_exclusion: The brand_exclusion of this Promotion.
        :type brand_exclusion: List[str]
        """

        self._brand_exclusion = brand_exclusion

    @property
    def content_language(self):
        """Gets the content_language of this Promotion.

        Required. The content language used as part of the unique identifier. `en` content language is available for all target countries. `fr` content language is available for `CA` and `FR` target countries. `de` content language is available for `DE` target country. `nl` content language is available for `NL` target country. `it` content language is available for `IT` target country. `pt` content language is available for `BR` target country. `ja` content language is available for `JP` target country. `ko` content language is available for `KR` target country.

        :return: The content_language of this Promotion.
        :rtype: str
        """
        return self._content_language

    @content_language.setter
    def content_language(self, content_language):
        """Sets the content_language of this Promotion.

        Required. The content language used as part of the unique identifier. `en` content language is available for all target countries. `fr` content language is available for `CA` and `FR` target countries. `de` content language is available for `DE` target country. `nl` content language is available for `NL` target country. `it` content language is available for `IT` target country. `pt` content language is available for `BR` target country. `ja` content language is available for `JP` target country. `ko` content language is available for `KR` target country.

        :param content_language: The content_language of this Promotion.
        :type content_language: str
        """

        self._content_language = content_language

    @property
    def coupon_value_type(self):
        """Gets the coupon_value_type of this Promotion.

        Required. Coupon value type for the promotion.

        :return: The coupon_value_type of this Promotion.
        :rtype: str
        """
        return self._coupon_value_type

    @coupon_value_type.setter
    def coupon_value_type(self, coupon_value_type):
        """Sets the coupon_value_type of this Promotion.

        Required. Coupon value type for the promotion.

        :param coupon_value_type: The coupon_value_type of this Promotion.
        :type coupon_value_type: str
        """
        allowed_values = ["COUPON_VALUE_TYPE_UNSPECIFIED", "MONEY_OFF", "PERCENT_OFF", "BUY_M_GET_N_MONEY_OFF", "BUY_M_GET_N_PERCENT_OFF", "BUY_M_GET_MONEY_OFF", "BUY_M_GET_PERCENT_OFF", "FREE_GIFT", "FREE_GIFT_WITH_VALUE", "FREE_GIFT_WITH_ITEM_ID", "FREE_SHIPPING_STANDARD", "FREE_SHIPPING_OVERNIGHT", "FREE_SHIPPING_TWO_DAY"]  # noqa: E501
        if coupon_value_type not in allowed_values:
            raise ValueError(
                "Invalid value for `coupon_value_type` ({0}), must be one of {1}"
                .format(coupon_value_type, allowed_values)
            )

        self._coupon_value_type = coupon_value_type

    @property
    def free_gift_description(self):
        """Gets the free_gift_description of this Promotion.

        Free gift description for the promotion.

        :return: The free_gift_description of this Promotion.
        :rtype: str
        """
        return self._free_gift_description

    @free_gift_description.setter
    def free_gift_description(self, free_gift_description):
        """Sets the free_gift_description of this Promotion.

        Free gift description for the promotion.

        :param free_gift_description: The free_gift_description of this Promotion.
        :type free_gift_description: str
        """

        self._free_gift_description = free_gift_description

    @property
    def free_gift_item_id(self):
        """Gets the free_gift_item_id of this Promotion.

        Free gift item ID for the promotion.

        :return: The free_gift_item_id of this Promotion.
        :rtype: str
        """
        return self._free_gift_item_id

    @free_gift_item_id.setter
    def free_gift_item_id(self, free_gift_item_id):
        """Sets the free_gift_item_id of this Promotion.

        Free gift item ID for the promotion.

        :param free_gift_item_id: The free_gift_item_id of this Promotion.
        :type free_gift_item_id: str
        """

        self._free_gift_item_id = free_gift_item_id

    @property
    def free_gift_value(self):
        """Gets the free_gift_value of this Promotion.


        :return: The free_gift_value of this Promotion.
        :rtype: PriceAmount
        """
        return self._free_gift_value

    @free_gift_value.setter
    def free_gift_value(self, free_gift_value):
        """Sets the free_gift_value of this Promotion.


        :param free_gift_value: The free_gift_value of this Promotion.
        :type free_gift_value: PriceAmount
        """

        self._free_gift_value = free_gift_value

    @property
    def generic_redemption_code(self):
        """Gets the generic_redemption_code of this Promotion.

        Generic redemption code for the promotion. To be used with the `offerType` field.

        :return: The generic_redemption_code of this Promotion.
        :rtype: str
        """
        return self._generic_redemption_code

    @generic_redemption_code.setter
    def generic_redemption_code(self, generic_redemption_code):
        """Sets the generic_redemption_code of this Promotion.

        Generic redemption code for the promotion. To be used with the `offerType` field.

        :param generic_redemption_code: The generic_redemption_code of this Promotion.
        :type generic_redemption_code: str
        """

        self._generic_redemption_code = generic_redemption_code

    @property
    def get_this_quantity_discounted(self):
        """Gets the get_this_quantity_discounted of this Promotion.

        The number of items discounted in the promotion.

        :return: The get_this_quantity_discounted of this Promotion.
        :rtype: int
        """
        return self._get_this_quantity_discounted

    @get_this_quantity_discounted.setter
    def get_this_quantity_discounted(self, get_this_quantity_discounted):
        """Sets the get_this_quantity_discounted of this Promotion.

        The number of items discounted in the promotion.

        :param get_this_quantity_discounted: The get_this_quantity_discounted of this Promotion.
        :type get_this_quantity_discounted: int
        """

        self._get_this_quantity_discounted = get_this_quantity_discounted

    @property
    def id(self):
        """Gets the id of this Promotion.

        Output only. The REST promotion ID to uniquely identify the promotion. Content API methods that operate on promotions take this as their `promotionId` parameter. The REST ID for a promotion is of the form channel:contentLanguage:targetCountry:promotionId The `channel` field has a value of `\"online\"`, `\"in_store\"`, or `\"online_in_store\"`.

        :return: The id of this Promotion.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Promotion.

        Output only. The REST promotion ID to uniquely identify the promotion. Content API methods that operate on promotions take this as their `promotionId` parameter. The REST ID for a promotion is of the form channel:contentLanguage:targetCountry:promotionId The `channel` field has a value of `\"online\"`, `\"in_store\"`, or `\"online_in_store\"`.

        :param id: The id of this Promotion.
        :type id: str
        """

        self._id = id

    @property
    def item_group_id(self):
        """Gets the item_group_id of this Promotion.

        Product filter by item group ID for the promotion.

        :return: The item_group_id of this Promotion.
        :rtype: List[str]
        """
        return self._item_group_id

    @item_group_id.setter
    def item_group_id(self, item_group_id):
        """Sets the item_group_id of this Promotion.

        Product filter by item group ID for the promotion.

        :param item_group_id: The item_group_id of this Promotion.
        :type item_group_id: List[str]
        """

        self._item_group_id = item_group_id

    @property
    def item_group_id_exclusion(self):
        """Gets the item_group_id_exclusion of this Promotion.

        Product filter by item group ID exclusion for the promotion.

        :return: The item_group_id_exclusion of this Promotion.
        :rtype: List[str]
        """
        return self._item_group_id_exclusion

    @item_group_id_exclusion.setter
    def item_group_id_exclusion(self, item_group_id_exclusion):
        """Sets the item_group_id_exclusion of this Promotion.

        Product filter by item group ID exclusion for the promotion.

        :param item_group_id_exclusion: The item_group_id_exclusion of this Promotion.
        :type item_group_id_exclusion: List[str]
        """

        self._item_group_id_exclusion = item_group_id_exclusion

    @property
    def item_id(self):
        """Gets the item_id of this Promotion.

        Product filter by item ID for the promotion.

        :return: The item_id of this Promotion.
        :rtype: List[str]
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Promotion.

        Product filter by item ID for the promotion.

        :param item_id: The item_id of this Promotion.
        :type item_id: List[str]
        """

        self._item_id = item_id

    @property
    def item_id_exclusion(self):
        """Gets the item_id_exclusion of this Promotion.

        Product filter by item ID exclusion for the promotion.

        :return: The item_id_exclusion of this Promotion.
        :rtype: List[str]
        """
        return self._item_id_exclusion

    @item_id_exclusion.setter
    def item_id_exclusion(self, item_id_exclusion):
        """Sets the item_id_exclusion of this Promotion.

        Product filter by item ID exclusion for the promotion.

        :param item_id_exclusion: The item_id_exclusion of this Promotion.
        :type item_id_exclusion: List[str]
        """

        self._item_id_exclusion = item_id_exclusion

    @property
    def limit_quantity(self):
        """Gets the limit_quantity of this Promotion.

        Maximum purchase quantity for the promotion.

        :return: The limit_quantity of this Promotion.
        :rtype: int
        """
        return self._limit_quantity

    @limit_quantity.setter
    def limit_quantity(self, limit_quantity):
        """Sets the limit_quantity of this Promotion.

        Maximum purchase quantity for the promotion.

        :param limit_quantity: The limit_quantity of this Promotion.
        :type limit_quantity: int
        """

        self._limit_quantity = limit_quantity

    @property
    def limit_value(self):
        """Gets the limit_value of this Promotion.


        :return: The limit_value of this Promotion.
        :rtype: PriceAmount
        """
        return self._limit_value

    @limit_value.setter
    def limit_value(self, limit_value):
        """Sets the limit_value of this Promotion.


        :param limit_value: The limit_value of this Promotion.
        :type limit_value: PriceAmount
        """

        self._limit_value = limit_value

    @property
    def long_title(self):
        """Gets the long_title of this Promotion.

        Required. Long title for the promotion.

        :return: The long_title of this Promotion.
        :rtype: str
        """
        return self._long_title

    @long_title.setter
    def long_title(self, long_title):
        """Sets the long_title of this Promotion.

        Required. Long title for the promotion.

        :param long_title: The long_title of this Promotion.
        :type long_title: str
        """

        self._long_title = long_title

    @property
    def minimum_purchase_amount(self):
        """Gets the minimum_purchase_amount of this Promotion.


        :return: The minimum_purchase_amount of this Promotion.
        :rtype: PriceAmount
        """
        return self._minimum_purchase_amount

    @minimum_purchase_amount.setter
    def minimum_purchase_amount(self, minimum_purchase_amount):
        """Sets the minimum_purchase_amount of this Promotion.


        :param minimum_purchase_amount: The minimum_purchase_amount of this Promotion.
        :type minimum_purchase_amount: PriceAmount
        """

        self._minimum_purchase_amount = minimum_purchase_amount

    @property
    def minimum_purchase_quantity(self):
        """Gets the minimum_purchase_quantity of this Promotion.

        Minimum purchase quantity for the promotion.

        :return: The minimum_purchase_quantity of this Promotion.
        :rtype: int
        """
        return self._minimum_purchase_quantity

    @minimum_purchase_quantity.setter
    def minimum_purchase_quantity(self, minimum_purchase_quantity):
        """Sets the minimum_purchase_quantity of this Promotion.

        Minimum purchase quantity for the promotion.

        :param minimum_purchase_quantity: The minimum_purchase_quantity of this Promotion.
        :type minimum_purchase_quantity: int
        """

        self._minimum_purchase_quantity = minimum_purchase_quantity

    @property
    def money_budget(self):
        """Gets the money_budget of this Promotion.


        :return: The money_budget of this Promotion.
        :rtype: PriceAmount
        """
        return self._money_budget

    @money_budget.setter
    def money_budget(self, money_budget):
        """Sets the money_budget of this Promotion.


        :param money_budget: The money_budget of this Promotion.
        :type money_budget: PriceAmount
        """

        self._money_budget = money_budget

    @property
    def money_off_amount(self):
        """Gets the money_off_amount of this Promotion.


        :return: The money_off_amount of this Promotion.
        :rtype: PriceAmount
        """
        return self._money_off_amount

    @money_off_amount.setter
    def money_off_amount(self, money_off_amount):
        """Sets the money_off_amount of this Promotion.


        :param money_off_amount: The money_off_amount of this Promotion.
        :type money_off_amount: PriceAmount
        """

        self._money_off_amount = money_off_amount

    @property
    def offer_type(self):
        """Gets the offer_type of this Promotion.

        Required. Type of the promotion.

        :return: The offer_type of this Promotion.
        :rtype: str
        """
        return self._offer_type

    @offer_type.setter
    def offer_type(self, offer_type):
        """Sets the offer_type of this Promotion.

        Required. Type of the promotion.

        :param offer_type: The offer_type of this Promotion.
        :type offer_type: str
        """
        allowed_values = ["OFFER_TYPE_UNSPECIFIED", "NO_CODE", "GENERIC_CODE"]  # noqa: E501
        if offer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `offer_type` ({0}), must be one of {1}"
                .format(offer_type, allowed_values)
            )

        self._offer_type = offer_type

    @property
    def order_limit(self):
        """Gets the order_limit of this Promotion.

        Order limit for the promotion.

        :return: The order_limit of this Promotion.
        :rtype: int
        """
        return self._order_limit

    @order_limit.setter
    def order_limit(self, order_limit):
        """Sets the order_limit of this Promotion.

        Order limit for the promotion.

        :param order_limit: The order_limit of this Promotion.
        :type order_limit: int
        """

        self._order_limit = order_limit

    @property
    def percent_off(self):
        """Gets the percent_off of this Promotion.

        The percentage discount offered in the promotion.

        :return: The percent_off of this Promotion.
        :rtype: int
        """
        return self._percent_off

    @percent_off.setter
    def percent_off(self, percent_off):
        """Sets the percent_off of this Promotion.

        The percentage discount offered in the promotion.

        :param percent_off: The percent_off of this Promotion.
        :type percent_off: int
        """

        self._percent_off = percent_off

    @property
    def product_applicability(self):
        """Gets the product_applicability of this Promotion.

        Required. Applicability of the promotion to either all products or only specific products.

        :return: The product_applicability of this Promotion.
        :rtype: str
        """
        return self._product_applicability

    @product_applicability.setter
    def product_applicability(self, product_applicability):
        """Sets the product_applicability of this Promotion.

        Required. Applicability of the promotion to either all products or only specific products.

        :param product_applicability: The product_applicability of this Promotion.
        :type product_applicability: str
        """
        allowed_values = ["PRODUCT_APPLICABILITY_UNSPECIFIED", "ALL_PRODUCTS", "SPECIFIC_PRODUCTS"]  # noqa: E501
        if product_applicability not in allowed_values:
            raise ValueError(
                "Invalid value for `product_applicability` ({0}), must be one of {1}"
                .format(product_applicability, allowed_values)
            )

        self._product_applicability = product_applicability

    @property
    def product_type(self):
        """Gets the product_type of this Promotion.

        Product filter by product type for the promotion.

        :return: The product_type of this Promotion.
        :rtype: List[str]
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this Promotion.

        Product filter by product type for the promotion.

        :param product_type: The product_type of this Promotion.
        :type product_type: List[str]
        """

        self._product_type = product_type

    @property
    def product_type_exclusion(self):
        """Gets the product_type_exclusion of this Promotion.

        Product filter by product type exclusion for the promotion.

        :return: The product_type_exclusion of this Promotion.
        :rtype: List[str]
        """
        return self._product_type_exclusion

    @product_type_exclusion.setter
    def product_type_exclusion(self, product_type_exclusion):
        """Sets the product_type_exclusion of this Promotion.

        Product filter by product type exclusion for the promotion.

        :param product_type_exclusion: The product_type_exclusion of this Promotion.
        :type product_type_exclusion: List[str]
        """

        self._product_type_exclusion = product_type_exclusion

    @property
    def promotion_destination_ids(self):
        """Gets the promotion_destination_ids of this Promotion.

        Destination ID for the promotion.

        :return: The promotion_destination_ids of this Promotion.
        :rtype: List[str]
        """
        return self._promotion_destination_ids

    @promotion_destination_ids.setter
    def promotion_destination_ids(self, promotion_destination_ids):
        """Sets the promotion_destination_ids of this Promotion.

        Destination ID for the promotion.

        :param promotion_destination_ids: The promotion_destination_ids of this Promotion.
        :type promotion_destination_ids: List[str]
        """

        self._promotion_destination_ids = promotion_destination_ids

    @property
    def promotion_display_dates(self):
        """Gets the promotion_display_dates of this Promotion.

        String representation of the promotion display dates. Deprecated. Use `promotion_display_time_period` instead.

        :return: The promotion_display_dates of this Promotion.
        :rtype: str
        """
        return self._promotion_display_dates

    @promotion_display_dates.setter
    def promotion_display_dates(self, promotion_display_dates):
        """Sets the promotion_display_dates of this Promotion.

        String representation of the promotion display dates. Deprecated. Use `promotion_display_time_period` instead.

        :param promotion_display_dates: The promotion_display_dates of this Promotion.
        :type promotion_display_dates: str
        """

        self._promotion_display_dates = promotion_display_dates

    @property
    def promotion_display_time_period(self):
        """Gets the promotion_display_time_period of this Promotion.


        :return: The promotion_display_time_period of this Promotion.
        :rtype: TimePeriod
        """
        return self._promotion_display_time_period

    @promotion_display_time_period.setter
    def promotion_display_time_period(self, promotion_display_time_period):
        """Sets the promotion_display_time_period of this Promotion.


        :param promotion_display_time_period: The promotion_display_time_period of this Promotion.
        :type promotion_display_time_period: TimePeriod
        """

        self._promotion_display_time_period = promotion_display_time_period

    @property
    def promotion_effective_dates(self):
        """Gets the promotion_effective_dates of this Promotion.

        String representation of the promotion effective dates. Deprecated. Use `promotion_effective_time_period` instead.

        :return: The promotion_effective_dates of this Promotion.
        :rtype: str
        """
        return self._promotion_effective_dates

    @promotion_effective_dates.setter
    def promotion_effective_dates(self, promotion_effective_dates):
        """Sets the promotion_effective_dates of this Promotion.

        String representation of the promotion effective dates. Deprecated. Use `promotion_effective_time_period` instead.

        :param promotion_effective_dates: The promotion_effective_dates of this Promotion.
        :type promotion_effective_dates: str
        """

        self._promotion_effective_dates = promotion_effective_dates

    @property
    def promotion_effective_time_period(self):
        """Gets the promotion_effective_time_period of this Promotion.


        :return: The promotion_effective_time_period of this Promotion.
        :rtype: TimePeriod
        """
        return self._promotion_effective_time_period

    @promotion_effective_time_period.setter
    def promotion_effective_time_period(self, promotion_effective_time_period):
        """Sets the promotion_effective_time_period of this Promotion.


        :param promotion_effective_time_period: The promotion_effective_time_period of this Promotion.
        :type promotion_effective_time_period: TimePeriod
        """

        self._promotion_effective_time_period = promotion_effective_time_period

    @property
    def promotion_id(self):
        """Gets the promotion_id of this Promotion.

        Required. The user provided promotion ID to uniquely identify the promotion.

        :return: The promotion_id of this Promotion.
        :rtype: str
        """
        return self._promotion_id

    @promotion_id.setter
    def promotion_id(self, promotion_id):
        """Sets the promotion_id of this Promotion.

        Required. The user provided promotion ID to uniquely identify the promotion.

        :param promotion_id: The promotion_id of this Promotion.
        :type promotion_id: str
        """

        self._promotion_id = promotion_id

    @property
    def promotion_status(self):
        """Gets the promotion_status of this Promotion.


        :return: The promotion_status of this Promotion.
        :rtype: PromotionPromotionStatus
        """
        return self._promotion_status

    @promotion_status.setter
    def promotion_status(self, promotion_status):
        """Sets the promotion_status of this Promotion.


        :param promotion_status: The promotion_status of this Promotion.
        :type promotion_status: PromotionPromotionStatus
        """

        self._promotion_status = promotion_status

    @property
    def promotion_url(self):
        """Gets the promotion_url of this Promotion.

        URL to the page on the merchant's site where the promotion shows. Local Inventory ads promotions throw an error if no promo url is included. URL is used to confirm that the promotion is valid and can be redeemed.

        :return: The promotion_url of this Promotion.
        :rtype: str
        """
        return self._promotion_url

    @promotion_url.setter
    def promotion_url(self, promotion_url):
        """Sets the promotion_url of this Promotion.

        URL to the page on the merchant's site where the promotion shows. Local Inventory ads promotions throw an error if no promo url is included. URL is used to confirm that the promotion is valid and can be redeemed.

        :param promotion_url: The promotion_url of this Promotion.
        :type promotion_url: str
        """

        self._promotion_url = promotion_url

    @property
    def redemption_channel(self):
        """Gets the redemption_channel of this Promotion.

        Required. Redemption channel for the promotion. At least one channel is required.

        :return: The redemption_channel of this Promotion.
        :rtype: List[str]
        """
        return self._redemption_channel

    @redemption_channel.setter
    def redemption_channel(self, redemption_channel):
        """Sets the redemption_channel of this Promotion.

        Required. Redemption channel for the promotion. At least one channel is required.

        :param redemption_channel: The redemption_channel of this Promotion.
        :type redemption_channel: List[str]
        """
        allowed_values = ["REDEMPTION_CHANNEL_UNSPECIFIED", "IN_STORE", "ONLINE"]  # noqa: E501
        if not set(redemption_channel).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `redemption_channel` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(redemption_channel) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._redemption_channel = redemption_channel

    @property
    def shipping_service_names(self):
        """Gets the shipping_service_names of this Promotion.

        Shipping service names for the promotion.

        :return: The shipping_service_names of this Promotion.
        :rtype: List[str]
        """
        return self._shipping_service_names

    @shipping_service_names.setter
    def shipping_service_names(self, shipping_service_names):
        """Sets the shipping_service_names of this Promotion.

        Shipping service names for the promotion.

        :param shipping_service_names: The shipping_service_names of this Promotion.
        :type shipping_service_names: List[str]
        """

        self._shipping_service_names = shipping_service_names

    @property
    def store_applicability(self):
        """Gets the store_applicability of this Promotion.

        Whether the promotion applies to all stores, or only specified stores. Local Inventory ads promotions throw an error if no store applicability is included. An INVALID_ARGUMENT error is thrown if store_applicability is set to ALL_STORES and store_code or score_code_exclusion is set to a value.

        :return: The store_applicability of this Promotion.
        :rtype: str
        """
        return self._store_applicability

    @store_applicability.setter
    def store_applicability(self, store_applicability):
        """Sets the store_applicability of this Promotion.

        Whether the promotion applies to all stores, or only specified stores. Local Inventory ads promotions throw an error if no store applicability is included. An INVALID_ARGUMENT error is thrown if store_applicability is set to ALL_STORES and store_code or score_code_exclusion is set to a value.

        :param store_applicability: The store_applicability of this Promotion.
        :type store_applicability: str
        """
        allowed_values = ["STORE_APPLICABILITY_UNSPECIFIED", "ALL_STORES", "SPECIFIC_STORES"]  # noqa: E501
        if store_applicability not in allowed_values:
            raise ValueError(
                "Invalid value for `store_applicability` ({0}), must be one of {1}"
                .format(store_applicability, allowed_values)
            )

        self._store_applicability = store_applicability

    @property
    def store_code(self):
        """Gets the store_code of this Promotion.

        Store codes to include for the promotion.

        :return: The store_code of this Promotion.
        :rtype: List[str]
        """
        return self._store_code

    @store_code.setter
    def store_code(self, store_code):
        """Sets the store_code of this Promotion.

        Store codes to include for the promotion.

        :param store_code: The store_code of this Promotion.
        :type store_code: List[str]
        """

        self._store_code = store_code

    @property
    def store_code_exclusion(self):
        """Gets the store_code_exclusion of this Promotion.

        Store codes to exclude for the promotion.

        :return: The store_code_exclusion of this Promotion.
        :rtype: List[str]
        """
        return self._store_code_exclusion

    @store_code_exclusion.setter
    def store_code_exclusion(self, store_code_exclusion):
        """Sets the store_code_exclusion of this Promotion.

        Store codes to exclude for the promotion.

        :param store_code_exclusion: The store_code_exclusion of this Promotion.
        :type store_code_exclusion: List[str]
        """

        self._store_code_exclusion = store_code_exclusion

    @property
    def target_country(self):
        """Gets the target_country of this Promotion.

        Required. The target country used as part of the unique identifier. Can be `AU`, `CA`, `DE`, `FR`, `GB`, `IN`, `US`, `BR`, `ES`, `NL`, `JP`, `IT` or `KR`.

        :return: The target_country of this Promotion.
        :rtype: str
        """
        return self._target_country

    @target_country.setter
    def target_country(self, target_country):
        """Sets the target_country of this Promotion.

        Required. The target country used as part of the unique identifier. Can be `AU`, `CA`, `DE`, `FR`, `GB`, `IN`, `US`, `BR`, `ES`, `NL`, `JP`, `IT` or `KR`.

        :param target_country: The target_country of this Promotion.
        :type target_country: str
        """

        self._target_country = target_country
