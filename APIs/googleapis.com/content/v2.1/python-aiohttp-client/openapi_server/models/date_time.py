# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time_zone import TimeZone
from openapi_server import util


class DateTime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day: int=None, hours: int=None, minutes: int=None, month: int=None, nanos: int=None, seconds: int=None, time_zone: TimeZone=None, utc_offset: str=None, year: int=None):
        """DateTime - a model defined in OpenAPI

        :param day: The day of this DateTime.
        :param hours: The hours of this DateTime.
        :param minutes: The minutes of this DateTime.
        :param month: The month of this DateTime.
        :param nanos: The nanos of this DateTime.
        :param seconds: The seconds of this DateTime.
        :param time_zone: The time_zone of this DateTime.
        :param utc_offset: The utc_offset of this DateTime.
        :param year: The year of this DateTime.
        """
        self.openapi_types = {
            'day': int,
            'hours': int,
            'minutes': int,
            'month': int,
            'nanos': int,
            'seconds': int,
            'time_zone': TimeZone,
            'utc_offset': str,
            'year': int
        }

        self.attribute_map = {
            'day': 'day',
            'hours': 'hours',
            'minutes': 'minutes',
            'month': 'month',
            'nanos': 'nanos',
            'seconds': 'seconds',
            'time_zone': 'timeZone',
            'utc_offset': 'utcOffset',
            'year': 'year'
        }

        self._day = day
        self._hours = hours
        self._minutes = minutes
        self._month = month
        self._nanos = nanos
        self._seconds = seconds
        self._time_zone = time_zone
        self._utc_offset = utc_offset
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DateTime':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DateTime of this DateTime.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day(self):
        """Gets the day of this DateTime.

        Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.

        :return: The day of this DateTime.
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this DateTime.

        Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.

        :param day: The day of this DateTime.
        :type day: int
        """

        self._day = day

    @property
    def hours(self):
        """Gets the hours of this DateTime.

        Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.

        :return: The hours of this DateTime.
        :rtype: int
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this DateTime.

        Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.

        :param hours: The hours of this DateTime.
        :type hours: int
        """

        self._hours = hours

    @property
    def minutes(self):
        """Gets the minutes of this DateTime.

        Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.

        :return: The minutes of this DateTime.
        :rtype: int
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this DateTime.

        Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.

        :param minutes: The minutes of this DateTime.
        :type minutes: int
        """

        self._minutes = minutes

    @property
    def month(self):
        """Gets the month of this DateTime.

        Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.

        :return: The month of this DateTime.
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this DateTime.

        Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.

        :param month: The month of this DateTime.
        :type month: int
        """

        self._month = month

    @property
    def nanos(self):
        """Gets the nanos of this DateTime.

        Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.

        :return: The nanos of this DateTime.
        :rtype: int
        """
        return self._nanos

    @nanos.setter
    def nanos(self, nanos):
        """Sets the nanos of this DateTime.

        Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.

        :param nanos: The nanos of this DateTime.
        :type nanos: int
        """

        self._nanos = nanos

    @property
    def seconds(self):
        """Gets the seconds of this DateTime.

        Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.

        :return: The seconds of this DateTime.
        :rtype: int
        """
        return self._seconds

    @seconds.setter
    def seconds(self, seconds):
        """Sets the seconds of this DateTime.

        Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.

        :param seconds: The seconds of this DateTime.
        :type seconds: int
        """

        self._seconds = seconds

    @property
    def time_zone(self):
        """Gets the time_zone of this DateTime.


        :return: The time_zone of this DateTime.
        :rtype: TimeZone
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this DateTime.


        :param time_zone: The time_zone of this DateTime.
        :type time_zone: TimeZone
        """

        self._time_zone = time_zone

    @property
    def utc_offset(self):
        """Gets the utc_offset of this DateTime.

        UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.

        :return: The utc_offset of this DateTime.
        :rtype: str
        """
        return self._utc_offset

    @utc_offset.setter
    def utc_offset(self, utc_offset):
        """Sets the utc_offset of this DateTime.

        UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.

        :param utc_offset: The utc_offset of this DateTime.
        :type utc_offset: str
        """

        self._utc_offset = utc_offset

    @property
    def year(self):
        """Gets the year of this DateTime.

        Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.

        :return: The year of this DateTime.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this DateTime.

        Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.

        :param year: The year of this DateTime.
        :type year: int
        """

        self._year = year
