# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RequestPhoneVerificationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_code: str=None, phone_number: str=None, phone_region_code: str=None, phone_verification_method: str=None):
        """RequestPhoneVerificationRequest - a model defined in OpenAPI

        :param language_code: The language_code of this RequestPhoneVerificationRequest.
        :param phone_number: The phone_number of this RequestPhoneVerificationRequest.
        :param phone_region_code: The phone_region_code of this RequestPhoneVerificationRequest.
        :param phone_verification_method: The phone_verification_method of this RequestPhoneVerificationRequest.
        """
        self.openapi_types = {
            'language_code': str,
            'phone_number': str,
            'phone_region_code': str,
            'phone_verification_method': str
        }

        self.attribute_map = {
            'language_code': 'languageCode',
            'phone_number': 'phoneNumber',
            'phone_region_code': 'phoneRegionCode',
            'phone_verification_method': 'phoneVerificationMethod'
        }

        self._language_code = language_code
        self._phone_number = phone_number
        self._phone_region_code = phone_region_code
        self._phone_verification_method = phone_verification_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestPhoneVerificationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RequestPhoneVerificationRequest of this RequestPhoneVerificationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_code(self):
        """Gets the language_code of this RequestPhoneVerificationRequest.

        Language code [IETF BCP 47 syntax](https://tools.ietf.org/html/bcp47) (for example, en-US). Language code is used to provide localized `SMS` and `PHONE_CALL`. Default language used is en-US if not provided.

        :return: The language_code of this RequestPhoneVerificationRequest.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this RequestPhoneVerificationRequest.

        Language code [IETF BCP 47 syntax](https://tools.ietf.org/html/bcp47) (for example, en-US). Language code is used to provide localized `SMS` and `PHONE_CALL`. Default language used is en-US if not provided.

        :param language_code: The language_code of this RequestPhoneVerificationRequest.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def phone_number(self):
        """Gets the phone_number of this RequestPhoneVerificationRequest.

        Phone number to be verified.

        :return: The phone_number of this RequestPhoneVerificationRequest.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this RequestPhoneVerificationRequest.

        Phone number to be verified.

        :param phone_number: The phone_number of this RequestPhoneVerificationRequest.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def phone_region_code(self):
        """Gets the phone_region_code of this RequestPhoneVerificationRequest.

        Required. Two letter country code for the phone number, for example `CA` for Canadian numbers. See the [ISO 3166-1 alpha-2](https://wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) officially assigned codes.

        :return: The phone_region_code of this RequestPhoneVerificationRequest.
        :rtype: str
        """
        return self._phone_region_code

    @phone_region_code.setter
    def phone_region_code(self, phone_region_code):
        """Sets the phone_region_code of this RequestPhoneVerificationRequest.

        Required. Two letter country code for the phone number, for example `CA` for Canadian numbers. See the [ISO 3166-1 alpha-2](https://wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) officially assigned codes.

        :param phone_region_code: The phone_region_code of this RequestPhoneVerificationRequest.
        :type phone_region_code: str
        """

        self._phone_region_code = phone_region_code

    @property
    def phone_verification_method(self):
        """Gets the phone_verification_method of this RequestPhoneVerificationRequest.

        Verification method to receive verification code.

        :return: The phone_verification_method of this RequestPhoneVerificationRequest.
        :rtype: str
        """
        return self._phone_verification_method

    @phone_verification_method.setter
    def phone_verification_method(self, phone_verification_method):
        """Sets the phone_verification_method of this RequestPhoneVerificationRequest.

        Verification method to receive verification code.

        :param phone_verification_method: The phone_verification_method of this RequestPhoneVerificationRequest.
        :type phone_verification_method: str
        """
        allowed_values = ["PHONE_VERIFICATION_METHOD_UNSPECIFIED", "SMS", "PHONE_CALL"]  # noqa: E501
        if phone_verification_method not in allowed_values:
            raise ValueError(
                "Invalid value for `phone_verification_method` ({0}), must be one of {1}"
                .format(phone_verification_method, allowed_values)
            )

        self._phone_verification_method = phone_verification_method
