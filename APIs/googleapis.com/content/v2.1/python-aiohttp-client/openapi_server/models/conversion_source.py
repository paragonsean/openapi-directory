# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_analytics_link import GoogleAnalyticsLink
from openapi_server.models.merchant_center_destination import MerchantCenterDestination
from openapi_server import util


class ConversionSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conversion_source_id: str=None, expire_time: str=None, google_analytics_link: GoogleAnalyticsLink=None, merchant_center_destination: MerchantCenterDestination=None, state: str=None):
        """ConversionSource - a model defined in OpenAPI

        :param conversion_source_id: The conversion_source_id of this ConversionSource.
        :param expire_time: The expire_time of this ConversionSource.
        :param google_analytics_link: The google_analytics_link of this ConversionSource.
        :param merchant_center_destination: The merchant_center_destination of this ConversionSource.
        :param state: The state of this ConversionSource.
        """
        self.openapi_types = {
            'conversion_source_id': str,
            'expire_time': str,
            'google_analytics_link': GoogleAnalyticsLink,
            'merchant_center_destination': MerchantCenterDestination,
            'state': str
        }

        self.attribute_map = {
            'conversion_source_id': 'conversionSourceId',
            'expire_time': 'expireTime',
            'google_analytics_link': 'googleAnalyticsLink',
            'merchant_center_destination': 'merchantCenterDestination',
            'state': 'state'
        }

        self._conversion_source_id = conversion_source_id
        self._expire_time = expire_time
        self._google_analytics_link = google_analytics_link
        self._merchant_center_destination = merchant_center_destination
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversionSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConversionSource of this ConversionSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conversion_source_id(self):
        """Gets the conversion_source_id of this ConversionSource.

        Output only. Generated by the Content API upon creation of a new `ConversionSource`. Format: [a-z]{4}:.+ The four characters before the colon represent the type of conversio source. Content after the colon represents the ID of the conversion source within that type. The ID of two different conversion sources might be the same across different types. The following type prefixes are supported: - galk: For GoogleAnalyticsLink sources. - mcdn: For MerchantCenterDestination sources.

        :return: The conversion_source_id of this ConversionSource.
        :rtype: str
        """
        return self._conversion_source_id

    @conversion_source_id.setter
    def conversion_source_id(self, conversion_source_id):
        """Sets the conversion_source_id of this ConversionSource.

        Output only. Generated by the Content API upon creation of a new `ConversionSource`. Format: [a-z]{4}:.+ The four characters before the colon represent the type of conversio source. Content after the colon represents the ID of the conversion source within that type. The ID of two different conversion sources might be the same across different types. The following type prefixes are supported: - galk: For GoogleAnalyticsLink sources. - mcdn: For MerchantCenterDestination sources.

        :param conversion_source_id: The conversion_source_id of this ConversionSource.
        :type conversion_source_id: str
        """

        self._conversion_source_id = conversion_source_id

    @property
    def expire_time(self):
        """Gets the expire_time of this ConversionSource.

        Output only. The time when an archived conversion source becomes permanently deleted and is no longer available to undelete.

        :return: The expire_time of this ConversionSource.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this ConversionSource.

        Output only. The time when an archived conversion source becomes permanently deleted and is no longer available to undelete.

        :param expire_time: The expire_time of this ConversionSource.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def google_analytics_link(self):
        """Gets the google_analytics_link of this ConversionSource.


        :return: The google_analytics_link of this ConversionSource.
        :rtype: GoogleAnalyticsLink
        """
        return self._google_analytics_link

    @google_analytics_link.setter
    def google_analytics_link(self, google_analytics_link):
        """Sets the google_analytics_link of this ConversionSource.


        :param google_analytics_link: The google_analytics_link of this ConversionSource.
        :type google_analytics_link: GoogleAnalyticsLink
        """

        self._google_analytics_link = google_analytics_link

    @property
    def merchant_center_destination(self):
        """Gets the merchant_center_destination of this ConversionSource.


        :return: The merchant_center_destination of this ConversionSource.
        :rtype: MerchantCenterDestination
        """
        return self._merchant_center_destination

    @merchant_center_destination.setter
    def merchant_center_destination(self, merchant_center_destination):
        """Sets the merchant_center_destination of this ConversionSource.


        :param merchant_center_destination: The merchant_center_destination of this ConversionSource.
        :type merchant_center_destination: MerchantCenterDestination
        """

        self._merchant_center_destination = merchant_center_destination

    @property
    def state(self):
        """Gets the state of this ConversionSource.

        Output only. Current state of this conversion source. Can't be edited through the API.

        :return: The state of this ConversionSource.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConversionSource.

        Output only. Current state of this conversion source. Can't be edited through the API.

        :param state: The state of this ConversionSource.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "ARCHIVED", "PENDING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
