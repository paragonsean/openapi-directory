# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_attribute import CustomAttribute
from openapi_server.models.price import Price
from openapi_server import util


class LocalInventory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: str=None, custom_attributes: List[CustomAttribute]=None, instore_product_location: str=None, kind: str=None, pickup_method: str=None, pickup_sla: str=None, price: Price=None, quantity: int=None, sale_price: Price=None, sale_price_effective_date: str=None, store_code: str=None):
        """LocalInventory - a model defined in OpenAPI

        :param availability: The availability of this LocalInventory.
        :param custom_attributes: The custom_attributes of this LocalInventory.
        :param instore_product_location: The instore_product_location of this LocalInventory.
        :param kind: The kind of this LocalInventory.
        :param pickup_method: The pickup_method of this LocalInventory.
        :param pickup_sla: The pickup_sla of this LocalInventory.
        :param price: The price of this LocalInventory.
        :param quantity: The quantity of this LocalInventory.
        :param sale_price: The sale_price of this LocalInventory.
        :param sale_price_effective_date: The sale_price_effective_date of this LocalInventory.
        :param store_code: The store_code of this LocalInventory.
        """
        self.openapi_types = {
            'availability': str,
            'custom_attributes': List[CustomAttribute],
            'instore_product_location': str,
            'kind': str,
            'pickup_method': str,
            'pickup_sla': str,
            'price': Price,
            'quantity': int,
            'sale_price': Price,
            'sale_price_effective_date': str,
            'store_code': str
        }

        self.attribute_map = {
            'availability': 'availability',
            'custom_attributes': 'customAttributes',
            'instore_product_location': 'instoreProductLocation',
            'kind': 'kind',
            'pickup_method': 'pickupMethod',
            'pickup_sla': 'pickupSla',
            'price': 'price',
            'quantity': 'quantity',
            'sale_price': 'salePrice',
            'sale_price_effective_date': 'salePriceEffectiveDate',
            'store_code': 'storeCode'
        }

        self._availability = availability
        self._custom_attributes = custom_attributes
        self._instore_product_location = instore_product_location
        self._kind = kind
        self._pickup_method = pickup_method
        self._pickup_sla = pickup_sla
        self._price = price
        self._quantity = quantity
        self._sale_price = sale_price
        self._sale_price_effective_date = sale_price_effective_date
        self._store_code = store_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocalInventory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocalInventory of this LocalInventory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this LocalInventory.

        The availability of the product. For accepted attribute values, see the local product inventory feed specification.

        :return: The availability of this LocalInventory.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this LocalInventory.

        The availability of the product. For accepted attribute values, see the local product inventory feed specification.

        :param availability: The availability of this LocalInventory.
        :type availability: str
        """

        self._availability = availability

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this LocalInventory.

        A list of custom (merchant-provided) attributes. Can also be used to submit any attribute of the feed specification in its generic form, for example, `{ \"name\": \"size type\", \"value\": \"regular\" }`.

        :return: The custom_attributes of this LocalInventory.
        :rtype: List[CustomAttribute]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this LocalInventory.

        A list of custom (merchant-provided) attributes. Can also be used to submit any attribute of the feed specification in its generic form, for example, `{ \"name\": \"size type\", \"value\": \"regular\" }`.

        :param custom_attributes: The custom_attributes of this LocalInventory.
        :type custom_attributes: List[CustomAttribute]
        """

        self._custom_attributes = custom_attributes

    @property
    def instore_product_location(self):
        """Gets the instore_product_location of this LocalInventory.

        The in-store product location.

        :return: The instore_product_location of this LocalInventory.
        :rtype: str
        """
        return self._instore_product_location

    @instore_product_location.setter
    def instore_product_location(self, instore_product_location):
        """Sets the instore_product_location of this LocalInventory.

        The in-store product location.

        :param instore_product_location: The instore_product_location of this LocalInventory.
        :type instore_product_location: str
        """

        self._instore_product_location = instore_product_location

    @property
    def kind(self):
        """Gets the kind of this LocalInventory.

        Identifies what kind of resource this is. Value: the fixed string \"`content#localInventory`\"

        :return: The kind of this LocalInventory.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this LocalInventory.

        Identifies what kind of resource this is. Value: the fixed string \"`content#localInventory`\"

        :param kind: The kind of this LocalInventory.
        :type kind: str
        """

        self._kind = kind

    @property
    def pickup_method(self):
        """Gets the pickup_method of this LocalInventory.

        The supported pickup method for this offer. Unless the value is \"not supported\", this field must be submitted together with `pickupSla`. For accepted attribute values, see the local product inventory feed specification.

        :return: The pickup_method of this LocalInventory.
        :rtype: str
        """
        return self._pickup_method

    @pickup_method.setter
    def pickup_method(self, pickup_method):
        """Sets the pickup_method of this LocalInventory.

        The supported pickup method for this offer. Unless the value is \"not supported\", this field must be submitted together with `pickupSla`. For accepted attribute values, see the local product inventory feed specification.

        :param pickup_method: The pickup_method of this LocalInventory.
        :type pickup_method: str
        """

        self._pickup_method = pickup_method

    @property
    def pickup_sla(self):
        """Gets the pickup_sla of this LocalInventory.

        The expected date that an order will be ready for pickup relative to the order date. Must be submitted together with `pickupMethod`. For accepted attribute values, see the local product inventory feed specification.

        :return: The pickup_sla of this LocalInventory.
        :rtype: str
        """
        return self._pickup_sla

    @pickup_sla.setter
    def pickup_sla(self, pickup_sla):
        """Sets the pickup_sla of this LocalInventory.

        The expected date that an order will be ready for pickup relative to the order date. Must be submitted together with `pickupMethod`. For accepted attribute values, see the local product inventory feed specification.

        :param pickup_sla: The pickup_sla of this LocalInventory.
        :type pickup_sla: str
        """

        self._pickup_sla = pickup_sla

    @property
    def price(self):
        """Gets the price of this LocalInventory.


        :return: The price of this LocalInventory.
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this LocalInventory.


        :param price: The price of this LocalInventory.
        :type price: Price
        """

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this LocalInventory.

        The quantity of the product. Must be nonnegative.

        :return: The quantity of this LocalInventory.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this LocalInventory.

        The quantity of the product. Must be nonnegative.

        :param quantity: The quantity of this LocalInventory.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def sale_price(self):
        """Gets the sale_price of this LocalInventory.


        :return: The sale_price of this LocalInventory.
        :rtype: Price
        """
        return self._sale_price

    @sale_price.setter
    def sale_price(self, sale_price):
        """Sets the sale_price of this LocalInventory.


        :param sale_price: The sale_price of this LocalInventory.
        :type sale_price: Price
        """

        self._sale_price = sale_price

    @property
    def sale_price_effective_date(self):
        """Gets the sale_price_effective_date of this LocalInventory.

        A date range represented by a pair of ISO 8601 dates separated by a space, comma, or slash. Both dates may be specified as 'null' if undecided.

        :return: The sale_price_effective_date of this LocalInventory.
        :rtype: str
        """
        return self._sale_price_effective_date

    @sale_price_effective_date.setter
    def sale_price_effective_date(self, sale_price_effective_date):
        """Sets the sale_price_effective_date of this LocalInventory.

        A date range represented by a pair of ISO 8601 dates separated by a space, comma, or slash. Both dates may be specified as 'null' if undecided.

        :param sale_price_effective_date: The sale_price_effective_date of this LocalInventory.
        :type sale_price_effective_date: str
        """

        self._sale_price_effective_date = sale_price_effective_date

    @property
    def store_code(self):
        """Gets the store_code of this LocalInventory.

        Required. The store code of this local inventory resource.

        :return: The store_code of this LocalInventory.
        :rtype: str
        """
        return self._store_code

    @store_code.setter
    def store_code(self, store_code):
        """Sets the store_code of this LocalInventory.

        Required. The store code of this local inventory resource.

        :param store_code: The store_code of this LocalInventory.
        :type store_code: str
        """

        self._store_code = store_code
