/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ContentApiForShopping);
  }
}(this, function(expect, ContentApiForShopping) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ContentApiForShopping.Metrics();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Metrics', function() {
    it('should create an instance of Metrics', function() {
      // uncomment below and update the code to test Metrics
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be.a(ContentApiForShopping.Metrics);
    });

    it('should have the property aos (base name: "aos")', function() {
      // uncomment below and update the code to test the property aos
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property aovMicros (base name: "aovMicros")', function() {
      // uncomment below and update the code to test the property aovMicros
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property clicks (base name: "clicks")', function() {
      // uncomment below and update the code to test the property clicks
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property conversionRate (base name: "conversionRate")', function() {
      // uncomment below and update the code to test the property conversionRate
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property conversionValueMicros (base name: "conversionValueMicros")', function() {
      // uncomment below and update the code to test the property conversionValueMicros
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property conversions (base name: "conversions")', function() {
      // uncomment below and update the code to test the property conversions
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property ctr (base name: "ctr")', function() {
      // uncomment below and update the code to test the property ctr
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property daysToShip (base name: "daysToShip")', function() {
      // uncomment below and update the code to test the property daysToShip
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property impressions (base name: "impressions")', function() {
      // uncomment below and update the code to test the property impressions
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property itemDaysToShip (base name: "itemDaysToShip")', function() {
      // uncomment below and update the code to test the property itemDaysToShip
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property itemFillRate (base name: "itemFillRate")', function() {
      // uncomment below and update the code to test the property itemFillRate
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property orderedItemSalesMicros (base name: "orderedItemSalesMicros")', function() {
      // uncomment below and update the code to test the property orderedItemSalesMicros
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property orderedItems (base name: "orderedItems")', function() {
      // uncomment below and update the code to test the property orderedItems
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property orders (base name: "orders")', function() {
      // uncomment below and update the code to test the property orders
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property rejectedItems (base name: "rejectedItems")', function() {
      // uncomment below and update the code to test the property rejectedItems
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property returnRate (base name: "returnRate")', function() {
      // uncomment below and update the code to test the property returnRate
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property returnedItems (base name: "returnedItems")', function() {
      // uncomment below and update the code to test the property returnedItems
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property returnsMicros (base name: "returnsMicros")', function() {
      // uncomment below and update the code to test the property returnsMicros
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property shippedItemSalesMicros (base name: "shippedItemSalesMicros")', function() {
      // uncomment below and update the code to test the property shippedItemSalesMicros
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property shippedItems (base name: "shippedItems")', function() {
      // uncomment below and update the code to test the property shippedItems
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property shippedOrders (base name: "shippedOrders")', function() {
      // uncomment below and update the code to test the property shippedOrders
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property unshippedItems (base name: "unshippedItems")', function() {
      // uncomment below and update the code to test the property unshippedItems
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

    it('should have the property unshippedOrders (base name: "unshippedOrders")', function() {
      // uncomment below and update the code to test the property unshippedOrders
      //var instance = new ContentApiForShopping.Metrics();
      //expect(instance).to.be();
    });

  });

}));
