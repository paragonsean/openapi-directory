/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ContentApiForShopping);
  }
}(this, function(expect, ContentApiForShopping) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ContentApiForShopping.ProductView();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProductView', function() {
    it('should create an instance of ProductView', function() {
      // uncomment below and update the code to test ProductView
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be.a(ContentApiForShopping.ProductView);
    });

    it('should have the property aggregatedDestinationStatus (base name: "aggregatedDestinationStatus")', function() {
      // uncomment below and update the code to test the property aggregatedDestinationStatus
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property availability (base name: "availability")', function() {
      // uncomment below and update the code to test the property availability
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property brand (base name: "brand")', function() {
      // uncomment below and update the code to test the property brand
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property categoryL1 (base name: "categoryL1")', function() {
      // uncomment below and update the code to test the property categoryL1
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property categoryL2 (base name: "categoryL2")', function() {
      // uncomment below and update the code to test the property categoryL2
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property categoryL3 (base name: "categoryL3")', function() {
      // uncomment below and update the code to test the property categoryL3
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property categoryL4 (base name: "categoryL4")', function() {
      // uncomment below and update the code to test the property categoryL4
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property categoryL5 (base name: "categoryL5")', function() {
      // uncomment below and update the code to test the property categoryL5
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property channel (base name: "channel")', function() {
      // uncomment below and update the code to test the property channel
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property condition (base name: "condition")', function() {
      // uncomment below and update the code to test the property condition
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property creationTime (base name: "creationTime")', function() {
      // uncomment below and update the code to test the property creationTime
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "currencyCode")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property expirationDate (base name: "expirationDate")', function() {
      // uncomment below and update the code to test the property expirationDate
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property gtin (base name: "gtin")', function() {
      // uncomment below and update the code to test the property gtin
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property itemGroupId (base name: "itemGroupId")', function() {
      // uncomment below and update the code to test the property itemGroupId
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property itemIssues (base name: "itemIssues")', function() {
      // uncomment below and update the code to test the property itemIssues
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property languageCode (base name: "languageCode")', function() {
      // uncomment below and update the code to test the property languageCode
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property offerId (base name: "offerId")', function() {
      // uncomment below and update the code to test the property offerId
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property priceMicros (base name: "priceMicros")', function() {
      // uncomment below and update the code to test the property priceMicros
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property productTypeL1 (base name: "productTypeL1")', function() {
      // uncomment below and update the code to test the property productTypeL1
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property productTypeL2 (base name: "productTypeL2")', function() {
      // uncomment below and update the code to test the property productTypeL2
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property productTypeL3 (base name: "productTypeL3")', function() {
      // uncomment below and update the code to test the property productTypeL3
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property productTypeL4 (base name: "productTypeL4")', function() {
      // uncomment below and update the code to test the property productTypeL4
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property productTypeL5 (base name: "productTypeL5")', function() {
      // uncomment below and update the code to test the property productTypeL5
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property shippingLabel (base name: "shippingLabel")', function() {
      // uncomment below and update the code to test the property shippingLabel
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new ContentApiForShopping.ProductView();
      //expect(instance).to.be();
    });

  });

}));
