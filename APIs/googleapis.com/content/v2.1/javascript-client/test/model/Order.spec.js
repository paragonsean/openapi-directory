/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ContentApiForShopping);
  }
}(this, function(expect, ContentApiForShopping) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ContentApiForShopping.Order();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Order', function() {
    it('should create an instance of Order', function() {
      // uncomment below and update the code to test Order
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be.a(ContentApiForShopping.Order);
    });

    it('should have the property acknowledged (base name: "acknowledged")', function() {
      // uncomment below and update the code to test the property acknowledged
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property annotations (base name: "annotations")', function() {
      // uncomment below and update the code to test the property annotations
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property billingAddress (base name: "billingAddress")', function() {
      // uncomment below and update the code to test the property billingAddress
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property customer (base name: "customer")', function() {
      // uncomment below and update the code to test the property customer
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property deliveryDetails (base name: "deliveryDetails")', function() {
      // uncomment below and update the code to test the property deliveryDetails
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property kind (base name: "kind")', function() {
      // uncomment below and update the code to test the property kind
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property lineItems (base name: "lineItems")', function() {
      // uncomment below and update the code to test the property lineItems
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property merchantId (base name: "merchantId")', function() {
      // uncomment below and update the code to test the property merchantId
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property merchantOrderId (base name: "merchantOrderId")', function() {
      // uncomment below and update the code to test the property merchantOrderId
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property netPriceAmount (base name: "netPriceAmount")', function() {
      // uncomment below and update the code to test the property netPriceAmount
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property netTaxAmount (base name: "netTaxAmount")', function() {
      // uncomment below and update the code to test the property netTaxAmount
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property paymentStatus (base name: "paymentStatus")', function() {
      // uncomment below and update the code to test the property paymentStatus
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property pickupDetails (base name: "pickupDetails")', function() {
      // uncomment below and update the code to test the property pickupDetails
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property placedDate (base name: "placedDate")', function() {
      // uncomment below and update the code to test the property placedDate
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property promotions (base name: "promotions")', function() {
      // uncomment below and update the code to test the property promotions
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property refunds (base name: "refunds")', function() {
      // uncomment below and update the code to test the property refunds
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property shipments (base name: "shipments")', function() {
      // uncomment below and update the code to test the property shipments
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property shippingCost (base name: "shippingCost")', function() {
      // uncomment below and update the code to test the property shippingCost
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property shippingCostTax (base name: "shippingCostTax")', function() {
      // uncomment below and update the code to test the property shippingCostTax
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

    it('should have the property taxCollector (base name: "taxCollector")', function() {
      // uncomment below and update the code to test the property taxCollector
      //var instance = new ContentApiForShopping.Order();
      //expect(instance).to.be();
    });

  });

}));
