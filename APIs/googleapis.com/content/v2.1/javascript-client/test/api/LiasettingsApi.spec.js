/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ContentApiForShopping);
  }
}(this, function(expect, ContentApiForShopping) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ContentApiForShopping.LiasettingsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LiasettingsApi', function() {
    describe('contentLiasettingsCustombatch', function() {
      it('should call contentLiasettingsCustombatch successfully', function(done) {
        //uncomment below and update the code to test contentLiasettingsCustombatch
        //instance.contentLiasettingsCustombatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('contentLiasettingsGet', function() {
      it('should call contentLiasettingsGet successfully', function(done) {
        //uncomment below and update the code to test contentLiasettingsGet
        //instance.contentLiasettingsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('contentLiasettingsGetaccessiblegmbaccounts', function() {
      it('should call contentLiasettingsGetaccessiblegmbaccounts successfully', function(done) {
        //uncomment below and update the code to test contentLiasettingsGetaccessiblegmbaccounts
        //instance.contentLiasettingsGetaccessiblegmbaccounts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('contentLiasettingsList', function() {
      it('should call contentLiasettingsList successfully', function(done) {
        //uncomment below and update the code to test contentLiasettingsList
        //instance.contentLiasettingsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('contentLiasettingsListposdataproviders', function() {
      it('should call contentLiasettingsListposdataproviders successfully', function(done) {
        //uncomment below and update the code to test contentLiasettingsListposdataproviders
        //instance.contentLiasettingsListposdataproviders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('contentLiasettingsRequestgmbaccess', function() {
      it('should call contentLiasettingsRequestgmbaccess successfully', function(done) {
        //uncomment below and update the code to test contentLiasettingsRequestgmbaccess
        //instance.contentLiasettingsRequestgmbaccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('contentLiasettingsRequestinventoryverification', function() {
      it('should call contentLiasettingsRequestinventoryverification successfully', function(done) {
        //uncomment below and update the code to test contentLiasettingsRequestinventoryverification
        //instance.contentLiasettingsRequestinventoryverification(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('contentLiasettingsSetinventoryverificationcontact', function() {
      it('should call contentLiasettingsSetinventoryverificationcontact successfully', function(done) {
        //uncomment below and update the code to test contentLiasettingsSetinventoryverificationcontact
        //instance.contentLiasettingsSetinventoryverificationcontact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('contentLiasettingsSetomnichannelexperience', function() {
      it('should call contentLiasettingsSetomnichannelexperience successfully', function(done) {
        //uncomment below and update the code to test contentLiasettingsSetomnichannelexperience
        //instance.contentLiasettingsSetomnichannelexperience(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('contentLiasettingsSetposdataprovider', function() {
      it('should call contentLiasettingsSetposdataprovider successfully', function(done) {
        //uncomment below and update the code to test contentLiasettingsSetposdataprovider
        //instance.contentLiasettingsSetposdataprovider(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('contentLiasettingsUpdate', function() {
      it('should call contentLiasettingsUpdate successfully', function(done) {
        //uncomment below and update the code to test contentLiasettingsUpdate
        //instance.contentLiasettingsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
