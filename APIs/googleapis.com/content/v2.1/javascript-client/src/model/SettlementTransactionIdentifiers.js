/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SettlementTransactionIdentifiers model module.
 * @module model/SettlementTransactionIdentifiers
 * @version v2.1
 */
class SettlementTransactionIdentifiers {
    /**
     * Constructs a new <code>SettlementTransactionIdentifiers</code>.
     * @alias module:model/SettlementTransactionIdentifiers
     */
    constructor() { 
        
        SettlementTransactionIdentifiers.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SettlementTransactionIdentifiers</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SettlementTransactionIdentifiers} obj Optional instance to populate.
     * @return {module:model/SettlementTransactionIdentifiers} The populated <code>SettlementTransactionIdentifiers</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SettlementTransactionIdentifiers();

            if (data.hasOwnProperty('adjustmentId')) {
                obj['adjustmentId'] = ApiClient.convertToType(data['adjustmentId'], 'String');
            }
            if (data.hasOwnProperty('merchantOrderId')) {
                obj['merchantOrderId'] = ApiClient.convertToType(data['merchantOrderId'], 'String');
            }
            if (data.hasOwnProperty('orderItemId')) {
                obj['orderItemId'] = ApiClient.convertToType(data['orderItemId'], 'String');
            }
            if (data.hasOwnProperty('settlementEntryId')) {
                obj['settlementEntryId'] = ApiClient.convertToType(data['settlementEntryId'], 'String');
            }
            if (data.hasOwnProperty('shipmentIds')) {
                obj['shipmentIds'] = ApiClient.convertToType(data['shipmentIds'], ['String']);
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SettlementTransactionIdentifiers</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SettlementTransactionIdentifiers</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adjustmentId'] && !(typeof data['adjustmentId'] === 'string' || data['adjustmentId'] instanceof String)) {
            throw new Error("Expected the field `adjustmentId` to be a primitive type in the JSON string but got " + data['adjustmentId']);
        }
        // ensure the json data is a string
        if (data['merchantOrderId'] && !(typeof data['merchantOrderId'] === 'string' || data['merchantOrderId'] instanceof String)) {
            throw new Error("Expected the field `merchantOrderId` to be a primitive type in the JSON string but got " + data['merchantOrderId']);
        }
        // ensure the json data is a string
        if (data['orderItemId'] && !(typeof data['orderItemId'] === 'string' || data['orderItemId'] instanceof String)) {
            throw new Error("Expected the field `orderItemId` to be a primitive type in the JSON string but got " + data['orderItemId']);
        }
        // ensure the json data is a string
        if (data['settlementEntryId'] && !(typeof data['settlementEntryId'] === 'string' || data['settlementEntryId'] instanceof String)) {
            throw new Error("Expected the field `settlementEntryId` to be a primitive type in the JSON string but got " + data['settlementEntryId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['shipmentIds'])) {
            throw new Error("Expected the field `shipmentIds` to be an array in the JSON data but got " + data['shipmentIds']);
        }
        // ensure the json data is a string
        if (data['transactionId'] && !(typeof data['transactionId'] === 'string' || data['transactionId'] instanceof String)) {
            throw new Error("Expected the field `transactionId` to be a primitive type in the JSON string but got " + data['transactionId']);
        }

        return true;
    }


}



/**
 * The identifier of the adjustments, if it's available.
 * @member {String} adjustmentId
 */
SettlementTransactionIdentifiers.prototype['adjustmentId'] = undefined;

/**
 * The merchant provided order ID.
 * @member {String} merchantOrderId
 */
SettlementTransactionIdentifiers.prototype['merchantOrderId'] = undefined;

/**
 * The identifier of the item.
 * @member {String} orderItemId
 */
SettlementTransactionIdentifiers.prototype['orderItemId'] = undefined;

/**
 * The unique ID of the settlement transaction entry.
 * @member {String} settlementEntryId
 */
SettlementTransactionIdentifiers.prototype['settlementEntryId'] = undefined;

/**
 * The shipment ids for the item.
 * @member {Array.<String>} shipmentIds
 */
SettlementTransactionIdentifiers.prototype['shipmentIds'] = undefined;

/**
 * The Google transaction ID.
 * @member {String} transactionId
 */
SettlementTransactionIdentifiers.prototype['transactionId'] = undefined;






export default SettlementTransactionIdentifiers;

