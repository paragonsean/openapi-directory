/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Distance from './Distance';
import ServiceStoreConfigCutoffConfig from './ServiceStoreConfigCutoffConfig';

/**
 * The ServiceStoreConfig model module.
 * @module model/ServiceStoreConfig
 * @version v2.1
 */
class ServiceStoreConfig {
    /**
     * Constructs a new <code>ServiceStoreConfig</code>.
     * Stores that provide local delivery. Only valid with local delivery fulfillment.
     * @alias module:model/ServiceStoreConfig
     */
    constructor() { 
        
        ServiceStoreConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceStoreConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceStoreConfig} obj Optional instance to populate.
     * @return {module:model/ServiceStoreConfig} The populated <code>ServiceStoreConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceStoreConfig();

            if (data.hasOwnProperty('cutoffConfig')) {
                obj['cutoffConfig'] = ServiceStoreConfigCutoffConfig.constructFromObject(data['cutoffConfig']);
            }
            if (data.hasOwnProperty('serviceRadius')) {
                obj['serviceRadius'] = Distance.constructFromObject(data['serviceRadius']);
            }
            if (data.hasOwnProperty('storeCodes')) {
                obj['storeCodes'] = ApiClient.convertToType(data['storeCodes'], ['String']);
            }
            if (data.hasOwnProperty('storeServiceType')) {
                obj['storeServiceType'] = ApiClient.convertToType(data['storeServiceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceStoreConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceStoreConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cutoffConfig`
        if (data['cutoffConfig']) { // data not null
          ServiceStoreConfigCutoffConfig.validateJSON(data['cutoffConfig']);
        }
        // validate the optional field `serviceRadius`
        if (data['serviceRadius']) { // data not null
          Distance.validateJSON(data['serviceRadius']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['storeCodes'])) {
            throw new Error("Expected the field `storeCodes` to be an array in the JSON data but got " + data['storeCodes']);
        }
        // ensure the json data is a string
        if (data['storeServiceType'] && !(typeof data['storeServiceType'] === 'string' || data['storeServiceType'] instanceof String)) {
            throw new Error("Expected the field `storeServiceType` to be a primitive type in the JSON string but got " + data['storeServiceType']);
        }

        return true;
    }


}



/**
 * @member {module:model/ServiceStoreConfigCutoffConfig} cutoffConfig
 */
ServiceStoreConfig.prototype['cutoffConfig'] = undefined;

/**
 * @member {module:model/Distance} serviceRadius
 */
ServiceStoreConfig.prototype['serviceRadius'] = undefined;

/**
 * A list of store codes that provide local delivery. If empty, then `store_service_type` must be `all_stores`, or an error is thrown. If not empty, then `store_service_type` must be `selected_stores`, or an error is thrown.
 * @member {Array.<String>} storeCodes
 */
ServiceStoreConfig.prototype['storeCodes'] = undefined;

/**
 * Indicates whether all stores listed by this merchant provide local delivery or not. Acceptable values are `all stores` and `selected stores`
 * @member {String} storeServiceType
 */
ServiceStoreConfig.prototype['storeServiceType'] = undefined;






export default ServiceStoreConfig;

