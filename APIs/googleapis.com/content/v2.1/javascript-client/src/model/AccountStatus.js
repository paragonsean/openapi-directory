/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountStatusAccountLevelIssue from './AccountStatusAccountLevelIssue';
import AccountStatusProducts from './AccountStatusProducts';

/**
 * The AccountStatus model module.
 * @module model/AccountStatus
 * @version v2.1
 */
class AccountStatus {
    /**
     * Constructs a new <code>AccountStatus</code>.
     * The status of an account, that is, information about its products, which is computed offline and not returned immediately at insertion time.
     * @alias module:model/AccountStatus
     */
    constructor() { 
        
        AccountStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountStatus} obj Optional instance to populate.
     * @return {module:model/AccountStatus} The populated <code>AccountStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountStatus();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('accountLevelIssues')) {
                obj['accountLevelIssues'] = ApiClient.convertToType(data['accountLevelIssues'], [AccountStatusAccountLevelIssue]);
            }
            if (data.hasOwnProperty('accountManagement')) {
                obj['accountManagement'] = ApiClient.convertToType(data['accountManagement'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [AccountStatusProducts]);
            }
            if (data.hasOwnProperty('websiteClaimed')) {
                obj['websiteClaimed'] = ApiClient.convertToType(data['websiteClaimed'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        if (data['accountLevelIssues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accountLevelIssues'])) {
                throw new Error("Expected the field `accountLevelIssues` to be an array in the JSON data but got " + data['accountLevelIssues']);
            }
            // validate the optional field `accountLevelIssues` (array)
            for (const item of data['accountLevelIssues']) {
                AccountStatusAccountLevelIssue.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['accountManagement'] && !(typeof data['accountManagement'] === 'string' || data['accountManagement'] instanceof String)) {
            throw new Error("Expected the field `accountManagement` to be a primitive type in the JSON string but got " + data['accountManagement']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        if (data['products']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['products'])) {
                throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
            }
            // validate the optional field `products` (array)
            for (const item of data['products']) {
                AccountStatusProducts.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The ID of the account for which the status is reported.
 * @member {String} accountId
 */
AccountStatus.prototype['accountId'] = undefined;

/**
 * A list of account level issues.
 * @member {Array.<module:model/AccountStatusAccountLevelIssue>} accountLevelIssues
 */
AccountStatus.prototype['accountLevelIssues'] = undefined;

/**
 * How the account is managed. Acceptable values are: - \"`manual`\" - \"`automatic`\" 
 * @member {String} accountManagement
 */
AccountStatus.prototype['accountManagement'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"`content#accountStatus`\"
 * @member {String} kind
 */
AccountStatus.prototype['kind'] = undefined;

/**
 * List of product-related data by channel, destination, and country. Data in this field may be delayed by up to 30 minutes.
 * @member {Array.<module:model/AccountStatusProducts>} products
 */
AccountStatus.prototype['products'] = undefined;

/**
 * Whether the account's website is claimed or not.
 * @member {Boolean} websiteClaimed
 */
AccountStatus.prototype['websiteClaimed'] = undefined;






export default AccountStatus;

