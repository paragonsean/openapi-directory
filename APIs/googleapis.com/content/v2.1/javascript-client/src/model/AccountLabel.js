/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccountLabel model module.
 * @module model/AccountLabel
 * @version v2.1
 */
class AccountLabel {
    /**
     * Constructs a new <code>AccountLabel</code>.
     * Label assigned by CSS domain or CSS group to one of its sub-accounts.
     * @alias module:model/AccountLabel
     */
    constructor() { 
        
        AccountLabel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountLabel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountLabel} obj Optional instance to populate.
     * @return {module:model/AccountLabel} The populated <code>AccountLabel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountLabel();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('labelId')) {
                obj['labelId'] = ApiClient.convertToType(data['labelId'], 'String');
            }
            if (data.hasOwnProperty('labelType')) {
                obj['labelType'] = ApiClient.convertToType(data['labelType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountLabel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountLabel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['labelId'] && !(typeof data['labelId'] === 'string' || data['labelId'] instanceof String)) {
            throw new Error("Expected the field `labelId` to be a primitive type in the JSON string but got " + data['labelId']);
        }
        // ensure the json data is a string
        if (data['labelType'] && !(typeof data['labelType'] === 'string' || data['labelType'] instanceof String)) {
            throw new Error("Expected the field `labelType` to be a primitive type in the JSON string but got " + data['labelType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Immutable. The ID of account this label belongs to.
 * @member {String} accountId
 */
AccountLabel.prototype['accountId'] = undefined;

/**
 * The description of this label.
 * @member {String} description
 */
AccountLabel.prototype['description'] = undefined;

/**
 * Output only. The ID of the label.
 * @member {String} labelId
 */
AccountLabel.prototype['labelId'] = undefined;

/**
 * Output only. The type of this label.
 * @member {module:model/AccountLabel.LabelTypeEnum} labelType
 */
AccountLabel.prototype['labelType'] = undefined;

/**
 * The display name of this label.
 * @member {String} name
 */
AccountLabel.prototype['name'] = undefined;





/**
 * Allowed values for the <code>labelType</code> property.
 * @enum {String}
 * @readonly
 */
AccountLabel['LabelTypeEnum'] = {

    /**
     * value: "LABEL_TYPE_UNSPECIFIED"
     * @const
     */
    "LABEL_TYPE_UNSPECIFIED": "LABEL_TYPE_UNSPECIFIED",

    /**
     * value: "MANUAL"
     * @const
     */
    "MANUAL": "MANUAL",

    /**
     * value: "AUTOMATIC"
     * @const
     */
    "AUTOMATIC": "AUTOMATIC"
};



export default AccountLabel;

