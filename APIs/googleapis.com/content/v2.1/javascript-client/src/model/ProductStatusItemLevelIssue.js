/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductStatusItemLevelIssue model module.
 * @module model/ProductStatusItemLevelIssue
 * @version v2.1
 */
class ProductStatusItemLevelIssue {
    /**
     * Constructs a new <code>ProductStatusItemLevelIssue</code>.
     * @alias module:model/ProductStatusItemLevelIssue
     */
    constructor() { 
        
        ProductStatusItemLevelIssue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductStatusItemLevelIssue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductStatusItemLevelIssue} obj Optional instance to populate.
     * @return {module:model/ProductStatusItemLevelIssue} The populated <code>ProductStatusItemLevelIssue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductStatusItemLevelIssue();

            if (data.hasOwnProperty('applicableCountries')) {
                obj['applicableCountries'] = ApiClient.convertToType(data['applicableCountries'], ['String']);
            }
            if (data.hasOwnProperty('attributeName')) {
                obj['attributeName'] = ApiClient.convertToType(data['attributeName'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ApiClient.convertToType(data['destination'], 'String');
            }
            if (data.hasOwnProperty('detail')) {
                obj['detail'] = ApiClient.convertToType(data['detail'], 'String');
            }
            if (data.hasOwnProperty('documentation')) {
                obj['documentation'] = ApiClient.convertToType(data['documentation'], 'String');
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = ApiClient.convertToType(data['resolution'], 'String');
            }
            if (data.hasOwnProperty('servability')) {
                obj['servability'] = ApiClient.convertToType(data['servability'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductStatusItemLevelIssue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductStatusItemLevelIssue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['applicableCountries'])) {
            throw new Error("Expected the field `applicableCountries` to be an array in the JSON data but got " + data['applicableCountries']);
        }
        // ensure the json data is a string
        if (data['attributeName'] && !(typeof data['attributeName'] === 'string' || data['attributeName'] instanceof String)) {
            throw new Error("Expected the field `attributeName` to be a primitive type in the JSON string but got " + data['attributeName']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['destination'] && !(typeof data['destination'] === 'string' || data['destination'] instanceof String)) {
            throw new Error("Expected the field `destination` to be a primitive type in the JSON string but got " + data['destination']);
        }
        // ensure the json data is a string
        if (data['detail'] && !(typeof data['detail'] === 'string' || data['detail'] instanceof String)) {
            throw new Error("Expected the field `detail` to be a primitive type in the JSON string but got " + data['detail']);
        }
        // ensure the json data is a string
        if (data['documentation'] && !(typeof data['documentation'] === 'string' || data['documentation'] instanceof String)) {
            throw new Error("Expected the field `documentation` to be a primitive type in the JSON string but got " + data['documentation']);
        }
        // ensure the json data is a string
        if (data['resolution'] && !(typeof data['resolution'] === 'string' || data['resolution'] instanceof String)) {
            throw new Error("Expected the field `resolution` to be a primitive type in the JSON string but got " + data['resolution']);
        }
        // ensure the json data is a string
        if (data['servability'] && !(typeof data['servability'] === 'string' || data['servability'] instanceof String)) {
            throw new Error("Expected the field `servability` to be a primitive type in the JSON string but got " + data['servability']);
        }

        return true;
    }


}



/**
 * List of country codes (ISO 3166-1 alpha-2) where issue applies to the offer.
 * @member {Array.<String>} applicableCountries
 */
ProductStatusItemLevelIssue.prototype['applicableCountries'] = undefined;

/**
 * The attribute's name, if the issue is caused by a single attribute.
 * @member {String} attributeName
 */
ProductStatusItemLevelIssue.prototype['attributeName'] = undefined;

/**
 * The error code of the issue.
 * @member {String} code
 */
ProductStatusItemLevelIssue.prototype['code'] = undefined;

/**
 * A short issue description in English.
 * @member {String} description
 */
ProductStatusItemLevelIssue.prototype['description'] = undefined;

/**
 * The destination the issue applies to.
 * @member {String} destination
 */
ProductStatusItemLevelIssue.prototype['destination'] = undefined;

/**
 * A detailed issue description in English.
 * @member {String} detail
 */
ProductStatusItemLevelIssue.prototype['detail'] = undefined;

/**
 * The URL of a web page to help with resolving this issue.
 * @member {String} documentation
 */
ProductStatusItemLevelIssue.prototype['documentation'] = undefined;

/**
 * Whether the issue can be resolved by the merchant.
 * @member {String} resolution
 */
ProductStatusItemLevelIssue.prototype['resolution'] = undefined;

/**
 * How this issue affects serving of the offer.
 * @member {String} servability
 */
ProductStatusItemLevelIssue.prototype['servability'] = undefined;






export default ProductStatusItemLevelIssue;

