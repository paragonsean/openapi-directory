/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderTrackingSignalLineItemDetails from './OrderTrackingSignalLineItemDetails';
import OrderTrackingSignalShipmentLineItemMapping from './OrderTrackingSignalShipmentLineItemMapping';
import OrderTrackingSignalShippingInfo from './OrderTrackingSignalShippingInfo';
import PriceAmount from './PriceAmount';

/**
 * The OrderTrackingSignal model module.
 * @module model/OrderTrackingSignal
 * @version v2.1
 */
class OrderTrackingSignal {
    /**
     * Constructs a new <code>OrderTrackingSignal</code>.
     * Represents a merchant trade from which signals are extracted, e.g. shipping.
     * @alias module:model/OrderTrackingSignal
     */
    constructor() { 
        
        OrderTrackingSignal.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderTrackingSignal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderTrackingSignal} obj Optional instance to populate.
     * @return {module:model/OrderTrackingSignal} The populated <code>OrderTrackingSignal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderTrackingSignal();

            if (data.hasOwnProperty('customerShippingFee')) {
                obj['customerShippingFee'] = PriceAmount.constructFromObject(data['customerShippingFee']);
            }
            if (data.hasOwnProperty('deliveryPostalCode')) {
                obj['deliveryPostalCode'] = ApiClient.convertToType(data['deliveryPostalCode'], 'String');
            }
            if (data.hasOwnProperty('deliveryRegionCode')) {
                obj['deliveryRegionCode'] = ApiClient.convertToType(data['deliveryRegionCode'], 'String');
            }
            if (data.hasOwnProperty('lineItems')) {
                obj['lineItems'] = ApiClient.convertToType(data['lineItems'], [OrderTrackingSignalLineItemDetails]);
            }
            if (data.hasOwnProperty('merchantId')) {
                obj['merchantId'] = ApiClient.convertToType(data['merchantId'], 'String');
            }
            if (data.hasOwnProperty('orderCreatedTime')) {
                obj['orderCreatedTime'] = 'Date'.constructFromObject(data['orderCreatedTime']);
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('orderTrackingSignalId')) {
                obj['orderTrackingSignalId'] = ApiClient.convertToType(data['orderTrackingSignalId'], 'String');
            }
            if (data.hasOwnProperty('shipmentLineItemMapping')) {
                obj['shipmentLineItemMapping'] = ApiClient.convertToType(data['shipmentLineItemMapping'], [OrderTrackingSignalShipmentLineItemMapping]);
            }
            if (data.hasOwnProperty('shippingInfo')) {
                obj['shippingInfo'] = ApiClient.convertToType(data['shippingInfo'], [OrderTrackingSignalShippingInfo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderTrackingSignal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderTrackingSignal</code>.
     */
    static validateJSON(data) {
        // validate the optional field `customerShippingFee`
        if (data['customerShippingFee']) { // data not null
          PriceAmount.validateJSON(data['customerShippingFee']);
        }
        // ensure the json data is a string
        if (data['deliveryPostalCode'] && !(typeof data['deliveryPostalCode'] === 'string' || data['deliveryPostalCode'] instanceof String)) {
            throw new Error("Expected the field `deliveryPostalCode` to be a primitive type in the JSON string but got " + data['deliveryPostalCode']);
        }
        // ensure the json data is a string
        if (data['deliveryRegionCode'] && !(typeof data['deliveryRegionCode'] === 'string' || data['deliveryRegionCode'] instanceof String)) {
            throw new Error("Expected the field `deliveryRegionCode` to be a primitive type in the JSON string but got " + data['deliveryRegionCode']);
        }
        if (data['lineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lineItems'])) {
                throw new Error("Expected the field `lineItems` to be an array in the JSON data but got " + data['lineItems']);
            }
            // validate the optional field `lineItems` (array)
            for (const item of data['lineItems']) {
                OrderTrackingSignalLineItemDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['merchantId'] && !(typeof data['merchantId'] === 'string' || data['merchantId'] instanceof String)) {
            throw new Error("Expected the field `merchantId` to be a primitive type in the JSON string but got " + data['merchantId']);
        }
        // validate the optional field `orderCreatedTime`
        if (data['orderCreatedTime']) { // data not null
          Date.validateJSON(data['orderCreatedTime']);
        }
        // ensure the json data is a string
        if (data['orderId'] && !(typeof data['orderId'] === 'string' || data['orderId'] instanceof String)) {
            throw new Error("Expected the field `orderId` to be a primitive type in the JSON string but got " + data['orderId']);
        }
        // ensure the json data is a string
        if (data['orderTrackingSignalId'] && !(typeof data['orderTrackingSignalId'] === 'string' || data['orderTrackingSignalId'] instanceof String)) {
            throw new Error("Expected the field `orderTrackingSignalId` to be a primitive type in the JSON string but got " + data['orderTrackingSignalId']);
        }
        if (data['shipmentLineItemMapping']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shipmentLineItemMapping'])) {
                throw new Error("Expected the field `shipmentLineItemMapping` to be an array in the JSON data but got " + data['shipmentLineItemMapping']);
            }
            // validate the optional field `shipmentLineItemMapping` (array)
            for (const item of data['shipmentLineItemMapping']) {
                OrderTrackingSignalShipmentLineItemMapping.validateJSON(item);
            };
        }
        if (data['shippingInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shippingInfo'])) {
                throw new Error("Expected the field `shippingInfo` to be an array in the JSON data but got " + data['shippingInfo']);
            }
            // validate the optional field `shippingInfo` (array)
            for (const item of data['shippingInfo']) {
                OrderTrackingSignalShippingInfo.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/PriceAmount} customerShippingFee
 */
OrderTrackingSignal.prototype['customerShippingFee'] = undefined;

/**
 * Required. The delivery postal code, as a continuous string without spaces or dashes, e.g. \"95016\". This field will be anonymized in returned OrderTrackingSignal creation response.
 * @member {String} deliveryPostalCode
 */
OrderTrackingSignal.prototype['deliveryPostalCode'] = undefined;

/**
 * Required. The [CLDR territory code] (http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml) for the shipping destination.
 * @member {String} deliveryRegionCode
 */
OrderTrackingSignal.prototype['deliveryRegionCode'] = undefined;

/**
 * Information about line items in the order.
 * @member {Array.<module:model/OrderTrackingSignalLineItemDetails>} lineItems
 */
OrderTrackingSignal.prototype['lineItems'] = undefined;

/**
 * The Google merchant ID of this order tracking signal. This value is optional. If left unset, the caller's merchant ID is used. You must request access in order to provide data on behalf of another merchant. For more information, see [Submitting Order Tracking Signals](/shopping-content/guides/order-tracking-signals).
 * @member {String} merchantId
 */
OrderTrackingSignal.prototype['merchantId'] = undefined;

/**
 * @member {Date} orderCreatedTime
 */
OrderTrackingSignal.prototype['orderCreatedTime'] = undefined;

/**
 * Required. The ID of the order on the merchant side. This field will be hashed in returned OrderTrackingSignal creation response.
 * @member {String} orderId
 */
OrderTrackingSignal.prototype['orderId'] = undefined;

/**
 * Output only. The ID that uniquely identifies this order tracking signal.
 * @member {String} orderTrackingSignalId
 */
OrderTrackingSignal.prototype['orderTrackingSignalId'] = undefined;

/**
 * The mapping of the line items to the shipment information.
 * @member {Array.<module:model/OrderTrackingSignalShipmentLineItemMapping>} shipmentLineItemMapping
 */
OrderTrackingSignal.prototype['shipmentLineItemMapping'] = undefined;

/**
 * The shipping information for the order.
 * @member {Array.<module:model/OrderTrackingSignalShippingInfo>} shippingInfo
 */
OrderTrackingSignal.prototype['shippingInfo'] = undefined;






export default OrderTrackingSignal;

