/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RecommendationCreative model module.
 * @module model/RecommendationCreative
 * @version v2.1
 */
class RecommendationCreative {
    /**
     * Constructs a new <code>RecommendationCreative</code>.
     * Creative is a multimedia attachment to recommendation that can be used on the frontend.
     * @alias module:model/RecommendationCreative
     */
    constructor() { 
        
        RecommendationCreative.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecommendationCreative</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecommendationCreative} obj Optional instance to populate.
     * @return {module:model/RecommendationCreative} The populated <code>RecommendationCreative</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecommendationCreative();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecommendationCreative</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecommendationCreative</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * Type of the creative.
 * @member {module:model/RecommendationCreative.TypeEnum} type
 */
RecommendationCreative.prototype['type'] = undefined;

/**
 * URL of the creative.
 * @member {String} uri
 */
RecommendationCreative.prototype['uri'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RecommendationCreative['TypeEnum'] = {

    /**
     * value: "CREATIVE_TYPE_UNSPECIFIED"
     * @const
     */
    "CREATIVE_TYPE_UNSPECIFIED": "CREATIVE_TYPE_UNSPECIFIED",

    /**
     * value: "VIDEO"
     * @const
     */
    "VIDEO": "VIDEO",

    /**
     * value: "PHOTO"
     * @const
     */
    "PHOTO": "PHOTO"
};



export default RecommendationCreative;

