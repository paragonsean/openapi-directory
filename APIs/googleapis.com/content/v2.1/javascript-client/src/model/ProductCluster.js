/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductCluster model module.
 * @module model/ProductCluster
 * @version v2.1
 */
class ProductCluster {
    /**
     * Constructs a new <code>ProductCluster</code>.
     * Product cluster fields. A product cluster is a grouping for different offers that represent the same product. Values are only set for fields requested explicitly in the request&#39;s search query.
     * @alias module:model/ProductCluster
     */
    constructor() { 
        
        ProductCluster.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductCluster</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductCluster} obj Optional instance to populate.
     * @return {module:model/ProductCluster} The populated <code>ProductCluster</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductCluster();

            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('brandInventoryStatus')) {
                obj['brandInventoryStatus'] = ApiClient.convertToType(data['brandInventoryStatus'], 'String');
            }
            if (data.hasOwnProperty('categoryL1')) {
                obj['categoryL1'] = ApiClient.convertToType(data['categoryL1'], 'String');
            }
            if (data.hasOwnProperty('categoryL2')) {
                obj['categoryL2'] = ApiClient.convertToType(data['categoryL2'], 'String');
            }
            if (data.hasOwnProperty('categoryL3')) {
                obj['categoryL3'] = ApiClient.convertToType(data['categoryL3'], 'String');
            }
            if (data.hasOwnProperty('categoryL4')) {
                obj['categoryL4'] = ApiClient.convertToType(data['categoryL4'], 'String');
            }
            if (data.hasOwnProperty('categoryL5')) {
                obj['categoryL5'] = ApiClient.convertToType(data['categoryL5'], 'String');
            }
            if (data.hasOwnProperty('inventoryStatus')) {
                obj['inventoryStatus'] = ApiClient.convertToType(data['inventoryStatus'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('variantGtins')) {
                obj['variantGtins'] = ApiClient.convertToType(data['variantGtins'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductCluster</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductCluster</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['brandInventoryStatus'] && !(typeof data['brandInventoryStatus'] === 'string' || data['brandInventoryStatus'] instanceof String)) {
            throw new Error("Expected the field `brandInventoryStatus` to be a primitive type in the JSON string but got " + data['brandInventoryStatus']);
        }
        // ensure the json data is a string
        if (data['categoryL1'] && !(typeof data['categoryL1'] === 'string' || data['categoryL1'] instanceof String)) {
            throw new Error("Expected the field `categoryL1` to be a primitive type in the JSON string but got " + data['categoryL1']);
        }
        // ensure the json data is a string
        if (data['categoryL2'] && !(typeof data['categoryL2'] === 'string' || data['categoryL2'] instanceof String)) {
            throw new Error("Expected the field `categoryL2` to be a primitive type in the JSON string but got " + data['categoryL2']);
        }
        // ensure the json data is a string
        if (data['categoryL3'] && !(typeof data['categoryL3'] === 'string' || data['categoryL3'] instanceof String)) {
            throw new Error("Expected the field `categoryL3` to be a primitive type in the JSON string but got " + data['categoryL3']);
        }
        // ensure the json data is a string
        if (data['categoryL4'] && !(typeof data['categoryL4'] === 'string' || data['categoryL4'] instanceof String)) {
            throw new Error("Expected the field `categoryL4` to be a primitive type in the JSON string but got " + data['categoryL4']);
        }
        // ensure the json data is a string
        if (data['categoryL5'] && !(typeof data['categoryL5'] === 'string' || data['categoryL5'] instanceof String)) {
            throw new Error("Expected the field `categoryL5` to be a primitive type in the JSON string but got " + data['categoryL5']);
        }
        // ensure the json data is a string
        if (data['inventoryStatus'] && !(typeof data['inventoryStatus'] === 'string' || data['inventoryStatus'] instanceof String)) {
            throw new Error("Expected the field `inventoryStatus` to be a primitive type in the JSON string but got " + data['inventoryStatus']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['variantGtins'])) {
            throw new Error("Expected the field `variantGtins` to be an array in the JSON data but got " + data['variantGtins']);
        }

        return true;
    }


}



/**
 * Brand of the product cluster.
 * @member {String} brand
 */
ProductCluster.prototype['brand'] = undefined;

/**
 * Tells if there is at least one product of the brand currently `IN_STOCK` in your product feed across multiple countries, all products are `OUT_OF_STOCK` in your product feed, or `NOT_IN_INVENTORY`. The field doesn't take the Best Sellers report country filter into account.
 * @member {module:model/ProductCluster.BrandInventoryStatusEnum} brandInventoryStatus
 */
ProductCluster.prototype['brandInventoryStatus'] = undefined;

/**
 * Product category (1st level) of the product cluster, represented in Google's product taxonomy.
 * @member {String} categoryL1
 */
ProductCluster.prototype['categoryL1'] = undefined;

/**
 * Product category (2nd level) of the product cluster, represented in Google's product taxonomy.
 * @member {String} categoryL2
 */
ProductCluster.prototype['categoryL2'] = undefined;

/**
 * Product category (3rd level) of the product cluster, represented in Google's product taxonomy.
 * @member {String} categoryL3
 */
ProductCluster.prototype['categoryL3'] = undefined;

/**
 * Product category (4th level) of the product cluster, represented in Google's product taxonomy.
 * @member {String} categoryL4
 */
ProductCluster.prototype['categoryL4'] = undefined;

/**
 * Product category (5th level) of the product cluster, represented in Google's product taxonomy.
 * @member {String} categoryL5
 */
ProductCluster.prototype['categoryL5'] = undefined;

/**
 * Tells whether the product cluster is `IN_STOCK` in your product feed across multiple countries, `OUT_OF_STOCK` in your product feed, or `NOT_IN_INVENTORY` at all. The field doesn't take the Best Sellers report country filter into account.
 * @member {module:model/ProductCluster.InventoryStatusEnum} inventoryStatus
 */
ProductCluster.prototype['inventoryStatus'] = undefined;

/**
 * Title of the product cluster.
 * @member {String} title
 */
ProductCluster.prototype['title'] = undefined;

/**
 * GTINs of example variants of the product cluster.
 * @member {Array.<String>} variantGtins
 */
ProductCluster.prototype['variantGtins'] = undefined;





/**
 * Allowed values for the <code>brandInventoryStatus</code> property.
 * @enum {String}
 * @readonly
 */
ProductCluster['BrandInventoryStatusEnum'] = {

    /**
     * value: "INVENTORY_STATUS_UNSPECIFIED"
     * @const
     */
    "INVENTORY_STATUS_UNSPECIFIED": "INVENTORY_STATUS_UNSPECIFIED",

    /**
     * value: "IN_STOCK"
     * @const
     */
    "IN_STOCK": "IN_STOCK",

    /**
     * value: "OUT_OF_STOCK"
     * @const
     */
    "OUT_OF_STOCK": "OUT_OF_STOCK",

    /**
     * value: "NOT_IN_INVENTORY"
     * @const
     */
    "NOT_IN_INVENTORY": "NOT_IN_INVENTORY"
};


/**
 * Allowed values for the <code>inventoryStatus</code> property.
 * @enum {String}
 * @readonly
 */
ProductCluster['InventoryStatusEnum'] = {

    /**
     * value: "INVENTORY_STATUS_UNSPECIFIED"
     * @const
     */
    "INVENTORY_STATUS_UNSPECIFIED": "INVENTORY_STATUS_UNSPECIFIED",

    /**
     * value: "IN_STOCK"
     * @const
     */
    "IN_STOCK": "IN_STOCK",

    /**
     * value: "OUT_OF_STOCK"
     * @const
     */
    "OUT_OF_STOCK": "OUT_OF_STOCK",

    /**
     * value: "NOT_IN_INVENTORY"
     * @const
     */
    "NOT_IN_INVENTORY": "NOT_IN_INVENTORY"
};



export default ProductCluster;

