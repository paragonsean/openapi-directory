/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountIssue from './AccountIssue';
import AlternateDisputeResolution from './AlternateDisputeResolution';

/**
 * The RenderAccountIssuesResponse model module.
 * @module model/RenderAccountIssuesResponse
 * @version v2.1
 */
class RenderAccountIssuesResponse {
    /**
     * Constructs a new <code>RenderAccountIssuesResponse</code>.
     * Response containing support content and actions for listed account issues.
     * @alias module:model/RenderAccountIssuesResponse
     */
    constructor() { 
        
        RenderAccountIssuesResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RenderAccountIssuesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RenderAccountIssuesResponse} obj Optional instance to populate.
     * @return {module:model/RenderAccountIssuesResponse} The populated <code>RenderAccountIssuesResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RenderAccountIssuesResponse();

            if (data.hasOwnProperty('alternateDisputeResolution')) {
                obj['alternateDisputeResolution'] = AlternateDisputeResolution.constructFromObject(data['alternateDisputeResolution']);
            }
            if (data.hasOwnProperty('issues')) {
                obj['issues'] = ApiClient.convertToType(data['issues'], [AccountIssue]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RenderAccountIssuesResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RenderAccountIssuesResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `alternateDisputeResolution`
        if (data['alternateDisputeResolution']) { // data not null
          AlternateDisputeResolution.validateJSON(data['alternateDisputeResolution']);
        }
        if (data['issues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['issues'])) {
                throw new Error("Expected the field `issues` to be an array in the JSON data but got " + data['issues']);
            }
            // validate the optional field `issues` (array)
            for (const item of data['issues']) {
                AccountIssue.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/AlternateDisputeResolution} alternateDisputeResolution
 */
RenderAccountIssuesResponse.prototype['alternateDisputeResolution'] = undefined;

/**
 * List of account issues for a given account. This list can be shown with compressed, expandable items. In the compressed form, the title and impact should be shown for each issue. Once the issue is expanded, the detailed content and available actions should be rendered.
 * @member {Array.<module:model/AccountIssue>} issues
 */
RenderAccountIssuesResponse.prototype['issues'] = undefined;






export default RenderAccountIssuesResponse;

