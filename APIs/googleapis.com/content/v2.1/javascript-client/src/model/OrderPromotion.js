/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderPromotionItem from './OrderPromotionItem';
import Price from './Price';

/**
 * The OrderPromotion model module.
 * @module model/OrderPromotion
 * @version v2.1
 */
class OrderPromotion {
    /**
     * Constructs a new <code>OrderPromotion</code>.
     * @alias module:model/OrderPromotion
     */
    constructor() { 
        
        OrderPromotion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderPromotion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderPromotion} obj Optional instance to populate.
     * @return {module:model/OrderPromotion} The populated <code>OrderPromotion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderPromotion();

            if (data.hasOwnProperty('applicableItems')) {
                obj['applicableItems'] = ApiClient.convertToType(data['applicableItems'], [OrderPromotionItem]);
            }
            if (data.hasOwnProperty('appliedItems')) {
                obj['appliedItems'] = ApiClient.convertToType(data['appliedItems'], [OrderPromotionItem]);
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('funder')) {
                obj['funder'] = ApiClient.convertToType(data['funder'], 'String');
            }
            if (data.hasOwnProperty('merchantPromotionId')) {
                obj['merchantPromotionId'] = ApiClient.convertToType(data['merchantPromotionId'], 'String');
            }
            if (data.hasOwnProperty('priceValue')) {
                obj['priceValue'] = Price.constructFromObject(data['priceValue']);
            }
            if (data.hasOwnProperty('shortTitle')) {
                obj['shortTitle'] = ApiClient.convertToType(data['shortTitle'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('subtype')) {
                obj['subtype'] = ApiClient.convertToType(data['subtype'], 'String');
            }
            if (data.hasOwnProperty('taxValue')) {
                obj['taxValue'] = Price.constructFromObject(data['taxValue']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderPromotion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderPromotion</code>.
     */
    static validateJSON(data) {
        if (data['applicableItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['applicableItems'])) {
                throw new Error("Expected the field `applicableItems` to be an array in the JSON data but got " + data['applicableItems']);
            }
            // validate the optional field `applicableItems` (array)
            for (const item of data['applicableItems']) {
                OrderPromotionItem.validateJSON(item);
            };
        }
        if (data['appliedItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appliedItems'])) {
                throw new Error("Expected the field `appliedItems` to be an array in the JSON data but got " + data['appliedItems']);
            }
            // validate the optional field `appliedItems` (array)
            for (const item of data['appliedItems']) {
                OrderPromotionItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // ensure the json data is a string
        if (data['funder'] && !(typeof data['funder'] === 'string' || data['funder'] instanceof String)) {
            throw new Error("Expected the field `funder` to be a primitive type in the JSON string but got " + data['funder']);
        }
        // ensure the json data is a string
        if (data['merchantPromotionId'] && !(typeof data['merchantPromotionId'] === 'string' || data['merchantPromotionId'] instanceof String)) {
            throw new Error("Expected the field `merchantPromotionId` to be a primitive type in the JSON string but got " + data['merchantPromotionId']);
        }
        // validate the optional field `priceValue`
        if (data['priceValue']) { // data not null
          Price.validateJSON(data['priceValue']);
        }
        // ensure the json data is a string
        if (data['shortTitle'] && !(typeof data['shortTitle'] === 'string' || data['shortTitle'] instanceof String)) {
            throw new Error("Expected the field `shortTitle` to be a primitive type in the JSON string but got " + data['shortTitle']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['subtype'] && !(typeof data['subtype'] === 'string' || data['subtype'] instanceof String)) {
            throw new Error("Expected the field `subtype` to be a primitive type in the JSON string but got " + data['subtype']);
        }
        // validate the optional field `taxValue`
        if (data['taxValue']) { // data not null
          Price.validateJSON(data['taxValue']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Items that this promotion may be applied to. If empty, there are no restrictions on applicable items and quantity. This field will also be empty for shipping promotions because shipping is not tied to any specific item.
 * @member {Array.<module:model/OrderPromotionItem>} applicableItems
 */
OrderPromotion.prototype['applicableItems'] = undefined;

/**
 * Items that this promotion have been applied to. Do not provide for `orders.createtestorder`. This field will be empty for shipping promotions because shipping is not tied to any specific item.
 * @member {Array.<module:model/OrderPromotionItem>} appliedItems
 */
OrderPromotion.prototype['appliedItems'] = undefined;

/**
 * Promotion end time in ISO 8601 format. Date, time, and offset required, for example, \"2020-01-02T09:00:00+01:00\" or \"2020-01-02T09:00:00Z\".
 * @member {String} endTime
 */
OrderPromotion.prototype['endTime'] = undefined;

/**
 * Required. The party funding the promotion. Only `merchant` is supported for `orders.createtestorder`. Acceptable values are: - \"`google`\" - \"`merchant`\" 
 * @member {String} funder
 */
OrderPromotion.prototype['funder'] = undefined;

/**
 * Required. This field is used to identify promotions within merchants' own systems.
 * @member {String} merchantPromotionId
 */
OrderPromotion.prototype['merchantPromotionId'] = undefined;

/**
 * @member {module:model/Price} priceValue
 */
OrderPromotion.prototype['priceValue'] = undefined;

/**
 * A short title of the promotion to be shown on the checkout page. Do not provide for `orders.createtestorder`.
 * @member {String} shortTitle
 */
OrderPromotion.prototype['shortTitle'] = undefined;

/**
 * Promotion start time in ISO 8601 format. Date, time, and offset required, for example, \"2020-01-02T09:00:00+01:00\" or \"2020-01-02T09:00:00Z\".
 * @member {String} startTime
 */
OrderPromotion.prototype['startTime'] = undefined;

/**
 * Required. The category of the promotion. Only `moneyOff` is supported for `orders.createtestorder`. Acceptable values are: - \"`buyMGetMoneyOff`\" - \"`buyMGetNMoneyOff`\" - \"`buyMGetNPercentOff`\" - \"`buyMGetPercentOff`\" - \"`freeGift`\" - \"`freeGiftWithItemId`\" - \"`freeGiftWithValue`\" - \"`freeShippingOvernight`\" - \"`freeShippingStandard`\" - \"`freeShippingTwoDay`\" - \"`moneyOff`\" - \"`percentOff`\" - \"`rewardPoints`\" - \"`salePrice`\" 
 * @member {String} subtype
 */
OrderPromotion.prototype['subtype'] = undefined;

/**
 * @member {module:model/Price} taxValue
 */
OrderPromotion.prototype['taxValue'] = undefined;

/**
 * Required. The title of the promotion.
 * @member {String} title
 */
OrderPromotion.prototype['title'] = undefined;

/**
 * Required. The scope of the promotion. Only `product` is supported for `orders.createtestorder`. Acceptable values are: - \"`product`\" - \"`shipping`\" 
 * @member {String} type
 */
OrderPromotion.prototype['type'] = undefined;






export default OrderPromotion;

