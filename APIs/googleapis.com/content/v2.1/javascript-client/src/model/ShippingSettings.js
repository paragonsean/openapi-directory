/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PostalCodeGroup from './PostalCodeGroup';
import Service from './Service';
import Warehouse from './Warehouse';

/**
 * The ShippingSettings model module.
 * @module model/ShippingSettings
 * @version v2.1
 */
class ShippingSettings {
    /**
     * Constructs a new <code>ShippingSettings</code>.
     * The merchant account&#39;s shipping settings. All methods except getsupportedcarriers and getsupportedholidays require the admin role.
     * @alias module:model/ShippingSettings
     */
    constructor() { 
        
        ShippingSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ShippingSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShippingSettings} obj Optional instance to populate.
     * @return {module:model/ShippingSettings} The populated <code>ShippingSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShippingSettings();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('postalCodeGroups')) {
                obj['postalCodeGroups'] = ApiClient.convertToType(data['postalCodeGroups'], [PostalCodeGroup]);
            }
            if (data.hasOwnProperty('services')) {
                obj['services'] = ApiClient.convertToType(data['services'], [Service]);
            }
            if (data.hasOwnProperty('warehouses')) {
                obj['warehouses'] = ApiClient.convertToType(data['warehouses'], [Warehouse]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShippingSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShippingSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        if (data['postalCodeGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['postalCodeGroups'])) {
                throw new Error("Expected the field `postalCodeGroups` to be an array in the JSON data but got " + data['postalCodeGroups']);
            }
            // validate the optional field `postalCodeGroups` (array)
            for (const item of data['postalCodeGroups']) {
                PostalCodeGroup.validateJSON(item);
            };
        }
        if (data['services']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['services'])) {
                throw new Error("Expected the field `services` to be an array in the JSON data but got " + data['services']);
            }
            // validate the optional field `services` (array)
            for (const item of data['services']) {
                Service.validateJSON(item);
            };
        }
        if (data['warehouses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['warehouses'])) {
                throw new Error("Expected the field `warehouses` to be an array in the JSON data but got " + data['warehouses']);
            }
            // validate the optional field `warehouses` (array)
            for (const item of data['warehouses']) {
                Warehouse.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The ID of the account to which these account shipping settings belong. Ignored upon update, always present in get request responses.
 * @member {String} accountId
 */
ShippingSettings.prototype['accountId'] = undefined;

/**
 * A list of postal code groups that can be referred to in `services`. Optional.
 * @member {Array.<module:model/PostalCodeGroup>} postalCodeGroups
 */
ShippingSettings.prototype['postalCodeGroups'] = undefined;

/**
 * The target account's list of services. Optional.
 * @member {Array.<module:model/Service>} services
 */
ShippingSettings.prototype['services'] = undefined;

/**
 * Optional. A list of warehouses which can be referred to in `services`.
 * @member {Array.<module:model/Warehouse>} warehouses
 */
ShippingSettings.prototype['warehouses'] = undefined;






export default ShippingSettings;

