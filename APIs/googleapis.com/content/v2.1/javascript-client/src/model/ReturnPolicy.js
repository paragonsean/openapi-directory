/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Price from './Price';
import ReturnPolicyPolicy from './ReturnPolicyPolicy';
import ReturnPolicySeasonalOverride from './ReturnPolicySeasonalOverride';

/**
 * The ReturnPolicy model module.
 * @module model/ReturnPolicy
 * @version v2.1
 */
class ReturnPolicy {
    /**
     * Constructs a new <code>ReturnPolicy</code>.
     * Return policy resource.
     * @alias module:model/ReturnPolicy
     */
    constructor() { 
        
        ReturnPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReturnPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReturnPolicy} obj Optional instance to populate.
     * @return {module:model/ReturnPolicy} The populated <code>ReturnPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReturnPolicy();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nonFreeReturnReasons')) {
                obj['nonFreeReturnReasons'] = ApiClient.convertToType(data['nonFreeReturnReasons'], ['String']);
            }
            if (data.hasOwnProperty('policy')) {
                obj['policy'] = ReturnPolicyPolicy.constructFromObject(data['policy']);
            }
            if (data.hasOwnProperty('returnPolicyId')) {
                obj['returnPolicyId'] = ApiClient.convertToType(data['returnPolicyId'], 'String');
            }
            if (data.hasOwnProperty('returnShippingFee')) {
                obj['returnShippingFee'] = Price.constructFromObject(data['returnShippingFee']);
            }
            if (data.hasOwnProperty('seasonalOverrides')) {
                obj['seasonalOverrides'] = ApiClient.convertToType(data['seasonalOverrides'], [ReturnPolicySeasonalOverride]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReturnPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReturnPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nonFreeReturnReasons'])) {
            throw new Error("Expected the field `nonFreeReturnReasons` to be an array in the JSON data but got " + data['nonFreeReturnReasons']);
        }
        // validate the optional field `policy`
        if (data['policy']) { // data not null
          ReturnPolicyPolicy.validateJSON(data['policy']);
        }
        // ensure the json data is a string
        if (data['returnPolicyId'] && !(typeof data['returnPolicyId'] === 'string' || data['returnPolicyId'] instanceof String)) {
            throw new Error("Expected the field `returnPolicyId` to be a primitive type in the JSON string but got " + data['returnPolicyId']);
        }
        // validate the optional field `returnShippingFee`
        if (data['returnShippingFee']) { // data not null
          Price.validateJSON(data['returnShippingFee']);
        }
        if (data['seasonalOverrides']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['seasonalOverrides'])) {
                throw new Error("Expected the field `seasonalOverrides` to be an array in the JSON data but got " + data['seasonalOverrides']);
            }
            // validate the optional field `seasonalOverrides` (array)
            for (const item of data['seasonalOverrides']) {
                ReturnPolicySeasonalOverride.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Required. The country of sale where the return policy is applicable.
 * @member {String} country
 */
ReturnPolicy.prototype['country'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"`content#returnPolicy`\"
 * @member {String} kind
 */
ReturnPolicy.prototype['kind'] = undefined;

/**
 * Required. The user-defined label of the return policy. For the default policy, use the label \"default\".
 * @member {String} label
 */
ReturnPolicy.prototype['label'] = undefined;

/**
 * Required. The name of the policy as shown in Merchant Center.
 * @member {String} name
 */
ReturnPolicy.prototype['name'] = undefined;

/**
 * Return reasons that will incur return fees.
 * @member {Array.<String>} nonFreeReturnReasons
 */
ReturnPolicy.prototype['nonFreeReturnReasons'] = undefined;

/**
 * @member {module:model/ReturnPolicyPolicy} policy
 */
ReturnPolicy.prototype['policy'] = undefined;

/**
 * Return policy ID generated by Google.
 * @member {String} returnPolicyId
 */
ReturnPolicy.prototype['returnPolicyId'] = undefined;

/**
 * @member {module:model/Price} returnShippingFee
 */
ReturnPolicy.prototype['returnShippingFee'] = undefined;

/**
 * An optional list of seasonal overrides.
 * @member {Array.<module:model/ReturnPolicySeasonalOverride>} seasonalOverrides
 */
ReturnPolicy.prototype['seasonalOverrides'] = undefined;






export default ReturnPolicy;

