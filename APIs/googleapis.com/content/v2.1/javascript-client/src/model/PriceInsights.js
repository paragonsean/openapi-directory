/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PriceInsights model module.
 * @module model/PriceInsights
 * @version v2.1
 */
class PriceInsights {
    /**
     * Constructs a new <code>PriceInsights</code>.
     * Price insights fields requested by the merchant in the query. Field values are only set if the merchant queries &#x60;PriceInsightsProductView&#x60;. https://support.google.com/merchants/answer/11916926
     * @alias module:model/PriceInsights
     */
    constructor() { 
        
        PriceInsights.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PriceInsights</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PriceInsights} obj Optional instance to populate.
     * @return {module:model/PriceInsights} The populated <code>PriceInsights</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PriceInsights();

            if (data.hasOwnProperty('predictedClicksChangeFraction')) {
                obj['predictedClicksChangeFraction'] = ApiClient.convertToType(data['predictedClicksChangeFraction'], 'Number');
            }
            if (data.hasOwnProperty('predictedConversionsChangeFraction')) {
                obj['predictedConversionsChangeFraction'] = ApiClient.convertToType(data['predictedConversionsChangeFraction'], 'Number');
            }
            if (data.hasOwnProperty('predictedGrossProfitChangeFraction')) {
                obj['predictedGrossProfitChangeFraction'] = ApiClient.convertToType(data['predictedGrossProfitChangeFraction'], 'Number');
            }
            if (data.hasOwnProperty('predictedImpressionsChangeFraction')) {
                obj['predictedImpressionsChangeFraction'] = ApiClient.convertToType(data['predictedImpressionsChangeFraction'], 'Number');
            }
            if (data.hasOwnProperty('predictedMonthlyGrossProfitChangeCurrencyCode')) {
                obj['predictedMonthlyGrossProfitChangeCurrencyCode'] = ApiClient.convertToType(data['predictedMonthlyGrossProfitChangeCurrencyCode'], 'String');
            }
            if (data.hasOwnProperty('predictedMonthlyGrossProfitChangeMicros')) {
                obj['predictedMonthlyGrossProfitChangeMicros'] = ApiClient.convertToType(data['predictedMonthlyGrossProfitChangeMicros'], 'String');
            }
            if (data.hasOwnProperty('suggestedPriceCurrencyCode')) {
                obj['suggestedPriceCurrencyCode'] = ApiClient.convertToType(data['suggestedPriceCurrencyCode'], 'String');
            }
            if (data.hasOwnProperty('suggestedPriceMicros')) {
                obj['suggestedPriceMicros'] = ApiClient.convertToType(data['suggestedPriceMicros'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PriceInsights</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PriceInsights</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['predictedMonthlyGrossProfitChangeCurrencyCode'] && !(typeof data['predictedMonthlyGrossProfitChangeCurrencyCode'] === 'string' || data['predictedMonthlyGrossProfitChangeCurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `predictedMonthlyGrossProfitChangeCurrencyCode` to be a primitive type in the JSON string but got " + data['predictedMonthlyGrossProfitChangeCurrencyCode']);
        }
        // ensure the json data is a string
        if (data['predictedMonthlyGrossProfitChangeMicros'] && !(typeof data['predictedMonthlyGrossProfitChangeMicros'] === 'string' || data['predictedMonthlyGrossProfitChangeMicros'] instanceof String)) {
            throw new Error("Expected the field `predictedMonthlyGrossProfitChangeMicros` to be a primitive type in the JSON string but got " + data['predictedMonthlyGrossProfitChangeMicros']);
        }
        // ensure the json data is a string
        if (data['suggestedPriceCurrencyCode'] && !(typeof data['suggestedPriceCurrencyCode'] === 'string' || data['suggestedPriceCurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `suggestedPriceCurrencyCode` to be a primitive type in the JSON string but got " + data['suggestedPriceCurrencyCode']);
        }
        // ensure the json data is a string
        if (data['suggestedPriceMicros'] && !(typeof data['suggestedPriceMicros'] === 'string' || data['suggestedPriceMicros'] instanceof String)) {
            throw new Error("Expected the field `suggestedPriceMicros` to be a primitive type in the JSON string but got " + data['suggestedPriceMicros']);
        }

        return true;
    }


}



/**
 * The predicted change in clicks as a fraction after introducing the suggested price compared to current active price. For example, 0.05 is a 5% predicted increase in clicks.
 * @member {Number} predictedClicksChangeFraction
 */
PriceInsights.prototype['predictedClicksChangeFraction'] = undefined;

/**
 * The predicted change in conversions as a fraction after introducing the suggested price compared to current active price. For example, 0.05 is a 5% predicted increase in conversions).
 * @member {Number} predictedConversionsChangeFraction
 */
PriceInsights.prototype['predictedConversionsChangeFraction'] = undefined;

/**
 * *Deprecated*: This field is no longer supported and will start returning 0. The predicted change in gross profit as a fraction after introducing the suggested price compared to current active price. For example, 0.05 is a 5% predicted increase in gross profit.
 * @member {Number} predictedGrossProfitChangeFraction
 */
PriceInsights.prototype['predictedGrossProfitChangeFraction'] = undefined;

/**
 * The predicted change in impressions as a fraction after introducing the suggested price compared to current active price. For example, 0.05 is a 5% predicted increase in impressions.
 * @member {Number} predictedImpressionsChangeFraction
 */
PriceInsights.prototype['predictedImpressionsChangeFraction'] = undefined;

/**
 * *Deprecated*: This field is no longer supported and will start returning USD for all requests. The predicted monthly gross profit change currency (ISO 4217 code).
 * @member {String} predictedMonthlyGrossProfitChangeCurrencyCode
 */
PriceInsights.prototype['predictedMonthlyGrossProfitChangeCurrencyCode'] = undefined;

/**
 * *Deprecated*: This field is no longer supported and will start returning 0. The predicted change in gross profit in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) after introducing the suggested price for a month compared to current active price.
 * @member {String} predictedMonthlyGrossProfitChangeMicros
 */
PriceInsights.prototype['predictedMonthlyGrossProfitChangeMicros'] = undefined;

/**
 * The suggested price currency (ISO 4217 code).
 * @member {String} suggestedPriceCurrencyCode
 */
PriceInsights.prototype['suggestedPriceCurrencyCode'] = undefined;

/**
 * The latest suggested price in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) for the product.
 * @member {String} suggestedPriceMicros
 */
PriceInsights.prototype['suggestedPriceMicros'] = undefined;






export default PriceInsights;

