/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Headers from './Headers';
import Row from './Row';

/**
 * The Table model module.
 * @module model/Table
 * @version v2.1
 */
class Table {
    /**
     * Constructs a new <code>Table</code>.
     * @alias module:model/Table
     */
    constructor() { 
        
        Table.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Table</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Table} obj Optional instance to populate.
     * @return {module:model/Table} The populated <code>Table</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Table();

            if (data.hasOwnProperty('columnHeaders')) {
                obj['columnHeaders'] = Headers.constructFromObject(data['columnHeaders']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rowHeaders')) {
                obj['rowHeaders'] = Headers.constructFromObject(data['rowHeaders']);
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [Row]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Table</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Table</code>.
     */
    static validateJSON(data) {
        // validate the optional field `columnHeaders`
        if (data['columnHeaders']) { // data not null
          Headers.validateJSON(data['columnHeaders']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `rowHeaders`
        if (data['rowHeaders']) { // data not null
          Headers.validateJSON(data['rowHeaders']);
        }
        if (data['rows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rows'])) {
                throw new Error("Expected the field `rows` to be an array in the JSON data but got " + data['rows']);
            }
            // validate the optional field `rows` (array)
            for (const item of data['rows']) {
                Row.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/Headers} columnHeaders
 */
Table.prototype['columnHeaders'] = undefined;

/**
 * Name of the table. Required for subtables, ignored for the main table.
 * @member {String} name
 */
Table.prototype['name'] = undefined;

/**
 * @member {module:model/Headers} rowHeaders
 */
Table.prototype['rowHeaders'] = undefined;

/**
 * The list of rows that constitute the table. Must have the same length as `rowHeaders`. Required.
 * @member {Array.<module:model/Row>} rows
 */
Table.prototype['rows'] = undefined;






export default Table;

