/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DatafeedFetchSchedule from './DatafeedFetchSchedule';
import DatafeedFormat from './DatafeedFormat';
import DatafeedTarget from './DatafeedTarget';

/**
 * The Datafeed model module.
 * @module model/Datafeed
 * @version v2.1
 */
class Datafeed {
    /**
     * Constructs a new <code>Datafeed</code>.
     * Datafeed configuration data.
     * @alias module:model/Datafeed
     */
    constructor() { 
        
        Datafeed.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Datafeed</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Datafeed} obj Optional instance to populate.
     * @return {module:model/Datafeed} The populated <code>Datafeed</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Datafeed();

            if (data.hasOwnProperty('attributeLanguage')) {
                obj['attributeLanguage'] = ApiClient.convertToType(data['attributeLanguage'], 'String');
            }
            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('fetchSchedule')) {
                obj['fetchSchedule'] = DatafeedFetchSchedule.constructFromObject(data['fetchSchedule']);
            }
            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = DatafeedFormat.constructFromObject(data['format']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('targets')) {
                obj['targets'] = ApiClient.convertToType(data['targets'], [DatafeedTarget]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Datafeed</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Datafeed</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['attributeLanguage'] && !(typeof data['attributeLanguage'] === 'string' || data['attributeLanguage'] instanceof String)) {
            throw new Error("Expected the field `attributeLanguage` to be a primitive type in the JSON string but got " + data['attributeLanguage']);
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // validate the optional field `fetchSchedule`
        if (data['fetchSchedule']) { // data not null
          DatafeedFetchSchedule.validateJSON(data['fetchSchedule']);
        }
        // ensure the json data is a string
        if (data['fileName'] && !(typeof data['fileName'] === 'string' || data['fileName'] instanceof String)) {
            throw new Error("Expected the field `fileName` to be a primitive type in the JSON string but got " + data['fileName']);
        }
        // validate the optional field `format`
        if (data['format']) { // data not null
          DatafeedFormat.validateJSON(data['format']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['targets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['targets'])) {
                throw new Error("Expected the field `targets` to be an array in the JSON data but got " + data['targets']);
            }
            // validate the optional field `targets` (array)
            for (const item of data['targets']) {
                DatafeedTarget.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The two-letter ISO 639-1 language in which the attributes are defined in the data feed.
 * @member {String} attributeLanguage
 */
Datafeed.prototype['attributeLanguage'] = undefined;

/**
 * Required. The type of data feed. For product inventory feeds, only feeds for local stores, not online stores, are supported. Acceptable values are: - \"`local products`\" - \"`product inventory`\" - \"`products`\" 
 * @member {String} contentType
 */
Datafeed.prototype['contentType'] = undefined;

/**
 * @member {module:model/DatafeedFetchSchedule} fetchSchedule
 */
Datafeed.prototype['fetchSchedule'] = undefined;

/**
 * Required. The filename of the feed. All feeds must have a unique file name.
 * @member {String} fileName
 */
Datafeed.prototype['fileName'] = undefined;

/**
 * @member {module:model/DatafeedFormat} format
 */
Datafeed.prototype['format'] = undefined;

/**
 * Required for update. The ID of the data feed.
 * @member {String} id
 */
Datafeed.prototype['id'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"`content#datafeed`\"
 * @member {String} kind
 */
Datafeed.prototype['kind'] = undefined;

/**
 * Required for insert. A descriptive name of the data feed.
 * @member {String} name
 */
Datafeed.prototype['name'] = undefined;

/**
 * The targets this feed should apply to (country, language, destinations).
 * @member {Array.<module:model/DatafeedTarget>} targets
 */
Datafeed.prototype['targets'] = undefined;






export default Datafeed;

