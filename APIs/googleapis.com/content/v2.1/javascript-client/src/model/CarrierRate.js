/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Price from './Price';

/**
 * The CarrierRate model module.
 * @module model/CarrierRate
 * @version v2.1
 */
class CarrierRate {
    /**
     * Constructs a new <code>CarrierRate</code>.
     * @alias module:model/CarrierRate
     */
    constructor() { 
        
        CarrierRate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CarrierRate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CarrierRate} obj Optional instance to populate.
     * @return {module:model/CarrierRate} The populated <code>CarrierRate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CarrierRate();

            if (data.hasOwnProperty('carrierName')) {
                obj['carrierName'] = ApiClient.convertToType(data['carrierName'], 'String');
            }
            if (data.hasOwnProperty('carrierService')) {
                obj['carrierService'] = ApiClient.convertToType(data['carrierService'], 'String');
            }
            if (data.hasOwnProperty('flatAdjustment')) {
                obj['flatAdjustment'] = Price.constructFromObject(data['flatAdjustment']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('originPostalCode')) {
                obj['originPostalCode'] = ApiClient.convertToType(data['originPostalCode'], 'String');
            }
            if (data.hasOwnProperty('percentageAdjustment')) {
                obj['percentageAdjustment'] = ApiClient.convertToType(data['percentageAdjustment'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CarrierRate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CarrierRate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['carrierName'] && !(typeof data['carrierName'] === 'string' || data['carrierName'] instanceof String)) {
            throw new Error("Expected the field `carrierName` to be a primitive type in the JSON string but got " + data['carrierName']);
        }
        // ensure the json data is a string
        if (data['carrierService'] && !(typeof data['carrierService'] === 'string' || data['carrierService'] instanceof String)) {
            throw new Error("Expected the field `carrierService` to be a primitive type in the JSON string but got " + data['carrierService']);
        }
        // validate the optional field `flatAdjustment`
        if (data['flatAdjustment']) { // data not null
          Price.validateJSON(data['flatAdjustment']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['originPostalCode'] && !(typeof data['originPostalCode'] === 'string' || data['originPostalCode'] instanceof String)) {
            throw new Error("Expected the field `originPostalCode` to be a primitive type in the JSON string but got " + data['originPostalCode']);
        }
        // ensure the json data is a string
        if (data['percentageAdjustment'] && !(typeof data['percentageAdjustment'] === 'string' || data['percentageAdjustment'] instanceof String)) {
            throw new Error("Expected the field `percentageAdjustment` to be a primitive type in the JSON string but got " + data['percentageAdjustment']);
        }

        return true;
    }


}



/**
 * Carrier service, such as `\"UPS\"` or `\"Fedex\"`. The list of supported carriers can be retrieved through the `getSupportedCarriers` method. Required.
 * @member {String} carrierName
 */
CarrierRate.prototype['carrierName'] = undefined;

/**
 * Carrier service, such as `\"ground\"` or `\"2 days\"`. The list of supported services for a carrier can be retrieved through the `getSupportedCarriers` method. Required.
 * @member {String} carrierService
 */
CarrierRate.prototype['carrierService'] = undefined;

/**
 * @member {module:model/Price} flatAdjustment
 */
CarrierRate.prototype['flatAdjustment'] = undefined;

/**
 * Name of the carrier rate. Must be unique per rate group. Required.
 * @member {String} name
 */
CarrierRate.prototype['name'] = undefined;

/**
 * Shipping origin for this carrier rate. Required.
 * @member {String} originPostalCode
 */
CarrierRate.prototype['originPostalCode'] = undefined;

/**
 * Multiplicative shipping rate modifier as a number in decimal notation. Can be negative. For example `\"5.4\"` increases the rate by 5.4%, `\"-3\"` decreases the rate by 3%. Optional.
 * @member {String} percentageAdjustment
 */
CarrierRate.prototype['percentageAdjustment'] = undefined;






export default CarrierRate;

