/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelDate from './ModelDate';
import ProductViewItemIssue from './ProductViewItemIssue';

/**
 * The ProductView model module.
 * @module model/ProductView
 * @version v2.1
 */
class ProductView {
    /**
     * Constructs a new <code>ProductView</code>.
     * Product fields. Values are only set for fields requested explicitly in the request&#39;s search query.
     * @alias module:model/ProductView
     */
    constructor() { 
        
        ProductView.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductView</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductView} obj Optional instance to populate.
     * @return {module:model/ProductView} The populated <code>ProductView</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductView();

            if (data.hasOwnProperty('aggregatedDestinationStatus')) {
                obj['aggregatedDestinationStatus'] = ApiClient.convertToType(data['aggregatedDestinationStatus'], 'String');
            }
            if (data.hasOwnProperty('availability')) {
                obj['availability'] = ApiClient.convertToType(data['availability'], 'String');
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('categoryL1')) {
                obj['categoryL1'] = ApiClient.convertToType(data['categoryL1'], 'String');
            }
            if (data.hasOwnProperty('categoryL2')) {
                obj['categoryL2'] = ApiClient.convertToType(data['categoryL2'], 'String');
            }
            if (data.hasOwnProperty('categoryL3')) {
                obj['categoryL3'] = ApiClient.convertToType(data['categoryL3'], 'String');
            }
            if (data.hasOwnProperty('categoryL4')) {
                obj['categoryL4'] = ApiClient.convertToType(data['categoryL4'], 'String');
            }
            if (data.hasOwnProperty('categoryL5')) {
                obj['categoryL5'] = ApiClient.convertToType(data['categoryL5'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('condition')) {
                obj['condition'] = ApiClient.convertToType(data['condition'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ModelDate.constructFromObject(data['expirationDate']);
            }
            if (data.hasOwnProperty('gtin')) {
                obj['gtin'] = ApiClient.convertToType(data['gtin'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('itemGroupId')) {
                obj['itemGroupId'] = ApiClient.convertToType(data['itemGroupId'], 'String');
            }
            if (data.hasOwnProperty('itemIssues')) {
                obj['itemIssues'] = ApiClient.convertToType(data['itemIssues'], [ProductViewItemIssue]);
            }
            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('offerId')) {
                obj['offerId'] = ApiClient.convertToType(data['offerId'], 'String');
            }
            if (data.hasOwnProperty('priceMicros')) {
                obj['priceMicros'] = ApiClient.convertToType(data['priceMicros'], 'String');
            }
            if (data.hasOwnProperty('productTypeL1')) {
                obj['productTypeL1'] = ApiClient.convertToType(data['productTypeL1'], 'String');
            }
            if (data.hasOwnProperty('productTypeL2')) {
                obj['productTypeL2'] = ApiClient.convertToType(data['productTypeL2'], 'String');
            }
            if (data.hasOwnProperty('productTypeL3')) {
                obj['productTypeL3'] = ApiClient.convertToType(data['productTypeL3'], 'String');
            }
            if (data.hasOwnProperty('productTypeL4')) {
                obj['productTypeL4'] = ApiClient.convertToType(data['productTypeL4'], 'String');
            }
            if (data.hasOwnProperty('productTypeL5')) {
                obj['productTypeL5'] = ApiClient.convertToType(data['productTypeL5'], 'String');
            }
            if (data.hasOwnProperty('shippingLabel')) {
                obj['shippingLabel'] = ApiClient.convertToType(data['shippingLabel'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductView</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductView</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aggregatedDestinationStatus'] && !(typeof data['aggregatedDestinationStatus'] === 'string' || data['aggregatedDestinationStatus'] instanceof String)) {
            throw new Error("Expected the field `aggregatedDestinationStatus` to be a primitive type in the JSON string but got " + data['aggregatedDestinationStatus']);
        }
        // ensure the json data is a string
        if (data['availability'] && !(typeof data['availability'] === 'string' || data['availability'] instanceof String)) {
            throw new Error("Expected the field `availability` to be a primitive type in the JSON string but got " + data['availability']);
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['categoryL1'] && !(typeof data['categoryL1'] === 'string' || data['categoryL1'] instanceof String)) {
            throw new Error("Expected the field `categoryL1` to be a primitive type in the JSON string but got " + data['categoryL1']);
        }
        // ensure the json data is a string
        if (data['categoryL2'] && !(typeof data['categoryL2'] === 'string' || data['categoryL2'] instanceof String)) {
            throw new Error("Expected the field `categoryL2` to be a primitive type in the JSON string but got " + data['categoryL2']);
        }
        // ensure the json data is a string
        if (data['categoryL3'] && !(typeof data['categoryL3'] === 'string' || data['categoryL3'] instanceof String)) {
            throw new Error("Expected the field `categoryL3` to be a primitive type in the JSON string but got " + data['categoryL3']);
        }
        // ensure the json data is a string
        if (data['categoryL4'] && !(typeof data['categoryL4'] === 'string' || data['categoryL4'] instanceof String)) {
            throw new Error("Expected the field `categoryL4` to be a primitive type in the JSON string but got " + data['categoryL4']);
        }
        // ensure the json data is a string
        if (data['categoryL5'] && !(typeof data['categoryL5'] === 'string' || data['categoryL5'] instanceof String)) {
            throw new Error("Expected the field `categoryL5` to be a primitive type in the JSON string but got " + data['categoryL5']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // ensure the json data is a string
        if (data['condition'] && !(typeof data['condition'] === 'string' || data['condition'] instanceof String)) {
            throw new Error("Expected the field `condition` to be a primitive type in the JSON string but got " + data['condition']);
        }
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // validate the optional field `expirationDate`
        if (data['expirationDate']) { // data not null
          ModelDate.validateJSON(data['expirationDate']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['gtin'])) {
            throw new Error("Expected the field `gtin` to be an array in the JSON data but got " + data['gtin']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['itemGroupId'] && !(typeof data['itemGroupId'] === 'string' || data['itemGroupId'] instanceof String)) {
            throw new Error("Expected the field `itemGroupId` to be a primitive type in the JSON string but got " + data['itemGroupId']);
        }
        if (data['itemIssues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['itemIssues'])) {
                throw new Error("Expected the field `itemIssues` to be an array in the JSON data but got " + data['itemIssues']);
            }
            // validate the optional field `itemIssues` (array)
            for (const item of data['itemIssues']) {
                ProductViewItemIssue.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        // ensure the json data is a string
        if (data['offerId'] && !(typeof data['offerId'] === 'string' || data['offerId'] instanceof String)) {
            throw new Error("Expected the field `offerId` to be a primitive type in the JSON string but got " + data['offerId']);
        }
        // ensure the json data is a string
        if (data['priceMicros'] && !(typeof data['priceMicros'] === 'string' || data['priceMicros'] instanceof String)) {
            throw new Error("Expected the field `priceMicros` to be a primitive type in the JSON string but got " + data['priceMicros']);
        }
        // ensure the json data is a string
        if (data['productTypeL1'] && !(typeof data['productTypeL1'] === 'string' || data['productTypeL1'] instanceof String)) {
            throw new Error("Expected the field `productTypeL1` to be a primitive type in the JSON string but got " + data['productTypeL1']);
        }
        // ensure the json data is a string
        if (data['productTypeL2'] && !(typeof data['productTypeL2'] === 'string' || data['productTypeL2'] instanceof String)) {
            throw new Error("Expected the field `productTypeL2` to be a primitive type in the JSON string but got " + data['productTypeL2']);
        }
        // ensure the json data is a string
        if (data['productTypeL3'] && !(typeof data['productTypeL3'] === 'string' || data['productTypeL3'] instanceof String)) {
            throw new Error("Expected the field `productTypeL3` to be a primitive type in the JSON string but got " + data['productTypeL3']);
        }
        // ensure the json data is a string
        if (data['productTypeL4'] && !(typeof data['productTypeL4'] === 'string' || data['productTypeL4'] instanceof String)) {
            throw new Error("Expected the field `productTypeL4` to be a primitive type in the JSON string but got " + data['productTypeL4']);
        }
        // ensure the json data is a string
        if (data['productTypeL5'] && !(typeof data['productTypeL5'] === 'string' || data['productTypeL5'] instanceof String)) {
            throw new Error("Expected the field `productTypeL5` to be a primitive type in the JSON string but got " + data['productTypeL5']);
        }
        // ensure the json data is a string
        if (data['shippingLabel'] && !(typeof data['shippingLabel'] === 'string' || data['shippingLabel'] instanceof String)) {
            throw new Error("Expected the field `shippingLabel` to be a primitive type in the JSON string but got " + data['shippingLabel']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * Aggregated destination status.
 * @member {module:model/ProductView.AggregatedDestinationStatusEnum} aggregatedDestinationStatus
 */
ProductView.prototype['aggregatedDestinationStatus'] = undefined;

/**
 * Availability of the product.
 * @member {String} availability
 */
ProductView.prototype['availability'] = undefined;

/**
 * Brand of the product.
 * @member {String} brand
 */
ProductView.prototype['brand'] = undefined;

/**
 * First level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).
 * @member {String} categoryL1
 */
ProductView.prototype['categoryL1'] = undefined;

/**
 * Second level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).
 * @member {String} categoryL2
 */
ProductView.prototype['categoryL2'] = undefined;

/**
 * Third level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).
 * @member {String} categoryL3
 */
ProductView.prototype['categoryL3'] = undefined;

/**
 * Fourth level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).
 * @member {String} categoryL4
 */
ProductView.prototype['categoryL4'] = undefined;

/**
 * Fifth level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).
 * @member {String} categoryL5
 */
ProductView.prototype['categoryL5'] = undefined;

/**
 * Channel of the product (online versus local).
 * @member {module:model/ProductView.ChannelEnum} channel
 */
ProductView.prototype['channel'] = undefined;

/**
 * Condition of the product.
 * @member {String} condition
 */
ProductView.prototype['condition'] = undefined;

/**
 * The time the merchant created the product in timestamp seconds.
 * @member {String} creationTime
 */
ProductView.prototype['creationTime'] = undefined;

/**
 * Product price currency code (for example, ISO 4217). Absent if product price is not available.
 * @member {String} currencyCode
 */
ProductView.prototype['currencyCode'] = undefined;

/**
 * @member {module:model/ModelDate} expirationDate
 */
ProductView.prototype['expirationDate'] = undefined;

/**
 * GTIN of the product.
 * @member {Array.<String>} gtin
 */
ProductView.prototype['gtin'] = undefined;

/**
 * The REST ID of the product, in the form of channel:contentLanguage:targetCountry:offerId. Content API methods that operate on products take this as their productId parameter. Should always be included in the SELECT clause.
 * @member {String} id
 */
ProductView.prototype['id'] = undefined;

/**
 * Item group ID provided by the merchant for grouping variants together.
 * @member {String} itemGroupId
 */
ProductView.prototype['itemGroupId'] = undefined;

/**
 * List of item issues for the product.
 * @member {Array.<module:model/ProductViewItemIssue>} itemIssues
 */
ProductView.prototype['itemIssues'] = undefined;

/**
 * Language code of the product in BCP 47 format.
 * @member {String} languageCode
 */
ProductView.prototype['languageCode'] = undefined;

/**
 * Merchant-provided id of the product.
 * @member {String} offerId
 */
ProductView.prototype['offerId'] = undefined;

/**
 * Product price specified as micros (1 millionth of a standard unit, 1 USD = 1000000 micros) in the product currency. Absent in case the information about the price of the product is not available.
 * @member {String} priceMicros
 */
ProductView.prototype['priceMicros'] = undefined;

/**
 * First level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).
 * @member {String} productTypeL1
 */
ProductView.prototype['productTypeL1'] = undefined;

/**
 * Second level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).
 * @member {String} productTypeL2
 */
ProductView.prototype['productTypeL2'] = undefined;

/**
 * Third level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).
 * @member {String} productTypeL3
 */
ProductView.prototype['productTypeL3'] = undefined;

/**
 * Fourth level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).
 * @member {String} productTypeL4
 */
ProductView.prototype['productTypeL4'] = undefined;

/**
 * Fifth level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).
 * @member {String} productTypeL5
 */
ProductView.prototype['productTypeL5'] = undefined;

/**
 * The normalized shipping label specified in the feed
 * @member {String} shippingLabel
 */
ProductView.prototype['shippingLabel'] = undefined;

/**
 * Title of the product.
 * @member {String} title
 */
ProductView.prototype['title'] = undefined;





/**
 * Allowed values for the <code>aggregatedDestinationStatus</code> property.
 * @enum {String}
 * @readonly
 */
ProductView['AggregatedDestinationStatusEnum'] = {

    /**
     * value: "AGGREGATED_STATUS_UNSPECIFIED"
     * @const
     */
    "AGGREGATED_STATUS_UNSPECIFIED": "AGGREGATED_STATUS_UNSPECIFIED",

    /**
     * value: "NOT_ELIGIBLE_OR_DISAPPROVED"
     * @const
     */
    "NOT_ELIGIBLE_OR_DISAPPROVED": "NOT_ELIGIBLE_OR_DISAPPROVED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "ELIGIBLE_LIMITED"
     * @const
     */
    "ELIGIBLE_LIMITED": "ELIGIBLE_LIMITED",

    /**
     * value: "ELIGIBLE"
     * @const
     */
    "ELIGIBLE": "ELIGIBLE"
};


/**
 * Allowed values for the <code>channel</code> property.
 * @enum {String}
 * @readonly
 */
ProductView['ChannelEnum'] = {

    /**
     * value: "CHANNEL_UNSPECIFIED"
     * @const
     */
    "CHANNEL_UNSPECIFIED": "CHANNEL_UNSPECIFIED",

    /**
     * value: "LOCAL"
     * @const
     */
    "LOCAL": "LOCAL",

    /**
     * value: "ONLINE"
     * @const
     */
    "ONLINE": "ONLINE"
};



export default ProductView;

