/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Breakdown from './Breakdown';

/**
 * The ProductIssueImpact model module.
 * @module model/ProductIssueImpact
 * @version v2.1
 */
class ProductIssueImpact {
    /**
     * Constructs a new <code>ProductIssueImpact</code>.
     * Overall impact of product issue.
     * @alias module:model/ProductIssueImpact
     */
    constructor() { 
        
        ProductIssueImpact.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductIssueImpact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductIssueImpact} obj Optional instance to populate.
     * @return {module:model/ProductIssueImpact} The populated <code>ProductIssueImpact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductIssueImpact();

            if (data.hasOwnProperty('breakdowns')) {
                obj['breakdowns'] = ApiClient.convertToType(data['breakdowns'], [Breakdown]);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductIssueImpact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductIssueImpact</code>.
     */
    static validateJSON(data) {
        if (data['breakdowns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['breakdowns'])) {
                throw new Error("Expected the field `breakdowns` to be an array in the JSON data but got " + data['breakdowns']);
            }
            // validate the optional field `breakdowns` (array)
            for (const item of data['breakdowns']) {
                Breakdown.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }

        return true;
    }


}



/**
 * Detailed impact breakdown. Explains the types of restriction the issue has in different shopping destinations and territory. If present, it should be rendered to the merchant. Can be shown as a mouse over dropdown or a dialog. Each breakdown item represents a group of regions with the same impact details.
 * @member {Array.<module:model/Breakdown>} breakdowns
 */
ProductIssueImpact.prototype['breakdowns'] = undefined;

/**
 * Optional. Message summarizing the overall impact of the issue. If present, it should be rendered to the merchant. For example: \"Limits visibility in France\"
 * @member {String} message
 */
ProductIssueImpact.prototype['message'] = undefined;

/**
 * The severity of the issue.
 * @member {module:model/ProductIssueImpact.SeverityEnum} severity
 */
ProductIssueImpact.prototype['severity'] = undefined;





/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
ProductIssueImpact['SeverityEnum'] = {

    /**
     * value: "SEVERITY_UNSPECIFIED"
     * @const
     */
    "SEVERITY_UNSPECIFIED": "SEVERITY_UNSPECIFIED",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "WARNING"
     * @const
     */
    "WARNING": "WARNING",

    /**
     * value: "INFO"
     * @const
     */
    "INFO": "INFO"
};



export default ProductIssueImpact;

