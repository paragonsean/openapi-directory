/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Css model module.
 * @module model/Css
 * @version v2.1
 */
class Css {
    /**
     * Constructs a new <code>Css</code>.
     * Information about CSS domain.
     * @alias module:model/Css
     */
    constructor() { 
        
        Css.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Css</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Css} obj Optional instance to populate.
     * @return {module:model/Css} The populated <code>Css</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Css();

            if (data.hasOwnProperty('cssDomainId')) {
                obj['cssDomainId'] = ApiClient.convertToType(data['cssDomainId'], 'String');
            }
            if (data.hasOwnProperty('cssGroupId')) {
                obj['cssGroupId'] = ApiClient.convertToType(data['cssGroupId'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('fullName')) {
                obj['fullName'] = ApiClient.convertToType(data['fullName'], 'String');
            }
            if (data.hasOwnProperty('homepageUri')) {
                obj['homepageUri'] = ApiClient.convertToType(data['homepageUri'], 'String');
            }
            if (data.hasOwnProperty('labelIds')) {
                obj['labelIds'] = ApiClient.convertToType(data['labelIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Css</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Css</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cssDomainId'] && !(typeof data['cssDomainId'] === 'string' || data['cssDomainId'] instanceof String)) {
            throw new Error("Expected the field `cssDomainId` to be a primitive type in the JSON string but got " + data['cssDomainId']);
        }
        // ensure the json data is a string
        if (data['cssGroupId'] && !(typeof data['cssGroupId'] === 'string' || data['cssGroupId'] instanceof String)) {
            throw new Error("Expected the field `cssGroupId` to be a primitive type in the JSON string but got " + data['cssGroupId']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['fullName'] && !(typeof data['fullName'] === 'string' || data['fullName'] instanceof String)) {
            throw new Error("Expected the field `fullName` to be a primitive type in the JSON string but got " + data['fullName']);
        }
        // ensure the json data is a string
        if (data['homepageUri'] && !(typeof data['homepageUri'] === 'string' || data['homepageUri'] instanceof String)) {
            throw new Error("Expected the field `homepageUri` to be a primitive type in the JSON string but got " + data['homepageUri']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labelIds'])) {
            throw new Error("Expected the field `labelIds` to be an array in the JSON data but got " + data['labelIds']);
        }

        return true;
    }


}



/**
 * Output only. Immutable. The CSS domain ID.
 * @member {String} cssDomainId
 */
Css.prototype['cssDomainId'] = undefined;

/**
 * Output only. Immutable. The ID of the CSS group this CSS domain is affiliated with. Only populated for CSS group users.
 * @member {String} cssGroupId
 */
Css.prototype['cssGroupId'] = undefined;

/**
 * Output only. Immutable. The CSS domain's display name, used when space is constrained.
 * @member {String} displayName
 */
Css.prototype['displayName'] = undefined;

/**
 * Output only. Immutable. The CSS domain's full name.
 * @member {String} fullName
 */
Css.prototype['fullName'] = undefined;

/**
 * Output only. Immutable. The CSS domain's homepage.
 * @member {String} homepageUri
 */
Css.prototype['homepageUri'] = undefined;

/**
 * A list of label IDs that are assigned to this CSS domain by its CSS group. Only populated for CSS group users.
 * @member {Array.<String>} labelIds
 */
Css.prototype['labelIds'] = undefined;






export default Css;

