/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccountItemUpdatesSettings model module.
 * @module model/AccountItemUpdatesSettings
 * @version v2.1
 */
class AccountItemUpdatesSettings {
    /**
     * Constructs a new <code>AccountItemUpdatesSettings</code>.
     * Settings for the Automatic Item Updates.
     * @alias module:model/AccountItemUpdatesSettings
     */
    constructor() { 
        
        AccountItemUpdatesSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountItemUpdatesSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountItemUpdatesSettings} obj Optional instance to populate.
     * @return {module:model/AccountItemUpdatesSettings} The populated <code>AccountItemUpdatesSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountItemUpdatesSettings();

            if (data.hasOwnProperty('allowAvailabilityUpdates')) {
                obj['allowAvailabilityUpdates'] = ApiClient.convertToType(data['allowAvailabilityUpdates'], 'Boolean');
            }
            if (data.hasOwnProperty('allowConditionUpdates')) {
                obj['allowConditionUpdates'] = ApiClient.convertToType(data['allowConditionUpdates'], 'Boolean');
            }
            if (data.hasOwnProperty('allowPriceUpdates')) {
                obj['allowPriceUpdates'] = ApiClient.convertToType(data['allowPriceUpdates'], 'Boolean');
            }
            if (data.hasOwnProperty('allowStrictAvailabilityUpdates')) {
                obj['allowStrictAvailabilityUpdates'] = ApiClient.convertToType(data['allowStrictAvailabilityUpdates'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountItemUpdatesSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountItemUpdatesSettings</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * If availability updates are enabled, any previous availability values get overwritten if Google finds an out-of-stock annotation on the offer's page. If additionally `allow_availability_updates` field is set to true, values get overwritten if Google finds an in-stock annotation on the offerâ€™s page.
 * @member {Boolean} allowAvailabilityUpdates
 */
AccountItemUpdatesSettings.prototype['allowAvailabilityUpdates'] = undefined;

/**
 * If condition updates are enabled, Google always updates item condition with the condition detected from the details of your product.
 * @member {Boolean} allowConditionUpdates
 */
AccountItemUpdatesSettings.prototype['allowConditionUpdates'] = undefined;

/**
 * If price updates are enabled, Google always updates the active price with the crawled information.
 * @member {Boolean} allowPriceUpdates
 */
AccountItemUpdatesSettings.prototype['allowPriceUpdates'] = undefined;

/**
 * If allow_availability_updates is enabled, items are automatically updated in all your Shopping target countries. By default, availability updates will only be applied to items that are 'out of stock' on your website but 'in stock' on Shopping. Set this to true to also update items that are 'in stock' on your website, but 'out of stock' on Google Shopping. In order for this field to have an effect, you must also allow availability updates.
 * @member {Boolean} allowStrictAvailabilityUpdates
 */
AccountItemUpdatesSettings.prototype['allowStrictAvailabilityUpdates'] = undefined;






export default AccountItemUpdatesSettings;

