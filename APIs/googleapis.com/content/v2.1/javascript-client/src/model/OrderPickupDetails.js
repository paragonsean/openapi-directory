/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderAddress from './OrderAddress';
import OrderPickupDetailsCollector from './OrderPickupDetailsCollector';

/**
 * The OrderPickupDetails model module.
 * @module model/OrderPickupDetails
 * @version v2.1
 */
class OrderPickupDetails {
    /**
     * Constructs a new <code>OrderPickupDetails</code>.
     * @alias module:model/OrderPickupDetails
     */
    constructor() { 
        
        OrderPickupDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderPickupDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderPickupDetails} obj Optional instance to populate.
     * @return {module:model/OrderPickupDetails} The populated <code>OrderPickupDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderPickupDetails();

            if (data.hasOwnProperty('address')) {
                obj['address'] = OrderAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('collectors')) {
                obj['collectors'] = ApiClient.convertToType(data['collectors'], [OrderPickupDetailsCollector]);
            }
            if (data.hasOwnProperty('locationId')) {
                obj['locationId'] = ApiClient.convertToType(data['locationId'], 'String');
            }
            if (data.hasOwnProperty('pickupType')) {
                obj['pickupType'] = ApiClient.convertToType(data['pickupType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderPickupDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderPickupDetails</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          OrderAddress.validateJSON(data['address']);
        }
        if (data['collectors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['collectors'])) {
                throw new Error("Expected the field `collectors` to be an array in the JSON data but got " + data['collectors']);
            }
            // validate the optional field `collectors` (array)
            for (const item of data['collectors']) {
                OrderPickupDetailsCollector.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['locationId'] && !(typeof data['locationId'] === 'string' || data['locationId'] instanceof String)) {
            throw new Error("Expected the field `locationId` to be a primitive type in the JSON string but got " + data['locationId']);
        }
        // ensure the json data is a string
        if (data['pickupType'] && !(typeof data['pickupType'] === 'string' || data['pickupType'] instanceof String)) {
            throw new Error("Expected the field `pickupType` to be a primitive type in the JSON string but got " + data['pickupType']);
        }

        return true;
    }


}



/**
 * @member {module:model/OrderAddress} address
 */
OrderPickupDetails.prototype['address'] = undefined;

/**
 * Collectors authorized to pick up shipment from the pickup location.
 * @member {Array.<module:model/OrderPickupDetailsCollector>} collectors
 */
OrderPickupDetails.prototype['collectors'] = undefined;

/**
 * ID of the pickup location.
 * @member {String} locationId
 */
OrderPickupDetails.prototype['locationId'] = undefined;

/**
 * The pickup type of this order. Acceptable values are: - \"`merchantStore`\" - \"`merchantStoreCurbside`\" - \"`merchantStoreLocker`\" - \"`thirdPartyPickupPoint`\" - \"`thirdPartyLocker`\" 
 * @member {String} pickupType
 */
OrderPickupDetails.prototype['pickupType'] = undefined;






export default OrderPickupDetails;

