/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CloudExportAdditionalProperties model module.
 * @module model/CloudExportAdditionalProperties
 * @version v2.1
 */
class CloudExportAdditionalProperties {
    /**
     * Constructs a new <code>CloudExportAdditionalProperties</code>.
     * Product property for the Cloud Retail API. For example, properties for a TV product could be \&quot;Screen-Resolution\&quot; or \&quot;Screen-Size\&quot;.
     * @alias module:model/CloudExportAdditionalProperties
     */
    constructor() { 
        
        CloudExportAdditionalProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CloudExportAdditionalProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloudExportAdditionalProperties} obj Optional instance to populate.
     * @return {module:model/CloudExportAdditionalProperties} The populated <code>CloudExportAdditionalProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloudExportAdditionalProperties();

            if (data.hasOwnProperty('boolValue')) {
                obj['boolValue'] = ApiClient.convertToType(data['boolValue'], 'Boolean');
            }
            if (data.hasOwnProperty('floatValue')) {
                obj['floatValue'] = ApiClient.convertToType(data['floatValue'], ['Number']);
            }
            if (data.hasOwnProperty('intValue')) {
                obj['intValue'] = ApiClient.convertToType(data['intValue'], ['String']);
            }
            if (data.hasOwnProperty('maxValue')) {
                obj['maxValue'] = ApiClient.convertToType(data['maxValue'], 'Number');
            }
            if (data.hasOwnProperty('minValue')) {
                obj['minValue'] = ApiClient.convertToType(data['minValue'], 'Number');
            }
            if (data.hasOwnProperty('propertyName')) {
                obj['propertyName'] = ApiClient.convertToType(data['propertyName'], 'String');
            }
            if (data.hasOwnProperty('textValue')) {
                obj['textValue'] = ApiClient.convertToType(data['textValue'], ['String']);
            }
            if (data.hasOwnProperty('unitCode')) {
                obj['unitCode'] = ApiClient.convertToType(data['unitCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloudExportAdditionalProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloudExportAdditionalProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['floatValue'])) {
            throw new Error("Expected the field `floatValue` to be an array in the JSON data but got " + data['floatValue']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['intValue'])) {
            throw new Error("Expected the field `intValue` to be an array in the JSON data but got " + data['intValue']);
        }
        // ensure the json data is a string
        if (data['propertyName'] && !(typeof data['propertyName'] === 'string' || data['propertyName'] instanceof String)) {
            throw new Error("Expected the field `propertyName` to be a primitive type in the JSON string but got " + data['propertyName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['textValue'])) {
            throw new Error("Expected the field `textValue` to be an array in the JSON data but got " + data['textValue']);
        }
        // ensure the json data is a string
        if (data['unitCode'] && !(typeof data['unitCode'] === 'string' || data['unitCode'] instanceof String)) {
            throw new Error("Expected the field `unitCode` to be a primitive type in the JSON string but got " + data['unitCode']);
        }

        return true;
    }


}



/**
 * Boolean value of the given property. For example for a TV product, \"True\" or \"False\" if the screen is UHD.
 * @member {Boolean} boolValue
 */
CloudExportAdditionalProperties.prototype['boolValue'] = undefined;

/**
 * Float values of the given property. For example for a TV product 1.2345. Maximum number of specified values for this field is 400. Values are stored in an arbitrary but consistent order.
 * @member {Array.<Number>} floatValue
 */
CloudExportAdditionalProperties.prototype['floatValue'] = undefined;

/**
 * Integer values of the given property. For example, 1080 for a screen resolution of a TV product. Maximum number of specified values for this field is 400. Values are stored in an arbitrary but consistent order.
 * @member {Array.<String>} intValue
 */
CloudExportAdditionalProperties.prototype['intValue'] = undefined;

/**
 * Maximum float value of the given property. For example for a TV product 100.00.
 * @member {Number} maxValue
 */
CloudExportAdditionalProperties.prototype['maxValue'] = undefined;

/**
 * Minimum float value of the given property. For example for a TV product 1.00.
 * @member {Number} minValue
 */
CloudExportAdditionalProperties.prototype['minValue'] = undefined;

/**
 * Name of the given property. For example, \"Screen-Resolution\" for a TV product. Maximum string size is 256 characters.
 * @member {String} propertyName
 */
CloudExportAdditionalProperties.prototype['propertyName'] = undefined;

/**
 * Text value of the given property. For example, \"8K(UHD)\" could be a text value for a TV product. Maximum number of specified values for this field is 400. Values are stored in an arbitrary but consistent order. Maximum string size is 256 characters.
 * @member {Array.<String>} textValue
 */
CloudExportAdditionalProperties.prototype['textValue'] = undefined;

/**
 * Unit of the given property. For example, \"Pixels\" for a TV product. Maximum string size is 256 bytes.
 * @member {String} unitCode
 */
CloudExportAdditionalProperties.prototype['unitCode'] = undefined;






export default CloudExportAdditionalProperties;

