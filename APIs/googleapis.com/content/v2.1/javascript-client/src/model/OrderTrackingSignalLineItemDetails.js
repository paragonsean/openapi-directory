/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrderTrackingSignalLineItemDetails model module.
 * @module model/OrderTrackingSignalLineItemDetails
 * @version v2.1
 */
class OrderTrackingSignalLineItemDetails {
    /**
     * Constructs a new <code>OrderTrackingSignalLineItemDetails</code>.
     * The line items of the order.
     * @alias module:model/OrderTrackingSignalLineItemDetails
     */
    constructor() { 
        
        OrderTrackingSignalLineItemDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderTrackingSignalLineItemDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderTrackingSignalLineItemDetails} obj Optional instance to populate.
     * @return {module:model/OrderTrackingSignalLineItemDetails} The populated <code>OrderTrackingSignalLineItemDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderTrackingSignalLineItemDetails();

            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('gtin')) {
                obj['gtin'] = ApiClient.convertToType(data['gtin'], 'String');
            }
            if (data.hasOwnProperty('lineItemId')) {
                obj['lineItemId'] = ApiClient.convertToType(data['lineItemId'], 'String');
            }
            if (data.hasOwnProperty('mpn')) {
                obj['mpn'] = ApiClient.convertToType(data['mpn'], 'String');
            }
            if (data.hasOwnProperty('productDescription')) {
                obj['productDescription'] = ApiClient.convertToType(data['productDescription'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('productTitle')) {
                obj['productTitle'] = ApiClient.convertToType(data['productTitle'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('upc')) {
                obj['upc'] = ApiClient.convertToType(data['upc'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderTrackingSignalLineItemDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderTrackingSignalLineItemDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['gtin'] && !(typeof data['gtin'] === 'string' || data['gtin'] instanceof String)) {
            throw new Error("Expected the field `gtin` to be a primitive type in the JSON string but got " + data['gtin']);
        }
        // ensure the json data is a string
        if (data['lineItemId'] && !(typeof data['lineItemId'] === 'string' || data['lineItemId'] instanceof String)) {
            throw new Error("Expected the field `lineItemId` to be a primitive type in the JSON string but got " + data['lineItemId']);
        }
        // ensure the json data is a string
        if (data['mpn'] && !(typeof data['mpn'] === 'string' || data['mpn'] instanceof String)) {
            throw new Error("Expected the field `mpn` to be a primitive type in the JSON string but got " + data['mpn']);
        }
        // ensure the json data is a string
        if (data['productDescription'] && !(typeof data['productDescription'] === 'string' || data['productDescription'] instanceof String)) {
            throw new Error("Expected the field `productDescription` to be a primitive type in the JSON string but got " + data['productDescription']);
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }
        // ensure the json data is a string
        if (data['productTitle'] && !(typeof data['productTitle'] === 'string' || data['productTitle'] instanceof String)) {
            throw new Error("Expected the field `productTitle` to be a primitive type in the JSON string but got " + data['productTitle']);
        }
        // ensure the json data is a string
        if (data['quantity'] && !(typeof data['quantity'] === 'string' || data['quantity'] instanceof String)) {
            throw new Error("Expected the field `quantity` to be a primitive type in the JSON string but got " + data['quantity']);
        }
        // ensure the json data is a string
        if (data['sku'] && !(typeof data['sku'] === 'string' || data['sku'] instanceof String)) {
            throw new Error("Expected the field `sku` to be a primitive type in the JSON string but got " + data['sku']);
        }
        // ensure the json data is a string
        if (data['upc'] && !(typeof data['upc'] === 'string' || data['upc'] instanceof String)) {
            throw new Error("Expected the field `upc` to be a primitive type in the JSON string but got " + data['upc']);
        }

        return true;
    }


}



/**
 * Brand of the product.
 * @member {String} brand
 */
OrderTrackingSignalLineItemDetails.prototype['brand'] = undefined;

/**
 * The Global Trade Item Number.
 * @member {String} gtin
 */
OrderTrackingSignalLineItemDetails.prototype['gtin'] = undefined;

/**
 * Required. The ID for this line item.
 * @member {String} lineItemId
 */
OrderTrackingSignalLineItemDetails.prototype['lineItemId'] = undefined;

/**
 * The manufacturer part number.
 * @member {String} mpn
 */
OrderTrackingSignalLineItemDetails.prototype['mpn'] = undefined;

/**
 * Plain text description of this product (deprecated: Please use product_title instead).
 * @member {String} productDescription
 */
OrderTrackingSignalLineItemDetails.prototype['productDescription'] = undefined;

/**
 * Required. The Content API REST ID of the product, in the form channel:contentLanguage:targetCountry:offerId.
 * @member {String} productId
 */
OrderTrackingSignalLineItemDetails.prototype['productId'] = undefined;

/**
 * Plain text title of this product.
 * @member {String} productTitle
 */
OrderTrackingSignalLineItemDetails.prototype['productTitle'] = undefined;

/**
 * The quantity of the line item in the order.
 * @member {String} quantity
 */
OrderTrackingSignalLineItemDetails.prototype['quantity'] = undefined;

/**
 * Merchant SKU for this item (deprecated).
 * @member {String} sku
 */
OrderTrackingSignalLineItemDetails.prototype['sku'] = undefined;

/**
 * Universal product code for this item (deprecated: Please use GTIN instead).
 * @member {String} upc
 */
OrderTrackingSignalLineItemDetails.prototype['upc'] = undefined;






export default OrderTrackingSignalLineItemDetails;

