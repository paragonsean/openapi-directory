/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MonetaryAmount from './MonetaryAmount';

/**
 * The OrdersRefundOrderRequest model module.
 * @module model/OrdersRefundOrderRequest
 * @version v2.1
 */
class OrdersRefundOrderRequest {
    /**
     * Constructs a new <code>OrdersRefundOrderRequest</code>.
     * @alias module:model/OrdersRefundOrderRequest
     */
    constructor() { 
        
        OrdersRefundOrderRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrdersRefundOrderRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrdersRefundOrderRequest} obj Optional instance to populate.
     * @return {module:model/OrdersRefundOrderRequest} The populated <code>OrdersRefundOrderRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrdersRefundOrderRequest();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = MonetaryAmount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('fullRefund')) {
                obj['fullRefund'] = ApiClient.convertToType(data['fullRefund'], 'Boolean');
            }
            if (data.hasOwnProperty('operationId')) {
                obj['operationId'] = ApiClient.convertToType(data['operationId'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('reasonText')) {
                obj['reasonText'] = ApiClient.convertToType(data['reasonText'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrdersRefundOrderRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrdersRefundOrderRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          MonetaryAmount.validateJSON(data['amount']);
        }
        // ensure the json data is a string
        if (data['operationId'] && !(typeof data['operationId'] === 'string' || data['operationId'] instanceof String)) {
            throw new Error("Expected the field `operationId` to be a primitive type in the JSON string but got " + data['operationId']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['reasonText'] && !(typeof data['reasonText'] === 'string' || data['reasonText'] instanceof String)) {
            throw new Error("Expected the field `reasonText` to be a primitive type in the JSON string but got " + data['reasonText']);
        }

        return true;
    }


}



/**
 * @member {module:model/MonetaryAmount} amount
 */
OrdersRefundOrderRequest.prototype['amount'] = undefined;

/**
 * If true, the full order will be refunded, including shipping. If this is true, amount shouldn't be provided and will be ignored.
 * @member {Boolean} fullRefund
 */
OrdersRefundOrderRequest.prototype['fullRefund'] = undefined;

/**
 * The ID of the operation. Unique across all operations for a given order.
 * @member {String} operationId
 */
OrdersRefundOrderRequest.prototype['operationId'] = undefined;

/**
 * The reason for the refund. Acceptable values are: - \"`courtesyAdjustment`\" - \"`other`\" 
 * @member {String} reason
 */
OrdersRefundOrderRequest.prototype['reason'] = undefined;

/**
 * The explanation of the reason.
 * @member {String} reasonText
 */
OrdersRefundOrderRequest.prototype['reasonText'] = undefined;






export default OrdersRefundOrderRequest;

