/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Price from './Price';
import ProductAmount from './ProductAmount';

/**
 * The OrderReportTransaction model module.
 * @module model/OrderReportTransaction
 * @version v2.1
 */
class OrderReportTransaction {
    /**
     * Constructs a new <code>OrderReportTransaction</code>.
     * @alias module:model/OrderReportTransaction
     */
    constructor() { 
        
        OrderReportTransaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderReportTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderReportTransaction} obj Optional instance to populate.
     * @return {module:model/OrderReportTransaction} The populated <code>OrderReportTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderReportTransaction();

            if (data.hasOwnProperty('disbursementAmount')) {
                obj['disbursementAmount'] = Price.constructFromObject(data['disbursementAmount']);
            }
            if (data.hasOwnProperty('disbursementCreationDate')) {
                obj['disbursementCreationDate'] = ApiClient.convertToType(data['disbursementCreationDate'], 'String');
            }
            if (data.hasOwnProperty('disbursementDate')) {
                obj['disbursementDate'] = ApiClient.convertToType(data['disbursementDate'], 'String');
            }
            if (data.hasOwnProperty('disbursementId')) {
                obj['disbursementId'] = ApiClient.convertToType(data['disbursementId'], 'String');
            }
            if (data.hasOwnProperty('merchantId')) {
                obj['merchantId'] = ApiClient.convertToType(data['merchantId'], 'String');
            }
            if (data.hasOwnProperty('merchantOrderId')) {
                obj['merchantOrderId'] = ApiClient.convertToType(data['merchantOrderId'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('productAmount')) {
                obj['productAmount'] = ProductAmount.constructFromObject(data['productAmount']);
            }
            if (data.hasOwnProperty('transactionDate')) {
                obj['transactionDate'] = ApiClient.convertToType(data['transactionDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderReportTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderReportTransaction</code>.
     */
    static validateJSON(data) {
        // validate the optional field `disbursementAmount`
        if (data['disbursementAmount']) { // data not null
          Price.validateJSON(data['disbursementAmount']);
        }
        // ensure the json data is a string
        if (data['disbursementCreationDate'] && !(typeof data['disbursementCreationDate'] === 'string' || data['disbursementCreationDate'] instanceof String)) {
            throw new Error("Expected the field `disbursementCreationDate` to be a primitive type in the JSON string but got " + data['disbursementCreationDate']);
        }
        // ensure the json data is a string
        if (data['disbursementDate'] && !(typeof data['disbursementDate'] === 'string' || data['disbursementDate'] instanceof String)) {
            throw new Error("Expected the field `disbursementDate` to be a primitive type in the JSON string but got " + data['disbursementDate']);
        }
        // ensure the json data is a string
        if (data['disbursementId'] && !(typeof data['disbursementId'] === 'string' || data['disbursementId'] instanceof String)) {
            throw new Error("Expected the field `disbursementId` to be a primitive type in the JSON string but got " + data['disbursementId']);
        }
        // ensure the json data is a string
        if (data['merchantId'] && !(typeof data['merchantId'] === 'string' || data['merchantId'] instanceof String)) {
            throw new Error("Expected the field `merchantId` to be a primitive type in the JSON string but got " + data['merchantId']);
        }
        // ensure the json data is a string
        if (data['merchantOrderId'] && !(typeof data['merchantOrderId'] === 'string' || data['merchantOrderId'] instanceof String)) {
            throw new Error("Expected the field `merchantOrderId` to be a primitive type in the JSON string but got " + data['merchantOrderId']);
        }
        // ensure the json data is a string
        if (data['orderId'] && !(typeof data['orderId'] === 'string' || data['orderId'] instanceof String)) {
            throw new Error("Expected the field `orderId` to be a primitive type in the JSON string but got " + data['orderId']);
        }
        // validate the optional field `productAmount`
        if (data['productAmount']) { // data not null
          ProductAmount.validateJSON(data['productAmount']);
        }
        // ensure the json data is a string
        if (data['transactionDate'] && !(typeof data['transactionDate'] === 'string' || data['transactionDate'] instanceof String)) {
            throw new Error("Expected the field `transactionDate` to be a primitive type in the JSON string but got " + data['transactionDate']);
        }

        return true;
    }


}



/**
 * @member {module:model/Price} disbursementAmount
 */
OrderReportTransaction.prototype['disbursementAmount'] = undefined;

/**
 * The date the disbursement was created, in ISO 8601 format.
 * @member {String} disbursementCreationDate
 */
OrderReportTransaction.prototype['disbursementCreationDate'] = undefined;

/**
 * The date the disbursement was initiated, in ISO 8601 format.
 * @member {String} disbursementDate
 */
OrderReportTransaction.prototype['disbursementDate'] = undefined;

/**
 * The ID of the disbursement.
 * @member {String} disbursementId
 */
OrderReportTransaction.prototype['disbursementId'] = undefined;

/**
 * The ID of the managing account.
 * @member {String} merchantId
 */
OrderReportTransaction.prototype['merchantId'] = undefined;

/**
 * Merchant-provided ID of the order.
 * @member {String} merchantOrderId
 */
OrderReportTransaction.prototype['merchantOrderId'] = undefined;

/**
 * The ID of the order.
 * @member {String} orderId
 */
OrderReportTransaction.prototype['orderId'] = undefined;

/**
 * @member {module:model/ProductAmount} productAmount
 */
OrderReportTransaction.prototype['productAmount'] = undefined;

/**
 * The date of the transaction, in ISO 8601 format.
 * @member {String} transactionDate
 */
OrderReportTransaction.prototype['transactionDate'] = undefined;






export default OrderReportTransaction;

