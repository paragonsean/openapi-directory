/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DatafeedStatusError from './DatafeedStatusError';

/**
 * The DatafeedStatus model module.
 * @module model/DatafeedStatus
 * @version v2.1
 */
class DatafeedStatus {
    /**
     * Constructs a new <code>DatafeedStatus</code>.
     * The status of a datafeed, that is, the result of the last retrieval of the datafeed computed asynchronously when the feed processing is finished.
     * @alias module:model/DatafeedStatus
     */
    constructor() { 
        
        DatafeedStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatafeedStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatafeedStatus} obj Optional instance to populate.
     * @return {module:model/DatafeedStatus} The populated <code>DatafeedStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatafeedStatus();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('datafeedId')) {
                obj['datafeedId'] = ApiClient.convertToType(data['datafeedId'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [DatafeedStatusError]);
            }
            if (data.hasOwnProperty('feedLabel')) {
                obj['feedLabel'] = ApiClient.convertToType(data['feedLabel'], 'String');
            }
            if (data.hasOwnProperty('itemsTotal')) {
                obj['itemsTotal'] = ApiClient.convertToType(data['itemsTotal'], 'String');
            }
            if (data.hasOwnProperty('itemsValid')) {
                obj['itemsValid'] = ApiClient.convertToType(data['itemsValid'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('lastUploadDate')) {
                obj['lastUploadDate'] = ApiClient.convertToType(data['lastUploadDate'], 'String');
            }
            if (data.hasOwnProperty('processingStatus')) {
                obj['processingStatus'] = ApiClient.convertToType(data['processingStatus'], 'String');
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], [DatafeedStatusError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatafeedStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatafeedStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['datafeedId'] && !(typeof data['datafeedId'] === 'string' || data['datafeedId'] instanceof String)) {
            throw new Error("Expected the field `datafeedId` to be a primitive type in the JSON string but got " + data['datafeedId']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                DatafeedStatusError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['feedLabel'] && !(typeof data['feedLabel'] === 'string' || data['feedLabel'] instanceof String)) {
            throw new Error("Expected the field `feedLabel` to be a primitive type in the JSON string but got " + data['feedLabel']);
        }
        // ensure the json data is a string
        if (data['itemsTotal'] && !(typeof data['itemsTotal'] === 'string' || data['itemsTotal'] instanceof String)) {
            throw new Error("Expected the field `itemsTotal` to be a primitive type in the JSON string but got " + data['itemsTotal']);
        }
        // ensure the json data is a string
        if (data['itemsValid'] && !(typeof data['itemsValid'] === 'string' || data['itemsValid'] instanceof String)) {
            throw new Error("Expected the field `itemsValid` to be a primitive type in the JSON string but got " + data['itemsValid']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['lastUploadDate'] && !(typeof data['lastUploadDate'] === 'string' || data['lastUploadDate'] instanceof String)) {
            throw new Error("Expected the field `lastUploadDate` to be a primitive type in the JSON string but got " + data['lastUploadDate']);
        }
        // ensure the json data is a string
        if (data['processingStatus'] && !(typeof data['processingStatus'] === 'string' || data['processingStatus'] instanceof String)) {
            throw new Error("Expected the field `processingStatus` to be a primitive type in the JSON string but got " + data['processingStatus']);
        }
        if (data['warnings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['warnings'])) {
                throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
            }
            // validate the optional field `warnings` (array)
            for (const item of data['warnings']) {
                DatafeedStatusError.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The country for which the status is reported, represented as a CLDR territory code.
 * @member {String} country
 */
DatafeedStatus.prototype['country'] = undefined;

/**
 * The ID of the feed for which the status is reported.
 * @member {String} datafeedId
 */
DatafeedStatus.prototype['datafeedId'] = undefined;

/**
 * The list of errors occurring in the feed.
 * @member {Array.<module:model/DatafeedStatusError>} errors
 */
DatafeedStatus.prototype['errors'] = undefined;

/**
 * The feed label status is reported for.
 * @member {String} feedLabel
 */
DatafeedStatus.prototype['feedLabel'] = undefined;

/**
 * The number of items in the feed that were processed.
 * @member {String} itemsTotal
 */
DatafeedStatus.prototype['itemsTotal'] = undefined;

/**
 * The number of items in the feed that were valid.
 * @member {String} itemsValid
 */
DatafeedStatus.prototype['itemsValid'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"`content#datafeedStatus`\"
 * @member {String} kind
 */
DatafeedStatus.prototype['kind'] = undefined;

/**
 * The two-letter ISO 639-1 language for which the status is reported.
 * @member {String} language
 */
DatafeedStatus.prototype['language'] = undefined;

/**
 * The last date at which the feed was uploaded.
 * @member {String} lastUploadDate
 */
DatafeedStatus.prototype['lastUploadDate'] = undefined;

/**
 * The processing status of the feed. Acceptable values are: - \"`\"`failure`\": The feed could not be processed or all items had errors.`\" - \"`in progress`\": The feed is being processed. - \"`none`\": The feed has not yet been processed. For example, a feed that has never been uploaded will have this processing status. - \"`success`\": The feed was processed successfully, though some items might have had errors. 
 * @member {String} processingStatus
 */
DatafeedStatus.prototype['processingStatus'] = undefined;

/**
 * The list of errors occurring in the feed.
 * @member {Array.<module:model/DatafeedStatusError>} warnings
 */
DatafeedStatus.prototype['warnings'] = undefined;






export default DatafeedStatus;

