/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelDate from './ModelDate';

/**
 * The BestSellers model module.
 * @module model/BestSellers
 * @version v2.1
 */
class BestSellers {
    /**
     * Constructs a new <code>BestSellers</code>.
     * Fields related to the [Best sellers reports](https://support.google.com/merchants/answer/9488679).
     * @alias module:model/BestSellers
     */
    constructor() { 
        
        BestSellers.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BestSellers</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BestSellers} obj Optional instance to populate.
     * @return {module:model/BestSellers} The populated <code>BestSellers</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BestSellers();

            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('previousRank')) {
                obj['previousRank'] = ApiClient.convertToType(data['previousRank'], 'String');
            }
            if (data.hasOwnProperty('previousRelativeDemand')) {
                obj['previousRelativeDemand'] = ApiClient.convertToType(data['previousRelativeDemand'], 'String');
            }
            if (data.hasOwnProperty('rank')) {
                obj['rank'] = ApiClient.convertToType(data['rank'], 'String');
            }
            if (data.hasOwnProperty('relativeDemand')) {
                obj['relativeDemand'] = ApiClient.convertToType(data['relativeDemand'], 'String');
            }
            if (data.hasOwnProperty('relativeDemandChange')) {
                obj['relativeDemandChange'] = ApiClient.convertToType(data['relativeDemandChange'], 'String');
            }
            if (data.hasOwnProperty('reportDate')) {
                obj['reportDate'] = ModelDate.constructFromObject(data['reportDate']);
            }
            if (data.hasOwnProperty('reportGranularity')) {
                obj['reportGranularity'] = ApiClient.convertToType(data['reportGranularity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BestSellers</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BestSellers</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['categoryId'] && !(typeof data['categoryId'] === 'string' || data['categoryId'] instanceof String)) {
            throw new Error("Expected the field `categoryId` to be a primitive type in the JSON string but got " + data['categoryId']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['previousRank'] && !(typeof data['previousRank'] === 'string' || data['previousRank'] instanceof String)) {
            throw new Error("Expected the field `previousRank` to be a primitive type in the JSON string but got " + data['previousRank']);
        }
        // ensure the json data is a string
        if (data['previousRelativeDemand'] && !(typeof data['previousRelativeDemand'] === 'string' || data['previousRelativeDemand'] instanceof String)) {
            throw new Error("Expected the field `previousRelativeDemand` to be a primitive type in the JSON string but got " + data['previousRelativeDemand']);
        }
        // ensure the json data is a string
        if (data['rank'] && !(typeof data['rank'] === 'string' || data['rank'] instanceof String)) {
            throw new Error("Expected the field `rank` to be a primitive type in the JSON string but got " + data['rank']);
        }
        // ensure the json data is a string
        if (data['relativeDemand'] && !(typeof data['relativeDemand'] === 'string' || data['relativeDemand'] instanceof String)) {
            throw new Error("Expected the field `relativeDemand` to be a primitive type in the JSON string but got " + data['relativeDemand']);
        }
        // ensure the json data is a string
        if (data['relativeDemandChange'] && !(typeof data['relativeDemandChange'] === 'string' || data['relativeDemandChange'] instanceof String)) {
            throw new Error("Expected the field `relativeDemandChange` to be a primitive type in the JSON string but got " + data['relativeDemandChange']);
        }
        // validate the optional field `reportDate`
        if (data['reportDate']) { // data not null
          ModelDate.validateJSON(data['reportDate']);
        }
        // ensure the json data is a string
        if (data['reportGranularity'] && !(typeof data['reportGranularity'] === 'string' || data['reportGranularity'] instanceof String)) {
            throw new Error("Expected the field `reportGranularity` to be a primitive type in the JSON string but got " + data['reportGranularity']);
        }

        return true;
    }


}



/**
 * Google product category ID to calculate the ranking for, represented in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436). If a `WHERE` condition on `best_sellers.category_id` is not specified in the query, rankings for all top-level categories are returned.
 * @member {String} categoryId
 */
BestSellers.prototype['categoryId'] = undefined;

/**
 * Country where the ranking is calculated. A `WHERE` condition on `best_sellers.country_code` is required in the query.
 * @member {String} countryCode
 */
BestSellers.prototype['countryCode'] = undefined;

/**
 * Popularity rank in the previous week or month.
 * @member {String} previousRank
 */
BestSellers.prototype['previousRank'] = undefined;

/**
 * Estimated demand in relation to the item with the highest popularity rank in the same category and country in the previous week or month.
 * @member {module:model/BestSellers.PreviousRelativeDemandEnum} previousRelativeDemand
 */
BestSellers.prototype['previousRelativeDemand'] = undefined;

/**
 * Popularity on Shopping ads and free listings, in the selected category and country, based on the estimated number of units sold.
 * @member {String} rank
 */
BestSellers.prototype['rank'] = undefined;

/**
 * Estimated demand in relation to the item with the highest popularity rank in the same category and country.
 * @member {module:model/BestSellers.RelativeDemandEnum} relativeDemand
 */
BestSellers.prototype['relativeDemand'] = undefined;

/**
 * Change in the estimated demand. Whether it rose, sank or remained flat.
 * @member {module:model/BestSellers.RelativeDemandChangeEnum} relativeDemandChange
 */
BestSellers.prototype['relativeDemandChange'] = undefined;

/**
 * @member {module:model/ModelDate} reportDate
 */
BestSellers.prototype['reportDate'] = undefined;

/**
 * Granularity of the report. The ranking can be done over a week or a month timeframe. A `WHERE` condition on `best_sellers.report_granularity` is required in the query.
 * @member {module:model/BestSellers.ReportGranularityEnum} reportGranularity
 */
BestSellers.prototype['reportGranularity'] = undefined;





/**
 * Allowed values for the <code>previousRelativeDemand</code> property.
 * @enum {String}
 * @readonly
 */
BestSellers['PreviousRelativeDemandEnum'] = {

    /**
     * value: "RELATIVE_DEMAND_UNSPECIFIED"
     * @const
     */
    "RELATIVE_DEMAND_UNSPECIFIED": "RELATIVE_DEMAND_UNSPECIFIED",

    /**
     * value: "VERY_LOW"
     * @const
     */
    "VERY_LOW": "VERY_LOW",

    /**
     * value: "LOW"
     * @const
     */
    "LOW": "LOW",

    /**
     * value: "MEDIUM"
     * @const
     */
    "MEDIUM": "MEDIUM",

    /**
     * value: "HIGH"
     * @const
     */
    "HIGH": "HIGH",

    /**
     * value: "VERY_HIGH"
     * @const
     */
    "VERY_HIGH": "VERY_HIGH"
};


/**
 * Allowed values for the <code>relativeDemand</code> property.
 * @enum {String}
 * @readonly
 */
BestSellers['RelativeDemandEnum'] = {

    /**
     * value: "RELATIVE_DEMAND_UNSPECIFIED"
     * @const
     */
    "RELATIVE_DEMAND_UNSPECIFIED": "RELATIVE_DEMAND_UNSPECIFIED",

    /**
     * value: "VERY_LOW"
     * @const
     */
    "VERY_LOW": "VERY_LOW",

    /**
     * value: "LOW"
     * @const
     */
    "LOW": "LOW",

    /**
     * value: "MEDIUM"
     * @const
     */
    "MEDIUM": "MEDIUM",

    /**
     * value: "HIGH"
     * @const
     */
    "HIGH": "HIGH",

    /**
     * value: "VERY_HIGH"
     * @const
     */
    "VERY_HIGH": "VERY_HIGH"
};


/**
 * Allowed values for the <code>relativeDemandChange</code> property.
 * @enum {String}
 * @readonly
 */
BestSellers['RelativeDemandChangeEnum'] = {

    /**
     * value: "RELATIVE_DEMAND_CHANGE_TYPE_UNSPECIFIED"
     * @const
     */
    "RELATIVE_DEMAND_CHANGE_TYPE_UNSPECIFIED": "RELATIVE_DEMAND_CHANGE_TYPE_UNSPECIFIED",

    /**
     * value: "SINKER"
     * @const
     */
    "SINKER": "SINKER",

    /**
     * value: "FLAT"
     * @const
     */
    "FLAT": "FLAT",

    /**
     * value: "RISER"
     * @const
     */
    "RISER": "RISER"
};


/**
 * Allowed values for the <code>reportGranularity</code> property.
 * @enum {String}
 * @readonly
 */
BestSellers['ReportGranularityEnum'] = {

    /**
     * value: "REPORT_GRANULARITY_UNSPECIFIED"
     * @const
     */
    "REPORT_GRANULARITY_UNSPECIFIED": "REPORT_GRANULARITY_UNSPECIFIED",

    /**
     * value: "WEEKLY"
     * @const
     */
    "WEEKLY": "WEEKLY",

    /**
     * value: "MONTHLY"
     * @const
     */
    "MONTHLY": "MONTHLY"
};



export default BestSellers;

