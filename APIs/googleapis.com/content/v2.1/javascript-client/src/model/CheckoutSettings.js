/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UrlSettings from './UrlSettings';

/**
 * The CheckoutSettings model module.
 * @module model/CheckoutSettings
 * @version v2.1
 */
class CheckoutSettings {
    /**
     * Constructs a new <code>CheckoutSettings</code>.
     * &#x60;CheckoutSettings&#x60; for a specific merchant ID.
     * @alias module:model/CheckoutSettings
     */
    constructor() { 
        
        CheckoutSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CheckoutSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckoutSettings} obj Optional instance to populate.
     * @return {module:model/CheckoutSettings} The populated <code>CheckoutSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckoutSettings();

            if (data.hasOwnProperty('effectiveEnrollmentState')) {
                obj['effectiveEnrollmentState'] = ApiClient.convertToType(data['effectiveEnrollmentState'], 'String');
            }
            if (data.hasOwnProperty('effectiveReviewState')) {
                obj['effectiveReviewState'] = ApiClient.convertToType(data['effectiveReviewState'], 'String');
            }
            if (data.hasOwnProperty('effectiveUriSettings')) {
                obj['effectiveUriSettings'] = UrlSettings.constructFromObject(data['effectiveUriSettings']);
            }
            if (data.hasOwnProperty('enrollmentState')) {
                obj['enrollmentState'] = ApiClient.convertToType(data['enrollmentState'], 'String');
            }
            if (data.hasOwnProperty('merchantId')) {
                obj['merchantId'] = ApiClient.convertToType(data['merchantId'], 'String');
            }
            if (data.hasOwnProperty('reviewState')) {
                obj['reviewState'] = ApiClient.convertToType(data['reviewState'], 'String');
            }
            if (data.hasOwnProperty('uriSettings')) {
                obj['uriSettings'] = UrlSettings.constructFromObject(data['uriSettings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckoutSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckoutSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['effectiveEnrollmentState'] && !(typeof data['effectiveEnrollmentState'] === 'string' || data['effectiveEnrollmentState'] instanceof String)) {
            throw new Error("Expected the field `effectiveEnrollmentState` to be a primitive type in the JSON string but got " + data['effectiveEnrollmentState']);
        }
        // ensure the json data is a string
        if (data['effectiveReviewState'] && !(typeof data['effectiveReviewState'] === 'string' || data['effectiveReviewState'] instanceof String)) {
            throw new Error("Expected the field `effectiveReviewState` to be a primitive type in the JSON string but got " + data['effectiveReviewState']);
        }
        // validate the optional field `effectiveUriSettings`
        if (data['effectiveUriSettings']) { // data not null
          UrlSettings.validateJSON(data['effectiveUriSettings']);
        }
        // ensure the json data is a string
        if (data['enrollmentState'] && !(typeof data['enrollmentState'] === 'string' || data['enrollmentState'] instanceof String)) {
            throw new Error("Expected the field `enrollmentState` to be a primitive type in the JSON string but got " + data['enrollmentState']);
        }
        // ensure the json data is a string
        if (data['merchantId'] && !(typeof data['merchantId'] === 'string' || data['merchantId'] instanceof String)) {
            throw new Error("Expected the field `merchantId` to be a primitive type in the JSON string but got " + data['merchantId']);
        }
        // ensure the json data is a string
        if (data['reviewState'] && !(typeof data['reviewState'] === 'string' || data['reviewState'] instanceof String)) {
            throw new Error("Expected the field `reviewState` to be a primitive type in the JSON string but got " + data['reviewState']);
        }
        // validate the optional field `uriSettings`
        if (data['uriSettings']) { // data not null
          UrlSettings.validateJSON(data['uriSettings']);
        }

        return true;
    }


}



/**
 * Output only. The effective value of enrollment state for a given merchant ID. If account level settings are present then this value will be a copy of the account level settings. Otherwise, it will have the value of the parent account.
 * @member {module:model/CheckoutSettings.EffectiveEnrollmentStateEnum} effectiveEnrollmentState
 */
CheckoutSettings.prototype['effectiveEnrollmentState'] = undefined;

/**
 * Output only. The effective value of review state for a given merchant ID. If account level settings are present then this value will be a copy of the account level settings. Otherwise, it will have the value of the parent account.
 * @member {module:model/CheckoutSettings.EffectiveReviewStateEnum} effectiveReviewState
 */
CheckoutSettings.prototype['effectiveReviewState'] = undefined;

/**
 * @member {module:model/UrlSettings} effectiveUriSettings
 */
CheckoutSettings.prototype['effectiveUriSettings'] = undefined;

/**
 * Output only. Reflects the merchant enrollment state in `Checkout` feature.
 * @member {module:model/CheckoutSettings.EnrollmentStateEnum} enrollmentState
 */
CheckoutSettings.prototype['enrollmentState'] = undefined;

/**
 * Required. The ID of the account.
 * @member {String} merchantId
 */
CheckoutSettings.prototype['merchantId'] = undefined;

/**
 * Output only. Reflects the merchant review state in `Checkout` feature. This is set based on the data quality reviews of the URL provided by the merchant. A merchant with enrollment state as `ENROLLED` can be in the following review states: `IN_REVIEW`, `APPROVED` or `DISAPPROVED`. A merchant must be in an enrollment_state of `ENROLLED` before a review can begin for the merchant.
 * @member {module:model/CheckoutSettings.ReviewStateEnum} reviewState
 */
CheckoutSettings.prototype['reviewState'] = undefined;

/**
 * @member {module:model/UrlSettings} uriSettings
 */
CheckoutSettings.prototype['uriSettings'] = undefined;





/**
 * Allowed values for the <code>effectiveEnrollmentState</code> property.
 * @enum {String}
 * @readonly
 */
CheckoutSettings['EffectiveEnrollmentStateEnum'] = {

    /**
     * value: "CHECKOUT_ON_MERCHANT_ENROLLMENT_STATE_UNSPECIFIED"
     * @const
     */
    "CHECKOUT_ON_MERCHANT_ENROLLMENT_STATE_UNSPECIFIED": "CHECKOUT_ON_MERCHANT_ENROLLMENT_STATE_UNSPECIFIED",

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE",

    /**
     * value: "ENROLLED"
     * @const
     */
    "ENROLLED": "ENROLLED",

    /**
     * value: "OPT_OUT"
     * @const
     */
    "OPT_OUT": "OPT_OUT"
};


/**
 * Allowed values for the <code>effectiveReviewState</code> property.
 * @enum {String}
 * @readonly
 */
CheckoutSettings['EffectiveReviewStateEnum'] = {

    /**
     * value: "CHECKOUT_ON_MERCHANT_REVIEW_STATE_UNSPECIFIED"
     * @const
     */
    "CHECKOUT_ON_MERCHANT_REVIEW_STATE_UNSPECIFIED": "CHECKOUT_ON_MERCHANT_REVIEW_STATE_UNSPECIFIED",

    /**
     * value: "IN_REVIEW"
     * @const
     */
    "IN_REVIEW": "IN_REVIEW",

    /**
     * value: "APPROVED"
     * @const
     */
    "APPROVED": "APPROVED",

    /**
     * value: "DISAPPROVED"
     * @const
     */
    "DISAPPROVED": "DISAPPROVED"
};


/**
 * Allowed values for the <code>enrollmentState</code> property.
 * @enum {String}
 * @readonly
 */
CheckoutSettings['EnrollmentStateEnum'] = {

    /**
     * value: "CHECKOUT_ON_MERCHANT_ENROLLMENT_STATE_UNSPECIFIED"
     * @const
     */
    "CHECKOUT_ON_MERCHANT_ENROLLMENT_STATE_UNSPECIFIED": "CHECKOUT_ON_MERCHANT_ENROLLMENT_STATE_UNSPECIFIED",

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE",

    /**
     * value: "ENROLLED"
     * @const
     */
    "ENROLLED": "ENROLLED",

    /**
     * value: "OPT_OUT"
     * @const
     */
    "OPT_OUT": "OPT_OUT"
};


/**
 * Allowed values for the <code>reviewState</code> property.
 * @enum {String}
 * @readonly
 */
CheckoutSettings['ReviewStateEnum'] = {

    /**
     * value: "CHECKOUT_ON_MERCHANT_REVIEW_STATE_UNSPECIFIED"
     * @const
     */
    "CHECKOUT_ON_MERCHANT_REVIEW_STATE_UNSPECIFIED": "CHECKOUT_ON_MERCHANT_REVIEW_STATE_UNSPECIFIED",

    /**
     * value: "IN_REVIEW"
     * @const
     */
    "IN_REVIEW": "IN_REVIEW",

    /**
     * value: "APPROVED"
     * @const
     */
    "APPROVED": "APPROVED",

    /**
     * value: "DISAPPROVED"
     * @const
     */
    "DISAPPROVED": "DISAPPROVED"
};



export default CheckoutSettings;

