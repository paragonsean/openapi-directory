/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributionSettings from './AttributionSettings';

/**
 * The MerchantCenterDestination model module.
 * @module model/MerchantCenterDestination
 * @version v2.1
 */
class MerchantCenterDestination {
    /**
     * Constructs a new <code>MerchantCenterDestination</code>.
     * \&quot;Merchant Center Destination\&quot; sources can be used to send conversion events from a website using a Google tag directly to a Merchant Center account where the source is created.
     * @alias module:model/MerchantCenterDestination
     */
    constructor() { 
        
        MerchantCenterDestination.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MerchantCenterDestination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MerchantCenterDestination} obj Optional instance to populate.
     * @return {module:model/MerchantCenterDestination} The populated <code>MerchantCenterDestination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MerchantCenterDestination();

            if (data.hasOwnProperty('attributionSettings')) {
                obj['attributionSettings'] = AttributionSettings.constructFromObject(data['attributionSettings']);
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('destinationId')) {
                obj['destinationId'] = ApiClient.convertToType(data['destinationId'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MerchantCenterDestination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MerchantCenterDestination</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attributionSettings`
        if (data['attributionSettings']) { // data not null
          AttributionSettings.validateJSON(data['attributionSettings']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['destinationId'] && !(typeof data['destinationId'] === 'string' || data['destinationId'] instanceof String)) {
            throw new Error("Expected the field `destinationId` to be a primitive type in the JSON string but got " + data['destinationId']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }

        return true;
    }


}



/**
 * @member {module:model/AttributionSettings} attributionSettings
 */
MerchantCenterDestination.prototype['attributionSettings'] = undefined;

/**
 * Required. Three-letter currency code (ISO 4217). The currency code defines in which currency the conversions sent to this destination will be reported in Merchant Center.
 * @member {String} currencyCode
 */
MerchantCenterDestination.prototype['currencyCode'] = undefined;

/**
 * Output only. Merchant Center Destination ID.
 * @member {String} destinationId
 */
MerchantCenterDestination.prototype['destinationId'] = undefined;

/**
 * Required. Merchant-specified display name for the destination. This is the name that identifies the conversion source within the Merchant Center UI. Limited to 64 characters.
 * @member {String} displayName
 */
MerchantCenterDestination.prototype['displayName'] = undefined;






export default MerchantCenterDestination;

