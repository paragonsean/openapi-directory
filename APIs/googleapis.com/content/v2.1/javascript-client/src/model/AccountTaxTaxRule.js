/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccountTaxTaxRule model module.
 * @module model/AccountTaxTaxRule
 * @version v2.1
 */
class AccountTaxTaxRule {
    /**
     * Constructs a new <code>AccountTaxTaxRule</code>.
     * Tax calculation rule to apply in a state or province (US only).
     * @alias module:model/AccountTaxTaxRule
     */
    constructor() { 
        
        AccountTaxTaxRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountTaxTaxRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountTaxTaxRule} obj Optional instance to populate.
     * @return {module:model/AccountTaxTaxRule} The populated <code>AccountTaxTaxRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountTaxTaxRule();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('locationId')) {
                obj['locationId'] = ApiClient.convertToType(data['locationId'], 'String');
            }
            if (data.hasOwnProperty('ratePercent')) {
                obj['ratePercent'] = ApiClient.convertToType(data['ratePercent'], 'String');
            }
            if (data.hasOwnProperty('shippingTaxed')) {
                obj['shippingTaxed'] = ApiClient.convertToType(data['shippingTaxed'], 'Boolean');
            }
            if (data.hasOwnProperty('useGlobalRate')) {
                obj['useGlobalRate'] = ApiClient.convertToType(data['useGlobalRate'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountTaxTaxRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountTaxTaxRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['locationId'] && !(typeof data['locationId'] === 'string' || data['locationId'] instanceof String)) {
            throw new Error("Expected the field `locationId` to be a primitive type in the JSON string but got " + data['locationId']);
        }
        // ensure the json data is a string
        if (data['ratePercent'] && !(typeof data['ratePercent'] === 'string' || data['ratePercent'] instanceof String)) {
            throw new Error("Expected the field `ratePercent` to be a primitive type in the JSON string but got " + data['ratePercent']);
        }

        return true;
    }


}



/**
 * Country code in which tax is applicable.
 * @member {String} country
 */
AccountTaxTaxRule.prototype['country'] = undefined;

/**
 * Required. State (or province) is which the tax is applicable, described by its location ID (also called criteria ID).
 * @member {String} locationId
 */
AccountTaxTaxRule.prototype['locationId'] = undefined;

/**
 * Explicit tax rate in percent, represented as a floating point number without the percentage character. Must not be negative.
 * @member {String} ratePercent
 */
AccountTaxTaxRule.prototype['ratePercent'] = undefined;

/**
 * If true, shipping charges are also taxed.
 * @member {Boolean} shippingTaxed
 */
AccountTaxTaxRule.prototype['shippingTaxed'] = undefined;

/**
 * Whether the tax rate is taken from a global tax table or specified explicitly.
 * @member {Boolean} useGlobalRate
 */
AccountTaxTaxRule.prototype['useGlobalRate'] = undefined;






export default AccountTaxTaxRule;

