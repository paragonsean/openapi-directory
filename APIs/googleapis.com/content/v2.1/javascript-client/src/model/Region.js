/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RegionGeoTargetArea from './RegionGeoTargetArea';
import RegionPostalCodeArea from './RegionPostalCodeArea';

/**
 * The Region model module.
 * @module model/Region
 * @version v2.1
 */
class Region {
    /**
     * Constructs a new <code>Region</code>.
     * Represents a geographic region that you can use as a target with both the &#x60;RegionalInventory&#x60; and &#x60;ShippingSettings&#x60; services. You can define regions as collections of either postal codes or, in some countries, using predefined geotargets.
     * @alias module:model/Region
     */
    constructor() { 
        
        Region.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Region</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Region} obj Optional instance to populate.
     * @return {module:model/Region} The populated <code>Region</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Region();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('geotargetArea')) {
                obj['geotargetArea'] = RegionGeoTargetArea.constructFromObject(data['geotargetArea']);
            }
            if (data.hasOwnProperty('merchantId')) {
                obj['merchantId'] = ApiClient.convertToType(data['merchantId'], 'String');
            }
            if (data.hasOwnProperty('postalCodeArea')) {
                obj['postalCodeArea'] = RegionPostalCodeArea.constructFromObject(data['postalCodeArea']);
            }
            if (data.hasOwnProperty('regionId')) {
                obj['regionId'] = ApiClient.convertToType(data['regionId'], 'String');
            }
            if (data.hasOwnProperty('regionalInventoryEligible')) {
                obj['regionalInventoryEligible'] = ApiClient.convertToType(data['regionalInventoryEligible'], 'Boolean');
            }
            if (data.hasOwnProperty('shippingEligible')) {
                obj['shippingEligible'] = ApiClient.convertToType(data['shippingEligible'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Region</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Region</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `geotargetArea`
        if (data['geotargetArea']) { // data not null
          RegionGeoTargetArea.validateJSON(data['geotargetArea']);
        }
        // ensure the json data is a string
        if (data['merchantId'] && !(typeof data['merchantId'] === 'string' || data['merchantId'] instanceof String)) {
            throw new Error("Expected the field `merchantId` to be a primitive type in the JSON string but got " + data['merchantId']);
        }
        // validate the optional field `postalCodeArea`
        if (data['postalCodeArea']) { // data not null
          RegionPostalCodeArea.validateJSON(data['postalCodeArea']);
        }
        // ensure the json data is a string
        if (data['regionId'] && !(typeof data['regionId'] === 'string' || data['regionId'] instanceof String)) {
            throw new Error("Expected the field `regionId` to be a primitive type in the JSON string but got " + data['regionId']);
        }

        return true;
    }


}



/**
 * The display name of the region.
 * @member {String} displayName
 */
Region.prototype['displayName'] = undefined;

/**
 * @member {module:model/RegionGeoTargetArea} geotargetArea
 */
Region.prototype['geotargetArea'] = undefined;

/**
 * Output only. Immutable. Merchant that owns the region.
 * @member {String} merchantId
 */
Region.prototype['merchantId'] = undefined;

/**
 * @member {module:model/RegionPostalCodeArea} postalCodeArea
 */
Region.prototype['postalCodeArea'] = undefined;

/**
 * Output only. Immutable. The ID uniquely identifying each region.
 * @member {String} regionId
 */
Region.prototype['regionId'] = undefined;

/**
 * Output only. Indicates if the region is eligible to use in the Regional Inventory configuration.
 * @member {Boolean} regionalInventoryEligible
 */
Region.prototype['regionalInventoryEligible'] = undefined;

/**
 * Output only. Indicates if the region is eligible to use in the Shipping Services configuration.
 * @member {Boolean} shippingEligible
 */
Region.prototype['shippingEligible'] = undefined;






export default Region;

