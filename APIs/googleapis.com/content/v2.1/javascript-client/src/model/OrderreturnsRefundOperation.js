/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderreturnsPartialRefund from './OrderreturnsPartialRefund';

/**
 * The OrderreturnsRefundOperation model module.
 * @module model/OrderreturnsRefundOperation
 * @version v2.1
 */
class OrderreturnsRefundOperation {
    /**
     * Constructs a new <code>OrderreturnsRefundOperation</code>.
     * @alias module:model/OrderreturnsRefundOperation
     */
    constructor() { 
        
        OrderreturnsRefundOperation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderreturnsRefundOperation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderreturnsRefundOperation} obj Optional instance to populate.
     * @return {module:model/OrderreturnsRefundOperation} The populated <code>OrderreturnsRefundOperation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderreturnsRefundOperation();

            if (data.hasOwnProperty('fullRefund')) {
                obj['fullRefund'] = ApiClient.convertToType(data['fullRefund'], 'Boolean');
            }
            if (data.hasOwnProperty('partialRefund')) {
                obj['partialRefund'] = OrderreturnsPartialRefund.constructFromObject(data['partialRefund']);
            }
            if (data.hasOwnProperty('paymentType')) {
                obj['paymentType'] = ApiClient.convertToType(data['paymentType'], 'String');
            }
            if (data.hasOwnProperty('reasonText')) {
                obj['reasonText'] = ApiClient.convertToType(data['reasonText'], 'String');
            }
            if (data.hasOwnProperty('returnRefundReason')) {
                obj['returnRefundReason'] = ApiClient.convertToType(data['returnRefundReason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderreturnsRefundOperation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderreturnsRefundOperation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `partialRefund`
        if (data['partialRefund']) { // data not null
          OrderreturnsPartialRefund.validateJSON(data['partialRefund']);
        }
        // ensure the json data is a string
        if (data['paymentType'] && !(typeof data['paymentType'] === 'string' || data['paymentType'] instanceof String)) {
            throw new Error("Expected the field `paymentType` to be a primitive type in the JSON string but got " + data['paymentType']);
        }
        // ensure the json data is a string
        if (data['reasonText'] && !(typeof data['reasonText'] === 'string' || data['reasonText'] instanceof String)) {
            throw new Error("Expected the field `reasonText` to be a primitive type in the JSON string but got " + data['reasonText']);
        }
        // ensure the json data is a string
        if (data['returnRefundReason'] && !(typeof data['returnRefundReason'] === 'string' || data['returnRefundReason'] instanceof String)) {
            throw new Error("Expected the field `returnRefundReason` to be a primitive type in the JSON string but got " + data['returnRefundReason']);
        }

        return true;
    }


}



/**
 * If true, the item will be fully refunded. Allowed only when payment_type is FOP. Merchant can choose this refund option to indicate the full remaining amount of corresponding object to be refunded to the customer through FOP.
 * @member {Boolean} fullRefund
 */
OrderreturnsRefundOperation.prototype['fullRefund'] = undefined;

/**
 * @member {module:model/OrderreturnsPartialRefund} partialRefund
 */
OrderreturnsRefundOperation.prototype['partialRefund'] = undefined;

/**
 * The payment way of issuing refund. Default value is ORIGINAL_FOP if not set.
 * @member {String} paymentType
 */
OrderreturnsRefundOperation.prototype['paymentType'] = undefined;

/**
 * The explanation of the reason.
 * @member {String} reasonText
 */
OrderreturnsRefundOperation.prototype['reasonText'] = undefined;

/**
 * Code of the refund reason.
 * @member {String} returnRefundReason
 */
OrderreturnsRefundOperation.prototype['returnRefundReason'] = undefined;






export default OrderreturnsRefundOperation;

