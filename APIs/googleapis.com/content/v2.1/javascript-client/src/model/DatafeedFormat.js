/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatafeedFormat model module.
 * @module model/DatafeedFormat
 * @version v2.1
 */
class DatafeedFormat {
    /**
     * Constructs a new <code>DatafeedFormat</code>.
     * @alias module:model/DatafeedFormat
     */
    constructor() { 
        
        DatafeedFormat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatafeedFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatafeedFormat} obj Optional instance to populate.
     * @return {module:model/DatafeedFormat} The populated <code>DatafeedFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatafeedFormat();

            if (data.hasOwnProperty('columnDelimiter')) {
                obj['columnDelimiter'] = ApiClient.convertToType(data['columnDelimiter'], 'String');
            }
            if (data.hasOwnProperty('fileEncoding')) {
                obj['fileEncoding'] = ApiClient.convertToType(data['fileEncoding'], 'String');
            }
            if (data.hasOwnProperty('quotingMode')) {
                obj['quotingMode'] = ApiClient.convertToType(data['quotingMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatafeedFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatafeedFormat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['columnDelimiter'] && !(typeof data['columnDelimiter'] === 'string' || data['columnDelimiter'] instanceof String)) {
            throw new Error("Expected the field `columnDelimiter` to be a primitive type in the JSON string but got " + data['columnDelimiter']);
        }
        // ensure the json data is a string
        if (data['fileEncoding'] && !(typeof data['fileEncoding'] === 'string' || data['fileEncoding'] instanceof String)) {
            throw new Error("Expected the field `fileEncoding` to be a primitive type in the JSON string but got " + data['fileEncoding']);
        }
        // ensure the json data is a string
        if (data['quotingMode'] && !(typeof data['quotingMode'] === 'string' || data['quotingMode'] instanceof String)) {
            throw new Error("Expected the field `quotingMode` to be a primitive type in the JSON string but got " + data['quotingMode']);
        }

        return true;
    }


}



/**
 * Delimiter for the separation of values in a delimiter-separated values feed. If not specified, the delimiter will be auto-detected. Ignored for non-DSV data feeds. Acceptable values are: - \"`pipe`\" - \"`tab`\" - \"`tilde`\" 
 * @member {String} columnDelimiter
 */
DatafeedFormat.prototype['columnDelimiter'] = undefined;

/**
 * Character encoding scheme of the data feed. If not specified, the encoding will be auto-detected. Acceptable values are: - \"`latin-1`\" - \"`utf-16be`\" - \"`utf-16le`\" - \"`utf-8`\" - \"`windows-1252`\" 
 * @member {String} fileEncoding
 */
DatafeedFormat.prototype['fileEncoding'] = undefined;

/**
 * Specifies how double quotes are interpreted. If not specified, the mode will be auto-detected. Ignored for non-DSV data feeds. Acceptable values are: - \"`normal character`\" - \"`value quoting`\" 
 * @member {String} quotingMode
 */
DatafeedFormat.prototype['quotingMode'] = undefined;






export default DatafeedFormat;

