/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReturnAddressAddress from './ReturnAddressAddress';

/**
 * The ReturnAddress model module.
 * @module model/ReturnAddress
 * @version v2.1
 */
class ReturnAddress {
    /**
     * Constructs a new <code>ReturnAddress</code>.
     * Return address resource.
     * @alias module:model/ReturnAddress
     */
    constructor() { 
        
        ReturnAddress.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReturnAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReturnAddress} obj Optional instance to populate.
     * @return {module:model/ReturnAddress} The populated <code>ReturnAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReturnAddress();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ReturnAddressAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('returnAddressId')) {
                obj['returnAddressId'] = ApiClient.convertToType(data['returnAddressId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReturnAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReturnAddress</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          ReturnAddressAddress.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['returnAddressId'] && !(typeof data['returnAddressId'] === 'string' || data['returnAddressId'] instanceof String)) {
            throw new Error("Expected the field `returnAddressId` to be a primitive type in the JSON string but got " + data['returnAddressId']);
        }

        return true;
    }


}



/**
 * @member {module:model/ReturnAddressAddress} address
 */
ReturnAddress.prototype['address'] = undefined;

/**
 * Required. The country of sale where the return address is applicable.
 * @member {String} country
 */
ReturnAddress.prototype['country'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"`content#returnAddress`\"
 * @member {String} kind
 */
ReturnAddress.prototype['kind'] = undefined;

/**
 * Required. The user-defined label of the return address. For the default address, use the label \"default\".
 * @member {String} label
 */
ReturnAddress.prototype['label'] = undefined;

/**
 * Required. The merchant's contact phone number regarding the return.
 * @member {String} phoneNumber
 */
ReturnAddress.prototype['phoneNumber'] = undefined;

/**
 * Return address ID generated by Google.
 * @member {String} returnAddressId
 */
ReturnAddress.prototype['returnAddressId'] = undefined;






export default ReturnAddress;

