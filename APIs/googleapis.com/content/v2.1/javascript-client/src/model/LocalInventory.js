/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomAttribute from './CustomAttribute';
import Price from './Price';

/**
 * The LocalInventory model module.
 * @module model/LocalInventory
 * @version v2.1
 */
class LocalInventory {
    /**
     * Constructs a new <code>LocalInventory</code>.
     * Local inventory resource. For accepted attribute values, see the local product inventory feed specification.
     * @alias module:model/LocalInventory
     */
    constructor() { 
        
        LocalInventory.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocalInventory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocalInventory} obj Optional instance to populate.
     * @return {module:model/LocalInventory} The populated <code>LocalInventory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocalInventory();

            if (data.hasOwnProperty('availability')) {
                obj['availability'] = ApiClient.convertToType(data['availability'], 'String');
            }
            if (data.hasOwnProperty('customAttributes')) {
                obj['customAttributes'] = ApiClient.convertToType(data['customAttributes'], [CustomAttribute]);
            }
            if (data.hasOwnProperty('instoreProductLocation')) {
                obj['instoreProductLocation'] = ApiClient.convertToType(data['instoreProductLocation'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('pickupMethod')) {
                obj['pickupMethod'] = ApiClient.convertToType(data['pickupMethod'], 'String');
            }
            if (data.hasOwnProperty('pickupSla')) {
                obj['pickupSla'] = ApiClient.convertToType(data['pickupSla'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = Price.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('salePrice')) {
                obj['salePrice'] = Price.constructFromObject(data['salePrice']);
            }
            if (data.hasOwnProperty('salePriceEffectiveDate')) {
                obj['salePriceEffectiveDate'] = ApiClient.convertToType(data['salePriceEffectiveDate'], 'String');
            }
            if (data.hasOwnProperty('storeCode')) {
                obj['storeCode'] = ApiClient.convertToType(data['storeCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocalInventory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocalInventory</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['availability'] && !(typeof data['availability'] === 'string' || data['availability'] instanceof String)) {
            throw new Error("Expected the field `availability` to be a primitive type in the JSON string but got " + data['availability']);
        }
        if (data['customAttributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customAttributes'])) {
                throw new Error("Expected the field `customAttributes` to be an array in the JSON data but got " + data['customAttributes']);
            }
            // validate the optional field `customAttributes` (array)
            for (const item of data['customAttributes']) {
                CustomAttribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['instoreProductLocation'] && !(typeof data['instoreProductLocation'] === 'string' || data['instoreProductLocation'] instanceof String)) {
            throw new Error("Expected the field `instoreProductLocation` to be a primitive type in the JSON string but got " + data['instoreProductLocation']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['pickupMethod'] && !(typeof data['pickupMethod'] === 'string' || data['pickupMethod'] instanceof String)) {
            throw new Error("Expected the field `pickupMethod` to be a primitive type in the JSON string but got " + data['pickupMethod']);
        }
        // ensure the json data is a string
        if (data['pickupSla'] && !(typeof data['pickupSla'] === 'string' || data['pickupSla'] instanceof String)) {
            throw new Error("Expected the field `pickupSla` to be a primitive type in the JSON string but got " + data['pickupSla']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          Price.validateJSON(data['price']);
        }
        // validate the optional field `salePrice`
        if (data['salePrice']) { // data not null
          Price.validateJSON(data['salePrice']);
        }
        // ensure the json data is a string
        if (data['salePriceEffectiveDate'] && !(typeof data['salePriceEffectiveDate'] === 'string' || data['salePriceEffectiveDate'] instanceof String)) {
            throw new Error("Expected the field `salePriceEffectiveDate` to be a primitive type in the JSON string but got " + data['salePriceEffectiveDate']);
        }
        // ensure the json data is a string
        if (data['storeCode'] && !(typeof data['storeCode'] === 'string' || data['storeCode'] instanceof String)) {
            throw new Error("Expected the field `storeCode` to be a primitive type in the JSON string but got " + data['storeCode']);
        }

        return true;
    }


}



/**
 * The availability of the product. For accepted attribute values, see the local product inventory feed specification.
 * @member {String} availability
 */
LocalInventory.prototype['availability'] = undefined;

/**
 * A list of custom (merchant-provided) attributes. Can also be used to submit any attribute of the feed specification in its generic form, for example, `{ \"name\": \"size type\", \"value\": \"regular\" }`.
 * @member {Array.<module:model/CustomAttribute>} customAttributes
 */
LocalInventory.prototype['customAttributes'] = undefined;

/**
 * The in-store product location.
 * @member {String} instoreProductLocation
 */
LocalInventory.prototype['instoreProductLocation'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"`content#localInventory`\"
 * @member {String} kind
 */
LocalInventory.prototype['kind'] = undefined;

/**
 * The supported pickup method for this offer. Unless the value is \"not supported\", this field must be submitted together with `pickupSla`. For accepted attribute values, see the local product inventory feed specification.
 * @member {String} pickupMethod
 */
LocalInventory.prototype['pickupMethod'] = undefined;

/**
 * The expected date that an order will be ready for pickup relative to the order date. Must be submitted together with `pickupMethod`. For accepted attribute values, see the local product inventory feed specification.
 * @member {String} pickupSla
 */
LocalInventory.prototype['pickupSla'] = undefined;

/**
 * @member {module:model/Price} price
 */
LocalInventory.prototype['price'] = undefined;

/**
 * The quantity of the product. Must be nonnegative.
 * @member {Number} quantity
 */
LocalInventory.prototype['quantity'] = undefined;

/**
 * @member {module:model/Price} salePrice
 */
LocalInventory.prototype['salePrice'] = undefined;

/**
 * A date range represented by a pair of ISO 8601 dates separated by a space, comma, or slash. Both dates may be specified as 'null' if undecided.
 * @member {String} salePriceEffectiveDate
 */
LocalInventory.prototype['salePriceEffectiveDate'] = undefined;

/**
 * Required. The store code of this local inventory resource.
 * @member {String} storeCode
 */
LocalInventory.prototype['storeCode'] = undefined;






export default LocalInventory;

