/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderShipmentLineItemShipment from './OrderShipmentLineItemShipment';
import OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo from './OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo';

/**
 * The OrdersShipLineItemsRequest model module.
 * @module model/OrdersShipLineItemsRequest
 * @version v2.1
 */
class OrdersShipLineItemsRequest {
    /**
     * Constructs a new <code>OrdersShipLineItemsRequest</code>.
     * @alias module:model/OrdersShipLineItemsRequest
     */
    constructor() { 
        
        OrdersShipLineItemsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrdersShipLineItemsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrdersShipLineItemsRequest} obj Optional instance to populate.
     * @return {module:model/OrdersShipLineItemsRequest} The populated <code>OrdersShipLineItemsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrdersShipLineItemsRequest();

            if (data.hasOwnProperty('lineItems')) {
                obj['lineItems'] = ApiClient.convertToType(data['lineItems'], [OrderShipmentLineItemShipment]);
            }
            if (data.hasOwnProperty('operationId')) {
                obj['operationId'] = ApiClient.convertToType(data['operationId'], 'String');
            }
            if (data.hasOwnProperty('shipmentGroupId')) {
                obj['shipmentGroupId'] = ApiClient.convertToType(data['shipmentGroupId'], 'String');
            }
            if (data.hasOwnProperty('shipmentInfos')) {
                obj['shipmentInfos'] = ApiClient.convertToType(data['shipmentInfos'], [OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrdersShipLineItemsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrdersShipLineItemsRequest</code>.
     */
    static validateJSON(data) {
        if (data['lineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lineItems'])) {
                throw new Error("Expected the field `lineItems` to be an array in the JSON data but got " + data['lineItems']);
            }
            // validate the optional field `lineItems` (array)
            for (const item of data['lineItems']) {
                OrderShipmentLineItemShipment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['operationId'] && !(typeof data['operationId'] === 'string' || data['operationId'] instanceof String)) {
            throw new Error("Expected the field `operationId` to be a primitive type in the JSON string but got " + data['operationId']);
        }
        // ensure the json data is a string
        if (data['shipmentGroupId'] && !(typeof data['shipmentGroupId'] === 'string' || data['shipmentGroupId'] instanceof String)) {
            throw new Error("Expected the field `shipmentGroupId` to be a primitive type in the JSON string but got " + data['shipmentGroupId']);
        }
        if (data['shipmentInfos']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shipmentInfos'])) {
                throw new Error("Expected the field `shipmentInfos` to be an array in the JSON data but got " + data['shipmentInfos']);
            }
            // validate the optional field `shipmentInfos` (array)
            for (const item of data['shipmentInfos']) {
                OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Line items to ship.
 * @member {Array.<module:model/OrderShipmentLineItemShipment>} lineItems
 */
OrdersShipLineItemsRequest.prototype['lineItems'] = undefined;

/**
 * The ID of the operation. Unique across all operations for a given order.
 * @member {String} operationId
 */
OrdersShipLineItemsRequest.prototype['operationId'] = undefined;

/**
 * ID of the shipment group. Required for orders that use the orderinvoices service.
 * @member {String} shipmentGroupId
 */
OrdersShipLineItemsRequest.prototype['shipmentGroupId'] = undefined;

/**
 * Shipment information. This field is repeated because a single line item can be shipped in several packages (and have several tracking IDs).
 * @member {Array.<module:model/OrdersCustomBatchRequestEntryShipLineItemsShipmentInfo>} shipmentInfos
 */
OrdersShipLineItemsRequest.prototype['shipmentInfos'] = undefined;






export default OrdersShipLineItemsRequest;

