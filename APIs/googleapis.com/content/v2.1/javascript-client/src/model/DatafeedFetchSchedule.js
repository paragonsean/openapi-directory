/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatafeedFetchSchedule model module.
 * @module model/DatafeedFetchSchedule
 * @version v2.1
 */
class DatafeedFetchSchedule {
    /**
     * Constructs a new <code>DatafeedFetchSchedule</code>.
     * The required fields vary based on the frequency of fetching. For a monthly fetch schedule, day_of_month and hour are required. For a weekly fetch schedule, weekday and hour are required. For a daily fetch schedule, only hour is required.
     * @alias module:model/DatafeedFetchSchedule
     */
    constructor() { 
        
        DatafeedFetchSchedule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatafeedFetchSchedule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatafeedFetchSchedule} obj Optional instance to populate.
     * @return {module:model/DatafeedFetchSchedule} The populated <code>DatafeedFetchSchedule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatafeedFetchSchedule();

            if (data.hasOwnProperty('dayOfMonth')) {
                obj['dayOfMonth'] = ApiClient.convertToType(data['dayOfMonth'], 'Number');
            }
            if (data.hasOwnProperty('fetchUrl')) {
                obj['fetchUrl'] = ApiClient.convertToType(data['fetchUrl'], 'String');
            }
            if (data.hasOwnProperty('hour')) {
                obj['hour'] = ApiClient.convertToType(data['hour'], 'Number');
            }
            if (data.hasOwnProperty('minuteOfHour')) {
                obj['minuteOfHour'] = ApiClient.convertToType(data['minuteOfHour'], 'Number');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('paused')) {
                obj['paused'] = ApiClient.convertToType(data['paused'], 'Boolean');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('weekday')) {
                obj['weekday'] = ApiClient.convertToType(data['weekday'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatafeedFetchSchedule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatafeedFetchSchedule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fetchUrl'] && !(typeof data['fetchUrl'] === 'string' || data['fetchUrl'] instanceof String)) {
            throw new Error("Expected the field `fetchUrl` to be a primitive type in the JSON string but got " + data['fetchUrl']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['weekday'] && !(typeof data['weekday'] === 'string' || data['weekday'] instanceof String)) {
            throw new Error("Expected the field `weekday` to be a primitive type in the JSON string but got " + data['weekday']);
        }

        return true;
    }


}



/**
 * The day of the month the feed file should be fetched (1-31).
 * @member {Number} dayOfMonth
 */
DatafeedFetchSchedule.prototype['dayOfMonth'] = undefined;

/**
 * The URL where the feed file can be fetched. Google Merchant Center will support automatic scheduled uploads using the HTTP, HTTPS, FTP, or SFTP protocols, so the value will need to be a valid link using one of those four protocols.
 * @member {String} fetchUrl
 */
DatafeedFetchSchedule.prototype['fetchUrl'] = undefined;

/**
 * The hour of the day the feed file should be fetched (0-23).
 * @member {Number} hour
 */
DatafeedFetchSchedule.prototype['hour'] = undefined;

/**
 * The minute of the hour the feed file should be fetched (0-59). Read-only.
 * @member {Number} minuteOfHour
 */
DatafeedFetchSchedule.prototype['minuteOfHour'] = undefined;

/**
 * An optional password for fetch_url.
 * @member {String} password
 */
DatafeedFetchSchedule.prototype['password'] = undefined;

/**
 * Whether the scheduled fetch is paused or not.
 * @member {Boolean} paused
 */
DatafeedFetchSchedule.prototype['paused'] = undefined;

/**
 * Time zone used for schedule. UTC by default. For example, \"America/Los_Angeles\".
 * @member {String} timeZone
 */
DatafeedFetchSchedule.prototype['timeZone'] = undefined;

/**
 * An optional user name for fetch_url.
 * @member {String} username
 */
DatafeedFetchSchedule.prototype['username'] = undefined;

/**
 * The day of the week the feed file should be fetched. Acceptable values are: - \"`monday`\" - \"`tuesday`\" - \"`wednesday`\" - \"`thursday`\" - \"`friday`\" - \"`saturday`\" - \"`sunday`\" 
 * @member {String} weekday
 */
DatafeedFetchSchedule.prototype['weekday'] = undefined;






export default DatafeedFetchSchedule;

