/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributionSettingsConversionType from './AttributionSettingsConversionType';

/**
 * The AttributionSettings model module.
 * @module model/AttributionSettings
 * @version v2.1
 */
class AttributionSettings {
    /**
     * Constructs a new <code>AttributionSettings</code>.
     * Represents attribution settings for conversion sources receiving pre-attribution data.
     * @alias module:model/AttributionSettings
     */
    constructor() { 
        
        AttributionSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AttributionSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttributionSettings} obj Optional instance to populate.
     * @return {module:model/AttributionSettings} The populated <code>AttributionSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttributionSettings();

            if (data.hasOwnProperty('attributionLookbackWindowInDays')) {
                obj['attributionLookbackWindowInDays'] = ApiClient.convertToType(data['attributionLookbackWindowInDays'], 'Number');
            }
            if (data.hasOwnProperty('attributionModel')) {
                obj['attributionModel'] = ApiClient.convertToType(data['attributionModel'], 'String');
            }
            if (data.hasOwnProperty('conversionType')) {
                obj['conversionType'] = ApiClient.convertToType(data['conversionType'], [AttributionSettingsConversionType]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttributionSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttributionSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['attributionModel'] && !(typeof data['attributionModel'] === 'string' || data['attributionModel'] instanceof String)) {
            throw new Error("Expected the field `attributionModel` to be a primitive type in the JSON string but got " + data['attributionModel']);
        }
        if (data['conversionType']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conversionType'])) {
                throw new Error("Expected the field `conversionType` to be an array in the JSON data but got " + data['conversionType']);
            }
            // validate the optional field `conversionType` (array)
            for (const item of data['conversionType']) {
                AttributionSettingsConversionType.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Required. Lookback windows (in days) used for attribution in this source. Supported values are 7, 30, 40.
 * @member {Number} attributionLookbackWindowInDays
 */
AttributionSettings.prototype['attributionLookbackWindowInDays'] = undefined;

/**
 * Required. Attribution model.
 * @member {module:model/AttributionSettings.AttributionModelEnum} attributionModel
 */
AttributionSettings.prototype['attributionModel'] = undefined;

/**
 * Immutable. Unordered list. List of different conversion types a conversion event can be classified as. A standard \"purchase\" type will be automatically created if this list is empty at creation time.
 * @member {Array.<module:model/AttributionSettingsConversionType>} conversionType
 */
AttributionSettings.prototype['conversionType'] = undefined;





/**
 * Allowed values for the <code>attributionModel</code> property.
 * @enum {String}
 * @readonly
 */
AttributionSettings['AttributionModelEnum'] = {

    /**
     * value: "ATTRIBUTION_MODEL_UNSPECIFIED"
     * @const
     */
    "ATTRIBUTION_MODEL_UNSPECIFIED": "ATTRIBUTION_MODEL_UNSPECIFIED",

    /**
     * value: "CROSS_CHANNEL_LAST_CLICK"
     * @const
     */
    "CROSS_CHANNEL_LAST_CLICK": "CROSS_CHANNEL_LAST_CLICK",

    /**
     * value: "ADS_PREFERRED_LAST_CLICK"
     * @const
     */
    "ADS_PREFERRED_LAST_CLICK": "ADS_PREFERRED_LAST_CLICK",

    /**
     * value: "CROSS_CHANNEL_DATA_DRIVEN"
     * @const
     */
    "CROSS_CHANNEL_DATA_DRIVEN": "CROSS_CHANNEL_DATA_DRIVEN",

    /**
     * value: "CROSS_CHANNEL_FIRST_CLICK"
     * @const
     */
    "CROSS_CHANNEL_FIRST_CLICK": "CROSS_CHANNEL_FIRST_CLICK",

    /**
     * value: "CROSS_CHANNEL_LINEAR"
     * @const
     */
    "CROSS_CHANNEL_LINEAR": "CROSS_CHANNEL_LINEAR",

    /**
     * value: "CROSS_CHANNEL_POSITION_BASED"
     * @const
     */
    "CROSS_CHANNEL_POSITION_BASED": "CROSS_CHANNEL_POSITION_BASED",

    /**
     * value: "CROSS_CHANNEL_TIME_DECAY"
     * @const
     */
    "CROSS_CHANNEL_TIME_DECAY": "CROSS_CHANNEL_TIME_DECAY"
};



export default AttributionSettings;

