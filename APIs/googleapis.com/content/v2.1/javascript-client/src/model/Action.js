/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActionReason from './ActionReason';
import BuiltInSimpleAction from './BuiltInSimpleAction';
import ExternalAction from './ExternalAction';

/**
 * The Action model module.
 * @module model/Action
 * @version v2.1
 */
class Action {
    /**
     * Constructs a new <code>Action</code>.
     * An actionable step that can be executed to solve the issue.
     * @alias module:model/Action
     */
    constructor() { 
        
        Action.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Action</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Action} obj Optional instance to populate.
     * @return {module:model/Action} The populated <code>Action</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Action();

            if (data.hasOwnProperty('builtinSimpleAction')) {
                obj['builtinSimpleAction'] = BuiltInSimpleAction.constructFromObject(data['builtinSimpleAction']);
            }
            if (data.hasOwnProperty('buttonLabel')) {
                obj['buttonLabel'] = ApiClient.convertToType(data['buttonLabel'], 'String');
            }
            if (data.hasOwnProperty('externalAction')) {
                obj['externalAction'] = ExternalAction.constructFromObject(data['externalAction']);
            }
            if (data.hasOwnProperty('isAvailable')) {
                obj['isAvailable'] = ApiClient.convertToType(data['isAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('reasons')) {
                obj['reasons'] = ApiClient.convertToType(data['reasons'], [ActionReason]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Action</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Action</code>.
     */
    static validateJSON(data) {
        // validate the optional field `builtinSimpleAction`
        if (data['builtinSimpleAction']) { // data not null
          BuiltInSimpleAction.validateJSON(data['builtinSimpleAction']);
        }
        // ensure the json data is a string
        if (data['buttonLabel'] && !(typeof data['buttonLabel'] === 'string' || data['buttonLabel'] instanceof String)) {
            throw new Error("Expected the field `buttonLabel` to be a primitive type in the JSON string but got " + data['buttonLabel']);
        }
        // validate the optional field `externalAction`
        if (data['externalAction']) { // data not null
          ExternalAction.validateJSON(data['externalAction']);
        }
        if (data['reasons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reasons'])) {
                throw new Error("Expected the field `reasons` to be an array in the JSON data but got " + data['reasons']);
            }
            // validate the optional field `reasons` (array)
            for (const item of data['reasons']) {
                ActionReason.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/BuiltInSimpleAction} builtinSimpleAction
 */
Action.prototype['builtinSimpleAction'] = undefined;

/**
 * Label of the action button.
 * @member {String} buttonLabel
 */
Action.prototype['buttonLabel'] = undefined;

/**
 * @member {module:model/ExternalAction} externalAction
 */
Action.prototype['externalAction'] = undefined;

/**
 * Controlling whether the button is active or disabled. The value is 'false' when the action was already requested or is not available. If the action is not available then a reason will be present. If (your) third-party application shows a disabled button for action that is not available, then it should also show reasons.
 * @member {Boolean} isAvailable
 */
Action.prototype['isAvailable'] = undefined;

/**
 * List of reasons why the action is not available. The list of reasons is empty if the action is available. If there is only one reason, it can be displayed next to the disabled button. If there are more reasons, all of them should be displayed, for example in a pop-up dialog.
 * @member {Array.<module:model/ActionReason>} reasons
 */
Action.prototype['reasons'] = undefined;






export default Action;

