/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TestOrder from './TestOrder';

/**
 * The OrdersCreateTestOrderRequest model module.
 * @module model/OrdersCreateTestOrderRequest
 * @version v2.1
 */
class OrdersCreateTestOrderRequest {
    /**
     * Constructs a new <code>OrdersCreateTestOrderRequest</code>.
     * @alias module:model/OrdersCreateTestOrderRequest
     */
    constructor() { 
        
        OrdersCreateTestOrderRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrdersCreateTestOrderRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrdersCreateTestOrderRequest} obj Optional instance to populate.
     * @return {module:model/OrdersCreateTestOrderRequest} The populated <code>OrdersCreateTestOrderRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrdersCreateTestOrderRequest();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('templateName')) {
                obj['templateName'] = ApiClient.convertToType(data['templateName'], 'String');
            }
            if (data.hasOwnProperty('testOrder')) {
                obj['testOrder'] = TestOrder.constructFromObject(data['testOrder']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrdersCreateTestOrderRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrdersCreateTestOrderRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['templateName'] && !(typeof data['templateName'] === 'string' || data['templateName'] instanceof String)) {
            throw new Error("Expected the field `templateName` to be a primitive type in the JSON string but got " + data['templateName']);
        }
        // validate the optional field `testOrder`
        if (data['testOrder']) { // data not null
          TestOrder.validateJSON(data['testOrder']);
        }

        return true;
    }


}



/**
 * The CLDR territory code of the country of the test order to create. Affects the currency and addresses of orders created through `template_name`, or the addresses of orders created through `test_order`. Acceptable values are: - \"`US`\" - \"`FR`\" Defaults to \"`US`\".
 * @member {String} country
 */
OrdersCreateTestOrderRequest.prototype['country'] = undefined;

/**
 * The test order template to use. Specify as an alternative to `testOrder` as a shortcut for retrieving a template and then creating an order using that template. Acceptable values are: - \"`template1`\" - \"`template1a`\" - \"`template1b`\" - \"`template2`\" - \"`template3`\" 
 * @member {String} templateName
 */
OrdersCreateTestOrderRequest.prototype['templateName'] = undefined;

/**
 * @member {module:model/TestOrder} testOrder
 */
OrdersCreateTestOrderRequest.prototype['testOrder'] = undefined;






export default OrdersCreateTestOrderRequest;

