/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LiaOmnichannelExperience model module.
 * @module model/LiaOmnichannelExperience
 * @version v2.1
 */
class LiaOmnichannelExperience {
    /**
     * Constructs a new <code>LiaOmnichannelExperience</code>.
     * Omnichannel experience details.
     * @alias module:model/LiaOmnichannelExperience
     */
    constructor() { 
        
        LiaOmnichannelExperience.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LiaOmnichannelExperience</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiaOmnichannelExperience} obj Optional instance to populate.
     * @return {module:model/LiaOmnichannelExperience} The populated <code>LiaOmnichannelExperience</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiaOmnichannelExperience();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('lsfType')) {
                obj['lsfType'] = ApiClient.convertToType(data['lsfType'], 'String');
            }
            if (data.hasOwnProperty('pickupTypes')) {
                obj['pickupTypes'] = ApiClient.convertToType(data['pickupTypes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiaOmnichannelExperience</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiaOmnichannelExperience</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['lsfType'] && !(typeof data['lsfType'] === 'string' || data['lsfType'] instanceof String)) {
            throw new Error("Expected the field `lsfType` to be a primitive type in the JSON string but got " + data['lsfType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pickupTypes'])) {
            throw new Error("Expected the field `pickupTypes` to be an array in the JSON data but got " + data['pickupTypes']);
        }

        return true;
    }


}



/**
 * The CLDR country code (for example, \"US\").
 * @member {String} country
 */
LiaOmnichannelExperience.prototype['country'] = undefined;

/**
 * The Local Store Front (LSF) type for this country. Acceptable values are: - \"`ghlsf`\" (Google-Hosted Local Store Front) - \"`mhlsfBasic`\" (Merchant-Hosted Local Store Front Basic) - \"`mhlsfFull`\" (Merchant-Hosted Local Store Front Full) More details about these types can be found here.
 * @member {String} lsfType
 */
LiaOmnichannelExperience.prototype['lsfType'] = undefined;

/**
 * The Pickup types for this country. Acceptable values are: - \"`pickupToday`\" - \"`pickupLater`\" 
 * @member {Array.<String>} pickupTypes
 */
LiaOmnichannelExperience.prototype['pickupTypes'] = undefined;






export default LiaOmnichannelExperience;

