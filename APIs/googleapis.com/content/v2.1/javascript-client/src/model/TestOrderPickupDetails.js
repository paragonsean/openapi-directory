/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TestOrderAddress from './TestOrderAddress';
import TestOrderPickupDetailsPickupPerson from './TestOrderPickupDetailsPickupPerson';

/**
 * The TestOrderPickupDetails model module.
 * @module model/TestOrderPickupDetails
 * @version v2.1
 */
class TestOrderPickupDetails {
    /**
     * Constructs a new <code>TestOrderPickupDetails</code>.
     * @alias module:model/TestOrderPickupDetails
     */
    constructor() { 
        
        TestOrderPickupDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestOrderPickupDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestOrderPickupDetails} obj Optional instance to populate.
     * @return {module:model/TestOrderPickupDetails} The populated <code>TestOrderPickupDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestOrderPickupDetails();

            if (data.hasOwnProperty('locationCode')) {
                obj['locationCode'] = ApiClient.convertToType(data['locationCode'], 'String');
            }
            if (data.hasOwnProperty('pickupLocationAddress')) {
                obj['pickupLocationAddress'] = TestOrderAddress.constructFromObject(data['pickupLocationAddress']);
            }
            if (data.hasOwnProperty('pickupLocationType')) {
                obj['pickupLocationType'] = ApiClient.convertToType(data['pickupLocationType'], 'String');
            }
            if (data.hasOwnProperty('pickupPersons')) {
                obj['pickupPersons'] = ApiClient.convertToType(data['pickupPersons'], [TestOrderPickupDetailsPickupPerson]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestOrderPickupDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestOrderPickupDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['locationCode'] && !(typeof data['locationCode'] === 'string' || data['locationCode'] instanceof String)) {
            throw new Error("Expected the field `locationCode` to be a primitive type in the JSON string but got " + data['locationCode']);
        }
        // validate the optional field `pickupLocationAddress`
        if (data['pickupLocationAddress']) { // data not null
          TestOrderAddress.validateJSON(data['pickupLocationAddress']);
        }
        // ensure the json data is a string
        if (data['pickupLocationType'] && !(typeof data['pickupLocationType'] === 'string' || data['pickupLocationType'] instanceof String)) {
            throw new Error("Expected the field `pickupLocationType` to be a primitive type in the JSON string but got " + data['pickupLocationType']);
        }
        if (data['pickupPersons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pickupPersons'])) {
                throw new Error("Expected the field `pickupPersons` to be an array in the JSON data but got " + data['pickupPersons']);
            }
            // validate the optional field `pickupPersons` (array)
            for (const item of data['pickupPersons']) {
                TestOrderPickupDetailsPickupPerson.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Required. Code of the location defined by provider or merchant.
 * @member {String} locationCode
 */
TestOrderPickupDetails.prototype['locationCode'] = undefined;

/**
 * @member {module:model/TestOrderAddress} pickupLocationAddress
 */
TestOrderPickupDetails.prototype['pickupLocationAddress'] = undefined;

/**
 * Pickup location type. Acceptable values are: - \"`locker`\" - \"`store`\" - \"`curbside`\" 
 * @member {String} pickupLocationType
 */
TestOrderPickupDetails.prototype['pickupLocationType'] = undefined;

/**
 * Required. all pickup persons set by users.
 * @member {Array.<module:model/TestOrderPickupDetailsPickupPerson>} pickupPersons
 */
TestOrderPickupDetails.prototype['pickupPersons'] = undefined;






export default TestOrderPickupDetails;

