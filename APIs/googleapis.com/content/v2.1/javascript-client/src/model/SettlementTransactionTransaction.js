/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SettlementTransactionTransaction model module.
 * @module model/SettlementTransactionTransaction
 * @version v2.1
 */
class SettlementTransactionTransaction {
    /**
     * Constructs a new <code>SettlementTransactionTransaction</code>.
     * @alias module:model/SettlementTransactionTransaction
     */
    constructor() { 
        
        SettlementTransactionTransaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SettlementTransactionTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SettlementTransactionTransaction} obj Optional instance to populate.
     * @return {module:model/SettlementTransactionTransaction} The populated <code>SettlementTransactionTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SettlementTransactionTransaction();

            if (data.hasOwnProperty('postDate')) {
                obj['postDate'] = ApiClient.convertToType(data['postDate'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SettlementTransactionTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SettlementTransactionTransaction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['postDate'] && !(typeof data['postDate'] === 'string' || data['postDate'] instanceof String)) {
            throw new Error("Expected the field `postDate` to be a primitive type in the JSON string but got " + data['postDate']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The time on which the event occurred in ISO 8601 format.
 * @member {String} postDate
 */
SettlementTransactionTransaction.prototype['postDate'] = undefined;

/**
 * The type of the transaction that occurred. Acceptable values are: - \"`order`\" - \"`reversal`\" - \"`orderRefund`\" - \"`reversalRefund`\" - \"`issueRelatedRefundAndReplacement`\" - \"`returnLabelShippingFeeTransaction`\" - \"`reversalIssueRelatedRefundAndReplacement`\" - \"`reversalReturnLabelShippingFeeTransaction`\" - \"`lumpSumCorrectionTransaction`\" 
 * @member {String} type
 */
SettlementTransactionTransaction.prototype['type'] = undefined;






export default SettlementTransactionTransaction;

