/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeliveryTime from './DeliveryTime';
import MinimumOrderValueTable from './MinimumOrderValueTable';
import PickupCarrierService from './PickupCarrierService';
import Price from './Price';
import RateGroup from './RateGroup';
import ServiceStoreConfig from './ServiceStoreConfig';

/**
 * The Service model module.
 * @module model/Service
 * @version v2.1
 */
class Service {
    /**
     * Constructs a new <code>Service</code>.
     * @alias module:model/Service
     */
    constructor() { 
        
        Service.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Service</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Service} obj Optional instance to populate.
     * @return {module:model/Service} The populated <code>Service</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Service();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('deliveryCountry')) {
                obj['deliveryCountry'] = ApiClient.convertToType(data['deliveryCountry'], 'String');
            }
            if (data.hasOwnProperty('deliveryTime')) {
                obj['deliveryTime'] = DeliveryTime.constructFromObject(data['deliveryTime']);
            }
            if (data.hasOwnProperty('eligibility')) {
                obj['eligibility'] = ApiClient.convertToType(data['eligibility'], 'String');
            }
            if (data.hasOwnProperty('minimumOrderValue')) {
                obj['minimumOrderValue'] = Price.constructFromObject(data['minimumOrderValue']);
            }
            if (data.hasOwnProperty('minimumOrderValueTable')) {
                obj['minimumOrderValueTable'] = MinimumOrderValueTable.constructFromObject(data['minimumOrderValueTable']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pickupService')) {
                obj['pickupService'] = PickupCarrierService.constructFromObject(data['pickupService']);
            }
            if (data.hasOwnProperty('rateGroups')) {
                obj['rateGroups'] = ApiClient.convertToType(data['rateGroups'], [RateGroup]);
            }
            if (data.hasOwnProperty('shipmentType')) {
                obj['shipmentType'] = ApiClient.convertToType(data['shipmentType'], 'String');
            }
            if (data.hasOwnProperty('storeConfig')) {
                obj['storeConfig'] = ServiceStoreConfig.constructFromObject(data['storeConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Service</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Service</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['deliveryCountry'] && !(typeof data['deliveryCountry'] === 'string' || data['deliveryCountry'] instanceof String)) {
            throw new Error("Expected the field `deliveryCountry` to be a primitive type in the JSON string but got " + data['deliveryCountry']);
        }
        // validate the optional field `deliveryTime`
        if (data['deliveryTime']) { // data not null
          DeliveryTime.validateJSON(data['deliveryTime']);
        }
        // ensure the json data is a string
        if (data['eligibility'] && !(typeof data['eligibility'] === 'string' || data['eligibility'] instanceof String)) {
            throw new Error("Expected the field `eligibility` to be a primitive type in the JSON string but got " + data['eligibility']);
        }
        // validate the optional field `minimumOrderValue`
        if (data['minimumOrderValue']) { // data not null
          Price.validateJSON(data['minimumOrderValue']);
        }
        // validate the optional field `minimumOrderValueTable`
        if (data['minimumOrderValueTable']) { // data not null
          MinimumOrderValueTable.validateJSON(data['minimumOrderValueTable']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `pickupService`
        if (data['pickupService']) { // data not null
          PickupCarrierService.validateJSON(data['pickupService']);
        }
        if (data['rateGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rateGroups'])) {
                throw new Error("Expected the field `rateGroups` to be an array in the JSON data but got " + data['rateGroups']);
            }
            // validate the optional field `rateGroups` (array)
            for (const item of data['rateGroups']) {
                RateGroup.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['shipmentType'] && !(typeof data['shipmentType'] === 'string' || data['shipmentType'] instanceof String)) {
            throw new Error("Expected the field `shipmentType` to be a primitive type in the JSON string but got " + data['shipmentType']);
        }
        // validate the optional field `storeConfig`
        if (data['storeConfig']) { // data not null
          ServiceStoreConfig.validateJSON(data['storeConfig']);
        }

        return true;
    }


}



/**
 * A boolean exposing the active status of the shipping service. Required.
 * @member {Boolean} active
 */
Service.prototype['active'] = undefined;

/**
 * The CLDR code of the currency to which this service applies. Must match that of the prices in rate groups.
 * @member {String} currency
 */
Service.prototype['currency'] = undefined;

/**
 * The CLDR territory code of the country to which the service applies. Required.
 * @member {String} deliveryCountry
 */
Service.prototype['deliveryCountry'] = undefined;

/**
 * @member {module:model/DeliveryTime} deliveryTime
 */
Service.prototype['deliveryTime'] = undefined;

/**
 * Eligibility for this service. Acceptable values are: - \"`All scenarios`\" - \"`All scenarios except Shopping Actions`\" - \"`Shopping Actions`\" 
 * @member {String} eligibility
 */
Service.prototype['eligibility'] = undefined;

/**
 * @member {module:model/Price} minimumOrderValue
 */
Service.prototype['minimumOrderValue'] = undefined;

/**
 * @member {module:model/MinimumOrderValueTable} minimumOrderValueTable
 */
Service.prototype['minimumOrderValueTable'] = undefined;

/**
 * Free-form name of the service. Must be unique within target account. Required.
 * @member {String} name
 */
Service.prototype['name'] = undefined;

/**
 * @member {module:model/PickupCarrierService} pickupService
 */
Service.prototype['pickupService'] = undefined;

/**
 * Shipping rate group definitions. Only the last one is allowed to have an empty `applicableShippingLabels`, which means \"everything else\". The other `applicableShippingLabels` must not overlap.
 * @member {Array.<module:model/RateGroup>} rateGroups
 */
Service.prototype['rateGroups'] = undefined;

/**
 * Type of locations this service ships orders to. Acceptable values are: - \"`delivery`\" - \"`pickup` (deprecated)\" - \"`local_delivery`\" - \"`collection_point`\" 
 * @member {String} shipmentType
 */
Service.prototype['shipmentType'] = undefined;

/**
 * @member {module:model/ServiceStoreConfig} storeConfig
 */
Service.prototype['storeConfig'] = undefined;






export default Service;

