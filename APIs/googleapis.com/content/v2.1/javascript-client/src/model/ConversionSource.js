/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleAnalyticsLink from './GoogleAnalyticsLink';
import MerchantCenterDestination from './MerchantCenterDestination';

/**
 * The ConversionSource model module.
 * @module model/ConversionSource
 * @version v2.1
 */
class ConversionSource {
    /**
     * Constructs a new <code>ConversionSource</code>.
     * Represents a conversion source owned by a Merchant account. A merchant account can have up to 200 conversion sources.
     * @alias module:model/ConversionSource
     */
    constructor() { 
        
        ConversionSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConversionSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConversionSource} obj Optional instance to populate.
     * @return {module:model/ConversionSource} The populated <code>ConversionSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConversionSource();

            if (data.hasOwnProperty('conversionSourceId')) {
                obj['conversionSourceId'] = ApiClient.convertToType(data['conversionSourceId'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('googleAnalyticsLink')) {
                obj['googleAnalyticsLink'] = GoogleAnalyticsLink.constructFromObject(data['googleAnalyticsLink']);
            }
            if (data.hasOwnProperty('merchantCenterDestination')) {
                obj['merchantCenterDestination'] = MerchantCenterDestination.constructFromObject(data['merchantCenterDestination']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConversionSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConversionSource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['conversionSourceId'] && !(typeof data['conversionSourceId'] === 'string' || data['conversionSourceId'] instanceof String)) {
            throw new Error("Expected the field `conversionSourceId` to be a primitive type in the JSON string but got " + data['conversionSourceId']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // validate the optional field `googleAnalyticsLink`
        if (data['googleAnalyticsLink']) { // data not null
          GoogleAnalyticsLink.validateJSON(data['googleAnalyticsLink']);
        }
        // validate the optional field `merchantCenterDestination`
        if (data['merchantCenterDestination']) { // data not null
          MerchantCenterDestination.validateJSON(data['merchantCenterDestination']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Output only. Generated by the Content API upon creation of a new `ConversionSource`. Format: [a-z]{4}:.+ The four characters before the colon represent the type of conversio source. Content after the colon represents the ID of the conversion source within that type. The ID of two different conversion sources might be the same across different types. The following type prefixes are supported: - galk: For GoogleAnalyticsLink sources. - mcdn: For MerchantCenterDestination sources.
 * @member {String} conversionSourceId
 */
ConversionSource.prototype['conversionSourceId'] = undefined;

/**
 * Output only. The time when an archived conversion source becomes permanently deleted and is no longer available to undelete.
 * @member {String} expireTime
 */
ConversionSource.prototype['expireTime'] = undefined;

/**
 * @member {module:model/GoogleAnalyticsLink} googleAnalyticsLink
 */
ConversionSource.prototype['googleAnalyticsLink'] = undefined;

/**
 * @member {module:model/MerchantCenterDestination} merchantCenterDestination
 */
ConversionSource.prototype['merchantCenterDestination'] = undefined;

/**
 * Output only. Current state of this conversion source. Can't be edited through the API.
 * @member {module:model/ConversionSource.StateEnum} state
 */
ConversionSource.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ConversionSource['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "ARCHIVED"
     * @const
     */
    "ARCHIVED": "ARCHIVED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING"
};



export default ConversionSource;

