/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Price from './Price';

/**
 * The SettlementReport model module.
 * @module model/SettlementReport
 * @version v2.1
 */
class SettlementReport {
    /**
     * Constructs a new <code>SettlementReport</code>.
     *  Settlement reports detail order-level and item-level credits and debits between you and Google.
     * @alias module:model/SettlementReport
     */
    constructor() { 
        
        SettlementReport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SettlementReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SettlementReport} obj Optional instance to populate.
     * @return {module:model/SettlementReport} The populated <code>SettlementReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SettlementReport();

            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('previousBalance')) {
                obj['previousBalance'] = Price.constructFromObject(data['previousBalance']);
            }
            if (data.hasOwnProperty('settlementId')) {
                obj['settlementId'] = ApiClient.convertToType(data['settlementId'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'String');
            }
            if (data.hasOwnProperty('transferAmount')) {
                obj['transferAmount'] = Price.constructFromObject(data['transferAmount']);
            }
            if (data.hasOwnProperty('transferDate')) {
                obj['transferDate'] = ApiClient.convertToType(data['transferDate'], 'String');
            }
            if (data.hasOwnProperty('transferIds')) {
                obj['transferIds'] = ApiClient.convertToType(data['transferIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SettlementReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SettlementReport</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endDate'] && !(typeof data['endDate'] === 'string' || data['endDate'] instanceof String)) {
            throw new Error("Expected the field `endDate` to be a primitive type in the JSON string but got " + data['endDate']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `previousBalance`
        if (data['previousBalance']) { // data not null
          Price.validateJSON(data['previousBalance']);
        }
        // ensure the json data is a string
        if (data['settlementId'] && !(typeof data['settlementId'] === 'string' || data['settlementId'] instanceof String)) {
            throw new Error("Expected the field `settlementId` to be a primitive type in the JSON string but got " + data['settlementId']);
        }
        // ensure the json data is a string
        if (data['startDate'] && !(typeof data['startDate'] === 'string' || data['startDate'] instanceof String)) {
            throw new Error("Expected the field `startDate` to be a primitive type in the JSON string but got " + data['startDate']);
        }
        // validate the optional field `transferAmount`
        if (data['transferAmount']) { // data not null
          Price.validateJSON(data['transferAmount']);
        }
        // ensure the json data is a string
        if (data['transferDate'] && !(typeof data['transferDate'] === 'string' || data['transferDate'] instanceof String)) {
            throw new Error("Expected the field `transferDate` to be a primitive type in the JSON string but got " + data['transferDate']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['transferIds'])) {
            throw new Error("Expected the field `transferIds` to be an array in the JSON data but got " + data['transferIds']);
        }

        return true;
    }


}



/**
 * The end date on which all transactions are included in the report, in ISO 8601 format.
 * @member {String} endDate
 */
SettlementReport.prototype['endDate'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"`content#settlementReport`\"
 * @member {String} kind
 */
SettlementReport.prototype['kind'] = undefined;

/**
 * @member {module:model/Price} previousBalance
 */
SettlementReport.prototype['previousBalance'] = undefined;

/**
 * The ID of the settlement report.
 * @member {String} settlementId
 */
SettlementReport.prototype['settlementId'] = undefined;

/**
 * The start date on which all transactions are included in the report, in ISO 8601 format.
 * @member {String} startDate
 */
SettlementReport.prototype['startDate'] = undefined;

/**
 * @member {module:model/Price} transferAmount
 */
SettlementReport.prototype['transferAmount'] = undefined;

/**
 * Date on which transfer for this payment was initiated by Google, in ISO 8601 format.
 * @member {String} transferDate
 */
SettlementReport.prototype['transferDate'] = undefined;

/**
 * The list of bank identifiers used for the transfer. For example, Trace ID for Federal Automated Clearing House (ACH). This may also be known as the Wire ID.
 * @member {Array.<String>} transferIds
 */
SettlementReport.prototype['transferIds'] = undefined;






export default SettlementReport;

