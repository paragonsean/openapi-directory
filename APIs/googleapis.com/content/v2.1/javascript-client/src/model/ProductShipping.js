/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Price from './Price';

/**
 * The ProductShipping model module.
 * @module model/ProductShipping
 * @version v2.1
 */
class ProductShipping {
    /**
     * Constructs a new <code>ProductShipping</code>.
     * @alias module:model/ProductShipping
     */
    constructor() { 
        
        ProductShipping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductShipping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductShipping} obj Optional instance to populate.
     * @return {module:model/ProductShipping} The populated <code>ProductShipping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductShipping();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('locationGroupName')) {
                obj['locationGroupName'] = ApiClient.convertToType(data['locationGroupName'], 'String');
            }
            if (data.hasOwnProperty('locationId')) {
                obj['locationId'] = ApiClient.convertToType(data['locationId'], 'String');
            }
            if (data.hasOwnProperty('maxHandlingTime')) {
                obj['maxHandlingTime'] = ApiClient.convertToType(data['maxHandlingTime'], 'String');
            }
            if (data.hasOwnProperty('maxTransitTime')) {
                obj['maxTransitTime'] = ApiClient.convertToType(data['maxTransitTime'], 'String');
            }
            if (data.hasOwnProperty('minHandlingTime')) {
                obj['minHandlingTime'] = ApiClient.convertToType(data['minHandlingTime'], 'String');
            }
            if (data.hasOwnProperty('minTransitTime')) {
                obj['minTransitTime'] = ApiClient.convertToType(data['minTransitTime'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = Price.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = ApiClient.convertToType(data['service'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductShipping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductShipping</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['locationGroupName'] && !(typeof data['locationGroupName'] === 'string' || data['locationGroupName'] instanceof String)) {
            throw new Error("Expected the field `locationGroupName` to be a primitive type in the JSON string but got " + data['locationGroupName']);
        }
        // ensure the json data is a string
        if (data['locationId'] && !(typeof data['locationId'] === 'string' || data['locationId'] instanceof String)) {
            throw new Error("Expected the field `locationId` to be a primitive type in the JSON string but got " + data['locationId']);
        }
        // ensure the json data is a string
        if (data['maxHandlingTime'] && !(typeof data['maxHandlingTime'] === 'string' || data['maxHandlingTime'] instanceof String)) {
            throw new Error("Expected the field `maxHandlingTime` to be a primitive type in the JSON string but got " + data['maxHandlingTime']);
        }
        // ensure the json data is a string
        if (data['maxTransitTime'] && !(typeof data['maxTransitTime'] === 'string' || data['maxTransitTime'] instanceof String)) {
            throw new Error("Expected the field `maxTransitTime` to be a primitive type in the JSON string but got " + data['maxTransitTime']);
        }
        // ensure the json data is a string
        if (data['minHandlingTime'] && !(typeof data['minHandlingTime'] === 'string' || data['minHandlingTime'] instanceof String)) {
            throw new Error("Expected the field `minHandlingTime` to be a primitive type in the JSON string but got " + data['minHandlingTime']);
        }
        // ensure the json data is a string
        if (data['minTransitTime'] && !(typeof data['minTransitTime'] === 'string' || data['minTransitTime'] instanceof String)) {
            throw new Error("Expected the field `minTransitTime` to be a primitive type in the JSON string but got " + data['minTransitTime']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          Price.validateJSON(data['price']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['service'] && !(typeof data['service'] === 'string' || data['service'] instanceof String)) {
            throw new Error("Expected the field `service` to be a primitive type in the JSON string but got " + data['service']);
        }

        return true;
    }


}



/**
 * The CLDR territory code of the country to which an item will ship.
 * @member {String} country
 */
ProductShipping.prototype['country'] = undefined;

/**
 * The location where the shipping is applicable, represented by a location group name.
 * @member {String} locationGroupName
 */
ProductShipping.prototype['locationGroupName'] = undefined;

/**
 * The numeric ID of a location that the shipping rate applies to as defined in the Google Ads API.
 * @member {String} locationId
 */
ProductShipping.prototype['locationId'] = undefined;

/**
 * Maximum handling time (inclusive) between when the order is received and shipped in business days. 0 means that the order is shipped on the same day as it's received if it happens before the cut-off time. Both maxHandlingTime and maxTransitTime are required if providing shipping speeds.
 * @member {String} maxHandlingTime
 */
ProductShipping.prototype['maxHandlingTime'] = undefined;

/**
 * Maximum transit time (inclusive) between when the order has shipped and when it's delivered in business days. 0 means that the order is delivered on the same day as it ships. Both maxHandlingTime and maxTransitTime are required if providing shipping speeds.
 * @member {String} maxTransitTime
 */
ProductShipping.prototype['maxTransitTime'] = undefined;

/**
 * Minimum handling time (inclusive) between when the order is received and shipped in business days. 0 means that the order is shipped on the same day as it's received if it happens before the cut-off time. minHandlingTime can only be present together with maxHandlingTime; but it's not required if maxHandlingTime is present.
 * @member {String} minHandlingTime
 */
ProductShipping.prototype['minHandlingTime'] = undefined;

/**
 * Minimum transit time (inclusive) between when the order has shipped and when it's delivered in business days. 0 means that the order is delivered on the same day as it ships. minTransitTime can only be present together with maxTransitTime; but it's not required if maxTransitTime is present.
 * @member {String} minTransitTime
 */
ProductShipping.prototype['minTransitTime'] = undefined;

/**
 * The postal code range that the shipping rate applies to, represented by a postal code, a postal code prefix followed by a * wildcard, a range between two postal codes or two postal code prefixes of equal length.
 * @member {String} postalCode
 */
ProductShipping.prototype['postalCode'] = undefined;

/**
 * @member {module:model/Price} price
 */
ProductShipping.prototype['price'] = undefined;

/**
 * The geographic region to which a shipping rate applies.
 * @member {String} region
 */
ProductShipping.prototype['region'] = undefined;

/**
 * A free-form description of the service class or delivery speed.
 * @member {String} service
 */
ProductShipping.prototype['service'] = undefined;






export default ProductShipping;

