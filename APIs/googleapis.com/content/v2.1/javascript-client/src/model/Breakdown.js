/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BreakdownRegion from './BreakdownRegion';

/**
 * The Breakdown model module.
 * @module model/Breakdown
 * @version v2.1
 */
class Breakdown {
    /**
     * Constructs a new <code>Breakdown</code>.
     * A detailed impact breakdown for a group of regions where the impact of the issue on different shopping destinations is the same.
     * @alias module:model/Breakdown
     */
    constructor() { 
        
        Breakdown.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Breakdown</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Breakdown} obj Optional instance to populate.
     * @return {module:model/Breakdown} The populated <code>Breakdown</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Breakdown();

            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], ['String']);
            }
            if (data.hasOwnProperty('regions')) {
                obj['regions'] = ApiClient.convertToType(data['regions'], [BreakdownRegion]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Breakdown</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Breakdown</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['details'])) {
            throw new Error("Expected the field `details` to be an array in the JSON data but got " + data['details']);
        }
        if (data['regions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['regions'])) {
                throw new Error("Expected the field `regions` to be an array in the JSON data but got " + data['regions']);
            }
            // validate the optional field `regions` (array)
            for (const item of data['regions']) {
                BreakdownRegion.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Human readable, localized description of issue's effect on different targets. Should be rendered as a list. For example: * \"Products not showing in ads\" * \"Products not showing organically\"
 * @member {Array.<String>} details
 */
Breakdown.prototype['details'] = undefined;

/**
 * Lists of regions. Should be rendered as a title for this group of details. The full list should be shown to merchant. If the list is too long, it is recommended to make it expandable.
 * @member {Array.<module:model/BreakdownRegion>} regions
 */
Breakdown.prototype['regions'] = undefined;






export default Breakdown;

