/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Price from './Price';
import UnitInvoiceAdditionalCharge from './UnitInvoiceAdditionalCharge';
import UnitInvoiceTaxLine from './UnitInvoiceTaxLine';

/**
 * The UnitInvoice model module.
 * @module model/UnitInvoice
 * @version v2.1
 */
class UnitInvoice {
    /**
     * Constructs a new <code>UnitInvoice</code>.
     * @alias module:model/UnitInvoice
     */
    constructor() { 
        
        UnitInvoice.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UnitInvoice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UnitInvoice} obj Optional instance to populate.
     * @return {module:model/UnitInvoice} The populated <code>UnitInvoice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UnitInvoice();

            if (data.hasOwnProperty('additionalCharges')) {
                obj['additionalCharges'] = ApiClient.convertToType(data['additionalCharges'], [UnitInvoiceAdditionalCharge]);
            }
            if (data.hasOwnProperty('unitPrice')) {
                obj['unitPrice'] = Price.constructFromObject(data['unitPrice']);
            }
            if (data.hasOwnProperty('unitPriceTaxes')) {
                obj['unitPriceTaxes'] = ApiClient.convertToType(data['unitPriceTaxes'], [UnitInvoiceTaxLine]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UnitInvoice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UnitInvoice</code>.
     */
    static validateJSON(data) {
        if (data['additionalCharges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalCharges'])) {
                throw new Error("Expected the field `additionalCharges` to be an array in the JSON data but got " + data['additionalCharges']);
            }
            // validate the optional field `additionalCharges` (array)
            for (const item of data['additionalCharges']) {
                UnitInvoiceAdditionalCharge.validateJSON(item);
            };
        }
        // validate the optional field `unitPrice`
        if (data['unitPrice']) { // data not null
          Price.validateJSON(data['unitPrice']);
        }
        if (data['unitPriceTaxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['unitPriceTaxes'])) {
                throw new Error("Expected the field `unitPriceTaxes` to be an array in the JSON data but got " + data['unitPriceTaxes']);
            }
            // validate the optional field `unitPriceTaxes` (array)
            for (const item of data['unitPriceTaxes']) {
                UnitInvoiceTaxLine.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Additional charges for a unit, for example, shipping costs.
 * @member {Array.<module:model/UnitInvoiceAdditionalCharge>} additionalCharges
 */
UnitInvoice.prototype['additionalCharges'] = undefined;

/**
 * @member {module:model/Price} unitPrice
 */
UnitInvoice.prototype['unitPrice'] = undefined;

/**
 * Tax amounts to apply to the unit price.
 * @member {Array.<module:model/UnitInvoiceTaxLine>} unitPriceTaxes
 */
UnitInvoice.prototype['unitPriceTaxes'] = undefined;






export default UnitInvoice;

