/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LiaOmnichannelExperience from './LiaOmnichannelExperience';
import LiaSettings from './LiaSettings';

/**
 * The LiasettingsCustomBatchRequestEntry model module.
 * @module model/LiasettingsCustomBatchRequestEntry
 * @version v2.1
 */
class LiasettingsCustomBatchRequestEntry {
    /**
     * Constructs a new <code>LiasettingsCustomBatchRequestEntry</code>.
     * @alias module:model/LiasettingsCustomBatchRequestEntry
     */
    constructor() { 
        
        LiasettingsCustomBatchRequestEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LiasettingsCustomBatchRequestEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiasettingsCustomBatchRequestEntry} obj Optional instance to populate.
     * @return {module:model/LiasettingsCustomBatchRequestEntry} The populated <code>LiasettingsCustomBatchRequestEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiasettingsCustomBatchRequestEntry();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('batchId')) {
                obj['batchId'] = ApiClient.convertToType(data['batchId'], 'Number');
            }
            if (data.hasOwnProperty('contactEmail')) {
                obj['contactEmail'] = ApiClient.convertToType(data['contactEmail'], 'String');
            }
            if (data.hasOwnProperty('contactName')) {
                obj['contactName'] = ApiClient.convertToType(data['contactName'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('gmbEmail')) {
                obj['gmbEmail'] = ApiClient.convertToType(data['gmbEmail'], 'String');
            }
            if (data.hasOwnProperty('liaSettings')) {
                obj['liaSettings'] = LiaSettings.constructFromObject(data['liaSettings']);
            }
            if (data.hasOwnProperty('merchantId')) {
                obj['merchantId'] = ApiClient.convertToType(data['merchantId'], 'String');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('omnichannelExperience')) {
                obj['omnichannelExperience'] = LiaOmnichannelExperience.constructFromObject(data['omnichannelExperience']);
            }
            if (data.hasOwnProperty('posDataProviderId')) {
                obj['posDataProviderId'] = ApiClient.convertToType(data['posDataProviderId'], 'String');
            }
            if (data.hasOwnProperty('posExternalAccountId')) {
                obj['posExternalAccountId'] = ApiClient.convertToType(data['posExternalAccountId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiasettingsCustomBatchRequestEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiasettingsCustomBatchRequestEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['contactEmail'] && !(typeof data['contactEmail'] === 'string' || data['contactEmail'] instanceof String)) {
            throw new Error("Expected the field `contactEmail` to be a primitive type in the JSON string but got " + data['contactEmail']);
        }
        // ensure the json data is a string
        if (data['contactName'] && !(typeof data['contactName'] === 'string' || data['contactName'] instanceof String)) {
            throw new Error("Expected the field `contactName` to be a primitive type in the JSON string but got " + data['contactName']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['gmbEmail'] && !(typeof data['gmbEmail'] === 'string' || data['gmbEmail'] instanceof String)) {
            throw new Error("Expected the field `gmbEmail` to be a primitive type in the JSON string but got " + data['gmbEmail']);
        }
        // validate the optional field `liaSettings`
        if (data['liaSettings']) { // data not null
          LiaSettings.validateJSON(data['liaSettings']);
        }
        // ensure the json data is a string
        if (data['merchantId'] && !(typeof data['merchantId'] === 'string' || data['merchantId'] instanceof String)) {
            throw new Error("Expected the field `merchantId` to be a primitive type in the JSON string but got " + data['merchantId']);
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // validate the optional field `omnichannelExperience`
        if (data['omnichannelExperience']) { // data not null
          LiaOmnichannelExperience.validateJSON(data['omnichannelExperience']);
        }
        // ensure the json data is a string
        if (data['posDataProviderId'] && !(typeof data['posDataProviderId'] === 'string' || data['posDataProviderId'] instanceof String)) {
            throw new Error("Expected the field `posDataProviderId` to be a primitive type in the JSON string but got " + data['posDataProviderId']);
        }
        // ensure the json data is a string
        if (data['posExternalAccountId'] && !(typeof data['posExternalAccountId'] === 'string' || data['posExternalAccountId'] instanceof String)) {
            throw new Error("Expected the field `posExternalAccountId` to be a primitive type in the JSON string but got " + data['posExternalAccountId']);
        }

        return true;
    }


}



/**
 * The ID of the account for which to get/update account LIA settings.
 * @member {String} accountId
 */
LiasettingsCustomBatchRequestEntry.prototype['accountId'] = undefined;

/**
 * An entry ID, unique within the batch request.
 * @member {Number} batchId
 */
LiasettingsCustomBatchRequestEntry.prototype['batchId'] = undefined;

/**
 * Inventory validation contact email. Required only for SetInventoryValidationContact.
 * @member {String} contactEmail
 */
LiasettingsCustomBatchRequestEntry.prototype['contactEmail'] = undefined;

/**
 * Inventory validation contact name. Required only for SetInventoryValidationContact.
 * @member {String} contactName
 */
LiasettingsCustomBatchRequestEntry.prototype['contactName'] = undefined;

/**
 * The country code. Required only for RequestInventoryVerification.
 * @member {String} country
 */
LiasettingsCustomBatchRequestEntry.prototype['country'] = undefined;

/**
 * The Business Profile. Required only for RequestGmbAccess.
 * @member {String} gmbEmail
 */
LiasettingsCustomBatchRequestEntry.prototype['gmbEmail'] = undefined;

/**
 * @member {module:model/LiaSettings} liaSettings
 */
LiasettingsCustomBatchRequestEntry.prototype['liaSettings'] = undefined;

/**
 * The ID of the managing account.
 * @member {String} merchantId
 */
LiasettingsCustomBatchRequestEntry.prototype['merchantId'] = undefined;

/**
 * The method of the batch entry. Acceptable values are: - \"`get`\" - \"`getAccessibleGmbAccounts`\" - \"`requestGmbAccess`\" - \"`requestInventoryVerification`\" - \"`setInventoryVerificationContact`\" - \"`update`\" 
 * @member {String} method
 */
LiasettingsCustomBatchRequestEntry.prototype['method'] = undefined;

/**
 * @member {module:model/LiaOmnichannelExperience} omnichannelExperience
 */
LiasettingsCustomBatchRequestEntry.prototype['omnichannelExperience'] = undefined;

/**
 * The ID of POS data provider. Required only for SetPosProvider.
 * @member {String} posDataProviderId
 */
LiasettingsCustomBatchRequestEntry.prototype['posDataProviderId'] = undefined;

/**
 * The account ID by which this merchant is known to the POS provider.
 * @member {String} posExternalAccountId
 */
LiasettingsCustomBatchRequestEntry.prototype['posExternalAccountId'] = undefined;






export default LiasettingsCustomBatchRequestEntry;

