/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PriceCompetitiveness model module.
 * @module model/PriceCompetitiveness
 * @version v2.1
 */
class PriceCompetitiveness {
    /**
     * Constructs a new <code>PriceCompetitiveness</code>.
     * Price competitiveness fields requested by the merchant in the query. Field values are only set if the merchant queries &#x60;PriceCompetitivenessProductView&#x60;. https://support.google.com/merchants/answer/9626903
     * @alias module:model/PriceCompetitiveness
     */
    constructor() { 
        
        PriceCompetitiveness.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PriceCompetitiveness</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PriceCompetitiveness} obj Optional instance to populate.
     * @return {module:model/PriceCompetitiveness} The populated <code>PriceCompetitiveness</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PriceCompetitiveness();

            if (data.hasOwnProperty('benchmarkPriceCurrencyCode')) {
                obj['benchmarkPriceCurrencyCode'] = ApiClient.convertToType(data['benchmarkPriceCurrencyCode'], 'String');
            }
            if (data.hasOwnProperty('benchmarkPriceMicros')) {
                obj['benchmarkPriceMicros'] = ApiClient.convertToType(data['benchmarkPriceMicros'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PriceCompetitiveness</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PriceCompetitiveness</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['benchmarkPriceCurrencyCode'] && !(typeof data['benchmarkPriceCurrencyCode'] === 'string' || data['benchmarkPriceCurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `benchmarkPriceCurrencyCode` to be a primitive type in the JSON string but got " + data['benchmarkPriceCurrencyCode']);
        }
        // ensure the json data is a string
        if (data['benchmarkPriceMicros'] && !(typeof data['benchmarkPriceMicros'] === 'string' || data['benchmarkPriceMicros'] instanceof String)) {
            throw new Error("Expected the field `benchmarkPriceMicros` to be a primitive type in the JSON string but got " + data['benchmarkPriceMicros']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }

        return true;
    }


}



/**
 * The price benchmark currency (ISO 4217 code).
 * @member {String} benchmarkPriceCurrencyCode
 */
PriceCompetitiveness.prototype['benchmarkPriceCurrencyCode'] = undefined;

/**
 * The latest available price benchmark in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) for the product's catalog in the benchmark country.
 * @member {String} benchmarkPriceMicros
 */
PriceCompetitiveness.prototype['benchmarkPriceMicros'] = undefined;

/**
 * The country of the price benchmark (ISO 3166 code).
 * @member {String} countryCode
 */
PriceCompetitiveness.prototype['countryCode'] = undefined;






export default PriceCompetitiveness;

