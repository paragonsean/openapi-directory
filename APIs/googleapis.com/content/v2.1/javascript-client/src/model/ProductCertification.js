/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductCertification model module.
 * @module model/ProductCertification
 * @version v2.1
 */
class ProductCertification {
    /**
     * Constructs a new <code>ProductCertification</code>.
     * Product [certification](https://support.google.com/merchants/answer/13528839), introduced for EU energy efficiency labeling compliance using the [EU EPREL](https://eprel.ec.europa.eu/screen/home) database.
     * @alias module:model/ProductCertification
     */
    constructor() { 
        
        ProductCertification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductCertification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductCertification} obj Optional instance to populate.
     * @return {module:model/ProductCertification} The populated <code>ProductCertification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductCertification();

            if (data.hasOwnProperty('certificationAuthority')) {
                obj['certificationAuthority'] = ApiClient.convertToType(data['certificationAuthority'], 'String');
            }
            if (data.hasOwnProperty('certificationCode')) {
                obj['certificationCode'] = ApiClient.convertToType(data['certificationCode'], 'String');
            }
            if (data.hasOwnProperty('certificationName')) {
                obj['certificationName'] = ApiClient.convertToType(data['certificationName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductCertification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductCertification</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['certificationAuthority'] && !(typeof data['certificationAuthority'] === 'string' || data['certificationAuthority'] instanceof String)) {
            throw new Error("Expected the field `certificationAuthority` to be a primitive type in the JSON string but got " + data['certificationAuthority']);
        }
        // ensure the json data is a string
        if (data['certificationCode'] && !(typeof data['certificationCode'] === 'string' || data['certificationCode'] instanceof String)) {
            throw new Error("Expected the field `certificationCode` to be a primitive type in the JSON string but got " + data['certificationCode']);
        }
        // ensure the json data is a string
        if (data['certificationName'] && !(typeof data['certificationName'] === 'string' || data['certificationName'] instanceof String)) {
            throw new Error("Expected the field `certificationName` to be a primitive type in the JSON string but got " + data['certificationName']);
        }

        return true;
    }


}



/**
 * The certification authority, for example \"European_Commission\". Maximum length is 2000 characters.
 * @member {String} certificationAuthority
 */
ProductCertification.prototype['certificationAuthority'] = undefined;

/**
 * The certification code, for eaxample \"123456\". Maximum length is 2000 characters.
 * @member {String} certificationCode
 */
ProductCertification.prototype['certificationCode'] = undefined;

/**
 * The name of the certification, for example \"EPREL\". Maximum length is 2000 characters.
 * @member {String} certificationName
 */
ProductCertification.prototype['certificationName'] = undefined;






export default ProductCertification;

