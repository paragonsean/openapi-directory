/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReturnPolicyOnlinePolicy from './ReturnPolicyOnlinePolicy';
import ReturnPolicyOnlineRestockingFee from './ReturnPolicyOnlineRestockingFee';
import ReturnPolicyOnlineReturnReasonCategoryInfo from './ReturnPolicyOnlineReturnReasonCategoryInfo';

/**
 * The ReturnPolicyOnline model module.
 * @module model/ReturnPolicyOnline
 * @version v2.1
 */
class ReturnPolicyOnline {
    /**
     * Constructs a new <code>ReturnPolicyOnline</code>.
     * Return policy online object. This is currently used to represent return policies for ads and free listings programs.
     * @alias module:model/ReturnPolicyOnline
     */
    constructor() { 
        
        ReturnPolicyOnline.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReturnPolicyOnline</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReturnPolicyOnline} obj Optional instance to populate.
     * @return {module:model/ReturnPolicyOnline} The populated <code>ReturnPolicyOnline</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReturnPolicyOnline();

            if (data.hasOwnProperty('countries')) {
                obj['countries'] = ApiClient.convertToType(data['countries'], ['String']);
            }
            if (data.hasOwnProperty('itemConditions')) {
                obj['itemConditions'] = ApiClient.convertToType(data['itemConditions'], ['String']);
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('policy')) {
                obj['policy'] = ReturnPolicyOnlinePolicy.constructFromObject(data['policy']);
            }
            if (data.hasOwnProperty('restockingFee')) {
                obj['restockingFee'] = ReturnPolicyOnlineRestockingFee.constructFromObject(data['restockingFee']);
            }
            if (data.hasOwnProperty('returnMethods')) {
                obj['returnMethods'] = ApiClient.convertToType(data['returnMethods'], ['String']);
            }
            if (data.hasOwnProperty('returnPolicyId')) {
                obj['returnPolicyId'] = ApiClient.convertToType(data['returnPolicyId'], 'String');
            }
            if (data.hasOwnProperty('returnPolicyUri')) {
                obj['returnPolicyUri'] = ApiClient.convertToType(data['returnPolicyUri'], 'String');
            }
            if (data.hasOwnProperty('returnReasonCategoryInfo')) {
                obj['returnReasonCategoryInfo'] = ApiClient.convertToType(data['returnReasonCategoryInfo'], [ReturnPolicyOnlineReturnReasonCategoryInfo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReturnPolicyOnline</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReturnPolicyOnline</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['countries'])) {
            throw new Error("Expected the field `countries` to be an array in the JSON data but got " + data['countries']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['itemConditions'])) {
            throw new Error("Expected the field `itemConditions` to be an array in the JSON data but got " + data['itemConditions']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `policy`
        if (data['policy']) { // data not null
          ReturnPolicyOnlinePolicy.validateJSON(data['policy']);
        }
        // validate the optional field `restockingFee`
        if (data['restockingFee']) { // data not null
          ReturnPolicyOnlineRestockingFee.validateJSON(data['restockingFee']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['returnMethods'])) {
            throw new Error("Expected the field `returnMethods` to be an array in the JSON data but got " + data['returnMethods']);
        }
        // ensure the json data is a string
        if (data['returnPolicyId'] && !(typeof data['returnPolicyId'] === 'string' || data['returnPolicyId'] instanceof String)) {
            throw new Error("Expected the field `returnPolicyId` to be a primitive type in the JSON string but got " + data['returnPolicyId']);
        }
        // ensure the json data is a string
        if (data['returnPolicyUri'] && !(typeof data['returnPolicyUri'] === 'string' || data['returnPolicyUri'] instanceof String)) {
            throw new Error("Expected the field `returnPolicyUri` to be a primitive type in the JSON string but got " + data['returnPolicyUri']);
        }
        if (data['returnReasonCategoryInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['returnReasonCategoryInfo'])) {
                throw new Error("Expected the field `returnReasonCategoryInfo` to be an array in the JSON data but got " + data['returnReasonCategoryInfo']);
            }
            // validate the optional field `returnReasonCategoryInfo` (array)
            for (const item of data['returnReasonCategoryInfo']) {
                ReturnPolicyOnlineReturnReasonCategoryInfo.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The countries of sale where the return policy is applicable. The values must be a valid 2 letter ISO 3166 code, e.g. \"US\".
 * @member {Array.<String>} countries
 */
ReturnPolicyOnline.prototype['countries'] = undefined;

/**
 * The item conditions that are accepted for returns. This is required to not be empty unless the type of return policy is noReturns.
 * @member {Array.<module:model/ReturnPolicyOnline.ItemConditionsEnum>} itemConditions
 */
ReturnPolicyOnline.prototype['itemConditions'] = undefined;

/**
 * The unique user-defined label of the return policy. The same label cannot be used in different return policies for the same country. Policies with the label 'default' will apply to all products, unless a product specifies a return_policy_label attribute.
 * @member {String} label
 */
ReturnPolicyOnline.prototype['label'] = undefined;

/**
 * The name of the policy as shown in Merchant Center.
 * @member {String} name
 */
ReturnPolicyOnline.prototype['name'] = undefined;

/**
 * @member {module:model/ReturnPolicyOnlinePolicy} policy
 */
ReturnPolicyOnline.prototype['policy'] = undefined;

/**
 * @member {module:model/ReturnPolicyOnlineRestockingFee} restockingFee
 */
ReturnPolicyOnline.prototype['restockingFee'] = undefined;

/**
 * The return methods of how customers can return an item. This value is required to not be empty unless the type of return policy is noReturns.
 * @member {Array.<module:model/ReturnPolicyOnline.ReturnMethodsEnum>} returnMethods
 */
ReturnPolicyOnline.prototype['returnMethods'] = undefined;

/**
 * Output only. Return policy ID generated by Google.
 * @member {String} returnPolicyId
 */
ReturnPolicyOnline.prototype['returnPolicyId'] = undefined;

/**
 * The return policy uri. This can used by Google to do a sanity check for the policy.
 * @member {String} returnPolicyUri
 */
ReturnPolicyOnline.prototype['returnPolicyUri'] = undefined;

/**
 * The return reason category information. This required to not be empty unless the type of return policy is noReturns.
 * @member {Array.<module:model/ReturnPolicyOnlineReturnReasonCategoryInfo>} returnReasonCategoryInfo
 */
ReturnPolicyOnline.prototype['returnReasonCategoryInfo'] = undefined;





/**
 * Allowed values for the <code>itemConditions</code> property.
 * @enum {String}
 * @readonly
 */
ReturnPolicyOnline['ItemConditionsEnum'] = {

    /**
     * value: "ITEM_CONDITION_UNSPECIFIED"
     * @const
     */
    "ITEM_CONDITION_UNSPECIFIED": "ITEM_CONDITION_UNSPECIFIED",

    /**
     * value: "NEW"
     * @const
     */
    "NEW": "NEW",

    /**
     * value: "USED"
     * @const
     */
    "USED": "USED"
};


/**
 * Allowed values for the <code>returnMethods</code> property.
 * @enum {String}
 * @readonly
 */
ReturnPolicyOnline['ReturnMethodsEnum'] = {

    /**
     * value: "RETURN_METHOD_UNSPECIFIED"
     * @const
     */
    "RETURN_METHOD_UNSPECIFIED": "RETURN_METHOD_UNSPECIFIED",

    /**
     * value: "BY_MAIL"
     * @const
     */
    "BY_MAIL": "BY_MAIL",

    /**
     * value: "IN_STORE"
     * @const
     */
    "IN_STORE": "IN_STORE",

    /**
     * value: "AT_A_KIOSK"
     * @const
     */
    "AT_A_KIOSK": "AT_A_KIOSK"
};



export default ReturnPolicyOnline;

