/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomAttribute from './CustomAttribute';
import Price from './Price';

/**
 * The RegionalInventory model module.
 * @module model/RegionalInventory
 * @version v2.1
 */
class RegionalInventory {
    /**
     * Constructs a new <code>RegionalInventory</code>.
     * Regional inventory resource. contains the regional name and all attributes which are overridden for the specified region.
     * @alias module:model/RegionalInventory
     */
    constructor() { 
        
        RegionalInventory.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RegionalInventory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegionalInventory} obj Optional instance to populate.
     * @return {module:model/RegionalInventory} The populated <code>RegionalInventory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegionalInventory();

            if (data.hasOwnProperty('availability')) {
                obj['availability'] = ApiClient.convertToType(data['availability'], 'String');
            }
            if (data.hasOwnProperty('customAttributes')) {
                obj['customAttributes'] = ApiClient.convertToType(data['customAttributes'], [CustomAttribute]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = Price.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('regionId')) {
                obj['regionId'] = ApiClient.convertToType(data['regionId'], 'String');
            }
            if (data.hasOwnProperty('salePrice')) {
                obj['salePrice'] = Price.constructFromObject(data['salePrice']);
            }
            if (data.hasOwnProperty('salePriceEffectiveDate')) {
                obj['salePriceEffectiveDate'] = ApiClient.convertToType(data['salePriceEffectiveDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegionalInventory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegionalInventory</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['availability'] && !(typeof data['availability'] === 'string' || data['availability'] instanceof String)) {
            throw new Error("Expected the field `availability` to be a primitive type in the JSON string but got " + data['availability']);
        }
        if (data['customAttributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customAttributes'])) {
                throw new Error("Expected the field `customAttributes` to be an array in the JSON data but got " + data['customAttributes']);
            }
            // validate the optional field `customAttributes` (array)
            for (const item of data['customAttributes']) {
                CustomAttribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          Price.validateJSON(data['price']);
        }
        // ensure the json data is a string
        if (data['regionId'] && !(typeof data['regionId'] === 'string' || data['regionId'] instanceof String)) {
            throw new Error("Expected the field `regionId` to be a primitive type in the JSON string but got " + data['regionId']);
        }
        // validate the optional field `salePrice`
        if (data['salePrice']) { // data not null
          Price.validateJSON(data['salePrice']);
        }
        // ensure the json data is a string
        if (data['salePriceEffectiveDate'] && !(typeof data['salePriceEffectiveDate'] === 'string' || data['salePriceEffectiveDate'] instanceof String)) {
            throw new Error("Expected the field `salePriceEffectiveDate` to be a primitive type in the JSON string but got " + data['salePriceEffectiveDate']);
        }

        return true;
    }


}



/**
 * The availability of the product.
 * @member {String} availability
 */
RegionalInventory.prototype['availability'] = undefined;

/**
 * A list of custom (merchant-provided) attributes. It can also be used for submitting any attribute of the feed specification in its generic form.
 * @member {Array.<module:model/CustomAttribute>} customAttributes
 */
RegionalInventory.prototype['customAttributes'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string \"`content#regionalInventory`\".
 * @member {String} kind
 */
RegionalInventory.prototype['kind'] = undefined;

/**
 * @member {module:model/Price} price
 */
RegionalInventory.prototype['price'] = undefined;

/**
 * The ID uniquely identifying each region.
 * @member {String} regionId
 */
RegionalInventory.prototype['regionId'] = undefined;

/**
 * @member {module:model/Price} salePrice
 */
RegionalInventory.prototype['salePrice'] = undefined;

/**
 * A date range represented by a pair of ISO 8601 dates separated by a space, comma, or slash. Both dates might be specified as 'null' if undecided.
 * @member {String} salePriceEffectiveDate
 */
RegionalInventory.prototype['salePriceEffectiveDate'] = undefined;






export default RegionalInventory;

