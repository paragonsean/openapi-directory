/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DatafeedStatus from '../model/DatafeedStatus';
import DatafeedstatusesCustomBatchRequest from '../model/DatafeedstatusesCustomBatchRequest';
import DatafeedstatusesCustomBatchResponse from '../model/DatafeedstatusesCustomBatchResponse';
import DatafeedstatusesListResponse from '../model/DatafeedstatusesListResponse';

/**
* Datafeedstatuses service.
* @module api/DatafeedstatusesApi
* @version v2.1
*/
export default class DatafeedstatusesApi {

    /**
    * Constructs a new DatafeedstatusesApi. 
    * @alias module:api/DatafeedstatusesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the contentDatafeedstatusesCustombatch operation.
     * @callback module:api/DatafeedstatusesApi~contentDatafeedstatusesCustombatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatafeedstatusesCustomBatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets multiple Merchant Center datafeed statuses in a single request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/DatafeedstatusesCustomBatchRequest} [datafeedstatusesCustomBatchRequest] 
     * @param {module:api/DatafeedstatusesApi~contentDatafeedstatusesCustombatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatafeedstatusesCustomBatchResponse}
     */
    contentDatafeedstatusesCustombatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['datafeedstatusesCustomBatchRequest'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatafeedstatusesCustomBatchResponse;
      return this.apiClient.callApi(
        '/datafeedstatuses/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentDatafeedstatusesGet operation.
     * @callback module:api/DatafeedstatusesApi~contentDatafeedstatusesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatafeedStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the status of a datafeed from your Merchant Center account.
     * @param {String} merchantId The ID of the account that manages the datafeed. This account cannot be a multi-client account.
     * @param {String} datafeedId The ID of the datafeed.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [country] Deprecated. Use `feedLabel` instead. The country to get the datafeed status for. If this parameter is provided then `language` must also be provided. Note that this parameter is required for feeds targeting multiple countries and languages, since a feed may have a different status for each target.
     * @param {String} [feedLabel] The feed label to get the datafeed status for. If this parameter is provided then `language` must also be provided. Note that this parameter is required for feeds targeting multiple countries and languages, since a feed may have a different status for each target.
     * @param {String} [language] The language to get the datafeed status for. If this parameter is provided then `country` must also be provided. Note that this parameter is required for feeds targeting multiple countries and languages, since a feed may have a different status for each target.
     * @param {module:api/DatafeedstatusesApi~contentDatafeedstatusesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatafeedStatus}
     */
    contentDatafeedstatusesGet(merchantId, datafeedId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentDatafeedstatusesGet");
      }
      // verify the required parameter 'datafeedId' is set
      if (datafeedId === undefined || datafeedId === null) {
        throw new Error("Missing the required parameter 'datafeedId' when calling contentDatafeedstatusesGet");
      }

      let pathParams = {
        'merchantId': merchantId,
        'datafeedId': datafeedId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'country': opts['country'],
        'feedLabel': opts['feedLabel'],
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatafeedStatus;
      return this.apiClient.callApi(
        '/{merchantId}/datafeedstatuses/{datafeedId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentDatafeedstatusesList operation.
     * @callback module:api/DatafeedstatusesApi~contentDatafeedstatusesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatafeedstatusesListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the statuses of the datafeeds in your Merchant Center account.
     * @param {String} merchantId The ID of the account that manages the datafeeds. This account cannot be a multi-client account.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [maxResults] The maximum number of products to return in the response, used for paging.
     * @param {String} [pageToken] The token returned by the previous request.
     * @param {module:api/DatafeedstatusesApi~contentDatafeedstatusesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatafeedstatusesListResponse}
     */
    contentDatafeedstatusesList(merchantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentDatafeedstatusesList");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatafeedstatusesListResponse;
      return this.apiClient.callApi(
        '/{merchantId}/datafeedstatuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
