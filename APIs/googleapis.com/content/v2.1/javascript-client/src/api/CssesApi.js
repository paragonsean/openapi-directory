/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Css from '../model/Css';
import LabelIds from '../model/LabelIds';
import ListCssesResponse from '../model/ListCssesResponse';

/**
* Csses service.
* @module api/CssesApi
* @version v2.1
*/
export default class CssesApi {

    /**
    * Constructs a new CssesApi. 
    * @alias module:api/CssesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the contentCssesGet operation.
     * @callback module:api/CssesApi~contentCssesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Css} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a single CSS domain by ID.
     * @param {String} cssGroupId Required. The ID of the managing account. If this parameter is not the same as [cssDomainId](#cssDomainId), then this ID must be a CSS group ID and `cssDomainId` must be the ID of a CSS domain affiliated with this group.
     * @param {String} cssDomainId Required. The ID of the CSS domain to return.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/CssesApi~contentCssesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Css}
     */
    contentCssesGet(cssGroupId, cssDomainId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cssGroupId' is set
      if (cssGroupId === undefined || cssGroupId === null) {
        throw new Error("Missing the required parameter 'cssGroupId' when calling contentCssesGet");
      }
      // verify the required parameter 'cssDomainId' is set
      if (cssDomainId === undefined || cssDomainId === null) {
        throw new Error("Missing the required parameter 'cssDomainId' when calling contentCssesGet");
      }

      let pathParams = {
        'cssGroupId': cssGroupId,
        'cssDomainId': cssDomainId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Css;
      return this.apiClient.callApi(
        '/{cssGroupId}/csses/{cssDomainId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentCssesList operation.
     * @callback module:api/CssesApi~contentCssesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCssesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists CSS domains affiliated with a CSS group.
     * @param {String} cssGroupId Required. The CSS group ID of CSS domains to be listed.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] The maximum number of CSS domains to return. The service may return fewer than this value. If unspecified, at most 50 CSS domains will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {String} [pageToken] A page token, received from a previous `ListCsses` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListCsses` must match the call that provided the page token.
     * @param {module:api/CssesApi~contentCssesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCssesResponse}
     */
    contentCssesList(cssGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cssGroupId' is set
      if (cssGroupId === undefined || cssGroupId === null) {
        throw new Error("Missing the required parameter 'cssGroupId' when calling contentCssesList");
      }

      let pathParams = {
        'cssGroupId': cssGroupId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCssesResponse;
      return this.apiClient.callApi(
        '/{cssGroupId}/csses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentCssesUpdatelabels operation.
     * @callback module:api/CssesApi~contentCssesUpdatelabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Css} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates labels that are assigned to a CSS domain by its CSS group.
     * @param {String} cssGroupId Required. The CSS group ID of the updated CSS domain.
     * @param {String} cssDomainId Required. The ID of the updated CSS domain.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/LabelIds} [labelIds] 
     * @param {module:api/CssesApi~contentCssesUpdatelabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Css}
     */
    contentCssesUpdatelabels(cssGroupId, cssDomainId, opts, callback) {
      opts = opts || {};
      let postBody = opts['labelIds'];
      // verify the required parameter 'cssGroupId' is set
      if (cssGroupId === undefined || cssGroupId === null) {
        throw new Error("Missing the required parameter 'cssGroupId' when calling contentCssesUpdatelabels");
      }
      // verify the required parameter 'cssDomainId' is set
      if (cssDomainId === undefined || cssDomainId === null) {
        throw new Error("Missing the required parameter 'cssDomainId' when calling contentCssesUpdatelabels");
      }

      let pathParams = {
        'cssGroupId': cssGroupId,
        'cssDomainId': cssDomainId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Css;
      return this.apiClient.callApi(
        '/{cssGroupId}/csses/{cssDomainId}/updatelabels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
