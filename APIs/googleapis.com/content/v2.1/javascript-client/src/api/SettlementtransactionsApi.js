/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SettlementtransactionsListResponse from '../model/SettlementtransactionsListResponse';

/**
* Settlementtransactions service.
* @module api/SettlementtransactionsApi
* @version v2.1
*/
export default class SettlementtransactionsApi {

    /**
    * Constructs a new SettlementtransactionsApi. 
    * @alias module:api/SettlementtransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the contentSettlementtransactionsList operation.
     * @callback module:api/SettlementtransactionsApi~contentSettlementtransactionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SettlementtransactionsListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of transactions for the settlement.
     * @param {String} merchantId The Merchant Center account to list transactions for.
     * @param {String} settlementId The Google-provided ID of the settlement.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [maxResults] The maximum number of transactions to return in the response, used for paging. The default value is 200 transactions per page, and the maximum allowed value is 5000 transactions per page.
     * @param {String} [pageToken] The token returned by the previous request.
     * @param {Array.<String>} [transactionIds] The list of transactions to return. If not set, all transactions will be returned.
     * @param {module:api/SettlementtransactionsApi~contentSettlementtransactionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SettlementtransactionsListResponse}
     */
    contentSettlementtransactionsList(merchantId, settlementId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentSettlementtransactionsList");
      }
      // verify the required parameter 'settlementId' is set
      if (settlementId === undefined || settlementId === null) {
        throw new Error("Missing the required parameter 'settlementId' when calling contentSettlementtransactionsList");
      }

      let pathParams = {
        'merchantId': merchantId,
        'settlementId': settlementId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken'],
        'transactionIds': this.apiClient.buildCollectionParam(opts['transactionIds'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SettlementtransactionsListResponse;
      return this.apiClient.callApi(
        '/{merchantId}/settlementreports/{settlementId}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
