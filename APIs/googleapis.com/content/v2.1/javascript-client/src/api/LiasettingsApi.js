/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LiaOmnichannelExperience from '../model/LiaOmnichannelExperience';
import LiaSettings from '../model/LiaSettings';
import LiasettingsCustomBatchRequest from '../model/LiasettingsCustomBatchRequest';
import LiasettingsCustomBatchResponse from '../model/LiasettingsCustomBatchResponse';
import LiasettingsGetAccessibleGmbAccountsResponse from '../model/LiasettingsGetAccessibleGmbAccountsResponse';
import LiasettingsListPosDataProvidersResponse from '../model/LiasettingsListPosDataProvidersResponse';
import LiasettingsListResponse from '../model/LiasettingsListResponse';
import LiasettingsRequestGmbAccessResponse from '../model/LiasettingsRequestGmbAccessResponse';
import LiasettingsRequestInventoryVerificationResponse from '../model/LiasettingsRequestInventoryVerificationResponse';
import LiasettingsSetInventoryVerificationContactResponse from '../model/LiasettingsSetInventoryVerificationContactResponse';
import LiasettingsSetPosDataProviderResponse from '../model/LiasettingsSetPosDataProviderResponse';

/**
* Liasettings service.
* @module api/LiasettingsApi
* @version v2.1
*/
export default class LiasettingsApi {

    /**
    * Constructs a new LiasettingsApi. 
    * @alias module:api/LiasettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the contentLiasettingsCustombatch operation.
     * @callback module:api/LiasettingsApi~contentLiasettingsCustombatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiasettingsCustomBatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves and/or updates the LIA settings of multiple accounts in a single request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/LiasettingsCustomBatchRequest} [liasettingsCustomBatchRequest] 
     * @param {module:api/LiasettingsApi~contentLiasettingsCustombatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiasettingsCustomBatchResponse}
     */
    contentLiasettingsCustombatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['liasettingsCustomBatchRequest'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LiasettingsCustomBatchResponse;
      return this.apiClient.callApi(
        '/liasettings/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentLiasettingsGet operation.
     * @callback module:api/LiasettingsApi~contentLiasettingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiaSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the LIA settings of the account.
     * @param {String} merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
     * @param {String} accountId The ID of the account for which to get or update LIA settings.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/LiasettingsApi~contentLiasettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiaSettings}
     */
    contentLiasettingsGet(merchantId, accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentLiasettingsGet");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling contentLiasettingsGet");
      }

      let pathParams = {
        'merchantId': merchantId,
        'accountId': accountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiaSettings;
      return this.apiClient.callApi(
        '/{merchantId}/liasettings/{accountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentLiasettingsGetaccessiblegmbaccounts operation.
     * @callback module:api/LiasettingsApi~contentLiasettingsGetaccessiblegmbaccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiasettingsGetAccessibleGmbAccountsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of accessible Business Profiles.
     * @param {String} merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
     * @param {String} accountId The ID of the account for which to retrieve accessible Business Profiles.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/LiasettingsApi~contentLiasettingsGetaccessiblegmbaccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiasettingsGetAccessibleGmbAccountsResponse}
     */
    contentLiasettingsGetaccessiblegmbaccounts(merchantId, accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentLiasettingsGetaccessiblegmbaccounts");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling contentLiasettingsGetaccessiblegmbaccounts");
      }

      let pathParams = {
        'merchantId': merchantId,
        'accountId': accountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiasettingsGetAccessibleGmbAccountsResponse;
      return this.apiClient.callApi(
        '/{merchantId}/liasettings/{accountId}/accessiblegmbaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentLiasettingsList operation.
     * @callback module:api/LiasettingsApi~contentLiasettingsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiasettingsListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the LIA settings of the sub-accounts in your Merchant Center account.
     * @param {String} merchantId The ID of the managing account. This must be a multi-client account.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [maxResults] The maximum number of LIA settings to return in the response, used for paging.
     * @param {String} [pageToken] The token returned by the previous request.
     * @param {module:api/LiasettingsApi~contentLiasettingsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiasettingsListResponse}
     */
    contentLiasettingsList(merchantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentLiasettingsList");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiasettingsListResponse;
      return this.apiClient.callApi(
        '/{merchantId}/liasettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentLiasettingsListposdataproviders operation.
     * @callback module:api/LiasettingsApi~contentLiasettingsListposdataprovidersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiasettingsListPosDataProvidersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of POS data providers that have active settings for the all eiligible countries.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/LiasettingsApi~contentLiasettingsListposdataprovidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiasettingsListPosDataProvidersResponse}
     */
    contentLiasettingsListposdataproviders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiasettingsListPosDataProvidersResponse;
      return this.apiClient.callApi(
        '/liasettings/posdataproviders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentLiasettingsRequestgmbaccess operation.
     * @callback module:api/LiasettingsApi~contentLiasettingsRequestgmbaccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiasettingsRequestGmbAccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests access to a specified Business Profile.
     * @param {String} merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
     * @param {String} accountId The ID of the account for which Business Profile access is requested.
     * @param {String} gmbEmail The email of the Business Profile.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/LiasettingsApi~contentLiasettingsRequestgmbaccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiasettingsRequestGmbAccessResponse}
     */
    contentLiasettingsRequestgmbaccess(merchantId, accountId, gmbEmail, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentLiasettingsRequestgmbaccess");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling contentLiasettingsRequestgmbaccess");
      }
      // verify the required parameter 'gmbEmail' is set
      if (gmbEmail === undefined || gmbEmail === null) {
        throw new Error("Missing the required parameter 'gmbEmail' when calling contentLiasettingsRequestgmbaccess");
      }

      let pathParams = {
        'merchantId': merchantId,
        'accountId': accountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'gmbEmail': gmbEmail
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiasettingsRequestGmbAccessResponse;
      return this.apiClient.callApi(
        '/{merchantId}/liasettings/{accountId}/requestgmbaccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentLiasettingsRequestinventoryverification operation.
     * @callback module:api/LiasettingsApi~contentLiasettingsRequestinventoryverificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiasettingsRequestInventoryVerificationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests inventory validation for the specified country.
     * @param {String} merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
     * @param {String} accountId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} country The country for which inventory validation is requested.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/LiasettingsApi~contentLiasettingsRequestinventoryverificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiasettingsRequestInventoryVerificationResponse}
     */
    contentLiasettingsRequestinventoryverification(merchantId, accountId, country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentLiasettingsRequestinventoryverification");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling contentLiasettingsRequestinventoryverification");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling contentLiasettingsRequestinventoryverification");
      }

      let pathParams = {
        'merchantId': merchantId,
        'accountId': accountId,
        'country': country
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiasettingsRequestInventoryVerificationResponse;
      return this.apiClient.callApi(
        '/{merchantId}/liasettings/{accountId}/requestinventoryverification/{country}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentLiasettingsSetinventoryverificationcontact operation.
     * @callback module:api/LiasettingsApi~contentLiasettingsSetinventoryverificationcontactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiasettingsSetInventoryVerificationContactResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the inventory verification contract for the specified country.
     * @param {String} merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
     * @param {String} accountId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} country The country for which inventory verification is requested.
     * @param {String} language The language for which inventory verification is requested.
     * @param {String} contactName The name of the inventory verification contact.
     * @param {String} contactEmail The email of the inventory verification contact.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/LiasettingsApi~contentLiasettingsSetinventoryverificationcontactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiasettingsSetInventoryVerificationContactResponse}
     */
    contentLiasettingsSetinventoryverificationcontact(merchantId, accountId, country, language, contactName, contactEmail, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentLiasettingsSetinventoryverificationcontact");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling contentLiasettingsSetinventoryverificationcontact");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling contentLiasettingsSetinventoryverificationcontact");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling contentLiasettingsSetinventoryverificationcontact");
      }
      // verify the required parameter 'contactName' is set
      if (contactName === undefined || contactName === null) {
        throw new Error("Missing the required parameter 'contactName' when calling contentLiasettingsSetinventoryverificationcontact");
      }
      // verify the required parameter 'contactEmail' is set
      if (contactEmail === undefined || contactEmail === null) {
        throw new Error("Missing the required parameter 'contactEmail' when calling contentLiasettingsSetinventoryverificationcontact");
      }

      let pathParams = {
        'merchantId': merchantId,
        'accountId': accountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'country': country,
        'language': language,
        'contactName': contactName,
        'contactEmail': contactEmail
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiasettingsSetInventoryVerificationContactResponse;
      return this.apiClient.callApi(
        '/{merchantId}/liasettings/{accountId}/setinventoryverificationcontact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentLiasettingsSetomnichannelexperience operation.
     * @callback module:api/LiasettingsApi~contentLiasettingsSetomnichannelexperienceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiaOmnichannelExperience} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the omnichannel experience for the specified country. Only supported for merchants whose POS data provider is trusted to enable the corresponding experience. For more context, see these help articles [about LFP](https://support.google.com/merchants/answer/7676652) and [how to get started](https://support.google.com/merchants/answer/7676578) with it.
     * @param {String} merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
     * @param {String} accountId The ID of the account for which to retrieve accessible Business Profiles.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [country] The CLDR country code (for example, \"US\") for which the omnichannel experience is selected.
     * @param {String} [lsfType] The Local Store Front (LSF) type for this country. Acceptable values are: - \"`ghlsf`\" (Google-Hosted Local Store Front) - \"`mhlsfBasic`\" (Merchant-Hosted Local Store Front Basic) - \"`mhlsfFull`\" (Merchant-Hosted Local Store Front Full) More details about these types can be found here.
     * @param {Array.<String>} [pickupTypes] The Pickup types for this country. Acceptable values are: - \"`pickupToday`\" - \"`pickupLater`\" 
     * @param {module:api/LiasettingsApi~contentLiasettingsSetomnichannelexperienceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiaOmnichannelExperience}
     */
    contentLiasettingsSetomnichannelexperience(merchantId, accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentLiasettingsSetomnichannelexperience");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling contentLiasettingsSetomnichannelexperience");
      }

      let pathParams = {
        'merchantId': merchantId,
        'accountId': accountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'country': opts['country'],
        'lsfType': opts['lsfType'],
        'pickupTypes': this.apiClient.buildCollectionParam(opts['pickupTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiaOmnichannelExperience;
      return this.apiClient.callApi(
        '/{merchantId}/liasettings/{accountId}/setomnichannelexperience', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentLiasettingsSetposdataprovider operation.
     * @callback module:api/LiasettingsApi~contentLiasettingsSetposdataproviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiasettingsSetPosDataProviderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the POS data provider for the specified country.
     * @param {String} merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
     * @param {String} accountId The ID of the account for which to retrieve accessible Business Profiles.
     * @param {String} country The country for which the POS data provider is selected.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [posDataProviderId] The ID of POS data provider.
     * @param {String} [posExternalAccountId] The account ID by which this merchant is known to the POS data provider.
     * @param {module:api/LiasettingsApi~contentLiasettingsSetposdataproviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiasettingsSetPosDataProviderResponse}
     */
    contentLiasettingsSetposdataprovider(merchantId, accountId, country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentLiasettingsSetposdataprovider");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling contentLiasettingsSetposdataprovider");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling contentLiasettingsSetposdataprovider");
      }

      let pathParams = {
        'merchantId': merchantId,
        'accountId': accountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'country': country,
        'posDataProviderId': opts['posDataProviderId'],
        'posExternalAccountId': opts['posExternalAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiasettingsSetPosDataProviderResponse;
      return this.apiClient.callApi(
        '/{merchantId}/liasettings/{accountId}/setposdataprovider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentLiasettingsUpdate operation.
     * @callback module:api/LiasettingsApi~contentLiasettingsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiaSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the LIA settings of the account. Any fields that are not provided are deleted from the resource.
     * @param {String} merchantId The ID of the managing account. If this parameter is not the same as accountId, then this account must be a multi-client account and `accountId` must be the ID of a sub-account of this account.
     * @param {String} accountId The ID of the account for which to get or update LIA settings.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/LiaSettings} [liaSettings] 
     * @param {module:api/LiasettingsApi~contentLiasettingsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiaSettings}
     */
    contentLiasettingsUpdate(merchantId, accountId, opts, callback) {
      opts = opts || {};
      let postBody = opts['liaSettings'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentLiasettingsUpdate");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling contentLiasettingsUpdate");
      }

      let pathParams = {
        'merchantId': merchantId,
        'accountId': accountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LiaSettings;
      return this.apiClient.callApi(
        '/{merchantId}/liasettings/{accountId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
