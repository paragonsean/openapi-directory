/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GenerateRecommendationsResponse from '../model/GenerateRecommendationsResponse';
import ReportInteractionRequest from '../model/ReportInteractionRequest';

/**
* Recommendations service.
* @module api/RecommendationsApi
* @version v2.1
*/
export default class RecommendationsApi {

    /**
    * Constructs a new RecommendationsApi. 
    * @alias module:api/RecommendationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the contentRecommendationsGenerate operation.
     * @callback module:api/RecommendationsApi~contentRecommendationsGenerateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenerateRecommendationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates recommendations for a merchant.
     * @param {String} merchantId Required. The ID of the account to fetch recommendations for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Array.<String>} [allowedTag] Optional. List of allowed tags. Tags are a set of predefined strings that describe the category that individual recommendation types belong to. User can specify zero or more tags in this field to indicate what categories of recommendations they want to receive. Current list of supported tags: - TREND
     * @param {String} [languageCode] Optional. Language code of the client. If not set, the result will be in default language (English). This language code affects all fields prefixed with \"localized\". This should be set to ISO 639-1 country code. List of currently verified supported language code: en, fr, cs, da, de, es, it, nl, no, pl, pt, pt, fi, sv, vi, tr, th, ko, zh-CN, zh-TW, ja, id, hi
     * @param {module:api/RecommendationsApi~contentRecommendationsGenerateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenerateRecommendationsResponse}
     */
    contentRecommendationsGenerate(merchantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentRecommendationsGenerate");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'allowedTag': this.apiClient.buildCollectionParam(opts['allowedTag'], 'multi'),
        'languageCode': opts['languageCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GenerateRecommendationsResponse;
      return this.apiClient.callApi(
        '/{merchantId}/recommendations/generate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentRecommendationsReportInteraction operation.
     * @callback module:api/RecommendationsApi~contentRecommendationsReportInteractionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reports an interaction on a recommendation for a merchant.
     * @param {String} merchantId Required. The ID of the account that wants to report an interaction.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/ReportInteractionRequest} [reportInteractionRequest] 
     * @param {module:api/RecommendationsApi~contentRecommendationsReportInteractionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    contentRecommendationsReportInteraction(merchantId, opts, callback) {
      opts = opts || {};
      let postBody = opts['reportInteractionRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentRecommendationsReportInteraction");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{merchantId}/recommendations/reportInteraction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
