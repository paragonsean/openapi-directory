/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MerchantOrderReturn from '../model/MerchantOrderReturn';
import OrderreturnsAcknowledgeRequest from '../model/OrderreturnsAcknowledgeRequest';
import OrderreturnsAcknowledgeResponse from '../model/OrderreturnsAcknowledgeResponse';
import OrderreturnsCreateOrderReturnRequest from '../model/OrderreturnsCreateOrderReturnRequest';
import OrderreturnsCreateOrderReturnResponse from '../model/OrderreturnsCreateOrderReturnResponse';
import OrderreturnsListResponse from '../model/OrderreturnsListResponse';
import OrderreturnsProcessRequest from '../model/OrderreturnsProcessRequest';
import OrderreturnsProcessResponse from '../model/OrderreturnsProcessResponse';
import ReturnShippingLabel from '../model/ReturnShippingLabel';

/**
* Orderreturns service.
* @module api/OrderreturnsApi
* @version v2.1
*/
export default class OrderreturnsApi {

    /**
    * Constructs a new OrderreturnsApi. 
    * @alias module:api/OrderreturnsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the contentOrderreturnsAcknowledge operation.
     * @callback module:api/OrderreturnsApi~contentOrderreturnsAcknowledgeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderreturnsAcknowledgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Acks an order return in your Merchant Center account.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} returnId The ID of the return.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrderreturnsAcknowledgeRequest} [orderreturnsAcknowledgeRequest] 
     * @param {module:api/OrderreturnsApi~contentOrderreturnsAcknowledgeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderreturnsAcknowledgeResponse}
     */
    contentOrderreturnsAcknowledge(merchantId, returnId, opts, callback) {
      opts = opts || {};
      let postBody = opts['orderreturnsAcknowledgeRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrderreturnsAcknowledge");
      }
      // verify the required parameter 'returnId' is set
      if (returnId === undefined || returnId === null) {
        throw new Error("Missing the required parameter 'returnId' when calling contentOrderreturnsAcknowledge");
      }

      let pathParams = {
        'merchantId': merchantId,
        'returnId': returnId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderreturnsAcknowledgeResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orderreturns/{returnId}/acknowledge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrderreturnsCreateorderreturn operation.
     * @callback module:api/OrderreturnsApi~contentOrderreturnsCreateorderreturnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderreturnsCreateOrderReturnResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create return in your Merchant Center account.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrderreturnsCreateOrderReturnRequest} [orderreturnsCreateOrderReturnRequest] 
     * @param {module:api/OrderreturnsApi~contentOrderreturnsCreateorderreturnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderreturnsCreateOrderReturnResponse}
     */
    contentOrderreturnsCreateorderreturn(merchantId, opts, callback) {
      opts = opts || {};
      let postBody = opts['orderreturnsCreateOrderReturnRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrderreturnsCreateorderreturn");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderreturnsCreateOrderReturnResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orderreturns/createOrderReturn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrderreturnsGet operation.
     * @callback module:api/OrderreturnsApi~contentOrderreturnsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MerchantOrderReturn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an order return from your Merchant Center account.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} returnId Merchant order return ID generated by Google.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/OrderreturnsApi~contentOrderreturnsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MerchantOrderReturn}
     */
    contentOrderreturnsGet(merchantId, returnId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrderreturnsGet");
      }
      // verify the required parameter 'returnId' is set
      if (returnId === undefined || returnId === null) {
        throw new Error("Missing the required parameter 'returnId' when calling contentOrderreturnsGet");
      }

      let pathParams = {
        'merchantId': merchantId,
        'returnId': returnId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MerchantOrderReturn;
      return this.apiClient.callApi(
        '/{merchantId}/orderreturns/{returnId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrderreturnsLabelsCreate operation.
     * @callback module:api/OrderreturnsApi~contentOrderreturnsLabelsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReturnShippingLabel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Links a return shipping label to a return id. You can only create one return label per return id. Since the label is sent to the buyer, the linked return label cannot be updated or deleted. If you try to create multiple return shipping labels for a single return id, every create request except the first will fail.
     * @param {String} merchantId Required. The merchant the Return Shipping Label belongs to.
     * @param {String} returnId Required. Provide the Google-generated merchant order return ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/ReturnShippingLabel} [returnShippingLabel] 
     * @param {module:api/OrderreturnsApi~contentOrderreturnsLabelsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReturnShippingLabel}
     */
    contentOrderreturnsLabelsCreate(merchantId, returnId, opts, callback) {
      opts = opts || {};
      let postBody = opts['returnShippingLabel'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrderreturnsLabelsCreate");
      }
      // verify the required parameter 'returnId' is set
      if (returnId === undefined || returnId === null) {
        throw new Error("Missing the required parameter 'returnId' when calling contentOrderreturnsLabelsCreate");
      }

      let pathParams = {
        'merchantId': merchantId,
        'returnId': returnId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReturnShippingLabel;
      return this.apiClient.callApi(
        '/{merchantId}/orderreturns/{returnId}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrderreturnsList operation.
     * @callback module:api/OrderreturnsApi~contentOrderreturnsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderreturnsListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists order returns in your Merchant Center account.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [acknowledged] Obtains order returns that match the acknowledgement status. When set to true, obtains order returns that have been acknowledged. When false, obtains order returns that have not been acknowledged. When not provided, obtains order returns regardless of their acknowledgement status. We recommend using this filter set to `false`, in conjunction with the `acknowledge` call, such that only un-acknowledged order returns are returned. 
     * @param {String} [createdEndDate] Obtains order returns created before this date (inclusively), in ISO 8601 format.
     * @param {String} [createdStartDate] Obtains order returns created after this date (inclusively), in ISO 8601 format.
     * @param {Array.<String>} [googleOrderIds] Obtains order returns with the specified order ids. If this parameter is provided, createdStartDate, createdEndDate, shipmentType, shipmentStatus, shipmentState and acknowledged parameters must be not set. Note: if googleOrderId and shipmentTrackingNumber parameters are provided, the obtained results will include all order returns that either match the specified order id or the specified tracking number.
     * @param {Number} [maxResults] The maximum number of order returns to return in the response, used for paging. The default value is 25 returns per page, and the maximum allowed value is 250 returns per page.
     * @param {module:model/String} [orderBy] Return the results in the specified order.
     * @param {String} [pageToken] The token returned by the previous request.
     * @param {Array.<module:model/String>} [shipmentStates] Obtains order returns that match any shipment state provided in this parameter. When this parameter is not provided, order returns are obtained regardless of their shipment states.
     * @param {Array.<module:model/String>} [shipmentStatus] Obtains order returns that match any shipment status provided in this parameter. When this parameter is not provided, order returns are obtained regardless of their shipment statuses.
     * @param {Array.<String>} [shipmentTrackingNumbers] Obtains order returns with the specified tracking numbers. If this parameter is provided, createdStartDate, createdEndDate, shipmentType, shipmentStatus, shipmentState and acknowledged parameters must be not set. Note: if googleOrderId and shipmentTrackingNumber parameters are provided, the obtained results will include all order returns that either match the specified order id or the specified tracking number.
     * @param {Array.<module:model/String>} [shipmentTypes] Obtains order returns that match any shipment type provided in this parameter. When this parameter is not provided, order returns are obtained regardless of their shipment types.
     * @param {module:api/OrderreturnsApi~contentOrderreturnsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderreturnsListResponse}
     */
    contentOrderreturnsList(merchantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrderreturnsList");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'acknowledged': opts['acknowledged'],
        'createdEndDate': opts['createdEndDate'],
        'createdStartDate': opts['createdStartDate'],
        'googleOrderIds': this.apiClient.buildCollectionParam(opts['googleOrderIds'], 'multi'),
        'maxResults': opts['maxResults'],
        'orderBy': opts['orderBy'],
        'pageToken': opts['pageToken'],
        'shipmentStates': this.apiClient.buildCollectionParam(opts['shipmentStates'], 'multi'),
        'shipmentStatus': this.apiClient.buildCollectionParam(opts['shipmentStatus'], 'multi'),
        'shipmentTrackingNumbers': this.apiClient.buildCollectionParam(opts['shipmentTrackingNumbers'], 'multi'),
        'shipmentTypes': this.apiClient.buildCollectionParam(opts['shipmentTypes'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderreturnsListResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orderreturns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrderreturnsProcess operation.
     * @callback module:api/OrderreturnsApi~contentOrderreturnsProcessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderreturnsProcessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Processes return in your Merchant Center account.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} returnId The ID of the return.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrderreturnsProcessRequest} [orderreturnsProcessRequest] 
     * @param {module:api/OrderreturnsApi~contentOrderreturnsProcessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderreturnsProcessResponse}
     */
    contentOrderreturnsProcess(merchantId, returnId, opts, callback) {
      opts = opts || {};
      let postBody = opts['orderreturnsProcessRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrderreturnsProcess");
      }
      // verify the required parameter 'returnId' is set
      if (returnId === undefined || returnId === null) {
        throw new Error("Missing the required parameter 'returnId' when calling contentOrderreturnsProcess");
      }

      let pathParams = {
        'merchantId': merchantId,
        'returnId': returnId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderreturnsProcessResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orderreturns/{returnId}/process', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
