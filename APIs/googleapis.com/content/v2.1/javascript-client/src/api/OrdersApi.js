/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CaptureOrderResponse from '../model/CaptureOrderResponse';
import Order from '../model/Order';
import OrdersAcknowledgeRequest from '../model/OrdersAcknowledgeRequest';
import OrdersAcknowledgeResponse from '../model/OrdersAcknowledgeResponse';
import OrdersAdvanceTestOrderResponse from '../model/OrdersAdvanceTestOrderResponse';
import OrdersCancelLineItemRequest from '../model/OrdersCancelLineItemRequest';
import OrdersCancelLineItemResponse from '../model/OrdersCancelLineItemResponse';
import OrdersCancelRequest from '../model/OrdersCancelRequest';
import OrdersCancelResponse from '../model/OrdersCancelResponse';
import OrdersCancelTestOrderByCustomerRequest from '../model/OrdersCancelTestOrderByCustomerRequest';
import OrdersCancelTestOrderByCustomerResponse from '../model/OrdersCancelTestOrderByCustomerResponse';
import OrdersCreateTestOrderRequest from '../model/OrdersCreateTestOrderRequest';
import OrdersCreateTestOrderResponse from '../model/OrdersCreateTestOrderResponse';
import OrdersCreateTestReturnRequest from '../model/OrdersCreateTestReturnRequest';
import OrdersCreateTestReturnResponse from '../model/OrdersCreateTestReturnResponse';
import OrdersGetByMerchantOrderIdResponse from '../model/OrdersGetByMerchantOrderIdResponse';
import OrdersGetTestOrderTemplateResponse from '../model/OrdersGetTestOrderTemplateResponse';
import OrdersInStoreRefundLineItemRequest from '../model/OrdersInStoreRefundLineItemRequest';
import OrdersInStoreRefundLineItemResponse from '../model/OrdersInStoreRefundLineItemResponse';
import OrdersListResponse from '../model/OrdersListResponse';
import OrdersRefundItemRequest from '../model/OrdersRefundItemRequest';
import OrdersRefundItemResponse from '../model/OrdersRefundItemResponse';
import OrdersRefundOrderRequest from '../model/OrdersRefundOrderRequest';
import OrdersRefundOrderResponse from '../model/OrdersRefundOrderResponse';
import OrdersRejectReturnLineItemRequest from '../model/OrdersRejectReturnLineItemRequest';
import OrdersRejectReturnLineItemResponse from '../model/OrdersRejectReturnLineItemResponse';
import OrdersReturnRefundLineItemRequest from '../model/OrdersReturnRefundLineItemRequest';
import OrdersReturnRefundLineItemResponse from '../model/OrdersReturnRefundLineItemResponse';
import OrdersSetLineItemMetadataRequest from '../model/OrdersSetLineItemMetadataRequest';
import OrdersSetLineItemMetadataResponse from '../model/OrdersSetLineItemMetadataResponse';
import OrdersShipLineItemsRequest from '../model/OrdersShipLineItemsRequest';
import OrdersShipLineItemsResponse from '../model/OrdersShipLineItemsResponse';
import OrdersUpdateLineItemShippingDetailsRequest from '../model/OrdersUpdateLineItemShippingDetailsRequest';
import OrdersUpdateLineItemShippingDetailsResponse from '../model/OrdersUpdateLineItemShippingDetailsResponse';
import OrdersUpdateMerchantOrderIdRequest from '../model/OrdersUpdateMerchantOrderIdRequest';
import OrdersUpdateMerchantOrderIdResponse from '../model/OrdersUpdateMerchantOrderIdResponse';
import OrdersUpdateShipmentRequest from '../model/OrdersUpdateShipmentRequest';
import OrdersUpdateShipmentResponse from '../model/OrdersUpdateShipmentResponse';

/**
* Orders service.
* @module api/OrdersApi
* @version v2.1
*/
export default class OrdersApi {

    /**
    * Constructs a new OrdersApi. 
    * @alias module:api/OrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the contentOrdersAcknowledge operation.
     * @callback module:api/OrdersApi~contentOrdersAcknowledgeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersAcknowledgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks an order as acknowledged.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} orderId The ID of the order.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrdersAcknowledgeRequest} [ordersAcknowledgeRequest] 
     * @param {module:api/OrdersApi~contentOrdersAcknowledgeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersAcknowledgeResponse}
     */
    contentOrdersAcknowledge(merchantId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersAcknowledgeRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersAcknowledge");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling contentOrdersAcknowledge");
      }

      let pathParams = {
        'merchantId': merchantId,
        'orderId': orderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersAcknowledgeResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orders/{orderId}/acknowledge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersAdvancetestorder operation.
     * @callback module:api/OrdersApi~contentOrdersAdvancetestorderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersAdvanceTestOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sandbox only. Moves a test order from state \"`inProgress`\" to state \"`pendingShipment`\".
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} orderId The ID of the test order to modify.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/OrdersApi~contentOrdersAdvancetestorderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersAdvanceTestOrderResponse}
     */
    contentOrdersAdvancetestorder(merchantId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersAdvancetestorder");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling contentOrdersAdvancetestorder");
      }

      let pathParams = {
        'merchantId': merchantId,
        'orderId': orderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrdersAdvanceTestOrderResponse;
      return this.apiClient.callApi(
        '/{merchantId}/testorders/{orderId}/advance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersCancel operation.
     * @callback module:api/OrdersApi~contentOrdersCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersCancelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels all line items in an order, making a full refund.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} orderId The ID of the order to cancel.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrdersCancelRequest} [ordersCancelRequest] 
     * @param {module:api/OrdersApi~contentOrdersCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersCancelResponse}
     */
    contentOrdersCancel(merchantId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersCancelRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersCancel");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling contentOrdersCancel");
      }

      let pathParams = {
        'merchantId': merchantId,
        'orderId': orderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersCancelResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orders/{orderId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersCancellineitem operation.
     * @callback module:api/OrdersApi~contentOrdersCancellineitemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersCancelLineItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a line item, making a full refund.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} orderId The ID of the order.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrdersCancelLineItemRequest} [ordersCancelLineItemRequest] 
     * @param {module:api/OrdersApi~contentOrdersCancellineitemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersCancelLineItemResponse}
     */
    contentOrdersCancellineitem(merchantId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersCancelLineItemRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersCancellineitem");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling contentOrdersCancellineitem");
      }

      let pathParams = {
        'merchantId': merchantId,
        'orderId': orderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersCancelLineItemResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orders/{orderId}/cancelLineItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersCanceltestorderbycustomer operation.
     * @callback module:api/OrdersApi~contentOrdersCanceltestorderbycustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersCancelTestOrderByCustomerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sandbox only. Cancels a test order for customer-initiated cancellation.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} orderId The ID of the test order to cancel.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrdersCancelTestOrderByCustomerRequest} [ordersCancelTestOrderByCustomerRequest] 
     * @param {module:api/OrdersApi~contentOrdersCanceltestorderbycustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersCancelTestOrderByCustomerResponse}
     */
    contentOrdersCanceltestorderbycustomer(merchantId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersCancelTestOrderByCustomerRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersCanceltestorderbycustomer");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling contentOrdersCanceltestorderbycustomer");
      }

      let pathParams = {
        'merchantId': merchantId,
        'orderId': orderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersCancelTestOrderByCustomerResponse;
      return this.apiClient.callApi(
        '/{merchantId}/testorders/{orderId}/cancelByCustomer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersCaptureOrder operation.
     * @callback module:api/OrdersApi~contentOrdersCaptureOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CaptureOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Capture funds from the customer for the current order total. This method should be called after the merchant verifies that they are able and ready to start shipping the order. This method blocks until a response is received from the payment processsor. If this method succeeds, the merchant is guaranteed to receive funds for the order after shipment. If the request fails, it can be retried or the order may be cancelled. This method cannot be called after the entire order is already shipped. A rejected error code is returned when the payment service provider has declined the charge. This indicates a problem between the PSP and either the merchant's or customer's account. Sometimes this error will be resolved by the customer. We recommend retrying these errors once per day or cancelling the order with reason `failedToCaptureFunds` if the items cannot be held.
     * @param {String} merchantId Required. The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} orderId Required. The ID of the Order.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/OrdersApi~contentOrdersCaptureOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CaptureOrderResponse}
     */
    contentOrdersCaptureOrder(merchantId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersCaptureOrder");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling contentOrdersCaptureOrder");
      }

      let pathParams = {
        'merchantId': merchantId,
        'orderId': orderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CaptureOrderResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orders/{orderId}/captureOrder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersCreatetestorder operation.
     * @callback module:api/OrdersApi~contentOrdersCreatetestorderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersCreateTestOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sandbox only. Creates a test order.
     * @param {String} merchantId The ID of the account that should manage the order. This cannot be a multi-client account.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrdersCreateTestOrderRequest} [ordersCreateTestOrderRequest] 
     * @param {module:api/OrdersApi~contentOrdersCreatetestorderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersCreateTestOrderResponse}
     */
    contentOrdersCreatetestorder(merchantId, opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersCreateTestOrderRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersCreatetestorder");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersCreateTestOrderResponse;
      return this.apiClient.callApi(
        '/{merchantId}/testorders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersCreatetestreturn operation.
     * @callback module:api/OrdersApi~contentOrdersCreatetestreturnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersCreateTestReturnResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sandbox only. Creates a test return.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} orderId The ID of the order.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrdersCreateTestReturnRequest} [ordersCreateTestReturnRequest] 
     * @param {module:api/OrdersApi~contentOrdersCreatetestreturnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersCreateTestReturnResponse}
     */
    contentOrdersCreatetestreturn(merchantId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersCreateTestReturnRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersCreatetestreturn");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling contentOrdersCreatetestreturn");
      }

      let pathParams = {
        'merchantId': merchantId,
        'orderId': orderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersCreateTestReturnResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orders/{orderId}/testreturn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersGet operation.
     * @callback module:api/OrdersApi~contentOrdersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an order from your Merchant Center account.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} orderId The ID of the order.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/OrdersApi~contentOrdersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    contentOrdersGet(merchantId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersGet");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling contentOrdersGet");
      }

      let pathParams = {
        'merchantId': merchantId,
        'orderId': orderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/{merchantId}/orders/{orderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersGetbymerchantorderid operation.
     * @callback module:api/OrdersApi~contentOrdersGetbymerchantorderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersGetByMerchantOrderIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an order using merchant order ID.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} merchantOrderId The merchant order ID to be looked for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/OrdersApi~contentOrdersGetbymerchantorderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersGetByMerchantOrderIdResponse}
     */
    contentOrdersGetbymerchantorderid(merchantId, merchantOrderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersGetbymerchantorderid");
      }
      // verify the required parameter 'merchantOrderId' is set
      if (merchantOrderId === undefined || merchantOrderId === null) {
        throw new Error("Missing the required parameter 'merchantOrderId' when calling contentOrdersGetbymerchantorderid");
      }

      let pathParams = {
        'merchantId': merchantId,
        'merchantOrderId': merchantOrderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrdersGetByMerchantOrderIdResponse;
      return this.apiClient.callApi(
        '/{merchantId}/ordersbymerchantid/{merchantOrderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersGettestordertemplate operation.
     * @callback module:api/OrdersApi~contentOrdersGettestordertemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersGetTestOrderTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sandbox only. Retrieves an order template that can be used to quickly create a new order in sandbox.
     * @param {String} merchantId The ID of the account that should manage the order. This cannot be a multi-client account.
     * @param {module:model/String} templateName The name of the template to retrieve.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [country] The country of the template to retrieve. Defaults to \"`US`\".
     * @param {module:api/OrdersApi~contentOrdersGettestordertemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersGetTestOrderTemplateResponse}
     */
    contentOrdersGettestordertemplate(merchantId, templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersGettestordertemplate");
      }
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling contentOrdersGettestordertemplate");
      }

      let pathParams = {
        'merchantId': merchantId,
        'templateName': templateName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'country': opts['country']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrdersGetTestOrderTemplateResponse;
      return this.apiClient.callApi(
        '/{merchantId}/testordertemplates/{templateName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersInstorerefundlineitem operation.
     * @callback module:api/OrdersApi~contentOrdersInstorerefundlineitemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersInStoreRefundLineItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deprecated. Notifies that item return and refund was handled directly by merchant outside of Google payments processing (for example, cash refund done in store). Note: We recommend calling the returnrefundlineitem method to refund in-store returns. We will issue the refund directly to the customer. This helps to prevent possible differences arising between merchant and Google transaction records. We also recommend having the point of sale system communicate with Google to ensure that customers do not receive a double refund by first refunding through Google then through an in-store return.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} orderId The ID of the order.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrdersInStoreRefundLineItemRequest} [ordersInStoreRefundLineItemRequest] 
     * @param {module:api/OrdersApi~contentOrdersInstorerefundlineitemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersInStoreRefundLineItemResponse}
     */
    contentOrdersInstorerefundlineitem(merchantId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersInStoreRefundLineItemRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersInstorerefundlineitem");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling contentOrdersInstorerefundlineitem");
      }

      let pathParams = {
        'merchantId': merchantId,
        'orderId': orderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersInStoreRefundLineItemResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orders/{orderId}/inStoreRefundLineItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersList operation.
     * @callback module:api/OrdersApi~contentOrdersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the orders in your Merchant Center account.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [acknowledged] Obtains orders that match the acknowledgement status. When set to true, obtains orders that have been acknowledged. When false, obtains orders that have not been acknowledged. We recommend using this filter set to `false`, in conjunction with the `acknowledge` call, such that only un-acknowledged orders are returned. 
     * @param {Number} [maxResults] The maximum number of orders to return in the response, used for paging. The default value is 25 orders per page, and the maximum allowed value is 250 orders per page.
     * @param {String} [orderBy] Order results by placement date in descending or ascending order. Acceptable values are: - placedDateAsc - placedDateDesc 
     * @param {String} [pageToken] The token returned by the previous request.
     * @param {String} [placedDateEnd] Obtains orders placed before this date (exclusively), in ISO 8601 format.
     * @param {String} [placedDateStart] Obtains orders placed after this date (inclusively), in ISO 8601 format.
     * @param {Array.<module:model/String>} [statuses] Obtains orders that match any of the specified statuses. Note that `active` is a shortcut for `pendingShipment` and `partiallyShipped`, and `completed` is a shortcut for `shipped`, `partiallyDelivered`, `delivered`, `partiallyReturned`, `returned`, and `canceled`.
     * @param {module:api/OrdersApi~contentOrdersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersListResponse}
     */
    contentOrdersList(merchantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersList");
      }

      let pathParams = {
        'merchantId': merchantId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'acknowledged': opts['acknowledged'],
        'maxResults': opts['maxResults'],
        'orderBy': opts['orderBy'],
        'pageToken': opts['pageToken'],
        'placedDateEnd': opts['placedDateEnd'],
        'placedDateStart': opts['placedDateStart'],
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrdersListResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersRefunditem operation.
     * @callback module:api/OrdersApi~contentOrdersRefunditemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersRefundItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issues a partial or total refund for items and shipment.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} orderId The ID of the order to refund.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrdersRefundItemRequest} [ordersRefundItemRequest] 
     * @param {module:api/OrdersApi~contentOrdersRefunditemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersRefundItemResponse}
     */
    contentOrdersRefunditem(merchantId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersRefundItemRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersRefunditem");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling contentOrdersRefunditem");
      }

      let pathParams = {
        'merchantId': merchantId,
        'orderId': orderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersRefundItemResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orders/{orderId}/refunditem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersRefundorder operation.
     * @callback module:api/OrdersApi~contentOrdersRefundorderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersRefundOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issues a partial or total refund for an order.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} orderId The ID of the order to refund.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrdersRefundOrderRequest} [ordersRefundOrderRequest] 
     * @param {module:api/OrdersApi~contentOrdersRefundorderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersRefundOrderResponse}
     */
    contentOrdersRefundorder(merchantId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersRefundOrderRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersRefundorder");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling contentOrdersRefundorder");
      }

      let pathParams = {
        'merchantId': merchantId,
        'orderId': orderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersRefundOrderResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orders/{orderId}/refundorder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersRejectreturnlineitem operation.
     * @callback module:api/OrdersApi~contentOrdersRejectreturnlineitemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersRejectReturnLineItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rejects return on an line item.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} orderId The ID of the order.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrdersRejectReturnLineItemRequest} [ordersRejectReturnLineItemRequest] 
     * @param {module:api/OrdersApi~contentOrdersRejectreturnlineitemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersRejectReturnLineItemResponse}
     */
    contentOrdersRejectreturnlineitem(merchantId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersRejectReturnLineItemRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersRejectreturnlineitem");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling contentOrdersRejectreturnlineitem");
      }

      let pathParams = {
        'merchantId': merchantId,
        'orderId': orderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersRejectReturnLineItemResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orders/{orderId}/rejectReturnLineItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersReturnrefundlineitem operation.
     * @callback module:api/OrdersApi~contentOrdersReturnrefundlineitemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersReturnRefundLineItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns and refunds a line item. Note that this method can only be called on fully shipped orders. The Orderreturns API is the preferred way to handle returns after you receive a return from a customer. You can use Orderreturns.list or Orderreturns.get to search for the return, and then use Orderreturns.processreturn to issue the refund. If the return cannot be found, then we recommend using this API to issue a refund.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} orderId The ID of the order.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrdersReturnRefundLineItemRequest} [ordersReturnRefundLineItemRequest] 
     * @param {module:api/OrdersApi~contentOrdersReturnrefundlineitemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersReturnRefundLineItemResponse}
     */
    contentOrdersReturnrefundlineitem(merchantId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersReturnRefundLineItemRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersReturnrefundlineitem");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling contentOrdersReturnrefundlineitem");
      }

      let pathParams = {
        'merchantId': merchantId,
        'orderId': orderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersReturnRefundLineItemResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orders/{orderId}/returnRefundLineItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersSetlineitemmetadata operation.
     * @callback module:api/OrdersApi~contentOrdersSetlineitemmetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersSetLineItemMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets (or overrides if it already exists) merchant provided annotations in the form of key-value pairs. A common use case would be to supply us with additional structured information about a line item that cannot be provided through other methods. Submitted key-value pairs can be retrieved as part of the orders resource.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} orderId The ID of the order.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrdersSetLineItemMetadataRequest} [ordersSetLineItemMetadataRequest] 
     * @param {module:api/OrdersApi~contentOrdersSetlineitemmetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersSetLineItemMetadataResponse}
     */
    contentOrdersSetlineitemmetadata(merchantId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersSetLineItemMetadataRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersSetlineitemmetadata");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling contentOrdersSetlineitemmetadata");
      }

      let pathParams = {
        'merchantId': merchantId,
        'orderId': orderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersSetLineItemMetadataResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orders/{orderId}/setLineItemMetadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersShiplineitems operation.
     * @callback module:api/OrdersApi~contentOrdersShiplineitemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersShipLineItemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks line item(s) as shipped.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} orderId The ID of the order.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrdersShipLineItemsRequest} [ordersShipLineItemsRequest] 
     * @param {module:api/OrdersApi~contentOrdersShiplineitemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersShipLineItemsResponse}
     */
    contentOrdersShiplineitems(merchantId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersShipLineItemsRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersShiplineitems");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling contentOrdersShiplineitems");
      }

      let pathParams = {
        'merchantId': merchantId,
        'orderId': orderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersShipLineItemsResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orders/{orderId}/shipLineItems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersUpdatelineitemshippingdetails operation.
     * @callback module:api/OrdersApi~contentOrdersUpdatelineitemshippingdetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersUpdateLineItemShippingDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates ship by and delivery by dates for a line item.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} orderId The ID of the order.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrdersUpdateLineItemShippingDetailsRequest} [ordersUpdateLineItemShippingDetailsRequest] 
     * @param {module:api/OrdersApi~contentOrdersUpdatelineitemshippingdetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersUpdateLineItemShippingDetailsResponse}
     */
    contentOrdersUpdatelineitemshippingdetails(merchantId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersUpdateLineItemShippingDetailsRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersUpdatelineitemshippingdetails");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling contentOrdersUpdatelineitemshippingdetails");
      }

      let pathParams = {
        'merchantId': merchantId,
        'orderId': orderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersUpdateLineItemShippingDetailsResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orders/{orderId}/updateLineItemShippingDetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersUpdatemerchantorderid operation.
     * @callback module:api/OrdersApi~contentOrdersUpdatemerchantorderidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersUpdateMerchantOrderIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the merchant order ID for a given order.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} orderId The ID of the order.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrdersUpdateMerchantOrderIdRequest} [ordersUpdateMerchantOrderIdRequest] 
     * @param {module:api/OrdersApi~contentOrdersUpdatemerchantorderidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersUpdateMerchantOrderIdResponse}
     */
    contentOrdersUpdatemerchantorderid(merchantId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersUpdateMerchantOrderIdRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersUpdatemerchantorderid");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling contentOrdersUpdatemerchantorderid");
      }

      let pathParams = {
        'merchantId': merchantId,
        'orderId': orderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersUpdateMerchantOrderIdResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orders/{orderId}/updateMerchantOrderId', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentOrdersUpdateshipment operation.
     * @callback module:api/OrdersApi~contentOrdersUpdateshipmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrdersUpdateShipmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a shipment's status, carrier, and/or tracking ID.
     * @param {String} merchantId The ID of the account that manages the order. This cannot be a multi-client account.
     * @param {String} orderId The ID of the order.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/OrdersUpdateShipmentRequest} [ordersUpdateShipmentRequest] 
     * @param {module:api/OrdersApi~contentOrdersUpdateshipmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrdersUpdateShipmentResponse}
     */
    contentOrdersUpdateshipment(merchantId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['ordersUpdateShipmentRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentOrdersUpdateshipment");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling contentOrdersUpdateshipment");
      }

      let pathParams = {
        'merchantId': merchantId,
        'orderId': orderId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrdersUpdateShipmentResponse;
      return this.apiClient.callApi(
        '/{merchantId}/orders/{orderId}/updateShipment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
