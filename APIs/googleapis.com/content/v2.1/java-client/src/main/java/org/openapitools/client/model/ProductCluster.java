/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Product cluster fields. A product cluster is a grouping for different offers that represent the same product. Values are only set for fields requested explicitly in the request&#39;s search query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductCluster {
  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  /**
   * Tells if there is at least one product of the brand currently &#x60;IN_STOCK&#x60; in your product feed across multiple countries, all products are &#x60;OUT_OF_STOCK&#x60; in your product feed, or &#x60;NOT_IN_INVENTORY&#x60;. The field doesn&#39;t take the Best Sellers report country filter into account.
   */
  @JsonAdapter(BrandInventoryStatusEnum.Adapter.class)
  public enum BrandInventoryStatusEnum {
    INVENTORY_STATUS_UNSPECIFIED("INVENTORY_STATUS_UNSPECIFIED"),
    
    IN_STOCK("IN_STOCK"),
    
    OUT_OF_STOCK("OUT_OF_STOCK"),
    
    NOT_IN_INVENTORY("NOT_IN_INVENTORY");

    private String value;

    BrandInventoryStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BrandInventoryStatusEnum fromValue(String value) {
      for (BrandInventoryStatusEnum b : BrandInventoryStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BrandInventoryStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BrandInventoryStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BrandInventoryStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BrandInventoryStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BrandInventoryStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BRAND_INVENTORY_STATUS = "brandInventoryStatus";
  @SerializedName(SERIALIZED_NAME_BRAND_INVENTORY_STATUS)
  private BrandInventoryStatusEnum brandInventoryStatus;

  public static final String SERIALIZED_NAME_CATEGORY_L1 = "categoryL1";
  @SerializedName(SERIALIZED_NAME_CATEGORY_L1)
  private String categoryL1;

  public static final String SERIALIZED_NAME_CATEGORY_L2 = "categoryL2";
  @SerializedName(SERIALIZED_NAME_CATEGORY_L2)
  private String categoryL2;

  public static final String SERIALIZED_NAME_CATEGORY_L3 = "categoryL3";
  @SerializedName(SERIALIZED_NAME_CATEGORY_L3)
  private String categoryL3;

  public static final String SERIALIZED_NAME_CATEGORY_L4 = "categoryL4";
  @SerializedName(SERIALIZED_NAME_CATEGORY_L4)
  private String categoryL4;

  public static final String SERIALIZED_NAME_CATEGORY_L5 = "categoryL5";
  @SerializedName(SERIALIZED_NAME_CATEGORY_L5)
  private String categoryL5;

  /**
   * Tells whether the product cluster is &#x60;IN_STOCK&#x60; in your product feed across multiple countries, &#x60;OUT_OF_STOCK&#x60; in your product feed, or &#x60;NOT_IN_INVENTORY&#x60; at all. The field doesn&#39;t take the Best Sellers report country filter into account.
   */
  @JsonAdapter(InventoryStatusEnum.Adapter.class)
  public enum InventoryStatusEnum {
    INVENTORY_STATUS_UNSPECIFIED("INVENTORY_STATUS_UNSPECIFIED"),
    
    IN_STOCK("IN_STOCK"),
    
    OUT_OF_STOCK("OUT_OF_STOCK"),
    
    NOT_IN_INVENTORY("NOT_IN_INVENTORY");

    private String value;

    InventoryStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InventoryStatusEnum fromValue(String value) {
      for (InventoryStatusEnum b : InventoryStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InventoryStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InventoryStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InventoryStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InventoryStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InventoryStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVENTORY_STATUS = "inventoryStatus";
  @SerializedName(SERIALIZED_NAME_INVENTORY_STATUS)
  private InventoryStatusEnum inventoryStatus;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VARIANT_GTINS = "variantGtins";
  @SerializedName(SERIALIZED_NAME_VARIANT_GTINS)
  private List<String> variantGtins = new ArrayList<>();

  public ProductCluster() {
  }

  public ProductCluster brand(String brand) {
    this.brand = brand;
    return this;
  }

  /**
   * Brand of the product cluster.
   * @return brand
   */
  @javax.annotation.Nullable
  public String getBrand() {
    return brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }


  public ProductCluster brandInventoryStatus(BrandInventoryStatusEnum brandInventoryStatus) {
    this.brandInventoryStatus = brandInventoryStatus;
    return this;
  }

  /**
   * Tells if there is at least one product of the brand currently &#x60;IN_STOCK&#x60; in your product feed across multiple countries, all products are &#x60;OUT_OF_STOCK&#x60; in your product feed, or &#x60;NOT_IN_INVENTORY&#x60;. The field doesn&#39;t take the Best Sellers report country filter into account.
   * @return brandInventoryStatus
   */
  @javax.annotation.Nullable
  public BrandInventoryStatusEnum getBrandInventoryStatus() {
    return brandInventoryStatus;
  }

  public void setBrandInventoryStatus(BrandInventoryStatusEnum brandInventoryStatus) {
    this.brandInventoryStatus = brandInventoryStatus;
  }


  public ProductCluster categoryL1(String categoryL1) {
    this.categoryL1 = categoryL1;
    return this;
  }

  /**
   * Product category (1st level) of the product cluster, represented in Google&#39;s product taxonomy.
   * @return categoryL1
   */
  @javax.annotation.Nullable
  public String getCategoryL1() {
    return categoryL1;
  }

  public void setCategoryL1(String categoryL1) {
    this.categoryL1 = categoryL1;
  }


  public ProductCluster categoryL2(String categoryL2) {
    this.categoryL2 = categoryL2;
    return this;
  }

  /**
   * Product category (2nd level) of the product cluster, represented in Google&#39;s product taxonomy.
   * @return categoryL2
   */
  @javax.annotation.Nullable
  public String getCategoryL2() {
    return categoryL2;
  }

  public void setCategoryL2(String categoryL2) {
    this.categoryL2 = categoryL2;
  }


  public ProductCluster categoryL3(String categoryL3) {
    this.categoryL3 = categoryL3;
    return this;
  }

  /**
   * Product category (3rd level) of the product cluster, represented in Google&#39;s product taxonomy.
   * @return categoryL3
   */
  @javax.annotation.Nullable
  public String getCategoryL3() {
    return categoryL3;
  }

  public void setCategoryL3(String categoryL3) {
    this.categoryL3 = categoryL3;
  }


  public ProductCluster categoryL4(String categoryL4) {
    this.categoryL4 = categoryL4;
    return this;
  }

  /**
   * Product category (4th level) of the product cluster, represented in Google&#39;s product taxonomy.
   * @return categoryL4
   */
  @javax.annotation.Nullable
  public String getCategoryL4() {
    return categoryL4;
  }

  public void setCategoryL4(String categoryL4) {
    this.categoryL4 = categoryL4;
  }


  public ProductCluster categoryL5(String categoryL5) {
    this.categoryL5 = categoryL5;
    return this;
  }

  /**
   * Product category (5th level) of the product cluster, represented in Google&#39;s product taxonomy.
   * @return categoryL5
   */
  @javax.annotation.Nullable
  public String getCategoryL5() {
    return categoryL5;
  }

  public void setCategoryL5(String categoryL5) {
    this.categoryL5 = categoryL5;
  }


  public ProductCluster inventoryStatus(InventoryStatusEnum inventoryStatus) {
    this.inventoryStatus = inventoryStatus;
    return this;
  }

  /**
   * Tells whether the product cluster is &#x60;IN_STOCK&#x60; in your product feed across multiple countries, &#x60;OUT_OF_STOCK&#x60; in your product feed, or &#x60;NOT_IN_INVENTORY&#x60; at all. The field doesn&#39;t take the Best Sellers report country filter into account.
   * @return inventoryStatus
   */
  @javax.annotation.Nullable
  public InventoryStatusEnum getInventoryStatus() {
    return inventoryStatus;
  }

  public void setInventoryStatus(InventoryStatusEnum inventoryStatus) {
    this.inventoryStatus = inventoryStatus;
  }


  public ProductCluster title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the product cluster.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ProductCluster variantGtins(List<String> variantGtins) {
    this.variantGtins = variantGtins;
    return this;
  }

  public ProductCluster addVariantGtinsItem(String variantGtinsItem) {
    if (this.variantGtins == null) {
      this.variantGtins = new ArrayList<>();
    }
    this.variantGtins.add(variantGtinsItem);
    return this;
  }

  /**
   * GTINs of example variants of the product cluster.
   * @return variantGtins
   */
  @javax.annotation.Nullable
  public List<String> getVariantGtins() {
    return variantGtins;
  }

  public void setVariantGtins(List<String> variantGtins) {
    this.variantGtins = variantGtins;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductCluster productCluster = (ProductCluster) o;
    return Objects.equals(this.brand, productCluster.brand) &&
        Objects.equals(this.brandInventoryStatus, productCluster.brandInventoryStatus) &&
        Objects.equals(this.categoryL1, productCluster.categoryL1) &&
        Objects.equals(this.categoryL2, productCluster.categoryL2) &&
        Objects.equals(this.categoryL3, productCluster.categoryL3) &&
        Objects.equals(this.categoryL4, productCluster.categoryL4) &&
        Objects.equals(this.categoryL5, productCluster.categoryL5) &&
        Objects.equals(this.inventoryStatus, productCluster.inventoryStatus) &&
        Objects.equals(this.title, productCluster.title) &&
        Objects.equals(this.variantGtins, productCluster.variantGtins);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brand, brandInventoryStatus, categoryL1, categoryL2, categoryL3, categoryL4, categoryL5, inventoryStatus, title, variantGtins);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductCluster {\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    brandInventoryStatus: ").append(toIndentedString(brandInventoryStatus)).append("\n");
    sb.append("    categoryL1: ").append(toIndentedString(categoryL1)).append("\n");
    sb.append("    categoryL2: ").append(toIndentedString(categoryL2)).append("\n");
    sb.append("    categoryL3: ").append(toIndentedString(categoryL3)).append("\n");
    sb.append("    categoryL4: ").append(toIndentedString(categoryL4)).append("\n");
    sb.append("    categoryL5: ").append(toIndentedString(categoryL5)).append("\n");
    sb.append("    inventoryStatus: ").append(toIndentedString(inventoryStatus)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    variantGtins: ").append(toIndentedString(variantGtins)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brand");
    openapiFields.add("brandInventoryStatus");
    openapiFields.add("categoryL1");
    openapiFields.add("categoryL2");
    openapiFields.add("categoryL3");
    openapiFields.add("categoryL4");
    openapiFields.add("categoryL5");
    openapiFields.add("inventoryStatus");
    openapiFields.add("title");
    openapiFields.add("variantGtins");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductCluster
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductCluster.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductCluster is not found in the empty JSON string", ProductCluster.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductCluster.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductCluster` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      if ((jsonObj.get("brandInventoryStatus") != null && !jsonObj.get("brandInventoryStatus").isJsonNull()) && !jsonObj.get("brandInventoryStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandInventoryStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandInventoryStatus").toString()));
      }
      // validate the optional field `brandInventoryStatus`
      if (jsonObj.get("brandInventoryStatus") != null && !jsonObj.get("brandInventoryStatus").isJsonNull()) {
        BrandInventoryStatusEnum.validateJsonElement(jsonObj.get("brandInventoryStatus"));
      }
      if ((jsonObj.get("categoryL1") != null && !jsonObj.get("categoryL1").isJsonNull()) && !jsonObj.get("categoryL1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryL1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryL1").toString()));
      }
      if ((jsonObj.get("categoryL2") != null && !jsonObj.get("categoryL2").isJsonNull()) && !jsonObj.get("categoryL2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryL2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryL2").toString()));
      }
      if ((jsonObj.get("categoryL3") != null && !jsonObj.get("categoryL3").isJsonNull()) && !jsonObj.get("categoryL3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryL3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryL3").toString()));
      }
      if ((jsonObj.get("categoryL4") != null && !jsonObj.get("categoryL4").isJsonNull()) && !jsonObj.get("categoryL4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryL4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryL4").toString()));
      }
      if ((jsonObj.get("categoryL5") != null && !jsonObj.get("categoryL5").isJsonNull()) && !jsonObj.get("categoryL5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryL5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryL5").toString()));
      }
      if ((jsonObj.get("inventoryStatus") != null && !jsonObj.get("inventoryStatus").isJsonNull()) && !jsonObj.get("inventoryStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventoryStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventoryStatus").toString()));
      }
      // validate the optional field `inventoryStatus`
      if (jsonObj.get("inventoryStatus") != null && !jsonObj.get("inventoryStatus").isJsonNull()) {
        InventoryStatusEnum.validateJsonElement(jsonObj.get("inventoryStatus"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("variantGtins") != null && !jsonObj.get("variantGtins").isJsonNull() && !jsonObj.get("variantGtins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `variantGtins` to be an array in the JSON string but got `%s`", jsonObj.get("variantGtins").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductCluster.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductCluster' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductCluster> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductCluster.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductCluster>() {
           @Override
           public void write(JsonWriter out, ProductCluster value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductCluster read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductCluster given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductCluster
   * @throws IOException if the JSON string is invalid with respect to ProductCluster
   */
  public static ProductCluster fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductCluster.class);
  }

  /**
   * Convert an instance of ProductCluster to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

