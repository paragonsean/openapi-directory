/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Omnichannel experience details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiaOmnichannelExperience {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_LSF_TYPE = "lsfType";
  @SerializedName(SERIALIZED_NAME_LSF_TYPE)
  private String lsfType;

  public static final String SERIALIZED_NAME_PICKUP_TYPES = "pickupTypes";
  @SerializedName(SERIALIZED_NAME_PICKUP_TYPES)
  private List<String> pickupTypes = new ArrayList<>();

  public LiaOmnichannelExperience() {
  }

  public LiaOmnichannelExperience country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The CLDR country code (for example, \&quot;US\&quot;).
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public LiaOmnichannelExperience lsfType(String lsfType) {
    this.lsfType = lsfType;
    return this;
  }

  /**
   * The Local Store Front (LSF) type for this country. Acceptable values are: - \&quot;&#x60;ghlsf&#x60;\&quot; (Google-Hosted Local Store Front) - \&quot;&#x60;mhlsfBasic&#x60;\&quot; (Merchant-Hosted Local Store Front Basic) - \&quot;&#x60;mhlsfFull&#x60;\&quot; (Merchant-Hosted Local Store Front Full) More details about these types can be found here.
   * @return lsfType
   */
  @javax.annotation.Nullable
  public String getLsfType() {
    return lsfType;
  }

  public void setLsfType(String lsfType) {
    this.lsfType = lsfType;
  }


  public LiaOmnichannelExperience pickupTypes(List<String> pickupTypes) {
    this.pickupTypes = pickupTypes;
    return this;
  }

  public LiaOmnichannelExperience addPickupTypesItem(String pickupTypesItem) {
    if (this.pickupTypes == null) {
      this.pickupTypes = new ArrayList<>();
    }
    this.pickupTypes.add(pickupTypesItem);
    return this;
  }

  /**
   * The Pickup types for this country. Acceptable values are: - \&quot;&#x60;pickupToday&#x60;\&quot; - \&quot;&#x60;pickupLater&#x60;\&quot; 
   * @return pickupTypes
   */
  @javax.annotation.Nullable
  public List<String> getPickupTypes() {
    return pickupTypes;
  }

  public void setPickupTypes(List<String> pickupTypes) {
    this.pickupTypes = pickupTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiaOmnichannelExperience liaOmnichannelExperience = (LiaOmnichannelExperience) o;
    return Objects.equals(this.country, liaOmnichannelExperience.country) &&
        Objects.equals(this.lsfType, liaOmnichannelExperience.lsfType) &&
        Objects.equals(this.pickupTypes, liaOmnichannelExperience.pickupTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, lsfType, pickupTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiaOmnichannelExperience {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    lsfType: ").append(toIndentedString(lsfType)).append("\n");
    sb.append("    pickupTypes: ").append(toIndentedString(pickupTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("lsfType");
    openapiFields.add("pickupTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiaOmnichannelExperience
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiaOmnichannelExperience.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiaOmnichannelExperience is not found in the empty JSON string", LiaOmnichannelExperience.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiaOmnichannelExperience.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiaOmnichannelExperience` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("lsfType") != null && !jsonObj.get("lsfType").isJsonNull()) && !jsonObj.get("lsfType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lsfType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lsfType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pickupTypes") != null && !jsonObj.get("pickupTypes").isJsonNull() && !jsonObj.get("pickupTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickupTypes` to be an array in the JSON string but got `%s`", jsonObj.get("pickupTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiaOmnichannelExperience.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiaOmnichannelExperience' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiaOmnichannelExperience> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiaOmnichannelExperience.class));

       return (TypeAdapter<T>) new TypeAdapter<LiaOmnichannelExperience>() {
           @Override
           public void write(JsonWriter out, LiaOmnichannelExperience value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiaOmnichannelExperience read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiaOmnichannelExperience given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiaOmnichannelExperience
   * @throws IOException if the JSON string is invalid with respect to LiaOmnichannelExperience
   */
  public static LiaOmnichannelExperience fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiaOmnichannelExperience.class);
  }

  /**
   * Convert an instance of LiaOmnichannelExperience to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

