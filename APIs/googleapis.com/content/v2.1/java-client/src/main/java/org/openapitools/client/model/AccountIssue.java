/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountIssueImpact;
import org.openapitools.client.model.Action;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An issue affecting specific merchant.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountIssue {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<Action> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMPACT = "impact";
  @SerializedName(SERIALIZED_NAME_IMPACT)
  private AccountIssueImpact impact;

  public static final String SERIALIZED_NAME_PRERENDERED_CONTENT = "prerenderedContent";
  @SerializedName(SERIALIZED_NAME_PRERENDERED_CONTENT)
  private String prerenderedContent;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public AccountIssue() {
  }

  public AccountIssue actions(List<Action> actions) {
    this.actions = actions;
    return this;
  }

  public AccountIssue addActionsItem(Action actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * A list of actionable steps that can be executed to solve the issue. An example is requesting a re-review or providing arguments when merchant disagrees with the issue. Actions that are supported in (your) third-party application can be rendered as buttons and should be available to merchant when they expand the issue.
   * @return actions
   */
  @javax.annotation.Nullable
  public List<Action> getActions() {
    return actions;
  }

  public void setActions(List<Action> actions) {
    this.actions = actions;
  }


  public AccountIssue impact(AccountIssueImpact impact) {
    this.impact = impact;
    return this;
  }

  /**
   * Get impact
   * @return impact
   */
  @javax.annotation.Nullable
  public AccountIssueImpact getImpact() {
    return impact;
  }

  public void setImpact(AccountIssueImpact impact) {
    this.impact = impact;
  }


  public AccountIssue prerenderedContent(String prerenderedContent) {
    this.prerenderedContent = prerenderedContent;
    return this;
  }

  /**
   * Details of the issue as a pre-rendered HTML. HTML elements contain CSS classes that can be used to customize the style of the content. Always sanitize the HTML before embedding it directly to your application. The sanitizer needs to allow basic HTML tags, such as: &#x60;div&#x60;, &#x60;span&#x60;, &#x60;p&#x60;, &#x60;a&#x60;, &#x60;ul&#x60;, &#x60;li&#x60;, &#x60;table&#x60;, &#x60;tr&#x60;, &#x60;td&#x60;. For example, you can use [DOMPurify](https://www.npmjs.com/package/dompurify). CSS classes: * &#x60;issue-detail&#x60; - top level container for the detail of the issue * &#x60;callout-banners&#x60; - section of the &#x60;issue-detail&#x60; with callout banners * &#x60;callout-banner&#x60; - single callout banner, inside &#x60;callout-banners&#x60; * &#x60;callout-banner-info&#x60; - callout with important information (default) * &#x60;callout-banner-warning&#x60; - callout with a warning * &#x60;callout-banner-error&#x60; - callout informing about an error (most severe) * &#x60;issue-content&#x60; - section of the &#x60;issue-detail&#x60;, contains multiple &#x60;content-element&#x60; * &#x60;content-element&#x60; - content element such as a list, link or paragraph, inside &#x60;issue-content&#x60; * &#x60;root-causes&#x60; - unordered list with items describing root causes of the issue, inside &#x60;issue-content&#x60; * &#x60;root-causes-intro&#x60; - intro text before the &#x60;root-causes&#x60; list, inside &#x60;issue-content&#x60; * &#x60;segment&#x60; - section of the text, &#x60;span&#x60; inside paragraph * &#x60;segment-attribute&#x60; - section of the text that represents a product attribute, for example &#39;image\\_link&#39; * &#x60;segment-literal&#x60; - section of the text that contains a special value, for example &#39;0-1000 kg&#39; * &#x60;segment-bold&#x60; - section of the text that should be rendered as bold * &#x60;segment-italic&#x60; - section of the text that should be rendered as italic * &#x60;tooltip&#x60; - used on paragraphs that should be rendered with a tooltip. A section of the text in such a paragraph will have a class &#x60;tooltip-text&#x60; and is intended to be shown in a mouse over dialog. If the style is not used, the &#x60;tooltip-text&#x60; section would be shown on a new line, after the main part of the text. * &#x60;tooltip-text&#x60; - marks a section of the text within a &#x60;tooltip&#x60;, that is intended to be shown in a mouse over dialog. * &#x60;tooltip-icon&#x60; - marks a section of the text within a &#x60;tooltip&#x60;, that can be replaced with a tooltip icon, for example &#39;?&#39; or &#39;i&#39;. By default, this section contains a &#x60;br&#x60; tag, that is separating the main text and the tooltip text when the style is not used. * &#x60;tooltip-style-question&#x60; - the tooltip shows helpful information, can use the &#39;?&#39; as an icon. * &#x60;tooltip-style-info&#x60; - the tooltip adds additional information fitting to the context, can use the &#39;i&#39; as an icon. * &#x60;content-moderation&#x60; - marks the paragraph that explains how the issue was identified. * &#x60;new-element&#x60; - Present for new elements added to the pre-rendered content in the future. To make sure that a new content element does not break your style, you can hide everything with this class.
   * @return prerenderedContent
   */
  @javax.annotation.Nullable
  public String getPrerenderedContent() {
    return prerenderedContent;
  }

  public void setPrerenderedContent(String prerenderedContent) {
    this.prerenderedContent = prerenderedContent;
  }


  public AccountIssue title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the issue.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountIssue accountIssue = (AccountIssue) o;
    return Objects.equals(this.actions, accountIssue.actions) &&
        Objects.equals(this.impact, accountIssue.impact) &&
        Objects.equals(this.prerenderedContent, accountIssue.prerenderedContent) &&
        Objects.equals(this.title, accountIssue.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, impact, prerenderedContent, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountIssue {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    impact: ").append(toIndentedString(impact)).append("\n");
    sb.append("    prerenderedContent: ").append(toIndentedString(prerenderedContent)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("impact");
    openapiFields.add("prerenderedContent");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountIssue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountIssue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountIssue is not found in the empty JSON string", AccountIssue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountIssue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountIssue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
          }

          // validate the optional field `actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            Action.validateJsonElement(jsonArrayactions.get(i));
          };
        }
      }
      // validate the optional field `impact`
      if (jsonObj.get("impact") != null && !jsonObj.get("impact").isJsonNull()) {
        AccountIssueImpact.validateJsonElement(jsonObj.get("impact"));
      }
      if ((jsonObj.get("prerenderedContent") != null && !jsonObj.get("prerenderedContent").isJsonNull()) && !jsonObj.get("prerenderedContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prerenderedContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prerenderedContent").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountIssue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountIssue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountIssue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountIssue.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountIssue>() {
           @Override
           public void write(JsonWriter out, AccountIssue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountIssue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountIssue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountIssue
   * @throws IOException if the JSON string is invalid with respect to AccountIssue
   */
  public static AccountIssue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountIssue.class);
  }

  /**
   * Convert an instance of AccountIssue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

