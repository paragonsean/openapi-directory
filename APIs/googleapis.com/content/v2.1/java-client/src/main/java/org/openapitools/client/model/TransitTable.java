/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TransitTableTransitTimeRow;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransitTable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransitTable {
  public static final String SERIALIZED_NAME_POSTAL_CODE_GROUP_NAMES = "postalCodeGroupNames";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE_GROUP_NAMES)
  private List<String> postalCodeGroupNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private List<TransitTableTransitTimeRow> rows = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSIT_TIME_LABELS = "transitTimeLabels";
  @SerializedName(SERIALIZED_NAME_TRANSIT_TIME_LABELS)
  private List<String> transitTimeLabels = new ArrayList<>();

  public TransitTable() {
  }

  public TransitTable postalCodeGroupNames(List<String> postalCodeGroupNames) {
    this.postalCodeGroupNames = postalCodeGroupNames;
    return this;
  }

  public TransitTable addPostalCodeGroupNamesItem(String postalCodeGroupNamesItem) {
    if (this.postalCodeGroupNames == null) {
      this.postalCodeGroupNames = new ArrayList<>();
    }
    this.postalCodeGroupNames.add(postalCodeGroupNamesItem);
    return this;
  }

  /**
   * A list of postal group names. The last value can be &#x60;\&quot;all other locations\&quot;&#x60;. Example: &#x60;[\&quot;zone 1\&quot;, \&quot;zone 2\&quot;, \&quot;all other locations\&quot;]&#x60;. The referred postal code groups must match the delivery country of the service.
   * @return postalCodeGroupNames
   */
  @javax.annotation.Nullable
  public List<String> getPostalCodeGroupNames() {
    return postalCodeGroupNames;
  }

  public void setPostalCodeGroupNames(List<String> postalCodeGroupNames) {
    this.postalCodeGroupNames = postalCodeGroupNames;
  }


  public TransitTable rows(List<TransitTableTransitTimeRow> rows) {
    this.rows = rows;
    return this;
  }

  public TransitTable addRowsItem(TransitTableTransitTimeRow rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

  /**
   * Get rows
   * @return rows
   */
  @javax.annotation.Nullable
  public List<TransitTableTransitTimeRow> getRows() {
    return rows;
  }

  public void setRows(List<TransitTableTransitTimeRow> rows) {
    this.rows = rows;
  }


  public TransitTable transitTimeLabels(List<String> transitTimeLabels) {
    this.transitTimeLabels = transitTimeLabels;
    return this;
  }

  public TransitTable addTransitTimeLabelsItem(String transitTimeLabelsItem) {
    if (this.transitTimeLabels == null) {
      this.transitTimeLabels = new ArrayList<>();
    }
    this.transitTimeLabels.add(transitTimeLabelsItem);
    return this;
  }

  /**
   * A list of transit time labels. The last value can be &#x60;\&quot;all other labels\&quot;&#x60;. Example: &#x60;[\&quot;food\&quot;, \&quot;electronics\&quot;, \&quot;all other labels\&quot;]&#x60;.
   * @return transitTimeLabels
   */
  @javax.annotation.Nullable
  public List<String> getTransitTimeLabels() {
    return transitTimeLabels;
  }

  public void setTransitTimeLabels(List<String> transitTimeLabels) {
    this.transitTimeLabels = transitTimeLabels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransitTable transitTable = (TransitTable) o;
    return Objects.equals(this.postalCodeGroupNames, transitTable.postalCodeGroupNames) &&
        Objects.equals(this.rows, transitTable.rows) &&
        Objects.equals(this.transitTimeLabels, transitTable.transitTimeLabels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(postalCodeGroupNames, rows, transitTimeLabels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransitTable {\n");
    sb.append("    postalCodeGroupNames: ").append(toIndentedString(postalCodeGroupNames)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    transitTimeLabels: ").append(toIndentedString(transitTimeLabels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("postalCodeGroupNames");
    openapiFields.add("rows");
    openapiFields.add("transitTimeLabels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransitTable
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransitTable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransitTable is not found in the empty JSON string", TransitTable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransitTable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransitTable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("postalCodeGroupNames") != null && !jsonObj.get("postalCodeGroupNames").isJsonNull() && !jsonObj.get("postalCodeGroupNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCodeGroupNames` to be an array in the JSON string but got `%s`", jsonObj.get("postalCodeGroupNames").toString()));
      }
      if (jsonObj.get("rows") != null && !jsonObj.get("rows").isJsonNull()) {
        JsonArray jsonArrayrows = jsonObj.getAsJsonArray("rows");
        if (jsonArrayrows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rows` to be an array in the JSON string but got `%s`", jsonObj.get("rows").toString()));
          }

          // validate the optional field `rows` (array)
          for (int i = 0; i < jsonArrayrows.size(); i++) {
            TransitTableTransitTimeRow.validateJsonElement(jsonArrayrows.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("transitTimeLabels") != null && !jsonObj.get("transitTimeLabels").isJsonNull() && !jsonObj.get("transitTimeLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transitTimeLabels` to be an array in the JSON string but got `%s`", jsonObj.get("transitTimeLabels").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransitTable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransitTable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransitTable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransitTable.class));

       return (TypeAdapter<T>) new TypeAdapter<TransitTable>() {
           @Override
           public void write(JsonWriter out, TransitTable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransitTable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransitTable given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransitTable
   * @throws IOException if the JSON string is invalid with respect to TransitTable
   */
  public static TransitTable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransitTable.class);
  }

  /**
   * Convert an instance of TransitTable to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

