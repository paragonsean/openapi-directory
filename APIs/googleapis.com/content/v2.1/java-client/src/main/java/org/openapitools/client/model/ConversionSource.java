/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAnalyticsLink;
import org.openapitools.client.model.MerchantCenterDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a conversion source owned by a Merchant account. A merchant account can have up to 200 conversion sources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConversionSource {
  public static final String SERIALIZED_NAME_CONVERSION_SOURCE_ID = "conversionSourceId";
  @SerializedName(SERIALIZED_NAME_CONVERSION_SOURCE_ID)
  private String conversionSourceId;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  public static final String SERIALIZED_NAME_GOOGLE_ANALYTICS_LINK = "googleAnalyticsLink";
  @SerializedName(SERIALIZED_NAME_GOOGLE_ANALYTICS_LINK)
  private GoogleAnalyticsLink googleAnalyticsLink;

  public static final String SERIALIZED_NAME_MERCHANT_CENTER_DESTINATION = "merchantCenterDestination";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CENTER_DESTINATION)
  private MerchantCenterDestination merchantCenterDestination;

  /**
   * Output only. Current state of this conversion source. Can&#39;t be edited through the API.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    ARCHIVED("ARCHIVED"),
    
    PENDING("PENDING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public ConversionSource() {
  }

  public ConversionSource(
     String conversionSourceId, 
     String expireTime, 
     StateEnum state
  ) {
    this();
    this.conversionSourceId = conversionSourceId;
    this.expireTime = expireTime;
    this.state = state;
  }

  /**
   * Output only. Generated by the Content API upon creation of a new &#x60;ConversionSource&#x60;. Format: [a-z]{4}:.+ The four characters before the colon represent the type of conversio source. Content after the colon represents the ID of the conversion source within that type. The ID of two different conversion sources might be the same across different types. The following type prefixes are supported: - galk: For GoogleAnalyticsLink sources. - mcdn: For MerchantCenterDestination sources.
   * @return conversionSourceId
   */
  @javax.annotation.Nullable
  public String getConversionSourceId() {
    return conversionSourceId;
  }



  /**
   * Output only. The time when an archived conversion source becomes permanently deleted and is no longer available to undelete.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }



  public ConversionSource googleAnalyticsLink(GoogleAnalyticsLink googleAnalyticsLink) {
    this.googleAnalyticsLink = googleAnalyticsLink;
    return this;
  }

  /**
   * Get googleAnalyticsLink
   * @return googleAnalyticsLink
   */
  @javax.annotation.Nullable
  public GoogleAnalyticsLink getGoogleAnalyticsLink() {
    return googleAnalyticsLink;
  }

  public void setGoogleAnalyticsLink(GoogleAnalyticsLink googleAnalyticsLink) {
    this.googleAnalyticsLink = googleAnalyticsLink;
  }


  public ConversionSource merchantCenterDestination(MerchantCenterDestination merchantCenterDestination) {
    this.merchantCenterDestination = merchantCenterDestination;
    return this;
  }

  /**
   * Get merchantCenterDestination
   * @return merchantCenterDestination
   */
  @javax.annotation.Nullable
  public MerchantCenterDestination getMerchantCenterDestination() {
    return merchantCenterDestination;
  }

  public void setMerchantCenterDestination(MerchantCenterDestination merchantCenterDestination) {
    this.merchantCenterDestination = merchantCenterDestination;
  }


  /**
   * Output only. Current state of this conversion source. Can&#39;t be edited through the API.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversionSource conversionSource = (ConversionSource) o;
    return Objects.equals(this.conversionSourceId, conversionSource.conversionSourceId) &&
        Objects.equals(this.expireTime, conversionSource.expireTime) &&
        Objects.equals(this.googleAnalyticsLink, conversionSource.googleAnalyticsLink) &&
        Objects.equals(this.merchantCenterDestination, conversionSource.merchantCenterDestination) &&
        Objects.equals(this.state, conversionSource.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conversionSourceId, expireTime, googleAnalyticsLink, merchantCenterDestination, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversionSource {\n");
    sb.append("    conversionSourceId: ").append(toIndentedString(conversionSourceId)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    googleAnalyticsLink: ").append(toIndentedString(googleAnalyticsLink)).append("\n");
    sb.append("    merchantCenterDestination: ").append(toIndentedString(merchantCenterDestination)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conversionSourceId");
    openapiFields.add("expireTime");
    openapiFields.add("googleAnalyticsLink");
    openapiFields.add("merchantCenterDestination");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConversionSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConversionSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversionSource is not found in the empty JSON string", ConversionSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConversionSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversionSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("conversionSourceId") != null && !jsonObj.get("conversionSourceId").isJsonNull()) && !jsonObj.get("conversionSourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversionSourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversionSourceId").toString()));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      // validate the optional field `googleAnalyticsLink`
      if (jsonObj.get("googleAnalyticsLink") != null && !jsonObj.get("googleAnalyticsLink").isJsonNull()) {
        GoogleAnalyticsLink.validateJsonElement(jsonObj.get("googleAnalyticsLink"));
      }
      // validate the optional field `merchantCenterDestination`
      if (jsonObj.get("merchantCenterDestination") != null && !jsonObj.get("merchantCenterDestination").isJsonNull()) {
        MerchantCenterDestination.validateJsonElement(jsonObj.get("merchantCenterDestination"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversionSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversionSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversionSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversionSource.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversionSource>() {
           @Override
           public void write(JsonWriter out, ConversionSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversionSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConversionSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConversionSource
   * @throws IOException if the JSON string is invalid with respect to ConversionSource
   */
  public static ConversionSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversionSource.class);
  }

  /**
   * Convert an instance of ConversionSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

