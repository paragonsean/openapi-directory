/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderTrackingSignalLineItemDetails;
import org.openapitools.client.model.OrderTrackingSignalShipmentLineItemMapping;
import org.openapitools.client.model.OrderTrackingSignalShippingInfo;
import org.openapitools.client.model.PriceAmount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a merchant trade from which signals are extracted, e.g. shipping.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderTrackingSignal {
  public static final String SERIALIZED_NAME_CUSTOMER_SHIPPING_FEE = "customerShippingFee";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SHIPPING_FEE)
  private PriceAmount customerShippingFee;

  public static final String SERIALIZED_NAME_DELIVERY_POSTAL_CODE = "deliveryPostalCode";
  @SerializedName(SERIALIZED_NAME_DELIVERY_POSTAL_CODE)
  private String deliveryPostalCode;

  public static final String SERIALIZED_NAME_DELIVERY_REGION_CODE = "deliveryRegionCode";
  @SerializedName(SERIALIZED_NAME_DELIVERY_REGION_CODE)
  private String deliveryRegionCode;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "lineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<OrderTrackingSignalLineItemDetails> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_ORDER_CREATED_TIME = "orderCreatedTime";
  @SerializedName(SERIALIZED_NAME_ORDER_CREATED_TIME)
  private OffsetDateTime orderCreatedTime;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ORDER_TRACKING_SIGNAL_ID = "orderTrackingSignalId";
  @SerializedName(SERIALIZED_NAME_ORDER_TRACKING_SIGNAL_ID)
  private String orderTrackingSignalId;

  public static final String SERIALIZED_NAME_SHIPMENT_LINE_ITEM_MAPPING = "shipmentLineItemMapping";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_LINE_ITEM_MAPPING)
  private List<OrderTrackingSignalShipmentLineItemMapping> shipmentLineItemMapping = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPPING_INFO = "shippingInfo";
  @SerializedName(SERIALIZED_NAME_SHIPPING_INFO)
  private List<OrderTrackingSignalShippingInfo> shippingInfo = new ArrayList<>();

  public OrderTrackingSignal() {
  }

  public OrderTrackingSignal(
     String orderTrackingSignalId
  ) {
    this();
    this.orderTrackingSignalId = orderTrackingSignalId;
  }

  public OrderTrackingSignal customerShippingFee(PriceAmount customerShippingFee) {
    this.customerShippingFee = customerShippingFee;
    return this;
  }

  /**
   * Get customerShippingFee
   * @return customerShippingFee
   */
  @javax.annotation.Nullable
  public PriceAmount getCustomerShippingFee() {
    return customerShippingFee;
  }

  public void setCustomerShippingFee(PriceAmount customerShippingFee) {
    this.customerShippingFee = customerShippingFee;
  }


  public OrderTrackingSignal deliveryPostalCode(String deliveryPostalCode) {
    this.deliveryPostalCode = deliveryPostalCode;
    return this;
  }

  /**
   * Required. The delivery postal code, as a continuous string without spaces or dashes, e.g. \&quot;95016\&quot;. This field will be anonymized in returned OrderTrackingSignal creation response.
   * @return deliveryPostalCode
   */
  @javax.annotation.Nullable
  public String getDeliveryPostalCode() {
    return deliveryPostalCode;
  }

  public void setDeliveryPostalCode(String deliveryPostalCode) {
    this.deliveryPostalCode = deliveryPostalCode;
  }


  public OrderTrackingSignal deliveryRegionCode(String deliveryRegionCode) {
    this.deliveryRegionCode = deliveryRegionCode;
    return this;
  }

  /**
   * Required. The [CLDR territory code] (http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml) for the shipping destination.
   * @return deliveryRegionCode
   */
  @javax.annotation.Nullable
  public String getDeliveryRegionCode() {
    return deliveryRegionCode;
  }

  public void setDeliveryRegionCode(String deliveryRegionCode) {
    this.deliveryRegionCode = deliveryRegionCode;
  }


  public OrderTrackingSignal lineItems(List<OrderTrackingSignalLineItemDetails> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public OrderTrackingSignal addLineItemsItem(OrderTrackingSignalLineItemDetails lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * Information about line items in the order.
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<OrderTrackingSignalLineItemDetails> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<OrderTrackingSignalLineItemDetails> lineItems) {
    this.lineItems = lineItems;
  }


  public OrderTrackingSignal merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  /**
   * The Google merchant ID of this order tracking signal. This value is optional. If left unset, the caller&#39;s merchant ID is used. You must request access in order to provide data on behalf of another merchant. For more information, see [Submitting Order Tracking Signals](/shopping-content/guides/order-tracking-signals).
   * @return merchantId
   */
  @javax.annotation.Nullable
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public OrderTrackingSignal orderCreatedTime(OffsetDateTime orderCreatedTime) {
    this.orderCreatedTime = orderCreatedTime;
    return this;
  }

  /**
   * Get orderCreatedTime
   * @return orderCreatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getOrderCreatedTime() {
    return orderCreatedTime;
  }

  public void setOrderCreatedTime(OffsetDateTime orderCreatedTime) {
    this.orderCreatedTime = orderCreatedTime;
  }


  public OrderTrackingSignal orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Required. The ID of the order on the merchant side. This field will be hashed in returned OrderTrackingSignal creation response.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  /**
   * Output only. The ID that uniquely identifies this order tracking signal.
   * @return orderTrackingSignalId
   */
  @javax.annotation.Nullable
  public String getOrderTrackingSignalId() {
    return orderTrackingSignalId;
  }



  public OrderTrackingSignal shipmentLineItemMapping(List<OrderTrackingSignalShipmentLineItemMapping> shipmentLineItemMapping) {
    this.shipmentLineItemMapping = shipmentLineItemMapping;
    return this;
  }

  public OrderTrackingSignal addShipmentLineItemMappingItem(OrderTrackingSignalShipmentLineItemMapping shipmentLineItemMappingItem) {
    if (this.shipmentLineItemMapping == null) {
      this.shipmentLineItemMapping = new ArrayList<>();
    }
    this.shipmentLineItemMapping.add(shipmentLineItemMappingItem);
    return this;
  }

  /**
   * The mapping of the line items to the shipment information.
   * @return shipmentLineItemMapping
   */
  @javax.annotation.Nullable
  public List<OrderTrackingSignalShipmentLineItemMapping> getShipmentLineItemMapping() {
    return shipmentLineItemMapping;
  }

  public void setShipmentLineItemMapping(List<OrderTrackingSignalShipmentLineItemMapping> shipmentLineItemMapping) {
    this.shipmentLineItemMapping = shipmentLineItemMapping;
  }


  public OrderTrackingSignal shippingInfo(List<OrderTrackingSignalShippingInfo> shippingInfo) {
    this.shippingInfo = shippingInfo;
    return this;
  }

  public OrderTrackingSignal addShippingInfoItem(OrderTrackingSignalShippingInfo shippingInfoItem) {
    if (this.shippingInfo == null) {
      this.shippingInfo = new ArrayList<>();
    }
    this.shippingInfo.add(shippingInfoItem);
    return this;
  }

  /**
   * The shipping information for the order.
   * @return shippingInfo
   */
  @javax.annotation.Nullable
  public List<OrderTrackingSignalShippingInfo> getShippingInfo() {
    return shippingInfo;
  }

  public void setShippingInfo(List<OrderTrackingSignalShippingInfo> shippingInfo) {
    this.shippingInfo = shippingInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderTrackingSignal orderTrackingSignal = (OrderTrackingSignal) o;
    return Objects.equals(this.customerShippingFee, orderTrackingSignal.customerShippingFee) &&
        Objects.equals(this.deliveryPostalCode, orderTrackingSignal.deliveryPostalCode) &&
        Objects.equals(this.deliveryRegionCode, orderTrackingSignal.deliveryRegionCode) &&
        Objects.equals(this.lineItems, orderTrackingSignal.lineItems) &&
        Objects.equals(this.merchantId, orderTrackingSignal.merchantId) &&
        Objects.equals(this.orderCreatedTime, orderTrackingSignal.orderCreatedTime) &&
        Objects.equals(this.orderId, orderTrackingSignal.orderId) &&
        Objects.equals(this.orderTrackingSignalId, orderTrackingSignal.orderTrackingSignalId) &&
        Objects.equals(this.shipmentLineItemMapping, orderTrackingSignal.shipmentLineItemMapping) &&
        Objects.equals(this.shippingInfo, orderTrackingSignal.shippingInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerShippingFee, deliveryPostalCode, deliveryRegionCode, lineItems, merchantId, orderCreatedTime, orderId, orderTrackingSignalId, shipmentLineItemMapping, shippingInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderTrackingSignal {\n");
    sb.append("    customerShippingFee: ").append(toIndentedString(customerShippingFee)).append("\n");
    sb.append("    deliveryPostalCode: ").append(toIndentedString(deliveryPostalCode)).append("\n");
    sb.append("    deliveryRegionCode: ").append(toIndentedString(deliveryRegionCode)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    orderCreatedTime: ").append(toIndentedString(orderCreatedTime)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderTrackingSignalId: ").append(toIndentedString(orderTrackingSignalId)).append("\n");
    sb.append("    shipmentLineItemMapping: ").append(toIndentedString(shipmentLineItemMapping)).append("\n");
    sb.append("    shippingInfo: ").append(toIndentedString(shippingInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customerShippingFee");
    openapiFields.add("deliveryPostalCode");
    openapiFields.add("deliveryRegionCode");
    openapiFields.add("lineItems");
    openapiFields.add("merchantId");
    openapiFields.add("orderCreatedTime");
    openapiFields.add("orderId");
    openapiFields.add("orderTrackingSignalId");
    openapiFields.add("shipmentLineItemMapping");
    openapiFields.add("shippingInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderTrackingSignal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderTrackingSignal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderTrackingSignal is not found in the empty JSON string", OrderTrackingSignal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderTrackingSignal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderTrackingSignal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `customerShippingFee`
      if (jsonObj.get("customerShippingFee") != null && !jsonObj.get("customerShippingFee").isJsonNull()) {
        PriceAmount.validateJsonElement(jsonObj.get("customerShippingFee"));
      }
      if ((jsonObj.get("deliveryPostalCode") != null && !jsonObj.get("deliveryPostalCode").isJsonNull()) && !jsonObj.get("deliveryPostalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryPostalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryPostalCode").toString()));
      }
      if ((jsonObj.get("deliveryRegionCode") != null && !jsonObj.get("deliveryRegionCode").isJsonNull()) && !jsonObj.get("deliveryRegionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryRegionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryRegionCode").toString()));
      }
      if (jsonObj.get("lineItems") != null && !jsonObj.get("lineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("lineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lineItems` to be an array in the JSON string but got `%s`", jsonObj.get("lineItems").toString()));
          }

          // validate the optional field `lineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            OrderTrackingSignalLineItemDetails.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      if ((jsonObj.get("merchantId") != null && !jsonObj.get("merchantId").isJsonNull()) && !jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      // validate the optional field `orderCreatedTime`
      if (jsonObj.get("orderCreatedTime") != null && !jsonObj.get("orderCreatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("orderCreatedTime"));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("orderTrackingSignalId") != null && !jsonObj.get("orderTrackingSignalId").isJsonNull()) && !jsonObj.get("orderTrackingSignalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderTrackingSignalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderTrackingSignalId").toString()));
      }
      if (jsonObj.get("shipmentLineItemMapping") != null && !jsonObj.get("shipmentLineItemMapping").isJsonNull()) {
        JsonArray jsonArrayshipmentLineItemMapping = jsonObj.getAsJsonArray("shipmentLineItemMapping");
        if (jsonArrayshipmentLineItemMapping != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shipmentLineItemMapping").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipmentLineItemMapping` to be an array in the JSON string but got `%s`", jsonObj.get("shipmentLineItemMapping").toString()));
          }

          // validate the optional field `shipmentLineItemMapping` (array)
          for (int i = 0; i < jsonArrayshipmentLineItemMapping.size(); i++) {
            OrderTrackingSignalShipmentLineItemMapping.validateJsonElement(jsonArrayshipmentLineItemMapping.get(i));
          };
        }
      }
      if (jsonObj.get("shippingInfo") != null && !jsonObj.get("shippingInfo").isJsonNull()) {
        JsonArray jsonArrayshippingInfo = jsonObj.getAsJsonArray("shippingInfo");
        if (jsonArrayshippingInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shippingInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shippingInfo` to be an array in the JSON string but got `%s`", jsonObj.get("shippingInfo").toString()));
          }

          // validate the optional field `shippingInfo` (array)
          for (int i = 0; i < jsonArrayshippingInfo.size(); i++) {
            OrderTrackingSignalShippingInfo.validateJsonElement(jsonArrayshippingInfo.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderTrackingSignal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderTrackingSignal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderTrackingSignal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderTrackingSignal.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderTrackingSignal>() {
           @Override
           public void write(JsonWriter out, OrderTrackingSignal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderTrackingSignal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderTrackingSignal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderTrackingSignal
   * @throws IOException if the JSON string is invalid with respect to OrderTrackingSignal
   */
  public static OrderTrackingSignal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderTrackingSignal.class);
  }

  /**
   * Convert an instance of OrderTrackingSignal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

