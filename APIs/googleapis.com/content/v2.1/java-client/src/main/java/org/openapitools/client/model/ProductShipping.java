/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Price;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProductShipping
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductShipping {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_LOCATION_GROUP_NAME = "locationGroupName";
  @SerializedName(SERIALIZED_NAME_LOCATION_GROUP_NAME)
  private String locationGroupName;

  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_MAX_HANDLING_TIME = "maxHandlingTime";
  @SerializedName(SERIALIZED_NAME_MAX_HANDLING_TIME)
  private String maxHandlingTime;

  public static final String SERIALIZED_NAME_MAX_TRANSIT_TIME = "maxTransitTime";
  @SerializedName(SERIALIZED_NAME_MAX_TRANSIT_TIME)
  private String maxTransitTime;

  public static final String SERIALIZED_NAME_MIN_HANDLING_TIME = "minHandlingTime";
  @SerializedName(SERIALIZED_NAME_MIN_HANDLING_TIME)
  private String minHandlingTime;

  public static final String SERIALIZED_NAME_MIN_TRANSIT_TIME = "minTransitTime";
  @SerializedName(SERIALIZED_NAME_MIN_TRANSIT_TIME)
  private String minTransitTime;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Price price;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public ProductShipping() {
  }

  public ProductShipping country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The CLDR territory code of the country to which an item will ship.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public ProductShipping locationGroupName(String locationGroupName) {
    this.locationGroupName = locationGroupName;
    return this;
  }

  /**
   * The location where the shipping is applicable, represented by a location group name.
   * @return locationGroupName
   */
  @javax.annotation.Nullable
  public String getLocationGroupName() {
    return locationGroupName;
  }

  public void setLocationGroupName(String locationGroupName) {
    this.locationGroupName = locationGroupName;
  }


  public ProductShipping locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The numeric ID of a location that the shipping rate applies to as defined in the Google Ads API.
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public ProductShipping maxHandlingTime(String maxHandlingTime) {
    this.maxHandlingTime = maxHandlingTime;
    return this;
  }

  /**
   * Maximum handling time (inclusive) between when the order is received and shipped in business days. 0 means that the order is shipped on the same day as it&#39;s received if it happens before the cut-off time. Both maxHandlingTime and maxTransitTime are required if providing shipping speeds.
   * @return maxHandlingTime
   */
  @javax.annotation.Nullable
  public String getMaxHandlingTime() {
    return maxHandlingTime;
  }

  public void setMaxHandlingTime(String maxHandlingTime) {
    this.maxHandlingTime = maxHandlingTime;
  }


  public ProductShipping maxTransitTime(String maxTransitTime) {
    this.maxTransitTime = maxTransitTime;
    return this;
  }

  /**
   * Maximum transit time (inclusive) between when the order has shipped and when it&#39;s delivered in business days. 0 means that the order is delivered on the same day as it ships. Both maxHandlingTime and maxTransitTime are required if providing shipping speeds.
   * @return maxTransitTime
   */
  @javax.annotation.Nullable
  public String getMaxTransitTime() {
    return maxTransitTime;
  }

  public void setMaxTransitTime(String maxTransitTime) {
    this.maxTransitTime = maxTransitTime;
  }


  public ProductShipping minHandlingTime(String minHandlingTime) {
    this.minHandlingTime = minHandlingTime;
    return this;
  }

  /**
   * Minimum handling time (inclusive) between when the order is received and shipped in business days. 0 means that the order is shipped on the same day as it&#39;s received if it happens before the cut-off time. minHandlingTime can only be present together with maxHandlingTime; but it&#39;s not required if maxHandlingTime is present.
   * @return minHandlingTime
   */
  @javax.annotation.Nullable
  public String getMinHandlingTime() {
    return minHandlingTime;
  }

  public void setMinHandlingTime(String minHandlingTime) {
    this.minHandlingTime = minHandlingTime;
  }


  public ProductShipping minTransitTime(String minTransitTime) {
    this.minTransitTime = minTransitTime;
    return this;
  }

  /**
   * Minimum transit time (inclusive) between when the order has shipped and when it&#39;s delivered in business days. 0 means that the order is delivered on the same day as it ships. minTransitTime can only be present together with maxTransitTime; but it&#39;s not required if maxTransitTime is present.
   * @return minTransitTime
   */
  @javax.annotation.Nullable
  public String getMinTransitTime() {
    return minTransitTime;
  }

  public void setMinTransitTime(String minTransitTime) {
    this.minTransitTime = minTransitTime;
  }


  public ProductShipping postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * The postal code range that the shipping rate applies to, represented by a postal code, a postal code prefix followed by a * wildcard, a range between two postal codes or two postal code prefixes of equal length.
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public ProductShipping price(Price price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public Price getPrice() {
    return price;
  }

  public void setPrice(Price price) {
    this.price = price;
  }


  public ProductShipping region(String region) {
    this.region = region;
    return this;
  }

  /**
   * The geographic region to which a shipping rate applies.
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public ProductShipping service(String service) {
    this.service = service;
    return this;
  }

  /**
   * A free-form description of the service class or delivery speed.
   * @return service
   */
  @javax.annotation.Nullable
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductShipping productShipping = (ProductShipping) o;
    return Objects.equals(this.country, productShipping.country) &&
        Objects.equals(this.locationGroupName, productShipping.locationGroupName) &&
        Objects.equals(this.locationId, productShipping.locationId) &&
        Objects.equals(this.maxHandlingTime, productShipping.maxHandlingTime) &&
        Objects.equals(this.maxTransitTime, productShipping.maxTransitTime) &&
        Objects.equals(this.minHandlingTime, productShipping.minHandlingTime) &&
        Objects.equals(this.minTransitTime, productShipping.minTransitTime) &&
        Objects.equals(this.postalCode, productShipping.postalCode) &&
        Objects.equals(this.price, productShipping.price) &&
        Objects.equals(this.region, productShipping.region) &&
        Objects.equals(this.service, productShipping.service);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, locationGroupName, locationId, maxHandlingTime, maxTransitTime, minHandlingTime, minTransitTime, postalCode, price, region, service);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductShipping {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    locationGroupName: ").append(toIndentedString(locationGroupName)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    maxHandlingTime: ").append(toIndentedString(maxHandlingTime)).append("\n");
    sb.append("    maxTransitTime: ").append(toIndentedString(maxTransitTime)).append("\n");
    sb.append("    minHandlingTime: ").append(toIndentedString(minHandlingTime)).append("\n");
    sb.append("    minTransitTime: ").append(toIndentedString(minTransitTime)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("locationGroupName");
    openapiFields.add("locationId");
    openapiFields.add("maxHandlingTime");
    openapiFields.add("maxTransitTime");
    openapiFields.add("minHandlingTime");
    openapiFields.add("minTransitTime");
    openapiFields.add("postalCode");
    openapiFields.add("price");
    openapiFields.add("region");
    openapiFields.add("service");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductShipping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductShipping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductShipping is not found in the empty JSON string", ProductShipping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductShipping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductShipping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("locationGroupName") != null && !jsonObj.get("locationGroupName").isJsonNull()) && !jsonObj.get("locationGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationGroupName").toString()));
      }
      if ((jsonObj.get("locationId") != null && !jsonObj.get("locationId").isJsonNull()) && !jsonObj.get("locationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationId").toString()));
      }
      if ((jsonObj.get("maxHandlingTime") != null && !jsonObj.get("maxHandlingTime").isJsonNull()) && !jsonObj.get("maxHandlingTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxHandlingTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxHandlingTime").toString()));
      }
      if ((jsonObj.get("maxTransitTime") != null && !jsonObj.get("maxTransitTime").isJsonNull()) && !jsonObj.get("maxTransitTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxTransitTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxTransitTime").toString()));
      }
      if ((jsonObj.get("minHandlingTime") != null && !jsonObj.get("minHandlingTime").isJsonNull()) && !jsonObj.get("minHandlingTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minHandlingTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minHandlingTime").toString()));
      }
      if ((jsonObj.get("minTransitTime") != null && !jsonObj.get("minTransitTime").isJsonNull()) && !jsonObj.get("minTransitTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minTransitTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minTransitTime").toString()));
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("price"));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) && !jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductShipping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductShipping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductShipping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductShipping.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductShipping>() {
           @Override
           public void write(JsonWriter out, ProductShipping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductShipping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductShipping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductShipping
   * @throws IOException if the JSON string is invalid with respect to ProductShipping
   */
  public static ProductShipping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductShipping.class);
  }

  /**
   * Convert an instance of ProductShipping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

