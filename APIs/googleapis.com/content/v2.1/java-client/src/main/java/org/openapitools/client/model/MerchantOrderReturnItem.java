/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomerReturnReason;
import org.openapitools.client.model.MerchantRejectionReason;
import org.openapitools.client.model.MonetaryAmount;
import org.openapitools.client.model.OrderLineItemProduct;
import org.openapitools.client.model.RefundReason;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MerchantOrderReturnItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MerchantOrderReturnItem {
  public static final String SERIALIZED_NAME_CUSTOMER_RETURN_REASON = "customerReturnReason";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_RETURN_REASON)
  private CustomerReturnReason customerReturnReason;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_MERCHANT_REJECTION_REASON = "merchantRejectionReason";
  @SerializedName(SERIALIZED_NAME_MERCHANT_REJECTION_REASON)
  private MerchantRejectionReason merchantRejectionReason;

  public static final String SERIALIZED_NAME_MERCHANT_RETURN_REASON = "merchantReturnReason";
  @SerializedName(SERIALIZED_NAME_MERCHANT_RETURN_REASON)
  private RefundReason merchantReturnReason;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private OrderLineItemProduct product;

  public static final String SERIALIZED_NAME_REFUNDABLE_AMOUNT = "refundableAmount";
  @SerializedName(SERIALIZED_NAME_REFUNDABLE_AMOUNT)
  private MonetaryAmount refundableAmount;

  public static final String SERIALIZED_NAME_RETURN_ITEM_ID = "returnItemId";
  @SerializedName(SERIALIZED_NAME_RETURN_ITEM_ID)
  private String returnItemId;

  public static final String SERIALIZED_NAME_RETURN_SHIPMENT_IDS = "returnShipmentIds";
  @SerializedName(SERIALIZED_NAME_RETURN_SHIPMENT_IDS)
  private List<String> returnShipmentIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPMENT_GROUP_ID = "shipmentGroupId";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_GROUP_ID)
  private String shipmentGroupId;

  public static final String SERIALIZED_NAME_SHIPMENT_UNIT_ID = "shipmentUnitId";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_UNIT_ID)
  private String shipmentUnitId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public MerchantOrderReturnItem() {
  }

  public MerchantOrderReturnItem customerReturnReason(CustomerReturnReason customerReturnReason) {
    this.customerReturnReason = customerReturnReason;
    return this;
  }

  /**
   * Get customerReturnReason
   * @return customerReturnReason
   */
  @javax.annotation.Nullable
  public CustomerReturnReason getCustomerReturnReason() {
    return customerReturnReason;
  }

  public void setCustomerReturnReason(CustomerReturnReason customerReturnReason) {
    this.customerReturnReason = customerReturnReason;
  }


  public MerchantOrderReturnItem itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * Product level item ID. If the returned items are of the same product, they will have the same ID.
   * @return itemId
   */
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public MerchantOrderReturnItem merchantRejectionReason(MerchantRejectionReason merchantRejectionReason) {
    this.merchantRejectionReason = merchantRejectionReason;
    return this;
  }

  /**
   * Get merchantRejectionReason
   * @return merchantRejectionReason
   */
  @javax.annotation.Nullable
  public MerchantRejectionReason getMerchantRejectionReason() {
    return merchantRejectionReason;
  }

  public void setMerchantRejectionReason(MerchantRejectionReason merchantRejectionReason) {
    this.merchantRejectionReason = merchantRejectionReason;
  }


  public MerchantOrderReturnItem merchantReturnReason(RefundReason merchantReturnReason) {
    this.merchantReturnReason = merchantReturnReason;
    return this;
  }

  /**
   * Get merchantReturnReason
   * @return merchantReturnReason
   */
  @javax.annotation.Nullable
  public RefundReason getMerchantReturnReason() {
    return merchantReturnReason;
  }

  public void setMerchantReturnReason(RefundReason merchantReturnReason) {
    this.merchantReturnReason = merchantReturnReason;
  }


  public MerchantOrderReturnItem product(OrderLineItemProduct product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public OrderLineItemProduct getProduct() {
    return product;
  }

  public void setProduct(OrderLineItemProduct product) {
    this.product = product;
  }


  public MerchantOrderReturnItem refundableAmount(MonetaryAmount refundableAmount) {
    this.refundableAmount = refundableAmount;
    return this;
  }

  /**
   * Get refundableAmount
   * @return refundableAmount
   */
  @javax.annotation.Nullable
  public MonetaryAmount getRefundableAmount() {
    return refundableAmount;
  }

  public void setRefundableAmount(MonetaryAmount refundableAmount) {
    this.refundableAmount = refundableAmount;
  }


  public MerchantOrderReturnItem returnItemId(String returnItemId) {
    this.returnItemId = returnItemId;
    return this;
  }

  /**
   * Unit level ID for the return item. Different units of the same product will have different IDs.
   * @return returnItemId
   */
  @javax.annotation.Nullable
  public String getReturnItemId() {
    return returnItemId;
  }

  public void setReturnItemId(String returnItemId) {
    this.returnItemId = returnItemId;
  }


  public MerchantOrderReturnItem returnShipmentIds(List<String> returnShipmentIds) {
    this.returnShipmentIds = returnShipmentIds;
    return this;
  }

  public MerchantOrderReturnItem addReturnShipmentIdsItem(String returnShipmentIdsItem) {
    if (this.returnShipmentIds == null) {
      this.returnShipmentIds = new ArrayList<>();
    }
    this.returnShipmentIds.add(returnShipmentIdsItem);
    return this;
  }

  /**
   * IDs of the return shipments that this return item belongs to.
   * @return returnShipmentIds
   */
  @javax.annotation.Nullable
  public List<String> getReturnShipmentIds() {
    return returnShipmentIds;
  }

  public void setReturnShipmentIds(List<String> returnShipmentIds) {
    this.returnShipmentIds = returnShipmentIds;
  }


  public MerchantOrderReturnItem shipmentGroupId(String shipmentGroupId) {
    this.shipmentGroupId = shipmentGroupId;
    return this;
  }

  /**
   * ID of the original shipment group. Provided for shipments with invoice support.
   * @return shipmentGroupId
   */
  @javax.annotation.Nullable
  public String getShipmentGroupId() {
    return shipmentGroupId;
  }

  public void setShipmentGroupId(String shipmentGroupId) {
    this.shipmentGroupId = shipmentGroupId;
  }


  public MerchantOrderReturnItem shipmentUnitId(String shipmentUnitId) {
    this.shipmentUnitId = shipmentUnitId;
    return this;
  }

  /**
   * ID of the shipment unit assigned by the merchant. Provided for shipments with invoice support.
   * @return shipmentUnitId
   */
  @javax.annotation.Nullable
  public String getShipmentUnitId() {
    return shipmentUnitId;
  }

  public void setShipmentUnitId(String shipmentUnitId) {
    this.shipmentUnitId = shipmentUnitId;
  }


  public MerchantOrderReturnItem state(String state) {
    this.state = state;
    return this;
  }

  /**
   * State of the item. Acceptable values are: - \&quot;&#x60;canceled&#x60;\&quot; - \&quot;&#x60;new&#x60;\&quot; - \&quot;&#x60;received&#x60;\&quot; - \&quot;&#x60;refunded&#x60;\&quot; - \&quot;&#x60;rejected&#x60;\&quot; 
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantOrderReturnItem merchantOrderReturnItem = (MerchantOrderReturnItem) o;
    return Objects.equals(this.customerReturnReason, merchantOrderReturnItem.customerReturnReason) &&
        Objects.equals(this.itemId, merchantOrderReturnItem.itemId) &&
        Objects.equals(this.merchantRejectionReason, merchantOrderReturnItem.merchantRejectionReason) &&
        Objects.equals(this.merchantReturnReason, merchantOrderReturnItem.merchantReturnReason) &&
        Objects.equals(this.product, merchantOrderReturnItem.product) &&
        Objects.equals(this.refundableAmount, merchantOrderReturnItem.refundableAmount) &&
        Objects.equals(this.returnItemId, merchantOrderReturnItem.returnItemId) &&
        Objects.equals(this.returnShipmentIds, merchantOrderReturnItem.returnShipmentIds) &&
        Objects.equals(this.shipmentGroupId, merchantOrderReturnItem.shipmentGroupId) &&
        Objects.equals(this.shipmentUnitId, merchantOrderReturnItem.shipmentUnitId) &&
        Objects.equals(this.state, merchantOrderReturnItem.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerReturnReason, itemId, merchantRejectionReason, merchantReturnReason, product, refundableAmount, returnItemId, returnShipmentIds, shipmentGroupId, shipmentUnitId, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantOrderReturnItem {\n");
    sb.append("    customerReturnReason: ").append(toIndentedString(customerReturnReason)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    merchantRejectionReason: ").append(toIndentedString(merchantRejectionReason)).append("\n");
    sb.append("    merchantReturnReason: ").append(toIndentedString(merchantReturnReason)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    refundableAmount: ").append(toIndentedString(refundableAmount)).append("\n");
    sb.append("    returnItemId: ").append(toIndentedString(returnItemId)).append("\n");
    sb.append("    returnShipmentIds: ").append(toIndentedString(returnShipmentIds)).append("\n");
    sb.append("    shipmentGroupId: ").append(toIndentedString(shipmentGroupId)).append("\n");
    sb.append("    shipmentUnitId: ").append(toIndentedString(shipmentUnitId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customerReturnReason");
    openapiFields.add("itemId");
    openapiFields.add("merchantRejectionReason");
    openapiFields.add("merchantReturnReason");
    openapiFields.add("product");
    openapiFields.add("refundableAmount");
    openapiFields.add("returnItemId");
    openapiFields.add("returnShipmentIds");
    openapiFields.add("shipmentGroupId");
    openapiFields.add("shipmentUnitId");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MerchantOrderReturnItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MerchantOrderReturnItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantOrderReturnItem is not found in the empty JSON string", MerchantOrderReturnItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MerchantOrderReturnItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MerchantOrderReturnItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `customerReturnReason`
      if (jsonObj.get("customerReturnReason") != null && !jsonObj.get("customerReturnReason").isJsonNull()) {
        CustomerReturnReason.validateJsonElement(jsonObj.get("customerReturnReason"));
      }
      if ((jsonObj.get("itemId") != null && !jsonObj.get("itemId").isJsonNull()) && !jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      // validate the optional field `merchantRejectionReason`
      if (jsonObj.get("merchantRejectionReason") != null && !jsonObj.get("merchantRejectionReason").isJsonNull()) {
        MerchantRejectionReason.validateJsonElement(jsonObj.get("merchantRejectionReason"));
      }
      // validate the optional field `merchantReturnReason`
      if (jsonObj.get("merchantReturnReason") != null && !jsonObj.get("merchantReturnReason").isJsonNull()) {
        RefundReason.validateJsonElement(jsonObj.get("merchantReturnReason"));
      }
      // validate the optional field `product`
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        OrderLineItemProduct.validateJsonElement(jsonObj.get("product"));
      }
      // validate the optional field `refundableAmount`
      if (jsonObj.get("refundableAmount") != null && !jsonObj.get("refundableAmount").isJsonNull()) {
        MonetaryAmount.validateJsonElement(jsonObj.get("refundableAmount"));
      }
      if ((jsonObj.get("returnItemId") != null && !jsonObj.get("returnItemId").isJsonNull()) && !jsonObj.get("returnItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnItemId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("returnShipmentIds") != null && !jsonObj.get("returnShipmentIds").isJsonNull() && !jsonObj.get("returnShipmentIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnShipmentIds` to be an array in the JSON string but got `%s`", jsonObj.get("returnShipmentIds").toString()));
      }
      if ((jsonObj.get("shipmentGroupId") != null && !jsonObj.get("shipmentGroupId").isJsonNull()) && !jsonObj.get("shipmentGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipmentGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipmentGroupId").toString()));
      }
      if ((jsonObj.get("shipmentUnitId") != null && !jsonObj.get("shipmentUnitId").isJsonNull()) && !jsonObj.get("shipmentUnitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipmentUnitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipmentUnitId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantOrderReturnItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantOrderReturnItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantOrderReturnItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantOrderReturnItem.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantOrderReturnItem>() {
           @Override
           public void write(JsonWriter out, MerchantOrderReturnItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantOrderReturnItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MerchantOrderReturnItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MerchantOrderReturnItem
   * @throws IOException if the JSON string is invalid with respect to MerchantOrderReturnItem
   */
  public static MerchantOrderReturnItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantOrderReturnItem.class);
  }

  /**
   * Convert an instance of MerchantOrderReturnItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

