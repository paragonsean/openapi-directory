/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RecommendationCallToAction;
import org.openapitools.client.model.RecommendationCreative;
import org.openapitools.client.model.RecommendationDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Recommendations are suggested ways to improve your merchant account&#39;s performance. For example, to engage with a feature, or start using a new Google product.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Recommendation {
  public static final String SERIALIZED_NAME_ADDITIONAL_CALL_TO_ACTION = "additionalCallToAction";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CALL_TO_ACTION)
  private List<RecommendationCallToAction> additionalCallToAction = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_DESCRIPTIONS = "additionalDescriptions";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DESCRIPTIONS)
  private List<RecommendationDescription> additionalDescriptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATIVE = "creative";
  @SerializedName(SERIALIZED_NAME_CREATIVE)
  private List<RecommendationCreative> creative = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_CALL_TO_ACTION = "defaultCallToAction";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CALL_TO_ACTION)
  private RecommendationCallToAction defaultCallToAction;

  public static final String SERIALIZED_NAME_DEFAULT_DESCRIPTION = "defaultDescription";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DESCRIPTION)
  private String defaultDescription;

  public static final String SERIALIZED_NAME_NUMERICAL_IMPACT = "numericalImpact";
  @SerializedName(SERIALIZED_NAME_NUMERICAL_IMPACT)
  private Integer numericalImpact;

  public static final String SERIALIZED_NAME_PAID = "paid";
  @SerializedName(SERIALIZED_NAME_PAID)
  private Boolean paid;

  public static final String SERIALIZED_NAME_RECOMMENDATION_NAME = "recommendationName";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_NAME)
  private String recommendationName;

  public static final String SERIALIZED_NAME_SUB_TYPE = "subType";
  @SerializedName(SERIALIZED_NAME_SUB_TYPE)
  private String subType;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Recommendation() {
  }

  public Recommendation(
     List<RecommendationCallToAction> additionalCallToAction, 
     List<RecommendationDescription> additionalDescriptions, 
     List<RecommendationCreative> creative, 
     String type
  ) {
    this();
    this.additionalCallToAction = additionalCallToAction;
    this.additionalDescriptions = additionalDescriptions;
    this.creative = creative;
    this.type = type;
  }

  /**
   * Output only. CTAs of this recommendation. Repeated.
   * @return additionalCallToAction
   */
  @javax.annotation.Nullable
  public List<RecommendationCallToAction> getAdditionalCallToAction() {
    return additionalCallToAction;
  }



  /**
   * Output only. List of additional localized descriptions for a recommendation. Localication uses the &#x60;languageCode&#x60; field in &#x60;GenerateRecommendations&#x60; requests. Not all description types are guaranteed to be present and we recommend to rely on default description.
   * @return additionalDescriptions
   */
  @javax.annotation.Nullable
  public List<RecommendationDescription> getAdditionalDescriptions() {
    return additionalDescriptions;
  }



  /**
   * Output only. Any creatives attached to the recommendation. Repeated.
   * @return creative
   */
  @javax.annotation.Nullable
  public List<RecommendationCreative> getCreative() {
    return creative;
  }



  public Recommendation defaultCallToAction(RecommendationCallToAction defaultCallToAction) {
    this.defaultCallToAction = defaultCallToAction;
    return this;
  }

  /**
   * Get defaultCallToAction
   * @return defaultCallToAction
   */
  @javax.annotation.Nullable
  public RecommendationCallToAction getDefaultCallToAction() {
    return defaultCallToAction;
  }

  public void setDefaultCallToAction(RecommendationCallToAction defaultCallToAction) {
    this.defaultCallToAction = defaultCallToAction;
  }


  public Recommendation defaultDescription(String defaultDescription) {
    this.defaultDescription = defaultDescription;
    return this;
  }

  /**
   * Optional. Localized recommendation description. The localization the {@link &#x60;GenerateRecommendationsRequest.language_code&#x60;} field in {@link &#x60;GenerateRecommendationsRequest&#x60;} requests.
   * @return defaultDescription
   */
  @javax.annotation.Nullable
  public String getDefaultDescription() {
    return defaultDescription;
  }

  public void setDefaultDescription(String defaultDescription) {
    this.defaultDescription = defaultDescription;
  }


  public Recommendation numericalImpact(Integer numericalImpact) {
    this.numericalImpact = numericalImpact;
    return this;
  }

  /**
   * Optional. A numerical score of the impact from the recommendation&#39;s description. For example, a recommendation might suggest an upward trend in sales for a certain product. Higher number means larger impact.
   * @return numericalImpact
   */
  @javax.annotation.Nullable
  public Integer getNumericalImpact() {
    return numericalImpact;
  }

  public void setNumericalImpact(Integer numericalImpact) {
    this.numericalImpact = numericalImpact;
  }


  public Recommendation paid(Boolean paid) {
    this.paid = paid;
    return this;
  }

  /**
   * Optional. Indicates whether a user needs to pay when they complete the user journey suggested by the recommendation.
   * @return paid
   */
  @javax.annotation.Nullable
  public Boolean getPaid() {
    return paid;
  }

  public void setPaid(Boolean paid) {
    this.paid = paid;
  }


  public Recommendation recommendationName(String recommendationName) {
    this.recommendationName = recommendationName;
    return this;
  }

  /**
   * Optional. Localized recommendation name. The localization uses the {@link &#x60;GenerateRecommendationsRequest.language_code&#x60;} field in {@link &#x60;GenerateRecommendationsRequest&#x60;} requests.
   * @return recommendationName
   */
  @javax.annotation.Nullable
  public String getRecommendationName() {
    return recommendationName;
  }

  public void setRecommendationName(String recommendationName) {
    this.recommendationName = recommendationName;
  }


  public Recommendation subType(String subType) {
    this.subType = subType;
    return this;
  }

  /**
   * Optional. Subtype of the recommendations. Only applicable when multiple recommendations can be generated per type, and is used as an identifier of recommendation under the same recommendation type.
   * @return subType
   */
  @javax.annotation.Nullable
  public String getSubType() {
    return subType;
  }

  public void setSubType(String subType) {
    this.subType = subType;
  }


  public Recommendation title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Optional. Localized Recommendation Title. Localization uses the {@link &#x60;GenerateRecommendationsRequest.language_code&#x60;} field in {@link &#x60;GenerateRecommendationsRequest&#x60;} requests.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  /**
   * Output only. Type of the recommendation. List of currently available recommendation types: - OPPORTUNITY_CREATE_NEW_COLLECTION - OPPORTUNITY_CREATE_EMAIL_CAMPAIGN
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Recommendation recommendation = (Recommendation) o;
    return Objects.equals(this.additionalCallToAction, recommendation.additionalCallToAction) &&
        Objects.equals(this.additionalDescriptions, recommendation.additionalDescriptions) &&
        Objects.equals(this.creative, recommendation.creative) &&
        Objects.equals(this.defaultCallToAction, recommendation.defaultCallToAction) &&
        Objects.equals(this.defaultDescription, recommendation.defaultDescription) &&
        Objects.equals(this.numericalImpact, recommendation.numericalImpact) &&
        Objects.equals(this.paid, recommendation.paid) &&
        Objects.equals(this.recommendationName, recommendation.recommendationName) &&
        Objects.equals(this.subType, recommendation.subType) &&
        Objects.equals(this.title, recommendation.title) &&
        Objects.equals(this.type, recommendation.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalCallToAction, additionalDescriptions, creative, defaultCallToAction, defaultDescription, numericalImpact, paid, recommendationName, subType, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Recommendation {\n");
    sb.append("    additionalCallToAction: ").append(toIndentedString(additionalCallToAction)).append("\n");
    sb.append("    additionalDescriptions: ").append(toIndentedString(additionalDescriptions)).append("\n");
    sb.append("    creative: ").append(toIndentedString(creative)).append("\n");
    sb.append("    defaultCallToAction: ").append(toIndentedString(defaultCallToAction)).append("\n");
    sb.append("    defaultDescription: ").append(toIndentedString(defaultDescription)).append("\n");
    sb.append("    numericalImpact: ").append(toIndentedString(numericalImpact)).append("\n");
    sb.append("    paid: ").append(toIndentedString(paid)).append("\n");
    sb.append("    recommendationName: ").append(toIndentedString(recommendationName)).append("\n");
    sb.append("    subType: ").append(toIndentedString(subType)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalCallToAction");
    openapiFields.add("additionalDescriptions");
    openapiFields.add("creative");
    openapiFields.add("defaultCallToAction");
    openapiFields.add("defaultDescription");
    openapiFields.add("numericalImpact");
    openapiFields.add("paid");
    openapiFields.add("recommendationName");
    openapiFields.add("subType");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Recommendation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Recommendation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Recommendation is not found in the empty JSON string", Recommendation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Recommendation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Recommendation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalCallToAction") != null && !jsonObj.get("additionalCallToAction").isJsonNull()) {
        JsonArray jsonArrayadditionalCallToAction = jsonObj.getAsJsonArray("additionalCallToAction");
        if (jsonArrayadditionalCallToAction != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalCallToAction").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalCallToAction` to be an array in the JSON string but got `%s`", jsonObj.get("additionalCallToAction").toString()));
          }

          // validate the optional field `additionalCallToAction` (array)
          for (int i = 0; i < jsonArrayadditionalCallToAction.size(); i++) {
            RecommendationCallToAction.validateJsonElement(jsonArrayadditionalCallToAction.get(i));
          };
        }
      }
      if (jsonObj.get("additionalDescriptions") != null && !jsonObj.get("additionalDescriptions").isJsonNull()) {
        JsonArray jsonArrayadditionalDescriptions = jsonObj.getAsJsonArray("additionalDescriptions");
        if (jsonArrayadditionalDescriptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalDescriptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalDescriptions` to be an array in the JSON string but got `%s`", jsonObj.get("additionalDescriptions").toString()));
          }

          // validate the optional field `additionalDescriptions` (array)
          for (int i = 0; i < jsonArrayadditionalDescriptions.size(); i++) {
            RecommendationDescription.validateJsonElement(jsonArrayadditionalDescriptions.get(i));
          };
        }
      }
      if (jsonObj.get("creative") != null && !jsonObj.get("creative").isJsonNull()) {
        JsonArray jsonArraycreative = jsonObj.getAsJsonArray("creative");
        if (jsonArraycreative != null) {
          // ensure the json data is an array
          if (!jsonObj.get("creative").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `creative` to be an array in the JSON string but got `%s`", jsonObj.get("creative").toString()));
          }

          // validate the optional field `creative` (array)
          for (int i = 0; i < jsonArraycreative.size(); i++) {
            RecommendationCreative.validateJsonElement(jsonArraycreative.get(i));
          };
        }
      }
      // validate the optional field `defaultCallToAction`
      if (jsonObj.get("defaultCallToAction") != null && !jsonObj.get("defaultCallToAction").isJsonNull()) {
        RecommendationCallToAction.validateJsonElement(jsonObj.get("defaultCallToAction"));
      }
      if ((jsonObj.get("defaultDescription") != null && !jsonObj.get("defaultDescription").isJsonNull()) && !jsonObj.get("defaultDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultDescription").toString()));
      }
      if ((jsonObj.get("recommendationName") != null && !jsonObj.get("recommendationName").isJsonNull()) && !jsonObj.get("recommendationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendationName").toString()));
      }
      if ((jsonObj.get("subType") != null && !jsonObj.get("subType").isJsonNull()) && !jsonObj.get("subType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subType").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Recommendation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Recommendation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Recommendation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Recommendation.class));

       return (TypeAdapter<T>) new TypeAdapter<Recommendation>() {
           @Override
           public void write(JsonWriter out, Recommendation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Recommendation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Recommendation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Recommendation
   * @throws IOException if the JSON string is invalid with respect to Recommendation
   */
  public static Recommendation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Recommendation.class);
  }

  /**
   * Convert an instance of Recommendation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

