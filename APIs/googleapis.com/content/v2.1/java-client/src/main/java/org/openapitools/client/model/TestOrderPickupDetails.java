/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TestOrderAddress;
import org.openapitools.client.model.TestOrderPickupDetailsPickupPerson;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestOrderPickupDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestOrderPickupDetails {
  public static final String SERIALIZED_NAME_LOCATION_CODE = "locationCode";
  @SerializedName(SERIALIZED_NAME_LOCATION_CODE)
  private String locationCode;

  public static final String SERIALIZED_NAME_PICKUP_LOCATION_ADDRESS = "pickupLocationAddress";
  @SerializedName(SERIALIZED_NAME_PICKUP_LOCATION_ADDRESS)
  private TestOrderAddress pickupLocationAddress;

  public static final String SERIALIZED_NAME_PICKUP_LOCATION_TYPE = "pickupLocationType";
  @SerializedName(SERIALIZED_NAME_PICKUP_LOCATION_TYPE)
  private String pickupLocationType;

  public static final String SERIALIZED_NAME_PICKUP_PERSONS = "pickupPersons";
  @SerializedName(SERIALIZED_NAME_PICKUP_PERSONS)
  private List<TestOrderPickupDetailsPickupPerson> pickupPersons = new ArrayList<>();

  public TestOrderPickupDetails() {
  }

  public TestOrderPickupDetails locationCode(String locationCode) {
    this.locationCode = locationCode;
    return this;
  }

  /**
   * Required. Code of the location defined by provider or merchant.
   * @return locationCode
   */
  @javax.annotation.Nullable
  public String getLocationCode() {
    return locationCode;
  }

  public void setLocationCode(String locationCode) {
    this.locationCode = locationCode;
  }


  public TestOrderPickupDetails pickupLocationAddress(TestOrderAddress pickupLocationAddress) {
    this.pickupLocationAddress = pickupLocationAddress;
    return this;
  }

  /**
   * Get pickupLocationAddress
   * @return pickupLocationAddress
   */
  @javax.annotation.Nullable
  public TestOrderAddress getPickupLocationAddress() {
    return pickupLocationAddress;
  }

  public void setPickupLocationAddress(TestOrderAddress pickupLocationAddress) {
    this.pickupLocationAddress = pickupLocationAddress;
  }


  public TestOrderPickupDetails pickupLocationType(String pickupLocationType) {
    this.pickupLocationType = pickupLocationType;
    return this;
  }

  /**
   * Pickup location type. Acceptable values are: - \&quot;&#x60;locker&#x60;\&quot; - \&quot;&#x60;store&#x60;\&quot; - \&quot;&#x60;curbside&#x60;\&quot; 
   * @return pickupLocationType
   */
  @javax.annotation.Nullable
  public String getPickupLocationType() {
    return pickupLocationType;
  }

  public void setPickupLocationType(String pickupLocationType) {
    this.pickupLocationType = pickupLocationType;
  }


  public TestOrderPickupDetails pickupPersons(List<TestOrderPickupDetailsPickupPerson> pickupPersons) {
    this.pickupPersons = pickupPersons;
    return this;
  }

  public TestOrderPickupDetails addPickupPersonsItem(TestOrderPickupDetailsPickupPerson pickupPersonsItem) {
    if (this.pickupPersons == null) {
      this.pickupPersons = new ArrayList<>();
    }
    this.pickupPersons.add(pickupPersonsItem);
    return this;
  }

  /**
   * Required. all pickup persons set by users.
   * @return pickupPersons
   */
  @javax.annotation.Nullable
  public List<TestOrderPickupDetailsPickupPerson> getPickupPersons() {
    return pickupPersons;
  }

  public void setPickupPersons(List<TestOrderPickupDetailsPickupPerson> pickupPersons) {
    this.pickupPersons = pickupPersons;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestOrderPickupDetails testOrderPickupDetails = (TestOrderPickupDetails) o;
    return Objects.equals(this.locationCode, testOrderPickupDetails.locationCode) &&
        Objects.equals(this.pickupLocationAddress, testOrderPickupDetails.pickupLocationAddress) &&
        Objects.equals(this.pickupLocationType, testOrderPickupDetails.pickupLocationType) &&
        Objects.equals(this.pickupPersons, testOrderPickupDetails.pickupPersons);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationCode, pickupLocationAddress, pickupLocationType, pickupPersons);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestOrderPickupDetails {\n");
    sb.append("    locationCode: ").append(toIndentedString(locationCode)).append("\n");
    sb.append("    pickupLocationAddress: ").append(toIndentedString(pickupLocationAddress)).append("\n");
    sb.append("    pickupLocationType: ").append(toIndentedString(pickupLocationType)).append("\n");
    sb.append("    pickupPersons: ").append(toIndentedString(pickupPersons)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("locationCode");
    openapiFields.add("pickupLocationAddress");
    openapiFields.add("pickupLocationType");
    openapiFields.add("pickupPersons");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestOrderPickupDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestOrderPickupDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestOrderPickupDetails is not found in the empty JSON string", TestOrderPickupDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestOrderPickupDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestOrderPickupDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("locationCode") != null && !jsonObj.get("locationCode").isJsonNull()) && !jsonObj.get("locationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationCode").toString()));
      }
      // validate the optional field `pickupLocationAddress`
      if (jsonObj.get("pickupLocationAddress") != null && !jsonObj.get("pickupLocationAddress").isJsonNull()) {
        TestOrderAddress.validateJsonElement(jsonObj.get("pickupLocationAddress"));
      }
      if ((jsonObj.get("pickupLocationType") != null && !jsonObj.get("pickupLocationType").isJsonNull()) && !jsonObj.get("pickupLocationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickupLocationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickupLocationType").toString()));
      }
      if (jsonObj.get("pickupPersons") != null && !jsonObj.get("pickupPersons").isJsonNull()) {
        JsonArray jsonArraypickupPersons = jsonObj.getAsJsonArray("pickupPersons");
        if (jsonArraypickupPersons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pickupPersons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pickupPersons` to be an array in the JSON string but got `%s`", jsonObj.get("pickupPersons").toString()));
          }

          // validate the optional field `pickupPersons` (array)
          for (int i = 0; i < jsonArraypickupPersons.size(); i++) {
            TestOrderPickupDetailsPickupPerson.validateJsonElement(jsonArraypickupPersons.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestOrderPickupDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestOrderPickupDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestOrderPickupDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestOrderPickupDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<TestOrderPickupDetails>() {
           @Override
           public void write(JsonWriter out, TestOrderPickupDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestOrderPickupDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestOrderPickupDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestOrderPickupDetails
   * @throws IOException if the JSON string is invalid with respect to TestOrderPickupDetails
   */
  public static TestOrderPickupDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestOrderPickupDetails.class);
  }

  /**
   * Convert an instance of TestOrderPickupDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

