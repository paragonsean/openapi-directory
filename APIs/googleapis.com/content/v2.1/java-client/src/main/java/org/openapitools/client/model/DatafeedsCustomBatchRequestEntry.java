/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Datafeed;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A batch entry encoding a single non-batch datafeeds request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatafeedsCustomBatchRequestEntry {
  public static final String SERIALIZED_NAME_BATCH_ID = "batchId";
  @SerializedName(SERIALIZED_NAME_BATCH_ID)
  private Integer batchId;

  public static final String SERIALIZED_NAME_DATAFEED = "datafeed";
  @SerializedName(SERIALIZED_NAME_DATAFEED)
  private Datafeed datafeed;

  public static final String SERIALIZED_NAME_DATAFEED_ID = "datafeedId";
  @SerializedName(SERIALIZED_NAME_DATAFEED_ID)
  private String datafeedId;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public DatafeedsCustomBatchRequestEntry() {
  }

  public DatafeedsCustomBatchRequestEntry batchId(Integer batchId) {
    this.batchId = batchId;
    return this;
  }

  /**
   * An entry ID, unique within the batch request.
   * @return batchId
   */
  @javax.annotation.Nullable
  public Integer getBatchId() {
    return batchId;
  }

  public void setBatchId(Integer batchId) {
    this.batchId = batchId;
  }


  public DatafeedsCustomBatchRequestEntry datafeed(Datafeed datafeed) {
    this.datafeed = datafeed;
    return this;
  }

  /**
   * Get datafeed
   * @return datafeed
   */
  @javax.annotation.Nullable
  public Datafeed getDatafeed() {
    return datafeed;
  }

  public void setDatafeed(Datafeed datafeed) {
    this.datafeed = datafeed;
  }


  public DatafeedsCustomBatchRequestEntry datafeedId(String datafeedId) {
    this.datafeedId = datafeedId;
    return this;
  }

  /**
   * The ID of the data feed to get, delete or fetch.
   * @return datafeedId
   */
  @javax.annotation.Nullable
  public String getDatafeedId() {
    return datafeedId;
  }

  public void setDatafeedId(String datafeedId) {
    this.datafeedId = datafeedId;
  }


  public DatafeedsCustomBatchRequestEntry merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  /**
   * The ID of the managing account.
   * @return merchantId
   */
  @javax.annotation.Nullable
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public DatafeedsCustomBatchRequestEntry method(String method) {
    this.method = method;
    return this;
  }

  /**
   * The method of the batch entry. Acceptable values are: - \&quot;&#x60;delete&#x60;\&quot; - \&quot;&#x60;fetchNow&#x60;\&quot; - \&quot;&#x60;get&#x60;\&quot; - \&quot;&#x60;insert&#x60;\&quot; - \&quot;&#x60;update&#x60;\&quot; 
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatafeedsCustomBatchRequestEntry datafeedsCustomBatchRequestEntry = (DatafeedsCustomBatchRequestEntry) o;
    return Objects.equals(this.batchId, datafeedsCustomBatchRequestEntry.batchId) &&
        Objects.equals(this.datafeed, datafeedsCustomBatchRequestEntry.datafeed) &&
        Objects.equals(this.datafeedId, datafeedsCustomBatchRequestEntry.datafeedId) &&
        Objects.equals(this.merchantId, datafeedsCustomBatchRequestEntry.merchantId) &&
        Objects.equals(this.method, datafeedsCustomBatchRequestEntry.method);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchId, datafeed, datafeedId, merchantId, method);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatafeedsCustomBatchRequestEntry {\n");
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    datafeed: ").append(toIndentedString(datafeed)).append("\n");
    sb.append("    datafeedId: ").append(toIndentedString(datafeedId)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("batchId");
    openapiFields.add("datafeed");
    openapiFields.add("datafeedId");
    openapiFields.add("merchantId");
    openapiFields.add("method");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatafeedsCustomBatchRequestEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatafeedsCustomBatchRequestEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatafeedsCustomBatchRequestEntry is not found in the empty JSON string", DatafeedsCustomBatchRequestEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatafeedsCustomBatchRequestEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatafeedsCustomBatchRequestEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `datafeed`
      if (jsonObj.get("datafeed") != null && !jsonObj.get("datafeed").isJsonNull()) {
        Datafeed.validateJsonElement(jsonObj.get("datafeed"));
      }
      if ((jsonObj.get("datafeedId") != null && !jsonObj.get("datafeedId").isJsonNull()) && !jsonObj.get("datafeedId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datafeedId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datafeedId").toString()));
      }
      if ((jsonObj.get("merchantId") != null && !jsonObj.get("merchantId").isJsonNull()) && !jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatafeedsCustomBatchRequestEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatafeedsCustomBatchRequestEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatafeedsCustomBatchRequestEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatafeedsCustomBatchRequestEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<DatafeedsCustomBatchRequestEntry>() {
           @Override
           public void write(JsonWriter out, DatafeedsCustomBatchRequestEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatafeedsCustomBatchRequestEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatafeedsCustomBatchRequestEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatafeedsCustomBatchRequestEntry
   * @throws IOException if the JSON string is invalid with respect to DatafeedsCustomBatchRequestEntry
   */
  public static DatafeedsCustomBatchRequestEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatafeedsCustomBatchRequestEntry.class);
  }

  /**
   * Convert an instance of DatafeedsCustomBatchRequestEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

