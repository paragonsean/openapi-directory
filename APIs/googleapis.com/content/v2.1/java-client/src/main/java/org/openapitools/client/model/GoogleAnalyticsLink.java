/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AttributionSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * \&quot;Google Analytics Link\&quot; sources can be used to get conversion data from an existing Google Analytics property into the linked Merchant Center account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAnalyticsLink {
  public static final String SERIALIZED_NAME_ATTRIBUTION_SETTINGS = "attributionSettings";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTION_SETTINGS)
  private AttributionSettings attributionSettings;

  public static final String SERIALIZED_NAME_PROPERTY_ID = "propertyId";
  @SerializedName(SERIALIZED_NAME_PROPERTY_ID)
  private String propertyId;

  public static final String SERIALIZED_NAME_PROPERTY_NAME = "propertyName";
  @SerializedName(SERIALIZED_NAME_PROPERTY_NAME)
  private String propertyName;

  public GoogleAnalyticsLink() {
  }

  public GoogleAnalyticsLink(
     String propertyName
  ) {
    this();
    this.propertyName = propertyName;
  }

  public GoogleAnalyticsLink attributionSettings(AttributionSettings attributionSettings) {
    this.attributionSettings = attributionSettings;
    return this;
  }

  /**
   * Get attributionSettings
   * @return attributionSettings
   */
  @javax.annotation.Nullable
  public AttributionSettings getAttributionSettings() {
    return attributionSettings;
  }

  public void setAttributionSettings(AttributionSettings attributionSettings) {
    this.attributionSettings = attributionSettings;
  }


  public GoogleAnalyticsLink propertyId(String propertyId) {
    this.propertyId = propertyId;
    return this;
  }

  /**
   * Required. Immutable. ID of the Google Analytics property the merchant is linked to.
   * @return propertyId
   */
  @javax.annotation.Nullable
  public String getPropertyId() {
    return propertyId;
  }

  public void setPropertyId(String propertyId) {
    this.propertyId = propertyId;
  }


  /**
   * Output only. Name of the Google Analytics property the merchant is linked to.
   * @return propertyName
   */
  @javax.annotation.Nullable
  public String getPropertyName() {
    return propertyName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAnalyticsLink googleAnalyticsLink = (GoogleAnalyticsLink) o;
    return Objects.equals(this.attributionSettings, googleAnalyticsLink.attributionSettings) &&
        Objects.equals(this.propertyId, googleAnalyticsLink.propertyId) &&
        Objects.equals(this.propertyName, googleAnalyticsLink.propertyName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributionSettings, propertyId, propertyName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAnalyticsLink {\n");
    sb.append("    attributionSettings: ").append(toIndentedString(attributionSettings)).append("\n");
    sb.append("    propertyId: ").append(toIndentedString(propertyId)).append("\n");
    sb.append("    propertyName: ").append(toIndentedString(propertyName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributionSettings");
    openapiFields.add("propertyId");
    openapiFields.add("propertyName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAnalyticsLink
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAnalyticsLink.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAnalyticsLink is not found in the empty JSON string", GoogleAnalyticsLink.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAnalyticsLink.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAnalyticsLink` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attributionSettings`
      if (jsonObj.get("attributionSettings") != null && !jsonObj.get("attributionSettings").isJsonNull()) {
        AttributionSettings.validateJsonElement(jsonObj.get("attributionSettings"));
      }
      if ((jsonObj.get("propertyId") != null && !jsonObj.get("propertyId").isJsonNull()) && !jsonObj.get("propertyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyId").toString()));
      }
      if ((jsonObj.get("propertyName") != null && !jsonObj.get("propertyName").isJsonNull()) && !jsonObj.get("propertyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAnalyticsLink.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAnalyticsLink' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAnalyticsLink> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAnalyticsLink.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAnalyticsLink>() {
           @Override
           public void write(JsonWriter out, GoogleAnalyticsLink value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAnalyticsLink read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAnalyticsLink given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAnalyticsLink
   * @throws IOException if the JSON string is invalid with respect to GoogleAnalyticsLink
   */
  public static GoogleAnalyticsLink fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAnalyticsLink.class);
  }

  /**
   * Convert an instance of GoogleAnalyticsLink to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

