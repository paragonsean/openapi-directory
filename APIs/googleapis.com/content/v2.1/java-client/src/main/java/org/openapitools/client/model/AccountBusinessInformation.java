/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccountAddress;
import org.openapitools.client.model.AccountCustomerService;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountBusinessInformation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountBusinessInformation {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private AccountAddress address;

  public static final String SERIALIZED_NAME_CUSTOMER_SERVICE = "customerService";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SERVICE)
  private AccountCustomerService customerService;

  public static final String SERIALIZED_NAME_KOREAN_BUSINESS_REGISTRATION_NUMBER = "koreanBusinessRegistrationNumber";
  @SerializedName(SERIALIZED_NAME_KOREAN_BUSINESS_REGISTRATION_NUMBER)
  private String koreanBusinessRegistrationNumber;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PHONE_VERIFICATION_STATUS = "phoneVerificationStatus";
  @SerializedName(SERIALIZED_NAME_PHONE_VERIFICATION_STATUS)
  private String phoneVerificationStatus;

  public AccountBusinessInformation() {
  }

  public AccountBusinessInformation address(AccountAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public AccountAddress getAddress() {
    return address;
  }

  public void setAddress(AccountAddress address) {
    this.address = address;
  }


  public AccountBusinessInformation customerService(AccountCustomerService customerService) {
    this.customerService = customerService;
    return this;
  }

  /**
   * Get customerService
   * @return customerService
   */
  @javax.annotation.Nullable
  public AccountCustomerService getCustomerService() {
    return customerService;
  }

  public void setCustomerService(AccountCustomerService customerService) {
    this.customerService = customerService;
  }


  public AccountBusinessInformation koreanBusinessRegistrationNumber(String koreanBusinessRegistrationNumber) {
    this.koreanBusinessRegistrationNumber = koreanBusinessRegistrationNumber;
    return this;
  }

  /**
   * The 10-digit [Korean business registration number](https://support.google.com/merchants/answer/9037766) separated with dashes in the format: XXX-XX-XXXXX. This field will only be updated if explicitly set.
   * @return koreanBusinessRegistrationNumber
   */
  @javax.annotation.Nullable
  public String getKoreanBusinessRegistrationNumber() {
    return koreanBusinessRegistrationNumber;
  }

  public void setKoreanBusinessRegistrationNumber(String koreanBusinessRegistrationNumber) {
    this.koreanBusinessRegistrationNumber = koreanBusinessRegistrationNumber;
  }


  public AccountBusinessInformation phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * The phone number of the business in [E.164](https://en.wikipedia.org/wiki/E.164) format. This can only be updated if a verified phone number is not already set. To replace a verified phone number use the &#x60;Accounts.requestphoneverification&#x60; and &#x60;Accounts.verifyphonenumber&#x60;.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public AccountBusinessInformation phoneVerificationStatus(String phoneVerificationStatus) {
    this.phoneVerificationStatus = phoneVerificationStatus;
    return this;
  }

  /**
   * Verification status of the phone number of the business. This status is read only and can be updated only by successful phone verification. Acceptable values are: - \&quot;&#x60;verified&#x60;\&quot; - \&quot;&#x60;unverified&#x60;\&quot; 
   * @return phoneVerificationStatus
   */
  @javax.annotation.Nullable
  public String getPhoneVerificationStatus() {
    return phoneVerificationStatus;
  }

  public void setPhoneVerificationStatus(String phoneVerificationStatus) {
    this.phoneVerificationStatus = phoneVerificationStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountBusinessInformation accountBusinessInformation = (AccountBusinessInformation) o;
    return Objects.equals(this.address, accountBusinessInformation.address) &&
        Objects.equals(this.customerService, accountBusinessInformation.customerService) &&
        Objects.equals(this.koreanBusinessRegistrationNumber, accountBusinessInformation.koreanBusinessRegistrationNumber) &&
        Objects.equals(this.phoneNumber, accountBusinessInformation.phoneNumber) &&
        Objects.equals(this.phoneVerificationStatus, accountBusinessInformation.phoneVerificationStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, customerService, koreanBusinessRegistrationNumber, phoneNumber, phoneVerificationStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountBusinessInformation {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    customerService: ").append(toIndentedString(customerService)).append("\n");
    sb.append("    koreanBusinessRegistrationNumber: ").append(toIndentedString(koreanBusinessRegistrationNumber)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    phoneVerificationStatus: ").append(toIndentedString(phoneVerificationStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("customerService");
    openapiFields.add("koreanBusinessRegistrationNumber");
    openapiFields.add("phoneNumber");
    openapiFields.add("phoneVerificationStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountBusinessInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountBusinessInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountBusinessInformation is not found in the empty JSON string", AccountBusinessInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountBusinessInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountBusinessInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        AccountAddress.validateJsonElement(jsonObj.get("address"));
      }
      // validate the optional field `customerService`
      if (jsonObj.get("customerService") != null && !jsonObj.get("customerService").isJsonNull()) {
        AccountCustomerService.validateJsonElement(jsonObj.get("customerService"));
      }
      if ((jsonObj.get("koreanBusinessRegistrationNumber") != null && !jsonObj.get("koreanBusinessRegistrationNumber").isJsonNull()) && !jsonObj.get("koreanBusinessRegistrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `koreanBusinessRegistrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("koreanBusinessRegistrationNumber").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("phoneVerificationStatus") != null && !jsonObj.get("phoneVerificationStatus").isJsonNull()) && !jsonObj.get("phoneVerificationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneVerificationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneVerificationStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountBusinessInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountBusinessInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountBusinessInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountBusinessInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountBusinessInformation>() {
           @Override
           public void write(JsonWriter out, AccountBusinessInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountBusinessInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountBusinessInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountBusinessInformation
   * @throws IOException if the JSON string is invalid with respect to AccountBusinessInformation
   */
  public static AccountBusinessInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountBusinessInformation.class);
  }

  /**
   * Convert an instance of AccountBusinessInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

