/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderAddress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderAddress {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_FULL_ADDRESS = "fullAddress";
  @SerializedName(SERIALIZED_NAME_FULL_ADDRESS)
  private List<String> fullAddress = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_POST_OFFICE_BOX = "isPostOfficeBox";
  @SerializedName(SERIALIZED_NAME_IS_POST_OFFICE_BOX)
  private Boolean isPostOfficeBox;

  public static final String SERIALIZED_NAME_LOCALITY = "locality";
  @SerializedName(SERIALIZED_NAME_LOCALITY)
  private String locality;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_RECIPIENT_NAME = "recipientName";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NAME)
  private String recipientName;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_STREET_ADDRESS = "streetAddress";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS)
  private List<String> streetAddress = new ArrayList<>();

  public OrderAddress() {
  }

  public OrderAddress country(String country) {
    this.country = country;
    return this;
  }

  /**
   * CLDR country code (for example, \&quot;US\&quot;).
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public OrderAddress fullAddress(List<String> fullAddress) {
    this.fullAddress = fullAddress;
    return this;
  }

  public OrderAddress addFullAddressItem(String fullAddressItem) {
    if (this.fullAddress == null) {
      this.fullAddress = new ArrayList<>();
    }
    this.fullAddress.add(fullAddressItem);
    return this;
  }

  /**
   * Strings representing the lines of the printed label for mailing the order, for example: John Smith 1600 Amphitheatre Parkway Mountain View, CA, 94043 United States 
   * @return fullAddress
   */
  @javax.annotation.Nullable
  public List<String> getFullAddress() {
    return fullAddress;
  }

  public void setFullAddress(List<String> fullAddress) {
    this.fullAddress = fullAddress;
  }


  public OrderAddress isPostOfficeBox(Boolean isPostOfficeBox) {
    this.isPostOfficeBox = isPostOfficeBox;
    return this;
  }

  /**
   * Whether the address is a post office box.
   * @return isPostOfficeBox
   */
  @javax.annotation.Nullable
  public Boolean getIsPostOfficeBox() {
    return isPostOfficeBox;
  }

  public void setIsPostOfficeBox(Boolean isPostOfficeBox) {
    this.isPostOfficeBox = isPostOfficeBox;
  }


  public OrderAddress locality(String locality) {
    this.locality = locality;
    return this;
  }

  /**
   * City, town or commune. May also include dependent localities or sublocalities (for example, neighborhoods or suburbs).
   * @return locality
   */
  @javax.annotation.Nullable
  public String getLocality() {
    return locality;
  }

  public void setLocality(String locality) {
    this.locality = locality;
  }


  public OrderAddress postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Postal Code or ZIP (for example, \&quot;94043\&quot;).
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public OrderAddress recipientName(String recipientName) {
    this.recipientName = recipientName;
    return this;
  }

  /**
   * Name of the recipient.
   * @return recipientName
   */
  @javax.annotation.Nullable
  public String getRecipientName() {
    return recipientName;
  }

  public void setRecipientName(String recipientName) {
    this.recipientName = recipientName;
  }


  public OrderAddress region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Top-level administrative subdivision of the country. For example, a state like California (\&quot;CA\&quot;) or a province like Quebec (\&quot;QC\&quot;).
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public OrderAddress streetAddress(List<String> streetAddress) {
    this.streetAddress = streetAddress;
    return this;
  }

  public OrderAddress addStreetAddressItem(String streetAddressItem) {
    if (this.streetAddress == null) {
      this.streetAddress = new ArrayList<>();
    }
    this.streetAddress.add(streetAddressItem);
    return this;
  }

  /**
   * Street-level part of the address. Use &#x60;\\n&#x60; to add a second line.
   * @return streetAddress
   */
  @javax.annotation.Nullable
  public List<String> getStreetAddress() {
    return streetAddress;
  }

  public void setStreetAddress(List<String> streetAddress) {
    this.streetAddress = streetAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderAddress orderAddress = (OrderAddress) o;
    return Objects.equals(this.country, orderAddress.country) &&
        Objects.equals(this.fullAddress, orderAddress.fullAddress) &&
        Objects.equals(this.isPostOfficeBox, orderAddress.isPostOfficeBox) &&
        Objects.equals(this.locality, orderAddress.locality) &&
        Objects.equals(this.postalCode, orderAddress.postalCode) &&
        Objects.equals(this.recipientName, orderAddress.recipientName) &&
        Objects.equals(this.region, orderAddress.region) &&
        Objects.equals(this.streetAddress, orderAddress.streetAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, fullAddress, isPostOfficeBox, locality, postalCode, recipientName, region, streetAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderAddress {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    fullAddress: ").append(toIndentedString(fullAddress)).append("\n");
    sb.append("    isPostOfficeBox: ").append(toIndentedString(isPostOfficeBox)).append("\n");
    sb.append("    locality: ").append(toIndentedString(locality)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    recipientName: ").append(toIndentedString(recipientName)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    streetAddress: ").append(toIndentedString(streetAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("fullAddress");
    openapiFields.add("isPostOfficeBox");
    openapiFields.add("locality");
    openapiFields.add("postalCode");
    openapiFields.add("recipientName");
    openapiFields.add("region");
    openapiFields.add("streetAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderAddress is not found in the empty JSON string", OrderAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fullAddress") != null && !jsonObj.get("fullAddress").isJsonNull() && !jsonObj.get("fullAddress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullAddress` to be an array in the JSON string but got `%s`", jsonObj.get("fullAddress").toString()));
      }
      if ((jsonObj.get("locality") != null && !jsonObj.get("locality").isJsonNull()) && !jsonObj.get("locality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locality").toString()));
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if ((jsonObj.get("recipientName") != null && !jsonObj.get("recipientName").isJsonNull()) && !jsonObj.get("recipientName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipientName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipientName").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("streetAddress") != null && !jsonObj.get("streetAddress").isJsonNull() && !jsonObj.get("streetAddress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress` to be an array in the JSON string but got `%s`", jsonObj.get("streetAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderAddress>() {
           @Override
           public void write(JsonWriter out, OrderAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderAddress
   * @throws IOException if the JSON string is invalid with respect to OrderAddress
   */
  public static OrderAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderAddress.class);
  }

  /**
   * Convert an instance of OrderAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

