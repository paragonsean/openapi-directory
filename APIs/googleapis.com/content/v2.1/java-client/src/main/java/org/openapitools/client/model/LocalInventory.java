/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomAttribute;
import org.openapitools.client.model.Price;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Local inventory resource. For accepted attribute values, see the local product inventory feed specification.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LocalInventory {
  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private String availability;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "customAttributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private List<CustomAttribute> customAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTORE_PRODUCT_LOCATION = "instoreProductLocation";
  @SerializedName(SERIALIZED_NAME_INSTORE_PRODUCT_LOCATION)
  private String instoreProductLocation;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_PICKUP_METHOD = "pickupMethod";
  @SerializedName(SERIALIZED_NAME_PICKUP_METHOD)
  private String pickupMethod;

  public static final String SERIALIZED_NAME_PICKUP_SLA = "pickupSla";
  @SerializedName(SERIALIZED_NAME_PICKUP_SLA)
  private String pickupSla;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Price price;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_SALE_PRICE = "salePrice";
  @SerializedName(SERIALIZED_NAME_SALE_PRICE)
  private Price salePrice;

  public static final String SERIALIZED_NAME_SALE_PRICE_EFFECTIVE_DATE = "salePriceEffectiveDate";
  @SerializedName(SERIALIZED_NAME_SALE_PRICE_EFFECTIVE_DATE)
  private String salePriceEffectiveDate;

  public static final String SERIALIZED_NAME_STORE_CODE = "storeCode";
  @SerializedName(SERIALIZED_NAME_STORE_CODE)
  private String storeCode;

  public LocalInventory() {
  }

  public LocalInventory availability(String availability) {
    this.availability = availability;
    return this;
  }

  /**
   * The availability of the product. For accepted attribute values, see the local product inventory feed specification.
   * @return availability
   */
  @javax.annotation.Nullable
  public String getAvailability() {
    return availability;
  }

  public void setAvailability(String availability) {
    this.availability = availability;
  }


  public LocalInventory customAttributes(List<CustomAttribute> customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

  public LocalInventory addCustomAttributesItem(CustomAttribute customAttributesItem) {
    if (this.customAttributes == null) {
      this.customAttributes = new ArrayList<>();
    }
    this.customAttributes.add(customAttributesItem);
    return this;
  }

  /**
   * A list of custom (merchant-provided) attributes. Can also be used to submit any attribute of the feed specification in its generic form, for example, &#x60;{ \&quot;name\&quot;: \&quot;size type\&quot;, \&quot;value\&quot;: \&quot;regular\&quot; }&#x60;.
   * @return customAttributes
   */
  @javax.annotation.Nullable
  public List<CustomAttribute> getCustomAttributes() {
    return customAttributes;
  }

  public void setCustomAttributes(List<CustomAttribute> customAttributes) {
    this.customAttributes = customAttributes;
  }


  public LocalInventory instoreProductLocation(String instoreProductLocation) {
    this.instoreProductLocation = instoreProductLocation;
    return this;
  }

  /**
   * The in-store product location.
   * @return instoreProductLocation
   */
  @javax.annotation.Nullable
  public String getInstoreProductLocation() {
    return instoreProductLocation;
  }

  public void setInstoreProductLocation(String instoreProductLocation) {
    this.instoreProductLocation = instoreProductLocation;
  }


  public LocalInventory kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;&#x60;content#localInventory&#x60;\&quot;
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public LocalInventory pickupMethod(String pickupMethod) {
    this.pickupMethod = pickupMethod;
    return this;
  }

  /**
   * The supported pickup method for this offer. Unless the value is \&quot;not supported\&quot;, this field must be submitted together with &#x60;pickupSla&#x60;. For accepted attribute values, see the local product inventory feed specification.
   * @return pickupMethod
   */
  @javax.annotation.Nullable
  public String getPickupMethod() {
    return pickupMethod;
  }

  public void setPickupMethod(String pickupMethod) {
    this.pickupMethod = pickupMethod;
  }


  public LocalInventory pickupSla(String pickupSla) {
    this.pickupSla = pickupSla;
    return this;
  }

  /**
   * The expected date that an order will be ready for pickup relative to the order date. Must be submitted together with &#x60;pickupMethod&#x60;. For accepted attribute values, see the local product inventory feed specification.
   * @return pickupSla
   */
  @javax.annotation.Nullable
  public String getPickupSla() {
    return pickupSla;
  }

  public void setPickupSla(String pickupSla) {
    this.pickupSla = pickupSla;
  }


  public LocalInventory price(Price price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public Price getPrice() {
    return price;
  }

  public void setPrice(Price price) {
    this.price = price;
  }


  public LocalInventory quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The quantity of the product. Must be nonnegative.
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public LocalInventory salePrice(Price salePrice) {
    this.salePrice = salePrice;
    return this;
  }

  /**
   * Get salePrice
   * @return salePrice
   */
  @javax.annotation.Nullable
  public Price getSalePrice() {
    return salePrice;
  }

  public void setSalePrice(Price salePrice) {
    this.salePrice = salePrice;
  }


  public LocalInventory salePriceEffectiveDate(String salePriceEffectiveDate) {
    this.salePriceEffectiveDate = salePriceEffectiveDate;
    return this;
  }

  /**
   * A date range represented by a pair of ISO 8601 dates separated by a space, comma, or slash. Both dates may be specified as &#39;null&#39; if undecided.
   * @return salePriceEffectiveDate
   */
  @javax.annotation.Nullable
  public String getSalePriceEffectiveDate() {
    return salePriceEffectiveDate;
  }

  public void setSalePriceEffectiveDate(String salePriceEffectiveDate) {
    this.salePriceEffectiveDate = salePriceEffectiveDate;
  }


  public LocalInventory storeCode(String storeCode) {
    this.storeCode = storeCode;
    return this;
  }

  /**
   * Required. The store code of this local inventory resource.
   * @return storeCode
   */
  @javax.annotation.Nullable
  public String getStoreCode() {
    return storeCode;
  }

  public void setStoreCode(String storeCode) {
    this.storeCode = storeCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocalInventory localInventory = (LocalInventory) o;
    return Objects.equals(this.availability, localInventory.availability) &&
        Objects.equals(this.customAttributes, localInventory.customAttributes) &&
        Objects.equals(this.instoreProductLocation, localInventory.instoreProductLocation) &&
        Objects.equals(this.kind, localInventory.kind) &&
        Objects.equals(this.pickupMethod, localInventory.pickupMethod) &&
        Objects.equals(this.pickupSla, localInventory.pickupSla) &&
        Objects.equals(this.price, localInventory.price) &&
        Objects.equals(this.quantity, localInventory.quantity) &&
        Objects.equals(this.salePrice, localInventory.salePrice) &&
        Objects.equals(this.salePriceEffectiveDate, localInventory.salePriceEffectiveDate) &&
        Objects.equals(this.storeCode, localInventory.storeCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availability, customAttributes, instoreProductLocation, kind, pickupMethod, pickupSla, price, quantity, salePrice, salePriceEffectiveDate, storeCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocalInventory {\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    instoreProductLocation: ").append(toIndentedString(instoreProductLocation)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    pickupMethod: ").append(toIndentedString(pickupMethod)).append("\n");
    sb.append("    pickupSla: ").append(toIndentedString(pickupSla)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    salePrice: ").append(toIndentedString(salePrice)).append("\n");
    sb.append("    salePriceEffectiveDate: ").append(toIndentedString(salePriceEffectiveDate)).append("\n");
    sb.append("    storeCode: ").append(toIndentedString(storeCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availability");
    openapiFields.add("customAttributes");
    openapiFields.add("instoreProductLocation");
    openapiFields.add("kind");
    openapiFields.add("pickupMethod");
    openapiFields.add("pickupSla");
    openapiFields.add("price");
    openapiFields.add("quantity");
    openapiFields.add("salePrice");
    openapiFields.add("salePriceEffectiveDate");
    openapiFields.add("storeCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LocalInventory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LocalInventory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LocalInventory is not found in the empty JSON string", LocalInventory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LocalInventory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LocalInventory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("availability") != null && !jsonObj.get("availability").isJsonNull()) && !jsonObj.get("availability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availability").toString()));
      }
      if (jsonObj.get("customAttributes") != null && !jsonObj.get("customAttributes").isJsonNull()) {
        JsonArray jsonArraycustomAttributes = jsonObj.getAsJsonArray("customAttributes");
        if (jsonArraycustomAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customAttributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("customAttributes").toString()));
          }

          // validate the optional field `customAttributes` (array)
          for (int i = 0; i < jsonArraycustomAttributes.size(); i++) {
            CustomAttribute.validateJsonElement(jsonArraycustomAttributes.get(i));
          };
        }
      }
      if ((jsonObj.get("instoreProductLocation") != null && !jsonObj.get("instoreProductLocation").isJsonNull()) && !jsonObj.get("instoreProductLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instoreProductLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instoreProductLocation").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("pickupMethod") != null && !jsonObj.get("pickupMethod").isJsonNull()) && !jsonObj.get("pickupMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickupMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickupMethod").toString()));
      }
      if ((jsonObj.get("pickupSla") != null && !jsonObj.get("pickupSla").isJsonNull()) && !jsonObj.get("pickupSla").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickupSla` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickupSla").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("price"));
      }
      // validate the optional field `salePrice`
      if (jsonObj.get("salePrice") != null && !jsonObj.get("salePrice").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("salePrice"));
      }
      if ((jsonObj.get("salePriceEffectiveDate") != null && !jsonObj.get("salePriceEffectiveDate").isJsonNull()) && !jsonObj.get("salePriceEffectiveDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salePriceEffectiveDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salePriceEffectiveDate").toString()));
      }
      if ((jsonObj.get("storeCode") != null && !jsonObj.get("storeCode").isJsonNull()) && !jsonObj.get("storeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LocalInventory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LocalInventory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LocalInventory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LocalInventory.class));

       return (TypeAdapter<T>) new TypeAdapter<LocalInventory>() {
           @Override
           public void write(JsonWriter out, LocalInventory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LocalInventory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LocalInventory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LocalInventory
   * @throws IOException if the JSON string is invalid with respect to LocalInventory
   */
  public static LocalInventory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LocalInventory.class);
  }

  /**
   * Convert an instance of LocalInventory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

