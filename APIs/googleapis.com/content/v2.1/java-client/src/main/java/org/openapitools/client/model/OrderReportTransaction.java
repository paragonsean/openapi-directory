/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Price;
import org.openapitools.client.model.ProductAmount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderReportTransaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderReportTransaction {
  public static final String SERIALIZED_NAME_DISBURSEMENT_AMOUNT = "disbursementAmount";
  @SerializedName(SERIALIZED_NAME_DISBURSEMENT_AMOUNT)
  private Price disbursementAmount;

  public static final String SERIALIZED_NAME_DISBURSEMENT_CREATION_DATE = "disbursementCreationDate";
  @SerializedName(SERIALIZED_NAME_DISBURSEMENT_CREATION_DATE)
  private String disbursementCreationDate;

  public static final String SERIALIZED_NAME_DISBURSEMENT_DATE = "disbursementDate";
  @SerializedName(SERIALIZED_NAME_DISBURSEMENT_DATE)
  private String disbursementDate;

  public static final String SERIALIZED_NAME_DISBURSEMENT_ID = "disbursementId";
  @SerializedName(SERIALIZED_NAME_DISBURSEMENT_ID)
  private String disbursementId;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_MERCHANT_ORDER_ID = "merchantOrderId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ORDER_ID)
  private String merchantOrderId;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_PRODUCT_AMOUNT = "productAmount";
  @SerializedName(SERIALIZED_NAME_PRODUCT_AMOUNT)
  private ProductAmount productAmount;

  public static final String SERIALIZED_NAME_TRANSACTION_DATE = "transactionDate";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DATE)
  private String transactionDate;

  public OrderReportTransaction() {
  }

  public OrderReportTransaction disbursementAmount(Price disbursementAmount) {
    this.disbursementAmount = disbursementAmount;
    return this;
  }

  /**
   * Get disbursementAmount
   * @return disbursementAmount
   */
  @javax.annotation.Nullable
  public Price getDisbursementAmount() {
    return disbursementAmount;
  }

  public void setDisbursementAmount(Price disbursementAmount) {
    this.disbursementAmount = disbursementAmount;
  }


  public OrderReportTransaction disbursementCreationDate(String disbursementCreationDate) {
    this.disbursementCreationDate = disbursementCreationDate;
    return this;
  }

  /**
   * The date the disbursement was created, in ISO 8601 format.
   * @return disbursementCreationDate
   */
  @javax.annotation.Nullable
  public String getDisbursementCreationDate() {
    return disbursementCreationDate;
  }

  public void setDisbursementCreationDate(String disbursementCreationDate) {
    this.disbursementCreationDate = disbursementCreationDate;
  }


  public OrderReportTransaction disbursementDate(String disbursementDate) {
    this.disbursementDate = disbursementDate;
    return this;
  }

  /**
   * The date the disbursement was initiated, in ISO 8601 format.
   * @return disbursementDate
   */
  @javax.annotation.Nullable
  public String getDisbursementDate() {
    return disbursementDate;
  }

  public void setDisbursementDate(String disbursementDate) {
    this.disbursementDate = disbursementDate;
  }


  public OrderReportTransaction disbursementId(String disbursementId) {
    this.disbursementId = disbursementId;
    return this;
  }

  /**
   * The ID of the disbursement.
   * @return disbursementId
   */
  @javax.annotation.Nullable
  public String getDisbursementId() {
    return disbursementId;
  }

  public void setDisbursementId(String disbursementId) {
    this.disbursementId = disbursementId;
  }


  public OrderReportTransaction merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  /**
   * The ID of the managing account.
   * @return merchantId
   */
  @javax.annotation.Nullable
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public OrderReportTransaction merchantOrderId(String merchantOrderId) {
    this.merchantOrderId = merchantOrderId;
    return this;
  }

  /**
   * Merchant-provided ID of the order.
   * @return merchantOrderId
   */
  @javax.annotation.Nullable
  public String getMerchantOrderId() {
    return merchantOrderId;
  }

  public void setMerchantOrderId(String merchantOrderId) {
    this.merchantOrderId = merchantOrderId;
  }


  public OrderReportTransaction orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * The ID of the order.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public OrderReportTransaction productAmount(ProductAmount productAmount) {
    this.productAmount = productAmount;
    return this;
  }

  /**
   * Get productAmount
   * @return productAmount
   */
  @javax.annotation.Nullable
  public ProductAmount getProductAmount() {
    return productAmount;
  }

  public void setProductAmount(ProductAmount productAmount) {
    this.productAmount = productAmount;
  }


  public OrderReportTransaction transactionDate(String transactionDate) {
    this.transactionDate = transactionDate;
    return this;
  }

  /**
   * The date of the transaction, in ISO 8601 format.
   * @return transactionDate
   */
  @javax.annotation.Nullable
  public String getTransactionDate() {
    return transactionDate;
  }

  public void setTransactionDate(String transactionDate) {
    this.transactionDate = transactionDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderReportTransaction orderReportTransaction = (OrderReportTransaction) o;
    return Objects.equals(this.disbursementAmount, orderReportTransaction.disbursementAmount) &&
        Objects.equals(this.disbursementCreationDate, orderReportTransaction.disbursementCreationDate) &&
        Objects.equals(this.disbursementDate, orderReportTransaction.disbursementDate) &&
        Objects.equals(this.disbursementId, orderReportTransaction.disbursementId) &&
        Objects.equals(this.merchantId, orderReportTransaction.merchantId) &&
        Objects.equals(this.merchantOrderId, orderReportTransaction.merchantOrderId) &&
        Objects.equals(this.orderId, orderReportTransaction.orderId) &&
        Objects.equals(this.productAmount, orderReportTransaction.productAmount) &&
        Objects.equals(this.transactionDate, orderReportTransaction.transactionDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disbursementAmount, disbursementCreationDate, disbursementDate, disbursementId, merchantId, merchantOrderId, orderId, productAmount, transactionDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderReportTransaction {\n");
    sb.append("    disbursementAmount: ").append(toIndentedString(disbursementAmount)).append("\n");
    sb.append("    disbursementCreationDate: ").append(toIndentedString(disbursementCreationDate)).append("\n");
    sb.append("    disbursementDate: ").append(toIndentedString(disbursementDate)).append("\n");
    sb.append("    disbursementId: ").append(toIndentedString(disbursementId)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    merchantOrderId: ").append(toIndentedString(merchantOrderId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    productAmount: ").append(toIndentedString(productAmount)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disbursementAmount");
    openapiFields.add("disbursementCreationDate");
    openapiFields.add("disbursementDate");
    openapiFields.add("disbursementId");
    openapiFields.add("merchantId");
    openapiFields.add("merchantOrderId");
    openapiFields.add("orderId");
    openapiFields.add("productAmount");
    openapiFields.add("transactionDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderReportTransaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderReportTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderReportTransaction is not found in the empty JSON string", OrderReportTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderReportTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderReportTransaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `disbursementAmount`
      if (jsonObj.get("disbursementAmount") != null && !jsonObj.get("disbursementAmount").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("disbursementAmount"));
      }
      if ((jsonObj.get("disbursementCreationDate") != null && !jsonObj.get("disbursementCreationDate").isJsonNull()) && !jsonObj.get("disbursementCreationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disbursementCreationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disbursementCreationDate").toString()));
      }
      if ((jsonObj.get("disbursementDate") != null && !jsonObj.get("disbursementDate").isJsonNull()) && !jsonObj.get("disbursementDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disbursementDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disbursementDate").toString()));
      }
      if ((jsonObj.get("disbursementId") != null && !jsonObj.get("disbursementId").isJsonNull()) && !jsonObj.get("disbursementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disbursementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disbursementId").toString()));
      }
      if ((jsonObj.get("merchantId") != null && !jsonObj.get("merchantId").isJsonNull()) && !jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      if ((jsonObj.get("merchantOrderId") != null && !jsonObj.get("merchantOrderId").isJsonNull()) && !jsonObj.get("merchantOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantOrderId").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      // validate the optional field `productAmount`
      if (jsonObj.get("productAmount") != null && !jsonObj.get("productAmount").isJsonNull()) {
        ProductAmount.validateJsonElement(jsonObj.get("productAmount"));
      }
      if ((jsonObj.get("transactionDate") != null && !jsonObj.get("transactionDate").isJsonNull()) && !jsonObj.get("transactionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderReportTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderReportTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderReportTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderReportTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderReportTransaction>() {
           @Override
           public void write(JsonWriter out, OrderReportTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderReportTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderReportTransaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderReportTransaction
   * @throws IOException if the JSON string is invalid with respect to OrderReportTransaction
   */
  public static OrderReportTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderReportTransaction.class);
  }

  /**
   * Convert an instance of OrderReportTransaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

