/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeliveryTime;
import org.openapitools.client.model.MinimumOrderValueTable;
import org.openapitools.client.model.PickupCarrierService;
import org.openapitools.client.model.Price;
import org.openapitools.client.model.RateGroup;
import org.openapitools.client.model.ServiceStoreConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Service
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Service {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DELIVERY_COUNTRY = "deliveryCountry";
  @SerializedName(SERIALIZED_NAME_DELIVERY_COUNTRY)
  private String deliveryCountry;

  public static final String SERIALIZED_NAME_DELIVERY_TIME = "deliveryTime";
  @SerializedName(SERIALIZED_NAME_DELIVERY_TIME)
  private DeliveryTime deliveryTime;

  public static final String SERIALIZED_NAME_ELIGIBILITY = "eligibility";
  @SerializedName(SERIALIZED_NAME_ELIGIBILITY)
  private String eligibility;

  public static final String SERIALIZED_NAME_MINIMUM_ORDER_VALUE = "minimumOrderValue";
  @SerializedName(SERIALIZED_NAME_MINIMUM_ORDER_VALUE)
  private Price minimumOrderValue;

  public static final String SERIALIZED_NAME_MINIMUM_ORDER_VALUE_TABLE = "minimumOrderValueTable";
  @SerializedName(SERIALIZED_NAME_MINIMUM_ORDER_VALUE_TABLE)
  private MinimumOrderValueTable minimumOrderValueTable;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PICKUP_SERVICE = "pickupService";
  @SerializedName(SERIALIZED_NAME_PICKUP_SERVICE)
  private PickupCarrierService pickupService;

  public static final String SERIALIZED_NAME_RATE_GROUPS = "rateGroups";
  @SerializedName(SERIALIZED_NAME_RATE_GROUPS)
  private List<RateGroup> rateGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPMENT_TYPE = "shipmentType";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_TYPE)
  private String shipmentType;

  public static final String SERIALIZED_NAME_STORE_CONFIG = "storeConfig";
  @SerializedName(SERIALIZED_NAME_STORE_CONFIG)
  private ServiceStoreConfig storeConfig;

  public Service() {
  }

  public Service active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * A boolean exposing the active status of the shipping service. Required.
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public Service currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The CLDR code of the currency to which this service applies. Must match that of the prices in rate groups.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Service deliveryCountry(String deliveryCountry) {
    this.deliveryCountry = deliveryCountry;
    return this;
  }

  /**
   * The CLDR territory code of the country to which the service applies. Required.
   * @return deliveryCountry
   */
  @javax.annotation.Nullable
  public String getDeliveryCountry() {
    return deliveryCountry;
  }

  public void setDeliveryCountry(String deliveryCountry) {
    this.deliveryCountry = deliveryCountry;
  }


  public Service deliveryTime(DeliveryTime deliveryTime) {
    this.deliveryTime = deliveryTime;
    return this;
  }

  /**
   * Get deliveryTime
   * @return deliveryTime
   */
  @javax.annotation.Nullable
  public DeliveryTime getDeliveryTime() {
    return deliveryTime;
  }

  public void setDeliveryTime(DeliveryTime deliveryTime) {
    this.deliveryTime = deliveryTime;
  }


  public Service eligibility(String eligibility) {
    this.eligibility = eligibility;
    return this;
  }

  /**
   * Eligibility for this service. Acceptable values are: - \&quot;&#x60;All scenarios&#x60;\&quot; - \&quot;&#x60;All scenarios except Shopping Actions&#x60;\&quot; - \&quot;&#x60;Shopping Actions&#x60;\&quot; 
   * @return eligibility
   */
  @javax.annotation.Nullable
  public String getEligibility() {
    return eligibility;
  }

  public void setEligibility(String eligibility) {
    this.eligibility = eligibility;
  }


  public Service minimumOrderValue(Price minimumOrderValue) {
    this.minimumOrderValue = minimumOrderValue;
    return this;
  }

  /**
   * Get minimumOrderValue
   * @return minimumOrderValue
   */
  @javax.annotation.Nullable
  public Price getMinimumOrderValue() {
    return minimumOrderValue;
  }

  public void setMinimumOrderValue(Price minimumOrderValue) {
    this.minimumOrderValue = minimumOrderValue;
  }


  public Service minimumOrderValueTable(MinimumOrderValueTable minimumOrderValueTable) {
    this.minimumOrderValueTable = minimumOrderValueTable;
    return this;
  }

  /**
   * Get minimumOrderValueTable
   * @return minimumOrderValueTable
   */
  @javax.annotation.Nullable
  public MinimumOrderValueTable getMinimumOrderValueTable() {
    return minimumOrderValueTable;
  }

  public void setMinimumOrderValueTable(MinimumOrderValueTable minimumOrderValueTable) {
    this.minimumOrderValueTable = minimumOrderValueTable;
  }


  public Service name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Free-form name of the service. Must be unique within target account. Required.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Service pickupService(PickupCarrierService pickupService) {
    this.pickupService = pickupService;
    return this;
  }

  /**
   * Get pickupService
   * @return pickupService
   */
  @javax.annotation.Nullable
  public PickupCarrierService getPickupService() {
    return pickupService;
  }

  public void setPickupService(PickupCarrierService pickupService) {
    this.pickupService = pickupService;
  }


  public Service rateGroups(List<RateGroup> rateGroups) {
    this.rateGroups = rateGroups;
    return this;
  }

  public Service addRateGroupsItem(RateGroup rateGroupsItem) {
    if (this.rateGroups == null) {
      this.rateGroups = new ArrayList<>();
    }
    this.rateGroups.add(rateGroupsItem);
    return this;
  }

  /**
   * Shipping rate group definitions. Only the last one is allowed to have an empty &#x60;applicableShippingLabels&#x60;, which means \&quot;everything else\&quot;. The other &#x60;applicableShippingLabels&#x60; must not overlap.
   * @return rateGroups
   */
  @javax.annotation.Nullable
  public List<RateGroup> getRateGroups() {
    return rateGroups;
  }

  public void setRateGroups(List<RateGroup> rateGroups) {
    this.rateGroups = rateGroups;
  }


  public Service shipmentType(String shipmentType) {
    this.shipmentType = shipmentType;
    return this;
  }

  /**
   * Type of locations this service ships orders to. Acceptable values are: - \&quot;&#x60;delivery&#x60;\&quot; - \&quot;&#x60;pickup&#x60; (deprecated)\&quot; - \&quot;&#x60;local_delivery&#x60;\&quot; - \&quot;&#x60;collection_point&#x60;\&quot; 
   * @return shipmentType
   */
  @javax.annotation.Nullable
  public String getShipmentType() {
    return shipmentType;
  }

  public void setShipmentType(String shipmentType) {
    this.shipmentType = shipmentType;
  }


  public Service storeConfig(ServiceStoreConfig storeConfig) {
    this.storeConfig = storeConfig;
    return this;
  }

  /**
   * Get storeConfig
   * @return storeConfig
   */
  @javax.annotation.Nullable
  public ServiceStoreConfig getStoreConfig() {
    return storeConfig;
  }

  public void setStoreConfig(ServiceStoreConfig storeConfig) {
    this.storeConfig = storeConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Service service = (Service) o;
    return Objects.equals(this.active, service.active) &&
        Objects.equals(this.currency, service.currency) &&
        Objects.equals(this.deliveryCountry, service.deliveryCountry) &&
        Objects.equals(this.deliveryTime, service.deliveryTime) &&
        Objects.equals(this.eligibility, service.eligibility) &&
        Objects.equals(this.minimumOrderValue, service.minimumOrderValue) &&
        Objects.equals(this.minimumOrderValueTable, service.minimumOrderValueTable) &&
        Objects.equals(this.name, service.name) &&
        Objects.equals(this.pickupService, service.pickupService) &&
        Objects.equals(this.rateGroups, service.rateGroups) &&
        Objects.equals(this.shipmentType, service.shipmentType) &&
        Objects.equals(this.storeConfig, service.storeConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, currency, deliveryCountry, deliveryTime, eligibility, minimumOrderValue, minimumOrderValueTable, name, pickupService, rateGroups, shipmentType, storeConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Service {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    deliveryCountry: ").append(toIndentedString(deliveryCountry)).append("\n");
    sb.append("    deliveryTime: ").append(toIndentedString(deliveryTime)).append("\n");
    sb.append("    eligibility: ").append(toIndentedString(eligibility)).append("\n");
    sb.append("    minimumOrderValue: ").append(toIndentedString(minimumOrderValue)).append("\n");
    sb.append("    minimumOrderValueTable: ").append(toIndentedString(minimumOrderValueTable)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pickupService: ").append(toIndentedString(pickupService)).append("\n");
    sb.append("    rateGroups: ").append(toIndentedString(rateGroups)).append("\n");
    sb.append("    shipmentType: ").append(toIndentedString(shipmentType)).append("\n");
    sb.append("    storeConfig: ").append(toIndentedString(storeConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("currency");
    openapiFields.add("deliveryCountry");
    openapiFields.add("deliveryTime");
    openapiFields.add("eligibility");
    openapiFields.add("minimumOrderValue");
    openapiFields.add("minimumOrderValueTable");
    openapiFields.add("name");
    openapiFields.add("pickupService");
    openapiFields.add("rateGroups");
    openapiFields.add("shipmentType");
    openapiFields.add("storeConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Service
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Service.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Service is not found in the empty JSON string", Service.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Service.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Service` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("deliveryCountry") != null && !jsonObj.get("deliveryCountry").isJsonNull()) && !jsonObj.get("deliveryCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryCountry").toString()));
      }
      // validate the optional field `deliveryTime`
      if (jsonObj.get("deliveryTime") != null && !jsonObj.get("deliveryTime").isJsonNull()) {
        DeliveryTime.validateJsonElement(jsonObj.get("deliveryTime"));
      }
      if ((jsonObj.get("eligibility") != null && !jsonObj.get("eligibility").isJsonNull()) && !jsonObj.get("eligibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eligibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eligibility").toString()));
      }
      // validate the optional field `minimumOrderValue`
      if (jsonObj.get("minimumOrderValue") != null && !jsonObj.get("minimumOrderValue").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("minimumOrderValue"));
      }
      // validate the optional field `minimumOrderValueTable`
      if (jsonObj.get("minimumOrderValueTable") != null && !jsonObj.get("minimumOrderValueTable").isJsonNull()) {
        MinimumOrderValueTable.validateJsonElement(jsonObj.get("minimumOrderValueTable"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `pickupService`
      if (jsonObj.get("pickupService") != null && !jsonObj.get("pickupService").isJsonNull()) {
        PickupCarrierService.validateJsonElement(jsonObj.get("pickupService"));
      }
      if (jsonObj.get("rateGroups") != null && !jsonObj.get("rateGroups").isJsonNull()) {
        JsonArray jsonArrayrateGroups = jsonObj.getAsJsonArray("rateGroups");
        if (jsonArrayrateGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rateGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rateGroups` to be an array in the JSON string but got `%s`", jsonObj.get("rateGroups").toString()));
          }

          // validate the optional field `rateGroups` (array)
          for (int i = 0; i < jsonArrayrateGroups.size(); i++) {
            RateGroup.validateJsonElement(jsonArrayrateGroups.get(i));
          };
        }
      }
      if ((jsonObj.get("shipmentType") != null && !jsonObj.get("shipmentType").isJsonNull()) && !jsonObj.get("shipmentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipmentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipmentType").toString()));
      }
      // validate the optional field `storeConfig`
      if (jsonObj.get("storeConfig") != null && !jsonObj.get("storeConfig").isJsonNull()) {
        ServiceStoreConfig.validateJsonElement(jsonObj.get("storeConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Service.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Service' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Service> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Service.class));

       return (TypeAdapter<T>) new TypeAdapter<Service>() {
           @Override
           public void write(JsonWriter out, Service value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Service read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Service given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Service
   * @throws IOException if the JSON string is invalid with respect to Service
   */
  public static Service fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Service.class);
  }

  /**
   * Convert an instance of Service to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

