/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RegionGeoTargetArea;
import org.openapitools.client.model.RegionPostalCodeArea;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a geographic region that you can use as a target with both the &#x60;RegionalInventory&#x60; and &#x60;ShippingSettings&#x60; services. You can define regions as collections of either postal codes or, in some countries, using predefined geotargets.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Region {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_GEOTARGET_AREA = "geotargetArea";
  @SerializedName(SERIALIZED_NAME_GEOTARGET_AREA)
  private RegionGeoTargetArea geotargetArea;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_POSTAL_CODE_AREA = "postalCodeArea";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE_AREA)
  private RegionPostalCodeArea postalCodeArea;

  public static final String SERIALIZED_NAME_REGION_ID = "regionId";
  @SerializedName(SERIALIZED_NAME_REGION_ID)
  private String regionId;

  public static final String SERIALIZED_NAME_REGIONAL_INVENTORY_ELIGIBLE = "regionalInventoryEligible";
  @SerializedName(SERIALIZED_NAME_REGIONAL_INVENTORY_ELIGIBLE)
  private Boolean regionalInventoryEligible;

  public static final String SERIALIZED_NAME_SHIPPING_ELIGIBLE = "shippingEligible";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ELIGIBLE)
  private Boolean shippingEligible;

  public Region() {
  }

  public Region(
     String merchantId, 
     String regionId, 
     Boolean regionalInventoryEligible, 
     Boolean shippingEligible
  ) {
    this();
    this.merchantId = merchantId;
    this.regionId = regionId;
    this.regionalInventoryEligible = regionalInventoryEligible;
    this.shippingEligible = shippingEligible;
  }

  public Region displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the region.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Region geotargetArea(RegionGeoTargetArea geotargetArea) {
    this.geotargetArea = geotargetArea;
    return this;
  }

  /**
   * Get geotargetArea
   * @return geotargetArea
   */
  @javax.annotation.Nullable
  public RegionGeoTargetArea getGeotargetArea() {
    return geotargetArea;
  }

  public void setGeotargetArea(RegionGeoTargetArea geotargetArea) {
    this.geotargetArea = geotargetArea;
  }


  /**
   * Output only. Immutable. Merchant that owns the region.
   * @return merchantId
   */
  @javax.annotation.Nullable
  public String getMerchantId() {
    return merchantId;
  }



  public Region postalCodeArea(RegionPostalCodeArea postalCodeArea) {
    this.postalCodeArea = postalCodeArea;
    return this;
  }

  /**
   * Get postalCodeArea
   * @return postalCodeArea
   */
  @javax.annotation.Nullable
  public RegionPostalCodeArea getPostalCodeArea() {
    return postalCodeArea;
  }

  public void setPostalCodeArea(RegionPostalCodeArea postalCodeArea) {
    this.postalCodeArea = postalCodeArea;
  }


  /**
   * Output only. Immutable. The ID uniquely identifying each region.
   * @return regionId
   */
  @javax.annotation.Nullable
  public String getRegionId() {
    return regionId;
  }



  /**
   * Output only. Indicates if the region is eligible to use in the Regional Inventory configuration.
   * @return regionalInventoryEligible
   */
  @javax.annotation.Nullable
  public Boolean getRegionalInventoryEligible() {
    return regionalInventoryEligible;
  }



  /**
   * Output only. Indicates if the region is eligible to use in the Shipping Services configuration.
   * @return shippingEligible
   */
  @javax.annotation.Nullable
  public Boolean getShippingEligible() {
    return shippingEligible;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Region region = (Region) o;
    return Objects.equals(this.displayName, region.displayName) &&
        Objects.equals(this.geotargetArea, region.geotargetArea) &&
        Objects.equals(this.merchantId, region.merchantId) &&
        Objects.equals(this.postalCodeArea, region.postalCodeArea) &&
        Objects.equals(this.regionId, region.regionId) &&
        Objects.equals(this.regionalInventoryEligible, region.regionalInventoryEligible) &&
        Objects.equals(this.shippingEligible, region.shippingEligible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, geotargetArea, merchantId, postalCodeArea, regionId, regionalInventoryEligible, shippingEligible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Region {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    geotargetArea: ").append(toIndentedString(geotargetArea)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    postalCodeArea: ").append(toIndentedString(postalCodeArea)).append("\n");
    sb.append("    regionId: ").append(toIndentedString(regionId)).append("\n");
    sb.append("    regionalInventoryEligible: ").append(toIndentedString(regionalInventoryEligible)).append("\n");
    sb.append("    shippingEligible: ").append(toIndentedString(shippingEligible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("geotargetArea");
    openapiFields.add("merchantId");
    openapiFields.add("postalCodeArea");
    openapiFields.add("regionId");
    openapiFields.add("regionalInventoryEligible");
    openapiFields.add("shippingEligible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Region
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Region.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Region is not found in the empty JSON string", Region.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Region.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Region` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `geotargetArea`
      if (jsonObj.get("geotargetArea") != null && !jsonObj.get("geotargetArea").isJsonNull()) {
        RegionGeoTargetArea.validateJsonElement(jsonObj.get("geotargetArea"));
      }
      if ((jsonObj.get("merchantId") != null && !jsonObj.get("merchantId").isJsonNull()) && !jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      // validate the optional field `postalCodeArea`
      if (jsonObj.get("postalCodeArea") != null && !jsonObj.get("postalCodeArea").isJsonNull()) {
        RegionPostalCodeArea.validateJsonElement(jsonObj.get("postalCodeArea"));
      }
      if ((jsonObj.get("regionId") != null && !jsonObj.get("regionId").isJsonNull()) && !jsonObj.get("regionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Region.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Region' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Region> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Region.class));

       return (TypeAdapter<T>) new TypeAdapter<Region>() {
           @Override
           public void write(JsonWriter out, Region value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Region read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Region given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Region
   * @throws IOException if the JSON string is invalid with respect to Region
   */
  public static Region fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Region.class);
  }

  /**
   * Convert an instance of Region to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

