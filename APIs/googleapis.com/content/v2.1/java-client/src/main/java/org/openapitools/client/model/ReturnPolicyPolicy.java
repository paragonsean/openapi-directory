/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReturnPolicyPolicy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReturnPolicyPolicy {
  public static final String SERIALIZED_NAME_LAST_RETURN_DATE = "lastReturnDate";
  @SerializedName(SERIALIZED_NAME_LAST_RETURN_DATE)
  private String lastReturnDate;

  public static final String SERIALIZED_NAME_NUMBER_OF_DAYS = "numberOfDays";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_DAYS)
  private String numberOfDays;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ReturnPolicyPolicy() {
  }

  public ReturnPolicyPolicy lastReturnDate(String lastReturnDate) {
    this.lastReturnDate = lastReturnDate;
    return this;
  }

  /**
   * Required. Last day for returning the items. In ISO 8601 format. When specifying the return window like this, set the policy type to \&quot;lastReturnDate\&quot;. Use this for seasonal overrides only.
   * @return lastReturnDate
   */
  @javax.annotation.Nullable
  public String getLastReturnDate() {
    return lastReturnDate;
  }

  public void setLastReturnDate(String lastReturnDate) {
    this.lastReturnDate = lastReturnDate;
  }


  public ReturnPolicyPolicy numberOfDays(String numberOfDays) {
    this.numberOfDays = numberOfDays;
    return this;
  }

  /**
   * The number of days items can be returned after delivery, where one day is defined to be 24 hours after the delivery timestamp. When specifying the return window like this, set the policy type to \&quot;numberOfDaysAfterDelivery\&quot;. Acceptable values are 30, 45, 60, 90, 100, 180, 270 and 365 for the default policy. Additional policies further allow 14, 15, 21 and 28 days, but note that for most items a minimum of 30 days is required for returns. Exceptions may be made for electronics. A policy of less than 30 days can only be applied to those items.
   * @return numberOfDays
   */
  @javax.annotation.Nullable
  public String getNumberOfDays() {
    return numberOfDays;
  }

  public void setNumberOfDays(String numberOfDays) {
    this.numberOfDays = numberOfDays;
  }


  public ReturnPolicyPolicy type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Policy type. Use \&quot;lastReturnDate\&quot; for seasonal overrides only. Note that for most items a minimum of 30 days is required for returns. Exceptions may be made for electronics or non-returnable items such as food, perishables, and living things. A policy of less than 30 days can only be applied to those items. Acceptable values are: - \&quot;&#x60;lastReturnDate&#x60;\&quot; - \&quot;&#x60;lifetimeReturns&#x60;\&quot; - \&quot;&#x60;noReturns&#x60;\&quot; - \&quot;&#x60;numberOfDaysAfterDelivery&#x60;\&quot; 
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReturnPolicyPolicy returnPolicyPolicy = (ReturnPolicyPolicy) o;
    return Objects.equals(this.lastReturnDate, returnPolicyPolicy.lastReturnDate) &&
        Objects.equals(this.numberOfDays, returnPolicyPolicy.numberOfDays) &&
        Objects.equals(this.type, returnPolicyPolicy.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastReturnDate, numberOfDays, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReturnPolicyPolicy {\n");
    sb.append("    lastReturnDate: ").append(toIndentedString(lastReturnDate)).append("\n");
    sb.append("    numberOfDays: ").append(toIndentedString(numberOfDays)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lastReturnDate");
    openapiFields.add("numberOfDays");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReturnPolicyPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReturnPolicyPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReturnPolicyPolicy is not found in the empty JSON string", ReturnPolicyPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReturnPolicyPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReturnPolicyPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("lastReturnDate") != null && !jsonObj.get("lastReturnDate").isJsonNull()) && !jsonObj.get("lastReturnDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastReturnDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastReturnDate").toString()));
      }
      if ((jsonObj.get("numberOfDays") != null && !jsonObj.get("numberOfDays").isJsonNull()) && !jsonObj.get("numberOfDays").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numberOfDays` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numberOfDays").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReturnPolicyPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReturnPolicyPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReturnPolicyPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReturnPolicyPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<ReturnPolicyPolicy>() {
           @Override
           public void write(JsonWriter out, ReturnPolicyPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReturnPolicyPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReturnPolicyPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReturnPolicyPolicy
   * @throws IOException if the JSON string is invalid with respect to ReturnPolicyPolicy
   */
  public static ReturnPolicyPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReturnPolicyPolicy.class);
  }

  /**
   * Convert an instance of ReturnPolicyPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

