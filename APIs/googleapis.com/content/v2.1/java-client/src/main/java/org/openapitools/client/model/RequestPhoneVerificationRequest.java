/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for the RequestPhoneVerification method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RequestPhoneVerificationRequest {
  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PHONE_REGION_CODE = "phoneRegionCode";
  @SerializedName(SERIALIZED_NAME_PHONE_REGION_CODE)
  private String phoneRegionCode;

  /**
   * Verification method to receive verification code.
   */
  @JsonAdapter(PhoneVerificationMethodEnum.Adapter.class)
  public enum PhoneVerificationMethodEnum {
    PHONE_VERIFICATION_METHOD_UNSPECIFIED("PHONE_VERIFICATION_METHOD_UNSPECIFIED"),
    
    SMS("SMS"),
    
    PHONE_CALL("PHONE_CALL");

    private String value;

    PhoneVerificationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhoneVerificationMethodEnum fromValue(String value) {
      for (PhoneVerificationMethodEnum b : PhoneVerificationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhoneVerificationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhoneVerificationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhoneVerificationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhoneVerificationMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PhoneVerificationMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PHONE_VERIFICATION_METHOD = "phoneVerificationMethod";
  @SerializedName(SERIALIZED_NAME_PHONE_VERIFICATION_METHOD)
  private PhoneVerificationMethodEnum phoneVerificationMethod;

  public RequestPhoneVerificationRequest() {
  }

  public RequestPhoneVerificationRequest languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Language code [IETF BCP 47 syntax](https://tools.ietf.org/html/bcp47) (for example, en-US). Language code is used to provide localized &#x60;SMS&#x60; and &#x60;PHONE_CALL&#x60;. Default language used is en-US if not provided.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public RequestPhoneVerificationRequest phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Phone number to be verified.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public RequestPhoneVerificationRequest phoneRegionCode(String phoneRegionCode) {
    this.phoneRegionCode = phoneRegionCode;
    return this;
  }

  /**
   * Required. Two letter country code for the phone number, for example &#x60;CA&#x60; for Canadian numbers. See the [ISO 3166-1 alpha-2](https://wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) officially assigned codes.
   * @return phoneRegionCode
   */
  @javax.annotation.Nullable
  public String getPhoneRegionCode() {
    return phoneRegionCode;
  }

  public void setPhoneRegionCode(String phoneRegionCode) {
    this.phoneRegionCode = phoneRegionCode;
  }


  public RequestPhoneVerificationRequest phoneVerificationMethod(PhoneVerificationMethodEnum phoneVerificationMethod) {
    this.phoneVerificationMethod = phoneVerificationMethod;
    return this;
  }

  /**
   * Verification method to receive verification code.
   * @return phoneVerificationMethod
   */
  @javax.annotation.Nullable
  public PhoneVerificationMethodEnum getPhoneVerificationMethod() {
    return phoneVerificationMethod;
  }

  public void setPhoneVerificationMethod(PhoneVerificationMethodEnum phoneVerificationMethod) {
    this.phoneVerificationMethod = phoneVerificationMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestPhoneVerificationRequest requestPhoneVerificationRequest = (RequestPhoneVerificationRequest) o;
    return Objects.equals(this.languageCode, requestPhoneVerificationRequest.languageCode) &&
        Objects.equals(this.phoneNumber, requestPhoneVerificationRequest.phoneNumber) &&
        Objects.equals(this.phoneRegionCode, requestPhoneVerificationRequest.phoneRegionCode) &&
        Objects.equals(this.phoneVerificationMethod, requestPhoneVerificationRequest.phoneVerificationMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(languageCode, phoneNumber, phoneRegionCode, phoneVerificationMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestPhoneVerificationRequest {\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    phoneRegionCode: ").append(toIndentedString(phoneRegionCode)).append("\n");
    sb.append("    phoneVerificationMethod: ").append(toIndentedString(phoneVerificationMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("languageCode");
    openapiFields.add("phoneNumber");
    openapiFields.add("phoneRegionCode");
    openapiFields.add("phoneVerificationMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestPhoneVerificationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestPhoneVerificationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestPhoneVerificationRequest is not found in the empty JSON string", RequestPhoneVerificationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestPhoneVerificationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestPhoneVerificationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("phoneRegionCode") != null && !jsonObj.get("phoneRegionCode").isJsonNull()) && !jsonObj.get("phoneRegionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneRegionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneRegionCode").toString()));
      }
      if ((jsonObj.get("phoneVerificationMethod") != null && !jsonObj.get("phoneVerificationMethod").isJsonNull()) && !jsonObj.get("phoneVerificationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneVerificationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneVerificationMethod").toString()));
      }
      // validate the optional field `phoneVerificationMethod`
      if (jsonObj.get("phoneVerificationMethod") != null && !jsonObj.get("phoneVerificationMethod").isJsonNull()) {
        PhoneVerificationMethodEnum.validateJsonElement(jsonObj.get("phoneVerificationMethod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestPhoneVerificationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestPhoneVerificationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestPhoneVerificationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestPhoneVerificationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestPhoneVerificationRequest>() {
           @Override
           public void write(JsonWriter out, RequestPhoneVerificationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestPhoneVerificationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestPhoneVerificationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestPhoneVerificationRequest
   * @throws IOException if the JSON string is invalid with respect to RequestPhoneVerificationRequest
   */
  public static RequestPhoneVerificationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestPhoneVerificationRequest.class);
  }

  /**
   * Convert an instance of RequestPhoneVerificationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

