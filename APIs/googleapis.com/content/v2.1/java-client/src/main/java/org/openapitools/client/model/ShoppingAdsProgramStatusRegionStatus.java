/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ShoppingAdsProgramStatusReviewIneligibilityReasonDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Status of program and region.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShoppingAdsProgramStatusRegionStatus {
  public static final String SERIALIZED_NAME_DISAPPROVAL_DATE = "disapprovalDate";
  @SerializedName(SERIALIZED_NAME_DISAPPROVAL_DATE)
  private String disapprovalDate;

  /**
   * Eligibility status of the Shopping Ads program.
   */
  @JsonAdapter(EligibilityStatusEnum.Adapter.class)
  public enum EligibilityStatusEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    APPROVED("APPROVED"),
    
    DISAPPROVED("DISAPPROVED"),
    
    WARNING("WARNING"),
    
    UNDER_REVIEW("UNDER_REVIEW"),
    
    PENDING_REVIEW("PENDING_REVIEW"),
    
    ONBOARDING("ONBOARDING");

    private String value;

    EligibilityStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EligibilityStatusEnum fromValue(String value) {
      for (EligibilityStatusEnum b : EligibilityStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EligibilityStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EligibilityStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EligibilityStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EligibilityStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EligibilityStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ELIGIBILITY_STATUS = "eligibilityStatus";
  @SerializedName(SERIALIZED_NAME_ELIGIBILITY_STATUS)
  private EligibilityStatusEnum eligibilityStatus;

  public static final String SERIALIZED_NAME_ONBOARDING_ISSUES = "onboardingIssues";
  @SerializedName(SERIALIZED_NAME_ONBOARDING_ISSUES)
  private List<String> onboardingIssues = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGION_CODES = "regionCodes";
  @SerializedName(SERIALIZED_NAME_REGION_CODES)
  private List<String> regionCodes = new ArrayList<>();

  /**
   * If a program is eligible for review in a specific region. Only visible if &#x60;eligibilityStatus&#x60; is &#x60;DISAPPROVED&#x60;.
   */
  @JsonAdapter(ReviewEligibilityStatusEnum.Adapter.class)
  public enum ReviewEligibilityStatusEnum {
    REVIEW_ELIGIBILITY_UNSPECIFIED("REVIEW_ELIGIBILITY_UNSPECIFIED"),
    
    ELIGIBLE("ELIGIBLE"),
    
    INELIGIBLE("INELIGIBLE");

    private String value;

    ReviewEligibilityStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReviewEligibilityStatusEnum fromValue(String value) {
      for (ReviewEligibilityStatusEnum b : ReviewEligibilityStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReviewEligibilityStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReviewEligibilityStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReviewEligibilityStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReviewEligibilityStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReviewEligibilityStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REVIEW_ELIGIBILITY_STATUS = "reviewEligibilityStatus";
  @SerializedName(SERIALIZED_NAME_REVIEW_ELIGIBILITY_STATUS)
  private ReviewEligibilityStatusEnum reviewEligibilityStatus;

  /**
   * Review ineligibility reason if account is not eligible for review.
   */
  @JsonAdapter(ReviewIneligibilityReasonEnum.Adapter.class)
  public enum ReviewIneligibilityReasonEnum {
    REVIEW_INELIGIBILITY_REASON_UNSPECIFIED("REVIEW_INELIGIBILITY_REASON_UNSPECIFIED"),
    
    ONBOARDING_ISSUES("ONBOARDING_ISSUES"),
    
    NOT_ENOUGH_OFFERS("NOT_ENOUGH_OFFERS"),
    
    IN_COOLDOWN_PERIOD("IN_COOLDOWN_PERIOD"),
    
    ALREADY_UNDER_REVIEW("ALREADY_UNDER_REVIEW"),
    
    NO_REVIEW_REQUIRED("NO_REVIEW_REQUIRED"),
    
    WILL_BE_REVIEWED_AUTOMATICALLY("WILL_BE_REVIEWED_AUTOMATICALLY"),
    
    IS_RETIRED("IS_RETIRED"),
    
    ALREADY_REVIEWED("ALREADY_REVIEWED");

    private String value;

    ReviewIneligibilityReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReviewIneligibilityReasonEnum fromValue(String value) {
      for (ReviewIneligibilityReasonEnum b : ReviewIneligibilityReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReviewIneligibilityReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReviewIneligibilityReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReviewIneligibilityReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReviewIneligibilityReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReviewIneligibilityReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REVIEW_INELIGIBILITY_REASON = "reviewIneligibilityReason";
  @SerializedName(SERIALIZED_NAME_REVIEW_INELIGIBILITY_REASON)
  private ReviewIneligibilityReasonEnum reviewIneligibilityReason;

  public static final String SERIALIZED_NAME_REVIEW_INELIGIBILITY_REASON_DESCRIPTION = "reviewIneligibilityReasonDescription";
  @SerializedName(SERIALIZED_NAME_REVIEW_INELIGIBILITY_REASON_DESCRIPTION)
  private String reviewIneligibilityReasonDescription;

  public static final String SERIALIZED_NAME_REVIEW_INELIGIBILITY_REASON_DETAILS = "reviewIneligibilityReasonDetails";
  @SerializedName(SERIALIZED_NAME_REVIEW_INELIGIBILITY_REASON_DETAILS)
  private ShoppingAdsProgramStatusReviewIneligibilityReasonDetails reviewIneligibilityReasonDetails;

  public static final String SERIALIZED_NAME_REVIEW_ISSUES = "reviewIssues";
  @SerializedName(SERIALIZED_NAME_REVIEW_ISSUES)
  private List<String> reviewIssues = new ArrayList<>();

  public ShoppingAdsProgramStatusRegionStatus() {
  }

  public ShoppingAdsProgramStatusRegionStatus disapprovalDate(String disapprovalDate) {
    this.disapprovalDate = disapprovalDate;
    return this;
  }

  /**
   * Date by which eligibilityStatus will go from &#x60;WARNING&#x60; to &#x60;DISAPPROVED&#x60;. Only visible when your eligibilityStatus is WARNING. In [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DD&#x60;.
   * @return disapprovalDate
   */
  @javax.annotation.Nullable
  public String getDisapprovalDate() {
    return disapprovalDate;
  }

  public void setDisapprovalDate(String disapprovalDate) {
    this.disapprovalDate = disapprovalDate;
  }


  public ShoppingAdsProgramStatusRegionStatus eligibilityStatus(EligibilityStatusEnum eligibilityStatus) {
    this.eligibilityStatus = eligibilityStatus;
    return this;
  }

  /**
   * Eligibility status of the Shopping Ads program.
   * @return eligibilityStatus
   */
  @javax.annotation.Nullable
  public EligibilityStatusEnum getEligibilityStatus() {
    return eligibilityStatus;
  }

  public void setEligibilityStatus(EligibilityStatusEnum eligibilityStatus) {
    this.eligibilityStatus = eligibilityStatus;
  }


  public ShoppingAdsProgramStatusRegionStatus onboardingIssues(List<String> onboardingIssues) {
    this.onboardingIssues = onboardingIssues;
    return this;
  }

  public ShoppingAdsProgramStatusRegionStatus addOnboardingIssuesItem(String onboardingIssuesItem) {
    if (this.onboardingIssues == null) {
      this.onboardingIssues = new ArrayList<>();
    }
    this.onboardingIssues.add(onboardingIssuesItem);
    return this;
  }

  /**
   * Issues that must be fixed to be eligible for review.
   * @return onboardingIssues
   */
  @javax.annotation.Nullable
  public List<String> getOnboardingIssues() {
    return onboardingIssues;
  }

  public void setOnboardingIssues(List<String> onboardingIssues) {
    this.onboardingIssues = onboardingIssues;
  }


  public ShoppingAdsProgramStatusRegionStatus regionCodes(List<String> regionCodes) {
    this.regionCodes = regionCodes;
    return this;
  }

  public ShoppingAdsProgramStatusRegionStatus addRegionCodesItem(String regionCodesItem) {
    if (this.regionCodes == null) {
      this.regionCodes = new ArrayList<>();
    }
    this.regionCodes.add(regionCodesItem);
    return this;
  }

  /**
   * The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) codes for all the regions with the same &#x60;eligibilityStatus&#x60; and &#x60;reviewEligibility&#x60;.
   * @return regionCodes
   */
  @javax.annotation.Nullable
  public List<String> getRegionCodes() {
    return regionCodes;
  }

  public void setRegionCodes(List<String> regionCodes) {
    this.regionCodes = regionCodes;
  }


  public ShoppingAdsProgramStatusRegionStatus reviewEligibilityStatus(ReviewEligibilityStatusEnum reviewEligibilityStatus) {
    this.reviewEligibilityStatus = reviewEligibilityStatus;
    return this;
  }

  /**
   * If a program is eligible for review in a specific region. Only visible if &#x60;eligibilityStatus&#x60; is &#x60;DISAPPROVED&#x60;.
   * @return reviewEligibilityStatus
   */
  @javax.annotation.Nullable
  public ReviewEligibilityStatusEnum getReviewEligibilityStatus() {
    return reviewEligibilityStatus;
  }

  public void setReviewEligibilityStatus(ReviewEligibilityStatusEnum reviewEligibilityStatus) {
    this.reviewEligibilityStatus = reviewEligibilityStatus;
  }


  public ShoppingAdsProgramStatusRegionStatus reviewIneligibilityReason(ReviewIneligibilityReasonEnum reviewIneligibilityReason) {
    this.reviewIneligibilityReason = reviewIneligibilityReason;
    return this;
  }

  /**
   * Review ineligibility reason if account is not eligible for review.
   * @return reviewIneligibilityReason
   */
  @javax.annotation.Nullable
  public ReviewIneligibilityReasonEnum getReviewIneligibilityReason() {
    return reviewIneligibilityReason;
  }

  public void setReviewIneligibilityReason(ReviewIneligibilityReasonEnum reviewIneligibilityReason) {
    this.reviewIneligibilityReason = reviewIneligibilityReason;
  }


  public ShoppingAdsProgramStatusRegionStatus reviewIneligibilityReasonDescription(String reviewIneligibilityReasonDescription) {
    this.reviewIneligibilityReasonDescription = reviewIneligibilityReasonDescription;
    return this;
  }

  /**
   * Reason a program in a specific region isn’t eligible for review. Only visible if &#x60;reviewEligibilityStatus&#x60; is &#x60;INELIGIBLE&#x60;.
   * @return reviewIneligibilityReasonDescription
   */
  @javax.annotation.Nullable
  public String getReviewIneligibilityReasonDescription() {
    return reviewIneligibilityReasonDescription;
  }

  public void setReviewIneligibilityReasonDescription(String reviewIneligibilityReasonDescription) {
    this.reviewIneligibilityReasonDescription = reviewIneligibilityReasonDescription;
  }


  public ShoppingAdsProgramStatusRegionStatus reviewIneligibilityReasonDetails(ShoppingAdsProgramStatusReviewIneligibilityReasonDetails reviewIneligibilityReasonDetails) {
    this.reviewIneligibilityReasonDetails = reviewIneligibilityReasonDetails;
    return this;
  }

  /**
   * Get reviewIneligibilityReasonDetails
   * @return reviewIneligibilityReasonDetails
   */
  @javax.annotation.Nullable
  public ShoppingAdsProgramStatusReviewIneligibilityReasonDetails getReviewIneligibilityReasonDetails() {
    return reviewIneligibilityReasonDetails;
  }

  public void setReviewIneligibilityReasonDetails(ShoppingAdsProgramStatusReviewIneligibilityReasonDetails reviewIneligibilityReasonDetails) {
    this.reviewIneligibilityReasonDetails = reviewIneligibilityReasonDetails;
  }


  public ShoppingAdsProgramStatusRegionStatus reviewIssues(List<String> reviewIssues) {
    this.reviewIssues = reviewIssues;
    return this;
  }

  public ShoppingAdsProgramStatusRegionStatus addReviewIssuesItem(String reviewIssuesItem) {
    if (this.reviewIssues == null) {
      this.reviewIssues = new ArrayList<>();
    }
    this.reviewIssues.add(reviewIssuesItem);
    return this;
  }

  /**
   * Issues evaluated in the review process. Fix all issues before requesting a review.
   * @return reviewIssues
   */
  @javax.annotation.Nullable
  public List<String> getReviewIssues() {
    return reviewIssues;
  }

  public void setReviewIssues(List<String> reviewIssues) {
    this.reviewIssues = reviewIssues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShoppingAdsProgramStatusRegionStatus shoppingAdsProgramStatusRegionStatus = (ShoppingAdsProgramStatusRegionStatus) o;
    return Objects.equals(this.disapprovalDate, shoppingAdsProgramStatusRegionStatus.disapprovalDate) &&
        Objects.equals(this.eligibilityStatus, shoppingAdsProgramStatusRegionStatus.eligibilityStatus) &&
        Objects.equals(this.onboardingIssues, shoppingAdsProgramStatusRegionStatus.onboardingIssues) &&
        Objects.equals(this.regionCodes, shoppingAdsProgramStatusRegionStatus.regionCodes) &&
        Objects.equals(this.reviewEligibilityStatus, shoppingAdsProgramStatusRegionStatus.reviewEligibilityStatus) &&
        Objects.equals(this.reviewIneligibilityReason, shoppingAdsProgramStatusRegionStatus.reviewIneligibilityReason) &&
        Objects.equals(this.reviewIneligibilityReasonDescription, shoppingAdsProgramStatusRegionStatus.reviewIneligibilityReasonDescription) &&
        Objects.equals(this.reviewIneligibilityReasonDetails, shoppingAdsProgramStatusRegionStatus.reviewIneligibilityReasonDetails) &&
        Objects.equals(this.reviewIssues, shoppingAdsProgramStatusRegionStatus.reviewIssues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disapprovalDate, eligibilityStatus, onboardingIssues, regionCodes, reviewEligibilityStatus, reviewIneligibilityReason, reviewIneligibilityReasonDescription, reviewIneligibilityReasonDetails, reviewIssues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShoppingAdsProgramStatusRegionStatus {\n");
    sb.append("    disapprovalDate: ").append(toIndentedString(disapprovalDate)).append("\n");
    sb.append("    eligibilityStatus: ").append(toIndentedString(eligibilityStatus)).append("\n");
    sb.append("    onboardingIssues: ").append(toIndentedString(onboardingIssues)).append("\n");
    sb.append("    regionCodes: ").append(toIndentedString(regionCodes)).append("\n");
    sb.append("    reviewEligibilityStatus: ").append(toIndentedString(reviewEligibilityStatus)).append("\n");
    sb.append("    reviewIneligibilityReason: ").append(toIndentedString(reviewIneligibilityReason)).append("\n");
    sb.append("    reviewIneligibilityReasonDescription: ").append(toIndentedString(reviewIneligibilityReasonDescription)).append("\n");
    sb.append("    reviewIneligibilityReasonDetails: ").append(toIndentedString(reviewIneligibilityReasonDetails)).append("\n");
    sb.append("    reviewIssues: ").append(toIndentedString(reviewIssues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disapprovalDate");
    openapiFields.add("eligibilityStatus");
    openapiFields.add("onboardingIssues");
    openapiFields.add("regionCodes");
    openapiFields.add("reviewEligibilityStatus");
    openapiFields.add("reviewIneligibilityReason");
    openapiFields.add("reviewIneligibilityReasonDescription");
    openapiFields.add("reviewIneligibilityReasonDetails");
    openapiFields.add("reviewIssues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShoppingAdsProgramStatusRegionStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShoppingAdsProgramStatusRegionStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShoppingAdsProgramStatusRegionStatus is not found in the empty JSON string", ShoppingAdsProgramStatusRegionStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShoppingAdsProgramStatusRegionStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShoppingAdsProgramStatusRegionStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("disapprovalDate") != null && !jsonObj.get("disapprovalDate").isJsonNull()) && !jsonObj.get("disapprovalDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disapprovalDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disapprovalDate").toString()));
      }
      if ((jsonObj.get("eligibilityStatus") != null && !jsonObj.get("eligibilityStatus").isJsonNull()) && !jsonObj.get("eligibilityStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eligibilityStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eligibilityStatus").toString()));
      }
      // validate the optional field `eligibilityStatus`
      if (jsonObj.get("eligibilityStatus") != null && !jsonObj.get("eligibilityStatus").isJsonNull()) {
        EligibilityStatusEnum.validateJsonElement(jsonObj.get("eligibilityStatus"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("onboardingIssues") != null && !jsonObj.get("onboardingIssues").isJsonNull() && !jsonObj.get("onboardingIssues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `onboardingIssues` to be an array in the JSON string but got `%s`", jsonObj.get("onboardingIssues").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("regionCodes") != null && !jsonObj.get("regionCodes").isJsonNull() && !jsonObj.get("regionCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `regionCodes` to be an array in the JSON string but got `%s`", jsonObj.get("regionCodes").toString()));
      }
      if ((jsonObj.get("reviewEligibilityStatus") != null && !jsonObj.get("reviewEligibilityStatus").isJsonNull()) && !jsonObj.get("reviewEligibilityStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewEligibilityStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewEligibilityStatus").toString()));
      }
      // validate the optional field `reviewEligibilityStatus`
      if (jsonObj.get("reviewEligibilityStatus") != null && !jsonObj.get("reviewEligibilityStatus").isJsonNull()) {
        ReviewEligibilityStatusEnum.validateJsonElement(jsonObj.get("reviewEligibilityStatus"));
      }
      if ((jsonObj.get("reviewIneligibilityReason") != null && !jsonObj.get("reviewIneligibilityReason").isJsonNull()) && !jsonObj.get("reviewIneligibilityReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewIneligibilityReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewIneligibilityReason").toString()));
      }
      // validate the optional field `reviewIneligibilityReason`
      if (jsonObj.get("reviewIneligibilityReason") != null && !jsonObj.get("reviewIneligibilityReason").isJsonNull()) {
        ReviewIneligibilityReasonEnum.validateJsonElement(jsonObj.get("reviewIneligibilityReason"));
      }
      if ((jsonObj.get("reviewIneligibilityReasonDescription") != null && !jsonObj.get("reviewIneligibilityReasonDescription").isJsonNull()) && !jsonObj.get("reviewIneligibilityReasonDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewIneligibilityReasonDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewIneligibilityReasonDescription").toString()));
      }
      // validate the optional field `reviewIneligibilityReasonDetails`
      if (jsonObj.get("reviewIneligibilityReasonDetails") != null && !jsonObj.get("reviewIneligibilityReasonDetails").isJsonNull()) {
        ShoppingAdsProgramStatusReviewIneligibilityReasonDetails.validateJsonElement(jsonObj.get("reviewIneligibilityReasonDetails"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reviewIssues") != null && !jsonObj.get("reviewIssues").isJsonNull() && !jsonObj.get("reviewIssues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewIssues` to be an array in the JSON string but got `%s`", jsonObj.get("reviewIssues").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShoppingAdsProgramStatusRegionStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShoppingAdsProgramStatusRegionStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShoppingAdsProgramStatusRegionStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShoppingAdsProgramStatusRegionStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ShoppingAdsProgramStatusRegionStatus>() {
           @Override
           public void write(JsonWriter out, ShoppingAdsProgramStatusRegionStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShoppingAdsProgramStatusRegionStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShoppingAdsProgramStatusRegionStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShoppingAdsProgramStatusRegionStatus
   * @throws IOException if the JSON string is invalid with respect to ShoppingAdsProgramStatusRegionStatus
   */
  public static ShoppingAdsProgramStatusRegionStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShoppingAdsProgramStatusRegionStatus.class);
  }

  /**
   * Convert an instance of ShoppingAdsProgramStatusRegionStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

