/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.openapitools.client.model.ProductViewItemIssue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Product fields. Values are only set for fields requested explicitly in the request&#39;s search query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductView {
  /**
   * Aggregated destination status.
   */
  @JsonAdapter(AggregatedDestinationStatusEnum.Adapter.class)
  public enum AggregatedDestinationStatusEnum {
    AGGREGATED_STATUS_UNSPECIFIED("AGGREGATED_STATUS_UNSPECIFIED"),
    
    NOT_ELIGIBLE_OR_DISAPPROVED("NOT_ELIGIBLE_OR_DISAPPROVED"),
    
    PENDING("PENDING"),
    
    ELIGIBLE_LIMITED("ELIGIBLE_LIMITED"),
    
    ELIGIBLE("ELIGIBLE");

    private String value;

    AggregatedDestinationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregatedDestinationStatusEnum fromValue(String value) {
      for (AggregatedDestinationStatusEnum b : AggregatedDestinationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregatedDestinationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregatedDestinationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregatedDestinationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregatedDestinationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AggregatedDestinationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATED_DESTINATION_STATUS = "aggregatedDestinationStatus";
  @SerializedName(SERIALIZED_NAME_AGGREGATED_DESTINATION_STATUS)
  private AggregatedDestinationStatusEnum aggregatedDestinationStatus;

  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private String availability;

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_CATEGORY_L1 = "categoryL1";
  @SerializedName(SERIALIZED_NAME_CATEGORY_L1)
  private String categoryL1;

  public static final String SERIALIZED_NAME_CATEGORY_L2 = "categoryL2";
  @SerializedName(SERIALIZED_NAME_CATEGORY_L2)
  private String categoryL2;

  public static final String SERIALIZED_NAME_CATEGORY_L3 = "categoryL3";
  @SerializedName(SERIALIZED_NAME_CATEGORY_L3)
  private String categoryL3;

  public static final String SERIALIZED_NAME_CATEGORY_L4 = "categoryL4";
  @SerializedName(SERIALIZED_NAME_CATEGORY_L4)
  private String categoryL4;

  public static final String SERIALIZED_NAME_CATEGORY_L5 = "categoryL5";
  @SerializedName(SERIALIZED_NAME_CATEGORY_L5)
  private String categoryL5;

  /**
   * Channel of the product (online versus local).
   */
  @JsonAdapter(ChannelEnum.Adapter.class)
  public enum ChannelEnum {
    CHANNEL_UNSPECIFIED("CHANNEL_UNSPECIFIED"),
    
    LOCAL("LOCAL"),
    
    ONLINE("ONLINE");

    private String value;

    ChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelEnum fromValue(String value) {
      for (ChannelEnum b : ChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChannelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChannelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private ChannelEnum channel;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private String condition;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private Date expirationDate;

  public static final String SERIALIZED_NAME_GTIN = "gtin";
  @SerializedName(SERIALIZED_NAME_GTIN)
  private List<String> gtin = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ITEM_GROUP_ID = "itemGroupId";
  @SerializedName(SERIALIZED_NAME_ITEM_GROUP_ID)
  private String itemGroupId;

  public static final String SERIALIZED_NAME_ITEM_ISSUES = "itemIssues";
  @SerializedName(SERIALIZED_NAME_ITEM_ISSUES)
  private List<ProductViewItemIssue> itemIssues = new ArrayList<>();

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_OFFER_ID = "offerId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private String offerId;

  public static final String SERIALIZED_NAME_PRICE_MICROS = "priceMicros";
  @SerializedName(SERIALIZED_NAME_PRICE_MICROS)
  private String priceMicros;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE_L1 = "productTypeL1";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE_L1)
  private String productTypeL1;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE_L2 = "productTypeL2";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE_L2)
  private String productTypeL2;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE_L3 = "productTypeL3";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE_L3)
  private String productTypeL3;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE_L4 = "productTypeL4";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE_L4)
  private String productTypeL4;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE_L5 = "productTypeL5";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE_L5)
  private String productTypeL5;

  public static final String SERIALIZED_NAME_SHIPPING_LABEL = "shippingLabel";
  @SerializedName(SERIALIZED_NAME_SHIPPING_LABEL)
  private String shippingLabel;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public ProductView() {
  }

  public ProductView aggregatedDestinationStatus(AggregatedDestinationStatusEnum aggregatedDestinationStatus) {
    this.aggregatedDestinationStatus = aggregatedDestinationStatus;
    return this;
  }

  /**
   * Aggregated destination status.
   * @return aggregatedDestinationStatus
   */
  @javax.annotation.Nullable
  public AggregatedDestinationStatusEnum getAggregatedDestinationStatus() {
    return aggregatedDestinationStatus;
  }

  public void setAggregatedDestinationStatus(AggregatedDestinationStatusEnum aggregatedDestinationStatus) {
    this.aggregatedDestinationStatus = aggregatedDestinationStatus;
  }


  public ProductView availability(String availability) {
    this.availability = availability;
    return this;
  }

  /**
   * Availability of the product.
   * @return availability
   */
  @javax.annotation.Nullable
  public String getAvailability() {
    return availability;
  }

  public void setAvailability(String availability) {
    this.availability = availability;
  }


  public ProductView brand(String brand) {
    this.brand = brand;
    return this;
  }

  /**
   * Brand of the product.
   * @return brand
   */
  @javax.annotation.Nullable
  public String getBrand() {
    return brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }


  public ProductView categoryL1(String categoryL1) {
    this.categoryL1 = categoryL1;
    return this;
  }

  /**
   * First level of the product category in [Google&#39;s product taxonomy](https://support.google.com/merchants/answer/6324436).
   * @return categoryL1
   */
  @javax.annotation.Nullable
  public String getCategoryL1() {
    return categoryL1;
  }

  public void setCategoryL1(String categoryL1) {
    this.categoryL1 = categoryL1;
  }


  public ProductView categoryL2(String categoryL2) {
    this.categoryL2 = categoryL2;
    return this;
  }

  /**
   * Second level of the product category in [Google&#39;s product taxonomy](https://support.google.com/merchants/answer/6324436).
   * @return categoryL2
   */
  @javax.annotation.Nullable
  public String getCategoryL2() {
    return categoryL2;
  }

  public void setCategoryL2(String categoryL2) {
    this.categoryL2 = categoryL2;
  }


  public ProductView categoryL3(String categoryL3) {
    this.categoryL3 = categoryL3;
    return this;
  }

  /**
   * Third level of the product category in [Google&#39;s product taxonomy](https://support.google.com/merchants/answer/6324436).
   * @return categoryL3
   */
  @javax.annotation.Nullable
  public String getCategoryL3() {
    return categoryL3;
  }

  public void setCategoryL3(String categoryL3) {
    this.categoryL3 = categoryL3;
  }


  public ProductView categoryL4(String categoryL4) {
    this.categoryL4 = categoryL4;
    return this;
  }

  /**
   * Fourth level of the product category in [Google&#39;s product taxonomy](https://support.google.com/merchants/answer/6324436).
   * @return categoryL4
   */
  @javax.annotation.Nullable
  public String getCategoryL4() {
    return categoryL4;
  }

  public void setCategoryL4(String categoryL4) {
    this.categoryL4 = categoryL4;
  }


  public ProductView categoryL5(String categoryL5) {
    this.categoryL5 = categoryL5;
    return this;
  }

  /**
   * Fifth level of the product category in [Google&#39;s product taxonomy](https://support.google.com/merchants/answer/6324436).
   * @return categoryL5
   */
  @javax.annotation.Nullable
  public String getCategoryL5() {
    return categoryL5;
  }

  public void setCategoryL5(String categoryL5) {
    this.categoryL5 = categoryL5;
  }


  public ProductView channel(ChannelEnum channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Channel of the product (online versus local).
   * @return channel
   */
  @javax.annotation.Nullable
  public ChannelEnum getChannel() {
    return channel;
  }

  public void setChannel(ChannelEnum channel) {
    this.channel = channel;
  }


  public ProductView condition(String condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Condition of the product.
   * @return condition
   */
  @javax.annotation.Nullable
  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }


  public ProductView creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * The time the merchant created the product in timestamp seconds.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }


  public ProductView currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Product price currency code (for example, ISO 4217). Absent if product price is not available.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public ProductView expirationDate(Date expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * Get expirationDate
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public Date getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(Date expirationDate) {
    this.expirationDate = expirationDate;
  }


  public ProductView gtin(List<String> gtin) {
    this.gtin = gtin;
    return this;
  }

  public ProductView addGtinItem(String gtinItem) {
    if (this.gtin == null) {
      this.gtin = new ArrayList<>();
    }
    this.gtin.add(gtinItem);
    return this;
  }

  /**
   * GTIN of the product.
   * @return gtin
   */
  @javax.annotation.Nullable
  public List<String> getGtin() {
    return gtin;
  }

  public void setGtin(List<String> gtin) {
    this.gtin = gtin;
  }


  public ProductView id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The REST ID of the product, in the form of channel:contentLanguage:targetCountry:offerId. Content API methods that operate on products take this as their productId parameter. Should always be included in the SELECT clause.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ProductView itemGroupId(String itemGroupId) {
    this.itemGroupId = itemGroupId;
    return this;
  }

  /**
   * Item group ID provided by the merchant for grouping variants together.
   * @return itemGroupId
   */
  @javax.annotation.Nullable
  public String getItemGroupId() {
    return itemGroupId;
  }

  public void setItemGroupId(String itemGroupId) {
    this.itemGroupId = itemGroupId;
  }


  public ProductView itemIssues(List<ProductViewItemIssue> itemIssues) {
    this.itemIssues = itemIssues;
    return this;
  }

  public ProductView addItemIssuesItem(ProductViewItemIssue itemIssuesItem) {
    if (this.itemIssues == null) {
      this.itemIssues = new ArrayList<>();
    }
    this.itemIssues.add(itemIssuesItem);
    return this;
  }

  /**
   * List of item issues for the product.
   * @return itemIssues
   */
  @javax.annotation.Nullable
  public List<ProductViewItemIssue> getItemIssues() {
    return itemIssues;
  }

  public void setItemIssues(List<ProductViewItemIssue> itemIssues) {
    this.itemIssues = itemIssues;
  }


  public ProductView languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Language code of the product in BCP 47 format.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public ProductView offerId(String offerId) {
    this.offerId = offerId;
    return this;
  }

  /**
   * Merchant-provided id of the product.
   * @return offerId
   */
  @javax.annotation.Nullable
  public String getOfferId() {
    return offerId;
  }

  public void setOfferId(String offerId) {
    this.offerId = offerId;
  }


  public ProductView priceMicros(String priceMicros) {
    this.priceMicros = priceMicros;
    return this;
  }

  /**
   * Product price specified as micros (1 millionth of a standard unit, 1 USD &#x3D; 1000000 micros) in the product currency. Absent in case the information about the price of the product is not available.
   * @return priceMicros
   */
  @javax.annotation.Nullable
  public String getPriceMicros() {
    return priceMicros;
  }

  public void setPriceMicros(String priceMicros) {
    this.priceMicros = priceMicros;
  }


  public ProductView productTypeL1(String productTypeL1) {
    this.productTypeL1 = productTypeL1;
    return this;
  }

  /**
   * First level of the product type in merchant&#39;s own [product taxonomy](https://support.google.com/merchants/answer/6324436).
   * @return productTypeL1
   */
  @javax.annotation.Nullable
  public String getProductTypeL1() {
    return productTypeL1;
  }

  public void setProductTypeL1(String productTypeL1) {
    this.productTypeL1 = productTypeL1;
  }


  public ProductView productTypeL2(String productTypeL2) {
    this.productTypeL2 = productTypeL2;
    return this;
  }

  /**
   * Second level of the product type in merchant&#39;s own [product taxonomy](https://support.google.com/merchants/answer/6324436).
   * @return productTypeL2
   */
  @javax.annotation.Nullable
  public String getProductTypeL2() {
    return productTypeL2;
  }

  public void setProductTypeL2(String productTypeL2) {
    this.productTypeL2 = productTypeL2;
  }


  public ProductView productTypeL3(String productTypeL3) {
    this.productTypeL3 = productTypeL3;
    return this;
  }

  /**
   * Third level of the product type in merchant&#39;s own [product taxonomy](https://support.google.com/merchants/answer/6324436).
   * @return productTypeL3
   */
  @javax.annotation.Nullable
  public String getProductTypeL3() {
    return productTypeL3;
  }

  public void setProductTypeL3(String productTypeL3) {
    this.productTypeL3 = productTypeL3;
  }


  public ProductView productTypeL4(String productTypeL4) {
    this.productTypeL4 = productTypeL4;
    return this;
  }

  /**
   * Fourth level of the product type in merchant&#39;s own [product taxonomy](https://support.google.com/merchants/answer/6324436).
   * @return productTypeL4
   */
  @javax.annotation.Nullable
  public String getProductTypeL4() {
    return productTypeL4;
  }

  public void setProductTypeL4(String productTypeL4) {
    this.productTypeL4 = productTypeL4;
  }


  public ProductView productTypeL5(String productTypeL5) {
    this.productTypeL5 = productTypeL5;
    return this;
  }

  /**
   * Fifth level of the product type in merchant&#39;s own [product taxonomy](https://support.google.com/merchants/answer/6324436).
   * @return productTypeL5
   */
  @javax.annotation.Nullable
  public String getProductTypeL5() {
    return productTypeL5;
  }

  public void setProductTypeL5(String productTypeL5) {
    this.productTypeL5 = productTypeL5;
  }


  public ProductView shippingLabel(String shippingLabel) {
    this.shippingLabel = shippingLabel;
    return this;
  }

  /**
   * The normalized shipping label specified in the feed
   * @return shippingLabel
   */
  @javax.annotation.Nullable
  public String getShippingLabel() {
    return shippingLabel;
  }

  public void setShippingLabel(String shippingLabel) {
    this.shippingLabel = shippingLabel;
  }


  public ProductView title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the product.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductView productView = (ProductView) o;
    return Objects.equals(this.aggregatedDestinationStatus, productView.aggregatedDestinationStatus) &&
        Objects.equals(this.availability, productView.availability) &&
        Objects.equals(this.brand, productView.brand) &&
        Objects.equals(this.categoryL1, productView.categoryL1) &&
        Objects.equals(this.categoryL2, productView.categoryL2) &&
        Objects.equals(this.categoryL3, productView.categoryL3) &&
        Objects.equals(this.categoryL4, productView.categoryL4) &&
        Objects.equals(this.categoryL5, productView.categoryL5) &&
        Objects.equals(this.channel, productView.channel) &&
        Objects.equals(this.condition, productView.condition) &&
        Objects.equals(this.creationTime, productView.creationTime) &&
        Objects.equals(this.currencyCode, productView.currencyCode) &&
        Objects.equals(this.expirationDate, productView.expirationDate) &&
        Objects.equals(this.gtin, productView.gtin) &&
        Objects.equals(this.id, productView.id) &&
        Objects.equals(this.itemGroupId, productView.itemGroupId) &&
        Objects.equals(this.itemIssues, productView.itemIssues) &&
        Objects.equals(this.languageCode, productView.languageCode) &&
        Objects.equals(this.offerId, productView.offerId) &&
        Objects.equals(this.priceMicros, productView.priceMicros) &&
        Objects.equals(this.productTypeL1, productView.productTypeL1) &&
        Objects.equals(this.productTypeL2, productView.productTypeL2) &&
        Objects.equals(this.productTypeL3, productView.productTypeL3) &&
        Objects.equals(this.productTypeL4, productView.productTypeL4) &&
        Objects.equals(this.productTypeL5, productView.productTypeL5) &&
        Objects.equals(this.shippingLabel, productView.shippingLabel) &&
        Objects.equals(this.title, productView.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregatedDestinationStatus, availability, brand, categoryL1, categoryL2, categoryL3, categoryL4, categoryL5, channel, condition, creationTime, currencyCode, expirationDate, gtin, id, itemGroupId, itemIssues, languageCode, offerId, priceMicros, productTypeL1, productTypeL2, productTypeL3, productTypeL4, productTypeL5, shippingLabel, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductView {\n");
    sb.append("    aggregatedDestinationStatus: ").append(toIndentedString(aggregatedDestinationStatus)).append("\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    categoryL1: ").append(toIndentedString(categoryL1)).append("\n");
    sb.append("    categoryL2: ").append(toIndentedString(categoryL2)).append("\n");
    sb.append("    categoryL3: ").append(toIndentedString(categoryL3)).append("\n");
    sb.append("    categoryL4: ").append(toIndentedString(categoryL4)).append("\n");
    sb.append("    categoryL5: ").append(toIndentedString(categoryL5)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    gtin: ").append(toIndentedString(gtin)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    itemGroupId: ").append(toIndentedString(itemGroupId)).append("\n");
    sb.append("    itemIssues: ").append(toIndentedString(itemIssues)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    priceMicros: ").append(toIndentedString(priceMicros)).append("\n");
    sb.append("    productTypeL1: ").append(toIndentedString(productTypeL1)).append("\n");
    sb.append("    productTypeL2: ").append(toIndentedString(productTypeL2)).append("\n");
    sb.append("    productTypeL3: ").append(toIndentedString(productTypeL3)).append("\n");
    sb.append("    productTypeL4: ").append(toIndentedString(productTypeL4)).append("\n");
    sb.append("    productTypeL5: ").append(toIndentedString(productTypeL5)).append("\n");
    sb.append("    shippingLabel: ").append(toIndentedString(shippingLabel)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregatedDestinationStatus");
    openapiFields.add("availability");
    openapiFields.add("brand");
    openapiFields.add("categoryL1");
    openapiFields.add("categoryL2");
    openapiFields.add("categoryL3");
    openapiFields.add("categoryL4");
    openapiFields.add("categoryL5");
    openapiFields.add("channel");
    openapiFields.add("condition");
    openapiFields.add("creationTime");
    openapiFields.add("currencyCode");
    openapiFields.add("expirationDate");
    openapiFields.add("gtin");
    openapiFields.add("id");
    openapiFields.add("itemGroupId");
    openapiFields.add("itemIssues");
    openapiFields.add("languageCode");
    openapiFields.add("offerId");
    openapiFields.add("priceMicros");
    openapiFields.add("productTypeL1");
    openapiFields.add("productTypeL2");
    openapiFields.add("productTypeL3");
    openapiFields.add("productTypeL4");
    openapiFields.add("productTypeL5");
    openapiFields.add("shippingLabel");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductView
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductView.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductView is not found in the empty JSON string", ProductView.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductView.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductView` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aggregatedDestinationStatus") != null && !jsonObj.get("aggregatedDestinationStatus").isJsonNull()) && !jsonObj.get("aggregatedDestinationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregatedDestinationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregatedDestinationStatus").toString()));
      }
      // validate the optional field `aggregatedDestinationStatus`
      if (jsonObj.get("aggregatedDestinationStatus") != null && !jsonObj.get("aggregatedDestinationStatus").isJsonNull()) {
        AggregatedDestinationStatusEnum.validateJsonElement(jsonObj.get("aggregatedDestinationStatus"));
      }
      if ((jsonObj.get("availability") != null && !jsonObj.get("availability").isJsonNull()) && !jsonObj.get("availability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availability").toString()));
      }
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      if ((jsonObj.get("categoryL1") != null && !jsonObj.get("categoryL1").isJsonNull()) && !jsonObj.get("categoryL1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryL1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryL1").toString()));
      }
      if ((jsonObj.get("categoryL2") != null && !jsonObj.get("categoryL2").isJsonNull()) && !jsonObj.get("categoryL2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryL2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryL2").toString()));
      }
      if ((jsonObj.get("categoryL3") != null && !jsonObj.get("categoryL3").isJsonNull()) && !jsonObj.get("categoryL3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryL3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryL3").toString()));
      }
      if ((jsonObj.get("categoryL4") != null && !jsonObj.get("categoryL4").isJsonNull()) && !jsonObj.get("categoryL4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryL4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryL4").toString()));
      }
      if ((jsonObj.get("categoryL5") != null && !jsonObj.get("categoryL5").isJsonNull()) && !jsonObj.get("categoryL5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryL5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryL5").toString()));
      }
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      // validate the optional field `channel`
      if (jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) {
        ChannelEnum.validateJsonElement(jsonObj.get("channel"));
      }
      if ((jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) && !jsonObj.get("condition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition").toString()));
      }
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      // validate the optional field `expirationDate`
      if (jsonObj.get("expirationDate") != null && !jsonObj.get("expirationDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("expirationDate"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("gtin") != null && !jsonObj.get("gtin").isJsonNull() && !jsonObj.get("gtin").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gtin` to be an array in the JSON string but got `%s`", jsonObj.get("gtin").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("itemGroupId") != null && !jsonObj.get("itemGroupId").isJsonNull()) && !jsonObj.get("itemGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemGroupId").toString()));
      }
      if (jsonObj.get("itemIssues") != null && !jsonObj.get("itemIssues").isJsonNull()) {
        JsonArray jsonArrayitemIssues = jsonObj.getAsJsonArray("itemIssues");
        if (jsonArrayitemIssues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("itemIssues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `itemIssues` to be an array in the JSON string but got `%s`", jsonObj.get("itemIssues").toString()));
          }

          // validate the optional field `itemIssues` (array)
          for (int i = 0; i < jsonArrayitemIssues.size(); i++) {
            ProductViewItemIssue.validateJsonElement(jsonArrayitemIssues.get(i));
          };
        }
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if ((jsonObj.get("offerId") != null && !jsonObj.get("offerId").isJsonNull()) && !jsonObj.get("offerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerId").toString()));
      }
      if ((jsonObj.get("priceMicros") != null && !jsonObj.get("priceMicros").isJsonNull()) && !jsonObj.get("priceMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceMicros").toString()));
      }
      if ((jsonObj.get("productTypeL1") != null && !jsonObj.get("productTypeL1").isJsonNull()) && !jsonObj.get("productTypeL1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productTypeL1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productTypeL1").toString()));
      }
      if ((jsonObj.get("productTypeL2") != null && !jsonObj.get("productTypeL2").isJsonNull()) && !jsonObj.get("productTypeL2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productTypeL2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productTypeL2").toString()));
      }
      if ((jsonObj.get("productTypeL3") != null && !jsonObj.get("productTypeL3").isJsonNull()) && !jsonObj.get("productTypeL3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productTypeL3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productTypeL3").toString()));
      }
      if ((jsonObj.get("productTypeL4") != null && !jsonObj.get("productTypeL4").isJsonNull()) && !jsonObj.get("productTypeL4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productTypeL4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productTypeL4").toString()));
      }
      if ((jsonObj.get("productTypeL5") != null && !jsonObj.get("productTypeL5").isJsonNull()) && !jsonObj.get("productTypeL5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productTypeL5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productTypeL5").toString()));
      }
      if ((jsonObj.get("shippingLabel") != null && !jsonObj.get("shippingLabel").isJsonNull()) && !jsonObj.get("shippingLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingLabel").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductView.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductView' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductView> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductView.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductView>() {
           @Override
           public void write(JsonWriter out, ProductView value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductView read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductView given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductView
   * @throws IOException if the JSON string is invalid with respect to ProductView
   */
  public static ProductView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductView.class);
  }

  /**
   * Convert an instance of ProductView to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

