/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Fields related to the [Best sellers reports](https://support.google.com/merchants/answer/9488679).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BestSellers {
  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_PREVIOUS_RANK = "previousRank";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_RANK)
  private String previousRank;

  /**
   * Estimated demand in relation to the item with the highest popularity rank in the same category and country in the previous week or month.
   */
  @JsonAdapter(PreviousRelativeDemandEnum.Adapter.class)
  public enum PreviousRelativeDemandEnum {
    RELATIVE_DEMAND_UNSPECIFIED("RELATIVE_DEMAND_UNSPECIFIED"),
    
    VERY_LOW("VERY_LOW"),
    
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH"),
    
    VERY_HIGH("VERY_HIGH");

    private String value;

    PreviousRelativeDemandEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PreviousRelativeDemandEnum fromValue(String value) {
      for (PreviousRelativeDemandEnum b : PreviousRelativeDemandEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PreviousRelativeDemandEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PreviousRelativeDemandEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PreviousRelativeDemandEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PreviousRelativeDemandEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PreviousRelativeDemandEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PREVIOUS_RELATIVE_DEMAND = "previousRelativeDemand";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_RELATIVE_DEMAND)
  private PreviousRelativeDemandEnum previousRelativeDemand;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private String rank;

  /**
   * Estimated demand in relation to the item with the highest popularity rank in the same category and country.
   */
  @JsonAdapter(RelativeDemandEnum.Adapter.class)
  public enum RelativeDemandEnum {
    RELATIVE_DEMAND_UNSPECIFIED("RELATIVE_DEMAND_UNSPECIFIED"),
    
    VERY_LOW("VERY_LOW"),
    
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH"),
    
    VERY_HIGH("VERY_HIGH");

    private String value;

    RelativeDemandEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelativeDemandEnum fromValue(String value) {
      for (RelativeDemandEnum b : RelativeDemandEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelativeDemandEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelativeDemandEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelativeDemandEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelativeDemandEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelativeDemandEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATIVE_DEMAND = "relativeDemand";
  @SerializedName(SERIALIZED_NAME_RELATIVE_DEMAND)
  private RelativeDemandEnum relativeDemand;

  /**
   * Change in the estimated demand. Whether it rose, sank or remained flat.
   */
  @JsonAdapter(RelativeDemandChangeEnum.Adapter.class)
  public enum RelativeDemandChangeEnum {
    RELATIVE_DEMAND_CHANGE_TYPE_UNSPECIFIED("RELATIVE_DEMAND_CHANGE_TYPE_UNSPECIFIED"),
    
    SINKER("SINKER"),
    
    FLAT("FLAT"),
    
    RISER("RISER");

    private String value;

    RelativeDemandChangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelativeDemandChangeEnum fromValue(String value) {
      for (RelativeDemandChangeEnum b : RelativeDemandChangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelativeDemandChangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelativeDemandChangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelativeDemandChangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelativeDemandChangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelativeDemandChangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATIVE_DEMAND_CHANGE = "relativeDemandChange";
  @SerializedName(SERIALIZED_NAME_RELATIVE_DEMAND_CHANGE)
  private RelativeDemandChangeEnum relativeDemandChange;

  public static final String SERIALIZED_NAME_REPORT_DATE = "reportDate";
  @SerializedName(SERIALIZED_NAME_REPORT_DATE)
  private Date reportDate;

  /**
   * Granularity of the report. The ranking can be done over a week or a month timeframe. A &#x60;WHERE&#x60; condition on &#x60;best_sellers.report_granularity&#x60; is required in the query.
   */
  @JsonAdapter(ReportGranularityEnum.Adapter.class)
  public enum ReportGranularityEnum {
    REPORT_GRANULARITY_UNSPECIFIED("REPORT_GRANULARITY_UNSPECIFIED"),
    
    WEEKLY("WEEKLY"),
    
    MONTHLY("MONTHLY");

    private String value;

    ReportGranularityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReportGranularityEnum fromValue(String value) {
      for (ReportGranularityEnum b : ReportGranularityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReportGranularityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReportGranularityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReportGranularityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReportGranularityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReportGranularityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPORT_GRANULARITY = "reportGranularity";
  @SerializedName(SERIALIZED_NAME_REPORT_GRANULARITY)
  private ReportGranularityEnum reportGranularity;

  public BestSellers() {
  }

  public BestSellers categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * Google product category ID to calculate the ranking for, represented in [Google&#39;s product taxonomy](https://support.google.com/merchants/answer/6324436). If a &#x60;WHERE&#x60; condition on &#x60;best_sellers.category_id&#x60; is not specified in the query, rankings for all top-level categories are returned.
   * @return categoryId
   */
  @javax.annotation.Nullable
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public BestSellers countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Country where the ranking is calculated. A &#x60;WHERE&#x60; condition on &#x60;best_sellers.country_code&#x60; is required in the query.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public BestSellers previousRank(String previousRank) {
    this.previousRank = previousRank;
    return this;
  }

  /**
   * Popularity rank in the previous week or month.
   * @return previousRank
   */
  @javax.annotation.Nullable
  public String getPreviousRank() {
    return previousRank;
  }

  public void setPreviousRank(String previousRank) {
    this.previousRank = previousRank;
  }


  public BestSellers previousRelativeDemand(PreviousRelativeDemandEnum previousRelativeDemand) {
    this.previousRelativeDemand = previousRelativeDemand;
    return this;
  }

  /**
   * Estimated demand in relation to the item with the highest popularity rank in the same category and country in the previous week or month.
   * @return previousRelativeDemand
   */
  @javax.annotation.Nullable
  public PreviousRelativeDemandEnum getPreviousRelativeDemand() {
    return previousRelativeDemand;
  }

  public void setPreviousRelativeDemand(PreviousRelativeDemandEnum previousRelativeDemand) {
    this.previousRelativeDemand = previousRelativeDemand;
  }


  public BestSellers rank(String rank) {
    this.rank = rank;
    return this;
  }

  /**
   * Popularity on Shopping ads and free listings, in the selected category and country, based on the estimated number of units sold.
   * @return rank
   */
  @javax.annotation.Nullable
  public String getRank() {
    return rank;
  }

  public void setRank(String rank) {
    this.rank = rank;
  }


  public BestSellers relativeDemand(RelativeDemandEnum relativeDemand) {
    this.relativeDemand = relativeDemand;
    return this;
  }

  /**
   * Estimated demand in relation to the item with the highest popularity rank in the same category and country.
   * @return relativeDemand
   */
  @javax.annotation.Nullable
  public RelativeDemandEnum getRelativeDemand() {
    return relativeDemand;
  }

  public void setRelativeDemand(RelativeDemandEnum relativeDemand) {
    this.relativeDemand = relativeDemand;
  }


  public BestSellers relativeDemandChange(RelativeDemandChangeEnum relativeDemandChange) {
    this.relativeDemandChange = relativeDemandChange;
    return this;
  }

  /**
   * Change in the estimated demand. Whether it rose, sank or remained flat.
   * @return relativeDemandChange
   */
  @javax.annotation.Nullable
  public RelativeDemandChangeEnum getRelativeDemandChange() {
    return relativeDemandChange;
  }

  public void setRelativeDemandChange(RelativeDemandChangeEnum relativeDemandChange) {
    this.relativeDemandChange = relativeDemandChange;
  }


  public BestSellers reportDate(Date reportDate) {
    this.reportDate = reportDate;
    return this;
  }

  /**
   * Get reportDate
   * @return reportDate
   */
  @javax.annotation.Nullable
  public Date getReportDate() {
    return reportDate;
  }

  public void setReportDate(Date reportDate) {
    this.reportDate = reportDate;
  }


  public BestSellers reportGranularity(ReportGranularityEnum reportGranularity) {
    this.reportGranularity = reportGranularity;
    return this;
  }

  /**
   * Granularity of the report. The ranking can be done over a week or a month timeframe. A &#x60;WHERE&#x60; condition on &#x60;best_sellers.report_granularity&#x60; is required in the query.
   * @return reportGranularity
   */
  @javax.annotation.Nullable
  public ReportGranularityEnum getReportGranularity() {
    return reportGranularity;
  }

  public void setReportGranularity(ReportGranularityEnum reportGranularity) {
    this.reportGranularity = reportGranularity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BestSellers bestSellers = (BestSellers) o;
    return Objects.equals(this.categoryId, bestSellers.categoryId) &&
        Objects.equals(this.countryCode, bestSellers.countryCode) &&
        Objects.equals(this.previousRank, bestSellers.previousRank) &&
        Objects.equals(this.previousRelativeDemand, bestSellers.previousRelativeDemand) &&
        Objects.equals(this.rank, bestSellers.rank) &&
        Objects.equals(this.relativeDemand, bestSellers.relativeDemand) &&
        Objects.equals(this.relativeDemandChange, bestSellers.relativeDemandChange) &&
        Objects.equals(this.reportDate, bestSellers.reportDate) &&
        Objects.equals(this.reportGranularity, bestSellers.reportGranularity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryId, countryCode, previousRank, previousRelativeDemand, rank, relativeDemand, relativeDemandChange, reportDate, reportGranularity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BestSellers {\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    previousRank: ").append(toIndentedString(previousRank)).append("\n");
    sb.append("    previousRelativeDemand: ").append(toIndentedString(previousRelativeDemand)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    relativeDemand: ").append(toIndentedString(relativeDemand)).append("\n");
    sb.append("    relativeDemandChange: ").append(toIndentedString(relativeDemandChange)).append("\n");
    sb.append("    reportDate: ").append(toIndentedString(reportDate)).append("\n");
    sb.append("    reportGranularity: ").append(toIndentedString(reportGranularity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryId");
    openapiFields.add("countryCode");
    openapiFields.add("previousRank");
    openapiFields.add("previousRelativeDemand");
    openapiFields.add("rank");
    openapiFields.add("relativeDemand");
    openapiFields.add("relativeDemandChange");
    openapiFields.add("reportDate");
    openapiFields.add("reportGranularity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BestSellers
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BestSellers.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BestSellers is not found in the empty JSON string", BestSellers.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BestSellers.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BestSellers` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull()) && !jsonObj.get("categoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("previousRank") != null && !jsonObj.get("previousRank").isJsonNull()) && !jsonObj.get("previousRank").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousRank` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previousRank").toString()));
      }
      if ((jsonObj.get("previousRelativeDemand") != null && !jsonObj.get("previousRelativeDemand").isJsonNull()) && !jsonObj.get("previousRelativeDemand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousRelativeDemand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previousRelativeDemand").toString()));
      }
      // validate the optional field `previousRelativeDemand`
      if (jsonObj.get("previousRelativeDemand") != null && !jsonObj.get("previousRelativeDemand").isJsonNull()) {
        PreviousRelativeDemandEnum.validateJsonElement(jsonObj.get("previousRelativeDemand"));
      }
      if ((jsonObj.get("rank") != null && !jsonObj.get("rank").isJsonNull()) && !jsonObj.get("rank").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rank` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rank").toString()));
      }
      if ((jsonObj.get("relativeDemand") != null && !jsonObj.get("relativeDemand").isJsonNull()) && !jsonObj.get("relativeDemand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relativeDemand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relativeDemand").toString()));
      }
      // validate the optional field `relativeDemand`
      if (jsonObj.get("relativeDemand") != null && !jsonObj.get("relativeDemand").isJsonNull()) {
        RelativeDemandEnum.validateJsonElement(jsonObj.get("relativeDemand"));
      }
      if ((jsonObj.get("relativeDemandChange") != null && !jsonObj.get("relativeDemandChange").isJsonNull()) && !jsonObj.get("relativeDemandChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relativeDemandChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relativeDemandChange").toString()));
      }
      // validate the optional field `relativeDemandChange`
      if (jsonObj.get("relativeDemandChange") != null && !jsonObj.get("relativeDemandChange").isJsonNull()) {
        RelativeDemandChangeEnum.validateJsonElement(jsonObj.get("relativeDemandChange"));
      }
      // validate the optional field `reportDate`
      if (jsonObj.get("reportDate") != null && !jsonObj.get("reportDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("reportDate"));
      }
      if ((jsonObj.get("reportGranularity") != null && !jsonObj.get("reportGranularity").isJsonNull()) && !jsonObj.get("reportGranularity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportGranularity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportGranularity").toString()));
      }
      // validate the optional field `reportGranularity`
      if (jsonObj.get("reportGranularity") != null && !jsonObj.get("reportGranularity").isJsonNull()) {
        ReportGranularityEnum.validateJsonElement(jsonObj.get("reportGranularity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BestSellers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BestSellers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BestSellers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BestSellers.class));

       return (TypeAdapter<T>) new TypeAdapter<BestSellers>() {
           @Override
           public void write(JsonWriter out, BestSellers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BestSellers read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BestSellers given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BestSellers
   * @throws IOException if the JSON string is invalid with respect to BestSellers
   */
  public static BestSellers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BestSellers.class);
  }

  /**
   * Convert an instance of BestSellers to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

