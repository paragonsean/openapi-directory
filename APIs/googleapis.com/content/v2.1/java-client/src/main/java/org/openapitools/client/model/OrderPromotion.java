/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderPromotionItem;
import org.openapitools.client.model.Price;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderPromotion
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderPromotion {
  public static final String SERIALIZED_NAME_APPLICABLE_ITEMS = "applicableItems";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_ITEMS)
  private List<OrderPromotionItem> applicableItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_APPLIED_ITEMS = "appliedItems";
  @SerializedName(SERIALIZED_NAME_APPLIED_ITEMS)
  private List<OrderPromotionItem> appliedItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_FUNDER = "funder";
  @SerializedName(SERIALIZED_NAME_FUNDER)
  private String funder;

  public static final String SERIALIZED_NAME_MERCHANT_PROMOTION_ID = "merchantPromotionId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_PROMOTION_ID)
  private String merchantPromotionId;

  public static final String SERIALIZED_NAME_PRICE_VALUE = "priceValue";
  @SerializedName(SERIALIZED_NAME_PRICE_VALUE)
  private Price priceValue;

  public static final String SERIALIZED_NAME_SHORT_TITLE = "shortTitle";
  @SerializedName(SERIALIZED_NAME_SHORT_TITLE)
  private String shortTitle;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_SUBTYPE = "subtype";
  @SerializedName(SERIALIZED_NAME_SUBTYPE)
  private String subtype;

  public static final String SERIALIZED_NAME_TAX_VALUE = "taxValue";
  @SerializedName(SERIALIZED_NAME_TAX_VALUE)
  private Price taxValue;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public OrderPromotion() {
  }

  public OrderPromotion applicableItems(List<OrderPromotionItem> applicableItems) {
    this.applicableItems = applicableItems;
    return this;
  }

  public OrderPromotion addApplicableItemsItem(OrderPromotionItem applicableItemsItem) {
    if (this.applicableItems == null) {
      this.applicableItems = new ArrayList<>();
    }
    this.applicableItems.add(applicableItemsItem);
    return this;
  }

  /**
   * Items that this promotion may be applied to. If empty, there are no restrictions on applicable items and quantity. This field will also be empty for shipping promotions because shipping is not tied to any specific item.
   * @return applicableItems
   */
  @javax.annotation.Nullable
  public List<OrderPromotionItem> getApplicableItems() {
    return applicableItems;
  }

  public void setApplicableItems(List<OrderPromotionItem> applicableItems) {
    this.applicableItems = applicableItems;
  }


  public OrderPromotion appliedItems(List<OrderPromotionItem> appliedItems) {
    this.appliedItems = appliedItems;
    return this;
  }

  public OrderPromotion addAppliedItemsItem(OrderPromotionItem appliedItemsItem) {
    if (this.appliedItems == null) {
      this.appliedItems = new ArrayList<>();
    }
    this.appliedItems.add(appliedItemsItem);
    return this;
  }

  /**
   * Items that this promotion have been applied to. Do not provide for &#x60;orders.createtestorder&#x60;. This field will be empty for shipping promotions because shipping is not tied to any specific item.
   * @return appliedItems
   */
  @javax.annotation.Nullable
  public List<OrderPromotionItem> getAppliedItems() {
    return appliedItems;
  }

  public void setAppliedItems(List<OrderPromotionItem> appliedItems) {
    this.appliedItems = appliedItems;
  }


  public OrderPromotion endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Promotion end time in ISO 8601 format. Date, time, and offset required, for example, \&quot;2020-01-02T09:00:00+01:00\&quot; or \&quot;2020-01-02T09:00:00Z\&quot;.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public OrderPromotion funder(String funder) {
    this.funder = funder;
    return this;
  }

  /**
   * Required. The party funding the promotion. Only &#x60;merchant&#x60; is supported for &#x60;orders.createtestorder&#x60;. Acceptable values are: - \&quot;&#x60;google&#x60;\&quot; - \&quot;&#x60;merchant&#x60;\&quot; 
   * @return funder
   */
  @javax.annotation.Nullable
  public String getFunder() {
    return funder;
  }

  public void setFunder(String funder) {
    this.funder = funder;
  }


  public OrderPromotion merchantPromotionId(String merchantPromotionId) {
    this.merchantPromotionId = merchantPromotionId;
    return this;
  }

  /**
   * Required. This field is used to identify promotions within merchants&#39; own systems.
   * @return merchantPromotionId
   */
  @javax.annotation.Nullable
  public String getMerchantPromotionId() {
    return merchantPromotionId;
  }

  public void setMerchantPromotionId(String merchantPromotionId) {
    this.merchantPromotionId = merchantPromotionId;
  }


  public OrderPromotion priceValue(Price priceValue) {
    this.priceValue = priceValue;
    return this;
  }

  /**
   * Get priceValue
   * @return priceValue
   */
  @javax.annotation.Nullable
  public Price getPriceValue() {
    return priceValue;
  }

  public void setPriceValue(Price priceValue) {
    this.priceValue = priceValue;
  }


  public OrderPromotion shortTitle(String shortTitle) {
    this.shortTitle = shortTitle;
    return this;
  }

  /**
   * A short title of the promotion to be shown on the checkout page. Do not provide for &#x60;orders.createtestorder&#x60;.
   * @return shortTitle
   */
  @javax.annotation.Nullable
  public String getShortTitle() {
    return shortTitle;
  }

  public void setShortTitle(String shortTitle) {
    this.shortTitle = shortTitle;
  }


  public OrderPromotion startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Promotion start time in ISO 8601 format. Date, time, and offset required, for example, \&quot;2020-01-02T09:00:00+01:00\&quot; or \&quot;2020-01-02T09:00:00Z\&quot;.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public OrderPromotion subtype(String subtype) {
    this.subtype = subtype;
    return this;
  }

  /**
   * Required. The category of the promotion. Only &#x60;moneyOff&#x60; is supported for &#x60;orders.createtestorder&#x60;. Acceptable values are: - \&quot;&#x60;buyMGetMoneyOff&#x60;\&quot; - \&quot;&#x60;buyMGetNMoneyOff&#x60;\&quot; - \&quot;&#x60;buyMGetNPercentOff&#x60;\&quot; - \&quot;&#x60;buyMGetPercentOff&#x60;\&quot; - \&quot;&#x60;freeGift&#x60;\&quot; - \&quot;&#x60;freeGiftWithItemId&#x60;\&quot; - \&quot;&#x60;freeGiftWithValue&#x60;\&quot; - \&quot;&#x60;freeShippingOvernight&#x60;\&quot; - \&quot;&#x60;freeShippingStandard&#x60;\&quot; - \&quot;&#x60;freeShippingTwoDay&#x60;\&quot; - \&quot;&#x60;moneyOff&#x60;\&quot; - \&quot;&#x60;percentOff&#x60;\&quot; - \&quot;&#x60;rewardPoints&#x60;\&quot; - \&quot;&#x60;salePrice&#x60;\&quot; 
   * @return subtype
   */
  @javax.annotation.Nullable
  public String getSubtype() {
    return subtype;
  }

  public void setSubtype(String subtype) {
    this.subtype = subtype;
  }


  public OrderPromotion taxValue(Price taxValue) {
    this.taxValue = taxValue;
    return this;
  }

  /**
   * Get taxValue
   * @return taxValue
   */
  @javax.annotation.Nullable
  public Price getTaxValue() {
    return taxValue;
  }

  public void setTaxValue(Price taxValue) {
    this.taxValue = taxValue;
  }


  public OrderPromotion title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Required. The title of the promotion.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public OrderPromotion type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Required. The scope of the promotion. Only &#x60;product&#x60; is supported for &#x60;orders.createtestorder&#x60;. Acceptable values are: - \&quot;&#x60;product&#x60;\&quot; - \&quot;&#x60;shipping&#x60;\&quot; 
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderPromotion orderPromotion = (OrderPromotion) o;
    return Objects.equals(this.applicableItems, orderPromotion.applicableItems) &&
        Objects.equals(this.appliedItems, orderPromotion.appliedItems) &&
        Objects.equals(this.endTime, orderPromotion.endTime) &&
        Objects.equals(this.funder, orderPromotion.funder) &&
        Objects.equals(this.merchantPromotionId, orderPromotion.merchantPromotionId) &&
        Objects.equals(this.priceValue, orderPromotion.priceValue) &&
        Objects.equals(this.shortTitle, orderPromotion.shortTitle) &&
        Objects.equals(this.startTime, orderPromotion.startTime) &&
        Objects.equals(this.subtype, orderPromotion.subtype) &&
        Objects.equals(this.taxValue, orderPromotion.taxValue) &&
        Objects.equals(this.title, orderPromotion.title) &&
        Objects.equals(this.type, orderPromotion.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicableItems, appliedItems, endTime, funder, merchantPromotionId, priceValue, shortTitle, startTime, subtype, taxValue, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderPromotion {\n");
    sb.append("    applicableItems: ").append(toIndentedString(applicableItems)).append("\n");
    sb.append("    appliedItems: ").append(toIndentedString(appliedItems)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    funder: ").append(toIndentedString(funder)).append("\n");
    sb.append("    merchantPromotionId: ").append(toIndentedString(merchantPromotionId)).append("\n");
    sb.append("    priceValue: ").append(toIndentedString(priceValue)).append("\n");
    sb.append("    shortTitle: ").append(toIndentedString(shortTitle)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    subtype: ").append(toIndentedString(subtype)).append("\n");
    sb.append("    taxValue: ").append(toIndentedString(taxValue)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicableItems");
    openapiFields.add("appliedItems");
    openapiFields.add("endTime");
    openapiFields.add("funder");
    openapiFields.add("merchantPromotionId");
    openapiFields.add("priceValue");
    openapiFields.add("shortTitle");
    openapiFields.add("startTime");
    openapiFields.add("subtype");
    openapiFields.add("taxValue");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderPromotion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderPromotion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderPromotion is not found in the empty JSON string", OrderPromotion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderPromotion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderPromotion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("applicableItems") != null && !jsonObj.get("applicableItems").isJsonNull()) {
        JsonArray jsonArrayapplicableItems = jsonObj.getAsJsonArray("applicableItems");
        if (jsonArrayapplicableItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applicableItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applicableItems` to be an array in the JSON string but got `%s`", jsonObj.get("applicableItems").toString()));
          }

          // validate the optional field `applicableItems` (array)
          for (int i = 0; i < jsonArrayapplicableItems.size(); i++) {
            OrderPromotionItem.validateJsonElement(jsonArrayapplicableItems.get(i));
          };
        }
      }
      if (jsonObj.get("appliedItems") != null && !jsonObj.get("appliedItems").isJsonNull()) {
        JsonArray jsonArrayappliedItems = jsonObj.getAsJsonArray("appliedItems");
        if (jsonArrayappliedItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appliedItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appliedItems` to be an array in the JSON string but got `%s`", jsonObj.get("appliedItems").toString()));
          }

          // validate the optional field `appliedItems` (array)
          for (int i = 0; i < jsonArrayappliedItems.size(); i++) {
            OrderPromotionItem.validateJsonElement(jsonArrayappliedItems.get(i));
          };
        }
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("funder") != null && !jsonObj.get("funder").isJsonNull()) && !jsonObj.get("funder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funder").toString()));
      }
      if ((jsonObj.get("merchantPromotionId") != null && !jsonObj.get("merchantPromotionId").isJsonNull()) && !jsonObj.get("merchantPromotionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantPromotionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantPromotionId").toString()));
      }
      // validate the optional field `priceValue`
      if (jsonObj.get("priceValue") != null && !jsonObj.get("priceValue").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("priceValue"));
      }
      if ((jsonObj.get("shortTitle") != null && !jsonObj.get("shortTitle").isJsonNull()) && !jsonObj.get("shortTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortTitle").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("subtype") != null && !jsonObj.get("subtype").isJsonNull()) && !jsonObj.get("subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtype").toString()));
      }
      // validate the optional field `taxValue`
      if (jsonObj.get("taxValue") != null && !jsonObj.get("taxValue").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("taxValue"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderPromotion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderPromotion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderPromotion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderPromotion.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderPromotion>() {
           @Override
           public void write(JsonWriter out, OrderPromotion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderPromotion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderPromotion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderPromotion
   * @throws IOException if the JSON string is invalid with respect to OrderPromotion
   */
  public static OrderPromotion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderPromotion.class);
  }

  /**
   * Convert an instance of OrderPromotion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

