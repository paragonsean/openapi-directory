/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MonetaryAmount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReturnPricingInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReturnPricingInfo {
  public static final String SERIALIZED_NAME_CHARGE_RETURN_SHIPPING_FEE = "chargeReturnShippingFee";
  @SerializedName(SERIALIZED_NAME_CHARGE_RETURN_SHIPPING_FEE)
  private Boolean chargeReturnShippingFee;

  public static final String SERIALIZED_NAME_MAX_RETURN_SHIPPING_FEE = "maxReturnShippingFee";
  @SerializedName(SERIALIZED_NAME_MAX_RETURN_SHIPPING_FEE)
  private MonetaryAmount maxReturnShippingFee;

  public static final String SERIALIZED_NAME_REFUNDABLE_ITEMS_TOTAL_AMOUNT = "refundableItemsTotalAmount";
  @SerializedName(SERIALIZED_NAME_REFUNDABLE_ITEMS_TOTAL_AMOUNT)
  private MonetaryAmount refundableItemsTotalAmount;

  public static final String SERIALIZED_NAME_REFUNDABLE_SHIPPING_AMOUNT = "refundableShippingAmount";
  @SerializedName(SERIALIZED_NAME_REFUNDABLE_SHIPPING_AMOUNT)
  private MonetaryAmount refundableShippingAmount;

  public static final String SERIALIZED_NAME_TOTAL_REFUNDED_AMOUNT = "totalRefundedAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_REFUNDED_AMOUNT)
  private MonetaryAmount totalRefundedAmount;

  public ReturnPricingInfo() {
  }

  public ReturnPricingInfo chargeReturnShippingFee(Boolean chargeReturnShippingFee) {
    this.chargeReturnShippingFee = chargeReturnShippingFee;
    return this;
  }

  /**
   * Default option for whether merchant should charge the customer for return shipping costs, based on customer selected return reason and merchant&#39;s return policy for the items being returned.
   * @return chargeReturnShippingFee
   */
  @javax.annotation.Nullable
  public Boolean getChargeReturnShippingFee() {
    return chargeReturnShippingFee;
  }

  public void setChargeReturnShippingFee(Boolean chargeReturnShippingFee) {
    this.chargeReturnShippingFee = chargeReturnShippingFee;
  }


  public ReturnPricingInfo maxReturnShippingFee(MonetaryAmount maxReturnShippingFee) {
    this.maxReturnShippingFee = maxReturnShippingFee;
    return this;
  }

  /**
   * Get maxReturnShippingFee
   * @return maxReturnShippingFee
   */
  @javax.annotation.Nullable
  public MonetaryAmount getMaxReturnShippingFee() {
    return maxReturnShippingFee;
  }

  public void setMaxReturnShippingFee(MonetaryAmount maxReturnShippingFee) {
    this.maxReturnShippingFee = maxReturnShippingFee;
  }


  public ReturnPricingInfo refundableItemsTotalAmount(MonetaryAmount refundableItemsTotalAmount) {
    this.refundableItemsTotalAmount = refundableItemsTotalAmount;
    return this;
  }

  /**
   * Get refundableItemsTotalAmount
   * @return refundableItemsTotalAmount
   */
  @javax.annotation.Nullable
  public MonetaryAmount getRefundableItemsTotalAmount() {
    return refundableItemsTotalAmount;
  }

  public void setRefundableItemsTotalAmount(MonetaryAmount refundableItemsTotalAmount) {
    this.refundableItemsTotalAmount = refundableItemsTotalAmount;
  }


  public ReturnPricingInfo refundableShippingAmount(MonetaryAmount refundableShippingAmount) {
    this.refundableShippingAmount = refundableShippingAmount;
    return this;
  }

  /**
   * Get refundableShippingAmount
   * @return refundableShippingAmount
   */
  @javax.annotation.Nullable
  public MonetaryAmount getRefundableShippingAmount() {
    return refundableShippingAmount;
  }

  public void setRefundableShippingAmount(MonetaryAmount refundableShippingAmount) {
    this.refundableShippingAmount = refundableShippingAmount;
  }


  public ReturnPricingInfo totalRefundedAmount(MonetaryAmount totalRefundedAmount) {
    this.totalRefundedAmount = totalRefundedAmount;
    return this;
  }

  /**
   * Get totalRefundedAmount
   * @return totalRefundedAmount
   */
  @javax.annotation.Nullable
  public MonetaryAmount getTotalRefundedAmount() {
    return totalRefundedAmount;
  }

  public void setTotalRefundedAmount(MonetaryAmount totalRefundedAmount) {
    this.totalRefundedAmount = totalRefundedAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReturnPricingInfo returnPricingInfo = (ReturnPricingInfo) o;
    return Objects.equals(this.chargeReturnShippingFee, returnPricingInfo.chargeReturnShippingFee) &&
        Objects.equals(this.maxReturnShippingFee, returnPricingInfo.maxReturnShippingFee) &&
        Objects.equals(this.refundableItemsTotalAmount, returnPricingInfo.refundableItemsTotalAmount) &&
        Objects.equals(this.refundableShippingAmount, returnPricingInfo.refundableShippingAmount) &&
        Objects.equals(this.totalRefundedAmount, returnPricingInfo.totalRefundedAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chargeReturnShippingFee, maxReturnShippingFee, refundableItemsTotalAmount, refundableShippingAmount, totalRefundedAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReturnPricingInfo {\n");
    sb.append("    chargeReturnShippingFee: ").append(toIndentedString(chargeReturnShippingFee)).append("\n");
    sb.append("    maxReturnShippingFee: ").append(toIndentedString(maxReturnShippingFee)).append("\n");
    sb.append("    refundableItemsTotalAmount: ").append(toIndentedString(refundableItemsTotalAmount)).append("\n");
    sb.append("    refundableShippingAmount: ").append(toIndentedString(refundableShippingAmount)).append("\n");
    sb.append("    totalRefundedAmount: ").append(toIndentedString(totalRefundedAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chargeReturnShippingFee");
    openapiFields.add("maxReturnShippingFee");
    openapiFields.add("refundableItemsTotalAmount");
    openapiFields.add("refundableShippingAmount");
    openapiFields.add("totalRefundedAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReturnPricingInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReturnPricingInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReturnPricingInfo is not found in the empty JSON string", ReturnPricingInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReturnPricingInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReturnPricingInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `maxReturnShippingFee`
      if (jsonObj.get("maxReturnShippingFee") != null && !jsonObj.get("maxReturnShippingFee").isJsonNull()) {
        MonetaryAmount.validateJsonElement(jsonObj.get("maxReturnShippingFee"));
      }
      // validate the optional field `refundableItemsTotalAmount`
      if (jsonObj.get("refundableItemsTotalAmount") != null && !jsonObj.get("refundableItemsTotalAmount").isJsonNull()) {
        MonetaryAmount.validateJsonElement(jsonObj.get("refundableItemsTotalAmount"));
      }
      // validate the optional field `refundableShippingAmount`
      if (jsonObj.get("refundableShippingAmount") != null && !jsonObj.get("refundableShippingAmount").isJsonNull()) {
        MonetaryAmount.validateJsonElement(jsonObj.get("refundableShippingAmount"));
      }
      // validate the optional field `totalRefundedAmount`
      if (jsonObj.get("totalRefundedAmount") != null && !jsonObj.get("totalRefundedAmount").isJsonNull()) {
        MonetaryAmount.validateJsonElement(jsonObj.get("totalRefundedAmount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReturnPricingInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReturnPricingInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReturnPricingInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReturnPricingInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ReturnPricingInfo>() {
           @Override
           public void write(JsonWriter out, ReturnPricingInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReturnPricingInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReturnPricingInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReturnPricingInfo
   * @throws IOException if the JSON string is invalid with respect to ReturnPricingInfo
   */
  public static ReturnPricingInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReturnPricingInfo.class);
  }

  /**
   * Convert an instance of ReturnPricingInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

