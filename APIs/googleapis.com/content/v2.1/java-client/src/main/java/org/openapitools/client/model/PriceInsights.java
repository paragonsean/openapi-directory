/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Price insights fields requested by the merchant in the query. Field values are only set if the merchant queries &#x60;PriceInsightsProductView&#x60;. https://support.google.com/merchants/answer/11916926
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PriceInsights {
  public static final String SERIALIZED_NAME_PREDICTED_CLICKS_CHANGE_FRACTION = "predictedClicksChangeFraction";
  @SerializedName(SERIALIZED_NAME_PREDICTED_CLICKS_CHANGE_FRACTION)
  private Double predictedClicksChangeFraction;

  public static final String SERIALIZED_NAME_PREDICTED_CONVERSIONS_CHANGE_FRACTION = "predictedConversionsChangeFraction";
  @SerializedName(SERIALIZED_NAME_PREDICTED_CONVERSIONS_CHANGE_FRACTION)
  private Double predictedConversionsChangeFraction;

  public static final String SERIALIZED_NAME_PREDICTED_GROSS_PROFIT_CHANGE_FRACTION = "predictedGrossProfitChangeFraction";
  @SerializedName(SERIALIZED_NAME_PREDICTED_GROSS_PROFIT_CHANGE_FRACTION)
  private Double predictedGrossProfitChangeFraction;

  public static final String SERIALIZED_NAME_PREDICTED_IMPRESSIONS_CHANGE_FRACTION = "predictedImpressionsChangeFraction";
  @SerializedName(SERIALIZED_NAME_PREDICTED_IMPRESSIONS_CHANGE_FRACTION)
  private Double predictedImpressionsChangeFraction;

  public static final String SERIALIZED_NAME_PREDICTED_MONTHLY_GROSS_PROFIT_CHANGE_CURRENCY_CODE = "predictedMonthlyGrossProfitChangeCurrencyCode";
  @SerializedName(SERIALIZED_NAME_PREDICTED_MONTHLY_GROSS_PROFIT_CHANGE_CURRENCY_CODE)
  private String predictedMonthlyGrossProfitChangeCurrencyCode;

  public static final String SERIALIZED_NAME_PREDICTED_MONTHLY_GROSS_PROFIT_CHANGE_MICROS = "predictedMonthlyGrossProfitChangeMicros";
  @SerializedName(SERIALIZED_NAME_PREDICTED_MONTHLY_GROSS_PROFIT_CHANGE_MICROS)
  private String predictedMonthlyGrossProfitChangeMicros;

  public static final String SERIALIZED_NAME_SUGGESTED_PRICE_CURRENCY_CODE = "suggestedPriceCurrencyCode";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_PRICE_CURRENCY_CODE)
  private String suggestedPriceCurrencyCode;

  public static final String SERIALIZED_NAME_SUGGESTED_PRICE_MICROS = "suggestedPriceMicros";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_PRICE_MICROS)
  private String suggestedPriceMicros;

  public PriceInsights() {
  }

  public PriceInsights predictedClicksChangeFraction(Double predictedClicksChangeFraction) {
    this.predictedClicksChangeFraction = predictedClicksChangeFraction;
    return this;
  }

  /**
   * The predicted change in clicks as a fraction after introducing the suggested price compared to current active price. For example, 0.05 is a 5% predicted increase in clicks.
   * @return predictedClicksChangeFraction
   */
  @javax.annotation.Nullable
  public Double getPredictedClicksChangeFraction() {
    return predictedClicksChangeFraction;
  }

  public void setPredictedClicksChangeFraction(Double predictedClicksChangeFraction) {
    this.predictedClicksChangeFraction = predictedClicksChangeFraction;
  }


  public PriceInsights predictedConversionsChangeFraction(Double predictedConversionsChangeFraction) {
    this.predictedConversionsChangeFraction = predictedConversionsChangeFraction;
    return this;
  }

  /**
   * The predicted change in conversions as a fraction after introducing the suggested price compared to current active price. For example, 0.05 is a 5% predicted increase in conversions).
   * @return predictedConversionsChangeFraction
   */
  @javax.annotation.Nullable
  public Double getPredictedConversionsChangeFraction() {
    return predictedConversionsChangeFraction;
  }

  public void setPredictedConversionsChangeFraction(Double predictedConversionsChangeFraction) {
    this.predictedConversionsChangeFraction = predictedConversionsChangeFraction;
  }


  public PriceInsights predictedGrossProfitChangeFraction(Double predictedGrossProfitChangeFraction) {
    this.predictedGrossProfitChangeFraction = predictedGrossProfitChangeFraction;
    return this;
  }

  /**
   * *Deprecated*: This field is no longer supported and will start returning 0. The predicted change in gross profit as a fraction after introducing the suggested price compared to current active price. For example, 0.05 is a 5% predicted increase in gross profit.
   * @return predictedGrossProfitChangeFraction
   */
  @javax.annotation.Nullable
  public Double getPredictedGrossProfitChangeFraction() {
    return predictedGrossProfitChangeFraction;
  }

  public void setPredictedGrossProfitChangeFraction(Double predictedGrossProfitChangeFraction) {
    this.predictedGrossProfitChangeFraction = predictedGrossProfitChangeFraction;
  }


  public PriceInsights predictedImpressionsChangeFraction(Double predictedImpressionsChangeFraction) {
    this.predictedImpressionsChangeFraction = predictedImpressionsChangeFraction;
    return this;
  }

  /**
   * The predicted change in impressions as a fraction after introducing the suggested price compared to current active price. For example, 0.05 is a 5% predicted increase in impressions.
   * @return predictedImpressionsChangeFraction
   */
  @javax.annotation.Nullable
  public Double getPredictedImpressionsChangeFraction() {
    return predictedImpressionsChangeFraction;
  }

  public void setPredictedImpressionsChangeFraction(Double predictedImpressionsChangeFraction) {
    this.predictedImpressionsChangeFraction = predictedImpressionsChangeFraction;
  }


  public PriceInsights predictedMonthlyGrossProfitChangeCurrencyCode(String predictedMonthlyGrossProfitChangeCurrencyCode) {
    this.predictedMonthlyGrossProfitChangeCurrencyCode = predictedMonthlyGrossProfitChangeCurrencyCode;
    return this;
  }

  /**
   * *Deprecated*: This field is no longer supported and will start returning USD for all requests. The predicted monthly gross profit change currency (ISO 4217 code).
   * @return predictedMonthlyGrossProfitChangeCurrencyCode
   */
  @javax.annotation.Nullable
  public String getPredictedMonthlyGrossProfitChangeCurrencyCode() {
    return predictedMonthlyGrossProfitChangeCurrencyCode;
  }

  public void setPredictedMonthlyGrossProfitChangeCurrencyCode(String predictedMonthlyGrossProfitChangeCurrencyCode) {
    this.predictedMonthlyGrossProfitChangeCurrencyCode = predictedMonthlyGrossProfitChangeCurrencyCode;
  }


  public PriceInsights predictedMonthlyGrossProfitChangeMicros(String predictedMonthlyGrossProfitChangeMicros) {
    this.predictedMonthlyGrossProfitChangeMicros = predictedMonthlyGrossProfitChangeMicros;
    return this;
  }

  /**
   * *Deprecated*: This field is no longer supported and will start returning 0. The predicted change in gross profit in micros (1 millionth of a standard unit, 1 USD &#x3D; 1000000 micros) after introducing the suggested price for a month compared to current active price.
   * @return predictedMonthlyGrossProfitChangeMicros
   */
  @javax.annotation.Nullable
  public String getPredictedMonthlyGrossProfitChangeMicros() {
    return predictedMonthlyGrossProfitChangeMicros;
  }

  public void setPredictedMonthlyGrossProfitChangeMicros(String predictedMonthlyGrossProfitChangeMicros) {
    this.predictedMonthlyGrossProfitChangeMicros = predictedMonthlyGrossProfitChangeMicros;
  }


  public PriceInsights suggestedPriceCurrencyCode(String suggestedPriceCurrencyCode) {
    this.suggestedPriceCurrencyCode = suggestedPriceCurrencyCode;
    return this;
  }

  /**
   * The suggested price currency (ISO 4217 code).
   * @return suggestedPriceCurrencyCode
   */
  @javax.annotation.Nullable
  public String getSuggestedPriceCurrencyCode() {
    return suggestedPriceCurrencyCode;
  }

  public void setSuggestedPriceCurrencyCode(String suggestedPriceCurrencyCode) {
    this.suggestedPriceCurrencyCode = suggestedPriceCurrencyCode;
  }


  public PriceInsights suggestedPriceMicros(String suggestedPriceMicros) {
    this.suggestedPriceMicros = suggestedPriceMicros;
    return this;
  }

  /**
   * The latest suggested price in micros (1 millionth of a standard unit, 1 USD &#x3D; 1000000 micros) for the product.
   * @return suggestedPriceMicros
   */
  @javax.annotation.Nullable
  public String getSuggestedPriceMicros() {
    return suggestedPriceMicros;
  }

  public void setSuggestedPriceMicros(String suggestedPriceMicros) {
    this.suggestedPriceMicros = suggestedPriceMicros;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PriceInsights priceInsights = (PriceInsights) o;
    return Objects.equals(this.predictedClicksChangeFraction, priceInsights.predictedClicksChangeFraction) &&
        Objects.equals(this.predictedConversionsChangeFraction, priceInsights.predictedConversionsChangeFraction) &&
        Objects.equals(this.predictedGrossProfitChangeFraction, priceInsights.predictedGrossProfitChangeFraction) &&
        Objects.equals(this.predictedImpressionsChangeFraction, priceInsights.predictedImpressionsChangeFraction) &&
        Objects.equals(this.predictedMonthlyGrossProfitChangeCurrencyCode, priceInsights.predictedMonthlyGrossProfitChangeCurrencyCode) &&
        Objects.equals(this.predictedMonthlyGrossProfitChangeMicros, priceInsights.predictedMonthlyGrossProfitChangeMicros) &&
        Objects.equals(this.suggestedPriceCurrencyCode, priceInsights.suggestedPriceCurrencyCode) &&
        Objects.equals(this.suggestedPriceMicros, priceInsights.suggestedPriceMicros);
  }

  @Override
  public int hashCode() {
    return Objects.hash(predictedClicksChangeFraction, predictedConversionsChangeFraction, predictedGrossProfitChangeFraction, predictedImpressionsChangeFraction, predictedMonthlyGrossProfitChangeCurrencyCode, predictedMonthlyGrossProfitChangeMicros, suggestedPriceCurrencyCode, suggestedPriceMicros);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PriceInsights {\n");
    sb.append("    predictedClicksChangeFraction: ").append(toIndentedString(predictedClicksChangeFraction)).append("\n");
    sb.append("    predictedConversionsChangeFraction: ").append(toIndentedString(predictedConversionsChangeFraction)).append("\n");
    sb.append("    predictedGrossProfitChangeFraction: ").append(toIndentedString(predictedGrossProfitChangeFraction)).append("\n");
    sb.append("    predictedImpressionsChangeFraction: ").append(toIndentedString(predictedImpressionsChangeFraction)).append("\n");
    sb.append("    predictedMonthlyGrossProfitChangeCurrencyCode: ").append(toIndentedString(predictedMonthlyGrossProfitChangeCurrencyCode)).append("\n");
    sb.append("    predictedMonthlyGrossProfitChangeMicros: ").append(toIndentedString(predictedMonthlyGrossProfitChangeMicros)).append("\n");
    sb.append("    suggestedPriceCurrencyCode: ").append(toIndentedString(suggestedPriceCurrencyCode)).append("\n");
    sb.append("    suggestedPriceMicros: ").append(toIndentedString(suggestedPriceMicros)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("predictedClicksChangeFraction");
    openapiFields.add("predictedConversionsChangeFraction");
    openapiFields.add("predictedGrossProfitChangeFraction");
    openapiFields.add("predictedImpressionsChangeFraction");
    openapiFields.add("predictedMonthlyGrossProfitChangeCurrencyCode");
    openapiFields.add("predictedMonthlyGrossProfitChangeMicros");
    openapiFields.add("suggestedPriceCurrencyCode");
    openapiFields.add("suggestedPriceMicros");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PriceInsights
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PriceInsights.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PriceInsights is not found in the empty JSON string", PriceInsights.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PriceInsights.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PriceInsights` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("predictedMonthlyGrossProfitChangeCurrencyCode") != null && !jsonObj.get("predictedMonthlyGrossProfitChangeCurrencyCode").isJsonNull()) && !jsonObj.get("predictedMonthlyGrossProfitChangeCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `predictedMonthlyGrossProfitChangeCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("predictedMonthlyGrossProfitChangeCurrencyCode").toString()));
      }
      if ((jsonObj.get("predictedMonthlyGrossProfitChangeMicros") != null && !jsonObj.get("predictedMonthlyGrossProfitChangeMicros").isJsonNull()) && !jsonObj.get("predictedMonthlyGrossProfitChangeMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `predictedMonthlyGrossProfitChangeMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("predictedMonthlyGrossProfitChangeMicros").toString()));
      }
      if ((jsonObj.get("suggestedPriceCurrencyCode") != null && !jsonObj.get("suggestedPriceCurrencyCode").isJsonNull()) && !jsonObj.get("suggestedPriceCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suggestedPriceCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suggestedPriceCurrencyCode").toString()));
      }
      if ((jsonObj.get("suggestedPriceMicros") != null && !jsonObj.get("suggestedPriceMicros").isJsonNull()) && !jsonObj.get("suggestedPriceMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suggestedPriceMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suggestedPriceMicros").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PriceInsights.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PriceInsights' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PriceInsights> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PriceInsights.class));

       return (TypeAdapter<T>) new TypeAdapter<PriceInsights>() {
           @Override
           public void write(JsonWriter out, PriceInsights value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PriceInsights read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PriceInsights given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PriceInsights
   * @throws IOException if the JSON string is invalid with respect to PriceInsights
   */
  public static PriceInsights fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PriceInsights.class);
  }

  /**
   * Convert an instance of PriceInsights to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

