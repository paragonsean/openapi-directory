/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OrderreturnsPartialRefund;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderreturnsRefundOperation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderreturnsRefundOperation {
  public static final String SERIALIZED_NAME_FULL_REFUND = "fullRefund";
  @SerializedName(SERIALIZED_NAME_FULL_REFUND)
  private Boolean fullRefund;

  public static final String SERIALIZED_NAME_PARTIAL_REFUND = "partialRefund";
  @SerializedName(SERIALIZED_NAME_PARTIAL_REFUND)
  private OrderreturnsPartialRefund partialRefund;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "paymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private String paymentType;

  public static final String SERIALIZED_NAME_REASON_TEXT = "reasonText";
  @SerializedName(SERIALIZED_NAME_REASON_TEXT)
  private String reasonText;

  public static final String SERIALIZED_NAME_RETURN_REFUND_REASON = "returnRefundReason";
  @SerializedName(SERIALIZED_NAME_RETURN_REFUND_REASON)
  private String returnRefundReason;

  public OrderreturnsRefundOperation() {
  }

  public OrderreturnsRefundOperation fullRefund(Boolean fullRefund) {
    this.fullRefund = fullRefund;
    return this;
  }

  /**
   * If true, the item will be fully refunded. Allowed only when payment_type is FOP. Merchant can choose this refund option to indicate the full remaining amount of corresponding object to be refunded to the customer through FOP.
   * @return fullRefund
   */
  @javax.annotation.Nullable
  public Boolean getFullRefund() {
    return fullRefund;
  }

  public void setFullRefund(Boolean fullRefund) {
    this.fullRefund = fullRefund;
  }


  public OrderreturnsRefundOperation partialRefund(OrderreturnsPartialRefund partialRefund) {
    this.partialRefund = partialRefund;
    return this;
  }

  /**
   * Get partialRefund
   * @return partialRefund
   */
  @javax.annotation.Nullable
  public OrderreturnsPartialRefund getPartialRefund() {
    return partialRefund;
  }

  public void setPartialRefund(OrderreturnsPartialRefund partialRefund) {
    this.partialRefund = partialRefund;
  }


  public OrderreturnsRefundOperation paymentType(String paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * The payment way of issuing refund. Default value is ORIGINAL_FOP if not set.
   * @return paymentType
   */
  @javax.annotation.Nullable
  public String getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }


  public OrderreturnsRefundOperation reasonText(String reasonText) {
    this.reasonText = reasonText;
    return this;
  }

  /**
   * The explanation of the reason.
   * @return reasonText
   */
  @javax.annotation.Nullable
  public String getReasonText() {
    return reasonText;
  }

  public void setReasonText(String reasonText) {
    this.reasonText = reasonText;
  }


  public OrderreturnsRefundOperation returnRefundReason(String returnRefundReason) {
    this.returnRefundReason = returnRefundReason;
    return this;
  }

  /**
   * Code of the refund reason.
   * @return returnRefundReason
   */
  @javax.annotation.Nullable
  public String getReturnRefundReason() {
    return returnRefundReason;
  }

  public void setReturnRefundReason(String returnRefundReason) {
    this.returnRefundReason = returnRefundReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderreturnsRefundOperation orderreturnsRefundOperation = (OrderreturnsRefundOperation) o;
    return Objects.equals(this.fullRefund, orderreturnsRefundOperation.fullRefund) &&
        Objects.equals(this.partialRefund, orderreturnsRefundOperation.partialRefund) &&
        Objects.equals(this.paymentType, orderreturnsRefundOperation.paymentType) &&
        Objects.equals(this.reasonText, orderreturnsRefundOperation.reasonText) &&
        Objects.equals(this.returnRefundReason, orderreturnsRefundOperation.returnRefundReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fullRefund, partialRefund, paymentType, reasonText, returnRefundReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderreturnsRefundOperation {\n");
    sb.append("    fullRefund: ").append(toIndentedString(fullRefund)).append("\n");
    sb.append("    partialRefund: ").append(toIndentedString(partialRefund)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    reasonText: ").append(toIndentedString(reasonText)).append("\n");
    sb.append("    returnRefundReason: ").append(toIndentedString(returnRefundReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fullRefund");
    openapiFields.add("partialRefund");
    openapiFields.add("paymentType");
    openapiFields.add("reasonText");
    openapiFields.add("returnRefundReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderreturnsRefundOperation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderreturnsRefundOperation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderreturnsRefundOperation is not found in the empty JSON string", OrderreturnsRefundOperation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderreturnsRefundOperation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderreturnsRefundOperation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `partialRefund`
      if (jsonObj.get("partialRefund") != null && !jsonObj.get("partialRefund").isJsonNull()) {
        OrderreturnsPartialRefund.validateJsonElement(jsonObj.get("partialRefund"));
      }
      if ((jsonObj.get("paymentType") != null && !jsonObj.get("paymentType").isJsonNull()) && !jsonObj.get("paymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentType").toString()));
      }
      if ((jsonObj.get("reasonText") != null && !jsonObj.get("reasonText").isJsonNull()) && !jsonObj.get("reasonText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonText").toString()));
      }
      if ((jsonObj.get("returnRefundReason") != null && !jsonObj.get("returnRefundReason").isJsonNull()) && !jsonObj.get("returnRefundReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnRefundReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnRefundReason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderreturnsRefundOperation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderreturnsRefundOperation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderreturnsRefundOperation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderreturnsRefundOperation.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderreturnsRefundOperation>() {
           @Override
           public void write(JsonWriter out, OrderreturnsRefundOperation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderreturnsRefundOperation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderreturnsRefundOperation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderreturnsRefundOperation
   * @throws IOException if the JSON string is invalid with respect to OrderreturnsRefundOperation
   */
  public static OrderreturnsRefundOperation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderreturnsRefundOperation.class);
  }

  /**
   * Convert an instance of OrderreturnsRefundOperation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

