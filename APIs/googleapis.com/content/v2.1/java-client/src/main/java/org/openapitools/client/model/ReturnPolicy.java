/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Price;
import org.openapitools.client.model.ReturnPolicyPolicy;
import org.openapitools.client.model.ReturnPolicySeasonalOverride;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Return policy resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReturnPolicy {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NON_FREE_RETURN_REASONS = "nonFreeReturnReasons";
  @SerializedName(SERIALIZED_NAME_NON_FREE_RETURN_REASONS)
  private List<String> nonFreeReturnReasons = new ArrayList<>();

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private ReturnPolicyPolicy policy;

  public static final String SERIALIZED_NAME_RETURN_POLICY_ID = "returnPolicyId";
  @SerializedName(SERIALIZED_NAME_RETURN_POLICY_ID)
  private String returnPolicyId;

  public static final String SERIALIZED_NAME_RETURN_SHIPPING_FEE = "returnShippingFee";
  @SerializedName(SERIALIZED_NAME_RETURN_SHIPPING_FEE)
  private Price returnShippingFee;

  public static final String SERIALIZED_NAME_SEASONAL_OVERRIDES = "seasonalOverrides";
  @SerializedName(SERIALIZED_NAME_SEASONAL_OVERRIDES)
  private List<ReturnPolicySeasonalOverride> seasonalOverrides = new ArrayList<>();

  public ReturnPolicy() {
  }

  public ReturnPolicy country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Required. The country of sale where the return policy is applicable.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public ReturnPolicy kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;&#x60;content#returnPolicy&#x60;\&quot;
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public ReturnPolicy label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Required. The user-defined label of the return policy. For the default policy, use the label \&quot;default\&quot;.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public ReturnPolicy name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The name of the policy as shown in Merchant Center.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ReturnPolicy nonFreeReturnReasons(List<String> nonFreeReturnReasons) {
    this.nonFreeReturnReasons = nonFreeReturnReasons;
    return this;
  }

  public ReturnPolicy addNonFreeReturnReasonsItem(String nonFreeReturnReasonsItem) {
    if (this.nonFreeReturnReasons == null) {
      this.nonFreeReturnReasons = new ArrayList<>();
    }
    this.nonFreeReturnReasons.add(nonFreeReturnReasonsItem);
    return this;
  }

  /**
   * Return reasons that will incur return fees.
   * @return nonFreeReturnReasons
   */
  @javax.annotation.Nullable
  public List<String> getNonFreeReturnReasons() {
    return nonFreeReturnReasons;
  }

  public void setNonFreeReturnReasons(List<String> nonFreeReturnReasons) {
    this.nonFreeReturnReasons = nonFreeReturnReasons;
  }


  public ReturnPolicy policy(ReturnPolicyPolicy policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Get policy
   * @return policy
   */
  @javax.annotation.Nullable
  public ReturnPolicyPolicy getPolicy() {
    return policy;
  }

  public void setPolicy(ReturnPolicyPolicy policy) {
    this.policy = policy;
  }


  public ReturnPolicy returnPolicyId(String returnPolicyId) {
    this.returnPolicyId = returnPolicyId;
    return this;
  }

  /**
   * Return policy ID generated by Google.
   * @return returnPolicyId
   */
  @javax.annotation.Nullable
  public String getReturnPolicyId() {
    return returnPolicyId;
  }

  public void setReturnPolicyId(String returnPolicyId) {
    this.returnPolicyId = returnPolicyId;
  }


  public ReturnPolicy returnShippingFee(Price returnShippingFee) {
    this.returnShippingFee = returnShippingFee;
    return this;
  }

  /**
   * Get returnShippingFee
   * @return returnShippingFee
   */
  @javax.annotation.Nullable
  public Price getReturnShippingFee() {
    return returnShippingFee;
  }

  public void setReturnShippingFee(Price returnShippingFee) {
    this.returnShippingFee = returnShippingFee;
  }


  public ReturnPolicy seasonalOverrides(List<ReturnPolicySeasonalOverride> seasonalOverrides) {
    this.seasonalOverrides = seasonalOverrides;
    return this;
  }

  public ReturnPolicy addSeasonalOverridesItem(ReturnPolicySeasonalOverride seasonalOverridesItem) {
    if (this.seasonalOverrides == null) {
      this.seasonalOverrides = new ArrayList<>();
    }
    this.seasonalOverrides.add(seasonalOverridesItem);
    return this;
  }

  /**
   * An optional list of seasonal overrides.
   * @return seasonalOverrides
   */
  @javax.annotation.Nullable
  public List<ReturnPolicySeasonalOverride> getSeasonalOverrides() {
    return seasonalOverrides;
  }

  public void setSeasonalOverrides(List<ReturnPolicySeasonalOverride> seasonalOverrides) {
    this.seasonalOverrides = seasonalOverrides;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReturnPolicy returnPolicy = (ReturnPolicy) o;
    return Objects.equals(this.country, returnPolicy.country) &&
        Objects.equals(this.kind, returnPolicy.kind) &&
        Objects.equals(this.label, returnPolicy.label) &&
        Objects.equals(this.name, returnPolicy.name) &&
        Objects.equals(this.nonFreeReturnReasons, returnPolicy.nonFreeReturnReasons) &&
        Objects.equals(this.policy, returnPolicy.policy) &&
        Objects.equals(this.returnPolicyId, returnPolicy.returnPolicyId) &&
        Objects.equals(this.returnShippingFee, returnPolicy.returnShippingFee) &&
        Objects.equals(this.seasonalOverrides, returnPolicy.seasonalOverrides);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, kind, label, name, nonFreeReturnReasons, policy, returnPolicyId, returnShippingFee, seasonalOverrides);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReturnPolicy {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nonFreeReturnReasons: ").append(toIndentedString(nonFreeReturnReasons)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    returnPolicyId: ").append(toIndentedString(returnPolicyId)).append("\n");
    sb.append("    returnShippingFee: ").append(toIndentedString(returnShippingFee)).append("\n");
    sb.append("    seasonalOverrides: ").append(toIndentedString(seasonalOverrides)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("kind");
    openapiFields.add("label");
    openapiFields.add("name");
    openapiFields.add("nonFreeReturnReasons");
    openapiFields.add("policy");
    openapiFields.add("returnPolicyId");
    openapiFields.add("returnShippingFee");
    openapiFields.add("seasonalOverrides");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReturnPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReturnPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReturnPolicy is not found in the empty JSON string", ReturnPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReturnPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReturnPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nonFreeReturnReasons") != null && !jsonObj.get("nonFreeReturnReasons").isJsonNull() && !jsonObj.get("nonFreeReturnReasons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonFreeReturnReasons` to be an array in the JSON string but got `%s`", jsonObj.get("nonFreeReturnReasons").toString()));
      }
      // validate the optional field `policy`
      if (jsonObj.get("policy") != null && !jsonObj.get("policy").isJsonNull()) {
        ReturnPolicyPolicy.validateJsonElement(jsonObj.get("policy"));
      }
      if ((jsonObj.get("returnPolicyId") != null && !jsonObj.get("returnPolicyId").isJsonNull()) && !jsonObj.get("returnPolicyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnPolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnPolicyId").toString()));
      }
      // validate the optional field `returnShippingFee`
      if (jsonObj.get("returnShippingFee") != null && !jsonObj.get("returnShippingFee").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("returnShippingFee"));
      }
      if (jsonObj.get("seasonalOverrides") != null && !jsonObj.get("seasonalOverrides").isJsonNull()) {
        JsonArray jsonArrayseasonalOverrides = jsonObj.getAsJsonArray("seasonalOverrides");
        if (jsonArrayseasonalOverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seasonalOverrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seasonalOverrides` to be an array in the JSON string but got `%s`", jsonObj.get("seasonalOverrides").toString()));
          }

          // validate the optional field `seasonalOverrides` (array)
          for (int i = 0; i < jsonArrayseasonalOverrides.size(); i++) {
            ReturnPolicySeasonalOverride.validateJsonElement(jsonArrayseasonalOverrides.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReturnPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReturnPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReturnPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReturnPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<ReturnPolicy>() {
           @Override
           public void write(JsonWriter out, ReturnPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReturnPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReturnPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReturnPolicy
   * @throws IOException if the JSON string is invalid with respect to ReturnPolicy
   */
  public static ReturnPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReturnPolicy.class);
  }

  /**
   * Convert an instance of ReturnPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

