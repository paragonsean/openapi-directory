/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccountItemUpdatesSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Turning on [item updates](https://support.google.com/merchants/answer/3246284) allows Google to automatically update items for you. When item updates are on, Google uses the structured data markup on the website and advanced data extractors to update the price and availability of the items. When the item updates are off, items with mismatched data aren&#39;t shown.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountItemUpdates {
  public static final String SERIALIZED_NAME_ACCOUNT_ITEM_UPDATES_SETTINGS = "accountItemUpdatesSettings";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ITEM_UPDATES_SETTINGS)
  private AccountItemUpdatesSettings accountItemUpdatesSettings;

  public static final String SERIALIZED_NAME_EFFECTIVE_ALLOW_AVAILABILITY_UPDATES = "effectiveAllowAvailabilityUpdates";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_ALLOW_AVAILABILITY_UPDATES)
  private Boolean effectiveAllowAvailabilityUpdates;

  public static final String SERIALIZED_NAME_EFFECTIVE_ALLOW_CONDITION_UPDATES = "effectiveAllowConditionUpdates";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_ALLOW_CONDITION_UPDATES)
  private Boolean effectiveAllowConditionUpdates;

  public static final String SERIALIZED_NAME_EFFECTIVE_ALLOW_PRICE_UPDATES = "effectiveAllowPriceUpdates";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_ALLOW_PRICE_UPDATES)
  private Boolean effectiveAllowPriceUpdates;

  public static final String SERIALIZED_NAME_EFFECTIVE_ALLOW_STRICT_AVAILABILITY_UPDATES = "effectiveAllowStrictAvailabilityUpdates";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_ALLOW_STRICT_AVAILABILITY_UPDATES)
  private Boolean effectiveAllowStrictAvailabilityUpdates;

  public AccountItemUpdates() {
  }

  public AccountItemUpdates(
     Boolean effectiveAllowAvailabilityUpdates, 
     Boolean effectiveAllowConditionUpdates, 
     Boolean effectiveAllowPriceUpdates, 
     Boolean effectiveAllowStrictAvailabilityUpdates
  ) {
    this();
    this.effectiveAllowAvailabilityUpdates = effectiveAllowAvailabilityUpdates;
    this.effectiveAllowConditionUpdates = effectiveAllowConditionUpdates;
    this.effectiveAllowPriceUpdates = effectiveAllowPriceUpdates;
    this.effectiveAllowStrictAvailabilityUpdates = effectiveAllowStrictAvailabilityUpdates;
  }

  public AccountItemUpdates accountItemUpdatesSettings(AccountItemUpdatesSettings accountItemUpdatesSettings) {
    this.accountItemUpdatesSettings = accountItemUpdatesSettings;
    return this;
  }

  /**
   * Get accountItemUpdatesSettings
   * @return accountItemUpdatesSettings
   */
  @javax.annotation.Nullable
  public AccountItemUpdatesSettings getAccountItemUpdatesSettings() {
    return accountItemUpdatesSettings;
  }

  public void setAccountItemUpdatesSettings(AccountItemUpdatesSettings accountItemUpdatesSettings) {
    this.accountItemUpdatesSettings = accountItemUpdatesSettings;
  }


  /**
   * Output only. The effective value of allow_availability_updates. If account_item_updates_settings is present, then this value is the same. Otherwise, it represents the inherited value of the parent account. Read-only.
   * @return effectiveAllowAvailabilityUpdates
   */
  @javax.annotation.Nullable
  public Boolean getEffectiveAllowAvailabilityUpdates() {
    return effectiveAllowAvailabilityUpdates;
  }



  /**
   * Output only. The effective value of allow_condition_updates. If account_item_updates_settings is present, then this value is the same. Otherwise, it represents the inherited value of the parent account. Read-only.
   * @return effectiveAllowConditionUpdates
   */
  @javax.annotation.Nullable
  public Boolean getEffectiveAllowConditionUpdates() {
    return effectiveAllowConditionUpdates;
  }



  /**
   * Output only. The effective value of allow_price_updates. If account_item_updates_settings is present, then this value is the same. Otherwise, it represents the inherited value of the parent account. Read-only.
   * @return effectiveAllowPriceUpdates
   */
  @javax.annotation.Nullable
  public Boolean getEffectiveAllowPriceUpdates() {
    return effectiveAllowPriceUpdates;
  }



  /**
   * Output only. The effective value of allow_strict_availability_updates. If account_item_updates_settings is present, then this value is the same. Otherwise, it represents the inherited value of the parent account. Read-only.
   * @return effectiveAllowStrictAvailabilityUpdates
   */
  @javax.annotation.Nullable
  public Boolean getEffectiveAllowStrictAvailabilityUpdates() {
    return effectiveAllowStrictAvailabilityUpdates;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountItemUpdates accountItemUpdates = (AccountItemUpdates) o;
    return Objects.equals(this.accountItemUpdatesSettings, accountItemUpdates.accountItemUpdatesSettings) &&
        Objects.equals(this.effectiveAllowAvailabilityUpdates, accountItemUpdates.effectiveAllowAvailabilityUpdates) &&
        Objects.equals(this.effectiveAllowConditionUpdates, accountItemUpdates.effectiveAllowConditionUpdates) &&
        Objects.equals(this.effectiveAllowPriceUpdates, accountItemUpdates.effectiveAllowPriceUpdates) &&
        Objects.equals(this.effectiveAllowStrictAvailabilityUpdates, accountItemUpdates.effectiveAllowStrictAvailabilityUpdates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountItemUpdatesSettings, effectiveAllowAvailabilityUpdates, effectiveAllowConditionUpdates, effectiveAllowPriceUpdates, effectiveAllowStrictAvailabilityUpdates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountItemUpdates {\n");
    sb.append("    accountItemUpdatesSettings: ").append(toIndentedString(accountItemUpdatesSettings)).append("\n");
    sb.append("    effectiveAllowAvailabilityUpdates: ").append(toIndentedString(effectiveAllowAvailabilityUpdates)).append("\n");
    sb.append("    effectiveAllowConditionUpdates: ").append(toIndentedString(effectiveAllowConditionUpdates)).append("\n");
    sb.append("    effectiveAllowPriceUpdates: ").append(toIndentedString(effectiveAllowPriceUpdates)).append("\n");
    sb.append("    effectiveAllowStrictAvailabilityUpdates: ").append(toIndentedString(effectiveAllowStrictAvailabilityUpdates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountItemUpdatesSettings");
    openapiFields.add("effectiveAllowAvailabilityUpdates");
    openapiFields.add("effectiveAllowConditionUpdates");
    openapiFields.add("effectiveAllowPriceUpdates");
    openapiFields.add("effectiveAllowStrictAvailabilityUpdates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountItemUpdates
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountItemUpdates.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountItemUpdates is not found in the empty JSON string", AccountItemUpdates.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountItemUpdates.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountItemUpdates` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accountItemUpdatesSettings`
      if (jsonObj.get("accountItemUpdatesSettings") != null && !jsonObj.get("accountItemUpdatesSettings").isJsonNull()) {
        AccountItemUpdatesSettings.validateJsonElement(jsonObj.get("accountItemUpdatesSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountItemUpdates.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountItemUpdates' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountItemUpdates> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountItemUpdates.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountItemUpdates>() {
           @Override
           public void write(JsonWriter out, AccountItemUpdates value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountItemUpdates read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountItemUpdates given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountItemUpdates
   * @throws IOException if the JSON string is invalid with respect to AccountItemUpdates
   */
  public static AccountItemUpdates fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountItemUpdates.class);
  }

  /**
   * Convert an instance of AccountItemUpdates to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

