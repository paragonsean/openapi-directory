/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ActionReason;
import org.openapitools.client.model.BuiltInSimpleAction;
import org.openapitools.client.model.ExternalAction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An actionable step that can be executed to solve the issue.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Action {
  public static final String SERIALIZED_NAME_BUILTIN_SIMPLE_ACTION = "builtinSimpleAction";
  @SerializedName(SERIALIZED_NAME_BUILTIN_SIMPLE_ACTION)
  private BuiltInSimpleAction builtinSimpleAction;

  public static final String SERIALIZED_NAME_BUTTON_LABEL = "buttonLabel";
  @SerializedName(SERIALIZED_NAME_BUTTON_LABEL)
  private String buttonLabel;

  public static final String SERIALIZED_NAME_EXTERNAL_ACTION = "externalAction";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ACTION)
  private ExternalAction externalAction;

  public static final String SERIALIZED_NAME_IS_AVAILABLE = "isAvailable";
  @SerializedName(SERIALIZED_NAME_IS_AVAILABLE)
  private Boolean isAvailable;

  public static final String SERIALIZED_NAME_REASONS = "reasons";
  @SerializedName(SERIALIZED_NAME_REASONS)
  private List<ActionReason> reasons = new ArrayList<>();

  public Action() {
  }

  public Action builtinSimpleAction(BuiltInSimpleAction builtinSimpleAction) {
    this.builtinSimpleAction = builtinSimpleAction;
    return this;
  }

  /**
   * Get builtinSimpleAction
   * @return builtinSimpleAction
   */
  @javax.annotation.Nullable
  public BuiltInSimpleAction getBuiltinSimpleAction() {
    return builtinSimpleAction;
  }

  public void setBuiltinSimpleAction(BuiltInSimpleAction builtinSimpleAction) {
    this.builtinSimpleAction = builtinSimpleAction;
  }


  public Action buttonLabel(String buttonLabel) {
    this.buttonLabel = buttonLabel;
    return this;
  }

  /**
   * Label of the action button.
   * @return buttonLabel
   */
  @javax.annotation.Nullable
  public String getButtonLabel() {
    return buttonLabel;
  }

  public void setButtonLabel(String buttonLabel) {
    this.buttonLabel = buttonLabel;
  }


  public Action externalAction(ExternalAction externalAction) {
    this.externalAction = externalAction;
    return this;
  }

  /**
   * Get externalAction
   * @return externalAction
   */
  @javax.annotation.Nullable
  public ExternalAction getExternalAction() {
    return externalAction;
  }

  public void setExternalAction(ExternalAction externalAction) {
    this.externalAction = externalAction;
  }


  public Action isAvailable(Boolean isAvailable) {
    this.isAvailable = isAvailable;
    return this;
  }

  /**
   * Controlling whether the button is active or disabled. The value is &#39;false&#39; when the action was already requested or is not available. If the action is not available then a reason will be present. If (your) third-party application shows a disabled button for action that is not available, then it should also show reasons.
   * @return isAvailable
   */
  @javax.annotation.Nullable
  public Boolean getIsAvailable() {
    return isAvailable;
  }

  public void setIsAvailable(Boolean isAvailable) {
    this.isAvailable = isAvailable;
  }


  public Action reasons(List<ActionReason> reasons) {
    this.reasons = reasons;
    return this;
  }

  public Action addReasonsItem(ActionReason reasonsItem) {
    if (this.reasons == null) {
      this.reasons = new ArrayList<>();
    }
    this.reasons.add(reasonsItem);
    return this;
  }

  /**
   * List of reasons why the action is not available. The list of reasons is empty if the action is available. If there is only one reason, it can be displayed next to the disabled button. If there are more reasons, all of them should be displayed, for example in a pop-up dialog.
   * @return reasons
   */
  @javax.annotation.Nullable
  public List<ActionReason> getReasons() {
    return reasons;
  }

  public void setReasons(List<ActionReason> reasons) {
    this.reasons = reasons;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Action action = (Action) o;
    return Objects.equals(this.builtinSimpleAction, action.builtinSimpleAction) &&
        Objects.equals(this.buttonLabel, action.buttonLabel) &&
        Objects.equals(this.externalAction, action.externalAction) &&
        Objects.equals(this.isAvailable, action.isAvailable) &&
        Objects.equals(this.reasons, action.reasons);
  }

  @Override
  public int hashCode() {
    return Objects.hash(builtinSimpleAction, buttonLabel, externalAction, isAvailable, reasons);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Action {\n");
    sb.append("    builtinSimpleAction: ").append(toIndentedString(builtinSimpleAction)).append("\n");
    sb.append("    buttonLabel: ").append(toIndentedString(buttonLabel)).append("\n");
    sb.append("    externalAction: ").append(toIndentedString(externalAction)).append("\n");
    sb.append("    isAvailable: ").append(toIndentedString(isAvailable)).append("\n");
    sb.append("    reasons: ").append(toIndentedString(reasons)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("builtinSimpleAction");
    openapiFields.add("buttonLabel");
    openapiFields.add("externalAction");
    openapiFields.add("isAvailable");
    openapiFields.add("reasons");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Action
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Action.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Action is not found in the empty JSON string", Action.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Action.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Action` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `builtinSimpleAction`
      if (jsonObj.get("builtinSimpleAction") != null && !jsonObj.get("builtinSimpleAction").isJsonNull()) {
        BuiltInSimpleAction.validateJsonElement(jsonObj.get("builtinSimpleAction"));
      }
      if ((jsonObj.get("buttonLabel") != null && !jsonObj.get("buttonLabel").isJsonNull()) && !jsonObj.get("buttonLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buttonLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buttonLabel").toString()));
      }
      // validate the optional field `externalAction`
      if (jsonObj.get("externalAction") != null && !jsonObj.get("externalAction").isJsonNull()) {
        ExternalAction.validateJsonElement(jsonObj.get("externalAction"));
      }
      if (jsonObj.get("reasons") != null && !jsonObj.get("reasons").isJsonNull()) {
        JsonArray jsonArrayreasons = jsonObj.getAsJsonArray("reasons");
        if (jsonArrayreasons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reasons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reasons` to be an array in the JSON string but got `%s`", jsonObj.get("reasons").toString()));
          }

          // validate the optional field `reasons` (array)
          for (int i = 0; i < jsonArrayreasons.size(); i++) {
            ActionReason.validateJsonElement(jsonArrayreasons.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Action.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Action' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Action> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Action.class));

       return (TypeAdapter<T>) new TypeAdapter<Action>() {
           @Override
           public void write(JsonWriter out, Action value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Action read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Action given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Action
   * @throws IOException if the JSON string is invalid with respect to Action
   */
  public static Action fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Action.class);
  }

  /**
   * Convert an instance of Action to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

