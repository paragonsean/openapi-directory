/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderPromotion;
import org.openapitools.client.model.Price;
import org.openapitools.client.model.TestOrderDeliveryDetails;
import org.openapitools.client.model.TestOrderLineItem;
import org.openapitools.client.model.TestOrderPickupDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestOrder
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestOrder {
  public static final String SERIALIZED_NAME_DELIVERY_DETAILS = "deliveryDetails";
  @SerializedName(SERIALIZED_NAME_DELIVERY_DETAILS)
  private TestOrderDeliveryDetails deliveryDetails;

  public static final String SERIALIZED_NAME_ENABLE_ORDERINVOICES = "enableOrderinvoices";
  @SerializedName(SERIALIZED_NAME_ENABLE_ORDERINVOICES)
  private Boolean enableOrderinvoices;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "lineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<TestOrderLineItem> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTIFICATION_MODE = "notificationMode";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_MODE)
  private String notificationMode;

  public static final String SERIALIZED_NAME_PICKUP_DETAILS = "pickupDetails";
  @SerializedName(SERIALIZED_NAME_PICKUP_DETAILS)
  private TestOrderPickupDetails pickupDetails;

  public static final String SERIALIZED_NAME_PREDEFINED_BILLING_ADDRESS = "predefinedBillingAddress";
  @SerializedName(SERIALIZED_NAME_PREDEFINED_BILLING_ADDRESS)
  private String predefinedBillingAddress;

  public static final String SERIALIZED_NAME_PREDEFINED_DELIVERY_ADDRESS = "predefinedDeliveryAddress";
  @SerializedName(SERIALIZED_NAME_PREDEFINED_DELIVERY_ADDRESS)
  private String predefinedDeliveryAddress;

  public static final String SERIALIZED_NAME_PREDEFINED_EMAIL = "predefinedEmail";
  @SerializedName(SERIALIZED_NAME_PREDEFINED_EMAIL)
  private String predefinedEmail;

  public static final String SERIALIZED_NAME_PREDEFINED_PICKUP_DETAILS = "predefinedPickupDetails";
  @SerializedName(SERIALIZED_NAME_PREDEFINED_PICKUP_DETAILS)
  private String predefinedPickupDetails;

  public static final String SERIALIZED_NAME_PROMOTIONS = "promotions";
  @SerializedName(SERIALIZED_NAME_PROMOTIONS)
  private List<OrderPromotion> promotions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPPING_COST = "shippingCost";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COST)
  private Price shippingCost;

  public static final String SERIALIZED_NAME_SHIPPING_OPTION = "shippingOption";
  @SerializedName(SERIALIZED_NAME_SHIPPING_OPTION)
  private String shippingOption;

  public TestOrder() {
  }

  public TestOrder deliveryDetails(TestOrderDeliveryDetails deliveryDetails) {
    this.deliveryDetails = deliveryDetails;
    return this;
  }

  /**
   * Get deliveryDetails
   * @return deliveryDetails
   */
  @javax.annotation.Nullable
  public TestOrderDeliveryDetails getDeliveryDetails() {
    return deliveryDetails;
  }

  public void setDeliveryDetails(TestOrderDeliveryDetails deliveryDetails) {
    this.deliveryDetails = deliveryDetails;
  }


  public TestOrder enableOrderinvoices(Boolean enableOrderinvoices) {
    this.enableOrderinvoices = enableOrderinvoices;
    return this;
  }

  /**
   * Whether the orderinvoices service should support this order.
   * @return enableOrderinvoices
   */
  @javax.annotation.Nullable
  public Boolean getEnableOrderinvoices() {
    return enableOrderinvoices;
  }

  public void setEnableOrderinvoices(Boolean enableOrderinvoices) {
    this.enableOrderinvoices = enableOrderinvoices;
  }


  public TestOrder kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string \&quot;&#x60;content#testOrder&#x60;\&quot;
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public TestOrder lineItems(List<TestOrderLineItem> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public TestOrder addLineItemsItem(TestOrderLineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * Required. Line items that are ordered. At least one line item must be provided.
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<TestOrderLineItem> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<TestOrderLineItem> lineItems) {
    this.lineItems = lineItems;
  }


  public TestOrder notificationMode(String notificationMode) {
    this.notificationMode = notificationMode;
    return this;
  }

  /**
   * Restricted. Do not use.
   * @return notificationMode
   */
  @javax.annotation.Nullable
  public String getNotificationMode() {
    return notificationMode;
  }

  public void setNotificationMode(String notificationMode) {
    this.notificationMode = notificationMode;
  }


  public TestOrder pickupDetails(TestOrderPickupDetails pickupDetails) {
    this.pickupDetails = pickupDetails;
    return this;
  }

  /**
   * Get pickupDetails
   * @return pickupDetails
   */
  @javax.annotation.Nullable
  public TestOrderPickupDetails getPickupDetails() {
    return pickupDetails;
  }

  public void setPickupDetails(TestOrderPickupDetails pickupDetails) {
    this.pickupDetails = pickupDetails;
  }


  public TestOrder predefinedBillingAddress(String predefinedBillingAddress) {
    this.predefinedBillingAddress = predefinedBillingAddress;
    return this;
  }

  /**
   * Required. The billing address. Acceptable values are: - \&quot;&#x60;dwight&#x60;\&quot; - \&quot;&#x60;jim&#x60;\&quot; - \&quot;&#x60;pam&#x60;\&quot; 
   * @return predefinedBillingAddress
   */
  @javax.annotation.Nullable
  public String getPredefinedBillingAddress() {
    return predefinedBillingAddress;
  }

  public void setPredefinedBillingAddress(String predefinedBillingAddress) {
    this.predefinedBillingAddress = predefinedBillingAddress;
  }


  public TestOrder predefinedDeliveryAddress(String predefinedDeliveryAddress) {
    this.predefinedDeliveryAddress = predefinedDeliveryAddress;
    return this;
  }

  /**
   * Required. Identifier of one of the predefined delivery addresses for the delivery. Acceptable values are: - \&quot;&#x60;dwight&#x60;\&quot; - \&quot;&#x60;jim&#x60;\&quot; - \&quot;&#x60;pam&#x60;\&quot; 
   * @return predefinedDeliveryAddress
   */
  @javax.annotation.Nullable
  public String getPredefinedDeliveryAddress() {
    return predefinedDeliveryAddress;
  }

  public void setPredefinedDeliveryAddress(String predefinedDeliveryAddress) {
    this.predefinedDeliveryAddress = predefinedDeliveryAddress;
  }


  public TestOrder predefinedEmail(String predefinedEmail) {
    this.predefinedEmail = predefinedEmail;
    return this;
  }

  /**
   * Required. Email address of the customer. Acceptable values are: - \&quot;&#x60;pog.dwight.schrute@gmail.com&#x60;\&quot; - \&quot;&#x60;pog.jim.halpert@gmail.com&#x60;\&quot; - \&quot;&#x60;penpog.pam.beesly@gmail.comding&#x60;\&quot; 
   * @return predefinedEmail
   */
  @javax.annotation.Nullable
  public String getPredefinedEmail() {
    return predefinedEmail;
  }

  public void setPredefinedEmail(String predefinedEmail) {
    this.predefinedEmail = predefinedEmail;
  }


  public TestOrder predefinedPickupDetails(String predefinedPickupDetails) {
    this.predefinedPickupDetails = predefinedPickupDetails;
    return this;
  }

  /**
   * Identifier of one of the predefined pickup details. Required for orders containing line items with shipping type &#x60;pickup&#x60;. Acceptable values are: - \&quot;&#x60;dwight&#x60;\&quot; - \&quot;&#x60;jim&#x60;\&quot; - \&quot;&#x60;pam&#x60;\&quot; 
   * @return predefinedPickupDetails
   */
  @javax.annotation.Nullable
  public String getPredefinedPickupDetails() {
    return predefinedPickupDetails;
  }

  public void setPredefinedPickupDetails(String predefinedPickupDetails) {
    this.predefinedPickupDetails = predefinedPickupDetails;
  }


  public TestOrder promotions(List<OrderPromotion> promotions) {
    this.promotions = promotions;
    return this;
  }

  public TestOrder addPromotionsItem(OrderPromotion promotionsItem) {
    if (this.promotions == null) {
      this.promotions = new ArrayList<>();
    }
    this.promotions.add(promotionsItem);
    return this;
  }

  /**
   * Promotions associated with the order.
   * @return promotions
   */
  @javax.annotation.Nullable
  public List<OrderPromotion> getPromotions() {
    return promotions;
  }

  public void setPromotions(List<OrderPromotion> promotions) {
    this.promotions = promotions;
  }


  public TestOrder shippingCost(Price shippingCost) {
    this.shippingCost = shippingCost;
    return this;
  }

  /**
   * Get shippingCost
   * @return shippingCost
   */
  @javax.annotation.Nullable
  public Price getShippingCost() {
    return shippingCost;
  }

  public void setShippingCost(Price shippingCost) {
    this.shippingCost = shippingCost;
  }


  public TestOrder shippingOption(String shippingOption) {
    this.shippingOption = shippingOption;
    return this;
  }

  /**
   * Required. The requested shipping option. Acceptable values are: - \&quot;&#x60;economy&#x60;\&quot; - \&quot;&#x60;expedited&#x60;\&quot; - \&quot;&#x60;oneDay&#x60;\&quot; - \&quot;&#x60;sameDay&#x60;\&quot; - \&quot;&#x60;standard&#x60;\&quot; - \&quot;&#x60;twoDay&#x60;\&quot; 
   * @return shippingOption
   */
  @javax.annotation.Nullable
  public String getShippingOption() {
    return shippingOption;
  }

  public void setShippingOption(String shippingOption) {
    this.shippingOption = shippingOption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestOrder testOrder = (TestOrder) o;
    return Objects.equals(this.deliveryDetails, testOrder.deliveryDetails) &&
        Objects.equals(this.enableOrderinvoices, testOrder.enableOrderinvoices) &&
        Objects.equals(this.kind, testOrder.kind) &&
        Objects.equals(this.lineItems, testOrder.lineItems) &&
        Objects.equals(this.notificationMode, testOrder.notificationMode) &&
        Objects.equals(this.pickupDetails, testOrder.pickupDetails) &&
        Objects.equals(this.predefinedBillingAddress, testOrder.predefinedBillingAddress) &&
        Objects.equals(this.predefinedDeliveryAddress, testOrder.predefinedDeliveryAddress) &&
        Objects.equals(this.predefinedEmail, testOrder.predefinedEmail) &&
        Objects.equals(this.predefinedPickupDetails, testOrder.predefinedPickupDetails) &&
        Objects.equals(this.promotions, testOrder.promotions) &&
        Objects.equals(this.shippingCost, testOrder.shippingCost) &&
        Objects.equals(this.shippingOption, testOrder.shippingOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliveryDetails, enableOrderinvoices, kind, lineItems, notificationMode, pickupDetails, predefinedBillingAddress, predefinedDeliveryAddress, predefinedEmail, predefinedPickupDetails, promotions, shippingCost, shippingOption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestOrder {\n");
    sb.append("    deliveryDetails: ").append(toIndentedString(deliveryDetails)).append("\n");
    sb.append("    enableOrderinvoices: ").append(toIndentedString(enableOrderinvoices)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    notificationMode: ").append(toIndentedString(notificationMode)).append("\n");
    sb.append("    pickupDetails: ").append(toIndentedString(pickupDetails)).append("\n");
    sb.append("    predefinedBillingAddress: ").append(toIndentedString(predefinedBillingAddress)).append("\n");
    sb.append("    predefinedDeliveryAddress: ").append(toIndentedString(predefinedDeliveryAddress)).append("\n");
    sb.append("    predefinedEmail: ").append(toIndentedString(predefinedEmail)).append("\n");
    sb.append("    predefinedPickupDetails: ").append(toIndentedString(predefinedPickupDetails)).append("\n");
    sb.append("    promotions: ").append(toIndentedString(promotions)).append("\n");
    sb.append("    shippingCost: ").append(toIndentedString(shippingCost)).append("\n");
    sb.append("    shippingOption: ").append(toIndentedString(shippingOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deliveryDetails");
    openapiFields.add("enableOrderinvoices");
    openapiFields.add("kind");
    openapiFields.add("lineItems");
    openapiFields.add("notificationMode");
    openapiFields.add("pickupDetails");
    openapiFields.add("predefinedBillingAddress");
    openapiFields.add("predefinedDeliveryAddress");
    openapiFields.add("predefinedEmail");
    openapiFields.add("predefinedPickupDetails");
    openapiFields.add("promotions");
    openapiFields.add("shippingCost");
    openapiFields.add("shippingOption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestOrder
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestOrder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestOrder is not found in the empty JSON string", TestOrder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestOrder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestOrder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deliveryDetails`
      if (jsonObj.get("deliveryDetails") != null && !jsonObj.get("deliveryDetails").isJsonNull()) {
        TestOrderDeliveryDetails.validateJsonElement(jsonObj.get("deliveryDetails"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if (jsonObj.get("lineItems") != null && !jsonObj.get("lineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("lineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lineItems` to be an array in the JSON string but got `%s`", jsonObj.get("lineItems").toString()));
          }

          // validate the optional field `lineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            TestOrderLineItem.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      if ((jsonObj.get("notificationMode") != null && !jsonObj.get("notificationMode").isJsonNull()) && !jsonObj.get("notificationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationMode").toString()));
      }
      // validate the optional field `pickupDetails`
      if (jsonObj.get("pickupDetails") != null && !jsonObj.get("pickupDetails").isJsonNull()) {
        TestOrderPickupDetails.validateJsonElement(jsonObj.get("pickupDetails"));
      }
      if ((jsonObj.get("predefinedBillingAddress") != null && !jsonObj.get("predefinedBillingAddress").isJsonNull()) && !jsonObj.get("predefinedBillingAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `predefinedBillingAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("predefinedBillingAddress").toString()));
      }
      if ((jsonObj.get("predefinedDeliveryAddress") != null && !jsonObj.get("predefinedDeliveryAddress").isJsonNull()) && !jsonObj.get("predefinedDeliveryAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `predefinedDeliveryAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("predefinedDeliveryAddress").toString()));
      }
      if ((jsonObj.get("predefinedEmail") != null && !jsonObj.get("predefinedEmail").isJsonNull()) && !jsonObj.get("predefinedEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `predefinedEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("predefinedEmail").toString()));
      }
      if ((jsonObj.get("predefinedPickupDetails") != null && !jsonObj.get("predefinedPickupDetails").isJsonNull()) && !jsonObj.get("predefinedPickupDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `predefinedPickupDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("predefinedPickupDetails").toString()));
      }
      if (jsonObj.get("promotions") != null && !jsonObj.get("promotions").isJsonNull()) {
        JsonArray jsonArraypromotions = jsonObj.getAsJsonArray("promotions");
        if (jsonArraypromotions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("promotions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `promotions` to be an array in the JSON string but got `%s`", jsonObj.get("promotions").toString()));
          }

          // validate the optional field `promotions` (array)
          for (int i = 0; i < jsonArraypromotions.size(); i++) {
            OrderPromotion.validateJsonElement(jsonArraypromotions.get(i));
          };
        }
      }
      // validate the optional field `shippingCost`
      if (jsonObj.get("shippingCost") != null && !jsonObj.get("shippingCost").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("shippingCost"));
      }
      if ((jsonObj.get("shippingOption") != null && !jsonObj.get("shippingOption").isJsonNull()) && !jsonObj.get("shippingOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingOption").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestOrder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestOrder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestOrder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestOrder.class));

       return (TypeAdapter<T>) new TypeAdapter<TestOrder>() {
           @Override
           public void write(JsonWriter out, TestOrder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestOrder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestOrder given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestOrder
   * @throws IOException if the JSON string is invalid with respect to TestOrder
   */
  public static TestOrder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestOrder.class);
  }

  /**
   * Convert an instance of TestOrder to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

