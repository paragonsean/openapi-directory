/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Price;
import org.openapitools.client.model.SettlementTransactionAmountCommission;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SettlementTransactionAmount
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SettlementTransactionAmount {
  public static final String SERIALIZED_NAME_COMMISSION = "commission";
  @SerializedName(SERIALIZED_NAME_COMMISSION)
  private SettlementTransactionAmountCommission commission;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT = "transactionAmount";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT)
  private Price transactionAmount;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public SettlementTransactionAmount() {
  }

  public SettlementTransactionAmount commission(SettlementTransactionAmountCommission commission) {
    this.commission = commission;
    return this;
  }

  /**
   * Get commission
   * @return commission
   */
  @javax.annotation.Nullable
  public SettlementTransactionAmountCommission getCommission() {
    return commission;
  }

  public void setCommission(SettlementTransactionAmountCommission commission) {
    this.commission = commission;
  }


  public SettlementTransactionAmount description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the event. Acceptable values are: - \&quot;&#x60;taxWithhold&#x60;\&quot; - \&quot;&#x60;principal&#x60;\&quot; - \&quot;&#x60;principalAdjustment&#x60;\&quot; - \&quot;&#x60;shippingFee&#x60;\&quot; - \&quot;&#x60;merchantRemittedSalesTax&#x60;\&quot; - \&quot;&#x60;googleRemittedSalesTax&#x60;\&quot; - \&quot;&#x60;merchantCoupon&#x60;\&quot; - \&quot;&#x60;merchantCouponTax&#x60;\&quot; - \&quot;&#x60;merchantRemittedDisposalTax&#x60;\&quot; - \&quot;&#x60;googleRemittedDisposalTax&#x60;\&quot; - \&quot;&#x60;merchantRemittedRedemptionFee&#x60;\&quot; - \&quot;&#x60;googleRemittedRedemptionFee&#x60;\&quot; - \&quot;&#x60;eeeEcoFee&#x60;\&quot; - \&quot;&#x60;furnitureEcoFee&#x60;\&quot; - \&quot;&#x60;copyPrivateFee&#x60;\&quot; - \&quot;&#x60;eeeEcoFeeCommission&#x60;\&quot; - \&quot;&#x60;furnitureEcoFeeCommission&#x60;\&quot; - \&quot;&#x60;copyPrivateFeeCommission&#x60;\&quot; - \&quot;&#x60;principalRefund&#x60;\&quot; - \&quot;&#x60;principalRefundTax&#x60;\&quot; - \&quot;&#x60;itemCommission&#x60;\&quot; - \&quot;&#x60;adjustmentCommission&#x60;\&quot; - \&quot;&#x60;shippingFeeCommission&#x60;\&quot; - \&quot;&#x60;commissionRefund&#x60;\&quot; - \&quot;&#x60;damaged&#x60;\&quot; - \&quot;&#x60;damagedOrDefectiveItem&#x60;\&quot; - \&quot;&#x60;expiredItem&#x60;\&quot; - \&quot;&#x60;faultyItem&#x60;\&quot; - \&quot;&#x60;incorrectItemReceived&#x60;\&quot; - \&quot;&#x60;itemMissing&#x60;\&quot; - \&quot;&#x60;qualityNotExpected&#x60;\&quot; - \&quot;&#x60;receivedTooLate&#x60;\&quot; - \&quot;&#x60;storePackageMissing&#x60;\&quot; - \&quot;&#x60;transitPackageMissing&#x60;\&quot; - \&quot;&#x60;unsuccessfulDeliveryUndeliverable&#x60;\&quot; - \&quot;&#x60;wrongChargeInStore&#x60;\&quot; - \&quot;&#x60;wrongItem&#x60;\&quot; - \&quot;&#x60;returns&#x60;\&quot; - \&quot;&#x60;undeliverable&#x60;\&quot; - \&quot;&#x60;issueRelatedRefundAndReplacementAmountDescription&#x60;\&quot; - \&quot;&#x60;refundFromMerchant&#x60;\&quot; - \&quot;&#x60;returnLabelShippingFee&#x60;\&quot; - \&quot;&#x60;lumpSumCorrection&#x60;\&quot; - \&quot;&#x60;pspFee&#x60;\&quot; - \&quot;&#x60;principalRefundDoesNotFit&#x60;\&quot; - \&quot;&#x60;principalRefundOrderedWrongItem&#x60;\&quot; - \&quot;&#x60;principalRefundQualityNotExpected&#x60;\&quot; - \&quot;&#x60;principalRefundBetterPriceFound&#x60;\&quot; - \&quot;&#x60;principalRefundNoLongerNeeded&#x60;\&quot; - \&quot;&#x60;principalRefundChangedMind&#x60;\&quot; - \&quot;&#x60;principalRefundReceivedTooLate&#x60;\&quot; - \&quot;&#x60;principalRefundIncorrectItemReceived&#x60;\&quot; - \&quot;&#x60;principalRefundDamagedOrDefectiveItem&#x60;\&quot; - \&quot;&#x60;principalRefundDidNotMatchDescription&#x60;\&quot; - \&quot;&#x60;principalRefundExpiredItem&#x60;\&quot; 
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SettlementTransactionAmount transactionAmount(Price transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

  /**
   * Get transactionAmount
   * @return transactionAmount
   */
  @javax.annotation.Nullable
  public Price getTransactionAmount() {
    return transactionAmount;
  }

  public void setTransactionAmount(Price transactionAmount) {
    this.transactionAmount = transactionAmount;
  }


  public SettlementTransactionAmount type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the amount. Acceptable values are: - \&quot;&#x60;itemPrice&#x60;\&quot; - \&quot;&#x60;orderPrice&#x60;\&quot; - \&quot;&#x60;refund&#x60;\&quot; - \&quot;&#x60;earlyRefund&#x60;\&quot; - \&quot;&#x60;courtesyRefund&#x60;\&quot; - \&quot;&#x60;returnRefund&#x60;\&quot; - \&quot;&#x60;returnLabelShippingFeeAmount&#x60;\&quot; - \&quot;&#x60;lumpSumCorrectionAmount&#x60;\&quot; 
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettlementTransactionAmount settlementTransactionAmount = (SettlementTransactionAmount) o;
    return Objects.equals(this.commission, settlementTransactionAmount.commission) &&
        Objects.equals(this.description, settlementTransactionAmount.description) &&
        Objects.equals(this.transactionAmount, settlementTransactionAmount.transactionAmount) &&
        Objects.equals(this.type, settlementTransactionAmount.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commission, description, transactionAmount, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettlementTransactionAmount {\n");
    sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commission");
    openapiFields.add("description");
    openapiFields.add("transactionAmount");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SettlementTransactionAmount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SettlementTransactionAmount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SettlementTransactionAmount is not found in the empty JSON string", SettlementTransactionAmount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SettlementTransactionAmount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SettlementTransactionAmount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `commission`
      if (jsonObj.get("commission") != null && !jsonObj.get("commission").isJsonNull()) {
        SettlementTransactionAmountCommission.validateJsonElement(jsonObj.get("commission"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `transactionAmount`
      if (jsonObj.get("transactionAmount") != null && !jsonObj.get("transactionAmount").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("transactionAmount"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SettlementTransactionAmount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SettlementTransactionAmount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SettlementTransactionAmount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SettlementTransactionAmount.class));

       return (TypeAdapter<T>) new TypeAdapter<SettlementTransactionAmount>() {
           @Override
           public void write(JsonWriter out, SettlementTransactionAmount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SettlementTransactionAmount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SettlementTransactionAmount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SettlementTransactionAmount
   * @throws IOException if the JSON string is invalid with respect to SettlementTransactionAmount
   */
  public static SettlementTransactionAmount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SettlementTransactionAmount.class);
  }

  /**
   * Convert an instance of SettlementTransactionAmount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

