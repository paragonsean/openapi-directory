/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UrlSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &#x60;CheckoutSettings&#x60; for a specific merchant ID.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckoutSettings {
  /**
   * Output only. The effective value of enrollment state for a given merchant ID. If account level settings are present then this value will be a copy of the account level settings. Otherwise, it will have the value of the parent account.
   */
  @JsonAdapter(EffectiveEnrollmentStateEnum.Adapter.class)
  public enum EffectiveEnrollmentStateEnum {
    CHECKOUT_ON_MERCHANT_ENROLLMENT_STATE_UNSPECIFIED("CHECKOUT_ON_MERCHANT_ENROLLMENT_STATE_UNSPECIFIED"),
    
    INACTIVE("INACTIVE"),
    
    ENROLLED("ENROLLED"),
    
    OPT_OUT("OPT_OUT");

    private String value;

    EffectiveEnrollmentStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EffectiveEnrollmentStateEnum fromValue(String value) {
      for (EffectiveEnrollmentStateEnum b : EffectiveEnrollmentStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EffectiveEnrollmentStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EffectiveEnrollmentStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EffectiveEnrollmentStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EffectiveEnrollmentStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EffectiveEnrollmentStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EFFECTIVE_ENROLLMENT_STATE = "effectiveEnrollmentState";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_ENROLLMENT_STATE)
  private EffectiveEnrollmentStateEnum effectiveEnrollmentState;

  /**
   * Output only. The effective value of review state for a given merchant ID. If account level settings are present then this value will be a copy of the account level settings. Otherwise, it will have the value of the parent account.
   */
  @JsonAdapter(EffectiveReviewStateEnum.Adapter.class)
  public enum EffectiveReviewStateEnum {
    CHECKOUT_ON_MERCHANT_REVIEW_STATE_UNSPECIFIED("CHECKOUT_ON_MERCHANT_REVIEW_STATE_UNSPECIFIED"),
    
    IN_REVIEW("IN_REVIEW"),
    
    APPROVED("APPROVED"),
    
    DISAPPROVED("DISAPPROVED");

    private String value;

    EffectiveReviewStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EffectiveReviewStateEnum fromValue(String value) {
      for (EffectiveReviewStateEnum b : EffectiveReviewStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EffectiveReviewStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EffectiveReviewStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EffectiveReviewStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EffectiveReviewStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EffectiveReviewStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EFFECTIVE_REVIEW_STATE = "effectiveReviewState";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_REVIEW_STATE)
  private EffectiveReviewStateEnum effectiveReviewState;

  public static final String SERIALIZED_NAME_EFFECTIVE_URI_SETTINGS = "effectiveUriSettings";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_URI_SETTINGS)
  private UrlSettings effectiveUriSettings;

  /**
   * Output only. Reflects the merchant enrollment state in &#x60;Checkout&#x60; feature.
   */
  @JsonAdapter(EnrollmentStateEnum.Adapter.class)
  public enum EnrollmentStateEnum {
    CHECKOUT_ON_MERCHANT_ENROLLMENT_STATE_UNSPECIFIED("CHECKOUT_ON_MERCHANT_ENROLLMENT_STATE_UNSPECIFIED"),
    
    INACTIVE("INACTIVE"),
    
    ENROLLED("ENROLLED"),
    
    OPT_OUT("OPT_OUT");

    private String value;

    EnrollmentStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnrollmentStateEnum fromValue(String value) {
      for (EnrollmentStateEnum b : EnrollmentStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnrollmentStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnrollmentStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnrollmentStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnrollmentStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnrollmentStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENROLLMENT_STATE = "enrollmentState";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_STATE)
  private EnrollmentStateEnum enrollmentState;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  /**
   * Output only. Reflects the merchant review state in &#x60;Checkout&#x60; feature. This is set based on the data quality reviews of the URL provided by the merchant. A merchant with enrollment state as &#x60;ENROLLED&#x60; can be in the following review states: &#x60;IN_REVIEW&#x60;, &#x60;APPROVED&#x60; or &#x60;DISAPPROVED&#x60;. A merchant must be in an enrollment_state of &#x60;ENROLLED&#x60; before a review can begin for the merchant.
   */
  @JsonAdapter(ReviewStateEnum.Adapter.class)
  public enum ReviewStateEnum {
    CHECKOUT_ON_MERCHANT_REVIEW_STATE_UNSPECIFIED("CHECKOUT_ON_MERCHANT_REVIEW_STATE_UNSPECIFIED"),
    
    IN_REVIEW("IN_REVIEW"),
    
    APPROVED("APPROVED"),
    
    DISAPPROVED("DISAPPROVED");

    private String value;

    ReviewStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReviewStateEnum fromValue(String value) {
      for (ReviewStateEnum b : ReviewStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReviewStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReviewStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReviewStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReviewStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReviewStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REVIEW_STATE = "reviewState";
  @SerializedName(SERIALIZED_NAME_REVIEW_STATE)
  private ReviewStateEnum reviewState;

  public static final String SERIALIZED_NAME_URI_SETTINGS = "uriSettings";
  @SerializedName(SERIALIZED_NAME_URI_SETTINGS)
  private UrlSettings uriSettings;

  public CheckoutSettings() {
  }

  public CheckoutSettings(
     EffectiveEnrollmentStateEnum effectiveEnrollmentState, 
     EffectiveReviewStateEnum effectiveReviewState, 
     EnrollmentStateEnum enrollmentState, 
     ReviewStateEnum reviewState
  ) {
    this();
    this.effectiveEnrollmentState = effectiveEnrollmentState;
    this.effectiveReviewState = effectiveReviewState;
    this.enrollmentState = enrollmentState;
    this.reviewState = reviewState;
  }

  /**
   * Output only. The effective value of enrollment state for a given merchant ID. If account level settings are present then this value will be a copy of the account level settings. Otherwise, it will have the value of the parent account.
   * @return effectiveEnrollmentState
   */
  @javax.annotation.Nullable
  public EffectiveEnrollmentStateEnum getEffectiveEnrollmentState() {
    return effectiveEnrollmentState;
  }



  /**
   * Output only. The effective value of review state for a given merchant ID. If account level settings are present then this value will be a copy of the account level settings. Otherwise, it will have the value of the parent account.
   * @return effectiveReviewState
   */
  @javax.annotation.Nullable
  public EffectiveReviewStateEnum getEffectiveReviewState() {
    return effectiveReviewState;
  }



  public CheckoutSettings effectiveUriSettings(UrlSettings effectiveUriSettings) {
    this.effectiveUriSettings = effectiveUriSettings;
    return this;
  }

  /**
   * Get effectiveUriSettings
   * @return effectiveUriSettings
   */
  @javax.annotation.Nullable
  public UrlSettings getEffectiveUriSettings() {
    return effectiveUriSettings;
  }

  public void setEffectiveUriSettings(UrlSettings effectiveUriSettings) {
    this.effectiveUriSettings = effectiveUriSettings;
  }


  /**
   * Output only. Reflects the merchant enrollment state in &#x60;Checkout&#x60; feature.
   * @return enrollmentState
   */
  @javax.annotation.Nullable
  public EnrollmentStateEnum getEnrollmentState() {
    return enrollmentState;
  }



  public CheckoutSettings merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  /**
   * Required. The ID of the account.
   * @return merchantId
   */
  @javax.annotation.Nullable
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  /**
   * Output only. Reflects the merchant review state in &#x60;Checkout&#x60; feature. This is set based on the data quality reviews of the URL provided by the merchant. A merchant with enrollment state as &#x60;ENROLLED&#x60; can be in the following review states: &#x60;IN_REVIEW&#x60;, &#x60;APPROVED&#x60; or &#x60;DISAPPROVED&#x60;. A merchant must be in an enrollment_state of &#x60;ENROLLED&#x60; before a review can begin for the merchant.
   * @return reviewState
   */
  @javax.annotation.Nullable
  public ReviewStateEnum getReviewState() {
    return reviewState;
  }



  public CheckoutSettings uriSettings(UrlSettings uriSettings) {
    this.uriSettings = uriSettings;
    return this;
  }

  /**
   * Get uriSettings
   * @return uriSettings
   */
  @javax.annotation.Nullable
  public UrlSettings getUriSettings() {
    return uriSettings;
  }

  public void setUriSettings(UrlSettings uriSettings) {
    this.uriSettings = uriSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutSettings checkoutSettings = (CheckoutSettings) o;
    return Objects.equals(this.effectiveEnrollmentState, checkoutSettings.effectiveEnrollmentState) &&
        Objects.equals(this.effectiveReviewState, checkoutSettings.effectiveReviewState) &&
        Objects.equals(this.effectiveUriSettings, checkoutSettings.effectiveUriSettings) &&
        Objects.equals(this.enrollmentState, checkoutSettings.enrollmentState) &&
        Objects.equals(this.merchantId, checkoutSettings.merchantId) &&
        Objects.equals(this.reviewState, checkoutSettings.reviewState) &&
        Objects.equals(this.uriSettings, checkoutSettings.uriSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveEnrollmentState, effectiveReviewState, effectiveUriSettings, enrollmentState, merchantId, reviewState, uriSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutSettings {\n");
    sb.append("    effectiveEnrollmentState: ").append(toIndentedString(effectiveEnrollmentState)).append("\n");
    sb.append("    effectiveReviewState: ").append(toIndentedString(effectiveReviewState)).append("\n");
    sb.append("    effectiveUriSettings: ").append(toIndentedString(effectiveUriSettings)).append("\n");
    sb.append("    enrollmentState: ").append(toIndentedString(enrollmentState)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    reviewState: ").append(toIndentedString(reviewState)).append("\n");
    sb.append("    uriSettings: ").append(toIndentedString(uriSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("effectiveEnrollmentState");
    openapiFields.add("effectiveReviewState");
    openapiFields.add("effectiveUriSettings");
    openapiFields.add("enrollmentState");
    openapiFields.add("merchantId");
    openapiFields.add("reviewState");
    openapiFields.add("uriSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckoutSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckoutSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutSettings is not found in the empty JSON string", CheckoutSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckoutSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckoutSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("effectiveEnrollmentState") != null && !jsonObj.get("effectiveEnrollmentState").isJsonNull()) && !jsonObj.get("effectiveEnrollmentState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveEnrollmentState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveEnrollmentState").toString()));
      }
      // validate the optional field `effectiveEnrollmentState`
      if (jsonObj.get("effectiveEnrollmentState") != null && !jsonObj.get("effectiveEnrollmentState").isJsonNull()) {
        EffectiveEnrollmentStateEnum.validateJsonElement(jsonObj.get("effectiveEnrollmentState"));
      }
      if ((jsonObj.get("effectiveReviewState") != null && !jsonObj.get("effectiveReviewState").isJsonNull()) && !jsonObj.get("effectiveReviewState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveReviewState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveReviewState").toString()));
      }
      // validate the optional field `effectiveReviewState`
      if (jsonObj.get("effectiveReviewState") != null && !jsonObj.get("effectiveReviewState").isJsonNull()) {
        EffectiveReviewStateEnum.validateJsonElement(jsonObj.get("effectiveReviewState"));
      }
      // validate the optional field `effectiveUriSettings`
      if (jsonObj.get("effectiveUriSettings") != null && !jsonObj.get("effectiveUriSettings").isJsonNull()) {
        UrlSettings.validateJsonElement(jsonObj.get("effectiveUriSettings"));
      }
      if ((jsonObj.get("enrollmentState") != null && !jsonObj.get("enrollmentState").isJsonNull()) && !jsonObj.get("enrollmentState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollmentState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollmentState").toString()));
      }
      // validate the optional field `enrollmentState`
      if (jsonObj.get("enrollmentState") != null && !jsonObj.get("enrollmentState").isJsonNull()) {
        EnrollmentStateEnum.validateJsonElement(jsonObj.get("enrollmentState"));
      }
      if ((jsonObj.get("merchantId") != null && !jsonObj.get("merchantId").isJsonNull()) && !jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      if ((jsonObj.get("reviewState") != null && !jsonObj.get("reviewState").isJsonNull()) && !jsonObj.get("reviewState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewState").toString()));
      }
      // validate the optional field `reviewState`
      if (jsonObj.get("reviewState") != null && !jsonObj.get("reviewState").isJsonNull()) {
        ReviewStateEnum.validateJsonElement(jsonObj.get("reviewState"));
      }
      // validate the optional field `uriSettings`
      if (jsonObj.get("uriSettings") != null && !jsonObj.get("uriSettings").isJsonNull()) {
        UrlSettings.validateJsonElement(jsonObj.get("uriSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutSettings>() {
           @Override
           public void write(JsonWriter out, CheckoutSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckoutSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckoutSettings
   * @throws IOException if the JSON string is invalid with respect to CheckoutSettings
   */
  public static CheckoutSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutSettings.class);
  }

  /**
   * Convert an instance of CheckoutSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

