/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Distance;
import org.openapitools.client.model.ServiceStoreConfigCutoffConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Stores that provide local delivery. Only valid with local delivery fulfillment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceStoreConfig {
  public static final String SERIALIZED_NAME_CUTOFF_CONFIG = "cutoffConfig";
  @SerializedName(SERIALIZED_NAME_CUTOFF_CONFIG)
  private ServiceStoreConfigCutoffConfig cutoffConfig;

  public static final String SERIALIZED_NAME_SERVICE_RADIUS = "serviceRadius";
  @SerializedName(SERIALIZED_NAME_SERVICE_RADIUS)
  private Distance serviceRadius;

  public static final String SERIALIZED_NAME_STORE_CODES = "storeCodes";
  @SerializedName(SERIALIZED_NAME_STORE_CODES)
  private List<String> storeCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORE_SERVICE_TYPE = "storeServiceType";
  @SerializedName(SERIALIZED_NAME_STORE_SERVICE_TYPE)
  private String storeServiceType;

  public ServiceStoreConfig() {
  }

  public ServiceStoreConfig cutoffConfig(ServiceStoreConfigCutoffConfig cutoffConfig) {
    this.cutoffConfig = cutoffConfig;
    return this;
  }

  /**
   * Get cutoffConfig
   * @return cutoffConfig
   */
  @javax.annotation.Nullable
  public ServiceStoreConfigCutoffConfig getCutoffConfig() {
    return cutoffConfig;
  }

  public void setCutoffConfig(ServiceStoreConfigCutoffConfig cutoffConfig) {
    this.cutoffConfig = cutoffConfig;
  }


  public ServiceStoreConfig serviceRadius(Distance serviceRadius) {
    this.serviceRadius = serviceRadius;
    return this;
  }

  /**
   * Get serviceRadius
   * @return serviceRadius
   */
  @javax.annotation.Nullable
  public Distance getServiceRadius() {
    return serviceRadius;
  }

  public void setServiceRadius(Distance serviceRadius) {
    this.serviceRadius = serviceRadius;
  }


  public ServiceStoreConfig storeCodes(List<String> storeCodes) {
    this.storeCodes = storeCodes;
    return this;
  }

  public ServiceStoreConfig addStoreCodesItem(String storeCodesItem) {
    if (this.storeCodes == null) {
      this.storeCodes = new ArrayList<>();
    }
    this.storeCodes.add(storeCodesItem);
    return this;
  }

  /**
   * A list of store codes that provide local delivery. If empty, then &#x60;store_service_type&#x60; must be &#x60;all_stores&#x60;, or an error is thrown. If not empty, then &#x60;store_service_type&#x60; must be &#x60;selected_stores&#x60;, or an error is thrown.
   * @return storeCodes
   */
  @javax.annotation.Nullable
  public List<String> getStoreCodes() {
    return storeCodes;
  }

  public void setStoreCodes(List<String> storeCodes) {
    this.storeCodes = storeCodes;
  }


  public ServiceStoreConfig storeServiceType(String storeServiceType) {
    this.storeServiceType = storeServiceType;
    return this;
  }

  /**
   * Indicates whether all stores listed by this merchant provide local delivery or not. Acceptable values are &#x60;all stores&#x60; and &#x60;selected stores&#x60;
   * @return storeServiceType
   */
  @javax.annotation.Nullable
  public String getStoreServiceType() {
    return storeServiceType;
  }

  public void setStoreServiceType(String storeServiceType) {
    this.storeServiceType = storeServiceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceStoreConfig serviceStoreConfig = (ServiceStoreConfig) o;
    return Objects.equals(this.cutoffConfig, serviceStoreConfig.cutoffConfig) &&
        Objects.equals(this.serviceRadius, serviceStoreConfig.serviceRadius) &&
        Objects.equals(this.storeCodes, serviceStoreConfig.storeCodes) &&
        Objects.equals(this.storeServiceType, serviceStoreConfig.storeServiceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cutoffConfig, serviceRadius, storeCodes, storeServiceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceStoreConfig {\n");
    sb.append("    cutoffConfig: ").append(toIndentedString(cutoffConfig)).append("\n");
    sb.append("    serviceRadius: ").append(toIndentedString(serviceRadius)).append("\n");
    sb.append("    storeCodes: ").append(toIndentedString(storeCodes)).append("\n");
    sb.append("    storeServiceType: ").append(toIndentedString(storeServiceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cutoffConfig");
    openapiFields.add("serviceRadius");
    openapiFields.add("storeCodes");
    openapiFields.add("storeServiceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceStoreConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceStoreConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceStoreConfig is not found in the empty JSON string", ServiceStoreConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceStoreConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceStoreConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cutoffConfig`
      if (jsonObj.get("cutoffConfig") != null && !jsonObj.get("cutoffConfig").isJsonNull()) {
        ServiceStoreConfigCutoffConfig.validateJsonElement(jsonObj.get("cutoffConfig"));
      }
      // validate the optional field `serviceRadius`
      if (jsonObj.get("serviceRadius") != null && !jsonObj.get("serviceRadius").isJsonNull()) {
        Distance.validateJsonElement(jsonObj.get("serviceRadius"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("storeCodes") != null && !jsonObj.get("storeCodes").isJsonNull() && !jsonObj.get("storeCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeCodes` to be an array in the JSON string but got `%s`", jsonObj.get("storeCodes").toString()));
      }
      if ((jsonObj.get("storeServiceType") != null && !jsonObj.get("storeServiceType").isJsonNull()) && !jsonObj.get("storeServiceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeServiceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeServiceType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceStoreConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceStoreConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceStoreConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceStoreConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceStoreConfig>() {
           @Override
           public void write(JsonWriter out, ServiceStoreConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceStoreConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceStoreConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceStoreConfig
   * @throws IOException if the JSON string is invalid with respect to ServiceStoreConfig
   */
  public static ServiceStoreConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceStoreConfig.class);
  }

  /**
   * Convert an instance of ServiceStoreConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

