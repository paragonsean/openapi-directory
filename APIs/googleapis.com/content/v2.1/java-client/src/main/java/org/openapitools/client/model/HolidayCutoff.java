/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HolidayCutoff
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HolidayCutoff {
  public static final String SERIALIZED_NAME_DEADLINE_DATE = "deadlineDate";
  @SerializedName(SERIALIZED_NAME_DEADLINE_DATE)
  private String deadlineDate;

  public static final String SERIALIZED_NAME_DEADLINE_HOUR = "deadlineHour";
  @SerializedName(SERIALIZED_NAME_DEADLINE_HOUR)
  private Integer deadlineHour;

  public static final String SERIALIZED_NAME_DEADLINE_TIMEZONE = "deadlineTimezone";
  @SerializedName(SERIALIZED_NAME_DEADLINE_TIMEZONE)
  private String deadlineTimezone;

  public static final String SERIALIZED_NAME_HOLIDAY_ID = "holidayId";
  @SerializedName(SERIALIZED_NAME_HOLIDAY_ID)
  private String holidayId;

  public static final String SERIALIZED_NAME_VISIBLE_FROM_DATE = "visibleFromDate";
  @SerializedName(SERIALIZED_NAME_VISIBLE_FROM_DATE)
  private String visibleFromDate;

  public HolidayCutoff() {
  }

  public HolidayCutoff deadlineDate(String deadlineDate) {
    this.deadlineDate = deadlineDate;
    return this;
  }

  /**
   * Date of the order deadline, in ISO 8601 format. For example, \&quot;2016-11-29\&quot; for 29th November 2016. Required.
   * @return deadlineDate
   */
  @javax.annotation.Nullable
  public String getDeadlineDate() {
    return deadlineDate;
  }

  public void setDeadlineDate(String deadlineDate) {
    this.deadlineDate = deadlineDate;
  }


  public HolidayCutoff deadlineHour(Integer deadlineHour) {
    this.deadlineHour = deadlineHour;
    return this;
  }

  /**
   * Hour of the day on the deadline date until which the order has to be placed to qualify for the delivery guarantee. Possible values are: 0 (midnight), 1, ..., 12 (noon), 13, ..., 23. Required.
   * @return deadlineHour
   */
  @javax.annotation.Nullable
  public Integer getDeadlineHour() {
    return deadlineHour;
  }

  public void setDeadlineHour(Integer deadlineHour) {
    this.deadlineHour = deadlineHour;
  }


  public HolidayCutoff deadlineTimezone(String deadlineTimezone) {
    this.deadlineTimezone = deadlineTimezone;
    return this;
  }

  /**
   * Timezone identifier for the deadline hour (for example, \&quot;Europe/Zurich\&quot;). List of identifiers. Required.
   * @return deadlineTimezone
   */
  @javax.annotation.Nullable
  public String getDeadlineTimezone() {
    return deadlineTimezone;
  }

  public void setDeadlineTimezone(String deadlineTimezone) {
    this.deadlineTimezone = deadlineTimezone;
  }


  public HolidayCutoff holidayId(String holidayId) {
    this.holidayId = holidayId;
    return this;
  }

  /**
   * Unique identifier for the holiday. Required.
   * @return holidayId
   */
  @javax.annotation.Nullable
  public String getHolidayId() {
    return holidayId;
  }

  public void setHolidayId(String holidayId) {
    this.holidayId = holidayId;
  }


  public HolidayCutoff visibleFromDate(String visibleFromDate) {
    this.visibleFromDate = visibleFromDate;
    return this;
  }

  /**
   * Date on which the deadline will become visible to consumers in ISO 8601 format. For example, \&quot;2016-10-31\&quot; for 31st October 2016. Required.
   * @return visibleFromDate
   */
  @javax.annotation.Nullable
  public String getVisibleFromDate() {
    return visibleFromDate;
  }

  public void setVisibleFromDate(String visibleFromDate) {
    this.visibleFromDate = visibleFromDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HolidayCutoff holidayCutoff = (HolidayCutoff) o;
    return Objects.equals(this.deadlineDate, holidayCutoff.deadlineDate) &&
        Objects.equals(this.deadlineHour, holidayCutoff.deadlineHour) &&
        Objects.equals(this.deadlineTimezone, holidayCutoff.deadlineTimezone) &&
        Objects.equals(this.holidayId, holidayCutoff.holidayId) &&
        Objects.equals(this.visibleFromDate, holidayCutoff.visibleFromDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deadlineDate, deadlineHour, deadlineTimezone, holidayId, visibleFromDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HolidayCutoff {\n");
    sb.append("    deadlineDate: ").append(toIndentedString(deadlineDate)).append("\n");
    sb.append("    deadlineHour: ").append(toIndentedString(deadlineHour)).append("\n");
    sb.append("    deadlineTimezone: ").append(toIndentedString(deadlineTimezone)).append("\n");
    sb.append("    holidayId: ").append(toIndentedString(holidayId)).append("\n");
    sb.append("    visibleFromDate: ").append(toIndentedString(visibleFromDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deadlineDate");
    openapiFields.add("deadlineHour");
    openapiFields.add("deadlineTimezone");
    openapiFields.add("holidayId");
    openapiFields.add("visibleFromDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HolidayCutoff
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HolidayCutoff.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HolidayCutoff is not found in the empty JSON string", HolidayCutoff.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HolidayCutoff.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HolidayCutoff` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deadlineDate") != null && !jsonObj.get("deadlineDate").isJsonNull()) && !jsonObj.get("deadlineDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deadlineDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deadlineDate").toString()));
      }
      if ((jsonObj.get("deadlineTimezone") != null && !jsonObj.get("deadlineTimezone").isJsonNull()) && !jsonObj.get("deadlineTimezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deadlineTimezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deadlineTimezone").toString()));
      }
      if ((jsonObj.get("holidayId") != null && !jsonObj.get("holidayId").isJsonNull()) && !jsonObj.get("holidayId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holidayId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holidayId").toString()));
      }
      if ((jsonObj.get("visibleFromDate") != null && !jsonObj.get("visibleFromDate").isJsonNull()) && !jsonObj.get("visibleFromDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibleFromDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibleFromDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HolidayCutoff.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HolidayCutoff' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HolidayCutoff> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HolidayCutoff.class));

       return (TypeAdapter<T>) new TypeAdapter<HolidayCutoff>() {
           @Override
           public void write(JsonWriter out, HolidayCutoff value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HolidayCutoff read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HolidayCutoff given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HolidayCutoff
   * @throws IOException if the JSON string is invalid with respect to HolidayCutoff
   */
  public static HolidayCutoff fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HolidayCutoff.class);
  }

  /**
   * Convert an instance of HolidayCutoff to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

