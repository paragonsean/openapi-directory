/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Performance metrics. Values are only set for metrics requested explicitly in the request&#39;s search query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Metrics {
  public static final String SERIALIZED_NAME_AOS = "aos";
  @SerializedName(SERIALIZED_NAME_AOS)
  private Double aos;

  public static final String SERIALIZED_NAME_AOV_MICROS = "aovMicros";
  @SerializedName(SERIALIZED_NAME_AOV_MICROS)
  private Double aovMicros;

  public static final String SERIALIZED_NAME_CLICKS = "clicks";
  @SerializedName(SERIALIZED_NAME_CLICKS)
  private String clicks;

  public static final String SERIALIZED_NAME_CONVERSION_RATE = "conversionRate";
  @SerializedName(SERIALIZED_NAME_CONVERSION_RATE)
  private Double conversionRate;

  public static final String SERIALIZED_NAME_CONVERSION_VALUE_MICROS = "conversionValueMicros";
  @SerializedName(SERIALIZED_NAME_CONVERSION_VALUE_MICROS)
  private String conversionValueMicros;

  public static final String SERIALIZED_NAME_CONVERSIONS = "conversions";
  @SerializedName(SERIALIZED_NAME_CONVERSIONS)
  private Double conversions;

  public static final String SERIALIZED_NAME_CTR = "ctr";
  @SerializedName(SERIALIZED_NAME_CTR)
  private Double ctr;

  public static final String SERIALIZED_NAME_DAYS_TO_SHIP = "daysToShip";
  @SerializedName(SERIALIZED_NAME_DAYS_TO_SHIP)
  private Double daysToShip;

  public static final String SERIALIZED_NAME_IMPRESSIONS = "impressions";
  @SerializedName(SERIALIZED_NAME_IMPRESSIONS)
  private String impressions;

  public static final String SERIALIZED_NAME_ITEM_DAYS_TO_SHIP = "itemDaysToShip";
  @SerializedName(SERIALIZED_NAME_ITEM_DAYS_TO_SHIP)
  private Double itemDaysToShip;

  public static final String SERIALIZED_NAME_ITEM_FILL_RATE = "itemFillRate";
  @SerializedName(SERIALIZED_NAME_ITEM_FILL_RATE)
  private Double itemFillRate;

  public static final String SERIALIZED_NAME_ORDERED_ITEM_SALES_MICROS = "orderedItemSalesMicros";
  @SerializedName(SERIALIZED_NAME_ORDERED_ITEM_SALES_MICROS)
  private String orderedItemSalesMicros;

  public static final String SERIALIZED_NAME_ORDERED_ITEMS = "orderedItems";
  @SerializedName(SERIALIZED_NAME_ORDERED_ITEMS)
  private String orderedItems;

  public static final String SERIALIZED_NAME_ORDERS = "orders";
  @SerializedName(SERIALIZED_NAME_ORDERS)
  private String orders;

  public static final String SERIALIZED_NAME_REJECTED_ITEMS = "rejectedItems";
  @SerializedName(SERIALIZED_NAME_REJECTED_ITEMS)
  private String rejectedItems;

  public static final String SERIALIZED_NAME_RETURN_RATE = "returnRate";
  @SerializedName(SERIALIZED_NAME_RETURN_RATE)
  private Double returnRate;

  public static final String SERIALIZED_NAME_RETURNED_ITEMS = "returnedItems";
  @SerializedName(SERIALIZED_NAME_RETURNED_ITEMS)
  private String returnedItems;

  public static final String SERIALIZED_NAME_RETURNS_MICROS = "returnsMicros";
  @SerializedName(SERIALIZED_NAME_RETURNS_MICROS)
  private String returnsMicros;

  public static final String SERIALIZED_NAME_SHIPPED_ITEM_SALES_MICROS = "shippedItemSalesMicros";
  @SerializedName(SERIALIZED_NAME_SHIPPED_ITEM_SALES_MICROS)
  private String shippedItemSalesMicros;

  public static final String SERIALIZED_NAME_SHIPPED_ITEMS = "shippedItems";
  @SerializedName(SERIALIZED_NAME_SHIPPED_ITEMS)
  private String shippedItems;

  public static final String SERIALIZED_NAME_SHIPPED_ORDERS = "shippedOrders";
  @SerializedName(SERIALIZED_NAME_SHIPPED_ORDERS)
  private String shippedOrders;

  public static final String SERIALIZED_NAME_UNSHIPPED_ITEMS = "unshippedItems";
  @SerializedName(SERIALIZED_NAME_UNSHIPPED_ITEMS)
  private Double unshippedItems;

  public static final String SERIALIZED_NAME_UNSHIPPED_ORDERS = "unshippedOrders";
  @SerializedName(SERIALIZED_NAME_UNSHIPPED_ORDERS)
  private Double unshippedOrders;

  public Metrics() {
  }

  public Metrics aos(Double aos) {
    this.aos = aos;
    return this;
  }

  /**
   * Average order size - the average number of items in an order. **This metric cannot be segmented by product dimensions and customer_country_code.**
   * @return aos
   */
  @javax.annotation.Nullable
  public Double getAos() {
    return aos;
  }

  public void setAos(Double aos) {
    this.aos = aos;
  }


  public Metrics aovMicros(Double aovMicros) {
    this.aovMicros = aovMicros;
    return this;
  }

  /**
   * Average order value in micros (1 millionth of a standard unit, 1 USD &#x3D; 1000000 micros) - the average value (total price of items) of all placed orders. The currency of the returned value is stored in the currency_code segment. If this metric is selected, &#39;segments.currency_code&#39; is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by product dimensions and customer_country_code.**
   * @return aovMicros
   */
  @javax.annotation.Nullable
  public Double getAovMicros() {
    return aovMicros;
  }

  public void setAovMicros(Double aovMicros) {
    this.aovMicros = aovMicros;
  }


  public Metrics clicks(String clicks) {
    this.clicks = clicks;
    return this;
  }

  /**
   * Number of clicks.
   * @return clicks
   */
  @javax.annotation.Nullable
  public String getClicks() {
    return clicks;
  }

  public void setClicks(String clicks) {
    this.clicks = clicks;
  }


  public Metrics conversionRate(Double conversionRate) {
    this.conversionRate = conversionRate;
    return this;
  }

  /**
   * Number of conversions divided by the number of clicks, reported on the impression date. The metric is currently available only for the FREE_PRODUCT_LISTING program.
   * @return conversionRate
   */
  @javax.annotation.Nullable
  public Double getConversionRate() {
    return conversionRate;
  }

  public void setConversionRate(Double conversionRate) {
    this.conversionRate = conversionRate;
  }


  public Metrics conversionValueMicros(String conversionValueMicros) {
    this.conversionValueMicros = conversionValueMicros;
    return this;
  }

  /**
   * Value of conversions in micros (1 millionth of a standard unit, 1 USD &#x3D; 1000000 micros) attributed to the product, reported on the conversion date. The metric is currently available only for the FREE_PRODUCT_LISTING program. The currency of the returned value is stored in the currency_code segment. If this metric is selected, &#39;segments.currency_code&#39; is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response.
   * @return conversionValueMicros
   */
  @javax.annotation.Nullable
  public String getConversionValueMicros() {
    return conversionValueMicros;
  }

  public void setConversionValueMicros(String conversionValueMicros) {
    this.conversionValueMicros = conversionValueMicros;
  }


  public Metrics conversions(Double conversions) {
    this.conversions = conversions;
    return this;
  }

  /**
   * Number of conversions attributed to the product, reported on the conversion date. Depending on the attribution model, a conversion might be distributed across multiple clicks, where each click gets its own credit assigned. This metric is a sum of all such credits. The metric is currently available only for the FREE_PRODUCT_LISTING program.
   * @return conversions
   */
  @javax.annotation.Nullable
  public Double getConversions() {
    return conversions;
  }

  public void setConversions(Double conversions) {
    this.conversions = conversions;
  }


  public Metrics ctr(Double ctr) {
    this.ctr = ctr;
    return this;
  }

  /**
   * Click-through rate - the number of clicks merchant&#39;s products receive (clicks) divided by the number of times the products are shown (impressions).
   * @return ctr
   */
  @javax.annotation.Nullable
  public Double getCtr() {
    return ctr;
  }

  public void setCtr(Double ctr) {
    this.ctr = ctr;
  }


  public Metrics daysToShip(Double daysToShip) {
    this.daysToShip = daysToShip;
    return this;
  }

  /**
   * Average number of days between an order being placed and the order being fully shipped, reported on the last shipment date. **This metric cannot be segmented by product dimensions and customer_country_code.**
   * @return daysToShip
   */
  @javax.annotation.Nullable
  public Double getDaysToShip() {
    return daysToShip;
  }

  public void setDaysToShip(Double daysToShip) {
    this.daysToShip = daysToShip;
  }


  public Metrics impressions(String impressions) {
    this.impressions = impressions;
    return this;
  }

  /**
   * Number of times merchant&#39;s products are shown.
   * @return impressions
   */
  @javax.annotation.Nullable
  public String getImpressions() {
    return impressions;
  }

  public void setImpressions(String impressions) {
    this.impressions = impressions;
  }


  public Metrics itemDaysToShip(Double itemDaysToShip) {
    this.itemDaysToShip = itemDaysToShip;
    return this;
  }

  /**
   * Average number of days between an item being ordered and the item being **This metric cannot be segmented by customer_country_code.**
   * @return itemDaysToShip
   */
  @javax.annotation.Nullable
  public Double getItemDaysToShip() {
    return itemDaysToShip;
  }

  public void setItemDaysToShip(Double itemDaysToShip) {
    this.itemDaysToShip = itemDaysToShip;
  }


  public Metrics itemFillRate(Double itemFillRate) {
    this.itemFillRate = itemFillRate;
    return this;
  }

  /**
   * Percentage of shipped items in relation to all finalized items (shipped or rejected by the merchant; unshipped items are not taken into account), reported on the order date. Item fill rate is lowered by merchant rejections. **This metric cannot be segmented by customer_country_code.**
   * @return itemFillRate
   */
  @javax.annotation.Nullable
  public Double getItemFillRate() {
    return itemFillRate;
  }

  public void setItemFillRate(Double itemFillRate) {
    this.itemFillRate = itemFillRate;
  }


  public Metrics orderedItemSalesMicros(String orderedItemSalesMicros) {
    this.orderedItemSalesMicros = orderedItemSalesMicros;
    return this;
  }

  /**
   * Total price of ordered items in micros (1 millionth of a standard unit, 1 USD &#x3D; 1000000 micros). Excludes shipping, taxes (US only), and customer cancellations that happened within 30 minutes of placing the order. The currency of the returned value is stored in the currency_code segment. If this metric is selected, &#39;segments.currency_code&#39; is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**
   * @return orderedItemSalesMicros
   */
  @javax.annotation.Nullable
  public String getOrderedItemSalesMicros() {
    return orderedItemSalesMicros;
  }

  public void setOrderedItemSalesMicros(String orderedItemSalesMicros) {
    this.orderedItemSalesMicros = orderedItemSalesMicros;
  }


  public Metrics orderedItems(String orderedItems) {
    this.orderedItems = orderedItems;
    return this;
  }

  /**
   * Number of ordered items. Excludes customer cancellations that happened within 30 minutes of placing the order. **This metric cannot be segmented by customer_country_code.**
   * @return orderedItems
   */
  @javax.annotation.Nullable
  public String getOrderedItems() {
    return orderedItems;
  }

  public void setOrderedItems(String orderedItems) {
    this.orderedItems = orderedItems;
  }


  public Metrics orders(String orders) {
    this.orders = orders;
    return this;
  }

  /**
   * Number of placed orders. Excludes customer cancellations that happened within 30 minutes of placing the order. **This metric cannot be segmented by product dimensions and customer_country_code.**
   * @return orders
   */
  @javax.annotation.Nullable
  public String getOrders() {
    return orders;
  }

  public void setOrders(String orders) {
    this.orders = orders;
  }


  public Metrics rejectedItems(String rejectedItems) {
    this.rejectedItems = rejectedItems;
    return this;
  }

  /**
   * Number of ordered items canceled by the merchant, reported on the order date. **This metric cannot be segmented by customer_country_code.**
   * @return rejectedItems
   */
  @javax.annotation.Nullable
  public String getRejectedItems() {
    return rejectedItems;
  }

  public void setRejectedItems(String rejectedItems) {
    this.rejectedItems = rejectedItems;
  }


  public Metrics returnRate(Double returnRate) {
    this.returnRate = returnRate;
    return this;
  }

  /**
   * Total price of returned items divided by the total price of shipped items, reported on the order date. If this metric is selected, &#39;segments.currency_code&#39; is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**
   * @return returnRate
   */
  @javax.annotation.Nullable
  public Double getReturnRate() {
    return returnRate;
  }

  public void setReturnRate(Double returnRate) {
    this.returnRate = returnRate;
  }


  public Metrics returnedItems(String returnedItems) {
    this.returnedItems = returnedItems;
    return this;
  }

  /**
   * Number of ordered items sent back for return, reported on the date when the merchant accepted the return. **This metric cannot be segmented by customer_country_code.**
   * @return returnedItems
   */
  @javax.annotation.Nullable
  public String getReturnedItems() {
    return returnedItems;
  }

  public void setReturnedItems(String returnedItems) {
    this.returnedItems = returnedItems;
  }


  public Metrics returnsMicros(String returnsMicros) {
    this.returnsMicros = returnsMicros;
    return this;
  }

  /**
   * Total price of ordered items sent back for return in micros (1 millionth of a standard unit, 1 USD &#x3D; 1000000 micros), reported on the date when the merchant accepted the return. The currency of the returned value is stored in the currency_code segment. If this metric is selected, &#39;segments.currency_code&#39; is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**
   * @return returnsMicros
   */
  @javax.annotation.Nullable
  public String getReturnsMicros() {
    return returnsMicros;
  }

  public void setReturnsMicros(String returnsMicros) {
    this.returnsMicros = returnsMicros;
  }


  public Metrics shippedItemSalesMicros(String shippedItemSalesMicros) {
    this.shippedItemSalesMicros = shippedItemSalesMicros;
    return this;
  }

  /**
   * Total price of shipped items in micros (1 millionth of a standard unit, 1 USD &#x3D; 1000000 micros), reported on the order date. Excludes shipping and taxes (US only). The currency of the returned value is stored in the currency_code segment. If this metric is selected, &#39;segments.currency_code&#39; is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**
   * @return shippedItemSalesMicros
   */
  @javax.annotation.Nullable
  public String getShippedItemSalesMicros() {
    return shippedItemSalesMicros;
  }

  public void setShippedItemSalesMicros(String shippedItemSalesMicros) {
    this.shippedItemSalesMicros = shippedItemSalesMicros;
  }


  public Metrics shippedItems(String shippedItems) {
    this.shippedItems = shippedItems;
    return this;
  }

  /**
   * Number of shipped items, reported on the shipment date. **This metric cannot be segmented by customer_country_code.**
   * @return shippedItems
   */
  @javax.annotation.Nullable
  public String getShippedItems() {
    return shippedItems;
  }

  public void setShippedItems(String shippedItems) {
    this.shippedItems = shippedItems;
  }


  public Metrics shippedOrders(String shippedOrders) {
    this.shippedOrders = shippedOrders;
    return this;
  }

  /**
   * Number of fully shipped orders, reported on the last shipment date. **This metric cannot be segmented by product dimensions and customer_country_code.**
   * @return shippedOrders
   */
  @javax.annotation.Nullable
  public String getShippedOrders() {
    return shippedOrders;
  }

  public void setShippedOrders(String shippedOrders) {
    this.shippedOrders = shippedOrders;
  }


  public Metrics unshippedItems(Double unshippedItems) {
    this.unshippedItems = unshippedItems;
    return this;
  }

  /**
   * Number of ordered items not shipped up until the end of the queried day. If a multi-day period is specified in the search query, the returned value is the average number of unshipped items over the days in the queried period. **This metric cannot be segmented by customer_country_code.**
   * @return unshippedItems
   */
  @javax.annotation.Nullable
  public Double getUnshippedItems() {
    return unshippedItems;
  }

  public void setUnshippedItems(Double unshippedItems) {
    this.unshippedItems = unshippedItems;
  }


  public Metrics unshippedOrders(Double unshippedOrders) {
    this.unshippedOrders = unshippedOrders;
    return this;
  }

  /**
   * Number of orders not shipped or partially shipped up until the end of the queried day. If a multi-day period is specified in the search query, the returned value is the average number of unshipped orders over the days in the queried period. **This metric cannot be segmented by product dimensions and customer_country_code.**
   * @return unshippedOrders
   */
  @javax.annotation.Nullable
  public Double getUnshippedOrders() {
    return unshippedOrders;
  }

  public void setUnshippedOrders(Double unshippedOrders) {
    this.unshippedOrders = unshippedOrders;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metrics metrics = (Metrics) o;
    return Objects.equals(this.aos, metrics.aos) &&
        Objects.equals(this.aovMicros, metrics.aovMicros) &&
        Objects.equals(this.clicks, metrics.clicks) &&
        Objects.equals(this.conversionRate, metrics.conversionRate) &&
        Objects.equals(this.conversionValueMicros, metrics.conversionValueMicros) &&
        Objects.equals(this.conversions, metrics.conversions) &&
        Objects.equals(this.ctr, metrics.ctr) &&
        Objects.equals(this.daysToShip, metrics.daysToShip) &&
        Objects.equals(this.impressions, metrics.impressions) &&
        Objects.equals(this.itemDaysToShip, metrics.itemDaysToShip) &&
        Objects.equals(this.itemFillRate, metrics.itemFillRate) &&
        Objects.equals(this.orderedItemSalesMicros, metrics.orderedItemSalesMicros) &&
        Objects.equals(this.orderedItems, metrics.orderedItems) &&
        Objects.equals(this.orders, metrics.orders) &&
        Objects.equals(this.rejectedItems, metrics.rejectedItems) &&
        Objects.equals(this.returnRate, metrics.returnRate) &&
        Objects.equals(this.returnedItems, metrics.returnedItems) &&
        Objects.equals(this.returnsMicros, metrics.returnsMicros) &&
        Objects.equals(this.shippedItemSalesMicros, metrics.shippedItemSalesMicros) &&
        Objects.equals(this.shippedItems, metrics.shippedItems) &&
        Objects.equals(this.shippedOrders, metrics.shippedOrders) &&
        Objects.equals(this.unshippedItems, metrics.unshippedItems) &&
        Objects.equals(this.unshippedOrders, metrics.unshippedOrders);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aos, aovMicros, clicks, conversionRate, conversionValueMicros, conversions, ctr, daysToShip, impressions, itemDaysToShip, itemFillRate, orderedItemSalesMicros, orderedItems, orders, rejectedItems, returnRate, returnedItems, returnsMicros, shippedItemSalesMicros, shippedItems, shippedOrders, unshippedItems, unshippedOrders);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metrics {\n");
    sb.append("    aos: ").append(toIndentedString(aos)).append("\n");
    sb.append("    aovMicros: ").append(toIndentedString(aovMicros)).append("\n");
    sb.append("    clicks: ").append(toIndentedString(clicks)).append("\n");
    sb.append("    conversionRate: ").append(toIndentedString(conversionRate)).append("\n");
    sb.append("    conversionValueMicros: ").append(toIndentedString(conversionValueMicros)).append("\n");
    sb.append("    conversions: ").append(toIndentedString(conversions)).append("\n");
    sb.append("    ctr: ").append(toIndentedString(ctr)).append("\n");
    sb.append("    daysToShip: ").append(toIndentedString(daysToShip)).append("\n");
    sb.append("    impressions: ").append(toIndentedString(impressions)).append("\n");
    sb.append("    itemDaysToShip: ").append(toIndentedString(itemDaysToShip)).append("\n");
    sb.append("    itemFillRate: ").append(toIndentedString(itemFillRate)).append("\n");
    sb.append("    orderedItemSalesMicros: ").append(toIndentedString(orderedItemSalesMicros)).append("\n");
    sb.append("    orderedItems: ").append(toIndentedString(orderedItems)).append("\n");
    sb.append("    orders: ").append(toIndentedString(orders)).append("\n");
    sb.append("    rejectedItems: ").append(toIndentedString(rejectedItems)).append("\n");
    sb.append("    returnRate: ").append(toIndentedString(returnRate)).append("\n");
    sb.append("    returnedItems: ").append(toIndentedString(returnedItems)).append("\n");
    sb.append("    returnsMicros: ").append(toIndentedString(returnsMicros)).append("\n");
    sb.append("    shippedItemSalesMicros: ").append(toIndentedString(shippedItemSalesMicros)).append("\n");
    sb.append("    shippedItems: ").append(toIndentedString(shippedItems)).append("\n");
    sb.append("    shippedOrders: ").append(toIndentedString(shippedOrders)).append("\n");
    sb.append("    unshippedItems: ").append(toIndentedString(unshippedItems)).append("\n");
    sb.append("    unshippedOrders: ").append(toIndentedString(unshippedOrders)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aos");
    openapiFields.add("aovMicros");
    openapiFields.add("clicks");
    openapiFields.add("conversionRate");
    openapiFields.add("conversionValueMicros");
    openapiFields.add("conversions");
    openapiFields.add("ctr");
    openapiFields.add("daysToShip");
    openapiFields.add("impressions");
    openapiFields.add("itemDaysToShip");
    openapiFields.add("itemFillRate");
    openapiFields.add("orderedItemSalesMicros");
    openapiFields.add("orderedItems");
    openapiFields.add("orders");
    openapiFields.add("rejectedItems");
    openapiFields.add("returnRate");
    openapiFields.add("returnedItems");
    openapiFields.add("returnsMicros");
    openapiFields.add("shippedItemSalesMicros");
    openapiFields.add("shippedItems");
    openapiFields.add("shippedOrders");
    openapiFields.add("unshippedItems");
    openapiFields.add("unshippedOrders");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Metrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Metrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Metrics is not found in the empty JSON string", Metrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Metrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Metrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clicks") != null && !jsonObj.get("clicks").isJsonNull()) && !jsonObj.get("clicks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clicks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clicks").toString()));
      }
      if ((jsonObj.get("conversionValueMicros") != null && !jsonObj.get("conversionValueMicros").isJsonNull()) && !jsonObj.get("conversionValueMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversionValueMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversionValueMicros").toString()));
      }
      if ((jsonObj.get("impressions") != null && !jsonObj.get("impressions").isJsonNull()) && !jsonObj.get("impressions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `impressions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("impressions").toString()));
      }
      if ((jsonObj.get("orderedItemSalesMicros") != null && !jsonObj.get("orderedItemSalesMicros").isJsonNull()) && !jsonObj.get("orderedItemSalesMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderedItemSalesMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderedItemSalesMicros").toString()));
      }
      if ((jsonObj.get("orderedItems") != null && !jsonObj.get("orderedItems").isJsonNull()) && !jsonObj.get("orderedItems").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderedItems` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderedItems").toString()));
      }
      if ((jsonObj.get("orders") != null && !jsonObj.get("orders").isJsonNull()) && !jsonObj.get("orders").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orders` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orders").toString()));
      }
      if ((jsonObj.get("rejectedItems") != null && !jsonObj.get("rejectedItems").isJsonNull()) && !jsonObj.get("rejectedItems").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rejectedItems` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rejectedItems").toString()));
      }
      if ((jsonObj.get("returnedItems") != null && !jsonObj.get("returnedItems").isJsonNull()) && !jsonObj.get("returnedItems").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnedItems` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnedItems").toString()));
      }
      if ((jsonObj.get("returnsMicros") != null && !jsonObj.get("returnsMicros").isJsonNull()) && !jsonObj.get("returnsMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnsMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnsMicros").toString()));
      }
      if ((jsonObj.get("shippedItemSalesMicros") != null && !jsonObj.get("shippedItemSalesMicros").isJsonNull()) && !jsonObj.get("shippedItemSalesMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippedItemSalesMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippedItemSalesMicros").toString()));
      }
      if ((jsonObj.get("shippedItems") != null && !jsonObj.get("shippedItems").isJsonNull()) && !jsonObj.get("shippedItems").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippedItems` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippedItems").toString()));
      }
      if ((jsonObj.get("shippedOrders") != null && !jsonObj.get("shippedOrders").isJsonNull()) && !jsonObj.get("shippedOrders").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippedOrders` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippedOrders").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Metrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Metrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Metrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Metrics.class));

       return (TypeAdapter<T>) new TypeAdapter<Metrics>() {
           @Override
           public void write(JsonWriter out, Metrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Metrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Metrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Metrics
   * @throws IOException if the JSON string is invalid with respect to Metrics
   */
  public static Metrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Metrics.class);
  }

  /**
   * Convert an instance of Metrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

