/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  The return carrier information. This service is designed for merchants enrolled in the Buy on Google program. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountReturnCarrier {
  public static final String SERIALIZED_NAME_CARRIER_ACCOUNT_ID = "carrierAccountId";
  @SerializedName(SERIALIZED_NAME_CARRIER_ACCOUNT_ID)
  private String carrierAccountId;

  public static final String SERIALIZED_NAME_CARRIER_ACCOUNT_NAME = "carrierAccountName";
  @SerializedName(SERIALIZED_NAME_CARRIER_ACCOUNT_NAME)
  private String carrierAccountName;

  public static final String SERIALIZED_NAME_CARRIER_ACCOUNT_NUMBER = "carrierAccountNumber";
  @SerializedName(SERIALIZED_NAME_CARRIER_ACCOUNT_NUMBER)
  private String carrierAccountNumber;

  /**
   * The carrier code enum. Accepts the values FEDEX or UPS.
   */
  @JsonAdapter(CarrierCodeEnum.Adapter.class)
  public enum CarrierCodeEnum {
    CARRIER_CODE_UNSPECIFIED("CARRIER_CODE_UNSPECIFIED"),
    
    FEDEX("FEDEX"),
    
    UPS("UPS");

    private String value;

    CarrierCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CarrierCodeEnum fromValue(String value) {
      for (CarrierCodeEnum b : CarrierCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CarrierCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CarrierCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CarrierCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CarrierCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CarrierCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CARRIER_CODE = "carrierCode";
  @SerializedName(SERIALIZED_NAME_CARRIER_CODE)
  private CarrierCodeEnum carrierCode;

  public AccountReturnCarrier() {
  }

  public AccountReturnCarrier(
     String carrierAccountId
  ) {
    this();
    this.carrierAccountId = carrierAccountId;
  }

  /**
   * Output only. Immutable. The Google-provided unique carrier ID, used to update the resource.
   * @return carrierAccountId
   */
  @javax.annotation.Nullable
  public String getCarrierAccountId() {
    return carrierAccountId;
  }



  public AccountReturnCarrier carrierAccountName(String carrierAccountName) {
    this.carrierAccountName = carrierAccountName;
    return this;
  }

  /**
   * Name of the carrier account.
   * @return carrierAccountName
   */
  @javax.annotation.Nullable
  public String getCarrierAccountName() {
    return carrierAccountName;
  }

  public void setCarrierAccountName(String carrierAccountName) {
    this.carrierAccountName = carrierAccountName;
  }


  public AccountReturnCarrier carrierAccountNumber(String carrierAccountNumber) {
    this.carrierAccountNumber = carrierAccountNumber;
    return this;
  }

  /**
   * Number of the carrier account.
   * @return carrierAccountNumber
   */
  @javax.annotation.Nullable
  public String getCarrierAccountNumber() {
    return carrierAccountNumber;
  }

  public void setCarrierAccountNumber(String carrierAccountNumber) {
    this.carrierAccountNumber = carrierAccountNumber;
  }


  public AccountReturnCarrier carrierCode(CarrierCodeEnum carrierCode) {
    this.carrierCode = carrierCode;
    return this;
  }

  /**
   * The carrier code enum. Accepts the values FEDEX or UPS.
   * @return carrierCode
   */
  @javax.annotation.Nullable
  public CarrierCodeEnum getCarrierCode() {
    return carrierCode;
  }

  public void setCarrierCode(CarrierCodeEnum carrierCode) {
    this.carrierCode = carrierCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountReturnCarrier accountReturnCarrier = (AccountReturnCarrier) o;
    return Objects.equals(this.carrierAccountId, accountReturnCarrier.carrierAccountId) &&
        Objects.equals(this.carrierAccountName, accountReturnCarrier.carrierAccountName) &&
        Objects.equals(this.carrierAccountNumber, accountReturnCarrier.carrierAccountNumber) &&
        Objects.equals(this.carrierCode, accountReturnCarrier.carrierCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carrierAccountId, carrierAccountName, carrierAccountNumber, carrierCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountReturnCarrier {\n");
    sb.append("    carrierAccountId: ").append(toIndentedString(carrierAccountId)).append("\n");
    sb.append("    carrierAccountName: ").append(toIndentedString(carrierAccountName)).append("\n");
    sb.append("    carrierAccountNumber: ").append(toIndentedString(carrierAccountNumber)).append("\n");
    sb.append("    carrierCode: ").append(toIndentedString(carrierCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("carrierAccountId");
    openapiFields.add("carrierAccountName");
    openapiFields.add("carrierAccountNumber");
    openapiFields.add("carrierCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountReturnCarrier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountReturnCarrier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountReturnCarrier is not found in the empty JSON string", AccountReturnCarrier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountReturnCarrier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountReturnCarrier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("carrierAccountId") != null && !jsonObj.get("carrierAccountId").isJsonNull()) && !jsonObj.get("carrierAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierAccountId").toString()));
      }
      if ((jsonObj.get("carrierAccountName") != null && !jsonObj.get("carrierAccountName").isJsonNull()) && !jsonObj.get("carrierAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierAccountName").toString()));
      }
      if ((jsonObj.get("carrierAccountNumber") != null && !jsonObj.get("carrierAccountNumber").isJsonNull()) && !jsonObj.get("carrierAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierAccountNumber").toString()));
      }
      if ((jsonObj.get("carrierCode") != null && !jsonObj.get("carrierCode").isJsonNull()) && !jsonObj.get("carrierCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierCode").toString()));
      }
      // validate the optional field `carrierCode`
      if (jsonObj.get("carrierCode") != null && !jsonObj.get("carrierCode").isJsonNull()) {
        CarrierCodeEnum.validateJsonElement(jsonObj.get("carrierCode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountReturnCarrier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountReturnCarrier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountReturnCarrier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountReturnCarrier.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountReturnCarrier>() {
           @Override
           public void write(JsonWriter out, AccountReturnCarrier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountReturnCarrier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountReturnCarrier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountReturnCarrier
   * @throws IOException if the JSON string is invalid with respect to AccountReturnCarrier
   */
  public static AccountReturnCarrier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountReturnCarrier.class);
  }

  /**
   * Convert an instance of AccountReturnCarrier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

