/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The shipping information for the order.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderTrackingSignalShippingInfo {
  public static final String SERIALIZED_NAME_ACTUAL_DELIVERY_TIME = "actualDeliveryTime";
  @SerializedName(SERIALIZED_NAME_ACTUAL_DELIVERY_TIME)
  private OffsetDateTime actualDeliveryTime;

  public static final String SERIALIZED_NAME_CARRIER_NAME = "carrierName";
  @SerializedName(SERIALIZED_NAME_CARRIER_NAME)
  private String carrierName;

  public static final String SERIALIZED_NAME_CARRIER_SERVICE_NAME = "carrierServiceName";
  @SerializedName(SERIALIZED_NAME_CARRIER_SERVICE_NAME)
  private String carrierServiceName;

  public static final String SERIALIZED_NAME_EARLIEST_DELIVERY_PROMISE_TIME = "earliestDeliveryPromiseTime";
  @SerializedName(SERIALIZED_NAME_EARLIEST_DELIVERY_PROMISE_TIME)
  private OffsetDateTime earliestDeliveryPromiseTime;

  public static final String SERIALIZED_NAME_LATEST_DELIVERY_PROMISE_TIME = "latestDeliveryPromiseTime";
  @SerializedName(SERIALIZED_NAME_LATEST_DELIVERY_PROMISE_TIME)
  private OffsetDateTime latestDeliveryPromiseTime;

  public static final String SERIALIZED_NAME_ORIGIN_POSTAL_CODE = "originPostalCode";
  @SerializedName(SERIALIZED_NAME_ORIGIN_POSTAL_CODE)
  private String originPostalCode;

  public static final String SERIALIZED_NAME_ORIGIN_REGION_CODE = "originRegionCode";
  @SerializedName(SERIALIZED_NAME_ORIGIN_REGION_CODE)
  private String originRegionCode;

  public static final String SERIALIZED_NAME_SHIPMENT_ID = "shipmentId";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_ID)
  private String shipmentId;

  public static final String SERIALIZED_NAME_SHIPPED_TIME = "shippedTime";
  @SerializedName(SERIALIZED_NAME_SHIPPED_TIME)
  private OffsetDateTime shippedTime;

  /**
   * The status of the shipment.
   */
  @JsonAdapter(ShippingStatusEnum.Adapter.class)
  public enum ShippingStatusEnum {
    SHIPPING_STATE_UNSPECIFIED("SHIPPING_STATE_UNSPECIFIED"),
    
    SHIPPED("SHIPPED"),
    
    DELIVERED("DELIVERED");

    private String value;

    ShippingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShippingStatusEnum fromValue(String value) {
      for (ShippingStatusEnum b : ShippingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShippingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShippingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShippingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShippingStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShippingStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHIPPING_STATUS = "shippingStatus";
  @SerializedName(SERIALIZED_NAME_SHIPPING_STATUS)
  private ShippingStatusEnum shippingStatus;

  public static final String SERIALIZED_NAME_TRACKING_ID = "trackingId";
  @SerializedName(SERIALIZED_NAME_TRACKING_ID)
  private String trackingId;

  public OrderTrackingSignalShippingInfo() {
  }

  public OrderTrackingSignalShippingInfo actualDeliveryTime(OffsetDateTime actualDeliveryTime) {
    this.actualDeliveryTime = actualDeliveryTime;
    return this;
  }

  /**
   * Get actualDeliveryTime
   * @return actualDeliveryTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getActualDeliveryTime() {
    return actualDeliveryTime;
  }

  public void setActualDeliveryTime(OffsetDateTime actualDeliveryTime) {
    this.actualDeliveryTime = actualDeliveryTime;
  }


  public OrderTrackingSignalShippingInfo carrierName(String carrierName) {
    this.carrierName = carrierName;
    return this;
  }

  /**
   * The name of the shipping carrier for the delivery. This field is required if one of the following fields is absent: earliest_delivery_promise_time, latest_delivery_promise_time, and actual_delivery_time.
   * @return carrierName
   */
  @javax.annotation.Nullable
  public String getCarrierName() {
    return carrierName;
  }

  public void setCarrierName(String carrierName) {
    this.carrierName = carrierName;
  }


  public OrderTrackingSignalShippingInfo carrierServiceName(String carrierServiceName) {
    this.carrierServiceName = carrierServiceName;
    return this;
  }

  /**
   * The service type for fulfillment, e.g., GROUND, FIRST_CLASS, etc.
   * @return carrierServiceName
   */
  @javax.annotation.Nullable
  public String getCarrierServiceName() {
    return carrierServiceName;
  }

  public void setCarrierServiceName(String carrierServiceName) {
    this.carrierServiceName = carrierServiceName;
  }


  public OrderTrackingSignalShippingInfo earliestDeliveryPromiseTime(OffsetDateTime earliestDeliveryPromiseTime) {
    this.earliestDeliveryPromiseTime = earliestDeliveryPromiseTime;
    return this;
  }

  /**
   * Get earliestDeliveryPromiseTime
   * @return earliestDeliveryPromiseTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEarliestDeliveryPromiseTime() {
    return earliestDeliveryPromiseTime;
  }

  public void setEarliestDeliveryPromiseTime(OffsetDateTime earliestDeliveryPromiseTime) {
    this.earliestDeliveryPromiseTime = earliestDeliveryPromiseTime;
  }


  public OrderTrackingSignalShippingInfo latestDeliveryPromiseTime(OffsetDateTime latestDeliveryPromiseTime) {
    this.latestDeliveryPromiseTime = latestDeliveryPromiseTime;
    return this;
  }

  /**
   * Get latestDeliveryPromiseTime
   * @return latestDeliveryPromiseTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLatestDeliveryPromiseTime() {
    return latestDeliveryPromiseTime;
  }

  public void setLatestDeliveryPromiseTime(OffsetDateTime latestDeliveryPromiseTime) {
    this.latestDeliveryPromiseTime = latestDeliveryPromiseTime;
  }


  public OrderTrackingSignalShippingInfo originPostalCode(String originPostalCode) {
    this.originPostalCode = originPostalCode;
    return this;
  }

  /**
   * The origin postal code, as a continuous string without spaces or dashes, e.g. \&quot;95016\&quot;. This field will be anonymized in returned OrderTrackingSignal creation response.
   * @return originPostalCode
   */
  @javax.annotation.Nullable
  public String getOriginPostalCode() {
    return originPostalCode;
  }

  public void setOriginPostalCode(String originPostalCode) {
    this.originPostalCode = originPostalCode;
  }


  public OrderTrackingSignalShippingInfo originRegionCode(String originRegionCode) {
    this.originRegionCode = originRegionCode;
    return this;
  }

  /**
   * The [CLDR territory code] (http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml) for the shipping origin.
   * @return originRegionCode
   */
  @javax.annotation.Nullable
  public String getOriginRegionCode() {
    return originRegionCode;
  }

  public void setOriginRegionCode(String originRegionCode) {
    this.originRegionCode = originRegionCode;
  }


  public OrderTrackingSignalShippingInfo shipmentId(String shipmentId) {
    this.shipmentId = shipmentId;
    return this;
  }

  /**
   * Required. The shipment ID. This field will be hashed in returned OrderTrackingSignal creation response.
   * @return shipmentId
   */
  @javax.annotation.Nullable
  public String getShipmentId() {
    return shipmentId;
  }

  public void setShipmentId(String shipmentId) {
    this.shipmentId = shipmentId;
  }


  public OrderTrackingSignalShippingInfo shippedTime(OffsetDateTime shippedTime) {
    this.shippedTime = shippedTime;
    return this;
  }

  /**
   * Get shippedTime
   * @return shippedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getShippedTime() {
    return shippedTime;
  }

  public void setShippedTime(OffsetDateTime shippedTime) {
    this.shippedTime = shippedTime;
  }


  public OrderTrackingSignalShippingInfo shippingStatus(ShippingStatusEnum shippingStatus) {
    this.shippingStatus = shippingStatus;
    return this;
  }

  /**
   * The status of the shipment.
   * @return shippingStatus
   */
  @javax.annotation.Nullable
  public ShippingStatusEnum getShippingStatus() {
    return shippingStatus;
  }

  public void setShippingStatus(ShippingStatusEnum shippingStatus) {
    this.shippingStatus = shippingStatus;
  }


  public OrderTrackingSignalShippingInfo trackingId(String trackingId) {
    this.trackingId = trackingId;
    return this;
  }

  /**
   * The tracking ID of the shipment. This field is required if one of the following fields is absent: earliest_delivery_promise_time, latest_delivery_promise_time, and actual_delivery_time.
   * @return trackingId
   */
  @javax.annotation.Nullable
  public String getTrackingId() {
    return trackingId;
  }

  public void setTrackingId(String trackingId) {
    this.trackingId = trackingId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderTrackingSignalShippingInfo orderTrackingSignalShippingInfo = (OrderTrackingSignalShippingInfo) o;
    return Objects.equals(this.actualDeliveryTime, orderTrackingSignalShippingInfo.actualDeliveryTime) &&
        Objects.equals(this.carrierName, orderTrackingSignalShippingInfo.carrierName) &&
        Objects.equals(this.carrierServiceName, orderTrackingSignalShippingInfo.carrierServiceName) &&
        Objects.equals(this.earliestDeliveryPromiseTime, orderTrackingSignalShippingInfo.earliestDeliveryPromiseTime) &&
        Objects.equals(this.latestDeliveryPromiseTime, orderTrackingSignalShippingInfo.latestDeliveryPromiseTime) &&
        Objects.equals(this.originPostalCode, orderTrackingSignalShippingInfo.originPostalCode) &&
        Objects.equals(this.originRegionCode, orderTrackingSignalShippingInfo.originRegionCode) &&
        Objects.equals(this.shipmentId, orderTrackingSignalShippingInfo.shipmentId) &&
        Objects.equals(this.shippedTime, orderTrackingSignalShippingInfo.shippedTime) &&
        Objects.equals(this.shippingStatus, orderTrackingSignalShippingInfo.shippingStatus) &&
        Objects.equals(this.trackingId, orderTrackingSignalShippingInfo.trackingId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualDeliveryTime, carrierName, carrierServiceName, earliestDeliveryPromiseTime, latestDeliveryPromiseTime, originPostalCode, originRegionCode, shipmentId, shippedTime, shippingStatus, trackingId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderTrackingSignalShippingInfo {\n");
    sb.append("    actualDeliveryTime: ").append(toIndentedString(actualDeliveryTime)).append("\n");
    sb.append("    carrierName: ").append(toIndentedString(carrierName)).append("\n");
    sb.append("    carrierServiceName: ").append(toIndentedString(carrierServiceName)).append("\n");
    sb.append("    earliestDeliveryPromiseTime: ").append(toIndentedString(earliestDeliveryPromiseTime)).append("\n");
    sb.append("    latestDeliveryPromiseTime: ").append(toIndentedString(latestDeliveryPromiseTime)).append("\n");
    sb.append("    originPostalCode: ").append(toIndentedString(originPostalCode)).append("\n");
    sb.append("    originRegionCode: ").append(toIndentedString(originRegionCode)).append("\n");
    sb.append("    shipmentId: ").append(toIndentedString(shipmentId)).append("\n");
    sb.append("    shippedTime: ").append(toIndentedString(shippedTime)).append("\n");
    sb.append("    shippingStatus: ").append(toIndentedString(shippingStatus)).append("\n");
    sb.append("    trackingId: ").append(toIndentedString(trackingId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actualDeliveryTime");
    openapiFields.add("carrierName");
    openapiFields.add("carrierServiceName");
    openapiFields.add("earliestDeliveryPromiseTime");
    openapiFields.add("latestDeliveryPromiseTime");
    openapiFields.add("originPostalCode");
    openapiFields.add("originRegionCode");
    openapiFields.add("shipmentId");
    openapiFields.add("shippedTime");
    openapiFields.add("shippingStatus");
    openapiFields.add("trackingId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderTrackingSignalShippingInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderTrackingSignalShippingInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderTrackingSignalShippingInfo is not found in the empty JSON string", OrderTrackingSignalShippingInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderTrackingSignalShippingInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderTrackingSignalShippingInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `actualDeliveryTime`
      if (jsonObj.get("actualDeliveryTime") != null && !jsonObj.get("actualDeliveryTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("actualDeliveryTime"));
      }
      if ((jsonObj.get("carrierName") != null && !jsonObj.get("carrierName").isJsonNull()) && !jsonObj.get("carrierName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierName").toString()));
      }
      if ((jsonObj.get("carrierServiceName") != null && !jsonObj.get("carrierServiceName").isJsonNull()) && !jsonObj.get("carrierServiceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierServiceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierServiceName").toString()));
      }
      // validate the optional field `earliestDeliveryPromiseTime`
      if (jsonObj.get("earliestDeliveryPromiseTime") != null && !jsonObj.get("earliestDeliveryPromiseTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("earliestDeliveryPromiseTime"));
      }
      // validate the optional field `latestDeliveryPromiseTime`
      if (jsonObj.get("latestDeliveryPromiseTime") != null && !jsonObj.get("latestDeliveryPromiseTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("latestDeliveryPromiseTime"));
      }
      if ((jsonObj.get("originPostalCode") != null && !jsonObj.get("originPostalCode").isJsonNull()) && !jsonObj.get("originPostalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originPostalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originPostalCode").toString()));
      }
      if ((jsonObj.get("originRegionCode") != null && !jsonObj.get("originRegionCode").isJsonNull()) && !jsonObj.get("originRegionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originRegionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originRegionCode").toString()));
      }
      if ((jsonObj.get("shipmentId") != null && !jsonObj.get("shipmentId").isJsonNull()) && !jsonObj.get("shipmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipmentId").toString()));
      }
      // validate the optional field `shippedTime`
      if (jsonObj.get("shippedTime") != null && !jsonObj.get("shippedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("shippedTime"));
      }
      if ((jsonObj.get("shippingStatus") != null && !jsonObj.get("shippingStatus").isJsonNull()) && !jsonObj.get("shippingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingStatus").toString()));
      }
      // validate the optional field `shippingStatus`
      if (jsonObj.get("shippingStatus") != null && !jsonObj.get("shippingStatus").isJsonNull()) {
        ShippingStatusEnum.validateJsonElement(jsonObj.get("shippingStatus"));
      }
      if ((jsonObj.get("trackingId") != null && !jsonObj.get("trackingId").isJsonNull()) && !jsonObj.get("trackingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderTrackingSignalShippingInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderTrackingSignalShippingInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderTrackingSignalShippingInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderTrackingSignalShippingInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderTrackingSignalShippingInfo>() {
           @Override
           public void write(JsonWriter out, OrderTrackingSignalShippingInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderTrackingSignalShippingInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderTrackingSignalShippingInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderTrackingSignalShippingInfo
   * @throws IOException if the JSON string is invalid with respect to OrderTrackingSignalShippingInfo
   */
  public static OrderTrackingSignalShippingInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderTrackingSignalShippingInfo.class);
  }

  /**
   * Convert an instance of OrderTrackingSignalShippingInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

