/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Price competitiveness fields requested by the merchant in the query. Field values are only set if the merchant queries &#x60;PriceCompetitivenessProductView&#x60;. https://support.google.com/merchants/answer/9626903
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PriceCompetitiveness {
  public static final String SERIALIZED_NAME_BENCHMARK_PRICE_CURRENCY_CODE = "benchmarkPriceCurrencyCode";
  @SerializedName(SERIALIZED_NAME_BENCHMARK_PRICE_CURRENCY_CODE)
  private String benchmarkPriceCurrencyCode;

  public static final String SERIALIZED_NAME_BENCHMARK_PRICE_MICROS = "benchmarkPriceMicros";
  @SerializedName(SERIALIZED_NAME_BENCHMARK_PRICE_MICROS)
  private String benchmarkPriceMicros;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public PriceCompetitiveness() {
  }

  public PriceCompetitiveness benchmarkPriceCurrencyCode(String benchmarkPriceCurrencyCode) {
    this.benchmarkPriceCurrencyCode = benchmarkPriceCurrencyCode;
    return this;
  }

  /**
   * The price benchmark currency (ISO 4217 code).
   * @return benchmarkPriceCurrencyCode
   */
  @javax.annotation.Nullable
  public String getBenchmarkPriceCurrencyCode() {
    return benchmarkPriceCurrencyCode;
  }

  public void setBenchmarkPriceCurrencyCode(String benchmarkPriceCurrencyCode) {
    this.benchmarkPriceCurrencyCode = benchmarkPriceCurrencyCode;
  }


  public PriceCompetitiveness benchmarkPriceMicros(String benchmarkPriceMicros) {
    this.benchmarkPriceMicros = benchmarkPriceMicros;
    return this;
  }

  /**
   * The latest available price benchmark in micros (1 millionth of a standard unit, 1 USD &#x3D; 1000000 micros) for the product&#39;s catalog in the benchmark country.
   * @return benchmarkPriceMicros
   */
  @javax.annotation.Nullable
  public String getBenchmarkPriceMicros() {
    return benchmarkPriceMicros;
  }

  public void setBenchmarkPriceMicros(String benchmarkPriceMicros) {
    this.benchmarkPriceMicros = benchmarkPriceMicros;
  }


  public PriceCompetitiveness countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The country of the price benchmark (ISO 3166 code).
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PriceCompetitiveness priceCompetitiveness = (PriceCompetitiveness) o;
    return Objects.equals(this.benchmarkPriceCurrencyCode, priceCompetitiveness.benchmarkPriceCurrencyCode) &&
        Objects.equals(this.benchmarkPriceMicros, priceCompetitiveness.benchmarkPriceMicros) &&
        Objects.equals(this.countryCode, priceCompetitiveness.countryCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(benchmarkPriceCurrencyCode, benchmarkPriceMicros, countryCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PriceCompetitiveness {\n");
    sb.append("    benchmarkPriceCurrencyCode: ").append(toIndentedString(benchmarkPriceCurrencyCode)).append("\n");
    sb.append("    benchmarkPriceMicros: ").append(toIndentedString(benchmarkPriceMicros)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("benchmarkPriceCurrencyCode");
    openapiFields.add("benchmarkPriceMicros");
    openapiFields.add("countryCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PriceCompetitiveness
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PriceCompetitiveness.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PriceCompetitiveness is not found in the empty JSON string", PriceCompetitiveness.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PriceCompetitiveness.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PriceCompetitiveness` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("benchmarkPriceCurrencyCode") != null && !jsonObj.get("benchmarkPriceCurrencyCode").isJsonNull()) && !jsonObj.get("benchmarkPriceCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `benchmarkPriceCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("benchmarkPriceCurrencyCode").toString()));
      }
      if ((jsonObj.get("benchmarkPriceMicros") != null && !jsonObj.get("benchmarkPriceMicros").isJsonNull()) && !jsonObj.get("benchmarkPriceMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `benchmarkPriceMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("benchmarkPriceMicros").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PriceCompetitiveness.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PriceCompetitiveness' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PriceCompetitiveness> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PriceCompetitiveness.class));

       return (TypeAdapter<T>) new TypeAdapter<PriceCompetitiveness>() {
           @Override
           public void write(JsonWriter out, PriceCompetitiveness value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PriceCompetitiveness read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PriceCompetitiveness given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PriceCompetitiveness
   * @throws IOException if the JSON string is invalid with respect to PriceCompetitiveness
   */
  public static PriceCompetitiveness fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PriceCompetitiveness.class);
  }

  /**
   * Convert an instance of PriceCompetitiveness to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

