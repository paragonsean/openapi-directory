/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BestSellers;
import org.openapitools.client.model.Brand;
import org.openapitools.client.model.CompetitiveVisibility;
import org.openapitools.client.model.Metrics;
import org.openapitools.client.model.PriceCompetitiveness;
import org.openapitools.client.model.PriceInsights;
import org.openapitools.client.model.ProductCluster;
import org.openapitools.client.model.ProductView;
import org.openapitools.client.model.Segments;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Result row returned from the search query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportRow {
  public static final String SERIALIZED_NAME_BEST_SELLERS = "bestSellers";
  @SerializedName(SERIALIZED_NAME_BEST_SELLERS)
  private BestSellers bestSellers;

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private Brand brand;

  public static final String SERIALIZED_NAME_COMPETITIVE_VISIBILITY = "competitiveVisibility";
  @SerializedName(SERIALIZED_NAME_COMPETITIVE_VISIBILITY)
  private CompetitiveVisibility competitiveVisibility;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private Metrics metrics;

  public static final String SERIALIZED_NAME_PRICE_COMPETITIVENESS = "priceCompetitiveness";
  @SerializedName(SERIALIZED_NAME_PRICE_COMPETITIVENESS)
  private PriceCompetitiveness priceCompetitiveness;

  public static final String SERIALIZED_NAME_PRICE_INSIGHTS = "priceInsights";
  @SerializedName(SERIALIZED_NAME_PRICE_INSIGHTS)
  private PriceInsights priceInsights;

  public static final String SERIALIZED_NAME_PRODUCT_CLUSTER = "productCluster";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CLUSTER)
  private ProductCluster productCluster;

  public static final String SERIALIZED_NAME_PRODUCT_VIEW = "productView";
  @SerializedName(SERIALIZED_NAME_PRODUCT_VIEW)
  private ProductView productView;

  public static final String SERIALIZED_NAME_SEGMENTS = "segments";
  @SerializedName(SERIALIZED_NAME_SEGMENTS)
  private Segments segments;

  public ReportRow() {
  }

  public ReportRow bestSellers(BestSellers bestSellers) {
    this.bestSellers = bestSellers;
    return this;
  }

  /**
   * Get bestSellers
   * @return bestSellers
   */
  @javax.annotation.Nullable
  public BestSellers getBestSellers() {
    return bestSellers;
  }

  public void setBestSellers(BestSellers bestSellers) {
    this.bestSellers = bestSellers;
  }


  public ReportRow brand(Brand brand) {
    this.brand = brand;
    return this;
  }

  /**
   * Get brand
   * @return brand
   */
  @javax.annotation.Nullable
  public Brand getBrand() {
    return brand;
  }

  public void setBrand(Brand brand) {
    this.brand = brand;
  }


  public ReportRow competitiveVisibility(CompetitiveVisibility competitiveVisibility) {
    this.competitiveVisibility = competitiveVisibility;
    return this;
  }

  /**
   * Get competitiveVisibility
   * @return competitiveVisibility
   */
  @javax.annotation.Nullable
  public CompetitiveVisibility getCompetitiveVisibility() {
    return competitiveVisibility;
  }

  public void setCompetitiveVisibility(CompetitiveVisibility competitiveVisibility) {
    this.competitiveVisibility = competitiveVisibility;
  }


  public ReportRow metrics(Metrics metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * Get metrics
   * @return metrics
   */
  @javax.annotation.Nullable
  public Metrics getMetrics() {
    return metrics;
  }

  public void setMetrics(Metrics metrics) {
    this.metrics = metrics;
  }


  public ReportRow priceCompetitiveness(PriceCompetitiveness priceCompetitiveness) {
    this.priceCompetitiveness = priceCompetitiveness;
    return this;
  }

  /**
   * Get priceCompetitiveness
   * @return priceCompetitiveness
   */
  @javax.annotation.Nullable
  public PriceCompetitiveness getPriceCompetitiveness() {
    return priceCompetitiveness;
  }

  public void setPriceCompetitiveness(PriceCompetitiveness priceCompetitiveness) {
    this.priceCompetitiveness = priceCompetitiveness;
  }


  public ReportRow priceInsights(PriceInsights priceInsights) {
    this.priceInsights = priceInsights;
    return this;
  }

  /**
   * Get priceInsights
   * @return priceInsights
   */
  @javax.annotation.Nullable
  public PriceInsights getPriceInsights() {
    return priceInsights;
  }

  public void setPriceInsights(PriceInsights priceInsights) {
    this.priceInsights = priceInsights;
  }


  public ReportRow productCluster(ProductCluster productCluster) {
    this.productCluster = productCluster;
    return this;
  }

  /**
   * Get productCluster
   * @return productCluster
   */
  @javax.annotation.Nullable
  public ProductCluster getProductCluster() {
    return productCluster;
  }

  public void setProductCluster(ProductCluster productCluster) {
    this.productCluster = productCluster;
  }


  public ReportRow productView(ProductView productView) {
    this.productView = productView;
    return this;
  }

  /**
   * Get productView
   * @return productView
   */
  @javax.annotation.Nullable
  public ProductView getProductView() {
    return productView;
  }

  public void setProductView(ProductView productView) {
    this.productView = productView;
  }


  public ReportRow segments(Segments segments) {
    this.segments = segments;
    return this;
  }

  /**
   * Get segments
   * @return segments
   */
  @javax.annotation.Nullable
  public Segments getSegments() {
    return segments;
  }

  public void setSegments(Segments segments) {
    this.segments = segments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportRow reportRow = (ReportRow) o;
    return Objects.equals(this.bestSellers, reportRow.bestSellers) &&
        Objects.equals(this.brand, reportRow.brand) &&
        Objects.equals(this.competitiveVisibility, reportRow.competitiveVisibility) &&
        Objects.equals(this.metrics, reportRow.metrics) &&
        Objects.equals(this.priceCompetitiveness, reportRow.priceCompetitiveness) &&
        Objects.equals(this.priceInsights, reportRow.priceInsights) &&
        Objects.equals(this.productCluster, reportRow.productCluster) &&
        Objects.equals(this.productView, reportRow.productView) &&
        Objects.equals(this.segments, reportRow.segments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bestSellers, brand, competitiveVisibility, metrics, priceCompetitiveness, priceInsights, productCluster, productView, segments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportRow {\n");
    sb.append("    bestSellers: ").append(toIndentedString(bestSellers)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    competitiveVisibility: ").append(toIndentedString(competitiveVisibility)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    priceCompetitiveness: ").append(toIndentedString(priceCompetitiveness)).append("\n");
    sb.append("    priceInsights: ").append(toIndentedString(priceInsights)).append("\n");
    sb.append("    productCluster: ").append(toIndentedString(productCluster)).append("\n");
    sb.append("    productView: ").append(toIndentedString(productView)).append("\n");
    sb.append("    segments: ").append(toIndentedString(segments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bestSellers");
    openapiFields.add("brand");
    openapiFields.add("competitiveVisibility");
    openapiFields.add("metrics");
    openapiFields.add("priceCompetitiveness");
    openapiFields.add("priceInsights");
    openapiFields.add("productCluster");
    openapiFields.add("productView");
    openapiFields.add("segments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportRow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportRow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportRow is not found in the empty JSON string", ReportRow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportRow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportRow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bestSellers`
      if (jsonObj.get("bestSellers") != null && !jsonObj.get("bestSellers").isJsonNull()) {
        BestSellers.validateJsonElement(jsonObj.get("bestSellers"));
      }
      // validate the optional field `brand`
      if (jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) {
        Brand.validateJsonElement(jsonObj.get("brand"));
      }
      // validate the optional field `competitiveVisibility`
      if (jsonObj.get("competitiveVisibility") != null && !jsonObj.get("competitiveVisibility").isJsonNull()) {
        CompetitiveVisibility.validateJsonElement(jsonObj.get("competitiveVisibility"));
      }
      // validate the optional field `metrics`
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        Metrics.validateJsonElement(jsonObj.get("metrics"));
      }
      // validate the optional field `priceCompetitiveness`
      if (jsonObj.get("priceCompetitiveness") != null && !jsonObj.get("priceCompetitiveness").isJsonNull()) {
        PriceCompetitiveness.validateJsonElement(jsonObj.get("priceCompetitiveness"));
      }
      // validate the optional field `priceInsights`
      if (jsonObj.get("priceInsights") != null && !jsonObj.get("priceInsights").isJsonNull()) {
        PriceInsights.validateJsonElement(jsonObj.get("priceInsights"));
      }
      // validate the optional field `productCluster`
      if (jsonObj.get("productCluster") != null && !jsonObj.get("productCluster").isJsonNull()) {
        ProductCluster.validateJsonElement(jsonObj.get("productCluster"));
      }
      // validate the optional field `productView`
      if (jsonObj.get("productView") != null && !jsonObj.get("productView").isJsonNull()) {
        ProductView.validateJsonElement(jsonObj.get("productView"));
      }
      // validate the optional field `segments`
      if (jsonObj.get("segments") != null && !jsonObj.get("segments").isJsonNull()) {
        Segments.validateJsonElement(jsonObj.get("segments"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportRow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportRow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportRow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportRow.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportRow>() {
           @Override
           public void write(JsonWriter out, ReportRow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportRow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportRow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportRow
   * @throws IOException if the JSON string is invalid with respect to ReportRow
   */
  public static ReportRow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportRow.class);
  }

  /**
   * Convert an instance of ReportRow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

