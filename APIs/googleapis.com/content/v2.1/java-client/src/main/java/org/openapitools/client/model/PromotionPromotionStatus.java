/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PromotionPromotionStatusDestinationStatus;
import org.openapitools.client.model.PromotionPromotionStatusPromotionIssue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The status of the promotion.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PromotionPromotionStatus {
  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_DESTINATION_STATUSES = "destinationStatuses";
  @SerializedName(SERIALIZED_NAME_DESTINATION_STATUSES)
  private List<PromotionPromotionStatusDestinationStatus> destinationStatuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_UPDATE_DATE = "lastUpdateDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_DATE)
  private String lastUpdateDate;

  public static final String SERIALIZED_NAME_PROMOTION_ISSUE = "promotionIssue";
  @SerializedName(SERIALIZED_NAME_PROMOTION_ISSUE)
  private List<PromotionPromotionStatusPromotionIssue> promotionIssue = new ArrayList<>();

  public PromotionPromotionStatus() {
  }

  public PromotionPromotionStatus creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Date on which the promotion has been created in [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format: Date, time, and offset, for example \&quot;2020-01-02T09:00:00+01:00\&quot; or \&quot;2020-01-02T09:00:00Z\&quot;
   * @return creationDate
   */
  @javax.annotation.Nullable
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public PromotionPromotionStatus destinationStatuses(List<PromotionPromotionStatusDestinationStatus> destinationStatuses) {
    this.destinationStatuses = destinationStatuses;
    return this;
  }

  public PromotionPromotionStatus addDestinationStatusesItem(PromotionPromotionStatusDestinationStatus destinationStatusesItem) {
    if (this.destinationStatuses == null) {
      this.destinationStatuses = new ArrayList<>();
    }
    this.destinationStatuses.add(destinationStatusesItem);
    return this;
  }

  /**
   * The intended destinations for the promotion.
   * @return destinationStatuses
   */
  @javax.annotation.Nullable
  public List<PromotionPromotionStatusDestinationStatus> getDestinationStatuses() {
    return destinationStatuses;
  }

  public void setDestinationStatuses(List<PromotionPromotionStatusDestinationStatus> destinationStatuses) {
    this.destinationStatuses = destinationStatuses;
  }


  public PromotionPromotionStatus lastUpdateDate(String lastUpdateDate) {
    this.lastUpdateDate = lastUpdateDate;
    return this;
  }

  /**
   * Date on which the promotion status has been last updated in [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format: Date, time, and offset, for example \&quot;2020-01-02T09:00:00+01:00\&quot; or \&quot;2020-01-02T09:00:00Z\&quot;
   * @return lastUpdateDate
   */
  @javax.annotation.Nullable
  public String getLastUpdateDate() {
    return lastUpdateDate;
  }

  public void setLastUpdateDate(String lastUpdateDate) {
    this.lastUpdateDate = lastUpdateDate;
  }


  public PromotionPromotionStatus promotionIssue(List<PromotionPromotionStatusPromotionIssue> promotionIssue) {
    this.promotionIssue = promotionIssue;
    return this;
  }

  public PromotionPromotionStatus addPromotionIssueItem(PromotionPromotionStatusPromotionIssue promotionIssueItem) {
    if (this.promotionIssue == null) {
      this.promotionIssue = new ArrayList<>();
    }
    this.promotionIssue.add(promotionIssueItem);
    return this;
  }

  /**
   * A list of issues associated with the promotion.
   * @return promotionIssue
   */
  @javax.annotation.Nullable
  public List<PromotionPromotionStatusPromotionIssue> getPromotionIssue() {
    return promotionIssue;
  }

  public void setPromotionIssue(List<PromotionPromotionStatusPromotionIssue> promotionIssue) {
    this.promotionIssue = promotionIssue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PromotionPromotionStatus promotionPromotionStatus = (PromotionPromotionStatus) o;
    return Objects.equals(this.creationDate, promotionPromotionStatus.creationDate) &&
        Objects.equals(this.destinationStatuses, promotionPromotionStatus.destinationStatuses) &&
        Objects.equals(this.lastUpdateDate, promotionPromotionStatus.lastUpdateDate) &&
        Objects.equals(this.promotionIssue, promotionPromotionStatus.promotionIssue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDate, destinationStatuses, lastUpdateDate, promotionIssue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PromotionPromotionStatus {\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    destinationStatuses: ").append(toIndentedString(destinationStatuses)).append("\n");
    sb.append("    lastUpdateDate: ").append(toIndentedString(lastUpdateDate)).append("\n");
    sb.append("    promotionIssue: ").append(toIndentedString(promotionIssue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationDate");
    openapiFields.add("destinationStatuses");
    openapiFields.add("lastUpdateDate");
    openapiFields.add("promotionIssue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PromotionPromotionStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PromotionPromotionStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PromotionPromotionStatus is not found in the empty JSON string", PromotionPromotionStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PromotionPromotionStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PromotionPromotionStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creationDate") != null && !jsonObj.get("creationDate").isJsonNull()) && !jsonObj.get("creationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDate").toString()));
      }
      if (jsonObj.get("destinationStatuses") != null && !jsonObj.get("destinationStatuses").isJsonNull()) {
        JsonArray jsonArraydestinationStatuses = jsonObj.getAsJsonArray("destinationStatuses");
        if (jsonArraydestinationStatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinationStatuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinationStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("destinationStatuses").toString()));
          }

          // validate the optional field `destinationStatuses` (array)
          for (int i = 0; i < jsonArraydestinationStatuses.size(); i++) {
            PromotionPromotionStatusDestinationStatus.validateJsonElement(jsonArraydestinationStatuses.get(i));
          };
        }
      }
      if ((jsonObj.get("lastUpdateDate") != null && !jsonObj.get("lastUpdateDate").isJsonNull()) && !jsonObj.get("lastUpdateDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdateDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdateDate").toString()));
      }
      if (jsonObj.get("promotionIssue") != null && !jsonObj.get("promotionIssue").isJsonNull()) {
        JsonArray jsonArraypromotionIssue = jsonObj.getAsJsonArray("promotionIssue");
        if (jsonArraypromotionIssue != null) {
          // ensure the json data is an array
          if (!jsonObj.get("promotionIssue").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `promotionIssue` to be an array in the JSON string but got `%s`", jsonObj.get("promotionIssue").toString()));
          }

          // validate the optional field `promotionIssue` (array)
          for (int i = 0; i < jsonArraypromotionIssue.size(); i++) {
            PromotionPromotionStatusPromotionIssue.validateJsonElement(jsonArraypromotionIssue.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PromotionPromotionStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PromotionPromotionStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PromotionPromotionStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PromotionPromotionStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<PromotionPromotionStatus>() {
           @Override
           public void write(JsonWriter out, PromotionPromotionStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PromotionPromotionStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PromotionPromotionStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PromotionPromotionStatus
   * @throws IOException if the JSON string is invalid with respect to PromotionPromotionStatus
   */
  public static PromotionPromotionStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PromotionPromotionStatus.class);
  }

  /**
   * Convert an instance of PromotionPromotionStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

