/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReturnPolicyOnlineReturnShippingFee;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The return reason category info wrapper.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReturnPolicyOnlineReturnReasonCategoryInfo {
  /**
   * The corresponding return label source.
   */
  @JsonAdapter(ReturnLabelSourceEnum.Adapter.class)
  public enum ReturnLabelSourceEnum {
    RETURN_LABEL_SOURCE_UNSPECIFIED("RETURN_LABEL_SOURCE_UNSPECIFIED"),
    
    DOWNLOAD_AND_PRINT("DOWNLOAD_AND_PRINT"),
    
    IN_THE_BOX("IN_THE_BOX"),
    
    CUSTOMER_RESPONSIBILITY("CUSTOMER_RESPONSIBILITY");

    private String value;

    ReturnLabelSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReturnLabelSourceEnum fromValue(String value) {
      for (ReturnLabelSourceEnum b : ReturnLabelSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReturnLabelSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReturnLabelSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReturnLabelSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReturnLabelSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReturnLabelSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RETURN_LABEL_SOURCE = "returnLabelSource";
  @SerializedName(SERIALIZED_NAME_RETURN_LABEL_SOURCE)
  private ReturnLabelSourceEnum returnLabelSource;

  /**
   * The return reason category.
   */
  @JsonAdapter(ReturnReasonCategoryEnum.Adapter.class)
  public enum ReturnReasonCategoryEnum {
    RETURN_REASON_CATEGORY_UNSPECIFIED("RETURN_REASON_CATEGORY_UNSPECIFIED"),
    
    BUYER_REMORSE("BUYER_REMORSE"),
    
    ITEM_DEFECT("ITEM_DEFECT");

    private String value;

    ReturnReasonCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReturnReasonCategoryEnum fromValue(String value) {
      for (ReturnReasonCategoryEnum b : ReturnReasonCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReturnReasonCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReturnReasonCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReturnReasonCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReturnReasonCategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReturnReasonCategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RETURN_REASON_CATEGORY = "returnReasonCategory";
  @SerializedName(SERIALIZED_NAME_RETURN_REASON_CATEGORY)
  private ReturnReasonCategoryEnum returnReasonCategory;

  public static final String SERIALIZED_NAME_RETURN_SHIPPING_FEE = "returnShippingFee";
  @SerializedName(SERIALIZED_NAME_RETURN_SHIPPING_FEE)
  private ReturnPolicyOnlineReturnShippingFee returnShippingFee;

  public ReturnPolicyOnlineReturnReasonCategoryInfo() {
  }

  public ReturnPolicyOnlineReturnReasonCategoryInfo returnLabelSource(ReturnLabelSourceEnum returnLabelSource) {
    this.returnLabelSource = returnLabelSource;
    return this;
  }

  /**
   * The corresponding return label source.
   * @return returnLabelSource
   */
  @javax.annotation.Nullable
  public ReturnLabelSourceEnum getReturnLabelSource() {
    return returnLabelSource;
  }

  public void setReturnLabelSource(ReturnLabelSourceEnum returnLabelSource) {
    this.returnLabelSource = returnLabelSource;
  }


  public ReturnPolicyOnlineReturnReasonCategoryInfo returnReasonCategory(ReturnReasonCategoryEnum returnReasonCategory) {
    this.returnReasonCategory = returnReasonCategory;
    return this;
  }

  /**
   * The return reason category.
   * @return returnReasonCategory
   */
  @javax.annotation.Nullable
  public ReturnReasonCategoryEnum getReturnReasonCategory() {
    return returnReasonCategory;
  }

  public void setReturnReasonCategory(ReturnReasonCategoryEnum returnReasonCategory) {
    this.returnReasonCategory = returnReasonCategory;
  }


  public ReturnPolicyOnlineReturnReasonCategoryInfo returnShippingFee(ReturnPolicyOnlineReturnShippingFee returnShippingFee) {
    this.returnShippingFee = returnShippingFee;
    return this;
  }

  /**
   * Get returnShippingFee
   * @return returnShippingFee
   */
  @javax.annotation.Nullable
  public ReturnPolicyOnlineReturnShippingFee getReturnShippingFee() {
    return returnShippingFee;
  }

  public void setReturnShippingFee(ReturnPolicyOnlineReturnShippingFee returnShippingFee) {
    this.returnShippingFee = returnShippingFee;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReturnPolicyOnlineReturnReasonCategoryInfo returnPolicyOnlineReturnReasonCategoryInfo = (ReturnPolicyOnlineReturnReasonCategoryInfo) o;
    return Objects.equals(this.returnLabelSource, returnPolicyOnlineReturnReasonCategoryInfo.returnLabelSource) &&
        Objects.equals(this.returnReasonCategory, returnPolicyOnlineReturnReasonCategoryInfo.returnReasonCategory) &&
        Objects.equals(this.returnShippingFee, returnPolicyOnlineReturnReasonCategoryInfo.returnShippingFee);
  }

  @Override
  public int hashCode() {
    return Objects.hash(returnLabelSource, returnReasonCategory, returnShippingFee);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReturnPolicyOnlineReturnReasonCategoryInfo {\n");
    sb.append("    returnLabelSource: ").append(toIndentedString(returnLabelSource)).append("\n");
    sb.append("    returnReasonCategory: ").append(toIndentedString(returnReasonCategory)).append("\n");
    sb.append("    returnShippingFee: ").append(toIndentedString(returnShippingFee)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("returnLabelSource");
    openapiFields.add("returnReasonCategory");
    openapiFields.add("returnShippingFee");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReturnPolicyOnlineReturnReasonCategoryInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReturnPolicyOnlineReturnReasonCategoryInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReturnPolicyOnlineReturnReasonCategoryInfo is not found in the empty JSON string", ReturnPolicyOnlineReturnReasonCategoryInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReturnPolicyOnlineReturnReasonCategoryInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReturnPolicyOnlineReturnReasonCategoryInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("returnLabelSource") != null && !jsonObj.get("returnLabelSource").isJsonNull()) && !jsonObj.get("returnLabelSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnLabelSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnLabelSource").toString()));
      }
      // validate the optional field `returnLabelSource`
      if (jsonObj.get("returnLabelSource") != null && !jsonObj.get("returnLabelSource").isJsonNull()) {
        ReturnLabelSourceEnum.validateJsonElement(jsonObj.get("returnLabelSource"));
      }
      if ((jsonObj.get("returnReasonCategory") != null && !jsonObj.get("returnReasonCategory").isJsonNull()) && !jsonObj.get("returnReasonCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnReasonCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnReasonCategory").toString()));
      }
      // validate the optional field `returnReasonCategory`
      if (jsonObj.get("returnReasonCategory") != null && !jsonObj.get("returnReasonCategory").isJsonNull()) {
        ReturnReasonCategoryEnum.validateJsonElement(jsonObj.get("returnReasonCategory"));
      }
      // validate the optional field `returnShippingFee`
      if (jsonObj.get("returnShippingFee") != null && !jsonObj.get("returnShippingFee").isJsonNull()) {
        ReturnPolicyOnlineReturnShippingFee.validateJsonElement(jsonObj.get("returnShippingFee"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReturnPolicyOnlineReturnReasonCategoryInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReturnPolicyOnlineReturnReasonCategoryInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReturnPolicyOnlineReturnReasonCategoryInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReturnPolicyOnlineReturnReasonCategoryInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ReturnPolicyOnlineReturnReasonCategoryInfo>() {
           @Override
           public void write(JsonWriter out, ReturnPolicyOnlineReturnReasonCategoryInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReturnPolicyOnlineReturnReasonCategoryInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReturnPolicyOnlineReturnReasonCategoryInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReturnPolicyOnlineReturnReasonCategoryInfo
   * @throws IOException if the JSON string is invalid with respect to ReturnPolicyOnlineReturnReasonCategoryInfo
   */
  public static ReturnPolicyOnlineReturnReasonCategoryInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReturnPolicyOnlineReturnReasonCategoryInfo.class);
  }

  /**
   * Convert an instance of ReturnPolicyOnlineReturnReasonCategoryInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

