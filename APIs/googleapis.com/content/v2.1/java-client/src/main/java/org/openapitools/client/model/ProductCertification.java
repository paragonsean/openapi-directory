/*
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Product [certification](https://support.google.com/merchants/answer/13528839), introduced for EU energy efficiency labeling compliance using the [EU EPREL](https://eprel.ec.europa.eu/screen/home) database.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:00.560037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductCertification {
  public static final String SERIALIZED_NAME_CERTIFICATION_AUTHORITY = "certificationAuthority";
  @SerializedName(SERIALIZED_NAME_CERTIFICATION_AUTHORITY)
  private String certificationAuthority;

  public static final String SERIALIZED_NAME_CERTIFICATION_CODE = "certificationCode";
  @SerializedName(SERIALIZED_NAME_CERTIFICATION_CODE)
  private String certificationCode;

  public static final String SERIALIZED_NAME_CERTIFICATION_NAME = "certificationName";
  @SerializedName(SERIALIZED_NAME_CERTIFICATION_NAME)
  private String certificationName;

  public ProductCertification() {
  }

  public ProductCertification certificationAuthority(String certificationAuthority) {
    this.certificationAuthority = certificationAuthority;
    return this;
  }

  /**
   * The certification authority, for example \&quot;European_Commission\&quot;. Maximum length is 2000 characters.
   * @return certificationAuthority
   */
  @javax.annotation.Nullable
  public String getCertificationAuthority() {
    return certificationAuthority;
  }

  public void setCertificationAuthority(String certificationAuthority) {
    this.certificationAuthority = certificationAuthority;
  }


  public ProductCertification certificationCode(String certificationCode) {
    this.certificationCode = certificationCode;
    return this;
  }

  /**
   * The certification code, for eaxample \&quot;123456\&quot;. Maximum length is 2000 characters.
   * @return certificationCode
   */
  @javax.annotation.Nullable
  public String getCertificationCode() {
    return certificationCode;
  }

  public void setCertificationCode(String certificationCode) {
    this.certificationCode = certificationCode;
  }


  public ProductCertification certificationName(String certificationName) {
    this.certificationName = certificationName;
    return this;
  }

  /**
   * The name of the certification, for example \&quot;EPREL\&quot;. Maximum length is 2000 characters.
   * @return certificationName
   */
  @javax.annotation.Nullable
  public String getCertificationName() {
    return certificationName;
  }

  public void setCertificationName(String certificationName) {
    this.certificationName = certificationName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductCertification productCertification = (ProductCertification) o;
    return Objects.equals(this.certificationAuthority, productCertification.certificationAuthority) &&
        Objects.equals(this.certificationCode, productCertification.certificationCode) &&
        Objects.equals(this.certificationName, productCertification.certificationName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificationAuthority, certificationCode, certificationName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductCertification {\n");
    sb.append("    certificationAuthority: ").append(toIndentedString(certificationAuthority)).append("\n");
    sb.append("    certificationCode: ").append(toIndentedString(certificationCode)).append("\n");
    sb.append("    certificationName: ").append(toIndentedString(certificationName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificationAuthority");
    openapiFields.add("certificationCode");
    openapiFields.add("certificationName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductCertification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductCertification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductCertification is not found in the empty JSON string", ProductCertification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductCertification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductCertification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("certificationAuthority") != null && !jsonObj.get("certificationAuthority").isJsonNull()) && !jsonObj.get("certificationAuthority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificationAuthority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificationAuthority").toString()));
      }
      if ((jsonObj.get("certificationCode") != null && !jsonObj.get("certificationCode").isJsonNull()) && !jsonObj.get("certificationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificationCode").toString()));
      }
      if ((jsonObj.get("certificationName") != null && !jsonObj.get("certificationName").isJsonNull()) && !jsonObj.get("certificationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificationName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductCertification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductCertification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductCertification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductCertification.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductCertification>() {
           @Override
           public void write(JsonWriter out, ProductCertification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductCertification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductCertification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductCertification
   * @throws IOException if the JSON string is invalid with respect to ProductCertification
   */
  public static ProductCertification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductCertification.class);
  }

  /**
   * Convert an instance of ProductCertification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

